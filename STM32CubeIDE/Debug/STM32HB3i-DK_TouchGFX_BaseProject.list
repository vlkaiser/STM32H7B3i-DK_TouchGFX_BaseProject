
STM32HB3i-DK_TouchGFX_BaseProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002a064  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e64  0802a314  0802a314  0003a314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontSearchFlashSection 0000001c  0802c178  0802c178  0003c178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000008  0802c194  0802c194  0003c194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000014  0802c19c  0802c19c  0003c19c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000008  0802c1b0  0802c1b0  0003c1b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         00000114  24000000  0802c1b8  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00007ae8  24000114  0802c2cc  00040114  2**2
                  ALLOC
  9 ._user_heap_stack 00002004  24007bfc  0802c2cc  00047bfc  2**0
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  00110428  2**0
                  CONTENTS, READONLY
 11 FramebufferSection 000bf400  24040000  24040000  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 FontFlashSection 00000404  90000000  90000000  00110000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 TextFlashSection 00000024  90000404  90000404  00110404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 ExtFlashSection 00000000  90000428  90000428  00110456  2**0
                  CONTENTS
 15 .comment      000000c2  00000000  00000000  00110456  2**0
                  CONTENTS, READONLY
 16 .debug_info   0009aa93  00000000  00000000  00110518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 000122bc  00000000  00000000  001aafab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00004210  00000000  00000000  001bd268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00003239  00000000  00000000  001c1478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0004452b  00000000  00000000  001c46b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   00059820  00000000  00000000  00208bdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    0017eaff  00000000  00000000  002623fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_frame  000121e4  00000000  00000000  003e0efc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 000000b2  00000000  00000000  003f30e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000114 	.word	0x24000114
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0802a2fc 	.word	0x0802a2fc

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000118 	.word	0x24000118
 80002ec:	0802a2fc 	.word	0x0802a2fc

080002f0 <strcmp>:
 80002f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002f8:	2a01      	cmp	r2, #1
 80002fa:	bf28      	it	cs
 80002fc:	429a      	cmpcs	r2, r3
 80002fe:	d0f7      	beq.n	80002f0 <strcmp>
 8000300:	1ad0      	subs	r0, r2, r3
 8000302:	4770      	bx	lr

08000304 <strlen>:
 8000304:	4603      	mov	r3, r0
 8000306:	f813 2b01 	ldrb.w	r2, [r3], #1
 800030a:	2a00      	cmp	r2, #0
 800030c:	d1fb      	bne.n	8000306 <strlen+0x2>
 800030e:	1a18      	subs	r0, r3, r0
 8000310:	3801      	subs	r0, #1
 8000312:	4770      	bx	lr
	...

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b970 	b.w	80006b8 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9e08      	ldr	r6, [sp, #32]
 80003f6:	460d      	mov	r5, r1
 80003f8:	4604      	mov	r4, r0
 80003fa:	460f      	mov	r7, r1
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d14a      	bne.n	8000496 <__udivmoddi4+0xa6>
 8000400:	428a      	cmp	r2, r1
 8000402:	4694      	mov	ip, r2
 8000404:	d965      	bls.n	80004d2 <__udivmoddi4+0xe2>
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	b143      	cbz	r3, 800041e <__udivmoddi4+0x2e>
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	f1c3 0220 	rsb	r2, r3, #32
 8000414:	409f      	lsls	r7, r3
 8000416:	fa20 f202 	lsr.w	r2, r0, r2
 800041a:	4317      	orrs	r7, r2
 800041c:	409c      	lsls	r4, r3
 800041e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000422:	fa1f f58c 	uxth.w	r5, ip
 8000426:	fbb7 f1fe 	udiv	r1, r7, lr
 800042a:	0c22      	lsrs	r2, r4, #16
 800042c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000430:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000434:	fb01 f005 	mul.w	r0, r1, r5
 8000438:	4290      	cmp	r0, r2
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x62>
 800043c:	eb1c 0202 	adds.w	r2, ip, r2
 8000440:	f101 37ff 	add.w	r7, r1, #4294967295
 8000444:	f080 811c 	bcs.w	8000680 <__udivmoddi4+0x290>
 8000448:	4290      	cmp	r0, r2
 800044a:	f240 8119 	bls.w	8000680 <__udivmoddi4+0x290>
 800044e:	3902      	subs	r1, #2
 8000450:	4462      	add	r2, ip
 8000452:	1a12      	subs	r2, r2, r0
 8000454:	b2a4      	uxth	r4, r4
 8000456:	fbb2 f0fe 	udiv	r0, r2, lr
 800045a:	fb0e 2210 	mls	r2, lr, r0, r2
 800045e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000462:	fb00 f505 	mul.w	r5, r0, r5
 8000466:	42a5      	cmp	r5, r4
 8000468:	d90a      	bls.n	8000480 <__udivmoddi4+0x90>
 800046a:	eb1c 0404 	adds.w	r4, ip, r4
 800046e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000472:	f080 8107 	bcs.w	8000684 <__udivmoddi4+0x294>
 8000476:	42a5      	cmp	r5, r4
 8000478:	f240 8104 	bls.w	8000684 <__udivmoddi4+0x294>
 800047c:	4464      	add	r4, ip
 800047e:	3802      	subs	r0, #2
 8000480:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000484:	1b64      	subs	r4, r4, r5
 8000486:	2100      	movs	r1, #0
 8000488:	b11e      	cbz	r6, 8000492 <__udivmoddi4+0xa2>
 800048a:	40dc      	lsrs	r4, r3
 800048c:	2300      	movs	r3, #0
 800048e:	e9c6 4300 	strd	r4, r3, [r6]
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	428b      	cmp	r3, r1
 8000498:	d908      	bls.n	80004ac <__udivmoddi4+0xbc>
 800049a:	2e00      	cmp	r6, #0
 800049c:	f000 80ed 	beq.w	800067a <__udivmoddi4+0x28a>
 80004a0:	2100      	movs	r1, #0
 80004a2:	e9c6 0500 	strd	r0, r5, [r6]
 80004a6:	4608      	mov	r0, r1
 80004a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ac:	fab3 f183 	clz	r1, r3
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d149      	bne.n	8000548 <__udivmoddi4+0x158>
 80004b4:	42ab      	cmp	r3, r5
 80004b6:	d302      	bcc.n	80004be <__udivmoddi4+0xce>
 80004b8:	4282      	cmp	r2, r0
 80004ba:	f200 80f8 	bhi.w	80006ae <__udivmoddi4+0x2be>
 80004be:	1a84      	subs	r4, r0, r2
 80004c0:	eb65 0203 	sbc.w	r2, r5, r3
 80004c4:	2001      	movs	r0, #1
 80004c6:	4617      	mov	r7, r2
 80004c8:	2e00      	cmp	r6, #0
 80004ca:	d0e2      	beq.n	8000492 <__udivmoddi4+0xa2>
 80004cc:	e9c6 4700 	strd	r4, r7, [r6]
 80004d0:	e7df      	b.n	8000492 <__udivmoddi4+0xa2>
 80004d2:	b902      	cbnz	r2, 80004d6 <__udivmoddi4+0xe6>
 80004d4:	deff      	udf	#255	; 0xff
 80004d6:	fab2 f382 	clz	r3, r2
 80004da:	2b00      	cmp	r3, #0
 80004dc:	f040 8090 	bne.w	8000600 <__udivmoddi4+0x210>
 80004e0:	1a8a      	subs	r2, r1, r2
 80004e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e6:	fa1f fe8c 	uxth.w	lr, ip
 80004ea:	2101      	movs	r1, #1
 80004ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80004f0:	fb07 2015 	mls	r0, r7, r5, r2
 80004f4:	0c22      	lsrs	r2, r4, #16
 80004f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004fa:	fb0e f005 	mul.w	r0, lr, r5
 80004fe:	4290      	cmp	r0, r2
 8000500:	d908      	bls.n	8000514 <__udivmoddi4+0x124>
 8000502:	eb1c 0202 	adds.w	r2, ip, r2
 8000506:	f105 38ff 	add.w	r8, r5, #4294967295
 800050a:	d202      	bcs.n	8000512 <__udivmoddi4+0x122>
 800050c:	4290      	cmp	r0, r2
 800050e:	f200 80cb 	bhi.w	80006a8 <__udivmoddi4+0x2b8>
 8000512:	4645      	mov	r5, r8
 8000514:	1a12      	subs	r2, r2, r0
 8000516:	b2a4      	uxth	r4, r4
 8000518:	fbb2 f0f7 	udiv	r0, r2, r7
 800051c:	fb07 2210 	mls	r2, r7, r0, r2
 8000520:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000524:	fb0e fe00 	mul.w	lr, lr, r0
 8000528:	45a6      	cmp	lr, r4
 800052a:	d908      	bls.n	800053e <__udivmoddi4+0x14e>
 800052c:	eb1c 0404 	adds.w	r4, ip, r4
 8000530:	f100 32ff 	add.w	r2, r0, #4294967295
 8000534:	d202      	bcs.n	800053c <__udivmoddi4+0x14c>
 8000536:	45a6      	cmp	lr, r4
 8000538:	f200 80bb 	bhi.w	80006b2 <__udivmoddi4+0x2c2>
 800053c:	4610      	mov	r0, r2
 800053e:	eba4 040e 	sub.w	r4, r4, lr
 8000542:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000546:	e79f      	b.n	8000488 <__udivmoddi4+0x98>
 8000548:	f1c1 0720 	rsb	r7, r1, #32
 800054c:	408b      	lsls	r3, r1
 800054e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000552:	ea4c 0c03 	orr.w	ip, ip, r3
 8000556:	fa05 f401 	lsl.w	r4, r5, r1
 800055a:	fa20 f307 	lsr.w	r3, r0, r7
 800055e:	40fd      	lsrs	r5, r7
 8000560:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000564:	4323      	orrs	r3, r4
 8000566:	fbb5 f8f9 	udiv	r8, r5, r9
 800056a:	fa1f fe8c 	uxth.w	lr, ip
 800056e:	fb09 5518 	mls	r5, r9, r8, r5
 8000572:	0c1c      	lsrs	r4, r3, #16
 8000574:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000578:	fb08 f50e 	mul.w	r5, r8, lr
 800057c:	42a5      	cmp	r5, r4
 800057e:	fa02 f201 	lsl.w	r2, r2, r1
 8000582:	fa00 f001 	lsl.w	r0, r0, r1
 8000586:	d90b      	bls.n	80005a0 <__udivmoddi4+0x1b0>
 8000588:	eb1c 0404 	adds.w	r4, ip, r4
 800058c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000590:	f080 8088 	bcs.w	80006a4 <__udivmoddi4+0x2b4>
 8000594:	42a5      	cmp	r5, r4
 8000596:	f240 8085 	bls.w	80006a4 <__udivmoddi4+0x2b4>
 800059a:	f1a8 0802 	sub.w	r8, r8, #2
 800059e:	4464      	add	r4, ip
 80005a0:	1b64      	subs	r4, r4, r5
 80005a2:	b29d      	uxth	r5, r3
 80005a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80005a8:	fb09 4413 	mls	r4, r9, r3, r4
 80005ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80005b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80005b4:	45a6      	cmp	lr, r4
 80005b6:	d908      	bls.n	80005ca <__udivmoddi4+0x1da>
 80005b8:	eb1c 0404 	adds.w	r4, ip, r4
 80005bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80005c0:	d26c      	bcs.n	800069c <__udivmoddi4+0x2ac>
 80005c2:	45a6      	cmp	lr, r4
 80005c4:	d96a      	bls.n	800069c <__udivmoddi4+0x2ac>
 80005c6:	3b02      	subs	r3, #2
 80005c8:	4464      	add	r4, ip
 80005ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80005ce:	fba3 9502 	umull	r9, r5, r3, r2
 80005d2:	eba4 040e 	sub.w	r4, r4, lr
 80005d6:	42ac      	cmp	r4, r5
 80005d8:	46c8      	mov	r8, r9
 80005da:	46ae      	mov	lr, r5
 80005dc:	d356      	bcc.n	800068c <__udivmoddi4+0x29c>
 80005de:	d053      	beq.n	8000688 <__udivmoddi4+0x298>
 80005e0:	b156      	cbz	r6, 80005f8 <__udivmoddi4+0x208>
 80005e2:	ebb0 0208 	subs.w	r2, r0, r8
 80005e6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ea:	fa04 f707 	lsl.w	r7, r4, r7
 80005ee:	40ca      	lsrs	r2, r1
 80005f0:	40cc      	lsrs	r4, r1
 80005f2:	4317      	orrs	r7, r2
 80005f4:	e9c6 7400 	strd	r7, r4, [r6]
 80005f8:	4618      	mov	r0, r3
 80005fa:	2100      	movs	r1, #0
 80005fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000600:	f1c3 0120 	rsb	r1, r3, #32
 8000604:	fa02 fc03 	lsl.w	ip, r2, r3
 8000608:	fa20 f201 	lsr.w	r2, r0, r1
 800060c:	fa25 f101 	lsr.w	r1, r5, r1
 8000610:	409d      	lsls	r5, r3
 8000612:	432a      	orrs	r2, r5
 8000614:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000618:	fa1f fe8c 	uxth.w	lr, ip
 800061c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000620:	fb07 1510 	mls	r5, r7, r0, r1
 8000624:	0c11      	lsrs	r1, r2, #16
 8000626:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800062a:	fb00 f50e 	mul.w	r5, r0, lr
 800062e:	428d      	cmp	r5, r1
 8000630:	fa04 f403 	lsl.w	r4, r4, r3
 8000634:	d908      	bls.n	8000648 <__udivmoddi4+0x258>
 8000636:	eb1c 0101 	adds.w	r1, ip, r1
 800063a:	f100 38ff 	add.w	r8, r0, #4294967295
 800063e:	d22f      	bcs.n	80006a0 <__udivmoddi4+0x2b0>
 8000640:	428d      	cmp	r5, r1
 8000642:	d92d      	bls.n	80006a0 <__udivmoddi4+0x2b0>
 8000644:	3802      	subs	r0, #2
 8000646:	4461      	add	r1, ip
 8000648:	1b49      	subs	r1, r1, r5
 800064a:	b292      	uxth	r2, r2
 800064c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000650:	fb07 1115 	mls	r1, r7, r5, r1
 8000654:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000658:	fb05 f10e 	mul.w	r1, r5, lr
 800065c:	4291      	cmp	r1, r2
 800065e:	d908      	bls.n	8000672 <__udivmoddi4+0x282>
 8000660:	eb1c 0202 	adds.w	r2, ip, r2
 8000664:	f105 38ff 	add.w	r8, r5, #4294967295
 8000668:	d216      	bcs.n	8000698 <__udivmoddi4+0x2a8>
 800066a:	4291      	cmp	r1, r2
 800066c:	d914      	bls.n	8000698 <__udivmoddi4+0x2a8>
 800066e:	3d02      	subs	r5, #2
 8000670:	4462      	add	r2, ip
 8000672:	1a52      	subs	r2, r2, r1
 8000674:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000678:	e738      	b.n	80004ec <__udivmoddi4+0xfc>
 800067a:	4631      	mov	r1, r6
 800067c:	4630      	mov	r0, r6
 800067e:	e708      	b.n	8000492 <__udivmoddi4+0xa2>
 8000680:	4639      	mov	r1, r7
 8000682:	e6e6      	b.n	8000452 <__udivmoddi4+0x62>
 8000684:	4610      	mov	r0, r2
 8000686:	e6fb      	b.n	8000480 <__udivmoddi4+0x90>
 8000688:	4548      	cmp	r0, r9
 800068a:	d2a9      	bcs.n	80005e0 <__udivmoddi4+0x1f0>
 800068c:	ebb9 0802 	subs.w	r8, r9, r2
 8000690:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000694:	3b01      	subs	r3, #1
 8000696:	e7a3      	b.n	80005e0 <__udivmoddi4+0x1f0>
 8000698:	4645      	mov	r5, r8
 800069a:	e7ea      	b.n	8000672 <__udivmoddi4+0x282>
 800069c:	462b      	mov	r3, r5
 800069e:	e794      	b.n	80005ca <__udivmoddi4+0x1da>
 80006a0:	4640      	mov	r0, r8
 80006a2:	e7d1      	b.n	8000648 <__udivmoddi4+0x258>
 80006a4:	46d0      	mov	r8, sl
 80006a6:	e77b      	b.n	80005a0 <__udivmoddi4+0x1b0>
 80006a8:	3d02      	subs	r5, #2
 80006aa:	4462      	add	r2, ip
 80006ac:	e732      	b.n	8000514 <__udivmoddi4+0x124>
 80006ae:	4608      	mov	r0, r1
 80006b0:	e70a      	b.n	80004c8 <__udivmoddi4+0xd8>
 80006b2:	4464      	add	r4, ip
 80006b4:	3802      	subs	r0, #2
 80006b6:	e742      	b.n	800053e <__udivmoddi4+0x14e>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <Send_Uart>:
DWORD fre_clust;
uint32_t total, free_space;


void Send_Uart (char *string)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(UART, (uint8_t *)string, strlen (string), HAL_MAX_DELAY);
 80006c4:	6878      	ldr	r0, [r7, #4]
 80006c6:	f7ff fe1d 	bl	8000304 <strlen>
 80006ca:	4603      	mov	r3, r0
 80006cc:	b29a      	uxth	r2, r3
 80006ce:	f04f 33ff 	mov.w	r3, #4294967295
 80006d2:	6879      	ldr	r1, [r7, #4]
 80006d4:	4803      	ldr	r0, [pc, #12]	; (80006e4 <Send_Uart+0x28>)
 80006d6:	f011 f857 	bl	8011788 <HAL_UART_Transmit>
}
 80006da:	bf00      	nop
 80006dc:	3708      	adds	r7, #8
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	24000814 	.word	0x24000814

080006e8 <Mount_SD>:



void Mount_SD (const TCHAR* path)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
	//Changedd the optional byte to 0 from 1 - that fixed the mounting issue
	fresult = f_mount(&fs, path, 0);
 80006f0:	2200      	movs	r2, #0
 80006f2:	6879      	ldr	r1, [r7, #4]
 80006f4:	480a      	ldr	r0, [pc, #40]	; (8000720 <Mount_SD+0x38>)
 80006f6:	f014 fe3b 	bl	8015370 <f_mount>
 80006fa:	4603      	mov	r3, r0
 80006fc:	461a      	mov	r2, r3
 80006fe:	4b09      	ldr	r3, [pc, #36]	; (8000724 <Mount_SD+0x3c>)
 8000700:	701a      	strb	r2, [r3, #0]
	#ifdef DEBUG
		if (fresult != FR_OK) Send_Uart ("ERROR in MOUNTING SD CARD...\r\n");
 8000702:	4b08      	ldr	r3, [pc, #32]	; (8000724 <Mount_SD+0x3c>)
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	2b00      	cmp	r3, #0
 8000708:	d003      	beq.n	8000712 <Mount_SD+0x2a>
 800070a:	4807      	ldr	r0, [pc, #28]	; (8000728 <Mount_SD+0x40>)
 800070c:	f7ff ffd6 	bl	80006bc <Send_Uart>
		else Send_Uart("SD CARD MOUNTED successfully...\r\n");
	#endif
}
 8000710:	e002      	b.n	8000718 <Mount_SD+0x30>
		else Send_Uart("SD CARD MOUNTED successfully...\r\n");
 8000712:	4806      	ldr	r0, [pc, #24]	; (800072c <Mount_SD+0x44>)
 8000714:	f7ff ffd2 	bl	80006bc <Send_Uart>
}
 8000718:	bf00      	nop
 800071a:	3708      	adds	r7, #8
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	24000130 	.word	0x24000130
 8000724:	240005ac 	.word	0x240005ac
 8000728:	0802a314 	.word	0x0802a314
 800072c:	0802a334 	.word	0x0802a334

08000730 <Unmount_SD>:

void Unmount_SD (const TCHAR* path)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
	fresult = f_mount(NULL, path, 0);
 8000738:	2200      	movs	r2, #0
 800073a:	6879      	ldr	r1, [r7, #4]
 800073c:	2000      	movs	r0, #0
 800073e:	f014 fe17 	bl	8015370 <f_mount>
 8000742:	4603      	mov	r3, r0
 8000744:	461a      	mov	r2, r3
 8000746:	4b08      	ldr	r3, [pc, #32]	; (8000768 <Unmount_SD+0x38>)
 8000748:	701a      	strb	r2, [r3, #0]
	#ifdef DEBUG
		if (fresult == FR_OK) Send_Uart ("SD CARD UNMOUNTED successfully...\r\n");
 800074a:	4b07      	ldr	r3, [pc, #28]	; (8000768 <Unmount_SD+0x38>)
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	2b00      	cmp	r3, #0
 8000750:	d103      	bne.n	800075a <Unmount_SD+0x2a>
 8000752:	4806      	ldr	r0, [pc, #24]	; (800076c <Unmount_SD+0x3c>)
 8000754:	f7ff ffb2 	bl	80006bc <Send_Uart>
		else Send_Uart("ERROR in UNMOUNTING SD CARD\r\n");
	#endif
}
 8000758:	e002      	b.n	8000760 <Unmount_SD+0x30>
		else Send_Uart("ERROR in UNMOUNTING SD CARD\r\n");
 800075a:	4805      	ldr	r0, [pc, #20]	; (8000770 <Unmount_SD+0x40>)
 800075c:	f7ff ffae 	bl	80006bc <Send_Uart>
}
 8000760:	bf00      	nop
 8000762:	3708      	adds	r7, #8
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	240005ac 	.word	0x240005ac
 800076c:	0802a358 	.word	0x0802a358
 8000770:	0802a37c 	.word	0x0802a37c

08000774 <Format_SD>:

/* Only supports removing files from home directory */
FRESULT Format_SD (void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
    //DIR dir;
    DIR* dir;
    char *path = malloc(20*sizeof (char));
 800077a:	2014      	movs	r0, #20
 800077c:	f028 fbee 	bl	8028f5c <malloc>
 8000780:	4603      	mov	r3, r0
 8000782:	607b      	str	r3, [r7, #4]
    sprintf (path, "%s","/");
 8000784:	4a2e      	ldr	r2, [pc, #184]	; (8000840 <Format_SD+0xcc>)
 8000786:	492f      	ldr	r1, [pc, #188]	; (8000844 <Format_SD+0xd0>)
 8000788:	6878      	ldr	r0, [r7, #4]
 800078a:	f028 fd85 	bl	8029298 <siprintf>

    //fresult = f_opendir(&dir, path);                       /* Open the directory */
    fresult = f_opendir(dir, path);                       /* Open the directory */
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	6879      	ldr	r1, [r7, #4]
 8000792:	4618      	mov	r0, r3
 8000794:	f015 fa71 	bl	8015c7a <f_opendir>
 8000798:	4603      	mov	r3, r0
 800079a:	461a      	mov	r2, r3
 800079c:	4b2a      	ldr	r3, [pc, #168]	; (8000848 <Format_SD+0xd4>)
 800079e:	701a      	strb	r2, [r3, #0]

	#ifdef DEBUG
		if (fresult == FR_OK) Send_Uart ("SD CARD FORMATTED successfully...\r\n");
 80007a0:	4b29      	ldr	r3, [pc, #164]	; (8000848 <Format_SD+0xd4>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d103      	bne.n	80007b0 <Format_SD+0x3c>
 80007a8:	4828      	ldr	r0, [pc, #160]	; (800084c <Format_SD+0xd8>)
 80007aa:	f7ff ff87 	bl	80006bc <Send_Uart>
 80007ae:	e002      	b.n	80007b6 <Format_SD+0x42>
		else Send_Uart("ERROR in FORMATTING SD CARD\r\n");
 80007b0:	4827      	ldr	r0, [pc, #156]	; (8000850 <Format_SD+0xdc>)
 80007b2:	f7ff ff83 	bl	80006bc <Send_Uart>
	#endif


    if (fresult == FR_OK)
 80007b6:	4b24      	ldr	r3, [pc, #144]	; (8000848 <Format_SD+0xd4>)
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d136      	bne.n	800082c <Format_SD+0xb8>
    {
        for (;;)
        {
            fresult = f_readdir(&dir, &fno);                   /* Read a directory item */
 80007be:	463b      	mov	r3, r7
 80007c0:	4924      	ldr	r1, [pc, #144]	; (8000854 <Format_SD+0xe0>)
 80007c2:	4618      	mov	r0, r3
 80007c4:	f015 fafd 	bl	8015dc2 <f_readdir>
 80007c8:	4603      	mov	r3, r0
 80007ca:	461a      	mov	r2, r3
 80007cc:	4b1e      	ldr	r3, [pc, #120]	; (8000848 <Format_SD+0xd4>)
 80007ce:	701a      	strb	r2, [r3, #0]
            if (fresult != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 80007d0:	4b1d      	ldr	r3, [pc, #116]	; (8000848 <Format_SD+0xd4>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d125      	bne.n	8000824 <Format_SD+0xb0>
 80007d8:	4b1e      	ldr	r3, [pc, #120]	; (8000854 <Format_SD+0xe0>)
 80007da:	7a5b      	ldrb	r3, [r3, #9]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d021      	beq.n	8000824 <Format_SD+0xb0>
            if (fno.fattrib & AM_DIR)     /* It is a directory */
 80007e0:	4b1c      	ldr	r3, [pc, #112]	; (8000854 <Format_SD+0xe0>)
 80007e2:	7a1b      	ldrb	r3, [r3, #8]
 80007e4:	f003 0310 	and.w	r3, r3, #16
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d011      	beq.n	8000810 <Format_SD+0x9c>
            {
            	if (!(strcmp ("SYSTEM~1", fno.fname))) continue;
 80007ec:	491a      	ldr	r1, [pc, #104]	; (8000858 <Format_SD+0xe4>)
 80007ee:	481b      	ldr	r0, [pc, #108]	; (800085c <Format_SD+0xe8>)
 80007f0:	f7ff fd7e 	bl	80002f0 <strcmp>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d012      	beq.n	8000820 <Format_SD+0xac>
            	fresult = f_unlink(fno.fname);
 80007fa:	4817      	ldr	r0, [pc, #92]	; (8000858 <Format_SD+0xe4>)
 80007fc:	f015 fb64 	bl	8015ec8 <f_unlink>
 8000800:	4603      	mov	r3, r0
 8000802:	461a      	mov	r2, r3
 8000804:	4b10      	ldr	r3, [pc, #64]	; (8000848 <Format_SD+0xd4>)
 8000806:	701a      	strb	r2, [r3, #0]
            	if (fresult == FR_DENIED) continue;
 8000808:	4b0f      	ldr	r3, [pc, #60]	; (8000848 <Format_SD+0xd4>)
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	2b07      	cmp	r3, #7
 800080e:	e7d6      	b.n	80007be <Format_SD+0x4a>
            }
            else
            {   /* It is a file. */
               fresult = f_unlink(fno.fname);
 8000810:	4811      	ldr	r0, [pc, #68]	; (8000858 <Format_SD+0xe4>)
 8000812:	f015 fb59 	bl	8015ec8 <f_unlink>
 8000816:	4603      	mov	r3, r0
 8000818:	461a      	mov	r2, r3
 800081a:	4b0b      	ldr	r3, [pc, #44]	; (8000848 <Format_SD+0xd4>)
 800081c:	701a      	strb	r2, [r3, #0]
 800081e:	e7ce      	b.n	80007be <Format_SD+0x4a>
            	if (!(strcmp ("SYSTEM~1", fno.fname))) continue;
 8000820:	bf00      	nop
            fresult = f_readdir(&dir, &fno);                   /* Read a directory item */
 8000822:	e7cc      	b.n	80007be <Format_SD+0x4a>
            }
        }
        f_closedir(&dir);
 8000824:	463b      	mov	r3, r7
 8000826:	4618      	mov	r0, r3
 8000828:	f015 faa0 	bl	8015d6c <f_closedir>
    }
    free(path);
 800082c:	6878      	ldr	r0, [r7, #4]
 800082e:	f028 fb9d 	bl	8028f6c <free>
    return fresult;
 8000832:	4b05      	ldr	r3, [pc, #20]	; (8000848 <Format_SD+0xd4>)
 8000834:	781b      	ldrb	r3, [r3, #0]
}
 8000836:	4618      	mov	r0, r3
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	0802a39c 	.word	0x0802a39c
 8000844:	0802a3a0 	.word	0x0802a3a0
 8000848:	240005ac 	.word	0x240005ac
 800084c:	0802a3a4 	.word	0x0802a3a4
 8000850:	0802a3c8 	.word	0x0802a3c8
 8000854:	24000594 	.word	0x24000594
 8000858:	2400059d 	.word	0x2400059d
 800085c:	0802a3e8 	.word	0x0802a3e8

08000860 <Create_File>:

FRESULT Create_File (char *name)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b088      	sub	sp, #32
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
	fresult = f_stat (name, &fno);
 8000868:	4943      	ldr	r1, [pc, #268]	; (8000978 <Create_File+0x118>)
 800086a:	6878      	ldr	r0, [r7, #4]
 800086c:	f015 faec 	bl	8015e48 <f_stat>
 8000870:	4603      	mov	r3, r0
 8000872:	461a      	mov	r2, r3
 8000874:	4b41      	ldr	r3, [pc, #260]	; (800097c <Create_File+0x11c>)
 8000876:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 8000878:	4b40      	ldr	r3, [pc, #256]	; (800097c <Create_File+0x11c>)
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d112      	bne.n	80008a6 <Create_File+0x46>
	{
		char *buf = malloc(100*sizeof(char));
 8000880:	2064      	movs	r0, #100	; 0x64
 8000882:	f028 fb6b 	bl	8028f5c <malloc>
 8000886:	4603      	mov	r3, r0
 8000888:	60fb      	str	r3, [r7, #12]
		sprintf (buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \n\n",name);
 800088a:	687a      	ldr	r2, [r7, #4]
 800088c:	493c      	ldr	r1, [pc, #240]	; (8000980 <Create_File+0x120>)
 800088e:	68f8      	ldr	r0, [r7, #12]
 8000890:	f028 fd02 	bl	8029298 <siprintf>
		Send_Uart(buf);
 8000894:	68f8      	ldr	r0, [r7, #12]
 8000896:	f7ff ff11 	bl	80006bc <Send_Uart>
		free(buf);
 800089a:	68f8      	ldr	r0, [r7, #12]
 800089c:	f028 fb66 	bl	8028f6c <free>
	    return fresult;
 80008a0:	4b36      	ldr	r3, [pc, #216]	; (800097c <Create_File+0x11c>)
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	e063      	b.n	800096e <Create_File+0x10e>
	}
	else
	{
		fresult = f_open(&fil, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 80008a6:	220b      	movs	r2, #11
 80008a8:	6879      	ldr	r1, [r7, #4]
 80008aa:	4836      	ldr	r0, [pc, #216]	; (8000984 <Create_File+0x124>)
 80008ac:	f014 fdc4 	bl	8015438 <f_open>
 80008b0:	4603      	mov	r3, r0
 80008b2:	461a      	mov	r2, r3
 80008b4:	4b31      	ldr	r3, [pc, #196]	; (800097c <Create_File+0x11c>)
 80008b6:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 80008b8:	4b30      	ldr	r3, [pc, #192]	; (800097c <Create_File+0x11c>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d015      	beq.n	80008ec <Create_File+0x8c>
		{
			char *buf = malloc(100*sizeof(char));
 80008c0:	2064      	movs	r0, #100	; 0x64
 80008c2:	f028 fb4b 	bl	8028f5c <malloc>
 80008c6:	4603      	mov	r3, r0
 80008c8:	613b      	str	r3, [r7, #16]
			sprintf (buf, "ERROR!!! No. %d in creating file *%s*\n\n", fresult, name);
 80008ca:	4b2c      	ldr	r3, [pc, #176]	; (800097c <Create_File+0x11c>)
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	461a      	mov	r2, r3
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	492d      	ldr	r1, [pc, #180]	; (8000988 <Create_File+0x128>)
 80008d4:	6938      	ldr	r0, [r7, #16]
 80008d6:	f028 fcdf 	bl	8029298 <siprintf>
			Send_Uart(buf);
 80008da:	6938      	ldr	r0, [r7, #16]
 80008dc:	f7ff feee 	bl	80006bc <Send_Uart>
			free(buf);
 80008e0:	6938      	ldr	r0, [r7, #16]
 80008e2:	f028 fb43 	bl	8028f6c <free>
		    return fresult;
 80008e6:	4b25      	ldr	r3, [pc, #148]	; (800097c <Create_File+0x11c>)
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	e040      	b.n	800096e <Create_File+0x10e>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 80008ec:	2064      	movs	r0, #100	; 0x64
 80008ee:	f028 fb35 	bl	8028f5c <malloc>
 80008f2:	4603      	mov	r3, r0
 80008f4:	61fb      	str	r3, [r7, #28]
			sprintf (buf, "*%s* created successfully\n Now use Write_File to write data\n",name);
 80008f6:	687a      	ldr	r2, [r7, #4]
 80008f8:	4924      	ldr	r1, [pc, #144]	; (800098c <Create_File+0x12c>)
 80008fa:	69f8      	ldr	r0, [r7, #28]
 80008fc:	f028 fccc 	bl	8029298 <siprintf>
			Send_Uart(buf);
 8000900:	69f8      	ldr	r0, [r7, #28]
 8000902:	f7ff fedb 	bl	80006bc <Send_Uart>
			free(buf);
 8000906:	69f8      	ldr	r0, [r7, #28]
 8000908:	f028 fb30 	bl	8028f6c <free>
		}

		fresult = f_close(&fil);
 800090c:	481d      	ldr	r0, [pc, #116]	; (8000984 <Create_File+0x124>)
 800090e:	f015 f985 	bl	8015c1c <f_close>
 8000912:	4603      	mov	r3, r0
 8000914:	461a      	mov	r2, r3
 8000916:	4b19      	ldr	r3, [pc, #100]	; (800097c <Create_File+0x11c>)
 8000918:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 800091a:	4b18      	ldr	r3, [pc, #96]	; (800097c <Create_File+0x11c>)
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d013      	beq.n	800094a <Create_File+0xea>
		{
			char *buf = malloc(100*sizeof(char));
 8000922:	2064      	movs	r0, #100	; 0x64
 8000924:	f028 fb1a 	bl	8028f5c <malloc>
 8000928:	4603      	mov	r3, r0
 800092a:	617b      	str	r3, [r7, #20]
			sprintf (buf, "ERROR No. %d in closing file *%s*\n\n", fresult, name);
 800092c:	4b13      	ldr	r3, [pc, #76]	; (800097c <Create_File+0x11c>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	461a      	mov	r2, r3
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	4916      	ldr	r1, [pc, #88]	; (8000990 <Create_File+0x130>)
 8000936:	6978      	ldr	r0, [r7, #20]
 8000938:	f028 fcae 	bl	8029298 <siprintf>
			Send_Uart(buf);
 800093c:	6978      	ldr	r0, [r7, #20]
 800093e:	f7ff febd 	bl	80006bc <Send_Uart>
			free(buf);
 8000942:	6978      	ldr	r0, [r7, #20]
 8000944:	f028 fb12 	bl	8028f6c <free>
 8000948:	e00f      	b.n	800096a <Create_File+0x10a>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 800094a:	2064      	movs	r0, #100	; 0x64
 800094c:	f028 fb06 	bl	8028f5c <malloc>
 8000950:	4603      	mov	r3, r0
 8000952:	61bb      	str	r3, [r7, #24]
			sprintf (buf, "File *%s* CLOSED successfully\n", name);
 8000954:	687a      	ldr	r2, [r7, #4]
 8000956:	490f      	ldr	r1, [pc, #60]	; (8000994 <Create_File+0x134>)
 8000958:	69b8      	ldr	r0, [r7, #24]
 800095a:	f028 fc9d 	bl	8029298 <siprintf>
			Send_Uart(buf);
 800095e:	69b8      	ldr	r0, [r7, #24]
 8000960:	f7ff feac 	bl	80006bc <Send_Uart>
			free(buf);
 8000964:	69b8      	ldr	r0, [r7, #24]
 8000966:	f028 fb01 	bl	8028f6c <free>
		}
	}
    return fresult;
 800096a:	4b04      	ldr	r3, [pc, #16]	; (800097c <Create_File+0x11c>)
 800096c:	781b      	ldrb	r3, [r3, #0]
}
 800096e:	4618      	mov	r0, r3
 8000970:	3720      	adds	r7, #32
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	24000594 	.word	0x24000594
 800097c:	240005ac 	.word	0x240005ac
 8000980:	0802a3f4 	.word	0x0802a3f4
 8000984:	24000364 	.word	0x24000364
 8000988:	0802a42c 	.word	0x0802a42c
 800098c:	0802a454 	.word	0x0802a454
 8000990:	0802a494 	.word	0x0802a494
 8000994:	0802a4b8 	.word	0x0802a4b8

08000998 <Update_File>:

FRESULT Update_File (char *name, char *data)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b088      	sub	sp, #32
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
 80009a0:	6039      	str	r1, [r7, #0]
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &fno);
 80009a2:	4956      	ldr	r1, [pc, #344]	; (8000afc <Update_File+0x164>)
 80009a4:	6878      	ldr	r0, [r7, #4]
 80009a6:	f015 fa4f 	bl	8015e48 <f_stat>
 80009aa:	4603      	mov	r3, r0
 80009ac:	461a      	mov	r2, r3
 80009ae:	4b54      	ldr	r3, [pc, #336]	; (8000b00 <Update_File+0x168>)
 80009b0:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 80009b2:	4b53      	ldr	r3, [pc, #332]	; (8000b00 <Update_File+0x168>)
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d012      	beq.n	80009e0 <Update_File+0x48>
	{
		char *buf = malloc(100*sizeof(char));
 80009ba:	2064      	movs	r0, #100	; 0x64
 80009bc:	f028 face 	bl	8028f5c <malloc>
 80009c0:	4603      	mov	r3, r0
 80009c2:	60bb      	str	r3, [r7, #8]
		sprintf (buf, "ERROR!!! *%s* does not exists\n\n", name);
 80009c4:	687a      	ldr	r2, [r7, #4]
 80009c6:	494f      	ldr	r1, [pc, #316]	; (8000b04 <Update_File+0x16c>)
 80009c8:	68b8      	ldr	r0, [r7, #8]
 80009ca:	f028 fc65 	bl	8029298 <siprintf>
		Send_Uart (buf);
 80009ce:	68b8      	ldr	r0, [r7, #8]
 80009d0:	f7ff fe74 	bl	80006bc <Send_Uart>
		free(buf);
 80009d4:	68b8      	ldr	r0, [r7, #8]
 80009d6:	f028 fac9 	bl	8028f6c <free>
	    return fresult;
 80009da:	4b49      	ldr	r3, [pc, #292]	; (8000b00 <Update_File+0x168>)
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	e088      	b.n	8000af2 <Update_File+0x15a>
	}

	else
	{
		 /* Create a file with read write access and open it */
	    fresult = f_open(&fil, name, FA_OPEN_APPEND | FA_WRITE);
 80009e0:	2232      	movs	r2, #50	; 0x32
 80009e2:	6879      	ldr	r1, [r7, #4]
 80009e4:	4848      	ldr	r0, [pc, #288]	; (8000b08 <Update_File+0x170>)
 80009e6:	f014 fd27 	bl	8015438 <f_open>
 80009ea:	4603      	mov	r3, r0
 80009ec:	461a      	mov	r2, r3
 80009ee:	4b44      	ldr	r3, [pc, #272]	; (8000b00 <Update_File+0x168>)
 80009f0:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 80009f2:	4b43      	ldr	r3, [pc, #268]	; (8000b00 <Update_File+0x168>)
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d015      	beq.n	8000a26 <Update_File+0x8e>
	    {
	    	char *buf = malloc(100*sizeof(char));
 80009fa:	2064      	movs	r0, #100	; 0x64
 80009fc:	f028 faae 	bl	8028f5c <malloc>
 8000a00:	4603      	mov	r3, r0
 8000a02:	60fb      	str	r3, [r7, #12]
	    	sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult, name);
 8000a04:	4b3e      	ldr	r3, [pc, #248]	; (8000b00 <Update_File+0x168>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	461a      	mov	r2, r3
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	493f      	ldr	r1, [pc, #252]	; (8000b0c <Update_File+0x174>)
 8000a0e:	68f8      	ldr	r0, [r7, #12]
 8000a10:	f028 fc42 	bl	8029298 <siprintf>
	    	Send_Uart(buf);
 8000a14:	68f8      	ldr	r0, [r7, #12]
 8000a16:	f7ff fe51 	bl	80006bc <Send_Uart>
	        free(buf);
 8000a1a:	68f8      	ldr	r0, [r7, #12]
 8000a1c:	f028 faa6 	bl	8028f6c <free>
	        return fresult;
 8000a20:	4b37      	ldr	r3, [pc, #220]	; (8000b00 <Update_File+0x168>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	e065      	b.n	8000af2 <Update_File+0x15a>
	    }

	    /* Writing text */
	    fresult = f_write(&fil, data, strlen (data), &bw);
 8000a26:	6838      	ldr	r0, [r7, #0]
 8000a28:	f7ff fc6c 	bl	8000304 <strlen>
 8000a2c:	4602      	mov	r2, r0
 8000a2e:	4b38      	ldr	r3, [pc, #224]	; (8000b10 <Update_File+0x178>)
 8000a30:	6839      	ldr	r1, [r7, #0]
 8000a32:	4835      	ldr	r0, [pc, #212]	; (8000b08 <Update_File+0x170>)
 8000a34:	f014 fec5 	bl	80157c2 <f_write>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	461a      	mov	r2, r3
 8000a3c:	4b30      	ldr	r3, [pc, #192]	; (8000b00 <Update_File+0x168>)
 8000a3e:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8000a40:	4b2f      	ldr	r3, [pc, #188]	; (8000b00 <Update_File+0x168>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d013      	beq.n	8000a70 <Update_File+0xd8>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8000a48:	2064      	movs	r0, #100	; 0x64
 8000a4a:	f028 fa87 	bl	8028f5c <malloc>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	61bb      	str	r3, [r7, #24]
	    	sprintf (buf, "ERROR!!! No. %d in writing file *%s*\n\n", fresult, name);
 8000a52:	4b2b      	ldr	r3, [pc, #172]	; (8000b00 <Update_File+0x168>)
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	461a      	mov	r2, r3
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	492e      	ldr	r1, [pc, #184]	; (8000b14 <Update_File+0x17c>)
 8000a5c:	69b8      	ldr	r0, [r7, #24]
 8000a5e:	f028 fc1b 	bl	8029298 <siprintf>
	    	Send_Uart(buf);
 8000a62:	69b8      	ldr	r0, [r7, #24]
 8000a64:	f7ff fe2a 	bl	80006bc <Send_Uart>
	    	free(buf);
 8000a68:	69b8      	ldr	r0, [r7, #24]
 8000a6a:	f028 fa7f 	bl	8028f6c <free>
 8000a6e:	e00f      	b.n	8000a90 <Update_File+0xf8>
	    }

	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 8000a70:	2064      	movs	r0, #100	; 0x64
 8000a72:	f028 fa73 	bl	8028f5c <malloc>
 8000a76:	4603      	mov	r3, r0
 8000a78:	61fb      	str	r3, [r7, #28]
	    	sprintf (buf, "*%s* UPDATED successfully\n", name);
 8000a7a:	687a      	ldr	r2, [r7, #4]
 8000a7c:	4926      	ldr	r1, [pc, #152]	; (8000b18 <Update_File+0x180>)
 8000a7e:	69f8      	ldr	r0, [r7, #28]
 8000a80:	f028 fc0a 	bl	8029298 <siprintf>
	    	Send_Uart(buf);
 8000a84:	69f8      	ldr	r0, [r7, #28]
 8000a86:	f7ff fe19 	bl	80006bc <Send_Uart>
	    	free(buf);
 8000a8a:	69f8      	ldr	r0, [r7, #28]
 8000a8c:	f028 fa6e 	bl	8028f6c <free>
	    }

	    /* Close file */
	    fresult = f_close(&fil);
 8000a90:	481d      	ldr	r0, [pc, #116]	; (8000b08 <Update_File+0x170>)
 8000a92:	f015 f8c3 	bl	8015c1c <f_close>
 8000a96:	4603      	mov	r3, r0
 8000a98:	461a      	mov	r2, r3
 8000a9a:	4b19      	ldr	r3, [pc, #100]	; (8000b00 <Update_File+0x168>)
 8000a9c:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8000a9e:	4b18      	ldr	r3, [pc, #96]	; (8000b00 <Update_File+0x168>)
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d013      	beq.n	8000ace <Update_File+0x136>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8000aa6:	2064      	movs	r0, #100	; 0x64
 8000aa8:	f028 fa58 	bl	8028f5c <malloc>
 8000aac:	4603      	mov	r3, r0
 8000aae:	613b      	str	r3, [r7, #16]
	    	sprintf (buf, "ERROR!!! No. %d in closing file *%s*\n\n", fresult, name);
 8000ab0:	4b13      	ldr	r3, [pc, #76]	; (8000b00 <Update_File+0x168>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	4918      	ldr	r1, [pc, #96]	; (8000b1c <Update_File+0x184>)
 8000aba:	6938      	ldr	r0, [r7, #16]
 8000abc:	f028 fbec 	bl	8029298 <siprintf>
	    	Send_Uart(buf);
 8000ac0:	6938      	ldr	r0, [r7, #16]
 8000ac2:	f7ff fdfb 	bl	80006bc <Send_Uart>
	    	free(buf);
 8000ac6:	6938      	ldr	r0, [r7, #16]
 8000ac8:	f028 fa50 	bl	8028f6c <free>
 8000acc:	e00f      	b.n	8000aee <Update_File+0x156>
	    }
	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 8000ace:	2064      	movs	r0, #100	; 0x64
 8000ad0:	f028 fa44 	bl	8028f5c <malloc>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	617b      	str	r3, [r7, #20]
	    	sprintf (buf, "File *%s* CLOSED successfully\n", name);
 8000ad8:	687a      	ldr	r2, [r7, #4]
 8000ada:	4911      	ldr	r1, [pc, #68]	; (8000b20 <Update_File+0x188>)
 8000adc:	6978      	ldr	r0, [r7, #20]
 8000ade:	f028 fbdb 	bl	8029298 <siprintf>
	    	Send_Uart(buf);
 8000ae2:	6978      	ldr	r0, [r7, #20]
 8000ae4:	f7ff fdea 	bl	80006bc <Send_Uart>
	    	free(buf);
 8000ae8:	6978      	ldr	r0, [r7, #20]
 8000aea:	f028 fa3f 	bl	8028f6c <free>
	     }
	}
    return fresult;
 8000aee:	4b04      	ldr	r3, [pc, #16]	; (8000b00 <Update_File+0x168>)
 8000af0:	781b      	ldrb	r3, [r3, #0]
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	3720      	adds	r7, #32
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	24000594 	.word	0x24000594
 8000b00:	240005ac 	.word	0x240005ac
 8000b04:	0802a4d8 	.word	0x0802a4d8
 8000b08:	24000364 	.word	0x24000364
 8000b0c:	0802a4f8 	.word	0x0802a4f8
 8000b10:	240005b0 	.word	0x240005b0
 8000b14:	0802a520 	.word	0x0802a520
 8000b18:	0802a548 	.word	0x0802a548
 8000b1c:	0802a564 	.word	0x0802a564
 8000b20:	0802a4b8 	.word	0x0802a4b8

08000b24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000b2a:	4b5a      	ldr	r3, [pc, #360]	; (8000c94 <main+0x170>)
 8000b2c:	695b      	ldr	r3, [r3, #20]
 8000b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d11b      	bne.n	8000b6e <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000b36:	f3bf 8f4f 	dsb	sy
}
 8000b3a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b3c:	f3bf 8f6f 	isb	sy
}
 8000b40:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000b42:	4b54      	ldr	r3, [pc, #336]	; (8000c94 <main+0x170>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000b4a:	f3bf 8f4f 	dsb	sy
}
 8000b4e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b50:	f3bf 8f6f 	isb	sy
}
 8000b54:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000b56:	4b4f      	ldr	r3, [pc, #316]	; (8000c94 <main+0x170>)
 8000b58:	695b      	ldr	r3, [r3, #20]
 8000b5a:	4a4e      	ldr	r2, [pc, #312]	; (8000c94 <main+0x170>)
 8000b5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b60:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000b62:	f3bf 8f4f 	dsb	sy
}
 8000b66:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b68:	f3bf 8f6f 	isb	sy
}
 8000b6c:	e000      	b.n	8000b70 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000b6e:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000b70:	4b48      	ldr	r3, [pc, #288]	; (8000c94 <main+0x170>)
 8000b72:	695b      	ldr	r3, [r3, #20]
 8000b74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d138      	bne.n	8000bee <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000b7c:	4b45      	ldr	r3, [pc, #276]	; (8000c94 <main+0x170>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000b84:	f3bf 8f4f 	dsb	sy
}
 8000b88:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000b8a:	4b42      	ldr	r3, [pc, #264]	; (8000c94 <main+0x170>)
 8000b8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000b90:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	0b5b      	lsrs	r3, r3, #13
 8000b96:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000b9a:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	08db      	lsrs	r3, r3, #3
 8000ba0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000ba4:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000ba6:	68bb      	ldr	r3, [r7, #8]
 8000ba8:	015a      	lsls	r2, r3, #5
 8000baa:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000bae:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000bb0:	687a      	ldr	r2, [r7, #4]
 8000bb2:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000bb4:	4937      	ldr	r1, [pc, #220]	; (8000c94 <main+0x170>)
 8000bb6:	4313      	orrs	r3, r2
 8000bb8:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	1e5a      	subs	r2, r3, #1
 8000bc0:	607a      	str	r2, [r7, #4]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d1ef      	bne.n	8000ba6 <main+0x82>
    } while(sets-- != 0U);
 8000bc6:	68bb      	ldr	r3, [r7, #8]
 8000bc8:	1e5a      	subs	r2, r3, #1
 8000bca:	60ba      	str	r2, [r7, #8]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d1e5      	bne.n	8000b9c <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8000bd0:	f3bf 8f4f 	dsb	sy
}
 8000bd4:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000bd6:	4b2f      	ldr	r3, [pc, #188]	; (8000c94 <main+0x170>)
 8000bd8:	695b      	ldr	r3, [r3, #20]
 8000bda:	4a2e      	ldr	r2, [pc, #184]	; (8000c94 <main+0x170>)
 8000bdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000be0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000be2:	f3bf 8f4f 	dsb	sy
}
 8000be6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000be8:	f3bf 8f6f 	isb	sy
}
 8000bec:	e000      	b.n	8000bf0 <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000bee:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bf0:	f008 fa3e 	bl	8009070 <HAL_Init>

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000bf4:	f000 fcc4 	bl	8001580 <MPU_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bf8:	f000 f86a 	bl	8000cd0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000bfc:	f000 f8de 	bl	8000dbc <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c00:	f000 fb2c 	bl	800125c <MX_GPIO_Init>
  MX_CRC_Init();
 8000c04:	f000 f90e 	bl	8000e24 <MX_CRC_Init>
  MX_DMA2D_Init();
 8000c08:	f000 f92e 	bl	8000e68 <MX_DMA2D_Init>
  MX_I2C4_Init();
 8000c0c:	f000 f966 	bl	8000edc <MX_I2C4_Init>
  MX_LTDC_Init();
 8000c10:	f000 f9a4 	bl	8000f5c <MX_LTDC_Init>
  MX_OCTOSPI1_Init();
 8000c14:	f000 fa24 	bl	8001060 <MX_OCTOSPI1_Init>
  MX_USART1_UART_Init();
 8000c18:	f000 fac0 	bl	800119c <MX_USART1_UART_Init>
  MX_SDMMC1_SD_Init();
 8000c1c:	f000 fa92 	bl	8001144 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8000c20:	f001 f9ae 	bl	8001f80 <MX_FATFS_Init>
  MX_TouchGFX_Init();
 8000c24:	f001 fbfe 	bl	8002424 <MX_TouchGFX_Init>
  /* Call PreOsInit function */
  MX_TouchGFX_PreOSInit();
 8000c28:	f001 fbf5 	bl	8002416 <MX_TouchGFX_PreOSInit>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000c2c:	f015 fae4 	bl	80161f8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of GUI_Task */
  GUI_TaskHandle = osThreadNew(TouchGFX_Task, NULL, &GUI_Task_attributes);
 8000c30:	4a19      	ldr	r2, [pc, #100]	; (8000c98 <main+0x174>)
 8000c32:	2100      	movs	r1, #0
 8000c34:	4819      	ldr	r0, [pc, #100]	; (8000c9c <main+0x178>)
 8000c36:	f015 fb60 	bl	80162fa <osThreadNew>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	4a18      	ldr	r2, [pc, #96]	; (8000ca0 <main+0x17c>)
 8000c3e:	6013      	str	r3, [r2, #0]

  /* creation of LEDblink_task */
  LEDblink_taskHandle = osThreadNew(Start_LEDblink_task, NULL, &LEDblink_task_attributes);
 8000c40:	4a18      	ldr	r2, [pc, #96]	; (8000ca4 <main+0x180>)
 8000c42:	2100      	movs	r1, #0
 8000c44:	4818      	ldr	r0, [pc, #96]	; (8000ca8 <main+0x184>)
 8000c46:	f015 fb58 	bl	80162fa <osThreadNew>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	4a17      	ldr	r2, [pc, #92]	; (8000cac <main+0x188>)
 8000c4e:	6013      	str	r3, [r2, #0]

  /* creation of InterruptTask */
  InterruptTaskHandle = osThreadNew(Start_InterruptTask, NULL, &InterruptTask_attributes);
 8000c50:	4a17      	ldr	r2, [pc, #92]	; (8000cb0 <main+0x18c>)
 8000c52:	2100      	movs	r1, #0
 8000c54:	4817      	ldr	r0, [pc, #92]	; (8000cb4 <main+0x190>)
 8000c56:	f015 fb50 	bl	80162fa <osThreadNew>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	4a16      	ldr	r2, [pc, #88]	; (8000cb8 <main+0x194>)
 8000c5e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  Mount_SD("/");
 8000c60:	4816      	ldr	r0, [pc, #88]	; (8000cbc <main+0x198>)
 8000c62:	f7ff fd41 	bl	80006e8 <Mount_SD>
  Format_SD();
 8000c66:	f7ff fd85 	bl	8000774 <Format_SD>
  	Create_File("FILE1.TXT");
 8000c6a:	4815      	ldr	r0, [pc, #84]	; (8000cc0 <main+0x19c>)
 8000c6c:	f7ff fdf8 	bl	8000860 <Create_File>
	sprintf(buffer, "Hello ---> %d\n", indx);
 8000c70:	4b14      	ldr	r3, [pc, #80]	; (8000cc4 <main+0x1a0>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	461a      	mov	r2, r3
 8000c76:	4914      	ldr	r1, [pc, #80]	; (8000cc8 <main+0x1a4>)
 8000c78:	4814      	ldr	r0, [pc, #80]	; (8000ccc <main+0x1a8>)
 8000c7a:	f028 fb0d 	bl	8029298 <siprintf>
	Update_File("FILE1.TXT", buffer);
 8000c7e:	4913      	ldr	r1, [pc, #76]	; (8000ccc <main+0x1a8>)
 8000c80:	480f      	ldr	r0, [pc, #60]	; (8000cc0 <main+0x19c>)
 8000c82:	f7ff fe89 	bl	8000998 <Update_File>
  //Create_File("FILE1.TXT");
  //Create_File("FILE2.TXT");
  Unmount_SD("/");
 8000c86:	480d      	ldr	r0, [pc, #52]	; (8000cbc <main+0x198>)
 8000c88:	f7ff fd52 	bl	8000730 <Unmount_SD>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000c8c:	f015 fafa 	bl	8016284 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <main+0x16c>
 8000c92:	bf00      	nop
 8000c94:	e000ed00 	.word	0xe000ed00
 8000c98:	0802b100 	.word	0x0802b100
 8000c9c:	08002435 	.word	0x08002435
 8000ca0:	240008a8 	.word	0x240008a8
 8000ca4:	0802b124 	.word	0x0802b124
 8000ca8:	080014fd 	.word	0x080014fd
 8000cac:	240008ac 	.word	0x240008ac
 8000cb0:	0802b148 	.word	0x0802b148
 8000cb4:	08001541 	.word	0x08001541
 8000cb8:	240008b0 	.word	0x240008b0
 8000cbc:	0802a5b8 	.word	0x0802a5b8
 8000cc0:	0802a5bc 	.word	0x0802a5bc
 8000cc4:	24000918 	.word	0x24000918
 8000cc8:	0802a5c8 	.word	0x0802a5c8
 8000ccc:	240008b4 	.word	0x240008b4

08000cd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b09c      	sub	sp, #112	; 0x70
 8000cd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cda:	224c      	movs	r2, #76	; 0x4c
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f028 fb3d 	bl	802935e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ce4:	1d3b      	adds	r3, r7, #4
 8000ce6:	2220      	movs	r2, #32
 8000ce8:	2100      	movs	r1, #0
 8000cea:	4618      	mov	r0, r3
 8000cec:	f028 fb37 	bl	802935e <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000cf0:	4b30      	ldr	r3, [pc, #192]	; (8000db4 <SystemClock_Config+0xe4>)
 8000cf2:	f04f 32ff 	mov.w	r2, #4294967295
 8000cf6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000cfa:	2004      	movs	r0, #4
 8000cfc:	f00b fbcc 	bl	800c498 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000d00:	2300      	movs	r3, #0
 8000d02:	603b      	str	r3, [r7, #0]
 8000d04:	4b2c      	ldr	r3, [pc, #176]	; (8000db8 <SystemClock_Config+0xe8>)
 8000d06:	699b      	ldr	r3, [r3, #24]
 8000d08:	4a2b      	ldr	r2, [pc, #172]	; (8000db8 <SystemClock_Config+0xe8>)
 8000d0a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d0e:	6193      	str	r3, [r2, #24]
 8000d10:	4b29      	ldr	r3, [pc, #164]	; (8000db8 <SystemClock_Config+0xe8>)
 8000d12:	699b      	ldr	r3, [r3, #24]
 8000d14:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d18:	603b      	str	r3, [r7, #0]
 8000d1a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d1c:	bf00      	nop
 8000d1e:	4b26      	ldr	r3, [pc, #152]	; (8000db8 <SystemClock_Config+0xe8>)
 8000d20:	699b      	ldr	r3, [r3, #24]
 8000d22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d2a:	d1f8      	bne.n	8000d1e <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d30:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d34:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d36:	2302      	movs	r3, #2
 8000d38:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000d3e:	230c      	movs	r3, #12
 8000d40:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 280;
 8000d42:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000d46:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 4;
 8000d50:	2304      	movs	r3, #4
 8000d52:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000d54:	2304      	movs	r3, #4
 8000d56:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d64:	4618      	mov	r0, r3
 8000d66:	f00b fbf1 	bl	800c54c <HAL_RCC_OscConfig>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000d70:	f000 fc6a 	bl	8001648 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d74:	233f      	movs	r3, #63	; 0x3f
 8000d76:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d78:	2303      	movs	r3, #3
 8000d7a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000d80:	2308      	movs	r3, #8
 8000d82:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000d84:	2340      	movs	r3, #64	; 0x40
 8000d86:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000d88:	2340      	movs	r3, #64	; 0x40
 8000d8a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000d8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d90:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000d92:	2340      	movs	r3, #64	; 0x40
 8000d94:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000d96:	1d3b      	adds	r3, r7, #4
 8000d98:	2103      	movs	r1, #3
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f00c f808 	bl	800cdb0 <HAL_RCC_ClockConfig>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <SystemClock_Config+0xda>
  {
    Error_Handler();
 8000da6:	f000 fc4f 	bl	8001648 <Error_Handler>
  }
}
 8000daa:	bf00      	nop
 8000dac:	3770      	adds	r7, #112	; 0x70
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	58024400 	.word	0x58024400
 8000db8:	58024800 	.word	0x58024800

08000dbc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b0b0      	sub	sp, #192	; 0xc0
 8000dc0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dc2:	463b      	mov	r3, r7
 8000dc4:	22c0      	movs	r2, #192	; 0xc0
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f028 fac8 	bl	802935e <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI|RCC_PERIPHCLK_SDMMC;
 8000dce:	4a14      	ldr	r2, [pc, #80]	; (8000e20 <PeriphCommonClock_Config+0x64>)
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 10;
 8000ddc:	230a      	movs	r3, #10
 8000dde:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000de0:	2302      	movs	r3, #2
 8000de2:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000de4:	2302      	movs	r3, #2
 8000de6:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 1;
 8000de8:	2301      	movs	r3, #1
 8000dea:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000dec:	23c0      	movs	r3, #192	; 0xc0
 8000dee:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000df0:	2300      	movs	r3, #0
 8000df2:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 5462;
 8000df4:	f241 5356 	movw	r3, #5462	; 0x1556
 8000df8:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_PLL2;
 8000dfa:	2320      	movs	r3, #32
 8000dfc:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8000dfe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e02:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e04:	463b      	mov	r3, r7
 8000e06:	4618      	mov	r0, r3
 8000e08:	f00c fba0 	bl	800d54c <HAL_RCCEx_PeriphCLKConfig>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 8000e12:	f000 fc19 	bl	8001648 <Error_Handler>
  }
}
 8000e16:	bf00      	nop
 8000e18:	37c0      	adds	r7, #192	; 0xc0
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	02010000 	.word	0x02010000

08000e24 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000e28:	4b0d      	ldr	r3, [pc, #52]	; (8000e60 <MX_CRC_Init+0x3c>)
 8000e2a:	4a0e      	ldr	r2, [pc, #56]	; (8000e64 <MX_CRC_Init+0x40>)
 8000e2c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000e2e:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <MX_CRC_Init+0x3c>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000e34:	4b0a      	ldr	r3, [pc, #40]	; (8000e60 <MX_CRC_Init+0x3c>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000e3a:	4b09      	ldr	r3, [pc, #36]	; (8000e60 <MX_CRC_Init+0x3c>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000e40:	4b07      	ldr	r3, [pc, #28]	; (8000e60 <MX_CRC_Init+0x3c>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000e46:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <MX_CRC_Init+0x3c>)
 8000e48:	2201      	movs	r2, #1
 8000e4a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000e4c:	4804      	ldr	r0, [pc, #16]	; (8000e60 <MX_CRC_Init+0x3c>)
 8000e4e:	f008 fb1d 	bl	800948c <HAL_CRC_Init>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000e58:	f000 fbf6 	bl	8001648 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000e5c:	bf00      	nop
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	240005b4 	.word	0x240005b4
 8000e64:	40023000 	.word	0x40023000

08000e68 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000e6c:	4b19      	ldr	r3, [pc, #100]	; (8000ed4 <MX_DMA2D_Init+0x6c>)
 8000e6e:	4a1a      	ldr	r2, [pc, #104]	; (8000ed8 <MX_DMA2D_Init+0x70>)
 8000e70:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000e72:	4b18      	ldr	r3, [pc, #96]	; (8000ed4 <MX_DMA2D_Init+0x6c>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8000e78:	4b16      	ldr	r3, [pc, #88]	; (8000ed4 <MX_DMA2D_Init+0x6c>)
 8000e7a:	2202      	movs	r2, #2
 8000e7c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000e7e:	4b15      	ldr	r3, [pc, #84]	; (8000ed4 <MX_DMA2D_Init+0x6c>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000e84:	4b13      	ldr	r3, [pc, #76]	; (8000ed4 <MX_DMA2D_Init+0x6c>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 8000e8a:	4b12      	ldr	r3, [pc, #72]	; (8000ed4 <MX_DMA2D_Init+0x6c>)
 8000e8c:	2202      	movs	r2, #2
 8000e8e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000e90:	4b10      	ldr	r3, [pc, #64]	; (8000ed4 <MX_DMA2D_Init+0x6c>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000e96:	4b0f      	ldr	r3, [pc, #60]	; (8000ed4 <MX_DMA2D_Init+0x6c>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	651a      	str	r2, [r3, #80]	; 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8000e9c:	4b0d      	ldr	r3, [pc, #52]	; (8000ed4 <MX_DMA2D_Init+0x6c>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	655a      	str	r2, [r3, #84]	; 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8000ea2:	4b0c      	ldr	r3, [pc, #48]	; (8000ed4 <MX_DMA2D_Init+0x6c>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	659a      	str	r2, [r3, #88]	; 0x58
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 8000ea8:	4b0a      	ldr	r3, [pc, #40]	; (8000ed4 <MX_DMA2D_Init+0x6c>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	65da      	str	r2, [r3, #92]	; 0x5c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000eae:	4809      	ldr	r0, [pc, #36]	; (8000ed4 <MX_DMA2D_Init+0x6c>)
 8000eb0:	f008 fbde 	bl	8009670 <HAL_DMA2D_Init>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000eba:	f000 fbc5 	bl	8001648 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000ebe:	2101      	movs	r1, #1
 8000ec0:	4804      	ldr	r0, [pc, #16]	; (8000ed4 <MX_DMA2D_Init+0x6c>)
 8000ec2:	f008 fd49 	bl	8009958 <HAL_DMA2D_ConfigLayer>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <MX_DMA2D_Init+0x68>
  {
    Error_Handler();
 8000ecc:	f000 fbbc 	bl	8001648 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000ed0:	bf00      	nop
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	240005d8 	.word	0x240005d8
 8000ed8:	52001000 	.word	0x52001000

08000edc <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000ee0:	4b1b      	ldr	r3, [pc, #108]	; (8000f50 <MX_I2C4_Init+0x74>)
 8000ee2:	4a1c      	ldr	r2, [pc, #112]	; (8000f54 <MX_I2C4_Init+0x78>)
 8000ee4:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x10808AD0;
 8000ee6:	4b1a      	ldr	r3, [pc, #104]	; (8000f50 <MX_I2C4_Init+0x74>)
 8000ee8:	4a1b      	ldr	r2, [pc, #108]	; (8000f58 <MX_I2C4_Init+0x7c>)
 8000eea:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000eec:	4b18      	ldr	r3, [pc, #96]	; (8000f50 <MX_I2C4_Init+0x74>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ef2:	4b17      	ldr	r3, [pc, #92]	; (8000f50 <MX_I2C4_Init+0x74>)
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ef8:	4b15      	ldr	r3, [pc, #84]	; (8000f50 <MX_I2C4_Init+0x74>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000efe:	4b14      	ldr	r3, [pc, #80]	; (8000f50 <MX_I2C4_Init+0x74>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f04:	4b12      	ldr	r3, [pc, #72]	; (8000f50 <MX_I2C4_Init+0x74>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f0a:	4b11      	ldr	r3, [pc, #68]	; (8000f50 <MX_I2C4_Init+0x74>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f10:	4b0f      	ldr	r3, [pc, #60]	; (8000f50 <MX_I2C4_Init+0x74>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000f16:	480e      	ldr	r0, [pc, #56]	; (8000f50 <MX_I2C4_Init+0x74>)
 8000f18:	f009 f8ec 	bl	800a0f4 <HAL_I2C_Init>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000f22:	f000 fb91 	bl	8001648 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 8000f26:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f2a:	4809      	ldr	r0, [pc, #36]	; (8000f50 <MX_I2C4_Init+0x74>)
 8000f2c:	f009 fea2 	bl	800ac74 <HAL_I2CEx_ConfigAnalogFilter>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_I2C4_Init+0x5e>
  {
    Error_Handler();
 8000f36:	f000 fb87 	bl	8001648 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	4804      	ldr	r0, [pc, #16]	; (8000f50 <MX_I2C4_Init+0x74>)
 8000f3e:	f009 fee4 	bl	800ad0a <HAL_I2CEx_ConfigDigitalFilter>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <MX_I2C4_Init+0x70>
  {
    Error_Handler();
 8000f48:	f000 fb7e 	bl	8001648 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000f4c:	bf00      	nop
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	24000640 	.word	0x24000640
 8000f54:	58001c00 	.word	0x58001c00
 8000f58:	10808ad0 	.word	0x10808ad0

08000f5c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b08e      	sub	sp, #56	; 0x38
 8000f60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000f62:	1d3b      	adds	r3, r7, #4
 8000f64:	2234      	movs	r2, #52	; 0x34
 8000f66:	2100      	movs	r1, #0
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f028 f9f8 	bl	802935e <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000f6e:	4b3a      	ldr	r3, [pc, #232]	; (8001058 <MX_LTDC_Init+0xfc>)
 8000f70:	4a3a      	ldr	r2, [pc, #232]	; (800105c <MX_LTDC_Init+0x100>)
 8000f72:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000f74:	4b38      	ldr	r3, [pc, #224]	; (8001058 <MX_LTDC_Init+0xfc>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000f7a:	4b37      	ldr	r3, [pc, #220]	; (8001058 <MX_LTDC_Init+0xfc>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000f80:	4b35      	ldr	r3, [pc, #212]	; (8001058 <MX_LTDC_Init+0xfc>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000f86:	4b34      	ldr	r3, [pc, #208]	; (8001058 <MX_LTDC_Init+0xfc>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8000f8c:	4b32      	ldr	r3, [pc, #200]	; (8001058 <MX_LTDC_Init+0xfc>)
 8000f8e:	2228      	movs	r2, #40	; 0x28
 8000f90:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8000f92:	4b31      	ldr	r3, [pc, #196]	; (8001058 <MX_LTDC_Init+0xfc>)
 8000f94:	2209      	movs	r2, #9
 8000f96:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 42;
 8000f98:	4b2f      	ldr	r3, [pc, #188]	; (8001058 <MX_LTDC_Init+0xfc>)
 8000f9a:	222a      	movs	r2, #42	; 0x2a
 8000f9c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000f9e:	4b2e      	ldr	r3, [pc, #184]	; (8001058 <MX_LTDC_Init+0xfc>)
 8000fa0:	220b      	movs	r2, #11
 8000fa2:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 522;
 8000fa4:	4b2c      	ldr	r3, [pc, #176]	; (8001058 <MX_LTDC_Init+0xfc>)
 8000fa6:	f240 220a 	movw	r2, #522	; 0x20a
 8000faa:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8000fac:	4b2a      	ldr	r3, [pc, #168]	; (8001058 <MX_LTDC_Init+0xfc>)
 8000fae:	f240 121b 	movw	r2, #283	; 0x11b
 8000fb2:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 554;
 8000fb4:	4b28      	ldr	r3, [pc, #160]	; (8001058 <MX_LTDC_Init+0xfc>)
 8000fb6:	f240 222a 	movw	r2, #554	; 0x22a
 8000fba:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8000fbc:	4b26      	ldr	r3, [pc, #152]	; (8001058 <MX_LTDC_Init+0xfc>)
 8000fbe:	f240 121d 	movw	r2, #285	; 0x11d
 8000fc2:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000fc4:	4b24      	ldr	r3, [pc, #144]	; (8001058 <MX_LTDC_Init+0xfc>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000fcc:	4b22      	ldr	r3, [pc, #136]	; (8001058 <MX_LTDC_Init+0xfc>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000fd4:	4b20      	ldr	r3, [pc, #128]	; (8001058 <MX_LTDC_Init+0xfc>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000fdc:	481e      	ldr	r0, [pc, #120]	; (8001058 <MX_LTDC_Init+0xfc>)
 8000fde:	f009 fee1 	bl	800ada4 <HAL_LTDC_Init>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000fe8:	f000 fb2e 	bl	8001648 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000fec:	2300      	movs	r3, #0
 8000fee:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8000ff0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000ff4:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8000ffa:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000ffe:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8001000:	2301      	movs	r3, #1
 8001002:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001004:	23ff      	movs	r3, #255	; 0xff
 8001006:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001008:	2300      	movs	r3, #0
 800100a:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800100c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001010:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001012:	2305      	movs	r3, #5
 8001014:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0;
 8001016:	2300      	movs	r3, #0
 8001018:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 800101a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800101e:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8001020:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001024:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 255;
 8001026:	23ff      	movs	r3, #255	; 0xff
 8001028:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800102c:	2300      	movs	r3, #0
 800102e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001032:	2300      	movs	r3, #0
 8001034:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001038:	1d3b      	adds	r3, r7, #4
 800103a:	2200      	movs	r2, #0
 800103c:	4619      	mov	r1, r3
 800103e:	4806      	ldr	r0, [pc, #24]	; (8001058 <MX_LTDC_Init+0xfc>)
 8001040:	f00a f838 	bl	800b0b4 <HAL_LTDC_ConfigLayer>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <MX_LTDC_Init+0xf2>
  {
    Error_Handler();
 800104a:	f000 fafd 	bl	8001648 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800104e:	bf00      	nop
 8001050:	3738      	adds	r7, #56	; 0x38
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	24000694 	.word	0x24000694
 800105c:	50001000 	.word	0x50001000

08001060 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */
  OSPI_MemoryMappedTypeDef sMemMappedCfg = {0};
 8001066:	1d3b      	adds	r3, r7, #4
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 800106e:	4b33      	ldr	r3, [pc, #204]	; (800113c <MX_OCTOSPI1_Init+0xdc>)
 8001070:	4a33      	ldr	r2, [pc, #204]	; (8001140 <MX_OCTOSPI1_Init+0xe0>)
 8001072:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 32;
 8001074:	4b31      	ldr	r3, [pc, #196]	; (800113c <MX_OCTOSPI1_Init+0xdc>)
 8001076:	2220      	movs	r2, #32
 8001078:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 800107a:	4b30      	ldr	r3, [pc, #192]	; (800113c <MX_OCTOSPI1_Init+0xdc>)
 800107c:	2200      	movs	r2, #0
 800107e:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 8001080:	4b2e      	ldr	r3, [pc, #184]	; (800113c <MX_OCTOSPI1_Init+0xdc>)
 8001082:	2200      	movs	r2, #0
 8001084:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 26;
 8001086:	4b2d      	ldr	r3, [pc, #180]	; (800113c <MX_OCTOSPI1_Init+0xdc>)
 8001088:	221a      	movs	r2, #26
 800108a:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 2;
 800108c:	4b2b      	ldr	r3, [pc, #172]	; (800113c <MX_OCTOSPI1_Init+0xdc>)
 800108e:	2202      	movs	r2, #2
 8001090:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8001092:	4b2a      	ldr	r3, [pc, #168]	; (800113c <MX_OCTOSPI1_Init+0xdc>)
 8001094:	2200      	movs	r2, #0
 8001096:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8001098:	4b28      	ldr	r3, [pc, #160]	; (800113c <MX_OCTOSPI1_Init+0xdc>)
 800109a:	2200      	movs	r2, #0
 800109c:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 800109e:	4b27      	ldr	r3, [pc, #156]	; (800113c <MX_OCTOSPI1_Init+0xdc>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 3;
 80010a4:	4b25      	ldr	r3, [pc, #148]	; (800113c <MX_OCTOSPI1_Init+0xdc>)
 80010a6:	2203      	movs	r2, #3
 80010a8:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80010aa:	4b24      	ldr	r3, [pc, #144]	; (800113c <MX_OCTOSPI1_Init+0xdc>)
 80010ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010b0:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 80010b2:	4b22      	ldr	r3, [pc, #136]	; (800113c <MX_OCTOSPI1_Init+0xdc>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 80010b8:	4b20      	ldr	r3, [pc, #128]	; (800113c <MX_OCTOSPI1_Init+0xdc>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	631a      	str	r2, [r3, #48]	; 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 80010be:	4b1f      	ldr	r3, [pc, #124]	; (800113c <MX_OCTOSPI1_Init+0xdc>)
 80010c0:	2208      	movs	r2, #8
 80010c2:	635a      	str	r2, [r3, #52]	; 0x34
  hospi1.Init.MaxTran = 0;
 80010c4:	4b1d      	ldr	r3, [pc, #116]	; (800113c <MX_OCTOSPI1_Init+0xdc>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	639a      	str	r2, [r3, #56]	; 0x38
  hospi1.Init.Refresh = 0;
 80010ca:	4b1c      	ldr	r3, [pc, #112]	; (800113c <MX_OCTOSPI1_Init+0xdc>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 80010d0:	481a      	ldr	r0, [pc, #104]	; (800113c <MX_OCTOSPI1_Init+0xdc>)
 80010d2:	f00a fa81 	bl	800b5d8 <HAL_OSPI_Init>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_OCTOSPI1_Init+0x80>
  {
    Error_Handler();
 80010dc:	f000 fab4 	bl	8001648 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */
  sMemMappedCfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 80010e0:	2300      	movs	r3, #0
 80010e2:	607b      	str	r3, [r7, #4]
  sMemMappedCfg.TimeOutPeriod = 1;
 80010e4:	2301      	movs	r3, #1
 80010e6:	60bb      	str	r3, [r7, #8]

  if (HAL_OSPI_MemoryMapped(&hospi1, &sMemMappedCfg) != HAL_OK)
 80010e8:	1d3b      	adds	r3, r7, #4
 80010ea:	4619      	mov	r1, r3
 80010ec:	4813      	ldr	r0, [pc, #76]	; (800113c <MX_OCTOSPI1_Init+0xdc>)
 80010ee:	f00a fec3 	bl	800be78 <HAL_OSPI_MemoryMapped>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <MX_OCTOSPI1_Init+0x9c>
  {
    Error_Handler();
 80010f8:	f000 faa6 	bl	8001648 <Error_Handler>
  }
  BSP_OSPI_NOR_Init_t Flash;
  Flash.InterfaceMode = BSP_OSPI_NOR_OPI_MODE;
 80010fc:	2301      	movs	r3, #1
 80010fe:	703b      	strb	r3, [r7, #0]
  Flash.TransferRate  = BSP_OSPI_NOR_DTR_TRANSFER;
 8001100:	2301      	movs	r3, #1
 8001102:	707b      	strb	r3, [r7, #1]
  BSP_OSPI_NOR_DeInit(0);
 8001104:	2000      	movs	r0, #0
 8001106:	f006 ff29 	bl	8007f5c <BSP_OSPI_NOR_DeInit>
  int32_t RetVal = BSP_OSPI_NOR_Init(0, &Flash);
 800110a:	463b      	mov	r3, r7
 800110c:	4619      	mov	r1, r3
 800110e:	2000      	movs	r0, #0
 8001110:	f006 fe9a 	bl	8007e48 <BSP_OSPI_NOR_Init>
 8001114:	60f8      	str	r0, [r7, #12]
  if(RetVal != BSP_ERROR_NONE)
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_OCTOSPI1_Init+0xc0>
  {
    Error_Handler();
 800111c:	f000 fa94 	bl	8001648 <Error_Handler>
  }
  RetVal = BSP_OSPI_NOR_EnableMemoryMappedMode(0);
 8001120:	2000      	movs	r0, #0
 8001122:	f006 ffb7 	bl	8008094 <BSP_OSPI_NOR_EnableMemoryMappedMode>
 8001126:	60f8      	str	r0, [r7, #12]
  if(RetVal != BSP_ERROR_NONE)
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_OCTOSPI1_Init+0xd2>
  {
    Error_Handler();
 800112e:	f000 fa8b 	bl	8001648 <Error_Handler>
  }
  /* USER CODE END OCTOSPI1_Init 2 */

}
 8001132:	bf00      	nop
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	2400073c 	.word	0x2400073c
 8001140:	52005000 	.word	0x52005000

08001144 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001148:	4b10      	ldr	r3, [pc, #64]	; (800118c <MX_SDMMC1_SD_Init+0x48>)
 800114a:	4a11      	ldr	r2, [pc, #68]	; (8001190 <MX_SDMMC1_SD_Init+0x4c>)
 800114c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800114e:	4b0f      	ldr	r3, [pc, #60]	; (800118c <MX_SDMMC1_SD_Init+0x48>)
 8001150:	2200      	movs	r2, #0
 8001152:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001154:	4b0d      	ldr	r3, [pc, #52]	; (800118c <MX_SDMMC1_SD_Init+0x48>)
 8001156:	2200      	movs	r2, #0
 8001158:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 800115a:	4b0c      	ldr	r3, [pc, #48]	; (800118c <MX_SDMMC1_SD_Init+0x48>)
 800115c:	2200      	movs	r2, #0
 800115e:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001160:	4b0a      	ldr	r3, [pc, #40]	; (800118c <MX_SDMMC1_SD_Init+0x48>)
 8001162:	2200      	movs	r2, #0
 8001164:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 8;
 8001166:	4b09      	ldr	r3, [pc, #36]	; (800118c <MX_SDMMC1_SD_Init+0x48>)
 8001168:	2208      	movs	r2, #8
 800116a:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */
#ifdef DEBUG
  if(HAL_SD_Init(&hsd1) != HAL_OK)
 800116c:	4807      	ldr	r0, [pc, #28]	; (800118c <MX_SDMMC1_SD_Init+0x48>)
 800116e:	f00e fdf7 	bl	800fd60 <HAL_SD_Init>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d003      	beq.n	8001180 <MX_SDMMC1_SD_Init+0x3c>
  {
		Send_Uart("ERROR in HAL_SD_Init\r\n");
 8001178:	4806      	ldr	r0, [pc, #24]	; (8001194 <MX_SDMMC1_SD_Init+0x50>)
 800117a:	f7ff fa9f 	bl	80006bc <Send_Uart>
	  Send_Uart("HAL_SD_Init Successful \r\n");
  }
#endif
  /* USER CODE END SDMMC1_Init 2 */

}
 800117e:	e002      	b.n	8001186 <MX_SDMMC1_SD_Init+0x42>
	  Send_Uart("HAL_SD_Init Successful \r\n");
 8001180:	4805      	ldr	r0, [pc, #20]	; (8001198 <MX_SDMMC1_SD_Init+0x54>)
 8001182:	f7ff fa9b 	bl	80006bc <Send_Uart>
}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	24000798 	.word	0x24000798
 8001190:	52007000 	.word	0x52007000
 8001194:	0802a5d8 	.word	0x0802a5d8
 8001198:	0802a5f0 	.word	0x0802a5f0

0800119c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800119c:	b5b0      	push	{r4, r5, r7, lr}
 800119e:	b086      	sub	sp, #24
 80011a0:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011a2:	4b2b      	ldr	r3, [pc, #172]	; (8001250 <MX_USART1_UART_Init+0xb4>)
 80011a4:	4a2b      	ldr	r2, [pc, #172]	; (8001254 <MX_USART1_UART_Init+0xb8>)
 80011a6:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80011a8:	4b29      	ldr	r3, [pc, #164]	; (8001250 <MX_USART1_UART_Init+0xb4>)
 80011aa:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011ae:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011b0:	4b27      	ldr	r3, [pc, #156]	; (8001250 <MX_USART1_UART_Init+0xb4>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011b6:	4b26      	ldr	r3, [pc, #152]	; (8001250 <MX_USART1_UART_Init+0xb4>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011bc:	4b24      	ldr	r3, [pc, #144]	; (8001250 <MX_USART1_UART_Init+0xb4>)
 80011be:	2200      	movs	r2, #0
 80011c0:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011c2:	4b23      	ldr	r3, [pc, #140]	; (8001250 <MX_USART1_UART_Init+0xb4>)
 80011c4:	220c      	movs	r2, #12
 80011c6:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011c8:	4b21      	ldr	r3, [pc, #132]	; (8001250 <MX_USART1_UART_Init+0xb4>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011ce:	4b20      	ldr	r3, [pc, #128]	; (8001250 <MX_USART1_UART_Init+0xb4>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011d4:	4b1e      	ldr	r3, [pc, #120]	; (8001250 <MX_USART1_UART_Init+0xb4>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011da:	4b1d      	ldr	r3, [pc, #116]	; (8001250 <MX_USART1_UART_Init+0xb4>)
 80011dc:	2200      	movs	r2, #0
 80011de:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011e0:	4b1b      	ldr	r3, [pc, #108]	; (8001250 <MX_USART1_UART_Init+0xb4>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011e6:	481a      	ldr	r0, [pc, #104]	; (8001250 <MX_USART1_UART_Init+0xb4>)
 80011e8:	f010 fa7e 	bl	80116e8 <HAL_UART_Init>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 80011f2:	f000 fa29 	bl	8001648 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011f6:	2100      	movs	r1, #0
 80011f8:	4815      	ldr	r0, [pc, #84]	; (8001250 <MX_USART1_UART_Init+0xb4>)
 80011fa:	f011 fc12 	bl	8012a22 <HAL_UARTEx_SetTxFifoThreshold>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8001204:	f000 fa20 	bl	8001648 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001208:	2100      	movs	r1, #0
 800120a:	4811      	ldr	r0, [pc, #68]	; (8001250 <MX_USART1_UART_Init+0xb4>)
 800120c:	f011 fc47 	bl	8012a9e <HAL_UARTEx_SetRxFifoThreshold>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8001216:	f000 fa17 	bl	8001648 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800121a:	480d      	ldr	r0, [pc, #52]	; (8001250 <MX_USART1_UART_Init+0xb4>)
 800121c:	f011 fbc8 	bl	80129b0 <HAL_UARTEx_DisableFifoMode>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8001226:	f000 fa0f 	bl	8001648 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
#ifdef DEBUG
  uint8_t MSG[] = "Initializing...\n\r";
 800122a:	4b0b      	ldr	r3, [pc, #44]	; (8001258 <MX_USART1_UART_Init+0xbc>)
 800122c:	1d3c      	adds	r4, r7, #4
 800122e:	461d      	mov	r5, r3
 8001230:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001232:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001234:	682b      	ldr	r3, [r5, #0]
 8001236:	8023      	strh	r3, [r4, #0]
  HAL_UART_Transmit(&huart1, MSG, sizeof(MSG),HAL_MAX_DELAY);
 8001238:	1d39      	adds	r1, r7, #4
 800123a:	f04f 33ff 	mov.w	r3, #4294967295
 800123e:	2212      	movs	r2, #18
 8001240:	4803      	ldr	r0, [pc, #12]	; (8001250 <MX_USART1_UART_Init+0xb4>)
 8001242:	f010 faa1 	bl	8011788 <HAL_UART_Transmit>
#endif
  /* USER CODE END USART1_Init 2 */

}
 8001246:	bf00      	nop
 8001248:	3718      	adds	r7, #24
 800124a:	46bd      	mov	sp, r7
 800124c:	bdb0      	pop	{r4, r5, r7, pc}
 800124e:	bf00      	nop
 8001250:	24000814 	.word	0x24000814
 8001254:	40011000 	.word	0x40011000
 8001258:	0802a60c 	.word	0x0802a60c

0800125c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b08e      	sub	sp, #56	; 0x38
 8001260:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001262:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	605a      	str	r2, [r3, #4]
 800126c:	609a      	str	r2, [r3, #8]
 800126e:	60da      	str	r2, [r3, #12]
 8001270:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001272:	4b91      	ldr	r3, [pc, #580]	; (80014b8 <MX_GPIO_Init+0x25c>)
 8001274:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001278:	4a8f      	ldr	r2, [pc, #572]	; (80014b8 <MX_GPIO_Init+0x25c>)
 800127a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800127e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001282:	4b8d      	ldr	r3, [pc, #564]	; (80014b8 <MX_GPIO_Init+0x25c>)
 8001284:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001288:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800128c:	623b      	str	r3, [r7, #32]
 800128e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001290:	4b89      	ldr	r3, [pc, #548]	; (80014b8 <MX_GPIO_Init+0x25c>)
 8001292:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001296:	4a88      	ldr	r2, [pc, #544]	; (80014b8 <MX_GPIO_Init+0x25c>)
 8001298:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800129c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80012a0:	4b85      	ldr	r3, [pc, #532]	; (80014b8 <MX_GPIO_Init+0x25c>)
 80012a2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80012a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012aa:	61fb      	str	r3, [r7, #28]
 80012ac:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80012ae:	4b82      	ldr	r3, [pc, #520]	; (80014b8 <MX_GPIO_Init+0x25c>)
 80012b0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80012b4:	4a80      	ldr	r2, [pc, #512]	; (80014b8 <MX_GPIO_Init+0x25c>)
 80012b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012ba:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80012be:	4b7e      	ldr	r3, [pc, #504]	; (80014b8 <MX_GPIO_Init+0x25c>)
 80012c0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80012c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012c8:	61bb      	str	r3, [r7, #24]
 80012ca:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012cc:	4b7a      	ldr	r3, [pc, #488]	; (80014b8 <MX_GPIO_Init+0x25c>)
 80012ce:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80012d2:	4a79      	ldr	r2, [pc, #484]	; (80014b8 <MX_GPIO_Init+0x25c>)
 80012d4:	f043 0308 	orr.w	r3, r3, #8
 80012d8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80012dc:	4b76      	ldr	r3, [pc, #472]	; (80014b8 <MX_GPIO_Init+0x25c>)
 80012de:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80012e2:	f003 0308 	and.w	r3, r3, #8
 80012e6:	617b      	str	r3, [r7, #20]
 80012e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ea:	4b73      	ldr	r3, [pc, #460]	; (80014b8 <MX_GPIO_Init+0x25c>)
 80012ec:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80012f0:	4a71      	ldr	r2, [pc, #452]	; (80014b8 <MX_GPIO_Init+0x25c>)
 80012f2:	f043 0304 	orr.w	r3, r3, #4
 80012f6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80012fa:	4b6f      	ldr	r3, [pc, #444]	; (80014b8 <MX_GPIO_Init+0x25c>)
 80012fc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001300:	f003 0304 	and.w	r3, r3, #4
 8001304:	613b      	str	r3, [r7, #16]
 8001306:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001308:	4b6b      	ldr	r3, [pc, #428]	; (80014b8 <MX_GPIO_Init+0x25c>)
 800130a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800130e:	4a6a      	ldr	r2, [pc, #424]	; (80014b8 <MX_GPIO_Init+0x25c>)
 8001310:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001314:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001318:	4b67      	ldr	r3, [pc, #412]	; (80014b8 <MX_GPIO_Init+0x25c>)
 800131a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800131e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001322:	60fb      	str	r3, [r7, #12]
 8001324:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001326:	4b64      	ldr	r3, [pc, #400]	; (80014b8 <MX_GPIO_Init+0x25c>)
 8001328:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800132c:	4a62      	ldr	r2, [pc, #392]	; (80014b8 <MX_GPIO_Init+0x25c>)
 800132e:	f043 0301 	orr.w	r3, r3, #1
 8001332:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001336:	4b60      	ldr	r3, [pc, #384]	; (80014b8 <MX_GPIO_Init+0x25c>)
 8001338:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800133c:	f003 0301 	and.w	r3, r3, #1
 8001340:	60bb      	str	r3, [r7, #8]
 8001342:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001344:	4b5c      	ldr	r3, [pc, #368]	; (80014b8 <MX_GPIO_Init+0x25c>)
 8001346:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800134a:	4a5b      	ldr	r2, [pc, #364]	; (80014b8 <MX_GPIO_Init+0x25c>)
 800134c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001350:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001354:	4b58      	ldr	r3, [pc, #352]	; (80014b8 <MX_GPIO_Init+0x25c>)
 8001356:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800135a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800135e:	607b      	str	r3, [r7, #4]
 8001360:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001362:	4b55      	ldr	r3, [pc, #340]	; (80014b8 <MX_GPIO_Init+0x25c>)
 8001364:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001368:	4a53      	ldr	r2, [pc, #332]	; (80014b8 <MX_GPIO_Init+0x25c>)
 800136a:	f043 0302 	orr.w	r3, r3, #2
 800136e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001372:	4b51      	ldr	r3, [pc, #324]	; (80014b8 <MX_GPIO_Init+0x25c>)
 8001374:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001378:	f003 0302 	and.w	r3, r3, #2
 800137c:	603b      	str	r3, [r7, #0]
 800137e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 8001380:	2200      	movs	r2, #0
 8001382:	f640 0104 	movw	r1, #2052	; 0x804
 8001386:	484d      	ldr	r0, [pc, #308]	; (80014bc <MX_GPIO_Init+0x260>)
 8001388:	f008 fe66 	bl	800a058 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 800138c:	2200      	movs	r2, #0
 800138e:	2101      	movs	r1, #1
 8001390:	484b      	ldr	r0, [pc, #300]	; (80014c0 <MX_GPIO_Init+0x264>)
 8001392:	f008 fe61 	bl	800a058 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, VSYNC_FREQ_Pin|LCD_BL_CTRL_Pin|LCD_ON_OFF_Pin, GPIO_PIN_RESET);
 8001396:	2200      	movs	r2, #0
 8001398:	f241 0106 	movw	r1, #4102	; 0x1006
 800139c:	4849      	ldr	r0, [pc, #292]	; (80014c4 <MX_GPIO_Init+0x268>)
 800139e:	f008 fe5b 	bl	800a058 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RENDER_TIME_Pin|FRAME_RATE_Pin, GPIO_PIN_RESET);
 80013a2:	2200      	movs	r2, #0
 80013a4:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80013a8:	4847      	ldr	r0, [pc, #284]	; (80014c8 <MX_GPIO_Init+0x26c>)
 80013aa:	f008 fe55 	bl	800a058 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED3_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 80013ae:	f640 0304 	movw	r3, #2052	; 0x804
 80013b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b4:	2301      	movs	r3, #1
 80013b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b8:	2300      	movs	r3, #0
 80013ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013bc:	2300      	movs	r3, #0
 80013be:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013c4:	4619      	mov	r1, r3
 80013c6:	483d      	ldr	r0, [pc, #244]	; (80014bc <MX_GPIO_Init+0x260>)
 80013c8:	f008 fb74 	bl	8009ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80013cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013d2:	2300      	movs	r3, #0
 80013d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013d6:	2301      	movs	r3, #1
 80013d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80013da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013de:	4619      	mov	r1, r3
 80013e0:	4837      	ldr	r0, [pc, #220]	; (80014c0 <MX_GPIO_Init+0x264>)
 80013e2:	f008 fb67 	bl	8009ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCU_ACTIVE_Pin */
  GPIO_InitStruct.Pin = MCU_ACTIVE_Pin;
 80013e6:	2301      	movs	r3, #1
 80013e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ea:	2301      	movs	r3, #1
 80013ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ee:	2300      	movs	r3, #0
 80013f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f2:	2300      	movs	r3, #0
 80013f4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 80013f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013fa:	4619      	mov	r1, r3
 80013fc:	4830      	ldr	r0, [pc, #192]	; (80014c0 <MX_GPIO_Init+0x264>)
 80013fe:	f008 fb59 	bl	8009ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : VSYNC_FREQ_Pin LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = VSYNC_FREQ_Pin|LCD_BL_CTRL_Pin;
 8001402:	f241 0302 	movw	r3, #4098	; 0x1002
 8001406:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001408:	2301      	movs	r3, #1
 800140a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140c:	2300      	movs	r3, #0
 800140e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001410:	2300      	movs	r3, #0
 8001412:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001414:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001418:	4619      	mov	r1, r3
 800141a:	482a      	ldr	r0, [pc, #168]	; (80014c4 <MX_GPIO_Init+0x268>)
 800141c:	f008 fb4a 	bl	8009ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BTN_Pin */
  GPIO_InitStruct.Pin = USER_BTN_Pin;
 8001420:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001424:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001426:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800142a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142c:	2300      	movs	r3, #0
 800142e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_BTN_GPIO_Port, &GPIO_InitStruct);
 8001430:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001434:	4619      	mov	r1, r3
 8001436:	4825      	ldr	r0, [pc, #148]	; (80014cc <MX_GPIO_Init+0x270>)
 8001438:	f008 fb3c 	bl	8009ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 800143c:	2304      	movs	r3, #4
 800143e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001440:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001444:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001446:	2301      	movs	r3, #1
 8001448:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800144a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800144e:	4619      	mov	r1, r3
 8001450:	481f      	ldr	r0, [pc, #124]	; (80014d0 <MX_GPIO_Init+0x274>)
 8001452:	f008 fb2f 	bl	8009ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RENDER_TIME_Pin FRAME_RATE_Pin */
  GPIO_InitStruct.Pin = RENDER_TIME_Pin|FRAME_RATE_Pin;
 8001456:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800145a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800145c:	2301      	movs	r3, #1
 800145e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001460:	2300      	movs	r3, #0
 8001462:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001464:	2300      	movs	r3, #0
 8001466:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001468:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800146c:	4619      	mov	r1, r3
 800146e:	4816      	ldr	r0, [pc, #88]	; (80014c8 <MX_GPIO_Init+0x26c>)
 8001470:	f008 fb20 	bl	8009ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_ON_OFF_Pin */
  GPIO_InitStruct.Pin = LCD_ON_OFF_Pin;
 8001474:	2304      	movs	r3, #4
 8001476:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001478:	2301      	movs	r3, #1
 800147a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800147c:	2301      	movs	r3, #1
 800147e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001480:	2300      	movs	r3, #0
 8001482:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_ON_OFF_GPIO_Port, &GPIO_InitStruct);
 8001484:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001488:	4619      	mov	r1, r3
 800148a:	480e      	ldr	r0, [pc, #56]	; (80014c4 <MX_GPIO_Init+0x268>)
 800148c:	f008 fb12 	bl	8009ab4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8001490:	2200      	movs	r2, #0
 8001492:	2105      	movs	r1, #5
 8001494:	2008      	movs	r0, #8
 8001496:	f007 ff47 	bl	8009328 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800149a:	2008      	movs	r0, #8
 800149c:	f007 ff5e 	bl	800935c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80014a0:	2200      	movs	r2, #0
 80014a2:	2105      	movs	r1, #5
 80014a4:	2028      	movs	r0, #40	; 0x28
 80014a6:	f007 ff3f 	bl	8009328 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80014aa:	2028      	movs	r0, #40	; 0x28
 80014ac:	f007 ff56 	bl	800935c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014b0:	bf00      	nop
 80014b2:	3738      	adds	r7, #56	; 0x38
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	58024400 	.word	0x58024400
 80014bc:	58021800 	.word	0x58021800
 80014c0:	58022000 	.word	0x58022000
 80014c4:	58020000 	.word	0x58020000
 80014c8:	58020400 	.word	0x58020400
 80014cc:	58020800 	.word	0x58020800
 80014d0:	58021c00 	.word	0x58021c00

080014d4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
volatile uint32_t userButtonPressed = 0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	4603      	mov	r3, r0
 80014dc:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == USER_BTN_Pin)
 80014de:	88fb      	ldrh	r3, [r7, #6]
 80014e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80014e4:	d102      	bne.n	80014ec <HAL_GPIO_EXTI_Callback+0x18>
	{
		userButtonPressed = 1;
 80014e6:	4b04      	ldr	r3, [pc, #16]	; (80014f8 <HAL_GPIO_EXTI_Callback+0x24>)
 80014e8:	2201      	movs	r2, #1
 80014ea:	601a      	str	r2, [r3, #0]
	}
}
 80014ec:	bf00      	nop
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr
 80014f8:	2400091c 	.word	0x2400091c

080014fc <Start_LEDblink_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_LEDblink_task */
void Start_LEDblink_task(void *argument)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_LEDblink_task */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8001504:	2104      	movs	r1, #4
 8001506:	480b      	ldr	r0, [pc, #44]	; (8001534 <Start_LEDblink_task+0x38>)
 8001508:	f008 fdbf 	bl	800a08a <HAL_GPIO_TogglePin>
	#ifdef DEBUG
	  uint8_t MSG[] = "Blink\n\r";
 800150c:	4a0a      	ldr	r2, [pc, #40]	; (8001538 <Start_LEDblink_task+0x3c>)
 800150e:	f107 0308 	add.w	r3, r7, #8
 8001512:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001516:	e883 0003 	stmia.w	r3, {r0, r1}
	  HAL_UART_Transmit(&huart1, MSG, sizeof(MSG),HAL_MAX_DELAY);
 800151a:	f107 0108 	add.w	r1, r7, #8
 800151e:	f04f 33ff 	mov.w	r3, #4294967295
 8001522:	2208      	movs	r2, #8
 8001524:	4805      	ldr	r0, [pc, #20]	; (800153c <Start_LEDblink_task+0x40>)
 8001526:	f010 f92f 	bl	8011788 <HAL_UART_Transmit>
	#endif
	  osDelay(2000);
 800152a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800152e:	f014 ff76 	bl	801641e <osDelay>
  {
 8001532:	e7e7      	b.n	8001504 <Start_LEDblink_task+0x8>
 8001534:	58021800 	.word	0x58021800
 8001538:	0802a620 	.word	0x0802a620
 800153c:	24000814 	.word	0x24000814

08001540 <Start_InterruptTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_InterruptTask */
void Start_InterruptTask(void *argument)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_InterruptTask */
  /* Infinite loop */
  for(;;)
  {
	  if(userButtonPressed == 1)
 8001548:	4b0b      	ldr	r3, [pc, #44]	; (8001578 <Start_InterruptTask+0x38>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	2b01      	cmp	r3, #1
 800154e:	d10e      	bne.n	800156e <Start_InterruptTask+0x2e>
	  {
		  userButtonPressed = 0;
 8001550:	4b09      	ldr	r3, [pc, #36]	; (8001578 <Start_InterruptTask+0x38>)
 8001552:	2200      	movs	r2, #0
 8001554:	601a      	str	r2, [r3, #0]
		  Mount_SD("/");
 8001556:	4809      	ldr	r0, [pc, #36]	; (800157c <Start_InterruptTask+0x3c>)
 8001558:	f7ff f8c6 	bl	80006e8 <Mount_SD>
		  Format_SD();
 800155c:	f7ff f90a 	bl	8000774 <Format_SD>
		  HAL_Delay(2000);
 8001560:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001564:	f007 fde0 	bl	8009128 <HAL_Delay>
		  Unmount_SD("/");
 8001568:	4804      	ldr	r0, [pc, #16]	; (800157c <Start_InterruptTask+0x3c>)
 800156a:	f7ff f8e1 	bl	8000730 <Unmount_SD>
	  }
    osDelay(10);
 800156e:	200a      	movs	r0, #10
 8001570:	f014 ff55 	bl	801641e <osDelay>
	  if(userButtonPressed == 1)
 8001574:	e7e8      	b.n	8001548 <Start_InterruptTask+0x8>
 8001576:	bf00      	nop
 8001578:	2400091c 	.word	0x2400091c
 800157c:	0802a5b8 	.word	0x0802a5b8

08001580 <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001586:	463b      	mov	r3, r7
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	605a      	str	r2, [r3, #4]
 800158e:	609a      	str	r2, [r3, #8]
 8001590:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001592:	f007 feff 	bl	8009394 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001596:	2301      	movs	r3, #1
 8001598:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800159a:	2300      	movs	r3, #0
 800159c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800159e:	2300      	movs	r3, #0
 80015a0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80015a2:	231f      	movs	r3, #31
 80015a4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80015a6:	2387      	movs	r3, #135	; 0x87
 80015a8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80015aa:	2300      	movs	r3, #0
 80015ac:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80015ae:	2300      	movs	r3, #0
 80015b0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80015b2:	2301      	movs	r3, #1
 80015b4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80015b6:	2300      	movs	r3, #0
 80015b8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80015ba:	2300      	movs	r3, #0
 80015bc:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80015be:	2300      	movs	r3, #0
 80015c0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80015c2:	463b      	mov	r3, r7
 80015c4:	4618      	mov	r0, r3
 80015c6:	f007 ff1d 	bl	8009404 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80015ca:	2301      	movs	r3, #1
 80015cc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x90000000;
 80015ce:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 80015d2:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 80015d4:	2319      	movs	r3, #25
 80015d6:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80015d8:	2300      	movs	r3, #0
 80015da:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80015dc:	2303      	movs	r3, #3
 80015de:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 80015e0:	2301      	movs	r3, #1
 80015e2:	73bb      	strb	r3, [r7, #14]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80015e4:	463b      	mov	r3, r7
 80015e6:	4618      	mov	r0, r3
 80015e8:	f007 ff0c 	bl	8009404 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 80015ec:	2302      	movs	r3, #2
 80015ee:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 80015f0:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
 80015f4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_1MB;
 80015f6:	2313      	movs	r3, #19
 80015f8:	723b      	strb	r3, [r7, #8]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80015fa:	463b      	mov	r3, r7
 80015fc:	4618      	mov	r0, r3
 80015fe:	f007 ff01 	bl	8009404 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8001602:	2303      	movs	r3, #3
 8001604:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 8001606:	2311      	movs	r3, #17
 8001608:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 800160a:	2301      	movs	r3, #1
 800160c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800160e:	463b      	mov	r3, r7
 8001610:	4618      	mov	r0, r3
 8001612:	f007 fef7 	bl	8009404 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001616:	2004      	movs	r0, #4
 8001618:	f007 fed4 	bl	80093c4 <HAL_MPU_Enable>

}
 800161c:	bf00      	nop
 800161e:	3710      	adds	r7, #16
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}

08001624 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a04      	ldr	r2, [pc, #16]	; (8001644 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d101      	bne.n	800163a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001636:	f007 fd57 	bl	80090e8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800163a:	bf00      	nop
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	40001000 	.word	0x40001000

08001648 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800164c:	bf00      	nop
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
	...

08001658 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800165e:	4b0c      	ldr	r3, [pc, #48]	; (8001690 <HAL_MspInit+0x38>)
 8001660:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001664:	4a0a      	ldr	r2, [pc, #40]	; (8001690 <HAL_MspInit+0x38>)
 8001666:	f043 0302 	orr.w	r3, r3, #2
 800166a:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 800166e:	4b08      	ldr	r3, [pc, #32]	; (8001690 <HAL_MspInit+0x38>)
 8001670:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001674:	f003 0302 	and.w	r3, r3, #2
 8001678:	607b      	str	r3, [r7, #4]
 800167a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800167c:	2200      	movs	r2, #0
 800167e:	210f      	movs	r1, #15
 8001680:	f06f 0001 	mvn.w	r0, #1
 8001684:	f007 fe50 	bl	8009328 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001688:	bf00      	nop
 800168a:	3708      	adds	r7, #8
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	58024400 	.word	0x58024400

08001694 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001694:	b480      	push	{r7}
 8001696:	b085      	sub	sp, #20
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a0b      	ldr	r2, [pc, #44]	; (80016d0 <HAL_CRC_MspInit+0x3c>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d10e      	bne.n	80016c4 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80016a6:	4b0b      	ldr	r3, [pc, #44]	; (80016d4 <HAL_CRC_MspInit+0x40>)
 80016a8:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80016ac:	4a09      	ldr	r2, [pc, #36]	; (80016d4 <HAL_CRC_MspInit+0x40>)
 80016ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016b2:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 80016b6:	4b07      	ldr	r3, [pc, #28]	; (80016d4 <HAL_CRC_MspInit+0x40>)
 80016b8:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80016bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016c0:	60fb      	str	r3, [r7, #12]
 80016c2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80016c4:	bf00      	nop
 80016c6:	3714      	adds	r7, #20
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr
 80016d0:	40023000 	.word	0x40023000
 80016d4:	58024400 	.word	0x58024400

080016d8 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b084      	sub	sp, #16
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a0e      	ldr	r2, [pc, #56]	; (8001720 <HAL_DMA2D_MspInit+0x48>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d116      	bne.n	8001718 <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80016ea:	4b0e      	ldr	r3, [pc, #56]	; (8001724 <HAL_DMA2D_MspInit+0x4c>)
 80016ec:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80016f0:	4a0c      	ldr	r2, [pc, #48]	; (8001724 <HAL_DMA2D_MspInit+0x4c>)
 80016f2:	f043 0310 	orr.w	r3, r3, #16
 80016f6:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 80016fa:	4b0a      	ldr	r3, [pc, #40]	; (8001724 <HAL_DMA2D_MspInit+0x4c>)
 80016fc:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001700:	f003 0310 	and.w	r3, r3, #16
 8001704:	60fb      	str	r3, [r7, #12]
 8001706:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001708:	2200      	movs	r2, #0
 800170a:	2105      	movs	r1, #5
 800170c:	205a      	movs	r0, #90	; 0x5a
 800170e:	f007 fe0b 	bl	8009328 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001712:	205a      	movs	r0, #90	; 0x5a
 8001714:	f007 fe22 	bl	800935c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001718:	bf00      	nop
 800171a:	3710      	adds	r7, #16
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	52001000 	.word	0x52001000
 8001724:	58024400 	.word	0x58024400

08001728 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b0ba      	sub	sp, #232	; 0xe8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001730:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	605a      	str	r2, [r3, #4]
 800173a:	609a      	str	r2, [r3, #8]
 800173c:	60da      	str	r2, [r3, #12]
 800173e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001740:	f107 0310 	add.w	r3, r7, #16
 8001744:	22c0      	movs	r2, #192	; 0xc0
 8001746:	2100      	movs	r1, #0
 8001748:	4618      	mov	r0, r3
 800174a:	f027 fe08 	bl	802935e <memset>
  if(hi2c->Instance==I2C4)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a27      	ldr	r2, [pc, #156]	; (80017f0 <HAL_I2C_MspInit+0xc8>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d146      	bne.n	80017e6 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001758:	f04f 0210 	mov.w	r2, #16
 800175c:	f04f 0300 	mov.w	r3, #0
 8001760:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8001764:	2300      	movs	r3, #0
 8001766:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800176a:	f107 0310 	add.w	r3, r7, #16
 800176e:	4618      	mov	r0, r3
 8001770:	f00b feec 	bl	800d54c <HAL_RCCEx_PeriphCLKConfig>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800177a:	f7ff ff65 	bl	8001648 <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800177e:	4b1d      	ldr	r3, [pc, #116]	; (80017f4 <HAL_I2C_MspInit+0xcc>)
 8001780:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001784:	4a1b      	ldr	r2, [pc, #108]	; (80017f4 <HAL_I2C_MspInit+0xcc>)
 8001786:	f043 0308 	orr.w	r3, r3, #8
 800178a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800178e:	4b19      	ldr	r3, [pc, #100]	; (80017f4 <HAL_I2C_MspInit+0xcc>)
 8001790:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001794:	f003 0308 	and.w	r3, r3, #8
 8001798:	60fb      	str	r3, [r7, #12]
 800179a:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PD13     ------> I2C4_SDA
    PD12     ------> I2C4_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12;
 800179c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80017a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017a4:	2312      	movs	r3, #18
 80017a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017aa:	2300      	movs	r3, #0
 80017ac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017b0:	2302      	movs	r3, #2
 80017b2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80017b6:	2304      	movs	r3, #4
 80017b8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017bc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80017c0:	4619      	mov	r1, r3
 80017c2:	480d      	ldr	r0, [pc, #52]	; (80017f8 <HAL_I2C_MspInit+0xd0>)
 80017c4:	f008 f976 	bl	8009ab4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 80017c8:	4b0a      	ldr	r3, [pc, #40]	; (80017f4 <HAL_I2C_MspInit+0xcc>)
 80017ca:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80017ce:	4a09      	ldr	r2, [pc, #36]	; (80017f4 <HAL_I2C_MspInit+0xcc>)
 80017d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017d4:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80017d8:	4b06      	ldr	r3, [pc, #24]	; (80017f4 <HAL_I2C_MspInit+0xcc>)
 80017da:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80017de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017e2:	60bb      	str	r3, [r7, #8]
 80017e4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 80017e6:	bf00      	nop
 80017e8:	37e8      	adds	r7, #232	; 0xe8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	58001c00 	.word	0x58001c00
 80017f4:	58024400 	.word	0x58024400
 80017f8:	58020c00 	.word	0x58020c00

080017fc <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C4)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a0c      	ldr	r2, [pc, #48]	; (800183c <HAL_I2C_MspDeInit+0x40>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d111      	bne.n	8001832 <HAL_I2C_MspDeInit+0x36>
  {
  /* USER CODE BEGIN I2C4_MspDeInit 0 */

  /* USER CODE END I2C4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C4_CLK_DISABLE();
 800180e:	4b0c      	ldr	r3, [pc, #48]	; (8001840 <HAL_I2C_MspDeInit+0x44>)
 8001810:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001814:	4a0a      	ldr	r2, [pc, #40]	; (8001840 <HAL_I2C_MspDeInit+0x44>)
 8001816:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800181a:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154

    /**I2C4 GPIO Configuration
    PD13     ------> I2C4_SDA
    PD12     ------> I2C4_SCL
    */
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_13);
 800181e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001822:	4808      	ldr	r0, [pc, #32]	; (8001844 <HAL_I2C_MspDeInit+0x48>)
 8001824:	f008 faf6 	bl	8009e14 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_12);
 8001828:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800182c:	4805      	ldr	r0, [pc, #20]	; (8001844 <HAL_I2C_MspDeInit+0x48>)
 800182e:	f008 faf1 	bl	8009e14 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C4_MspDeInit 1 */

  /* USER CODE END I2C4_MspDeInit 1 */
  }

}
 8001832:	bf00      	nop
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	58001c00 	.word	0x58001c00
 8001840:	58024400 	.word	0x58024400
 8001844:	58020c00 	.word	0x58020c00

08001848 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b0bc      	sub	sp, #240	; 0xf0
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001850:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
 8001858:	605a      	str	r2, [r3, #4]
 800185a:	609a      	str	r2, [r3, #8]
 800185c:	60da      	str	r2, [r3, #12]
 800185e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001860:	f107 0318 	add.w	r3, r7, #24
 8001864:	22c0      	movs	r2, #192	; 0xc0
 8001866:	2100      	movs	r1, #0
 8001868:	4618      	mov	r0, r3
 800186a:	f027 fd78 	bl	802935e <memset>
  if(hltdc->Instance==LTDC)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a57      	ldr	r2, [pc, #348]	; (80019d0 <HAL_LTDC_MspInit+0x188>)
 8001874:	4293      	cmp	r3, r2
 8001876:	f040 80a6 	bne.w	80019c6 <HAL_LTDC_MspInit+0x17e>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800187a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800187e:	f04f 0300 	mov.w	r3, #0
 8001882:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL3.PLL3M = 24;
 8001886:	2318      	movs	r3, #24
 8001888:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3N = 288;
 800188a:	f44f 7390 	mov.w	r3, #288	; 0x120
 800188e:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3P = 17;
 8001890:	2311      	movs	r3, #17
 8001892:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001894:	2302      	movs	r3, #2
 8001896:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3R = 30;
 8001898:	231e      	movs	r3, #30
 800189a:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 800189c:	2300      	movs	r3, #0
 800189e:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 80018a0:	2300      	movs	r3, #0
 80018a2:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80018a4:	2300      	movs	r3, #0
 80018a6:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018a8:	f107 0318 	add.w	r3, r7, #24
 80018ac:	4618      	mov	r0, r3
 80018ae:	f00b fe4d 	bl	800d54c <HAL_RCCEx_PeriphCLKConfig>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <HAL_LTDC_MspInit+0x74>
    {
      Error_Handler();
 80018b8:	f7ff fec6 	bl	8001648 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80018bc:	4b45      	ldr	r3, [pc, #276]	; (80019d4 <HAL_LTDC_MspInit+0x18c>)
 80018be:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80018c2:	4a44      	ldr	r2, [pc, #272]	; (80019d4 <HAL_LTDC_MspInit+0x18c>)
 80018c4:	f043 0308 	orr.w	r3, r3, #8
 80018c8:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144
 80018cc:	4b41      	ldr	r3, [pc, #260]	; (80019d4 <HAL_LTDC_MspInit+0x18c>)
 80018ce:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80018d2:	f003 0308 	and.w	r3, r3, #8
 80018d6:	617b      	str	r3, [r7, #20]
 80018d8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 80018da:	4b3e      	ldr	r3, [pc, #248]	; (80019d4 <HAL_LTDC_MspInit+0x18c>)
 80018dc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80018e0:	4a3c      	ldr	r2, [pc, #240]	; (80019d4 <HAL_LTDC_MspInit+0x18c>)
 80018e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018e6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80018ea:	4b3a      	ldr	r3, [pc, #232]	; (80019d4 <HAL_LTDC_MspInit+0x18c>)
 80018ec:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80018f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018f4:	613b      	str	r3, [r7, #16]
 80018f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80018f8:	4b36      	ldr	r3, [pc, #216]	; (80019d4 <HAL_LTDC_MspInit+0x18c>)
 80018fa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80018fe:	4a35      	ldr	r2, [pc, #212]	; (80019d4 <HAL_LTDC_MspInit+0x18c>)
 8001900:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001904:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001908:	4b32      	ldr	r3, [pc, #200]	; (80019d4 <HAL_LTDC_MspInit+0x18c>)
 800190a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800190e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001912:	60fb      	str	r3, [r7, #12]
 8001914:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001916:	4b2f      	ldr	r3, [pc, #188]	; (80019d4 <HAL_LTDC_MspInit+0x18c>)
 8001918:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800191c:	4a2d      	ldr	r2, [pc, #180]	; (80019d4 <HAL_LTDC_MspInit+0x18c>)
 800191e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001922:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001926:	4b2b      	ldr	r3, [pc, #172]	; (80019d4 <HAL_LTDC_MspInit+0x18c>)
 8001928:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800192c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001930:	60bb      	str	r3, [r7, #8]
 8001932:	68bb      	ldr	r3, [r7, #8]
    PJ1     ------> LTDC_R2
    PJ4     ------> LTDC_R5
    PJ2     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_3|GPIO_PIN_4
 8001934:	23ff      	movs	r3, #255	; 0xff
 8001936:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_7|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193a:	2302      	movs	r3, #2
 800193c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001940:	2300      	movs	r3, #0
 8001942:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001946:	2300      	movs	r3, #0
 8001948:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800194c:	230e      	movs	r3, #14
 800194e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001952:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001956:	4619      	mov	r1, r3
 8001958:	481f      	ldr	r0, [pc, #124]	; (80019d8 <HAL_LTDC_MspInit+0x190>)
 800195a:	f008 f8ab 	bl	8009ab4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12
 800195e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001962:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_0|GPIO_PIN_5
                          |GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001966:	2302      	movs	r3, #2
 8001968:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196c:	2300      	movs	r3, #0
 800196e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001972:	2300      	movs	r3, #0
 8001974:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001978:	230e      	movs	r3, #14
 800197a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800197e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001982:	4619      	mov	r1, r3
 8001984:	4815      	ldr	r0, [pc, #84]	; (80019dc <HAL_LTDC_MspInit+0x194>)
 8001986:	f008 f895 	bl	8009ab4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_15;
 800198a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800198e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001992:	2302      	movs	r3, #2
 8001994:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001998:	2300      	movs	r3, #0
 800199a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199e:	2300      	movs	r3, #0
 80019a0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80019a4:	230e      	movs	r3, #14
 80019a6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80019aa:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80019ae:	4619      	mov	r1, r3
 80019b0:	480b      	ldr	r0, [pc, #44]	; (80019e0 <HAL_LTDC_MspInit+0x198>)
 80019b2:	f008 f87f 	bl	8009ab4 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80019b6:	2200      	movs	r2, #0
 80019b8:	2105      	movs	r1, #5
 80019ba:	2058      	movs	r0, #88	; 0x58
 80019bc:	f007 fcb4 	bl	8009328 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80019c0:	2058      	movs	r0, #88	; 0x58
 80019c2:	f007 fccb 	bl	800935c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80019c6:	bf00      	nop
 80019c8:	37f0      	adds	r7, #240	; 0xf0
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	50001000 	.word	0x50001000
 80019d4:	58024400 	.word	0x58024400
 80019d8:	58022800 	.word	0x58022800
 80019dc:	58022400 	.word	0x58022400
 80019e0:	58022000 	.word	0x58022000

080019e4 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  if(hospi->Instance==OCTOSPI1)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a1c      	ldr	r2, [pc, #112]	; (8001a64 <HAL_OSPI_MspInit+0x80>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d131      	bne.n	8001a5a <HAL_OSPI_MspInit+0x76>
  {
  /* USER CODE BEGIN OCTOSPI1_MspInit 0 */
	__HAL_RCC_OSPI1_FORCE_RESET();
 80019f6:	4b1c      	ldr	r3, [pc, #112]	; (8001a68 <HAL_OSPI_MspInit+0x84>)
 80019f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80019fa:	4a1b      	ldr	r2, [pc, #108]	; (8001a68 <HAL_OSPI_MspInit+0x84>)
 80019fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a00:	67d3      	str	r3, [r2, #124]	; 0x7c
	__HAL_RCC_OSPI1_RELEASE_RESET();
 8001a02:	4b19      	ldr	r3, [pc, #100]	; (8001a68 <HAL_OSPI_MspInit+0x84>)
 8001a04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001a06:	4a18      	ldr	r2, [pc, #96]	; (8001a68 <HAL_OSPI_MspInit+0x84>)
 8001a08:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001a0c:	67d3      	str	r3, [r2, #124]	; 0x7c
  /* USER CODE END OCTOSPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 8001a0e:	4b16      	ldr	r3, [pc, #88]	; (8001a68 <HAL_OSPI_MspInit+0x84>)
 8001a10:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001a14:	4a14      	ldr	r2, [pc, #80]	; (8001a68 <HAL_OSPI_MspInit+0x84>)
 8001a16:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a1a:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8001a1e:	4b12      	ldr	r3, [pc, #72]	; (8001a68 <HAL_OSPI_MspInit+0x84>)
 8001a20:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001a24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a28:	60fb      	str	r3, [r7, #12]
 8001a2a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8001a2c:	4b0e      	ldr	r3, [pc, #56]	; (8001a68 <HAL_OSPI_MspInit+0x84>)
 8001a2e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001a32:	4a0d      	ldr	r2, [pc, #52]	; (8001a68 <HAL_OSPI_MspInit+0x84>)
 8001a34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a38:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8001a3c:	4b0a      	ldr	r3, [pc, #40]	; (8001a68 <HAL_OSPI_MspInit+0x84>)
 8001a3e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001a42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a46:	60bb      	str	r3, [r7, #8]
 8001a48:	68bb      	ldr	r3, [r7, #8]
    /* OCTOSPI1 interrupt Init */
    HAL_NVIC_SetPriority(OCTOSPI1_IRQn, 5, 0);
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	2105      	movs	r1, #5
 8001a4e:	205c      	movs	r0, #92	; 0x5c
 8001a50:	f007 fc6a 	bl	8009328 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OCTOSPI1_IRQn);
 8001a54:	205c      	movs	r0, #92	; 0x5c
 8001a56:	f007 fc81 	bl	800935c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 8001a5a:	bf00      	nop
 8001a5c:	3710      	adds	r7, #16
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	52005000 	.word	0x52005000
 8001a68:	58024400 	.word	0x58024400

08001a6c <HAL_OSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspDeInit(OSPI_HandleTypeDef* hospi)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  if(hospi->Instance==OCTOSPI1)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a0c      	ldr	r2, [pc, #48]	; (8001aac <HAL_OSPI_MspDeInit+0x40>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d112      	bne.n	8001aa4 <HAL_OSPI_MspDeInit+0x38>
  {
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 0 */

  /* USER CODE END OCTOSPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_OCTOSPIM_CLK_DISABLE();
 8001a7e:	4b0c      	ldr	r3, [pc, #48]	; (8001ab0 <HAL_OSPI_MspDeInit+0x44>)
 8001a80:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001a84:	4a0a      	ldr	r2, [pc, #40]	; (8001ab0 <HAL_OSPI_MspDeInit+0x44>)
 8001a86:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001a8a:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
    __HAL_RCC_OSPI1_CLK_DISABLE();
 8001a8e:	4b08      	ldr	r3, [pc, #32]	; (8001ab0 <HAL_OSPI_MspDeInit+0x44>)
 8001a90:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001a94:	4a06      	ldr	r2, [pc, #24]	; (8001ab0 <HAL_OSPI_MspDeInit+0x44>)
 8001a96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001a9a:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134

    /* OCTOSPI1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(OCTOSPI1_IRQn);
 8001a9e:	205c      	movs	r0, #92	; 0x5c
 8001aa0:	f007 fc6a 	bl	8009378 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 1 */

  /* USER CODE END OCTOSPI1_MspDeInit 1 */
  }

}
 8001aa4:	bf00      	nop
 8001aa6:	3708      	adds	r7, #8
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	52005000 	.word	0x52005000
 8001ab0:	58024400 	.word	0x58024400

08001ab4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b08a      	sub	sp, #40	; 0x28
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001abc:	f107 0314 	add.w	r3, r7, #20
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	605a      	str	r2, [r3, #4]
 8001ac6:	609a      	str	r2, [r3, #8]
 8001ac8:	60da      	str	r2, [r3, #12]
 8001aca:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a32      	ldr	r2, [pc, #200]	; (8001b9c <HAL_SD_MspInit+0xe8>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d15e      	bne.n	8001b94 <HAL_SD_MspInit+0xe0>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001ad6:	4b32      	ldr	r3, [pc, #200]	; (8001ba0 <HAL_SD_MspInit+0xec>)
 8001ad8:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001adc:	4a30      	ldr	r2, [pc, #192]	; (8001ba0 <HAL_SD_MspInit+0xec>)
 8001ade:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ae2:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8001ae6:	4b2e      	ldr	r3, [pc, #184]	; (8001ba0 <HAL_SD_MspInit+0xec>)
 8001ae8:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001aec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001af0:	613b      	str	r3, [r7, #16]
 8001af2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001af4:	4b2a      	ldr	r3, [pc, #168]	; (8001ba0 <HAL_SD_MspInit+0xec>)
 8001af6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001afa:	4a29      	ldr	r2, [pc, #164]	; (8001ba0 <HAL_SD_MspInit+0xec>)
 8001afc:	f043 0308 	orr.w	r3, r3, #8
 8001b00:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001b04:	4b26      	ldr	r3, [pc, #152]	; (8001ba0 <HAL_SD_MspInit+0xec>)
 8001b06:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001b0a:	f003 0308 	and.w	r3, r3, #8
 8001b0e:	60fb      	str	r3, [r7, #12]
 8001b10:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b12:	4b23      	ldr	r3, [pc, #140]	; (8001ba0 <HAL_SD_MspInit+0xec>)
 8001b14:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001b18:	4a21      	ldr	r2, [pc, #132]	; (8001ba0 <HAL_SD_MspInit+0xec>)
 8001b1a:	f043 0304 	orr.w	r3, r3, #4
 8001b1e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001b22:	4b1f      	ldr	r3, [pc, #124]	; (8001ba0 <HAL_SD_MspInit+0xec>)
 8001b24:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001b28:	f003 0304 	and.w	r3, r3, #4
 8001b2c:	60bb      	str	r3, [r7, #8]
 8001b2e:	68bb      	ldr	r3, [r7, #8]
    /**SDMMC1 GPIO Configuration
    PD2     ------> SDMMC1_CMD
    PC12     ------> SDMMC1_CK
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001b30:	2304      	movs	r3, #4
 8001b32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b34:	2302      	movs	r3, #2
 8001b36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001b40:	230c      	movs	r3, #12
 8001b42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b44:	f107 0314 	add.w	r3, r7, #20
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4816      	ldr	r0, [pc, #88]	; (8001ba4 <HAL_SD_MspInit+0xf0>)
 8001b4c:	f007 ffb2 	bl	8009ab4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001b50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b56:	2302      	movs	r3, #2
 8001b58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001b62:	230c      	movs	r3, #12
 8001b64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b66:	f107 0314 	add.w	r3, r7, #20
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	480e      	ldr	r0, [pc, #56]	; (8001ba8 <HAL_SD_MspInit+0xf4>)
 8001b6e:	f007 ffa1 	bl	8009ab4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001b72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b78:	2302      	movs	r3, #2
 8001b7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b80:	2303      	movs	r3, #3
 8001b82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001b84:	230c      	movs	r3, #12
 8001b86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b88:	f107 0314 	add.w	r3, r7, #20
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4806      	ldr	r0, [pc, #24]	; (8001ba8 <HAL_SD_MspInit+0xf4>)
 8001b90:	f007 ff90 	bl	8009ab4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001b94:	bf00      	nop
 8001b96:	3728      	adds	r7, #40	; 0x28
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	52007000 	.word	0x52007000
 8001ba0:	58024400 	.word	0x58024400
 8001ba4:	58020c00 	.word	0x58020c00
 8001ba8:	58020800 	.word	0x58020800

08001bac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b0ba      	sub	sp, #232	; 0xe8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	605a      	str	r2, [r3, #4]
 8001bbe:	609a      	str	r2, [r3, #8]
 8001bc0:	60da      	str	r2, [r3, #12]
 8001bc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bc4:	f107 0310 	add.w	r3, r7, #16
 8001bc8:	22c0      	movs	r2, #192	; 0xc0
 8001bca:	2100      	movs	r1, #0
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f027 fbc6 	bl	802935e <memset>
  if(huart->Instance==USART1)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a27      	ldr	r2, [pc, #156]	; (8001c74 <HAL_UART_MspInit+0xc8>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d146      	bne.n	8001c6a <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001bdc:	f04f 0201 	mov.w	r2, #1
 8001be0:	f04f 0300 	mov.w	r3, #0
 8001be4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8001be8:	2300      	movs	r3, #0
 8001bea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bee:	f107 0310 	add.w	r3, r7, #16
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f00b fcaa 	bl	800d54c <HAL_RCCEx_PeriphCLKConfig>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001bfe:	f7ff fd23 	bl	8001648 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c02:	4b1d      	ldr	r3, [pc, #116]	; (8001c78 <HAL_UART_MspInit+0xcc>)
 8001c04:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8001c08:	4a1b      	ldr	r2, [pc, #108]	; (8001c78 <HAL_UART_MspInit+0xcc>)
 8001c0a:	f043 0310 	orr.w	r3, r3, #16
 8001c0e:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8001c12:	4b19      	ldr	r3, [pc, #100]	; (8001c78 <HAL_UART_MspInit+0xcc>)
 8001c14:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8001c18:	f003 0310 	and.w	r3, r3, #16
 8001c1c:	60fb      	str	r3, [r7, #12]
 8001c1e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c20:	4b15      	ldr	r3, [pc, #84]	; (8001c78 <HAL_UART_MspInit+0xcc>)
 8001c22:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001c26:	4a14      	ldr	r2, [pc, #80]	; (8001c78 <HAL_UART_MspInit+0xcc>)
 8001c28:	f043 0301 	orr.w	r3, r3, #1
 8001c2c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001c30:	4b11      	ldr	r3, [pc, #68]	; (8001c78 <HAL_UART_MspInit+0xcc>)
 8001c32:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001c36:	f003 0301 	and.w	r3, r3, #1
 8001c3a:	60bb      	str	r3, [r7, #8]
 8001c3c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8001c3e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001c42:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c46:	2302      	movs	r3, #2
 8001c48:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c52:	2300      	movs	r3, #0
 8001c54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c58:	2307      	movs	r3, #7
 8001c5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c5e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001c62:	4619      	mov	r1, r3
 8001c64:	4805      	ldr	r0, [pc, #20]	; (8001c7c <HAL_UART_MspInit+0xd0>)
 8001c66:	f007 ff25 	bl	8009ab4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001c6a:	bf00      	nop
 8001c6c:	37e8      	adds	r7, #232	; 0xe8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	40011000 	.word	0x40011000
 8001c78:	58024400 	.word	0x58024400
 8001c7c:	58020000 	.word	0x58020000

08001c80 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b090      	sub	sp, #64	; 0x40
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2b0f      	cmp	r3, #15
 8001c8c:	d827      	bhi.n	8001cde <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8001c8e:	2200      	movs	r2, #0
 8001c90:	6879      	ldr	r1, [r7, #4]
 8001c92:	2036      	movs	r0, #54	; 0x36
 8001c94:	f007 fb48 	bl	8009328 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001c98:	2036      	movs	r0, #54	; 0x36
 8001c9a:	f007 fb5f 	bl	800935c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001c9e:	4a29      	ldr	r2, [pc, #164]	; (8001d44 <HAL_InitTick+0xc4>)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001ca4:	4b28      	ldr	r3, [pc, #160]	; (8001d48 <HAL_InitTick+0xc8>)
 8001ca6:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001caa:	4a27      	ldr	r2, [pc, #156]	; (8001d48 <HAL_InitTick+0xc8>)
 8001cac:	f043 0310 	orr.w	r3, r3, #16
 8001cb0:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001cb4:	4b24      	ldr	r3, [pc, #144]	; (8001d48 <HAL_InitTick+0xc8>)
 8001cb6:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001cba:	f003 0310 	and.w	r3, r3, #16
 8001cbe:	60fb      	str	r3, [r7, #12]
 8001cc0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001cc2:	f107 0210 	add.w	r2, r7, #16
 8001cc6:	f107 0314 	add.w	r3, r7, #20
 8001cca:	4611      	mov	r1, r2
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f00b fbfb 	bl	800d4c8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cd4:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d106      	bne.n	8001cea <HAL_InitTick+0x6a>
 8001cdc:	e001      	b.n	8001ce2 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e02b      	b.n	8001d3a <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001ce2:	f00b fbc5 	bl	800d470 <HAL_RCC_GetPCLK1Freq>
 8001ce6:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001ce8:	e004      	b.n	8001cf4 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001cea:	f00b fbc1 	bl	800d470 <HAL_RCC_GetPCLK1Freq>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	005b      	lsls	r3, r3, #1
 8001cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001cf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cf6:	4a15      	ldr	r2, [pc, #84]	; (8001d4c <HAL_InitTick+0xcc>)
 8001cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8001cfc:	0c9b      	lsrs	r3, r3, #18
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001d02:	4b13      	ldr	r3, [pc, #76]	; (8001d50 <HAL_InitTick+0xd0>)
 8001d04:	4a13      	ldr	r2, [pc, #76]	; (8001d54 <HAL_InitTick+0xd4>)
 8001d06:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001d08:	4b11      	ldr	r3, [pc, #68]	; (8001d50 <HAL_InitTick+0xd0>)
 8001d0a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d0e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001d10:	4a0f      	ldr	r2, [pc, #60]	; (8001d50 <HAL_InitTick+0xd0>)
 8001d12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d14:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001d16:	4b0e      	ldr	r3, [pc, #56]	; (8001d50 <HAL_InitTick+0xd0>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d1c:	4b0c      	ldr	r3, [pc, #48]	; (8001d50 <HAL_InitTick+0xd0>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001d22:	480b      	ldr	r0, [pc, #44]	; (8001d50 <HAL_InitTick+0xd0>)
 8001d24:	f00f fa06 	bl	8011134 <HAL_TIM_Base_Init>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d104      	bne.n	8001d38 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001d2e:	4808      	ldr	r0, [pc, #32]	; (8001d50 <HAL_InitTick+0xd0>)
 8001d30:	f00f fa62 	bl	80111f8 <HAL_TIM_Base_Start_IT>
 8001d34:	4603      	mov	r3, r0
 8001d36:	e000      	b.n	8001d3a <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3740      	adds	r7, #64	; 0x40
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	24000048 	.word	0x24000048
 8001d48:	58024400 	.word	0x58024400
 8001d4c:	431bde83 	.word	0x431bde83
 8001d50:	24000920 	.word	0x24000920
 8001d54:	40001000 	.word	0x40001000

08001d58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d5c:	e7fe      	b.n	8001d5c <NMI_Handler+0x4>

08001d5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d62:	e7fe      	b.n	8001d62 <HardFault_Handler+0x4>

08001d64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d68:	e7fe      	b.n	8001d68 <MemManage_Handler+0x4>

08001d6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d6e:	e7fe      	b.n	8001d6e <BusFault_Handler+0x4>

08001d70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d74:	e7fe      	b.n	8001d74 <UsageFault_Handler+0x4>

08001d76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d76:	b480      	push	{r7}
 8001d78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d7a:	bf00      	nop
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LCD_INT_Pin);
 8001d88:	2004      	movs	r0, #4
 8001d8a:	f008 f998 	bl	800a0be <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001d8e:	bf00      	nop
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001d92:	b580      	push	{r7, lr}
 8001d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BTN_Pin);
 8001d96:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001d9a:	f008 f990 	bl	800a0be <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001d9e:	bf00      	nop
 8001da0:	bd80      	pop	{r7, pc}
	...

08001da4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001da8:	4802      	ldr	r0, [pc, #8]	; (8001db4 <TIM6_DAC_IRQHandler+0x10>)
 8001daa:	f00f fa9d 	bl	80112e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001dae:	bf00      	nop
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	24000920 	.word	0x24000920

08001db8 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001dbc:	4802      	ldr	r0, [pc, #8]	; (8001dc8 <LTDC_IRQHandler+0x10>)
 8001dbe:	f009 f8c1 	bl	800af44 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001dc2:	bf00      	nop
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	24000694 	.word	0x24000694

08001dcc <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001dd0:	4802      	ldr	r0, [pc, #8]	; (8001ddc <DMA2D_IRQHandler+0x10>)
 8001dd2:	f007 fcb1 	bl	8009738 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001dd6:	bf00      	nop
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	240005d8 	.word	0x240005d8

08001de0 <OCTOSPI1_IRQHandler>:

/**
  * @brief This function handles OCTOSPI1 global interrupt.
  */
void OCTOSPI1_IRQHandler(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OCTOSPI1_IRQn 0 */

  /* USER CODE END OCTOSPI1_IRQn 0 */
  HAL_OSPI_IRQHandler(&hospi1);
 8001de4:	4802      	ldr	r0, [pc, #8]	; (8001df0 <OCTOSPI1_IRQHandler+0x10>)
 8001de6:	f009 fcdb 	bl	800b7a0 <HAL_OSPI_IRQHandler>
  /* USER CODE BEGIN OCTOSPI1_IRQn 1 */

  /* USER CODE END OCTOSPI1_IRQn 1 */
}
 8001dea:	bf00      	nop
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	2400073c 	.word	0x2400073c

08001df4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  return 1;
 8001df8:	2301      	movs	r3, #1
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <_kill>:

int _kill(int pid, int sig)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e0e:	f027 fb49 	bl	80294a4 <__errno>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2216      	movs	r2, #22
 8001e16:	601a      	str	r2, [r3, #0]
  return -1;
 8001e18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3708      	adds	r7, #8
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <_exit>:

void _exit (int status)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f7ff ffe7 	bl	8001e04 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e36:	e7fe      	b.n	8001e36 <_exit+0x12>

08001e38 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b086      	sub	sp, #24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	60f8      	str	r0, [r7, #12]
 8001e40:	60b9      	str	r1, [r7, #8]
 8001e42:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e44:	2300      	movs	r3, #0
 8001e46:	617b      	str	r3, [r7, #20]
 8001e48:	e00a      	b.n	8001e60 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e4a:	f3af 8000 	nop.w
 8001e4e:	4601      	mov	r1, r0
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	1c5a      	adds	r2, r3, #1
 8001e54:	60ba      	str	r2, [r7, #8]
 8001e56:	b2ca      	uxtb	r2, r1
 8001e58:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	617b      	str	r3, [r7, #20]
 8001e60:	697a      	ldr	r2, [r7, #20]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	dbf0      	blt.n	8001e4a <_read+0x12>
  }

  return len;
 8001e68:	687b      	ldr	r3, [r7, #4]
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3718      	adds	r7, #24
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b086      	sub	sp, #24
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	60f8      	str	r0, [r7, #12]
 8001e7a:	60b9      	str	r1, [r7, #8]
 8001e7c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e7e:	2300      	movs	r3, #0
 8001e80:	617b      	str	r3, [r7, #20]
 8001e82:	e009      	b.n	8001e98 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	1c5a      	adds	r2, r3, #1
 8001e88:	60ba      	str	r2, [r7, #8]
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	3301      	adds	r3, #1
 8001e96:	617b      	str	r3, [r7, #20]
 8001e98:	697a      	ldr	r2, [r7, #20]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	dbf1      	blt.n	8001e84 <_write+0x12>
  }
  return len;
 8001ea0:	687b      	ldr	r3, [r7, #4]
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3718      	adds	r7, #24
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <_close>:

int _close(int file)
{
 8001eaa:	b480      	push	{r7}
 8001eac:	b083      	sub	sp, #12
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001eb2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	370c      	adds	r7, #12
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr

08001ec2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	b083      	sub	sp, #12
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
 8001eca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ed2:	605a      	str	r2, [r3, #4]
  return 0;
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr

08001ee2 <_isatty>:

int _isatty(int file)
{
 8001ee2:	b480      	push	{r7}
 8001ee4:	b083      	sub	sp, #12
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001eea:	2301      	movs	r3, #1
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b085      	sub	sp, #20
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	60f8      	str	r0, [r7, #12]
 8001f00:	60b9      	str	r1, [r7, #8]
 8001f02:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3714      	adds	r7, #20
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
	...

08001f14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b086      	sub	sp, #24
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f1c:	4a14      	ldr	r2, [pc, #80]	; (8001f70 <_sbrk+0x5c>)
 8001f1e:	4b15      	ldr	r3, [pc, #84]	; (8001f74 <_sbrk+0x60>)
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f28:	4b13      	ldr	r3, [pc, #76]	; (8001f78 <_sbrk+0x64>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d102      	bne.n	8001f36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f30:	4b11      	ldr	r3, [pc, #68]	; (8001f78 <_sbrk+0x64>)
 8001f32:	4a12      	ldr	r2, [pc, #72]	; (8001f7c <_sbrk+0x68>)
 8001f34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f36:	4b10      	ldr	r3, [pc, #64]	; (8001f78 <_sbrk+0x64>)
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4413      	add	r3, r2
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d207      	bcs.n	8001f54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f44:	f027 faae 	bl	80294a4 <__errno>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	220c      	movs	r2, #12
 8001f4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f52:	e009      	b.n	8001f68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f54:	4b08      	ldr	r3, [pc, #32]	; (8001f78 <_sbrk+0x64>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f5a:	4b07      	ldr	r3, [pc, #28]	; (8001f78 <_sbrk+0x64>)
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4413      	add	r3, r2
 8001f62:	4a05      	ldr	r2, [pc, #20]	; (8001f78 <_sbrk+0x64>)
 8001f64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f66:	68fb      	ldr	r3, [r7, #12]
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3718      	adds	r7, #24
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	24040000 	.word	0x24040000
 8001f74:	00001000 	.word	0x00001000
 8001f78:	2400096c 	.word	0x2400096c
 8001f7c:	24007c00 	.word	0x24007c00

08001f80 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8001f84:	4904      	ldr	r1, [pc, #16]	; (8001f98 <MX_FATFS_Init+0x18>)
 8001f86:	4805      	ldr	r0, [pc, #20]	; (8001f9c <MX_FATFS_Init+0x1c>)
 8001f88:	f014 f89c 	bl	80160c4 <FATFS_LinkDriver>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	461a      	mov	r2, r3
 8001f90:	4b03      	ldr	r3, [pc, #12]	; (8001fa0 <MX_FATFS_Init+0x20>)
 8001f92:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8001f94:	bf00      	nop
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	24000974 	.word	0x24000974
 8001f9c:	0802b16c 	.word	0x0802b16c
 8001fa0:	24000970 	.word	0x24000970

08001fa4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8001fa8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8001fbe:	f000 f863 	bl	8002088 <BSP_SD_IsDetected>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d001      	beq.n	8001fcc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8001fc8:	2302      	movs	r3, #2
 8001fca:	e005      	b.n	8001fd8 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8001fcc:	4804      	ldr	r0, [pc, #16]	; (8001fe0 <BSP_SD_Init+0x2c>)
 8001fce:	f00d fec7 	bl	800fd60 <HAL_SD_Init>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8001fd6:	79fb      	ldrb	r3, [r7, #7]
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3708      	adds	r7, #8
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	24000798 	.word	0x24000798

08001fe4 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b086      	sub	sp, #24
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	60b9      	str	r1, [r7, #8]
 8001fee:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	68ba      	ldr	r2, [r7, #8]
 8001ff8:	68f9      	ldr	r1, [r7, #12]
 8001ffa:	4806      	ldr	r0, [pc, #24]	; (8002014 <BSP_SD_ReadBlocks_DMA+0x30>)
 8001ffc:	f00d ffd0 	bl	800ffa0 <HAL_SD_ReadBlocks_DMA>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800200a:	7dfb      	ldrb	r3, [r7, #23]
}
 800200c:	4618      	mov	r0, r3
 800200e:	3718      	adds	r7, #24
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	24000798 	.word	0x24000798

08002018 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b086      	sub	sp, #24
 800201c:	af00      	add	r7, sp, #0
 800201e:	60f8      	str	r0, [r7, #12]
 8002020:	60b9      	str	r1, [r7, #8]
 8002022:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8002024:	2300      	movs	r3, #0
 8002026:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	68ba      	ldr	r2, [r7, #8]
 800202c:	68f9      	ldr	r1, [r7, #12]
 800202e:	4806      	ldr	r0, [pc, #24]	; (8002048 <BSP_SD_WriteBlocks_DMA+0x30>)
 8002030:	f00e f85e 	bl	80100f0 <HAL_SD_WriteBlocks_DMA>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800203e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002040:	4618      	mov	r0, r3
 8002042:	3718      	adds	r7, #24
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	24000798 	.word	0x24000798

0800204c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8002050:	4805      	ldr	r0, [pc, #20]	; (8002068 <BSP_SD_GetCardState+0x1c>)
 8002052:	f00e fc95 	bl	8010980 <HAL_SD_GetCardState>
 8002056:	4603      	mov	r3, r0
 8002058:	2b04      	cmp	r3, #4
 800205a:	bf14      	ite	ne
 800205c:	2301      	movne	r3, #1
 800205e:	2300      	moveq	r3, #0
 8002060:	b2db      	uxtb	r3, r3
}
 8002062:	4618      	mov	r0, r3
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	24000798 	.word	0x24000798

0800206c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8002074:	6879      	ldr	r1, [r7, #4]
 8002076:	4803      	ldr	r0, [pc, #12]	; (8002084 <BSP_SD_GetCardInfo+0x18>)
 8002078:	f00e fb44 	bl	8010704 <HAL_SD_GetCardInfo>
}
 800207c:	bf00      	nop
 800207e:	3708      	adds	r7, #8
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	24000798 	.word	0x24000798

08002088 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800208e:	2301      	movs	r3, #1
 8002090:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8002092:	f000 f80b 	bl	80020ac <BSP_PlatformIsDetected>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d101      	bne.n	80020a0 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800209c:	2300      	movs	r3, #0
 800209e:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80020a0:	79fb      	ldrb	r3, [r7, #7]
 80020a2:	b2db      	uxtb	r3, r3
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3708      	adds	r7, #8
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80020b2:	2301      	movs	r3, #1
 80020b4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80020b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020ba:	4806      	ldr	r0, [pc, #24]	; (80020d4 <BSP_PlatformIsDetected+0x28>)
 80020bc:	f007 ffb4 	bl	800a028 <HAL_GPIO_ReadPin>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 80020c6:	2300      	movs	r3, #0
 80020c8:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80020ca:	79fb      	ldrb	r3, [r7, #7]
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3708      	adds	r7, #8
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	58022000 	.word	0x58022000

080020d8 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 80020e0:	f014 f8f6 	bl	80162d0 <osKernelGetTickCount>
 80020e4:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 80020e6:	e006      	b.n	80020f6 <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80020e8:	f7ff ffb0 	bl	800204c <BSP_SD_GetCardState>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d101      	bne.n	80020f6 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80020f2:	2300      	movs	r3, #0
 80020f4:	e009      	b.n	800210a <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 80020f6:	f014 f8eb 	bl	80162d0 <osKernelGetTickCount>
 80020fa:	4602      	mov	r2, r0
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	429a      	cmp	r2, r3
 8002104:	d8f0      	bhi.n	80020e8 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8002106:	f04f 33ff 	mov.w	r3, #4294967295
}
 800210a:	4618      	mov	r0, r3
 800210c:	3710      	adds	r7, #16
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
	...

08002114 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	4603      	mov	r3, r0
 800211c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800211e:	4b0b      	ldr	r3, [pc, #44]	; (800214c <SD_CheckStatus+0x38>)
 8002120:	2201      	movs	r2, #1
 8002122:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8002124:	f7ff ff92 	bl	800204c <BSP_SD_GetCardState>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d107      	bne.n	800213e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800212e:	4b07      	ldr	r3, [pc, #28]	; (800214c <SD_CheckStatus+0x38>)
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	b2db      	uxtb	r3, r3
 8002134:	f023 0301 	bic.w	r3, r3, #1
 8002138:	b2da      	uxtb	r2, r3
 800213a:	4b04      	ldr	r3, [pc, #16]	; (800214c <SD_CheckStatus+0x38>)
 800213c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800213e:	4b03      	ldr	r3, [pc, #12]	; (800214c <SD_CheckStatus+0x38>)
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	b2db      	uxtb	r3, r3
}
 8002144:	4618      	mov	r0, r3
 8002146:	3708      	adds	r7, #8
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	24000004 	.word	0x24000004

08002150 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	4603      	mov	r3, r0
 8002158:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800215a:	4b1c      	ldr	r3, [pc, #112]	; (80021cc <SD_initialize+0x7c>)
 800215c:	2201      	movs	r2, #1
 800215e:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 8002160:	f014 f86e 	bl	8016240 <osKernelGetState>
 8002164:	4603      	mov	r3, r0
 8002166:	2b02      	cmp	r3, #2
 8002168:	d129      	bne.n	80021be <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800216a:	f7ff ff23 	bl	8001fb4 <BSP_SD_Init>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d107      	bne.n	8002184 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8002174:	79fb      	ldrb	r3, [r7, #7]
 8002176:	4618      	mov	r0, r3
 8002178:	f7ff ffcc 	bl	8002114 <SD_CheckStatus>
 800217c:	4603      	mov	r3, r0
 800217e:	461a      	mov	r2, r3
 8002180:	4b12      	ldr	r3, [pc, #72]	; (80021cc <SD_initialize+0x7c>)
 8002182:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8002184:	4b11      	ldr	r3, [pc, #68]	; (80021cc <SD_initialize+0x7c>)
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	b2db      	uxtb	r3, r3
 800218a:	2b01      	cmp	r3, #1
 800218c:	d017      	beq.n	80021be <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 800218e:	4b10      	ldr	r3, [pc, #64]	; (80021d0 <SD_initialize+0x80>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d107      	bne.n	80021a6 <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 8002196:	2200      	movs	r2, #0
 8002198:	2102      	movs	r1, #2
 800219a:	200a      	movs	r0, #10
 800219c:	f014 fa9e 	bl	80166dc <osMessageQueueNew>
 80021a0:	4603      	mov	r3, r0
 80021a2:	4a0b      	ldr	r2, [pc, #44]	; (80021d0 <SD_initialize+0x80>)
 80021a4:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 80021a6:	4b0a      	ldr	r3, [pc, #40]	; (80021d0 <SD_initialize+0x80>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d107      	bne.n	80021be <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 80021ae:	4b07      	ldr	r3, [pc, #28]	; (80021cc <SD_initialize+0x7c>)
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	f043 0301 	orr.w	r3, r3, #1
 80021b8:	b2da      	uxtb	r2, r3
 80021ba:	4b04      	ldr	r3, [pc, #16]	; (80021cc <SD_initialize+0x7c>)
 80021bc:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 80021be:	4b03      	ldr	r3, [pc, #12]	; (80021cc <SD_initialize+0x7c>)
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	b2db      	uxtb	r3, r3
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3708      	adds	r7, #8
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	24000004 	.word	0x24000004
 80021d0:	24000978 	.word	0x24000978

080021d4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	4603      	mov	r3, r0
 80021dc:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80021de:	79fb      	ldrb	r3, [r7, #7]
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7ff ff97 	bl	8002114 <SD_CheckStatus>
 80021e6:	4603      	mov	r3, r0
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3708      	adds	r7, #8
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b088      	sub	sp, #32
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	60b9      	str	r1, [r7, #8]
 80021f8:	607a      	str	r2, [r7, #4]
 80021fa:	603b      	str	r3, [r7, #0]
 80021fc:	4603      	mov	r3, r0
 80021fe:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8002204:	f247 5030 	movw	r0, #30000	; 0x7530
 8002208:	f7ff ff66 	bl	80020d8 <SD_CheckStatusWithTimeout>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	da01      	bge.n	8002216 <SD_read+0x26>
  {
    return res;
 8002212:	7ffb      	ldrb	r3, [r7, #31]
 8002214:	e02f      	b.n	8002276 <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8002216:	683a      	ldr	r2, [r7, #0]
 8002218:	6879      	ldr	r1, [r7, #4]
 800221a:	68b8      	ldr	r0, [r7, #8]
 800221c:	f7ff fee2 	bl	8001fe4 <BSP_SD_ReadBlocks_DMA>
 8002220:	4603      	mov	r3, r0
 8002222:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 8002224:	7fbb      	ldrb	r3, [r7, #30]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d124      	bne.n	8002274 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800222a:	4b15      	ldr	r3, [pc, #84]	; (8002280 <SD_read+0x90>)
 800222c:	6818      	ldr	r0, [r3, #0]
 800222e:	f107 0112 	add.w	r1, r7, #18
 8002232:	f247 5330 	movw	r3, #30000	; 0x7530
 8002236:	2200      	movs	r2, #0
 8002238:	f014 fb24 	bl	8016884 <osMessageQueueGet>
 800223c:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 800223e:	69bb      	ldr	r3, [r7, #24]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d117      	bne.n	8002274 <SD_read+0x84>
 8002244:	8a7b      	ldrh	r3, [r7, #18]
 8002246:	2b01      	cmp	r3, #1
 8002248:	d114      	bne.n	8002274 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 800224a:	f014 f841 	bl	80162d0 <osKernelGetTickCount>
 800224e:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8002250:	e007      	b.n	8002262 <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8002252:	f7ff fefb 	bl	800204c <BSP_SD_GetCardState>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d102      	bne.n	8002262 <SD_read+0x72>
              {
                res = RES_OK;
 800225c:	2300      	movs	r3, #0
 800225e:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 8002260:	e008      	b.n	8002274 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8002262:	f014 f835 	bl	80162d0 <osKernelGetTickCount>
 8002266:	4602      	mov	r2, r0
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	f247 522f 	movw	r2, #29999	; 0x752f
 8002270:	4293      	cmp	r3, r2
 8002272:	d9ee      	bls.n	8002252 <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 8002274:	7ffb      	ldrb	r3, [r7, #31]
}
 8002276:	4618      	mov	r0, r3
 8002278:	3720      	adds	r7, #32
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	24000978 	.word	0x24000978

08002284 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b088      	sub	sp, #32
 8002288:	af00      	add	r7, sp, #0
 800228a:	60b9      	str	r1, [r7, #8]
 800228c:	607a      	str	r2, [r7, #4]
 800228e:	603b      	str	r3, [r7, #0]
 8002290:	4603      	mov	r3, r0
 8002292:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8002298:	f247 5030 	movw	r0, #30000	; 0x7530
 800229c:	f7ff ff1c 	bl	80020d8 <SD_CheckStatusWithTimeout>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	da01      	bge.n	80022aa <SD_write+0x26>
  {
    return res;
 80022a6:	7ffb      	ldrb	r3, [r7, #31]
 80022a8:	e02d      	b.n	8002306 <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80022aa:	683a      	ldr	r2, [r7, #0]
 80022ac:	6879      	ldr	r1, [r7, #4]
 80022ae:	68b8      	ldr	r0, [r7, #8]
 80022b0:	f7ff feb2 	bl	8002018 <BSP_SD_WriteBlocks_DMA>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d124      	bne.n	8002304 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 80022ba:	4b15      	ldr	r3, [pc, #84]	; (8002310 <SD_write+0x8c>)
 80022bc:	6818      	ldr	r0, [r3, #0]
 80022be:	f107 0112 	add.w	r1, r7, #18
 80022c2:	f247 5330 	movw	r3, #30000	; 0x7530
 80022c6:	2200      	movs	r2, #0
 80022c8:	f014 fadc 	bl	8016884 <osMessageQueueGet>
 80022cc:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d117      	bne.n	8002304 <SD_write+0x80>
 80022d4:	8a7b      	ldrh	r3, [r7, #18]
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d114      	bne.n	8002304 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 80022da:	f013 fff9 	bl	80162d0 <osKernelGetTickCount>
 80022de:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 80022e0:	e007      	b.n	80022f2 <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80022e2:	f7ff feb3 	bl	800204c <BSP_SD_GetCardState>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d102      	bne.n	80022f2 <SD_write+0x6e>
          {
            res = RES_OK;
 80022ec:	2300      	movs	r3, #0
 80022ee:	77fb      	strb	r3, [r7, #31]
            break;
 80022f0:	e008      	b.n	8002304 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 80022f2:	f013 ffed 	bl	80162d0 <osKernelGetTickCount>
 80022f6:	4602      	mov	r2, r0
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	f247 522f 	movw	r2, #29999	; 0x752f
 8002300:	4293      	cmp	r3, r2
 8002302:	d9ee      	bls.n	80022e2 <SD_write+0x5e>
    }

  }
#endif

  return res;
 8002304:	7ffb      	ldrb	r3, [r7, #31]
}
 8002306:	4618      	mov	r0, r3
 8002308:	3720      	adds	r7, #32
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	24000978 	.word	0x24000978

08002314 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b08c      	sub	sp, #48	; 0x30
 8002318:	af00      	add	r7, sp, #0
 800231a:	4603      	mov	r3, r0
 800231c:	603a      	str	r2, [r7, #0]
 800231e:	71fb      	strb	r3, [r7, #7]
 8002320:	460b      	mov	r3, r1
 8002322:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800232a:	4b25      	ldr	r3, [pc, #148]	; (80023c0 <SD_ioctl+0xac>)
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	b2db      	uxtb	r3, r3
 8002330:	f003 0301 	and.w	r3, r3, #1
 8002334:	2b00      	cmp	r3, #0
 8002336:	d001      	beq.n	800233c <SD_ioctl+0x28>
 8002338:	2303      	movs	r3, #3
 800233a:	e03c      	b.n	80023b6 <SD_ioctl+0xa2>

  switch (cmd)
 800233c:	79bb      	ldrb	r3, [r7, #6]
 800233e:	2b03      	cmp	r3, #3
 8002340:	d834      	bhi.n	80023ac <SD_ioctl+0x98>
 8002342:	a201      	add	r2, pc, #4	; (adr r2, 8002348 <SD_ioctl+0x34>)
 8002344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002348:	08002359 	.word	0x08002359
 800234c:	08002361 	.word	0x08002361
 8002350:	08002379 	.word	0x08002379
 8002354:	08002393 	.word	0x08002393
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8002358:	2300      	movs	r3, #0
 800235a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800235e:	e028      	b.n	80023b2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8002360:	f107 0308 	add.w	r3, r7, #8
 8002364:	4618      	mov	r0, r3
 8002366:	f7ff fe81 	bl	800206c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800236a:	6a3a      	ldr	r2, [r7, #32]
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8002370:	2300      	movs	r3, #0
 8002372:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8002376:	e01c      	b.n	80023b2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8002378:	f107 0308 	add.w	r3, r7, #8
 800237c:	4618      	mov	r0, r3
 800237e:	f7ff fe75 	bl	800206c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8002382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002384:	b29a      	uxth	r2, r3
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800238a:	2300      	movs	r3, #0
 800238c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8002390:	e00f      	b.n	80023b2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8002392:	f107 0308 	add.w	r3, r7, #8
 8002396:	4618      	mov	r0, r3
 8002398:	f7ff fe68 	bl	800206c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800239c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239e:	0a5a      	lsrs	r2, r3, #9
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80023a4:	2300      	movs	r3, #0
 80023a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80023aa:	e002      	b.n	80023b2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80023ac:	2304      	movs	r3, #4
 80023ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80023b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3730      	adds	r7, #48	; 0x30
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	24000004 	.word	0x24000004

080023c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80023c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023fc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80023c8:	f006 fdda 	bl	8008f80 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023cc:	480c      	ldr	r0, [pc, #48]	; (8002400 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80023ce:	490d      	ldr	r1, [pc, #52]	; (8002404 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80023d0:	4a0d      	ldr	r2, [pc, #52]	; (8002408 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80023d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023d4:	e002      	b.n	80023dc <LoopCopyDataInit>

080023d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023da:	3304      	adds	r3, #4

080023dc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 80023dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023e0:	d3f9      	bcc.n	80023d6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023e2:	4a0a      	ldr	r2, [pc, #40]	; (800240c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80023e4:	4c0a      	ldr	r4, [pc, #40]	; (8002410 <LoopFillZerobss+0x22>)
  movs r3, #0
 80023e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023e8:	e001      	b.n	80023ee <LoopFillZerobss>

080023ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023ec:	3204      	adds	r2, #4

080023ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023f0:	d3fb      	bcc.n	80023ea <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80023f2:	f027 f85d 	bl	80294b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023f6:	f7fe fb95 	bl	8000b24 <main>
  bx  lr
 80023fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80023fc:	24040000 	.word	0x24040000
  ldr r0, =_sdata
 8002400:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002404:	24000114 	.word	0x24000114
  ldr r2, =_sidata
 8002408:	0802c1b8 	.word	0x0802c1b8
  ldr r2, =_sbss
 800240c:	24000114 	.word	0x24000114
  ldr r4, =_ebss
 8002410:	24007bfc 	.word	0x24007bfc

08002414 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002414:	e7fe      	b.n	8002414 <ADC_IRQHandler>

08002416 <MX_TouchGFX_PreOSInit>:

/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
 8002416:	b480      	push	{r7}
 8002418:	af00      	add	r7, sp, #0
}
 800241a:	bf00      	nop
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr

08002424 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_components_init();
 8002428:	f001 fd4e 	bl	8003ec8 <touchgfx_components_init>
  touchgfx_init();
 800242c:	f001 fd22 	bl	8003e74 <touchgfx_init>
}
 8002430:	bf00      	nop
 8002432:	bd80      	pop	{r7, pc}

08002434 <TouchGFX_Task>:

/**
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 800243c:	f001 fd4c 	bl	8003ed8 <touchgfx_taskEntry>
}
 8002440:	bf00      	nop
 8002442:	3708      	adds	r7, #8
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}

08002448 <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
    {
 8002450:	4a04      	ldr	r2, [pc, #16]	; (8002464 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	601a      	str	r2, [r3, #0]
    }
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4618      	mov	r0, r3
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr
 8002464:	0802b1a0 	.word	0x0802b1a0

08002468 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
    }
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f7ff ffe9 	bl	8002448 <_ZN8touchgfx15TouchControllerD1Ev>
 8002476:	2104      	movs	r1, #4
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f026 fd1c 	bl	8028eb6 <_ZdlPvj>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4618      	mov	r0, r3
 8002482:	3708      	adds	r7, #8
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}

08002488 <_ZN20STM32TouchController4initEv>:
#include <stm32h7b3i_discovery_ts.h>
#include <TouchGFXHAL.hpp>
#include <cmsis_os.h>

void STM32TouchController::init()
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b086      	sub	sp, #24
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
    TS_Init_t hTS;

    hTS.Orientation = TS_SWAP_XY;
 8002490:	2308      	movs	r3, #8
 8002492:	613b      	str	r3, [r7, #16]
    hTS.Accuracy = 0;
 8002494:	2300      	movs	r3, #0
 8002496:	617b      	str	r3, [r7, #20]
    hTS.Width = touchgfx::HAL::FRAME_BUFFER_WIDTH;
 8002498:	4b07      	ldr	r3, [pc, #28]	; (80024b8 <_ZN20STM32TouchController4initEv+0x30>)
 800249a:	881b      	ldrh	r3, [r3, #0]
 800249c:	60bb      	str	r3, [r7, #8]
    hTS.Height = touchgfx::HAL::FRAME_BUFFER_HEIGHT;
 800249e:	4b07      	ldr	r3, [pc, #28]	; (80024bc <_ZN20STM32TouchController4initEv+0x34>)
 80024a0:	881b      	ldrh	r3, [r3, #0]
 80024a2:	60fb      	str	r3, [r7, #12]
    BSP_TS_Init(0, &hTS);
 80024a4:	f107 0308 	add.w	r3, r7, #8
 80024a8:	4619      	mov	r1, r3
 80024aa:	2000      	movs	r0, #0
 80024ac:	f006 fb4a 	bl	8008b44 <BSP_TS_Init>
}
 80024b0:	bf00      	nop
 80024b2:	3718      	adds	r7, #24
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	24006fe6 	.word	0x24006fe6
 80024bc:	24006fe8 	.word	0x24006fe8

080024c0 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b088      	sub	sp, #32
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	60b9      	str	r1, [r7, #8]
 80024ca:	607a      	str	r2, [r7, #4]
    TS_State_t TS_State = { 0 };
 80024cc:	f107 0310 	add.w	r3, r7, #16
 80024d0:	2200      	movs	r2, #0
 80024d2:	601a      	str	r2, [r3, #0]
 80024d4:	605a      	str	r2, [r3, #4]
 80024d6:	609a      	str	r2, [r3, #8]

    /* This should never fail !! */
    if (BSP_TS_GetState(0, &TS_State) != BSP_ERROR_NONE)
 80024d8:	f107 0310 	add.w	r3, r7, #16
 80024dc:	4619      	mov	r1, r3
 80024de:	2000      	movs	r0, #0
 80024e0:	f006 fbd6 	bl	8008c90 <BSP_TS_GetState>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	bf14      	ite	ne
 80024ea:	2301      	movne	r3, #1
 80024ec:	2300      	moveq	r3, #0
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d00a      	beq.n	800250a <_ZN20STM32TouchController11sampleTouchERlS0_+0x4a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80024f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024f8:	f383 8811 	msr	BASEPRI, r3
 80024fc:	f3bf 8f6f 	isb	sy
 8002500:	f3bf 8f4f 	dsb	sy
 8002504:	61fb      	str	r3, [r7, #28]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002506:	bf00      	nop
    {
        configASSERT(0);
 8002508:	e7fe      	b.n	8002508 <_ZN20STM32TouchController11sampleTouchERlS0_+0x48>
    }

    if (TS_State.TouchDetected)
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d009      	beq.n	8002524 <_ZN20STM32TouchController11sampleTouchERlS0_+0x64>
    {
        x = TS_State.TouchX;
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	461a      	mov	r2, r3
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	601a      	str	r2, [r3, #0]
        y = TS_State.TouchY;
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	461a      	mov	r2, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	601a      	str	r2, [r3, #0]

        return true;
 8002520:	2301      	movs	r3, #1
 8002522:	e000      	b.n	8002526 <_ZN20STM32TouchController11sampleTouchERlS0_+0x66>
    }

    return false;
 8002524:	2300      	movs	r3, #0
}
 8002526:	4618      	mov	r0, r3
 8002528:	3720      	adds	r7, #32
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
	...

08002530 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	4a05      	ldr	r2, [pc, #20]	; (8002550 <_ZN20STM32TouchControllerD1Ev+0x20>)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	601a      	str	r2, [r3, #0]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4618      	mov	r0, r3
 8002542:	f7ff ff81 	bl	8002448 <_ZN8touchgfx15TouchControllerD1Ev>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4618      	mov	r0, r3
 800254a:	3708      	adds	r7, #8
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	0802b188 	.word	0x0802b188

08002554 <_ZN20STM32TouchControllerD0Ev>:
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f7ff ffe7 	bl	8002530 <_ZN20STM32TouchControllerD1Ev>
 8002562:	2104      	movs	r1, #4
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f026 fca6 	bl	8028eb6 <_ZdlPvj>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4618      	mov	r0, r3
 800256e:	3708      	adds	r7, #8
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}

08002574 <_ZN8touchgfx4GPIO4initEv>:

/*
 * Perform configuration of IO pins.
 */
void GPIO::init()
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0

}
 8002578:	bf00      	nop
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
	...

08002584 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	4603      	mov	r3, r0
 800258c:	71fb      	strb	r3, [r7, #7]
    switch (id)
 800258e:	79fb      	ldrb	r3, [r7, #7]
 8002590:	2b03      	cmp	r3, #3
 8002592:	d826      	bhi.n	80025e2 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x5e>
 8002594:	a201      	add	r2, pc, #4	; (adr r2, 800259c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>)
 8002596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800259a:	bf00      	nop
 800259c:	080025ad 	.word	0x080025ad
 80025a0:	080025bb 	.word	0x080025bb
 80025a4:	080025c9 	.word	0x080025c9
 80025a8:	080025d7 	.word	0x080025d7
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_SET);
 80025ac:	2201      	movs	r2, #1
 80025ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80025b2:	480e      	ldr	r0, [pc, #56]	; (80025ec <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x68>)
 80025b4:	f007 fd50 	bl	800a058 <HAL_GPIO_WritePin>
#endif
        break;
 80025b8:	e013      	b.n	80025e2 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x5e>
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, GPIO_PIN_SET);
 80025ba:	2201      	movs	r2, #1
 80025bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80025c0:	480b      	ldr	r0, [pc, #44]	; (80025f0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x6c>)
 80025c2:	f007 fd49 	bl	800a058 <HAL_GPIO_WritePin>
#endif
        break;
 80025c6:	e00c      	b.n	80025e2 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x5e>
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, GPIO_PIN_SET);
 80025c8:	2201      	movs	r2, #1
 80025ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025ce:	4808      	ldr	r0, [pc, #32]	; (80025f0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x6c>)
 80025d0:	f007 fd42 	bl	800a058 <HAL_GPIO_WritePin>
#endif
        break;
 80025d4:	e005      	b.n	80025e2 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x5e>
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_SET);
 80025d6:	2201      	movs	r2, #1
 80025d8:	2101      	movs	r1, #1
 80025da:	4806      	ldr	r0, [pc, #24]	; (80025f4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x70>)
 80025dc:	f007 fd3c 	bl	800a058 <HAL_GPIO_WritePin>
#endif
        break;
 80025e0:	bf00      	nop
    }
}
 80025e2:	bf00      	nop
 80025e4:	3708      	adds	r7, #8
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	58020000 	.word	0x58020000
 80025f0:	58020400 	.word	0x58020400
 80025f4:	58022000 	.word	0x58022000

080025f8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	4603      	mov	r3, r0
 8002600:	71fb      	strb	r3, [r7, #7]
    switch (id)
 8002602:	79fb      	ldrb	r3, [r7, #7]
 8002604:	2b03      	cmp	r3, #3
 8002606:	d826      	bhi.n	8002656 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x5e>
 8002608:	a201      	add	r2, pc, #4	; (adr r2, 8002610 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>)
 800260a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800260e:	bf00      	nop
 8002610:	08002621 	.word	0x08002621
 8002614:	0800262f 	.word	0x0800262f
 8002618:	0800263d 	.word	0x0800263d
 800261c:	0800264b 	.word	0x0800264b
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8002620:	2200      	movs	r2, #0
 8002622:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002626:	480e      	ldr	r0, [pc, #56]	; (8002660 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x68>)
 8002628:	f007 fd16 	bl	800a058 <HAL_GPIO_WritePin>
#endif
        break;
 800262c:	e013      	b.n	8002656 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x5e>
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, GPIO_PIN_RESET);
 800262e:	2200      	movs	r2, #0
 8002630:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002634:	480b      	ldr	r0, [pc, #44]	; (8002664 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x6c>)
 8002636:	f007 fd0f 	bl	800a058 <HAL_GPIO_WritePin>
#endif
        break;
 800263a:	e00c      	b.n	8002656 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x5e>
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, GPIO_PIN_RESET);
 800263c:	2200      	movs	r2, #0
 800263e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002642:	4808      	ldr	r0, [pc, #32]	; (8002664 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x6c>)
 8002644:	f007 fd08 	bl	800a058 <HAL_GPIO_WritePin>
#endif
        break;
 8002648:	e005      	b.n	8002656 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x5e>
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 800264a:	2200      	movs	r2, #0
 800264c:	2101      	movs	r1, #1
 800264e:	4806      	ldr	r0, [pc, #24]	; (8002668 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x70>)
 8002650:	f007 fd02 	bl	800a058 <HAL_GPIO_WritePin>
#endif
        break;
 8002654:	bf00      	nop
    }
}
 8002656:	bf00      	nop
 8002658:	3708      	adds	r7, #8
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	58020000 	.word	0x58020000
 8002664:	58020400 	.word	0x58020400
 8002668:	58022000 	.word	0x58022000

0800266c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	4603      	mov	r3, r0
 8002674:	71fb      	strb	r3, [r7, #7]
    switch (id)
 8002676:	79fb      	ldrb	r3, [r7, #7]
 8002678:	2b03      	cmp	r3, #3
 800267a:	d822      	bhi.n	80026c2 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x56>
 800267c:	a201      	add	r2, pc, #4	; (adr r2, 8002684 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>)
 800267e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002682:	bf00      	nop
 8002684:	08002695 	.word	0x08002695
 8002688:	080026a1 	.word	0x080026a1
 800268c:	080026ad 	.word	0x080026ad
 8002690:	080026b9 	.word	0x080026b9
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8002694:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002698:	480c      	ldr	r0, [pc, #48]	; (80026cc <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x60>)
 800269a:	f007 fcf6 	bl	800a08a <HAL_GPIO_TogglePin>
#endif
        break;
 800269e:	e010      	b.n	80026c2 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x56>
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 80026a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80026a4:	480a      	ldr	r0, [pc, #40]	; (80026d0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x64>)
 80026a6:	f007 fcf0 	bl	800a08a <HAL_GPIO_TogglePin>
#endif
        break;
 80026aa:	e00a      	b.n	80026c2 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x56>
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 80026ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026b0:	4807      	ldr	r0, [pc, #28]	; (80026d0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x64>)
 80026b2:	f007 fcea 	bl	800a08a <HAL_GPIO_TogglePin>
#endif
        break;
 80026b6:	e004      	b.n	80026c2 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x56>
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 80026b8:	2101      	movs	r1, #1
 80026ba:	4806      	ldr	r0, [pc, #24]	; (80026d4 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x68>)
 80026bc:	f007 fce5 	bl	800a08a <HAL_GPIO_TogglePin>
#endif
        break;
 80026c0:	bf00      	nop
    }
}
 80026c2:	bf00      	nop
 80026c4:	3708      	adds	r7, #8
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	58020000 	.word	0x58020000
 80026d0:	58020400 	.word	0x58020400
 80026d4:	58022000 	.word	0x58022000

080026d8 <_ZN8touchgfx3HALD1Ev>:
        DISPLAY_ROTATION = rotate0;
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
    }

    /** Finalizes an instance of the HAL class. */
    virtual ~HAL()
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
    {
 80026e0:	4a04      	ldr	r2, [pc, #16]	; (80026f4 <_ZN8touchgfx3HALD1Ev+0x1c>)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	601a      	str	r2, [r3, #0]
    }
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4618      	mov	r0, r3
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr
 80026f4:	0802bab4 	.word	0x0802bab4

080026f8 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
    }
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f7ff ffe9 	bl	80026d8 <_ZN8touchgfx3HALD1Ev>
 8002706:	217c      	movs	r1, #124	; 0x7c
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f026 fbd4 	bl	8028eb6 <_ZdlPvj>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4618      	mov	r0, r3
 8002712:	3708      	adds	r7, #8
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}

08002718 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     *
     * @param  orientation The desired display orientation.
     *
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	460b      	mov	r3, r1
 8002722:	70fb      	strb	r3, [r7, #3]
    {
        requestedOrientation = orientation;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	78fa      	ldrb	r2, [r7, #3]
 8002728:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        displayOrientationChangeRequested = true;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2201      	movs	r2, #1
 8002730:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
    }
 8002734:	bf00      	nop
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
     * @param   width   The width of the framebuffer.
     * @param   height  The height of the framebuffer.
     *
     * @see touchgfx_generic_init
     */
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	460b      	mov	r3, r1
 800274a:	807b      	strh	r3, [r7, #2]
 800274c:	4613      	mov	r3, r2
 800274e:	803b      	strh	r3, [r7, #0]
    {
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8002750:	4b0c      	ldr	r3, [pc, #48]	; (8002784 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x44>)
 8002752:	881b      	ldrh	r3, [r3, #0]
 8002754:	887a      	ldrh	r2, [r7, #2]
 8002756:	429a      	cmp	r2, r3
 8002758:	d304      	bcc.n	8002764 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x24>
 800275a:	4b0b      	ldr	r3, [pc, #44]	; (8002788 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x48>)
 800275c:	881b      	ldrh	r3, [r3, #0]
 800275e:	883a      	ldrh	r2, [r7, #0]
 8002760:	429a      	cmp	r2, r3
 8002762:	d205      	bcs.n	8002770 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>
 8002764:	4b09      	ldr	r3, [pc, #36]	; (800278c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x4c>)
 8002766:	4a0a      	ldr	r2, [pc, #40]	; (8002790 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x50>)
 8002768:	219e      	movs	r1, #158	; 0x9e
 800276a:	480a      	ldr	r0, [pc, #40]	; (8002794 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x54>)
 800276c:	f026 fbd2 	bl	8028f14 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8002770:	4a09      	ldr	r2, [pc, #36]	; (8002798 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x58>)
 8002772:	887b      	ldrh	r3, [r7, #2]
 8002774:	8013      	strh	r3, [r2, #0]
        FRAME_BUFFER_HEIGHT = height;
 8002776:	4a09      	ldr	r2, [pc, #36]	; (800279c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x5c>)
 8002778:	883b      	ldrh	r3, [r7, #0]
 800277a:	8013      	strh	r3, [r2, #0]
    }
 800277c:	bf00      	nop
 800277e:	3708      	adds	r7, #8
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	24006fe0 	.word	0x24006fe0
 8002788:	24006fe2 	.word	0x24006fe2
 800278c:	0802a628 	.word	0x0802a628
 8002790:	0802a68c 	.word	0x0802a68c
 8002794:	0802a6d0 	.word	0x0802a6d0
 8002798:	24006fe6 	.word	0x24006fe6
 800279c:	24006fe8 	.word	0x24006fe8

080027a0 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d009      	beq.n	80027c6 <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685a      	ldr	r2, [r3, #4]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4610      	mov	r0, r2
 80027c0:	4798      	blx	r3
 80027c2:	4603      	mov	r3, r0
 80027c4:	e000      	b.n	80027c8 <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        return static_cast<BlitOperations>(0);
 80027c6:	2300      	movs	r3, #0
    }
 80027c8:	4618      	mov	r0, r3
 80027ca:	3708      	adds	r7, #8
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f018 f9a7 	bl	801ab2c <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	33ac      	adds	r3, #172	; 0xac
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	4798      	blx	r3
    }
 80027ea:	bf00      	nop
 80027ec:	3708      	adds	r7, #8
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}

080027f2 <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 80027f2:	b480      	push	{r7}
 80027f4:	b083      	sub	sp, #12
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
 80027fa:	6039      	str	r1, [r7, #0]
    {
        (void)key; // Unused variable
        return false;
 80027fc:	2300      	movs	r3, #0
    }
 80027fe:	4618      	mov	r0, r3
 8002800:	370c      	adds	r7, #12
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
	...

0800280c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setAnimationStorage
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	60b9      	str	r1, [r7, #8]
 8002816:	607a      	str	r2, [r7, #4]
 8002818:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d106      	bne.n	800282e <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8002820:	4b0f      	ldr	r3, [pc, #60]	; (8002860 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x54>)
 8002822:	4a10      	ldr	r2, [pc, #64]	; (8002864 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x58>)
 8002824:	f240 21d2 	movw	r1, #722	; 0x2d2
 8002828:	480f      	ldr	r0, [pc, #60]	; (8002868 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 800282a:	f026 fb73 	bl	8028f14 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	68ba      	ldr	r2, [r7, #8]
 8002832:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	641a      	str	r2, [r3, #64]	; 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2b00      	cmp	r3, #0
 800283e:	bf14      	ite	ne
 8002840:	2301      	movne	r3, #1
 8002842:	2300      	moveq	r3, #0
 8002844:	b2da      	uxtb	r2, r3
 8002846:	4b09      	ldr	r3, [pc, #36]	; (800286c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8002848:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	338c      	adds	r3, #140	; 0x8c
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	6839      	ldr	r1, [r7, #0]
 8002854:	68f8      	ldr	r0, [r7, #12]
 8002856:	4798      	blx	r3
    }
 8002858:	bf00      	nop
 800285a:	3710      	adds	r7, #16
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	0802a718 	.word	0x0802a718
 8002864:	0802a750 	.word	0x0802a750
 8002868:	0802a6d0 	.word	0x0802a6d0
 800286c:	24006fea 	.word	0x24006fea

08002870 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	6039      	str	r1, [r7, #0]
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	683a      	ldr	r2, [r7, #0]
 800287e:	645a      	str	r2, [r3, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	2b00      	cmp	r3, #0
 8002884:	bf14      	ite	ne
 8002886:	2301      	movne	r3, #1
 8002888:	2300      	moveq	r3, #0
 800288a:	b2da      	uxtb	r2, r3
 800288c:	4b03      	ldr	r3, [pc, #12]	; (800289c <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x2c>)
 800288e:	701a      	strb	r2, [r3, #0]
    }
 8002890:	bf00      	nop
 8002892:	370c      	adds	r7, #12
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr
 800289c:	24006feb 	.word	0x24006feb

080028a0 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
    {
        return 0;
 80028a8:	2300      	movs	r3, #0
    }
 80028aa:	4618      	mov	r0, r3
 80028ac:	370c      	adds	r7, #12
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr

080028b6 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 80028b6:	b580      	push	{r7, lr}
 80028b8:	b082      	sub	sp, #8
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
 80028be:	460b      	mov	r3, r1
 80028c0:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d004      	beq.n	80028d4 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ce:	887a      	ldrh	r2, [r7, #2]
 80028d0:	4610      	mov	r0, r2
 80028d2:	4798      	blx	r3
        }
    }
 80028d4:	bf00      	nop
 80028d6:	3708      	adds	r7, #8
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}

080028dc <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     * getTFTCurrentLine function is never called and can be disregarded.
     *
     * @return In this default implementation, 0xFFFF is returned to signify "not
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
    {
        return 0xFFFFu;
 80028e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    }
 80028e8:	4618      	mov	r0, r3
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685a      	ldr	r2, [r3, #4]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	3318      	adds	r3, #24
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4610      	mov	r0, r2
 800290c:	4798      	blx	r3
 800290e:	4603      	mov	r3, r0
    }
 8002910:	4618      	mov	r0, r3
 8002912:	3708      	adds	r7, #8
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}

08002918 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 8002918:	b480      	push	{r7}
 800291a:	b085      	sub	sp, #20
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800292c:	429a      	cmp	r2, r3
 800292e:	d011      	beq.n	8002954 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>
        {
            if (DISPLAY_ROTATION == rotate0)
 8002930:	4b14      	ldr	r3, [pc, #80]	; (8002984 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d11e      	bne.n	8002976 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 8002938:	4b13      	ldr	r3, [pc, #76]	; (8002988 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 800293a:	881b      	ldrh	r3, [r3, #0]
 800293c:	81bb      	strh	r3, [r7, #12]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800293e:	4b13      	ldr	r3, [pc, #76]	; (800298c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8002940:	881a      	ldrh	r2, [r3, #0]
 8002942:	4b11      	ldr	r3, [pc, #68]	; (8002988 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8002944:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = tmp;
 8002946:	4a11      	ldr	r2, [pc, #68]	; (800298c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8002948:	89bb      	ldrh	r3, [r7, #12]
 800294a:	8013      	strh	r3, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 800294c:	4b0d      	ldr	r3, [pc, #52]	; (8002984 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 800294e:	2201      	movs	r2, #1
 8002950:	701a      	strb	r2, [r3, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
        }
    }
 8002952:	e010      	b.n	8002976 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
        else if (DISPLAY_ROTATION != rotate0)
 8002954:	4b0b      	ldr	r3, [pc, #44]	; (8002984 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d00c      	beq.n	8002976 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            const uint16_t tmp = DISPLAY_HEIGHT;
 800295c:	4b0a      	ldr	r3, [pc, #40]	; (8002988 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 800295e:	881b      	ldrh	r3, [r3, #0]
 8002960:	81fb      	strh	r3, [r7, #14]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8002962:	4b0a      	ldr	r3, [pc, #40]	; (800298c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8002964:	881a      	ldrh	r2, [r3, #0]
 8002966:	4b08      	ldr	r3, [pc, #32]	; (8002988 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8002968:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = tmp;
 800296a:	4a08      	ldr	r2, [pc, #32]	; (800298c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 800296c:	89fb      	ldrh	r3, [r7, #14]
 800296e:	8013      	strh	r3, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8002970:	4b04      	ldr	r3, [pc, #16]	; (8002984 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8002972:	2200      	movs	r2, #0
 8002974:	701a      	strb	r2, [r3, #0]
    }
 8002976:	bf00      	nop
 8002978:	3714      	adds	r7, #20
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop
 8002984:	24006fe4 	.word	0x24006fe4
 8002988:	24006fe2 	.word	0x24006fe2
 800298c:	24006fe0 	.word	0x24006fe0

08002990 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	4618      	mov	r0, r3
 800299c:	f017 fb24 	bl	8019fe8 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 80029a0:	bf00      	nop
 80029a2:	3708      	adds	r7, #8
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	4a05      	ldr	r2, [pc, #20]	; (80029c8 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	601a      	str	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7ff fe8d 	bl	80026d8 <_ZN8touchgfx3HALD1Ev>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4618      	mov	r0, r3
 80029c2:	3708      	adds	r7, #8
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	0802b540 	.word	0x0802b540

080029cc <_ZN20TouchGFXGeneratedHALD0Ev>:
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f7ff ffe7 	bl	80029a8 <_ZN20TouchGFXGeneratedHALD1Ev>
 80029da:	217c      	movs	r1, #124	; 0x7c
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f026 fa6a 	bl	8028eb6 <_ZdlPvj>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4618      	mov	r0, r3
 80029e6:	3708      	adds	r7, #8
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7ff ffca 	bl	8002990 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 80029fc:	bf00      	nop
 80029fe:	3708      	adds	r7, #8
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <_ZN11TouchGFXHAL10initializeEv>:
#include "stm32h7xx.h"

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f001 fd4e 	bl	80044b0 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 8002a14:	bf00      	nop
 8002a16:	3708      	adds	r7, #8
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <_ZN11TouchGFXHAL9taskEntryEv>:

void TouchGFXHAL::taskEntry()
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
    enableLCDControllerInterrupt();
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	3380      	adds	r3, #128	; 0x80
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	4798      	blx	r3
    enableInterrupts();
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	3378      	adds	r3, #120	; 0x78
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	4798      	blx	r3

    OSWrappers::waitForVSync();
 8002a3c:	f000 f954 	bl	8002ce8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	3370      	adds	r3, #112	; 0x70
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4610      	mov	r0, r2
 8002a4c:	4798      	blx	r3

    // Turning on display after first frame is rendered
    HAL_GPIO_WritePin(GPIOK, GPIO_PIN_7, GPIO_PIN_RESET);
 8002a4e:	2200      	movs	r2, #0
 8002a50:	2180      	movs	r1, #128	; 0x80
 8002a52:	480b      	ldr	r0, [pc, #44]	; (8002a80 <_ZN11TouchGFXHAL9taskEntryEv+0x64>)
 8002a54:	f007 fb00 	bl	800a058 <HAL_GPIO_WritePin>
    /* Assert display enable LCD_DISP_CTRL pin */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8002a58:	2201      	movs	r2, #1
 8002a5a:	2104      	movs	r1, #4
 8002a5c:	4809      	ldr	r0, [pc, #36]	; (8002a84 <_ZN11TouchGFXHAL9taskEntryEv+0x68>)
 8002a5e:	f007 fafb 	bl	800a058 <HAL_GPIO_WritePin>
    /* Assert back light LCD_BL_CTRL pin */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8002a62:	2201      	movs	r2, #1
 8002a64:	2102      	movs	r1, #2
 8002a66:	4807      	ldr	r0, [pc, #28]	; (8002a84 <_ZN11TouchGFXHAL9taskEntryEv+0x68>)
 8002a68:	f007 faf6 	bl	800a058 <HAL_GPIO_WritePin>

    for (;;)
    {
        OSWrappers::waitForVSync();
 8002a6c:	f000 f93c 	bl	8002ce8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	3370      	adds	r3, #112	; 0x70
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4610      	mov	r0, r2
 8002a7c:	4798      	blx	r3
        OSWrappers::waitForVSync();
 8002a7e:	e7f5      	b.n	8002a6c <_ZN11TouchGFXHAL9taskEntryEv+0x50>
 8002a80:	58022800 	.word	0x58022800
 8002a84:	58020000 	.word	0x58020000

08002a88 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	4618      	mov	r0, r3
 8002a94:	f001 fda4 	bl	80045e0 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8002a98:	4603      	mov	r3, r0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3708      	adds	r7, #8
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	b082      	sub	sp, #8
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
 8002aaa:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6839      	ldr	r1, [r7, #0]
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f001 fda3 	bl	80045fc <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8002ab6:	bf00      	nop
 8002ab8:	3708      	adds	r7, #8
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
	...

08002ac0 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b086      	sub	sp, #24
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6839      	ldr	r1, [r7, #0]
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f001 fdaa 	bl	8004628 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8002ad4:	4b1f      	ldr	r3, [pc, #124]	; (8002b54 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x94>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8002adc:	f3bf 8f4f 	dsb	sy
}
 8002ae0:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8002ae2:	4b1c      	ldr	r3, [pc, #112]	; (8002b54 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x94>)
 8002ae4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ae8:	617b      	str	r3, [r7, #20]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	0b5b      	lsrs	r3, r3, #13
 8002aee:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002af2:	613b      	str	r3, [r7, #16]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	08db      	lsrs	r3, r3, #3
 8002af8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002afc:	60fb      	str	r3, [r7, #12]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	015a      	lsls	r2, r3, #5
 8002b02:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8002b06:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8002b08:	68fa      	ldr	r2, [r7, #12]
 8002b0a:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002b0c:	4911      	ldr	r1, [pc, #68]	; (8002b54 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x94>)
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	1e5a      	subs	r2, r3, #1
 8002b18:	60fa      	str	r2, [r7, #12]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	bf14      	ite	ne
 8002b1e:	2301      	movne	r3, #1
 8002b20:	2300      	moveq	r3, #0
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d1ea      	bne.n	8002afe <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x3e>
    } while(sets-- != 0U);
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	1e5a      	subs	r2, r3, #1
 8002b2c:	613a      	str	r2, [r7, #16]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	bf14      	ite	ne
 8002b32:	2301      	movne	r3, #1
 8002b34:	2300      	moveq	r3, #0
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d1db      	bne.n	8002af4 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x34>
  __ASM volatile ("dsb 0xF":::"memory");
 8002b3c:	f3bf 8f4f 	dsb	sy
}
 8002b40:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002b42:	f3bf 8f6f 	isb	sy
}
 8002b46:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8002b48:	bf00      	nop
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    SCB_CleanInvalidateDCache();
}
 8002b4a:	bf00      	nop
 8002b4c:	3718      	adds	r7, #24
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	e000ed00 	.word	0xe000ed00

08002b58 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f001 fcc8 	bl	80044f8 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 8002b68:	bf00      	nop
 8002b6a:	3708      	adds	r7, #8
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f001 fccc 	bl	8004518 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 8002b80:	bf00      	nop
 8002b82:	3708      	adds	r7, #8
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	4618      	mov	r0, r3
 8002b94:	f001 fcce 	bl	8004534 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 8002b98:	bf00      	nop
 8002b9a:	3708      	adds	r7, #8
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	4618      	mov	r0, r3
 8002bac:	f001 fcd0 	bl	8004550 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 8002bb0:	bf00      	nop
 8002bb2:	3708      	adds	r7, #8
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	4a05      	ldr	r2, [pc, #20]	; (8002bd8 <_ZN11TouchGFXHALD1Ev+0x20>)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	601a      	str	r2, [r3, #0]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7ff feed 	bl	80029a8 <_ZN20TouchGFXGeneratedHALD1Ev>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3708      	adds	r7, #8
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	0802b1b8 	.word	0x0802b1b8

08002bdc <_ZN11TouchGFXHALD0Ev>:
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f7ff ffe7 	bl	8002bb8 <_ZN11TouchGFXHALD1Ev>
 8002bea:	217c      	movs	r1, #124	; 0x7c
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f026 f962 	bl	8028eb6 <_ZdlPvj>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3708      	adds	r7, #8
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}

08002bfc <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8002c00:	2200      	movs	r2, #0
 8002c02:	2101      	movs	r1, #1
 8002c04:	2001      	movs	r0, #1
 8002c06:	f013 fc25 	bl	8016454 <osSemaphoreNew>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	4a0f      	ldr	r2, [pc, #60]	; (8002c4c <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8002c0e:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8002c10:	4b0e      	ldr	r3, [pc, #56]	; (8002c4c <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d105      	bne.n	8002c24 <_ZN8touchgfx10OSWrappers10initializeEv+0x28>
 8002c18:	4b0d      	ldr	r3, [pc, #52]	; (8002c50 <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 8002c1a:	4a0e      	ldr	r2, [pc, #56]	; (8002c54 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8002c1c:	2128      	movs	r1, #40	; 0x28
 8002c1e:	480e      	ldr	r0, [pc, #56]	; (8002c58 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8002c20:	f026 f978 	bl	8028f14 <__assert_func>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8002c24:	2200      	movs	r2, #0
 8002c26:	2104      	movs	r1, #4
 8002c28:	2001      	movs	r0, #1
 8002c2a:	f013 fd57 	bl	80166dc <osMessageQueueNew>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	4a0a      	ldr	r2, [pc, #40]	; (8002c5c <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8002c32:	6013      	str	r3, [r2, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8002c34:	4b09      	ldr	r3, [pc, #36]	; (8002c5c <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d105      	bne.n	8002c48 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>
 8002c3c:	4b08      	ldr	r3, [pc, #32]	; (8002c60 <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 8002c3e:	4a05      	ldr	r2, [pc, #20]	; (8002c54 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8002c40:	212c      	movs	r1, #44	; 0x2c
 8002c42:	4805      	ldr	r0, [pc, #20]	; (8002c58 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8002c44:	f026 f966 	bl	8028f14 <__assert_func>
}
 8002c48:	bf00      	nop
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	2400097c 	.word	0x2400097c
 8002c50:	0802a7a0 	.word	0x0802a7a0
 8002c54:	0802a7ec 	.word	0x0802a7ec
 8002c58:	0802a81c 	.word	0x0802a81c
 8002c5c:	24000980 	.word	0x24000980
 8002c60:	0802a8b0 	.word	0x0802a8b0

08002c64 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8002c68:	4b04      	ldr	r3, [pc, #16]	; (8002c7c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f04f 31ff 	mov.w	r1, #4294967295
 8002c70:	4618      	mov	r0, r3
 8002c72:	f013 fc79 	bl	8016568 <osSemaphoreAcquire>
}
 8002c76:	bf00      	nop
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	2400097c 	.word	0x2400097c

08002c80 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8002c84:	4b03      	ldr	r3, [pc, #12]	; (8002c94 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f013 fcbf 	bl	801660c <osSemaphoreRelease>
}
 8002c8e:	bf00      	nop
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	2400097c 	.word	0x2400097c

08002c98 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8002c9c:	4b03      	ldr	r3, [pc, #12]	; (8002cac <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2100      	movs	r1, #0
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f013 fc60 	bl	8016568 <osSemaphoreAcquire>
}
 8002ca8:	bf00      	nop
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	2400097c 	.word	0x2400097c

08002cb0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8002cb4:	4b03      	ldr	r3, [pc, #12]	; (8002cc4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f013 fca7 	bl	801660c <osSemaphoreRelease>
}
 8002cbe:	bf00      	nop
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	2400097c 	.word	0x2400097c

08002cc8 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	af00      	add	r7, sp, #0
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8002ccc:	4b04      	ldr	r3, [pc, #16]	; (8002ce0 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 8002cce:	6818      	ldr	r0, [r3, #0]
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	4903      	ldr	r1, [pc, #12]	; (8002ce4 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>)
 8002cd6:	f013 fd75 	bl	80167c4 <osMessageQueuePut>
}
 8002cda:	bf00      	nop
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	24000980 	.word	0x24000980
 8002ce4:	24000008 	.word	0x24000008

08002ce8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8002cee:	4b09      	ldr	r3, [pc, #36]	; (8002d14 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8002cf0:	6818      	ldr	r0, [r3, #0]
 8002cf2:	1d39      	adds	r1, r7, #4
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f013 fdc4 	bl	8016884 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8002cfc:	4b05      	ldr	r3, [pc, #20]	; (8002d14 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8002cfe:	6818      	ldr	r0, [r3, #0]
 8002d00:	1d39      	adds	r1, r7, #4
 8002d02:	f04f 33ff 	mov.w	r3, #4294967295
 8002d06:	2200      	movs	r2, #0
 8002d08:	f013 fdbc 	bl	8016884 <osMessageQueueGet>
}
 8002d0c:	bf00      	nop
 8002d0e:	3708      	adds	r7, #8
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	24000980 	.word	0x24000980

08002d18 <__NVIC_EnableIRQ>:
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	4603      	mov	r3, r0
 8002d20:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002d22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	db0b      	blt.n	8002d42 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d2a:	88fb      	ldrh	r3, [r7, #6]
 8002d2c:	f003 021f 	and.w	r2, r3, #31
 8002d30:	4907      	ldr	r1, [pc, #28]	; (8002d50 <__NVIC_EnableIRQ+0x38>)
 8002d32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d36:	095b      	lsrs	r3, r3, #5
 8002d38:	2001      	movs	r0, #1
 8002d3a:	fa00 f202 	lsl.w	r2, r0, r2
 8002d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002d42:	bf00      	nop
 8002d44:	370c      	adds	r7, #12
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
 8002d4e:	bf00      	nop
 8002d50:	e000e100 	.word	0xe000e100

08002d54 <__NVIC_DisableIRQ>:
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002d5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	db12      	blt.n	8002d8c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d66:	88fb      	ldrh	r3, [r7, #6]
 8002d68:	f003 021f 	and.w	r2, r3, #31
 8002d6c:	490a      	ldr	r1, [pc, #40]	; (8002d98 <__NVIC_DisableIRQ+0x44>)
 8002d6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d72:	095b      	lsrs	r3, r3, #5
 8002d74:	2001      	movs	r0, #1
 8002d76:	fa00 f202 	lsl.w	r2, r0, r2
 8002d7a:	3320      	adds	r3, #32
 8002d7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002d80:	f3bf 8f4f 	dsb	sy
}
 8002d84:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002d86:	f3bf 8f6f 	isb	sy
}
 8002d8a:	bf00      	nop
}
 8002d8c:	bf00      	nop
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr
 8002d98:	e000e100 	.word	0xe000e100

08002d9c <_ZN8touchgfx9colortypeC1Ev>:
 * extract a 24/32-bit color from this type, use the getColor32 function.
 */
struct colortype
{
    /** Default constructor. Creates a black (0) color. */
    colortype()
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
        : color(0)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2200      	movs	r2, #0
 8002da8:	601a      	str	r2, [r3, #0]
    {
    }
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4618      	mov	r0, r3
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr

08002db8 <_ZNK8touchgfx9colortypecvmEv>:
    /**
     * Cast that converts the given colortype to an uint32_t.
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
    {
        return color;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
    }
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
    {
 8002dd8:	4a04      	ldr	r2, [pc, #16]	; (8002dec <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	601a      	str	r2, [r3, #0]
    }
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4618      	mov	r0, r3
 8002de2:	370c      	adds	r7, #12
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr
 8002dec:	0802b2e0 	.word	0x0802b2e0

08002df0 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
    }
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f7ff ffe9 	bl	8002dd0 <_ZN8touchgfx9DMA_QueueD1Ev>
 8002dfe:	2104      	movs	r1, #4
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f026 f858 	bl	8028eb6 <_ZdlPvj>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3708      	adds	r7, #8
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	3344      	adds	r3, #68	; 0x44
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	4798      	blx	r3
    }
 8002e24:	bf00      	nop
 8002e26:	3708      	adds	r7, #8
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
    {
 8002e34:	4a04      	ldr	r2, [pc, #16]	; (8002e48 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	601a      	str	r2, [r3, #0]
    }
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr
 8002e48:	0802bb8c 	.word	0x0802bb8c

08002e4c <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
    }
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f7ff ffe9 	bl	8002e2c <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8002e5a:	210c      	movs	r1, #12
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f026 f82a 	bl	8028eb6 <_ZdlPvj>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4618      	mov	r0, r3
 8002e66:	3708      	adds	r7, #8
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8002e76:	4a09      	ldr	r2, [pc, #36]	; (8002e9c <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	601a      	str	r2, [r3, #0]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	683a      	ldr	r2, [r7, #0]
 8002e80:	605a      	str	r2, [r3, #4]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	721a      	strb	r2, [r3, #8]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	725a      	strb	r2, [r3, #9]
    {
    }
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4618      	mov	r0, r3
 8002e92:	370c      	adds	r7, #12
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr
 8002e9c:	0802bb8c 	.word	0x0802bb8c

08002ea0 <_ZN8STM32DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 8002ea8:	2301      	movs	r3, #1
    }
 8002eaa:	4618      	mov	r0, r3
 8002eac:	370c      	adds	r7, #12
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr

08002eb6 <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 8002eb6:	b580      	push	{r7, lr}
 8002eb8:	b082      	sub	sp, #8
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	3328      	adds	r3, #40	; 0x28
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4610      	mov	r0, r2
 8002eca:	4798      	blx	r3
    }
 8002ecc:	bf00      	nop
 8002ece:	3708      	adds	r7, #8
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <_ZN8touchgfx3HAL11getInstanceEv>:
    static HAL* getInstance()
 8002ed4:	b480      	push	{r7}
 8002ed6:	af00      	add	r7, sp, #0
        return instance;
 8002ed8:	4b03      	ldr	r3, [pc, #12]	; (8002ee8 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 8002eda:	681b      	ldr	r3, [r3, #0]
    }
 8002edc:	4618      	mov	r0, r3
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop
 8002ee8:	24006fec 	.word	0x24006fec

08002eec <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	685a      	ldr	r2, [r3, #4]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	3314      	adds	r3, #20
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4610      	mov	r0, r2
 8002f04:	4798      	blx	r3
    }
 8002f06:	bf00      	nop
 8002f08:	3708      	adds	r7, #8
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}

08002f0e <DMA2D_XferCpltCallback>:

extern "C" DMA2D_HandleTypeDef hdma2d;

extern "C" {
    static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
    {
 8002f0e:	b580      	push	{r7, lr}
 8002f10:	b082      	sub	sp, #8
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
        (void)handle; // Unused argument
        HAL::getInstance()->signalDMAInterrupt();
 8002f16:	f7ff ffdd 	bl	8002ed4 <_ZN8touchgfx3HAL11getInstanceEv>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f7ff ffe5 	bl	8002eec <_ZN8touchgfx3HAL18signalDMAInterruptEv>
    }
 8002f22:	bf00      	nop
 8002f24:	3708      	adds	r7, #8
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}

08002f2a <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 8002f2a:	b580      	push	{r7, lr}
 8002f2c:	b082      	sub	sp, #8
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	330c      	adds	r3, #12
 8002f36:	4618      	mov	r0, r3
 8002f38:	f7ff ff30 	bl	8002d9c <_ZN8touchgfx9colortypeC1Ev>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3708      	adds	r7, #8
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
	...

08002f48 <_ZN8STM32DMAC1Ev>:
}

STM32DMA::STM32DMA()
 8002f48:	b5b0      	push	{r4, r5, r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	330c      	adds	r3, #12
 8002f56:	4619      	mov	r1, r3
 8002f58:	4610      	mov	r0, r2
 8002f5a:	f7ff ff87 	bl	8002e6c <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 8002f5e:	4a0e      	ldr	r2, [pc, #56]	; (8002f98 <_ZN8STM32DMAC1Ev+0x50>)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	601a      	str	r2, [r3, #0]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f103 000c 	add.w	r0, r3, #12
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	3320      	adds	r3, #32
 8002f6e:	2260      	movs	r2, #96	; 0x60
 8002f70:	4619      	mov	r1, r3
 8002f72:	f017 ff15 	bl	801ada0 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	3320      	adds	r3, #32
 8002f7a:	245f      	movs	r4, #95	; 0x5f
 8002f7c:	461d      	mov	r5, r3
 8002f7e:	e004      	b.n	8002f8a <_ZN8STM32DMAC1Ev+0x42>
 8002f80:	4628      	mov	r0, r5
 8002f82:	f7ff ffd2 	bl	8002f2a <_ZN8touchgfx6BlitOpC1Ev>
 8002f86:	3524      	adds	r5, #36	; 0x24
 8002f88:	3c01      	subs	r4, #1
 8002f8a:	2c00      	cmp	r4, #0
 8002f8c:	daf8      	bge.n	8002f80 <_ZN8STM32DMAC1Ev+0x38>
{
}
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4618      	mov	r0, r3
 8002f92:	3708      	adds	r7, #8
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bdb0      	pop	{r4, r5, r7, pc}
 8002f98:	0802b290 	.word	0x0802b290

08002f9c <_ZN8STM32DMAD1Ev>:

STM32DMA::~STM32DMA()
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b082      	sub	sp, #8
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	4a09      	ldr	r2, [pc, #36]	; (8002fcc <_ZN8STM32DMAD1Ev+0x30>)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 8002faa:	205a      	movs	r0, #90	; 0x5a
 8002fac:	f7ff fed2 	bl	8002d54 <__NVIC_DisableIRQ>
STM32DMA::~STM32DMA()
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	330c      	adds	r3, #12
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f000 fab3 	bl	8003520 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f7ff ff35 	bl	8002e2c <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3708      	adds	r7, #8
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	0802b290 	.word	0x0802b290

08002fd0 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
}
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f7ff ffdf 	bl	8002f9c <_ZN8STM32DMAD1Ev>
 8002fde:	f44f 615a 	mov.w	r1, #3488	; 0xda0
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f025 ff67 	bl	8028eb6 <_ZdlPvj>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	4618      	mov	r0, r3
 8002fec:	3708      	adds	r7, #8
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
	...

08002ff4 <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002ffc:	4b12      	ldr	r3, [pc, #72]	; (8003048 <_ZN8STM32DMA10initializeEv+0x54>)
 8002ffe:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8003002:	4a11      	ldr	r2, [pc, #68]	; (8003048 <_ZN8STM32DMA10initializeEv+0x54>)
 8003004:	f043 0310 	orr.w	r3, r3, #16
 8003008:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 800300c:	4b0e      	ldr	r3, [pc, #56]	; (8003048 <_ZN8STM32DMA10initializeEv+0x54>)
 800300e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8003012:	f003 0310 	and.w	r3, r3, #16
 8003016:	60fb      	str	r3, [r7, #12]
 8003018:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 800301a:	4b0b      	ldr	r3, [pc, #44]	; (8003048 <_ZN8STM32DMA10initializeEv+0x54>)
 800301c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800301e:	4a0a      	ldr	r2, [pc, #40]	; (8003048 <_ZN8STM32DMA10initializeEv+0x54>)
 8003020:	f043 0310 	orr.w	r3, r3, #16
 8003024:	67d3      	str	r3, [r2, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8003026:	4b08      	ldr	r3, [pc, #32]	; (8003048 <_ZN8STM32DMA10initializeEv+0x54>)
 8003028:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800302a:	4a07      	ldr	r2, [pc, #28]	; (8003048 <_ZN8STM32DMA10initializeEv+0x54>)
 800302c:	f023 0310 	bic.w	r3, r3, #16
 8003030:	67d3      	str	r3, [r2, #124]	; 0x7c

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8003032:	4b06      	ldr	r3, [pc, #24]	; (800304c <_ZN8STM32DMA10initializeEv+0x58>)
 8003034:	4a06      	ldr	r2, [pc, #24]	; (8003050 <_ZN8STM32DMA10initializeEv+0x5c>)
 8003036:	621a      	str	r2, [r3, #32]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
 8003038:	205a      	movs	r0, #90	; 0x5a
 800303a:	f7ff fe6d 	bl	8002d18 <__NVIC_EnableIRQ>
}
 800303e:	bf00      	nop
 8003040:	3710      	adds	r7, #16
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	58024400 	.word	0x58024400
 800304c:	240005d8 	.word	0x240005d8
 8003050:	08002f0f 	.word	0x08002f0f

08003054 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	460b      	mov	r3, r1
 800305e:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8003060:	2300      	movs	r3, #0
 8003062:	60fb      	str	r3, [r7, #12]

    switch (format)
 8003064:	78fb      	ldrb	r3, [r7, #3]
 8003066:	2b0b      	cmp	r3, #11
 8003068:	d826      	bhi.n	80030b8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 800306a:	a201      	add	r2, pc, #4	; (adr r2, 8003070 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 800306c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003070:	080030ad 	.word	0x080030ad
 8003074:	080030a7 	.word	0x080030a7
 8003078:	080030a1 	.word	0x080030a1
 800307c:	080030b9 	.word	0x080030b9
 8003080:	080030b9 	.word	0x080030b9
 8003084:	080030b9 	.word	0x080030b9
 8003088:	080030b9 	.word	0x080030b9
 800308c:	080030b3 	.word	0x080030b3
 8003090:	080030b3 	.word	0x080030b3
 8003094:	080030b3 	.word	0x080030b3
 8003098:	080030b3 	.word	0x080030b3
 800309c:	080030b3 	.word	0x080030b3
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 80030a0:	2300      	movs	r3, #0
 80030a2:	60fb      	str	r3, [r7, #12]
        break;
 80030a4:	e00e      	b.n	80030c4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 80030a6:	2301      	movs	r3, #1
 80030a8:	60fb      	str	r3, [r7, #12]
        break;
 80030aa:	e00b      	b.n	80030c4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 80030ac:	2302      	movs	r3, #2
 80030ae:	60fb      	str	r3, [r7, #12]
        break;
 80030b0:	e008      	b.n	80030c4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 80030b2:	2305      	movs	r3, #5
 80030b4:	60fb      	str	r3, [r7, #12]
        break;
 80030b6:	e005      	b.n	80030c4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 80030b8:	4b05      	ldr	r3, [pc, #20]	; (80030d0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 80030ba:	4a06      	ldr	r2, [pc, #24]	; (80030d4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 80030bc:	2165      	movs	r1, #101	; 0x65
 80030be:	4806      	ldr	r0, [pc, #24]	; (80030d8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 80030c0:	f025 ff28 	bl	8028f14 <__assert_func>
        break;
    }

    return dma2dColorMode;
 80030c4:	68fb      	ldr	r3, [r7, #12]
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3710      	adds	r7, #16
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	0802a8f4 	.word	0x0802a8f4
 80030d4:	0802a910 	.word	0x0802a910
 80030d8:	0802a95c 	.word	0x0802a95c

080030dc <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b084      	sub	sp, #16
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	460b      	mov	r3, r1
 80030e6:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 80030e8:	2300      	movs	r3, #0
 80030ea:	60fb      	str	r3, [r7, #12]

    switch (format)
 80030ec:	78fb      	ldrb	r3, [r7, #3]
 80030ee:	2b0a      	cmp	r3, #10
 80030f0:	d821      	bhi.n	8003136 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 80030f2:	a201      	add	r2, pc, #4	; (adr r2, 80030f8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 80030f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030f8:	08003131 	.word	0x08003131
 80030fc:	0800312b 	.word	0x0800312b
 8003100:	08003125 	.word	0x08003125
 8003104:	08003137 	.word	0x08003137
 8003108:	08003137 	.word	0x08003137
 800310c:	08003137 	.word	0x08003137
 8003110:	08003137 	.word	0x08003137
 8003114:	0800312b 	.word	0x0800312b
 8003118:	0800312b 	.word	0x0800312b
 800311c:	0800312b 	.word	0x0800312b
 8003120:	0800312b 	.word	0x0800312b
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8003124:	2300      	movs	r3, #0
 8003126:	60fb      	str	r3, [r7, #12]
        break;
 8003128:	e00b      	b.n	8003142 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 800312a:	2301      	movs	r3, #1
 800312c:	60fb      	str	r3, [r7, #12]
        break;
 800312e:	e008      	b.n	8003142 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8003130:	2302      	movs	r3, #2
 8003132:	60fb      	str	r3, [r7, #12]
        break;
 8003134:	e005      	b.n	8003142 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 8003136:	4b05      	ldr	r3, [pc, #20]	; (800314c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 8003138:	4a05      	ldr	r2, [pc, #20]	; (8003150 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 800313a:	2186      	movs	r1, #134	; 0x86
 800313c:	4805      	ldr	r0, [pc, #20]	; (8003154 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 800313e:	f025 fee9 	bl	8028f14 <__assert_func>
        break;
    }

    return dma2dColorMode;
 8003142:	68fb      	ldr	r3, [r7, #12]
}
 8003144:	4618      	mov	r0, r3
 8003146:	3710      	adds	r7, #16
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}
 800314c:	0802a8f4 	.word	0x0802a8f4
 8003150:	0802a9f0 	.word	0x0802a9f0
 8003154:	0802a95c 	.word	0x0802a95c

08003158 <_ZN8STM32DMA11getBlitCapsEv>:

BlitOperations STM32DMA::getBlitCaps()
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY_L8
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 8003160:	f240 33ef 	movw	r3, #1007	; 0x3ef
}
 8003164:	4618      	mov	r0, r3
 8003166:	370c      	adds	r7, #12
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr

08003170 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 8003170:	b590      	push	{r4, r7, lr}
 8003172:	b089      	sub	sp, #36	; 0x24
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	7f5b      	ldrb	r3, [r3, #29]
 800317e:	4619      	mov	r1, r3
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f7ff ff67 	bl	8003054 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8003186:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	7f9b      	ldrb	r3, [r3, #30]
 800318c:	4619      	mov	r1, r3
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f7ff ff60 	bl	8003054 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8003194:	6178      	str	r0, [r7, #20]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	7f9b      	ldrb	r3, [r3, #30]
 800319a:	4619      	mov	r1, r3
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f7ff ff9d 	bl	80030dc <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80031a2:	6138      	str	r0, [r7, #16]

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	8b5b      	ldrh	r3, [r3, #26]
 80031a8:	461a      	mov	r2, r3
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	8a9b      	ldrh	r3, [r3, #20]
 80031ae:	1ad2      	subs	r2, r2, r3
 80031b0:	4b92      	ldr	r3, [pc, #584]	; (80033fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80031b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration */
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	8b5b      	ldrh	r3, [r3, #26]
 80031b8:	461a      	mov	r2, r3
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	8a9b      	ldrh	r3, [r3, #20]
 80031be:	1ad2      	subs	r2, r2, r3
 80031c0:	4b8e      	ldr	r3, [pc, #568]	; (80033fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80031c2:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	8b1b      	ldrh	r3, [r3, #24]
 80031c8:	461a      	mov	r2, r3
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	8a9b      	ldrh	r3, [r3, #20]
 80031ce:	1ad2      	subs	r2, r2, r3
 80031d0:	4b8a      	ldr	r3, [pc, #552]	; (80033fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80031d2:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80031d4:	4a89      	ldr	r2, [pc, #548]	; (80033fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	8adb      	ldrh	r3, [r3, #22]
 80031de:	461a      	mov	r2, r3
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	8a9b      	ldrh	r3, [r3, #20]
 80031e4:	041b      	lsls	r3, r3, #16
 80031e6:	431a      	orrs	r2, r3
 80031e8:	4b84      	ldr	r3, [pc, #528]	; (80033fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80031ea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	691a      	ldr	r2, [r3, #16]
 80031f0:	4b82      	ldr	r3, [pc, #520]	; (80033fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80031f2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	685a      	ldr	r2, [r3, #4]
 80031f8:	4b80      	ldr	r3, [pc, #512]	; (80033fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80031fa:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003204:	d037      	beq.n	8003276 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
 8003206:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800320a:	f200 80e3 	bhi.w	80033d4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>
 800320e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003212:	d015      	beq.n	8003240 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 8003214:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003218:	f200 80dc 	bhi.w	80033d4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>
 800321c:	2b80      	cmp	r3, #128	; 0x80
 800321e:	d045      	beq.n	80032ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13c>
 8003220:	2b80      	cmp	r3, #128	; 0x80
 8003222:	f200 80d7 	bhi.w	80033d4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>
 8003226:	2b40      	cmp	r3, #64	; 0x40
 8003228:	f000 80bf 	beq.w	80033aa <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23a>
 800322c:	2b40      	cmp	r3, #64	; 0x40
 800322e:	f200 80d1 	bhi.w	80033d4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>
 8003232:	2b04      	cmp	r3, #4
 8003234:	f000 80a4 	beq.w	8003380 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x210>
 8003238:	2b20      	cmp	r3, #32
 800323a:	f000 80b6 	beq.w	80033aa <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23a>
 800323e:	e0c9      	b.n	80033d4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	7f1b      	ldrb	r3, [r3, #28]
 8003244:	061b      	lsls	r3, r3, #24
 8003246:	4619      	mov	r1, r3
 8003248:	4a6c      	ldr	r2, [pc, #432]	; (80033fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800324a:	4b6d      	ldr	r3, [pc, #436]	; (8003400 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 800324c:	430b      	orrs	r3, r1
 800324e:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	330c      	adds	r3, #12
 8003254:	4c69      	ldr	r4, [pc, #420]	; (80033fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8003256:	4618      	mov	r0, r3
 8003258:	f7ff fdae 	bl	8002db8 <_ZNK8touchgfx9colortypecvmEv>
 800325c:	4603      	mov	r3, r0
 800325e:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8003260:	4a66      	ldr	r2, [pc, #408]	; (80033fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	691a      	ldr	r2, [r3, #16]
 800326a:	4b64      	ldr	r3, [pc, #400]	; (80033fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800326c:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 800326e:	4b63      	ldr	r3, [pc, #396]	; (80033fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8003270:	4a64      	ldr	r2, [pc, #400]	; (8003404 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8003272:	601a      	str	r2, [r3, #0]
        break;
 8003274:	e0d9      	b.n	800342a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	7f1b      	ldrb	r3, [r3, #28]
 800327a:	061b      	lsls	r3, r3, #24
 800327c:	4619      	mov	r1, r3
 800327e:	4a5f      	ldr	r2, [pc, #380]	; (80033fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8003280:	4b61      	ldr	r3, [pc, #388]	; (8003408 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8003282:	430b      	orrs	r3, r1
 8003284:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	330c      	adds	r3, #12
 800328a:	4c5c      	ldr	r4, [pc, #368]	; (80033fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800328c:	4618      	mov	r0, r3
 800328e:	f7ff fd93 	bl	8002db8 <_ZNK8touchgfx9colortypecvmEv>
 8003292:	4603      	mov	r3, r0
 8003294:	6223      	str	r3, [r4, #32]
        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8003296:	4a59      	ldr	r2, [pc, #356]	; (80033fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	691a      	ldr	r2, [r3, #16]
 80032a0:	4b56      	ldr	r3, [pc, #344]	; (80033fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80032a2:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80032a4:	4b55      	ldr	r3, [pc, #340]	; (80033fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80032a6:	4a57      	ldr	r2, [pc, #348]	; (8003404 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 80032a8:	601a      	str	r2, [r3, #0]
        break;
 80032aa:	e0be      	b.n	800342a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_L8:
        {
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	60fb      	str	r3, [r7, #12]
            bool blend = true;
 80032b2:	2301      	movs	r3, #1
 80032b4:	77fb      	strb	r3, [r7, #31]

            /* Set DMA2D color mode and alpha mode */
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	7f1b      	ldrb	r3, [r3, #28]
 80032ba:	061b      	lsls	r3, r3, #24
 80032bc:	461a      	mov	r2, r3
 80032be:	69bb      	ldr	r3, [r7, #24]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	4a4e      	ldr	r2, [pc, #312]	; (80033fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80032c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032c8:	61d3      	str	r3, [r2, #28]

            /* Write DMA2D BGPFCCR register */
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80032ca:	4a4c      	ldr	r2, [pc, #304]	; (80033fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	6253      	str	r3, [r2, #36]	; 0x24

            /* Configure DMA2D Stream source2 address */
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	691a      	ldr	r2, [r3, #16]
 80032d4:	4b49      	ldr	r3, [pc, #292]	; (80033fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80032d6:	615a      	str	r2, [r3, #20]

            /* Write foreground CLUT memory address */
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	1d1a      	adds	r2, r3, #4
 80032dc:	4b47      	ldr	r3, [pc, #284]	; (80033fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80032de:	62da      	str	r2, [r3, #44]	; 0x2c

            switch ((Bitmap::ClutFormat)palette->format)
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	881b      	ldrh	r3, [r3, #0]
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d002      	beq.n	80032f0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x180>
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d00d      	beq.n	800330a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x19a>
 80032ee:	e020      	b.n	8003332 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c2>
            {
            case Bitmap::CLUT_FORMAT_L8_ARGB8888:
                /* Write foreground CLUT size and CLUT color mode */
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 80032f0:	4b42      	ldr	r3, [pc, #264]	; (80033fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80032f2:	69da      	ldr	r2, [r3, #28]
 80032f4:	4b45      	ldr	r3, [pc, #276]	; (800340c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80032f6:	4013      	ands	r3, r2
 80032f8:	68fa      	ldr	r2, [r7, #12]
 80032fa:	8852      	ldrh	r2, [r2, #2]
 80032fc:	3a01      	subs	r2, #1
 80032fe:	0212      	lsls	r2, r2, #8
 8003300:	4611      	mov	r1, r2
 8003302:	4a3e      	ldr	r2, [pc, #248]	; (80033fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8003304:	430b      	orrs	r3, r1
 8003306:	61d3      	str	r3, [r2, #28]
                break;
 8003308:	e01a      	b.n	8003340 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d0>
            case Bitmap::CLUT_FORMAT_L8_RGB888:
                if (blitOp.alpha == 255)
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	7f1b      	ldrb	r3, [r3, #28]
 800330e:	2bff      	cmp	r3, #255	; 0xff
 8003310:	d101      	bne.n	8003316 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a6>
                {
                    blend = false;
 8003312:	2300      	movs	r3, #0
 8003314:	77fb      	strb	r3, [r7, #31]
                }
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8003316:	4b39      	ldr	r3, [pc, #228]	; (80033fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8003318:	69da      	ldr	r2, [r3, #28]
 800331a:	4b3c      	ldr	r3, [pc, #240]	; (800340c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800331c:	4013      	ands	r3, r2
 800331e:	68fa      	ldr	r2, [r7, #12]
 8003320:	8852      	ldrh	r2, [r2, #2]
 8003322:	3a01      	subs	r2, #1
 8003324:	0212      	lsls	r2, r2, #8
 8003326:	4313      	orrs	r3, r2
 8003328:	4a34      	ldr	r2, [pc, #208]	; (80033fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800332a:	f043 0310 	orr.w	r3, r3, #16
 800332e:	61d3      	str	r3, [r2, #28]
                break;
 8003330:	e006      	b.n	8003340 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d0>
            case Bitmap::CLUT_FORMAT_L8_RGB565:
            default:
                assert(0 && "Unsupported format");
 8003332:	4b37      	ldr	r3, [pc, #220]	; (8003410 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003334:	4a37      	ldr	r2, [pc, #220]	; (8003414 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8003336:	f44f 7180 	mov.w	r1, #256	; 0x100
 800333a:	4837      	ldr	r0, [pc, #220]	; (8003418 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 800333c:	f025 fdea 	bl	8028f14 <__assert_func>
                break;
            }

            /* Enable the CLUT loading for the foreground */
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8003340:	4b2e      	ldr	r3, [pc, #184]	; (80033fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8003342:	69db      	ldr	r3, [r3, #28]
 8003344:	4a2d      	ldr	r2, [pc, #180]	; (80033fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8003346:	f043 0320 	orr.w	r3, r3, #32
 800334a:	61d3      	str	r3, [r2, #28]

            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 800334c:	bf00      	nop
 800334e:	4b2b      	ldr	r3, [pc, #172]	; (80033fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8003350:	69db      	ldr	r3, [r3, #28]
 8003352:	f003 0320 	and.w	r3, r3, #32
 8003356:	2b00      	cmp	r3, #0
 8003358:	bf14      	ite	ne
 800335a:	2301      	movne	r3, #1
 800335c:	2300      	moveq	r3, #0
 800335e:	b2db      	uxtb	r3, r3
 8003360:	2b00      	cmp	r3, #0
 8003362:	d1f4      	bne.n	800334e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1de>
            {
            }
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8003364:	4b25      	ldr	r3, [pc, #148]	; (80033fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8003366:	2210      	movs	r2, #16
 8003368:	609a      	str	r2, [r3, #8]

            /* Set DMA2D mode */
            if (blend)
 800336a:	7ffb      	ldrb	r3, [r7, #31]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d003      	beq.n	8003378 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x208>
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8003370:	4b22      	ldr	r3, [pc, #136]	; (80033fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8003372:	4a24      	ldr	r2, [pc, #144]	; (8003404 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8003374:	601a      	str	r2, [r3, #0]
            else
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
            }
        }
        break;
 8003376:	e058      	b.n	800342a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8003378:	4b20      	ldr	r3, [pc, #128]	; (80033fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800337a:	4a28      	ldr	r2, [pc, #160]	; (800341c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 800337c:	601a      	str	r2, [r3, #0]
        break;
 800337e:	e054      	b.n	800342a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	7f1b      	ldrb	r3, [r3, #28]
 8003384:	061b      	lsls	r3, r3, #24
 8003386:	461a      	mov	r2, r3
 8003388:	69bb      	ldr	r3, [r7, #24]
 800338a:	4313      	orrs	r3, r2
 800338c:	4a1b      	ldr	r2, [pc, #108]	; (80033fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800338e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003392:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8003394:	4a19      	ldr	r2, [pc, #100]	; (80033fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	691a      	ldr	r2, [r3, #16]
 800339e:	4b17      	ldr	r3, [pc, #92]	; (80033fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80033a0:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80033a2:	4b16      	ldr	r3, [pc, #88]	; (80033fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80033a4:	4a17      	ldr	r2, [pc, #92]	; (8003404 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 80033a6:	601a      	str	r2, [r3, #0]
        break;
 80033a8:	e03f      	b.n	800342a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	7f1b      	ldrb	r3, [r3, #28]
 80033ae:	061b      	lsls	r3, r3, #24
 80033b0:	461a      	mov	r2, r3
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	4a11      	ldr	r2, [pc, #68]	; (80033fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80033b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033bc:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80033be:	4a0f      	ldr	r2, [pc, #60]	; (80033fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	691a      	ldr	r2, [r3, #16]
 80033c8:	4b0c      	ldr	r3, [pc, #48]	; (80033fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80033ca:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80033cc:	4b0b      	ldr	r3, [pc, #44]	; (80033fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80033ce:	4a0d      	ldr	r2, [pc, #52]	; (8003404 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 80033d0:	601a      	str	r2, [r3, #0]
        break;
 80033d2:	e02a      	b.n	800342a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	7f1b      	ldrb	r3, [r3, #28]
 80033d8:	061b      	lsls	r3, r3, #24
 80033da:	461a      	mov	r2, r3
 80033dc:	69bb      	ldr	r3, [r7, #24]
 80033de:	4313      	orrs	r3, r2
 80033e0:	4a06      	ldr	r2, [pc, #24]	; (80033fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80033e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033e6:	61d3      	str	r3, [r2, #28]

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	7f5a      	ldrb	r2, [r3, #29]
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	7f9b      	ldrb	r3, [r3, #30]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d015      	beq.n	8003420 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 80033f4:	4b01      	ldr	r3, [pc, #4]	; (80033fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80033f6:	4a09      	ldr	r2, [pc, #36]	; (800341c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 80033f8:	601a      	str	r2, [r3, #0]
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
        }

        break;
 80033fa:	e015      	b.n	8003428 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b8>
 80033fc:	52001000 	.word	0x52001000
 8003400:	0002000a 	.word	0x0002000a
 8003404:	00020201 	.word	0x00020201
 8003408:	00020009 	.word	0x00020009
 800340c:	ffff00ef 	.word	0xffff00ef
 8003410:	0802aa3c 	.word	0x0802aa3c
 8003414:	0802aa58 	.word	0x0802aa58
 8003418:	0802a95c 	.word	0x0802a95c
 800341c:	00010201 	.word	0x00010201
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8003420:	4b04      	ldr	r3, [pc, #16]	; (8003434 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c4>)
 8003422:	f240 2201 	movw	r2, #513	; 0x201
 8003426:	601a      	str	r2, [r3, #0]
        break;
 8003428:	bf00      	nop
    }
}
 800342a:	bf00      	nop
 800342c:	3724      	adds	r7, #36	; 0x24
 800342e:	46bd      	mov	sp, r7
 8003430:	bd90      	pop	{r4, r7, pc}
 8003432:	bf00      	nop
 8003434:	52001000 	.word	0x52001000

08003438 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8003438:	b590      	push	{r4, r7, lr}
 800343a:	b085      	sub	sp, #20
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	7f9b      	ldrb	r3, [r3, #30]
 8003446:	4619      	mov	r1, r3
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f7ff fe47 	bl	80030dc <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 800344e:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8003450:	4a2f      	ldr	r2, [pc, #188]	; (8003510 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	8adb      	ldrh	r3, [r3, #22]
 800345a:	461a      	mov	r2, r3
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	8a9b      	ldrh	r3, [r3, #20]
 8003460:	041b      	lsls	r3, r3, #16
 8003462:	431a      	orrs	r2, r3
 8003464:	4b2a      	ldr	r3, [pc, #168]	; (8003510 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8003466:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	691a      	ldr	r2, [r3, #16]
 800346c:	4b28      	ldr	r3, [pc, #160]	; (8003510 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800346e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	8b5b      	ldrh	r3, [r3, #26]
 8003474:	461a      	mov	r2, r3
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	8a9b      	ldrh	r3, [r3, #20]
 800347a:	1ad2      	subs	r2, r2, r3
 800347c:	4b24      	ldr	r3, [pc, #144]	; (8003510 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800347e:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2b08      	cmp	r3, #8
 8003486:	d12e      	bne.n	80034e6 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xae>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	8b5b      	ldrh	r3, [r3, #26]
 800348c:	461a      	mov	r2, r3
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	8a9b      	ldrh	r3, [r3, #20]
 8003492:	1ad2      	subs	r2, r2, r3
 8003494:	4b1e      	ldr	r3, [pc, #120]	; (8003510 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8003496:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	8b5b      	ldrh	r3, [r3, #26]
 800349c:	461a      	mov	r2, r3
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	8a9b      	ldrh	r3, [r3, #20]
 80034a2:	1ad2      	subs	r2, r2, r3
 80034a4:	4b1a      	ldr	r3, [pc, #104]	; (8003510 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80034a6:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80034a8:	4a19      	ldr	r2, [pc, #100]	; (8003510 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6253      	str	r3, [r2, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	7f1b      	ldrb	r3, [r3, #28]
 80034b2:	061b      	lsls	r3, r3, #24
 80034b4:	4619      	mov	r1, r3
 80034b6:	4a16      	ldr	r2, [pc, #88]	; (8003510 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80034b8:	4b16      	ldr	r3, [pc, #88]	; (8003514 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xdc>)
 80034ba:	430b      	orrs	r3, r1
 80034bc:	61d3      	str	r3, [r2, #28]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	330c      	adds	r3, #12
 80034c2:	4c13      	ldr	r4, [pc, #76]	; (8003510 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80034c4:	4618      	mov	r0, r3
 80034c6:	f7ff fc77 	bl	8002db8 <_ZNK8touchgfx9colortypecvmEv>
 80034ca:	4603      	mov	r3, r0
 80034cc:	6223      	str	r3, [r4, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	691a      	ldr	r2, [r3, #16]
 80034d2:	4b0f      	ldr	r3, [pc, #60]	; (8003510 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80034d4:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	691a      	ldr	r2, [r3, #16]
 80034da:	4b0d      	ldr	r3, [pc, #52]	; (8003510 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80034dc:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 80034de:	4b0c      	ldr	r3, [pc, #48]	; (8003510 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80034e0:	4a0d      	ldr	r2, [pc, #52]	; (8003518 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe0>)
 80034e2:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
    }
}
 80034e4:	e010      	b.n	8003508 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd0>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 80034e6:	4a0a      	ldr	r2, [pc, #40]	; (8003510 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 80034ec:	4b08      	ldr	r3, [pc, #32]	; (8003510 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80034ee:	2200      	movs	r2, #0
 80034f0:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	330c      	adds	r3, #12
 80034f6:	4c06      	ldr	r4, [pc, #24]	; (8003510 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80034f8:	4618      	mov	r0, r3
 80034fa:	f7ff fc5d 	bl	8002db8 <_ZNK8touchgfx9colortypecvmEv>
 80034fe:	4603      	mov	r3, r0
 8003500:	63a3      	str	r3, [r4, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8003502:	4b03      	ldr	r3, [pc, #12]	; (8003510 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8003504:	4a05      	ldr	r2, [pc, #20]	; (800351c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe4>)
 8003506:	601a      	str	r2, [r3, #0]
}
 8003508:	bf00      	nop
 800350a:	3714      	adds	r7, #20
 800350c:	46bd      	mov	sp, r7
 800350e:	bd90      	pop	{r4, r7, pc}
 8003510:	52001000 	.word	0x52001000
 8003514:	00010009 	.word	0x00010009
 8003518:	00020201 	.word	0x00020201
 800351c:	00030201 	.word	0x00030201

08003520 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	4a05      	ldr	r2, [pc, #20]	; (8003540 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	601a      	str	r2, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4618      	mov	r0, r3
 8003532:	f7ff fc4d 	bl	8002dd0 <_ZN8touchgfx9DMA_QueueD1Ev>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4618      	mov	r0, r3
 800353a:	3708      	adds	r7, #8
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}
 8003540:	0802bbdc 	.word	0x0802bbdc

08003544 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8003544:	b580      	push	{r7, lr}
 8003546:	b082      	sub	sp, #8
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f7ff ffe7 	bl	8003520 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8003552:	2114      	movs	r1, #20
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f025 fcae 	bl	8028eb6 <_ZdlPvj>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4618      	mov	r0, r3
 800355e:	3708      	adds	r7, #8
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}

08003564 <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	801a      	strh	r2, [r3, #0]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	805a      	strh	r2, [r3, #2]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	809a      	strh	r2, [r3, #4]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	80da      	strh	r2, [r3, #6]
    {
    }
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	4618      	mov	r0, r3
 8003588:	370c      	adds	r7, #12
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
	...

08003594 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 800359c:	4a04      	ldr	r2, [pc, #16]	; (80035b0 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6013      	str	r3, [r2, #0]
    }
 80035a2:	bf00      	nop
 80035a4:	370c      	adds	r7, #12
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop
 80035b0:	24007048 	.word	0x24007048

080035b4 <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
    {
 80035bc:	4a04      	ldr	r2, [pc, #16]	; (80035d0 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	601a      	str	r2, [r3, #0]
    }
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4618      	mov	r0, r3
 80035c6:	370c      	adds	r7, #12
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr
 80035d0:	0802b52c 	.word	0x0802b52c

080035d4 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
    }
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f7ff ffe9 	bl	80035b4 <_ZN8touchgfx12FontProviderD1Ev>
 80035e2:	2104      	movs	r1, #4
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f025 fc66 	bl	8028eb6 <_ZdlPvj>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4618      	mov	r0, r3
 80035ee:	3708      	adds	r7, #8
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 80035f4:	b480      	push	{r7}
 80035f6:	b085      	sub	sp, #20
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	607a      	str	r2, [r7, #4]
 8003600:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8003602:	4a0b      	ldr	r2, [pc, #44]	; (8003630 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	601a      	str	r2, [r3, #0]
        : presenterStorage(pres),
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	68ba      	ldr	r2, [r7, #8]
 800360c:	605a      	str	r2, [r3, #4]
          screenStorage(scr),
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	609a      	str	r2, [r3, #8]
          transitionStorage(tra),
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	683a      	ldr	r2, [r7, #0]
 8003618:	60da      	str	r2, [r3, #12]
          frontendApplication(app)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	69ba      	ldr	r2, [r7, #24]
 800361e:	611a      	str	r2, [r3, #16]
    {
    }
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	4618      	mov	r0, r3
 8003624:	3714      	adds	r7, #20
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr
 800362e:	bf00      	nop
 8003630:	0802b51c 	.word	0x0802b51c

08003634 <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
    {
 800363c:	4a04      	ldr	r2, [pc, #16]	; (8003650 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	601a      	str	r2, [r3, #0]
    }
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	4618      	mov	r0, r3
 8003646:	370c      	adds	r7, #12
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr
 8003650:	0802b51c 	.word	0x0802b51c

08003654 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
    }
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f7ff ffe9 	bl	8003634 <_ZN8touchgfx7MVPHeapD1Ev>
 8003662:	2114      	movs	r1, #20
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f025 fc26 	bl	8028eb6 <_ZdlPvj>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4618      	mov	r0, r3
 800366e:	3708      	adds	r7, #8
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}

08003674 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800367e:	bf00      	nop
 8003680:	370c      	adds	r7, #12
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr

0800368a <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800368a:	b480      	push	{r7}
 800368c:	b083      	sub	sp, #12
 800368e:	af00      	add	r7, sp, #0
 8003690:	6078      	str	r0, [r7, #4]
 8003692:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8003694:	bf00      	nop
 8003696:	370c      	adds	r7, #12
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr

080036a0 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 80036aa:	bf00      	nop
 80036ac:	370c      	adds	r7, #12
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr

080036b6 <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 80036b6:	b480      	push	{r7}
 80036b8:	b083      	sub	sp, #12
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]
 80036be:	460b      	mov	r3, r1
 80036c0:	70fb      	strb	r3, [r7, #3]
    {
        (void)c; // Unused variable
    }
 80036c2:	bf00      	nop
 80036c4:	370c      	adds	r7, #12
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr

080036ce <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 80036ce:	b480      	push	{r7}
 80036d0:	b083      	sub	sp, #12
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	6078      	str	r0, [r7, #4]
    {
    }
 80036d6:	bf00      	nop
 80036d8:	370c      	adds	r7, #12
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr

080036e2 <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 80036e2:	b480      	push	{r7}
 80036e4:	b083      	sub	sp, #12
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
    {
    }
 80036ea:	bf00      	nop
 80036ec:	370c      	adds	r7, #12
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr
	...

080036f8 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
    {
 8003700:	4a04      	ldr	r2, [pc, #16]	; (8003714 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	601a      	str	r2, [r3, #0]
    }
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4618      	mov	r0, r3
 800370a:	370c      	adds	r7, #12
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr
 8003714:	0802b4f4 	.word	0x0802b4f4

08003718 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
    }
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f7ff ffe9 	bl	80036f8 <_ZN8touchgfx15UIEventListenerD1Ev>
 8003726:	2104      	movs	r1, #4
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f025 fbc4 	bl	8028eb6 <_ZdlPvj>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4618      	mov	r0, r3
 8003732:	3708      	adds	r7, #8
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
    {
 8003740:	4a04      	ldr	r2, [pc, #16]	; (8003754 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	601a      	str	r2, [r3, #0]
    }
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4618      	mov	r0, r3
 800374a:	370c      	adds	r7, #12
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr
 8003754:	0802bcf8 	.word	0x0802bcf8

08003758 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
    }
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f7ff ffe9 	bl	8003738 <_ZN8touchgfx3LCDD1Ev>
 8003766:	2108      	movs	r1, #8
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f025 fba4 	bl	8028eb6 <_ZdlPvj>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4618      	mov	r0, r3
 8003772:	3708      	adds	r7, #8
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}

08003778 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     * @note The application will not make a complete restart - if
     *       your Model contains data, this will not be reset, unless
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
    {
    }
 8003780:	bf00      	nop
 8003782:	370c      	adds	r7, #12
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	460b      	mov	r3, r1
 8003796:	70fb      	strb	r3, [r7, #3]
    {
        (void)screenId; // Unused variable
    }
 8003798:	bf00      	nop
 800379a:	370c      	adds	r7, #12
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr

080037a4 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	683a      	ldr	r2, [r7, #0]
 80037b2:	f503 7398 	add.w	r3, r3, #304	; 0x130
 80037b6:	6810      	ldr	r0, [r2, #0]
 80037b8:	6851      	ldr	r1, [r2, #4]
 80037ba:	c303      	stmia	r3!, {r0, r1}
    }
 80037bc:	bf00      	nop
 80037be:	370c      	adds	r7, #12
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr

080037c8 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
    {
 80037d0:	4a04      	ldr	r2, [pc, #16]	; (80037e4 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	601a      	str	r2, [r3, #0]
    }
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4618      	mov	r0, r3
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr
 80037e4:	0802b4dc 	.word	0x0802b4dc

080037e8 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
    }
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f7ff ffe9 	bl	80037c8 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 80037f6:	2104      	movs	r1, #4
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f025 fb5c 	bl	8028eb6 <_ZdlPvj>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4618      	mov	r0, r3
 8003802:	3708      	adds	r7, #8
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}

08003808 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
            : startX(0),
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	801a      	strh	r2, [r3, #0]
              startY(0),
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	805a      	strh	r2, [r3, #2]
              downX(0),
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	809a      	strh	r2, [r3, #4]
              downY(0),
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	80da      	strh	r2, [r3, #6]
              tickCount(0),
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	811a      	strh	r2, [r3, #8]
              velocityX(0),
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2200      	movs	r2, #0
 8003832:	815a      	strh	r2, [r3, #10]
              velocityY(0),
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	819a      	strh	r2, [r3, #12]
              inProgress(false)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	739a      	strb	r2, [r3, #14]
        {
        }
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	4618      	mov	r0, r3
 8003844:	370c      	adds	r7, #12
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr

0800384e <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 800384e:	b580      	push	{r7, lr}
 8003850:	b082      	sub	sp, #8
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4618      	mov	r0, r3
 800385a:	f7ff ffd5 	bl	8003808 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	611a      	str	r2, [r3, #16]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	829a      	strh	r2, [r3, #20]
    {
    }
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4618      	mov	r0, r3
 800386e:	3708      	adds	r7, #8
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	607a      	str	r2, [r7, #4]
 8003880:	603b      	str	r3, [r7, #0]
          lastRenderMethod(HARDWARE)
 8003882:	4a55      	ldr	r2, [pc, #340]	; (80039d8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x164>)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	601a      	str	r2, [r3, #0]
        : dma(dmaInterface),
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	68ba      	ldr	r2, [r7, #8]
 800388c:	605a      	str	r2, [r3, #4]
          lcdRef(display),
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	609a      	str	r2, [r3, #8]
          touchController(touchCtrl),
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	683a      	ldr	r2, [r7, #0]
 8003898:	60da      	str	r2, [r3, #12]
          mcuInstrumentation(0),
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2200      	movs	r2, #0
 800389e:	611a      	str	r2, [r3, #16]
          buttonController(0),
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2200      	movs	r2, #0
 80038a4:	615a      	str	r2, [r3, #20]
          frameBufferAllocator(0),
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2200      	movs	r2, #0
 80038aa:	619a      	str	r2, [r3, #24]
          gestures(),
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	331c      	adds	r3, #28
 80038b0:	4618      	mov	r0, r3
 80038b2:	f7ff ffcc 	bl	800384e <_ZN8touchgfx8GesturesC1Ev>
          nativeDisplayOrientation(ORIENTATION_LANDSCAPE),
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          taskDelayFunc(0),
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2200      	movs	r2, #0
 80038c2:	639a      	str	r2, [r3, #56]	; 0x38
          frameBuffer0(0),
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2200      	movs	r2, #0
 80038c8:	63da      	str	r2, [r3, #60]	; 0x3c
          frameBuffer1(0),
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2200      	movs	r2, #0
 80038ce:	641a      	str	r2, [r3, #64]	; 0x40
          frameBuffer2(0),
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2200      	movs	r2, #0
 80038d4:	645a      	str	r2, [r3, #68]	; 0x44
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
          fingerSize(1),
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2201      	movs	r2, #1
 80038e2:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
          lockDMAToPorch(false),
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
          frameBufferUpdatedThisFrame(false),
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
          auxiliaryLCD(0),
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2200      	movs	r2, #0
 80038fa:	64da      	str	r2, [r3, #76]	; 0x4c
          partialFrameBufferRect(),
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	3350      	adds	r3, #80	; 0x50
 8003900:	4618      	mov	r0, r3
 8003902:	f7ff fe2f 	bl	8003564 <_ZN8touchgfx4RectC1Ev>
          useAuxiliaryLCD(false),
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
          listener(0),
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2200      	movs	r2, #0
 8003912:	65da      	str	r2, [r3, #92]	; 0x5c
          lastX(0),
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2200      	movs	r2, #0
 8003918:	661a      	str	r2, [r3, #96]	; 0x60
          lastY(0),
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2200      	movs	r2, #0
 800391e:	665a      	str	r2, [r3, #100]	; 0x64
          touchSampleRate(1),
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
          mcuLoadPct(0),
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2200      	movs	r2, #0
 800392c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
          vSyncCnt(0),
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2200      	movs	r2, #0
 8003934:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
          vSyncForFrame(1),
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
          vSyncCompensationEnabled(false),
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2200      	movs	r2, #0
 8003944:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
          clientDirty(false),
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2200      	movs	r2, #0
 800394c:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
          swapRequested(false),
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2200      	movs	r2, #0
 8003954:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
          lastTouched(false),
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2200      	movs	r2, #0
 800395c:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
          updateMCULoad(0),
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2200      	movs	r2, #0
 8003964:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          cc_begin(0),
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2200      	movs	r2, #0
 800396c:	675a      	str	r2, [r3, #116]	; 0x74
          requestedOrientation(ORIENTATION_LANDSCAPE),
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2200      	movs	r2, #0
 8003972:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
          displayOrientationChangeRequested(false),
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2200      	movs	r2, #0
 800397a:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
          useDMAAcceleration(true),
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2201      	movs	r2, #1
 8003982:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
          lastRenderMethod(HARDWARE)
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2201      	movs	r2, #1
 800398a:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
        instance = this;
 800398e:	4a13      	ldr	r2, [pc, #76]	; (80039dc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x168>)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6013      	str	r3, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8003994:	4a12      	ldr	r2, [pc, #72]	; (80039e0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8003996:	8b3b      	ldrh	r3, [r7, #24]
 8003998:	8013      	strh	r3, [r2, #0]
 800399a:	4b11      	ldr	r3, [pc, #68]	; (80039e0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 800399c:	881a      	ldrh	r2, [r3, #0]
 800399e:	4b11      	ldr	r3, [pc, #68]	; (80039e4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 80039a0:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 80039a2:	4a11      	ldr	r2, [pc, #68]	; (80039e8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 80039a4:	8bbb      	ldrh	r3, [r7, #28]
 80039a6:	8013      	strh	r3, [r2, #0]
 80039a8:	4b0f      	ldr	r3, [pc, #60]	; (80039e8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 80039aa:	881a      	ldrh	r2, [r3, #0]
 80039ac:	4b0f      	ldr	r3, [pc, #60]	; (80039ec <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x178>)
 80039ae:	801a      	strh	r2, [r3, #0]
        DISPLAY_ROTATION = rotate0;
 80039b0:	4b0f      	ldr	r3, [pc, #60]	; (80039f0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x17c>)
 80039b2:	2200      	movs	r2, #0
 80039b4:	701a      	strb	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 80039b6:	8b3a      	ldrh	r2, [r7, #24]
 80039b8:	8bbb      	ldrh	r3, [r7, #28]
 80039ba:	429a      	cmp	r2, r3
 80039bc:	bf34      	ite	cc
 80039be:	2301      	movcc	r3, #1
 80039c0:	2300      	movcs	r3, #0
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	461a      	mov	r2, r3
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	4618      	mov	r0, r3
 80039d0:	3710      	adds	r7, #16
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	0802bab4 	.word	0x0802bab4
 80039dc:	24006fec 	.word	0x24006fec
 80039e0:	24006fe0 	.word	0x24006fe0
 80039e4:	24006fe6 	.word	0x24006fe6
 80039e8:	24006fe2 	.word	0x24006fe2
 80039ec:	24006fe8 	.word	0x24006fe8
 80039f0:	24006fe4 	.word	0x24006fe4

080039f4 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	4a05      	ldr	r2, [pc, #20]	; (8003a14 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	601a      	str	r2, [r3, #0]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4618      	mov	r0, r3
 8003a06:	f7ff fe77 	bl	80036f8 <_ZN8touchgfx15UIEventListenerD1Ev>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3708      	adds	r7, #8
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	0802bd50 	.word	0x0802bd50

08003a18 <_ZN8touchgfx11ApplicationD0Ev>:
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f7ff ffe7 	bl	80039f4 <_ZN8touchgfx11ApplicationD1Ev>
 8003a26:	f44f 719e 	mov.w	r1, #316	; 0x13c
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f025 fa43 	bl	8028eb6 <_ZdlPvj>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	4618      	mov	r0, r3
 8003a34:	3708      	adds	r7, #8
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}

08003a3a <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8003a3a:	b580      	push	{r7, lr}
 8003a3c:	b082      	sub	sp, #8
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f000 f804 	bl	8003a50 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 8003a48:	bf00      	nop
 8003a4a:	3708      	adds	r7, #8
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b082      	sub	sp, #8
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d00f      	beq.n	8003a82 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	330c      	adds	r3, #12
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4610      	mov	r0, r2
 8003a76:	4798      	blx	r3
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d001      	beq.n	8003a82 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e000      	b.n	8003a84 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 8003a82:	2300      	movs	r3, #0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d00e      	beq.n	8003aa6 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	3308      	adds	r3, #8
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4610      	mov	r0, r2
 8003a9c:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
        }
    }
 8003aa6:	bf00      	nop
 8003aa8:	3708      	adds	r7, #8
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
	...

08003ab0 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b082      	sub	sp, #8
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	4a05      	ldr	r2, [pc, #20]	; (8003ad0 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	601a      	str	r2, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f7ff ff97 	bl	80039f4 <_ZN8touchgfx11ApplicationD1Ev>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3708      	adds	r7, #8
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	0802b488 	.word	0x0802b488

08003ad4 <_ZN8touchgfx14MVPApplicationD0Ev>:
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f7ff ffe7 	bl	8003ab0 <_ZN8touchgfx14MVPApplicationD1Ev>
 8003ae2:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f025 f9e5 	bl	8028eb6 <_ZdlPvj>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	4618      	mov	r0, r3
 8003af0:	3708      	adds	r7, #8
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
	...

08003af8 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b082      	sub	sp, #8
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	4a08      	ldr	r2, [pc, #32]	; (8003b24 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	601a      	str	r2, [r3, #0]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f000 fb19 	bl	8004144 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4618      	mov	r0, r3
 8003b16:	f7ff ffcb 	bl	8003ab0 <_ZN8touchgfx14MVPApplicationD1Ev>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3708      	adds	r7, #8
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	0802b41c 	.word	0x0802b41c

08003b28 <_ZN23FrontendApplicationBaseD0Ev>:
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f7ff ffe1 	bl	8003af8 <_ZN23FrontendApplicationBaseD1Ev>
 8003b36:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f025 f9bb 	bl	8028eb6 <_ZdlPvj>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	4618      	mov	r0, r3
 8003b44:	3708      	adds	r7, #8
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}

08003b4a <_ZN23FrontendApplicationBase19changeToStartScreenEv>:

    virtual void changeToStartScreen()
 8003b4a:	b580      	push	{r7, lr}
 8003b4c:	b082      	sub	sp, #8
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	6078      	str	r0, [r7, #4]
    {
        gotoScreen1ScreenNoTransition();
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f001 f8f4 	bl	8004d40 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 8003b58:	bf00      	nop
 8003b5a:	3708      	adds	r7, #8
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}

08003b60 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b082      	sub	sp, #8
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	4a05      	ldr	r2, [pc, #20]	; (8003b80 <_ZN19FrontendApplicationD1Ev+0x20>)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	601a      	str	r2, [r3, #0]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4618      	mov	r0, r3
 8003b72:	f7ff ffc1 	bl	8003af8 <_ZN23FrontendApplicationBaseD1Ev>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3708      	adds	r7, #8
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	0802b3c8 	.word	0x0802b3c8

08003b84 <_ZN19FrontendApplicationD0Ev>:
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b082      	sub	sp, #8
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f7ff ffe7 	bl	8003b60 <_ZN19FrontendApplicationD1Ev>
 8003b92:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f025 f98d 	bl	8028eb6 <_ZdlPvj>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3708      	adds	r7, #8
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}

08003ba6 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8003ba6:	b580      	push	{r7, lr}
 8003ba8:	b082      	sub	sp, #8
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f002 fbbb 	bl	8006330 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f019 fa65 	bl	801d08c <_ZN8touchgfx11Application15handleTickEventEv>
    }
 8003bc2:	bf00      	nop
 8003bc4:	3708      	adds	r7, #8
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}

08003bca <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8003bca:	b580      	push	{r7, lr}
 8003bcc:	b082      	sub	sp, #8
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
 8003bd2:	6039      	str	r1, [r7, #0]
    {
        app.gotoScreen1ScreenNoTransition();
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f001 f8b2 	bl	8004d40 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 8003bdc:	bf00      	nop
 8003bde:	3708      	adds	r7, #8
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b086      	sub	sp, #24
 8003be8:	af02      	add	r7, sp, #8
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	607a      	str	r2, [r7, #4]
 8003bf0:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 8003bf2:	68f8      	ldr	r0, [r7, #12]
 8003bf4:	69bb      	ldr	r3, [r7, #24]
 8003bf6:	9300      	str	r3, [sp, #0]
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	68b9      	ldr	r1, [r7, #8]
 8003bfe:	f7ff fcf9 	bl	80035f4 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 8003c02:	4a04      	ldr	r2, [pc, #16]	; (8003c14 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	601a      	str	r2, [r3, #0]
    {

    }
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3710      	adds	r7, #16
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	0802b3b4 	.word	0x0802b3b4

08003c18 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	4801      	ldr	r0, [pc, #4]	; (8003c24 <__tcf_0+0xc>)
 8003c1e:	f000 f965 	bl	8003eec <_ZN12FrontendHeapD1Ev>
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	24000984 	.word	0x24000984

08003c28 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 8003c2c:	4b11      	ldr	r3, [pc, #68]	; (8003c74 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f3bf 8f5b 	dmb	ish
 8003c34:	f003 0301 	and.w	r3, r3, #1
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	bf0c      	ite	eq
 8003c3c:	2301      	moveq	r3, #1
 8003c3e:	2300      	movne	r3, #0
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d013      	beq.n	8003c6e <_ZN12FrontendHeap11getInstanceEv+0x46>
 8003c46:	480b      	ldr	r0, [pc, #44]	; (8003c74 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 8003c48:	f025 f937 	bl	8028eba <__cxa_guard_acquire>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	bf14      	ite	ne
 8003c52:	2301      	movne	r3, #1
 8003c54:	2300      	moveq	r3, #0
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d008      	beq.n	8003c6e <_ZN12FrontendHeap11getInstanceEv+0x46>
 8003c5c:	4806      	ldr	r0, [pc, #24]	; (8003c78 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8003c5e:	f000 f867 	bl	8003d30 <_ZN12FrontendHeapC1Ev>
 8003c62:	4806      	ldr	r0, [pc, #24]	; (8003c7c <_ZN12FrontendHeap11getInstanceEv+0x54>)
 8003c64:	f025 f974 	bl	8028f50 <atexit>
 8003c68:	4802      	ldr	r0, [pc, #8]	; (8003c74 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 8003c6a:	f025 f932 	bl	8028ed2 <__cxa_guard_release>
        return instance;
 8003c6e:	4b02      	ldr	r3, [pc, #8]	; (8003c78 <_ZN12FrontendHeap11getInstanceEv+0x50>)
    }
 8003c70:	4618      	mov	r0, r3
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	24000c0c 	.word	0x24000c0c
 8003c78:	24000984 	.word	0x24000984
 8003c7c:	08003c19 	.word	0x08003c19

08003c80 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b082      	sub	sp, #8
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	4a05      	ldr	r2, [pc, #20]	; (8003ca0 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	601a      	str	r2, [r3, #0]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4618      	mov	r0, r3
 8003c92:	f7ff fccf 	bl	8003634 <_ZN8touchgfx7MVPHeapD1Ev>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3708      	adds	r7, #8
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	0802b3b4 	.word	0x0802b3b4

08003ca4 <_ZN16FrontendHeapBaseD0Ev>:
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b082      	sub	sp, #8
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f7ff ffe7 	bl	8003c80 <_ZN16FrontendHeapBaseD1Ev>
 8003cb2:	2114      	movs	r1, #20
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f025 f8fe 	bl	8028eb6 <_ZdlPvj>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3708      	adds	r7, #8
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}

08003cc4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b082      	sub	sp, #8
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f015 fee8 	bl	8019aa4 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8003cd4:	4a03      	ldr	r2, [pc, #12]	; (8003ce4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	601a      	str	r2, [r3, #0]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3708      	adds	r7, #8
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	0802b380 	.word	0x0802b380

08003ce8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b082      	sub	sp, #8
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f015 fed6 	bl	8019aa4 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8003cf8:	4a03      	ldr	r2, [pc, #12]	; (8003d08 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	601a      	str	r2, [r3, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4618      	mov	r0, r3
 8003d02:	3708      	adds	r7, #8
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	0802b34c 	.word	0x0802b34c

08003d0c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b082      	sub	sp, #8
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	4618      	mov	r0, r3
 8003d18:	f015 fec4 	bl	8019aa4 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8003d1c:	4a03      	ldr	r2, [pc, #12]	; (8003d2c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	601a      	str	r2, [r3, #0]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4618      	mov	r0, r3
 8003d26:	3708      	adds	r7, #8
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	0802b318 	.word	0x0802b318

08003d30 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8003d30:	b590      	push	{r4, r7, lr}
 8003d32:	b085      	sub	sp, #20
 8003d34:	af02      	add	r7, sp, #8
 8003d36:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f103 0114 	add.w	r1, r3, #20
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f503 748a 	add.w	r4, r3, #276	; 0x114
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f503 7396 	add.w	r3, r3, #300	; 0x12c
                     app(model, *this)
 8003d52:	9300      	str	r3, [sp, #0]
 8003d54:	4623      	mov	r3, r4
 8003d56:	f7ff ff45 	bl	8003be4 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 8003d5a:	4a18      	ldr	r2, [pc, #96]	; (8003dbc <_ZN12FrontendHeapC1Ev+0x8c>)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	601a      	str	r2, [r3, #0]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	3314      	adds	r3, #20
 8003d64:	4618      	mov	r0, r3
 8003d66:	f7ff ffad 	bl	8003cc4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	332c      	adds	r3, #44	; 0x2c
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f7ff ffba 	bl	8003ce8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f7ff ffc6 	bl	8003d0c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003d86:	4618      	mov	r0, r3
 8003d88:	f002 fac4 	bl	8006314 <_ZN5ModelC1Ev>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f503 7096 	add.w	r0, r3, #300	; 0x12c
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	4619      	mov	r1, r3
 8003d9c:	f002 faa4 	bl	80062e8 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8003da8:	4619      	mov	r1, r3
 8003daa:	4610      	mov	r0, r2
 8003dac:	f7ff ff0d 	bl	8003bca <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	4618      	mov	r0, r3
 8003db4:	370c      	adds	r7, #12
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd90      	pop	{r4, r7, pc}
 8003dba:	bf00      	nop
 8003dbc:	0802b304 	.word	0x0802b304

08003dc0 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b086      	sub	sp, #24
 8003dc4:	af02      	add	r7, sp, #8
 8003dc6:	60f8      	str	r0, [r7, #12]
 8003dc8:	60b9      	str	r1, [r7, #8]
 8003dca:	607a      	str	r2, [r7, #4]
 8003dcc:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 8003dce:	68f8      	ldr	r0, [r7, #12]
 8003dd0:	8bbb      	ldrh	r3, [r7, #28]
 8003dd2:	9301      	str	r3, [sp, #4]
 8003dd4:	8b3b      	ldrh	r3, [r7, #24]
 8003dd6:	9300      	str	r3, [sp, #0]
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	68b9      	ldr	r1, [r7, #8]
 8003dde:	f7ff fd49 	bl	8003874 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 8003de2:	4a04      	ldr	r2, [pc, #16]	; (8003df4 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	601a      	str	r2, [r3, #0]
    }
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	4618      	mov	r0, r3
 8003dec:	3710      	adds	r7, #16
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	0802b540 	.word	0x0802b540

08003df8 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b086      	sub	sp, #24
 8003dfc:	af02      	add	r7, sp, #8
 8003dfe:	60f8      	str	r0, [r7, #12]
 8003e00:	60b9      	str	r1, [r7, #8]
 8003e02:	607a      	str	r2, [r7, #4]
 8003e04:	603b      	str	r3, [r7, #0]
 8003e06:	68f8      	ldr	r0, [r7, #12]
 8003e08:	8bbb      	ldrh	r3, [r7, #28]
 8003e0a:	9301      	str	r3, [sp, #4]
 8003e0c:	8b3b      	ldrh	r3, [r7, #24]
 8003e0e:	9300      	str	r3, [sp, #0]
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	68b9      	ldr	r1, [r7, #8]
 8003e16:	f7ff ffd3 	bl	8003dc0 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8003e1a:	4a04      	ldr	r2, [pc, #16]	; (8003e2c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	601a      	str	r2, [r3, #0]
    }
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	4618      	mov	r0, r3
 8003e24:	3710      	adds	r7, #16
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	0802b1b8 	.word	0x0802b1b8

08003e30 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	4a04      	ldr	r2, [pc, #16]	; (8003e4c <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	601a      	str	r2, [r3, #0]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4618      	mov	r0, r3
 8003e42:	370c      	adds	r7, #12
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr
 8003e4c:	0802b1a0 	.word	0x0802b1a0

08003e50 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b082      	sub	sp, #8
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f7ff ffe8 	bl	8003e30 <_ZN8touchgfx15TouchControllerC1Ev>
 8003e60:	4a03      	ldr	r2, [pc, #12]	; (8003e70 <_ZN20STM32TouchControllerC1Ev+0x20>)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	601a      	str	r2, [r3, #0]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3708      	adds	r7, #8
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	0802b188 	.word	0x0802b188

08003e74 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 8003e74:	b590      	push	{r4, r7, lr}
 8003e76:	b085      	sub	sp, #20
 8003e78:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8003e7a:	f000 fd09 	bl	8004890 <_ZN14BitmapDatabase11getInstanceEv>
 8003e7e:	4604      	mov	r4, r0
 8003e80:	f000 fd10 	bl	80048a4 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8003e84:	4603      	mov	r3, r0
 8003e86:	4619      	mov	r1, r3
 8003e88:	2300      	movs	r3, #0
 8003e8a:	9300      	str	r3, [sp, #0]
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	2200      	movs	r2, #0
 8003e90:	4620      	mov	r0, r4
 8003e92:	f01b fdf1 	bl	801fa78 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 8003e96:	4809      	ldr	r0, [pc, #36]	; (8003ebc <touchgfx_init+0x48>)
 8003e98:	f7ff fb7c 	bl	8003594 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 8003e9c:	2000      	movs	r0, #0
 8003e9e:	f002 f977 	bl	8006190 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 8003ea2:	4807      	ldr	r0, [pc, #28]	; (8003ec0 <touchgfx_init+0x4c>)
 8003ea4:	f01b fca0 	bl	801f7e8 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 8003ea8:	f7ff febe 	bl	8003c28 <_ZN12FrontendHeap11getInstanceEv>
 8003eac:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8003eae:	4805      	ldr	r0, [pc, #20]	; (8003ec4 <touchgfx_init+0x50>)
 8003eb0:	f7fe fda8 	bl	8002a04 <_ZN11TouchGFXHAL10initializeEv>
}
 8003eb4:	bf00      	nop
 8003eb6:	370c      	adds	r7, #12
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd90      	pop	{r4, r7, pc}
 8003ebc:	24001a18 	.word	0x24001a18
 8003ec0:	2400000c 	.word	0x2400000c
 8003ec4:	24001a1c 	.word	0x24001a1c

08003ec8 <touchgfx_components_init>:

void touchgfx_components_init()
{
 8003ec8:	b480      	push	{r7}
 8003eca:	af00      	add	r7, sp, #0
}
 8003ecc:	bf00      	nop
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr
	...

08003ed8 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	af00      	add	r7, sp, #0
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 8003edc:	4802      	ldr	r0, [pc, #8]	; (8003ee8 <touchgfx_taskEntry+0x10>)
 8003ede:	f7fe fd9d 	bl	8002a1c <_ZN11TouchGFXHAL9taskEntryEv>
}
 8003ee2:	bf00      	nop
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	24001a1c 	.word	0x24001a1c

08003eec <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b082      	sub	sp, #8
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	4a10      	ldr	r2, [pc, #64]	; (8003f38 <_ZN12FrontendHeapD1Ev+0x4c>)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	601a      	str	r2, [r3, #0]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8003f00:	4618      	mov	r0, r3
 8003f02:	f7ff fe2d 	bl	8003b60 <_ZN19FrontendApplicationD1Ev>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f000 f827 	bl	8003f60 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	332c      	adds	r3, #44	; 0x2c
 8003f16:	4618      	mov	r0, r3
 8003f18:	f000 f844 	bl	8003fa4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	3314      	adds	r3, #20
 8003f20:	4618      	mov	r0, r3
 8003f22:	f000 f861 	bl	8003fe8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f7ff fea9 	bl	8003c80 <_ZN16FrontendHeapBaseD1Ev>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4618      	mov	r0, r3
 8003f32:	3708      	adds	r7, #8
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	0802b304 	.word	0x0802b304

08003f3c <_ZN12FrontendHeapD0Ev>:
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b082      	sub	sp, #8
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f7ff ffd1 	bl	8003eec <_ZN12FrontendHeapD1Ev>
 8003f4a:	f44f 7122 	mov.w	r1, #648	; 0x288
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f024 ffb1 	bl	8028eb6 <_ZdlPvj>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	4618      	mov	r0, r3
 8003f58:	3708      	adds	r7, #8
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
	...

08003f60 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b082      	sub	sp, #8
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	4a05      	ldr	r2, [pc, #20]	; (8003f80 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	601a      	str	r2, [r3, #0]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4618      	mov	r0, r3
 8003f72:	f015 fd96 	bl	8019aa2 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3708      	adds	r7, #8
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	0802b318 	.word	0x0802b318

08003f84 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b082      	sub	sp, #8
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f7ff ffe7 	bl	8003f60 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003f92:	2114      	movs	r1, #20
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f024 ff8e 	bl	8028eb6 <_ZdlPvj>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3708      	adds	r7, #8
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}

08003fa4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b082      	sub	sp, #8
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	4a05      	ldr	r2, [pc, #20]	; (8003fc4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	601a      	str	r2, [r3, #0]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f015 fd74 	bl	8019aa2 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3708      	adds	r7, #8
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	0802b34c 	.word	0x0802b34c

08003fc8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b082      	sub	sp, #8
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f7ff ffe7 	bl	8003fa4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003fd6:	21e8      	movs	r1, #232	; 0xe8
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f024 ff6c 	bl	8028eb6 <_ZdlPvj>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3708      	adds	r7, #8
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b082      	sub	sp, #8
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	4a05      	ldr	r2, [pc, #20]	; (8004008 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	601a      	str	r2, [r3, #0]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f015 fd52 	bl	8019aa2 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4618      	mov	r0, r3
 8004002:	3708      	adds	r7, #8
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}
 8004008:	0802b380 	.word	0x0802b380

0800400c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 800400c:	b580      	push	{r7, lr}
 800400e:	b082      	sub	sp, #8
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	f7ff ffe7 	bl	8003fe8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800401a:	2118      	movs	r1, #24
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f024 ff4a 	bl	8028eb6 <_ZdlPvj>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4618      	mov	r0, r3
 8004026:	3708      	adds	r7, #8
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}

0800402c <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800402c:	b580      	push	{r7, lr}
 800402e:	b082      	sub	sp, #8
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	4a05      	ldr	r2, [pc, #20]	; (800404c <_ZN23ApplicationFontProviderD1Ev+0x20>)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	601a      	str	r2, [r3, #0]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4618      	mov	r0, r3
 800403e:	f7ff fab9 	bl	80035b4 <_ZN8touchgfx12FontProviderD1Ev>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4618      	mov	r0, r3
 8004046:	3708      	adds	r7, #8
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}
 800404c:	0802b618 	.word	0x0802b618

08004050 <_ZN23ApplicationFontProviderD0Ev>:
 8004050:	b580      	push	{r7, lr}
 8004052:	b082      	sub	sp, #8
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f7ff ffe7 	bl	800402c <_ZN23ApplicationFontProviderD1Ev>
 800405e:	2104      	movs	r1, #4
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	f024 ff28 	bl	8028eb6 <_ZdlPvj>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4618      	mov	r0, r3
 800406a:	3708      	adds	r7, #8
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}

08004070 <_ZN8touchgfx8LCD24bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD24bpp : public LCD
 8004070:	b580      	push	{r7, lr}
 8004072:	b082      	sub	sp, #8
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	4a05      	ldr	r2, [pc, #20]	; (8004090 <_ZN8touchgfx8LCD24bppD1Ev+0x20>)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	601a      	str	r2, [r3, #0]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4618      	mov	r0, r3
 8004082:	f7ff fb59 	bl	8003738 <_ZN8touchgfx3LCDD1Ev>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4618      	mov	r0, r3
 800408a:	3708      	adds	r7, #8
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}
 8004090:	0802c0b4 	.word	0x0802c0b4

08004094 <_ZN8touchgfx8LCD24bppD0Ev>:
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f7ff ffe7 	bl	8004070 <_ZN8touchgfx8LCD24bppD1Ev>
 80040a2:	2164      	movs	r1, #100	; 0x64
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f024 ff06 	bl	8028eb6 <_ZdlPvj>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4618      	mov	r0, r3
 80040ae:	3708      	adds	r7, #8
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <_Z41__static_initialization_and_destruction_0ii>:
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b084      	sub	sp, #16
 80040b8:	af02      	add	r7, sp, #8
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6039      	str	r1, [r7, #0]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d119      	bne.n	80040f8 <_Z41__static_initialization_and_destruction_0ii+0x44>
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d114      	bne.n	80040f8 <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 80040ce:	4818      	ldr	r0, [pc, #96]	; (8004130 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80040d0:	f7ff febe 	bl	8003e50 <_ZN20STM32TouchControllerC1Ev>
static STM32DMA dma;
 80040d4:	4817      	ldr	r0, [pc, #92]	; (8004134 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80040d6:	f7fe ff37 	bl	8002f48 <_ZN8STM32DMAC1Ev>
static LCD24bpp display;
 80040da:	4817      	ldr	r0, [pc, #92]	; (8004138 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80040dc:	f01e fd26 	bl	8022b2c <_ZN8touchgfx8LCD24bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 80040e0:	f44f 7388 	mov.w	r3, #272	; 0x110
 80040e4:	9301      	str	r3, [sp, #4]
 80040e6:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80040ea:	9300      	str	r3, [sp, #0]
 80040ec:	4b10      	ldr	r3, [pc, #64]	; (8004130 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80040ee:	4a12      	ldr	r2, [pc, #72]	; (8004138 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80040f0:	4910      	ldr	r1, [pc, #64]	; (8004134 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80040f2:	4812      	ldr	r0, [pc, #72]	; (800413c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80040f4:	f7ff fe80 	bl	8003df8 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d113      	bne.n	8004126 <_Z41__static_initialization_and_destruction_0ii+0x72>
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004104:	4293      	cmp	r3, r2
 8004106:	d10e      	bne.n	8004126 <_Z41__static_initialization_and_destruction_0ii+0x72>
 8004108:	480c      	ldr	r0, [pc, #48]	; (800413c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800410a:	f7fe fd55 	bl	8002bb8 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 800410e:	480c      	ldr	r0, [pc, #48]	; (8004140 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8004110:	f7ff ff8c 	bl	800402c <_ZN23ApplicationFontProviderD1Ev>
static LCD24bpp display;
 8004114:	4808      	ldr	r0, [pc, #32]	; (8004138 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8004116:	f7ff ffab 	bl	8004070 <_ZN8touchgfx8LCD24bppD1Ev>
static STM32DMA dma;
 800411a:	4806      	ldr	r0, [pc, #24]	; (8004134 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800411c:	f7fe ff3e 	bl	8002f9c <_ZN8STM32DMAD1Ev>
static STM32TouchController tc;
 8004120:	4803      	ldr	r0, [pc, #12]	; (8004130 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8004122:	f7fe fa05 	bl	8002530 <_ZN20STM32TouchControllerD1Ev>
}
 8004126:	bf00      	nop
 8004128:	3708      	adds	r7, #8
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	24000c10 	.word	0x24000c10
 8004134:	24000c14 	.word	0x24000c14
 8004138:	240019b4 	.word	0x240019b4
 800413c:	24001a1c 	.word	0x24001a1c
 8004140:	2400000c 	.word	0x2400000c

08004144 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8004144:	b580      	push	{r7, lr}
 8004146:	b082      	sub	sp, #8
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	4a05      	ldr	r2, [pc, #20]	; (8004164 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	601a      	str	r2, [r3, #0]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4618      	mov	r0, r3
 8004156:	f7ff fb37 	bl	80037c8 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4618      	mov	r0, r3
 800415e:	3708      	adds	r7, #8
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}
 8004164:	0802b470 	.word	0x0802b470

08004168 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 8004168:	b580      	push	{r7, lr}
 800416a:	b082      	sub	sp, #8
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f7ff ffe7 	bl	8004144 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8004176:	2110      	movs	r1, #16
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f024 fe9c 	bl	8028eb6 <_ZdlPvj>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4618      	mov	r0, r3
 8004182:	3708      	adds	r7, #8
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8004190:	2301      	movs	r3, #1
    }
 8004192:	4618      	mov	r0, r3
 8004194:	370c      	adds	r7, #12
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr

0800419e <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 800419e:	b480      	push	{r7}
 80041a0:	b083      	sub	sp, #12
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 80041a6:	230c      	movs	r3, #12
    }
 80041a8:	4618      	mov	r0, r3
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	460b      	mov	r3, r1
 80041be:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 80041c0:	887a      	ldrh	r2, [r7, #2]
 80041c2:	4613      	mov	r3, r2
 80041c4:	005b      	lsls	r3, r3, #1
 80041c6:	4413      	add	r3, r2
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	3308      	adds	r3, #8
 80041cc:	687a      	ldr	r2, [r7, #4]
 80041ce:	4413      	add	r3, r2
    }
 80041d0:	4618      	mov	r0, r3
 80041d2:	370c      	adds	r7, #12
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr

080041dc <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	460b      	mov	r3, r1
 80041e6:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 80041e8:	887a      	ldrh	r2, [r7, #2]
 80041ea:	4613      	mov	r3, r2
 80041ec:	005b      	lsls	r3, r3, #1
 80041ee:	4413      	add	r3, r2
 80041f0:	009b      	lsls	r3, r3, #2
 80041f2:	3308      	adds	r3, #8
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	4413      	add	r3, r2
    }
 80041f8:	4618      	mov	r0, r3
 80041fa:	370c      	adds	r7, #12
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr

08004204 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8004204:	b480      	push	{r7}
 8004206:	b083      	sub	sp, #12
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 800420c:	2301      	movs	r3, #1
    }
 800420e:	4618      	mov	r0, r3
 8004210:	370c      	adds	r7, #12
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr

0800421a <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 800421a:	b480      	push	{r7}
 800421c:	b083      	sub	sp, #12
 800421e:	af00      	add	r7, sp, #0
 8004220:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8004222:	23e0      	movs	r3, #224	; 0xe0
    }
 8004224:	4618      	mov	r0, r3
 8004226:	370c      	adds	r7, #12
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr

08004230 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	460b      	mov	r3, r1
 800423a:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800423c:	887a      	ldrh	r2, [r7, #2]
 800423e:	4613      	mov	r3, r2
 8004240:	00db      	lsls	r3, r3, #3
 8004242:	1a9b      	subs	r3, r3, r2
 8004244:	015b      	lsls	r3, r3, #5
 8004246:	3308      	adds	r3, #8
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	4413      	add	r3, r2
    }
 800424c:	4618      	mov	r0, r3
 800424e:	370c      	adds	r7, #12
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr

08004258 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	460b      	mov	r3, r1
 8004262:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8004264:	887a      	ldrh	r2, [r7, #2]
 8004266:	4613      	mov	r3, r2
 8004268:	00db      	lsls	r3, r3, #3
 800426a:	1a9b      	subs	r3, r3, r2
 800426c:	015b      	lsls	r3, r3, #5
 800426e:	3308      	adds	r3, #8
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	4413      	add	r3, r2
    }
 8004274:	4618      	mov	r0, r3
 8004276:	370c      	adds	r7, #12
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr

08004280 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8004280:	b480      	push	{r7}
 8004282:	b083      	sub	sp, #12
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8004288:	2301      	movs	r3, #1
    }
 800428a:	4618      	mov	r0, r3
 800428c:	370c      	adds	r7, #12
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr

08004296 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8004296:	b480      	push	{r7}
 8004298:	b083      	sub	sp, #12
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 800429e:	2310      	movs	r3, #16
    }
 80042a0:	4618      	mov	r0, r3
 80042a2:	370c      	adds	r7, #12
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr

080042ac <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	460b      	mov	r3, r1
 80042b6:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80042b8:	887b      	ldrh	r3, [r7, #2]
 80042ba:	011b      	lsls	r3, r3, #4
 80042bc:	3308      	adds	r3, #8
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	4413      	add	r3, r2
    }
 80042c2:	4618      	mov	r0, r3
 80042c4:	370c      	adds	r7, #12
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr

080042ce <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 80042ce:	b480      	push	{r7}
 80042d0:	b083      	sub	sp, #12
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	6078      	str	r0, [r7, #4]
 80042d6:	460b      	mov	r3, r1
 80042d8:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80042da:	887b      	ldrh	r3, [r7, #2]
 80042dc:	011b      	lsls	r3, r3, #4
 80042de:	3308      	adds	r3, #8
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	4413      	add	r3, r2
    }
 80042e4:	4618      	mov	r0, r3
 80042e6:	370c      	adds	r7, #12
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr

080042f0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b082      	sub	sp, #8
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun)();
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	68d2      	ldr	r2, [r2, #12]
 8004300:	1052      	asrs	r2, r2, #1
 8004302:	1899      	adds	r1, r3, r2
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	f003 0301 	and.w	r3, r3, #1
 800430c:	2b00      	cmp	r3, #0
 800430e:	d102      	bne.n	8004316 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	e00a      	b.n	800432c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	68d2      	ldr	r2, [r2, #12]
 800431e:	1052      	asrs	r2, r2, #1
 8004320:	4413      	add	r3, r2
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	687a      	ldr	r2, [r7, #4]
 8004326:	6892      	ldr	r2, [r2, #8]
 8004328:	4413      	add	r3, r2
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4608      	mov	r0, r1
 800432e:	4798      	blx	r3
    }
 8004330:	bf00      	nop
 8004332:	3708      	adds	r7, #8
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}

08004338 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun != 0);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d010      	beq.n	800436a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d107      	bne.n	8004360 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	f003 0301 	and.w	r3, r3, #1
 8004358:	2b00      	cmp	r3, #0
 800435a:	d101      	bne.n	8004360 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800435c:	2301      	movs	r3, #1
 800435e:	e000      	b.n	8004362 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 8004360:	2300      	movs	r3, #0
 8004362:	2b01      	cmp	r3, #1
 8004364:	d001      	beq.n	800436a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8004366:	2301      	movs	r3, #1
 8004368:	e000      	b.n	800436c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 800436a:	2300      	movs	r3, #0
    }
 800436c:	4618      	mov	r0, r3
 800436e:	370c      	adds	r7, #12
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr

08004378 <_GLOBAL__sub_I_touchgfx_init>:
 8004378:	b580      	push	{r7, lr}
 800437a:	af00      	add	r7, sp, #0
 800437c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004380:	2001      	movs	r0, #1
 8004382:	f7ff fe97 	bl	80040b4 <_Z41__static_initialization_and_destruction_0ii>
 8004386:	bd80      	pop	{r7, pc}

08004388 <_GLOBAL__sub_D_touchgfx_init>:
 8004388:	b580      	push	{r7, lr}
 800438a:	af00      	add	r7, sp, #0
 800438c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004390:	2000      	movs	r0, #0
 8004392:	f7ff fe8f 	bl	80040b4 <_Z41__static_initialization_and_destruction_0ii>
 8004396:	bd80      	pop	{r7, pc}

08004398 <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 8004398:	b580      	push	{r7, lr}
 800439a:	b082      	sub	sp, #8
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	3320      	adds	r3, #32
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	4798      	blx	r3
    }
 80043ac:	bf00      	nop
 80043ae:	3708      	adds	r7, #8
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}

080043b4 <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 80043c2:	3301      	adds	r3, #1
 80043c4:	b2da      	uxtb	r2, r3
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
    }
 80043cc:	bf00      	nop
 80043ce:	370c      	adds	r7, #12
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr

080043d8 <__NVIC_EnableIRQ>:
{
 80043d8:	b480      	push	{r7}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
 80043de:	4603      	mov	r3, r0
 80043e0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80043e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	db0b      	blt.n	8004402 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80043ea:	88fb      	ldrh	r3, [r7, #6]
 80043ec:	f003 021f 	and.w	r2, r3, #31
 80043f0:	4907      	ldr	r1, [pc, #28]	; (8004410 <__NVIC_EnableIRQ+0x38>)
 80043f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80043f6:	095b      	lsrs	r3, r3, #5
 80043f8:	2001      	movs	r0, #1
 80043fa:	fa00 f202 	lsl.w	r2, r0, r2
 80043fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004402:	bf00      	nop
 8004404:	370c      	adds	r7, #12
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr
 800440e:	bf00      	nop
 8004410:	e000e100 	.word	0xe000e100

08004414 <__NVIC_DisableIRQ>:
{
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
 800441a:	4603      	mov	r3, r0
 800441c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800441e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004422:	2b00      	cmp	r3, #0
 8004424:	db12      	blt.n	800444c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004426:	88fb      	ldrh	r3, [r7, #6]
 8004428:	f003 021f 	and.w	r2, r3, #31
 800442c:	490a      	ldr	r1, [pc, #40]	; (8004458 <__NVIC_DisableIRQ+0x44>)
 800442e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004432:	095b      	lsrs	r3, r3, #5
 8004434:	2001      	movs	r0, #1
 8004436:	fa00 f202 	lsl.w	r2, r0, r2
 800443a:	3320      	adds	r3, #32
 800443c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004440:	f3bf 8f4f 	dsb	sy
}
 8004444:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004446:	f3bf 8f6f 	isb	sy
}
 800444a:	bf00      	nop
}
 800444c:	bf00      	nop
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr
 8004458:	e000e100 	.word	0xe000e100

0800445c <__NVIC_SetPriority>:
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	4603      	mov	r3, r0
 8004464:	6039      	str	r1, [r7, #0]
 8004466:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004468:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800446c:	2b00      	cmp	r3, #0
 800446e:	db0a      	blt.n	8004486 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	b2da      	uxtb	r2, r3
 8004474:	490c      	ldr	r1, [pc, #48]	; (80044a8 <__NVIC_SetPriority+0x4c>)
 8004476:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800447a:	0112      	lsls	r2, r2, #4
 800447c:	b2d2      	uxtb	r2, r2
 800447e:	440b      	add	r3, r1
 8004480:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004484:	e00a      	b.n	800449c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	b2da      	uxtb	r2, r3
 800448a:	4908      	ldr	r1, [pc, #32]	; (80044ac <__NVIC_SetPriority+0x50>)
 800448c:	88fb      	ldrh	r3, [r7, #6]
 800448e:	f003 030f 	and.w	r3, r3, #15
 8004492:	3b04      	subs	r3, #4
 8004494:	0112      	lsls	r2, r2, #4
 8004496:	b2d2      	uxtb	r2, r2
 8004498:	440b      	add	r3, r1
 800449a:	761a      	strb	r2, [r3, #24]
}
 800449c:	bf00      	nop
 800449e:	370c      	adds	r7, #12
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr
 80044a8:	e000e100 	.word	0xe000e100
 80044ac:	e000ed00 	.word	0xe000ed00

080044b0 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
static uint16_t lcd_int_active_line;
static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 80044b0:	b5b0      	push	{r4, r5, r7, lr}
 80044b2:	b082      	sub	sp, #8
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	4618      	mov	r0, r3
 80044bc:	f015 fde9 	bl	801a092 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 80044c0:	687d      	ldr	r5, [r7, #4]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	3364      	adds	r3, #100	; 0x64
 80044c8:	681c      	ldr	r4, [r3, #0]
 80044ca:	f018 fd5d 	bl	801cf88 <_ZN8touchgfx11Application11getInstanceEv>
 80044ce:	4603      	mov	r3, r0
 80044d0:	4619      	mov	r1, r3
 80044d2:	4628      	mov	r0, r5
 80044d4:	47a0      	blx	r4
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	3388      	adds	r3, #136	; 0x88
 80044de:	681c      	ldr	r4, [r3, #0]
 80044e0:	4a03      	ldr	r2, [pc, #12]	; (80044f0 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x40>)
 80044e2:	2300      	movs	r3, #0
 80044e4:	4903      	ldr	r1, [pc, #12]	; (80044f4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 80044e6:	47a0      	blx	r4
}
 80044e8:	bf00      	nop
 80044ea:	3708      	adds	r7, #8
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bdb0      	pop	{r4, r5, r7, pc}
 80044f0:	2409fa00 	.word	0x2409fa00
 80044f4:	24040000 	.word	0x24040000

080044f8 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b082      	sub	sp, #8
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 8004500:	2109      	movs	r1, #9
 8004502:	205a      	movs	r0, #90	; 0x5a
 8004504:	f7ff ffaa 	bl	800445c <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 8004508:	2109      	movs	r1, #9
 800450a:	2058      	movs	r0, #88	; 0x58
 800450c:	f7ff ffa6 	bl	800445c <__NVIC_SetPriority>
}
 8004510:	bf00      	nop
 8004512:	3708      	adds	r7, #8
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}

08004518 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 8004520:	205a      	movs	r0, #90	; 0x5a
 8004522:	f7ff ff59 	bl	80043d8 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 8004526:	2058      	movs	r0, #88	; 0x58
 8004528:	f7ff ff56 	bl	80043d8 <__NVIC_EnableIRQ>
}
 800452c:	bf00      	nop
 800452e:	3708      	adds	r7, #8
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}

08004534 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b082      	sub	sp, #8
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 800453c:	205a      	movs	r0, #90	; 0x5a
 800453e:	f7ff ff69 	bl	8004414 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 8004542:	2058      	movs	r0, #88	; 0x58
 8004544:	f7ff ff66 	bl	8004414 <__NVIC_DisableIRQ>
}
 8004548:	bf00      	nop
 800454a:	3708      	adds	r7, #8
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}

08004550 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8004550:	b480      	push	{r7}
 8004552:	b083      	sub	sp, #12
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8004558:	4b11      	ldr	r3, [pc, #68]	; (80045a0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	b29b      	uxth	r3, r3
 800455e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004562:	b29b      	uxth	r3, r3
 8004564:	3b01      	subs	r3, #1
 8004566:	b29a      	uxth	r2, r3
 8004568:	4b0e      	ldr	r3, [pc, #56]	; (80045a4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 800456a:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 800456c:	4b0c      	ldr	r3, [pc, #48]	; (80045a0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800456e:	691b      	ldr	r3, [r3, #16]
 8004570:	b29b      	uxth	r3, r3
 8004572:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004576:	b29b      	uxth	r3, r3
 8004578:	3b01      	subs	r3, #1
 800457a:	b29a      	uxth	r2, r3
 800457c:	4b0a      	ldr	r3, [pc, #40]	; (80045a8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 800457e:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8004580:	4b08      	ldr	r3, [pc, #32]	; (80045a4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8004582:	881a      	ldrh	r2, [r3, #0]
 8004584:	4b06      	ldr	r3, [pc, #24]	; (80045a0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8004586:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8004588:	4b05      	ldr	r3, [pc, #20]	; (80045a0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800458a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800458c:	4a04      	ldr	r2, [pc, #16]	; (80045a0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800458e:	f043 0301 	orr.w	r3, r3, #1
 8004592:	6353      	str	r3, [r2, #52]	; 0x34
}
 8004594:	bf00      	nop
 8004596:	370c      	adds	r7, #12
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr
 80045a0:	50001000 	.word	0x50001000
 80045a4:	24001a98 	.word	0x24001a98
 80045a8:	24001a9a 	.word	0x24001a9a

080045ac <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b082      	sub	sp, #8
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4618      	mov	r0, r3
 80045b8:	f015 fd52 	bl	801a060 <_ZN8touchgfx3HAL10beginFrameEv>
 80045bc:	4603      	mov	r3, r0
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3708      	adds	r7, #8
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}

080045c6 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 80045c6:	b580      	push	{r7, lr}
 80045c8:	b082      	sub	sp, #8
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	6078      	str	r0, [r7, #4]
    HAL::endFrame();
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	4618      	mov	r0, r3
 80045d2:	f015 fd51 	bl	801a078 <_ZN8touchgfx3HAL8endFrameEv>
}
 80045d6:	bf00      	nop
 80045d8:	3708      	adds	r7, #8
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
	...

080045e0 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 80045e0:	b480      	push	{r7}
 80045e2:	b083      	sub	sp, #12
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 80045e8:	4b03      	ldr	r3, [pc, #12]	; (80045f8 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 80045ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	370c      	adds	r7, #12
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr
 80045f8:	50001084 	.word	0x50001084

080045fc <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8004606:	4a06      	ldr	r2, [pc, #24]	; (8004620 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 800460c:	4b05      	ldr	r3, [pc, #20]	; (8004624 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 800460e:	2201      	movs	r2, #1
 8004610:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004612:	bf00      	nop
 8004614:	370c      	adds	r7, #12
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr
 800461e:	bf00      	nop
 8004620:	50001084 	.word	0x50001084
 8004624:	50001000 	.word	0x50001000

08004628 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b082      	sub	sp, #8
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6839      	ldr	r1, [r7, #0]
 8004636:	4618      	mov	r0, r3
 8004638:	f015 fcdc 	bl	8019ff4 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 800463c:	bf00      	nop
 800463e:	3708      	adds	r7, #8
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}

08004644 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b084      	sub	sp, #16
 8004648:	af00      	add	r7, sp, #0
 800464a:	60f8      	str	r0, [r7, #12]
 800464c:	60b9      	str	r1, [r7, #8]
 800464e:	607a      	str	r2, [r7, #4]
 8004650:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 8004652:	68f8      	ldr	r0, [r7, #12]
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	68b9      	ldr	r1, [r7, #8]
 800465a:	f015 fe3c 	bl	801a2d6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 800465e:	4603      	mov	r3, r0
}
 8004660:	4618      	mov	r0, r3
 8004662:	3710      	adds	r7, #16
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}

08004668 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:

void TouchGFXGeneratedHAL::InvalidateCache()
{
 8004668:	b480      	push	{r7}
 800466a:	b087      	sub	sp, #28
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8004670:	4b25      	ldr	r3, [pc, #148]	; (8004708 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa0>)
 8004672:	695b      	ldr	r3, [r3, #20]
 8004674:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004678:	2b00      	cmp	r3, #0
 800467a:	bf14      	ite	ne
 800467c:	2301      	movne	r3, #1
 800467e:	2300      	moveq	r3, #0
 8004680:	b2db      	uxtb	r3, r3
 8004682:	2b00      	cmp	r3, #0
 8004684:	d03a      	beq.n	80046fc <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x94>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8004686:	4b20      	ldr	r3, [pc, #128]	; (8004708 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa0>)
 8004688:	2200      	movs	r2, #0
 800468a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800468e:	f3bf 8f4f 	dsb	sy
}
 8004692:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8004694:	4b1c      	ldr	r3, [pc, #112]	; (8004708 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa0>)
 8004696:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800469a:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	0b5b      	lsrs	r3, r3, #13
 80046a0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80046a4:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	08db      	lsrs	r3, r3, #3
 80046aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80046ae:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	015a      	lsls	r2, r3, #5
 80046b4:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80046b8:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 80046ba:	68fa      	ldr	r2, [r7, #12]
 80046bc:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80046be:	4912      	ldr	r1, [pc, #72]	; (8004708 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa0>)
 80046c0:	4313      	orrs	r3, r2
 80046c2:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	1e5a      	subs	r2, r3, #1
 80046ca:	60fa      	str	r2, [r7, #12]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	bf14      	ite	ne
 80046d0:	2301      	movne	r3, #1
 80046d2:	2300      	moveq	r3, #0
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d1ea      	bne.n	80046b0 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x48>
    } while(sets-- != 0U);
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	1e5a      	subs	r2, r3, #1
 80046de:	613a      	str	r2, [r7, #16]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	bf14      	ite	ne
 80046e4:	2301      	movne	r3, #1
 80046e6:	2300      	moveq	r3, #0
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d1db      	bne.n	80046a6 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x3e>
  __ASM volatile ("dsb 0xF":::"memory");
 80046ee:	f3bf 8f4f 	dsb	sy
}
 80046f2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80046f4:	f3bf 8f6f 	isb	sy
}
 80046f8:	bf00      	nop
}
 80046fa:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 80046fc:	bf00      	nop
 80046fe:	371c      	adds	r7, #28
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr
 8004708:	e000ed00 	.word	0xe000ed00

0800470c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:

void TouchGFXGeneratedHAL::FlushCache()
{
 800470c:	b480      	push	{r7}
 800470e:	b087      	sub	sp, #28
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8004714:	4b25      	ldr	r3, [pc, #148]	; (80047ac <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa0>)
 8004716:	695b      	ldr	r3, [r3, #20]
 8004718:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800471c:	2b00      	cmp	r3, #0
 800471e:	bf14      	ite	ne
 8004720:	2301      	movne	r3, #1
 8004722:	2300      	moveq	r3, #0
 8004724:	b2db      	uxtb	r3, r3
 8004726:	2b00      	cmp	r3, #0
 8004728:	d03a      	beq.n	80047a0 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x94>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800472a:	4b20      	ldr	r3, [pc, #128]	; (80047ac <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa0>)
 800472c:	2200      	movs	r2, #0
 800472e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8004732:	f3bf 8f4f 	dsb	sy
}
 8004736:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8004738:	4b1c      	ldr	r3, [pc, #112]	; (80047ac <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa0>)
 800473a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800473e:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	0b5b      	lsrs	r3, r3, #13
 8004744:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004748:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	08db      	lsrs	r3, r3, #3
 800474e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004752:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	015a      	lsls	r2, r3, #5
 8004758:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800475c:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 800475e:	68fa      	ldr	r2, [r7, #12]
 8004760:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8004762:	4912      	ldr	r1, [pc, #72]	; (80047ac <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa0>)
 8004764:	4313      	orrs	r3, r2
 8004766:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	1e5a      	subs	r2, r3, #1
 800476e:	60fa      	str	r2, [r7, #12]
 8004770:	2b00      	cmp	r3, #0
 8004772:	bf14      	ite	ne
 8004774:	2301      	movne	r3, #1
 8004776:	2300      	moveq	r3, #0
 8004778:	b2db      	uxtb	r3, r3
 800477a:	2b00      	cmp	r3, #0
 800477c:	d1ea      	bne.n	8004754 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x48>
    } while(sets-- != 0U);
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	1e5a      	subs	r2, r3, #1
 8004782:	613a      	str	r2, [r7, #16]
 8004784:	2b00      	cmp	r3, #0
 8004786:	bf14      	ite	ne
 8004788:	2301      	movne	r3, #1
 800478a:	2300      	moveq	r3, #0
 800478c:	b2db      	uxtb	r3, r3
 800478e:	2b00      	cmp	r3, #0
 8004790:	d1db      	bne.n	800474a <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x3e>
  __ASM volatile ("dsb 0xF":::"memory");
 8004792:	f3bf 8f4f 	dsb	sy
}
 8004796:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004798:	f3bf 8f6f 	isb	sy
}
 800479c:	bf00      	nop
}
 800479e:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 80047a0:	bf00      	nop
 80047a2:	371c      	adds	r7, #28
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr
 80047ac:	e000ed00 	.word	0xe000ed00

080047b0 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b082      	sub	sp, #8
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
        if (!HAL::getInstance())
 80047b8:	f7fe fb8c 	bl	8002ed4 <_ZN8touchgfx3HAL11getInstanceEv>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	bf0c      	ite	eq
 80047c2:	2301      	moveq	r3, #1
 80047c4:	2300      	movne	r3, #0
 80047c6:	b2db      	uxtb	r3, r3
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d132      	bne.n	8004832 <HAL_LTDC_LineEventCallback+0x82>
        {
            return;
        }

        if (LTDC->LIPCR == lcd_int_active_line)
 80047cc:	4b1b      	ldr	r3, [pc, #108]	; (800483c <HAL_LTDC_LineEventCallback+0x8c>)
 80047ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d0:	4a1b      	ldr	r2, [pc, #108]	; (8004840 <HAL_LTDC_LineEventCallback+0x90>)
 80047d2:	8812      	ldrh	r2, [r2, #0]
 80047d4:	4293      	cmp	r3, r2
 80047d6:	bf0c      	ite	eq
 80047d8:	2301      	moveq	r3, #1
 80047da:	2300      	movne	r3, #0
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d017      	beq.n	8004812 <HAL_LTDC_LineEventCallback+0x62>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 80047e2:	4b18      	ldr	r3, [pc, #96]	; (8004844 <HAL_LTDC_LineEventCallback+0x94>)
 80047e4:	881b      	ldrh	r3, [r3, #0]
 80047e6:	4619      	mov	r1, r3
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f006 fca1 	bl	800b130 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 80047ee:	f7fe fb71 	bl	8002ed4 <_ZN8touchgfx3HAL11getInstanceEv>
 80047f2:	4603      	mov	r3, r0
 80047f4:	4618      	mov	r0, r3
 80047f6:	f7ff fddd 	bl	80043b4 <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 80047fa:	f7fe fa65 	bl	8002cc8 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 80047fe:	f7fe fb69 	bl	8002ed4 <_ZN8touchgfx3HAL11getInstanceEv>
 8004802:	4603      	mov	r3, r0
 8004804:	4618      	mov	r0, r3
 8004806:	f016 f991 	bl	801ab2c <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 800480a:	2000      	movs	r0, #0
 800480c:	f7fd feba 	bl	8002584 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8004810:	e010      	b.n	8004834 <HAL_LTDC_LineEventCallback+0x84>
        }
        else
        {
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8004812:	4b0b      	ldr	r3, [pc, #44]	; (8004840 <HAL_LTDC_LineEventCallback+0x90>)
 8004814:	881b      	ldrh	r3, [r3, #0]
 8004816:	4619      	mov	r1, r3
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f006 fc89 	bl	800b130 <HAL_LTDC_ProgramLineEvent>

            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
 800481e:	f7fe fb59 	bl	8002ed4 <_ZN8touchgfx3HAL11getInstanceEv>
 8004822:	4603      	mov	r3, r0
 8004824:	4618      	mov	r0, r3
 8004826:	f7ff fdb7 	bl	8004398 <_ZN8touchgfx3HAL17frontPorchEnteredEv>
            GPIO::clear(GPIO::VSYNC_FREQ);
 800482a:	2000      	movs	r0, #0
 800482c:	f7fd fee4 	bl	80025f8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8004830:	e000      	b.n	8004834 <HAL_LTDC_LineEventCallback+0x84>
            return;
 8004832:	bf00      	nop
        }
    }
 8004834:	3708      	adds	r7, #8
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
 800483a:	bf00      	nop
 800483c:	50001000 	.word	0x50001000
 8004840:	24001a98 	.word	0x24001a98
 8004844:	24001a9a 	.word	0x24001a9a

08004848 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b082      	sub	sp, #8
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	460b      	mov	r3, r1
 8004852:	807b      	strh	r3, [r7, #2]
    switch (typography)
 8004854:	887b      	ldrh	r3, [r7, #2]
 8004856:	2b02      	cmp	r3, #2
 8004858:	d010      	beq.n	800487c <_ZN23ApplicationFontProvider7getFontEt+0x34>
 800485a:	2b02      	cmp	r3, #2
 800485c:	dc13      	bgt.n	8004886 <_ZN23ApplicationFontProvider7getFontEt+0x3e>
 800485e:	2b00      	cmp	r3, #0
 8004860:	d002      	beq.n	8004868 <_ZN23ApplicationFontProvider7getFontEt+0x20>
 8004862:	2b01      	cmp	r3, #1
 8004864:	d005      	beq.n	8004872 <_ZN23ApplicationFontProvider7getFontEt+0x2a>
 8004866:	e00e      	b.n	8004886 <_ZN23ApplicationFontProvider7getFontEt+0x3e>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8004868:	f001 fd0a 	bl	8006280 <_ZN17TypedTextDatabase8getFontsEv>
 800486c:	4603      	mov	r3, r0
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	e00a      	b.n	8004888 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8004872:	f001 fd05 	bl	8006280 <_ZN17TypedTextDatabase8getFontsEv>
 8004876:	4603      	mov	r3, r0
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	e005      	b.n	8004888 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800487c:	f001 fd00 	bl	8006280 <_ZN17TypedTextDatabase8getFontsEv>
 8004880:	4603      	mov	r3, r0
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	e000      	b.n	8004888 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    default:
        return 0;
 8004886:	2300      	movs	r3, #0
    }
}
 8004888:	4618      	mov	r0, r3
 800488a:	3708      	adds	r7, #8
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}

08004890 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 8004890:	b480      	push	{r7}
 8004892:	af00      	add	r7, sp, #0
    return bitmap_database;
 8004894:	4b02      	ldr	r3, [pc, #8]	; (80048a0 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 8004896:	4618      	mov	r0, r3
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr
 80048a0:	0802b624 	.word	0x0802b624

080048a4 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 80048a4:	b480      	push	{r7}
 80048a6:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 80048a8:	2301      	movs	r3, #1
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr

080048b4 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
    {
 80048bc:	4a04      	ldr	r2, [pc, #16]	; (80048d0 <_ZN8touchgfx4FontD1Ev+0x1c>)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	601a      	str	r2, [r3, #0]
    }
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	4618      	mov	r0, r3
 80048c6:	370c      	adds	r7, #12
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr
 80048d0:	0802b7c8 	.word	0x0802b7c8

080048d4 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b082      	sub	sp, #8
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
    }
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f7ff ffe9 	bl	80048b4 <_ZN8touchgfx4FontD1Ev>
 80048e2:	2114      	movs	r1, #20
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f024 fae6 	bl	8028eb6 <_ZdlPvj>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4618      	mov	r0, r3
 80048ee:	3708      	adds	r7, #8
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 80048f4:	b590      	push	{r4, r7, lr}
 80048f6:	b087      	sub	sp, #28
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	460b      	mov	r3, r1
 80048fe:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 8004900:	887b      	ldrh	r3, [r7, #2]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d101      	bne.n	800490a <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 8004906:	2300      	movs	r3, #0
 8004908:	e010      	b.n	800492c <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 800490a:	2300      	movs	r3, #0
 800490c:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800490e:	2300      	movs	r3, #0
 8004910:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	3308      	adds	r3, #8
 8004918:	681c      	ldr	r4, [r3, #0]
 800491a:	f107 030f 	add.w	r3, r7, #15
 800491e:	f107 0210 	add.w	r2, r7, #16
 8004922:	8879      	ldrh	r1, [r7, #2]
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	47a0      	blx	r4
 8004928:	6178      	str	r0, [r7, #20]
        return glyph;
 800492a:	697b      	ldr	r3, [r7, #20]
    }
 800492c:	4618      	mov	r0, r3
 800492e:	371c      	adds	r7, #28
 8004930:	46bd      	mov	sp, r7
 8004932:	bd90      	pop	{r4, r7, pc}

08004934 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	89db      	ldrh	r3, [r3, #14]
    }
 8004940:	4618      	mov	r0, r3
 8004942:	370c      	adds	r7, #12
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr

0800494c <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 800494c:	b480      	push	{r7}
 800494e:	b083      	sub	sp, #12
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	8a1b      	ldrh	r3, [r3, #16]
    }
 8004958:	4618      	mov	r0, r3
 800495a:	370c      	adds	r7, #12
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr

08004964 <_ZNK8touchgfx4Font11getBaselineEv>:
     * @return The baseline position.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
 8004964:	b480      	push	{r7}
 8004966:	b083      	sub	sp, #12
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
    {
        return baselineHeight;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	88db      	ldrh	r3, [r3, #6]
    }
 8004970:	4618      	mov	r0, r3
 8004972:	370c      	adds	r7, #12
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr

0800497c <_ZNK8touchgfx4Font9getHeightEv>:
     * Returns the height of a font. The font may exceed the top by getPixelsAboveTop() or the
     * bottom by getPixelsBelowBottom.
     *
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
 800497c:	b480      	push	{r7}
 800497e:	b083      	sub	sp, #12
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	889b      	ldrh	r3, [r3, #4]
    }
 8004988:	4618      	mov	r0, r3
 800498a:	370c      	adds	r7, #12
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr

08004994 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 8004994:	b480      	push	{r7}
 8004996:	b083      	sub	sp, #12
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	7a9b      	ldrb	r3, [r3, #10]
 80049a0:	f3c3 0306 	ubfx	r3, r3, #0, #7
 80049a4:	b2db      	uxtb	r3, r3
    }
 80049a6:	4618      	mov	r0, r3
 80049a8:	370c      	adds	r7, #12
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr

080049b2 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 80049b2:	b480      	push	{r7}
 80049b4:	b083      	sub	sp, #12
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	7a9b      	ldrb	r3, [r3, #10]
 80049be:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80049c2:	b2db      	uxtb	r3, r3
    }
 80049c4:	4618      	mov	r0, r3
 80049c6:	370c      	adds	r7, #12
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr

080049d0 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b082      	sub	sp, #8
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	4a05      	ldr	r2, [pc, #20]	; (80049f0 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	601a      	str	r2, [r3, #0]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4618      	mov	r0, r3
 80049e2:	f7ff ff67 	bl	80048b4 <_ZN8touchgfx4FontD1Ev>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4618      	mov	r0, r3
 80049ea:	3708      	adds	r7, #8
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}
 80049f0:	0802be0c 	.word	0x0802be0c

080049f4 <_ZN8touchgfx9ConstFontD0Ev>:
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b082      	sub	sp, #8
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	f7ff ffe7 	bl	80049d0 <_ZN8touchgfx9ConstFontD1Ev>
 8004a02:	211c      	movs	r1, #28
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	f024 fa56 	bl	8028eb6 <_ZdlPvj>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3708      	adds	r7, #8
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}

08004a14 <_ZN8touchgfx13GeneratedFontD1Ev>:

#include <touchgfx/ConstFont.hpp>

namespace touchgfx
{
class GeneratedFont : public ConstFont
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b082      	sub	sp, #8
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	4a05      	ldr	r2, [pc, #20]	; (8004a34 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	601a      	str	r2, [r3, #0]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4618      	mov	r0, r3
 8004a26:	f7ff ffd3 	bl	80049d0 <_ZN8touchgfx9ConstFontD1Ev>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3708      	adds	r7, #8
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	0802b698 	.word	0x0802b698

08004a38 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b082      	sub	sp, #8
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f7ff ffe7 	bl	8004a14 <_ZN8touchgfx13GeneratedFontD1Ev>
 8004a46:	212c      	movs	r1, #44	; 0x2c
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f024 fa34 	bl	8028eb6 <_ZdlPvj>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4618      	mov	r0, r3
 8004a52:	3708      	adds	r7, #8
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}

08004a58 <_ZN8touchgfx9TypedTextD1Ev>:
    virtual ~TypedText()
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
    {
 8004a60:	4a04      	ldr	r2, [pc, #16]	; (8004a74 <_ZN8touchgfx9TypedTextD1Ev+0x1c>)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	601a      	str	r2, [r3, #0]
    }
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	4618      	mov	r0, r3
 8004a6a:	370c      	adds	r7, #12
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr
 8004a74:	0802b640 	.word	0x0802b640

08004a78 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b082      	sub	sp, #8
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
    }
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f7ff ffe9 	bl	8004a58 <_ZN8touchgfx9TypedTextD1Ev>
 8004a86:	2108      	movs	r1, #8
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f024 fa14 	bl	8028eb6 <_ZdlPvj>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	4618      	mov	r0, r3
 8004a92:	3708      	adds	r7, #8
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}

08004a98 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8004a98:	b480      	push	{r7}
 8004a9a:	b083      	sub	sp, #12
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	6039      	str	r1, [r7, #0]
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	370c      	adds	r7, #12
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr

08004ab0 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
        timerWidgets.add(w);
    }

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b082      	sub	sp, #8
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
    {
        timerWidgets.clear();
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	3304      	adds	r3, #4
 8004abc:	4618      	mov	r0, r3
 8004abe:	f018 fa88 	bl	801cfd2 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    }
 8004ac2:	bf00      	nop
 8004ac4:	3708      	adds	r7, #8
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
	...

08004acc <_ZN8touchgfx3HAL3lcdEv>:
    static LCD& lcd()
 8004acc:	b480      	push	{r7}
 8004ace:	af00      	add	r7, sp, #0
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8004ad0:	4b0b      	ldr	r3, [pc, #44]	; (8004b00 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d008      	beq.n	8004aee <_ZN8touchgfx3HAL3lcdEv+0x22>
 8004adc:	4b08      	ldr	r3, [pc, #32]	; (8004b00 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d003      	beq.n	8004aee <_ZN8touchgfx3HAL3lcdEv+0x22>
            return *instance->auxiliaryLCD;
 8004ae6:	4b06      	ldr	r3, [pc, #24]	; (8004b00 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aec:	e002      	b.n	8004af4 <_ZN8touchgfx3HAL3lcdEv+0x28>
        return instance->lcdRef;
 8004aee:	4b04      	ldr	r3, [pc, #16]	; (8004b00 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	689b      	ldr	r3, [r3, #8]
    }
 8004af4:	4618      	mov	r0, r3
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr
 8004afe:	bf00      	nop
 8004b00:	24006fec 	.word	0x24006fec

08004b04 <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 8004b04:	b480      	push	{r7}
 8004b06:	b083      	sub	sp, #12
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 8004b0c:	4a07      	ldr	r2, [pc, #28]	; (8004b2c <_ZN8touchgfx10TransitionC1Ev+0x28>)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	601a      	str	r2, [r3, #0]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	605a      	str	r2, [r3, #4]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	721a      	strb	r2, [r3, #8]
    {
    }
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4618      	mov	r0, r3
 8004b22:	370c      	adds	r7, #12
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr
 8004b2c:	0802b674 	.word	0x0802b674

08004b30 <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 8004b30:	b480      	push	{r7}
 8004b32:	b083      	sub	sp, #12
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
    {
 8004b38:	4a04      	ldr	r2, [pc, #16]	; (8004b4c <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	601a      	str	r2, [r3, #0]
    }
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4618      	mov	r0, r3
 8004b42:	370c      	adds	r7, #12
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr
 8004b4c:	0802b674 	.word	0x0802b674

08004b50 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b082      	sub	sp, #8
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
    }
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f7ff ffe9 	bl	8004b30 <_ZN8touchgfx10TransitionD1Ev>
 8004b5e:	210c      	movs	r1, #12
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f024 f9a8 	bl	8028eb6 <_ZdlPvj>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3708      	adds	r7, #8
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 8004b70:	b480      	push	{r7}
 8004b72:	b083      	sub	sp, #12
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
    {
    }
 8004b78:	bf00      	nop
 8004b7a:	370c      	adds	r7, #12
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr

08004b84 <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 8004b84:	b480      	push	{r7}
 8004b86:	b083      	sub	sp, #12
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
    {
    }
 8004b8c:	bf00      	nop
 8004b8e:	370c      	adds	r7, #12
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr

08004b98 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 8004b98:	b480      	push	{r7}
 8004b9a:	b083      	sub	sp, #12
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
    {
    }
 8004ba0:	bf00      	nop
 8004ba2:	370c      	adds	r7, #12
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr

08004bac <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b082      	sub	sp, #8
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->invalidate();
 8004bb4:	f018 f9e8 	bl	801cf88 <_ZN8touchgfx11Application11getInstanceEv>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	323c      	adds	r2, #60	; 0x3c
 8004bbe:	6812      	ldr	r2, [r2, #0]
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	4790      	blx	r2
    }
 8004bc4:	bf00      	nop
 8004bc6:	3708      	adds	r7, #8
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 8004bcc:	b480      	push	{r7}
 8004bce:	b083      	sub	sp, #12
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	683a      	ldr	r2, [r7, #0]
 8004bda:	605a      	str	r2, [r3, #4]
    }
 8004bdc:	bf00      	nop
 8004bde:	370c      	adds	r7, #12
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr

08004be8 <_ZN8touchgfx14MVPApplicationC1Ev>:
    MVPApplication()
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b082      	sub	sp, #8
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
          pendingScreenTransitionCallback(0)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f018 fa8e 	bl	801d114 <_ZN8touchgfx11ApplicationC1Ev>
 8004bf8:	4a09      	ldr	r2, [pc, #36]	; (8004c20 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	601a      	str	r2, [r3, #0]
        : currentPresenter(0),
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
          pendingScreenTransitionCallback(0)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
        instance = this;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	4a04      	ldr	r2, [pc, #16]	; (8004c24 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 8004c12:	6013      	str	r3, [r2, #0]
    }
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	4618      	mov	r0, r3
 8004c18:	3708      	adds	r7, #8
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop
 8004c20:	0802b488 	.word	0x0802b488
 8004c24:	24007038 	.word	0x24007038

08004c28 <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 8004c28:	b480      	push	{r7}
 8004c2a:	b083      	sub	sp, #12
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	683a      	ldr	r2, [r7, #0]
 8004c36:	601a      	str	r2, [r3, #0]
    }
 8004c38:	bf00      	nop
 8004c3a:	370c      	adds	r7, #12
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr

08004c44 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
    {
        done = true;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	721a      	strb	r2, [r3, #8]
    }
 8004c52:	bf00      	nop
 8004c54:	370c      	adds	r7, #12
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr

08004c5e <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 8004c5e:	b480      	push	{r7}
 8004c60:	b083      	sub	sp, #12
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	6078      	str	r0, [r7, #4]
 8004c66:	6039      	str	r1, [r7, #0]
    {
        model = m;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	683a      	ldr	r2, [r7, #0]
 8004c6c:	605a      	str	r2, [r3, #4]
    }
 8004c6e:	bf00      	nop
 8004c70:	370c      	adds	r7, #12
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr
	...

08004c7c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	60b9      	str	r1, [r7, #8]
 8004c86:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f7ff ffac 	bl	8004be8 <_ZN8touchgfx14MVPApplicationC1Ev>
 8004c90:	4a16      	ldr	r2, [pc, #88]	; (8004cec <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x70>)
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	601a      	str	r2, [r3, #0]
      transitionCallback(),
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f000 f8a5 	bl	8004dec <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
      frontendHeap(heap),
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
      model(m)
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	68ba      	ldr	r2, [r7, #8]
 8004cae:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8004cb2:	f7fe f90f 	bl	8002ed4 <_ZN8touchgfx3HAL11getInstanceEv>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	3208      	adds	r2, #8
 8004cbc:	6812      	ldr	r2, [r2, #0]
 8004cbe:	2100      	movs	r1, #0
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	4790      	blx	r2
    touchgfx::Texts::setLanguage(GB);
 8004cc4:	2000      	movs	r0, #0
 8004cc6:	f001 fa63 	bl	8006190 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 8004cca:	f7ff feff 	bl	8004acc <_ZN8touchgfx3HAL3lcdEv>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f01f f810 	bl	8023cf6 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableDecompressorL8_All();
 8004cd6:	f7ff fef9 	bl	8004acc <_ZN8touchgfx3HAL3lcdEv>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f01f f881 	bl	8023de4 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_AllEv>
}
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3710      	adds	r7, #16
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}
 8004cec:	0802b41c 	.word	0x0802b41c

08004cf0 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	6039      	str	r1, [r7, #0]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	370c      	adds	r7, #12
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr

08004d08 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b082      	sub	sp, #8
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	683a      	ldr	r2, [r7, #0]
 8004d16:	4611      	mov	r1, r2
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f7ff ffe9 	bl	8004cf0 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	685a      	ldr	r2, [r3, #4]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	605a      	str	r2, [r3, #4]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	683a      	ldr	r2, [r7, #0]
 8004d2a:	3308      	adds	r3, #8
 8004d2c:	3208      	adds	r2, #8
 8004d2e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004d32:	e883 0003 	stmia.w	r3, {r0, r1}
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3708      	adds	r7, #8
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}

08004d40 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
 */

// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
 8004d40:	b590      	push	{r4, r7, lr}
 8004d42:	b089      	sub	sp, #36	; 0x24
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f503 74a2 	add.w	r4, r3, #324	; 0x144
 8004d4e:	4b10      	ldr	r3, [pc, #64]	; (8004d90 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x50>)
 8004d50:	61bb      	str	r3, [r7, #24]
 8004d52:	2300      	movs	r3, #0
 8004d54:	61fb      	str	r3, [r7, #28]
 8004d56:	f107 0008 	add.w	r0, r7, #8
 8004d5a:	f107 0318 	add.w	r3, r7, #24
 8004d5e:	cb0c      	ldmia	r3, {r2, r3}
 8004d60:	6879      	ldr	r1, [r7, #4]
 8004d62:	f000 f85f 	bl	8004e24 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 8004d66:	f107 0308 	add.w	r3, r7, #8
 8004d6a:	4619      	mov	r1, r3
 8004d6c:	4620      	mov	r0, r4
 8004d6e:	f7ff ffcb 	bl	8004d08 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8004d72:	f107 0308 	add.w	r3, r7, #8
 8004d76:	4618      	mov	r0, r3
 8004d78:	f7ff f9e4 	bl	8004144 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	f503 72a2 	add.w	r2, r3, #324	; 0x144
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
}
 8004d88:	bf00      	nop
 8004d8a:	3724      	adds	r7, #36	; 0x24
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd90      	pop	{r4, r7, pc}
 8004d90:	08004d95 	.word	0x08004d95

08004d94 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b084      	sub	sp, #16
 8004d98:	af02      	add	r7, sp, #8
 8004d9a:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f503 719e 	add.w	r1, r3, #316	; 0x13c
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8004da8:	461a      	mov	r2, r3
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8004db0:	9300      	str	r3, [sp, #0]
 8004db2:	4b04      	ldr	r3, [pc, #16]	; (8004dc4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x30>)
 8004db4:	4804      	ldr	r0, [pc, #16]	; (8004dc8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x34>)
 8004db6:	f000 f867 	bl	8004e88 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8004dba:	bf00      	nop
 8004dbc:	3708      	adds	r7, #8
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	2400702c 	.word	0x2400702c
 8004dc8:	24007028 	.word	0x24007028

08004dcc <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 8004dcc:	b480      	push	{r7}
 8004dce:	b083      	sub	sp, #12
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	4a04      	ldr	r2, [pc, #16]	; (8004de8 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	601a      	str	r2, [r3, #0]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	4618      	mov	r0, r3
 8004dde:	370c      	adds	r7, #12
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr
 8004de8:	0802b4dc 	.word	0x0802b4dc

08004dec <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
    Callback()
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b082      	sub	sp, #8
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun(0)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4618      	mov	r0, r3
 8004df8:	f7ff ffe8 	bl	8004dcc <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8004dfc:	4a08      	ldr	r2, [pc, #32]	; (8004e20 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	601a      	str	r2, [r3, #0]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	605a      	str	r2, [r3, #4]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	609a      	str	r2, [r3, #8]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2200      	movs	r2, #0
 8004e12:	60da      	str	r2, [r3, #12]
    }
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	4618      	mov	r0, r3
 8004e18:	3708      	adds	r7, #8
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	bf00      	nop
 8004e20:	0802b470 	.word	0x0802b470

08004e24 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
    Callback(dest_type* pObject, void (dest_type::*pmemfun_0)())
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b084      	sub	sp, #16
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	60f8      	str	r0, [r7, #12]
 8004e2c:	60b9      	str	r1, [r7, #8]
 8004e2e:	4639      	mov	r1, r7
 8004e30:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_0)
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	4618      	mov	r0, r3
 8004e38:	f7ff ffc8 	bl	8004dcc <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8004e3c:	4a08      	ldr	r2, [pc, #32]	; (8004e60 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	601a      	str	r2, [r3, #0]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	68ba      	ldr	r2, [r7, #8]
 8004e46:	605a      	str	r2, [r3, #4]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	3308      	adds	r3, #8
 8004e4c:	463a      	mov	r2, r7
 8004e4e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004e52:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3710      	adds	r7, #16
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}
 8004e60:	0802b470 	.word	0x0802b470

08004e64 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b082      	sub	sp, #8
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f7ff fe48 	bl	8004b04 <_ZN8touchgfx10TransitionC1Ev>
 8004e74:	4a03      	ldr	r2, [pc, #12]	; (8004e84 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	601a      	str	r2, [r3, #0]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3708      	adds	r7, #8
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}
 8004e84:	0802b650 	.word	0x0802b650

08004e88 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8004e88:	b590      	push	{r4, r7, lr}
 8004e8a:	b08f      	sub	sp, #60	; 0x3c
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	60f8      	str	r0, [r7, #12]
 8004e90:	60b9      	str	r1, [r7, #8]
 8004e92:	607a      	str	r2, [r7, #4]
 8004e94:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	689a      	ldr	r2, [r3, #8]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	3320      	adds	r3, #32
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4610      	mov	r0, r2
 8004ea6:	4798      	blx	r3
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	2bdf      	cmp	r3, #223	; 0xdf
 8004eac:	d805      	bhi.n	8004eba <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x32>
 8004eae:	4b7d      	ldr	r3, [pc, #500]	; (80050a4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x21c>)
 8004eb0:	4a7d      	ldr	r2, [pc, #500]	; (80050a8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 8004eb2:	21a3      	movs	r1, #163	; 0xa3
 8004eb4:	487d      	ldr	r0, [pc, #500]	; (80050ac <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8004eb6:	f024 f82d 	bl	8028f14 <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	685a      	ldr	r2, [r3, #4]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	3320      	adds	r3, #32
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4610      	mov	r0, r2
 8004eca:	4798      	blx	r3
 8004ecc:	4603      	mov	r3, r0
 8004ece:	2b0f      	cmp	r3, #15
 8004ed0:	d805      	bhi.n	8004ede <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x56>
 8004ed2:	4b77      	ldr	r3, [pc, #476]	; (80050b0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8004ed4:	4a74      	ldr	r2, [pc, #464]	; (80050a8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 8004ed6:	21a4      	movs	r1, #164	; 0xa4
 8004ed8:	4874      	ldr	r0, [pc, #464]	; (80050ac <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8004eda:	f024 f81b 	bl	8028f14 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	68da      	ldr	r2, [r3, #12]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	68db      	ldr	r3, [r3, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	3320      	adds	r3, #32
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4610      	mov	r0, r2
 8004eee:	4798      	blx	r3
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b0b      	cmp	r3, #11
 8004ef4:	d805      	bhi.n	8004f02 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7a>
 8004ef6:	4b6f      	ldr	r3, [pc, #444]	; (80050b4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8004ef8:	4a6b      	ldr	r2, [pc, #428]	; (80050a8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 8004efa:	21a5      	movs	r1, #165	; 0xa5
 8004efc:	486b      	ldr	r0, [pc, #428]	; (80050ac <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8004efe:	f024 f809 	bl	8028f14 <__assert_func>
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	627b      	str	r3, [r7, #36]	; 0x24
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 8004f0e:	f018 f83b 	bl	801cf88 <_ZN8touchgfx11Application11getInstanceEv>
 8004f12:	4603      	mov	r3, r0
 8004f14:	4618      	mov	r0, r3
 8004f16:	f7ff fdcb 	bl	8004ab0 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8004f1a:	6a3b      	ldr	r3, [r7, #32]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d008      	beq.n	8004f34 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xac>
        (*currentTrans)->tearDown();
 8004f22:	6a3b      	ldr	r3, [r7, #32]
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	6a3b      	ldr	r3, [r7, #32]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	330c      	adds	r3, #12
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4610      	mov	r0, r2
 8004f32:	4798      	blx	r3
    if (*currentTrans)
 8004f34:	6a3b      	ldr	r3, [r7, #32]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d007      	beq.n	8004f4c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xc4>
        (*currentTrans)->~Transition();
 8004f3c:	6a3b      	ldr	r3, [r7, #32]
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	6a3b      	ldr	r3, [r7, #32]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4610      	mov	r0, r2
 8004f4a:	4798      	blx	r3
    if (*currentScreen)
 8004f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d008      	beq.n	8004f66 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xde>
        (*currentScreen)->tearDownScreen();
 8004f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	3314      	adds	r3, #20
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4610      	mov	r0, r2
 8004f64:	4798      	blx	r3
    if (*currentPresenter)
 8004f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d008      	beq.n	8004f80 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xf8>
        (*currentPresenter)->deactivate();
 8004f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	3304      	adds	r3, #4
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4610      	mov	r0, r2
 8004f7e:	4798      	blx	r3
    if (*currentScreen)
 8004f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d007      	beq.n	8004f98 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x110>
        (*currentScreen)->~Screen();
 8004f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4610      	mov	r0, r2
 8004f96:	4798      	blx	r3
    if (*currentPresenter)
 8004f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d008      	beq.n	8004fb2 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12a>
        (*currentPresenter)->~Presenter();
 8004fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	3308      	adds	r3, #8
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4610      	mov	r0, r2
 8004fb0:	4798      	blx	r3
}
 8004fb2:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	2100      	movs	r1, #0
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f000 f87c 	bl	80050b8 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	4619      	mov	r1, r3
 8004fc4:	200c      	movs	r0, #12
 8004fc6:	f7ff fd67 	bl	8004a98 <_ZnwjPv>
 8004fca:	4604      	mov	r4, r0
 8004fcc:	4620      	mov	r0, r4
 8004fce:	f7ff ff49 	bl	8004e64 <_ZN8touchgfx12NoTransitionC1Ev>
 8004fd2:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	2100      	movs	r1, #0
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f000 f87f 	bl	80050de <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	4619      	mov	r1, r3
 8004fe4:	20e0      	movs	r0, #224	; 0xe0
 8004fe6:	f7ff fd57 	bl	8004a98 <_ZnwjPv>
 8004fea:	4604      	mov	r4, r0
 8004fec:	4620      	mov	r0, r4
 8004fee:	f001 faab 	bl	8006548 <_ZN11Screen1ViewC1Ev>
 8004ff2:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	2100      	movs	r1, #0
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f000 f882 	bl	8005104 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 8005000:	4603      	mov	r3, r0
 8005002:	4619      	mov	r1, r3
 8005004:	2010      	movs	r0, #16
 8005006:	f7ff fd47 	bl	8004a98 <_ZnwjPv>
 800500a:	4604      	mov	r4, r0
 800500c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800500e:	4620      	mov	r0, r4
 8005010:	f001 fa44 	bl	800649c <_ZN16Screen1PresenterC1ER11Screen1View>
 8005014:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800501a:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005020:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005026:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8005028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800502a:	2b00      	cmp	r3, #0
 800502c:	d002      	beq.n	8005034 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1ac>
 800502e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005030:	3304      	adds	r3, #4
 8005032:	e000      	b.n	8005036 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1ae>
 8005034:	2300      	movs	r3, #0
 8005036:	4619      	mov	r1, r3
 8005038:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800503a:	f7ff fdf5 	bl	8004c28 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800503e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005040:	3304      	adds	r3, #4
 8005042:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005044:	4618      	mov	r0, r3
 8005046:	f7ff fe0a 	bl	8004c5e <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800504a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800504c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800504e:	4618      	mov	r0, r3
 8005050:	f000 f86b 	bl	800512a <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>
 8005054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005056:	61fb      	str	r3, [r7, #28]
 8005058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800505a:	61bb      	str	r3, [r7, #24]
 800505c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800505e:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 8005060:	69fb      	ldr	r3, [r7, #28]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	330c      	adds	r3, #12
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	69f8      	ldr	r0, [r7, #28]
 800506a:	4798      	blx	r3
    newPresenter->activate();
 800506c:	69bb      	ldr	r3, [r7, #24]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	69b8      	ldr	r0, [r7, #24]
 8005074:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8005076:	6979      	ldr	r1, [r7, #20]
 8005078:	69f8      	ldr	r0, [r7, #28]
 800507a:	f019 fc49 	bl	801e910 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	3310      	adds	r3, #16
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	6978      	ldr	r0, [r7, #20]
 8005088:	4798      	blx	r3
    newTransition->invalidate();
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	3314      	adds	r3, #20
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	6978      	ldr	r0, [r7, #20]
 8005094:	4798      	blx	r3
}
 8005096:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 8005098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800509a:	4618      	mov	r0, r3
 800509c:	373c      	adds	r7, #60	; 0x3c
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd90      	pop	{r4, r7, pc}
 80050a2:	bf00      	nop
 80050a4:	0802aa98 	.word	0x0802aa98
 80050a8:	0802ab28 	.word	0x0802ab28
 80050ac:	0802ac2c 	.word	0x0802ac2c
 80050b0:	0802ac74 	.word	0x0802ac74
 80050b4:	0802ad18 	.word	0x0802ad18

080050b8 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b082      	sub	sp, #8
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
 80050c0:	460b      	mov	r3, r1
 80050c2:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	3324      	adds	r3, #36	; 0x24
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	887a      	ldrh	r2, [r7, #2]
 80050ce:	4611      	mov	r1, r2
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	4798      	blx	r3
 80050d4:	4603      	mov	r3, r0
    }
 80050d6:	4618      	mov	r0, r3
 80050d8:	3708      	adds	r7, #8
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}

080050de <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>:
    T& at(const uint16_t index)
 80050de:	b580      	push	{r7, lr}
 80050e0:	b082      	sub	sp, #8
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
 80050e6:	460b      	mov	r3, r1
 80050e8:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	3324      	adds	r3, #36	; 0x24
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	887a      	ldrh	r2, [r7, #2]
 80050f4:	4611      	mov	r1, r2
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	4798      	blx	r3
 80050fa:	4603      	mov	r3, r0
    }
 80050fc:	4618      	mov	r0, r3
 80050fe:	3708      	adds	r7, #8
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}

08005104 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>:
    T& at(const uint16_t index)
 8005104:	b580      	push	{r7, lr}
 8005106:	b082      	sub	sp, #8
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	460b      	mov	r3, r1
 800510e:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	3324      	adds	r3, #36	; 0x24
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	887a      	ldrh	r2, [r7, #2]
 800511a:	4611      	mov	r1, r2
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	4798      	blx	r3
 8005120:	4603      	mov	r3, r0
    }
 8005122:	4618      	mov	r0, r3
 8005124:	3708      	adds	r7, #8
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}

0800512a <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This function
     * is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
 800512a:	b480      	push	{r7}
 800512c:	b083      	sub	sp, #12
 800512e:	af00      	add	r7, sp, #0
 8005130:	6078      	str	r0, [r7, #4]
 8005132:	6039      	str	r1, [r7, #0]
    {
        presenter = &newPresenter;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	683a      	ldr	r2, [r7, #0]
 8005138:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800513a:	bf00      	nop
 800513c:	370c      	adds	r7, #12
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr
	...

08005148 <_ZN8touchgfx12NoTransitionD1Ev>:
 8005148:	b580      	push	{r7, lr}
 800514a:	b082      	sub	sp, #8
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	4a05      	ldr	r2, [pc, #20]	; (8005168 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	601a      	str	r2, [r3, #0]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4618      	mov	r0, r3
 800515a:	f7ff fce9 	bl	8004b30 <_ZN8touchgfx10TransitionD1Ev>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4618      	mov	r0, r3
 8005162:	3708      	adds	r7, #8
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}
 8005168:	0802b650 	.word	0x0802b650

0800516c <_ZN8touchgfx12NoTransitionD0Ev>:
 800516c:	b580      	push	{r7, lr}
 800516e:	b082      	sub	sp, #8
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f7ff ffe7 	bl	8005148 <_ZN8touchgfx12NoTransitionD1Ev>
 800517a:	210c      	movs	r1, #12
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f023 fe9a 	bl	8028eb6 <_ZdlPvj>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4618      	mov	r0, r3
 8005186:	3708      	adds	r7, #8
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}

0800518c <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:

    virtual const uint8_t* getPixelData(const GlyphNode* glyph) const;

    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
 800518c:	b480      	push	{r7}
 800518e:	b083      	sub	sp, #12
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    }
 8005198:	4618      	mov	r0, r3
 800519a:	370c      	adds	r7, #12
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr

080051a4 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
 80051a4:	b480      	push	{r7}
 80051a6:	b083      	sub	sp, #12
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    }
 80051b0:	4618      	mov	r0, r3
 80051b2:	370c      	adds	r7, #12
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr

080051bc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 80051bc:	b580      	push	{r7, lr}
 80051be:	b08e      	sub	sp, #56	; 0x38
 80051c0:	af0a      	add	r7, sp, #40	; 0x28
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	60b9      	str	r1, [r7, #8]
 80051c6:	4611      	mov	r1, r2
 80051c8:	461a      	mov	r2, r3
 80051ca:	460b      	mov	r3, r1
 80051cc:	80fb      	strh	r3, [r7, #6]
 80051ce:	4613      	mov	r3, r2
 80051d0:	80bb      	strh	r3, [r7, #4]
    : ConstFont(glyphs, numGlyphs, height, baseline, pixAboveTop, pixBelowBottom, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 80051d2:	68f8      	ldr	r0, [r7, #12]
 80051d4:	88b9      	ldrh	r1, [r7, #4]
 80051d6:	88fa      	ldrh	r2, [r7, #6]
 80051d8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80051dc:	9308      	str	r3, [sp, #32]
 80051de:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80051e0:	9307      	str	r3, [sp, #28]
 80051e2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80051e6:	9306      	str	r3, [sp, #24]
 80051e8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80051ec:	9305      	str	r3, [sp, #20]
 80051ee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80051f2:	9304      	str	r3, [sp, #16]
 80051f4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80051f8:	9303      	str	r3, [sp, #12]
 80051fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80051fe:	9302      	str	r3, [sp, #8]
 8005200:	7f3b      	ldrb	r3, [r7, #28]
 8005202:	9301      	str	r3, [sp, #4]
 8005204:	8b3b      	ldrh	r3, [r7, #24]
 8005206:	9300      	str	r3, [sp, #0]
 8005208:	460b      	mov	r3, r1
 800520a:	68b9      	ldr	r1, [r7, #8]
 800520c:	f018 ffe2 	bl	801e1d4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 8005210:	4a09      	ldr	r2, [pc, #36]	; (8005238 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x7c>)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	601a      	str	r2, [r3, #0]
      glyphData(glyphDataInternalFlash),
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800521a:	61da      	str	r2, [r3, #28]
      kerningData(kerningList),
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005220:	621a      	str	r2, [r3, #32]
      gsubTable(gsubData),
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005226:	625a      	str	r2, [r3, #36]	; 0x24
      arabicTable(formsTable)
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800522c:	629a      	str	r2, [r3, #40]	; 0x28
{
}
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	4618      	mov	r0, r3
 8005232:	3710      	adds	r7, #16
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}
 8005238:	0802b698 	.word	0x0802b698

0800523c <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800523c:	b480      	push	{r7}
 800523e:	b085      	sub	sp, #20
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
 8005244:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	69db      	ldr	r3, [r3, #28]
 800524a:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	889b      	ldrh	r3, [r3, #4]
 8005250:	0adb      	lsrs	r3, r3, #11
 8005252:	b29b      	uxth	r3, r3
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	68fa      	ldr	r2, [r7, #12]
 8005258:	4413      	add	r3, r2
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4413      	add	r3, r2
}
 8005262:	4618      	mov	r0, r3
 8005264:	3714      	adds	r7, #20
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr

0800526e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800526e:	b480      	push	{r7}
 8005270:	b089      	sub	sp, #36	; 0x24
 8005272:	af00      	add	r7, sp, #0
 8005274:	60f8      	str	r0, [r7, #12]
 8005276:	460b      	mov	r3, r1
 8005278:	607a      	str	r2, [r7, #4]
 800527a:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d003      	beq.n	800528a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	7b1b      	ldrb	r3, [r3, #12]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d101      	bne.n	800528e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800528a:	2300      	movs	r3, #0
 800528c:	e031      	b.n	80052f2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x84>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	6a1a      	ldr	r2, [r3, #32]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	7b5b      	ldrb	r3, [r3, #13]
 800529a:	021b      	lsls	r3, r3, #8
 800529c:	b21b      	sxth	r3, r3
 800529e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80052a2:	b219      	sxth	r1, r3
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	7adb      	ldrb	r3, [r3, #11]
 80052a8:	b21b      	sxth	r3, r3
 80052aa:	430b      	orrs	r3, r1
 80052ac:	b21b      	sxth	r3, r3
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	4413      	add	r3, r2
 80052b4:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	7b1b      	ldrb	r3, [r3, #12]
 80052ba:	837b      	strh	r3, [r7, #26]
 80052bc:	e013      	b.n	80052e6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x78>
    {
        if (prevChar == kerndata->unicodePrevChar)
 80052be:	69fb      	ldr	r3, [r7, #28]
 80052c0:	881b      	ldrh	r3, [r3, #0]
 80052c2:	897a      	ldrh	r2, [r7, #10]
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d103      	bne.n	80052d0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x62>
        {
            return kerndata->distance;
 80052c8:	69fb      	ldr	r3, [r7, #28]
 80052ca:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80052ce:	e010      	b.n	80052f2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x84>
        }
        if (prevChar < kerndata->unicodePrevChar)
 80052d0:	69fb      	ldr	r3, [r7, #28]
 80052d2:	881b      	ldrh	r3, [r3, #0]
 80052d4:	897a      	ldrh	r2, [r7, #10]
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d309      	bcc.n	80052ee <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 80052da:	8b7b      	ldrh	r3, [r7, #26]
 80052dc:	3b01      	subs	r3, #1
 80052de:	837b      	strh	r3, [r7, #26]
 80052e0:	69fb      	ldr	r3, [r7, #28]
 80052e2:	3304      	adds	r3, #4
 80052e4:	61fb      	str	r3, [r7, #28]
 80052e6:	8b7b      	ldrh	r3, [r7, #26]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d1e8      	bne.n	80052be <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x50>
 80052ec:	e000      	b.n	80052f0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        {
            break;
 80052ee:	bf00      	nop
        }
    }
    return 0;
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3724      	adds	r7, #36	; 0x24
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr

080052fe <_ZN8touchgfx9colortypeC1Em>:
    colortype(uint32_t col)
 80052fe:	b480      	push	{r7}
 8005300:	b083      	sub	sp, #12
 8005302:	af00      	add	r7, sp, #0
 8005304:	6078      	str	r0, [r7, #4]
 8005306:	6039      	str	r1, [r7, #0]
        : color(col)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	683a      	ldr	r2, [r7, #0]
 800530c:	601a      	str	r2, [r3, #0]
    }
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4618      	mov	r0, r3
 8005312:	370c      	adds	r7, #12
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr

0800531c <_ZN8touchgfx4RectC1Essss>:
     * @param  rectX      The x coordinate.
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
 800531c:	b480      	push	{r7}
 800531e:	b085      	sub	sp, #20
 8005320:	af00      	add	r7, sp, #0
 8005322:	60f8      	str	r0, [r7, #12]
 8005324:	4608      	mov	r0, r1
 8005326:	4611      	mov	r1, r2
 8005328:	461a      	mov	r2, r3
 800532a:	4603      	mov	r3, r0
 800532c:	817b      	strh	r3, [r7, #10]
 800532e:	460b      	mov	r3, r1
 8005330:	813b      	strh	r3, [r7, #8]
 8005332:	4613      	mov	r3, r2
 8005334:	80fb      	strh	r3, [r7, #6]
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	897a      	ldrh	r2, [r7, #10]
 800533a:	801a      	strh	r2, [r3, #0]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	893a      	ldrh	r2, [r7, #8]
 8005340:	805a      	strh	r2, [r3, #2]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	88fa      	ldrh	r2, [r7, #6]
 8005346:	809a      	strh	r2, [r3, #4]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	8b3a      	ldrh	r2, [r7, #24]
 800534c:	80da      	strh	r2, [r3, #6]
    {
    }
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	4618      	mov	r0, r3
 8005352:	3714      	adds	r7, #20
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr

0800535c <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 800535c:	b580      	push	{r7, lr}
 800535e:	b082      	sub	sp, #8
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
          nextSibling(0),
          nextDrawChainElement(0),
          cachedAbsX(0),
          cachedAbsY(0),
          touchable(false),
          visible(true)
 8005364:	4a14      	ldr	r2, [pc, #80]	; (80053b8 <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	601a      	str	r2, [r3, #0]
        : rect(),
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	3304      	adds	r3, #4
 800536e:	4618      	mov	r0, r3
 8005370:	f7fe f8f8 	bl	8003564 <_ZN8touchgfx4RectC1Ev>
          cachedVisibleRect(),
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	330c      	adds	r3, #12
 8005378:	4618      	mov	r0, r3
 800537a:	f7fe f8f3 	bl	8003564 <_ZN8touchgfx4RectC1Ev>
          parent(0),
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2200      	movs	r2, #0
 8005382:	615a      	str	r2, [r3, #20]
          nextSibling(0),
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2200      	movs	r2, #0
 8005388:	619a      	str	r2, [r3, #24]
          nextDrawChainElement(0),
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	61da      	str	r2, [r3, #28]
          cachedAbsX(0),
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2200      	movs	r2, #0
 8005394:	841a      	strh	r2, [r3, #32]
          cachedAbsY(0),
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	845a      	strh	r2, [r3, #34]	; 0x22
          touchable(false),
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2200      	movs	r2, #0
 80053a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          visible(true)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2201      	movs	r2, #1
 80053a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	4618      	mov	r0, r3
 80053b0:	3708      	adds	r7, #8
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
 80053b6:	bf00      	nop
 80053b8:	0802bda4 	.word	0x0802bda4

080053bc <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
    {
 80053c4:	4a04      	ldr	r2, [pc, #16]	; (80053d8 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	601a      	str	r2, [r3, #0]
    }
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	4618      	mov	r0, r3
 80053ce:	370c      	adds	r7, #12
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr
 80053d8:	0802bda4 	.word	0x0802bda4

080053dc <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 80053dc:	b580      	push	{r7, lr}
 80053de:	b082      	sub	sp, #8
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
    }
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f7ff ffe9 	bl	80053bc <_ZN8touchgfx8DrawableD1Ev>
 80053ea:	2128      	movs	r1, #40	; 0x28
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f023 fd62 	bl	8028eb6 <_ZdlPvj>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4618      	mov	r0, r3
 80053f6:	3708      	adds	r7, #8
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}

080053fc <_ZNK8touchgfx8Drawable17invalidateContentEv>:
     * Tell the framework that the contents of the Drawable needs to be redrawn. If the Drawable is
     * invisible, nothing happens. Subclasses of Drawable are encouraged to implement this function
     * and invalidate as little as possible, i.e. the smallest rectangle covering the visual element(s)
     * drawn by the widget.
     */
    virtual void invalidateContent() const
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b082      	sub	sp, #8
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
    {
        // Consider checking if *this is in the draw chain
        if (visible)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800540a:	2b00      	cmp	r3, #0
 800540c:	d005      	beq.n	800541a <_ZNK8touchgfx8Drawable17invalidateContentEv+0x1e>
        {
            invalidate();
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	3314      	adds	r3, #20
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	4798      	blx	r3
        }
    }
 800541a:	bf00      	nop
 800541c:	3708      	adds	r7, #8
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}

08005422 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 8005422:	b480      	push	{r7}
 8005424:	b083      	sub	sp, #12
 8005426:	af00      	add	r7, sp, #0
 8005428:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800542a:	2300      	movs	r3, #0
    }
 800542c:	4618      	mov	r0, r3
 800542e:	370c      	adds	r7, #12
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr

08005438 <_ZN8touchgfx8Drawable11setPositionEssss>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     *
     * @see setXY,setWidthHeight,setPosition(const Drawable&)
     */
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8005438:	b580      	push	{r7, lr}
 800543a:	b084      	sub	sp, #16
 800543c:	af00      	add	r7, sp, #0
 800543e:	60f8      	str	r0, [r7, #12]
 8005440:	4608      	mov	r0, r1
 8005442:	4611      	mov	r1, r2
 8005444:	461a      	mov	r2, r3
 8005446:	4603      	mov	r3, r0
 8005448:	817b      	strh	r3, [r7, #10]
 800544a:	460b      	mov	r3, r1
 800544c:	813b      	strh	r3, [r7, #8]
 800544e:	4613      	mov	r3, r2
 8005450:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 8005452:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8005456:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800545a:	4619      	mov	r1, r3
 800545c:	68f8      	ldr	r0, [r7, #12]
 800545e:	f000 f82a 	bl	80054b6 <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 8005462:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8005466:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800546a:	4619      	mov	r1, r3
 800546c:	68f8      	ldr	r0, [r7, #12]
 800546e:	f000 f87e 	bl	800556e <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 8005472:	bf00      	nop
 8005474:	3710      	adds	r7, #16
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}

0800547a <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 800547a:	b480      	push	{r7}
 800547c:	b083      	sub	sp, #12
 800547e:	af00      	add	r7, sp, #0
 8005480:	6078      	str	r0, [r7, #4]
 8005482:	460b      	mov	r3, r1
 8005484:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	887a      	ldrh	r2, [r7, #2]
 800548a:	809a      	strh	r2, [r3, #4]
    }
 800548c:	bf00      	nop
 800548e:	370c      	adds	r7, #12
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr

08005498 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 8005498:	b480      	push	{r7}
 800549a:	b083      	sub	sp, #12
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
 80054a0:	460b      	mov	r3, r1
 80054a2:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	887a      	ldrh	r2, [r7, #2]
 80054a8:	80da      	strh	r2, [r3, #6]
    }
 80054aa:	bf00      	nop
 80054ac:	370c      	adds	r7, #12
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr

080054b6 <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 80054b6:	b580      	push	{r7, lr}
 80054b8:	b082      	sub	sp, #8
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	6078      	str	r0, [r7, #4]
 80054be:	460b      	mov	r3, r1
 80054c0:	807b      	strh	r3, [r7, #2]
 80054c2:	4613      	mov	r3, r2
 80054c4:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	3330      	adds	r3, #48	; 0x30
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80054d2:	4611      	mov	r1, r2
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	4798      	blx	r3
        setY(y);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	3334      	adds	r3, #52	; 0x34
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f9b7 2000 	ldrsh.w	r2, [r7]
 80054e4:	4611      	mov	r1, r2
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	4798      	blx	r3
    }
 80054ea:	bf00      	nop
 80054ec:	3708      	adds	r7, #8
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}

080054f2 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 80054f2:	b480      	push	{r7}
 80054f4:	b083      	sub	sp, #12
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	6078      	str	r0, [r7, #4]
 80054fa:	460b      	mov	r3, r1
 80054fc:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	887a      	ldrh	r2, [r7, #2]
 8005502:	811a      	strh	r2, [r3, #8]
    }
 8005504:	bf00      	nop
 8005506:	370c      	adds	r7, #12
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr

08005510 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 8005510:	b480      	push	{r7}
 8005512:	b083      	sub	sp, #12
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	460b      	mov	r3, r1
 800551a:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	887a      	ldrh	r2, [r7, #2]
 8005520:	815a      	strh	r2, [r3, #10]
    }
 8005522:	bf00      	nop
 8005524:	370c      	adds	r7, #12
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr

0800552e <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 800552e:	b480      	push	{r7}
 8005530:	b083      	sub	sp, #12
 8005532:	af00      	add	r7, sp, #0
 8005534:	6078      	str	r0, [r7, #4]
    {
    }
 8005536:	bf00      	nop
 8005538:	370c      	adds	r7, #12
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr

08005542 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8005542:	b480      	push	{r7}
 8005544:	b083      	sub	sp, #12
 8005546:	af00      	add	r7, sp, #0
 8005548:	6078      	str	r0, [r7, #4]
 800554a:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800554c:	bf00      	nop
 800554e:	370c      	adds	r7, #12
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr

08005558 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8005558:	b480      	push	{r7}
 800555a:	b083      	sub	sp, #12
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8005562:	bf00      	nop
 8005564:	370c      	adds	r7, #12
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr

0800556e <_ZN8touchgfx8Drawable14setWidthHeightEss>:
     * coordinates).
     *
     * @param  width  The width.
     * @param  height The height.
     */
    void setWidthHeight(int16_t width, int16_t height)
 800556e:	b580      	push	{r7, lr}
 8005570:	b082      	sub	sp, #8
 8005572:	af00      	add	r7, sp, #0
 8005574:	6078      	str	r0, [r7, #4]
 8005576:	460b      	mov	r3, r1
 8005578:	807b      	strh	r3, [r7, #2]
 800557a:	4613      	mov	r3, r2
 800557c:	803b      	strh	r3, [r7, #0]
    {
        setWidth(width);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	3338      	adds	r3, #56	; 0x38
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800558a:	4611      	mov	r1, r2
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	4798      	blx	r3
        setHeight(height);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	333c      	adds	r3, #60	; 0x3c
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f9b7 2000 	ldrsh.w	r2, [r7]
 800559c:	4611      	mov	r1, r2
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	4798      	blx	r3
    }
 80055a2:	bf00      	nop
 80055a4:	3708      	adds	r7, #8
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}

080055aa <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 80055aa:	b480      	push	{r7}
 80055ac:	b083      	sub	sp, #12
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
 80055b2:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 80055b4:	bf00      	nop
 80055b6:	370c      	adds	r7, #12
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr

080055c0 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 80055c0:	b480      	push	{r7}
 80055c2:	b083      	sub	sp, #12
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
    {
    }
 80055c8:	bf00      	nop
 80055ca:	370c      	adds	r7, #12
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr

080055d4 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 80055d4:	b480      	push	{r7}
 80055d6:	b083      	sub	sp, #12
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
    {
        return visible;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 80055e2:	4618      	mov	r0, r3
 80055e4:	370c      	adds	r7, #12
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr

080055ee <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 80055ee:	b480      	push	{r7}
 80055f0:	b083      	sub	sp, #12
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 80055fc:	4618      	mov	r0, r3
 80055fe:	370c      	adds	r7, #12
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr

08005608 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8005608:	b580      	push	{r7, lr}
 800560a:	b082      	sub	sp, #8
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	460b      	mov	r3, r1
 8005612:	807b      	strh	r3, [r7, #2]
 8005614:	4613      	mov	r3, r2
 8005616:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	3354      	adds	r3, #84	; 0x54
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	8879      	ldrh	r1, [r7, #2]
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8005628:	b292      	uxth	r2, r2
 800562a:	1a8a      	subs	r2, r1, r2
 800562c:	b292      	uxth	r2, r2
 800562e:	b210      	sxth	r0, r2
 8005630:	8839      	ldrh	r1, [r7, #0]
 8005632:	687a      	ldr	r2, [r7, #4]
 8005634:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8005638:	b292      	uxth	r2, r2
 800563a:	1a8a      	subs	r2, r1, r2
 800563c:	b292      	uxth	r2, r2
 800563e:	b212      	sxth	r2, r2
 8005640:	4601      	mov	r1, r0
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	4798      	blx	r3
    }
 8005646:	bf00      	nop
 8005648:	3708      	adds	r7, #8
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}

0800564e <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 800564e:	b480      	push	{r7}
 8005650:	b083      	sub	sp, #12
 8005652:	af00      	add	r7, sp, #0
 8005654:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800565c:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005664:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800566c:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 800566e:	bf00      	nop
 8005670:	370c      	adds	r7, #12
 8005672:	46bd      	mov	sp, r7
 8005674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005678:	4770      	bx	lr

0800567a <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 800567a:	b580      	push	{r7, lr}
 800567c:	b084      	sub	sp, #16
 800567e:	af00      	add	r7, sp, #0
 8005680:	60f8      	str	r0, [r7, #12]
 8005682:	60b9      	str	r1, [r7, #8]
 8005684:	607a      	str	r2, [r7, #4]
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
 8005686:	68f8      	ldr	r0, [r7, #12]
 8005688:	f7ff ffe1 	bl	800564e <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	68fa      	ldr	r2, [r7, #12]
 8005698:	601a      	str	r2, [r3, #0]
    }
 800569a:	bf00      	nop
 800569c:	3710      	adds	r7, #16
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}
	...

080056a4 <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b082      	sub	sp, #8
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
    {
 80056ac:	4a06      	ldr	r2, [pc, #24]	; (80056c8 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	601a      	str	r2, [r3, #0]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	3304      	adds	r3, #4
 80056b6:	4618      	mov	r0, r3
 80056b8:	f000 fab4 	bl	8005c24 <_ZN8touchgfx9ContainerD1Ev>
    }
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	4618      	mov	r0, r3
 80056c0:	3708      	adds	r7, #8
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}
 80056c6:	bf00      	nop
 80056c8:	0802bea8 	.word	0x0802bea8

080056cc <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b082      	sub	sp, #8
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
    }
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f7ff ffe5 	bl	80056a4 <_ZN8touchgfx6ScreenD1Ev>
 80056da:	213c      	movs	r1, #60	; 0x3c
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f023 fbea 	bl	8028eb6 <_ZdlPvj>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	4618      	mov	r0, r3
 80056e6:	3708      	adds	r7, #8
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd80      	pop	{r7, pc}

080056ec <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 80056ec:	b480      	push	{r7}
 80056ee:	b083      	sub	sp, #12
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
    {
    }
 80056f4:	bf00      	nop
 80056f6:	370c      	adds	r7, #12
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr

08005700 <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 8005700:	b480      	push	{r7}
 8005702:	b083      	sub	sp, #12
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
    {
    }
 8005708:	bf00      	nop
 800570a:	370c      	adds	r7, #12
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr

08005714 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 8005714:	b480      	push	{r7}
 8005716:	b083      	sub	sp, #12
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
    {
    }
 800571c:	bf00      	nop
 800571e:	370c      	adds	r7, #12
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr

08005728 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 8005728:	b480      	push	{r7}
 800572a:	b083      	sub	sp, #12
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
    {
    }
 8005730:	bf00      	nop
 8005732:	370c      	adds	r7, #12
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr

0800573c <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 800573c:	b480      	push	{r7}
 800573e:	b083      	sub	sp, #12
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	460b      	mov	r3, r1
 8005746:	70fb      	strb	r3, [r7, #3]
    {
        (void)key; // Unused variable
    }
 8005748:	bf00      	nop
 800574a:	370c      	adds	r7, #12
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr

08005754 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 8005754:	b580      	push	{r7, lr}
 8005756:	b082      	sub	sp, #8
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	3304      	adds	r3, #4
 8005762:	6839      	ldr	r1, [r7, #0]
 8005764:	4618      	mov	r0, r3
 8005766:	f014 f9b1 	bl	8019acc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 800576a:	bf00      	nop
 800576c:	3708      	adds	r7, #8
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}

08005772 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     * Since a Widget is only one Drawable, Widget::getLastChild simply yields itself as
     * result, but only if the Widget isVisible and isTouchable.
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
 8005772:	b580      	push	{r7, lr}
 8005774:	b084      	sub	sp, #16
 8005776:	af00      	add	r7, sp, #0
 8005778:	60f8      	str	r0, [r7, #12]
 800577a:	607b      	str	r3, [r7, #4]
 800577c:	460b      	mov	r3, r1
 800577e:	817b      	strh	r3, [r7, #10]
 8005780:	4613      	mov	r3, r2
 8005782:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	4618      	mov	r0, r3
 8005788:	f7ff ff24 	bl	80055d4 <_ZNK8touchgfx8Drawable9isVisibleEv>
 800578c:	4603      	mov	r3, r0
 800578e:	2b00      	cmp	r3, #0
 8005790:	d008      	beq.n	80057a4 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	4618      	mov	r0, r3
 8005796:	f7ff ff2a 	bl	80055ee <_ZNK8touchgfx8Drawable11isTouchableEv>
 800579a:	4603      	mov	r3, r0
 800579c:	2b00      	cmp	r3, #0
 800579e:	d001      	beq.n	80057a4 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 80057a0:	2301      	movs	r3, #1
 80057a2:	e000      	b.n	80057a6 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 80057a4:	2300      	movs	r3, #0
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d002      	beq.n	80057b0 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 80057aa:	68fa      	ldr	r2, [r7, #12]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	601a      	str	r2, [r3, #0]
        }
    }
 80057b0:	bf00      	nop
 80057b2:	3710      	adds	r7, #16
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}

080057b8 <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b082      	sub	sp, #8
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	4618      	mov	r0, r3
 80057c4:	f7ff fdca 	bl	800535c <_ZN8touchgfx8DrawableC1Ev>
 80057c8:	4a03      	ldr	r2, [pc, #12]	; (80057d8 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	601a      	str	r2, [r3, #0]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	4618      	mov	r0, r3
 80057d2:	3708      	adds	r7, #8
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}
 80057d8:	0802b760 	.word	0x0802b760

080057dc <_ZN8touchgfx6WidgetD1Ev>:
 80057dc:	b580      	push	{r7, lr}
 80057de:	b082      	sub	sp, #8
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	4a05      	ldr	r2, [pc, #20]	; (80057fc <_ZN8touchgfx6WidgetD1Ev+0x20>)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	601a      	str	r2, [r3, #0]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4618      	mov	r0, r3
 80057ee:	f7ff fde5 	bl	80053bc <_ZN8touchgfx8DrawableD1Ev>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	4618      	mov	r0, r3
 80057f6:	3708      	adds	r7, #8
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}
 80057fc:	0802b760 	.word	0x0802b760

08005800 <_ZN8touchgfx6WidgetD0Ev>:
 8005800:	b580      	push	{r7, lr}
 8005802:	b082      	sub	sp, #8
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f7ff ffe7 	bl	80057dc <_ZN8touchgfx6WidgetD1Ev>
 800580e:	2128      	movs	r1, #40	; 0x28
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f023 fb50 	bl	8028eb6 <_ZdlPvj>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	4618      	mov	r0, r3
 800581a:	3708      	adds	r7, #8
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}

08005820 <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 8005820:	b580      	push	{r7, lr}
 8005822:	b082      	sub	sp, #8
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	4618      	mov	r0, r3
 800582c:	2326      	movs	r3, #38	; 0x26
 800582e:	461a      	mov	r2, r3
 8005830:	2100      	movs	r1, #0
 8005832:	f023 fd94 	bl	802935e <memset>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	4618      	mov	r0, r3
 800583a:	f7ff ffbd 	bl	80057b8 <_ZN8touchgfx6WidgetC1Ev>
 800583e:	4a09      	ldr	r2, [pc, #36]	; (8005864 <_ZN8touchgfx3BoxC1Ev+0x44>)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	601a      	str	r2, [r3, #0]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	22ff      	movs	r2, #255	; 0xff
 8005848:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	3328      	adds	r3, #40	; 0x28
 8005850:	2100      	movs	r1, #0
 8005852:	4618      	mov	r0, r3
 8005854:	f7ff fd53 	bl	80052fe <_ZN8touchgfx9colortypeC1Em>
    {
    }
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	4618      	mov	r0, r3
 800585c:	3708      	adds	r7, #8
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}
 8005862:	bf00      	nop
 8005864:	0802bc90 	.word	0x0802bc90

08005868 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  newColor The color of the box.
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
 8005868:	b480      	push	{r7}
 800586a:	b083      	sub	sp, #12
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	6039      	str	r1, [r7, #0]
    {
        color = newColor;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	683a      	ldr	r2, [r7, #0]
 8005876:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8005878:	bf00      	nop
 800587a:	370c      	adds	r7, #12
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	4770      	bx	lr

08005884 <_ZN8touchgfx9TypedTextC1Et>:
    TypedText(const TypedTextId id = TYPED_TEXT_INVALID)
 8005884:	b480      	push	{r7}
 8005886:	b083      	sub	sp, #12
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
 800588c:	460b      	mov	r3, r1
 800588e:	807b      	strh	r3, [r7, #2]
        : typedTextId(id)
 8005890:	4a06      	ldr	r2, [pc, #24]	; (80058ac <_ZN8touchgfx9TypedTextC1Et+0x28>)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	601a      	str	r2, [r3, #0]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	887a      	ldrh	r2, [r7, #2]
 800589a:	809a      	strh	r2, [r3, #4]
    }
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	4618      	mov	r0, r3
 80058a0:	370c      	adds	r7, #12
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr
 80058aa:	bf00      	nop
 80058ac:	0802b640 	.word	0x0802b640

080058b0 <_ZN8touchgfx8TextAreaC1Ev>:
 *       the pointer remains valid when drawing.
 */
class TextArea : public Widget
{
public:
    TextArea()
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b082      	sub	sp, #8
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	4618      	mov	r0, r3
 80058bc:	2326      	movs	r3, #38	; 0x26
 80058be:	461a      	mov	r2, r3
 80058c0:	2100      	movs	r1, #0
 80058c2:	f023 fd4c 	bl	802935e <memset>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	4618      	mov	r0, r3
 80058ca:	f7ff ff75 	bl	80057b8 <_ZN8touchgfx6WidgetC1Ev>
 80058ce:	4a16      	ldr	r2, [pc, #88]	; (8005928 <_ZN8touchgfx8TextAreaC1Ev+0x78>)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	601a      	str	r2, [r3, #0]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	3328      	adds	r3, #40	; 0x28
 80058d8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80058dc:	4618      	mov	r0, r3
 80058de:	f7ff ffd1 	bl	8005884 <_ZN8touchgfx9TypedTextC1Et>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	3330      	adds	r3, #48	; 0x30
 80058e6:	2100      	movs	r1, #0
 80058e8:	4618      	mov	r0, r3
 80058ea:	f7ff fd08 	bl	80052fe <_ZN8touchgfx9colortypeC1Em>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	869a      	strh	r2, [r3, #52]	; 0x34
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	22ff      	movs	r2, #255	; 0xff
 80058f8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2200      	movs	r2, #0
 8005900:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2200      	movs	r2, #0
 8005908:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2200      	movs	r2, #0
 8005910:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	333c      	adds	r3, #60	; 0x3c
 8005918:	4618      	mov	r0, r3
 800591a:	f000 f807 	bl	800592c <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>
    {
    }
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	4618      	mov	r0, r3
 8005922:	3708      	adds	r7, #8
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}
 8005928:	0802bc00 	.word	0x0802bc00

0800592c <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>:
        }

        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
 800592c:	b580      	push	{r7, lr}
 800592e:	b084      	sub	sp, #16
 8005930:	af02      	add	r7, sp, #8
 8005932:	6078      	str	r0, [r7, #4]
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f04f 33ff 	mov.w	r3, #4294967295
 800593a:	9300      	str	r3, [sp, #0]
 800593c:	f04f 33ff 	mov.w	r3, #4294967295
 8005940:	2200      	movs	r2, #0
 8005942:	2100      	movs	r1, #0
 8005944:	f7ff fcea 	bl	800531c <_ZN8touchgfx4RectC1Essss>
              text(0)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	609a      	str	r2, [r3, #8]
        {
        }
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	4618      	mov	r0, r3
 8005952:	3708      	adds	r7, #8
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}

08005958 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>:
class View : public Screen
 8005958:	b580      	push	{r7, lr}
 800595a:	b082      	sub	sp, #8
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
 8005960:	4a05      	ldr	r2, [pc, #20]	; (8005978 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev+0x20>)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	601a      	str	r2, [r3, #0]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	4618      	mov	r0, r3
 800596a:	f7ff fe9b 	bl	80056a4 <_ZN8touchgfx6ScreenD1Ev>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	4618      	mov	r0, r3
 8005972:	3708      	adds	r7, #8
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}
 8005978:	0802b72c 	.word	0x0802b72c

0800597c <_ZN8touchgfx4ViewI16Screen1PresenterED0Ev>:
 800597c:	b580      	push	{r7, lr}
 800597e:	b082      	sub	sp, #8
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f7ff ffe7 	bl	8005958 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 800598a:	2140      	movs	r1, #64	; 0x40
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f023 fa92 	bl	8028eb6 <_ZdlPvj>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	4618      	mov	r0, r3
 8005996:	3708      	adds	r7, #8
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}

0800599c <_ZN15Screen1ViewBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/screen1_screen/Screen1ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>

Screen1ViewBase::Screen1ViewBase()
 800599c:	b590      	push	{r4, r7, lr}
 800599e:	b095      	sub	sp, #84	; 0x54
 80059a0:	af02      	add	r7, sp, #8
 80059a2:	6178      	str	r0, [r7, #20]
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	4618      	mov	r0, r3
 80059a8:	f000 f926 	bl	8005bf8 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>
 80059ac:	4a73      	ldr	r2, [pc, #460]	; (8005b7c <_ZN15Screen1ViewBaseC1Ev+0x1e0>)
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	601a      	str	r2, [r3, #0]
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	3340      	adds	r3, #64	; 0x40
 80059b6:	4618      	mov	r0, r3
 80059b8:	f7ff ff32 	bl	8005820 <_ZN8touchgfx3BoxC1Ev>
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	336c      	adds	r3, #108	; 0x6c
 80059c0:	4618      	mov	r0, r3
 80059c2:	f7ff ff2d 	bl	8005820 <_ZN8touchgfx3BoxC1Ev>
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	3398      	adds	r3, #152	; 0x98
 80059ca:	4618      	mov	r0, r3
 80059cc:	f7ff ff70 	bl	80058b0 <_ZN8touchgfx8TextAreaC1Ev>
{
    __background.setPosition(0, 0, 480, 272);
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	f103 0040 	add.w	r0, r3, #64	; 0x40
 80059d6:	f44f 7388 	mov.w	r3, #272	; 0x110
 80059da:	9300      	str	r3, [sp, #0]
 80059dc:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80059e0:	2200      	movs	r2, #0
 80059e2:	2100      	movs	r1, #0
 80059e4:	f7ff fd28 	bl	8005438 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80059ee:	2300      	movs	r3, #0
 80059f0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80059f4:	2300      	movs	r3, #0
 80059f6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80059fa:	2300      	movs	r3, #0
 80059fc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8005a00:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8005a04:	041b      	lsls	r3, r3, #16
 8005a06:	461a      	mov	r2, r3
 8005a08:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8005a0c:	021b      	lsls	r3, r3, #8
 8005a0e:	431a      	orrs	r2, r3
 8005a10:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005a14:	4313      	orrs	r3, r2
 8005a16:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005a1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005a1e:	4611      	mov	r1, r2
 8005a20:	4618      	mov	r0, r3
 8005a22:	f7ff fc6c 	bl	80052fe <_ZN8touchgfx9colortypeC1Em>
 8005a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a28:	4619      	mov	r1, r3
 8005a2a:	4620      	mov	r0, r4
 8005a2c:	f7ff ff1c 	bl	8005868 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(__background);
 8005a30:	697a      	ldr	r2, [r7, #20]
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	3340      	adds	r3, #64	; 0x40
 8005a36:	4619      	mov	r1, r3
 8005a38:	4610      	mov	r0, r2
 8005a3a:	f7ff fe8b 	bl	8005754 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    background.setPosition(0, 0, 480, 272);
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 8005a44:	f44f 7388 	mov.w	r3, #272	; 0x110
 8005a48:	9300      	str	r3, [sp, #0]
 8005a4a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8005a4e:	2200      	movs	r2, #0
 8005a50:	2100      	movs	r1, #0
 8005a52:	f7ff fcf1 	bl	8005438 <_ZN8touchgfx8Drawable11setPositionEssss>
    background.setColor(touchgfx::Color::getColorFromRGB(16, 8, 94));
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8005a5c:	2310      	movs	r3, #16
 8005a5e:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8005a62:	2308      	movs	r3, #8
 8005a64:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8005a68:	235e      	movs	r3, #94	; 0x5e
 8005a6a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8005a6e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8005a72:	041b      	lsls	r3, r3, #16
 8005a74:	461a      	mov	r2, r3
 8005a76:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005a7a:	021b      	lsls	r3, r3, #8
 8005a7c:	431a      	orrs	r2, r3
 8005a7e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8005a82:	4313      	orrs	r3, r2
 8005a84:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005a88:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005a8c:	4611      	mov	r1, r2
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f7ff fc35 	bl	80052fe <_ZN8touchgfx9colortypeC1Em>
 8005a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a96:	4619      	mov	r1, r3
 8005a98:	4620      	mov	r0, r4
 8005a9a:	f7ff fee5 	bl	8005868 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(background);
 8005a9e:	697a      	ldr	r2, [r7, #20]
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	336c      	adds	r3, #108	; 0x6c
 8005aa4:	4619      	mov	r1, r3
 8005aa6:	4610      	mov	r0, r2
 8005aa8:	f7ff fe54 	bl	8005754 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    textHello.setXY(184, 116);
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	3398      	adds	r3, #152	; 0x98
 8005ab0:	2274      	movs	r2, #116	; 0x74
 8005ab2:	21b8      	movs	r1, #184	; 0xb8
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f7ff fcfe 	bl	80054b6 <_ZN8touchgfx8Drawable5setXYEss>
    textHello.setColor(touchgfx::Color::getColorFromRGB(250, 247, 247));
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	f103 0498 	add.w	r4, r3, #152	; 0x98
 8005ac0:	23fa      	movs	r3, #250	; 0xfa
 8005ac2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005ac6:	23f7      	movs	r3, #247	; 0xf7
 8005ac8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8005acc:	23f7      	movs	r3, #247	; 0xf7
 8005ace:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8005ad2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005ad6:	041b      	lsls	r3, r3, #16
 8005ad8:	461a      	mov	r2, r3
 8005ada:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8005ade:	021b      	lsls	r3, r3, #8
 8005ae0:	431a      	orrs	r2, r3
 8005ae2:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005aec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005af0:	4611      	mov	r1, r2
 8005af2:	4618      	mov	r0, r3
 8005af4:	f7ff fc03 	bl	80052fe <_ZN8touchgfx9colortypeC1Em>
 8005af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005afa:	63fc      	str	r4, [r7, #60]	; 0x3c
 8005afc:	61bb      	str	r3, [r7, #24]
        color = newColor;
 8005afe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b00:	69ba      	ldr	r2, [r7, #24]
 8005b02:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8005b04:	bf00      	nop
    textHello.setLinespacing(0);
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	3398      	adds	r3, #152	; 0x98
 8005b0a:	647b      	str	r3, [r7, #68]	; 0x44
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        linespace = space;
 8005b12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b14:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8005b18:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 8005b1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	3384      	adds	r3, #132	; 0x84
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8005b24:	463a      	mov	r2, r7
 8005b26:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005b28:	4610      	mov	r0, r2
 8005b2a:	4798      	blx	r3
 8005b2c:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8005b30:	463a      	mov	r2, r7
 8005b32:	ca07      	ldmia	r2, {r0, r1, r2}
 8005b34:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 8005b38:	bf00      	nop
    textHello.setTypedText(touchgfx::TypedText(T___SINGLEUSE_GJT6));
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	f103 0498 	add.w	r4, r3, #152	; 0x98
 8005b40:	f107 031c 	add.w	r3, r7, #28
 8005b44:	2100      	movs	r1, #0
 8005b46:	4618      	mov	r0, r3
 8005b48:	f7ff fe9c 	bl	8005884 <_ZN8touchgfx9TypedTextC1Et>
 8005b4c:	f107 031c 	add.w	r3, r7, #28
 8005b50:	4619      	mov	r1, r3
 8005b52:	4620      	mov	r0, r4
 8005b54:	f015 fd00 	bl	801b558 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8005b58:	f107 031c 	add.w	r3, r7, #28
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	f7fe ff7b 	bl	8004a58 <_ZN8touchgfx9TypedTextD1Ev>
    add(textHello);
 8005b62:	697a      	ldr	r2, [r7, #20]
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	3398      	adds	r3, #152	; 0x98
 8005b68:	4619      	mov	r1, r3
 8005b6a:	4610      	mov	r0, r2
 8005b6c:	f7ff fdf2 	bl	8005754 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	4618      	mov	r0, r3
 8005b74:	374c      	adds	r7, #76	; 0x4c
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd90      	pop	{r4, r7, pc}
 8005b7a:	bf00      	nop
 8005b7c:	0802b6f8 	.word	0x0802b6f8

08005b80 <_ZN15Screen1ViewBaseD1Ev>:

Screen1ViewBase::~Screen1ViewBase()
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b082      	sub	sp, #8
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	4a0d      	ldr	r2, [pc, #52]	; (8005bc0 <_ZN15Screen1ViewBaseD1Ev+0x40>)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	601a      	str	r2, [r3, #0]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	3398      	adds	r3, #152	; 0x98
 8005b92:	4618      	mov	r0, r3
 8005b94:	f000 f88a 	bl	8005cac <_ZN8touchgfx8TextAreaD1Ev>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	336c      	adds	r3, #108	; 0x6c
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f000 f863 	bl	8005c68 <_ZN8touchgfx3BoxD1Ev>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	3340      	adds	r3, #64	; 0x40
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f000 f85e 	bl	8005c68 <_ZN8touchgfx3BoxD1Ev>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f7ff fed2 	bl	8005958 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
{

}
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3708      	adds	r7, #8
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}
 8005bbe:	bf00      	nop
 8005bc0:	0802b6f8 	.word	0x0802b6f8

08005bc4 <_ZN15Screen1ViewBaseD0Ev>:
Screen1ViewBase::~Screen1ViewBase()
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b082      	sub	sp, #8
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
}
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f7ff ffd7 	bl	8005b80 <_ZN15Screen1ViewBaseD1Ev>
 8005bd2:	21e0      	movs	r1, #224	; 0xe0
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f023 f96e 	bl	8028eb6 <_ZdlPvj>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3708      	adds	r7, #8
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}

08005be4 <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{
 8005be4:	b480      	push	{r7}
 8005be6:	b083      	sub	sp, #12
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]

}
 8005bec:	bf00      	nop
 8005bee:	370c      	adds	r7, #12
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr

08005bf8 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>:
    View()
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b082      	sub	sp, #8
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	4618      	mov	r0, r3
 8005c04:	f018 fcd8 	bl	801e5b8 <_ZN8touchgfx6ScreenC1Ev>
 8005c08:	4a05      	ldr	r2, [pc, #20]	; (8005c20 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev+0x28>)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	601a      	str	r2, [r3, #0]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2200      	movs	r2, #0
 8005c12:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	4618      	mov	r0, r3
 8005c18:	3708      	adds	r7, #8
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}
 8005c1e:	bf00      	nop
 8005c20:	0802b72c 	.word	0x0802b72c

08005c24 <_ZN8touchgfx9ContainerD1Ev>:
 * intersect with the geometry of the container will be visible (e.g. setting a
 * container's width to 0 will render all children invisible).
 *
 * @see Drawable
 */
class Container : public Drawable
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b082      	sub	sp, #8
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
 8005c2c:	4a05      	ldr	r2, [pc, #20]	; (8005c44 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	601a      	str	r2, [r3, #0]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4618      	mov	r0, r3
 8005c36:	f7ff fbc1 	bl	80053bc <_ZN8touchgfx8DrawableD1Ev>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3708      	adds	r7, #8
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}
 8005c44:	0802ba18 	.word	0x0802ba18

08005c48 <_ZN8touchgfx9ContainerD0Ev>:
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b082      	sub	sp, #8
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	6878      	ldr	r0, [r7, #4]
 8005c52:	f7ff ffe7 	bl	8005c24 <_ZN8touchgfx9ContainerD1Ev>
 8005c56:	212c      	movs	r1, #44	; 0x2c
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f023 f92c 	bl	8028eb6 <_ZdlPvj>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	4618      	mov	r0, r3
 8005c62:	3708      	adds	r7, #8
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}

08005c68 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b082      	sub	sp, #8
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	4a05      	ldr	r2, [pc, #20]	; (8005c88 <_ZN8touchgfx3BoxD1Ev+0x20>)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	601a      	str	r2, [r3, #0]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f7ff fdaf 	bl	80057dc <_ZN8touchgfx6WidgetD1Ev>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	4618      	mov	r0, r3
 8005c82:	3708      	adds	r7, #8
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}
 8005c88:	0802bc90 	.word	0x0802bc90

08005c8c <_ZN8touchgfx3BoxD0Ev>:
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b082      	sub	sp, #8
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	f7ff ffe7 	bl	8005c68 <_ZN8touchgfx3BoxD1Ev>
 8005c9a:	212c      	movs	r1, #44	; 0x2c
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f023 f90a 	bl	8028eb6 <_ZdlPvj>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3708      	adds	r7, #8
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}

08005cac <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b082      	sub	sp, #8
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	4a08      	ldr	r2, [pc, #32]	; (8005cd8 <_ZN8touchgfx8TextAreaD1Ev+0x2c>)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	601a      	str	r2, [r3, #0]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	3328      	adds	r3, #40	; 0x28
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f7fe feca 	bl	8004a58 <_ZN8touchgfx9TypedTextD1Ev>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f7ff fd88 	bl	80057dc <_ZN8touchgfx6WidgetD1Ev>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3708      	adds	r7, #8
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}
 8005cd6:	bf00      	nop
 8005cd8:	0802bc00 	.word	0x0802bc00

08005cdc <_ZN8touchgfx8TextAreaD0Ev>:
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b082      	sub	sp, #8
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f7ff ffe1 	bl	8005cac <_ZN8touchgfx8TextAreaD1Ev>
 8005cea:	2148      	movs	r1, #72	; 0x48
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f023 f8e2 	bl	8028eb6 <_ZdlPvj>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	3708      	adds	r7, #8
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}

08005cfc <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	4801      	ldr	r0, [pc, #4]	; (8005d08 <__tcf_0+0xc>)
 8005d02:	f7fe fe87 	bl	8004a14 <_ZN8touchgfx13GeneratedFontD1Ev>
 8005d06:	bd80      	pop	{r7, pc}
 8005d08:	24001a9c 	.word	0x24001a9c

08005d0c <_Z23getFont_verdana_10_4bppv>:
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b08e      	sub	sp, #56	; 0x38
 8005d10:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8005d12:	4b21      	ldr	r3, [pc, #132]	; (8005d98 <_Z23getFont_verdana_10_4bppv+0x8c>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f3bf 8f5b 	dmb	ish
 8005d1a:	f003 0301 	and.w	r3, r3, #1
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	bf0c      	ite	eq
 8005d22:	2301      	moveq	r3, #1
 8005d24:	2300      	movne	r3, #0
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d030      	beq.n	8005d8e <_Z23getFont_verdana_10_4bppv+0x82>
 8005d2c:	481a      	ldr	r0, [pc, #104]	; (8005d98 <_Z23getFont_verdana_10_4bppv+0x8c>)
 8005d2e:	f023 f8c4 	bl	8028eba <__cxa_guard_acquire>
 8005d32:	4603      	mov	r3, r0
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	bf14      	ite	ne
 8005d38:	2301      	movne	r3, #1
 8005d3a:	2300      	moveq	r3, #0
 8005d3c:	b2db      	uxtb	r3, r3
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d025      	beq.n	8005d8e <_Z23getFont_verdana_10_4bppv+0x82>
 8005d42:	2300      	movs	r3, #0
 8005d44:	930c      	str	r3, [sp, #48]	; 0x30
 8005d46:	2300      	movs	r3, #0
 8005d48:	930b      	str	r3, [sp, #44]	; 0x2c
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	930a      	str	r3, [sp, #40]	; 0x28
 8005d4e:	233f      	movs	r3, #63	; 0x3f
 8005d50:	9309      	str	r3, [sp, #36]	; 0x24
 8005d52:	4b12      	ldr	r3, [pc, #72]	; (8005d9c <_Z23getFont_verdana_10_4bppv+0x90>)
 8005d54:	9308      	str	r3, [sp, #32]
 8005d56:	4b12      	ldr	r3, [pc, #72]	; (8005da0 <_Z23getFont_verdana_10_4bppv+0x94>)
 8005d58:	9307      	str	r3, [sp, #28]
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	9306      	str	r3, [sp, #24]
 8005d5e:	2300      	movs	r3, #0
 8005d60:	9305      	str	r3, [sp, #20]
 8005d62:	2301      	movs	r3, #1
 8005d64:	9304      	str	r3, [sp, #16]
 8005d66:	2304      	movs	r3, #4
 8005d68:	9303      	str	r3, [sp, #12]
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	9302      	str	r3, [sp, #8]
 8005d6e:	2300      	movs	r3, #0
 8005d70:	9301      	str	r3, [sp, #4]
 8005d72:	230a      	movs	r3, #10
 8005d74:	9300      	str	r3, [sp, #0]
 8005d76:	230a      	movs	r3, #10
 8005d78:	2201      	movs	r2, #1
 8005d7a:	490a      	ldr	r1, [pc, #40]	; (8005da4 <_Z23getFont_verdana_10_4bppv+0x98>)
 8005d7c:	480a      	ldr	r0, [pc, #40]	; (8005da8 <_Z23getFont_verdana_10_4bppv+0x9c>)
 8005d7e:	f7ff fa1d 	bl	80051bc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8005d82:	480a      	ldr	r0, [pc, #40]	; (8005dac <_Z23getFont_verdana_10_4bppv+0xa0>)
 8005d84:	f023 f8e4 	bl	8028f50 <atexit>
 8005d88:	4803      	ldr	r0, [pc, #12]	; (8005d98 <_Z23getFont_verdana_10_4bppv+0x8c>)
 8005d8a:	f023 f8a2 	bl	8028ed2 <__cxa_guard_release>
    return verdana_10_4bpp;
 8005d8e:	4b06      	ldr	r3, [pc, #24]	; (8005da8 <_Z23getFont_verdana_10_4bppv+0x9c>)
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}
 8005d96:	bf00      	nop
 8005d98:	24001ac8 	.word	0x24001ac8
 8005d9c:	0802c178 	.word	0x0802c178
 8005da0:	0802c188 	.word	0x0802c188
 8005da4:	90000364 	.word	0x90000364
 8005da8:	24001a9c 	.word	0x24001a9c
 8005dac:	08005cfd 	.word	0x08005cfd

08005db0 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 9, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8005db0:	b580      	push	{r7, lr}
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	4801      	ldr	r0, [pc, #4]	; (8005dbc <__tcf_0+0xc>)
 8005db6:	f7fe fe2d 	bl	8004a14 <_ZN8touchgfx13GeneratedFontD1Ev>
 8005dba:	bd80      	pop	{r7, pc}
 8005dbc:	24001acc 	.word	0x24001acc

08005dc0 <_Z23getFont_verdana_20_4bppv>:
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b08e      	sub	sp, #56	; 0x38
 8005dc4:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 9, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8005dc6:	4b21      	ldr	r3, [pc, #132]	; (8005e4c <_Z23getFont_verdana_20_4bppv+0x8c>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f3bf 8f5b 	dmb	ish
 8005dce:	f003 0301 	and.w	r3, r3, #1
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	bf0c      	ite	eq
 8005dd6:	2301      	moveq	r3, #1
 8005dd8:	2300      	movne	r3, #0
 8005dda:	b2db      	uxtb	r3, r3
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d030      	beq.n	8005e42 <_Z23getFont_verdana_20_4bppv+0x82>
 8005de0:	481a      	ldr	r0, [pc, #104]	; (8005e4c <_Z23getFont_verdana_20_4bppv+0x8c>)
 8005de2:	f023 f86a 	bl	8028eba <__cxa_guard_acquire>
 8005de6:	4603      	mov	r3, r0
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	bf14      	ite	ne
 8005dec:	2301      	movne	r3, #1
 8005dee:	2300      	moveq	r3, #0
 8005df0:	b2db      	uxtb	r3, r3
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d025      	beq.n	8005e42 <_Z23getFont_verdana_20_4bppv+0x82>
 8005df6:	2300      	movs	r3, #0
 8005df8:	930c      	str	r3, [sp, #48]	; 0x30
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	930b      	str	r3, [sp, #44]	; 0x2c
 8005dfe:	2300      	movs	r3, #0
 8005e00:	930a      	str	r3, [sp, #40]	; 0x28
 8005e02:	233f      	movs	r3, #63	; 0x3f
 8005e04:	9309      	str	r3, [sp, #36]	; 0x24
 8005e06:	4b12      	ldr	r3, [pc, #72]	; (8005e50 <_Z23getFont_verdana_20_4bppv+0x90>)
 8005e08:	9308      	str	r3, [sp, #32]
 8005e0a:	4b12      	ldr	r3, [pc, #72]	; (8005e54 <_Z23getFont_verdana_20_4bppv+0x94>)
 8005e0c:	9307      	str	r3, [sp, #28]
 8005e0e:	2300      	movs	r3, #0
 8005e10:	9306      	str	r3, [sp, #24]
 8005e12:	2300      	movs	r3, #0
 8005e14:	9305      	str	r3, [sp, #20]
 8005e16:	2301      	movs	r3, #1
 8005e18:	9304      	str	r3, [sp, #16]
 8005e1a:	2304      	movs	r3, #4
 8005e1c:	9303      	str	r3, [sp, #12]
 8005e1e:	2300      	movs	r3, #0
 8005e20:	9302      	str	r3, [sp, #8]
 8005e22:	2300      	movs	r3, #0
 8005e24:	9301      	str	r3, [sp, #4]
 8005e26:	2314      	movs	r3, #20
 8005e28:	9300      	str	r3, [sp, #0]
 8005e2a:	2314      	movs	r3, #20
 8005e2c:	2209      	movs	r2, #9
 8005e2e:	490a      	ldr	r1, [pc, #40]	; (8005e58 <_Z23getFont_verdana_20_4bppv+0x98>)
 8005e30:	480a      	ldr	r0, [pc, #40]	; (8005e5c <_Z23getFont_verdana_20_4bppv+0x9c>)
 8005e32:	f7ff f9c3 	bl	80051bc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8005e36:	480a      	ldr	r0, [pc, #40]	; (8005e60 <_Z23getFont_verdana_20_4bppv+0xa0>)
 8005e38:	f023 f88a 	bl	8028f50 <atexit>
 8005e3c:	4803      	ldr	r0, [pc, #12]	; (8005e4c <_Z23getFont_verdana_20_4bppv+0x8c>)
 8005e3e:	f023 f848 	bl	8028ed2 <__cxa_guard_release>
    return verdana_20_4bpp;
 8005e42:	4b06      	ldr	r3, [pc, #24]	; (8005e5c <_Z23getFont_verdana_20_4bppv+0x9c>)
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}
 8005e4a:	bf00      	nop
 8005e4c:	24001af8 	.word	0x24001af8
 8005e50:	0802c17c 	.word	0x0802c17c
 8005e54:	0802c18c 	.word	0x0802c18c
 8005e58:	90000374 	.word	0x90000374
 8005e5c:	24001acc 	.word	0x24001acc
 8005e60:	08005db1 	.word	0x08005db1

08005e64 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8005e64:	b580      	push	{r7, lr}
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	4801      	ldr	r0, [pc, #4]	; (8005e70 <__tcf_0+0xc>)
 8005e6a:	f7fe fdd3 	bl	8004a14 <_ZN8touchgfx13GeneratedFontD1Ev>
 8005e6e:	bd80      	pop	{r7, pc}
 8005e70:	24001afc 	.word	0x24001afc

08005e74 <_Z23getFont_verdana_40_4bppv>:
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b08e      	sub	sp, #56	; 0x38
 8005e78:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8005e7a:	4b21      	ldr	r3, [pc, #132]	; (8005f00 <_Z23getFont_verdana_40_4bppv+0x8c>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f3bf 8f5b 	dmb	ish
 8005e82:	f003 0301 	and.w	r3, r3, #1
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	bf0c      	ite	eq
 8005e8a:	2301      	moveq	r3, #1
 8005e8c:	2300      	movne	r3, #0
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d030      	beq.n	8005ef6 <_Z23getFont_verdana_40_4bppv+0x82>
 8005e94:	481a      	ldr	r0, [pc, #104]	; (8005f00 <_Z23getFont_verdana_40_4bppv+0x8c>)
 8005e96:	f023 f810 	bl	8028eba <__cxa_guard_acquire>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	bf14      	ite	ne
 8005ea0:	2301      	movne	r3, #1
 8005ea2:	2300      	moveq	r3, #0
 8005ea4:	b2db      	uxtb	r3, r3
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d025      	beq.n	8005ef6 <_Z23getFont_verdana_40_4bppv+0x82>
 8005eaa:	2300      	movs	r3, #0
 8005eac:	930c      	str	r3, [sp, #48]	; 0x30
 8005eae:	2300      	movs	r3, #0
 8005eb0:	930b      	str	r3, [sp, #44]	; 0x2c
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	930a      	str	r3, [sp, #40]	; 0x28
 8005eb6:	233f      	movs	r3, #63	; 0x3f
 8005eb8:	9309      	str	r3, [sp, #36]	; 0x24
 8005eba:	4b12      	ldr	r3, [pc, #72]	; (8005f04 <_Z23getFont_verdana_40_4bppv+0x90>)
 8005ebc:	9308      	str	r3, [sp, #32]
 8005ebe:	4b12      	ldr	r3, [pc, #72]	; (8005f08 <_Z23getFont_verdana_40_4bppv+0x94>)
 8005ec0:	9307      	str	r3, [sp, #28]
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	9306      	str	r3, [sp, #24]
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	9305      	str	r3, [sp, #20]
 8005eca:	2301      	movs	r3, #1
 8005ecc:	9304      	str	r3, [sp, #16]
 8005ece:	2304      	movs	r3, #4
 8005ed0:	9303      	str	r3, [sp, #12]
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	9302      	str	r3, [sp, #8]
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	9301      	str	r3, [sp, #4]
 8005eda:	2328      	movs	r3, #40	; 0x28
 8005edc:	9300      	str	r3, [sp, #0]
 8005ede:	2328      	movs	r3, #40	; 0x28
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	490a      	ldr	r1, [pc, #40]	; (8005f0c <_Z23getFont_verdana_40_4bppv+0x98>)
 8005ee4:	480a      	ldr	r0, [pc, #40]	; (8005f10 <_Z23getFont_verdana_40_4bppv+0x9c>)
 8005ee6:	f7ff f969 	bl	80051bc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8005eea:	480a      	ldr	r0, [pc, #40]	; (8005f14 <_Z23getFont_verdana_40_4bppv+0xa0>)
 8005eec:	f023 f830 	bl	8028f50 <atexit>
 8005ef0:	4803      	ldr	r0, [pc, #12]	; (8005f00 <_Z23getFont_verdana_40_4bppv+0x8c>)
 8005ef2:	f022 ffee 	bl	8028ed2 <__cxa_guard_release>
    return verdana_40_4bpp;
 8005ef6:	4b06      	ldr	r3, [pc, #24]	; (8005f10 <_Z23getFont_verdana_40_4bppv+0x9c>)
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	bf00      	nop
 8005f00:	24001b28 	.word	0x24001b28
 8005f04:	0802c184 	.word	0x0802c184
 8005f08:	0802c190 	.word	0x0802c190
 8005f0c:	900003f4 	.word	0x900003f4
 8005f10:	24001afc 	.word	0x24001afc
 8005f14:	08005e65 	.word	0x08005e65

08005f18 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 8005f18:	b480      	push	{r7}
 8005f1a:	b085      	sub	sp, #20
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	60f8      	str	r0, [r7, #12]
 8005f20:	460b      	mov	r3, r1
 8005f22:	607a      	str	r2, [r7, #4]
 8005f24:	817b      	strh	r3, [r7, #10]
    {
        (void)prevChar; // Unused variable
        (void)glyph;    // Unused variable
        return 0;
 8005f26:	2300      	movs	r3, #0
    }
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3714      	adds	r7, #20
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr

08005f34 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 8005f34:	b480      	push	{r7}
 8005f36:	b083      	sub	sp, #12
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8005f3c:	2300      	movs	r3, #0
    }
 8005f3e:	4618      	mov	r0, r3
 8005f40:	370c      	adds	r7, #12
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr

08005f4a <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 8005f4a:	b480      	push	{r7}
 8005f4c:	b083      	sub	sp, #12
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8005f52:	2300      	movs	r3, #0
    }
 8005f54:	4618      	mov	r0, r3
 8005f56:	370c      	adds	r7, #12
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr

08005f60 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 8005f60:	b480      	push	{r7}
 8005f62:	b085      	sub	sp, #20
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	60f8      	str	r0, [r7, #12]
 8005f68:	60b9      	str	r1, [r7, #8]
 8005f6a:	4613      	mov	r3, r2
 8005f6c:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 8005f6e:	4a07      	ldr	r2, [pc, #28]	; (8005f8c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	6013      	str	r3, [r2, #0]
        fonts = f;
 8005f74:	4a06      	ldr	r2, [pc, #24]	; (8005f90 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 8005f7a:	4a06      	ldr	r2, [pc, #24]	; (8005f94 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 8005f7c:	88fb      	ldrh	r3, [r7, #6]
 8005f7e:	8013      	strh	r3, [r2, #0]
    }
 8005f80:	bf00      	nop
 8005f82:	3714      	adds	r7, #20
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr
 8005f8c:	2400703c 	.word	0x2400703c
 8005f90:	24007044 	.word	0x24007044
 8005f94:	24007040 	.word	0x24007040

08005f98 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8005f98:	b40e      	push	{r1, r2, r3}
 8005f9a:	b580      	push	{r7, lr}
 8005f9c:	b085      	sub	sp, #20
 8005f9e:	af00      	add	r7, sp, #0
 8005fa0:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 8005fa2:	f107 0320 	add.w	r3, r7, #32
 8005fa6:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	69fa      	ldr	r2, [r7, #28]
 8005fac:	2100      	movs	r1, #0
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f017 ff38 	bl	801de24 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8005fb8:	89fb      	ldrh	r3, [r7, #14]
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3714      	adds	r7, #20
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005fc4:	b003      	add	sp, #12
 8005fc6:	4770      	bx	lr

08005fc8 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8005fc8:	b40c      	push	{r2, r3}
 8005fca:	b580      	push	{r7, lr}
 8005fcc:	b084      	sub	sp, #16
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	6078      	str	r0, [r7, #4]
 8005fd2:	460b      	mov	r3, r1
 8005fd4:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 8005fd6:	f107 031c 	add.w	r3, r7, #28
 8005fda:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8005fdc:	78f9      	ldrb	r1, [r7, #3]
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	69ba      	ldr	r2, [r7, #24]
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f017 ff1e 	bl	801de24 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8005fec:	89fb      	ldrh	r3, [r7, #14]
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3710      	adds	r7, #16
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005ff8:	b002      	add	sp, #8
 8005ffa:	4770      	bx	lr

08005ffc <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b08a      	sub	sp, #40	; 0x28
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	460b      	mov	r3, r1
 8006006:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800600c:	2b00      	cmp	r3, #0
 800600e:	d016      	beq.n	800603e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	3322      	adds	r3, #34	; 0x22
 8006014:	627b      	str	r3, [r7, #36]	; 0x24
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8006016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006018:	8adb      	ldrh	r3, [r3, #22]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d105      	bne.n	800602a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 800601e:	4b43      	ldr	r3, [pc, #268]	; (800612c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8006020:	4a43      	ldr	r2, [pc, #268]	; (8006130 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8006022:	21c5      	movs	r1, #197	; 0xc5
 8006024:	4843      	ldr	r0, [pc, #268]	; (8006134 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8006026:	f022 ff75 	bl	8028f14 <__assert_func>
            return buffer[pos];
 800602a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800602c:	8a9b      	ldrh	r3, [r3, #20]
 800602e:	461a      	mov	r2, r3
 8006030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006032:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d001      	beq.n	800603e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 800603a:	2301      	movs	r3, #1
 800603c:	e000      	b.n	8006040 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 800603e:	2300      	movs	r3, #0
 8006040:	2b00      	cmp	r3, #0
 8006042:	d06a      	beq.n	800611a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f019 f993 	bl	801f370 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	3322      	adds	r3, #34	; 0x22
 800604e:	623b      	str	r3, [r7, #32]
 8006050:	2301      	movs	r3, #1
 8006052:	83fb      	strh	r3, [r7, #30]
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8006054:	6a3b      	ldr	r3, [r7, #32]
 8006056:	8adb      	ldrh	r3, [r3, #22]
 8006058:	8bfa      	ldrh	r2, [r7, #30]
 800605a:	429a      	cmp	r2, r3
 800605c:	d305      	bcc.n	800606a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 800605e:	4b36      	ldr	r3, [pc, #216]	; (8006138 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 8006060:	4a36      	ldr	r2, [pc, #216]	; (800613c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 8006062:	21cb      	movs	r1, #203	; 0xcb
 8006064:	4833      	ldr	r0, [pc, #204]	; (8006134 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8006066:	f022 ff55 	bl	8028f14 <__assert_func>
            const uint16_t index = pos + offset;
 800606a:	6a3b      	ldr	r3, [r7, #32]
 800606c:	8a9a      	ldrh	r2, [r3, #20]
 800606e:	8bfb      	ldrh	r3, [r7, #30]
 8006070:	4413      	add	r3, r2
 8006072:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 8006074:	8bbb      	ldrh	r3, [r7, #28]
 8006076:	2b09      	cmp	r3, #9
 8006078:	d801      	bhi.n	800607e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 800607a:	8bbb      	ldrh	r3, [r7, #28]
 800607c:	e001      	b.n	8006082 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 800607e:	8bbb      	ldrh	r3, [r7, #28]
 8006080:	3b0a      	subs	r3, #10
 8006082:	6a3a      	ldr	r2, [r7, #32]
 8006084:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006088:	f640 123f 	movw	r2, #2367	; 0x93f
 800608c:	4293      	cmp	r3, r2
 800608e:	bf0c      	ite	eq
 8006090:	2301      	moveq	r3, #1
 8006092:	2300      	movne	r3, #0
 8006094:	b2db      	uxtb	r3, r3
 8006096:	2b00      	cmp	r3, #0
 8006098:	d03f      	beq.n	800611a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	3322      	adds	r3, #34	; 0x22
 800609e:	687a      	ldr	r2, [r7, #4]
 80060a0:	3222      	adds	r2, #34	; 0x22
 80060a2:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 80060a4:	68ba      	ldr	r2, [r7, #8]
 80060a6:	8ad2      	ldrh	r2, [r2, #22]
 80060a8:	2a00      	cmp	r2, #0
 80060aa:	d105      	bne.n	80060b8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 80060ac:	4b1f      	ldr	r3, [pc, #124]	; (800612c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 80060ae:	4a20      	ldr	r2, [pc, #128]	; (8006130 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 80060b0:	21c5      	movs	r1, #197	; 0xc5
 80060b2:	4820      	ldr	r0, [pc, #128]	; (8006134 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 80060b4:	f022 ff2e 	bl	8028f14 <__assert_func>
            return buffer[pos];
 80060b8:	68ba      	ldr	r2, [r7, #8]
 80060ba:	8a92      	ldrh	r2, [r2, #20]
 80060bc:	4611      	mov	r1, r2
 80060be:	68ba      	ldr	r2, [r7, #8]
 80060c0:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80060c4:	613b      	str	r3, [r7, #16]
 80060c6:	4613      	mov	r3, r2
 80060c8:	81fb      	strh	r3, [r7, #14]
            buffer[pos] = newChar;
        }

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	8adb      	ldrh	r3, [r3, #22]
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d806      	bhi.n	80060e0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 80060d2:	4b1b      	ldr	r3, [pc, #108]	; (8006140 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 80060d4:	4a1b      	ldr	r2, [pc, #108]	; (8006144 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 80060d6:	f44f 718e 	mov.w	r1, #284	; 0x11c
 80060da:	4816      	ldr	r0, [pc, #88]	; (8006134 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 80060dc:	f022 ff1a 	bl	8028f14 <__assert_func>
            const uint16_t index = pos + 1;
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	8a9b      	ldrh	r3, [r3, #20]
 80060e4:	3301      	adds	r3, #1
 80060e6:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 80060e8:	89bb      	ldrh	r3, [r7, #12]
 80060ea:	2b09      	cmp	r3, #9
 80060ec:	d801      	bhi.n	80060f2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 80060ee:	89bb      	ldrh	r3, [r7, #12]
 80060f0:	e000      	b.n	80060f4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 80060f2:	2300      	movs	r3, #0
 80060f4:	693a      	ldr	r2, [r7, #16]
 80060f6:	89f9      	ldrh	r1, [r7, #14]
 80060f8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 80060fc:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	3322      	adds	r3, #34	; 0x22
 8006102:	61bb      	str	r3, [r7, #24]
 8006104:	f640 133f 	movw	r3, #2367	; 0x93f
 8006108:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 800610a:	69bb      	ldr	r3, [r7, #24]
 800610c:	8a9b      	ldrh	r3, [r3, #20]
 800610e:	4619      	mov	r1, r3
 8006110:	69bb      	ldr	r3, [r7, #24]
 8006112:	8afa      	ldrh	r2, [r7, #22]
 8006114:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 8006118:	bf00      	nop
        }
    }
    return getNextChar();
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f019 f82a 	bl	801f174 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8006120:	4603      	mov	r3, r0
}
 8006122:	4618      	mov	r0, r3
 8006124:	3728      	adds	r7, #40	; 0x28
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}
 800612a:	bf00      	nop
 800612c:	0802adbc 	.word	0x0802adbc
 8006130:	0802adc8 	.word	0x0802adc8
 8006134:	0802ae74 	.word	0x0802ae74
 8006138:	0802aec0 	.word	0x0802aec0
 800613c:	0802aed0 	.word	0x0802aed0
 8006140:	0802afa4 	.word	0x0802afa4
 8006144:	0802afb0 	.word	0x0802afb0

08006148 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b082      	sub	sp, #8
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f018 ffd8 	bl	801f106 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 8006156:	bf00      	nop
 8006158:	3708      	adds	r7, #8
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}

0800615e <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 800615e:	b580      	push	{r7, lr}
 8006160:	b088      	sub	sp, #32
 8006162:	af02      	add	r7, sp, #8
 8006164:	60f8      	str	r0, [r7, #12]
 8006166:	1d38      	adds	r0, r7, #4
 8006168:	e880 0006 	stmia.w	r0, {r1, r2}
 800616c:	603b      	str	r3, [r7, #0]
    va_list pArg;
    va_start(pArg, format);
 800616e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006172:	617b      	str	r3, [r7, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8006174:	1d39      	adds	r1, r7, #4
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	9301      	str	r3, [sp, #4]
 800617a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800617c:	9300      	str	r3, [sp, #0]
 800617e:	6a3b      	ldr	r3, [r7, #32]
 8006180:	683a      	ldr	r2, [r7, #0]
 8006182:	68f8      	ldr	r0, [r7, #12]
 8006184:	f016 faa8 	bl	801c6d8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 8006188:	bf00      	nop
 800618a:	3718      	adds	r7, #24
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}

08006190 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8006190:	b590      	push	{r4, r7, lr}
 8006192:	b085      	sub	sp, #20
 8006194:	af00      	add	r7, sp, #0
 8006196:	4603      	mov	r3, r0
 8006198:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 800619a:	2300      	movs	r3, #0
 800619c:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 800619e:	88fb      	ldrh	r3, [r7, #6]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d127      	bne.n	80061f4 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 80061a4:	88fb      	ldrh	r3, [r7, #6]
 80061a6:	4a1e      	ldr	r2, [pc, #120]	; (8006220 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 80061a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d016      	beq.n	80061de <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 80061b0:	88fb      	ldrh	r3, [r7, #6]
 80061b2:	4a1b      	ldr	r2, [pc, #108]	; (8006220 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 80061b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061b8:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	68ba      	ldr	r2, [r7, #8]
 80061c0:	4413      	add	r3, r2
 80061c2:	4a18      	ldr	r2, [pc, #96]	; (8006224 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 80061c4:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	68ba      	ldr	r2, [r7, #8]
 80061cc:	4413      	add	r3, r2
 80061ce:	4a16      	ldr	r2, [pc, #88]	; (8006228 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 80061d0:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	689b      	ldr	r3, [r3, #8]
 80061d6:	68ba      	ldr	r2, [r7, #8]
 80061d8:	4413      	add	r3, r2
 80061da:	60fb      	str	r3, [r7, #12]
 80061dc:	e00a      	b.n	80061f4 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 80061de:	4b11      	ldr	r3, [pc, #68]	; (8006224 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 80061e0:	4a12      	ldr	r2, [pc, #72]	; (800622c <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 80061e2:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 80061e4:	4a12      	ldr	r2, [pc, #72]	; (8006230 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 80061e6:	4b10      	ldr	r3, [pc, #64]	; (8006228 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 80061e8:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 80061ea:	88fb      	ldrh	r3, [r7, #6]
 80061ec:	4a11      	ldr	r2, [pc, #68]	; (8006234 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 80061ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061f2:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d00d      	beq.n	8006216 <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 80061fa:	4a0f      	ldr	r2, [pc, #60]	; (8006238 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 80061fc:	88fb      	ldrh	r3, [r7, #6]
 80061fe:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8006200:	f000 f83e 	bl	8006280 <_ZN17TypedTextDatabase8getFontsEv>
 8006204:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8006206:	f000 f833 	bl	8006270 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 800620a:	4603      	mov	r3, r0
 800620c:	461a      	mov	r2, r3
 800620e:	4621      	mov	r1, r4
 8006210:	68f8      	ldr	r0, [r7, #12]
 8006212:	f7ff fea5 	bl	8005f60 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 8006216:	bf00      	nop
 8006218:	3714      	adds	r7, #20
 800621a:	46bd      	mov	sp, r7
 800621c:	bd90      	pop	{r4, r7, pc}
 800621e:	bf00      	nop
 8006220:	24001b2c 	.word	0x24001b2c
 8006224:	24001b34 	.word	0x24001b34
 8006228:	24001b38 	.word	0x24001b38
 800622c:	90000408 	.word	0x90000408
 8006230:	90000404 	.word	0x90000404
 8006234:	90000424 	.word	0x90000424
 8006238:	24001b30 	.word	0x24001b30

0800623c <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 800623c:	b480      	push	{r7}
 800623e:	b083      	sub	sp, #12
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	460b      	mov	r3, r1
 8006246:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8006248:	4b07      	ldr	r3, [pc, #28]	; (8006268 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 800624a:	681a      	ldr	r2, [r3, #0]
 800624c:	4b07      	ldr	r3, [pc, #28]	; (800626c <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 800624e:	6819      	ldr	r1, [r3, #0]
 8006250:	887b      	ldrh	r3, [r7, #2]
 8006252:	009b      	lsls	r3, r3, #2
 8006254:	440b      	add	r3, r1
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	005b      	lsls	r3, r3, #1
 800625a:	4413      	add	r3, r2
}
 800625c:	4618      	mov	r0, r3
 800625e:	370c      	adds	r7, #12
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr
 8006268:	24001b34 	.word	0x24001b34
 800626c:	24001b38 	.word	0x24001b38

08006270 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 8006270:	b480      	push	{r7}
 8006272:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 8006274:	2301      	movs	r3, #1
}
 8006276:	4618      	mov	r0, r3
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr

08006280 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 8006280:	b480      	push	{r7}
 8006282:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 8006284:	4b02      	ldr	r3, [pc, #8]	; (8006290 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 8006286:	4618      	mov	r0, r3
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr
 8006290:	24001b3c 	.word	0x24001b3c

08006294 <_Z41__static_initialization_and_destruction_0ii>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8006294:	b580      	push	{r7, lr}
 8006296:	b082      	sub	sp, #8
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
 800629c:	6039      	str	r1, [r7, #0]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	d113      	bne.n	80062cc <_Z41__static_initialization_and_destruction_0ii+0x38>
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d10e      	bne.n	80062cc <_Z41__static_initialization_and_destruction_0ii+0x38>
    &(getFont_verdana_20_4bpp()),
 80062ae:	f7ff fd87 	bl	8005dc0 <_Z23getFont_verdana_20_4bppv>
 80062b2:	4603      	mov	r3, r0
};
 80062b4:	4a07      	ldr	r2, [pc, #28]	; (80062d4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80062b6:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 80062b8:	f7ff fddc 	bl	8005e74 <_Z23getFont_verdana_40_4bppv>
 80062bc:	4603      	mov	r3, r0
};
 80062be:	4a05      	ldr	r2, [pc, #20]	; (80062d4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80062c0:	6053      	str	r3, [r2, #4]
    &(getFont_verdana_10_4bpp())
 80062c2:	f7ff fd23 	bl	8005d0c <_Z23getFont_verdana_10_4bppv>
 80062c6:	4603      	mov	r3, r0
};
 80062c8:	4a02      	ldr	r2, [pc, #8]	; (80062d4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80062ca:	6093      	str	r3, [r2, #8]
} // namespace TypedTextDatabase
 80062cc:	bf00      	nop
 80062ce:	3708      	adds	r7, #8
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}
 80062d4:	24001b3c 	.word	0x24001b3c

080062d8 <_GLOBAL__sub_I_touchgfx_fonts>:
 80062d8:	b580      	push	{r7, lr}
 80062da:	af00      	add	r7, sp, #0
 80062dc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80062e0:	2001      	movs	r0, #1
 80062e2:	f7ff ffd7 	bl	8006294 <_Z41__static_initialization_and_destruction_0ii>
 80062e6:	bd80      	pop	{r7, pc}

080062e8 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b084      	sub	sp, #16
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	60f8      	str	r0, [r7, #12]
 80062f0:	60b9      	str	r1, [r7, #8]
 80062f2:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	687a      	ldr	r2, [r7, #4]
 80062f8:	68b9      	ldr	r1, [r7, #8]
 80062fa:	4618      	mov	r0, r3
 80062fc:	f7fe fcbe 	bl	8004c7c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8006300:	4a03      	ldr	r2, [pc, #12]	; (8006310 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	601a      	str	r2, [r3, #0]
{

}
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	4618      	mov	r0, r3
 800630a:	3710      	adds	r7, #16
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}
 8006310:	0802b3c8 	.word	0x0802b3c8

08006314 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 8006314:	b480      	push	{r7}
 8006316:	b083      	sub	sp, #12
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2200      	movs	r2, #0
 8006320:	601a      	str	r2, [r3, #0]
{

}
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	4618      	mov	r0, r3
 8006326:	370c      	adds	r7, #12
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr

08006330 <_ZN5Model4tickEv>:

void Model::tick()
{
 8006330:	b480      	push	{r7}
 8006332:	b083      	sub	sp, #12
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]

}
 8006338:	bf00      	nop
 800633a:	370c      	adds	r7, #12
 800633c:	46bd      	mov	sp, r7
 800633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006342:	4770      	bx	lr

08006344 <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 8006344:	b480      	push	{r7}
 8006346:	b083      	sub	sp, #12
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
    {
    }
 800634c:	bf00      	nop
 800634e:	370c      	adds	r7, #12
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr

08006358 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 8006358:	b480      	push	{r7}
 800635a:	b083      	sub	sp, #12
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
    {
    }
 8006360:	bf00      	nop
 8006362:	370c      	adds	r7, #12
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr

0800636c <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 800636c:	b480      	push	{r7}
 800636e:	b083      	sub	sp, #12
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
    {
 8006374:	4a04      	ldr	r2, [pc, #16]	; (8006388 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	601a      	str	r2, [r3, #0]
    }
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	4618      	mov	r0, r3
 800637e:	370c      	adds	r7, #12
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr
 8006388:	0802b85c 	.word	0x0802b85c

0800638c <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 800638c:	b580      	push	{r7, lr}
 800638e:	b082      	sub	sp, #8
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
    }
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f7ff ffe9 	bl	800636c <_ZN8touchgfx9PresenterD1Ev>
 800639a:	2104      	movs	r1, #4
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f022 fd8a 	bl	8028eb6 <_ZdlPvj>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	4618      	mov	r0, r3
 80063a6:	3708      	adds	r7, #8
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}

080063ac <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 80063ac:	b480      	push	{r7}
 80063ae:	b083      	sub	sp, #12
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
    {
 80063b4:	4a04      	ldr	r2, [pc, #16]	; (80063c8 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	601a      	str	r2, [r3, #0]
    }
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	4618      	mov	r0, r3
 80063be:	370c      	adds	r7, #12
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr
 80063c8:	0802b85c 	.word	0x0802b85c

080063cc <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 80063cc:	b480      	push	{r7}
 80063ce:	b083      	sub	sp, #12
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	4a06      	ldr	r2, [pc, #24]	; (80063f0 <_ZN13ModelListenerC1Ev+0x24>)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	601a      	str	r2, [r3, #0]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2200      	movs	r2, #0
 80063de:	605a      	str	r2, [r3, #4]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	4618      	mov	r0, r3
 80063e4:	370c      	adds	r7, #12
 80063e6:	46bd      	mov	sp, r7
 80063e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ec:	4770      	bx	lr
 80063ee:	bf00      	nop
 80063f0:	0802b84c 	.word	0x0802b84c

080063f4 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 80063f4:	b480      	push	{r7}
 80063f6:	b083      	sub	sp, #12
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	4a04      	ldr	r2, [pc, #16]	; (8006410 <_ZN13ModelListenerD1Ev+0x1c>)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	601a      	str	r2, [r3, #0]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	4618      	mov	r0, r3
 8006406:	370c      	adds	r7, #12
 8006408:	46bd      	mov	sp, r7
 800640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640e:	4770      	bx	lr
 8006410:	0802b84c 	.word	0x0802b84c

08006414 <_ZN13ModelListenerD0Ev>:
 8006414:	b580      	push	{r7, lr}
 8006416:	b082      	sub	sp, #8
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f7ff ffe9 	bl	80063f4 <_ZN13ModelListenerD1Ev>
 8006422:	2108      	movs	r1, #8
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f022 fd46 	bl	8028eb6 <_ZdlPvj>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	4618      	mov	r0, r3
 800642e:	3708      	adds	r7, #8
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}

08006434 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {}
 8006434:	b580      	push	{r7, lr}
 8006436:	b082      	sub	sp, #8
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	4a09      	ldr	r2, [pc, #36]	; (8006464 <_ZN16Screen1PresenterD1Ev+0x30>)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	601a      	str	r2, [r3, #0]
 8006442:	4a09      	ldr	r2, [pc, #36]	; (8006468 <_ZN16Screen1PresenterD1Ev+0x34>)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	605a      	str	r2, [r3, #4]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	3304      	adds	r3, #4
 800644c:	4618      	mov	r0, r3
 800644e:	f7ff ffd1 	bl	80063f4 <_ZN13ModelListenerD1Ev>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	4618      	mov	r0, r3
 8006456:	f7ff ff89 	bl	800636c <_ZN8touchgfx9PresenterD1Ev>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	4618      	mov	r0, r3
 800645e:	3708      	adds	r7, #8
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}
 8006464:	0802b824 	.word	0x0802b824
 8006468:	0802b83c 	.word	0x0802b83c

0800646c <_ZThn4_N16Screen1PresenterD1Ev>:
 800646c:	f1a0 0004 	sub.w	r0, r0, #4
 8006470:	e7e0      	b.n	8006434 <_ZN16Screen1PresenterD1Ev>
 8006472:	bf00      	nop

08006474 <_ZN16Screen1PresenterD0Ev>:
 8006474:	b580      	push	{r7, lr}
 8006476:	b082      	sub	sp, #8
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f7ff ffd9 	bl	8006434 <_ZN16Screen1PresenterD1Ev>
 8006482:	2110      	movs	r1, #16
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f022 fd16 	bl	8028eb6 <_ZdlPvj>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	4618      	mov	r0, r3
 800648e:	3708      	adds	r7, #8
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}

08006494 <_ZThn4_N16Screen1PresenterD0Ev>:
 8006494:	f1a0 0004 	sub.w	r0, r0, #4
 8006498:	e7ec      	b.n	8006474 <_ZN16Screen1PresenterD0Ev>
	...

0800649c <_ZN16Screen1PresenterC1ER11Screen1View>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

Screen1Presenter::Screen1Presenter(Screen1View& v)
 800649c:	b580      	push	{r7, lr}
 800649e:	b082      	sub	sp, #8
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	6039      	str	r1, [r7, #0]
    : view(v)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	4618      	mov	r0, r3
 80064aa:	f7ff ff7f 	bl	80063ac <_ZN8touchgfx9PresenterC1Ev>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	3304      	adds	r3, #4
 80064b2:	4618      	mov	r0, r3
 80064b4:	f7ff ff8a 	bl	80063cc <_ZN13ModelListenerC1Ev>
 80064b8:	4a06      	ldr	r2, [pc, #24]	; (80064d4 <_ZN16Screen1PresenterC1ER11Screen1View+0x38>)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	601a      	str	r2, [r3, #0]
 80064be:	4a06      	ldr	r2, [pc, #24]	; (80064d8 <_ZN16Screen1PresenterC1ER11Screen1View+0x3c>)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	605a      	str	r2, [r3, #4]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	683a      	ldr	r2, [r7, #0]
 80064c8:	60da      	str	r2, [r3, #12]
{

}
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	4618      	mov	r0, r3
 80064ce:	3708      	adds	r7, #8
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}
 80064d4:	0802b824 	.word	0x0802b824
 80064d8:	0802b83c 	.word	0x0802b83c

080064dc <_ZN16Screen1Presenter8activateEv>:

void Screen1Presenter::activate()
{
 80064dc:	b480      	push	{r7}
 80064de:	b083      	sub	sp, #12
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]

}
 80064e4:	bf00      	nop
 80064e6:	370c      	adds	r7, #12
 80064e8:	46bd      	mov	sp, r7
 80064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ee:	4770      	bx	lr

080064f0 <_ZN16Screen1Presenter10deactivateEv>:

void Screen1Presenter::deactivate()
{
 80064f0:	b480      	push	{r7}
 80064f2:	b083      	sub	sp, #12
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]

}
 80064f8:	bf00      	nop
 80064fa:	370c      	adds	r7, #12
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr

08006504 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 8006504:	b580      	push	{r7, lr}
 8006506:	b082      	sub	sp, #8
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	4a05      	ldr	r2, [pc, #20]	; (8006524 <_ZN11Screen1ViewD1Ev+0x20>)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	601a      	str	r2, [r3, #0]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	4618      	mov	r0, r3
 8006516:	f7ff fb33 	bl	8005b80 <_ZN15Screen1ViewBaseD1Ev>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	4618      	mov	r0, r3
 800651e:	3708      	adds	r7, #8
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}
 8006524:	0802b874 	.word	0x0802b874

08006528 <_ZN11Screen1ViewD0Ev>:
 8006528:	b580      	push	{r7, lr}
 800652a:	b082      	sub	sp, #8
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f7ff ffe7 	bl	8006504 <_ZN11Screen1ViewD1Ev>
 8006536:	21e0      	movs	r1, #224	; 0xe0
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f022 fcbc 	bl	8028eb6 <_ZdlPvj>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	4618      	mov	r0, r3
 8006542:	3708      	adds	r7, #8
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}

08006548 <_ZN11Screen1ViewC1Ev>:
#include <gui/screen1_screen/Screen1View.hpp>

Screen1View::Screen1View()
 8006548:	b580      	push	{r7, lr}
 800654a:	b082      	sub	sp, #8
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	4618      	mov	r0, r3
 8006554:	f7ff fa22 	bl	800599c <_ZN15Screen1ViewBaseC1Ev>
 8006558:	4a03      	ldr	r2, [pc, #12]	; (8006568 <_ZN11Screen1ViewC1Ev+0x20>)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	601a      	str	r2, [r3, #0]
{

}
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	4618      	mov	r0, r3
 8006562:	3708      	adds	r7, #8
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}
 8006568:	0802b874 	.word	0x0802b874

0800656c <_ZN11Screen1View11setupScreenEv>:

void Screen1View::setupScreen()
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b082      	sub	sp, #8
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::setupScreen();
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	4618      	mov	r0, r3
 8006578:	f7ff fb34 	bl	8005be4 <_ZN15Screen1ViewBase11setupScreenEv>

}
 800657c:	bf00      	nop
 800657e:	3708      	adds	r7, #8
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}

08006584 <_ZN11Screen1View14tearDownScreenEv>:

void Screen1View::tearDownScreen()
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b082      	sub	sp, #8
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::tearDownScreen();
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	4618      	mov	r0, r3
 8006590:	f7ff f8c0 	bl	8005714 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8006594:	bf00      	nop
 8006596:	3708      	adds	r7, #8
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}

0800659c <FT5336_RegisterBusIO>:
  * @brief  Register IO bus to component object
  * @param  Component object pointer
  * @retval error status
  */
int32_t FT5336_RegisterBusIO (FT5336_Object_t *pObj, FT5336_IO_t *pIO)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b084      	sub	sp, #16
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
 80065a4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d103      	bne.n	80065b4 <FT5336_RegisterBusIO+0x18>
  {
    ret = FT5336_ERROR;
 80065ac:	f04f 33ff 	mov.w	r3, #4294967295
 80065b0:	60fb      	str	r3, [r7, #12]
 80065b2:	e02c      	b.n	800660e <FT5336_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	681a      	ldr	r2, [r3, #0]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	685a      	ldr	r2, [r3, #4]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	891a      	ldrh	r2, [r3, #8]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	68da      	ldr	r2, [r3, #12]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	691a      	ldr	r2, [r3, #16]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	695a      	ldr	r2, [r3, #20]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = ReadRegWrap;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	4a0c      	ldr	r2, [pc, #48]	; (8006618 <FT5336_RegisterBusIO+0x7c>)
 80065e8:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	4a0b      	ldr	r2, [pc, #44]	; (800661c <FT5336_RegisterBusIO+0x80>)
 80065ee:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	687a      	ldr	r2, [r7, #4]
 80065f4:	621a      	str	r2, [r3, #32]

    if(pObj->IO.Init != NULL)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d004      	beq.n	8006608 <FT5336_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4798      	blx	r3
 8006604:	60f8      	str	r0, [r7, #12]
 8006606:	e002      	b.n	800660e <FT5336_RegisterBusIO+0x72>
    }
    else
    {
      ret = FT5336_ERROR;
 8006608:	f04f 33ff 	mov.w	r3, #4294967295
 800660c:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800660e:	68fb      	ldr	r3, [r7, #12]
}
 8006610:	4618      	mov	r0, r3
 8006612:	3710      	adds	r7, #16
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}
 8006618:	08006a15 	.word	0x08006a15
 800661c:	08006a49 	.word	0x08006a49

08006620 <FT5336_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to FT5336 sensor capabilities
  * @retval Component status
  */
int32_t FT5336_GetCapabilities(FT5336_Object_t *pObj, FT5336_Capabilities_t *Capabilities)
{
 8006620:	b480      	push	{r7}
 8006622:	b083      	sub	sp, #12
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	2201      	movs	r2, #1
 800662e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gesture    = 1;
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	2201      	movs	r2, #1
 8006634:	705a      	strb	r2, [r3, #1]
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	2205      	movs	r2, #5
 800663a:	709a      	strb	r2, [r3, #2]
  Capabilities->MaxXl      = FT5336_MAX_X_LENGTH;
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8006642:	605a      	str	r2, [r3, #4]
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	f44f 7288 	mov.w	r2, #272	; 0x110
 800664a:	609a      	str	r2, [r3, #8]

  return FT5336_OK;
 800664c:	2300      	movs	r3, #0
}
 800664e:	4618      	mov	r0, r3
 8006650:	370c      	adds	r7, #12
 8006652:	46bd      	mov	sp, r7
 8006654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006658:	4770      	bx	lr

0800665a <FT5336_Init>:
  * @param  pObj Component object pointer
  * @param  GestureInit: Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_Init(FT5336_Object_t *pObj)
{
 800665a:	b580      	push	{r7, lr}
 800665c:	b084      	sub	sp, #16
 800665e:	af00      	add	r7, sp, #0
 8006660:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
 8006662:	2300      	movs	r3, #0
 8006664:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 0U)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800666c:	2b00      	cmp	r3, #0
 800666e:	d10d      	bne.n	800668c <FT5336_Init+0x32>
  {
    /* Initialize IO BUS layer */
    pObj->IO.Init();
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4798      	blx	r3
    /* This is called internal calibration of the touch screen                 */
    ret += FT5336_TS_Calibration(pObj);
#endif /* (FT5336_AUTO_CALIBRATION_ENABLED == 1) */
    /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
    /* Note TS_INT is active low                                                                      */
    ret += FT5336_DisableIT(pObj);
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f000 f987 	bl	800698a <FT5336_DisableIT>
 800667c:	4602      	mov	r2, r0
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	4413      	add	r3, r2
 8006682:	60fb      	str	r3, [r7, #12]

    pObj->IsInitialized = 1;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2201      	movs	r2, #1
 8006688:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  if(ret != FT5336_OK)
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d002      	beq.n	8006698 <FT5336_Init+0x3e>
  {
    ret = FT5336_ERROR;
 8006692:	f04f 33ff 	mov.w	r3, #4294967295
 8006696:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8006698:	68fb      	ldr	r3, [r7, #12]
}
 800669a:	4618      	mov	r0, r3
 800669c:	3710      	adds	r7, #16
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}

080066a2 <FT5336_DeInit>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  pObj Component object pointer
  * @retval FT5336_OK
  */
int32_t FT5336_DeInit(FT5336_Object_t *pObj)
{
 80066a2:	b480      	push	{r7}
 80066a4:	b085      	sub	sp, #20
 80066a6:	af00      	add	r7, sp, #0
 80066a8:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
 80066aa:	2300      	movs	r3, #0
 80066ac:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 1U)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80066b4:	2b01      	cmp	r3, #1
 80066b6:	d103      	bne.n	80066c0 <FT5336_DeInit+0x1e>
  {
    pObj->IsInitialized = 0;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2200      	movs	r2, #0
 80066bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return ret;
 80066c0:	68fb      	ldr	r3, [r7, #12]
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3714      	adds	r7, #20
 80066c6:	46bd      	mov	sp, r7
 80066c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066cc:	4770      	bx	lr

080066ce <FT5336_GestureConfig>:
  * @param  pObj  Component object pointer
  * @param  GestureInit Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_GestureConfig(FT5336_Object_t *pObj, FT5336_Gesture_Init_t *GestureInit)
{
 80066ce:	b580      	push	{r7, lr}
 80066d0:	b084      	sub	sp, #16
 80066d2:	af00      	add	r7, sp, #0
 80066d4:	6078      	str	r0, [r7, #4]
 80066d6:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f103 0218 	add.w	r2, r3, #24
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	b2db      	uxtb	r3, r3
 80066e4:	4619      	mov	r1, r3
 80066e6:	4610      	mov	r0, r2
 80066e8:	f000 fa25 	bl	8006b36 <ft5336_radian_value>
 80066ec:	60f8      	str	r0, [r7, #12]
  ret += ft5336_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f103 0218 	add.w	r2, r3, #24
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	b2db      	uxtb	r3, r3
 80066fa:	4619      	mov	r1, r3
 80066fc:	4610      	mov	r0, r2
 80066fe:	f000 fa2b 	bl	8006b58 <ft5336_offset_left_right>
 8006702:	4602      	mov	r2, r0
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	4413      	add	r3, r2
 8006708:	60fb      	str	r3, [r7, #12]
  ret += ft5336_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f103 0218 	add.w	r2, r3, #24
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	689b      	ldr	r3, [r3, #8]
 8006714:	b2db      	uxtb	r3, r3
 8006716:	4619      	mov	r1, r3
 8006718:	4610      	mov	r0, r2
 800671a:	f000 fa2e 	bl	8006b7a <ft5336_offset_up_down>
 800671e:	4602      	mov	r2, r0
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	4413      	add	r3, r2
 8006724:	60fb      	str	r3, [r7, #12]
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f103 0218 	add.w	r2, r3, #24
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	68db      	ldr	r3, [r3, #12]
 8006730:	b2db      	uxtb	r3, r3
 8006732:	4619      	mov	r1, r3
 8006734:	4610      	mov	r0, r2
 8006736:	f000 fa31 	bl	8006b9c <ft5336_disatnce_left_right>
 800673a:	4602      	mov	r2, r0
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	4413      	add	r3, r2
 8006740:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f103 0218 	add.w	r2, r3, #24
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	691b      	ldr	r3, [r3, #16]
 800674c:	b2db      	uxtb	r3, r3
 800674e:	4619      	mov	r1, r3
 8006750:	4610      	mov	r0, r2
 8006752:	f000 fa34 	bl	8006bbe <ft5336_distance_up_down>
 8006756:	4602      	mov	r2, r0
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	4413      	add	r3, r2
 800675c:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f103 0218 	add.w	r2, r3, #24
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	695b      	ldr	r3, [r3, #20]
 8006768:	b2db      	uxtb	r3, r3
 800676a:	4619      	mov	r1, r3
 800676c:	4610      	mov	r0, r2
 800676e:	f000 fa37 	bl	8006be0 <ft5336_distance_zoom>
 8006772:	4602      	mov	r2, r0
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	4413      	add	r3, r2
 8006778:	60fb      	str	r3, [r7, #12]

  if(ret != FT5336_OK)
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d002      	beq.n	8006786 <FT5336_GestureConfig+0xb8>
  {
    ret = FT5336_ERROR;
 8006780:	f04f 33ff 	mov.w	r3, #4294967295
 8006784:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8006786:	68fb      	ldr	r3, [r7, #12]
}
 8006788:	4618      	mov	r0, r3
 800678a:	3710      	adds	r7, #16
 800678c:	46bd      	mov	sp, r7
 800678e:	bd80      	pop	{r7, pc}

08006790 <FT5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  pObj Component object pointer
  * @retval The Device ID (two bytes).
  */
int32_t FT5336_ReadID(FT5336_Object_t *pObj, uint32_t *Id)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b082      	sub	sp, #8
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
 8006798:	6039      	str	r1, [r7, #0]
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	3318      	adds	r3, #24
 800679e:	6839      	ldr	r1, [r7, #0]
 80067a0:	4618      	mov	r0, r3
 80067a2:	f000 fa3f 	bl	8006c24 <ft5336_chip_id>
 80067a6:	4603      	mov	r3, r0
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3708      	adds	r7, #8
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}

080067b0 <FT5336_GetState>:
  * @param  pObj Component object pointer
  * @param  State: Single Touch stucture pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetState(FT5336_Object_t *pObj, FT5336_State_t *State)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b084      	sub	sp, #16
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
 80067b8:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
 80067ba:	2300      	movs	r3, #0
 80067bc:	60fb      	str	r3, [r7, #12]
  uint8_t  data[4];

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f000 f908 	bl	80069d4 <FT5336_DetectTouch>
 80067c4:	4603      	mov	r3, r0
 80067c6:	461a      	mov	r2, r3
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	601a      	str	r2, [r3, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f103 0018 	add.w	r0, r3, #24
 80067d2:	f107 0208 	add.w	r2, r7, #8
 80067d6:	2304      	movs	r3, #4
 80067d8:	2103      	movs	r1, #3
 80067da:	f000 f94f 	bl	8006a7c <ft5336_read_reg>
 80067de:	4603      	mov	r3, r0
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d003      	beq.n	80067ec <FT5336_GetState+0x3c>
  {
    ret = FT5336_ERROR;
 80067e4:	f04f 33ff 	mov.w	r3, #4294967295
 80067e8:	60fb      	str	r3, [r7, #12]
 80067ea:	e00f      	b.n	800680c <FT5336_GetState+0x5c>
  }
  else
  {
    /* Send back first ready X position to caller */
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
 80067ec:	7a3b      	ldrb	r3, [r7, #8]
 80067ee:	021b      	lsls	r3, r3, #8
 80067f0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80067f4:	7a7a      	ldrb	r2, [r7, #9]
 80067f6:	431a      	orrs	r2, r3
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
 80067fc:	7abb      	ldrb	r3, [r7, #10]
 80067fe:	021b      	lsls	r3, r3, #8
 8006800:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006804:	7afa      	ldrb	r2, [r7, #11]
 8006806:	431a      	orrs	r2, r3
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800680c:	68fb      	ldr	r3, [r7, #12]
}
 800680e:	4618      	mov	r0, r3
 8006810:	3710      	adds	r7, #16
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}

08006816 <FT5336_GetMultiTouchState>:
  * @param  pObj Component object pointer
  * @param  State Multi Touch structure pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetMultiTouchState(FT5336_Object_t *pObj, FT5336_MultiTouch_State_t *State)
{
 8006816:	b580      	push	{r7, lr}
 8006818:	b08c      	sub	sp, #48	; 0x30
 800681a:	af00      	add	r7, sp, #0
 800681c:	6078      	str	r0, [r7, #4]
 800681e:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
 8006820:	2300      	movs	r3, #0
 8006822:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint8_t  data[30];
  uint32_t i;

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f000 f8d5 	bl	80069d4 <FT5336_DetectTouch>
 800682a:	4603      	mov	r3, r0
 800682c:	461a      	mov	r2, r3
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	601a      	str	r2, [r3, #0]

  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f103 0018 	add.w	r0, r3, #24
 8006838:	f107 0208 	add.w	r2, r7, #8
 800683c:	231e      	movs	r3, #30
 800683e:	2103      	movs	r1, #3
 8006840:	f000 f91c 	bl	8006a7c <ft5336_read_reg>
 8006844:	4603      	mov	r3, r0
 8006846:	2b00      	cmp	r3, #0
 8006848:	d003      	beq.n	8006852 <FT5336_GetMultiTouchState+0x3c>
  {
    ret = FT5336_ERROR;
 800684a:	f04f 33ff 	mov.w	r3, #4294967295
 800684e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006850:	e077      	b.n	8006942 <FT5336_GetMultiTouchState+0x12c>
  }
  else
  {
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 8006852:	2300      	movs	r3, #0
 8006854:	62bb      	str	r3, [r7, #40]	; 0x28
 8006856:	e071      	b.n	800693c <FT5336_GetMultiTouchState+0x126>
    {
    /* Send back first ready X position to caller */
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 8006858:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800685a:	4613      	mov	r3, r2
 800685c:	005b      	lsls	r3, r3, #1
 800685e:	4413      	add	r3, r2
 8006860:	005b      	lsls	r3, r3, #1
 8006862:	3330      	adds	r3, #48	; 0x30
 8006864:	443b      	add	r3, r7
 8006866:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800686a:	021b      	lsls	r3, r3, #8
 800686c:	f403 6170 	and.w	r1, r3, #3840	; 0xf00
 8006870:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006872:	4613      	mov	r3, r2
 8006874:	005b      	lsls	r3, r3, #1
 8006876:	4413      	add	r3, r2
 8006878:	005b      	lsls	r3, r3, #1
 800687a:	3301      	adds	r3, #1
 800687c:	3330      	adds	r3, #48	; 0x30
 800687e:	443b      	add	r3, r7
 8006880:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006884:	ea41 0203 	orr.w	r2, r1, r3
 8006888:	6839      	ldr	r1, [r7, #0]
 800688a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800688c:	009b      	lsls	r3, r3, #2
 800688e:	440b      	add	r3, r1
 8006890:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 8006892:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006894:	4613      	mov	r3, r2
 8006896:	005b      	lsls	r3, r3, #1
 8006898:	4413      	add	r3, r2
 800689a:	005b      	lsls	r3, r3, #1
 800689c:	3302      	adds	r3, #2
 800689e:	3330      	adds	r3, #48	; 0x30
 80068a0:	443b      	add	r3, r7
 80068a2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80068a6:	021b      	lsls	r3, r3, #8
 80068a8:	f403 6170 	and.w	r1, r3, #3840	; 0xf00
 80068ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068ae:	4613      	mov	r3, r2
 80068b0:	005b      	lsls	r3, r3, #1
 80068b2:	4413      	add	r3, r2
 80068b4:	005b      	lsls	r3, r3, #1
 80068b6:	3303      	adds	r3, #3
 80068b8:	3330      	adds	r3, #48	; 0x30
 80068ba:	443b      	add	r3, r7
 80068bc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80068c0:	4319      	orrs	r1, r3
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068c6:	3206      	adds	r2, #6
 80068c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Event to caller */
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
 80068cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068ce:	4613      	mov	r3, r2
 80068d0:	005b      	lsls	r3, r3, #1
 80068d2:	4413      	add	r3, r2
 80068d4:	005b      	lsls	r3, r3, #1
 80068d6:	3330      	adds	r3, #48	; 0x30
 80068d8:	443b      	add	r3, r7
 80068da:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80068de:	099b      	lsrs	r3, r3, #6
 80068e0:	b2db      	uxtb	r3, r3
 80068e2:	4619      	mov	r1, r3
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068e8:	3210      	adds	r2, #16
 80068ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Weight to caller */
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
 80068ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068f0:	4613      	mov	r3, r2
 80068f2:	005b      	lsls	r3, r3, #1
 80068f4:	4413      	add	r3, r2
 80068f6:	005b      	lsls	r3, r3, #1
 80068f8:	3304      	adds	r3, #4
 80068fa:	3330      	adds	r3, #48	; 0x30
 80068fc:	443b      	add	r3, r7
 80068fe:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006902:	4619      	mov	r1, r3
 8006904:	683a      	ldr	r2, [r7, #0]
 8006906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006908:	330a      	adds	r3, #10
 800690a:	009b      	lsls	r3, r3, #2
 800690c:	4413      	add	r3, r2
 800690e:	6059      	str	r1, [r3, #4]
    /* Send back first ready Area to caller */
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
 8006910:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006912:	4613      	mov	r3, r2
 8006914:	005b      	lsls	r3, r3, #1
 8006916:	4413      	add	r3, r2
 8006918:	005b      	lsls	r3, r3, #1
 800691a:	3305      	adds	r3, #5
 800691c:	3330      	adds	r3, #48	; 0x30
 800691e:	443b      	add	r3, r7
 8006920:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006924:	091b      	lsrs	r3, r3, #4
 8006926:	b2db      	uxtb	r3, r3
 8006928:	4619      	mov	r1, r3
 800692a:	683a      	ldr	r2, [r7, #0]
 800692c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800692e:	3314      	adds	r3, #20
 8006930:	009b      	lsls	r3, r3, #2
 8006932:	4413      	add	r3, r2
 8006934:	6059      	str	r1, [r3, #4]
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 8006936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006938:	3301      	adds	r3, #1
 800693a:	62bb      	str	r3, [r7, #40]	; 0x28
 800693c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800693e:	2b04      	cmp	r3, #4
 8006940:	d98a      	bls.n	8006858 <FT5336_GetMultiTouchState+0x42>
    }
  }

  return ret;
 8006942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8006944:	4618      	mov	r0, r3
 8006946:	3730      	adds	r7, #48	; 0x30
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}

0800694c <FT5336_GetGesture>:
  * @param  pObj Component object pointer
  * @param  GestureId: gesture ID
  * @retval Gesture ID.
  */
int32_t FT5336_GetGesture(FT5336_Object_t *pObj, uint8_t *GestureId)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b082      	sub	sp, #8
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
 8006954:	6039      	str	r1, [r7, #0]
  return ft5336_gest_id(&pObj->Ctx, GestureId);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	3318      	adds	r3, #24
 800695a:	6839      	ldr	r1, [r7, #0]
 800695c:	4618      	mov	r0, r3
 800695e:	f000 f8bb 	bl	8006ad8 <ft5336_gest_id>
 8006962:	4603      	mov	r3, r0
}
 8006964:	4618      	mov	r0, r3
 8006966:	3708      	adds	r7, #8
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}

0800696c <FT5336_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_EnableIT(FT5336_Object_t *pObj)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b082      	sub	sp, #8
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_TRIGGER);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	3318      	adds	r3, #24
 8006978:	2101      	movs	r1, #1
 800697a:	4618      	mov	r0, r3
 800697c:	f000 f941 	bl	8006c02 <ft5336_g_mode>
 8006980:	4603      	mov	r3, r0
}
 8006982:	4618      	mov	r0, r3
 8006984:	3708      	adds	r7, #8
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}

0800698a <FT5336_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_DisableIT(FT5336_Object_t *pObj)
{
 800698a:	b580      	push	{r7, lr}
 800698c:	b082      	sub	sp, #8
 800698e:	af00      	add	r7, sp, #0
 8006990:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	3318      	adds	r3, #24
 8006996:	2100      	movs	r1, #0
 8006998:	4618      	mov	r0, r3
 800699a:	f000 f932 	bl	8006c02 <ft5336_g_mode>
 800699e:	4603      	mov	r3, r0
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3708      	adds	r7, #8
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}

080069a8 <FT5336_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval TS interrupts status : always return 0 here
  */
int32_t FT5336_ITStatus(FT5336_Object_t *pObj)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b083      	sub	sp, #12
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
 80069b0:	2300      	movs	r3, #0
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	370c      	adds	r7, #12
 80069b6:	46bd      	mov	sp, r7
 80069b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069bc:	4770      	bx	lr

080069be <FT5336_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_ClearIT(FT5336_Object_t *pObj)
{
 80069be:	b480      	push	{r7}
 80069c0:	b083      	sub	sp, #12
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
 80069c6:	2300      	movs	r3, #0
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	370c      	adds	r7, #12
 80069cc:	46bd      	mov	sp, r7
 80069ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d2:	4770      	bx	lr

080069d4 <FT5336_DetectTouch>:
  * @param  pObj Component object pointer
  * @retval Number of active touches detected (can be 0, 1 or 2) or FT5336_ERROR
  *         in case of error
  */
static int32_t FT5336_DetectTouch(FT5336_Object_t *pObj)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b084      	sub	sp, #16
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t nb_touch;

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	3318      	adds	r3, #24
 80069e0:	f107 020b 	add.w	r2, r7, #11
 80069e4:	4611      	mov	r1, r2
 80069e6:	4618      	mov	r0, r3
 80069e8:	f000 f886 	bl	8006af8 <ft5336_td_status>
 80069ec:	4603      	mov	r3, r0
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d003      	beq.n	80069fa <FT5336_DetectTouch+0x26>
  {
    ret = FT5336_ERROR;
 80069f2:	f04f 33ff 	mov.w	r3, #4294967295
 80069f6:	60fb      	str	r3, [r7, #12]
 80069f8:	e007      	b.n	8006a0a <FT5336_DetectTouch+0x36>
  }
  else
  {
    if(nb_touch > FT5336_MAX_NB_TOUCH)
 80069fa:	7afb      	ldrb	r3, [r7, #11]
 80069fc:	2b05      	cmp	r3, #5
 80069fe:	d902      	bls.n	8006a06 <FT5336_DetectTouch+0x32>
    {
      /* If invalid number of touch detected, set it to zero */
      ret = 0;
 8006a00:	2300      	movs	r3, #0
 8006a02:	60fb      	str	r3, [r7, #12]
 8006a04:	e001      	b.n	8006a0a <FT5336_DetectTouch+0x36>
    }
    else
    {
      ret = (int32_t)nb_touch;
 8006a06:	7afb      	ldrb	r3, [r7, #11]
 8006a08:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	3710      	adds	r7, #16
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}

08006a14 <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8006a14:	b590      	push	{r4, r7, lr}
 8006a16:	b087      	sub	sp, #28
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	60f8      	str	r0, [r7, #12]
 8006a1c:	607a      	str	r2, [r7, #4]
 8006a1e:	461a      	mov	r2, r3
 8006a20:	460b      	mov	r3, r1
 8006a22:	72fb      	strb	r3, [r7, #11]
 8006a24:	4613      	mov	r3, r2
 8006a26:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	691c      	ldr	r4, [r3, #16]
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	8918      	ldrh	r0, [r3, #8]
 8006a34:	7afb      	ldrb	r3, [r7, #11]
 8006a36:	b299      	uxth	r1, r3
 8006a38:	893b      	ldrh	r3, [r7, #8]
 8006a3a:	687a      	ldr	r2, [r7, #4]
 8006a3c:	47a0      	blx	r4
 8006a3e:	4603      	mov	r3, r0
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	371c      	adds	r7, #28
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd90      	pop	{r4, r7, pc}

08006a48 <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8006a48:	b590      	push	{r4, r7, lr}
 8006a4a:	b087      	sub	sp, #28
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	60f8      	str	r0, [r7, #12]
 8006a50:	607a      	str	r2, [r7, #4]
 8006a52:	461a      	mov	r2, r3
 8006a54:	460b      	mov	r3, r1
 8006a56:	72fb      	strb	r3, [r7, #11]
 8006a58:	4613      	mov	r3, r2
 8006a5a:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	68dc      	ldr	r4, [r3, #12]
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	8918      	ldrh	r0, [r3, #8]
 8006a68:	7afb      	ldrb	r3, [r7, #11]
 8006a6a:	b299      	uxth	r1, r3
 8006a6c:	893b      	ldrh	r3, [r7, #8]
 8006a6e:	687a      	ldr	r2, [r7, #4]
 8006a70:	47a0      	blx	r4
 8006a72:	4603      	mov	r3, r0
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	371c      	adds	r7, #28
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd90      	pop	{r4, r7, pc}

08006a7c <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 8006a7c:	b590      	push	{r4, r7, lr}
 8006a7e:	b085      	sub	sp, #20
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	60f8      	str	r0, [r7, #12]
 8006a84:	607a      	str	r2, [r7, #4]
 8006a86:	461a      	mov	r2, r3
 8006a88:	460b      	mov	r3, r1
 8006a8a:	72fb      	strb	r3, [r7, #11]
 8006a8c:	4613      	mov	r3, r2
 8006a8e:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	685c      	ldr	r4, [r3, #4]
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	6898      	ldr	r0, [r3, #8]
 8006a98:	893b      	ldrh	r3, [r7, #8]
 8006a9a:	7af9      	ldrb	r1, [r7, #11]
 8006a9c:	687a      	ldr	r2, [r7, #4]
 8006a9e:	47a0      	blx	r4
 8006aa0:	4603      	mov	r3, r0
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3714      	adds	r7, #20
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd90      	pop	{r4, r7, pc}

08006aaa <ft5336_write_reg>:
  * @param  pdata pointer to data to be written
  * @param  length Length of data to write   
  * @retval Component status
  */
int32_t ft5336_write_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 8006aaa:	b590      	push	{r4, r7, lr}
 8006aac:	b085      	sub	sp, #20
 8006aae:	af00      	add	r7, sp, #0
 8006ab0:	60f8      	str	r0, [r7, #12]
 8006ab2:	607a      	str	r2, [r7, #4]
 8006ab4:	461a      	mov	r2, r3
 8006ab6:	460b      	mov	r3, r1
 8006ab8:	72fb      	strb	r3, [r7, #11]
 8006aba:	4613      	mov	r3, r2
 8006abc:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681c      	ldr	r4, [r3, #0]
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	6898      	ldr	r0, [r3, #8]
 8006ac6:	893b      	ldrh	r3, [r7, #8]
 8006ac8:	7af9      	ldrb	r1, [r7, #11]
 8006aca:	687a      	ldr	r2, [r7, #4]
 8006acc:	47a0      	blx	r4
 8006ace:	4603      	mov	r3, r0
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3714      	adds	r7, #20
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd90      	pop	{r4, r7, pc}

08006ad8 <ft5336_gest_id>:
  * @param  ctx Component context 
  * @param  value pointer to the value of FT5336_GEST_ID_REG register
  * @retval Component status
  */
int32_t  ft5336_gest_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b082      	sub	sp, #8
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	6039      	str	r1, [r7, #0]
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	683a      	ldr	r2, [r7, #0]
 8006ae6:	2101      	movs	r1, #1
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f7ff ffc7 	bl	8006a7c <ft5336_read_reg>
 8006aee:	4603      	mov	r3, r0
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	3708      	adds	r7, #8
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}

08006af8 <ft5336_td_status>:
  * @param  ctx Component context 
  * @param  value pointer to the value of Touch Data Status register
  * @retval Component status
  */
int32_t  ft5336_td_status(ft5336_ctx_t *ctx, uint8_t *value)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b084      	sub	sp, #16
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
 8006b02:	2301      	movs	r3, #1
 8006b04:	683a      	ldr	r2, [r7, #0]
 8006b06:	2102      	movs	r1, #2
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f7ff ffb7 	bl	8006a7c <ft5336_read_reg>
 8006b0e:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d10a      	bne.n	8006b2c <ft5336_td_status+0x34>
  {
    *value &= FT5336_TD_STATUS_BIT_MASK; 
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	781b      	ldrb	r3, [r3, #0]
 8006b1a:	f003 030f 	and.w	r3, r3, #15
 8006b1e:	b2da      	uxtb	r2, r3
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_TD_STATUS_BIT_POSITION; 
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	781a      	ldrb	r2, [r3, #0]
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3710      	adds	r7, #16
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}

08006b36 <ft5336_radian_value>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_RADIAN_VALUE_REG register
  * @retval Component status
  */
int32_t  ft5336_radian_value(ft5336_ctx_t *ctx, uint8_t value)
{
 8006b36:	b580      	push	{r7, lr}
 8006b38:	b082      	sub	sp, #8
 8006b3a:	af00      	add	r7, sp, #0
 8006b3c:	6078      	str	r0, [r7, #4]
 8006b3e:	460b      	mov	r3, r1
 8006b40:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
 8006b42:	1cfa      	adds	r2, r7, #3
 8006b44:	2301      	movs	r3, #1
 8006b46:	2191      	movs	r1, #145	; 0x91
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f7ff ffae 	bl	8006aaa <ft5336_write_reg>
 8006b4e:	4603      	mov	r3, r0
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	3708      	adds	r7, #8
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}

08006b58 <ft5336_offset_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b082      	sub	sp, #8
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
 8006b60:	460b      	mov	r3, r1
 8006b62:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
 8006b64:	1cfa      	adds	r2, r7, #3
 8006b66:	2301      	movs	r3, #1
 8006b68:	2192      	movs	r1, #146	; 0x92
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f7ff ff9d 	bl	8006aaa <ft5336_write_reg>
 8006b70:	4603      	mov	r3, r0
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3708      	adds	r7, #8
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}

08006b7a <ft5336_offset_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 8006b7a:	b580      	push	{r7, lr}
 8006b7c:	b082      	sub	sp, #8
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	6078      	str	r0, [r7, #4]
 8006b82:	460b      	mov	r3, r1
 8006b84:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
 8006b86:	1cfa      	adds	r2, r7, #3
 8006b88:	2301      	movs	r3, #1
 8006b8a:	2193      	movs	r1, #147	; 0x93
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f7ff ff8c 	bl	8006aaa <ft5336_write_reg>
 8006b92:	4603      	mov	r3, r0
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	3708      	adds	r7, #8
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}

08006b9c <ft5336_disatnce_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_disatnce_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b082      	sub	sp, #8
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
 8006ba4:	460b      	mov	r3, r1
 8006ba6:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
 8006ba8:	1cfa      	adds	r2, r7, #3
 8006baa:	2301      	movs	r3, #1
 8006bac:	2194      	movs	r1, #148	; 0x94
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f7ff ff7b 	bl	8006aaa <ft5336_write_reg>
 8006bb4:	4603      	mov	r3, r0
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	3708      	adds	r7, #8
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}

08006bbe <ft5336_distance_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 8006bbe:	b580      	push	{r7, lr}
 8006bc0:	b082      	sub	sp, #8
 8006bc2:	af00      	add	r7, sp, #0
 8006bc4:	6078      	str	r0, [r7, #4]
 8006bc6:	460b      	mov	r3, r1
 8006bc8:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
 8006bca:	1cfa      	adds	r2, r7, #3
 8006bcc:	2301      	movs	r3, #1
 8006bce:	2195      	movs	r1, #149	; 0x95
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f7ff ff6a 	bl	8006aaa <ft5336_write_reg>
 8006bd6:	4603      	mov	r3, r0
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3708      	adds	r7, #8
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}

08006be0 <ft5336_distance_zoom>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_ZOOM_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_zoom(ft5336_ctx_t *ctx, uint8_t value)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b082      	sub	sp, #8
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
 8006be8:	460b      	mov	r3, r1
 8006bea:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
 8006bec:	1cfa      	adds	r2, r7, #3
 8006bee:	2301      	movs	r3, #1
 8006bf0:	2196      	movs	r1, #150	; 0x96
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f7ff ff59 	bl	8006aaa <ft5336_write_reg>
 8006bf8:	4603      	mov	r3, r0
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3708      	adds	r7, #8
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}

08006c02 <ft5336_g_mode>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_GMODE_REG register
  * @retval Component status
  */
int32_t  ft5336_g_mode(ft5336_ctx_t *ctx, uint8_t value)
{
 8006c02:	b580      	push	{r7, lr}
 8006c04:	b082      	sub	sp, #8
 8006c06:	af00      	add	r7, sp, #0
 8006c08:	6078      	str	r0, [r7, #4]
 8006c0a:	460b      	mov	r3, r1
 8006c0c:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
 8006c0e:	1cfa      	adds	r2, r7, #3
 8006c10:	2301      	movs	r3, #1
 8006c12:	21a4      	movs	r1, #164	; 0xa4
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f7ff ff48 	bl	8006aaa <ft5336_write_reg>
 8006c1a:	4603      	mov	r3, r0
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3708      	adds	r7, #8
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}

08006c24 <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b084      	sub	sp, #16
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
 8006c2c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_CHIP_ID_REG, (uint8_t *)value, 1);
 8006c2e:	2301      	movs	r3, #1
 8006c30:	683a      	ldr	r2, [r7, #0]
 8006c32:	21a8      	movs	r1, #168	; 0xa8
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f7ff ff21 	bl	8006a7c <ft5336_read_reg>
 8006c3a:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d107      	bne.n	8006c52 <ft5336_chip_id+0x2e>
  {
    *value &= FT5336_CHIP_ID_BIT_MASK; 
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	781a      	ldrb	r2, [r3, #0]
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_CHIP_ID_BIT_POSITION; 
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	781a      	ldrb	r2, [r3, #0]
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 8006c52:	68fb      	ldr	r3, [r7, #12]
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	3710      	adds	r7, #16
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}

08006c5c <MX25LM51245G_GetFlashInfo>:
  * @brief  Get Flash information
  * @param  pInfo pointer to information structure
  * @retval error status
  */
int32_t MX25LM51245G_GetFlashInfo(MX25LM51245G_Info_t *pInfo)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b083      	sub	sp, #12
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  /* Configure the structure with the memory configuration */
  pInfo->FlashSize              = MX25LM51245G_FLASH_SIZE;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8006c6a:	601a      	str	r2, [r3, #0]
  pInfo->EraseSectorSize        = MX25LM51245G_SECTOR_64K;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006c72:	605a      	str	r2, [r3, #4]
  pInfo->EraseSectorsNumber     = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SECTOR_64K);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006c7a:	609a      	str	r2, [r3, #8]
  pInfo->EraseSubSectorSize     = MX25LM51245G_SUBSECTOR_4K;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006c82:	60da      	str	r2, [r3, #12]
  pInfo->EraseSubSectorNumber   = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006c8a:	611a      	str	r2, [r3, #16]
  pInfo->EraseSubSector1Size    = MX25LM51245G_SUBSECTOR_4K;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006c92:	615a      	str	r2, [r3, #20]
  pInfo->EraseSubSector1Number  = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006c9a:	619a      	str	r2, [r3, #24]
  pInfo->ProgPageSize           = MX25LM51245G_PAGE_SIZE;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006ca2:	61da      	str	r2, [r3, #28]
  pInfo->ProgPagesNumber        = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_PAGE_SIZE);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8006caa:	621a      	str	r2, [r3, #32]

  return MX25LM51245G_OK;
 8006cac:	2300      	movs	r3, #0
};
 8006cae:	4618      	mov	r0, r3
 8006cb0:	370c      	adds	r7, #12
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb8:	4770      	bx	lr

08006cba <MX25LM51245G_AutoPollingMemReady>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate
  * @retval error status
  */
int32_t MX25LM51245G_AutoPollingMemReady(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 8006cba:	b580      	push	{r7, lr}
 8006cbc:	b09c      	sub	sp, #112	; 0x70
 8006cbe:	af00      	add	r7, sp, #0
 8006cc0:	6078      	str	r0, [r7, #4]
 8006cc2:	460b      	mov	r3, r1
 8006cc4:	70fb      	strb	r3, [r7, #3]
 8006cc6:	4613      	mov	r3, r2
 8006cc8:	70bb      	strb	r3, [r7, #2]
  OSPI_RegularCmdTypeDef  s_command = {0};
 8006cca:	f107 0320 	add.w	r3, r7, #32
 8006cce:	2250      	movs	r2, #80	; 0x50
 8006cd0:	2100      	movs	r1, #0
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	f022 fb43 	bl	802935e <memset>
  OSPI_AutoPollingTypeDef s_config = {0};
 8006cd8:	f107 030c 	add.w	r3, r7, #12
 8006cdc:	2200      	movs	r2, #0
 8006cde:	601a      	str	r2, [r3, #0]
 8006ce0:	605a      	str	r2, [r3, #4]
 8006ce2:	609a      	str	r2, [r3, #8]
 8006ce4:	60da      	str	r2, [r3, #12]
 8006ce6:	611a      	str	r2, [r3, #16]

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8006ce8:	78fb      	ldrb	r3, [r7, #3]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d105      	bne.n	8006cfa <MX25LM51245G_AutoPollingMemReady+0x40>
 8006cee:	78bb      	ldrb	r3, [r7, #2]
 8006cf0:	2b01      	cmp	r3, #1
 8006cf2:	d102      	bne.n	8006cfa <MX25LM51245G_AutoPollingMemReady+0x40>
  {
    return MX25LM51245G_ERROR;
 8006cf4:	f04f 33ff 	mov.w	r3, #4294967295
 8006cf8:	e088      	b.n	8006e0c <MX25LM51245G_AutoPollingMemReady+0x152>
  }

  /* Configure automatic polling mode to wait for memory ready */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	623b      	str	r3, [r7, #32]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8006d02:	78fb      	ldrb	r3, [r7, #3]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d101      	bne.n	8006d0c <MX25LM51245G_AutoPollingMemReady+0x52>
 8006d08:	2301      	movs	r3, #1
 8006d0a:	e000      	b.n	8006d0e <MX25LM51245G_AutoPollingMemReady+0x54>
 8006d0c:	2304      	movs	r3, #4
 8006d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8006d10:	78bb      	ldrb	r3, [r7, #2]
 8006d12:	2b01      	cmp	r3, #1
 8006d14:	d101      	bne.n	8006d1a <MX25LM51245G_AutoPollingMemReady+0x60>
 8006d16:	2308      	movs	r3, #8
 8006d18:	e000      	b.n	8006d1c <MX25LM51245G_AutoPollingMemReady+0x62>
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8006d1e:	78fb      	ldrb	r3, [r7, #3]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d101      	bne.n	8006d28 <MX25LM51245G_AutoPollingMemReady+0x6e>
 8006d24:	2300      	movs	r3, #0
 8006d26:	e000      	b.n	8006d2a <MX25LM51245G_AutoPollingMemReady+0x70>
 8006d28:	2310      	movs	r3, #16
 8006d2a:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 8006d2c:	78fb      	ldrb	r3, [r7, #3]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d101      	bne.n	8006d36 <MX25LM51245G_AutoPollingMemReady+0x7c>
 8006d32:	2305      	movs	r3, #5
 8006d34:	e001      	b.n	8006d3a <MX25LM51245G_AutoPollingMemReady+0x80>
 8006d36:	f240 53fa 	movw	r3, #1530	; 0x5fa
 8006d3a:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 8006d3c:	78fb      	ldrb	r3, [r7, #3]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d101      	bne.n	8006d46 <MX25LM51245G_AutoPollingMemReady+0x8c>
 8006d42:	2300      	movs	r3, #0
 8006d44:	e001      	b.n	8006d4a <MX25LM51245G_AutoPollingMemReady+0x90>
 8006d46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8006d4c:	78bb      	ldrb	r3, [r7, #2]
 8006d4e:	2b01      	cmp	r3, #1
 8006d50:	d102      	bne.n	8006d58 <MX25LM51245G_AutoPollingMemReady+0x9e>
 8006d52:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006d56:	e000      	b.n	8006d5a <MX25LM51245G_AutoPollingMemReady+0xa0>
 8006d58:	2300      	movs	r3, #0
 8006d5a:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8006d5c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8006d60:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Address            = 0U;
 8006d62:	2300      	movs	r3, #0
 8006d64:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8006d66:	2300      	movs	r3, #0
 8006d68:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8006d6a:	78fb      	ldrb	r3, [r7, #3]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d102      	bne.n	8006d76 <MX25LM51245G_AutoPollingMemReady+0xbc>
 8006d70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006d74:	e001      	b.n	8006d7a <MX25LM51245G_AutoPollingMemReady+0xc0>
 8006d76:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006d7a:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8006d7c:	78bb      	ldrb	r3, [r7, #2]
 8006d7e:	2b01      	cmp	r3, #1
 8006d80:	d102      	bne.n	8006d88 <MX25LM51245G_AutoPollingMemReady+0xce>
 8006d82:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006d86:	e000      	b.n	8006d8a <MX25LM51245G_AutoPollingMemReady+0xd0>
 8006d88:	2300      	movs	r3, #0
 8006d8a:	663b      	str	r3, [r7, #96]	; 0x60
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8006d8c:	78fb      	ldrb	r3, [r7, #3]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d101      	bne.n	8006d96 <MX25LM51245G_AutoPollingMemReady+0xdc>
 8006d92:	2300      	movs	r3, #0
 8006d94:	e000      	b.n	8006d98 <MX25LM51245G_AutoPollingMemReady+0xde>
 8006d96:	2305      	movs	r3, #5
 8006d98:	667b      	str	r3, [r7, #100]	; 0x64
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8006d9a:	78bb      	ldrb	r3, [r7, #2]
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	d101      	bne.n	8006da4 <MX25LM51245G_AutoPollingMemReady+0xea>
 8006da0:	2302      	movs	r3, #2
 8006da2:	e000      	b.n	8006da6 <MX25LM51245G_AutoPollingMemReady+0xec>
 8006da4:	2301      	movs	r3, #1
 8006da6:	65fb      	str	r3, [r7, #92]	; 0x5c
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 8006da8:	78bb      	ldrb	r3, [r7, #2]
 8006daa:	2b01      	cmp	r3, #1
 8006dac:	d102      	bne.n	8006db4 <MX25LM51245G_AutoPollingMemReady+0xfa>
 8006dae:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8006db2:	e000      	b.n	8006db6 <MX25LM51245G_AutoPollingMemReady+0xfc>
 8006db4:	2300      	movs	r3, #0
 8006db6:	66bb      	str	r3, [r7, #104]	; 0x68
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8006db8:	2300      	movs	r3, #0
 8006dba:	66fb      	str	r3, [r7, #108]	; 0x6c

  s_config.Match         = 0U;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	60fb      	str	r3, [r7, #12]
  s_config.Mask          = MX25LM51245G_SR_WIP;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	613b      	str	r3, [r7, #16]
  s_config.MatchMode     = HAL_OSPI_MATCH_MODE_AND;
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	617b      	str	r3, [r7, #20]
  s_config.Interval      = MX25LM51245G_AUTOPOLLING_INTERVAL_TIME;
 8006dc8:	2310      	movs	r3, #16
 8006dca:	61fb      	str	r3, [r7, #28]
  s_config.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 8006dcc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006dd0:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006dd2:	f107 0320 	add.w	r3, r7, #32
 8006dd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dda:	4619      	mov	r1, r3
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f004 fe21 	bl	800ba24 <HAL_OSPI_Command>
 8006de2:	4603      	mov	r3, r0
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d002      	beq.n	8006dee <MX25LM51245G_AutoPollingMemReady+0x134>
  {
    return MX25LM51245G_ERROR;
 8006de8:	f04f 33ff 	mov.w	r3, #4294967295
 8006dec:	e00e      	b.n	8006e0c <MX25LM51245G_AutoPollingMemReady+0x152>
  }

  if (HAL_OSPI_AutoPolling(Ctx, &s_config, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006dee:	f107 030c 	add.w	r3, r7, #12
 8006df2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006df6:	4619      	mov	r1, r3
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f004 ffb6 	bl	800bd6a <HAL_OSPI_AutoPolling>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d002      	beq.n	8006e0a <MX25LM51245G_AutoPollingMemReady+0x150>
  {
    return MX25LM51245G_ERROR;
 8006e04:	f04f 33ff 	mov.w	r3, #4294967295
 8006e08:	e000      	b.n	8006e0c <MX25LM51245G_AutoPollingMemReady+0x152>
  }

  return MX25LM51245G_OK;
 8006e0a:	2300      	movs	r3, #0
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3770      	adds	r7, #112	; 0x70
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}

08006e14 <MX25LM51245G_EnableMemoryMappedModeSTR>:
  * @param  Mode Interface mode
  * @param  AddressSize Address size
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_EnableMemoryMappedModeSTR(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_AddressSize_t AddressSize)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b098      	sub	sp, #96	; 0x60
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
 8006e1c:	460b      	mov	r3, r1
 8006e1e:	70fb      	strb	r3, [r7, #3]
 8006e20:	4613      	mov	r3, r2
 8006e22:	70bb      	strb	r3, [r7, #2]
  OSPI_RegularCmdTypeDef      s_command = {0};
 8006e24:	f107 0310 	add.w	r3, r7, #16
 8006e28:	2250      	movs	r2, #80	; 0x50
 8006e2a:	2100      	movs	r1, #0
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	f022 fa96 	bl	802935e <memset>
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 8006e32:	f107 0308 	add.w	r3, r7, #8
 8006e36:	2200      	movs	r2, #0
 8006e38:	601a      	str	r2, [r3, #0]
 8006e3a:	605a      	str	r2, [r3, #4]

  /* OPI mode and 3-bytes address size not supported by memory */
  if ((Mode == MX25LM51245G_OPI_MODE) && (AddressSize == MX25LM51245G_3BYTES_SIZE))
 8006e3c:	78fb      	ldrb	r3, [r7, #3]
 8006e3e:	2b01      	cmp	r3, #1
 8006e40:	d105      	bne.n	8006e4e <MX25LM51245G_EnableMemoryMappedModeSTR+0x3a>
 8006e42:	78bb      	ldrb	r3, [r7, #2]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d102      	bne.n	8006e4e <MX25LM51245G_EnableMemoryMappedModeSTR+0x3a>
  {
    return MX25LM51245G_ERROR;
 8006e48:	f04f 33ff 	mov.w	r3, #4294967295
 8006e4c:	e088      	b.n	8006f60 <MX25LM51245G_EnableMemoryMappedModeSTR+0x14c>
  }

  /* Initialize the read command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_READ_CFG;
 8006e4e:	2301      	movs	r3, #1
 8006e50:	613b      	str	r3, [r7, #16]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8006e52:	2300      	movs	r3, #0
 8006e54:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8006e56:	78fb      	ldrb	r3, [r7, #3]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d101      	bne.n	8006e60 <MX25LM51245G_EnableMemoryMappedModeSTR+0x4c>
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	e000      	b.n	8006e62 <MX25LM51245G_EnableMemoryMappedModeSTR+0x4e>
 8006e60:	2304      	movs	r3, #4
 8006e62:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8006e64:	2300      	movs	r3, #0
 8006e66:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8006e68:	78fb      	ldrb	r3, [r7, #3]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d101      	bne.n	8006e72 <MX25LM51245G_EnableMemoryMappedModeSTR+0x5e>
 8006e6e:	2300      	movs	r3, #0
 8006e70:	e000      	b.n	8006e74 <MX25LM51245G_EnableMemoryMappedModeSTR+0x60>
 8006e72:	2310      	movs	r3, #16
 8006e74:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_FAST_READ_CMD : MX25LM51245G_4_BYTE_ADDR_FAST_READ_CMD) : MX25LM51245G_OCTA_READ_CMD;
 8006e76:	78fb      	ldrb	r3, [r7, #3]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d106      	bne.n	8006e8a <MX25LM51245G_EnableMemoryMappedModeSTR+0x76>
 8006e7c:	78bb      	ldrb	r3, [r7, #2]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d101      	bne.n	8006e86 <MX25LM51245G_EnableMemoryMappedModeSTR+0x72>
 8006e82:	230b      	movs	r3, #11
 8006e84:	e003      	b.n	8006e8e <MX25LM51245G_EnableMemoryMappedModeSTR+0x7a>
 8006e86:	230c      	movs	r3, #12
 8006e88:	e001      	b.n	8006e8e <MX25LM51245G_EnableMemoryMappedModeSTR+0x7a>
 8006e8a:	f64e 4313 	movw	r3, #60435	; 0xec13
 8006e8e:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8006e90:	78fb      	ldrb	r3, [r7, #3]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d102      	bne.n	8006e9c <MX25LM51245G_EnableMemoryMappedModeSTR+0x88>
 8006e96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006e9a:	e001      	b.n	8006ea0 <MX25LM51245G_EnableMemoryMappedModeSTR+0x8c>
 8006e9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AddressSize        = (AddressSize == MX25LM51245G_3BYTES_SIZE) ? HAL_OSPI_ADDRESS_24_BITS : HAL_OSPI_ADDRESS_32_BITS;
 8006ea6:	78bb      	ldrb	r3, [r7, #2]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d102      	bne.n	8006eb2 <MX25LM51245G_EnableMemoryMappedModeSTR+0x9e>
 8006eac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006eb0:	e001      	b.n	8006eb6 <MX25LM51245G_EnableMemoryMappedModeSTR+0xa2>
 8006eb2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8006eb6:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8006eb8:	2300      	movs	r3, #0
 8006eba:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8006ebc:	78fb      	ldrb	r3, [r7, #3]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d102      	bne.n	8006ec8 <MX25LM51245G_EnableMemoryMappedModeSTR+0xb4>
 8006ec2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006ec6:	e001      	b.n	8006ecc <MX25LM51245G_EnableMemoryMappedModeSTR+0xb8>
 8006ec8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006ecc:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? DUMMY_CYCLES_READ : DUMMY_CYCLES_READ_OCTAL;
 8006ed2:	78fb      	ldrb	r3, [r7, #3]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d101      	bne.n	8006edc <MX25LM51245G_EnableMemoryMappedModeSTR+0xc8>
 8006ed8:	2308      	movs	r3, #8
 8006eda:	e000      	b.n	8006ede <MX25LM51245G_EnableMemoryMappedModeSTR+0xca>
 8006edc:	2306      	movs	r3, #6
 8006ede:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Send the read command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006ee8:	f107 0310 	add.w	r3, r7, #16
 8006eec:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ef0:	4619      	mov	r1, r3
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f004 fd96 	bl	800ba24 <HAL_OSPI_Command>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d002      	beq.n	8006f04 <MX25LM51245G_EnableMemoryMappedModeSTR+0xf0>
  {
    return MX25LM51245G_ERROR;
 8006efe:	f04f 33ff 	mov.w	r3, #4294967295
 8006f02:	e02d      	b.n	8006f60 <MX25LM51245G_EnableMemoryMappedModeSTR+0x14c>
  }

  /* Initialize the program command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_WRITE_CFG;
 8006f04:	2302      	movs	r3, #2
 8006f06:	613b      	str	r3, [r7, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_PAGE_PROG_CMD : MX25LM51245G_4_BYTE_PAGE_PROG_CMD) : MX25LM51245G_OCTA_PAGE_PROG_CMD;
 8006f08:	78fb      	ldrb	r3, [r7, #3]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d106      	bne.n	8006f1c <MX25LM51245G_EnableMemoryMappedModeSTR+0x108>
 8006f0e:	78bb      	ldrb	r3, [r7, #2]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d101      	bne.n	8006f18 <MX25LM51245G_EnableMemoryMappedModeSTR+0x104>
 8006f14:	2302      	movs	r3, #2
 8006f16:	e003      	b.n	8006f20 <MX25LM51245G_EnableMemoryMappedModeSTR+0x10c>
 8006f18:	2312      	movs	r3, #18
 8006f1a:	e001      	b.n	8006f20 <MX25LM51245G_EnableMemoryMappedModeSTR+0x10c>
 8006f1c:	f241 23ed 	movw	r3, #4845	; 0x12ed
 8006f20:	61bb      	str	r3, [r7, #24]
  s_command.DummyCycles        = 0U;
 8006f22:	2300      	movs	r3, #0
 8006f24:	657b      	str	r3, [r7, #84]	; 0x54

  /* Send the write command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006f26:	f107 0310 	add.w	r3, r7, #16
 8006f2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f2e:	4619      	mov	r1, r3
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f004 fd77 	bl	800ba24 <HAL_OSPI_Command>
 8006f36:	4603      	mov	r3, r0
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d002      	beq.n	8006f42 <MX25LM51245G_EnableMemoryMappedModeSTR+0x12e>
  {
    return MX25LM51245G_ERROR;
 8006f3c:	f04f 33ff 	mov.w	r3, #4294967295
 8006f40:	e00e      	b.n	8006f60 <MX25LM51245G_EnableMemoryMappedModeSTR+0x14c>
  }

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 8006f42:	2300      	movs	r3, #0
 8006f44:	60bb      	str	r3, [r7, #8]

  if (HAL_OSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
 8006f46:	f107 0308 	add.w	r3, r7, #8
 8006f4a:	4619      	mov	r1, r3
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f004 ff93 	bl	800be78 <HAL_OSPI_MemoryMapped>
 8006f52:	4603      	mov	r3, r0
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d002      	beq.n	8006f5e <MX25LM51245G_EnableMemoryMappedModeSTR+0x14a>
  {
    return MX25LM51245G_ERROR;
 8006f58:	f04f 33ff 	mov.w	r3, #4294967295
 8006f5c:	e000      	b.n	8006f60 <MX25LM51245G_EnableMemoryMappedModeSTR+0x14c>
  }

  return MX25LM51245G_OK;
 8006f5e:	2300      	movs	r3, #0
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	3760      	adds	r7, #96	; 0x60
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}

08006f68 <MX25LM51245G_EnableMemoryMappedModeDTR>:
  * @param  AddressSize Address size
  * @note   Only OPI mode support DTR transfer rate
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_EnableMemoryMappedModeDTR(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b098      	sub	sp, #96	; 0x60
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
 8006f70:	460b      	mov	r3, r1
 8006f72:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Mode);

  OSPI_RegularCmdTypeDef      s_command = {0};
 8006f74:	f107 0310 	add.w	r3, r7, #16
 8006f78:	2250      	movs	r2, #80	; 0x50
 8006f7a:	2100      	movs	r1, #0
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	f022 f9ee 	bl	802935e <memset>
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 8006f82:	f107 0308 	add.w	r3, r7, #8
 8006f86:	2200      	movs	r2, #0
 8006f88:	601a      	str	r2, [r3, #0]
 8006f8a:	605a      	str	r2, [r3, #4]

  /* Initialize the read command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_READ_CFG;
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	613b      	str	r3, [r7, #16]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8006f90:	2300      	movs	r3, #0
 8006f92:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = HAL_OSPI_INSTRUCTION_8_LINES;
 8006f94:	2304      	movs	r3, #4
 8006f96:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_ENABLE;
 8006f98:	2308      	movs	r3, #8
 8006f9a:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionSize    = HAL_OSPI_INSTRUCTION_16_BITS;
 8006f9c:	2310      	movs	r3, #16
 8006f9e:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = MX25LM51245G_OCTA_READ_DTR_CMD;
 8006fa0:	f64e 6311 	movw	r3, #60945	; 0xee11
 8006fa4:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = HAL_OSPI_ADDRESS_8_LINES;
 8006fa6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006faa:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_ENABLE;
 8006fac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006fb0:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8006fb2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8006fb6:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8006fb8:	2300      	movs	r3, #0
 8006fba:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DataMode           = HAL_OSPI_DATA_8_LINES;
 8006fbc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006fc0:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataDtrMode        = HAL_OSPI_DATA_DTR_ENABLE;
 8006fc2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006fc6:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DummyCycles        = DUMMY_CYCLES_READ_OCTAL_DTR;
 8006fc8:	2306      	movs	r3, #6
 8006fca:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DQSMode            = HAL_OSPI_DQS_ENABLE;
 8006fcc:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8006fd0:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006fd6:	f107 0310 	add.w	r3, r7, #16
 8006fda:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fde:	4619      	mov	r1, r3
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f004 fd1f 	bl	800ba24 <HAL_OSPI_Command>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d002      	beq.n	8006ff2 <MX25LM51245G_EnableMemoryMappedModeDTR+0x8a>
  {
    return MX25LM51245G_ERROR;
 8006fec:	f04f 33ff 	mov.w	r3, #4294967295
 8006ff0:	e025      	b.n	800703e <MX25LM51245G_EnableMemoryMappedModeDTR+0xd6>
  }

  /* Initialize the program command */
  s_command.OperationType = HAL_OSPI_OPTYPE_WRITE_CFG;
 8006ff2:	2302      	movs	r3, #2
 8006ff4:	613b      	str	r3, [r7, #16]
  s_command.Instruction   = MX25LM51245G_OCTA_PAGE_PROG_CMD;
 8006ff6:	f241 23ed 	movw	r3, #4845	; 0x12ed
 8006ffa:	61bb      	str	r3, [r7, #24]
  s_command.DummyCycles   = 0U;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DQSMode       = HAL_OSPI_DQS_DISABLE;
 8007000:	2300      	movs	r3, #0
 8007002:	65bb      	str	r3, [r7, #88]	; 0x58

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007004:	f107 0310 	add.w	r3, r7, #16
 8007008:	f241 3288 	movw	r2, #5000	; 0x1388
 800700c:	4619      	mov	r1, r3
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f004 fd08 	bl	800ba24 <HAL_OSPI_Command>
 8007014:	4603      	mov	r3, r0
 8007016:	2b00      	cmp	r3, #0
 8007018:	d002      	beq.n	8007020 <MX25LM51245G_EnableMemoryMappedModeDTR+0xb8>
  {
    return MX25LM51245G_ERROR;
 800701a:	f04f 33ff 	mov.w	r3, #4294967295
 800701e:	e00e      	b.n	800703e <MX25LM51245G_EnableMemoryMappedModeDTR+0xd6>
  }
  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 8007020:	2300      	movs	r3, #0
 8007022:	60bb      	str	r3, [r7, #8]

  if (HAL_OSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
 8007024:	f107 0308 	add.w	r3, r7, #8
 8007028:	4619      	mov	r1, r3
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f004 ff24 	bl	800be78 <HAL_OSPI_MemoryMapped>
 8007030:	4603      	mov	r3, r0
 8007032:	2b00      	cmp	r3, #0
 8007034:	d002      	beq.n	800703c <MX25LM51245G_EnableMemoryMappedModeDTR+0xd4>
  {
    return MX25LM51245G_ERROR;
 8007036:	f04f 33ff 	mov.w	r3, #4294967295
 800703a:	e000      	b.n	800703e <MX25LM51245G_EnableMemoryMappedModeDTR+0xd6>
  }

  return MX25LM51245G_OK;
 800703c:	2300      	movs	r3, #0
}
 800703e:	4618      	mov	r0, r3
 8007040:	3760      	adds	r7, #96	; 0x60
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}

08007046 <MX25LM51245G_WriteEnable>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_WriteEnable(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 8007046:	b580      	push	{r7, lr}
 8007048:	b09c      	sub	sp, #112	; 0x70
 800704a:	af00      	add	r7, sp, #0
 800704c:	6078      	str	r0, [r7, #4]
 800704e:	460b      	mov	r3, r1
 8007050:	70fb      	strb	r3, [r7, #3]
 8007052:	4613      	mov	r3, r2
 8007054:	70bb      	strb	r3, [r7, #2]
  OSPI_RegularCmdTypeDef     s_command = {0};
 8007056:	f107 0320 	add.w	r3, r7, #32
 800705a:	2250      	movs	r2, #80	; 0x50
 800705c:	2100      	movs	r1, #0
 800705e:	4618      	mov	r0, r3
 8007060:	f022 f97d 	bl	802935e <memset>
  OSPI_AutoPollingTypeDef s_config = {0};
 8007064:	f107 030c 	add.w	r3, r7, #12
 8007068:	2200      	movs	r2, #0
 800706a:	601a      	str	r2, [r3, #0]
 800706c:	605a      	str	r2, [r3, #4]
 800706e:	609a      	str	r2, [r3, #8]
 8007070:	60da      	str	r2, [r3, #12]
 8007072:	611a      	str	r2, [r3, #16]

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8007074:	78fb      	ldrb	r3, [r7, #3]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d105      	bne.n	8007086 <MX25LM51245G_WriteEnable+0x40>
 800707a:	78bb      	ldrb	r3, [r7, #2]
 800707c:	2b01      	cmp	r3, #1
 800707e:	d102      	bne.n	8007086 <MX25LM51245G_WriteEnable+0x40>
  {
    return MX25LM51245G_ERROR;
 8007080:	f04f 33ff 	mov.w	r3, #4294967295
 8007084:	e0a6      	b.n	80071d4 <MX25LM51245G_WriteEnable+0x18e>
  }

  /* Initialize the write enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8007086:	2300      	movs	r3, #0
 8007088:	623b      	str	r3, [r7, #32]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 800708a:	2300      	movs	r3, #0
 800708c:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800708e:	78fb      	ldrb	r3, [r7, #3]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d101      	bne.n	8007098 <MX25LM51245G_WriteEnable+0x52>
 8007094:	2301      	movs	r3, #1
 8007096:	e000      	b.n	800709a <MX25LM51245G_WriteEnable+0x54>
 8007098:	2304      	movs	r3, #4
 800709a:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800709c:	78bb      	ldrb	r3, [r7, #2]
 800709e:	2b01      	cmp	r3, #1
 80070a0:	d101      	bne.n	80070a6 <MX25LM51245G_WriteEnable+0x60>
 80070a2:	2308      	movs	r3, #8
 80070a4:	e000      	b.n	80070a8 <MX25LM51245G_WriteEnable+0x62>
 80070a6:	2300      	movs	r3, #0
 80070a8:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80070aa:	78fb      	ldrb	r3, [r7, #3]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d101      	bne.n	80070b4 <MX25LM51245G_WriteEnable+0x6e>
 80070b0:	2300      	movs	r3, #0
 80070b2:	e000      	b.n	80070b6 <MX25LM51245G_WriteEnable+0x70>
 80070b4:	2310      	movs	r3, #16
 80070b6:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_ENABLE_CMD : MX25LM51245G_OCTA_WRITE_ENABLE_CMD;
 80070b8:	78fb      	ldrb	r3, [r7, #3]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d101      	bne.n	80070c2 <MX25LM51245G_WriteEnable+0x7c>
 80070be:	2306      	movs	r3, #6
 80070c0:	e001      	b.n	80070c6 <MX25LM51245G_WriteEnable+0x80>
 80070c2:	f240 63f9 	movw	r3, #1785	; 0x6f9
 80070c6:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 80070c8:	2300      	movs	r3, #0
 80070ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80070cc:	2300      	movs	r3, #0
 80070ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DataMode           = HAL_OSPI_DATA_NONE;
 80070d0:	2300      	movs	r3, #0
 80070d2:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.DummyCycles        = 0U;
 80070d4:	2300      	movs	r3, #0
 80070d6:	667b      	str	r3, [r7, #100]	; 0x64
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 80070d8:	2300      	movs	r3, #0
 80070da:	66bb      	str	r3, [r7, #104]	; 0x68
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80070dc:	2300      	movs	r3, #0
 80070de:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80070e0:	f107 0320 	add.w	r3, r7, #32
 80070e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80070e8:	4619      	mov	r1, r3
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f004 fc9a 	bl	800ba24 <HAL_OSPI_Command>
 80070f0:	4603      	mov	r3, r0
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d002      	beq.n	80070fc <MX25LM51245G_WriteEnable+0xb6>
  {
    return MX25LM51245G_ERROR;
 80070f6:	f04f 33ff 	mov.w	r3, #4294967295
 80070fa:	e06b      	b.n	80071d4 <MX25LM51245G_WriteEnable+0x18e>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_command.Instruction    = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 80070fc:	78fb      	ldrb	r3, [r7, #3]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d101      	bne.n	8007106 <MX25LM51245G_WriteEnable+0xc0>
 8007102:	2305      	movs	r3, #5
 8007104:	e001      	b.n	800710a <MX25LM51245G_WriteEnable+0xc4>
 8007106:	f240 53fa 	movw	r3, #1530	; 0x5fa
 800710a:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 800710c:	78fb      	ldrb	r3, [r7, #3]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d101      	bne.n	8007116 <MX25LM51245G_WriteEnable+0xd0>
 8007112:	2300      	movs	r3, #0
 8007114:	e001      	b.n	800711a <MX25LM51245G_WriteEnable+0xd4>
 8007116:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800711a:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AddressDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 800711c:	78bb      	ldrb	r3, [r7, #2]
 800711e:	2b01      	cmp	r3, #1
 8007120:	d102      	bne.n	8007128 <MX25LM51245G_WriteEnable+0xe2>
 8007122:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007126:	e000      	b.n	800712a <MX25LM51245G_WriteEnable+0xe4>
 8007128:	2300      	movs	r3, #0
 800712a:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AddressSize    = HAL_OSPI_ADDRESS_32_BITS;
 800712c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8007130:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Address        = 0U;
 8007132:	2300      	movs	r3, #0
 8007134:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DataMode       = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8007136:	78fb      	ldrb	r3, [r7, #3]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d102      	bne.n	8007142 <MX25LM51245G_WriteEnable+0xfc>
 800713c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007140:	e001      	b.n	8007146 <MX25LM51245G_WriteEnable+0x100>
 8007142:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007146:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.DataDtrMode    = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8007148:	78bb      	ldrb	r3, [r7, #2]
 800714a:	2b01      	cmp	r3, #1
 800714c:	d102      	bne.n	8007154 <MX25LM51245G_WriteEnable+0x10e>
 800714e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007152:	e000      	b.n	8007156 <MX25LM51245G_WriteEnable+0x110>
 8007154:	2300      	movs	r3, #0
 8007156:	663b      	str	r3, [r7, #96]	; 0x60
  s_command.DummyCycles    = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8007158:	78fb      	ldrb	r3, [r7, #3]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d101      	bne.n	8007162 <MX25LM51245G_WriteEnable+0x11c>
 800715e:	2300      	movs	r3, #0
 8007160:	e000      	b.n	8007164 <MX25LM51245G_WriteEnable+0x11e>
 8007162:	2305      	movs	r3, #5
 8007164:	667b      	str	r3, [r7, #100]	; 0x64
  s_command.NbData         = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8007166:	78bb      	ldrb	r3, [r7, #2]
 8007168:	2b01      	cmp	r3, #1
 800716a:	d101      	bne.n	8007170 <MX25LM51245G_WriteEnable+0x12a>
 800716c:	2302      	movs	r3, #2
 800716e:	e000      	b.n	8007172 <MX25LM51245G_WriteEnable+0x12c>
 8007170:	2301      	movs	r3, #1
 8007172:	65fb      	str	r3, [r7, #92]	; 0x5c
  s_command.DQSMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 8007174:	78bb      	ldrb	r3, [r7, #2]
 8007176:	2b01      	cmp	r3, #1
 8007178:	d102      	bne.n	8007180 <MX25LM51245G_WriteEnable+0x13a>
 800717a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800717e:	e000      	b.n	8007182 <MX25LM51245G_WriteEnable+0x13c>
 8007180:	2300      	movs	r3, #0
 8007182:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007184:	f107 0320 	add.w	r3, r7, #32
 8007188:	f241 3288 	movw	r2, #5000	; 0x1388
 800718c:	4619      	mov	r1, r3
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f004 fc48 	bl	800ba24 <HAL_OSPI_Command>
 8007194:	4603      	mov	r3, r0
 8007196:	2b00      	cmp	r3, #0
 8007198:	d002      	beq.n	80071a0 <MX25LM51245G_WriteEnable+0x15a>
  {
    return MX25LM51245G_ERROR;
 800719a:	f04f 33ff 	mov.w	r3, #4294967295
 800719e:	e019      	b.n	80071d4 <MX25LM51245G_WriteEnable+0x18e>
  }

  s_config.Match           = 2U;
 80071a0:	2302      	movs	r3, #2
 80071a2:	60fb      	str	r3, [r7, #12]
  s_config.Mask            = 2U;
 80071a4:	2302      	movs	r3, #2
 80071a6:	613b      	str	r3, [r7, #16]
  s_config.MatchMode       = HAL_OSPI_MATCH_MODE_AND;
 80071a8:	2300      	movs	r3, #0
 80071aa:	617b      	str	r3, [r7, #20]
  s_config.Interval        = MX25LM51245G_AUTOPOLLING_INTERVAL_TIME;
 80071ac:	2310      	movs	r3, #16
 80071ae:	61fb      	str	r3, [r7, #28]
  s_config.AutomaticStop   = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 80071b0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80071b4:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_AutoPolling(Ctx, &s_config, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80071b6:	f107 030c 	add.w	r3, r7, #12
 80071ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80071be:	4619      	mov	r1, r3
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f004 fdd2 	bl	800bd6a <HAL_OSPI_AutoPolling>
 80071c6:	4603      	mov	r3, r0
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d002      	beq.n	80071d2 <MX25LM51245G_WriteEnable+0x18c>
  {
    return MX25LM51245G_ERROR;
 80071cc:	f04f 33ff 	mov.w	r3, #4294967295
 80071d0:	e000      	b.n	80071d4 <MX25LM51245G_WriteEnable+0x18e>
  }

  return MX25LM51245G_OK;
 80071d2:	2300      	movs	r3, #0
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	3770      	adds	r7, #112	; 0x70
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}

080071dc <MX25LM51245G_WriteCfg2Register>:
  * @param  Rate Transfer rate STR or DTR
  * @param  Value Value to write to configuration register
  * @retval error status
  */
int32_t MX25LM51245G_WriteCfg2Register(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate, uint32_t WriteAddr, uint8_t Value)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b098      	sub	sp, #96	; 0x60
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	60f8      	str	r0, [r7, #12]
 80071e4:	607b      	str	r3, [r7, #4]
 80071e6:	460b      	mov	r3, r1
 80071e8:	72fb      	strb	r3, [r7, #11]
 80071ea:	4613      	mov	r3, r2
 80071ec:	72bb      	strb	r3, [r7, #10]
  OSPI_RegularCmdTypeDef s_command = {0};
 80071ee:	f107 0310 	add.w	r3, r7, #16
 80071f2:	2250      	movs	r2, #80	; 0x50
 80071f4:	2100      	movs	r1, #0
 80071f6:	4618      	mov	r0, r3
 80071f8:	f022 f8b1 	bl	802935e <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 80071fc:	7afb      	ldrb	r3, [r7, #11]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d105      	bne.n	800720e <MX25LM51245G_WriteCfg2Register+0x32>
 8007202:	7abb      	ldrb	r3, [r7, #10]
 8007204:	2b01      	cmp	r3, #1
 8007206:	d102      	bne.n	800720e <MX25LM51245G_WriteCfg2Register+0x32>
  {
    return MX25LM51245G_ERROR;
 8007208:	f04f 33ff 	mov.w	r3, #4294967295
 800720c:	e077      	b.n	80072fe <MX25LM51245G_WriteCfg2Register+0x122>
  }

  /* Initialize the writing of configuration register 2 */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800720e:	2300      	movs	r3, #0
 8007210:	613b      	str	r3, [r7, #16]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8007212:	2300      	movs	r3, #0
 8007214:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8007216:	7afb      	ldrb	r3, [r7, #11]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d101      	bne.n	8007220 <MX25LM51245G_WriteCfg2Register+0x44>
 800721c:	2301      	movs	r3, #1
 800721e:	e000      	b.n	8007222 <MX25LM51245G_WriteCfg2Register+0x46>
 8007220:	2304      	movs	r3, #4
 8007222:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8007224:	7abb      	ldrb	r3, [r7, #10]
 8007226:	2b01      	cmp	r3, #1
 8007228:	d101      	bne.n	800722e <MX25LM51245G_WriteCfg2Register+0x52>
 800722a:	2308      	movs	r3, #8
 800722c:	e000      	b.n	8007230 <MX25LM51245G_WriteCfg2Register+0x54>
 800722e:	2300      	movs	r3, #0
 8007230:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8007232:	7afb      	ldrb	r3, [r7, #11]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d101      	bne.n	800723c <MX25LM51245G_WriteCfg2Register+0x60>
 8007238:	2300      	movs	r3, #0
 800723a:	e000      	b.n	800723e <MX25LM51245G_WriteCfg2Register+0x62>
 800723c:	2310      	movs	r3, #16
 800723e:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_CFG_REG2_CMD : MX25LM51245G_OCTA_WRITE_CFG_REG2_CMD;
 8007240:	7afb      	ldrb	r3, [r7, #11]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d101      	bne.n	800724a <MX25LM51245G_WriteCfg2Register+0x6e>
 8007246:	2372      	movs	r3, #114	; 0x72
 8007248:	e001      	b.n	800724e <MX25LM51245G_WriteCfg2Register+0x72>
 800724a:	f247 238d 	movw	r3, #29325	; 0x728d
 800724e:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8007250:	7afb      	ldrb	r3, [r7, #11]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d102      	bne.n	800725c <MX25LM51245G_WriteCfg2Register+0x80>
 8007256:	f44f 7380 	mov.w	r3, #256	; 0x100
 800725a:	e001      	b.n	8007260 <MX25LM51245G_WriteCfg2Register+0x84>
 800725c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007260:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8007262:	7abb      	ldrb	r3, [r7, #10]
 8007264:	2b01      	cmp	r3, #1
 8007266:	d102      	bne.n	800726e <MX25LM51245G_WriteCfg2Register+0x92>
 8007268:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800726c:	e000      	b.n	8007270 <MX25LM51245G_WriteCfg2Register+0x94>
 800726e:	2300      	movs	r3, #0
 8007270:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8007272:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8007276:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.Address            = WriteAddr;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800727c:	2300      	movs	r3, #0
 800727e:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8007280:	7afb      	ldrb	r3, [r7, #11]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d102      	bne.n	800728c <MX25LM51245G_WriteCfg2Register+0xb0>
 8007286:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800728a:	e001      	b.n	8007290 <MX25LM51245G_WriteCfg2Register+0xb4>
 800728c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007290:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8007292:	7abb      	ldrb	r3, [r7, #10]
 8007294:	2b01      	cmp	r3, #1
 8007296:	d102      	bne.n	800729e <MX25LM51245G_WriteCfg2Register+0xc2>
 8007298:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800729c:	e000      	b.n	80072a0 <MX25LM51245G_WriteCfg2Register+0xc4>
 800729e:	2300      	movs	r3, #0
 80072a0:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DummyCycles        = 0U;
 80072a2:	2300      	movs	r3, #0
 80072a4:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.NbData             = (Mode == MX25LM51245G_SPI_MODE) ? 1U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U);
 80072a6:	7afb      	ldrb	r3, [r7, #11]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d006      	beq.n	80072ba <MX25LM51245G_WriteCfg2Register+0xde>
 80072ac:	7abb      	ldrb	r3, [r7, #10]
 80072ae:	2b01      	cmp	r3, #1
 80072b0:	d101      	bne.n	80072b6 <MX25LM51245G_WriteCfg2Register+0xda>
 80072b2:	2302      	movs	r3, #2
 80072b4:	e002      	b.n	80072bc <MX25LM51245G_WriteCfg2Register+0xe0>
 80072b6:	2301      	movs	r3, #1
 80072b8:	e000      	b.n	80072bc <MX25LM51245G_WriteCfg2Register+0xe0>
 80072ba:	2301      	movs	r3, #1
 80072bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 80072be:	2300      	movs	r3, #0
 80072c0:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80072c2:	2300      	movs	r3, #0
 80072c4:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80072c6:	f107 0310 	add.w	r3, r7, #16
 80072ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80072ce:	4619      	mov	r1, r3
 80072d0:	68f8      	ldr	r0, [r7, #12]
 80072d2:	f004 fba7 	bl	800ba24 <HAL_OSPI_Command>
 80072d6:	4603      	mov	r3, r0
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d002      	beq.n	80072e2 <MX25LM51245G_WriteCfg2Register+0x106>
  {
    return MX25LM51245G_ERROR;
 80072dc:	f04f 33ff 	mov.w	r3, #4294967295
 80072e0:	e00d      	b.n	80072fe <MX25LM51245G_WriteCfg2Register+0x122>
  }

  if (HAL_OSPI_Transmit(Ctx, &Value, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80072e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80072e6:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80072ea:	68f8      	ldr	r0, [r7, #12]
 80072ec:	f004 fc27 	bl	800bb3e <HAL_OSPI_Transmit>
 80072f0:	4603      	mov	r3, r0
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d002      	beq.n	80072fc <MX25LM51245G_WriteCfg2Register+0x120>
  {
    return MX25LM51245G_ERROR;
 80072f6:	f04f 33ff 	mov.w	r3, #4294967295
 80072fa:	e000      	b.n	80072fe <MX25LM51245G_WriteCfg2Register+0x122>
  }

  return MX25LM51245G_OK;
 80072fc:	2300      	movs	r3, #0
}
 80072fe:	4618      	mov	r0, r3
 8007300:	3760      	adds	r7, #96	; 0x60
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}

08007306 <MX25LM51245G_ReadCfg2Register>:
  * @param  Rate Transfer rate STR or DTR
  * @param  Value configuration register 2 value pointer
  * @retval error status
  */
int32_t MX25LM51245G_ReadCfg2Register(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate, uint32_t ReadAddr, uint8_t *Value)
{
 8007306:	b580      	push	{r7, lr}
 8007308:	b098      	sub	sp, #96	; 0x60
 800730a:	af00      	add	r7, sp, #0
 800730c:	60f8      	str	r0, [r7, #12]
 800730e:	607b      	str	r3, [r7, #4]
 8007310:	460b      	mov	r3, r1
 8007312:	72fb      	strb	r3, [r7, #11]
 8007314:	4613      	mov	r3, r2
 8007316:	72bb      	strb	r3, [r7, #10]
  OSPI_RegularCmdTypeDef s_command = {0};
 8007318:	f107 0310 	add.w	r3, r7, #16
 800731c:	2250      	movs	r2, #80	; 0x50
 800731e:	2100      	movs	r1, #0
 8007320:	4618      	mov	r0, r3
 8007322:	f022 f81c 	bl	802935e <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8007326:	7afb      	ldrb	r3, [r7, #11]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d105      	bne.n	8007338 <MX25LM51245G_ReadCfg2Register+0x32>
 800732c:	7abb      	ldrb	r3, [r7, #10]
 800732e:	2b01      	cmp	r3, #1
 8007330:	d102      	bne.n	8007338 <MX25LM51245G_ReadCfg2Register+0x32>
  {
    return MX25LM51245G_ERROR;
 8007332:	f04f 33ff 	mov.w	r3, #4294967295
 8007336:	e07c      	b.n	8007432 <MX25LM51245G_ReadCfg2Register+0x12c>
  }

  /* Initialize the reading of status register */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8007338:	2300      	movs	r3, #0
 800733a:	613b      	str	r3, [r7, #16]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 800733c:	2300      	movs	r3, #0
 800733e:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8007340:	7afb      	ldrb	r3, [r7, #11]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d101      	bne.n	800734a <MX25LM51245G_ReadCfg2Register+0x44>
 8007346:	2301      	movs	r3, #1
 8007348:	e000      	b.n	800734c <MX25LM51245G_ReadCfg2Register+0x46>
 800734a:	2304      	movs	r3, #4
 800734c:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800734e:	7abb      	ldrb	r3, [r7, #10]
 8007350:	2b01      	cmp	r3, #1
 8007352:	d101      	bne.n	8007358 <MX25LM51245G_ReadCfg2Register+0x52>
 8007354:	2308      	movs	r3, #8
 8007356:	e000      	b.n	800735a <MX25LM51245G_ReadCfg2Register+0x54>
 8007358:	2300      	movs	r3, #0
 800735a:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800735c:	7afb      	ldrb	r3, [r7, #11]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d101      	bne.n	8007366 <MX25LM51245G_ReadCfg2Register+0x60>
 8007362:	2300      	movs	r3, #0
 8007364:	e000      	b.n	8007368 <MX25LM51245G_ReadCfg2Register+0x62>
 8007366:	2310      	movs	r3, #16
 8007368:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_CFG_REG2_CMD : MX25LM51245G_OCTA_READ_CFG_REG2_CMD;
 800736a:	7afb      	ldrb	r3, [r7, #11]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d101      	bne.n	8007374 <MX25LM51245G_ReadCfg2Register+0x6e>
 8007370:	2371      	movs	r3, #113	; 0x71
 8007372:	e001      	b.n	8007378 <MX25LM51245G_ReadCfg2Register+0x72>
 8007374:	f247 138e 	movw	r3, #29070	; 0x718e
 8007378:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 800737a:	7afb      	ldrb	r3, [r7, #11]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d102      	bne.n	8007386 <MX25LM51245G_ReadCfg2Register+0x80>
 8007380:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007384:	e001      	b.n	800738a <MX25LM51245G_ReadCfg2Register+0x84>
 8007386:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800738a:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 800738c:	7abb      	ldrb	r3, [r7, #10]
 800738e:	2b01      	cmp	r3, #1
 8007390:	d102      	bne.n	8007398 <MX25LM51245G_ReadCfg2Register+0x92>
 8007392:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007396:	e000      	b.n	800739a <MX25LM51245G_ReadCfg2Register+0x94>
 8007398:	2300      	movs	r3, #0
 800739a:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 800739c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80073a0:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.Address            = ReadAddr;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80073a6:	2300      	movs	r3, #0
 80073a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 80073aa:	7afb      	ldrb	r3, [r7, #11]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d102      	bne.n	80073b6 <MX25LM51245G_ReadCfg2Register+0xb0>
 80073b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80073b4:	e001      	b.n	80073ba <MX25LM51245G_ReadCfg2Register+0xb4>
 80073b6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80073ba:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 80073bc:	7abb      	ldrb	r3, [r7, #10]
 80073be:	2b01      	cmp	r3, #1
 80073c0:	d102      	bne.n	80073c8 <MX25LM51245G_ReadCfg2Register+0xc2>
 80073c2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80073c6:	e000      	b.n	80073ca <MX25LM51245G_ReadCfg2Register+0xc4>
 80073c8:	2300      	movs	r3, #0
 80073ca:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 80073cc:	7afb      	ldrb	r3, [r7, #11]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d101      	bne.n	80073d6 <MX25LM51245G_ReadCfg2Register+0xd0>
 80073d2:	2300      	movs	r3, #0
 80073d4:	e000      	b.n	80073d8 <MX25LM51245G_ReadCfg2Register+0xd2>
 80073d6:	2305      	movs	r3, #5
 80073d8:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 80073da:	7abb      	ldrb	r3, [r7, #10]
 80073dc:	2b01      	cmp	r3, #1
 80073de:	d101      	bne.n	80073e4 <MX25LM51245G_ReadCfg2Register+0xde>
 80073e0:	2302      	movs	r3, #2
 80073e2:	e000      	b.n	80073e6 <MX25LM51245G_ReadCfg2Register+0xe0>
 80073e4:	2301      	movs	r3, #1
 80073e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 80073e8:	7abb      	ldrb	r3, [r7, #10]
 80073ea:	2b01      	cmp	r3, #1
 80073ec:	d102      	bne.n	80073f4 <MX25LM51245G_ReadCfg2Register+0xee>
 80073ee:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80073f2:	e000      	b.n	80073f6 <MX25LM51245G_ReadCfg2Register+0xf0>
 80073f4:	2300      	movs	r3, #0
 80073f6:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80073f8:	2300      	movs	r3, #0
 80073fa:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80073fc:	f107 0310 	add.w	r3, r7, #16
 8007400:	f241 3288 	movw	r2, #5000	; 0x1388
 8007404:	4619      	mov	r1, r3
 8007406:	68f8      	ldr	r0, [r7, #12]
 8007408:	f004 fb0c 	bl	800ba24 <HAL_OSPI_Command>
 800740c:	4603      	mov	r3, r0
 800740e:	2b00      	cmp	r3, #0
 8007410:	d002      	beq.n	8007418 <MX25LM51245G_ReadCfg2Register+0x112>
  {
    return MX25LM51245G_ERROR;
 8007412:	f04f 33ff 	mov.w	r3, #4294967295
 8007416:	e00c      	b.n	8007432 <MX25LM51245G_ReadCfg2Register+0x12c>
  }

  /* Reception of the data */
  if (HAL_OSPI_Receive(Ctx, Value, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007418:	f241 3288 	movw	r2, #5000	; 0x1388
 800741c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800741e:	68f8      	ldr	r0, [r7, #12]
 8007420:	f004 fc00 	bl	800bc24 <HAL_OSPI_Receive>
 8007424:	4603      	mov	r3, r0
 8007426:	2b00      	cmp	r3, #0
 8007428:	d002      	beq.n	8007430 <MX25LM51245G_ReadCfg2Register+0x12a>
  {
    return MX25LM51245G_ERROR;
 800742a:	f04f 33ff 	mov.w	r3, #4294967295
 800742e:	e000      	b.n	8007432 <MX25LM51245G_ReadCfg2Register+0x12c>
  }

  return MX25LM51245G_OK;
 8007430:	2300      	movs	r3, #0
}
 8007432:	4618      	mov	r0, r3
 8007434:	3760      	adds	r7, #96	; 0x60
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}

0800743a <MX25LM51245G_ResetEnable>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_ResetEnable(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 800743a:	b580      	push	{r7, lr}
 800743c:	b096      	sub	sp, #88	; 0x58
 800743e:	af00      	add	r7, sp, #0
 8007440:	6078      	str	r0, [r7, #4]
 8007442:	460b      	mov	r3, r1
 8007444:	70fb      	strb	r3, [r7, #3]
 8007446:	4613      	mov	r3, r2
 8007448:	70bb      	strb	r3, [r7, #2]
  OSPI_RegularCmdTypeDef s_command = {0};
 800744a:	f107 0308 	add.w	r3, r7, #8
 800744e:	2250      	movs	r2, #80	; 0x50
 8007450:	2100      	movs	r1, #0
 8007452:	4618      	mov	r0, r3
 8007454:	f021 ff83 	bl	802935e <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8007458:	78fb      	ldrb	r3, [r7, #3]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d105      	bne.n	800746a <MX25LM51245G_ResetEnable+0x30>
 800745e:	78bb      	ldrb	r3, [r7, #2]
 8007460:	2b01      	cmp	r3, #1
 8007462:	d102      	bne.n	800746a <MX25LM51245G_ResetEnable+0x30>
  {
    return MX25LM51245G_ERROR;
 8007464:	f04f 33ff 	mov.w	r3, #4294967295
 8007468:	e03b      	b.n	80074e2 <MX25LM51245G_ResetEnable+0xa8>
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800746a:	2300      	movs	r3, #0
 800746c:	60bb      	str	r3, [r7, #8]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 800746e:	2300      	movs	r3, #0
 8007470:	60fb      	str	r3, [r7, #12]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8007472:	78fb      	ldrb	r3, [r7, #3]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d101      	bne.n	800747c <MX25LM51245G_ResetEnable+0x42>
 8007478:	2301      	movs	r3, #1
 800747a:	e000      	b.n	800747e <MX25LM51245G_ResetEnable+0x44>
 800747c:	2304      	movs	r3, #4
 800747e:	617b      	str	r3, [r7, #20]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8007480:	78bb      	ldrb	r3, [r7, #2]
 8007482:	2b01      	cmp	r3, #1
 8007484:	d101      	bne.n	800748a <MX25LM51245G_ResetEnable+0x50>
 8007486:	2308      	movs	r3, #8
 8007488:	e000      	b.n	800748c <MX25LM51245G_ResetEnable+0x52>
 800748a:	2300      	movs	r3, #0
 800748c:	61fb      	str	r3, [r7, #28]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800748e:	78fb      	ldrb	r3, [r7, #3]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d101      	bne.n	8007498 <MX25LM51245G_ResetEnable+0x5e>
 8007494:	2300      	movs	r3, #0
 8007496:	e000      	b.n	800749a <MX25LM51245G_ResetEnable+0x60>
 8007498:	2310      	movs	r3, #16
 800749a:	61bb      	str	r3, [r7, #24]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_ENABLE_CMD : MX25LM51245G_OCTA_RESET_ENABLE_CMD;
 800749c:	78fb      	ldrb	r3, [r7, #3]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d101      	bne.n	80074a6 <MX25LM51245G_ResetEnable+0x6c>
 80074a2:	2366      	movs	r3, #102	; 0x66
 80074a4:	e001      	b.n	80074aa <MX25LM51245G_ResetEnable+0x70>
 80074a6:	f246 6399 	movw	r3, #26265	; 0x6699
 80074aa:	613b      	str	r3, [r7, #16]
  s_command.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 80074ac:	2300      	movs	r3, #0
 80074ae:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80074b0:	2300      	movs	r3, #0
 80074b2:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DataMode           = HAL_OSPI_DATA_NONE;
 80074b4:	2300      	movs	r3, #0
 80074b6:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DummyCycles        = 0U;
 80074b8:	2300      	movs	r3, #0
 80074ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 80074bc:	2300      	movs	r3, #0
 80074be:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80074c0:	2300      	movs	r3, #0
 80074c2:	657b      	str	r3, [r7, #84]	; 0x54

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80074c4:	f107 0308 	add.w	r3, r7, #8
 80074c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80074cc:	4619      	mov	r1, r3
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f004 faa8 	bl	800ba24 <HAL_OSPI_Command>
 80074d4:	4603      	mov	r3, r0
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d002      	beq.n	80074e0 <MX25LM51245G_ResetEnable+0xa6>
  {
    return MX25LM51245G_ERROR;
 80074da:	f04f 33ff 	mov.w	r3, #4294967295
 80074de:	e000      	b.n	80074e2 <MX25LM51245G_ResetEnable+0xa8>
  }

  return MX25LM51245G_OK;
 80074e0:	2300      	movs	r3, #0
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	3758      	adds	r7, #88	; 0x58
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}

080074ea <MX25LM51245G_ResetMemory>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_ResetMemory(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 80074ea:	b580      	push	{r7, lr}
 80074ec:	b096      	sub	sp, #88	; 0x58
 80074ee:	af00      	add	r7, sp, #0
 80074f0:	6078      	str	r0, [r7, #4]
 80074f2:	460b      	mov	r3, r1
 80074f4:	70fb      	strb	r3, [r7, #3]
 80074f6:	4613      	mov	r3, r2
 80074f8:	70bb      	strb	r3, [r7, #2]
  OSPI_RegularCmdTypeDef s_command = {0};
 80074fa:	f107 0308 	add.w	r3, r7, #8
 80074fe:	2250      	movs	r2, #80	; 0x50
 8007500:	2100      	movs	r1, #0
 8007502:	4618      	mov	r0, r3
 8007504:	f021 ff2b 	bl	802935e <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8007508:	78fb      	ldrb	r3, [r7, #3]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d105      	bne.n	800751a <MX25LM51245G_ResetMemory+0x30>
 800750e:	78bb      	ldrb	r3, [r7, #2]
 8007510:	2b01      	cmp	r3, #1
 8007512:	d102      	bne.n	800751a <MX25LM51245G_ResetMemory+0x30>
  {
    return MX25LM51245G_ERROR;
 8007514:	f04f 33ff 	mov.w	r3, #4294967295
 8007518:	e03b      	b.n	8007592 <MX25LM51245G_ResetMemory+0xa8>
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800751a:	2300      	movs	r3, #0
 800751c:	60bb      	str	r3, [r7, #8]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 800751e:	2300      	movs	r3, #0
 8007520:	60fb      	str	r3, [r7, #12]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8007522:	78fb      	ldrb	r3, [r7, #3]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d101      	bne.n	800752c <MX25LM51245G_ResetMemory+0x42>
 8007528:	2301      	movs	r3, #1
 800752a:	e000      	b.n	800752e <MX25LM51245G_ResetMemory+0x44>
 800752c:	2304      	movs	r3, #4
 800752e:	617b      	str	r3, [r7, #20]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8007530:	78bb      	ldrb	r3, [r7, #2]
 8007532:	2b01      	cmp	r3, #1
 8007534:	d101      	bne.n	800753a <MX25LM51245G_ResetMemory+0x50>
 8007536:	2308      	movs	r3, #8
 8007538:	e000      	b.n	800753c <MX25LM51245G_ResetMemory+0x52>
 800753a:	2300      	movs	r3, #0
 800753c:	61fb      	str	r3, [r7, #28]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800753e:	78fb      	ldrb	r3, [r7, #3]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d101      	bne.n	8007548 <MX25LM51245G_ResetMemory+0x5e>
 8007544:	2300      	movs	r3, #0
 8007546:	e000      	b.n	800754a <MX25LM51245G_ResetMemory+0x60>
 8007548:	2310      	movs	r3, #16
 800754a:	61bb      	str	r3, [r7, #24]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_MEMORY_CMD : MX25LM51245G_OCTA_RESET_MEMORY_CMD;
 800754c:	78fb      	ldrb	r3, [r7, #3]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d101      	bne.n	8007556 <MX25LM51245G_ResetMemory+0x6c>
 8007552:	2399      	movs	r3, #153	; 0x99
 8007554:	e001      	b.n	800755a <MX25LM51245G_ResetMemory+0x70>
 8007556:	f649 1366 	movw	r3, #39270	; 0x9966
 800755a:	613b      	str	r3, [r7, #16]
  s_command.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 800755c:	2300      	movs	r3, #0
 800755e:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8007560:	2300      	movs	r3, #0
 8007562:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DataMode           = HAL_OSPI_DATA_NONE;
 8007564:	2300      	movs	r3, #0
 8007566:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DummyCycles        = 0U;
 8007568:	2300      	movs	r3, #0
 800756a:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 800756c:	2300      	movs	r3, #0
 800756e:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8007570:	2300      	movs	r3, #0
 8007572:	657b      	str	r3, [r7, #84]	; 0x54

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007574:	f107 0308 	add.w	r3, r7, #8
 8007578:	f241 3288 	movw	r2, #5000	; 0x1388
 800757c:	4619      	mov	r1, r3
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f004 fa50 	bl	800ba24 <HAL_OSPI_Command>
 8007584:	4603      	mov	r3, r0
 8007586:	2b00      	cmp	r3, #0
 8007588:	d002      	beq.n	8007590 <MX25LM51245G_ResetMemory+0xa6>
  {
    return MX25LM51245G_ERROR;
 800758a:	f04f 33ff 	mov.w	r3, #4294967295
 800758e:	e000      	b.n	8007592 <MX25LM51245G_ResetMemory+0xa8>
  }

  return MX25LM51245G_OK;
 8007590:	2300      	movs	r3, #0
}
 8007592:	4618      	mov	r0, r3
 8007594:	3758      	adds	r7, #88	; 0x58
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}
	...

0800759c <BSP_I2C4_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b082      	sub	sp, #8
 80075a0:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80075a2:	2300      	movs	r3, #0
 80075a4:	607b      	str	r3, [r7, #4]

  hbus_i2c4.Instance = BUS_I2C4;
 80075a6:	4b16      	ldr	r3, [pc, #88]	; (8007600 <BSP_I2C4_Init+0x64>)
 80075a8:	4a16      	ldr	r2, [pc, #88]	; (8007604 <BSP_I2C4_Init+0x68>)
 80075aa:	601a      	str	r2, [r3, #0]

  if (I2c4InitCounter == 0U)
 80075ac:	4b16      	ldr	r3, [pc, #88]	; (8007608 <BSP_I2C4_Init+0x6c>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d11f      	bne.n	80075f4 <BSP_I2C4_Init+0x58>
  {
    I2c4InitCounter++;
 80075b4:	4b14      	ldr	r3, [pc, #80]	; (8007608 <BSP_I2C4_Init+0x6c>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	3301      	adds	r3, #1
 80075ba:	4a13      	ldr	r2, [pc, #76]	; (8007608 <BSP_I2C4_Init+0x6c>)
 80075bc:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 80075be:	4810      	ldr	r0, [pc, #64]	; (8007600 <BSP_I2C4_Init+0x64>)
 80075c0:	f003 f886 	bl	800a6d0 <HAL_I2C_GetState>
 80075c4:	4603      	mov	r3, r0
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d114      	bne.n	80075f4 <BSP_I2C4_Init+0x58>
    {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C4 Msp */
      I2C4_MspInit(&hbus_i2c4);
 80075ca:	480d      	ldr	r0, [pc, #52]	; (8007600 <BSP_I2C4_Init+0x64>)
 80075cc:	f000 fb60 	bl	8007c90 <I2C4_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 80075d0:	f005 ff64 	bl	800d49c <HAL_RCC_GetPCLK2Freq>
 80075d4:	4603      	mov	r3, r0
 80075d6:	490d      	ldr	r1, [pc, #52]	; (800760c <BSP_I2C4_Init+0x70>)
 80075d8:	4618      	mov	r0, r3
 80075da:	f000 f8e3 	bl	80077a4 <I2C_GetTiming>
 80075de:	4603      	mov	r3, r0
 80075e0:	4619      	mov	r1, r3
 80075e2:	4807      	ldr	r0, [pc, #28]	; (8007600 <BSP_I2C4_Init+0x64>)
 80075e4:	f000 f838 	bl	8007658 <MX_I2C4_Init>
 80075e8:	4603      	mov	r3, r0
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d002      	beq.n	80075f4 <BSP_I2C4_Init+0x58>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80075ee:	f06f 0307 	mvn.w	r3, #7
 80075f2:	607b      	str	r3, [r7, #4]
      }
#endif
    }
  }

  return ret;
 80075f4:	687b      	ldr	r3, [r7, #4]
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3708      	adds	r7, #8
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}
 80075fe:	bf00      	nop
 8007600:	24002550 	.word	0x24002550
 8007604:	58001c00 	.word	0x58001c00
 8007608:	24001b48 	.word	0x24001b48
 800760c:	000186a0 	.word	0x000186a0

08007610 <BSP_I2C4_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_DeInit(void)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b082      	sub	sp, #8
 8007614:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 8007616:	2300      	movs	r3, #0
 8007618:	607b      	str	r3, [r7, #4]

  I2c4InitCounter--;
 800761a:	4b0d      	ldr	r3, [pc, #52]	; (8007650 <BSP_I2C4_DeInit+0x40>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	3b01      	subs	r3, #1
 8007620:	4a0b      	ldr	r2, [pc, #44]	; (8007650 <BSP_I2C4_DeInit+0x40>)
 8007622:	6013      	str	r3, [r2, #0]

  if (I2c4InitCounter == 0U)
 8007624:	4b0a      	ldr	r3, [pc, #40]	; (8007650 <BSP_I2C4_DeInit+0x40>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d10b      	bne.n	8007644 <BSP_I2C4_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C4_MspDeInit(&hbus_i2c4);
 800762c:	4809      	ldr	r0, [pc, #36]	; (8007654 <BSP_I2C4_DeInit+0x44>)
 800762e:	f000 fb9b 	bl	8007d68 <I2C4_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 8007632:	4808      	ldr	r0, [pc, #32]	; (8007654 <BSP_I2C4_DeInit+0x44>)
 8007634:	f002 fdee 	bl	800a214 <HAL_I2C_DeInit>
 8007638:	4603      	mov	r3, r0
 800763a:	2b00      	cmp	r3, #0
 800763c:	d002      	beq.n	8007644 <BSP_I2C4_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 800763e:	f06f 0307 	mvn.w	r3, #7
 8007642:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 8007644:	687b      	ldr	r3, [r7, #4]
}
 8007646:	4618      	mov	r0, r3
 8007648:	3708      	adds	r7, #8
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}
 800764e:	bf00      	nop
 8007650:	24001b48 	.word	0x24001b48
 8007654:	24002550 	.word	0x24002550

08007658 <MX_I2C4_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b084      	sub	sp, #16
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
 8007660:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007662:	2300      	movs	r3, #0
 8007664:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	683a      	ldr	r2, [r7, #0]
 800766a:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2200      	movs	r2, #0
 8007670:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2201      	movs	r2, #1
 8007676:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2200      	movs	r2, #0
 800767c:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2200      	movs	r2, #0
 8007682:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2200      	movs	r2, #0
 8007688:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2200      	movs	r2, #0
 800768e:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2200      	movs	r2, #0
 8007694:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f002 fd2c 	bl	800a0f4 <HAL_I2C_Init>
 800769c:	4603      	mov	r3, r0
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d002      	beq.n	80076a8 <MX_I2C4_Init+0x50>
  {
    status = HAL_ERROR;
 80076a2:	2301      	movs	r3, #1
 80076a4:	73fb      	strb	r3, [r7, #15]
 80076a6:	e014      	b.n	80076d2 <MX_I2C4_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
 80076a8:	2300      	movs	r3, #0
 80076aa:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 80076ac:	68b9      	ldr	r1, [r7, #8]
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f003 fae0 	bl	800ac74 <HAL_I2CEx_ConfigAnalogFilter>
 80076b4:	4603      	mov	r3, r0
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d002      	beq.n	80076c0 <MX_I2C4_Init+0x68>
    {
      status = HAL_ERROR;
 80076ba:	2301      	movs	r3, #1
 80076bc:	73fb      	strb	r3, [r7, #15]
 80076be:	e008      	b.n	80076d2 <MX_I2C4_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 80076c0:	2100      	movs	r1, #0
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f003 fb21 	bl	800ad0a <HAL_I2CEx_ConfigDigitalFilter>
 80076c8:	4603      	mov	r3, r0
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d001      	beq.n	80076d2 <MX_I2C4_Init+0x7a>
      {
        status = HAL_ERROR;
 80076ce:	2301      	movs	r3, #1
 80076d0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 80076d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	3710      	adds	r7, #16
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}

080076dc <BSP_I2C4_WriteReg>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b088      	sub	sp, #32
 80076e0:	af02      	add	r7, sp, #8
 80076e2:	60ba      	str	r2, [r7, #8]
 80076e4:	461a      	mov	r2, r3
 80076e6:	4603      	mov	r3, r0
 80076e8:	81fb      	strh	r3, [r7, #14]
 80076ea:	460b      	mov	r3, r1
 80076ec:	81bb      	strh	r3, [r7, #12]
 80076ee:	4613      	mov	r3, r2
 80076f0:	80fb      	strh	r3, [r7, #6]
  int32_t ret;

  if(I2C4_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 80076f2:	89b9      	ldrh	r1, [r7, #12]
 80076f4:	89f8      	ldrh	r0, [r7, #14]
 80076f6:	88fb      	ldrh	r3, [r7, #6]
 80076f8:	9300      	str	r3, [sp, #0]
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	2201      	movs	r2, #1
 80076fe:	f000 fb57 	bl	8007db0 <I2C4_WriteReg>
 8007702:	4603      	mov	r3, r0
 8007704:	2b00      	cmp	r3, #0
 8007706:	d102      	bne.n	800770e <BSP_I2C4_WriteReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 8007708:	2300      	movs	r3, #0
 800770a:	617b      	str	r3, [r7, #20]
 800770c:	e00c      	b.n	8007728 <BSP_I2C4_WriteReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800770e:	4809      	ldr	r0, [pc, #36]	; (8007734 <BSP_I2C4_WriteReg+0x58>)
 8007710:	f002 ffec 	bl	800a6ec <HAL_I2C_GetError>
 8007714:	4603      	mov	r3, r0
 8007716:	2b04      	cmp	r3, #4
 8007718:	d103      	bne.n	8007722 <BSP_I2C4_WriteReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800771a:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800771e:	617b      	str	r3, [r7, #20]
 8007720:	e002      	b.n	8007728 <BSP_I2C4_WriteReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8007722:	f06f 0303 	mvn.w	r3, #3
 8007726:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8007728:	697b      	ldr	r3, [r7, #20]
}
 800772a:	4618      	mov	r0, r3
 800772c:	3718      	adds	r7, #24
 800772e:	46bd      	mov	sp, r7
 8007730:	bd80      	pop	{r7, pc}
 8007732:	bf00      	nop
 8007734:	24002550 	.word	0x24002550

08007738 <BSP_I2C4_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b088      	sub	sp, #32
 800773c:	af02      	add	r7, sp, #8
 800773e:	60ba      	str	r2, [r7, #8]
 8007740:	461a      	mov	r2, r3
 8007742:	4603      	mov	r3, r0
 8007744:	81fb      	strh	r3, [r7, #14]
 8007746:	460b      	mov	r3, r1
 8007748:	81bb      	strh	r3, [r7, #12]
 800774a:	4613      	mov	r3, r2
 800774c:	80fb      	strh	r3, [r7, #6]
  int32_t ret;

  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 800774e:	89b9      	ldrh	r1, [r7, #12]
 8007750:	89f8      	ldrh	r0, [r7, #14]
 8007752:	88fb      	ldrh	r3, [r7, #6]
 8007754:	9300      	str	r3, [sp, #0]
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	2201      	movs	r2, #1
 800775a:	f000 fb4f 	bl	8007dfc <I2C4_ReadReg>
 800775e:	4603      	mov	r3, r0
 8007760:	2b00      	cmp	r3, #0
 8007762:	d102      	bne.n	800776a <BSP_I2C4_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 8007764:	2300      	movs	r3, #0
 8007766:	617b      	str	r3, [r7, #20]
 8007768:	e00c      	b.n	8007784 <BSP_I2C4_ReadReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800776a:	4809      	ldr	r0, [pc, #36]	; (8007790 <BSP_I2C4_ReadReg+0x58>)
 800776c:	f002 ffbe 	bl	800a6ec <HAL_I2C_GetError>
 8007770:	4603      	mov	r3, r0
 8007772:	2b04      	cmp	r3, #4
 8007774:	d103      	bne.n	800777e <BSP_I2C4_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8007776:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800777a:	617b      	str	r3, [r7, #20]
 800777c:	e002      	b.n	8007784 <BSP_I2C4_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800777e:	f06f 0303 	mvn.w	r3, #3
 8007782:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8007784:	697b      	ldr	r3, [r7, #20]
}
 8007786:	4618      	mov	r0, r3
 8007788:	3718      	adds	r7, #24
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}
 800778e:	bf00      	nop
 8007790:	24002550 	.word	0x24002550

08007794 <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 8007798:	f001 fcba 	bl	8009110 <HAL_GetTick>
 800779c:	4603      	mov	r3, r0
}
 800779e:	4618      	mov	r0, r3
 80077a0:	bd80      	pop	{r7, pc}
	...

080077a4 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b086      	sub	sp, #24
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
 80077ac:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 80077ae:	2300      	movs	r3, #0
 80077b0:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d06b      	beq.n	8007890 <I2C_GetTiming+0xec>
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d068      	beq.n	8007890 <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 80077be:	2300      	movs	r3, #0
 80077c0:	613b      	str	r3, [r7, #16]
 80077c2:	e060      	b.n	8007886 <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 80077c4:	4a35      	ldr	r2, [pc, #212]	; (800789c <I2C_GetTiming+0xf8>)
 80077c6:	693b      	ldr	r3, [r7, #16]
 80077c8:	212c      	movs	r1, #44	; 0x2c
 80077ca:	fb01 f303 	mul.w	r3, r1, r3
 80077ce:	4413      	add	r3, r2
 80077d0:	3304      	adds	r3, #4
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	683a      	ldr	r2, [r7, #0]
 80077d6:	429a      	cmp	r2, r3
 80077d8:	d352      	bcc.n	8007880 <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 80077da:	4a30      	ldr	r2, [pc, #192]	; (800789c <I2C_GetTiming+0xf8>)
 80077dc:	693b      	ldr	r3, [r7, #16]
 80077de:	212c      	movs	r1, #44	; 0x2c
 80077e0:	fb01 f303 	mul.w	r3, r1, r3
 80077e4:	4413      	add	r3, r2
 80077e6:	3308      	adds	r3, #8
 80077e8:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 80077ea:	683a      	ldr	r2, [r7, #0]
 80077ec:	429a      	cmp	r2, r3
 80077ee:	d847      	bhi.n	8007880 <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 80077f0:	6939      	ldr	r1, [r7, #16]
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f000 f856 	bl	80078a4 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 80077f8:	6939      	ldr	r1, [r7, #16]
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f000 f940 	bl	8007a80 <I2C_Compute_SCLL_SCLH>
 8007800:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2b7f      	cmp	r3, #127	; 0x7f
 8007806:	d842      	bhi.n	800788e <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8007808:	4925      	ldr	r1, [pc, #148]	; (80078a0 <I2C_GetTiming+0xfc>)
 800780a:	68fa      	ldr	r2, [r7, #12]
 800780c:	4613      	mov	r3, r2
 800780e:	009b      	lsls	r3, r3, #2
 8007810:	4413      	add	r3, r2
 8007812:	009b      	lsls	r3, r3, #2
 8007814:	440b      	add	r3, r1
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 800781a:	4821      	ldr	r0, [pc, #132]	; (80078a0 <I2C_GetTiming+0xfc>)
 800781c:	68fa      	ldr	r2, [r7, #12]
 800781e:	4613      	mov	r3, r2
 8007820:	009b      	lsls	r3, r3, #2
 8007822:	4413      	add	r3, r2
 8007824:	009b      	lsls	r3, r3, #2
 8007826:	4403      	add	r3, r0
 8007828:	3304      	adds	r3, #4
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	051b      	lsls	r3, r3, #20
 800782e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8007832:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8007834:	481a      	ldr	r0, [pc, #104]	; (80078a0 <I2C_GetTiming+0xfc>)
 8007836:	68fa      	ldr	r2, [r7, #12]
 8007838:	4613      	mov	r3, r2
 800783a:	009b      	lsls	r3, r3, #2
 800783c:	4413      	add	r3, r2
 800783e:	009b      	lsls	r3, r3, #2
 8007840:	4403      	add	r3, r0
 8007842:	3308      	adds	r3, #8
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	041b      	lsls	r3, r3, #16
 8007848:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 800784c:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 800784e:	4814      	ldr	r0, [pc, #80]	; (80078a0 <I2C_GetTiming+0xfc>)
 8007850:	68fa      	ldr	r2, [r7, #12]
 8007852:	4613      	mov	r3, r2
 8007854:	009b      	lsls	r3, r3, #2
 8007856:	4413      	add	r3, r2
 8007858:	009b      	lsls	r3, r3, #2
 800785a:	4403      	add	r3, r0
 800785c:	330c      	adds	r3, #12
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	021b      	lsls	r3, r3, #8
 8007862:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8007864:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 8007866:	480e      	ldr	r0, [pc, #56]	; (80078a0 <I2C_GetTiming+0xfc>)
 8007868:	68fa      	ldr	r2, [r7, #12]
 800786a:	4613      	mov	r3, r2
 800786c:	009b      	lsls	r3, r3, #2
 800786e:	4413      	add	r3, r2
 8007870:	009b      	lsls	r3, r3, #2
 8007872:	4403      	add	r3, r0
 8007874:	3310      	adds	r3, #16
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800787a:	430b      	orrs	r3, r1
 800787c:	617b      	str	r3, [r7, #20]
        }
        break;
 800787e:	e006      	b.n	800788e <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	3301      	adds	r3, #1
 8007884:	613b      	str	r3, [r7, #16]
 8007886:	693b      	ldr	r3, [r7, #16]
 8007888:	2b02      	cmp	r3, #2
 800788a:	d99b      	bls.n	80077c4 <I2C_GetTiming+0x20>
 800788c:	e000      	b.n	8007890 <I2C_GetTiming+0xec>
        break;
 800788e:	bf00      	nop
      }
    }
  }

  return ret;
 8007890:	697b      	ldr	r3, [r7, #20]
}
 8007892:	4618      	mov	r0, r3
 8007894:	3718      	adds	r7, #24
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}
 800789a:	bf00      	nop
 800789c:	0802b8a0 	.word	0x0802b8a0
 80078a0:	24001b4c 	.word	0x24001b4c

080078a4 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b08f      	sub	sp, #60	; 0x3c
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
 80078ac:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 80078ae:	2310      	movs	r3, #16
 80078b0:	637b      	str	r3, [r7, #52]	; 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	085a      	lsrs	r2, r3, #1
 80078b6:	4b6e      	ldr	r3, [pc, #440]	; (8007a70 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 80078b8:	4413      	add	r3, r2
 80078ba:	687a      	ldr	r2, [r7, #4]
 80078bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80078c0:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 80078c2:	2332      	movs	r3, #50	; 0x32
 80078c4:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
 80078c6:	f44f 7382 	mov.w	r3, #260	; 0x104
 80078ca:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 80078cc:	4a69      	ldr	r2, [pc, #420]	; (8007a74 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	212c      	movs	r1, #44	; 0x2c
 80078d2:	fb01 f303 	mul.w	r3, r1, r3
 80078d6:	4413      	add	r3, r2
 80078d8:	3324      	adds	r3, #36	; 0x24
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4618      	mov	r0, r3
 80078de:	4a65      	ldr	r2, [pc, #404]	; (8007a74 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	212c      	movs	r1, #44	; 0x2c
 80078e4:	fb01 f303 	mul.w	r3, r1, r3
 80078e8:	4413      	add	r3, r2
 80078ea:	330c      	adds	r3, #12
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 80078f0:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 80078f2:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 80078f4:	495f      	ldr	r1, [pc, #380]	; (8007a74 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	202c      	movs	r0, #44	; 0x2c
 80078fa:	fb00 f303 	mul.w	r3, r0, r3
 80078fe:	440b      	add	r3, r1
 8007900:	3328      	adds	r3, #40	; 0x28
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	3303      	adds	r3, #3
 8007906:	69f9      	ldr	r1, [r7, #28]
 8007908:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800790c:	1ad3      	subs	r3, r2, r3
 800790e:	633b      	str	r3, [r7, #48]	; 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8007910:	4a58      	ldr	r2, [pc, #352]	; (8007a74 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	212c      	movs	r1, #44	; 0x2c
 8007916:	fb01 f303 	mul.w	r3, r1, r3
 800791a:	4413      	add	r3, r2
 800791c:	3310      	adds	r3, #16
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	4618      	mov	r0, r3
 8007922:	4a54      	ldr	r2, [pc, #336]	; (8007a74 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	212c      	movs	r1, #44	; 0x2c
 8007928:	fb01 f303 	mul.w	r3, r1, r3
 800792c:	4413      	add	r3, r2
 800792e:	3320      	adds	r3, #32
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8007934:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8007936:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8007938:	494e      	ldr	r1, [pc, #312]	; (8007a74 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	202c      	movs	r0, #44	; 0x2c
 800793e:	fb00 f303 	mul.w	r3, r0, r3
 8007942:	440b      	add	r3, r1
 8007944:	3328      	adds	r3, #40	; 0x28
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	3304      	adds	r3, #4
 800794a:	69f9      	ldr	r1, [r7, #28]
 800794c:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8007950:	1ad3      	subs	r3, r2, r3
 8007952:	62fb      	str	r3, [r7, #44]	; 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 8007954:	4a47      	ldr	r2, [pc, #284]	; (8007a74 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	212c      	movs	r1, #44	; 0x2c
 800795a:	fb01 f303 	mul.w	r3, r1, r3
 800795e:	4413      	add	r3, r2
 8007960:	3320      	adds	r3, #32
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	4618      	mov	r0, r3
 8007966:	4a43      	ldr	r2, [pc, #268]	; (8007a74 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	212c      	movs	r1, #44	; 0x2c
 800796c:	fb01 f303 	mul.w	r3, r1, r3
 8007970:	4413      	add	r3, r2
 8007972:	3314      	adds	r3, #20
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4403      	add	r3, r0
 8007978:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 800797a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800797c:	2b00      	cmp	r3, #0
 800797e:	dc01      	bgt.n	8007984 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 8007980:	2300      	movs	r3, #0
 8007982:	633b      	str	r3, [r7, #48]	; 0x30
  }

  if (tsdadel_max <= 0)
 8007984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007986:	2b00      	cmp	r3, #0
 8007988:	dc01      	bgt.n	800798e <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 800798a:	2300      	movs	r3, #0
 800798c:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800798e:	2300      	movs	r3, #0
 8007990:	62bb      	str	r3, [r7, #40]	; 0x28
 8007992:	e062      	b.n	8007a5a <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8007994:	2300      	movs	r3, #0
 8007996:	627b      	str	r3, [r7, #36]	; 0x24
 8007998:	e059      	b.n	8007a4e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 800799a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800799c:	3301      	adds	r3, #1
 800799e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079a0:	3201      	adds	r2, #1
 80079a2:	fb03 f202 	mul.w	r2, r3, r2
 80079a6:	69fb      	ldr	r3, [r7, #28]
 80079a8:	fb02 f303 	mul.w	r3, r2, r3
 80079ac:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	68fa      	ldr	r2, [r7, #12]
 80079b2:	429a      	cmp	r2, r3
 80079b4:	d348      	bcc.n	8007a48 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 80079b6:	2300      	movs	r3, #0
 80079b8:	623b      	str	r3, [r7, #32]
 80079ba:	e042      	b.n	8007a42 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 80079bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079be:	3301      	adds	r3, #1
 80079c0:	6a3a      	ldr	r2, [r7, #32]
 80079c2:	fb03 f202 	mul.w	r2, r3, r2
 80079c6:	69fb      	ldr	r3, [r7, #28]
 80079c8:	fb02 f303 	mul.w	r3, r2, r3
 80079cc:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 80079ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079d0:	68ba      	ldr	r2, [r7, #8]
 80079d2:	429a      	cmp	r2, r3
 80079d4:	d332      	bcc.n	8007a3c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 80079d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079d8:	68ba      	ldr	r2, [r7, #8]
 80079da:	429a      	cmp	r2, r3
 80079dc:	d82e      	bhi.n	8007a3c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
 80079de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079e2:	429a      	cmp	r2, r3
 80079e4:	d02a      	beq.n	8007a3c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80079e6:	4b24      	ldr	r3, [pc, #144]	; (8007a78 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80079e8:	681a      	ldr	r2, [r3, #0]
 80079ea:	4924      	ldr	r1, [pc, #144]	; (8007a7c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 80079ec:	4613      	mov	r3, r2
 80079ee:	009b      	lsls	r3, r3, #2
 80079f0:	4413      	add	r3, r2
 80079f2:	009b      	lsls	r3, r3, #2
 80079f4:	440b      	add	r3, r1
 80079f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079f8:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 80079fa:	4b1f      	ldr	r3, [pc, #124]	; (8007a78 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80079fc:	681a      	ldr	r2, [r3, #0]
 80079fe:	491f      	ldr	r1, [pc, #124]	; (8007a7c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8007a00:	4613      	mov	r3, r2
 8007a02:	009b      	lsls	r3, r3, #2
 8007a04:	4413      	add	r3, r2
 8007a06:	009b      	lsls	r3, r3, #2
 8007a08:	440b      	add	r3, r1
 8007a0a:	3304      	adds	r3, #4
 8007a0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a0e:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8007a10:	4b19      	ldr	r3, [pc, #100]	; (8007a78 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8007a12:	681a      	ldr	r2, [r3, #0]
 8007a14:	4919      	ldr	r1, [pc, #100]	; (8007a7c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8007a16:	4613      	mov	r3, r2
 8007a18:	009b      	lsls	r3, r3, #2
 8007a1a:	4413      	add	r3, r2
 8007a1c:	009b      	lsls	r3, r3, #2
 8007a1e:	440b      	add	r3, r1
 8007a20:	3308      	adds	r3, #8
 8007a22:	6a3a      	ldr	r2, [r7, #32]
 8007a24:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 8007a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a28:	637b      	str	r3, [r7, #52]	; 0x34
              I2c_valid_timing_nbr ++;
 8007a2a:	4b13      	ldr	r3, [pc, #76]	; (8007a78 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	3301      	adds	r3, #1
 8007a30:	4a11      	ldr	r2, [pc, #68]	; (8007a78 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8007a32:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8007a34:	4b10      	ldr	r3, [pc, #64]	; (8007a78 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	2b7f      	cmp	r3, #127	; 0x7f
 8007a3a:	d812      	bhi.n	8007a62 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8007a3c:	6a3b      	ldr	r3, [r7, #32]
 8007a3e:	3301      	adds	r3, #1
 8007a40:	623b      	str	r3, [r7, #32]
 8007a42:	6a3b      	ldr	r3, [r7, #32]
 8007a44:	2b0f      	cmp	r3, #15
 8007a46:	d9b9      	bls.n	80079bc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8007a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a4a:	3301      	adds	r3, #1
 8007a4c:	627b      	str	r3, [r7, #36]	; 0x24
 8007a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a50:	2b0f      	cmp	r3, #15
 8007a52:	d9a2      	bls.n	800799a <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8007a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a56:	3301      	adds	r3, #1
 8007a58:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a5c:	2b0f      	cmp	r3, #15
 8007a5e:	d999      	bls.n	8007994 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 8007a60:	e000      	b.n	8007a64 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 8007a62:	bf00      	nop
          }
        }
      }
    }
  }
}
 8007a64:	373c      	adds	r7, #60	; 0x3c
 8007a66:	46bd      	mov	sp, r7
 8007a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6c:	4770      	bx	lr
 8007a6e:	bf00      	nop
 8007a70:	3b9aca00 	.word	0x3b9aca00
 8007a74:	0802b8a0 	.word	0x0802b8a0
 8007a78:	2400254c 	.word	0x2400254c
 8007a7c:	24001b4c 	.word	0x24001b4c

08007a80 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b093      	sub	sp, #76	; 0x4c
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
 8007a88:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
 8007a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8007a8e:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	085a      	lsrs	r2, r3, #1
 8007a94:	4b7a      	ldr	r3, [pc, #488]	; (8007c80 <I2C_Compute_SCLL_SCLH+0x200>)
 8007a96:	4413      	add	r3, r2
 8007a98:	687a      	ldr	r2, [r7, #4]
 8007a9a:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 8007aa0:	4a78      	ldr	r2, [pc, #480]	; (8007c84 <I2C_Compute_SCLL_SCLH+0x204>)
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	212c      	movs	r1, #44	; 0x2c
 8007aa6:	fb01 f303 	mul.w	r3, r1, r3
 8007aaa:	4413      	add	r3, r2
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	085a      	lsrs	r2, r3, #1
 8007ab0:	4b73      	ldr	r3, [pc, #460]	; (8007c80 <I2C_Compute_SCLL_SCLH+0x200>)
 8007ab2:	4413      	add	r3, r2
 8007ab4:	4973      	ldr	r1, [pc, #460]	; (8007c84 <I2C_Compute_SCLL_SCLH+0x204>)
 8007ab6:	683a      	ldr	r2, [r7, #0]
 8007ab8:	202c      	movs	r0, #44	; 0x2c
 8007aba:	fb00 f202 	mul.w	r2, r0, r2
 8007abe:	440a      	add	r2, r1
 8007ac0:	6812      	ldr	r2, [r2, #0]
 8007ac2:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ac6:	62bb      	str	r3, [r7, #40]	; 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 8007ac8:	2332      	movs	r3, #50	; 0x32
 8007aca:	627b      	str	r3, [r7, #36]	; 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 8007acc:	4a6d      	ldr	r2, [pc, #436]	; (8007c84 <I2C_Compute_SCLL_SCLH+0x204>)
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	212c      	movs	r1, #44	; 0x2c
 8007ad2:	fb01 f303 	mul.w	r3, r1, r3
 8007ad6:	4413      	add	r3, r2
 8007ad8:	3328      	adds	r3, #40	; 0x28
 8007ada:	681a      	ldr	r2, [r3, #0]
 8007adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ade:	fb02 f303 	mul.w	r3, r2, r3
 8007ae2:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 8007ae4:	4a67      	ldr	r2, [pc, #412]	; (8007c84 <I2C_Compute_SCLL_SCLH+0x204>)
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	212c      	movs	r1, #44	; 0x2c
 8007aea:	fb01 f303 	mul.w	r3, r1, r3
 8007aee:	4413      	add	r3, r2
 8007af0:	3304      	adds	r3, #4
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	4a62      	ldr	r2, [pc, #392]	; (8007c80 <I2C_Compute_SCLL_SCLH+0x200>)
 8007af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007afa:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 8007afc:	4a61      	ldr	r2, [pc, #388]	; (8007c84 <I2C_Compute_SCLL_SCLH+0x204>)
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	212c      	movs	r1, #44	; 0x2c
 8007b02:	fb01 f303 	mul.w	r3, r1, r3
 8007b06:	4413      	add	r3, r2
 8007b08:	3308      	adds	r3, #8
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	4a5c      	ldr	r2, [pc, #368]	; (8007c80 <I2C_Compute_SCLL_SCLH+0x200>)
 8007b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b12:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 8007b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b16:	643b      	str	r3, [r7, #64]	; 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8007b18:	2300      	movs	r3, #0
 8007b1a:	637b      	str	r3, [r7, #52]	; 0x34
 8007b1c:	e0a3      	b.n	8007c66 <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8007b1e:	495a      	ldr	r1, [pc, #360]	; (8007c88 <I2C_Compute_SCLL_SCLH+0x208>)
 8007b20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b22:	4613      	mov	r3, r2
 8007b24:	009b      	lsls	r3, r3, #2
 8007b26:	4413      	add	r3, r2
 8007b28:	009b      	lsls	r3, r3, #2
 8007b2a:	440b      	add	r3, r1
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	1c5a      	adds	r2, r3, #1
 8007b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b32:	fb02 f303 	mul.w	r3, r2, r3
 8007b36:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8007b38:	2300      	movs	r3, #0
 8007b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b3c:	e08c      	b.n	8007c58 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8007b3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b40:	6a3b      	ldr	r3, [r7, #32]
 8007b42:	441a      	add	r2, r3
 8007b44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b46:	3301      	adds	r3, #1
 8007b48:	6979      	ldr	r1, [r7, #20]
 8007b4a:	fb03 f101 	mul.w	r1, r3, r1
 8007b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b50:	005b      	lsls	r3, r3, #1
 8007b52:	440b      	add	r3, r1
 8007b54:	4413      	add	r3, r2
 8007b56:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8007b58:	4a4a      	ldr	r2, [pc, #296]	; (8007c84 <I2C_Compute_SCLL_SCLH+0x204>)
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	212c      	movs	r1, #44	; 0x2c
 8007b5e:	fb01 f303 	mul.w	r3, r1, r3
 8007b62:	4413      	add	r3, r2
 8007b64:	3318      	adds	r3, #24
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	693a      	ldr	r2, [r7, #16]
 8007b6a:	429a      	cmp	r2, r3
 8007b6c:	d971      	bls.n	8007c52 <I2C_Compute_SCLL_SCLH+0x1d2>
 8007b6e:	693a      	ldr	r2, [r7, #16]
 8007b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b72:	1ad2      	subs	r2, r2, r3
 8007b74:	6a3b      	ldr	r3, [r7, #32]
 8007b76:	1ad3      	subs	r3, r2, r3
 8007b78:	089b      	lsrs	r3, r3, #2
 8007b7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	d268      	bcs.n	8007c52 <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8007b80:	2300      	movs	r3, #0
 8007b82:	63bb      	str	r3, [r7, #56]	; 0x38
 8007b84:	e062      	b.n	8007c4c <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 8007b86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b88:	6a3b      	ldr	r3, [r7, #32]
 8007b8a:	441a      	add	r2, r3
 8007b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b8e:	3301      	adds	r3, #1
 8007b90:	6979      	ldr	r1, [r7, #20]
 8007b92:	fb03 f101 	mul.w	r1, r3, r1
 8007b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b98:	005b      	lsls	r3, r3, #1
 8007b9a:	440b      	add	r3, r1
 8007b9c:	4413      	add	r3, r2
 8007b9e:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 8007ba0:	693a      	ldr	r2, [r7, #16]
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	441a      	add	r2, r3
 8007ba6:	4937      	ldr	r1, [pc, #220]	; (8007c84 <I2C_Compute_SCLL_SCLH+0x204>)
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	202c      	movs	r0, #44	; 0x2c
 8007bac:	fb00 f303 	mul.w	r3, r0, r3
 8007bb0:	440b      	add	r3, r1
 8007bb2:	3320      	adds	r3, #32
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	441a      	add	r2, r3
 8007bb8:	4932      	ldr	r1, [pc, #200]	; (8007c84 <I2C_Compute_SCLL_SCLH+0x204>)
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	202c      	movs	r0, #44	; 0x2c
 8007bbe:	fb00 f303 	mul.w	r3, r0, r3
 8007bc2:	440b      	add	r3, r1
 8007bc4:	3324      	adds	r3, #36	; 0x24
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4413      	add	r3, r2
 8007bca:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8007bcc:	68ba      	ldr	r2, [r7, #8]
 8007bce:	69bb      	ldr	r3, [r7, #24]
 8007bd0:	429a      	cmp	r2, r3
 8007bd2:	d338      	bcc.n	8007c46 <I2C_Compute_SCLL_SCLH+0x1c6>
 8007bd4:	68ba      	ldr	r2, [r7, #8]
 8007bd6:	69fb      	ldr	r3, [r7, #28]
 8007bd8:	429a      	cmp	r2, r3
 8007bda:	d834      	bhi.n	8007c46 <I2C_Compute_SCLL_SCLH+0x1c6>
 8007bdc:	4a29      	ldr	r2, [pc, #164]	; (8007c84 <I2C_Compute_SCLL_SCLH+0x204>)
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	212c      	movs	r1, #44	; 0x2c
 8007be2:	fb01 f303 	mul.w	r3, r1, r3
 8007be6:	4413      	add	r3, r2
 8007be8:	331c      	adds	r3, #28
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	68fa      	ldr	r2, [r7, #12]
 8007bee:	429a      	cmp	r2, r3
 8007bf0:	d329      	bcc.n	8007c46 <I2C_Compute_SCLL_SCLH+0x1c6>
 8007bf2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	429a      	cmp	r2, r3
 8007bf8:	d225      	bcs.n	8007c46 <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 8007bfa:	68ba      	ldr	r2, [r7, #8]
 8007bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bfe:	1ad3      	subs	r3, r2, r3
 8007c00:	633b      	str	r3, [r7, #48]	; 0x30

            if (error < 0)
 8007c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	da02      	bge.n	8007c0e <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 8007c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c0a:	425b      	negs	r3, r3
 8007c0c:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 8007c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c10:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007c12:	429a      	cmp	r2, r3
 8007c14:	d917      	bls.n	8007c46 <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 8007c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c18:	643b      	str	r3, [r7, #64]	; 0x40
              I2c_valid_timing[count].scll = scll;
 8007c1a:	491b      	ldr	r1, [pc, #108]	; (8007c88 <I2C_Compute_SCLL_SCLH+0x208>)
 8007c1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c1e:	4613      	mov	r3, r2
 8007c20:	009b      	lsls	r3, r3, #2
 8007c22:	4413      	add	r3, r2
 8007c24:	009b      	lsls	r3, r3, #2
 8007c26:	440b      	add	r3, r1
 8007c28:	3310      	adds	r3, #16
 8007c2a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007c2c:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 8007c2e:	4916      	ldr	r1, [pc, #88]	; (8007c88 <I2C_Compute_SCLL_SCLH+0x208>)
 8007c30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c32:	4613      	mov	r3, r2
 8007c34:	009b      	lsls	r3, r3, #2
 8007c36:	4413      	add	r3, r2
 8007c38:	009b      	lsls	r3, r3, #2
 8007c3a:	440b      	add	r3, r1
 8007c3c:	330c      	adds	r3, #12
 8007c3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c40:	601a      	str	r2, [r3, #0]
              ret = count;
 8007c42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c44:	647b      	str	r3, [r7, #68]	; 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8007c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c48:	3301      	adds	r3, #1
 8007c4a:	63bb      	str	r3, [r7, #56]	; 0x38
 8007c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c4e:	2bff      	cmp	r3, #255	; 0xff
 8007c50:	d999      	bls.n	8007b86 <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8007c52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c54:	3301      	adds	r3, #1
 8007c56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c5a:	2bff      	cmp	r3, #255	; 0xff
 8007c5c:	f67f af6f 	bls.w	8007b3e <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8007c60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c62:	3301      	adds	r3, #1
 8007c64:	637b      	str	r3, [r7, #52]	; 0x34
 8007c66:	4b09      	ldr	r3, [pc, #36]	; (8007c8c <I2C_Compute_SCLL_SCLH+0x20c>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c6c:	429a      	cmp	r2, r3
 8007c6e:	f4ff af56 	bcc.w	8007b1e <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 8007c72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	374c      	adds	r7, #76	; 0x4c
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7e:	4770      	bx	lr
 8007c80:	3b9aca00 	.word	0x3b9aca00
 8007c84:	0802b8a0 	.word	0x0802b8a0
 8007c88:	24001b4c 	.word	0x24001b4c
 8007c8c:	2400254c 	.word	0x2400254c

08007c90 <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b08a      	sub	sp, #40	; 0x28
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8007c98:	4b31      	ldr	r3, [pc, #196]	; (8007d60 <I2C4_MspInit+0xd0>)
 8007c9a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8007c9e:	4a30      	ldr	r2, [pc, #192]	; (8007d60 <I2C4_MspInit+0xd0>)
 8007ca0:	f043 0308 	orr.w	r3, r3, #8
 8007ca4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8007ca8:	4b2d      	ldr	r3, [pc, #180]	; (8007d60 <I2C4_MspInit+0xd0>)
 8007caa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8007cae:	f003 0308 	and.w	r3, r3, #8
 8007cb2:	613b      	str	r3, [r7, #16]
 8007cb4:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 8007cb6:	4b2a      	ldr	r3, [pc, #168]	; (8007d60 <I2C4_MspInit+0xd0>)
 8007cb8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8007cbc:	4a28      	ldr	r2, [pc, #160]	; (8007d60 <I2C4_MspInit+0xd0>)
 8007cbe:	f043 0308 	orr.w	r3, r3, #8
 8007cc2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8007cc6:	4b26      	ldr	r3, [pc, #152]	; (8007d60 <I2C4_MspInit+0xd0>)
 8007cc8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8007ccc:	f003 0308 	and.w	r3, r3, #8
 8007cd0:	60fb      	str	r3, [r7, #12]
 8007cd2:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 8007cd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007cd8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8007cda:	2312      	movs	r3, #18
 8007cdc:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 8007ce2:	2302      	movs	r3, #2
 8007ce4:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 8007ce6:	2304      	movs	r3, #4
 8007ce8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 8007cea:	f107 0314 	add.w	r3, r7, #20
 8007cee:	4619      	mov	r1, r3
 8007cf0:	481c      	ldr	r0, [pc, #112]	; (8007d64 <I2C4_MspInit+0xd4>)
 8007cf2:	f001 fedf 	bl	8009ab4 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 8007cf6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007cfa:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8007cfc:	2312      	movs	r3, #18
 8007cfe:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8007d00:	2300      	movs	r3, #0
 8007d02:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 8007d04:	2302      	movs	r3, #2
 8007d06:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 8007d08:	2304      	movs	r3, #4
 8007d0a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8007d0c:	f107 0314 	add.w	r3, r7, #20
 8007d10:	4619      	mov	r1, r3
 8007d12:	4814      	ldr	r0, [pc, #80]	; (8007d64 <I2C4_MspInit+0xd4>)
 8007d14:	f001 fece 	bl	8009ab4 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
 8007d18:	4b11      	ldr	r3, [pc, #68]	; (8007d60 <I2C4_MspInit+0xd0>)
 8007d1a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8007d1e:	4a10      	ldr	r2, [pc, #64]	; (8007d60 <I2C4_MspInit+0xd0>)
 8007d20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d24:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8007d28:	4b0d      	ldr	r3, [pc, #52]	; (8007d60 <I2C4_MspInit+0xd0>)
 8007d2a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8007d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d32:	60bb      	str	r3, [r7, #8]
 8007d34:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
 8007d36:	4b0a      	ldr	r3, [pc, #40]	; (8007d60 <I2C4_MspInit+0xd0>)
 8007d38:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007d3c:	4a08      	ldr	r2, [pc, #32]	; (8007d60 <I2C4_MspInit+0xd0>)
 8007d3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d42:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
 8007d46:	4b06      	ldr	r3, [pc, #24]	; (8007d60 <I2C4_MspInit+0xd0>)
 8007d48:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007d4c:	4a04      	ldr	r2, [pc, #16]	; (8007d60 <I2C4_MspInit+0xd0>)
 8007d4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d52:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
}
 8007d56:	bf00      	nop
 8007d58:	3728      	adds	r7, #40	; 0x28
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}
 8007d5e:	bf00      	nop
 8007d60:	58024400 	.word	0x58024400
 8007d64:	58020c00 	.word	0x58020c00

08007d68 <I2C4_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspDeInit(I2C_HandleTypeDef *phi2c)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b088      	sub	sp, #32
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
 8007d70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007d74:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	4619      	mov	r1, r3
 8007d7a:	480b      	ldr	r0, [pc, #44]	; (8007da8 <I2C4_MspDeInit+0x40>)
 8007d7c:	f002 f84a 	bl	8009e14 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
 8007d80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007d84:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	4619      	mov	r1, r3
 8007d8a:	4807      	ldr	r0, [pc, #28]	; (8007da8 <I2C4_MspDeInit+0x40>)
 8007d8c:	f002 f842 	bl	8009e14 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 8007d90:	4b06      	ldr	r3, [pc, #24]	; (8007dac <I2C4_MspDeInit+0x44>)
 8007d92:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8007d96:	4a05      	ldr	r2, [pc, #20]	; (8007dac <I2C4_MspDeInit+0x44>)
 8007d98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d9c:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
}
 8007da0:	bf00      	nop
 8007da2:	3720      	adds	r7, #32
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}
 8007da8:	58020c00 	.word	0x58020c00
 8007dac:	58024400 	.word	0x58024400

08007db0 <I2C4_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b088      	sub	sp, #32
 8007db4:	af04      	add	r7, sp, #16
 8007db6:	607b      	str	r3, [r7, #4]
 8007db8:	4603      	mov	r3, r0
 8007dba:	81fb      	strh	r3, [r7, #14]
 8007dbc:	460b      	mov	r3, r1
 8007dbe:	81bb      	strh	r3, [r7, #12]
 8007dc0:	4613      	mov	r3, r2
 8007dc2:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8007dc4:	8978      	ldrh	r0, [r7, #10]
 8007dc6:	89ba      	ldrh	r2, [r7, #12]
 8007dc8:	89f9      	ldrh	r1, [r7, #14]
 8007dca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007dce:	9302      	str	r3, [sp, #8]
 8007dd0:	8b3b      	ldrh	r3, [r7, #24]
 8007dd2:	9301      	str	r3, [sp, #4]
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	9300      	str	r3, [sp, #0]
 8007dd8:	4603      	mov	r3, r0
 8007dda:	4807      	ldr	r0, [pc, #28]	; (8007df8 <I2C4_WriteReg+0x48>)
 8007ddc:	f002 fa4a 	bl	800a274 <HAL_I2C_Mem_Write>
 8007de0:	4603      	mov	r3, r0
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d101      	bne.n	8007dea <I2C4_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 8007de6:	2300      	movs	r3, #0
 8007de8:	e001      	b.n	8007dee <I2C4_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 8007dea:	f06f 0307 	mvn.w	r3, #7
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	3710      	adds	r7, #16
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}
 8007df6:	bf00      	nop
 8007df8:	24002550 	.word	0x24002550

08007dfc <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b088      	sub	sp, #32
 8007e00:	af04      	add	r7, sp, #16
 8007e02:	607b      	str	r3, [r7, #4]
 8007e04:	4603      	mov	r3, r0
 8007e06:	81fb      	strh	r3, [r7, #14]
 8007e08:	460b      	mov	r3, r1
 8007e0a:	81bb      	strh	r3, [r7, #12]
 8007e0c:	4613      	mov	r3, r2
 8007e0e:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8007e10:	8978      	ldrh	r0, [r7, #10]
 8007e12:	89ba      	ldrh	r2, [r7, #12]
 8007e14:	89f9      	ldrh	r1, [r7, #14]
 8007e16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007e1a:	9302      	str	r3, [sp, #8]
 8007e1c:	8b3b      	ldrh	r3, [r7, #24]
 8007e1e:	9301      	str	r3, [sp, #4]
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	9300      	str	r3, [sp, #0]
 8007e24:	4603      	mov	r3, r0
 8007e26:	4807      	ldr	r0, [pc, #28]	; (8007e44 <I2C4_ReadReg+0x48>)
 8007e28:	f002 fb38 	bl	800a49c <HAL_I2C_Mem_Read>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d101      	bne.n	8007e36 <I2C4_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 8007e32:	2300      	movs	r3, #0
 8007e34:	e001      	b.n	8007e3a <I2C4_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 8007e36:	f06f 0307 	mvn.w	r3, #7
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3710      	adds	r7, #16
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}
 8007e42:	bf00      	nop
 8007e44:	24002550 	.word	0x24002550

08007e48 <BSP_OSPI_NOR_Init>:
  * @param  Instance   OSPI Instance
  * @param  Init       OSPI Init structure
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_Init(uint32_t Instance, BSP_OSPI_NOR_Init_t *Init)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b094      	sub	sp, #80	; 0x50
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
 8007e50:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8007e52:	2300      	movs	r3, #0
 8007e54:	64fb      	str	r3, [r7, #76]	; 0x4c
  BSP_OSPI_NOR_Info_t pInfo;
  MX_OSPI_Config ospi_config;

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d003      	beq.n	8007e64 <BSP_OSPI_NOR_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8007e5c:	f06f 0301 	mvn.w	r3, #1
 8007e60:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e62:	e071      	b.n	8007f48 <BSP_OSPI_NOR_Init+0x100>
  }
  else
  {
    /* Check if the instance is already initialized */
    if (Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_NONE)
 8007e64:	4a3b      	ldr	r2, [pc, #236]	; (8007f54 <BSP_OSPI_NOR_Init+0x10c>)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d16b      	bne.n	8007f48 <BSP_OSPI_NOR_Init+0x100>
    {
#if (USE_HAL_OSPI_REGISTER_CALLBACKS == 0)
      /* Msp OSPI initialization */
      OSPI_NOR_MspInit(&hospi_nor[Instance]);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	225c      	movs	r2, #92	; 0x5c
 8007e74:	fb02 f303 	mul.w	r3, r2, r3
 8007e78:	4a37      	ldr	r2, [pc, #220]	; (8007f58 <BSP_OSPI_NOR_Init+0x110>)
 8007e7a:	4413      	add	r3, r2
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f000 fa09 	bl	8008294 <OSPI_NOR_MspInit>
      if(ret == BSP_ERROR_NONE)
      {
#endif /* USE_HAL_OSPI_REGISTER_CALLBACKS */

        /* Get Flash informations of one memory */
        (void)MX25LM51245G_GetFlashInfo(&pInfo);
 8007e82:	f107 031c 	add.w	r3, r7, #28
 8007e86:	4618      	mov	r0, r3
 8007e88:	f7fe fee8 	bl	8006c5c <MX25LM51245G_GetFlashInfo>

        /* Fill config structure */
        ospi_config.ClockPrescaler = 3U;
 8007e8c:	2303      	movs	r3, #3
 8007e8e:	613b      	str	r3, [r7, #16]
        ospi_config.MemorySize     = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize);
 8007e90:	69fb      	ldr	r3, [r7, #28]
 8007e92:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e96:	fa93 f3a3 	rbit	r3, r3
 8007e9a:	643b      	str	r3, [r7, #64]	; 0x40
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8007e9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e9e:	64bb      	str	r3, [r7, #72]	; 0x48
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8007ea0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d101      	bne.n	8007eaa <BSP_OSPI_NOR_Init+0x62>
  {
    return 32U;
 8007ea6:	2320      	movs	r3, #32
 8007ea8:	e003      	b.n	8007eb2 <BSP_OSPI_NOR_Init+0x6a>
  }
  return __builtin_clz(value);
 8007eaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007eac:	fab3 f383 	clz	r3, r3
 8007eb0:	b2db      	uxtb	r3, r3
 8007eb2:	60fb      	str	r3, [r7, #12]
        ospi_config.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	617b      	str	r3, [r7, #20]
        ospi_config.TransferRate   = (uint32_t)Init->TransferRate;
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	785b      	ldrb	r3, [r3, #1]
 8007ebc:	61bb      	str	r3, [r7, #24]

        /* STM32 OSPI interface initialization */
        if (MX_OSPI_NOR_Init(&hospi_nor[Instance], &ospi_config) != HAL_OK)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	225c      	movs	r2, #92	; 0x5c
 8007ec2:	fb02 f303 	mul.w	r3, r2, r3
 8007ec6:	4a24      	ldr	r2, [pc, #144]	; (8007f58 <BSP_OSPI_NOR_Init+0x110>)
 8007ec8:	4413      	add	r3, r2
 8007eca:	f107 020c 	add.w	r2, r7, #12
 8007ece:	4611      	mov	r1, r2
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	f000 f895 	bl	8008000 <MX_OSPI_NOR_Init>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d003      	beq.n	8007ee4 <BSP_OSPI_NOR_Init+0x9c>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 8007edc:	f06f 0303 	mvn.w	r3, #3
 8007ee0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ee2:	e031      	b.n	8007f48 <BSP_OSPI_NOR_Init+0x100>
        }
        /* OSPI memory reset */
        else if (OSPI_NOR_ResetMemory(Instance) != BSP_ERROR_NONE)
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f000 fb7f 	bl	80085e8 <OSPI_NOR_ResetMemory>
 8007eea:	4603      	mov	r3, r0
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d003      	beq.n	8007ef8 <BSP_OSPI_NOR_Init+0xb0>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8007ef0:	f06f 0304 	mvn.w	r3, #4
 8007ef4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ef6:	e027      	b.n	8007f48 <BSP_OSPI_NOR_Init+0x100>
        }
        /* Check if memory is ready */
        else if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	225c      	movs	r2, #92	; 0x5c
 8007efc:	fb02 f303 	mul.w	r3, r2, r3
 8007f00:	4a15      	ldr	r2, [pc, #84]	; (8007f58 <BSP_OSPI_NOR_Init+0x110>)
 8007f02:	1898      	adds	r0, r3, r2
 8007f04:	4a13      	ldr	r2, [pc, #76]	; (8007f54 <BSP_OSPI_NOR_Init+0x10c>)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	00db      	lsls	r3, r3, #3
 8007f0a:	4413      	add	r3, r2
 8007f0c:	7859      	ldrb	r1, [r3, #1]
 8007f0e:	4a11      	ldr	r2, [pc, #68]	; (8007f54 <BSP_OSPI_NOR_Init+0x10c>)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	00db      	lsls	r3, r3, #3
 8007f14:	4413      	add	r3, r2
 8007f16:	789b      	ldrb	r3, [r3, #2]
 8007f18:	461a      	mov	r2, r3
 8007f1a:	f7fe fece 	bl	8006cba <MX25LM51245G_AutoPollingMemReady>
 8007f1e:	4603      	mov	r3, r0
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d003      	beq.n	8007f2c <BSP_OSPI_NOR_Init+0xe4>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8007f24:	f06f 0304 	mvn.w	r3, #4
 8007f28:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f2a:	e00d      	b.n	8007f48 <BSP_OSPI_NOR_Init+0x100>
        }
        else
        {
          /* Configure the memory */
          if (BSP_OSPI_NOR_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	7819      	ldrb	r1, [r3, #0]
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	785b      	ldrb	r3, [r3, #1]
 8007f34:	461a      	mov	r2, r3
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f000 f936 	bl	80081a8 <BSP_OSPI_NOR_ConfigFlash>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d002      	beq.n	8007f48 <BSP_OSPI_NOR_Init+0x100>
          {
            ret = BSP_ERROR_COMPONENT_FAILURE;
 8007f42:	f06f 0304 	mvn.w	r3, #4
 8007f46:	64fb      	str	r3, [r7, #76]	; 0x4c
#endif
    }
  }

  /* Return BSP status */
  return ret;
 8007f48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	3750      	adds	r7, #80	; 0x50
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bd80      	pop	{r7, pc}
 8007f52:	bf00      	nop
 8007f54:	24002600 	.word	0x24002600
 8007f58:	240025a4 	.word	0x240025a4

08007f5c <BSP_OSPI_NOR_DeInit>:
  * @brief  De-Initializes the OSPI interface.
  * @param  Instance   OSPI Instance
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_DeInit(uint32_t Instance)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b084      	sub	sp, #16
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8007f64:	2300      	movs	r3, #0
 8007f66:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d003      	beq.n	8007f76 <BSP_OSPI_NOR_DeInit+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8007f6e:	f06f 0301 	mvn.w	r3, #1
 8007f72:	60fb      	str	r3, [r7, #12]
 8007f74:	e03a      	b.n	8007fec <BSP_OSPI_NOR_DeInit+0x90>
  }
  else
  {
    /* Disable Memory mapped mode */
    if(Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_MMP)
 8007f76:	4a20      	ldr	r2, [pc, #128]	; (8007ff8 <BSP_OSPI_NOR_DeInit+0x9c>)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8007f7e:	2b02      	cmp	r3, #2
 8007f80:	d108      	bne.n	8007f94 <BSP_OSPI_NOR_DeInit+0x38>
    {
      if(BSP_OSPI_NOR_DisableMemoryMappedMode(Instance) != BSP_ERROR_NONE)
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f000 f8da 	bl	800813c <BSP_OSPI_NOR_DisableMemoryMappedMode>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d002      	beq.n	8007f94 <BSP_OSPI_NOR_DeInit+0x38>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007f8e:	f06f 0304 	mvn.w	r3, #4
 8007f92:	60fb      	str	r3, [r7, #12]
      }
    }

    if(ret == BSP_ERROR_NONE)
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d128      	bne.n	8007fec <BSP_OSPI_NOR_DeInit+0x90>
    {
      /* Set default Ospi_Nor_Ctx values */
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_NONE;
 8007f9a:	4a17      	ldr	r2, [pc, #92]	; (8007ff8 <BSP_OSPI_NOR_DeInit+0x9c>)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2100      	movs	r1, #0
 8007fa0:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
      Ospi_Nor_Ctx[Instance].InterfaceMode = BSP_OSPI_NOR_SPI_MODE;
 8007fa4:	4a14      	ldr	r2, [pc, #80]	; (8007ff8 <BSP_OSPI_NOR_DeInit+0x9c>)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	00db      	lsls	r3, r3, #3
 8007faa:	4413      	add	r3, r2
 8007fac:	2200      	movs	r2, #0
 8007fae:	705a      	strb	r2, [r3, #1]
      Ospi_Nor_Ctx[Instance].TransferRate  = BSP_OSPI_NOR_STR_TRANSFER;
 8007fb0:	4a11      	ldr	r2, [pc, #68]	; (8007ff8 <BSP_OSPI_NOR_DeInit+0x9c>)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	00db      	lsls	r3, r3, #3
 8007fb6:	4413      	add	r3, r2
 8007fb8:	2200      	movs	r2, #0
 8007fba:	709a      	strb	r2, [r3, #2]

#if (USE_HAL_OSPI_REGISTER_CALLBACKS == 0)
      OSPI_NOR_MspDeInit(&hospi_nor[Instance]);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	225c      	movs	r2, #92	; 0x5c
 8007fc0:	fb02 f303 	mul.w	r3, r2, r3
 8007fc4:	4a0d      	ldr	r2, [pc, #52]	; (8007ffc <BSP_OSPI_NOR_DeInit+0xa0>)
 8007fc6:	4413      	add	r3, r2
 8007fc8:	4618      	mov	r0, r3
 8007fca:	f000 fab3 	bl	8008534 <OSPI_NOR_MspDeInit>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS == 0) */

      /* Call the DeInit function to reset the driver */
      if (HAL_OSPI_DeInit(&hospi_nor[Instance]) != HAL_OK)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	225c      	movs	r2, #92	; 0x5c
 8007fd2:	fb02 f303 	mul.w	r3, r2, r3
 8007fd6:	4a09      	ldr	r2, [pc, #36]	; (8007ffc <BSP_OSPI_NOR_DeInit+0xa0>)
 8007fd8:	4413      	add	r3, r2
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f003 fbb8 	bl	800b750 <HAL_OSPI_DeInit>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d002      	beq.n	8007fec <BSP_OSPI_NOR_DeInit+0x90>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 8007fe6:	f06f 0303 	mvn.w	r3, #3
 8007fea:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Return BSP status */
  return ret;
 8007fec:	68fb      	ldr	r3, [r7, #12]
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3710      	adds	r7, #16
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}
 8007ff6:	bf00      	nop
 8007ff8:	24002600 	.word	0x24002600
 8007ffc:	240025a4 	.word	0x240025a4

08008000 <MX_OSPI_NOR_Init>:
  * @param  hospi          OSPI handle
  * @param  Config         OSPI config structure
  * @retval BSP status
  */
__weak HAL_StatusTypeDef MX_OSPI_NOR_Init(OSPI_HandleTypeDef *hospi, MX_OSPI_Config *Config)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b082      	sub	sp, #8
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
 8008008:	6039      	str	r1, [r7, #0]
    /* OctoSPI initialization */
  hospi->Instance = OCTOSPI1;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	4a20      	ldr	r2, [pc, #128]	; (8008090 <MX_OSPI_NOR_Init+0x90>)
 800800e:	601a      	str	r2, [r3, #0]

  hospi->Init.FifoThreshold      = 32;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2220      	movs	r2, #32
 8008014:	605a      	str	r2, [r3, #4]
  hospi->Init.DualQuad           = HAL_OSPI_DUALQUAD_DISABLE;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2200      	movs	r2, #0
 800801a:	609a      	str	r2, [r3, #8]
  hospi->Init.DeviceSize         = Config->MemorySize; /* 512 MBits */
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	681a      	ldr	r2, [r3, #0]
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	611a      	str	r2, [r3, #16]
  hospi->Init.ChipSelectHighTime = 2;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2202      	movs	r2, #2
 8008028:	615a      	str	r2, [r3, #20]
  hospi->Init.FreeRunningClock   = HAL_OSPI_FREERUNCLK_DISABLE;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2200      	movs	r2, #0
 800802e:	619a      	str	r2, [r3, #24]
  hospi->Init.ClockMode          = HAL_OSPI_CLOCK_MODE_0;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2200      	movs	r2, #0
 8008034:	61da      	str	r2, [r3, #28]
  hospi->Init.WrapSize           = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2200      	movs	r2, #0
 800803a:	621a      	str	r2, [r3, #32]
  hospi->Init.ClockPrescaler     = Config->ClockPrescaler;
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	685a      	ldr	r2, [r3, #4]
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	625a      	str	r2, [r3, #36]	; 0x24
  hospi->Init.SampleShifting     = Config->SampleShifting;
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	689a      	ldr	r2, [r3, #8]
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	629a      	str	r2, [r3, #40]	; 0x28
  hospi->Init.ChipSelectBoundary = 0;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2200      	movs	r2, #0
 8008050:	631a      	str	r2, [r3, #48]	; 0x30
  hospi->Init.DelayBlockBypass   = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2208      	movs	r2, #8
 8008056:	635a      	str	r2, [r3, #52]	; 0x34

  if (Config->TransferRate == (uint32_t)BSP_OSPI_NOR_DTR_TRANSFER)
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	68db      	ldr	r3, [r3, #12]
 800805c:	2b01      	cmp	r3, #1
 800805e:	d108      	bne.n	8008072 <MX_OSPI_NOR_Init+0x72>
  {
    hospi->Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008066:	60da      	str	r2, [r3, #12]
    hospi->Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800806e:	62da      	str	r2, [r3, #44]	; 0x2c
 8008070:	e005      	b.n	800807e <MX_OSPI_NOR_Init+0x7e>
  }
  else
  {
    hospi->Init.MemoryType            = HAL_OSPI_MEMTYPE_MICRON;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2200      	movs	r2, #0
 8008076:	60da      	str	r2, [r3, #12]
    hospi->Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2200      	movs	r2, #0
 800807c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  return HAL_OSPI_Init(hospi);
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f003 faaa 	bl	800b5d8 <HAL_OSPI_Init>
 8008084:	4603      	mov	r3, r0
}
 8008086:	4618      	mov	r0, r3
 8008088:	3708      	adds	r7, #8
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}
 800808e:	bf00      	nop
 8008090:	52005000 	.word	0x52005000

08008094 <BSP_OSPI_NOR_EnableMemoryMappedMode>:
  * @brief  Configure the OSPI in memory-mapped mode
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_EnableMemoryMappedMode(uint32_t Instance)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b084      	sub	sp, #16
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800809c:	2300      	movs	r3, #0
 800809e:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d003      	beq.n	80080ae <BSP_OSPI_NOR_EnableMemoryMappedMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80080a6:	f06f 0301 	mvn.w	r3, #1
 80080aa:	60fb      	str	r3, [r7, #12]
 80080ac:	e03d      	b.n	800812a <BSP_OSPI_NOR_EnableMemoryMappedMode+0x96>
  }
  else if(Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 80080ae:	4a21      	ldr	r2, [pc, #132]	; (8008134 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa0>)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	00db      	lsls	r3, r3, #3
 80080b4:	4413      	add	r3, r2
 80080b6:	789b      	ldrb	r3, [r3, #2]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d11b      	bne.n	80080f4 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x60>
  {
    if(MX25LM51245G_EnableMemoryMappedModeSTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, MX25LM51245G_4BYTES_SIZE) != MX25LM51245G_OK)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	225c      	movs	r2, #92	; 0x5c
 80080c0:	fb02 f303 	mul.w	r3, r2, r3
 80080c4:	4a1c      	ldr	r2, [pc, #112]	; (8008138 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa4>)
 80080c6:	1898      	adds	r0, r3, r2
 80080c8:	4a1a      	ldr	r2, [pc, #104]	; (8008134 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa0>)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	00db      	lsls	r3, r3, #3
 80080ce:	4413      	add	r3, r2
 80080d0:	785b      	ldrb	r3, [r3, #1]
 80080d2:	2201      	movs	r2, #1
 80080d4:	4619      	mov	r1, r3
 80080d6:	f7fe fe9d 	bl	8006e14 <MX25LM51245G_EnableMemoryMappedModeSTR>
 80080da:	4603      	mov	r3, r0
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d003      	beq.n	80080e8 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x54>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80080e0:	f06f 0304 	mvn.w	r3, #4
 80080e4:	60fb      	str	r3, [r7, #12]
 80080e6:	e020      	b.n	800812a <BSP_OSPI_NOR_EnableMemoryMappedMode+0x96>
    }
    else /* Update OSPI context if all operations are well done */
    {
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_MMP;
 80080e8:	4a12      	ldr	r2, [pc, #72]	; (8008134 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa0>)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2102      	movs	r1, #2
 80080ee:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
 80080f2:	e01a      	b.n	800812a <BSP_OSPI_NOR_EnableMemoryMappedMode+0x96>
    }
  }
  else
  {
    if(MX25LM51245G_EnableMemoryMappedModeDTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode) != MX25LM51245G_OK)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	225c      	movs	r2, #92	; 0x5c
 80080f8:	fb02 f303 	mul.w	r3, r2, r3
 80080fc:	4a0e      	ldr	r2, [pc, #56]	; (8008138 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa4>)
 80080fe:	441a      	add	r2, r3
 8008100:	490c      	ldr	r1, [pc, #48]	; (8008134 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa0>)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	00db      	lsls	r3, r3, #3
 8008106:	440b      	add	r3, r1
 8008108:	785b      	ldrb	r3, [r3, #1]
 800810a:	4619      	mov	r1, r3
 800810c:	4610      	mov	r0, r2
 800810e:	f7fe ff2b 	bl	8006f68 <MX25LM51245G_EnableMemoryMappedModeDTR>
 8008112:	4603      	mov	r3, r0
 8008114:	2b00      	cmp	r3, #0
 8008116:	d003      	beq.n	8008120 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x8c>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008118:	f06f 0304 	mvn.w	r3, #4
 800811c:	60fb      	str	r3, [r7, #12]
 800811e:	e004      	b.n	800812a <BSP_OSPI_NOR_EnableMemoryMappedMode+0x96>
    }
    else /* Update OSPI context if all operations are well done */
    {
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_MMP;
 8008120:	4a04      	ldr	r2, [pc, #16]	; (8008134 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa0>)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2102      	movs	r1, #2
 8008126:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
    }
  }

  /* Return BSP status */
  return ret;
 800812a:	68fb      	ldr	r3, [r7, #12]
}
 800812c:	4618      	mov	r0, r3
 800812e:	3710      	adds	r7, #16
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}
 8008134:	24002600 	.word	0x24002600
 8008138:	240025a4 	.word	0x240025a4

0800813c <BSP_OSPI_NOR_DisableMemoryMappedMode>:
  *         Only 1 Instance can running MMP mode. And it will lock system at this mode.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_DisableMemoryMappedMode(uint32_t Instance)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b084      	sub	sp, #16
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8008144:	2300      	movs	r3, #0
 8008146:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d003      	beq.n	8008156 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800814e:	f06f 0301 	mvn.w	r3, #1
 8008152:	60fb      	str	r3, [r7, #12]
 8008154:	e01e      	b.n	8008194 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x58>
  }
  else if(Ospi_Nor_Ctx[Instance].IsInitialized != OSPI_ACCESS_MMP)
 8008156:	4a12      	ldr	r2, [pc, #72]	; (80081a0 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x64>)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800815e:	2b02      	cmp	r3, #2
 8008160:	d003      	beq.n	800816a <BSP_OSPI_NOR_DisableMemoryMappedMode+0x2e>
  {
    ret = BSP_ERROR_OSPI_MMP_UNLOCK_FAILURE;
 8008162:	f06f 031a 	mvn.w	r3, #26
 8008166:	60fb      	str	r3, [r7, #12]
 8008168:	e014      	b.n	8008194 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x58>
  }/* Abort MMP back to indirect mode */
  else if(HAL_OSPI_Abort(&hospi_nor[Instance]) != HAL_OK)
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	225c      	movs	r2, #92	; 0x5c
 800816e:	fb02 f303 	mul.w	r3, r2, r3
 8008172:	4a0c      	ldr	r2, [pc, #48]	; (80081a4 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x68>)
 8008174:	4413      	add	r3, r2
 8008176:	4618      	mov	r0, r3
 8008178:	f003 ff1c 	bl	800bfb4 <HAL_OSPI_Abort>
 800817c:	4603      	mov	r3, r0
 800817e:	2b00      	cmp	r3, #0
 8008180:	d003      	beq.n	800818a <BSP_OSPI_NOR_DisableMemoryMappedMode+0x4e>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 8008182:	f06f 0303 	mvn.w	r3, #3
 8008186:	60fb      	str	r3, [r7, #12]
 8008188:	e004      	b.n	8008194 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x58>
  }
  else
  {
    /* Update OSPI context if all operations are well done */
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 800818a:	4a05      	ldr	r2, [pc, #20]	; (80081a0 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x64>)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2101      	movs	r1, #1
 8008190:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
  }

  /* Return BSP status */
  return ret;
 8008194:	68fb      	ldr	r3, [r7, #12]
}
 8008196:	4618      	mov	r0, r3
 8008198:	3710      	adds	r7, #16
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}
 800819e:	bf00      	nop
 80081a0:	24002600 	.word	0x24002600
 80081a4:	240025a4 	.word	0x240025a4

080081a8 <BSP_OSPI_NOR_ConfigFlash>:
  * @param  Mode      OSPI mode
  * @param  Rate      OSPI transfer rate
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_ConfigFlash(uint32_t Instance, BSP_OSPI_NOR_Interface_t Mode, BSP_OSPI_NOR_Transfer_t Rate)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b084      	sub	sp, #16
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
 80081b0:	460b      	mov	r3, r1
 80081b2:	70fb      	strb	r3, [r7, #3]
 80081b4:	4613      	mov	r3, r2
 80081b6:	70bb      	strb	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 80081b8:	2300      	movs	r3, #0
 80081ba:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d003      	beq.n	80081ca <BSP_OSPI_NOR_ConfigFlash+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80081c2:	f06f 0301 	mvn.w	r3, #1
 80081c6:	60fb      	str	r3, [r7, #12]
 80081c8:	e05d      	b.n	8008286 <BSP_OSPI_NOR_ConfigFlash+0xde>
  }/* Check if MMP mode locked ************************************************/
  else if(Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_MMP)
 80081ca:	4a31      	ldr	r2, [pc, #196]	; (8008290 <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80081d2:	2b02      	cmp	r3, #2
 80081d4:	d103      	bne.n	80081de <BSP_OSPI_NOR_ConfigFlash+0x36>
  {
    ret = BSP_ERROR_OSPI_MMP_LOCK_FAILURE;
 80081d6:	f06f 0319 	mvn.w	r3, #25
 80081da:	60fb      	str	r3, [r7, #12]
 80081dc:	e053      	b.n	8008286 <BSP_OSPI_NOR_ConfigFlash+0xde>
  }
  else
  {
    /* Setup Flash interface ***************************************************/
    switch(Ospi_Nor_Ctx[Instance].InterfaceMode)
 80081de:	4a2c      	ldr	r2, [pc, #176]	; (8008290 <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	00db      	lsls	r3, r3, #3
 80081e4:	4413      	add	r3, r2
 80081e6:	785b      	ldrb	r3, [r3, #1]
 80081e8:	2b01      	cmp	r3, #1
 80081ea:	d125      	bne.n	8008238 <BSP_OSPI_NOR_ConfigFlash+0x90>
    {
    case BSP_OSPI_NOR_OPI_MODE :  /* 8-8-8 commands */
      if((Mode != BSP_OSPI_NOR_OPI_MODE) || (Rate != Ospi_Nor_Ctx[Instance].TransferRate))
 80081ec:	78fb      	ldrb	r3, [r7, #3]
 80081ee:	2b01      	cmp	r3, #1
 80081f0:	d107      	bne.n	8008202 <BSP_OSPI_NOR_ConfigFlash+0x5a>
 80081f2:	4a27      	ldr	r2, [pc, #156]	; (8008290 <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	00db      	lsls	r3, r3, #3
 80081f8:	4413      	add	r3, r2
 80081fa:	789b      	ldrb	r3, [r3, #2]
 80081fc:	78ba      	ldrb	r2, [r7, #2]
 80081fe:	429a      	cmp	r2, r3
 8008200:	d02a      	beq.n	8008258 <BSP_OSPI_NOR_ConfigFlash+0xb0>
      {
        /* Exit OPI mode */
        ret = OSPI_NOR_ExitOPIMode(Instance);
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f000 fbfc 	bl	8008a00 <OSPI_NOR_ExitOPIMode>
 8008208:	60f8      	str	r0, [r7, #12]

        if ((ret == BSP_ERROR_NONE) && (Mode == BSP_OSPI_NOR_OPI_MODE))
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d123      	bne.n	8008258 <BSP_OSPI_NOR_ConfigFlash+0xb0>
 8008210:	78fb      	ldrb	r3, [r7, #3]
 8008212:	2b01      	cmp	r3, #1
 8008214:	d120      	bne.n	8008258 <BSP_OSPI_NOR_ConfigFlash+0xb0>
        {

          if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 8008216:	4a1e      	ldr	r2, [pc, #120]	; (8008290 <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	00db      	lsls	r3, r3, #3
 800821c:	4413      	add	r3, r2
 800821e:	789b      	ldrb	r3, [r3, #2]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d104      	bne.n	800822e <BSP_OSPI_NOR_ConfigFlash+0x86>
          {
            /* Enter DTR OPI mode */
            ret = OSPI_NOR_EnterDOPIMode(Instance);
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f000 fa6f 	bl	8008708 <OSPI_NOR_EnterDOPIMode>
 800822a:	60f8      	str	r0, [r7, #12]
            /* Enter STR OPI mode */
            ret = OSPI_NOR_EnterSOPIMode(Instance);
          }
        }
      }
      break;
 800822c:	e014      	b.n	8008258 <BSP_OSPI_NOR_ConfigFlash+0xb0>
            ret = OSPI_NOR_EnterSOPIMode(Instance);
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f000 fb3a 	bl	80088a8 <OSPI_NOR_EnterSOPIMode>
 8008234:	60f8      	str	r0, [r7, #12]
      break;
 8008236:	e00f      	b.n	8008258 <BSP_OSPI_NOR_ConfigFlash+0xb0>

    case BSP_OSPI_NOR_SPI_MODE :  /* 1-1-1 commands, Power on H/W default setting */
    default :
      if(Mode == BSP_OSPI_NOR_OPI_MODE)
 8008238:	78fb      	ldrb	r3, [r7, #3]
 800823a:	2b01      	cmp	r3, #1
 800823c:	d10e      	bne.n	800825c <BSP_OSPI_NOR_ConfigFlash+0xb4>
      {
        if(Rate == BSP_OSPI_NOR_STR_TRANSFER)
 800823e:	78bb      	ldrb	r3, [r7, #2]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d104      	bne.n	800824e <BSP_OSPI_NOR_ConfigFlash+0xa6>
        {
          /* Enter STR OPI mode */
          ret = OSPI_NOR_EnterSOPIMode(Instance);
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f000 fb2f 	bl	80088a8 <OSPI_NOR_EnterSOPIMode>
 800824a:	60f8      	str	r0, [r7, #12]
        {
          /* Enter DTR OPI mode */
          ret = OSPI_NOR_EnterDOPIMode(Instance);
        }
      }
      break;
 800824c:	e006      	b.n	800825c <BSP_OSPI_NOR_ConfigFlash+0xb4>
          ret = OSPI_NOR_EnterDOPIMode(Instance);
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f000 fa5a 	bl	8008708 <OSPI_NOR_EnterDOPIMode>
 8008254:	60f8      	str	r0, [r7, #12]
      break;
 8008256:	e001      	b.n	800825c <BSP_OSPI_NOR_ConfigFlash+0xb4>
      break;
 8008258:	bf00      	nop
 800825a:	e000      	b.n	800825e <BSP_OSPI_NOR_ConfigFlash+0xb6>
      break;
 800825c:	bf00      	nop
    }

    /* Update OSPI context if all operations are well done */
    if(ret == BSP_ERROR_NONE)
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d110      	bne.n	8008286 <BSP_OSPI_NOR_ConfigFlash+0xde>
    {
      /* Update current status parameter *****************************************/
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 8008264:	4a0a      	ldr	r2, [pc, #40]	; (8008290 <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2101      	movs	r1, #1
 800826a:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
      Ospi_Nor_Ctx[Instance].InterfaceMode = Mode;
 800826e:	4a08      	ldr	r2, [pc, #32]	; (8008290 <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	00db      	lsls	r3, r3, #3
 8008274:	4413      	add	r3, r2
 8008276:	78fa      	ldrb	r2, [r7, #3]
 8008278:	705a      	strb	r2, [r3, #1]
      Ospi_Nor_Ctx[Instance].TransferRate  = Rate;
 800827a:	4a05      	ldr	r2, [pc, #20]	; (8008290 <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	00db      	lsls	r3, r3, #3
 8008280:	4413      	add	r3, r2
 8008282:	78ba      	ldrb	r2, [r7, #2]
 8008284:	709a      	strb	r2, [r3, #2]
    }
  }

  /* Return BSP status */
  return ret;
 8008286:	68fb      	ldr	r3, [r7, #12]
}
 8008288:	4618      	mov	r0, r3
 800828a:	3710      	adds	r7, #16
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}
 8008290:	24002600 	.word	0x24002600

08008294 <OSPI_NOR_MspInit>:
  * @brief  Initializes the OSPI MSP.
  * @param  hospi OSPI handle
  * @retval None
  */
static void OSPI_NOR_MspInit(OSPI_HandleTypeDef *hospi)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b094      	sub	sp, #80	; 0x50
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]

  /* hospi unused argument(s) compilation warning */
  UNUSED(hospi);

  /* Enable the OctoSPI memory interface clock */
  OSPI_CLK_ENABLE();
 800829c:	4b9e      	ldr	r3, [pc, #632]	; (8008518 <OSPI_NOR_MspInit+0x284>)
 800829e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80082a2:	4a9d      	ldr	r2, [pc, #628]	; (8008518 <OSPI_NOR_MspInit+0x284>)
 80082a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80082a8:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 80082ac:	4b9a      	ldr	r3, [pc, #616]	; (8008518 <OSPI_NOR_MspInit+0x284>)
 80082ae:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80082b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80082b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80082b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38

  /* Reset the OctoSPI memory interface */
  OSPI_FORCE_RESET();
 80082ba:	4b97      	ldr	r3, [pc, #604]	; (8008518 <OSPI_NOR_MspInit+0x284>)
 80082bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082be:	4a96      	ldr	r2, [pc, #600]	; (8008518 <OSPI_NOR_MspInit+0x284>)
 80082c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80082c4:	67d3      	str	r3, [r2, #124]	; 0x7c
  OSPI_RELEASE_RESET();
 80082c6:	4b94      	ldr	r3, [pc, #592]	; (8008518 <OSPI_NOR_MspInit+0x284>)
 80082c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082ca:	4a93      	ldr	r2, [pc, #588]	; (8008518 <OSPI_NOR_MspInit+0x284>)
 80082cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80082d0:	67d3      	str	r3, [r2, #124]	; 0x7c

  /* Enable GPIO clocks */
  OSPI_CLK_GPIO_CLK_ENABLE();
 80082d2:	4b91      	ldr	r3, [pc, #580]	; (8008518 <OSPI_NOR_MspInit+0x284>)
 80082d4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80082d8:	4a8f      	ldr	r2, [pc, #572]	; (8008518 <OSPI_NOR_MspInit+0x284>)
 80082da:	f043 0302 	orr.w	r3, r3, #2
 80082de:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80082e2:	4b8d      	ldr	r3, [pc, #564]	; (8008518 <OSPI_NOR_MspInit+0x284>)
 80082e4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80082e8:	f003 0302 	and.w	r3, r3, #2
 80082ec:	637b      	str	r3, [r7, #52]	; 0x34
 80082ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  OSPI_DQS_GPIO_CLK_ENABLE();
 80082f0:	4b89      	ldr	r3, [pc, #548]	; (8008518 <OSPI_NOR_MspInit+0x284>)
 80082f2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80082f6:	4a88      	ldr	r2, [pc, #544]	; (8008518 <OSPI_NOR_MspInit+0x284>)
 80082f8:	f043 0304 	orr.w	r3, r3, #4
 80082fc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8008300:	4b85      	ldr	r3, [pc, #532]	; (8008518 <OSPI_NOR_MspInit+0x284>)
 8008302:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8008306:	f003 0304 	and.w	r3, r3, #4
 800830a:	633b      	str	r3, [r7, #48]	; 0x30
 800830c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  OSPI_CS_GPIO_CLK_ENABLE();
 800830e:	4b82      	ldr	r3, [pc, #520]	; (8008518 <OSPI_NOR_MspInit+0x284>)
 8008310:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8008314:	4a80      	ldr	r2, [pc, #512]	; (8008518 <OSPI_NOR_MspInit+0x284>)
 8008316:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800831a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800831e:	4b7e      	ldr	r3, [pc, #504]	; (8008518 <OSPI_NOR_MspInit+0x284>)
 8008320:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8008324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008328:	62fb      	str	r3, [r7, #44]	; 0x2c
 800832a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  OSPI_D0_GPIO_CLK_ENABLE();
 800832c:	4b7a      	ldr	r3, [pc, #488]	; (8008518 <OSPI_NOR_MspInit+0x284>)
 800832e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8008332:	4a79      	ldr	r2, [pc, #484]	; (8008518 <OSPI_NOR_MspInit+0x284>)
 8008334:	f043 0308 	orr.w	r3, r3, #8
 8008338:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800833c:	4b76      	ldr	r3, [pc, #472]	; (8008518 <OSPI_NOR_MspInit+0x284>)
 800833e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8008342:	f003 0308 	and.w	r3, r3, #8
 8008346:	62bb      	str	r3, [r7, #40]	; 0x28
 8008348:	6abb      	ldr	r3, [r7, #40]	; 0x28
  OSPI_D1_GPIO_CLK_ENABLE();
 800834a:	4b73      	ldr	r3, [pc, #460]	; (8008518 <OSPI_NOR_MspInit+0x284>)
 800834c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8008350:	4a71      	ldr	r2, [pc, #452]	; (8008518 <OSPI_NOR_MspInit+0x284>)
 8008352:	f043 0320 	orr.w	r3, r3, #32
 8008356:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800835a:	4b6f      	ldr	r3, [pc, #444]	; (8008518 <OSPI_NOR_MspInit+0x284>)
 800835c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8008360:	f003 0320 	and.w	r3, r3, #32
 8008364:	627b      	str	r3, [r7, #36]	; 0x24
 8008366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  OSPI_D2_GPIO_CLK_ENABLE();
 8008368:	4b6b      	ldr	r3, [pc, #428]	; (8008518 <OSPI_NOR_MspInit+0x284>)
 800836a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800836e:	4a6a      	ldr	r2, [pc, #424]	; (8008518 <OSPI_NOR_MspInit+0x284>)
 8008370:	f043 0320 	orr.w	r3, r3, #32
 8008374:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8008378:	4b67      	ldr	r3, [pc, #412]	; (8008518 <OSPI_NOR_MspInit+0x284>)
 800837a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800837e:	f003 0320 	and.w	r3, r3, #32
 8008382:	623b      	str	r3, [r7, #32]
 8008384:	6a3b      	ldr	r3, [r7, #32]
  OSPI_D3_GPIO_CLK_ENABLE();
 8008386:	4b64      	ldr	r3, [pc, #400]	; (8008518 <OSPI_NOR_MspInit+0x284>)
 8008388:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800838c:	4a62      	ldr	r2, [pc, #392]	; (8008518 <OSPI_NOR_MspInit+0x284>)
 800838e:	f043 0320 	orr.w	r3, r3, #32
 8008392:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8008396:	4b60      	ldr	r3, [pc, #384]	; (8008518 <OSPI_NOR_MspInit+0x284>)
 8008398:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800839c:	f003 0320 	and.w	r3, r3, #32
 80083a0:	61fb      	str	r3, [r7, #28]
 80083a2:	69fb      	ldr	r3, [r7, #28]
  OSPI_D4_GPIO_CLK_ENABLE();
 80083a4:	4b5c      	ldr	r3, [pc, #368]	; (8008518 <OSPI_NOR_MspInit+0x284>)
 80083a6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80083aa:	4a5b      	ldr	r2, [pc, #364]	; (8008518 <OSPI_NOR_MspInit+0x284>)
 80083ac:	f043 0304 	orr.w	r3, r3, #4
 80083b0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80083b4:	4b58      	ldr	r3, [pc, #352]	; (8008518 <OSPI_NOR_MspInit+0x284>)
 80083b6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80083ba:	f003 0304 	and.w	r3, r3, #4
 80083be:	61bb      	str	r3, [r7, #24]
 80083c0:	69bb      	ldr	r3, [r7, #24]
  OSPI_D5_GPIO_CLK_ENABLE();
 80083c2:	4b55      	ldr	r3, [pc, #340]	; (8008518 <OSPI_NOR_MspInit+0x284>)
 80083c4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80083c8:	4a53      	ldr	r2, [pc, #332]	; (8008518 <OSPI_NOR_MspInit+0x284>)
 80083ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083ce:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80083d2:	4b51      	ldr	r3, [pc, #324]	; (8008518 <OSPI_NOR_MspInit+0x284>)
 80083d4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80083d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083dc:	617b      	str	r3, [r7, #20]
 80083de:	697b      	ldr	r3, [r7, #20]
  OSPI_D6_GPIO_CLK_ENABLE();
 80083e0:	4b4d      	ldr	r3, [pc, #308]	; (8008518 <OSPI_NOR_MspInit+0x284>)
 80083e2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80083e6:	4a4c      	ldr	r2, [pc, #304]	; (8008518 <OSPI_NOR_MspInit+0x284>)
 80083e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083ec:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80083f0:	4b49      	ldr	r3, [pc, #292]	; (8008518 <OSPI_NOR_MspInit+0x284>)
 80083f2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80083f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083fa:	613b      	str	r3, [r7, #16]
 80083fc:	693b      	ldr	r3, [r7, #16]
  OSPI_D7_GPIO_CLK_ENABLE();
 80083fe:	4b46      	ldr	r3, [pc, #280]	; (8008518 <OSPI_NOR_MspInit+0x284>)
 8008400:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8008404:	4a44      	ldr	r2, [pc, #272]	; (8008518 <OSPI_NOR_MspInit+0x284>)
 8008406:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800840a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800840e:	4b42      	ldr	r3, [pc, #264]	; (8008518 <OSPI_NOR_MspInit+0x284>)
 8008410:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8008414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008418:	60fb      	str	r3, [r7, #12]
 800841a:	68fb      	ldr	r3, [r7, #12]

  /* OctoSPI CS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_CS_PIN;
 800841c:	2340      	movs	r3, #64	; 0x40
 800841e:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8008420:	2302      	movs	r3, #2
 8008422:	643b      	str	r3, [r7, #64]	; 0x40
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8008424:	2301      	movs	r3, #1
 8008426:	647b      	str	r3, [r7, #68]	; 0x44
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8008428:	2303      	movs	r3, #3
 800842a:	64bb      	str	r3, [r7, #72]	; 0x48
  GPIO_InitStruct.Alternate = OSPI_CS_PIN_AF;
 800842c:	230a      	movs	r3, #10
 800842e:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_CS_GPIO_PORT, &GPIO_InitStruct);
 8008430:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008434:	4619      	mov	r1, r3
 8008436:	4839      	ldr	r0, [pc, #228]	; (800851c <OSPI_NOR_MspInit+0x288>)
 8008438:	f001 fb3c 	bl	8009ab4 <HAL_GPIO_Init>

  /* OctoSPI DQS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_DQS_PIN;
 800843c:	2320      	movs	r3, #32
 800843e:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_DQS_PIN_AF;
 8008440:	230a      	movs	r3, #10
 8008442:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_DQS_GPIO_PORT, &GPIO_InitStruct);
 8008444:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008448:	4619      	mov	r1, r3
 800844a:	4835      	ldr	r0, [pc, #212]	; (8008520 <OSPI_NOR_MspInit+0x28c>)
 800844c:	f001 fb32 	bl	8009ab4 <HAL_GPIO_Init>

  /* OctoSPI CLK GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_CLK_PIN;
 8008450:	2304      	movs	r3, #4
 8008452:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8008454:	2300      	movs	r3, #0
 8008456:	647b      	str	r3, [r7, #68]	; 0x44
  GPIO_InitStruct.Alternate = OSPI_CLK_PIN_AF;
 8008458:	2309      	movs	r3, #9
 800845a:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_CLK_GPIO_PORT, &GPIO_InitStruct);
 800845c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008460:	4619      	mov	r1, r3
 8008462:	4830      	ldr	r0, [pc, #192]	; (8008524 <OSPI_NOR_MspInit+0x290>)
 8008464:	f001 fb26 	bl	8009ab4 <HAL_GPIO_Init>

  /* OctoSPI D0 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D0_PIN;
 8008468:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800846c:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D0_PIN_AF;
 800846e:	2309      	movs	r3, #9
 8008470:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D0_GPIO_PORT, &GPIO_InitStruct);
 8008472:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008476:	4619      	mov	r1, r3
 8008478:	482b      	ldr	r0, [pc, #172]	; (8008528 <OSPI_NOR_MspInit+0x294>)
 800847a:	f001 fb1b 	bl	8009ab4 <HAL_GPIO_Init>

  /* OctoSPI D1 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D1_PIN;
 800847e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008482:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D1_PIN_AF;
 8008484:	230a      	movs	r3, #10
 8008486:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D1_GPIO_PORT, &GPIO_InitStruct);
 8008488:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800848c:	4619      	mov	r1, r3
 800848e:	4827      	ldr	r0, [pc, #156]	; (800852c <OSPI_NOR_MspInit+0x298>)
 8008490:	f001 fb10 	bl	8009ab4 <HAL_GPIO_Init>

  /* OctoSPI D2 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D2_PIN;
 8008494:	2380      	movs	r3, #128	; 0x80
 8008496:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D2_PIN_AF;
 8008498:	230a      	movs	r3, #10
 800849a:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D2_GPIO_PORT, &GPIO_InitStruct);
 800849c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80084a0:	4619      	mov	r1, r3
 80084a2:	4822      	ldr	r0, [pc, #136]	; (800852c <OSPI_NOR_MspInit+0x298>)
 80084a4:	f001 fb06 	bl	8009ab4 <HAL_GPIO_Init>

  /* OctoSPI D3 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D3_PIN;
 80084a8:	2340      	movs	r3, #64	; 0x40
 80084aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D3_PIN_AF;
 80084ac:	230a      	movs	r3, #10
 80084ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D3_GPIO_PORT, &GPIO_InitStruct);
 80084b0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80084b4:	4619      	mov	r1, r3
 80084b6:	481d      	ldr	r0, [pc, #116]	; (800852c <OSPI_NOR_MspInit+0x298>)
 80084b8:	f001 fafc 	bl	8009ab4 <HAL_GPIO_Init>

  /* OctoSPI D4 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D4_PIN;
 80084bc:	2302      	movs	r3, #2
 80084be:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D4_PIN_AF;
 80084c0:	230a      	movs	r3, #10
 80084c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D4_GPIO_PORT, &GPIO_InitStruct);
 80084c4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80084c8:	4619      	mov	r1, r3
 80084ca:	4815      	ldr	r0, [pc, #84]	; (8008520 <OSPI_NOR_MspInit+0x28c>)
 80084cc:	f001 faf2 	bl	8009ab4 <HAL_GPIO_Init>

  /* OctoSPI D5 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D5_PIN;
 80084d0:	2308      	movs	r3, #8
 80084d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D5_PIN_AF;
 80084d4:	2309      	movs	r3, #9
 80084d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D5_GPIO_PORT, &GPIO_InitStruct);
 80084d8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80084dc:	4619      	mov	r1, r3
 80084de:	4814      	ldr	r0, [pc, #80]	; (8008530 <OSPI_NOR_MspInit+0x29c>)
 80084e0:	f001 fae8 	bl	8009ab4 <HAL_GPIO_Init>

  /* OctoSPI D6 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D6_PIN;
 80084e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80084e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D6_PIN_AF;
 80084ea:	2309      	movs	r3, #9
 80084ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D6_GPIO_PORT, &GPIO_InitStruct);
 80084ee:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80084f2:	4619      	mov	r1, r3
 80084f4:	4809      	ldr	r0, [pc, #36]	; (800851c <OSPI_NOR_MspInit+0x288>)
 80084f6:	f001 fadd 	bl	8009ab4 <HAL_GPIO_Init>

  /* OctoSPI D7 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D7_PIN;
 80084fa:	2380      	movs	r3, #128	; 0x80
 80084fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D7_PIN_AF;
 80084fe:	230a      	movs	r3, #10
 8008500:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D7_GPIO_PORT, &GPIO_InitStruct);
 8008502:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008506:	4619      	mov	r1, r3
 8008508:	4807      	ldr	r0, [pc, #28]	; (8008528 <OSPI_NOR_MspInit+0x294>)
 800850a:	f001 fad3 	bl	8009ab4 <HAL_GPIO_Init>
}
 800850e:	bf00      	nop
 8008510:	3750      	adds	r7, #80	; 0x50
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}
 8008516:	bf00      	nop
 8008518:	58024400 	.word	0x58024400
 800851c:	58021800 	.word	0x58021800
 8008520:	58020800 	.word	0x58020800
 8008524:	58020400 	.word	0x58020400
 8008528:	58020c00 	.word	0x58020c00
 800852c:	58021400 	.word	0x58021400
 8008530:	58021c00 	.word	0x58021c00

08008534 <OSPI_NOR_MspDeInit>:
  * @brief  De-Initializes the OSPI MSP.
  * @param  hospi OSPI handle
  * @retval None
  */
static void OSPI_NOR_MspDeInit(OSPI_HandleTypeDef *hospi)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b082      	sub	sp, #8
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
  /* hospi unused argument(s) compilation warning */
  UNUSED(hospi);

  /* OctoSPI GPIO pins de-configuration  */
  HAL_GPIO_DeInit(OSPI_CLK_GPIO_PORT, OSPI_CLK_PIN);
 800853c:	2104      	movs	r1, #4
 800853e:	4823      	ldr	r0, [pc, #140]	; (80085cc <OSPI_NOR_MspDeInit+0x98>)
 8008540:	f001 fc68 	bl	8009e14 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_DQS_GPIO_PORT, OSPI_DQS_PIN);
 8008544:	2120      	movs	r1, #32
 8008546:	4822      	ldr	r0, [pc, #136]	; (80085d0 <OSPI_NOR_MspDeInit+0x9c>)
 8008548:	f001 fc64 	bl	8009e14 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_CS_GPIO_PORT, OSPI_CS_PIN);
 800854c:	2140      	movs	r1, #64	; 0x40
 800854e:	4821      	ldr	r0, [pc, #132]	; (80085d4 <OSPI_NOR_MspDeInit+0xa0>)
 8008550:	f001 fc60 	bl	8009e14 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D0_GPIO_PORT, OSPI_D0_PIN);
 8008554:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008558:	481f      	ldr	r0, [pc, #124]	; (80085d8 <OSPI_NOR_MspDeInit+0xa4>)
 800855a:	f001 fc5b 	bl	8009e14 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D1_GPIO_PORT, OSPI_D1_PIN);
 800855e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008562:	481e      	ldr	r0, [pc, #120]	; (80085dc <OSPI_NOR_MspDeInit+0xa8>)
 8008564:	f001 fc56 	bl	8009e14 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D2_GPIO_PORT, OSPI_D2_PIN);
 8008568:	2180      	movs	r1, #128	; 0x80
 800856a:	481c      	ldr	r0, [pc, #112]	; (80085dc <OSPI_NOR_MspDeInit+0xa8>)
 800856c:	f001 fc52 	bl	8009e14 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D3_GPIO_PORT, OSPI_D3_PIN);
 8008570:	2140      	movs	r1, #64	; 0x40
 8008572:	481a      	ldr	r0, [pc, #104]	; (80085dc <OSPI_NOR_MspDeInit+0xa8>)
 8008574:	f001 fc4e 	bl	8009e14 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D4_GPIO_PORT, OSPI_D4_PIN);
 8008578:	2102      	movs	r1, #2
 800857a:	4815      	ldr	r0, [pc, #84]	; (80085d0 <OSPI_NOR_MspDeInit+0x9c>)
 800857c:	f001 fc4a 	bl	8009e14 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D5_GPIO_PORT, OSPI_D5_PIN);
 8008580:	2108      	movs	r1, #8
 8008582:	4817      	ldr	r0, [pc, #92]	; (80085e0 <OSPI_NOR_MspDeInit+0xac>)
 8008584:	f001 fc46 	bl	8009e14 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D6_GPIO_PORT, OSPI_D6_PIN);
 8008588:	f44f 7100 	mov.w	r1, #512	; 0x200
 800858c:	4811      	ldr	r0, [pc, #68]	; (80085d4 <OSPI_NOR_MspDeInit+0xa0>)
 800858e:	f001 fc41 	bl	8009e14 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D7_GPIO_PORT, OSPI_D7_PIN);
 8008592:	2180      	movs	r1, #128	; 0x80
 8008594:	4810      	ldr	r0, [pc, #64]	; (80085d8 <OSPI_NOR_MspDeInit+0xa4>)
 8008596:	f001 fc3d 	bl	8009e14 <HAL_GPIO_DeInit>

  /* Reset the OctoSPI memory interface */
  OSPI_FORCE_RESET();
 800859a:	4b12      	ldr	r3, [pc, #72]	; (80085e4 <OSPI_NOR_MspDeInit+0xb0>)
 800859c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800859e:	4a11      	ldr	r2, [pc, #68]	; (80085e4 <OSPI_NOR_MspDeInit+0xb0>)
 80085a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80085a4:	67d3      	str	r3, [r2, #124]	; 0x7c
  OSPI_RELEASE_RESET();
 80085a6:	4b0f      	ldr	r3, [pc, #60]	; (80085e4 <OSPI_NOR_MspDeInit+0xb0>)
 80085a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80085aa:	4a0e      	ldr	r2, [pc, #56]	; (80085e4 <OSPI_NOR_MspDeInit+0xb0>)
 80085ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80085b0:	67d3      	str	r3, [r2, #124]	; 0x7c

  /* Disable the OctoSPI memory interface clock */
  OSPI_CLK_DISABLE();
 80085b2:	4b0c      	ldr	r3, [pc, #48]	; (80085e4 <OSPI_NOR_MspDeInit+0xb0>)
 80085b4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80085b8:	4a0a      	ldr	r2, [pc, #40]	; (80085e4 <OSPI_NOR_MspDeInit+0xb0>)
 80085ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80085be:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
}
 80085c2:	bf00      	nop
 80085c4:	3708      	adds	r7, #8
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}
 80085ca:	bf00      	nop
 80085cc:	58020400 	.word	0x58020400
 80085d0:	58020800 	.word	0x58020800
 80085d4:	58021800 	.word	0x58021800
 80085d8:	58020c00 	.word	0x58020c00
 80085dc:	58021400 	.word	0x58021400
 80085e0:	58021c00 	.word	0x58021c00
 80085e4:	58024400 	.word	0x58024400

080085e8 <OSPI_NOR_ResetMemory>:
  * @brief  This function reset the OSPI memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_ResetMemory (uint32_t Instance)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b084      	sub	sp, #16
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80085f0:	2300      	movs	r3, #0
 80085f2:	60fb      	str	r3, [r7, #12]

  /* Enable write operations */
  if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	225c      	movs	r2, #92	; 0x5c
 80085f8:	fb02 f303 	mul.w	r3, r2, r3
 80085fc:	4a40      	ldr	r2, [pc, #256]	; (8008700 <OSPI_NOR_ResetMemory+0x118>)
 80085fe:	4413      	add	r3, r2
 8008600:	2200      	movs	r2, #0
 8008602:	2100      	movs	r1, #0
 8008604:	4618      	mov	r0, r3
 8008606:	f7fe ff18 	bl	800743a <MX25LM51245G_ResetEnable>
 800860a:	4603      	mov	r3, r0
 800860c:	2b00      	cmp	r3, #0
 800860e:	d003      	beq.n	8008618 <OSPI_NOR_ResetMemory+0x30>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8008610:	f06f 0304 	mvn.w	r3, #4
 8008614:	60fb      	str	r3, [r7, #12]
 8008616:	e06d      	b.n	80086f4 <OSPI_NOR_ResetMemory+0x10c>
  }
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	225c      	movs	r2, #92	; 0x5c
 800861c:	fb02 f303 	mul.w	r3, r2, r3
 8008620:	4a37      	ldr	r2, [pc, #220]	; (8008700 <OSPI_NOR_ResetMemory+0x118>)
 8008622:	4413      	add	r3, r2
 8008624:	2200      	movs	r2, #0
 8008626:	2100      	movs	r1, #0
 8008628:	4618      	mov	r0, r3
 800862a:	f7fe ff5e 	bl	80074ea <MX25LM51245G_ResetMemory>
 800862e:	4603      	mov	r3, r0
 8008630:	2b00      	cmp	r3, #0
 8008632:	d003      	beq.n	800863c <OSPI_NOR_ResetMemory+0x54>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8008634:	f06f 0304 	mvn.w	r3, #4
 8008638:	60fb      	str	r3, [r7, #12]
 800863a:	e05b      	b.n	80086f4 <OSPI_NOR_ResetMemory+0x10c>
  }
  else if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	225c      	movs	r2, #92	; 0x5c
 8008640:	fb02 f303 	mul.w	r3, r2, r3
 8008644:	4a2e      	ldr	r2, [pc, #184]	; (8008700 <OSPI_NOR_ResetMemory+0x118>)
 8008646:	4413      	add	r3, r2
 8008648:	2200      	movs	r2, #0
 800864a:	2101      	movs	r1, #1
 800864c:	4618      	mov	r0, r3
 800864e:	f7fe fef4 	bl	800743a <MX25LM51245G_ResetEnable>
 8008652:	4603      	mov	r3, r0
 8008654:	2b00      	cmp	r3, #0
 8008656:	d003      	beq.n	8008660 <OSPI_NOR_ResetMemory+0x78>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8008658:	f06f 0304 	mvn.w	r3, #4
 800865c:	60fb      	str	r3, [r7, #12]
 800865e:	e049      	b.n	80086f4 <OSPI_NOR_ResetMemory+0x10c>
  }
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	225c      	movs	r2, #92	; 0x5c
 8008664:	fb02 f303 	mul.w	r3, r2, r3
 8008668:	4a25      	ldr	r2, [pc, #148]	; (8008700 <OSPI_NOR_ResetMemory+0x118>)
 800866a:	4413      	add	r3, r2
 800866c:	2200      	movs	r2, #0
 800866e:	2101      	movs	r1, #1
 8008670:	4618      	mov	r0, r3
 8008672:	f7fe ff3a 	bl	80074ea <MX25LM51245G_ResetMemory>
 8008676:	4603      	mov	r3, r0
 8008678:	2b00      	cmp	r3, #0
 800867a:	d003      	beq.n	8008684 <OSPI_NOR_ResetMemory+0x9c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800867c:	f06f 0304 	mvn.w	r3, #4
 8008680:	60fb      	str	r3, [r7, #12]
 8008682:	e037      	b.n	80086f4 <OSPI_NOR_ResetMemory+0x10c>
  }
  else if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	225c      	movs	r2, #92	; 0x5c
 8008688:	fb02 f303 	mul.w	r3, r2, r3
 800868c:	4a1c      	ldr	r2, [pc, #112]	; (8008700 <OSPI_NOR_ResetMemory+0x118>)
 800868e:	4413      	add	r3, r2
 8008690:	2201      	movs	r2, #1
 8008692:	2101      	movs	r1, #1
 8008694:	4618      	mov	r0, r3
 8008696:	f7fe fed0 	bl	800743a <MX25LM51245G_ResetEnable>
 800869a:	4603      	mov	r3, r0
 800869c:	2b00      	cmp	r3, #0
 800869e:	d003      	beq.n	80086a8 <OSPI_NOR_ResetMemory+0xc0>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80086a0:	f06f 0304 	mvn.w	r3, #4
 80086a4:	60fb      	str	r3, [r7, #12]
 80086a6:	e025      	b.n	80086f4 <OSPI_NOR_ResetMemory+0x10c>
  }
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	225c      	movs	r2, #92	; 0x5c
 80086ac:	fb02 f303 	mul.w	r3, r2, r3
 80086b0:	4a13      	ldr	r2, [pc, #76]	; (8008700 <OSPI_NOR_ResetMemory+0x118>)
 80086b2:	4413      	add	r3, r2
 80086b4:	2201      	movs	r2, #1
 80086b6:	2101      	movs	r1, #1
 80086b8:	4618      	mov	r0, r3
 80086ba:	f7fe ff16 	bl	80074ea <MX25LM51245G_ResetMemory>
 80086be:	4603      	mov	r3, r0
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d003      	beq.n	80086cc <OSPI_NOR_ResetMemory+0xe4>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80086c4:	f06f 0304 	mvn.w	r3, #4
 80086c8:	60fb      	str	r3, [r7, #12]
 80086ca:	e013      	b.n	80086f4 <OSPI_NOR_ResetMemory+0x10c>
  }
  else
  {
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;      /* After reset S/W setting to indirect access   */
 80086cc:	4a0d      	ldr	r2, [pc, #52]	; (8008704 <OSPI_NOR_ResetMemory+0x11c>)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2101      	movs	r1, #1
 80086d2:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
    Ospi_Nor_Ctx[Instance].InterfaceMode = BSP_OSPI_NOR_SPI_MODE;         /* After reset H/W back to SPI mode by default  */
 80086d6:	4a0b      	ldr	r2, [pc, #44]	; (8008704 <OSPI_NOR_ResetMemory+0x11c>)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	00db      	lsls	r3, r3, #3
 80086dc:	4413      	add	r3, r2
 80086de:	2200      	movs	r2, #0
 80086e0:	705a      	strb	r2, [r3, #1]
    Ospi_Nor_Ctx[Instance].TransferRate  = BSP_OSPI_NOR_STR_TRANSFER;     /* After reset S/W setting to STR mode          */
 80086e2:	4a08      	ldr	r2, [pc, #32]	; (8008704 <OSPI_NOR_ResetMemory+0x11c>)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	00db      	lsls	r3, r3, #3
 80086e8:	4413      	add	r3, r2
 80086ea:	2200      	movs	r2, #0
 80086ec:	709a      	strb	r2, [r3, #2]

    /* After SWreset CMD, wait in case SWReset occurred during erase operation */
    HAL_Delay(MX25LM51245G_RESET_MAX_TIME);
 80086ee:	2064      	movs	r0, #100	; 0x64
 80086f0:	f000 fd1a 	bl	8009128 <HAL_Delay>
  }

  /* Return BSP status */
  return ret;
 80086f4:	68fb      	ldr	r3, [r7, #12]
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	3710      	adds	r7, #16
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}
 80086fe:	bf00      	nop
 8008700:	240025a4 	.word	0x240025a4
 8008704:	24002600 	.word	0x24002600

08008708 <OSPI_NOR_EnterDOPIMode>:
  * @brief  This function enables the octal DTR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_EnterDOPIMode(uint32_t Instance)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b086      	sub	sp, #24
 800870c:	af02      	add	r7, sp, #8
 800870e:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8008710:	2300      	movs	r3, #0
 8008712:	60fb      	str	r3, [r7, #12]
  uint8_t reg[2];

  /* Enable write operations */
  if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	225c      	movs	r2, #92	; 0x5c
 8008718:	fb02 f303 	mul.w	r3, r2, r3
 800871c:	4a60      	ldr	r2, [pc, #384]	; (80088a0 <OSPI_NOR_EnterDOPIMode+0x198>)
 800871e:	1898      	adds	r0, r3, r2
 8008720:	4a60      	ldr	r2, [pc, #384]	; (80088a4 <OSPI_NOR_EnterDOPIMode+0x19c>)
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	00db      	lsls	r3, r3, #3
 8008726:	4413      	add	r3, r2
 8008728:	7859      	ldrb	r1, [r3, #1]
 800872a:	4a5e      	ldr	r2, [pc, #376]	; (80088a4 <OSPI_NOR_EnterDOPIMode+0x19c>)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	00db      	lsls	r3, r3, #3
 8008730:	4413      	add	r3, r2
 8008732:	789b      	ldrb	r3, [r3, #2]
 8008734:	461a      	mov	r2, r3
 8008736:	f7fe fc86 	bl	8007046 <MX25LM51245G_WriteEnable>
 800873a:	4603      	mov	r3, r0
 800873c:	2b00      	cmp	r3, #0
 800873e:	d003      	beq.n	8008748 <OSPI_NOR_EnterDOPIMode+0x40>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8008740:	f06f 0304 	mvn.w	r3, #4
 8008744:	60fb      	str	r3, [r7, #12]
 8008746:	e0a6      	b.n	8008896 <OSPI_NOR_EnterDOPIMode+0x18e>
  }
  /* Write Configuration register 2 (with new dummy cycles) */
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG3_ADDR, MX25LM51245G_CR2_DC_6_CYCLES) != MX25LM51245G_OK)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	225c      	movs	r2, #92	; 0x5c
 800874c:	fb02 f303 	mul.w	r3, r2, r3
 8008750:	4a53      	ldr	r2, [pc, #332]	; (80088a0 <OSPI_NOR_EnterDOPIMode+0x198>)
 8008752:	1898      	adds	r0, r3, r2
 8008754:	4a53      	ldr	r2, [pc, #332]	; (80088a4 <OSPI_NOR_EnterDOPIMode+0x19c>)
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	00db      	lsls	r3, r3, #3
 800875a:	4413      	add	r3, r2
 800875c:	7859      	ldrb	r1, [r3, #1]
 800875e:	4a51      	ldr	r2, [pc, #324]	; (80088a4 <OSPI_NOR_EnterDOPIMode+0x19c>)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	00db      	lsls	r3, r3, #3
 8008764:	4413      	add	r3, r2
 8008766:	789a      	ldrb	r2, [r3, #2]
 8008768:	2307      	movs	r3, #7
 800876a:	9300      	str	r3, [sp, #0]
 800876c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008770:	f7fe fd34 	bl	80071dc <MX25LM51245G_WriteCfg2Register>
 8008774:	4603      	mov	r3, r0
 8008776:	2b00      	cmp	r3, #0
 8008778:	d003      	beq.n	8008782 <OSPI_NOR_EnterDOPIMode+0x7a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800877a:	f06f 0304 	mvn.w	r3, #4
 800877e:	60fb      	str	r3, [r7, #12]
 8008780:	e089      	b.n	8008896 <OSPI_NOR_EnterDOPIMode+0x18e>
  }
  /* Enable write operations */
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	225c      	movs	r2, #92	; 0x5c
 8008786:	fb02 f303 	mul.w	r3, r2, r3
 800878a:	4a45      	ldr	r2, [pc, #276]	; (80088a0 <OSPI_NOR_EnterDOPIMode+0x198>)
 800878c:	1898      	adds	r0, r3, r2
 800878e:	4a45      	ldr	r2, [pc, #276]	; (80088a4 <OSPI_NOR_EnterDOPIMode+0x19c>)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	00db      	lsls	r3, r3, #3
 8008794:	4413      	add	r3, r2
 8008796:	7859      	ldrb	r1, [r3, #1]
 8008798:	4a42      	ldr	r2, [pc, #264]	; (80088a4 <OSPI_NOR_EnterDOPIMode+0x19c>)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	00db      	lsls	r3, r3, #3
 800879e:	4413      	add	r3, r2
 80087a0:	789b      	ldrb	r3, [r3, #2]
 80087a2:	461a      	mov	r2, r3
 80087a4:	f7fe fc4f 	bl	8007046 <MX25LM51245G_WriteEnable>
 80087a8:	4603      	mov	r3, r0
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d003      	beq.n	80087b6 <OSPI_NOR_EnterDOPIMode+0xae>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80087ae:	f06f 0304 	mvn.w	r3, #4
 80087b2:	60fb      	str	r3, [r7, #12]
 80087b4:	e06f      	b.n	8008896 <OSPI_NOR_EnterDOPIMode+0x18e>
  }
  /* Write Configuration register 2 (with Octal I/O SPI protocol) */
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, MX25LM51245G_CR2_DOPI) != MX25LM51245G_OK)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	225c      	movs	r2, #92	; 0x5c
 80087ba:	fb02 f303 	mul.w	r3, r2, r3
 80087be:	4a38      	ldr	r2, [pc, #224]	; (80088a0 <OSPI_NOR_EnterDOPIMode+0x198>)
 80087c0:	1898      	adds	r0, r3, r2
 80087c2:	4a38      	ldr	r2, [pc, #224]	; (80088a4 <OSPI_NOR_EnterDOPIMode+0x19c>)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	00db      	lsls	r3, r3, #3
 80087c8:	4413      	add	r3, r2
 80087ca:	7859      	ldrb	r1, [r3, #1]
 80087cc:	4a35      	ldr	r2, [pc, #212]	; (80088a4 <OSPI_NOR_EnterDOPIMode+0x19c>)
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	00db      	lsls	r3, r3, #3
 80087d2:	4413      	add	r3, r2
 80087d4:	789a      	ldrb	r2, [r3, #2]
 80087d6:	2302      	movs	r3, #2
 80087d8:	9300      	str	r3, [sp, #0]
 80087da:	2300      	movs	r3, #0
 80087dc:	f7fe fcfe 	bl	80071dc <MX25LM51245G_WriteCfg2Register>
 80087e0:	4603      	mov	r3, r0
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d003      	beq.n	80087ee <OSPI_NOR_EnterDOPIMode+0xe6>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80087e6:	f06f 0304 	mvn.w	r3, #4
 80087ea:	60fb      	str	r3, [r7, #12]
 80087ec:	e053      	b.n	8008896 <OSPI_NOR_EnterDOPIMode+0x18e>
  }
  else
  {
    /* Wait that the configuration is effective and check that memory is ready */
    HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 80087ee:	2028      	movs	r0, #40	; 0x28
 80087f0:	f000 fc9a 	bl	8009128 <HAL_Delay>

    /* Reconfigure the memory type of the peripheral */
    hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 80087f4:	4a2a      	ldr	r2, [pc, #168]	; (80088a0 <OSPI_NOR_EnterDOPIMode+0x198>)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	215c      	movs	r1, #92	; 0x5c
 80087fa:	fb01 f303 	mul.w	r3, r1, r3
 80087fe:	4413      	add	r3, r2
 8008800:	330c      	adds	r3, #12
 8008802:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008806:	601a      	str	r2, [r3, #0]
    hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 8008808:	4a25      	ldr	r2, [pc, #148]	; (80088a0 <OSPI_NOR_EnterDOPIMode+0x198>)
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	215c      	movs	r1, #92	; 0x5c
 800880e:	fb01 f303 	mul.w	r3, r1, r3
 8008812:	4413      	add	r3, r2
 8008814:	332c      	adds	r3, #44	; 0x2c
 8008816:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800881a:	601a      	str	r2, [r3, #0]
    if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	225c      	movs	r2, #92	; 0x5c
 8008820:	fb02 f303 	mul.w	r3, r2, r3
 8008824:	4a1e      	ldr	r2, [pc, #120]	; (80088a0 <OSPI_NOR_EnterDOPIMode+0x198>)
 8008826:	4413      	add	r3, r2
 8008828:	4618      	mov	r0, r3
 800882a:	f002 fed5 	bl	800b5d8 <HAL_OSPI_Init>
 800882e:	4603      	mov	r3, r0
 8008830:	2b00      	cmp	r3, #0
 8008832:	d003      	beq.n	800883c <OSPI_NOR_EnterDOPIMode+0x134>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8008834:	f06f 0303 	mvn.w	r3, #3
 8008838:	60fb      	str	r3, [r7, #12]
 800883a:	e02c      	b.n	8008896 <OSPI_NOR_EnterDOPIMode+0x18e>
    }
    /* Check Flash busy ? */
    else if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	225c      	movs	r2, #92	; 0x5c
 8008840:	fb02 f303 	mul.w	r3, r2, r3
 8008844:	4a16      	ldr	r2, [pc, #88]	; (80088a0 <OSPI_NOR_EnterDOPIMode+0x198>)
 8008846:	4413      	add	r3, r2
 8008848:	2201      	movs	r2, #1
 800884a:	2101      	movs	r1, #1
 800884c:	4618      	mov	r0, r3
 800884e:	f7fe fa34 	bl	8006cba <MX25LM51245G_AutoPollingMemReady>
 8008852:	4603      	mov	r3, r0
 8008854:	2b00      	cmp	r3, #0
 8008856:	d003      	beq.n	8008860 <OSPI_NOR_EnterDOPIMode+0x158>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008858:	f06f 0304 	mvn.w	r3, #4
 800885c:	60fb      	str	r3, [r7, #12]
 800885e:	e01a      	b.n	8008896 <OSPI_NOR_EnterDOPIMode+0x18e>
    }
    /* Check the configuration has been correctly done */
    else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	225c      	movs	r2, #92	; 0x5c
 8008864:	fb02 f303 	mul.w	r3, r2, r3
 8008868:	4a0d      	ldr	r2, [pc, #52]	; (80088a0 <OSPI_NOR_EnterDOPIMode+0x198>)
 800886a:	1898      	adds	r0, r3, r2
 800886c:	f107 0308 	add.w	r3, r7, #8
 8008870:	9300      	str	r3, [sp, #0]
 8008872:	2300      	movs	r3, #0
 8008874:	2201      	movs	r2, #1
 8008876:	2101      	movs	r1, #1
 8008878:	f7fe fd45 	bl	8007306 <MX25LM51245G_ReadCfg2Register>
 800887c:	4603      	mov	r3, r0
 800887e:	2b00      	cmp	r3, #0
 8008880:	d003      	beq.n	800888a <OSPI_NOR_EnterDOPIMode+0x182>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008882:	f06f 0304 	mvn.w	r3, #4
 8008886:	60fb      	str	r3, [r7, #12]
 8008888:	e005      	b.n	8008896 <OSPI_NOR_EnterDOPIMode+0x18e>
    }
    else
    {
      if (reg[0] != MX25LM51245G_CR2_DOPI)
 800888a:	7a3b      	ldrb	r3, [r7, #8]
 800888c:	2b02      	cmp	r3, #2
 800888e:	d002      	beq.n	8008896 <OSPI_NOR_EnterDOPIMode+0x18e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008890:	f06f 0304 	mvn.w	r3, #4
 8008894:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Return BSP status */
  return ret;
 8008896:	68fb      	ldr	r3, [r7, #12]
}
 8008898:	4618      	mov	r0, r3
 800889a:	3710      	adds	r7, #16
 800889c:	46bd      	mov	sp, r7
 800889e:	bd80      	pop	{r7, pc}
 80088a0:	240025a4 	.word	0x240025a4
 80088a4:	24002600 	.word	0x24002600

080088a8 <OSPI_NOR_EnterSOPIMode>:
  * @brief  This function enables the octal STR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_EnterSOPIMode(uint32_t Instance)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b086      	sub	sp, #24
 80088ac:	af02      	add	r7, sp, #8
 80088ae:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80088b0:	2300      	movs	r3, #0
 80088b2:	60fb      	str	r3, [r7, #12]
  uint8_t reg[2];

  /* Enable write operations */
  if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	225c      	movs	r2, #92	; 0x5c
 80088b8:	fb02 f303 	mul.w	r3, r2, r3
 80088bc:	4a4e      	ldr	r2, [pc, #312]	; (80089f8 <OSPI_NOR_EnterSOPIMode+0x150>)
 80088be:	1898      	adds	r0, r3, r2
 80088c0:	4a4e      	ldr	r2, [pc, #312]	; (80089fc <OSPI_NOR_EnterSOPIMode+0x154>)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	00db      	lsls	r3, r3, #3
 80088c6:	4413      	add	r3, r2
 80088c8:	7859      	ldrb	r1, [r3, #1]
 80088ca:	4a4c      	ldr	r2, [pc, #304]	; (80089fc <OSPI_NOR_EnterSOPIMode+0x154>)
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	00db      	lsls	r3, r3, #3
 80088d0:	4413      	add	r3, r2
 80088d2:	789b      	ldrb	r3, [r3, #2]
 80088d4:	461a      	mov	r2, r3
 80088d6:	f7fe fbb6 	bl	8007046 <MX25LM51245G_WriteEnable>
 80088da:	4603      	mov	r3, r0
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d003      	beq.n	80088e8 <OSPI_NOR_EnterSOPIMode+0x40>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80088e0:	f06f 0304 	mvn.w	r3, #4
 80088e4:	60fb      	str	r3, [r7, #12]
 80088e6:	e082      	b.n	80089ee <OSPI_NOR_EnterSOPIMode+0x146>
  }
  /* Write Configuration register 2 (with new dummy cycles) */
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG3_ADDR, MX25LM51245G_CR2_DC_6_CYCLES) != MX25LM51245G_OK)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	225c      	movs	r2, #92	; 0x5c
 80088ec:	fb02 f303 	mul.w	r3, r2, r3
 80088f0:	4a41      	ldr	r2, [pc, #260]	; (80089f8 <OSPI_NOR_EnterSOPIMode+0x150>)
 80088f2:	1898      	adds	r0, r3, r2
 80088f4:	4a41      	ldr	r2, [pc, #260]	; (80089fc <OSPI_NOR_EnterSOPIMode+0x154>)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	00db      	lsls	r3, r3, #3
 80088fa:	4413      	add	r3, r2
 80088fc:	7859      	ldrb	r1, [r3, #1]
 80088fe:	4a3f      	ldr	r2, [pc, #252]	; (80089fc <OSPI_NOR_EnterSOPIMode+0x154>)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	00db      	lsls	r3, r3, #3
 8008904:	4413      	add	r3, r2
 8008906:	789a      	ldrb	r2, [r3, #2]
 8008908:	2307      	movs	r3, #7
 800890a:	9300      	str	r3, [sp, #0]
 800890c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008910:	f7fe fc64 	bl	80071dc <MX25LM51245G_WriteCfg2Register>
 8008914:	4603      	mov	r3, r0
 8008916:	2b00      	cmp	r3, #0
 8008918:	d003      	beq.n	8008922 <OSPI_NOR_EnterSOPIMode+0x7a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800891a:	f06f 0304 	mvn.w	r3, #4
 800891e:	60fb      	str	r3, [r7, #12]
 8008920:	e065      	b.n	80089ee <OSPI_NOR_EnterSOPIMode+0x146>
  }
  /* Enable write operations */
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	225c      	movs	r2, #92	; 0x5c
 8008926:	fb02 f303 	mul.w	r3, r2, r3
 800892a:	4a33      	ldr	r2, [pc, #204]	; (80089f8 <OSPI_NOR_EnterSOPIMode+0x150>)
 800892c:	1898      	adds	r0, r3, r2
 800892e:	4a33      	ldr	r2, [pc, #204]	; (80089fc <OSPI_NOR_EnterSOPIMode+0x154>)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	00db      	lsls	r3, r3, #3
 8008934:	4413      	add	r3, r2
 8008936:	7859      	ldrb	r1, [r3, #1]
 8008938:	4a30      	ldr	r2, [pc, #192]	; (80089fc <OSPI_NOR_EnterSOPIMode+0x154>)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	00db      	lsls	r3, r3, #3
 800893e:	4413      	add	r3, r2
 8008940:	789b      	ldrb	r3, [r3, #2]
 8008942:	461a      	mov	r2, r3
 8008944:	f7fe fb7f 	bl	8007046 <MX25LM51245G_WriteEnable>
 8008948:	4603      	mov	r3, r0
 800894a:	2b00      	cmp	r3, #0
 800894c:	d003      	beq.n	8008956 <OSPI_NOR_EnterSOPIMode+0xae>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800894e:	f06f 0304 	mvn.w	r3, #4
 8008952:	60fb      	str	r3, [r7, #12]
 8008954:	e04b      	b.n	80089ee <OSPI_NOR_EnterSOPIMode+0x146>
  }
  /* Write Configuration register 2 (with Octal I/O SPI protocol) */
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, MX25LM51245G_CR2_SOPI) != MX25LM51245G_OK)
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	225c      	movs	r2, #92	; 0x5c
 800895a:	fb02 f303 	mul.w	r3, r2, r3
 800895e:	4a26      	ldr	r2, [pc, #152]	; (80089f8 <OSPI_NOR_EnterSOPIMode+0x150>)
 8008960:	1898      	adds	r0, r3, r2
 8008962:	4a26      	ldr	r2, [pc, #152]	; (80089fc <OSPI_NOR_EnterSOPIMode+0x154>)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	00db      	lsls	r3, r3, #3
 8008968:	4413      	add	r3, r2
 800896a:	7859      	ldrb	r1, [r3, #1]
 800896c:	4a23      	ldr	r2, [pc, #140]	; (80089fc <OSPI_NOR_EnterSOPIMode+0x154>)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	00db      	lsls	r3, r3, #3
 8008972:	4413      	add	r3, r2
 8008974:	789a      	ldrb	r2, [r3, #2]
 8008976:	2301      	movs	r3, #1
 8008978:	9300      	str	r3, [sp, #0]
 800897a:	2300      	movs	r3, #0
 800897c:	f7fe fc2e 	bl	80071dc <MX25LM51245G_WriteCfg2Register>
 8008980:	4603      	mov	r3, r0
 8008982:	2b00      	cmp	r3, #0
 8008984:	d003      	beq.n	800898e <OSPI_NOR_EnterSOPIMode+0xe6>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8008986:	f06f 0304 	mvn.w	r3, #4
 800898a:	60fb      	str	r3, [r7, #12]
 800898c:	e02f      	b.n	80089ee <OSPI_NOR_EnterSOPIMode+0x146>
  }
  else
  {
    /* Wait that the configuration is effective and check that memory is ready */
    HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 800898e:	2028      	movs	r0, #40	; 0x28
 8008990:	f000 fbca 	bl	8009128 <HAL_Delay>

    /* Check Flash busy ? */
    if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	225c      	movs	r2, #92	; 0x5c
 8008998:	fb02 f303 	mul.w	r3, r2, r3
 800899c:	4a16      	ldr	r2, [pc, #88]	; (80089f8 <OSPI_NOR_EnterSOPIMode+0x150>)
 800899e:	4413      	add	r3, r2
 80089a0:	2200      	movs	r2, #0
 80089a2:	2101      	movs	r1, #1
 80089a4:	4618      	mov	r0, r3
 80089a6:	f7fe f988 	bl	8006cba <MX25LM51245G_AutoPollingMemReady>
 80089aa:	4603      	mov	r3, r0
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d003      	beq.n	80089b8 <OSPI_NOR_EnterSOPIMode+0x110>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80089b0:	f06f 0304 	mvn.w	r3, #4
 80089b4:	60fb      	str	r3, [r7, #12]
 80089b6:	e01a      	b.n	80089ee <OSPI_NOR_EnterSOPIMode+0x146>
    }
    /* Check the configuration has been correctly done */
    else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	225c      	movs	r2, #92	; 0x5c
 80089bc:	fb02 f303 	mul.w	r3, r2, r3
 80089c0:	4a0d      	ldr	r2, [pc, #52]	; (80089f8 <OSPI_NOR_EnterSOPIMode+0x150>)
 80089c2:	1898      	adds	r0, r3, r2
 80089c4:	f107 0308 	add.w	r3, r7, #8
 80089c8:	9300      	str	r3, [sp, #0]
 80089ca:	2300      	movs	r3, #0
 80089cc:	2200      	movs	r2, #0
 80089ce:	2101      	movs	r1, #1
 80089d0:	f7fe fc99 	bl	8007306 <MX25LM51245G_ReadCfg2Register>
 80089d4:	4603      	mov	r3, r0
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d003      	beq.n	80089e2 <OSPI_NOR_EnterSOPIMode+0x13a>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80089da:	f06f 0304 	mvn.w	r3, #4
 80089de:	60fb      	str	r3, [r7, #12]
 80089e0:	e005      	b.n	80089ee <OSPI_NOR_EnterSOPIMode+0x146>
    }
    else
    {
      if (reg[0] != MX25LM51245G_CR2_SOPI)
 80089e2:	7a3b      	ldrb	r3, [r7, #8]
 80089e4:	2b01      	cmp	r3, #1
 80089e6:	d002      	beq.n	80089ee <OSPI_NOR_EnterSOPIMode+0x146>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80089e8:	f06f 0304 	mvn.w	r3, #4
 80089ec:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Return BSP status */
  return ret;
 80089ee:	68fb      	ldr	r3, [r7, #12]
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	3710      	adds	r7, #16
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd80      	pop	{r7, pc}
 80089f8:	240025a4 	.word	0x240025a4
 80089fc:	24002600 	.word	0x24002600

08008a00 <OSPI_NOR_ExitOPIMode>:
  * @brief  This function disables the octal DTR or STR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_ExitOPIMode (uint32_t Instance)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b086      	sub	sp, #24
 8008a04:	af02      	add	r7, sp, #8
 8008a06:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8008a08:	2300      	movs	r3, #0
 8008a0a:	60fb      	str	r3, [r7, #12]
  uint8_t reg[2];

  /* Enable write operations */
  if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	225c      	movs	r2, #92	; 0x5c
 8008a10:	fb02 f303 	mul.w	r3, r2, r3
 8008a14:	4a49      	ldr	r2, [pc, #292]	; (8008b3c <OSPI_NOR_ExitOPIMode+0x13c>)
 8008a16:	1898      	adds	r0, r3, r2
 8008a18:	4a49      	ldr	r2, [pc, #292]	; (8008b40 <OSPI_NOR_ExitOPIMode+0x140>)
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	00db      	lsls	r3, r3, #3
 8008a1e:	4413      	add	r3, r2
 8008a20:	7859      	ldrb	r1, [r3, #1]
 8008a22:	4a47      	ldr	r2, [pc, #284]	; (8008b40 <OSPI_NOR_ExitOPIMode+0x140>)
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	00db      	lsls	r3, r3, #3
 8008a28:	4413      	add	r3, r2
 8008a2a:	789b      	ldrb	r3, [r3, #2]
 8008a2c:	461a      	mov	r2, r3
 8008a2e:	f7fe fb0a 	bl	8007046 <MX25LM51245G_WriteEnable>
 8008a32:	4603      	mov	r3, r0
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d003      	beq.n	8008a40 <OSPI_NOR_ExitOPIMode+0x40>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8008a38:	f06f 0304 	mvn.w	r3, #4
 8008a3c:	60fb      	str	r3, [r7, #12]
 8008a3e:	e077      	b.n	8008b30 <OSPI_NOR_ExitOPIMode+0x130>
  }
  else
  {
    /* Write Configuration register 2 (with SPI protocol) */
    reg[0] = 0;
 8008a40:	2300      	movs	r3, #0
 8008a42:	723b      	strb	r3, [r7, #8]
    reg[1] = 0;
 8008a44:	2300      	movs	r3, #0
 8008a46:	727b      	strb	r3, [r7, #9]
    if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, reg[0]) != MX25LM51245G_OK)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	225c      	movs	r2, #92	; 0x5c
 8008a4c:	fb02 f303 	mul.w	r3, r2, r3
 8008a50:	4a3a      	ldr	r2, [pc, #232]	; (8008b3c <OSPI_NOR_ExitOPIMode+0x13c>)
 8008a52:	1898      	adds	r0, r3, r2
 8008a54:	4a3a      	ldr	r2, [pc, #232]	; (8008b40 <OSPI_NOR_ExitOPIMode+0x140>)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	00db      	lsls	r3, r3, #3
 8008a5a:	4413      	add	r3, r2
 8008a5c:	7859      	ldrb	r1, [r3, #1]
 8008a5e:	4a38      	ldr	r2, [pc, #224]	; (8008b40 <OSPI_NOR_ExitOPIMode+0x140>)
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	00db      	lsls	r3, r3, #3
 8008a64:	4413      	add	r3, r2
 8008a66:	789a      	ldrb	r2, [r3, #2]
 8008a68:	7a3b      	ldrb	r3, [r7, #8]
 8008a6a:	9300      	str	r3, [sp, #0]
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	f7fe fbb5 	bl	80071dc <MX25LM51245G_WriteCfg2Register>
 8008a72:	4603      	mov	r3, r0
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d003      	beq.n	8008a80 <OSPI_NOR_ExitOPIMode+0x80>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008a78:	f06f 0304 	mvn.w	r3, #4
 8008a7c:	60fb      	str	r3, [r7, #12]
 8008a7e:	e057      	b.n	8008b30 <OSPI_NOR_ExitOPIMode+0x130>
    }
    else
    {
      /* Wait that the configuration is effective and check that memory is ready */
      HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 8008a80:	2028      	movs	r0, #40	; 0x28
 8008a82:	f000 fb51 	bl	8009128 <HAL_Delay>

      if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_DTR_TRANSFER)
 8008a86:	4a2e      	ldr	r2, [pc, #184]	; (8008b40 <OSPI_NOR_ExitOPIMode+0x140>)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	00db      	lsls	r3, r3, #3
 8008a8c:	4413      	add	r3, r2
 8008a8e:	789b      	ldrb	r3, [r3, #2]
 8008a90:	2b01      	cmp	r3, #1
 8008a92:	d120      	bne.n	8008ad6 <OSPI_NOR_ExitOPIMode+0xd6>
      {
        /* Reconfigure the memory type of the peripheral */
        hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MICRON;
 8008a94:	4a29      	ldr	r2, [pc, #164]	; (8008b3c <OSPI_NOR_ExitOPIMode+0x13c>)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	215c      	movs	r1, #92	; 0x5c
 8008a9a:	fb01 f303 	mul.w	r3, r1, r3
 8008a9e:	4413      	add	r3, r2
 8008aa0:	330c      	adds	r3, #12
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	601a      	str	r2, [r3, #0]
        hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8008aa6:	4a25      	ldr	r2, [pc, #148]	; (8008b3c <OSPI_NOR_ExitOPIMode+0x13c>)
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	215c      	movs	r1, #92	; 0x5c
 8008aac:	fb01 f303 	mul.w	r3, r1, r3
 8008ab0:	4413      	add	r3, r2
 8008ab2:	332c      	adds	r3, #44	; 0x2c
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	601a      	str	r2, [r3, #0]
        if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	225c      	movs	r2, #92	; 0x5c
 8008abc:	fb02 f303 	mul.w	r3, r2, r3
 8008ac0:	4a1e      	ldr	r2, [pc, #120]	; (8008b3c <OSPI_NOR_ExitOPIMode+0x13c>)
 8008ac2:	4413      	add	r3, r2
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	f002 fd87 	bl	800b5d8 <HAL_OSPI_Init>
 8008aca:	4603      	mov	r3, r0
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d002      	beq.n	8008ad6 <OSPI_NOR_ExitOPIMode+0xd6>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 8008ad0:	f06f 0303 	mvn.w	r3, #3
 8008ad4:	60fb      	str	r3, [r7, #12]
        }
      }

      /* Check Flash busy ? */
      if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	225c      	movs	r2, #92	; 0x5c
 8008ada:	fb02 f303 	mul.w	r3, r2, r3
 8008ade:	4a17      	ldr	r2, [pc, #92]	; (8008b3c <OSPI_NOR_ExitOPIMode+0x13c>)
 8008ae0:	4413      	add	r3, r2
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	2100      	movs	r1, #0
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f7fe f8e7 	bl	8006cba <MX25LM51245G_AutoPollingMemReady>
 8008aec:	4603      	mov	r3, r0
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d003      	beq.n	8008afa <OSPI_NOR_ExitOPIMode+0xfa>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008af2:	f06f 0304 	mvn.w	r3, #4
 8008af6:	60fb      	str	r3, [r7, #12]
 8008af8:	e01a      	b.n	8008b30 <OSPI_NOR_ExitOPIMode+0x130>
      }
      /* Check the configuration has been correctly done */
      else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	225c      	movs	r2, #92	; 0x5c
 8008afe:	fb02 f303 	mul.w	r3, r2, r3
 8008b02:	4a0e      	ldr	r2, [pc, #56]	; (8008b3c <OSPI_NOR_ExitOPIMode+0x13c>)
 8008b04:	1898      	adds	r0, r3, r2
 8008b06:	f107 0308 	add.w	r3, r7, #8
 8008b0a:	9300      	str	r3, [sp, #0]
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	2200      	movs	r2, #0
 8008b10:	2100      	movs	r1, #0
 8008b12:	f7fe fbf8 	bl	8007306 <MX25LM51245G_ReadCfg2Register>
 8008b16:	4603      	mov	r3, r0
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d003      	beq.n	8008b24 <OSPI_NOR_ExitOPIMode+0x124>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008b1c:	f06f 0304 	mvn.w	r3, #4
 8008b20:	60fb      	str	r3, [r7, #12]
 8008b22:	e005      	b.n	8008b30 <OSPI_NOR_ExitOPIMode+0x130>
      }
      else
      {
        if (reg[0] != 0U)
 8008b24:	7a3b      	ldrb	r3, [r7, #8]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d002      	beq.n	8008b30 <OSPI_NOR_ExitOPIMode+0x130>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8008b2a:	f06f 0304 	mvn.w	r3, #4
 8008b2e:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Return BSP status */
  return ret;
 8008b30:	68fb      	ldr	r3, [r7, #12]
}
 8008b32:	4618      	mov	r0, r3
 8008b34:	3710      	adds	r7, #16
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}
 8008b3a:	bf00      	nop
 8008b3c:	240025a4 	.word	0x240025a4
 8008b40:	24002600 	.word	0x24002600

08008b44 <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b088      	sub	sp, #32
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
 8008b4c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8008b4e:	2300      	movs	r3, #0
 8008b50:	61fb      	str	r3, [r7, #28]

  if((Instance >= TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d11c      	bne.n	8008b92 <BSP_TS_Init+0x4e>
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d018      	beq.n	8008b92 <BSP_TS_Init+0x4e>
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8008b68:	d813      	bhi.n	8008b92 <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	685b      	ldr	r3, [r3, #4]
  if((Instance >= TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d00f      	beq.n	8008b92 <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	685b      	ldr	r3, [r3, #4]
 8008b76:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8008b7a:	d80a      	bhi.n	8008b92 <BSP_TS_Init+0x4e>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	68da      	ldr	r2, [r3, #12]
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	6819      	ldr	r1, [r3, #0]
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	685b      	ldr	r3, [r3, #4]
 8008b88:	428b      	cmp	r3, r1
 8008b8a:	bf28      	it	cs
 8008b8c:	460b      	movcs	r3, r1
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8008b8e:	429a      	cmp	r2, r3
 8008b90:	d903      	bls.n	8008b9a <BSP_TS_Init+0x56>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8008b92:	f06f 0301 	mvn.w	r3, #1
 8008b96:	61fb      	str	r3, [r7, #28]
 8008b98:	e06e      	b.n	8008c78 <BSP_TS_Init+0x134>
  }
  else
  {
    if(FT5336_Probe(Instance) != BSP_ERROR_NONE)
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f000 f98c 	bl	8008eb8 <FT5336_Probe>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d003      	beq.n	8008bae <BSP_TS_Init+0x6a>
    {
      ret = BSP_ERROR_NO_INIT;
 8008ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8008baa:	61fb      	str	r3, [r7, #28]
 8008bac:	e064      	b.n	8008c78 <BSP_TS_Init+0x134>
    else
    {
      TS_Capabilities_t Capabilities;
      uint32_t i;
      /* Store parameters on TS context */
      Ts_Ctx[Instance].Width       = TS_Init->Width;
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	681a      	ldr	r2, [r3, #0]
 8008bb2:	4934      	ldr	r1, [pc, #208]	; (8008c84 <BSP_TS_Init+0x140>)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	015b      	lsls	r3, r3, #5
 8008bb8:	440b      	add	r3, r1
 8008bba:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Height      = TS_Init->Height;
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	685a      	ldr	r2, [r3, #4]
 8008bc0:	4930      	ldr	r1, [pc, #192]	; (8008c84 <BSP_TS_Init+0x140>)
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	015b      	lsls	r3, r3, #5
 8008bc6:	440b      	add	r3, r1
 8008bc8:	3304      	adds	r3, #4
 8008bca:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Orientation = TS_Init->Orientation;
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	689a      	ldr	r2, [r3, #8]
 8008bd0:	492c      	ldr	r1, [pc, #176]	; (8008c84 <BSP_TS_Init+0x140>)
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	015b      	lsls	r3, r3, #5
 8008bd6:	440b      	add	r3, r1
 8008bd8:	3308      	adds	r3, #8
 8008bda:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Accuracy    = TS_Init->Accuracy;
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	68da      	ldr	r2, [r3, #12]
 8008be0:	4928      	ldr	r1, [pc, #160]	; (8008c84 <BSP_TS_Init+0x140>)
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	015b      	lsls	r3, r3, #5
 8008be6:	440b      	add	r3, r1
 8008be8:	330c      	adds	r3, #12
 8008bea:	601a      	str	r2, [r3, #0]
      /* Get capabilities to retrieve maximum values of X and Y */
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8008bec:	4b26      	ldr	r3, [pc, #152]	; (8008c88 <BSP_TS_Init+0x144>)
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	69db      	ldr	r3, [r3, #28]
 8008bf2:	4926      	ldr	r1, [pc, #152]	; (8008c8c <BSP_TS_Init+0x148>)
 8008bf4:	687a      	ldr	r2, [r7, #4]
 8008bf6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008bfa:	f107 010c 	add.w	r1, r7, #12
 8008bfe:	4610      	mov	r0, r2
 8008c00:	4798      	blx	r3
 8008c02:	4603      	mov	r3, r0
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	da03      	bge.n	8008c10 <BSP_TS_Init+0xcc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008c08:	f06f 0304 	mvn.w	r3, #4
 8008c0c:	61fb      	str	r3, [r7, #28]
 8008c0e:	e033      	b.n	8008c78 <BSP_TS_Init+0x134>
      }
      else
      {
        /* Store maximum X and Y on context */
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 8008c10:	693a      	ldr	r2, [r7, #16]
 8008c12:	491c      	ldr	r1, [pc, #112]	; (8008c84 <BSP_TS_Init+0x140>)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	015b      	lsls	r3, r3, #5
 8008c18:	440b      	add	r3, r1
 8008c1a:	3310      	adds	r3, #16
 8008c1c:	601a      	str	r2, [r3, #0]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 8008c1e:	697a      	ldr	r2, [r7, #20]
 8008c20:	4918      	ldr	r1, [pc, #96]	; (8008c84 <BSP_TS_Init+0x140>)
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	015b      	lsls	r3, r3, #5
 8008c26:	440b      	add	r3, r1
 8008c28:	3314      	adds	r3, #20
 8008c2a:	601a      	str	r2, [r3, #0]
        /* Initialize previous position in order to always detect first touch */
        for(i = 0; i < TS_TOUCH_NBR; i++)
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	61bb      	str	r3, [r7, #24]
 8008c30:	e01f      	b.n	8008c72 <BSP_TS_Init+0x12e>
        {
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	681a      	ldr	r2, [r3, #0]
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	68db      	ldr	r3, [r3, #12]
 8008c3a:	4413      	add	r3, r2
 8008c3c:	1c5a      	adds	r2, r3, #1
 8008c3e:	4811      	ldr	r0, [pc, #68]	; (8008c84 <BSP_TS_Init+0x140>)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	00d9      	lsls	r1, r3, #3
 8008c44:	69bb      	ldr	r3, [r7, #24]
 8008c46:	440b      	add	r3, r1
 8008c48:	3306      	adds	r3, #6
 8008c4a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	685a      	ldr	r2, [r3, #4]
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	68db      	ldr	r3, [r3, #12]
 8008c56:	4413      	add	r3, r2
 8008c58:	1c5a      	adds	r2, r3, #1
 8008c5a:	480a      	ldr	r0, [pc, #40]	; (8008c84 <BSP_TS_Init+0x140>)
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	00d9      	lsls	r1, r3, #3
 8008c60:	69bb      	ldr	r3, [r7, #24]
 8008c62:	440b      	add	r3, r1
 8008c64:	3306      	adds	r3, #6
 8008c66:	009b      	lsls	r3, r3, #2
 8008c68:	4403      	add	r3, r0
 8008c6a:	605a      	str	r2, [r3, #4]
        for(i = 0; i < TS_TOUCH_NBR; i++)
 8008c6c:	69bb      	ldr	r3, [r7, #24]
 8008c6e:	3301      	adds	r3, #1
 8008c70:	61bb      	str	r3, [r7, #24]
 8008c72:	69bb      	ldr	r3, [r7, #24]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d0dc      	beq.n	8008c32 <BSP_TS_Init+0xee>
        }
      }
    }
  }

  return ret;
 8008c78:	69fb      	ldr	r3, [r7, #28]
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	3720      	adds	r7, #32
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}
 8008c82:	bf00      	nop
 8008c84:	24002610 	.word	0x24002610
 8008c88:	24002608 	.word	0x24002608
 8008c8c:	2400260c 	.word	0x2400260c

08008c90 <BSP_TS_GetState>:
  * @param  Instance  TS instance. Could be only 0.
  * @param  TS_State  Pointer to touch screen current state structure
  * @retval BSP status
  */
int32_t BSP_TS_GetState(uint32_t Instance, TS_State_t *TS_State)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b08a      	sub	sp, #40	; 0x28
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
 8008c98:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t x_oriented, y_oriented;
  uint32_t x_diff, y_diff;

  if(Instance >= TS_INSTANCES_NBR)
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d003      	beq.n	8008cac <BSP_TS_GetState+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8008ca4:	f06f 0301 	mvn.w	r3, #1
 8008ca8:	627b      	str	r3, [r7, #36]	; 0x24
 8008caa:	e0f9      	b.n	8008ea0 <BSP_TS_GetState+0x210>
  else
  {
    FT5336_State_t state;

    /* Get each touch coordinates */
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 8008cac:	4b7f      	ldr	r3, [pc, #508]	; (8008eac <BSP_TS_GetState+0x21c>)
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	691b      	ldr	r3, [r3, #16]
 8008cb2:	497f      	ldr	r1, [pc, #508]	; (8008eb0 <BSP_TS_GetState+0x220>)
 8008cb4:	687a      	ldr	r2, [r7, #4]
 8008cb6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008cba:	f107 0108 	add.w	r1, r7, #8
 8008cbe:	4610      	mov	r0, r2
 8008cc0:	4798      	blx	r3
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	da03      	bge.n	8008cd0 <BSP_TS_GetState+0x40>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008cc8:	f06f 0304 	mvn.w	r3, #4
 8008ccc:	627b      	str	r3, [r7, #36]	; 0x24
 8008cce:	e0e7      	b.n	8008ea0 <BSP_TS_GetState+0x210>
    }/* Check and update the number of touches active detected */
    else if(state.TouchDetected != 0U)
 8008cd0:	68bb      	ldr	r3, [r7, #8]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	f000 80d1 	beq.w	8008e7a <BSP_TS_GetState+0x1ea>
    {
      x_oriented = state.TouchX;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	623b      	str	r3, [r7, #32]
      y_oriented = state.TouchY;
 8008cdc:	693b      	ldr	r3, [r7, #16]
 8008cde:	61fb      	str	r3, [r7, #28]

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 8008ce0:	4a74      	ldr	r2, [pc, #464]	; (8008eb4 <BSP_TS_GetState+0x224>)
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	015b      	lsls	r3, r3, #5
 8008ce6:	4413      	add	r3, r2
 8008ce8:	3308      	adds	r3, #8
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f003 0308 	and.w	r3, r3, #8
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d003      	beq.n	8008cfc <BSP_TS_GetState+0x6c>
      {
        x_oriented = state.TouchY;
 8008cf4:	693b      	ldr	r3, [r7, #16]
 8008cf6:	623b      	str	r3, [r7, #32]
        y_oriented = state.TouchX;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	61fb      	str	r3, [r7, #28]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 8008cfc:	4a6d      	ldr	r2, [pc, #436]	; (8008eb4 <BSP_TS_GetState+0x224>)
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	015b      	lsls	r3, r3, #5
 8008d02:	4413      	add	r3, r2
 8008d04:	3308      	adds	r3, #8
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f003 0302 	and.w	r3, r3, #2
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d009      	beq.n	8008d24 <BSP_TS_GetState+0x94>
      {
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
 8008d10:	4a68      	ldr	r2, [pc, #416]	; (8008eb4 <BSP_TS_GetState+0x224>)
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	015b      	lsls	r3, r3, #5
 8008d16:	4413      	add	r3, r2
 8008d18:	3310      	adds	r3, #16
 8008d1a:	681a      	ldr	r2, [r3, #0]
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	1ad3      	subs	r3, r2, r3
 8008d20:	3b01      	subs	r3, #1
 8008d22:	623b      	str	r3, [r7, #32]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 8008d24:	4a63      	ldr	r2, [pc, #396]	; (8008eb4 <BSP_TS_GetState+0x224>)
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	015b      	lsls	r3, r3, #5
 8008d2a:	4413      	add	r3, r2
 8008d2c:	3308      	adds	r3, #8
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f003 0304 	and.w	r3, r3, #4
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d008      	beq.n	8008d4a <BSP_TS_GetState+0xba>
      {
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
 8008d38:	4a5e      	ldr	r2, [pc, #376]	; (8008eb4 <BSP_TS_GetState+0x224>)
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	015b      	lsls	r3, r3, #5
 8008d3e:	4413      	add	r3, r2
 8008d40:	3314      	adds	r3, #20
 8008d42:	681a      	ldr	r2, [r3, #0]
 8008d44:	693b      	ldr	r3, [r7, #16]
 8008d46:	1ad3      	subs	r3, r2, r3
 8008d48:	61fb      	str	r3, [r7, #28]
      }

      /* Apply boundary */
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8008d4a:	4a5a      	ldr	r2, [pc, #360]	; (8008eb4 <BSP_TS_GetState+0x224>)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	015b      	lsls	r3, r3, #5
 8008d50:	4413      	add	r3, r2
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	6a3a      	ldr	r2, [r7, #32]
 8008d56:	fb03 f202 	mul.w	r2, r3, r2
 8008d5a:	4956      	ldr	r1, [pc, #344]	; (8008eb4 <BSP_TS_GetState+0x224>)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	015b      	lsls	r3, r3, #5
 8008d60:	440b      	add	r3, r1
 8008d62:	3310      	adds	r3, #16
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	fbb2 f2f3 	udiv	r2, r2, r3
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8008d6e:	4a51      	ldr	r2, [pc, #324]	; (8008eb4 <BSP_TS_GetState+0x224>)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	015b      	lsls	r3, r3, #5
 8008d74:	4413      	add	r3, r2
 8008d76:	3304      	adds	r3, #4
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	69fa      	ldr	r2, [r7, #28]
 8008d7c:	fb03 f202 	mul.w	r2, r3, r2
 8008d80:	494c      	ldr	r1, [pc, #304]	; (8008eb4 <BSP_TS_GetState+0x224>)
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	015b      	lsls	r3, r3, #5
 8008d86:	440b      	add	r3, r1
 8008d88:	3314      	adds	r3, #20
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	609a      	str	r2, [r3, #8]
      /* Store Current TS state */
      TS_State->TouchDetected = state.TouchDetected;
 8008d94:	68ba      	ldr	r2, [r7, #8]
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	601a      	str	r2, [r3, #0]

      /* Check accuracy */
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	685a      	ldr	r2, [r3, #4]
 8008d9e:	4945      	ldr	r1, [pc, #276]	; (8008eb4 <BSP_TS_GetState+0x224>)
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	015b      	lsls	r3, r3, #5
 8008da4:	440b      	add	r3, r1
 8008da6:	3318      	adds	r3, #24
 8008da8:	681b      	ldr	r3, [r3, #0]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 8008daa:	429a      	cmp	r2, r3
 8008dac:	d909      	bls.n	8008dc2 <BSP_TS_GetState+0x132>
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	685a      	ldr	r2, [r3, #4]
 8008db2:	4940      	ldr	r1, [pc, #256]	; (8008eb4 <BSP_TS_GetState+0x224>)
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	015b      	lsls	r3, r3, #5
 8008db8:	440b      	add	r3, r1
 8008dba:	3318      	adds	r3, #24
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	1ad3      	subs	r3, r2, r3
 8008dc0:	e008      	b.n	8008dd4 <BSP_TS_GetState+0x144>
        (Ts_Ctx[Instance].PreviousX[0] - TS_State->TouchX);
 8008dc2:	4a3c      	ldr	r2, [pc, #240]	; (8008eb4 <BSP_TS_GetState+0x224>)
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	015b      	lsls	r3, r3, #5
 8008dc8:	4413      	add	r3, r2
 8008dca:	3318      	adds	r3, #24
 8008dcc:	681a      	ldr	r2, [r3, #0]
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	685b      	ldr	r3, [r3, #4]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 8008dd2:	1ad3      	subs	r3, r2, r3
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 8008dd4:	61bb      	str	r3, [r7, #24]

        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	689a      	ldr	r2, [r3, #8]
 8008dda:	4936      	ldr	r1, [pc, #216]	; (8008eb4 <BSP_TS_GetState+0x224>)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	015b      	lsls	r3, r3, #5
 8008de0:	440b      	add	r3, r1
 8008de2:	331c      	adds	r3, #28
 8008de4:	681b      	ldr	r3, [r3, #0]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 8008de6:	429a      	cmp	r2, r3
 8008de8:	d909      	bls.n	8008dfe <BSP_TS_GetState+0x16e>
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	689a      	ldr	r2, [r3, #8]
 8008dee:	4931      	ldr	r1, [pc, #196]	; (8008eb4 <BSP_TS_GetState+0x224>)
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	015b      	lsls	r3, r3, #5
 8008df4:	440b      	add	r3, r1
 8008df6:	331c      	adds	r3, #28
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	1ad3      	subs	r3, r2, r3
 8008dfc:	e008      	b.n	8008e10 <BSP_TS_GetState+0x180>
          (Ts_Ctx[Instance].PreviousY[0] - TS_State->TouchY);
 8008dfe:	4a2d      	ldr	r2, [pc, #180]	; (8008eb4 <BSP_TS_GetState+0x224>)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	015b      	lsls	r3, r3, #5
 8008e04:	4413      	add	r3, r2
 8008e06:	331c      	adds	r3, #28
 8008e08:	681a      	ldr	r2, [r3, #0]
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	689b      	ldr	r3, [r3, #8]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 8008e0e:	1ad3      	subs	r3, r2, r3
        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 8008e10:	617b      	str	r3, [r7, #20]


          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 8008e12:	4a28      	ldr	r2, [pc, #160]	; (8008eb4 <BSP_TS_GetState+0x224>)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	015b      	lsls	r3, r3, #5
 8008e18:	4413      	add	r3, r2
 8008e1a:	330c      	adds	r3, #12
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	69ba      	ldr	r2, [r7, #24]
 8008e20:	429a      	cmp	r2, r3
 8008e22:	d808      	bhi.n	8008e36 <BSP_TS_GetState+0x1a6>
 8008e24:	4a23      	ldr	r2, [pc, #140]	; (8008eb4 <BSP_TS_GetState+0x224>)
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	015b      	lsls	r3, r3, #5
 8008e2a:	4413      	add	r3, r2
 8008e2c:	330c      	adds	r3, #12
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	697a      	ldr	r2, [r7, #20]
 8008e32:	429a      	cmp	r2, r3
 8008e34:	d910      	bls.n	8008e58 <BSP_TS_GetState+0x1c8>
          {
            /* New touch detected */
            Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	685a      	ldr	r2, [r3, #4]
 8008e3a:	491e      	ldr	r1, [pc, #120]	; (8008eb4 <BSP_TS_GetState+0x224>)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	015b      	lsls	r3, r3, #5
 8008e40:	440b      	add	r3, r1
 8008e42:	3318      	adds	r3, #24
 8008e44:	601a      	str	r2, [r3, #0]
            Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	689a      	ldr	r2, [r3, #8]
 8008e4a:	491a      	ldr	r1, [pc, #104]	; (8008eb4 <BSP_TS_GetState+0x224>)
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	015b      	lsls	r3, r3, #5
 8008e50:	440b      	add	r3, r1
 8008e52:	331c      	adds	r3, #28
 8008e54:	601a      	str	r2, [r3, #0]
 8008e56:	e023      	b.n	8008ea0 <BSP_TS_GetState+0x210>
          }
          else
          {
            TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 8008e58:	4a16      	ldr	r2, [pc, #88]	; (8008eb4 <BSP_TS_GetState+0x224>)
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	015b      	lsls	r3, r3, #5
 8008e5e:	4413      	add	r3, r2
 8008e60:	3318      	adds	r3, #24
 8008e62:	681a      	ldr	r2, [r3, #0]
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	605a      	str	r2, [r3, #4]
            TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 8008e68:	4a12      	ldr	r2, [pc, #72]	; (8008eb4 <BSP_TS_GetState+0x224>)
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	015b      	lsls	r3, r3, #5
 8008e6e:	4413      	add	r3, r2
 8008e70:	331c      	adds	r3, #28
 8008e72:	681a      	ldr	r2, [r3, #0]
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	609a      	str	r2, [r3, #8]
 8008e78:	e012      	b.n	8008ea0 <BSP_TS_GetState+0x210>
          }
    }
    else
    {
      TS_State->TouchDetected = 0U;
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	601a      	str	r2, [r3, #0]
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 8008e80:	4a0c      	ldr	r2, [pc, #48]	; (8008eb4 <BSP_TS_GetState+0x224>)
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	015b      	lsls	r3, r3, #5
 8008e86:	4413      	add	r3, r2
 8008e88:	3318      	adds	r3, #24
 8008e8a:	681a      	ldr	r2, [r3, #0]
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 8008e90:	4a08      	ldr	r2, [pc, #32]	; (8008eb4 <BSP_TS_GetState+0x224>)
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	015b      	lsls	r3, r3, #5
 8008e96:	4413      	add	r3, r2
 8008e98:	331c      	adds	r3, #28
 8008e9a:	681a      	ldr	r2, [r3, #0]
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	609a      	str	r2, [r3, #8]
    }
  }

  return ret;
 8008ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	3728      	adds	r7, #40	; 0x28
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bd80      	pop	{r7, pc}
 8008eaa:	bf00      	nop
 8008eac:	24002608 	.word	0x24002608
 8008eb0:	2400260c 	.word	0x2400260c
 8008eb4:	24002610 	.word	0x24002610

08008eb8 <FT5336_Probe>:
  * @brief  Register Bus IOs if component ID is OK
  * @param  Instance TS instance. Could be only 0.
  * @retval BSP status
  */
static int32_t FT5336_Probe(uint32_t Instance)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b08a      	sub	sp, #40	; 0x28
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
  int32_t ret              = BSP_ERROR_NONE;
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	627b      	str	r3, [r7, #36]	; 0x24
  FT5336_IO_t              IOCtx;
  static FT5336_Object_t   FT5336Obj;
  uint32_t ft5336_id       = 0;
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	60bb      	str	r3, [r7, #8]

  /* Configure the touch screen driver */
  IOCtx.Address     = TS_I2C_ADDRESS;
 8008ec8:	2370      	movs	r3, #112	; 0x70
 8008eca:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = BSP_I2C4_Init;
 8008ecc:	4b23      	ldr	r3, [pc, #140]	; (8008f5c <FT5336_Probe+0xa4>)
 8008ece:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 8008ed0:	4b23      	ldr	r3, [pc, #140]	; (8008f60 <FT5336_Probe+0xa8>)
 8008ed2:	613b      	str	r3, [r7, #16]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 8008ed4:	4b23      	ldr	r3, [pc, #140]	; (8008f64 <FT5336_Probe+0xac>)
 8008ed6:	61fb      	str	r3, [r7, #28]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 8008ed8:	4b23      	ldr	r3, [pc, #140]	; (8008f68 <FT5336_Probe+0xb0>)
 8008eda:	61bb      	str	r3, [r7, #24]
  IOCtx.GetTick     = BSP_GetTick;
 8008edc:	4b23      	ldr	r3, [pc, #140]	; (8008f6c <FT5336_Probe+0xb4>)
 8008ede:	623b      	str	r3, [r7, #32]

  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 8008ee0:	f107 030c 	add.w	r3, r7, #12
 8008ee4:	4619      	mov	r1, r3
 8008ee6:	4822      	ldr	r0, [pc, #136]	; (8008f70 <FT5336_Probe+0xb8>)
 8008ee8:	f7fd fb58 	bl	800659c <FT5336_RegisterBusIO>
 8008eec:	4603      	mov	r3, r0
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d003      	beq.n	8008efa <FT5336_Probe+0x42>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 8008ef2:	f06f 0307 	mvn.w	r3, #7
 8008ef6:	627b      	str	r3, [r7, #36]	; 0x24
 8008ef8:	e02a      	b.n	8008f50 <FT5336_Probe+0x98>
  }
  else if(FT5336_ReadID(&FT5336Obj, &ft5336_id) != FT5336_OK)
 8008efa:	f107 0308 	add.w	r3, r7, #8
 8008efe:	4619      	mov	r1, r3
 8008f00:	481b      	ldr	r0, [pc, #108]	; (8008f70 <FT5336_Probe+0xb8>)
 8008f02:	f7fd fc45 	bl	8006790 <FT5336_ReadID>
 8008f06:	4603      	mov	r3, r0
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d003      	beq.n	8008f14 <FT5336_Probe+0x5c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8008f0c:	f06f 0304 	mvn.w	r3, #4
 8008f10:	627b      	str	r3, [r7, #36]	; 0x24
 8008f12:	e01d      	b.n	8008f50 <FT5336_Probe+0x98>
  }
  else if(ft5336_id != FT5336_ID)
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	2b51      	cmp	r3, #81	; 0x51
 8008f18:	d003      	beq.n	8008f22 <FT5336_Probe+0x6a>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008f1a:	f06f 0306 	mvn.w	r3, #6
 8008f1e:	627b      	str	r3, [r7, #36]	; 0x24
 8008f20:	e016      	b.n	8008f50 <FT5336_Probe+0x98>
  }
  else
  {
    Ts_CompObj[Instance] = &FT5336Obj;
 8008f22:	4a14      	ldr	r2, [pc, #80]	; (8008f74 <FT5336_Probe+0xbc>)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	4912      	ldr	r1, [pc, #72]	; (8008f70 <FT5336_Probe+0xb8>)
 8008f28:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
 8008f2c:	4b12      	ldr	r3, [pc, #72]	; (8008f78 <FT5336_Probe+0xc0>)
 8008f2e:	4a13      	ldr	r2, [pc, #76]	; (8008f7c <FT5336_Probe+0xc4>)
 8008f30:	601a      	str	r2, [r3, #0]

    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
 8008f32:	4b11      	ldr	r3, [pc, #68]	; (8008f78 <FT5336_Probe+0xc0>)
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	490e      	ldr	r1, [pc, #56]	; (8008f74 <FT5336_Probe+0xbc>)
 8008f3a:	687a      	ldr	r2, [r7, #4]
 8008f3c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008f40:	4610      	mov	r0, r2
 8008f42:	4798      	blx	r3
 8008f44:	4603      	mov	r3, r0
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d002      	beq.n	8008f50 <FT5336_Probe+0x98>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008f4a:	f06f 0304 	mvn.w	r3, #4
 8008f4e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  return ret;
 8008f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008f52:	4618      	mov	r0, r3
 8008f54:	3728      	adds	r7, #40	; 0x28
 8008f56:	46bd      	mov	sp, r7
 8008f58:	bd80      	pop	{r7, pc}
 8008f5a:	bf00      	nop
 8008f5c:	0800759d 	.word	0x0800759d
 8008f60:	08007611 	.word	0x08007611
 8008f64:	08007739 	.word	0x08007739
 8008f68:	080076dd 	.word	0x080076dd
 8008f6c:	08007795 	.word	0x08007795
 8008f70:	24002630 	.word	0x24002630
 8008f74:	2400260c 	.word	0x2400260c
 8008f78:	24002608 	.word	0x24002608
 8008f7c:	24000010 	.word	0x24000010

08008f80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008f80:	b480      	push	{r7}
 8008f82:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8008f84:	4b32      	ldr	r3, [pc, #200]	; (8009050 <SystemInit+0xd0>)
 8008f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f8a:	4a31      	ldr	r2, [pc, #196]	; (8009050 <SystemInit+0xd0>)
 8008f8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008f90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8008f94:	4b2f      	ldr	r3, [pc, #188]	; (8009054 <SystemInit+0xd4>)
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f003 030f 	and.w	r3, r3, #15
 8008f9c:	2b02      	cmp	r3, #2
 8008f9e:	d807      	bhi.n	8008fb0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8008fa0:	4b2c      	ldr	r3, [pc, #176]	; (8009054 <SystemInit+0xd4>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f023 030f 	bic.w	r3, r3, #15
 8008fa8:	4a2a      	ldr	r2, [pc, #168]	; (8009054 <SystemInit+0xd4>)
 8008faa:	f043 0303 	orr.w	r3, r3, #3
 8008fae:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8008fb0:	4b29      	ldr	r3, [pc, #164]	; (8009058 <SystemInit+0xd8>)
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	4a28      	ldr	r2, [pc, #160]	; (8009058 <SystemInit+0xd8>)
 8008fb6:	f043 0301 	orr.w	r3, r3, #1
 8008fba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8008fbc:	4b26      	ldr	r3, [pc, #152]	; (8009058 <SystemInit+0xd8>)
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8008fc2:	4b25      	ldr	r3, [pc, #148]	; (8009058 <SystemInit+0xd8>)
 8008fc4:	681a      	ldr	r2, [r3, #0]
 8008fc6:	4924      	ldr	r1, [pc, #144]	; (8009058 <SystemInit+0xd8>)
 8008fc8:	4b24      	ldr	r3, [pc, #144]	; (800905c <SystemInit+0xdc>)
 8008fca:	4013      	ands	r3, r2
 8008fcc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8008fce:	4b21      	ldr	r3, [pc, #132]	; (8009054 <SystemInit+0xd4>)
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f003 030c 	and.w	r3, r3, #12
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d007      	beq.n	8008fea <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8008fda:	4b1e      	ldr	r3, [pc, #120]	; (8009054 <SystemInit+0xd4>)
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f023 030f 	bic.w	r3, r3, #15
 8008fe2:	4a1c      	ldr	r2, [pc, #112]	; (8009054 <SystemInit+0xd4>)
 8008fe4:	f043 0303 	orr.w	r3, r3, #3
 8008fe8:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8008fea:	4b1b      	ldr	r3, [pc, #108]	; (8009058 <SystemInit+0xd8>)
 8008fec:	2200      	movs	r2, #0
 8008fee:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8008ff0:	4b19      	ldr	r3, [pc, #100]	; (8009058 <SystemInit+0xd8>)
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8008ff6:	4b18      	ldr	r3, [pc, #96]	; (8009058 <SystemInit+0xd8>)
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8008ffc:	4b16      	ldr	r3, [pc, #88]	; (8009058 <SystemInit+0xd8>)
 8008ffe:	4a18      	ldr	r2, [pc, #96]	; (8009060 <SystemInit+0xe0>)
 8009000:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8009002:	4b15      	ldr	r3, [pc, #84]	; (8009058 <SystemInit+0xd8>)
 8009004:	4a17      	ldr	r2, [pc, #92]	; (8009064 <SystemInit+0xe4>)
 8009006:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8009008:	4b13      	ldr	r3, [pc, #76]	; (8009058 <SystemInit+0xd8>)
 800900a:	4a17      	ldr	r2, [pc, #92]	; (8009068 <SystemInit+0xe8>)
 800900c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800900e:	4b12      	ldr	r3, [pc, #72]	; (8009058 <SystemInit+0xd8>)
 8009010:	2200      	movs	r2, #0
 8009012:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8009014:	4b10      	ldr	r3, [pc, #64]	; (8009058 <SystemInit+0xd8>)
 8009016:	4a14      	ldr	r2, [pc, #80]	; (8009068 <SystemInit+0xe8>)
 8009018:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800901a:	4b0f      	ldr	r3, [pc, #60]	; (8009058 <SystemInit+0xd8>)
 800901c:	2200      	movs	r2, #0
 800901e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8009020:	4b0d      	ldr	r3, [pc, #52]	; (8009058 <SystemInit+0xd8>)
 8009022:	4a11      	ldr	r2, [pc, #68]	; (8009068 <SystemInit+0xe8>)
 8009024:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8009026:	4b0c      	ldr	r3, [pc, #48]	; (8009058 <SystemInit+0xd8>)
 8009028:	2200      	movs	r2, #0
 800902a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800902c:	4b0a      	ldr	r3, [pc, #40]	; (8009058 <SystemInit+0xd8>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	4a09      	ldr	r2, [pc, #36]	; (8009058 <SystemInit+0xd8>)
 8009032:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009036:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8009038:	4b07      	ldr	r3, [pc, #28]	; (8009058 <SystemInit+0xd8>)
 800903a:	2200      	movs	r2, #0
 800903c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800903e:	4b0b      	ldr	r3, [pc, #44]	; (800906c <SystemInit+0xec>)
 8009040:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8009044:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8009046:	bf00      	nop
 8009048:	46bd      	mov	sp, r7
 800904a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904e:	4770      	bx	lr
 8009050:	e000ed00 	.word	0xe000ed00
 8009054:	52002000 	.word	0x52002000
 8009058:	58024400 	.word	0x58024400
 800905c:	eaf6ed7f 	.word	0xeaf6ed7f
 8009060:	02020200 	.word	0x02020200
 8009064:	01ff0000 	.word	0x01ff0000
 8009068:	01010280 	.word	0x01010280
 800906c:	52004000 	.word	0x52004000

08009070 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b082      	sub	sp, #8
 8009074:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009076:	2003      	movs	r0, #3
 8009078:	f000 f94b 	bl	8009312 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800907c:	f004 f84e 	bl	800d11c <HAL_RCC_GetSysClockFreq>
 8009080:	4602      	mov	r2, r0
 8009082:	4b15      	ldr	r3, [pc, #84]	; (80090d8 <HAL_Init+0x68>)
 8009084:	699b      	ldr	r3, [r3, #24]
 8009086:	0a1b      	lsrs	r3, r3, #8
 8009088:	f003 030f 	and.w	r3, r3, #15
 800908c:	4913      	ldr	r1, [pc, #76]	; (80090dc <HAL_Init+0x6c>)
 800908e:	5ccb      	ldrb	r3, [r1, r3]
 8009090:	f003 031f 	and.w	r3, r3, #31
 8009094:	fa22 f303 	lsr.w	r3, r2, r3
 8009098:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800909a:	4b0f      	ldr	r3, [pc, #60]	; (80090d8 <HAL_Init+0x68>)
 800909c:	699b      	ldr	r3, [r3, #24]
 800909e:	f003 030f 	and.w	r3, r3, #15
 80090a2:	4a0e      	ldr	r2, [pc, #56]	; (80090dc <HAL_Init+0x6c>)
 80090a4:	5cd3      	ldrb	r3, [r2, r3]
 80090a6:	f003 031f 	and.w	r3, r3, #31
 80090aa:	687a      	ldr	r2, [r7, #4]
 80090ac:	fa22 f303 	lsr.w	r3, r2, r3
 80090b0:	4a0b      	ldr	r2, [pc, #44]	; (80090e0 <HAL_Init+0x70>)
 80090b2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80090b4:	4a0b      	ldr	r2, [pc, #44]	; (80090e4 <HAL_Init+0x74>)
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80090ba:	200f      	movs	r0, #15
 80090bc:	f7f8 fde0 	bl	8001c80 <HAL_InitTick>
 80090c0:	4603      	mov	r3, r0
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d001      	beq.n	80090ca <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80090c6:	2301      	movs	r3, #1
 80090c8:	e002      	b.n	80090d0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80090ca:	f7f8 fac5 	bl	8001658 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80090ce:	2300      	movs	r3, #0
}
 80090d0:	4618      	mov	r0, r3
 80090d2:	3708      	adds	r7, #8
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}
 80090d8:	58024400 	.word	0x58024400
 80090dc:	0802b924 	.word	0x0802b924
 80090e0:	24000044 	.word	0x24000044
 80090e4:	24000040 	.word	0x24000040

080090e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80090e8:	b480      	push	{r7}
 80090ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80090ec:	4b06      	ldr	r3, [pc, #24]	; (8009108 <HAL_IncTick+0x20>)
 80090ee:	781b      	ldrb	r3, [r3, #0]
 80090f0:	461a      	mov	r2, r3
 80090f2:	4b06      	ldr	r3, [pc, #24]	; (800910c <HAL_IncTick+0x24>)
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	4413      	add	r3, r2
 80090f8:	4a04      	ldr	r2, [pc, #16]	; (800910c <HAL_IncTick+0x24>)
 80090fa:	6013      	str	r3, [r2, #0]
}
 80090fc:	bf00      	nop
 80090fe:	46bd      	mov	sp, r7
 8009100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009104:	4770      	bx	lr
 8009106:	bf00      	nop
 8009108:	2400004c 	.word	0x2400004c
 800910c:	24002658 	.word	0x24002658

08009110 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009110:	b480      	push	{r7}
 8009112:	af00      	add	r7, sp, #0
  return uwTick;
 8009114:	4b03      	ldr	r3, [pc, #12]	; (8009124 <HAL_GetTick+0x14>)
 8009116:	681b      	ldr	r3, [r3, #0]
}
 8009118:	4618      	mov	r0, r3
 800911a:	46bd      	mov	sp, r7
 800911c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009120:	4770      	bx	lr
 8009122:	bf00      	nop
 8009124:	24002658 	.word	0x24002658

08009128 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b084      	sub	sp, #16
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009130:	f7ff ffee 	bl	8009110 <HAL_GetTick>
 8009134:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009140:	d005      	beq.n	800914e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009142:	4b0a      	ldr	r3, [pc, #40]	; (800916c <HAL_Delay+0x44>)
 8009144:	781b      	ldrb	r3, [r3, #0]
 8009146:	461a      	mov	r2, r3
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	4413      	add	r3, r2
 800914c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800914e:	bf00      	nop
 8009150:	f7ff ffde 	bl	8009110 <HAL_GetTick>
 8009154:	4602      	mov	r2, r0
 8009156:	68bb      	ldr	r3, [r7, #8]
 8009158:	1ad3      	subs	r3, r2, r3
 800915a:	68fa      	ldr	r2, [r7, #12]
 800915c:	429a      	cmp	r2, r3
 800915e:	d8f7      	bhi.n	8009150 <HAL_Delay+0x28>
  {
  }
}
 8009160:	bf00      	nop
 8009162:	bf00      	nop
 8009164:	3710      	adds	r7, #16
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}
 800916a:	bf00      	nop
 800916c:	2400004c 	.word	0x2400004c

08009170 <__NVIC_SetPriorityGrouping>:
{
 8009170:	b480      	push	{r7}
 8009172:	b085      	sub	sp, #20
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f003 0307 	and.w	r3, r3, #7
 800917e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009180:	4b0b      	ldr	r3, [pc, #44]	; (80091b0 <__NVIC_SetPriorityGrouping+0x40>)
 8009182:	68db      	ldr	r3, [r3, #12]
 8009184:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009186:	68ba      	ldr	r2, [r7, #8]
 8009188:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800918c:	4013      	ands	r3, r2
 800918e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8009198:	4b06      	ldr	r3, [pc, #24]	; (80091b4 <__NVIC_SetPriorityGrouping+0x44>)
 800919a:	4313      	orrs	r3, r2
 800919c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800919e:	4a04      	ldr	r2, [pc, #16]	; (80091b0 <__NVIC_SetPriorityGrouping+0x40>)
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	60d3      	str	r3, [r2, #12]
}
 80091a4:	bf00      	nop
 80091a6:	3714      	adds	r7, #20
 80091a8:	46bd      	mov	sp, r7
 80091aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ae:	4770      	bx	lr
 80091b0:	e000ed00 	.word	0xe000ed00
 80091b4:	05fa0000 	.word	0x05fa0000

080091b8 <__NVIC_GetPriorityGrouping>:
{
 80091b8:	b480      	push	{r7}
 80091ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80091bc:	4b04      	ldr	r3, [pc, #16]	; (80091d0 <__NVIC_GetPriorityGrouping+0x18>)
 80091be:	68db      	ldr	r3, [r3, #12]
 80091c0:	0a1b      	lsrs	r3, r3, #8
 80091c2:	f003 0307 	and.w	r3, r3, #7
}
 80091c6:	4618      	mov	r0, r3
 80091c8:	46bd      	mov	sp, r7
 80091ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ce:	4770      	bx	lr
 80091d0:	e000ed00 	.word	0xe000ed00

080091d4 <__NVIC_EnableIRQ>:
{
 80091d4:	b480      	push	{r7}
 80091d6:	b083      	sub	sp, #12
 80091d8:	af00      	add	r7, sp, #0
 80091da:	4603      	mov	r3, r0
 80091dc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80091de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	db0b      	blt.n	80091fe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80091e6:	88fb      	ldrh	r3, [r7, #6]
 80091e8:	f003 021f 	and.w	r2, r3, #31
 80091ec:	4907      	ldr	r1, [pc, #28]	; (800920c <__NVIC_EnableIRQ+0x38>)
 80091ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80091f2:	095b      	lsrs	r3, r3, #5
 80091f4:	2001      	movs	r0, #1
 80091f6:	fa00 f202 	lsl.w	r2, r0, r2
 80091fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80091fe:	bf00      	nop
 8009200:	370c      	adds	r7, #12
 8009202:	46bd      	mov	sp, r7
 8009204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009208:	4770      	bx	lr
 800920a:	bf00      	nop
 800920c:	e000e100 	.word	0xe000e100

08009210 <__NVIC_DisableIRQ>:
{
 8009210:	b480      	push	{r7}
 8009212:	b083      	sub	sp, #12
 8009214:	af00      	add	r7, sp, #0
 8009216:	4603      	mov	r3, r0
 8009218:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800921a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800921e:	2b00      	cmp	r3, #0
 8009220:	db12      	blt.n	8009248 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009222:	88fb      	ldrh	r3, [r7, #6]
 8009224:	f003 021f 	and.w	r2, r3, #31
 8009228:	490a      	ldr	r1, [pc, #40]	; (8009254 <__NVIC_DisableIRQ+0x44>)
 800922a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800922e:	095b      	lsrs	r3, r3, #5
 8009230:	2001      	movs	r0, #1
 8009232:	fa00 f202 	lsl.w	r2, r0, r2
 8009236:	3320      	adds	r3, #32
 8009238:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800923c:	f3bf 8f4f 	dsb	sy
}
 8009240:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009242:	f3bf 8f6f 	isb	sy
}
 8009246:	bf00      	nop
}
 8009248:	bf00      	nop
 800924a:	370c      	adds	r7, #12
 800924c:	46bd      	mov	sp, r7
 800924e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009252:	4770      	bx	lr
 8009254:	e000e100 	.word	0xe000e100

08009258 <__NVIC_SetPriority>:
{
 8009258:	b480      	push	{r7}
 800925a:	b083      	sub	sp, #12
 800925c:	af00      	add	r7, sp, #0
 800925e:	4603      	mov	r3, r0
 8009260:	6039      	str	r1, [r7, #0]
 8009262:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8009264:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009268:	2b00      	cmp	r3, #0
 800926a:	db0a      	blt.n	8009282 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	b2da      	uxtb	r2, r3
 8009270:	490c      	ldr	r1, [pc, #48]	; (80092a4 <__NVIC_SetPriority+0x4c>)
 8009272:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009276:	0112      	lsls	r2, r2, #4
 8009278:	b2d2      	uxtb	r2, r2
 800927a:	440b      	add	r3, r1
 800927c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009280:	e00a      	b.n	8009298 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	b2da      	uxtb	r2, r3
 8009286:	4908      	ldr	r1, [pc, #32]	; (80092a8 <__NVIC_SetPriority+0x50>)
 8009288:	88fb      	ldrh	r3, [r7, #6]
 800928a:	f003 030f 	and.w	r3, r3, #15
 800928e:	3b04      	subs	r3, #4
 8009290:	0112      	lsls	r2, r2, #4
 8009292:	b2d2      	uxtb	r2, r2
 8009294:	440b      	add	r3, r1
 8009296:	761a      	strb	r2, [r3, #24]
}
 8009298:	bf00      	nop
 800929a:	370c      	adds	r7, #12
 800929c:	46bd      	mov	sp, r7
 800929e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a2:	4770      	bx	lr
 80092a4:	e000e100 	.word	0xe000e100
 80092a8:	e000ed00 	.word	0xe000ed00

080092ac <NVIC_EncodePriority>:
{
 80092ac:	b480      	push	{r7}
 80092ae:	b089      	sub	sp, #36	; 0x24
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	60f8      	str	r0, [r7, #12]
 80092b4:	60b9      	str	r1, [r7, #8]
 80092b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	f003 0307 	and.w	r3, r3, #7
 80092be:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80092c0:	69fb      	ldr	r3, [r7, #28]
 80092c2:	f1c3 0307 	rsb	r3, r3, #7
 80092c6:	2b04      	cmp	r3, #4
 80092c8:	bf28      	it	cs
 80092ca:	2304      	movcs	r3, #4
 80092cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80092ce:	69fb      	ldr	r3, [r7, #28]
 80092d0:	3304      	adds	r3, #4
 80092d2:	2b06      	cmp	r3, #6
 80092d4:	d902      	bls.n	80092dc <NVIC_EncodePriority+0x30>
 80092d6:	69fb      	ldr	r3, [r7, #28]
 80092d8:	3b03      	subs	r3, #3
 80092da:	e000      	b.n	80092de <NVIC_EncodePriority+0x32>
 80092dc:	2300      	movs	r3, #0
 80092de:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80092e0:	f04f 32ff 	mov.w	r2, #4294967295
 80092e4:	69bb      	ldr	r3, [r7, #24]
 80092e6:	fa02 f303 	lsl.w	r3, r2, r3
 80092ea:	43da      	mvns	r2, r3
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	401a      	ands	r2, r3
 80092f0:	697b      	ldr	r3, [r7, #20]
 80092f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80092f4:	f04f 31ff 	mov.w	r1, #4294967295
 80092f8:	697b      	ldr	r3, [r7, #20]
 80092fa:	fa01 f303 	lsl.w	r3, r1, r3
 80092fe:	43d9      	mvns	r1, r3
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009304:	4313      	orrs	r3, r2
}
 8009306:	4618      	mov	r0, r3
 8009308:	3724      	adds	r7, #36	; 0x24
 800930a:	46bd      	mov	sp, r7
 800930c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009310:	4770      	bx	lr

08009312 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009312:	b580      	push	{r7, lr}
 8009314:	b082      	sub	sp, #8
 8009316:	af00      	add	r7, sp, #0
 8009318:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f7ff ff28 	bl	8009170 <__NVIC_SetPriorityGrouping>
}
 8009320:	bf00      	nop
 8009322:	3708      	adds	r7, #8
 8009324:	46bd      	mov	sp, r7
 8009326:	bd80      	pop	{r7, pc}

08009328 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b086      	sub	sp, #24
 800932c:	af00      	add	r7, sp, #0
 800932e:	4603      	mov	r3, r0
 8009330:	60b9      	str	r1, [r7, #8]
 8009332:	607a      	str	r2, [r7, #4]
 8009334:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8009336:	f7ff ff3f 	bl	80091b8 <__NVIC_GetPriorityGrouping>
 800933a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800933c:	687a      	ldr	r2, [r7, #4]
 800933e:	68b9      	ldr	r1, [r7, #8]
 8009340:	6978      	ldr	r0, [r7, #20]
 8009342:	f7ff ffb3 	bl	80092ac <NVIC_EncodePriority>
 8009346:	4602      	mov	r2, r0
 8009348:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800934c:	4611      	mov	r1, r2
 800934e:	4618      	mov	r0, r3
 8009350:	f7ff ff82 	bl	8009258 <__NVIC_SetPriority>
}
 8009354:	bf00      	nop
 8009356:	3718      	adds	r7, #24
 8009358:	46bd      	mov	sp, r7
 800935a:	bd80      	pop	{r7, pc}

0800935c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b082      	sub	sp, #8
 8009360:	af00      	add	r7, sp, #0
 8009362:	4603      	mov	r3, r0
 8009364:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009366:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800936a:	4618      	mov	r0, r3
 800936c:	f7ff ff32 	bl	80091d4 <__NVIC_EnableIRQ>
}
 8009370:	bf00      	nop
 8009372:	3708      	adds	r7, #8
 8009374:	46bd      	mov	sp, r7
 8009376:	bd80      	pop	{r7, pc}

08009378 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b082      	sub	sp, #8
 800937c:	af00      	add	r7, sp, #0
 800937e:	4603      	mov	r3, r0
 8009380:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8009382:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009386:	4618      	mov	r0, r3
 8009388:	f7ff ff42 	bl	8009210 <__NVIC_DisableIRQ>
}
 800938c:	bf00      	nop
 800938e:	3708      	adds	r7, #8
 8009390:	46bd      	mov	sp, r7
 8009392:	bd80      	pop	{r7, pc}

08009394 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8009394:	b480      	push	{r7}
 8009396:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8009398:	f3bf 8f5f 	dmb	sy
}
 800939c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800939e:	4b07      	ldr	r3, [pc, #28]	; (80093bc <HAL_MPU_Disable+0x28>)
 80093a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093a2:	4a06      	ldr	r2, [pc, #24]	; (80093bc <HAL_MPU_Disable+0x28>)
 80093a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80093a8:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80093aa:	4b05      	ldr	r3, [pc, #20]	; (80093c0 <HAL_MPU_Disable+0x2c>)
 80093ac:	2200      	movs	r2, #0
 80093ae:	605a      	str	r2, [r3, #4]
}
 80093b0:	bf00      	nop
 80093b2:	46bd      	mov	sp, r7
 80093b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b8:	4770      	bx	lr
 80093ba:	bf00      	nop
 80093bc:	e000ed00 	.word	0xe000ed00
 80093c0:	e000ed90 	.word	0xe000ed90

080093c4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80093c4:	b480      	push	{r7}
 80093c6:	b083      	sub	sp, #12
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80093cc:	4a0b      	ldr	r2, [pc, #44]	; (80093fc <HAL_MPU_Enable+0x38>)
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	f043 0301 	orr.w	r3, r3, #1
 80093d4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80093d6:	4b0a      	ldr	r3, [pc, #40]	; (8009400 <HAL_MPU_Enable+0x3c>)
 80093d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093da:	4a09      	ldr	r2, [pc, #36]	; (8009400 <HAL_MPU_Enable+0x3c>)
 80093dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80093e0:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80093e2:	f3bf 8f4f 	dsb	sy
}
 80093e6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80093e8:	f3bf 8f6f 	isb	sy
}
 80093ec:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80093ee:	bf00      	nop
 80093f0:	370c      	adds	r7, #12
 80093f2:	46bd      	mov	sp, r7
 80093f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f8:	4770      	bx	lr
 80093fa:	bf00      	nop
 80093fc:	e000ed90 	.word	0xe000ed90
 8009400:	e000ed00 	.word	0xe000ed00

08009404 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8009404:	b480      	push	{r7}
 8009406:	b083      	sub	sp, #12
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	785a      	ldrb	r2, [r3, #1]
 8009410:	4b1d      	ldr	r3, [pc, #116]	; (8009488 <HAL_MPU_ConfigRegion+0x84>)
 8009412:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	781b      	ldrb	r3, [r3, #0]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d029      	beq.n	8009470 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 800941c:	4a1a      	ldr	r2, [pc, #104]	; (8009488 <HAL_MPU_ConfigRegion+0x84>)
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	685b      	ldr	r3, [r3, #4]
 8009422:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	7b1b      	ldrb	r3, [r3, #12]
 8009428:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	7adb      	ldrb	r3, [r3, #11]
 800942e:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8009430:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	7a9b      	ldrb	r3, [r3, #10]
 8009436:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8009438:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	7b5b      	ldrb	r3, [r3, #13]
 800943e:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8009440:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	7b9b      	ldrb	r3, [r3, #14]
 8009446:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8009448:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	7bdb      	ldrb	r3, [r3, #15]
 800944e:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8009450:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	7a5b      	ldrb	r3, [r3, #9]
 8009456:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8009458:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	7a1b      	ldrb	r3, [r3, #8]
 800945e:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8009460:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8009462:	687a      	ldr	r2, [r7, #4]
 8009464:	7812      	ldrb	r2, [r2, #0]
 8009466:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8009468:	4a07      	ldr	r2, [pc, #28]	; (8009488 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800946a:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800946c:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800946e:	e005      	b.n	800947c <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8009470:	4b05      	ldr	r3, [pc, #20]	; (8009488 <HAL_MPU_ConfigRegion+0x84>)
 8009472:	2200      	movs	r2, #0
 8009474:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8009476:	4b04      	ldr	r3, [pc, #16]	; (8009488 <HAL_MPU_ConfigRegion+0x84>)
 8009478:	2200      	movs	r2, #0
 800947a:	611a      	str	r2, [r3, #16]
}
 800947c:	bf00      	nop
 800947e:	370c      	adds	r7, #12
 8009480:	46bd      	mov	sp, r7
 8009482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009486:	4770      	bx	lr
 8009488:	e000ed90 	.word	0xe000ed90

0800948c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b082      	sub	sp, #8
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d101      	bne.n	800949e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800949a:	2301      	movs	r3, #1
 800949c:	e054      	b.n	8009548 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	7f5b      	ldrb	r3, [r3, #29]
 80094a2:	b2db      	uxtb	r3, r3
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d105      	bne.n	80094b4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2200      	movs	r2, #0
 80094ac:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80094ae:	6878      	ldr	r0, [r7, #4]
 80094b0:	f7f8 f8f0 	bl	8001694 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2202      	movs	r2, #2
 80094b8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	791b      	ldrb	r3, [r3, #4]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d10c      	bne.n	80094dc <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	4a22      	ldr	r2, [pc, #136]	; (8009550 <HAL_CRC_Init+0xc4>)
 80094c8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	689a      	ldr	r2, [r3, #8]
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	f022 0218 	bic.w	r2, r2, #24
 80094d8:	609a      	str	r2, [r3, #8]
 80094da:	e00c      	b.n	80094f6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	6899      	ldr	r1, [r3, #8]
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	68db      	ldr	r3, [r3, #12]
 80094e4:	461a      	mov	r2, r3
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f000 f834 	bl	8009554 <HAL_CRCEx_Polynomial_Set>
 80094ec:	4603      	mov	r3, r0
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d001      	beq.n	80094f6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80094f2:	2301      	movs	r3, #1
 80094f4:	e028      	b.n	8009548 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	795b      	ldrb	r3, [r3, #5]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d105      	bne.n	800950a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f04f 32ff 	mov.w	r2, #4294967295
 8009506:	611a      	str	r2, [r3, #16]
 8009508:	e004      	b.n	8009514 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	687a      	ldr	r2, [r7, #4]
 8009510:	6912      	ldr	r2, [r2, #16]
 8009512:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	689b      	ldr	r3, [r3, #8]
 800951a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	695a      	ldr	r2, [r3, #20]
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	430a      	orrs	r2, r1
 8009528:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	689b      	ldr	r3, [r3, #8]
 8009530:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	699a      	ldr	r2, [r3, #24]
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	430a      	orrs	r2, r1
 800953e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2201      	movs	r2, #1
 8009544:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8009546:	2300      	movs	r3, #0
}
 8009548:	4618      	mov	r0, r3
 800954a:	3708      	adds	r7, #8
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}
 8009550:	04c11db7 	.word	0x04c11db7

08009554 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8009554:	b480      	push	{r7}
 8009556:	b087      	sub	sp, #28
 8009558:	af00      	add	r7, sp, #0
 800955a:	60f8      	str	r0, [r7, #12]
 800955c:	60b9      	str	r1, [r7, #8]
 800955e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009560:	2300      	movs	r3, #0
 8009562:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8009564:	231f      	movs	r3, #31
 8009566:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */ 
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8009568:	68bb      	ldr	r3, [r7, #8]
 800956a:	f003 0301 	and.w	r3, r3, #1
 800956e:	2b00      	cmp	r3, #0
 8009570:	d102      	bne.n	8009578 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8009572:	2301      	movs	r3, #1
 8009574:	75fb      	strb	r3, [r7, #23]
 8009576:	e063      	b.n	8009640 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8009578:	bf00      	nop
 800957a:	693b      	ldr	r3, [r7, #16]
 800957c:	1e5a      	subs	r2, r3, #1
 800957e:	613a      	str	r2, [r7, #16]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d009      	beq.n	8009598 <HAL_CRCEx_Polynomial_Set+0x44>
 8009584:	693b      	ldr	r3, [r7, #16]
 8009586:	f003 031f 	and.w	r3, r3, #31
 800958a:	68ba      	ldr	r2, [r7, #8]
 800958c:	fa22 f303 	lsr.w	r3, r2, r3
 8009590:	f003 0301 	and.w	r3, r3, #1
 8009594:	2b00      	cmp	r3, #0
 8009596:	d0f0      	beq.n	800957a <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2b18      	cmp	r3, #24
 800959c:	d846      	bhi.n	800962c <HAL_CRCEx_Polynomial_Set+0xd8>
 800959e:	a201      	add	r2, pc, #4	; (adr r2, 80095a4 <HAL_CRCEx_Polynomial_Set+0x50>)
 80095a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095a4:	08009633 	.word	0x08009633
 80095a8:	0800962d 	.word	0x0800962d
 80095ac:	0800962d 	.word	0x0800962d
 80095b0:	0800962d 	.word	0x0800962d
 80095b4:	0800962d 	.word	0x0800962d
 80095b8:	0800962d 	.word	0x0800962d
 80095bc:	0800962d 	.word	0x0800962d
 80095c0:	0800962d 	.word	0x0800962d
 80095c4:	08009621 	.word	0x08009621
 80095c8:	0800962d 	.word	0x0800962d
 80095cc:	0800962d 	.word	0x0800962d
 80095d0:	0800962d 	.word	0x0800962d
 80095d4:	0800962d 	.word	0x0800962d
 80095d8:	0800962d 	.word	0x0800962d
 80095dc:	0800962d 	.word	0x0800962d
 80095e0:	0800962d 	.word	0x0800962d
 80095e4:	08009615 	.word	0x08009615
 80095e8:	0800962d 	.word	0x0800962d
 80095ec:	0800962d 	.word	0x0800962d
 80095f0:	0800962d 	.word	0x0800962d
 80095f4:	0800962d 	.word	0x0800962d
 80095f8:	0800962d 	.word	0x0800962d
 80095fc:	0800962d 	.word	0x0800962d
 8009600:	0800962d 	.word	0x0800962d
 8009604:	08009609 	.word	0x08009609
    {
          
      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8009608:	693b      	ldr	r3, [r7, #16]
 800960a:	2b06      	cmp	r3, #6
 800960c:	d913      	bls.n	8009636 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 800960e:	2301      	movs	r3, #1
 8009610:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8009612:	e010      	b.n	8009636 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8009614:	693b      	ldr	r3, [r7, #16]
 8009616:	2b07      	cmp	r3, #7
 8009618:	d90f      	bls.n	800963a <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 800961a:	2301      	movs	r3, #1
 800961c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800961e:	e00c      	b.n	800963a <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8009620:	693b      	ldr	r3, [r7, #16]
 8009622:	2b0f      	cmp	r3, #15
 8009624:	d90b      	bls.n	800963e <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8009626:	2301      	movs	r3, #1
 8009628:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800962a:	e008      	b.n	800963e <HAL_CRCEx_Polynomial_Set+0xea>
 
      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 800962c:	2301      	movs	r3, #1
 800962e:	75fb      	strb	r3, [r7, #23]
        break;
 8009630:	e006      	b.n	8009640 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8009632:	bf00      	nop
 8009634:	e004      	b.n	8009640 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8009636:	bf00      	nop
 8009638:	e002      	b.n	8009640 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800963a:	bf00      	nop
 800963c:	e000      	b.n	8009640 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800963e:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8009640:	7dfb      	ldrb	r3, [r7, #23]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d10d      	bne.n	8009662 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	68ba      	ldr	r2, [r7, #8]
 800964c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	689b      	ldr	r3, [r3, #8]
 8009654:	f023 0118 	bic.w	r1, r3, #24
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	687a      	ldr	r2, [r7, #4]
 800965e:	430a      	orrs	r2, r1
 8009660:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8009662:	7dfb      	ldrb	r3, [r7, #23]
}
 8009664:	4618      	mov	r0, r3
 8009666:	371c      	adds	r7, #28
 8009668:	46bd      	mov	sp, r7
 800966a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966e:	4770      	bx	lr

08009670 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b082      	sub	sp, #8
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d101      	bne.n	8009682 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800967e:	2301      	movs	r3, #1
 8009680:	e04f      	b.n	8009722 <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8009688:	b2db      	uxtb	r3, r3
 800968a:	2b00      	cmp	r3, #0
 800968c:	d106      	bne.n	800969c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2200      	movs	r2, #0
 8009692:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	f7f8 f81e 	bl	80016d8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2202      	movs	r2, #2
 80096a0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	681a      	ldr	r2, [r3, #0]
 80096aa:	4b20      	ldr	r3, [pc, #128]	; (800972c <HAL_DMA2D_Init+0xbc>)
 80096ac:	4013      	ands	r3, r2
 80096ae:	687a      	ldr	r2, [r7, #4]
 80096b0:	6851      	ldr	r1, [r2, #4]
 80096b2:	687a      	ldr	r2, [r7, #4]
 80096b4:	69d2      	ldr	r2, [r2, #28]
 80096b6:	4311      	orrs	r1, r2
 80096b8:	687a      	ldr	r2, [r7, #4]
 80096ba:	6812      	ldr	r2, [r2, #0]
 80096bc:	430b      	orrs	r3, r1
 80096be:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80096c6:	4b1a      	ldr	r3, [pc, #104]	; (8009730 <HAL_DMA2D_Init+0xc0>)
 80096c8:	4013      	ands	r3, r2
 80096ca:	687a      	ldr	r2, [r7, #4]
 80096cc:	6891      	ldr	r1, [r2, #8]
 80096ce:	687a      	ldr	r2, [r7, #4]
 80096d0:	6992      	ldr	r2, [r2, #24]
 80096d2:	4311      	orrs	r1, r2
 80096d4:	687a      	ldr	r2, [r7, #4]
 80096d6:	6812      	ldr	r2, [r2, #0]
 80096d8:	430b      	orrs	r3, r1
 80096da:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80096e2:	4b14      	ldr	r3, [pc, #80]	; (8009734 <HAL_DMA2D_Init+0xc4>)
 80096e4:	4013      	ands	r3, r2
 80096e6:	687a      	ldr	r2, [r7, #4]
 80096e8:	68d1      	ldr	r1, [r2, #12]
 80096ea:	687a      	ldr	r2, [r7, #4]
 80096ec:	6812      	ldr	r2, [r2, #0]
 80096ee:	430b      	orrs	r3, r1
 80096f0:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096f8:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	691b      	ldr	r3, [r3, #16]
 8009700:	051a      	lsls	r2, r3, #20
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	695b      	ldr	r3, [r3, #20]
 8009706:	055b      	lsls	r3, r3, #21
 8009708:	431a      	orrs	r2, r3
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	430a      	orrs	r2, r1
 8009710:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	2200      	movs	r2, #0
 8009716:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2201      	movs	r2, #1
 800971c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 8009720:	2300      	movs	r3, #0
}
 8009722:	4618      	mov	r0, r3
 8009724:	3708      	adds	r7, #8
 8009726:	46bd      	mov	sp, r7
 8009728:	bd80      	pop	{r7, pc}
 800972a:	bf00      	nop
 800972c:	fff8ffbf 	.word	0xfff8ffbf
 8009730:	fffffef8 	.word	0xfffffef8
 8009734:	ffff0000 	.word	0xffff0000

08009738 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b084      	sub	sp, #16
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	685b      	ldr	r3, [r3, #4]
 8009746:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	f003 0301 	and.w	r3, r3, #1
 8009756:	2b00      	cmp	r3, #0
 8009758:	d026      	beq.n	80097a8 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800975a:	68bb      	ldr	r3, [r7, #8]
 800975c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009760:	2b00      	cmp	r3, #0
 8009762:	d021      	beq.n	80097a8 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	681a      	ldr	r2, [r3, #0]
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009772:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009778:	f043 0201 	orr.w	r2, r3, #1
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	2201      	movs	r2, #1
 8009786:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2204      	movs	r2, #4
 800978c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2200      	movs	r2, #0
 8009794:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800979c:	2b00      	cmp	r3, #0
 800979e:	d003      	beq.n	80097a8 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097a4:	6878      	ldr	r0, [r7, #4]
 80097a6:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	f003 0320 	and.w	r3, r3, #32
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d026      	beq.n	8009800 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80097b2:	68bb      	ldr	r3, [r7, #8]
 80097b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d021      	beq.n	8009800 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	681a      	ldr	r2, [r3, #0]
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80097ca:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	2220      	movs	r2, #32
 80097d2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80097d8:	f043 0202 	orr.w	r2, r3, #2
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2204      	movs	r2, #4
 80097e4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2200      	movs	r2, #0
 80097ec:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d003      	beq.n	8009800 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097fc:	6878      	ldr	r0, [r7, #4]
 80097fe:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	f003 0308 	and.w	r3, r3, #8
 8009806:	2b00      	cmp	r3, #0
 8009808:	d026      	beq.n	8009858 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800980a:	68bb      	ldr	r3, [r7, #8]
 800980c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009810:	2b00      	cmp	r3, #0
 8009812:	d021      	beq.n	8009858 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	681a      	ldr	r2, [r3, #0]
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009822:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	2208      	movs	r2, #8
 800982a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009830:	f043 0204 	orr.w	r2, r3, #4
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2204      	movs	r2, #4
 800983c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2200      	movs	r2, #0
 8009844:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800984c:	2b00      	cmp	r3, #0
 800984e:	d003      	beq.n	8009858 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009854:	6878      	ldr	r0, [r7, #4]
 8009856:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	f003 0304 	and.w	r3, r3, #4
 800985e:	2b00      	cmp	r3, #0
 8009860:	d013      	beq.n	800988a <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8009862:	68bb      	ldr	r3, [r7, #8]
 8009864:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009868:	2b00      	cmp	r3, #0
 800986a:	d00e      	beq.n	800988a <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	681a      	ldr	r2, [r3, #0]
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800987a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	2204      	movs	r2, #4
 8009882:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8009884:	6878      	ldr	r0, [r7, #4]
 8009886:	f000 f853 	bl	8009930 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	f003 0302 	and.w	r3, r3, #2
 8009890:	2b00      	cmp	r3, #0
 8009892:	d024      	beq.n	80098de <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8009894:	68bb      	ldr	r3, [r7, #8]
 8009896:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800989a:	2b00      	cmp	r3, #0
 800989c:	d01f      	beq.n	80098de <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	681a      	ldr	r2, [r3, #0]
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80098ac:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	2202      	movs	r2, #2
 80098b4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2201      	movs	r2, #1
 80098c2:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2200      	movs	r2, #0
 80098ca:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferCpltCallback != NULL)
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	6a1b      	ldr	r3, [r3, #32]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d003      	beq.n	80098de <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	6a1b      	ldr	r3, [r3, #32]
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	f003 0310 	and.w	r3, r3, #16
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d01f      	beq.n	8009928 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d01a      	beq.n	8009928 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	681a      	ldr	r2, [r3, #0]
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009900:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	2210      	movs	r2, #16
 8009908:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	2201      	movs	r2, #1
 8009916:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2200      	movs	r2, #0
 800991e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8009922:	6878      	ldr	r0, [r7, #4]
 8009924:	f000 f80e 	bl	8009944 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8009928:	bf00      	nop
 800992a:	3710      	adds	r7, #16
 800992c:	46bd      	mov	sp, r7
 800992e:	bd80      	pop	{r7, pc}

08009930 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8009930:	b480      	push	{r7}
 8009932:	b083      	sub	sp, #12
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8009938:	bf00      	nop
 800993a:	370c      	adds	r7, #12
 800993c:	46bd      	mov	sp, r7
 800993e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009942:	4770      	bx	lr

08009944 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8009944:	b480      	push	{r7}
 8009946:	b083      	sub	sp, #12
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800994c:	bf00      	nop
 800994e:	370c      	adds	r7, #12
 8009950:	46bd      	mov	sp, r7
 8009952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009956:	4770      	bx	lr

08009958 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8009958:	b480      	push	{r7}
 800995a:	b087      	sub	sp, #28
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
 8009960:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	685b      	ldr	r3, [r3, #4]
 8009966:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8009974:	2b01      	cmp	r3, #1
 8009976:	d101      	bne.n	800997c <HAL_DMA2D_ConfigLayer+0x24>
 8009978:	2302      	movs	r3, #2
 800997a:	e092      	b.n	8009aa2 <HAL_DMA2D_ConfigLayer+0x14a>
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2201      	movs	r2, #1
 8009980:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2202      	movs	r2, #2
 8009988:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800998c:	683a      	ldr	r2, [r7, #0]
 800998e:	4613      	mov	r3, r2
 8009990:	00db      	lsls	r3, r3, #3
 8009992:	1a9b      	subs	r3, r3, r2
 8009994:	009b      	lsls	r3, r3, #2
 8009996:	3328      	adds	r3, #40	; 0x28
 8009998:	687a      	ldr	r2, [r7, #4]
 800999a:	4413      	add	r3, r2
 800999c:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	685a      	ldr	r2, [r3, #4]
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	689b      	ldr	r3, [r3, #8]
 80099a6:	041b      	lsls	r3, r3, #16
 80099a8:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	691b      	ldr	r3, [r3, #16]
 80099ae:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80099b0:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	695b      	ldr	r3, [r3, #20]
 80099b6:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80099b8:	4313      	orrs	r3, r2
 80099ba:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 80099bc:	4b3c      	ldr	r3, [pc, #240]	; (8009ab0 <HAL_DMA2D_ConfigLayer+0x158>)
 80099be:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	685b      	ldr	r3, [r3, #4]
 80099c4:	2b0a      	cmp	r3, #10
 80099c6:	d003      	beq.n	80099d0 <HAL_DMA2D_ConfigLayer+0x78>
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	685b      	ldr	r3, [r3, #4]
 80099cc:	2b09      	cmp	r3, #9
 80099ce:	d107      	bne.n	80099e0 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	68db      	ldr	r3, [r3, #12]
 80099d4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80099d8:	693a      	ldr	r2, [r7, #16]
 80099da:	4313      	orrs	r3, r2
 80099dc:	613b      	str	r3, [r7, #16]
 80099de:	e005      	b.n	80099ec <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	68db      	ldr	r3, [r3, #12]
 80099e4:	061b      	lsls	r3, r3, #24
 80099e6:	693a      	ldr	r2, [r7, #16]
 80099e8:	4313      	orrs	r3, r2
 80099ea:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d120      	bne.n	8009a34 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80099f8:	697b      	ldr	r3, [r7, #20]
 80099fa:	43db      	mvns	r3, r3
 80099fc:	ea02 0103 	and.w	r1, r2, r3
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	693a      	ldr	r2, [r7, #16]
 8009a06:	430a      	orrs	r2, r1
 8009a08:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	68fa      	ldr	r2, [r7, #12]
 8009a10:	6812      	ldr	r2, [r2, #0]
 8009a12:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	685b      	ldr	r3, [r3, #4]
 8009a18:	2b0a      	cmp	r3, #10
 8009a1a:	d003      	beq.n	8009a24 <HAL_DMA2D_ConfigLayer+0xcc>
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	685b      	ldr	r3, [r3, #4]
 8009a20:	2b09      	cmp	r3, #9
 8009a22:	d135      	bne.n	8009a90 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	68da      	ldr	r2, [r3, #12]
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8009a30:	629a      	str	r2, [r3, #40]	; 0x28
 8009a32:	e02d      	b.n	8009a90 <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	685b      	ldr	r3, [r3, #4]
 8009a38:	2b0b      	cmp	r3, #11
 8009a3a:	d109      	bne.n	8009a50 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	699b      	ldr	r3, [r3, #24]
 8009a40:	049b      	lsls	r3, r3, #18
 8009a42:	693a      	ldr	r2, [r7, #16]
 8009a44:	4313      	orrs	r3, r2
 8009a46:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8009a48:	697b      	ldr	r3, [r7, #20]
 8009a4a:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8009a4e:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	69da      	ldr	r2, [r3, #28]
 8009a56:	697b      	ldr	r3, [r7, #20]
 8009a58:	43db      	mvns	r3, r3
 8009a5a:	ea02 0103 	and.w	r1, r2, r3
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	693a      	ldr	r2, [r7, #16]
 8009a64:	430a      	orrs	r2, r1
 8009a66:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	68fa      	ldr	r2, [r7, #12]
 8009a6e:	6812      	ldr	r2, [r2, #0]
 8009a70:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	685b      	ldr	r3, [r3, #4]
 8009a76:	2b0a      	cmp	r3, #10
 8009a78:	d003      	beq.n	8009a82 <HAL_DMA2D_ConfigLayer+0x12a>
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	685b      	ldr	r3, [r3, #4]
 8009a7e:	2b09      	cmp	r3, #9
 8009a80:	d106      	bne.n	8009a90 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	68da      	ldr	r2, [r3, #12]
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8009a8e:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2201      	movs	r2, #1
 8009a94:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8009aa0:	2300      	movs	r3, #0
}
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	371c      	adds	r7, #28
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aac:	4770      	bx	lr
 8009aae:	bf00      	nop
 8009ab0:	ff33000f 	.word	0xff33000f

08009ab4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009ab4:	b480      	push	{r7}
 8009ab6:	b089      	sub	sp, #36	; 0x24
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
 8009abc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8009abe:	2300      	movs	r3, #0
 8009ac0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8009ac2:	4b89      	ldr	r3, [pc, #548]	; (8009ce8 <HAL_GPIO_Init+0x234>)
 8009ac4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009ac6:	e194      	b.n	8009df2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8009ac8:	683b      	ldr	r3, [r7, #0]
 8009aca:	681a      	ldr	r2, [r3, #0]
 8009acc:	2101      	movs	r1, #1
 8009ace:	69fb      	ldr	r3, [r7, #28]
 8009ad0:	fa01 f303 	lsl.w	r3, r1, r3
 8009ad4:	4013      	ands	r3, r2
 8009ad6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8009ad8:	693b      	ldr	r3, [r7, #16]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	f000 8186 	beq.w	8009dec <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	685b      	ldr	r3, [r3, #4]
 8009ae4:	f003 0303 	and.w	r3, r3, #3
 8009ae8:	2b01      	cmp	r3, #1
 8009aea:	d005      	beq.n	8009af8 <HAL_GPIO_Init+0x44>
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	685b      	ldr	r3, [r3, #4]
 8009af0:	f003 0303 	and.w	r3, r3, #3
 8009af4:	2b02      	cmp	r3, #2
 8009af6:	d130      	bne.n	8009b5a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	689b      	ldr	r3, [r3, #8]
 8009afc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009afe:	69fb      	ldr	r3, [r7, #28]
 8009b00:	005b      	lsls	r3, r3, #1
 8009b02:	2203      	movs	r2, #3
 8009b04:	fa02 f303 	lsl.w	r3, r2, r3
 8009b08:	43db      	mvns	r3, r3
 8009b0a:	69ba      	ldr	r2, [r7, #24]
 8009b0c:	4013      	ands	r3, r2
 8009b0e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	68da      	ldr	r2, [r3, #12]
 8009b14:	69fb      	ldr	r3, [r7, #28]
 8009b16:	005b      	lsls	r3, r3, #1
 8009b18:	fa02 f303 	lsl.w	r3, r2, r3
 8009b1c:	69ba      	ldr	r2, [r7, #24]
 8009b1e:	4313      	orrs	r3, r2
 8009b20:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	69ba      	ldr	r2, [r7, #24]
 8009b26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	685b      	ldr	r3, [r3, #4]
 8009b2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009b2e:	2201      	movs	r2, #1
 8009b30:	69fb      	ldr	r3, [r7, #28]
 8009b32:	fa02 f303 	lsl.w	r3, r2, r3
 8009b36:	43db      	mvns	r3, r3
 8009b38:	69ba      	ldr	r2, [r7, #24]
 8009b3a:	4013      	ands	r3, r2
 8009b3c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	685b      	ldr	r3, [r3, #4]
 8009b42:	091b      	lsrs	r3, r3, #4
 8009b44:	f003 0201 	and.w	r2, r3, #1
 8009b48:	69fb      	ldr	r3, [r7, #28]
 8009b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8009b4e:	69ba      	ldr	r2, [r7, #24]
 8009b50:	4313      	orrs	r3, r2
 8009b52:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	69ba      	ldr	r2, [r7, #24]
 8009b58:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	685b      	ldr	r3, [r3, #4]
 8009b5e:	f003 0303 	and.w	r3, r3, #3
 8009b62:	2b03      	cmp	r3, #3
 8009b64:	d017      	beq.n	8009b96 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	68db      	ldr	r3, [r3, #12]
 8009b6a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009b6c:	69fb      	ldr	r3, [r7, #28]
 8009b6e:	005b      	lsls	r3, r3, #1
 8009b70:	2203      	movs	r2, #3
 8009b72:	fa02 f303 	lsl.w	r3, r2, r3
 8009b76:	43db      	mvns	r3, r3
 8009b78:	69ba      	ldr	r2, [r7, #24]
 8009b7a:	4013      	ands	r3, r2
 8009b7c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	689a      	ldr	r2, [r3, #8]
 8009b82:	69fb      	ldr	r3, [r7, #28]
 8009b84:	005b      	lsls	r3, r3, #1
 8009b86:	fa02 f303 	lsl.w	r3, r2, r3
 8009b8a:	69ba      	ldr	r2, [r7, #24]
 8009b8c:	4313      	orrs	r3, r2
 8009b8e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	69ba      	ldr	r2, [r7, #24]
 8009b94:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	685b      	ldr	r3, [r3, #4]
 8009b9a:	f003 0303 	and.w	r3, r3, #3
 8009b9e:	2b02      	cmp	r3, #2
 8009ba0:	d123      	bne.n	8009bea <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009ba2:	69fb      	ldr	r3, [r7, #28]
 8009ba4:	08da      	lsrs	r2, r3, #3
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	3208      	adds	r2, #8
 8009baa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8009bb0:	69fb      	ldr	r3, [r7, #28]
 8009bb2:	f003 0307 	and.w	r3, r3, #7
 8009bb6:	009b      	lsls	r3, r3, #2
 8009bb8:	220f      	movs	r2, #15
 8009bba:	fa02 f303 	lsl.w	r3, r2, r3
 8009bbe:	43db      	mvns	r3, r3
 8009bc0:	69ba      	ldr	r2, [r7, #24]
 8009bc2:	4013      	ands	r3, r2
 8009bc4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8009bc6:	683b      	ldr	r3, [r7, #0]
 8009bc8:	691a      	ldr	r2, [r3, #16]
 8009bca:	69fb      	ldr	r3, [r7, #28]
 8009bcc:	f003 0307 	and.w	r3, r3, #7
 8009bd0:	009b      	lsls	r3, r3, #2
 8009bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8009bd6:	69ba      	ldr	r2, [r7, #24]
 8009bd8:	4313      	orrs	r3, r2
 8009bda:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009bdc:	69fb      	ldr	r3, [r7, #28]
 8009bde:	08da      	lsrs	r2, r3, #3
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	3208      	adds	r2, #8
 8009be4:	69b9      	ldr	r1, [r7, #24]
 8009be6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8009bf0:	69fb      	ldr	r3, [r7, #28]
 8009bf2:	005b      	lsls	r3, r3, #1
 8009bf4:	2203      	movs	r2, #3
 8009bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8009bfa:	43db      	mvns	r3, r3
 8009bfc:	69ba      	ldr	r2, [r7, #24]
 8009bfe:	4013      	ands	r3, r2
 8009c00:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	685b      	ldr	r3, [r3, #4]
 8009c06:	f003 0203 	and.w	r2, r3, #3
 8009c0a:	69fb      	ldr	r3, [r7, #28]
 8009c0c:	005b      	lsls	r3, r3, #1
 8009c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8009c12:	69ba      	ldr	r2, [r7, #24]
 8009c14:	4313      	orrs	r3, r2
 8009c16:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	69ba      	ldr	r2, [r7, #24]
 8009c1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009c1e:	683b      	ldr	r3, [r7, #0]
 8009c20:	685b      	ldr	r3, [r3, #4]
 8009c22:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	f000 80e0 	beq.w	8009dec <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009c2c:	4b2f      	ldr	r3, [pc, #188]	; (8009cec <HAL_GPIO_Init+0x238>)
 8009c2e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8009c32:	4a2e      	ldr	r2, [pc, #184]	; (8009cec <HAL_GPIO_Init+0x238>)
 8009c34:	f043 0302 	orr.w	r3, r3, #2
 8009c38:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8009c3c:	4b2b      	ldr	r3, [pc, #172]	; (8009cec <HAL_GPIO_Init+0x238>)
 8009c3e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8009c42:	f003 0302 	and.w	r3, r3, #2
 8009c46:	60fb      	str	r3, [r7, #12]
 8009c48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009c4a:	4a29      	ldr	r2, [pc, #164]	; (8009cf0 <HAL_GPIO_Init+0x23c>)
 8009c4c:	69fb      	ldr	r3, [r7, #28]
 8009c4e:	089b      	lsrs	r3, r3, #2
 8009c50:	3302      	adds	r3, #2
 8009c52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009c58:	69fb      	ldr	r3, [r7, #28]
 8009c5a:	f003 0303 	and.w	r3, r3, #3
 8009c5e:	009b      	lsls	r3, r3, #2
 8009c60:	220f      	movs	r2, #15
 8009c62:	fa02 f303 	lsl.w	r3, r2, r3
 8009c66:	43db      	mvns	r3, r3
 8009c68:	69ba      	ldr	r2, [r7, #24]
 8009c6a:	4013      	ands	r3, r2
 8009c6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	4a20      	ldr	r2, [pc, #128]	; (8009cf4 <HAL_GPIO_Init+0x240>)
 8009c72:	4293      	cmp	r3, r2
 8009c74:	d052      	beq.n	8009d1c <HAL_GPIO_Init+0x268>
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	4a1f      	ldr	r2, [pc, #124]	; (8009cf8 <HAL_GPIO_Init+0x244>)
 8009c7a:	4293      	cmp	r3, r2
 8009c7c:	d031      	beq.n	8009ce2 <HAL_GPIO_Init+0x22e>
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	4a1e      	ldr	r2, [pc, #120]	; (8009cfc <HAL_GPIO_Init+0x248>)
 8009c82:	4293      	cmp	r3, r2
 8009c84:	d02b      	beq.n	8009cde <HAL_GPIO_Init+0x22a>
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	4a1d      	ldr	r2, [pc, #116]	; (8009d00 <HAL_GPIO_Init+0x24c>)
 8009c8a:	4293      	cmp	r3, r2
 8009c8c:	d025      	beq.n	8009cda <HAL_GPIO_Init+0x226>
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	4a1c      	ldr	r2, [pc, #112]	; (8009d04 <HAL_GPIO_Init+0x250>)
 8009c92:	4293      	cmp	r3, r2
 8009c94:	d01f      	beq.n	8009cd6 <HAL_GPIO_Init+0x222>
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	4a1b      	ldr	r2, [pc, #108]	; (8009d08 <HAL_GPIO_Init+0x254>)
 8009c9a:	4293      	cmp	r3, r2
 8009c9c:	d019      	beq.n	8009cd2 <HAL_GPIO_Init+0x21e>
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	4a1a      	ldr	r2, [pc, #104]	; (8009d0c <HAL_GPIO_Init+0x258>)
 8009ca2:	4293      	cmp	r3, r2
 8009ca4:	d013      	beq.n	8009cce <HAL_GPIO_Init+0x21a>
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	4a19      	ldr	r2, [pc, #100]	; (8009d10 <HAL_GPIO_Init+0x25c>)
 8009caa:	4293      	cmp	r3, r2
 8009cac:	d00d      	beq.n	8009cca <HAL_GPIO_Init+0x216>
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	4a18      	ldr	r2, [pc, #96]	; (8009d14 <HAL_GPIO_Init+0x260>)
 8009cb2:	4293      	cmp	r3, r2
 8009cb4:	d007      	beq.n	8009cc6 <HAL_GPIO_Init+0x212>
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	4a17      	ldr	r2, [pc, #92]	; (8009d18 <HAL_GPIO_Init+0x264>)
 8009cba:	4293      	cmp	r3, r2
 8009cbc:	d101      	bne.n	8009cc2 <HAL_GPIO_Init+0x20e>
 8009cbe:	2309      	movs	r3, #9
 8009cc0:	e02d      	b.n	8009d1e <HAL_GPIO_Init+0x26a>
 8009cc2:	230a      	movs	r3, #10
 8009cc4:	e02b      	b.n	8009d1e <HAL_GPIO_Init+0x26a>
 8009cc6:	2308      	movs	r3, #8
 8009cc8:	e029      	b.n	8009d1e <HAL_GPIO_Init+0x26a>
 8009cca:	2307      	movs	r3, #7
 8009ccc:	e027      	b.n	8009d1e <HAL_GPIO_Init+0x26a>
 8009cce:	2306      	movs	r3, #6
 8009cd0:	e025      	b.n	8009d1e <HAL_GPIO_Init+0x26a>
 8009cd2:	2305      	movs	r3, #5
 8009cd4:	e023      	b.n	8009d1e <HAL_GPIO_Init+0x26a>
 8009cd6:	2304      	movs	r3, #4
 8009cd8:	e021      	b.n	8009d1e <HAL_GPIO_Init+0x26a>
 8009cda:	2303      	movs	r3, #3
 8009cdc:	e01f      	b.n	8009d1e <HAL_GPIO_Init+0x26a>
 8009cde:	2302      	movs	r3, #2
 8009ce0:	e01d      	b.n	8009d1e <HAL_GPIO_Init+0x26a>
 8009ce2:	2301      	movs	r3, #1
 8009ce4:	e01b      	b.n	8009d1e <HAL_GPIO_Init+0x26a>
 8009ce6:	bf00      	nop
 8009ce8:	58000080 	.word	0x58000080
 8009cec:	58024400 	.word	0x58024400
 8009cf0:	58000400 	.word	0x58000400
 8009cf4:	58020000 	.word	0x58020000
 8009cf8:	58020400 	.word	0x58020400
 8009cfc:	58020800 	.word	0x58020800
 8009d00:	58020c00 	.word	0x58020c00
 8009d04:	58021000 	.word	0x58021000
 8009d08:	58021400 	.word	0x58021400
 8009d0c:	58021800 	.word	0x58021800
 8009d10:	58021c00 	.word	0x58021c00
 8009d14:	58022000 	.word	0x58022000
 8009d18:	58022400 	.word	0x58022400
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	69fa      	ldr	r2, [r7, #28]
 8009d20:	f002 0203 	and.w	r2, r2, #3
 8009d24:	0092      	lsls	r2, r2, #2
 8009d26:	4093      	lsls	r3, r2
 8009d28:	69ba      	ldr	r2, [r7, #24]
 8009d2a:	4313      	orrs	r3, r2
 8009d2c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009d2e:	4938      	ldr	r1, [pc, #224]	; (8009e10 <HAL_GPIO_Init+0x35c>)
 8009d30:	69fb      	ldr	r3, [r7, #28]
 8009d32:	089b      	lsrs	r3, r3, #2
 8009d34:	3302      	adds	r3, #2
 8009d36:	69ba      	ldr	r2, [r7, #24]
 8009d38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009d3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009d44:	693b      	ldr	r3, [r7, #16]
 8009d46:	43db      	mvns	r3, r3
 8009d48:	69ba      	ldr	r2, [r7, #24]
 8009d4a:	4013      	ands	r3, r2
 8009d4c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	685b      	ldr	r3, [r3, #4]
 8009d52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d003      	beq.n	8009d62 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8009d5a:	69ba      	ldr	r2, [r7, #24]
 8009d5c:	693b      	ldr	r3, [r7, #16]
 8009d5e:	4313      	orrs	r3, r2
 8009d60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8009d62:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009d66:	69bb      	ldr	r3, [r7, #24]
 8009d68:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8009d6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009d6e:	685b      	ldr	r3, [r3, #4]
 8009d70:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009d72:	693b      	ldr	r3, [r7, #16]
 8009d74:	43db      	mvns	r3, r3
 8009d76:	69ba      	ldr	r2, [r7, #24]
 8009d78:	4013      	ands	r3, r2
 8009d7a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	685b      	ldr	r3, [r3, #4]
 8009d80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d003      	beq.n	8009d90 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8009d88:	69ba      	ldr	r2, [r7, #24]
 8009d8a:	693b      	ldr	r3, [r7, #16]
 8009d8c:	4313      	orrs	r3, r2
 8009d8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8009d90:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009d94:	69bb      	ldr	r3, [r7, #24]
 8009d96:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8009d98:	697b      	ldr	r3, [r7, #20]
 8009d9a:	685b      	ldr	r3, [r3, #4]
 8009d9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009d9e:	693b      	ldr	r3, [r7, #16]
 8009da0:	43db      	mvns	r3, r3
 8009da2:	69ba      	ldr	r2, [r7, #24]
 8009da4:	4013      	ands	r3, r2
 8009da6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	685b      	ldr	r3, [r3, #4]
 8009dac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d003      	beq.n	8009dbc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8009db4:	69ba      	ldr	r2, [r7, #24]
 8009db6:	693b      	ldr	r3, [r7, #16]
 8009db8:	4313      	orrs	r3, r2
 8009dba:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8009dbc:	697b      	ldr	r3, [r7, #20]
 8009dbe:	69ba      	ldr	r2, [r7, #24]
 8009dc0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8009dc2:	697b      	ldr	r3, [r7, #20]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009dc8:	693b      	ldr	r3, [r7, #16]
 8009dca:	43db      	mvns	r3, r3
 8009dcc:	69ba      	ldr	r2, [r7, #24]
 8009dce:	4013      	ands	r3, r2
 8009dd0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	685b      	ldr	r3, [r3, #4]
 8009dd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d003      	beq.n	8009de6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8009dde:	69ba      	ldr	r2, [r7, #24]
 8009de0:	693b      	ldr	r3, [r7, #16]
 8009de2:	4313      	orrs	r3, r2
 8009de4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8009de6:	697b      	ldr	r3, [r7, #20]
 8009de8:	69ba      	ldr	r2, [r7, #24]
 8009dea:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8009dec:	69fb      	ldr	r3, [r7, #28]
 8009dee:	3301      	adds	r3, #1
 8009df0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009df2:	683b      	ldr	r3, [r7, #0]
 8009df4:	681a      	ldr	r2, [r3, #0]
 8009df6:	69fb      	ldr	r3, [r7, #28]
 8009df8:	fa22 f303 	lsr.w	r3, r2, r3
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	f47f ae63 	bne.w	8009ac8 <HAL_GPIO_Init+0x14>
  }
}
 8009e02:	bf00      	nop
 8009e04:	bf00      	nop
 8009e06:	3724      	adds	r7, #36	; 0x24
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0e:	4770      	bx	lr
 8009e10:	58000400 	.word	0x58000400

08009e14 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009e14:	b480      	push	{r7}
 8009e16:	b087      	sub	sp, #28
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
 8009e1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8009e1e:	2300      	movs	r3, #0
 8009e20:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8009e22:	4b75      	ldr	r3, [pc, #468]	; (8009ff8 <HAL_GPIO_DeInit+0x1e4>)
 8009e24:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8009e26:	e0d9      	b.n	8009fdc <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8009e28:	2201      	movs	r2, #1
 8009e2a:	697b      	ldr	r3, [r7, #20]
 8009e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8009e30:	683a      	ldr	r2, [r7, #0]
 8009e32:	4013      	ands	r3, r2
 8009e34:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	f000 80cc 	beq.w	8009fd6 <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8009e3e:	4a6f      	ldr	r2, [pc, #444]	; (8009ffc <HAL_GPIO_DeInit+0x1e8>)
 8009e40:	697b      	ldr	r3, [r7, #20]
 8009e42:	089b      	lsrs	r3, r3, #2
 8009e44:	3302      	adds	r3, #2
 8009e46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e4a:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8009e4c:	697b      	ldr	r3, [r7, #20]
 8009e4e:	f003 0303 	and.w	r3, r3, #3
 8009e52:	009b      	lsls	r3, r3, #2
 8009e54:	220f      	movs	r2, #15
 8009e56:	fa02 f303 	lsl.w	r3, r2, r3
 8009e5a:	68ba      	ldr	r2, [r7, #8]
 8009e5c:	4013      	ands	r3, r2
 8009e5e:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	4a67      	ldr	r2, [pc, #412]	; (800a000 <HAL_GPIO_DeInit+0x1ec>)
 8009e64:	4293      	cmp	r3, r2
 8009e66:	d037      	beq.n	8009ed8 <HAL_GPIO_DeInit+0xc4>
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	4a66      	ldr	r2, [pc, #408]	; (800a004 <HAL_GPIO_DeInit+0x1f0>)
 8009e6c:	4293      	cmp	r3, r2
 8009e6e:	d031      	beq.n	8009ed4 <HAL_GPIO_DeInit+0xc0>
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	4a65      	ldr	r2, [pc, #404]	; (800a008 <HAL_GPIO_DeInit+0x1f4>)
 8009e74:	4293      	cmp	r3, r2
 8009e76:	d02b      	beq.n	8009ed0 <HAL_GPIO_DeInit+0xbc>
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	4a64      	ldr	r2, [pc, #400]	; (800a00c <HAL_GPIO_DeInit+0x1f8>)
 8009e7c:	4293      	cmp	r3, r2
 8009e7e:	d025      	beq.n	8009ecc <HAL_GPIO_DeInit+0xb8>
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	4a63      	ldr	r2, [pc, #396]	; (800a010 <HAL_GPIO_DeInit+0x1fc>)
 8009e84:	4293      	cmp	r3, r2
 8009e86:	d01f      	beq.n	8009ec8 <HAL_GPIO_DeInit+0xb4>
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	4a62      	ldr	r2, [pc, #392]	; (800a014 <HAL_GPIO_DeInit+0x200>)
 8009e8c:	4293      	cmp	r3, r2
 8009e8e:	d019      	beq.n	8009ec4 <HAL_GPIO_DeInit+0xb0>
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	4a61      	ldr	r2, [pc, #388]	; (800a018 <HAL_GPIO_DeInit+0x204>)
 8009e94:	4293      	cmp	r3, r2
 8009e96:	d013      	beq.n	8009ec0 <HAL_GPIO_DeInit+0xac>
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	4a60      	ldr	r2, [pc, #384]	; (800a01c <HAL_GPIO_DeInit+0x208>)
 8009e9c:	4293      	cmp	r3, r2
 8009e9e:	d00d      	beq.n	8009ebc <HAL_GPIO_DeInit+0xa8>
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	4a5f      	ldr	r2, [pc, #380]	; (800a020 <HAL_GPIO_DeInit+0x20c>)
 8009ea4:	4293      	cmp	r3, r2
 8009ea6:	d007      	beq.n	8009eb8 <HAL_GPIO_DeInit+0xa4>
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	4a5e      	ldr	r2, [pc, #376]	; (800a024 <HAL_GPIO_DeInit+0x210>)
 8009eac:	4293      	cmp	r3, r2
 8009eae:	d101      	bne.n	8009eb4 <HAL_GPIO_DeInit+0xa0>
 8009eb0:	2309      	movs	r3, #9
 8009eb2:	e012      	b.n	8009eda <HAL_GPIO_DeInit+0xc6>
 8009eb4:	230a      	movs	r3, #10
 8009eb6:	e010      	b.n	8009eda <HAL_GPIO_DeInit+0xc6>
 8009eb8:	2308      	movs	r3, #8
 8009eba:	e00e      	b.n	8009eda <HAL_GPIO_DeInit+0xc6>
 8009ebc:	2307      	movs	r3, #7
 8009ebe:	e00c      	b.n	8009eda <HAL_GPIO_DeInit+0xc6>
 8009ec0:	2306      	movs	r3, #6
 8009ec2:	e00a      	b.n	8009eda <HAL_GPIO_DeInit+0xc6>
 8009ec4:	2305      	movs	r3, #5
 8009ec6:	e008      	b.n	8009eda <HAL_GPIO_DeInit+0xc6>
 8009ec8:	2304      	movs	r3, #4
 8009eca:	e006      	b.n	8009eda <HAL_GPIO_DeInit+0xc6>
 8009ecc:	2303      	movs	r3, #3
 8009ece:	e004      	b.n	8009eda <HAL_GPIO_DeInit+0xc6>
 8009ed0:	2302      	movs	r3, #2
 8009ed2:	e002      	b.n	8009eda <HAL_GPIO_DeInit+0xc6>
 8009ed4:	2301      	movs	r3, #1
 8009ed6:	e000      	b.n	8009eda <HAL_GPIO_DeInit+0xc6>
 8009ed8:	2300      	movs	r3, #0
 8009eda:	697a      	ldr	r2, [r7, #20]
 8009edc:	f002 0203 	and.w	r2, r2, #3
 8009ee0:	0092      	lsls	r2, r2, #2
 8009ee2:	4093      	lsls	r3, r2
 8009ee4:	68ba      	ldr	r2, [r7, #8]
 8009ee6:	429a      	cmp	r2, r3
 8009ee8:	d136      	bne.n	8009f58 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8009eea:	693b      	ldr	r3, [r7, #16]
 8009eec:	681a      	ldr	r2, [r3, #0]
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	43db      	mvns	r3, r3
 8009ef2:	401a      	ands	r2, r3
 8009ef4:	693b      	ldr	r3, [r7, #16]
 8009ef6:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8009ef8:	693b      	ldr	r3, [r7, #16]
 8009efa:	685a      	ldr	r2, [r3, #4]
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	43db      	mvns	r3, r3
 8009f00:	401a      	ands	r2, r3
 8009f02:	693b      	ldr	r3, [r7, #16]
 8009f04:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8009f06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009f0a:	685a      	ldr	r2, [r3, #4]
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	43db      	mvns	r3, r3
 8009f10:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009f14:	4013      	ands	r3, r2
 8009f16:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8009f18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009f1c:	681a      	ldr	r2, [r3, #0]
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	43db      	mvns	r3, r3
 8009f22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009f26:	4013      	ands	r3, r2
 8009f28:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8009f2a:	697b      	ldr	r3, [r7, #20]
 8009f2c:	f003 0303 	and.w	r3, r3, #3
 8009f30:	009b      	lsls	r3, r3, #2
 8009f32:	220f      	movs	r2, #15
 8009f34:	fa02 f303 	lsl.w	r3, r2, r3
 8009f38:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8009f3a:	4a30      	ldr	r2, [pc, #192]	; (8009ffc <HAL_GPIO_DeInit+0x1e8>)
 8009f3c:	697b      	ldr	r3, [r7, #20]
 8009f3e:	089b      	lsrs	r3, r3, #2
 8009f40:	3302      	adds	r3, #2
 8009f42:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009f46:	68bb      	ldr	r3, [r7, #8]
 8009f48:	43da      	mvns	r2, r3
 8009f4a:	482c      	ldr	r0, [pc, #176]	; (8009ffc <HAL_GPIO_DeInit+0x1e8>)
 8009f4c:	697b      	ldr	r3, [r7, #20]
 8009f4e:	089b      	lsrs	r3, r3, #2
 8009f50:	400a      	ands	r2, r1
 8009f52:	3302      	adds	r3, #2
 8009f54:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681a      	ldr	r2, [r3, #0]
 8009f5c:	697b      	ldr	r3, [r7, #20]
 8009f5e:	005b      	lsls	r3, r3, #1
 8009f60:	2103      	movs	r1, #3
 8009f62:	fa01 f303 	lsl.w	r3, r1, r3
 8009f66:	431a      	orrs	r2, r3
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8009f6c:	697b      	ldr	r3, [r7, #20]
 8009f6e:	08da      	lsrs	r2, r3, #3
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	3208      	adds	r2, #8
 8009f74:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009f78:	697b      	ldr	r3, [r7, #20]
 8009f7a:	f003 0307 	and.w	r3, r3, #7
 8009f7e:	009b      	lsls	r3, r3, #2
 8009f80:	220f      	movs	r2, #15
 8009f82:	fa02 f303 	lsl.w	r3, r2, r3
 8009f86:	43db      	mvns	r3, r3
 8009f88:	697a      	ldr	r2, [r7, #20]
 8009f8a:	08d2      	lsrs	r2, r2, #3
 8009f8c:	4019      	ands	r1, r3
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	3208      	adds	r2, #8
 8009f92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	68da      	ldr	r2, [r3, #12]
 8009f9a:	697b      	ldr	r3, [r7, #20]
 8009f9c:	005b      	lsls	r3, r3, #1
 8009f9e:	2103      	movs	r1, #3
 8009fa0:	fa01 f303 	lsl.w	r3, r1, r3
 8009fa4:	43db      	mvns	r3, r3
 8009fa6:	401a      	ands	r2, r3
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	685a      	ldr	r2, [r3, #4]
 8009fb0:	2101      	movs	r1, #1
 8009fb2:	697b      	ldr	r3, [r7, #20]
 8009fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8009fb8:	43db      	mvns	r3, r3
 8009fba:	401a      	ands	r2, r3
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	689a      	ldr	r2, [r3, #8]
 8009fc4:	697b      	ldr	r3, [r7, #20]
 8009fc6:	005b      	lsls	r3, r3, #1
 8009fc8:	2103      	movs	r1, #3
 8009fca:	fa01 f303 	lsl.w	r3, r1, r3
 8009fce:	43db      	mvns	r3, r3
 8009fd0:	401a      	ands	r2, r3
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	609a      	str	r2, [r3, #8]
    }

    position++;
 8009fd6:	697b      	ldr	r3, [r7, #20]
 8009fd8:	3301      	adds	r3, #1
 8009fda:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8009fdc:	683a      	ldr	r2, [r7, #0]
 8009fde:	697b      	ldr	r3, [r7, #20]
 8009fe0:	fa22 f303 	lsr.w	r3, r2, r3
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	f47f af1f 	bne.w	8009e28 <HAL_GPIO_DeInit+0x14>
  }
}
 8009fea:	bf00      	nop
 8009fec:	bf00      	nop
 8009fee:	371c      	adds	r7, #28
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff6:	4770      	bx	lr
 8009ff8:	58000080 	.word	0x58000080
 8009ffc:	58000400 	.word	0x58000400
 800a000:	58020000 	.word	0x58020000
 800a004:	58020400 	.word	0x58020400
 800a008:	58020800 	.word	0x58020800
 800a00c:	58020c00 	.word	0x58020c00
 800a010:	58021000 	.word	0x58021000
 800a014:	58021400 	.word	0x58021400
 800a018:	58021800 	.word	0x58021800
 800a01c:	58021c00 	.word	0x58021c00
 800a020:	58022000 	.word	0x58022000
 800a024:	58022400 	.word	0x58022400

0800a028 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a028:	b480      	push	{r7}
 800a02a:	b085      	sub	sp, #20
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
 800a030:	460b      	mov	r3, r1
 800a032:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	691a      	ldr	r2, [r3, #16]
 800a038:	887b      	ldrh	r3, [r7, #2]
 800a03a:	4013      	ands	r3, r2
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d002      	beq.n	800a046 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a040:	2301      	movs	r3, #1
 800a042:	73fb      	strb	r3, [r7, #15]
 800a044:	e001      	b.n	800a04a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a046:	2300      	movs	r3, #0
 800a048:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a04a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a04c:	4618      	mov	r0, r3
 800a04e:	3714      	adds	r7, #20
 800a050:	46bd      	mov	sp, r7
 800a052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a056:	4770      	bx	lr

0800a058 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a058:	b480      	push	{r7}
 800a05a:	b083      	sub	sp, #12
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
 800a060:	460b      	mov	r3, r1
 800a062:	807b      	strh	r3, [r7, #2]
 800a064:	4613      	mov	r3, r2
 800a066:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a068:	787b      	ldrb	r3, [r7, #1]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d003      	beq.n	800a076 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a06e:	887a      	ldrh	r2, [r7, #2]
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800a074:	e003      	b.n	800a07e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800a076:	887b      	ldrh	r3, [r7, #2]
 800a078:	041a      	lsls	r2, r3, #16
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	619a      	str	r2, [r3, #24]
}
 800a07e:	bf00      	nop
 800a080:	370c      	adds	r7, #12
 800a082:	46bd      	mov	sp, r7
 800a084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a088:	4770      	bx	lr

0800a08a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a08a:	b480      	push	{r7}
 800a08c:	b085      	sub	sp, #20
 800a08e:	af00      	add	r7, sp, #0
 800a090:	6078      	str	r0, [r7, #4]
 800a092:	460b      	mov	r3, r1
 800a094:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	695b      	ldr	r3, [r3, #20]
 800a09a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800a09c:	887a      	ldrh	r2, [r7, #2]
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	4013      	ands	r3, r2
 800a0a2:	041a      	lsls	r2, r3, #16
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	43d9      	mvns	r1, r3
 800a0a8:	887b      	ldrh	r3, [r7, #2]
 800a0aa:	400b      	ands	r3, r1
 800a0ac:	431a      	orrs	r2, r3
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	619a      	str	r2, [r3, #24]
}
 800a0b2:	bf00      	nop
 800a0b4:	3714      	adds	r7, #20
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0bc:	4770      	bx	lr

0800a0be <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800a0be:	b580      	push	{r7, lr}
 800a0c0:	b082      	sub	sp, #8
 800a0c2:	af00      	add	r7, sp, #0
 800a0c4:	4603      	mov	r3, r0
 800a0c6:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800a0c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a0cc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800a0d0:	88fb      	ldrh	r3, [r7, #6]
 800a0d2:	4013      	ands	r3, r2
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d008      	beq.n	800a0ea <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800a0d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a0dc:	88fb      	ldrh	r3, [r7, #6]
 800a0de:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800a0e2:	88fb      	ldrh	r3, [r7, #6]
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	f7f7 f9f5 	bl	80014d4 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800a0ea:	bf00      	nop
 800a0ec:	3708      	adds	r7, #8
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	bd80      	pop	{r7, pc}
	...

0800a0f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b082      	sub	sp, #8
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d101      	bne.n	800a106 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a102:	2301      	movs	r3, #1
 800a104:	e07f      	b.n	800a206 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a10c:	b2db      	uxtb	r3, r3
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d106      	bne.n	800a120 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2200      	movs	r2, #0
 800a116:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a11a:	6878      	ldr	r0, [r7, #4]
 800a11c:	f7f7 fb04 	bl	8001728 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2224      	movs	r2, #36	; 0x24
 800a124:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	681a      	ldr	r2, [r3, #0]
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	f022 0201 	bic.w	r2, r2, #1
 800a136:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	685a      	ldr	r2, [r3, #4]
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a144:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	689a      	ldr	r2, [r3, #8]
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a154:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	68db      	ldr	r3, [r3, #12]
 800a15a:	2b01      	cmp	r3, #1
 800a15c:	d107      	bne.n	800a16e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	689a      	ldr	r2, [r3, #8]
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a16a:	609a      	str	r2, [r3, #8]
 800a16c:	e006      	b.n	800a17c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	689a      	ldr	r2, [r3, #8]
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800a17a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	68db      	ldr	r3, [r3, #12]
 800a180:	2b02      	cmp	r3, #2
 800a182:	d104      	bne.n	800a18e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a18c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	6859      	ldr	r1, [r3, #4]
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681a      	ldr	r2, [r3, #0]
 800a198:	4b1d      	ldr	r3, [pc, #116]	; (800a210 <HAL_I2C_Init+0x11c>)
 800a19a:	430b      	orrs	r3, r1
 800a19c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	68da      	ldr	r2, [r3, #12]
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a1ac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	691a      	ldr	r2, [r3, #16]
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	695b      	ldr	r3, [r3, #20]
 800a1b6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	699b      	ldr	r3, [r3, #24]
 800a1be:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	430a      	orrs	r2, r1
 800a1c6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	69d9      	ldr	r1, [r3, #28]
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	6a1a      	ldr	r2, [r3, #32]
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	430a      	orrs	r2, r1
 800a1d6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	681a      	ldr	r2, [r3, #0]
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	f042 0201 	orr.w	r2, r2, #1
 800a1e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	2220      	movs	r2, #32
 800a1f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2200      	movs	r2, #0
 800a200:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800a204:	2300      	movs	r3, #0
}
 800a206:	4618      	mov	r0, r3
 800a208:	3708      	adds	r7, #8
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bd80      	pop	{r7, pc}
 800a20e:	bf00      	nop
 800a210:	02008000 	.word	0x02008000

0800a214 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b082      	sub	sp, #8
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d101      	bne.n	800a226 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800a222:	2301      	movs	r3, #1
 800a224:	e021      	b.n	800a26a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	2224      	movs	r2, #36	; 0x24
 800a22a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	681a      	ldr	r2, [r3, #0]
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	f022 0201 	bic.w	r2, r2, #1
 800a23c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800a23e:	6878      	ldr	r0, [r7, #4]
 800a240:	f7f7 fadc 	bl	80017fc <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2200      	movs	r2, #0
 800a248:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	2200      	movs	r2, #0
 800a24e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	2200      	movs	r2, #0
 800a256:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2200      	movs	r2, #0
 800a25c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2200      	movs	r2, #0
 800a264:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a268:	2300      	movs	r3, #0
}
 800a26a:	4618      	mov	r0, r3
 800a26c:	3708      	adds	r7, #8
 800a26e:	46bd      	mov	sp, r7
 800a270:	bd80      	pop	{r7, pc}
	...

0800a274 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b088      	sub	sp, #32
 800a278:	af02      	add	r7, sp, #8
 800a27a:	60f8      	str	r0, [r7, #12]
 800a27c:	4608      	mov	r0, r1
 800a27e:	4611      	mov	r1, r2
 800a280:	461a      	mov	r2, r3
 800a282:	4603      	mov	r3, r0
 800a284:	817b      	strh	r3, [r7, #10]
 800a286:	460b      	mov	r3, r1
 800a288:	813b      	strh	r3, [r7, #8]
 800a28a:	4613      	mov	r3, r2
 800a28c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a294:	b2db      	uxtb	r3, r3
 800a296:	2b20      	cmp	r3, #32
 800a298:	f040 80f9 	bne.w	800a48e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a29c:	6a3b      	ldr	r3, [r7, #32]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d002      	beq.n	800a2a8 <HAL_I2C_Mem_Write+0x34>
 800a2a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d105      	bne.n	800a2b4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a2ae:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800a2b0:	2301      	movs	r3, #1
 800a2b2:	e0ed      	b.n	800a490 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a2ba:	2b01      	cmp	r3, #1
 800a2bc:	d101      	bne.n	800a2c2 <HAL_I2C_Mem_Write+0x4e>
 800a2be:	2302      	movs	r3, #2
 800a2c0:	e0e6      	b.n	800a490 <HAL_I2C_Mem_Write+0x21c>
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	2201      	movs	r2, #1
 800a2c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a2ca:	f7fe ff21 	bl	8009110 <HAL_GetTick>
 800a2ce:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a2d0:	697b      	ldr	r3, [r7, #20]
 800a2d2:	9300      	str	r3, [sp, #0]
 800a2d4:	2319      	movs	r3, #25
 800a2d6:	2201      	movs	r2, #1
 800a2d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a2dc:	68f8      	ldr	r0, [r7, #12]
 800a2de:	f000 fadd 	bl	800a89c <I2C_WaitOnFlagUntilTimeout>
 800a2e2:	4603      	mov	r3, r0
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d001      	beq.n	800a2ec <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800a2e8:	2301      	movs	r3, #1
 800a2ea:	e0d1      	b.n	800a490 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	2221      	movs	r2, #33	; 0x21
 800a2f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	2240      	movs	r2, #64	; 0x40
 800a2f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	2200      	movs	r2, #0
 800a300:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	6a3a      	ldr	r2, [r7, #32]
 800a306:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a30c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	2200      	movs	r2, #0
 800a312:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a314:	88f8      	ldrh	r0, [r7, #6]
 800a316:	893a      	ldrh	r2, [r7, #8]
 800a318:	8979      	ldrh	r1, [r7, #10]
 800a31a:	697b      	ldr	r3, [r7, #20]
 800a31c:	9301      	str	r3, [sp, #4]
 800a31e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a320:	9300      	str	r3, [sp, #0]
 800a322:	4603      	mov	r3, r0
 800a324:	68f8      	ldr	r0, [r7, #12]
 800a326:	f000 f9ed 	bl	800a704 <I2C_RequestMemoryWrite>
 800a32a:	4603      	mov	r3, r0
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d005      	beq.n	800a33c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	2200      	movs	r2, #0
 800a334:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800a338:	2301      	movs	r3, #1
 800a33a:	e0a9      	b.n	800a490 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a340:	b29b      	uxth	r3, r3
 800a342:	2bff      	cmp	r3, #255	; 0xff
 800a344:	d90e      	bls.n	800a364 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	22ff      	movs	r2, #255	; 0xff
 800a34a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a350:	b2da      	uxtb	r2, r3
 800a352:	8979      	ldrh	r1, [r7, #10]
 800a354:	2300      	movs	r3, #0
 800a356:	9300      	str	r3, [sp, #0]
 800a358:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a35c:	68f8      	ldr	r0, [r7, #12]
 800a35e:	f000 fc57 	bl	800ac10 <I2C_TransferConfig>
 800a362:	e00f      	b.n	800a384 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a368:	b29a      	uxth	r2, r3
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a372:	b2da      	uxtb	r2, r3
 800a374:	8979      	ldrh	r1, [r7, #10]
 800a376:	2300      	movs	r3, #0
 800a378:	9300      	str	r3, [sp, #0]
 800a37a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a37e:	68f8      	ldr	r0, [r7, #12]
 800a380:	f000 fc46 	bl	800ac10 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a384:	697a      	ldr	r2, [r7, #20]
 800a386:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a388:	68f8      	ldr	r0, [r7, #12]
 800a38a:	f000 fad6 	bl	800a93a <I2C_WaitOnTXISFlagUntilTimeout>
 800a38e:	4603      	mov	r3, r0
 800a390:	2b00      	cmp	r3, #0
 800a392:	d001      	beq.n	800a398 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800a394:	2301      	movs	r3, #1
 800a396:	e07b      	b.n	800a490 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a39c:	781a      	ldrb	r2, [r3, #0]
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3a8:	1c5a      	adds	r2, r3, #1
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a3b2:	b29b      	uxth	r3, r3
 800a3b4:	3b01      	subs	r3, #1
 800a3b6:	b29a      	uxth	r2, r3
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a3c0:	3b01      	subs	r3, #1
 800a3c2:	b29a      	uxth	r2, r3
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a3cc:	b29b      	uxth	r3, r3
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d034      	beq.n	800a43c <HAL_I2C_Mem_Write+0x1c8>
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d130      	bne.n	800a43c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a3da:	697b      	ldr	r3, [r7, #20]
 800a3dc:	9300      	str	r3, [sp, #0]
 800a3de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	2180      	movs	r1, #128	; 0x80
 800a3e4:	68f8      	ldr	r0, [r7, #12]
 800a3e6:	f000 fa59 	bl	800a89c <I2C_WaitOnFlagUntilTimeout>
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d001      	beq.n	800a3f4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800a3f0:	2301      	movs	r3, #1
 800a3f2:	e04d      	b.n	800a490 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a3f8:	b29b      	uxth	r3, r3
 800a3fa:	2bff      	cmp	r3, #255	; 0xff
 800a3fc:	d90e      	bls.n	800a41c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	22ff      	movs	r2, #255	; 0xff
 800a402:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a408:	b2da      	uxtb	r2, r3
 800a40a:	8979      	ldrh	r1, [r7, #10]
 800a40c:	2300      	movs	r3, #0
 800a40e:	9300      	str	r3, [sp, #0]
 800a410:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a414:	68f8      	ldr	r0, [r7, #12]
 800a416:	f000 fbfb 	bl	800ac10 <I2C_TransferConfig>
 800a41a:	e00f      	b.n	800a43c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a420:	b29a      	uxth	r2, r3
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a42a:	b2da      	uxtb	r2, r3
 800a42c:	8979      	ldrh	r1, [r7, #10]
 800a42e:	2300      	movs	r3, #0
 800a430:	9300      	str	r3, [sp, #0]
 800a432:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a436:	68f8      	ldr	r0, [r7, #12]
 800a438:	f000 fbea 	bl	800ac10 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a440:	b29b      	uxth	r3, r3
 800a442:	2b00      	cmp	r3, #0
 800a444:	d19e      	bne.n	800a384 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a446:	697a      	ldr	r2, [r7, #20]
 800a448:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a44a:	68f8      	ldr	r0, [r7, #12]
 800a44c:	f000 fabc 	bl	800a9c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a450:	4603      	mov	r3, r0
 800a452:	2b00      	cmp	r3, #0
 800a454:	d001      	beq.n	800a45a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800a456:	2301      	movs	r3, #1
 800a458:	e01a      	b.n	800a490 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	2220      	movs	r2, #32
 800a460:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	6859      	ldr	r1, [r3, #4]
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	681a      	ldr	r2, [r3, #0]
 800a46c:	4b0a      	ldr	r3, [pc, #40]	; (800a498 <HAL_I2C_Mem_Write+0x224>)
 800a46e:	400b      	ands	r3, r1
 800a470:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	2220      	movs	r2, #32
 800a476:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	2200      	movs	r2, #0
 800a47e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	2200      	movs	r2, #0
 800a486:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a48a:	2300      	movs	r3, #0
 800a48c:	e000      	b.n	800a490 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800a48e:	2302      	movs	r3, #2
  }
}
 800a490:	4618      	mov	r0, r3
 800a492:	3718      	adds	r7, #24
 800a494:	46bd      	mov	sp, r7
 800a496:	bd80      	pop	{r7, pc}
 800a498:	fe00e800 	.word	0xfe00e800

0800a49c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b088      	sub	sp, #32
 800a4a0:	af02      	add	r7, sp, #8
 800a4a2:	60f8      	str	r0, [r7, #12]
 800a4a4:	4608      	mov	r0, r1
 800a4a6:	4611      	mov	r1, r2
 800a4a8:	461a      	mov	r2, r3
 800a4aa:	4603      	mov	r3, r0
 800a4ac:	817b      	strh	r3, [r7, #10]
 800a4ae:	460b      	mov	r3, r1
 800a4b0:	813b      	strh	r3, [r7, #8]
 800a4b2:	4613      	mov	r3, r2
 800a4b4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a4bc:	b2db      	uxtb	r3, r3
 800a4be:	2b20      	cmp	r3, #32
 800a4c0:	f040 80fd 	bne.w	800a6be <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800a4c4:	6a3b      	ldr	r3, [r7, #32]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d002      	beq.n	800a4d0 <HAL_I2C_Mem_Read+0x34>
 800a4ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d105      	bne.n	800a4dc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a4d6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800a4d8:	2301      	movs	r3, #1
 800a4da:	e0f1      	b.n	800a6c0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a4e2:	2b01      	cmp	r3, #1
 800a4e4:	d101      	bne.n	800a4ea <HAL_I2C_Mem_Read+0x4e>
 800a4e6:	2302      	movs	r3, #2
 800a4e8:	e0ea      	b.n	800a6c0 <HAL_I2C_Mem_Read+0x224>
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	2201      	movs	r2, #1
 800a4ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a4f2:	f7fe fe0d 	bl	8009110 <HAL_GetTick>
 800a4f6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a4f8:	697b      	ldr	r3, [r7, #20]
 800a4fa:	9300      	str	r3, [sp, #0]
 800a4fc:	2319      	movs	r3, #25
 800a4fe:	2201      	movs	r2, #1
 800a500:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a504:	68f8      	ldr	r0, [r7, #12]
 800a506:	f000 f9c9 	bl	800a89c <I2C_WaitOnFlagUntilTimeout>
 800a50a:	4603      	mov	r3, r0
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d001      	beq.n	800a514 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800a510:	2301      	movs	r3, #1
 800a512:	e0d5      	b.n	800a6c0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	2222      	movs	r2, #34	; 0x22
 800a518:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	2240      	movs	r2, #64	; 0x40
 800a520:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	2200      	movs	r2, #0
 800a528:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	6a3a      	ldr	r2, [r7, #32]
 800a52e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a534:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	2200      	movs	r2, #0
 800a53a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a53c:	88f8      	ldrh	r0, [r7, #6]
 800a53e:	893a      	ldrh	r2, [r7, #8]
 800a540:	8979      	ldrh	r1, [r7, #10]
 800a542:	697b      	ldr	r3, [r7, #20]
 800a544:	9301      	str	r3, [sp, #4]
 800a546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a548:	9300      	str	r3, [sp, #0]
 800a54a:	4603      	mov	r3, r0
 800a54c:	68f8      	ldr	r0, [r7, #12]
 800a54e:	f000 f92d 	bl	800a7ac <I2C_RequestMemoryRead>
 800a552:	4603      	mov	r3, r0
 800a554:	2b00      	cmp	r3, #0
 800a556:	d005      	beq.n	800a564 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	2200      	movs	r2, #0
 800a55c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800a560:	2301      	movs	r3, #1
 800a562:	e0ad      	b.n	800a6c0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a568:	b29b      	uxth	r3, r3
 800a56a:	2bff      	cmp	r3, #255	; 0xff
 800a56c:	d90e      	bls.n	800a58c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	22ff      	movs	r2, #255	; 0xff
 800a572:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a578:	b2da      	uxtb	r2, r3
 800a57a:	8979      	ldrh	r1, [r7, #10]
 800a57c:	4b52      	ldr	r3, [pc, #328]	; (800a6c8 <HAL_I2C_Mem_Read+0x22c>)
 800a57e:	9300      	str	r3, [sp, #0]
 800a580:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a584:	68f8      	ldr	r0, [r7, #12]
 800a586:	f000 fb43 	bl	800ac10 <I2C_TransferConfig>
 800a58a:	e00f      	b.n	800a5ac <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a590:	b29a      	uxth	r2, r3
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a59a:	b2da      	uxtb	r2, r3
 800a59c:	8979      	ldrh	r1, [r7, #10]
 800a59e:	4b4a      	ldr	r3, [pc, #296]	; (800a6c8 <HAL_I2C_Mem_Read+0x22c>)
 800a5a0:	9300      	str	r3, [sp, #0]
 800a5a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a5a6:	68f8      	ldr	r0, [r7, #12]
 800a5a8:	f000 fb32 	bl	800ac10 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800a5ac:	697b      	ldr	r3, [r7, #20]
 800a5ae:	9300      	str	r3, [sp, #0]
 800a5b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	2104      	movs	r1, #4
 800a5b6:	68f8      	ldr	r0, [r7, #12]
 800a5b8:	f000 f970 	bl	800a89c <I2C_WaitOnFlagUntilTimeout>
 800a5bc:	4603      	mov	r3, r0
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d001      	beq.n	800a5c6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800a5c2:	2301      	movs	r3, #1
 800a5c4:	e07c      	b.n	800a6c0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5d0:	b2d2      	uxtb	r2, r2
 800a5d2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5d8:	1c5a      	adds	r2, r3, #1
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a5e2:	3b01      	subs	r3, #1
 800a5e4:	b29a      	uxth	r2, r3
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a5ee:	b29b      	uxth	r3, r3
 800a5f0:	3b01      	subs	r3, #1
 800a5f2:	b29a      	uxth	r2, r3
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a5fc:	b29b      	uxth	r3, r3
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d034      	beq.n	800a66c <HAL_I2C_Mem_Read+0x1d0>
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a606:	2b00      	cmp	r3, #0
 800a608:	d130      	bne.n	800a66c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a60a:	697b      	ldr	r3, [r7, #20]
 800a60c:	9300      	str	r3, [sp, #0]
 800a60e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a610:	2200      	movs	r2, #0
 800a612:	2180      	movs	r1, #128	; 0x80
 800a614:	68f8      	ldr	r0, [r7, #12]
 800a616:	f000 f941 	bl	800a89c <I2C_WaitOnFlagUntilTimeout>
 800a61a:	4603      	mov	r3, r0
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d001      	beq.n	800a624 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800a620:	2301      	movs	r3, #1
 800a622:	e04d      	b.n	800a6c0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a628:	b29b      	uxth	r3, r3
 800a62a:	2bff      	cmp	r3, #255	; 0xff
 800a62c:	d90e      	bls.n	800a64c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	22ff      	movs	r2, #255	; 0xff
 800a632:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a638:	b2da      	uxtb	r2, r3
 800a63a:	8979      	ldrh	r1, [r7, #10]
 800a63c:	2300      	movs	r3, #0
 800a63e:	9300      	str	r3, [sp, #0]
 800a640:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a644:	68f8      	ldr	r0, [r7, #12]
 800a646:	f000 fae3 	bl	800ac10 <I2C_TransferConfig>
 800a64a:	e00f      	b.n	800a66c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a650:	b29a      	uxth	r2, r3
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a65a:	b2da      	uxtb	r2, r3
 800a65c:	8979      	ldrh	r1, [r7, #10]
 800a65e:	2300      	movs	r3, #0
 800a660:	9300      	str	r3, [sp, #0]
 800a662:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a666:	68f8      	ldr	r0, [r7, #12]
 800a668:	f000 fad2 	bl	800ac10 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a670:	b29b      	uxth	r3, r3
 800a672:	2b00      	cmp	r3, #0
 800a674:	d19a      	bne.n	800a5ac <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a676:	697a      	ldr	r2, [r7, #20]
 800a678:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a67a:	68f8      	ldr	r0, [r7, #12]
 800a67c:	f000 f9a4 	bl	800a9c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a680:	4603      	mov	r3, r0
 800a682:	2b00      	cmp	r3, #0
 800a684:	d001      	beq.n	800a68a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800a686:	2301      	movs	r3, #1
 800a688:	e01a      	b.n	800a6c0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	2220      	movs	r2, #32
 800a690:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	6859      	ldr	r1, [r3, #4]
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	681a      	ldr	r2, [r3, #0]
 800a69c:	4b0b      	ldr	r3, [pc, #44]	; (800a6cc <HAL_I2C_Mem_Read+0x230>)
 800a69e:	400b      	ands	r3, r1
 800a6a0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	2220      	movs	r2, #32
 800a6a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	e000      	b.n	800a6c0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800a6be:	2302      	movs	r3, #2
  }
}
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	3718      	adds	r7, #24
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	bd80      	pop	{r7, pc}
 800a6c8:	80002400 	.word	0x80002400
 800a6cc:	fe00e800 	.word	0xfe00e800

0800a6d0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800a6d0:	b480      	push	{r7}
 800a6d2:	b083      	sub	sp, #12
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a6de:	b2db      	uxtb	r3, r3
}
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	370c      	adds	r7, #12
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ea:	4770      	bx	lr

0800a6ec <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800a6ec:	b480      	push	{r7}
 800a6ee:	b083      	sub	sp, #12
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	370c      	adds	r7, #12
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a702:	4770      	bx	lr

0800a704 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b086      	sub	sp, #24
 800a708:	af02      	add	r7, sp, #8
 800a70a:	60f8      	str	r0, [r7, #12]
 800a70c:	4608      	mov	r0, r1
 800a70e:	4611      	mov	r1, r2
 800a710:	461a      	mov	r2, r3
 800a712:	4603      	mov	r3, r0
 800a714:	817b      	strh	r3, [r7, #10]
 800a716:	460b      	mov	r3, r1
 800a718:	813b      	strh	r3, [r7, #8]
 800a71a:	4613      	mov	r3, r2
 800a71c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800a71e:	88fb      	ldrh	r3, [r7, #6]
 800a720:	b2da      	uxtb	r2, r3
 800a722:	8979      	ldrh	r1, [r7, #10]
 800a724:	4b20      	ldr	r3, [pc, #128]	; (800a7a8 <I2C_RequestMemoryWrite+0xa4>)
 800a726:	9300      	str	r3, [sp, #0]
 800a728:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a72c:	68f8      	ldr	r0, [r7, #12]
 800a72e:	f000 fa6f 	bl	800ac10 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a732:	69fa      	ldr	r2, [r7, #28]
 800a734:	69b9      	ldr	r1, [r7, #24]
 800a736:	68f8      	ldr	r0, [r7, #12]
 800a738:	f000 f8ff 	bl	800a93a <I2C_WaitOnTXISFlagUntilTimeout>
 800a73c:	4603      	mov	r3, r0
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d001      	beq.n	800a746 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800a742:	2301      	movs	r3, #1
 800a744:	e02c      	b.n	800a7a0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a746:	88fb      	ldrh	r3, [r7, #6]
 800a748:	2b01      	cmp	r3, #1
 800a74a:	d105      	bne.n	800a758 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a74c:	893b      	ldrh	r3, [r7, #8]
 800a74e:	b2da      	uxtb	r2, r3
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	629a      	str	r2, [r3, #40]	; 0x28
 800a756:	e015      	b.n	800a784 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a758:	893b      	ldrh	r3, [r7, #8]
 800a75a:	0a1b      	lsrs	r3, r3, #8
 800a75c:	b29b      	uxth	r3, r3
 800a75e:	b2da      	uxtb	r2, r3
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a766:	69fa      	ldr	r2, [r7, #28]
 800a768:	69b9      	ldr	r1, [r7, #24]
 800a76a:	68f8      	ldr	r0, [r7, #12]
 800a76c:	f000 f8e5 	bl	800a93a <I2C_WaitOnTXISFlagUntilTimeout>
 800a770:	4603      	mov	r3, r0
 800a772:	2b00      	cmp	r3, #0
 800a774:	d001      	beq.n	800a77a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800a776:	2301      	movs	r3, #1
 800a778:	e012      	b.n	800a7a0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a77a:	893b      	ldrh	r3, [r7, #8]
 800a77c:	b2da      	uxtb	r2, r3
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800a784:	69fb      	ldr	r3, [r7, #28]
 800a786:	9300      	str	r3, [sp, #0]
 800a788:	69bb      	ldr	r3, [r7, #24]
 800a78a:	2200      	movs	r2, #0
 800a78c:	2180      	movs	r1, #128	; 0x80
 800a78e:	68f8      	ldr	r0, [r7, #12]
 800a790:	f000 f884 	bl	800a89c <I2C_WaitOnFlagUntilTimeout>
 800a794:	4603      	mov	r3, r0
 800a796:	2b00      	cmp	r3, #0
 800a798:	d001      	beq.n	800a79e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800a79a:	2301      	movs	r3, #1
 800a79c:	e000      	b.n	800a7a0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800a79e:	2300      	movs	r3, #0
}
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	3710      	adds	r7, #16
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	bd80      	pop	{r7, pc}
 800a7a8:	80002000 	.word	0x80002000

0800a7ac <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b086      	sub	sp, #24
 800a7b0:	af02      	add	r7, sp, #8
 800a7b2:	60f8      	str	r0, [r7, #12]
 800a7b4:	4608      	mov	r0, r1
 800a7b6:	4611      	mov	r1, r2
 800a7b8:	461a      	mov	r2, r3
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	817b      	strh	r3, [r7, #10]
 800a7be:	460b      	mov	r3, r1
 800a7c0:	813b      	strh	r3, [r7, #8]
 800a7c2:	4613      	mov	r3, r2
 800a7c4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800a7c6:	88fb      	ldrh	r3, [r7, #6]
 800a7c8:	b2da      	uxtb	r2, r3
 800a7ca:	8979      	ldrh	r1, [r7, #10]
 800a7cc:	4b20      	ldr	r3, [pc, #128]	; (800a850 <I2C_RequestMemoryRead+0xa4>)
 800a7ce:	9300      	str	r3, [sp, #0]
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	68f8      	ldr	r0, [r7, #12]
 800a7d4:	f000 fa1c 	bl	800ac10 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a7d8:	69fa      	ldr	r2, [r7, #28]
 800a7da:	69b9      	ldr	r1, [r7, #24]
 800a7dc:	68f8      	ldr	r0, [r7, #12]
 800a7de:	f000 f8ac 	bl	800a93a <I2C_WaitOnTXISFlagUntilTimeout>
 800a7e2:	4603      	mov	r3, r0
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d001      	beq.n	800a7ec <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800a7e8:	2301      	movs	r3, #1
 800a7ea:	e02c      	b.n	800a846 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a7ec:	88fb      	ldrh	r3, [r7, #6]
 800a7ee:	2b01      	cmp	r3, #1
 800a7f0:	d105      	bne.n	800a7fe <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a7f2:	893b      	ldrh	r3, [r7, #8]
 800a7f4:	b2da      	uxtb	r2, r3
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	629a      	str	r2, [r3, #40]	; 0x28
 800a7fc:	e015      	b.n	800a82a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a7fe:	893b      	ldrh	r3, [r7, #8]
 800a800:	0a1b      	lsrs	r3, r3, #8
 800a802:	b29b      	uxth	r3, r3
 800a804:	b2da      	uxtb	r2, r3
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a80c:	69fa      	ldr	r2, [r7, #28]
 800a80e:	69b9      	ldr	r1, [r7, #24]
 800a810:	68f8      	ldr	r0, [r7, #12]
 800a812:	f000 f892 	bl	800a93a <I2C_WaitOnTXISFlagUntilTimeout>
 800a816:	4603      	mov	r3, r0
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d001      	beq.n	800a820 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800a81c:	2301      	movs	r3, #1
 800a81e:	e012      	b.n	800a846 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a820:	893b      	ldrh	r3, [r7, #8]
 800a822:	b2da      	uxtb	r2, r3
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800a82a:	69fb      	ldr	r3, [r7, #28]
 800a82c:	9300      	str	r3, [sp, #0]
 800a82e:	69bb      	ldr	r3, [r7, #24]
 800a830:	2200      	movs	r2, #0
 800a832:	2140      	movs	r1, #64	; 0x40
 800a834:	68f8      	ldr	r0, [r7, #12]
 800a836:	f000 f831 	bl	800a89c <I2C_WaitOnFlagUntilTimeout>
 800a83a:	4603      	mov	r3, r0
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d001      	beq.n	800a844 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800a840:	2301      	movs	r3, #1
 800a842:	e000      	b.n	800a846 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800a844:	2300      	movs	r3, #0
}
 800a846:	4618      	mov	r0, r3
 800a848:	3710      	adds	r7, #16
 800a84a:	46bd      	mov	sp, r7
 800a84c:	bd80      	pop	{r7, pc}
 800a84e:	bf00      	nop
 800a850:	80002000 	.word	0x80002000

0800a854 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800a854:	b480      	push	{r7}
 800a856:	b083      	sub	sp, #12
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	699b      	ldr	r3, [r3, #24]
 800a862:	f003 0302 	and.w	r3, r3, #2
 800a866:	2b02      	cmp	r3, #2
 800a868:	d103      	bne.n	800a872 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	2200      	movs	r2, #0
 800a870:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	699b      	ldr	r3, [r3, #24]
 800a878:	f003 0301 	and.w	r3, r3, #1
 800a87c:	2b01      	cmp	r3, #1
 800a87e:	d007      	beq.n	800a890 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	699a      	ldr	r2, [r3, #24]
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	f042 0201 	orr.w	r2, r2, #1
 800a88e:	619a      	str	r2, [r3, #24]
  }
}
 800a890:	bf00      	nop
 800a892:	370c      	adds	r7, #12
 800a894:	46bd      	mov	sp, r7
 800a896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89a:	4770      	bx	lr

0800a89c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b084      	sub	sp, #16
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	60f8      	str	r0, [r7, #12]
 800a8a4:	60b9      	str	r1, [r7, #8]
 800a8a6:	603b      	str	r3, [r7, #0]
 800a8a8:	4613      	mov	r3, r2
 800a8aa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a8ac:	e031      	b.n	800a912 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a8ae:	683b      	ldr	r3, [r7, #0]
 800a8b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8b4:	d02d      	beq.n	800a912 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a8b6:	f7fe fc2b 	bl	8009110 <HAL_GetTick>
 800a8ba:	4602      	mov	r2, r0
 800a8bc:	69bb      	ldr	r3, [r7, #24]
 800a8be:	1ad3      	subs	r3, r2, r3
 800a8c0:	683a      	ldr	r2, [r7, #0]
 800a8c2:	429a      	cmp	r2, r3
 800a8c4:	d302      	bcc.n	800a8cc <I2C_WaitOnFlagUntilTimeout+0x30>
 800a8c6:	683b      	ldr	r3, [r7, #0]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d122      	bne.n	800a912 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	699a      	ldr	r2, [r3, #24]
 800a8d2:	68bb      	ldr	r3, [r7, #8]
 800a8d4:	4013      	ands	r3, r2
 800a8d6:	68ba      	ldr	r2, [r7, #8]
 800a8d8:	429a      	cmp	r2, r3
 800a8da:	bf0c      	ite	eq
 800a8dc:	2301      	moveq	r3, #1
 800a8de:	2300      	movne	r3, #0
 800a8e0:	b2db      	uxtb	r3, r3
 800a8e2:	461a      	mov	r2, r3
 800a8e4:	79fb      	ldrb	r3, [r7, #7]
 800a8e6:	429a      	cmp	r2, r3
 800a8e8:	d113      	bne.n	800a912 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8ee:	f043 0220 	orr.w	r2, r3, #32
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	2220      	movs	r2, #32
 800a8fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	2200      	movs	r2, #0
 800a902:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	2200      	movs	r2, #0
 800a90a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800a90e:	2301      	movs	r3, #1
 800a910:	e00f      	b.n	800a932 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	699a      	ldr	r2, [r3, #24]
 800a918:	68bb      	ldr	r3, [r7, #8]
 800a91a:	4013      	ands	r3, r2
 800a91c:	68ba      	ldr	r2, [r7, #8]
 800a91e:	429a      	cmp	r2, r3
 800a920:	bf0c      	ite	eq
 800a922:	2301      	moveq	r3, #1
 800a924:	2300      	movne	r3, #0
 800a926:	b2db      	uxtb	r3, r3
 800a928:	461a      	mov	r2, r3
 800a92a:	79fb      	ldrb	r3, [r7, #7]
 800a92c:	429a      	cmp	r2, r3
 800a92e:	d0be      	beq.n	800a8ae <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a930:	2300      	movs	r3, #0
}
 800a932:	4618      	mov	r0, r3
 800a934:	3710      	adds	r7, #16
 800a936:	46bd      	mov	sp, r7
 800a938:	bd80      	pop	{r7, pc}

0800a93a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a93a:	b580      	push	{r7, lr}
 800a93c:	b084      	sub	sp, #16
 800a93e:	af00      	add	r7, sp, #0
 800a940:	60f8      	str	r0, [r7, #12]
 800a942:	60b9      	str	r1, [r7, #8]
 800a944:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a946:	e033      	b.n	800a9b0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a948:	687a      	ldr	r2, [r7, #4]
 800a94a:	68b9      	ldr	r1, [r7, #8]
 800a94c:	68f8      	ldr	r0, [r7, #12]
 800a94e:	f000 f87f 	bl	800aa50 <I2C_IsErrorOccurred>
 800a952:	4603      	mov	r3, r0
 800a954:	2b00      	cmp	r3, #0
 800a956:	d001      	beq.n	800a95c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a958:	2301      	movs	r3, #1
 800a95a:	e031      	b.n	800a9c0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a95c:	68bb      	ldr	r3, [r7, #8]
 800a95e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a962:	d025      	beq.n	800a9b0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a964:	f7fe fbd4 	bl	8009110 <HAL_GetTick>
 800a968:	4602      	mov	r2, r0
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	1ad3      	subs	r3, r2, r3
 800a96e:	68ba      	ldr	r2, [r7, #8]
 800a970:	429a      	cmp	r2, r3
 800a972:	d302      	bcc.n	800a97a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800a974:	68bb      	ldr	r3, [r7, #8]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d11a      	bne.n	800a9b0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	699b      	ldr	r3, [r3, #24]
 800a980:	f003 0302 	and.w	r3, r3, #2
 800a984:	2b02      	cmp	r3, #2
 800a986:	d013      	beq.n	800a9b0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a98c:	f043 0220 	orr.w	r2, r3, #32
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	2220      	movs	r2, #32
 800a998:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	2200      	movs	r2, #0
 800a9a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800a9ac:	2301      	movs	r3, #1
 800a9ae:	e007      	b.n	800a9c0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	699b      	ldr	r3, [r3, #24]
 800a9b6:	f003 0302 	and.w	r3, r3, #2
 800a9ba:	2b02      	cmp	r3, #2
 800a9bc:	d1c4      	bne.n	800a948 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a9be:	2300      	movs	r3, #0
}
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	3710      	adds	r7, #16
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	bd80      	pop	{r7, pc}

0800a9c8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b084      	sub	sp, #16
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	60f8      	str	r0, [r7, #12]
 800a9d0:	60b9      	str	r1, [r7, #8]
 800a9d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a9d4:	e02f      	b.n	800aa36 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a9d6:	687a      	ldr	r2, [r7, #4]
 800a9d8:	68b9      	ldr	r1, [r7, #8]
 800a9da:	68f8      	ldr	r0, [r7, #12]
 800a9dc:	f000 f838 	bl	800aa50 <I2C_IsErrorOccurred>
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d001      	beq.n	800a9ea <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a9e6:	2301      	movs	r3, #1
 800a9e8:	e02d      	b.n	800aa46 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a9ea:	f7fe fb91 	bl	8009110 <HAL_GetTick>
 800a9ee:	4602      	mov	r2, r0
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	1ad3      	subs	r3, r2, r3
 800a9f4:	68ba      	ldr	r2, [r7, #8]
 800a9f6:	429a      	cmp	r2, r3
 800a9f8:	d302      	bcc.n	800aa00 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800a9fa:	68bb      	ldr	r3, [r7, #8]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d11a      	bne.n	800aa36 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	699b      	ldr	r3, [r3, #24]
 800aa06:	f003 0320 	and.w	r3, r3, #32
 800aa0a:	2b20      	cmp	r3, #32
 800aa0c:	d013      	beq.n	800aa36 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa12:	f043 0220 	orr.w	r2, r3, #32
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	2220      	movs	r2, #32
 800aa1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	2200      	movs	r2, #0
 800aa26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	2200      	movs	r2, #0
 800aa2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800aa32:	2301      	movs	r3, #1
 800aa34:	e007      	b.n	800aa46 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	699b      	ldr	r3, [r3, #24]
 800aa3c:	f003 0320 	and.w	r3, r3, #32
 800aa40:	2b20      	cmp	r3, #32
 800aa42:	d1c8      	bne.n	800a9d6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800aa44:	2300      	movs	r3, #0
}
 800aa46:	4618      	mov	r0, r3
 800aa48:	3710      	adds	r7, #16
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	bd80      	pop	{r7, pc}
	...

0800aa50 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b08a      	sub	sp, #40	; 0x28
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	60f8      	str	r0, [r7, #12]
 800aa58:	60b9      	str	r1, [r7, #8]
 800aa5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	699b      	ldr	r3, [r3, #24]
 800aa68:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800aa72:	69bb      	ldr	r3, [r7, #24]
 800aa74:	f003 0310 	and.w	r3, r3, #16
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d068      	beq.n	800ab4e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	2210      	movs	r2, #16
 800aa82:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800aa84:	e049      	b.n	800ab1a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800aa86:	68bb      	ldr	r3, [r7, #8]
 800aa88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa8c:	d045      	beq.n	800ab1a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800aa8e:	f7fe fb3f 	bl	8009110 <HAL_GetTick>
 800aa92:	4602      	mov	r2, r0
 800aa94:	69fb      	ldr	r3, [r7, #28]
 800aa96:	1ad3      	subs	r3, r2, r3
 800aa98:	68ba      	ldr	r2, [r7, #8]
 800aa9a:	429a      	cmp	r2, r3
 800aa9c:	d302      	bcc.n	800aaa4 <I2C_IsErrorOccurred+0x54>
 800aa9e:	68bb      	ldr	r3, [r7, #8]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d13a      	bne.n	800ab1a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	685b      	ldr	r3, [r3, #4]
 800aaaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aaae:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800aab6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	699b      	ldr	r3, [r3, #24]
 800aabe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800aac2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aac6:	d121      	bne.n	800ab0c <I2C_IsErrorOccurred+0xbc>
 800aac8:	697b      	ldr	r3, [r7, #20]
 800aaca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aace:	d01d      	beq.n	800ab0c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800aad0:	7cfb      	ldrb	r3, [r7, #19]
 800aad2:	2b20      	cmp	r3, #32
 800aad4:	d01a      	beq.n	800ab0c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	685a      	ldr	r2, [r3, #4]
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800aae4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800aae6:	f7fe fb13 	bl	8009110 <HAL_GetTick>
 800aaea:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800aaec:	e00e      	b.n	800ab0c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800aaee:	f7fe fb0f 	bl	8009110 <HAL_GetTick>
 800aaf2:	4602      	mov	r2, r0
 800aaf4:	69fb      	ldr	r3, [r7, #28]
 800aaf6:	1ad3      	subs	r3, r2, r3
 800aaf8:	2b19      	cmp	r3, #25
 800aafa:	d907      	bls.n	800ab0c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800aafc:	6a3b      	ldr	r3, [r7, #32]
 800aafe:	f043 0320 	orr.w	r3, r3, #32
 800ab02:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800ab04:	2301      	movs	r3, #1
 800ab06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800ab0a:	e006      	b.n	800ab1a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	699b      	ldr	r3, [r3, #24]
 800ab12:	f003 0320 	and.w	r3, r3, #32
 800ab16:	2b20      	cmp	r3, #32
 800ab18:	d1e9      	bne.n	800aaee <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	699b      	ldr	r3, [r3, #24]
 800ab20:	f003 0320 	and.w	r3, r3, #32
 800ab24:	2b20      	cmp	r3, #32
 800ab26:	d003      	beq.n	800ab30 <I2C_IsErrorOccurred+0xe0>
 800ab28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d0aa      	beq.n	800aa86 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800ab30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d103      	bne.n	800ab40 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	2220      	movs	r2, #32
 800ab3e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800ab40:	6a3b      	ldr	r3, [r7, #32]
 800ab42:	f043 0304 	orr.w	r3, r3, #4
 800ab46:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800ab48:	2301      	movs	r3, #1
 800ab4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	699b      	ldr	r3, [r3, #24]
 800ab54:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800ab56:	69bb      	ldr	r3, [r7, #24]
 800ab58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d00b      	beq.n	800ab78 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800ab60:	6a3b      	ldr	r3, [r7, #32]
 800ab62:	f043 0301 	orr.w	r3, r3, #1
 800ab66:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ab70:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800ab72:	2301      	movs	r3, #1
 800ab74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800ab78:	69bb      	ldr	r3, [r7, #24]
 800ab7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d00b      	beq.n	800ab9a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800ab82:	6a3b      	ldr	r3, [r7, #32]
 800ab84:	f043 0308 	orr.w	r3, r3, #8
 800ab88:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ab92:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800ab94:	2301      	movs	r3, #1
 800ab96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800ab9a:	69bb      	ldr	r3, [r7, #24]
 800ab9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d00b      	beq.n	800abbc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800aba4:	6a3b      	ldr	r3, [r7, #32]
 800aba6:	f043 0302 	orr.w	r3, r3, #2
 800abaa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800abb4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800abb6:	2301      	movs	r3, #1
 800abb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800abbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d01c      	beq.n	800abfe <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800abc4:	68f8      	ldr	r0, [r7, #12]
 800abc6:	f7ff fe45 	bl	800a854 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	6859      	ldr	r1, [r3, #4]
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	681a      	ldr	r2, [r3, #0]
 800abd4:	4b0d      	ldr	r3, [pc, #52]	; (800ac0c <I2C_IsErrorOccurred+0x1bc>)
 800abd6:	400b      	ands	r3, r1
 800abd8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800abde:	6a3b      	ldr	r3, [r7, #32]
 800abe0:	431a      	orrs	r2, r3
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	2220      	movs	r2, #32
 800abea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	2200      	movs	r2, #0
 800abf2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	2200      	movs	r2, #0
 800abfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800abfe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800ac02:	4618      	mov	r0, r3
 800ac04:	3728      	adds	r7, #40	; 0x28
 800ac06:	46bd      	mov	sp, r7
 800ac08:	bd80      	pop	{r7, pc}
 800ac0a:	bf00      	nop
 800ac0c:	fe00e800 	.word	0xfe00e800

0800ac10 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800ac10:	b480      	push	{r7}
 800ac12:	b087      	sub	sp, #28
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	60f8      	str	r0, [r7, #12]
 800ac18:	607b      	str	r3, [r7, #4]
 800ac1a:	460b      	mov	r3, r1
 800ac1c:	817b      	strh	r3, [r7, #10]
 800ac1e:	4613      	mov	r3, r2
 800ac20:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ac22:	897b      	ldrh	r3, [r7, #10]
 800ac24:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800ac28:	7a7b      	ldrb	r3, [r7, #9]
 800ac2a:	041b      	lsls	r3, r3, #16
 800ac2c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ac30:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ac36:	6a3b      	ldr	r3, [r7, #32]
 800ac38:	4313      	orrs	r3, r2
 800ac3a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ac3e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	685a      	ldr	r2, [r3, #4]
 800ac46:	6a3b      	ldr	r3, [r7, #32]
 800ac48:	0d5b      	lsrs	r3, r3, #21
 800ac4a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800ac4e:	4b08      	ldr	r3, [pc, #32]	; (800ac70 <I2C_TransferConfig+0x60>)
 800ac50:	430b      	orrs	r3, r1
 800ac52:	43db      	mvns	r3, r3
 800ac54:	ea02 0103 	and.w	r1, r2, r3
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	697a      	ldr	r2, [r7, #20]
 800ac5e:	430a      	orrs	r2, r1
 800ac60:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800ac62:	bf00      	nop
 800ac64:	371c      	adds	r7, #28
 800ac66:	46bd      	mov	sp, r7
 800ac68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6c:	4770      	bx	lr
 800ac6e:	bf00      	nop
 800ac70:	03ff63ff 	.word	0x03ff63ff

0800ac74 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800ac74:	b480      	push	{r7}
 800ac76:	b083      	sub	sp, #12
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
 800ac7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ac84:	b2db      	uxtb	r3, r3
 800ac86:	2b20      	cmp	r3, #32
 800ac88:	d138      	bne.n	800acfc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ac90:	2b01      	cmp	r3, #1
 800ac92:	d101      	bne.n	800ac98 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800ac94:	2302      	movs	r3, #2
 800ac96:	e032      	b.n	800acfe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2201      	movs	r2, #1
 800ac9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	2224      	movs	r2, #36	; 0x24
 800aca4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	681a      	ldr	r2, [r3, #0]
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	f022 0201 	bic.w	r2, r2, #1
 800acb6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	681a      	ldr	r2, [r3, #0]
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800acc6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	6819      	ldr	r1, [r3, #0]
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	683a      	ldr	r2, [r7, #0]
 800acd4:	430a      	orrs	r2, r1
 800acd6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	681a      	ldr	r2, [r3, #0]
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	f042 0201 	orr.w	r2, r2, #1
 800ace6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	2220      	movs	r2, #32
 800acec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	2200      	movs	r2, #0
 800acf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800acf8:	2300      	movs	r3, #0
 800acfa:	e000      	b.n	800acfe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800acfc:	2302      	movs	r3, #2
  }
}
 800acfe:	4618      	mov	r0, r3
 800ad00:	370c      	adds	r7, #12
 800ad02:	46bd      	mov	sp, r7
 800ad04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad08:	4770      	bx	lr

0800ad0a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800ad0a:	b480      	push	{r7}
 800ad0c:	b085      	sub	sp, #20
 800ad0e:	af00      	add	r7, sp, #0
 800ad10:	6078      	str	r0, [r7, #4]
 800ad12:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ad1a:	b2db      	uxtb	r3, r3
 800ad1c:	2b20      	cmp	r3, #32
 800ad1e:	d139      	bne.n	800ad94 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ad26:	2b01      	cmp	r3, #1
 800ad28:	d101      	bne.n	800ad2e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800ad2a:	2302      	movs	r3, #2
 800ad2c:	e033      	b.n	800ad96 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	2201      	movs	r2, #1
 800ad32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	2224      	movs	r2, #36	; 0x24
 800ad3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	681a      	ldr	r2, [r3, #0]
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	f022 0201 	bic.w	r2, r2, #1
 800ad4c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800ad5c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800ad5e:	683b      	ldr	r3, [r7, #0]
 800ad60:	021b      	lsls	r3, r3, #8
 800ad62:	68fa      	ldr	r2, [r7, #12]
 800ad64:	4313      	orrs	r3, r2
 800ad66:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	68fa      	ldr	r2, [r7, #12]
 800ad6e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	681a      	ldr	r2, [r3, #0]
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	f042 0201 	orr.w	r2, r2, #1
 800ad7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	2220      	movs	r2, #32
 800ad84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ad90:	2300      	movs	r3, #0
 800ad92:	e000      	b.n	800ad96 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800ad94:	2302      	movs	r3, #2
  }
}
 800ad96:	4618      	mov	r0, r3
 800ad98:	3714      	adds	r7, #20
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada0:	4770      	bx	lr
	...

0800ada4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800ada4:	b580      	push	{r7, lr}
 800ada6:	b084      	sub	sp, #16
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d101      	bne.n	800adb6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800adb2:	2301      	movs	r3, #1
 800adb4:	e0bf      	b.n	800af36 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800adbc:	b2db      	uxtb	r3, r3
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d106      	bne.n	800add0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	2200      	movs	r2, #0
 800adc6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800adca:	6878      	ldr	r0, [r7, #4]
 800adcc:	f7f6 fd3c 	bl	8001848 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	2202      	movs	r2, #2
 800add4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	699a      	ldr	r2, [r3, #24]
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800ade6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	6999      	ldr	r1, [r3, #24]
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	685a      	ldr	r2, [r3, #4]
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	689b      	ldr	r3, [r3, #8]
 800adf6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800adfc:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	691b      	ldr	r3, [r3, #16]
 800ae02:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	430a      	orrs	r2, r1
 800ae0a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	6899      	ldr	r1, [r3, #8]
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681a      	ldr	r2, [r3, #0]
 800ae16:	4b4a      	ldr	r3, [pc, #296]	; (800af40 <HAL_LTDC_Init+0x19c>)
 800ae18:	400b      	ands	r3, r1
 800ae1a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	695b      	ldr	r3, [r3, #20]
 800ae20:	041b      	lsls	r3, r3, #16
 800ae22:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	6899      	ldr	r1, [r3, #8]
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	699a      	ldr	r2, [r3, #24]
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	431a      	orrs	r2, r3
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	430a      	orrs	r2, r1
 800ae38:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	68d9      	ldr	r1, [r3, #12]
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681a      	ldr	r2, [r3, #0]
 800ae44:	4b3e      	ldr	r3, [pc, #248]	; (800af40 <HAL_LTDC_Init+0x19c>)
 800ae46:	400b      	ands	r3, r1
 800ae48:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	69db      	ldr	r3, [r3, #28]
 800ae4e:	041b      	lsls	r3, r3, #16
 800ae50:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	68d9      	ldr	r1, [r3, #12]
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	6a1a      	ldr	r2, [r3, #32]
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	431a      	orrs	r2, r3
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	430a      	orrs	r2, r1
 800ae66:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	6919      	ldr	r1, [r3, #16]
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681a      	ldr	r2, [r3, #0]
 800ae72:	4b33      	ldr	r3, [pc, #204]	; (800af40 <HAL_LTDC_Init+0x19c>)
 800ae74:	400b      	ands	r3, r1
 800ae76:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae7c:	041b      	lsls	r3, r3, #16
 800ae7e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	6919      	ldr	r1, [r3, #16]
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	431a      	orrs	r2, r3
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	430a      	orrs	r2, r1
 800ae94:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	6959      	ldr	r1, [r3, #20]
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681a      	ldr	r2, [r3, #0]
 800aea0:	4b27      	ldr	r3, [pc, #156]	; (800af40 <HAL_LTDC_Init+0x19c>)
 800aea2:	400b      	ands	r3, r1
 800aea4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aeaa:	041b      	lsls	r3, r3, #16
 800aeac:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	6959      	ldr	r1, [r3, #20]
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	431a      	orrs	r2, r3
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	430a      	orrs	r2, r1
 800aec2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800aeca:	021b      	lsls	r3, r3, #8
 800aecc:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800aed4:	041b      	lsls	r3, r3, #16
 800aed6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800aee6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800aeee:	68ba      	ldr	r2, [r7, #8]
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	4313      	orrs	r3, r2
 800aef4:	687a      	ldr	r2, [r7, #4]
 800aef6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800aefa:	431a      	orrs	r2, r3
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	430a      	orrs	r2, r1
 800af02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	f042 0206 	orr.w	r2, r2, #6
 800af12:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	699a      	ldr	r2, [r3, #24]
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	f042 0201 	orr.w	r2, r2, #1
 800af22:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	2200      	movs	r2, #0
 800af28:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	2201      	movs	r2, #1
 800af30:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800af34:	2300      	movs	r3, #0
}
 800af36:	4618      	mov	r0, r3
 800af38:	3710      	adds	r7, #16
 800af3a:	46bd      	mov	sp, r7
 800af3c:	bd80      	pop	{r7, pc}
 800af3e:	bf00      	nop
 800af40:	f000f800 	.word	0xf000f800

0800af44 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800af44:	b580      	push	{r7, lr}
 800af46:	b084      	sub	sp, #16
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af52:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af5a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	f003 0304 	and.w	r3, r3, #4
 800af62:	2b00      	cmp	r3, #0
 800af64:	d023      	beq.n	800afae <HAL_LTDC_IRQHandler+0x6a>
 800af66:	68bb      	ldr	r3, [r7, #8]
 800af68:	f003 0304 	and.w	r3, r3, #4
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d01e      	beq.n	800afae <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	f022 0204 	bic.w	r2, r2, #4
 800af7e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	2204      	movs	r2, #4
 800af86:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800af8e:	f043 0201 	orr.w	r2, r3, #1
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	2204      	movs	r2, #4
 800af9c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	2200      	movs	r2, #0
 800afa4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800afa8:	6878      	ldr	r0, [r7, #4]
 800afaa:	f000 f86f 	bl	800b08c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	f003 0302 	and.w	r3, r3, #2
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d023      	beq.n	800b000 <HAL_LTDC_IRQHandler+0xbc>
 800afb8:	68bb      	ldr	r3, [r7, #8]
 800afba:	f003 0302 	and.w	r3, r3, #2
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d01e      	beq.n	800b000 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	f022 0202 	bic.w	r2, r2, #2
 800afd0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	2202      	movs	r2, #2
 800afd8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800afe0:	f043 0202 	orr.w	r2, r3, #2
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	2204      	movs	r2, #4
 800afee:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	2200      	movs	r2, #0
 800aff6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800affa:	6878      	ldr	r0, [r7, #4]
 800affc:	f000 f846 	bl	800b08c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	f003 0301 	and.w	r3, r3, #1
 800b006:	2b00      	cmp	r3, #0
 800b008:	d01b      	beq.n	800b042 <HAL_LTDC_IRQHandler+0xfe>
 800b00a:	68bb      	ldr	r3, [r7, #8]
 800b00c:	f003 0301 	and.w	r3, r3, #1
 800b010:	2b00      	cmp	r3, #0
 800b012:	d016      	beq.n	800b042 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	f022 0201 	bic.w	r2, r2, #1
 800b022:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	2201      	movs	r2, #1
 800b02a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	2201      	movs	r2, #1
 800b030:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	2200      	movs	r2, #0
 800b038:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800b03c:	6878      	ldr	r0, [r7, #4]
 800b03e:	f7f9 fbb7 	bl	80047b0 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	f003 0308 	and.w	r3, r3, #8
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d01b      	beq.n	800b084 <HAL_LTDC_IRQHandler+0x140>
 800b04c:	68bb      	ldr	r3, [r7, #8]
 800b04e:	f003 0308 	and.w	r3, r3, #8
 800b052:	2b00      	cmp	r3, #0
 800b054:	d016      	beq.n	800b084 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	f022 0208 	bic.w	r2, r2, #8
 800b064:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	2208      	movs	r2, #8
 800b06c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	2201      	movs	r2, #1
 800b072:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	2200      	movs	r2, #0
 800b07a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800b07e:	6878      	ldr	r0, [r7, #4]
 800b080:	f000 f80e 	bl	800b0a0 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800b084:	bf00      	nop
 800b086:	3710      	adds	r7, #16
 800b088:	46bd      	mov	sp, r7
 800b08a:	bd80      	pop	{r7, pc}

0800b08c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800b08c:	b480      	push	{r7}
 800b08e:	b083      	sub	sp, #12
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800b094:	bf00      	nop
 800b096:	370c      	adds	r7, #12
 800b098:	46bd      	mov	sp, r7
 800b09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09e:	4770      	bx	lr

0800b0a0 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800b0a0:	b480      	push	{r7}
 800b0a2:	b083      	sub	sp, #12
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800b0a8:	bf00      	nop
 800b0aa:	370c      	adds	r7, #12
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b2:	4770      	bx	lr

0800b0b4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800b0b4:	b5b0      	push	{r4, r5, r7, lr}
 800b0b6:	b084      	sub	sp, #16
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	60f8      	str	r0, [r7, #12]
 800b0bc:	60b9      	str	r1, [r7, #8]
 800b0be:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800b0c6:	2b01      	cmp	r3, #1
 800b0c8:	d101      	bne.n	800b0ce <HAL_LTDC_ConfigLayer+0x1a>
 800b0ca:	2302      	movs	r3, #2
 800b0cc:	e02c      	b.n	800b128 <HAL_LTDC_ConfigLayer+0x74>
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	2201      	movs	r2, #1
 800b0d2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	2202      	movs	r2, #2
 800b0da:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800b0de:	68fa      	ldr	r2, [r7, #12]
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	2134      	movs	r1, #52	; 0x34
 800b0e4:	fb01 f303 	mul.w	r3, r1, r3
 800b0e8:	4413      	add	r3, r2
 800b0ea:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800b0ee:	68bb      	ldr	r3, [r7, #8]
 800b0f0:	4614      	mov	r4, r2
 800b0f2:	461d      	mov	r5, r3
 800b0f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b0f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b0f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b0fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b0fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b0fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b100:	682b      	ldr	r3, [r5, #0]
 800b102:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800b104:	687a      	ldr	r2, [r7, #4]
 800b106:	68b9      	ldr	r1, [r7, #8]
 800b108:	68f8      	ldr	r0, [r7, #12]
 800b10a:	f000 f849 	bl	800b1a0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	2201      	movs	r2, #1
 800b114:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	2201      	movs	r2, #1
 800b11a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	2200      	movs	r2, #0
 800b122:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800b126:	2300      	movs	r3, #0
}
 800b128:	4618      	mov	r0, r3
 800b12a:	3710      	adds	r7, #16
 800b12c:	46bd      	mov	sp, r7
 800b12e:	bdb0      	pop	{r4, r5, r7, pc}

0800b130 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 800b130:	b480      	push	{r7}
 800b132:	b083      	sub	sp, #12
 800b134:	af00      	add	r7, sp, #0
 800b136:	6078      	str	r0, [r7, #4]
 800b138:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800b140:	2b01      	cmp	r3, #1
 800b142:	d101      	bne.n	800b148 <HAL_LTDC_ProgramLineEvent+0x18>
 800b144:	2302      	movs	r3, #2
 800b146:	e023      	b.n	800b190 <HAL_LTDC_ProgramLineEvent+0x60>
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2201      	movs	r2, #1
 800b14c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2202      	movs	r2, #2
 800b154:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	f022 0201 	bic.w	r2, r2, #1
 800b166:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 800b168:	4a0c      	ldr	r2, [pc, #48]	; (800b19c <HAL_LTDC_ProgramLineEvent+0x6c>)
 800b16a:	683b      	ldr	r3, [r7, #0]
 800b16c:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	f042 0201 	orr.w	r2, r2, #1
 800b17c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	2201      	movs	r2, #1
 800b182:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	2200      	movs	r2, #0
 800b18a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800b18e:	2300      	movs	r3, #0
}
 800b190:	4618      	mov	r0, r3
 800b192:	370c      	adds	r7, #12
 800b194:	46bd      	mov	sp, r7
 800b196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19a:	4770      	bx	lr
 800b19c:	50001000 	.word	0x50001000

0800b1a0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800b1a0:	b480      	push	{r7}
 800b1a2:	b089      	sub	sp, #36	; 0x24
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	60f8      	str	r0, [r7, #12]
 800b1a8:	60b9      	str	r1, [r7, #8]
 800b1aa:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800b1ac:	68bb      	ldr	r3, [r7, #8]
 800b1ae:	685a      	ldr	r2, [r3, #4]
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	68db      	ldr	r3, [r3, #12]
 800b1b6:	0c1b      	lsrs	r3, r3, #16
 800b1b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b1bc:	4413      	add	r3, r2
 800b1be:	041b      	lsls	r3, r3, #16
 800b1c0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	461a      	mov	r2, r3
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	01db      	lsls	r3, r3, #7
 800b1cc:	4413      	add	r3, r2
 800b1ce:	3384      	adds	r3, #132	; 0x84
 800b1d0:	685b      	ldr	r3, [r3, #4]
 800b1d2:	68fa      	ldr	r2, [r7, #12]
 800b1d4:	6812      	ldr	r2, [r2, #0]
 800b1d6:	4611      	mov	r1, r2
 800b1d8:	687a      	ldr	r2, [r7, #4]
 800b1da:	01d2      	lsls	r2, r2, #7
 800b1dc:	440a      	add	r2, r1
 800b1de:	3284      	adds	r2, #132	; 0x84
 800b1e0:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800b1e4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800b1e6:	68bb      	ldr	r3, [r7, #8]
 800b1e8:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	68db      	ldr	r3, [r3, #12]
 800b1f0:	0c1b      	lsrs	r3, r3, #16
 800b1f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800b1f6:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800b1f8:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	4619      	mov	r1, r3
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	01db      	lsls	r3, r3, #7
 800b204:	440b      	add	r3, r1
 800b206:	3384      	adds	r3, #132	; 0x84
 800b208:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800b20a:	69fb      	ldr	r3, [r7, #28]
 800b20c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800b20e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800b210:	68bb      	ldr	r3, [r7, #8]
 800b212:	68da      	ldr	r2, [r3, #12]
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	68db      	ldr	r3, [r3, #12]
 800b21a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b21e:	4413      	add	r3, r2
 800b220:	041b      	lsls	r3, r3, #16
 800b222:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	461a      	mov	r2, r3
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	01db      	lsls	r3, r3, #7
 800b22e:	4413      	add	r3, r2
 800b230:	3384      	adds	r3, #132	; 0x84
 800b232:	689b      	ldr	r3, [r3, #8]
 800b234:	68fa      	ldr	r2, [r7, #12]
 800b236:	6812      	ldr	r2, [r2, #0]
 800b238:	4611      	mov	r1, r2
 800b23a:	687a      	ldr	r2, [r7, #4]
 800b23c:	01d2      	lsls	r2, r2, #7
 800b23e:	440a      	add	r2, r1
 800b240:	3284      	adds	r2, #132	; 0x84
 800b242:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800b246:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800b248:	68bb      	ldr	r3, [r7, #8]
 800b24a:	689a      	ldr	r2, [r3, #8]
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	68db      	ldr	r3, [r3, #12]
 800b252:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b256:	4413      	add	r3, r2
 800b258:	1c5a      	adds	r2, r3, #1
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	4619      	mov	r1, r3
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	01db      	lsls	r3, r3, #7
 800b264:	440b      	add	r3, r1
 800b266:	3384      	adds	r3, #132	; 0x84
 800b268:	4619      	mov	r1, r3
 800b26a:	69fb      	ldr	r3, [r7, #28]
 800b26c:	4313      	orrs	r3, r2
 800b26e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	461a      	mov	r2, r3
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	01db      	lsls	r3, r3, #7
 800b27a:	4413      	add	r3, r2
 800b27c:	3384      	adds	r3, #132	; 0x84
 800b27e:	691b      	ldr	r3, [r3, #16]
 800b280:	68fa      	ldr	r2, [r7, #12]
 800b282:	6812      	ldr	r2, [r2, #0]
 800b284:	4611      	mov	r1, r2
 800b286:	687a      	ldr	r2, [r7, #4]
 800b288:	01d2      	lsls	r2, r2, #7
 800b28a:	440a      	add	r2, r1
 800b28c:	3284      	adds	r2, #132	; 0x84
 800b28e:	f023 0307 	bic.w	r3, r3, #7
 800b292:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	461a      	mov	r2, r3
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	01db      	lsls	r3, r3, #7
 800b29e:	4413      	add	r3, r2
 800b2a0:	3384      	adds	r3, #132	; 0x84
 800b2a2:	461a      	mov	r2, r3
 800b2a4:	68bb      	ldr	r3, [r7, #8]
 800b2a6:	691b      	ldr	r3, [r3, #16]
 800b2a8:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800b2aa:	68bb      	ldr	r3, [r7, #8]
 800b2ac:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b2b0:	021b      	lsls	r3, r3, #8
 800b2b2:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800b2b4:	68bb      	ldr	r3, [r7, #8]
 800b2b6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800b2ba:	041b      	lsls	r3, r3, #16
 800b2bc:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800b2be:	68bb      	ldr	r3, [r7, #8]
 800b2c0:	699b      	ldr	r3, [r3, #24]
 800b2c2:	061b      	lsls	r3, r3, #24
 800b2c4:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	461a      	mov	r2, r3
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	01db      	lsls	r3, r3, #7
 800b2d0:	4413      	add	r3, r2
 800b2d2:	3384      	adds	r3, #132	; 0x84
 800b2d4:	699b      	ldr	r3, [r3, #24]
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	461a      	mov	r2, r3
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	01db      	lsls	r3, r3, #7
 800b2e0:	4413      	add	r3, r2
 800b2e2:	3384      	adds	r3, #132	; 0x84
 800b2e4:	461a      	mov	r2, r3
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800b2ea:	68bb      	ldr	r3, [r7, #8]
 800b2ec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b2f0:	461a      	mov	r2, r3
 800b2f2:	69fb      	ldr	r3, [r7, #28]
 800b2f4:	431a      	orrs	r2, r3
 800b2f6:	69bb      	ldr	r3, [r7, #24]
 800b2f8:	431a      	orrs	r2, r3
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	4619      	mov	r1, r3
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	01db      	lsls	r3, r3, #7
 800b304:	440b      	add	r3, r1
 800b306:	3384      	adds	r3, #132	; 0x84
 800b308:	4619      	mov	r1, r3
 800b30a:	697b      	ldr	r3, [r7, #20]
 800b30c:	4313      	orrs	r3, r2
 800b30e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	461a      	mov	r2, r3
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	01db      	lsls	r3, r3, #7
 800b31a:	4413      	add	r3, r2
 800b31c:	3384      	adds	r3, #132	; 0x84
 800b31e:	695b      	ldr	r3, [r3, #20]
 800b320:	68fa      	ldr	r2, [r7, #12]
 800b322:	6812      	ldr	r2, [r2, #0]
 800b324:	4611      	mov	r1, r2
 800b326:	687a      	ldr	r2, [r7, #4]
 800b328:	01d2      	lsls	r2, r2, #7
 800b32a:	440a      	add	r2, r1
 800b32c:	3284      	adds	r2, #132	; 0x84
 800b32e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b332:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	461a      	mov	r2, r3
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	01db      	lsls	r3, r3, #7
 800b33e:	4413      	add	r3, r2
 800b340:	3384      	adds	r3, #132	; 0x84
 800b342:	461a      	mov	r2, r3
 800b344:	68bb      	ldr	r3, [r7, #8]
 800b346:	695b      	ldr	r3, [r3, #20]
 800b348:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	461a      	mov	r2, r3
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	01db      	lsls	r3, r3, #7
 800b354:	4413      	add	r3, r2
 800b356:	3384      	adds	r3, #132	; 0x84
 800b358:	69da      	ldr	r2, [r3, #28]
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	4619      	mov	r1, r3
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	01db      	lsls	r3, r3, #7
 800b364:	440b      	add	r3, r1
 800b366:	3384      	adds	r3, #132	; 0x84
 800b368:	4619      	mov	r1, r3
 800b36a:	4b58      	ldr	r3, [pc, #352]	; (800b4cc <LTDC_SetConfig+0x32c>)
 800b36c:	4013      	ands	r3, r2
 800b36e:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800b370:	68bb      	ldr	r3, [r7, #8]
 800b372:	69da      	ldr	r2, [r3, #28]
 800b374:	68bb      	ldr	r3, [r7, #8]
 800b376:	6a1b      	ldr	r3, [r3, #32]
 800b378:	68f9      	ldr	r1, [r7, #12]
 800b37a:	6809      	ldr	r1, [r1, #0]
 800b37c:	4608      	mov	r0, r1
 800b37e:	6879      	ldr	r1, [r7, #4]
 800b380:	01c9      	lsls	r1, r1, #7
 800b382:	4401      	add	r1, r0
 800b384:	3184      	adds	r1, #132	; 0x84
 800b386:	4313      	orrs	r3, r2
 800b388:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	461a      	mov	r2, r3
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	01db      	lsls	r3, r3, #7
 800b394:	4413      	add	r3, r2
 800b396:	3384      	adds	r3, #132	; 0x84
 800b398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	461a      	mov	r2, r3
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	01db      	lsls	r3, r3, #7
 800b3a4:	4413      	add	r3, r2
 800b3a6:	3384      	adds	r3, #132	; 0x84
 800b3a8:	461a      	mov	r2, r3
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	461a      	mov	r2, r3
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	01db      	lsls	r3, r3, #7
 800b3b8:	4413      	add	r3, r2
 800b3ba:	3384      	adds	r3, #132	; 0x84
 800b3bc:	461a      	mov	r2, r3
 800b3be:	68bb      	ldr	r3, [r7, #8]
 800b3c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3c2:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800b3c4:	68bb      	ldr	r3, [r7, #8]
 800b3c6:	691b      	ldr	r3, [r3, #16]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d102      	bne.n	800b3d2 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800b3cc:	2304      	movs	r3, #4
 800b3ce:	61fb      	str	r3, [r7, #28]
 800b3d0:	e01b      	b.n	800b40a <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800b3d2:	68bb      	ldr	r3, [r7, #8]
 800b3d4:	691b      	ldr	r3, [r3, #16]
 800b3d6:	2b01      	cmp	r3, #1
 800b3d8:	d102      	bne.n	800b3e0 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800b3da:	2303      	movs	r3, #3
 800b3dc:	61fb      	str	r3, [r7, #28]
 800b3de:	e014      	b.n	800b40a <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800b3e0:	68bb      	ldr	r3, [r7, #8]
 800b3e2:	691b      	ldr	r3, [r3, #16]
 800b3e4:	2b04      	cmp	r3, #4
 800b3e6:	d00b      	beq.n	800b400 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800b3e8:	68bb      	ldr	r3, [r7, #8]
 800b3ea:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800b3ec:	2b02      	cmp	r3, #2
 800b3ee:	d007      	beq.n	800b400 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800b3f0:	68bb      	ldr	r3, [r7, #8]
 800b3f2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800b3f4:	2b03      	cmp	r3, #3
 800b3f6:	d003      	beq.n	800b400 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800b3f8:	68bb      	ldr	r3, [r7, #8]
 800b3fa:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800b3fc:	2b07      	cmp	r3, #7
 800b3fe:	d102      	bne.n	800b406 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800b400:	2302      	movs	r3, #2
 800b402:	61fb      	str	r3, [r7, #28]
 800b404:	e001      	b.n	800b40a <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800b406:	2301      	movs	r3, #1
 800b408:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	461a      	mov	r2, r3
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	01db      	lsls	r3, r3, #7
 800b414:	4413      	add	r3, r2
 800b416:	3384      	adds	r3, #132	; 0x84
 800b418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b41a:	68fa      	ldr	r2, [r7, #12]
 800b41c:	6812      	ldr	r2, [r2, #0]
 800b41e:	4611      	mov	r1, r2
 800b420:	687a      	ldr	r2, [r7, #4]
 800b422:	01d2      	lsls	r2, r2, #7
 800b424:	440a      	add	r2, r1
 800b426:	3284      	adds	r2, #132	; 0x84
 800b428:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800b42c:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800b42e:	68bb      	ldr	r3, [r7, #8]
 800b430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b432:	69fa      	ldr	r2, [r7, #28]
 800b434:	fb02 f303 	mul.w	r3, r2, r3
 800b438:	041a      	lsls	r2, r3, #16
 800b43a:	68bb      	ldr	r3, [r7, #8]
 800b43c:	6859      	ldr	r1, [r3, #4]
 800b43e:	68bb      	ldr	r3, [r7, #8]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	1acb      	subs	r3, r1, r3
 800b444:	69f9      	ldr	r1, [r7, #28]
 800b446:	fb01 f303 	mul.w	r3, r1, r3
 800b44a:	3307      	adds	r3, #7
 800b44c:	68f9      	ldr	r1, [r7, #12]
 800b44e:	6809      	ldr	r1, [r1, #0]
 800b450:	4608      	mov	r0, r1
 800b452:	6879      	ldr	r1, [r7, #4]
 800b454:	01c9      	lsls	r1, r1, #7
 800b456:	4401      	add	r1, r0
 800b458:	3184      	adds	r1, #132	; 0x84
 800b45a:	4313      	orrs	r3, r2
 800b45c:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	461a      	mov	r2, r3
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	01db      	lsls	r3, r3, #7
 800b468:	4413      	add	r3, r2
 800b46a:	3384      	adds	r3, #132	; 0x84
 800b46c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	4619      	mov	r1, r3
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	01db      	lsls	r3, r3, #7
 800b478:	440b      	add	r3, r1
 800b47a:	3384      	adds	r3, #132	; 0x84
 800b47c:	4619      	mov	r1, r3
 800b47e:	4b14      	ldr	r3, [pc, #80]	; (800b4d0 <LTDC_SetConfig+0x330>)
 800b480:	4013      	ands	r3, r2
 800b482:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	461a      	mov	r2, r3
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	01db      	lsls	r3, r3, #7
 800b48e:	4413      	add	r3, r2
 800b490:	3384      	adds	r3, #132	; 0x84
 800b492:	461a      	mov	r2, r3
 800b494:	68bb      	ldr	r3, [r7, #8]
 800b496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b498:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	461a      	mov	r2, r3
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	01db      	lsls	r3, r3, #7
 800b4a4:	4413      	add	r3, r2
 800b4a6:	3384      	adds	r3, #132	; 0x84
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	68fa      	ldr	r2, [r7, #12]
 800b4ac:	6812      	ldr	r2, [r2, #0]
 800b4ae:	4611      	mov	r1, r2
 800b4b0:	687a      	ldr	r2, [r7, #4]
 800b4b2:	01d2      	lsls	r2, r2, #7
 800b4b4:	440a      	add	r2, r1
 800b4b6:	3284      	adds	r2, #132	; 0x84
 800b4b8:	f043 0301 	orr.w	r3, r3, #1
 800b4bc:	6013      	str	r3, [r2, #0]
}
 800b4be:	bf00      	nop
 800b4c0:	3724      	adds	r7, #36	; 0x24
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c8:	4770      	bx	lr
 800b4ca:	bf00      	nop
 800b4cc:	fffff8f8 	.word	0xfffff8f8
 800b4d0:	fffff800 	.word	0xfffff800

0800b4d4 <HAL_MDMA_Abort>:
  *        and the Channel will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort(MDMA_HandleTypeDef *hmdma)
{
 800b4d4:	b580      	push	{r7, lr}
 800b4d6:	b084      	sub	sp, #16
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart =  HAL_GetTick();
 800b4dc:	f7fd fe18 	bl	8009110 <HAL_GetTick>
 800b4e0:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d101      	bne.n	800b4ec <HAL_MDMA_Abort+0x18>
  {
    return HAL_ERROR;
 800b4e8:	2301      	movs	r3, #1
 800b4ea:	e04a      	b.n	800b582 <HAL_MDMA_Abort+0xae>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b4f2:	b2db      	uxtb	r3, r3
 800b4f4:	2b02      	cmp	r3, #2
 800b4f6:	d008      	beq.n	800b50a <HAL_MDMA_Abort+0x36>
  {
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	2280      	movs	r2, #128	; 0x80
 800b4fc:	669a      	str	r2, [r3, #104]	; 0x68

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	2200      	movs	r2, #0
 800b502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800b506:	2301      	movs	r3, #1
 800b508:	e03b      	b.n	800b582 <HAL_MDMA_Abort+0xae>
  }
  else
  {
    /* Disable all the transfer interrupts */
    __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	68da      	ldr	r2, [r3, #12]
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
 800b518:	60da      	str	r2, [r3, #12]

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	68da      	ldr	r2, [r3, #12]
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	f022 0201 	bic.w	r2, r2, #1
 800b528:	60da      	str	r2, [r3, #12]

    /* Check if the MDMA Channel is effectively disabled */
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800b52a:	e016      	b.n	800b55a <HAL_MDMA_Abort+0x86>
    {
      /* Check for the Timeout */
      if( (HAL_GetTick()  - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 800b52c:	f7fd fdf0 	bl	8009110 <HAL_GetTick>
 800b530:	4602      	mov	r2, r0
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	1ad3      	subs	r3, r2, r3
 800b536:	2b05      	cmp	r3, #5
 800b538:	d90f      	bls.n	800b55a <HAL_MDMA_Abort+0x86>
      {
        /* Update error code */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_TIMEOUT;
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b53e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	669a      	str	r2, [r3, #104]	; 0x68

        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	2200      	movs	r2, #0
 800b54a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Change the MDMA state */
        hmdma->State = HAL_MDMA_STATE_ERROR;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	2203      	movs	r2, #3
 800b552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        return HAL_ERROR;
 800b556:	2301      	movs	r3, #1
 800b558:	e013      	b.n	800b582 <HAL_MDMA_Abort+0xae>
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	68db      	ldr	r3, [r3, #12]
 800b560:	f003 0301 	and.w	r3, r3, #1
 800b564:	2b00      	cmp	r3, #0
 800b566:	d1e1      	bne.n	800b52c <HAL_MDMA_Abort+0x58>
      }
    }

    /* Clear all interrupt flags */
    __HAL_MDMA_CLEAR_FLAG(hmdma, (MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BT | MDMA_FLAG_BRT | MDMA_FLAG_BFTC));
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	221f      	movs	r2, #31
 800b56e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	2200      	movs	r2, #0
 800b574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Change the MDMA state*/
    hmdma->State = HAL_MDMA_STATE_READY;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	2201      	movs	r2, #1
 800b57c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

  return HAL_OK;
 800b580:	2300      	movs	r3, #0
}
 800b582:	4618      	mov	r0, r3
 800b584:	3710      	adds	r7, #16
 800b586:	46bd      	mov	sp, r7
 800b588:	bd80      	pop	{r7, pc}

0800b58a <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 800b58a:	b480      	push	{r7}
 800b58c:	b083      	sub	sp, #12
 800b58e:	af00      	add	r7, sp, #0
 800b590:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	2b00      	cmp	r3, #0
 800b596:	d101      	bne.n	800b59c <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800b598:	2301      	movs	r3, #1
 800b59a:	e017      	b.n	800b5cc <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b5a2:	b2db      	uxtb	r3, r3
 800b5a4:	2b02      	cmp	r3, #2
 800b5a6:	d004      	beq.n	800b5b2 <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	2280      	movs	r2, #128	; 0x80
 800b5ac:	669a      	str	r2, [r3, #104]	; 0x68

    return HAL_ERROR;
 800b5ae:	2301      	movs	r3, #1
 800b5b0:	e00c      	b.n	800b5cc <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	2204      	movs	r2, #4
 800b5b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	68da      	ldr	r2, [r3, #12]
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	f022 0201 	bic.w	r2, r2, #1
 800b5c8:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 800b5ca:	2300      	movs	r3, #0
}
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	370c      	adds	r7, #12
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d6:	4770      	bx	lr

0800b5d8 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b086      	sub	sp, #24
 800b5dc:	af02      	add	r7, sp, #8
 800b5de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 800b5e4:	f7fd fd94 	bl	8009110 <HAL_GetTick>
 800b5e8:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d102      	bne.n	800b5f6 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 800b5f0:	2301      	movs	r3, #1
 800b5f2:	73fb      	strb	r3, [r7, #15]
 800b5f4:	e0a5      	b.n	800b742 <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY    (hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP         (hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b600:	2b00      	cmp	r3, #0
 800b602:	f040 809e 	bne.w	800b742 <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 800b606:	6878      	ldr	r0, [r7, #4]
 800b608:	f7f6 f9ec 	bl	80019e4 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 800b60c:	f241 3188 	movw	r1, #5000	; 0x1388
 800b610:	6878      	ldr	r0, [r7, #4]
 800b612:	f000 fd44 	bl	800c09e <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	689a      	ldr	r2, [r3, #8]
 800b61c:	4b4b      	ldr	r3, [pc, #300]	; (800b74c <HAL_OSPI_Init+0x174>)
 800b61e:	4013      	ands	r3, r2
 800b620:	687a      	ldr	r2, [r7, #4]
 800b622:	68d1      	ldr	r1, [r2, #12]
 800b624:	687a      	ldr	r2, [r7, #4]
 800b626:	6912      	ldr	r2, [r2, #16]
 800b628:	3a01      	subs	r2, #1
 800b62a:	0412      	lsls	r2, r2, #16
 800b62c:	4311      	orrs	r1, r2
 800b62e:	687a      	ldr	r2, [r7, #4]
 800b630:	6952      	ldr	r2, [r2, #20]
 800b632:	3a01      	subs	r2, #1
 800b634:	0212      	lsls	r2, r2, #8
 800b636:	4311      	orrs	r1, r2
 800b638:	687a      	ldr	r2, [r7, #4]
 800b63a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800b63c:	4311      	orrs	r1, r2
 800b63e:	687a      	ldr	r2, [r7, #4]
 800b640:	69d2      	ldr	r2, [r2, #28]
 800b642:	4311      	orrs	r1, r2
 800b644:	687a      	ldr	r2, [r7, #4]
 800b646:	6812      	ldr	r2, [r2, #0]
 800b648:	430b      	orrs	r3, r1
 800b64a:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	68db      	ldr	r3, [r3, #12]
 800b652:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	6a1a      	ldr	r2, [r3, #32]
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	430a      	orrs	r2, r1
 800b660:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b666:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	430a      	orrs	r2, r1
 800b672:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	687a      	ldr	r2, [r7, #4]
 800b67a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800b67c:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	685b      	ldr	r3, [r3, #4]
 800b68c:	3b01      	subs	r3, #1
 800b68e:	021a      	lsls	r2, r3, #8
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	430a      	orrs	r2, r1
 800b696:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b69c:	9300      	str	r3, [sp, #0]
 800b69e:	68bb      	ldr	r3, [r7, #8]
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	2120      	movs	r1, #32
 800b6a4:	6878      	ldr	r0, [r7, #4]
 800b6a6:	f000 fd45 	bl	800c134 <OSPI_WaitFlagStateUntilTimeout>
 800b6aa:	4603      	mov	r3, r0
 800b6ac:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800b6ae:	7bfb      	ldrb	r3, [r7, #15]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d146      	bne.n	800b742 <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	68db      	ldr	r3, [r3, #12]
 800b6ba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6c2:	1e5a      	subs	r2, r3, #1
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	430a      	orrs	r2, r1
 800b6ca:	60da      	str	r2, [r3, #12]
                  ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	689a      	ldr	r2, [r3, #8]
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	430a      	orrs	r2, r1
 800b6e0:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800b6ea:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6f6:	431a      	orrs	r2, r3
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	430a      	orrs	r2, r1
 800b6fe:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                  (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	681a      	ldr	r2, [r3, #0]
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	f042 0201 	orr.w	r2, r2, #1
 800b710:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	699b      	ldr	r3, [r3, #24]
 800b716:	2b02      	cmp	r3, #2
 800b718:	d107      	bne.n	800b72a <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	689a      	ldr	r2, [r3, #8]
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	f042 0202 	orr.w	r2, r2, #2
 800b728:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	68db      	ldr	r3, [r3, #12]
 800b72e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b732:	d103      	bne.n	800b73c <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	2201      	movs	r2, #1
 800b738:	651a      	str	r2, [r3, #80]	; 0x50
 800b73a:	e002      	b.n	800b742 <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	2202      	movs	r2, #2
 800b740:	651a      	str	r2, [r3, #80]	; 0x50
      }
    }
  }

  /* Return function status */
  return status;
 800b742:	7bfb      	ldrb	r3, [r7, #15]
}
 800b744:	4618      	mov	r0, r3
 800b746:	3710      	adds	r7, #16
 800b748:	46bd      	mov	sp, r7
 800b74a:	bd80      	pop	{r7, pc}
 800b74c:	f8e0f8f4 	.word	0xf8e0f8f4

0800b750 <HAL_OSPI_DeInit>:
  * @brief  De-Initialize the OSPI peripheral.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_DeInit(OSPI_HandleTypeDef *hospi)
{
 800b750:	b580      	push	{r7, lr}
 800b752:	b084      	sub	sp, #16
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b758:	2300      	movs	r3, #0
 800b75a:	73fb      	strb	r3, [r7, #15]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d102      	bne.n	800b768 <HAL_OSPI_DeInit+0x18>
  {
    status = HAL_ERROR;
 800b762:	2301      	movs	r3, #1
 800b764:	73fb      	strb	r3, [r7, #15]
 800b766:	e015      	b.n	800b794 <HAL_OSPI_DeInit+0x44>
    /* No error code can be set set as the handler is null */
  }
  else
  {
     /* Disable OctoSPI */
     __HAL_OSPI_DISABLE(hospi);
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	681a      	ldr	r2, [r3, #0]
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	f022 0201 	bic.w	r2, r2, #1
 800b776:	601a      	str	r2, [r3, #0]

     /* Disable free running clock if needed : must be done after OSPI disable */
     CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	689a      	ldr	r2, [r3, #8]
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	f022 0202 	bic.w	r2, r2, #2
 800b786:	609a      	str	r2, [r3, #8]

     /* DeInit the low level hardware */
     hospi->MspDeInitCallback(hospi);
#else
     /* De-initialize the low-level hardware */
     HAL_OSPI_MspDeInit(hospi);
 800b788:	6878      	ldr	r0, [r7, #4]
 800b78a:	f7f6 f96f 	bl	8001a6c <HAL_OSPI_MspDeInit>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

     /* Reset the driver state */
     hospi->State = HAL_OSPI_STATE_RESET;
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	2200      	movs	r2, #0
 800b792:	651a      	str	r2, [r3, #80]	; 0x50
  }

  return status;
 800b794:	7bfb      	ldrb	r3, [r7, #15]
}
 800b796:	4618      	mov	r0, r3
 800b798:	3710      	adds	r7, #16
 800b79a:	46bd      	mov	sp, r7
 800b79c:	bd80      	pop	{r7, pc}
	...

0800b7a0 <HAL_OSPI_IRQHandler>:
  * @brief  Handle OSPI interrupt request.
  * @param  hospi : OSPI handle
  * @retval None
  */
void HAL_OSPI_IRQHandler(OSPI_HandleTypeDef *hospi)
{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b086      	sub	sp, #24
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	3350      	adds	r3, #80	; 0x50
 800b7ae:	617b      	str	r3, [r7, #20]
  uint32_t flag           = hospi->Instance->SR;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	6a1b      	ldr	r3, [r3, #32]
 800b7b6:	613b      	str	r3, [r7, #16]
  uint32_t itsource       = hospi->Instance->CR;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	60fb      	str	r3, [r7, #12]
  uint32_t currentstate   = hospi->State;
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7c4:	60bb      	str	r3, [r7, #8]

  /* OctoSPI fifo threshold interrupt occurred -------------------------------*/
  if (((flag & HAL_OSPI_FLAG_FT) != 0U) && ((itsource & HAL_OSPI_IT_FT) != 0U))
 800b7c6:	693b      	ldr	r3, [r7, #16]
 800b7c8:	f003 0304 	and.w	r3, r3, #4
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d03a      	beq.n	800b846 <HAL_OSPI_IRQHandler+0xa6>
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d035      	beq.n	800b846 <HAL_OSPI_IRQHandler+0xa6>
  {
    if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 800b7da:	68bb      	ldr	r3, [r7, #8]
 800b7dc:	2b18      	cmp	r3, #24
 800b7de:	d10f      	bne.n	800b800 <HAL_OSPI_IRQHandler+0x60>
    {
      /* Write a data in the fifo */
      *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7e4:	781a      	ldrb	r2, [r3, #0]
 800b7e6:	697b      	ldr	r3, [r7, #20]
 800b7e8:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7ee:	1c5a      	adds	r2, r3, #1
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	641a      	str	r2, [r3, #64]	; 0x40
      hospi->XferCount--;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b7f8:	1e5a      	subs	r2, r3, #1
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	649a      	str	r2, [r3, #72]	; 0x48
 800b7fe:	e012      	b.n	800b826 <HAL_OSPI_IRQHandler+0x86>
    }
    else if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800b800:	68bb      	ldr	r3, [r7, #8]
 800b802:	2b28      	cmp	r3, #40	; 0x28
 800b804:	d10f      	bne.n	800b826 <HAL_OSPI_IRQHandler+0x86>
    {
      /* Read a data from the fifo */
      *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b80a:	697a      	ldr	r2, [r7, #20]
 800b80c:	7812      	ldrb	r2, [r2, #0]
 800b80e:	b2d2      	uxtb	r2, r2
 800b810:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b816:	1c5a      	adds	r2, r3, #1
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	641a      	str	r2, [r3, #64]	; 0x40
      hospi->XferCount--;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b820:	1e5a      	subs	r2, r3, #1
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	649a      	str	r2, [r3, #72]	; 0x48
    else
    {
      /* Nothing to do */
    }

    if (hospi->XferCount == 0U)
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d107      	bne.n	800b83e <HAL_OSPI_IRQHandler+0x9e>
    {
      /* All data have been received or transmitted for the transfer */
      /* Disable fifo threshold interrupt */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_FT);
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	681a      	ldr	r2, [r3, #0]
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b83c:	601a      	str	r2, [r3, #0]

    /* Fifo threshold callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->FifoThresholdCallback(hospi);
#else
    HAL_OSPI_FifoThresholdCallback(hospi);
 800b83e:	6878      	ldr	r0, [r7, #4]
 800b840:	f000 fb7c 	bl	800bf3c <HAL_OSPI_FifoThresholdCallback>
 800b844:	e0e7      	b.n	800ba16 <HAL_OSPI_IRQHandler+0x276>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)*/
  }
  /* OctoSPI transfer complete interrupt occurred ----------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TC) != 0U) && ((itsource & HAL_OSPI_IT_TC) != 0U))
 800b846:	693b      	ldr	r3, [r7, #16]
 800b848:	f003 0302 	and.w	r3, r3, #2
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d067      	beq.n	800b920 <HAL_OSPI_IRQHandler+0x180>
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b856:	2b00      	cmp	r3, #0
 800b858:	d062      	beq.n	800b920 <HAL_OSPI_IRQHandler+0x180>
  {
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800b85a:	68bb      	ldr	r3, [r7, #8]
 800b85c:	2b28      	cmp	r3, #40	; 0x28
 800b85e:	d131      	bne.n	800b8c4 <HAL_OSPI_IRQHandler+0x124>
    {
      if ((hospi->XferCount > 0U) && ((flag & OCTOSPI_SR_FLEVEL) != 0U))
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b864:	2b00      	cmp	r3, #0
 800b866:	d015      	beq.n	800b894 <HAL_OSPI_IRQHandler+0xf4>
 800b868:	693b      	ldr	r3, [r7, #16]
 800b86a:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d010      	beq.n	800b894 <HAL_OSPI_IRQHandler+0xf4>
      {
        /* Read the last data received in the fifo */
        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b876:	697a      	ldr	r2, [r7, #20]
 800b878:	7812      	ldrb	r2, [r2, #0]
 800b87a:	b2d2      	uxtb	r2, r2
 800b87c:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b882:	1c5a      	adds	r2, r3, #1
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	641a      	str	r2, [r3, #64]	; 0x40
        hospi->XferCount--;
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b88c:	1e5a      	subs	r2, r3, #1
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	649a      	str	r2, [r3, #72]	; 0x48
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800b892:	e0bd      	b.n	800ba10 <HAL_OSPI_IRQHandler+0x270>
      }
      else if(hospi->XferCount == 0U)
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b898:	2b00      	cmp	r3, #0
 800b89a:	f040 80b9 	bne.w	800ba10 <HAL_OSPI_IRQHandler+0x270>
      {
        /* Clear flag */
        hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	2202      	movs	r2, #2
 800b8a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Disable the interrupts */
        __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	681a      	ldr	r2, [r3, #0]
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 800b8b4:	601a      	str	r2, [r3, #0]

        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	2202      	movs	r2, #2
 800b8ba:	651a      	str	r2, [r3, #80]	; 0x50

        /* RX complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->RxCpltCallback(hospi);
#else
        HAL_OSPI_RxCpltCallback(hospi);
 800b8bc:	6878      	ldr	r0, [r7, #4]
 800b8be:	f000 fb51 	bl	800bf64 <HAL_OSPI_RxCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800b8c2:	e0a5      	b.n	800ba10 <HAL_OSPI_IRQHandler+0x270>
      }
    }
    else
    {
      /* Clear flag */
      hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	2202      	movs	r2, #2
 800b8ca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Disable the interrupts */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	681a      	ldr	r2, [r3, #0]
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 800b8da:	601a      	str	r2, [r3, #0]

      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	2202      	movs	r2, #2
 800b8e0:	651a      	str	r2, [r3, #80]	; 0x50

      if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 800b8e2:	68bb      	ldr	r3, [r7, #8]
 800b8e4:	2b18      	cmp	r3, #24
 800b8e6:	d103      	bne.n	800b8f0 <HAL_OSPI_IRQHandler+0x150>
      {
        /* TX complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->TxCpltCallback(hospi);
#else
        HAL_OSPI_TxCpltCallback(hospi);
 800b8e8:	6878      	ldr	r0, [r7, #4]
 800b8ea:	f000 fb45 	bl	800bf78 <HAL_OSPI_TxCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800b8ee:	e08f      	b.n	800ba10 <HAL_OSPI_IRQHandler+0x270>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
      }
      else if (currentstate == HAL_OSPI_STATE_BUSY_CMD)
 800b8f0:	68bb      	ldr	r3, [r7, #8]
 800b8f2:	2b08      	cmp	r3, #8
 800b8f4:	d103      	bne.n	800b8fe <HAL_OSPI_IRQHandler+0x15e>
      {
        /* Command complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->CmdCpltCallback(hospi);
#else
        HAL_OSPI_CmdCpltCallback(hospi);
 800b8f6:	6878      	ldr	r0, [r7, #4]
 800b8f8:	f000 fb2a 	bl	800bf50 <HAL_OSPI_CmdCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800b8fc:	e088      	b.n	800ba10 <HAL_OSPI_IRQHandler+0x270>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
      }
      else if (currentstate == HAL_OSPI_STATE_ABORT)
 800b8fe:	68bb      	ldr	r3, [r7, #8]
 800b900:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b904:	f040 8084 	bne.w	800ba10 <HAL_OSPI_IRQHandler+0x270>
      {
        if (hospi->ErrorCode == HAL_OSPI_ERROR_NONE)
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d103      	bne.n	800b918 <HAL_OSPI_IRQHandler+0x178>
          /* Abort called by the user */
          /* Abort complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
          hospi->AbortCpltCallback(hospi);
#else
          HAL_OSPI_AbortCpltCallback(hospi);
 800b910:	6878      	ldr	r0, [r7, #4]
 800b912:	f000 fb09 	bl	800bf28 <HAL_OSPI_AbortCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800b916:	e07b      	b.n	800ba10 <HAL_OSPI_IRQHandler+0x270>
          /* Abort due to an error (eg : DMA error) */
          /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
          hospi->ErrorCallback(hospi);
#else
          HAL_OSPI_ErrorCallback(hospi);
 800b918:	6878      	ldr	r0, [r7, #4]
 800b91a:	f000 fafb 	bl	800bf14 <HAL_OSPI_ErrorCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800b91e:	e077      	b.n	800ba10 <HAL_OSPI_IRQHandler+0x270>
        /* Nothing to do */
      }
    }
  }
  /* OctoSPI status match interrupt occurred ---------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_SM) != 0U) && ((itsource & HAL_OSPI_IT_SM) != 0U))
 800b920:	693b      	ldr	r3, [r7, #16]
 800b922:	f003 0308 	and.w	r3, r3, #8
 800b926:	2b00      	cmp	r3, #0
 800b928:	d01e      	beq.n	800b968 <HAL_OSPI_IRQHandler+0x1c8>
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b930:	2b00      	cmp	r3, #0
 800b932:	d019      	beq.n	800b968 <HAL_OSPI_IRQHandler+0x1c8>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_SM;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	2208      	movs	r2, #8
 800b93a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Check if automatic poll mode stop is activated */
    if ((hospi->Instance->CR & OCTOSPI_CR_APMS) != 0U)
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b946:	2b00      	cmp	r3, #0
 800b948:	d00a      	beq.n	800b960 <HAL_OSPI_IRQHandler+0x1c0>
    {
      /* Disable the interrupts */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_SM | HAL_OSPI_IT_TE);
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	681a      	ldr	r2, [r3, #0]
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800b958:	601a      	str	r2, [r3, #0]

      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	2202      	movs	r2, #2
 800b95e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Status match callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->StatusMatchCallback(hospi);
#else
    HAL_OSPI_StatusMatchCallback(hospi);
 800b960:	6878      	ldr	r0, [r7, #4]
 800b962:	f000 fb13 	bl	800bf8c <HAL_OSPI_StatusMatchCallback>
 800b966:	e056      	b.n	800ba16 <HAL_OSPI_IRQHandler+0x276>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
  }
  /* OctoSPI transfer error interrupt occurred -------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TE) != 0U) && ((itsource & HAL_OSPI_IT_TE) != 0U))
 800b968:	693b      	ldr	r3, [r7, #16]
 800b96a:	f003 0301 	and.w	r3, r3, #1
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d03c      	beq.n	800b9ec <HAL_OSPI_IRQHandler+0x24c>
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d037      	beq.n	800b9ec <HAL_OSPI_IRQHandler+0x24c>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_TE;
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	2201      	movs	r2, #1
 800b982:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable all interrupts */
    __HAL_OSPI_DISABLE_IT(hospi, (HAL_OSPI_IT_TO | HAL_OSPI_IT_SM | HAL_OSPI_IT_FT | HAL_OSPI_IT_TC | HAL_OSPI_IT_TE));
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	681a      	ldr	r2, [r3, #0]
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800b992:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_TRANSFER;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	2202      	movs	r2, #2
 800b998:	655a      	str	r2, [r3, #84]	; 0x54

    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	f003 0304 	and.w	r3, r3, #4
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d01a      	beq.n	800b9de <HAL_OSPI_IRQHandler+0x23e>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	681a      	ldr	r2, [r3, #0]
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	f022 0204 	bic.w	r2, r2, #4
 800b9b6:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      hospi->hmdma->XferAbortCallback = OSPI_DMAAbortCplt;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b9bc:	4a18      	ldr	r2, [pc, #96]	; (800ba20 <HAL_OSPI_IRQHandler+0x280>)
 800b9be:	659a      	str	r2, [r3, #88]	; 0x58
      if (HAL_MDMA_Abort_IT(hospi->hmdma) != HAL_OK)
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	f7ff fde0 	bl	800b58a <HAL_MDMA_Abort_IT>
 800b9ca:	4603      	mov	r3, r0
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d021      	beq.n	800ba14 <HAL_OSPI_IRQHandler+0x274>
      {
        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	2202      	movs	r2, #2
 800b9d4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->ErrorCallback(hospi);
#else
        HAL_OSPI_ErrorCallback(hospi);
 800b9d6:	6878      	ldr	r0, [r7, #4]
 800b9d8:	f000 fa9c 	bl	800bf14 <HAL_OSPI_ErrorCallback>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 800b9dc:	e01a      	b.n	800ba14 <HAL_OSPI_IRQHandler+0x274>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	2202      	movs	r2, #2
 800b9e2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
      hospi->ErrorCallback(hospi);
#else
      HAL_OSPI_ErrorCallback(hospi);
 800b9e4:	6878      	ldr	r0, [r7, #4]
 800b9e6:	f000 fa95 	bl	800bf14 <HAL_OSPI_ErrorCallback>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 800b9ea:	e013      	b.n	800ba14 <HAL_OSPI_IRQHandler+0x274>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
    }
  }
  /* OctoSPI timeout interrupt occurred --------------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TO) != 0U) && ((itsource & HAL_OSPI_IT_TO) != 0U))
 800b9ec:	693b      	ldr	r3, [r7, #16]
 800b9ee:	f003 0310 	and.w	r3, r3, #16
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d00f      	beq.n	800ba16 <HAL_OSPI_IRQHandler+0x276>
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d00a      	beq.n	800ba16 <HAL_OSPI_IRQHandler+0x276>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_TO;
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	2210      	movs	r2, #16
 800ba06:	625a      	str	r2, [r3, #36]	; 0x24

    /* Timeout callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->TimeOutCallback(hospi);
#else
    HAL_OSPI_TimeOutCallback(hospi);
 800ba08:	6878      	ldr	r0, [r7, #4]
 800ba0a:	f000 fac9 	bl	800bfa0 <HAL_OSPI_TimeOutCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800ba0e:	e002      	b.n	800ba16 <HAL_OSPI_IRQHandler+0x276>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800ba10:	bf00      	nop
 800ba12:	e000      	b.n	800ba16 <HAL_OSPI_IRQHandler+0x276>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 800ba14:	bf00      	nop
}
 800ba16:	bf00      	nop
 800ba18:	3718      	adds	r7, #24
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	bd80      	pop	{r7, pc}
 800ba1e:	bf00      	nop
 800ba20:	0800c0bd 	.word	0x0800c0bd

0800ba24 <HAL_OSPI_Command>:
  * @param  cmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Command(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd, uint32_t Timeout)
{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b08a      	sub	sp, #40	; 0x28
 800ba28:	af02      	add	r7, sp, #8
 800ba2a:	60f8      	str	r0, [r7, #12]
 800ba2c:	60b9      	str	r1, [r7, #8]
 800ba2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 800ba30:	f7fd fb6e 	bl	8009110 <HAL_GetTick>
 800ba34:	61b8      	str	r0, [r7, #24]
    assert_param(IS_OSPI_ALT_BYTES_SIZE    (cmd->AlternateBytesSize));
    assert_param(IS_OSPI_ALT_BYTES_DTR_MODE(cmd->AlternateBytesDtrMode));
  }

  assert_param(IS_OSPI_DATA_MODE(cmd->DataMode));
  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800ba36:	68bb      	ldr	r3, [r7, #8]
 800ba38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba3a:	2b00      	cmp	r3, #0

  assert_param(IS_OSPI_DQS_MODE (cmd->DQSMode));
  assert_param(IS_OSPI_SIOO_MODE(cmd->SIOOMode));

  /* Check the state of the driver */
  state = hospi->State;
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba40:	617b      	str	r3, [r7, #20]
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 800ba42:	697b      	ldr	r3, [r7, #20]
 800ba44:	2b02      	cmp	r3, #2
 800ba46:	d104      	bne.n	800ba52 <HAL_OSPI_Command+0x2e>
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	68db      	ldr	r3, [r3, #12]
 800ba4c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ba50:	d115      	bne.n	800ba7e <HAL_OSPI_Command+0x5a>
 800ba52:	697b      	ldr	r3, [r7, #20]
 800ba54:	2b14      	cmp	r3, #20
 800ba56:	d107      	bne.n	800ba68 <HAL_OSPI_Command+0x44>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800ba58:	68bb      	ldr	r3, [r7, #8]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	2b02      	cmp	r3, #2
 800ba5e:	d00e      	beq.n	800ba7e <HAL_OSPI_Command+0x5a>
                                                || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 800ba60:	68bb      	ldr	r3, [r7, #8]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	2b03      	cmp	r3, #3
 800ba66:	d00a      	beq.n	800ba7e <HAL_OSPI_Command+0x5a>
 800ba68:	697b      	ldr	r3, [r7, #20]
 800ba6a:	2b24      	cmp	r3, #36	; 0x24
 800ba6c:	d15b      	bne.n	800bb26 <HAL_OSPI_Command+0x102>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 800ba6e:	68bb      	ldr	r3, [r7, #8]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	2b01      	cmp	r3, #1
 800ba74:	d003      	beq.n	800ba7e <HAL_OSPI_Command+0x5a>
                                                   (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))))
 800ba76:	68bb      	ldr	r3, [r7, #8]
 800ba78:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 800ba7a:	2b03      	cmp	r3, #3
 800ba7c:	d153      	bne.n	800bb26 <HAL_OSPI_Command+0x102>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	9300      	str	r3, [sp, #0]
 800ba82:	69bb      	ldr	r3, [r7, #24]
 800ba84:	2200      	movs	r2, #0
 800ba86:	2120      	movs	r1, #32
 800ba88:	68f8      	ldr	r0, [r7, #12]
 800ba8a:	f000 fb53 	bl	800c134 <OSPI_WaitFlagStateUntilTimeout>
 800ba8e:	4603      	mov	r3, r0
 800ba90:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 800ba92:	7ffb      	ldrb	r3, [r7, #31]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d14c      	bne.n	800bb32 <HAL_OSPI_Command+0x10e>
    {
      /* Initialize error code */
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the registers */
      status = OSPI_ConfigCmd(hospi, cmd);
 800ba9e:	68b9      	ldr	r1, [r7, #8]
 800baa0:	68f8      	ldr	r0, [r7, #12]
 800baa2:	f000 fb7f 	bl	800c1a4 <OSPI_ConfigCmd>
 800baa6:	4603      	mov	r3, r0
 800baa8:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 800baaa:	7ffb      	ldrb	r3, [r7, #31]
 800baac:	2b00      	cmp	r3, #0
 800baae:	d140      	bne.n	800bb32 <HAL_OSPI_Command+0x10e>
      {
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 800bab0:	68bb      	ldr	r3, [r7, #8]
 800bab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d10e      	bne.n	800bad6 <HAL_OSPI_Command+0xb2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	9300      	str	r3, [sp, #0]
 800babc:	69bb      	ldr	r3, [r7, #24]
 800babe:	2201      	movs	r2, #1
 800bac0:	2102      	movs	r1, #2
 800bac2:	68f8      	ldr	r0, [r7, #12]
 800bac4:	f000 fb36 	bl	800c134 <OSPI_WaitFlagStateUntilTimeout>
 800bac8:	4603      	mov	r3, r0
 800baca:	77fb      	strb	r3, [r7, #31]

          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	2202      	movs	r2, #2
 800bad2:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 800bad4:	e02d      	b.n	800bb32 <HAL_OSPI_Command+0x10e>
        }
        else
        {
          /* Update the state */
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 800bad6:	68bb      	ldr	r3, [r7, #8]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d103      	bne.n	800bae6 <HAL_OSPI_Command+0xc2>
          {
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	2204      	movs	r2, #4
 800bae2:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 800bae4:	e025      	b.n	800bb32 <HAL_OSPI_Command+0x10e>
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 800bae6:	68bb      	ldr	r3, [r7, #8]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	2b01      	cmp	r3, #1
 800baec:	d10b      	bne.n	800bb06 <HAL_OSPI_Command+0xe2>
          {
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800baf2:	2b24      	cmp	r3, #36	; 0x24
 800baf4:	d103      	bne.n	800bafe <HAL_OSPI_Command+0xda>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	2204      	movs	r2, #4
 800bafa:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 800bafc:	e019      	b.n	800bb32 <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	2214      	movs	r2, #20
 800bb02:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 800bb04:	e015      	b.n	800bb32 <HAL_OSPI_Command+0x10e>
            }
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800bb06:	68bb      	ldr	r3, [r7, #8]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	2b02      	cmp	r3, #2
 800bb0c:	d111      	bne.n	800bb32 <HAL_OSPI_Command+0x10e>
          {
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb12:	2b14      	cmp	r3, #20
 800bb14:	d103      	bne.n	800bb1e <HAL_OSPI_Command+0xfa>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	2204      	movs	r2, #4
 800bb1a:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 800bb1c:	e009      	b.n	800bb32 <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	2224      	movs	r2, #36	; 0x24
 800bb22:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 800bb24:	e005      	b.n	800bb32 <HAL_OSPI_Command+0x10e>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 800bb26:	2301      	movs	r3, #1
 800bb28:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	2210      	movs	r2, #16
 800bb2e:	655a      	str	r2, [r3, #84]	; 0x54
 800bb30:	e000      	b.n	800bb34 <HAL_OSPI_Command+0x110>
    if (status == HAL_OK)
 800bb32:	bf00      	nop
  }

  /* Return function status */
  return status;
 800bb34:	7ffb      	ldrb	r3, [r7, #31]
}
 800bb36:	4618      	mov	r0, r3
 800bb38:	3720      	adds	r7, #32
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	bd80      	pop	{r7, pc}

0800bb3e <HAL_OSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Transmit(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 800bb3e:	b580      	push	{r7, lr}
 800bb40:	b08a      	sub	sp, #40	; 0x28
 800bb42:	af02      	add	r7, sp, #8
 800bb44:	60f8      	str	r0, [r7, #12]
 800bb46:	60b9      	str	r1, [r7, #8]
 800bb48:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800bb4a:	f7fd fae1 	bl	8009110 <HAL_GetTick>
 800bb4e:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	3350      	adds	r3, #80	; 0x50
 800bb56:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 800bb58:	68bb      	ldr	r3, [r7, #8]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d105      	bne.n	800bb6a <HAL_OSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
 800bb5e:	2301      	movs	r3, #1
 800bb60:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	2208      	movs	r2, #8
 800bb66:	655a      	str	r2, [r3, #84]	; 0x54
 800bb68:	e057      	b.n	800bc1a <HAL_OSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb6e:	2b04      	cmp	r3, #4
 800bb70:	d14e      	bne.n	800bc10 <HAL_OSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb78:	1c5a      	adds	r2, r3, #1
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	649a      	str	r2, [r3, #72]	; 0x48
      hospi->XferSize  = hospi->XferCount;
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	645a      	str	r2, [r3, #68]	; 0x44
      hospi->pBuffPtr  = pData;
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	68ba      	ldr	r2, [r7, #8]
 800bb8a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	681a      	ldr	r2, [r3, #0]
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800bb9a:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	9300      	str	r3, [sp, #0]
 800bba0:	69bb      	ldr	r3, [r7, #24]
 800bba2:	2201      	movs	r2, #1
 800bba4:	2104      	movs	r1, #4
 800bba6:	68f8      	ldr	r0, [r7, #12]
 800bba8:	f000 fac4 	bl	800c134 <OSPI_WaitFlagStateUntilTimeout>
 800bbac:	4603      	mov	r3, r0
 800bbae:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800bbb0:	7ffb      	ldrb	r3, [r7, #31]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d113      	bne.n	800bbde <HAL_OSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbba:	781a      	ldrb	r2, [r3, #0]
 800bbbc:	697b      	ldr	r3, [r7, #20]
 800bbbe:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbc4:	1c5a      	adds	r2, r3, #1
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	641a      	str	r2, [r3, #64]	; 0x40
        hospi->XferCount--;
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bbce:	1e5a      	subs	r2, r3, #1
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	649a      	str	r2, [r3, #72]	; 0x48
      } while (hospi->XferCount > 0U);
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d1df      	bne.n	800bb9c <HAL_OSPI_Transmit+0x5e>
 800bbdc:	e000      	b.n	800bbe0 <HAL_OSPI_Transmit+0xa2>
          break;
 800bbde:	bf00      	nop

      if (status == HAL_OK)
 800bbe0:	7ffb      	ldrb	r3, [r7, #31]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d119      	bne.n	800bc1a <HAL_OSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	9300      	str	r3, [sp, #0]
 800bbea:	69bb      	ldr	r3, [r7, #24]
 800bbec:	2201      	movs	r2, #1
 800bbee:	2102      	movs	r1, #2
 800bbf0:	68f8      	ldr	r0, [r7, #12]
 800bbf2:	f000 fa9f 	bl	800c134 <OSPI_WaitFlagStateUntilTimeout>
 800bbf6:	4603      	mov	r3, r0
 800bbf8:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800bbfa:	7ffb      	ldrb	r3, [r7, #31]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d10c      	bne.n	800bc1a <HAL_OSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	2202      	movs	r2, #2
 800bc06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	2202      	movs	r2, #2
 800bc0c:	651a      	str	r2, [r3, #80]	; 0x50
 800bc0e:	e004      	b.n	800bc1a <HAL_OSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 800bc10:	2301      	movs	r3, #1
 800bc12:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	2210      	movs	r2, #16
 800bc18:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }

  /* Return function status */
  return status;
 800bc1a:	7ffb      	ldrb	r3, [r7, #31]
}
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	3720      	adds	r7, #32
 800bc20:	46bd      	mov	sp, r7
 800bc22:	bd80      	pop	{r7, pc}

0800bc24 <HAL_OSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Receive(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b08c      	sub	sp, #48	; 0x30
 800bc28:	af02      	add	r7, sp, #8
 800bc2a:	60f8      	str	r0, [r7, #12]
 800bc2c:	60b9      	str	r1, [r7, #8]
 800bc2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800bc30:	f7fd fa6e 	bl	8009110 <HAL_GetTick>
 800bc34:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	3350      	adds	r3, #80	; 0x50
 800bc3c:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hospi->Instance->AR;
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bc44:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hospi->Instance->IR;
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800bc4e:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 800bc50:	68bb      	ldr	r3, [r7, #8]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d106      	bne.n	800bc64 <HAL_OSPI_Receive+0x40>
  {
    status = HAL_ERROR;
 800bc56:	2301      	movs	r3, #1
 800bc58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	2208      	movs	r2, #8
 800bc60:	655a      	str	r2, [r3, #84]	; 0x54
 800bc62:	e07c      	b.n	800bd5e <HAL_OSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc68:	2b04      	cmp	r3, #4
 800bc6a:	d172      	bne.n	800bd52 <HAL_OSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc72:	1c5a      	adds	r2, r3, #1
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	649a      	str	r2, [r3, #72]	; 0x48
      hospi->XferSize  = hospi->XferCount;
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	645a      	str	r2, [r3, #68]	; 0x44
      hospi->pBuffPtr  = pData;
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	68ba      	ldr	r2, [r7, #8]
 800bc84:	641a      	str	r2, [r3, #64]	; 0x40

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800bc98:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	68db      	ldr	r3, [r3, #12]
 800bc9e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bca2:	d104      	bne.n	800bcae <HAL_OSPI_Receive+0x8a>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	69ba      	ldr	r2, [r7, #24]
 800bcaa:	649a      	str	r2, [r3, #72]	; 0x48
 800bcac:	e011      	b.n	800bcd2 <HAL_OSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800bcb6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d004      	beq.n	800bcc8 <HAL_OSPI_Receive+0xa4>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	69ba      	ldr	r2, [r7, #24]
 800bcc4:	649a      	str	r2, [r3, #72]	; 0x48
 800bcc6:	e004      	b.n	800bcd2 <HAL_OSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	697a      	ldr	r2, [r7, #20]
 800bcce:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	9300      	str	r3, [sp, #0]
 800bcd6:	6a3b      	ldr	r3, [r7, #32]
 800bcd8:	2201      	movs	r2, #1
 800bcda:	2106      	movs	r1, #6
 800bcdc:	68f8      	ldr	r0, [r7, #12]
 800bcde:	f000 fa29 	bl	800c134 <OSPI_WaitFlagStateUntilTimeout>
 800bce2:	4603      	mov	r3, r0
 800bce4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status != HAL_OK)
 800bce8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d114      	bne.n	800bd1a <HAL_OSPI_Receive+0xf6>
        {
          break;
        }

        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcf4:	69fa      	ldr	r2, [r7, #28]
 800bcf6:	7812      	ldrb	r2, [r2, #0]
 800bcf8:	b2d2      	uxtb	r2, r2
 800bcfa:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd00:	1c5a      	adds	r2, r3, #1
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	641a      	str	r2, [r3, #64]	; 0x40
        hospi->XferCount--;
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bd0a:	1e5a      	subs	r2, r3, #1
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	649a      	str	r2, [r3, #72]	; 0x48
      } while(hospi->XferCount > 0U);
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d1dc      	bne.n	800bcd2 <HAL_OSPI_Receive+0xae>
 800bd18:	e000      	b.n	800bd1c <HAL_OSPI_Receive+0xf8>
          break;
 800bd1a:	bf00      	nop

      if (status == HAL_OK)
 800bd1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d11c      	bne.n	800bd5e <HAL_OSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	9300      	str	r3, [sp, #0]
 800bd28:	6a3b      	ldr	r3, [r7, #32]
 800bd2a:	2201      	movs	r2, #1
 800bd2c:	2102      	movs	r1, #2
 800bd2e:	68f8      	ldr	r0, [r7, #12]
 800bd30:	f000 fa00 	bl	800c134 <OSPI_WaitFlagStateUntilTimeout>
 800bd34:	4603      	mov	r3, r0
 800bd36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status == HAL_OK)
 800bd3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d10d      	bne.n	800bd5e <HAL_OSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	2202      	movs	r2, #2
 800bd48:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	2202      	movs	r2, #2
 800bd4e:	651a      	str	r2, [r3, #80]	; 0x50
 800bd50:	e005      	b.n	800bd5e <HAL_OSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 800bd52:	2301      	movs	r3, #1
 800bd54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	2210      	movs	r2, #16
 800bd5c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }

  /* Return function status */
  return status;
 800bd5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800bd62:	4618      	mov	r0, r3
 800bd64:	3728      	adds	r7, #40	; 0x28
 800bd66:	46bd      	mov	sp, r7
 800bd68:	bd80      	pop	{r7, pc}

0800bd6a <HAL_OSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_AutoPolling(OSPI_HandleTypeDef *hospi, OSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 800bd6a:	b580      	push	{r7, lr}
 800bd6c:	b08a      	sub	sp, #40	; 0x28
 800bd6e:	af02      	add	r7, sp, #8
 800bd70:	60f8      	str	r0, [r7, #12]
 800bd72:	60b9      	str	r1, [r7, #8]
 800bd74:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800bd76:	f7fd f9cb 	bl	8009110 <HAL_GetTick>
 800bd7a:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = hospi->Instance->AR;
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bd82:	617b      	str	r3, [r7, #20]
  uint32_t ir_reg = hospi->Instance->IR;
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800bd8c:	613b      	str	r3, [r7, #16]
  assert_param(IS_OSPI_AUTOMATIC_STOP   (cfg->AutomaticStop));
  assert_param(IS_OSPI_INTERVAL         (cfg->Interval));
  assert_param(IS_OSPI_STATUS_BYTES_SIZE(dlr_reg+1U));

  /* Check the state */
  if ((hospi->State == HAL_OSPI_STATE_CMD_CFG) && (cfg->AutomaticStop == HAL_OSPI_AUTOMATIC_STOP_ENABLE))
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd92:	2b04      	cmp	r3, #4
 800bd94:	d164      	bne.n	800be60 <HAL_OSPI_AutoPolling+0xf6>
 800bd96:	68bb      	ldr	r3, [r7, #8]
 800bd98:	68db      	ldr	r3, [r3, #12]
 800bd9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bd9e:	d15f      	bne.n	800be60 <HAL_OSPI_AutoPolling+0xf6>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	9300      	str	r3, [sp, #0]
 800bda4:	69bb      	ldr	r3, [r7, #24]
 800bda6:	2200      	movs	r2, #0
 800bda8:	2120      	movs	r1, #32
 800bdaa:	68f8      	ldr	r0, [r7, #12]
 800bdac:	f000 f9c2 	bl	800c134 <OSPI_WaitFlagStateUntilTimeout>
 800bdb0:	4603      	mov	r3, r0
 800bdb2:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 800bdb4:	7ffb      	ldrb	r3, [r7, #31]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d158      	bne.n	800be6c <HAL_OSPI_AutoPolling+0x102>
    {
      /* Configure registers */
      WRITE_REG (hospi->Instance->PSMAR, cfg->Match);
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	68ba      	ldr	r2, [r7, #8]
 800bdc0:	6812      	ldr	r2, [r2, #0]
 800bdc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      WRITE_REG (hospi->Instance->PSMKR, cfg->Mask);
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	68ba      	ldr	r2, [r7, #8]
 800bdcc:	6852      	ldr	r2, [r2, #4]
 800bdce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      WRITE_REG (hospi->Instance->PIR,   cfg->Interval);
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	68ba      	ldr	r2, [r7, #8]
 800bdd8:	6912      	ldr	r2, [r2, #16]
 800bdda:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      MODIFY_REG(hospi->Instance->CR,    (OCTOSPI_CR_PMM | OCTOSPI_CR_APMS | OCTOSPI_CR_FMODE),
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	f023 5243 	bic.w	r2, r3, #817889280	; 0x30c00000
 800bde8:	68bb      	ldr	r3, [r7, #8]
 800bdea:	6899      	ldr	r1, [r3, #8]
 800bdec:	68bb      	ldr	r3, [r7, #8]
 800bdee:	68db      	ldr	r3, [r3, #12]
 800bdf0:	430b      	orrs	r3, r1
 800bdf2:	431a      	orrs	r2, r3
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800bdfc:	601a      	str	r2, [r3, #0]
                 (cfg->MatchMode | cfg->AutomaticStop | OSPI_FUNCTIONAL_MODE_AUTO_POLLING));

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	68db      	ldr	r3, [r3, #12]
 800be02:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800be06:	d104      	bne.n	800be12 <HAL_OSPI_AutoPolling+0xa8>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	697a      	ldr	r2, [r7, #20]
 800be0e:	649a      	str	r2, [r3, #72]	; 0x48
 800be10:	e011      	b.n	800be36 <HAL_OSPI_AutoPolling+0xcc>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800be1a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d004      	beq.n	800be2c <HAL_OSPI_AutoPolling+0xc2>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	697a      	ldr	r2, [r7, #20]
 800be28:	649a      	str	r2, [r3, #72]	; 0x48
 800be2a:	e004      	b.n	800be36 <HAL_OSPI_AutoPolling+0xcc>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	693a      	ldr	r2, [r7, #16]
 800be32:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        }
      }

      /* Wait till status match flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_SM, SET, tickstart, Timeout);
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	9300      	str	r3, [sp, #0]
 800be3a:	69bb      	ldr	r3, [r7, #24]
 800be3c:	2201      	movs	r2, #1
 800be3e:	2108      	movs	r1, #8
 800be40:	68f8      	ldr	r0, [r7, #12]
 800be42:	f000 f977 	bl	800c134 <OSPI_WaitFlagStateUntilTimeout>
 800be46:	4603      	mov	r3, r0
 800be48:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 800be4a:	7ffb      	ldrb	r3, [r7, #31]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d10d      	bne.n	800be6c <HAL_OSPI_AutoPolling+0x102>
      {
        /* Clear status match flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_SM);
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	2208      	movs	r2, #8
 800be56:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	2202      	movs	r2, #2
 800be5c:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 800be5e:	e005      	b.n	800be6c <HAL_OSPI_AutoPolling+0x102>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 800be60:	2301      	movs	r3, #1
 800be62:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	2210      	movs	r2, #16
 800be68:	655a      	str	r2, [r3, #84]	; 0x54
 800be6a:	e000      	b.n	800be6e <HAL_OSPI_AutoPolling+0x104>
    if (status == HAL_OK)
 800be6c:	bf00      	nop
  }

  /* Return function status */
  return status;
 800be6e:	7ffb      	ldrb	r3, [r7, #31]
}
 800be70:	4618      	mov	r0, r3
 800be72:	3720      	adds	r7, #32
 800be74:	46bd      	mov	sp, r7
 800be76:	bd80      	pop	{r7, pc}

0800be78 <HAL_OSPI_MemoryMapped>:
  * @param  cfg   : structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_MemoryMapped(OSPI_HandleTypeDef *hospi, OSPI_MemoryMappedTypeDef *cfg)
{
 800be78:	b580      	push	{r7, lr}
 800be7a:	b086      	sub	sp, #24
 800be7c:	af02      	add	r7, sp, #8
 800be7e:	6078      	str	r0, [r7, #4]
 800be80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800be82:	f7fd f945 	bl	8009110 <HAL_GetTick>
 800be86:	60b8      	str	r0, [r7, #8]

  /* Check the parameters of the memory-mapped configuration structure */
  assert_param(IS_OSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Check the state */
  if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be8c:	2b04      	cmp	r3, #4
 800be8e:	d134      	bne.n	800befa <HAL_OSPI_MemoryMapped+0x82>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be94:	9300      	str	r3, [sp, #0]
 800be96:	68bb      	ldr	r3, [r7, #8]
 800be98:	2200      	movs	r2, #0
 800be9a:	2120      	movs	r1, #32
 800be9c:	6878      	ldr	r0, [r7, #4]
 800be9e:	f000 f949 	bl	800c134 <OSPI_WaitFlagStateUntilTimeout>
 800bea2:	4603      	mov	r3, r0
 800bea4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800bea6:	7bfb      	ldrb	r3, [r7, #15]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d12b      	bne.n	800bf04 <HAL_OSPI_MemoryMapped+0x8c>
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_BUSY_MEM_MAPPED;
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	2288      	movs	r2, #136	; 0x88
 800beb0:	651a      	str	r2, [r3, #80]	; 0x50

      if (cfg->TimeOutActivation == HAL_OSPI_TIMEOUT_COUNTER_ENABLE)
 800beb2:	683b      	ldr	r3, [r7, #0]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	2b08      	cmp	r3, #8
 800beb8:	d111      	bne.n	800bede <HAL_OSPI_MemoryMapped+0x66>
      {
        assert_param(IS_OSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure register */
        WRITE_REG(hospi->Instance->LPTR, cfg->TimeOutPeriod);
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	683a      	ldr	r2, [r7, #0]
 800bec0:	6852      	ldr	r2, [r2, #4]
 800bec2:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130

        /* Clear flags related to interrupt */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TO);
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	2210      	movs	r2, #16
 800becc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Enable the timeout interrupt */
        __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TO);
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	681a      	ldr	r2, [r3, #0]
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800bedc:	601a      	str	r2, [r3, #0]
      }

      /* Configure CR register with functional mode as memory-mapped */
      MODIFY_REG(hospi->Instance->CR, (OCTOSPI_CR_TCEN | OCTOSPI_CR_FMODE),
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	681a      	ldr	r2, [r3, #0]
 800bee4:	4b0a      	ldr	r3, [pc, #40]	; (800bf10 <HAL_OSPI_MemoryMapped+0x98>)
 800bee6:	4013      	ands	r3, r2
 800bee8:	683a      	ldr	r2, [r7, #0]
 800beea:	6812      	ldr	r2, [r2, #0]
 800beec:	431a      	orrs	r2, r3
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800bef6:	601a      	str	r2, [r3, #0]
 800bef8:	e004      	b.n	800bf04 <HAL_OSPI_MemoryMapped+0x8c>
                 (cfg->TimeOutActivation | OSPI_FUNCTIONAL_MODE_MEMORY_MAPPED));
    }
  }
  else
  {
    status = HAL_ERROR;
 800befa:	2301      	movs	r3, #1
 800befc:	73fb      	strb	r3, [r7, #15]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	2210      	movs	r2, #16
 800bf02:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Return function status */
  return status;
 800bf04:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf06:	4618      	mov	r0, r3
 800bf08:	3710      	adds	r7, #16
 800bf0a:	46bd      	mov	sp, r7
 800bf0c:	bd80      	pop	{r7, pc}
 800bf0e:	bf00      	nop
 800bf10:	cffffff7 	.word	0xcffffff7

0800bf14 <HAL_OSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_ErrorCallback(OSPI_HandleTypeDef *hospi)
{
 800bf14:	b480      	push	{r7}
 800bf16:	b083      	sub	sp, #12
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_ErrorCallback could be implemented in the user file
   */
}
 800bf1c:	bf00      	nop
 800bf1e:	370c      	adds	r7, #12
 800bf20:	46bd      	mov	sp, r7
 800bf22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf26:	4770      	bx	lr

0800bf28 <HAL_OSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_AbortCpltCallback(OSPI_HandleTypeDef *hospi)
{
 800bf28:	b480      	push	{r7}
 800bf2a:	b083      	sub	sp, #12
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_AbortCpltCallback could be implemented in the user file
   */
}
 800bf30:	bf00      	nop
 800bf32:	370c      	adds	r7, #12
 800bf34:	46bd      	mov	sp, r7
 800bf36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3a:	4770      	bx	lr

0800bf3c <HAL_OSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_FifoThresholdCallback(OSPI_HandleTypeDef *hospi)
{
 800bf3c:	b480      	push	{r7}
 800bf3e:	b083      	sub	sp, #12
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 800bf44:	bf00      	nop
 800bf46:	370c      	adds	r7, #12
 800bf48:	46bd      	mov	sp, r7
 800bf4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4e:	4770      	bx	lr

0800bf50 <HAL_OSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_CmdCpltCallback(OSPI_HandleTypeDef *hospi)
{
 800bf50:	b480      	push	{r7}
 800bf52:	b083      	sub	sp, #12
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_CmdCpltCallback could be implemented in the user file
   */
}
 800bf58:	bf00      	nop
 800bf5a:	370c      	adds	r7, #12
 800bf5c:	46bd      	mov	sp, r7
 800bf5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf62:	4770      	bx	lr

0800bf64 <HAL_OSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_RxCpltCallback(OSPI_HandleTypeDef *hospi)
{
 800bf64:	b480      	push	{r7}
 800bf66:	b083      	sub	sp, #12
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_RxCpltCallback could be implemented in the user file
   */
}
 800bf6c:	bf00      	nop
 800bf6e:	370c      	adds	r7, #12
 800bf70:	46bd      	mov	sp, r7
 800bf72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf76:	4770      	bx	lr

0800bf78 <HAL_OSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
 __weak void HAL_OSPI_TxCpltCallback(OSPI_HandleTypeDef *hospi)
{
 800bf78:	b480      	push	{r7}
 800bf7a:	b083      	sub	sp, #12
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_TxCpltCallback could be implemented in the user file
   */
}
 800bf80:	bf00      	nop
 800bf82:	370c      	adds	r7, #12
 800bf84:	46bd      	mov	sp, r7
 800bf86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf8a:	4770      	bx	lr

0800bf8c <HAL_OSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_StatusMatchCallback(OSPI_HandleTypeDef *hospi)
{
 800bf8c:	b480      	push	{r7}
 800bf8e:	b083      	sub	sp, #12
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_StatusMatchCallback could be implemented in the user file
   */
}
 800bf94:	bf00      	nop
 800bf96:	370c      	adds	r7, #12
 800bf98:	46bd      	mov	sp, r7
 800bf9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf9e:	4770      	bx	lr

0800bfa0 <HAL_OSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_TimeOutCallback(OSPI_HandleTypeDef *hospi)
{
 800bfa0:	b480      	push	{r7}
 800bfa2:	b083      	sub	sp, #12
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_TimeOutCallback could be implemented in the user file
   */
}
 800bfa8:	bf00      	nop
 800bfaa:	370c      	adds	r7, #12
 800bfac:	46bd      	mov	sp, r7
 800bfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb2:	4770      	bx	lr

0800bfb4 <HAL_OSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hospi : OSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_OSPI_Abort(OSPI_HandleTypeDef *hospi)
{
 800bfb4:	b580      	push	{r7, lr}
 800bfb6:	b088      	sub	sp, #32
 800bfb8:	af02      	add	r7, sp, #8
 800bfba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	75fb      	strb	r3, [r7, #23]
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 800bfc0:	f7fd f8a6 	bl	8009110 <HAL_GetTick>
 800bfc4:	6138      	str	r0, [r7, #16]

  /* Check if the state is in one of the busy or configured states */
  state = hospi->State;
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bfca:	60fb      	str	r3, [r7, #12]
  if (((state & OSPI_BUSY_STATE_MASK) != 0U) || ((state & OSPI_CFG_STATE_MASK) != 0U))
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	f003 0308 	and.w	r3, r3, #8
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d104      	bne.n	800bfe0 <HAL_OSPI_Abort+0x2c>
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	f003 0304 	and.w	r3, r3, #4
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d052      	beq.n	800c086 <HAL_OSPI_Abort+0xd2>
  {
    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	f003 0304 	and.w	r3, r3, #4
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d014      	beq.n	800c018 <HAL_OSPI_Abort+0x64>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	681a      	ldr	r2, [r3, #0]
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	f022 0204 	bic.w	r2, r2, #4
 800bffc:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      status = HAL_MDMA_Abort(hospi->hmdma);
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c002:	4618      	mov	r0, r3
 800c004:	f7ff fa66 	bl	800b4d4 <HAL_MDMA_Abort>
 800c008:	4603      	mov	r3, r0
 800c00a:	75fb      	strb	r3, [r7, #23]
      if (status != HAL_OK)
 800c00c:	7dfb      	ldrb	r3, [r7, #23]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d002      	beq.n	800c018 <HAL_OSPI_Abort+0x64>
      {
        hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	2204      	movs	r2, #4
 800c016:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	6a1b      	ldr	r3, [r3, #32]
 800c01e:	f003 0320 	and.w	r3, r3, #32
 800c022:	2b00      	cmp	r3, #0
 800c024:	d02b      	beq.n	800c07e <HAL_OSPI_Abort+0xca>
    {
      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	681a      	ldr	r2, [r3, #0]
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	f042 0202 	orr.w	r2, r2, #2
 800c034:	601a      	str	r2, [r3, #0]

      /* Wait until the transfer complete flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c03a:	9300      	str	r3, [sp, #0]
 800c03c:	693b      	ldr	r3, [r7, #16]
 800c03e:	2201      	movs	r2, #1
 800c040:	2102      	movs	r1, #2
 800c042:	6878      	ldr	r0, [r7, #4]
 800c044:	f000 f876 	bl	800c134 <OSPI_WaitFlagStateUntilTimeout>
 800c048:	4603      	mov	r3, r0
 800c04a:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 800c04c:	7dfb      	ldrb	r3, [r7, #23]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d11f      	bne.n	800c092 <HAL_OSPI_Abort+0xde>
      {
        /* Clear transfer complete flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	2202      	movs	r2, #2
 800c058:	625a      	str	r2, [r3, #36]	; 0x24

        /* Wait until the busy flag is reset to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c05e:	9300      	str	r3, [sp, #0]
 800c060:	693b      	ldr	r3, [r7, #16]
 800c062:	2200      	movs	r2, #0
 800c064:	2120      	movs	r1, #32
 800c066:	6878      	ldr	r0, [r7, #4]
 800c068:	f000 f864 	bl	800c134 <OSPI_WaitFlagStateUntilTimeout>
 800c06c:	4603      	mov	r3, r0
 800c06e:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 800c070:	7dfb      	ldrb	r3, [r7, #23]
 800c072:	2b00      	cmp	r3, #0
 800c074:	d10d      	bne.n	800c092 <HAL_OSPI_Abort+0xde>
        {
          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	2202      	movs	r2, #2
 800c07a:	651a      	str	r2, [r3, #80]	; 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 800c07c:	e009      	b.n	800c092 <HAL_OSPI_Abort+0xde>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	2202      	movs	r2, #2
 800c082:	651a      	str	r2, [r3, #80]	; 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 800c084:	e005      	b.n	800c092 <HAL_OSPI_Abort+0xde>
    }
  }
  else
  {
    status = HAL_ERROR;
 800c086:	2301      	movs	r3, #1
 800c088:	75fb      	strb	r3, [r7, #23]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	2210      	movs	r2, #16
 800c08e:	655a      	str	r2, [r3, #84]	; 0x54
 800c090:	e000      	b.n	800c094 <HAL_OSPI_Abort+0xe0>
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 800c092:	bf00      	nop
  }

  /* Return function status */
  return status;
 800c094:	7dfb      	ldrb	r3, [r7, #23]
}
 800c096:	4618      	mov	r0, r3
 800c098:	3718      	adds	r7, #24
 800c09a:	46bd      	mov	sp, r7
 800c09c:	bd80      	pop	{r7, pc}

0800c09e <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 800c09e:	b480      	push	{r7}
 800c0a0:	b083      	sub	sp, #12
 800c0a2:	af00      	add	r7, sp, #0
 800c0a4:	6078      	str	r0, [r7, #4]
 800c0a6:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	683a      	ldr	r2, [r7, #0]
 800c0ac:	659a      	str	r2, [r3, #88]	; 0x58
  return HAL_OK;
 800c0ae:	2300      	movs	r3, #0
}
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	370c      	adds	r7, #12
 800c0b4:	46bd      	mov	sp, r7
 800c0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ba:	4770      	bx	lr

0800c0bc <OSPI_DMAAbortCplt>:
  * @brief  DMA OSPI abort complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void OSPI_DMAAbortCplt(MDMA_HandleTypeDef *hmdma)
{
 800c0bc:	b580      	push	{r7, lr}
 800c0be:	b084      	sub	sp, #16
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	6078      	str	r0, [r7, #4]
  OSPI_HandleTypeDef* hospi = ( OSPI_HandleTypeDef* )(hmdma->Parent);
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0c8:	60fb      	str	r3, [r7, #12]
  hospi->XferCount = 0;
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	2200      	movs	r2, #0
 800c0ce:	649a      	str	r2, [r3, #72]	; 0x48

  /* Check the state */
  if (hospi->State == HAL_OSPI_STATE_ABORT)
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c0d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c0d8:	d122      	bne.n	800c120 <OSPI_DMAAbortCplt+0x64>
  {
    /* DMA abort called by OctoSPI abort */
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	6a1b      	ldr	r3, [r3, #32]
 800c0e0:	f003 0320 	and.w	r3, r3, #32
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d014      	beq.n	800c112 <OSPI_DMAAbortCplt+0x56>
    {
      /* Clear transfer complete flag */
      __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	2202      	movs	r2, #2
 800c0ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enable the transfer complete interrupts */
      __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TC);
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	681a      	ldr	r2, [r3, #0]
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800c0fe:	601a      	str	r2, [r3, #0]

      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	681a      	ldr	r2, [r3, #0]
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	f042 0202 	orr.w	r2, r2, #2
 800c10e:	601a      	str	r2, [r3, #0]
    hospi->ErrorCallback(hospi);
#else
    HAL_OSPI_ErrorCallback(hospi);
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)*/
  }
}
 800c110:	e00c      	b.n	800c12c <OSPI_DMAAbortCplt+0x70>
      hospi->State = HAL_OSPI_STATE_READY;
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	2202      	movs	r2, #2
 800c116:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_OSPI_AbortCpltCallback(hospi);
 800c118:	68f8      	ldr	r0, [r7, #12]
 800c11a:	f7ff ff05 	bl	800bf28 <HAL_OSPI_AbortCpltCallback>
}
 800c11e:	e005      	b.n	800c12c <OSPI_DMAAbortCplt+0x70>
    hospi->State = HAL_OSPI_STATE_READY;
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	2202      	movs	r2, #2
 800c124:	651a      	str	r2, [r3, #80]	; 0x50
    HAL_OSPI_ErrorCallback(hospi);
 800c126:	68f8      	ldr	r0, [r7, #12]
 800c128:	f7ff fef4 	bl	800bf14 <HAL_OSPI_ErrorCallback>
}
 800c12c:	bf00      	nop
 800c12e:	3710      	adds	r7, #16
 800c130:	46bd      	mov	sp, r7
 800c132:	bd80      	pop	{r7, pc}

0800c134 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800c134:	b580      	push	{r7, lr}
 800c136:	b084      	sub	sp, #16
 800c138:	af00      	add	r7, sp, #0
 800c13a:	60f8      	str	r0, [r7, #12]
 800c13c:	60b9      	str	r1, [r7, #8]
 800c13e:	603b      	str	r3, [r7, #0]
 800c140:	4613      	mov	r3, r2
 800c142:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 800c144:	e01a      	b.n	800c17c <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c146:	69bb      	ldr	r3, [r7, #24]
 800c148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c14c:	d016      	beq.n	800c17c <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c14e:	f7fc ffdf 	bl	8009110 <HAL_GetTick>
 800c152:	4602      	mov	r2, r0
 800c154:	683b      	ldr	r3, [r7, #0]
 800c156:	1ad3      	subs	r3, r2, r3
 800c158:	69ba      	ldr	r2, [r7, #24]
 800c15a:	429a      	cmp	r2, r3
 800c15c:	d302      	bcc.n	800c164 <OSPI_WaitFlagStateUntilTimeout+0x30>
 800c15e:	69bb      	ldr	r3, [r7, #24]
 800c160:	2b00      	cmp	r3, #0
 800c162:	d10b      	bne.n	800c17c <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c16a:	651a      	str	r2, [r3, #80]	; 0x50
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c170:	f043 0201 	orr.w	r2, r3, #1
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	655a      	str	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 800c178:	2301      	movs	r3, #1
 800c17a:	e00e      	b.n	800c19a <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	6a1a      	ldr	r2, [r3, #32]
 800c182:	68bb      	ldr	r3, [r7, #8]
 800c184:	4013      	ands	r3, r2
 800c186:	2b00      	cmp	r3, #0
 800c188:	bf14      	ite	ne
 800c18a:	2301      	movne	r3, #1
 800c18c:	2300      	moveq	r3, #0
 800c18e:	b2db      	uxtb	r3, r3
 800c190:	461a      	mov	r2, r3
 800c192:	79fb      	ldrb	r3, [r7, #7]
 800c194:	429a      	cmp	r2, r3
 800c196:	d1d6      	bne.n	800c146 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c198:	2300      	movs	r3, #0
}
 800c19a:	4618      	mov	r0, r3
 800c19c:	3710      	adds	r7, #16
 800c19e:	46bd      	mov	sp, r7
 800c1a0:	bd80      	pop	{r7, pc}
	...

0800c1a4 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 800c1a4:	b480      	push	{r7}
 800c1a6:	b089      	sub	sp, #36	; 0x24
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
 800c1ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	681a      	ldr	r2, [r3, #0]
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800c1c0:	601a      	str	r2, [r3, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	689b      	ldr	r3, [r3, #8]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d10a      	bne.n	800c1e0 <OSPI_ConfigCmd+0x3c>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800c1d4:	683b      	ldr	r3, [r7, #0]
 800c1d6:	685a      	ldr	r2, [r3, #4]
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	430a      	orrs	r2, r1
 800c1de:	601a      	str	r2, [r3, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800c1e0:	683b      	ldr	r3, [r7, #0]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	2b02      	cmp	r3, #2
 800c1e6:	d114      	bne.n	800c212 <OSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800c1f0:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WTCR);
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800c1fa:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WIR);
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800c204:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WABR);
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800c20e:	60fb      	str	r3, [r7, #12]
 800c210:	e02c      	b.n	800c26c <OSPI_ConfigCmd+0xc8>
  }
  else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG)
 800c212:	683b      	ldr	r3, [r7, #0]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	2b03      	cmp	r3, #3
 800c218:	d114      	bne.n	800c244 <OSPI_ConfigCmd+0xa0>
  {
    ccr_reg = &(hospi->Instance->WPCCR);
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800c222:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WPTCR);
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800c22c:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WPIR);
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c236:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WPABR);
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800c240:	60fb      	str	r3, [r7, #12]
 800c242:	e013      	b.n	800c26c <OSPI_ConfigCmd+0xc8>
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800c24c:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->TCR);
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800c256:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->IR);
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800c260:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->ABR);
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800c26a:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 800c26c:	683b      	ldr	r3, [r7, #0]
 800c26e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c270:	683b      	ldr	r3, [r7, #0]
 800c272:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c274:	431a      	orrs	r2, r3
 800c276:	69bb      	ldr	r3, [r7, #24]
 800c278:	601a      	str	r2, [r3, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 800c27a:	683b      	ldr	r3, [r7, #0]
 800c27c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d012      	beq.n	800c2a8 <OSPI_ConfigCmd+0x104>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 800c282:	683b      	ldr	r3, [r7, #0]
 800c284:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 800c28a:	69bb      	ldr	r3, [r7, #24]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800c292:	683b      	ldr	r3, [r7, #0]
 800c294:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800c296:	683b      	ldr	r3, [r7, #0]
 800c298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c29a:	4319      	orrs	r1, r3
 800c29c:	683b      	ldr	r3, [r7, #0]
 800c29e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2a0:	430b      	orrs	r3, r1
 800c2a2:	431a      	orrs	r2, r3
 800c2a4:	69bb      	ldr	r3, [r7, #24]
 800c2a6:	601a      	str	r2, [r3, #0]
                           (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 800c2a8:	697b      	ldr	r3, [r7, #20]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	f023 021f 	bic.w	r2, r3, #31
 800c2b0:	683b      	ldr	r3, [r7, #0]
 800c2b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c2b4:	431a      	orrs	r2, r3
 800c2b6:	697b      	ldr	r3, [r7, #20]
 800c2b8:	601a      	str	r2, [r3, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800c2ba:	683b      	ldr	r3, [r7, #0]
 800c2bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d009      	beq.n	800c2d6 <OSPI_ConfigCmd+0x132>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 800c2c2:	683b      	ldr	r3, [r7, #0]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d105      	bne.n	800c2d6 <OSPI_ConfigCmd+0x132>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 800c2ca:	683b      	ldr	r3, [r7, #0]
 800c2cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	3a01      	subs	r2, #1
 800c2d4:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 800c2d6:	683b      	ldr	r3, [r7, #0]
 800c2d8:	68db      	ldr	r3, [r3, #12]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	f000 8095 	beq.w	800c40a <OSPI_ConfigCmd+0x266>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 800c2e0:	683b      	ldr	r3, [r7, #0]
 800c2e2:	69db      	ldr	r3, [r3, #28]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d053      	beq.n	800c390 <OSPI_ConfigCmd+0x1ec>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800c2e8:	683b      	ldr	r3, [r7, #0]
 800c2ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d01e      	beq.n	800c32e <OSPI_ConfigCmd+0x18a>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 800c2f0:	69bb      	ldr	r3, [r7, #24]
 800c2f2:	681a      	ldr	r2, [r3, #0]
 800c2f4:	4b64      	ldr	r3, [pc, #400]	; (800c488 <OSPI_ConfigCmd+0x2e4>)
 800c2f6:	4013      	ands	r3, r2
 800c2f8:	683a      	ldr	r2, [r7, #0]
 800c2fa:	68d1      	ldr	r1, [r2, #12]
 800c2fc:	683a      	ldr	r2, [r7, #0]
 800c2fe:	6952      	ldr	r2, [r2, #20]
 800c300:	4311      	orrs	r1, r2
 800c302:	683a      	ldr	r2, [r7, #0]
 800c304:	6912      	ldr	r2, [r2, #16]
 800c306:	4311      	orrs	r1, r2
 800c308:	683a      	ldr	r2, [r7, #0]
 800c30a:	69d2      	ldr	r2, [r2, #28]
 800c30c:	4311      	orrs	r1, r2
 800c30e:	683a      	ldr	r2, [r7, #0]
 800c310:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c312:	4311      	orrs	r1, r2
 800c314:	683a      	ldr	r2, [r7, #0]
 800c316:	6a12      	ldr	r2, [r2, #32]
 800c318:	4311      	orrs	r1, r2
 800c31a:	683a      	ldr	r2, [r7, #0]
 800c31c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800c31e:	4311      	orrs	r1, r2
 800c320:	683a      	ldr	r2, [r7, #0]
 800c322:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800c324:	430a      	orrs	r2, r1
 800c326:	431a      	orrs	r2, r3
 800c328:	69bb      	ldr	r3, [r7, #24]
 800c32a:	601a      	str	r2, [r3, #0]
 800c32c:	e026      	b.n	800c37c <OSPI_ConfigCmd+0x1d8>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 800c32e:	69bb      	ldr	r3, [r7, #24]
 800c330:	681a      	ldr	r2, [r3, #0]
 800c332:	4b56      	ldr	r3, [pc, #344]	; (800c48c <OSPI_ConfigCmd+0x2e8>)
 800c334:	4013      	ands	r3, r2
 800c336:	683a      	ldr	r2, [r7, #0]
 800c338:	68d1      	ldr	r1, [r2, #12]
 800c33a:	683a      	ldr	r2, [r7, #0]
 800c33c:	6952      	ldr	r2, [r2, #20]
 800c33e:	4311      	orrs	r1, r2
 800c340:	683a      	ldr	r2, [r7, #0]
 800c342:	6912      	ldr	r2, [r2, #16]
 800c344:	4311      	orrs	r1, r2
 800c346:	683a      	ldr	r2, [r7, #0]
 800c348:	69d2      	ldr	r2, [r2, #28]
 800c34a:	4311      	orrs	r1, r2
 800c34c:	683a      	ldr	r2, [r7, #0]
 800c34e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c350:	4311      	orrs	r1, r2
 800c352:	683a      	ldr	r2, [r7, #0]
 800c354:	6a12      	ldr	r2, [r2, #32]
 800c356:	430a      	orrs	r2, r1
 800c358:	431a      	orrs	r2, r3
 800c35a:	69bb      	ldr	r3, [r7, #24]
 800c35c:	601a      	str	r2, [r3, #0]
                                OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize |
                                cmd->AddressMode     | cmd->AddressDtrMode     | cmd->AddressSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c362:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c366:	d109      	bne.n	800c37c <OSPI_ConfigCmd+0x1d8>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 800c368:	683b      	ldr	r3, [r7, #0]
 800c36a:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800c36c:	2b08      	cmp	r3, #8
 800c36e:	d105      	bne.n	800c37c <OSPI_ConfigCmd+0x1d8>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 800c370:	69bb      	ldr	r3, [r7, #24]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c378:	69bb      	ldr	r3, [r7, #24]
 800c37a:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 800c37c:	683b      	ldr	r3, [r7, #0]
 800c37e:	689a      	ldr	r2, [r3, #8]
 800c380:	693b      	ldr	r3, [r7, #16]
 800c382:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	683a      	ldr	r2, [r7, #0]
 800c38a:	6992      	ldr	r2, [r2, #24]
 800c38c:	649a      	str	r2, [r3, #72]	; 0x48
 800c38e:	e074      	b.n	800c47a <OSPI_ConfigCmd+0x2d6>
    }
    else
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800c390:	683b      	ldr	r3, [r7, #0]
 800c392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c394:	2b00      	cmp	r3, #0
 800c396:	d015      	beq.n	800c3c4 <OSPI_ConfigCmd+0x220>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 800c398:	69bb      	ldr	r3, [r7, #24]
 800c39a:	681a      	ldr	r2, [r3, #0]
 800c39c:	4b3c      	ldr	r3, [pc, #240]	; (800c490 <OSPI_ConfigCmd+0x2ec>)
 800c39e:	4013      	ands	r3, r2
 800c3a0:	683a      	ldr	r2, [r7, #0]
 800c3a2:	68d1      	ldr	r1, [r2, #12]
 800c3a4:	683a      	ldr	r2, [r7, #0]
 800c3a6:	6952      	ldr	r2, [r2, #20]
 800c3a8:	4311      	orrs	r1, r2
 800c3aa:	683a      	ldr	r2, [r7, #0]
 800c3ac:	6912      	ldr	r2, [r2, #16]
 800c3ae:	4311      	orrs	r1, r2
 800c3b0:	683a      	ldr	r2, [r7, #0]
 800c3b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800c3b4:	4311      	orrs	r1, r2
 800c3b6:	683a      	ldr	r2, [r7, #0]
 800c3b8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800c3ba:	430a      	orrs	r2, r1
 800c3bc:	431a      	orrs	r2, r3
 800c3be:	69bb      	ldr	r3, [r7, #24]
 800c3c0:	601a      	str	r2, [r3, #0]
 800c3c2:	e01d      	b.n	800c400 <OSPI_ConfigCmd+0x25c>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 800c3c4:	69bb      	ldr	r3, [r7, #24]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800c3cc:	683b      	ldr	r3, [r7, #0]
 800c3ce:	68d9      	ldr	r1, [r3, #12]
 800c3d0:	683b      	ldr	r3, [r7, #0]
 800c3d2:	695b      	ldr	r3, [r3, #20]
 800c3d4:	4319      	orrs	r1, r3
 800c3d6:	683b      	ldr	r3, [r7, #0]
 800c3d8:	691b      	ldr	r3, [r3, #16]
 800c3da:	430b      	orrs	r3, r1
 800c3dc:	431a      	orrs	r2, r3
 800c3de:	69bb      	ldr	r3, [r7, #24]
 800c3e0:	601a      	str	r2, [r3, #0]
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c3ea:	d109      	bne.n	800c400 <OSPI_ConfigCmd+0x25c>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 800c3ec:	683b      	ldr	r3, [r7, #0]
 800c3ee:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800c3f0:	2b08      	cmp	r3, #8
 800c3f2:	d105      	bne.n	800c400 <OSPI_ConfigCmd+0x25c>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 800c3f4:	69bb      	ldr	r3, [r7, #24]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c3fc:	69bb      	ldr	r3, [r7, #24]
 800c3fe:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 800c400:	683b      	ldr	r3, [r7, #0]
 800c402:	689a      	ldr	r2, [r3, #8]
 800c404:	693b      	ldr	r3, [r7, #16]
 800c406:	601a      	str	r2, [r3, #0]
 800c408:	e037      	b.n	800c47a <OSPI_ConfigCmd+0x2d6>

    }
  }
  else
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 800c40a:	683b      	ldr	r3, [r7, #0]
 800c40c:	69db      	ldr	r3, [r3, #28]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d02e      	beq.n	800c470 <OSPI_ConfigCmd+0x2cc>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800c412:	683b      	ldr	r3, [r7, #0]
 800c414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c416:	2b00      	cmp	r3, #0
 800c418:	d015      	beq.n	800c446 <OSPI_ConfigCmd+0x2a2>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 800c41a:	69bb      	ldr	r3, [r7, #24]
 800c41c:	681a      	ldr	r2, [r3, #0]
 800c41e:	4b1d      	ldr	r3, [pc, #116]	; (800c494 <OSPI_ConfigCmd+0x2f0>)
 800c420:	4013      	ands	r3, r2
 800c422:	683a      	ldr	r2, [r7, #0]
 800c424:	69d1      	ldr	r1, [r2, #28]
 800c426:	683a      	ldr	r2, [r7, #0]
 800c428:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c42a:	4311      	orrs	r1, r2
 800c42c:	683a      	ldr	r2, [r7, #0]
 800c42e:	6a12      	ldr	r2, [r2, #32]
 800c430:	4311      	orrs	r1, r2
 800c432:	683a      	ldr	r2, [r7, #0]
 800c434:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800c436:	4311      	orrs	r1, r2
 800c438:	683a      	ldr	r2, [r7, #0]
 800c43a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800c43c:	430a      	orrs	r2, r1
 800c43e:	431a      	orrs	r2, r3
 800c440:	69bb      	ldr	r3, [r7, #24]
 800c442:	601a      	str	r2, [r3, #0]
 800c444:	e00e      	b.n	800c464 <OSPI_ConfigCmd+0x2c0>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 800c446:	69bb      	ldr	r3, [r7, #24]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800c44e:	683b      	ldr	r3, [r7, #0]
 800c450:	69d9      	ldr	r1, [r3, #28]
 800c452:	683b      	ldr	r3, [r7, #0]
 800c454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c456:	4319      	orrs	r1, r3
 800c458:	683b      	ldr	r3, [r7, #0]
 800c45a:	6a1b      	ldr	r3, [r3, #32]
 800c45c:	430b      	orrs	r3, r1
 800c45e:	431a      	orrs	r2, r3
 800c460:	69bb      	ldr	r3, [r7, #24]
 800c462:	601a      	str	r2, [r3, #0]
                               (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	683a      	ldr	r2, [r7, #0]
 800c46a:	6992      	ldr	r2, [r2, #24]
 800c46c:	649a      	str	r2, [r3, #72]	; 0x48
 800c46e:	e004      	b.n	800c47a <OSPI_ConfigCmd+0x2d6>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 800c470:	2301      	movs	r3, #1
 800c472:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	2208      	movs	r2, #8
 800c478:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }

  /* Return function status */
  return status;
 800c47a:	7ffb      	ldrb	r3, [r7, #31]
}
 800c47c:	4618      	mov	r0, r3
 800c47e:	3724      	adds	r7, #36	; 0x24
 800c480:	46bd      	mov	sp, r7
 800c482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c486:	4770      	bx	lr
 800c488:	f0ffc0c0 	.word	0xf0ffc0c0
 800c48c:	ffffc0c0 	.word	0xffffc0c0
 800c490:	f0ffffc0 	.word	0xf0ffffc0
 800c494:	f0ffc0ff 	.word	0xf0ffc0ff

0800c498 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800c498:	b580      	push	{r7, lr}
 800c49a:	b084      	sub	sp, #16
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800c4a0:	4b29      	ldr	r3, [pc, #164]	; (800c548 <HAL_PWREx_ConfigSupply+0xb0>)
 800c4a2:	68db      	ldr	r3, [r3, #12]
 800c4a4:	f003 0307 	and.w	r3, r3, #7
 800c4a8:	2b06      	cmp	r3, #6
 800c4aa:	d00a      	beq.n	800c4c2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800c4ac:	4b26      	ldr	r3, [pc, #152]	; (800c548 <HAL_PWREx_ConfigSupply+0xb0>)
 800c4ae:	68db      	ldr	r3, [r3, #12]
 800c4b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c4b4:	687a      	ldr	r2, [r7, #4]
 800c4b6:	429a      	cmp	r2, r3
 800c4b8:	d001      	beq.n	800c4be <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800c4ba:	2301      	movs	r3, #1
 800c4bc:	e040      	b.n	800c540 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800c4be:	2300      	movs	r3, #0
 800c4c0:	e03e      	b.n	800c540 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800c4c2:	4b21      	ldr	r3, [pc, #132]	; (800c548 <HAL_PWREx_ConfigSupply+0xb0>)
 800c4c4:	68db      	ldr	r3, [r3, #12]
 800c4c6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800c4ca:	491f      	ldr	r1, [pc, #124]	; (800c548 <HAL_PWREx_ConfigSupply+0xb0>)
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	4313      	orrs	r3, r2
 800c4d0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800c4d2:	f7fc fe1d 	bl	8009110 <HAL_GetTick>
 800c4d6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800c4d8:	e009      	b.n	800c4ee <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800c4da:	f7fc fe19 	bl	8009110 <HAL_GetTick>
 800c4de:	4602      	mov	r2, r0
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	1ad3      	subs	r3, r2, r3
 800c4e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c4e8:	d901      	bls.n	800c4ee <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800c4ea:	2301      	movs	r3, #1
 800c4ec:	e028      	b.n	800c540 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800c4ee:	4b16      	ldr	r3, [pc, #88]	; (800c548 <HAL_PWREx_ConfigSupply+0xb0>)
 800c4f0:	685b      	ldr	r3, [r3, #4]
 800c4f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c4f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c4fa:	d1ee      	bne.n	800c4da <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	2b1e      	cmp	r3, #30
 800c500:	d008      	beq.n	800c514 <HAL_PWREx_ConfigSupply+0x7c>
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	2b2e      	cmp	r3, #46	; 0x2e
 800c506:	d005      	beq.n	800c514 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	2b1d      	cmp	r3, #29
 800c50c:	d002      	beq.n	800c514 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	2b2d      	cmp	r3, #45	; 0x2d
 800c512:	d114      	bne.n	800c53e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800c514:	f7fc fdfc 	bl	8009110 <HAL_GetTick>
 800c518:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800c51a:	e009      	b.n	800c530 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800c51c:	f7fc fdf8 	bl	8009110 <HAL_GetTick>
 800c520:	4602      	mov	r2, r0
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	1ad3      	subs	r3, r2, r3
 800c526:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c52a:	d901      	bls.n	800c530 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800c52c:	2301      	movs	r3, #1
 800c52e:	e007      	b.n	800c540 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800c530:	4b05      	ldr	r3, [pc, #20]	; (800c548 <HAL_PWREx_ConfigSupply+0xb0>)
 800c532:	68db      	ldr	r3, [r3, #12]
 800c534:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c538:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c53c:	d1ee      	bne.n	800c51c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800c53e:	2300      	movs	r3, #0
}
 800c540:	4618      	mov	r0, r3
 800c542:	3710      	adds	r7, #16
 800c544:	46bd      	mov	sp, r7
 800c546:	bd80      	pop	{r7, pc}
 800c548:	58024800 	.word	0x58024800

0800c54c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c54c:	b580      	push	{r7, lr}
 800c54e:	b08c      	sub	sp, #48	; 0x30
 800c550:	af00      	add	r7, sp, #0
 800c552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	2b00      	cmp	r3, #0
 800c558:	d102      	bne.n	800c560 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800c55a:	2301      	movs	r3, #1
 800c55c:	f000 bc1f 	b.w	800cd9e <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	f003 0301 	and.w	r3, r3, #1
 800c568:	2b00      	cmp	r3, #0
 800c56a:	f000 80b3 	beq.w	800c6d4 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c56e:	4b95      	ldr	r3, [pc, #596]	; (800c7c4 <HAL_RCC_OscConfig+0x278>)
 800c570:	691b      	ldr	r3, [r3, #16]
 800c572:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c576:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800c578:	4b92      	ldr	r3, [pc, #584]	; (800c7c4 <HAL_RCC_OscConfig+0x278>)
 800c57a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c57c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800c57e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c580:	2b10      	cmp	r3, #16
 800c582:	d007      	beq.n	800c594 <HAL_RCC_OscConfig+0x48>
 800c584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c586:	2b18      	cmp	r3, #24
 800c588:	d112      	bne.n	800c5b0 <HAL_RCC_OscConfig+0x64>
 800c58a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c58c:	f003 0303 	and.w	r3, r3, #3
 800c590:	2b02      	cmp	r3, #2
 800c592:	d10d      	bne.n	800c5b0 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c594:	4b8b      	ldr	r3, [pc, #556]	; (800c7c4 <HAL_RCC_OscConfig+0x278>)
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	f000 8098 	beq.w	800c6d2 <HAL_RCC_OscConfig+0x186>
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	685b      	ldr	r3, [r3, #4]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	f040 8093 	bne.w	800c6d2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800c5ac:	2301      	movs	r3, #1
 800c5ae:	e3f6      	b.n	800cd9e <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	685b      	ldr	r3, [r3, #4]
 800c5b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c5b8:	d106      	bne.n	800c5c8 <HAL_RCC_OscConfig+0x7c>
 800c5ba:	4b82      	ldr	r3, [pc, #520]	; (800c7c4 <HAL_RCC_OscConfig+0x278>)
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	4a81      	ldr	r2, [pc, #516]	; (800c7c4 <HAL_RCC_OscConfig+0x278>)
 800c5c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c5c4:	6013      	str	r3, [r2, #0]
 800c5c6:	e058      	b.n	800c67a <HAL_RCC_OscConfig+0x12e>
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	685b      	ldr	r3, [r3, #4]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d112      	bne.n	800c5f6 <HAL_RCC_OscConfig+0xaa>
 800c5d0:	4b7c      	ldr	r3, [pc, #496]	; (800c7c4 <HAL_RCC_OscConfig+0x278>)
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	4a7b      	ldr	r2, [pc, #492]	; (800c7c4 <HAL_RCC_OscConfig+0x278>)
 800c5d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c5da:	6013      	str	r3, [r2, #0]
 800c5dc:	4b79      	ldr	r3, [pc, #484]	; (800c7c4 <HAL_RCC_OscConfig+0x278>)
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	4a78      	ldr	r2, [pc, #480]	; (800c7c4 <HAL_RCC_OscConfig+0x278>)
 800c5e2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c5e6:	6013      	str	r3, [r2, #0]
 800c5e8:	4b76      	ldr	r3, [pc, #472]	; (800c7c4 <HAL_RCC_OscConfig+0x278>)
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	4a75      	ldr	r2, [pc, #468]	; (800c7c4 <HAL_RCC_OscConfig+0x278>)
 800c5ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c5f2:	6013      	str	r3, [r2, #0]
 800c5f4:	e041      	b.n	800c67a <HAL_RCC_OscConfig+0x12e>
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	685b      	ldr	r3, [r3, #4]
 800c5fa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c5fe:	d112      	bne.n	800c626 <HAL_RCC_OscConfig+0xda>
 800c600:	4b70      	ldr	r3, [pc, #448]	; (800c7c4 <HAL_RCC_OscConfig+0x278>)
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	4a6f      	ldr	r2, [pc, #444]	; (800c7c4 <HAL_RCC_OscConfig+0x278>)
 800c606:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c60a:	6013      	str	r3, [r2, #0]
 800c60c:	4b6d      	ldr	r3, [pc, #436]	; (800c7c4 <HAL_RCC_OscConfig+0x278>)
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	4a6c      	ldr	r2, [pc, #432]	; (800c7c4 <HAL_RCC_OscConfig+0x278>)
 800c612:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c616:	6013      	str	r3, [r2, #0]
 800c618:	4b6a      	ldr	r3, [pc, #424]	; (800c7c4 <HAL_RCC_OscConfig+0x278>)
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	4a69      	ldr	r2, [pc, #420]	; (800c7c4 <HAL_RCC_OscConfig+0x278>)
 800c61e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c622:	6013      	str	r3, [r2, #0]
 800c624:	e029      	b.n	800c67a <HAL_RCC_OscConfig+0x12e>
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	685b      	ldr	r3, [r3, #4]
 800c62a:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800c62e:	d112      	bne.n	800c656 <HAL_RCC_OscConfig+0x10a>
 800c630:	4b64      	ldr	r3, [pc, #400]	; (800c7c4 <HAL_RCC_OscConfig+0x278>)
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	4a63      	ldr	r2, [pc, #396]	; (800c7c4 <HAL_RCC_OscConfig+0x278>)
 800c636:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c63a:	6013      	str	r3, [r2, #0]
 800c63c:	4b61      	ldr	r3, [pc, #388]	; (800c7c4 <HAL_RCC_OscConfig+0x278>)
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	4a60      	ldr	r2, [pc, #384]	; (800c7c4 <HAL_RCC_OscConfig+0x278>)
 800c642:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c646:	6013      	str	r3, [r2, #0]
 800c648:	4b5e      	ldr	r3, [pc, #376]	; (800c7c4 <HAL_RCC_OscConfig+0x278>)
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	4a5d      	ldr	r2, [pc, #372]	; (800c7c4 <HAL_RCC_OscConfig+0x278>)
 800c64e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c652:	6013      	str	r3, [r2, #0]
 800c654:	e011      	b.n	800c67a <HAL_RCC_OscConfig+0x12e>
 800c656:	4b5b      	ldr	r3, [pc, #364]	; (800c7c4 <HAL_RCC_OscConfig+0x278>)
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	4a5a      	ldr	r2, [pc, #360]	; (800c7c4 <HAL_RCC_OscConfig+0x278>)
 800c65c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c660:	6013      	str	r3, [r2, #0]
 800c662:	4b58      	ldr	r3, [pc, #352]	; (800c7c4 <HAL_RCC_OscConfig+0x278>)
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	4a57      	ldr	r2, [pc, #348]	; (800c7c4 <HAL_RCC_OscConfig+0x278>)
 800c668:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c66c:	6013      	str	r3, [r2, #0]
 800c66e:	4b55      	ldr	r3, [pc, #340]	; (800c7c4 <HAL_RCC_OscConfig+0x278>)
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	4a54      	ldr	r2, [pc, #336]	; (800c7c4 <HAL_RCC_OscConfig+0x278>)
 800c674:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c678:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	685b      	ldr	r3, [r3, #4]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d013      	beq.n	800c6aa <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c682:	f7fc fd45 	bl	8009110 <HAL_GetTick>
 800c686:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800c688:	e008      	b.n	800c69c <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c68a:	f7fc fd41 	bl	8009110 <HAL_GetTick>
 800c68e:	4602      	mov	r2, r0
 800c690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c692:	1ad3      	subs	r3, r2, r3
 800c694:	2b64      	cmp	r3, #100	; 0x64
 800c696:	d901      	bls.n	800c69c <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 800c698:	2303      	movs	r3, #3
 800c69a:	e380      	b.n	800cd9e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800c69c:	4b49      	ldr	r3, [pc, #292]	; (800c7c4 <HAL_RCC_OscConfig+0x278>)
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d0f0      	beq.n	800c68a <HAL_RCC_OscConfig+0x13e>
 800c6a8:	e014      	b.n	800c6d4 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c6aa:	f7fc fd31 	bl	8009110 <HAL_GetTick>
 800c6ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800c6b0:	e008      	b.n	800c6c4 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c6b2:	f7fc fd2d 	bl	8009110 <HAL_GetTick>
 800c6b6:	4602      	mov	r2, r0
 800c6b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6ba:	1ad3      	subs	r3, r2, r3
 800c6bc:	2b64      	cmp	r3, #100	; 0x64
 800c6be:	d901      	bls.n	800c6c4 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 800c6c0:	2303      	movs	r3, #3
 800c6c2:	e36c      	b.n	800cd9e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800c6c4:	4b3f      	ldr	r3, [pc, #252]	; (800c7c4 <HAL_RCC_OscConfig+0x278>)
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d1f0      	bne.n	800c6b2 <HAL_RCC_OscConfig+0x166>
 800c6d0:	e000      	b.n	800c6d4 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c6d2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	f003 0302 	and.w	r3, r3, #2
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	f000 808c 	beq.w	800c7fa <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c6e2:	4b38      	ldr	r3, [pc, #224]	; (800c7c4 <HAL_RCC_OscConfig+0x278>)
 800c6e4:	691b      	ldr	r3, [r3, #16]
 800c6e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c6ea:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800c6ec:	4b35      	ldr	r3, [pc, #212]	; (800c7c4 <HAL_RCC_OscConfig+0x278>)
 800c6ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6f0:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800c6f2:	6a3b      	ldr	r3, [r7, #32]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d007      	beq.n	800c708 <HAL_RCC_OscConfig+0x1bc>
 800c6f8:	6a3b      	ldr	r3, [r7, #32]
 800c6fa:	2b18      	cmp	r3, #24
 800c6fc:	d137      	bne.n	800c76e <HAL_RCC_OscConfig+0x222>
 800c6fe:	69fb      	ldr	r3, [r7, #28]
 800c700:	f003 0303 	and.w	r3, r3, #3
 800c704:	2b00      	cmp	r3, #0
 800c706:	d132      	bne.n	800c76e <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c708:	4b2e      	ldr	r3, [pc, #184]	; (800c7c4 <HAL_RCC_OscConfig+0x278>)
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	f003 0304 	and.w	r3, r3, #4
 800c710:	2b00      	cmp	r3, #0
 800c712:	d005      	beq.n	800c720 <HAL_RCC_OscConfig+0x1d4>
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	68db      	ldr	r3, [r3, #12]
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d101      	bne.n	800c720 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 800c71c:	2301      	movs	r3, #1
 800c71e:	e33e      	b.n	800cd9e <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800c720:	4b28      	ldr	r3, [pc, #160]	; (800c7c4 <HAL_RCC_OscConfig+0x278>)
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	f023 0219 	bic.w	r2, r3, #25
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	68db      	ldr	r3, [r3, #12]
 800c72c:	4925      	ldr	r1, [pc, #148]	; (800c7c4 <HAL_RCC_OscConfig+0x278>)
 800c72e:	4313      	orrs	r3, r2
 800c730:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c732:	f7fc fced 	bl	8009110 <HAL_GetTick>
 800c736:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c738:	e008      	b.n	800c74c <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c73a:	f7fc fce9 	bl	8009110 <HAL_GetTick>
 800c73e:	4602      	mov	r2, r0
 800c740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c742:	1ad3      	subs	r3, r2, r3
 800c744:	2b02      	cmp	r3, #2
 800c746:	d901      	bls.n	800c74c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800c748:	2303      	movs	r3, #3
 800c74a:	e328      	b.n	800cd9e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c74c:	4b1d      	ldr	r3, [pc, #116]	; (800c7c4 <HAL_RCC_OscConfig+0x278>)
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	f003 0304 	and.w	r3, r3, #4
 800c754:	2b00      	cmp	r3, #0
 800c756:	d0f0      	beq.n	800c73a <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c758:	4b1a      	ldr	r3, [pc, #104]	; (800c7c4 <HAL_RCC_OscConfig+0x278>)
 800c75a:	685b      	ldr	r3, [r3, #4]
 800c75c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	691b      	ldr	r3, [r3, #16]
 800c764:	061b      	lsls	r3, r3, #24
 800c766:	4917      	ldr	r1, [pc, #92]	; (800c7c4 <HAL_RCC_OscConfig+0x278>)
 800c768:	4313      	orrs	r3, r2
 800c76a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c76c:	e045      	b.n	800c7fa <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	68db      	ldr	r3, [r3, #12]
 800c772:	2b00      	cmp	r3, #0
 800c774:	d028      	beq.n	800c7c8 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800c776:	4b13      	ldr	r3, [pc, #76]	; (800c7c4 <HAL_RCC_OscConfig+0x278>)
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	f023 0219 	bic.w	r2, r3, #25
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	68db      	ldr	r3, [r3, #12]
 800c782:	4910      	ldr	r1, [pc, #64]	; (800c7c4 <HAL_RCC_OscConfig+0x278>)
 800c784:	4313      	orrs	r3, r2
 800c786:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c788:	f7fc fcc2 	bl	8009110 <HAL_GetTick>
 800c78c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c78e:	e008      	b.n	800c7a2 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c790:	f7fc fcbe 	bl	8009110 <HAL_GetTick>
 800c794:	4602      	mov	r2, r0
 800c796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c798:	1ad3      	subs	r3, r2, r3
 800c79a:	2b02      	cmp	r3, #2
 800c79c:	d901      	bls.n	800c7a2 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800c79e:	2303      	movs	r3, #3
 800c7a0:	e2fd      	b.n	800cd9e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c7a2:	4b08      	ldr	r3, [pc, #32]	; (800c7c4 <HAL_RCC_OscConfig+0x278>)
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	f003 0304 	and.w	r3, r3, #4
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d0f0      	beq.n	800c790 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c7ae:	4b05      	ldr	r3, [pc, #20]	; (800c7c4 <HAL_RCC_OscConfig+0x278>)
 800c7b0:	685b      	ldr	r3, [r3, #4]
 800c7b2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	691b      	ldr	r3, [r3, #16]
 800c7ba:	061b      	lsls	r3, r3, #24
 800c7bc:	4901      	ldr	r1, [pc, #4]	; (800c7c4 <HAL_RCC_OscConfig+0x278>)
 800c7be:	4313      	orrs	r3, r2
 800c7c0:	604b      	str	r3, [r1, #4]
 800c7c2:	e01a      	b.n	800c7fa <HAL_RCC_OscConfig+0x2ae>
 800c7c4:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c7c8:	4b97      	ldr	r3, [pc, #604]	; (800ca28 <HAL_RCC_OscConfig+0x4dc>)
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	4a96      	ldr	r2, [pc, #600]	; (800ca28 <HAL_RCC_OscConfig+0x4dc>)
 800c7ce:	f023 0301 	bic.w	r3, r3, #1
 800c7d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c7d4:	f7fc fc9c 	bl	8009110 <HAL_GetTick>
 800c7d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800c7da:	e008      	b.n	800c7ee <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c7dc:	f7fc fc98 	bl	8009110 <HAL_GetTick>
 800c7e0:	4602      	mov	r2, r0
 800c7e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7e4:	1ad3      	subs	r3, r2, r3
 800c7e6:	2b02      	cmp	r3, #2
 800c7e8:	d901      	bls.n	800c7ee <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800c7ea:	2303      	movs	r3, #3
 800c7ec:	e2d7      	b.n	800cd9e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800c7ee:	4b8e      	ldr	r3, [pc, #568]	; (800ca28 <HAL_RCC_OscConfig+0x4dc>)
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	f003 0304 	and.w	r3, r3, #4
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d1f0      	bne.n	800c7dc <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	f003 0310 	and.w	r3, r3, #16
 800c802:	2b00      	cmp	r3, #0
 800c804:	d06a      	beq.n	800c8dc <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c806:	4b88      	ldr	r3, [pc, #544]	; (800ca28 <HAL_RCC_OscConfig+0x4dc>)
 800c808:	691b      	ldr	r3, [r3, #16]
 800c80a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c80e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800c810:	4b85      	ldr	r3, [pc, #532]	; (800ca28 <HAL_RCC_OscConfig+0x4dc>)
 800c812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c814:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800c816:	69bb      	ldr	r3, [r7, #24]
 800c818:	2b08      	cmp	r3, #8
 800c81a:	d007      	beq.n	800c82c <HAL_RCC_OscConfig+0x2e0>
 800c81c:	69bb      	ldr	r3, [r7, #24]
 800c81e:	2b18      	cmp	r3, #24
 800c820:	d11b      	bne.n	800c85a <HAL_RCC_OscConfig+0x30e>
 800c822:	697b      	ldr	r3, [r7, #20]
 800c824:	f003 0303 	and.w	r3, r3, #3
 800c828:	2b01      	cmp	r3, #1
 800c82a:	d116      	bne.n	800c85a <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800c82c:	4b7e      	ldr	r3, [pc, #504]	; (800ca28 <HAL_RCC_OscConfig+0x4dc>)
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c834:	2b00      	cmp	r3, #0
 800c836:	d005      	beq.n	800c844 <HAL_RCC_OscConfig+0x2f8>
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	69db      	ldr	r3, [r3, #28]
 800c83c:	2b80      	cmp	r3, #128	; 0x80
 800c83e:	d001      	beq.n	800c844 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 800c840:	2301      	movs	r3, #1
 800c842:	e2ac      	b.n	800cd9e <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800c844:	4b78      	ldr	r3, [pc, #480]	; (800ca28 <HAL_RCC_OscConfig+0x4dc>)
 800c846:	68db      	ldr	r3, [r3, #12]
 800c848:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	6a1b      	ldr	r3, [r3, #32]
 800c850:	061b      	lsls	r3, r3, #24
 800c852:	4975      	ldr	r1, [pc, #468]	; (800ca28 <HAL_RCC_OscConfig+0x4dc>)
 800c854:	4313      	orrs	r3, r2
 800c856:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800c858:	e040      	b.n	800c8dc <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	69db      	ldr	r3, [r3, #28]
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d023      	beq.n	800c8aa <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800c862:	4b71      	ldr	r3, [pc, #452]	; (800ca28 <HAL_RCC_OscConfig+0x4dc>)
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	4a70      	ldr	r2, [pc, #448]	; (800ca28 <HAL_RCC_OscConfig+0x4dc>)
 800c868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c86c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c86e:	f7fc fc4f 	bl	8009110 <HAL_GetTick>
 800c872:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800c874:	e008      	b.n	800c888 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800c876:	f7fc fc4b 	bl	8009110 <HAL_GetTick>
 800c87a:	4602      	mov	r2, r0
 800c87c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c87e:	1ad3      	subs	r3, r2, r3
 800c880:	2b02      	cmp	r3, #2
 800c882:	d901      	bls.n	800c888 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 800c884:	2303      	movs	r3, #3
 800c886:	e28a      	b.n	800cd9e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800c888:	4b67      	ldr	r3, [pc, #412]	; (800ca28 <HAL_RCC_OscConfig+0x4dc>)
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c890:	2b00      	cmp	r3, #0
 800c892:	d0f0      	beq.n	800c876 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800c894:	4b64      	ldr	r3, [pc, #400]	; (800ca28 <HAL_RCC_OscConfig+0x4dc>)
 800c896:	68db      	ldr	r3, [r3, #12]
 800c898:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	6a1b      	ldr	r3, [r3, #32]
 800c8a0:	061b      	lsls	r3, r3, #24
 800c8a2:	4961      	ldr	r1, [pc, #388]	; (800ca28 <HAL_RCC_OscConfig+0x4dc>)
 800c8a4:	4313      	orrs	r3, r2
 800c8a6:	60cb      	str	r3, [r1, #12]
 800c8a8:	e018      	b.n	800c8dc <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800c8aa:	4b5f      	ldr	r3, [pc, #380]	; (800ca28 <HAL_RCC_OscConfig+0x4dc>)
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	4a5e      	ldr	r2, [pc, #376]	; (800ca28 <HAL_RCC_OscConfig+0x4dc>)
 800c8b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c8b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c8b6:	f7fc fc2b 	bl	8009110 <HAL_GetTick>
 800c8ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800c8bc:	e008      	b.n	800c8d0 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800c8be:	f7fc fc27 	bl	8009110 <HAL_GetTick>
 800c8c2:	4602      	mov	r2, r0
 800c8c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8c6:	1ad3      	subs	r3, r2, r3
 800c8c8:	2b02      	cmp	r3, #2
 800c8ca:	d901      	bls.n	800c8d0 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 800c8cc:	2303      	movs	r3, #3
 800c8ce:	e266      	b.n	800cd9e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800c8d0:	4b55      	ldr	r3, [pc, #340]	; (800ca28 <HAL_RCC_OscConfig+0x4dc>)
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d1f0      	bne.n	800c8be <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	f003 0308 	and.w	r3, r3, #8
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d036      	beq.n	800c956 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	695b      	ldr	r3, [r3, #20]
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d019      	beq.n	800c924 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c8f0:	4b4d      	ldr	r3, [pc, #308]	; (800ca28 <HAL_RCC_OscConfig+0x4dc>)
 800c8f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c8f4:	4a4c      	ldr	r2, [pc, #304]	; (800ca28 <HAL_RCC_OscConfig+0x4dc>)
 800c8f6:	f043 0301 	orr.w	r3, r3, #1
 800c8fa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c8fc:	f7fc fc08 	bl	8009110 <HAL_GetTick>
 800c900:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800c902:	e008      	b.n	800c916 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c904:	f7fc fc04 	bl	8009110 <HAL_GetTick>
 800c908:	4602      	mov	r2, r0
 800c90a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c90c:	1ad3      	subs	r3, r2, r3
 800c90e:	2b02      	cmp	r3, #2
 800c910:	d901      	bls.n	800c916 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800c912:	2303      	movs	r3, #3
 800c914:	e243      	b.n	800cd9e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800c916:	4b44      	ldr	r3, [pc, #272]	; (800ca28 <HAL_RCC_OscConfig+0x4dc>)
 800c918:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c91a:	f003 0302 	and.w	r3, r3, #2
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d0f0      	beq.n	800c904 <HAL_RCC_OscConfig+0x3b8>
 800c922:	e018      	b.n	800c956 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c924:	4b40      	ldr	r3, [pc, #256]	; (800ca28 <HAL_RCC_OscConfig+0x4dc>)
 800c926:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c928:	4a3f      	ldr	r2, [pc, #252]	; (800ca28 <HAL_RCC_OscConfig+0x4dc>)
 800c92a:	f023 0301 	bic.w	r3, r3, #1
 800c92e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c930:	f7fc fbee 	bl	8009110 <HAL_GetTick>
 800c934:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800c936:	e008      	b.n	800c94a <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c938:	f7fc fbea 	bl	8009110 <HAL_GetTick>
 800c93c:	4602      	mov	r2, r0
 800c93e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c940:	1ad3      	subs	r3, r2, r3
 800c942:	2b02      	cmp	r3, #2
 800c944:	d901      	bls.n	800c94a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800c946:	2303      	movs	r3, #3
 800c948:	e229      	b.n	800cd9e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800c94a:	4b37      	ldr	r3, [pc, #220]	; (800ca28 <HAL_RCC_OscConfig+0x4dc>)
 800c94c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c94e:	f003 0302 	and.w	r3, r3, #2
 800c952:	2b00      	cmp	r3, #0
 800c954:	d1f0      	bne.n	800c938 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	f003 0320 	and.w	r3, r3, #32
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d036      	beq.n	800c9d0 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	699b      	ldr	r3, [r3, #24]
 800c966:	2b00      	cmp	r3, #0
 800c968:	d019      	beq.n	800c99e <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800c96a:	4b2f      	ldr	r3, [pc, #188]	; (800ca28 <HAL_RCC_OscConfig+0x4dc>)
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	4a2e      	ldr	r2, [pc, #184]	; (800ca28 <HAL_RCC_OscConfig+0x4dc>)
 800c970:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800c974:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800c976:	f7fc fbcb 	bl	8009110 <HAL_GetTick>
 800c97a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800c97c:	e008      	b.n	800c990 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c97e:	f7fc fbc7 	bl	8009110 <HAL_GetTick>
 800c982:	4602      	mov	r2, r0
 800c984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c986:	1ad3      	subs	r3, r2, r3
 800c988:	2b02      	cmp	r3, #2
 800c98a:	d901      	bls.n	800c990 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800c98c:	2303      	movs	r3, #3
 800c98e:	e206      	b.n	800cd9e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800c990:	4b25      	ldr	r3, [pc, #148]	; (800ca28 <HAL_RCC_OscConfig+0x4dc>)
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d0f0      	beq.n	800c97e <HAL_RCC_OscConfig+0x432>
 800c99c:	e018      	b.n	800c9d0 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800c99e:	4b22      	ldr	r3, [pc, #136]	; (800ca28 <HAL_RCC_OscConfig+0x4dc>)
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	4a21      	ldr	r2, [pc, #132]	; (800ca28 <HAL_RCC_OscConfig+0x4dc>)
 800c9a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c9a8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800c9aa:	f7fc fbb1 	bl	8009110 <HAL_GetTick>
 800c9ae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800c9b0:	e008      	b.n	800c9c4 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c9b2:	f7fc fbad 	bl	8009110 <HAL_GetTick>
 800c9b6:	4602      	mov	r2, r0
 800c9b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9ba:	1ad3      	subs	r3, r2, r3
 800c9bc:	2b02      	cmp	r3, #2
 800c9be:	d901      	bls.n	800c9c4 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 800c9c0:	2303      	movs	r3, #3
 800c9c2:	e1ec      	b.n	800cd9e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800c9c4:	4b18      	ldr	r3, [pc, #96]	; (800ca28 <HAL_RCC_OscConfig+0x4dc>)
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d1f0      	bne.n	800c9b2 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	f003 0304 	and.w	r3, r3, #4
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	f000 80af 	beq.w	800cb3c <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800c9de:	4b13      	ldr	r3, [pc, #76]	; (800ca2c <HAL_RCC_OscConfig+0x4e0>)
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	4a12      	ldr	r2, [pc, #72]	; (800ca2c <HAL_RCC_OscConfig+0x4e0>)
 800c9e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c9e8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c9ea:	f7fc fb91 	bl	8009110 <HAL_GetTick>
 800c9ee:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c9f0:	e008      	b.n	800ca04 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c9f2:	f7fc fb8d 	bl	8009110 <HAL_GetTick>
 800c9f6:	4602      	mov	r2, r0
 800c9f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9fa:	1ad3      	subs	r3, r2, r3
 800c9fc:	2b64      	cmp	r3, #100	; 0x64
 800c9fe:	d901      	bls.n	800ca04 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 800ca00:	2303      	movs	r3, #3
 800ca02:	e1cc      	b.n	800cd9e <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ca04:	4b09      	ldr	r3, [pc, #36]	; (800ca2c <HAL_RCC_OscConfig+0x4e0>)
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d0f0      	beq.n	800c9f2 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	689b      	ldr	r3, [r3, #8]
 800ca14:	2b01      	cmp	r3, #1
 800ca16:	d10b      	bne.n	800ca30 <HAL_RCC_OscConfig+0x4e4>
 800ca18:	4b03      	ldr	r3, [pc, #12]	; (800ca28 <HAL_RCC_OscConfig+0x4dc>)
 800ca1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca1c:	4a02      	ldr	r2, [pc, #8]	; (800ca28 <HAL_RCC_OscConfig+0x4dc>)
 800ca1e:	f043 0301 	orr.w	r3, r3, #1
 800ca22:	6713      	str	r3, [r2, #112]	; 0x70
 800ca24:	e05b      	b.n	800cade <HAL_RCC_OscConfig+0x592>
 800ca26:	bf00      	nop
 800ca28:	58024400 	.word	0x58024400
 800ca2c:	58024800 	.word	0x58024800
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	689b      	ldr	r3, [r3, #8]
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d112      	bne.n	800ca5e <HAL_RCC_OscConfig+0x512>
 800ca38:	4b9d      	ldr	r3, [pc, #628]	; (800ccb0 <HAL_RCC_OscConfig+0x764>)
 800ca3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca3c:	4a9c      	ldr	r2, [pc, #624]	; (800ccb0 <HAL_RCC_OscConfig+0x764>)
 800ca3e:	f023 0301 	bic.w	r3, r3, #1
 800ca42:	6713      	str	r3, [r2, #112]	; 0x70
 800ca44:	4b9a      	ldr	r3, [pc, #616]	; (800ccb0 <HAL_RCC_OscConfig+0x764>)
 800ca46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca48:	4a99      	ldr	r2, [pc, #612]	; (800ccb0 <HAL_RCC_OscConfig+0x764>)
 800ca4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ca4e:	6713      	str	r3, [r2, #112]	; 0x70
 800ca50:	4b97      	ldr	r3, [pc, #604]	; (800ccb0 <HAL_RCC_OscConfig+0x764>)
 800ca52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca54:	4a96      	ldr	r2, [pc, #600]	; (800ccb0 <HAL_RCC_OscConfig+0x764>)
 800ca56:	f023 0304 	bic.w	r3, r3, #4
 800ca5a:	6713      	str	r3, [r2, #112]	; 0x70
 800ca5c:	e03f      	b.n	800cade <HAL_RCC_OscConfig+0x592>
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	689b      	ldr	r3, [r3, #8]
 800ca62:	2b05      	cmp	r3, #5
 800ca64:	d112      	bne.n	800ca8c <HAL_RCC_OscConfig+0x540>
 800ca66:	4b92      	ldr	r3, [pc, #584]	; (800ccb0 <HAL_RCC_OscConfig+0x764>)
 800ca68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca6a:	4a91      	ldr	r2, [pc, #580]	; (800ccb0 <HAL_RCC_OscConfig+0x764>)
 800ca6c:	f043 0304 	orr.w	r3, r3, #4
 800ca70:	6713      	str	r3, [r2, #112]	; 0x70
 800ca72:	4b8f      	ldr	r3, [pc, #572]	; (800ccb0 <HAL_RCC_OscConfig+0x764>)
 800ca74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca76:	4a8e      	ldr	r2, [pc, #568]	; (800ccb0 <HAL_RCC_OscConfig+0x764>)
 800ca78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ca7c:	6713      	str	r3, [r2, #112]	; 0x70
 800ca7e:	4b8c      	ldr	r3, [pc, #560]	; (800ccb0 <HAL_RCC_OscConfig+0x764>)
 800ca80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca82:	4a8b      	ldr	r2, [pc, #556]	; (800ccb0 <HAL_RCC_OscConfig+0x764>)
 800ca84:	f043 0301 	orr.w	r3, r3, #1
 800ca88:	6713      	str	r3, [r2, #112]	; 0x70
 800ca8a:	e028      	b.n	800cade <HAL_RCC_OscConfig+0x592>
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	689b      	ldr	r3, [r3, #8]
 800ca90:	2b85      	cmp	r3, #133	; 0x85
 800ca92:	d112      	bne.n	800caba <HAL_RCC_OscConfig+0x56e>
 800ca94:	4b86      	ldr	r3, [pc, #536]	; (800ccb0 <HAL_RCC_OscConfig+0x764>)
 800ca96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca98:	4a85      	ldr	r2, [pc, #532]	; (800ccb0 <HAL_RCC_OscConfig+0x764>)
 800ca9a:	f043 0304 	orr.w	r3, r3, #4
 800ca9e:	6713      	str	r3, [r2, #112]	; 0x70
 800caa0:	4b83      	ldr	r3, [pc, #524]	; (800ccb0 <HAL_RCC_OscConfig+0x764>)
 800caa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800caa4:	4a82      	ldr	r2, [pc, #520]	; (800ccb0 <HAL_RCC_OscConfig+0x764>)
 800caa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800caaa:	6713      	str	r3, [r2, #112]	; 0x70
 800caac:	4b80      	ldr	r3, [pc, #512]	; (800ccb0 <HAL_RCC_OscConfig+0x764>)
 800caae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cab0:	4a7f      	ldr	r2, [pc, #508]	; (800ccb0 <HAL_RCC_OscConfig+0x764>)
 800cab2:	f043 0301 	orr.w	r3, r3, #1
 800cab6:	6713      	str	r3, [r2, #112]	; 0x70
 800cab8:	e011      	b.n	800cade <HAL_RCC_OscConfig+0x592>
 800caba:	4b7d      	ldr	r3, [pc, #500]	; (800ccb0 <HAL_RCC_OscConfig+0x764>)
 800cabc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cabe:	4a7c      	ldr	r2, [pc, #496]	; (800ccb0 <HAL_RCC_OscConfig+0x764>)
 800cac0:	f023 0301 	bic.w	r3, r3, #1
 800cac4:	6713      	str	r3, [r2, #112]	; 0x70
 800cac6:	4b7a      	ldr	r3, [pc, #488]	; (800ccb0 <HAL_RCC_OscConfig+0x764>)
 800cac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800caca:	4a79      	ldr	r2, [pc, #484]	; (800ccb0 <HAL_RCC_OscConfig+0x764>)
 800cacc:	f023 0304 	bic.w	r3, r3, #4
 800cad0:	6713      	str	r3, [r2, #112]	; 0x70
 800cad2:	4b77      	ldr	r3, [pc, #476]	; (800ccb0 <HAL_RCC_OscConfig+0x764>)
 800cad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cad6:	4a76      	ldr	r2, [pc, #472]	; (800ccb0 <HAL_RCC_OscConfig+0x764>)
 800cad8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cadc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	689b      	ldr	r3, [r3, #8]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d015      	beq.n	800cb12 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cae6:	f7fc fb13 	bl	8009110 <HAL_GetTick>
 800caea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800caec:	e00a      	b.n	800cb04 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800caee:	f7fc fb0f 	bl	8009110 <HAL_GetTick>
 800caf2:	4602      	mov	r2, r0
 800caf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caf6:	1ad3      	subs	r3, r2, r3
 800caf8:	f241 3288 	movw	r2, #5000	; 0x1388
 800cafc:	4293      	cmp	r3, r2
 800cafe:	d901      	bls.n	800cb04 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 800cb00:	2303      	movs	r3, #3
 800cb02:	e14c      	b.n	800cd9e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800cb04:	4b6a      	ldr	r3, [pc, #424]	; (800ccb0 <HAL_RCC_OscConfig+0x764>)
 800cb06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb08:	f003 0302 	and.w	r3, r3, #2
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d0ee      	beq.n	800caee <HAL_RCC_OscConfig+0x5a2>
 800cb10:	e014      	b.n	800cb3c <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cb12:	f7fc fafd 	bl	8009110 <HAL_GetTick>
 800cb16:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800cb18:	e00a      	b.n	800cb30 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cb1a:	f7fc faf9 	bl	8009110 <HAL_GetTick>
 800cb1e:	4602      	mov	r2, r0
 800cb20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb22:	1ad3      	subs	r3, r2, r3
 800cb24:	f241 3288 	movw	r2, #5000	; 0x1388
 800cb28:	4293      	cmp	r3, r2
 800cb2a:	d901      	bls.n	800cb30 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 800cb2c:	2303      	movs	r3, #3
 800cb2e:	e136      	b.n	800cd9e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800cb30:	4b5f      	ldr	r3, [pc, #380]	; (800ccb0 <HAL_RCC_OscConfig+0x764>)
 800cb32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb34:	f003 0302 	and.w	r3, r3, #2
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d1ee      	bne.n	800cb1a <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	f000 812b 	beq.w	800cd9c <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800cb46:	4b5a      	ldr	r3, [pc, #360]	; (800ccb0 <HAL_RCC_OscConfig+0x764>)
 800cb48:	691b      	ldr	r3, [r3, #16]
 800cb4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cb4e:	2b18      	cmp	r3, #24
 800cb50:	f000 80bb 	beq.w	800ccca <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb58:	2b02      	cmp	r3, #2
 800cb5a:	f040 8095 	bne.w	800cc88 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cb5e:	4b54      	ldr	r3, [pc, #336]	; (800ccb0 <HAL_RCC_OscConfig+0x764>)
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	4a53      	ldr	r2, [pc, #332]	; (800ccb0 <HAL_RCC_OscConfig+0x764>)
 800cb64:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800cb68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cb6a:	f7fc fad1 	bl	8009110 <HAL_GetTick>
 800cb6e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800cb70:	e008      	b.n	800cb84 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cb72:	f7fc facd 	bl	8009110 <HAL_GetTick>
 800cb76:	4602      	mov	r2, r0
 800cb78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb7a:	1ad3      	subs	r3, r2, r3
 800cb7c:	2b02      	cmp	r3, #2
 800cb7e:	d901      	bls.n	800cb84 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 800cb80:	2303      	movs	r3, #3
 800cb82:	e10c      	b.n	800cd9e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800cb84:	4b4a      	ldr	r3, [pc, #296]	; (800ccb0 <HAL_RCC_OscConfig+0x764>)
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d1f0      	bne.n	800cb72 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800cb90:	4b47      	ldr	r3, [pc, #284]	; (800ccb0 <HAL_RCC_OscConfig+0x764>)
 800cb92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cb94:	4b47      	ldr	r3, [pc, #284]	; (800ccb4 <HAL_RCC_OscConfig+0x768>)
 800cb96:	4013      	ands	r3, r2
 800cb98:	687a      	ldr	r2, [r7, #4]
 800cb9a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800cb9c:	687a      	ldr	r2, [r7, #4]
 800cb9e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800cba0:	0112      	lsls	r2, r2, #4
 800cba2:	430a      	orrs	r2, r1
 800cba4:	4942      	ldr	r1, [pc, #264]	; (800ccb0 <HAL_RCC_OscConfig+0x764>)
 800cba6:	4313      	orrs	r3, r2
 800cba8:	628b      	str	r3, [r1, #40]	; 0x28
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbae:	3b01      	subs	r3, #1
 800cbb0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cbb8:	3b01      	subs	r3, #1
 800cbba:	025b      	lsls	r3, r3, #9
 800cbbc:	b29b      	uxth	r3, r3
 800cbbe:	431a      	orrs	r2, r3
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbc4:	3b01      	subs	r3, #1
 800cbc6:	041b      	lsls	r3, r3, #16
 800cbc8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800cbcc:	431a      	orrs	r2, r3
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbd2:	3b01      	subs	r3, #1
 800cbd4:	061b      	lsls	r3, r3, #24
 800cbd6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800cbda:	4935      	ldr	r1, [pc, #212]	; (800ccb0 <HAL_RCC_OscConfig+0x764>)
 800cbdc:	4313      	orrs	r3, r2
 800cbde:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800cbe0:	4b33      	ldr	r3, [pc, #204]	; (800ccb0 <HAL_RCC_OscConfig+0x764>)
 800cbe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbe4:	4a32      	ldr	r2, [pc, #200]	; (800ccb0 <HAL_RCC_OscConfig+0x764>)
 800cbe6:	f023 0301 	bic.w	r3, r3, #1
 800cbea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800cbec:	4b30      	ldr	r3, [pc, #192]	; (800ccb0 <HAL_RCC_OscConfig+0x764>)
 800cbee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cbf0:	4b31      	ldr	r3, [pc, #196]	; (800ccb8 <HAL_RCC_OscConfig+0x76c>)
 800cbf2:	4013      	ands	r3, r2
 800cbf4:	687a      	ldr	r2, [r7, #4]
 800cbf6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800cbf8:	00d2      	lsls	r2, r2, #3
 800cbfa:	492d      	ldr	r1, [pc, #180]	; (800ccb0 <HAL_RCC_OscConfig+0x764>)
 800cbfc:	4313      	orrs	r3, r2
 800cbfe:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800cc00:	4b2b      	ldr	r3, [pc, #172]	; (800ccb0 <HAL_RCC_OscConfig+0x764>)
 800cc02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc04:	f023 020c 	bic.w	r2, r3, #12
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc0c:	4928      	ldr	r1, [pc, #160]	; (800ccb0 <HAL_RCC_OscConfig+0x764>)
 800cc0e:	4313      	orrs	r3, r2
 800cc10:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800cc12:	4b27      	ldr	r3, [pc, #156]	; (800ccb0 <HAL_RCC_OscConfig+0x764>)
 800cc14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc16:	f023 0202 	bic.w	r2, r3, #2
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc1e:	4924      	ldr	r1, [pc, #144]	; (800ccb0 <HAL_RCC_OscConfig+0x764>)
 800cc20:	4313      	orrs	r3, r2
 800cc22:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800cc24:	4b22      	ldr	r3, [pc, #136]	; (800ccb0 <HAL_RCC_OscConfig+0x764>)
 800cc26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc28:	4a21      	ldr	r2, [pc, #132]	; (800ccb0 <HAL_RCC_OscConfig+0x764>)
 800cc2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cc2e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cc30:	4b1f      	ldr	r3, [pc, #124]	; (800ccb0 <HAL_RCC_OscConfig+0x764>)
 800cc32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc34:	4a1e      	ldr	r2, [pc, #120]	; (800ccb0 <HAL_RCC_OscConfig+0x764>)
 800cc36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cc3a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800cc3c:	4b1c      	ldr	r3, [pc, #112]	; (800ccb0 <HAL_RCC_OscConfig+0x764>)
 800cc3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc40:	4a1b      	ldr	r2, [pc, #108]	; (800ccb0 <HAL_RCC_OscConfig+0x764>)
 800cc42:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800cc46:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800cc48:	4b19      	ldr	r3, [pc, #100]	; (800ccb0 <HAL_RCC_OscConfig+0x764>)
 800cc4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc4c:	4a18      	ldr	r2, [pc, #96]	; (800ccb0 <HAL_RCC_OscConfig+0x764>)
 800cc4e:	f043 0301 	orr.w	r3, r3, #1
 800cc52:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800cc54:	4b16      	ldr	r3, [pc, #88]	; (800ccb0 <HAL_RCC_OscConfig+0x764>)
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	4a15      	ldr	r2, [pc, #84]	; (800ccb0 <HAL_RCC_OscConfig+0x764>)
 800cc5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cc5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cc60:	f7fc fa56 	bl	8009110 <HAL_GetTick>
 800cc64:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800cc66:	e008      	b.n	800cc7a <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cc68:	f7fc fa52 	bl	8009110 <HAL_GetTick>
 800cc6c:	4602      	mov	r2, r0
 800cc6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc70:	1ad3      	subs	r3, r2, r3
 800cc72:	2b02      	cmp	r3, #2
 800cc74:	d901      	bls.n	800cc7a <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800cc76:	2303      	movs	r3, #3
 800cc78:	e091      	b.n	800cd9e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800cc7a:	4b0d      	ldr	r3, [pc, #52]	; (800ccb0 <HAL_RCC_OscConfig+0x764>)
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d0f0      	beq.n	800cc68 <HAL_RCC_OscConfig+0x71c>
 800cc86:	e089      	b.n	800cd9c <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cc88:	4b09      	ldr	r3, [pc, #36]	; (800ccb0 <HAL_RCC_OscConfig+0x764>)
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	4a08      	ldr	r2, [pc, #32]	; (800ccb0 <HAL_RCC_OscConfig+0x764>)
 800cc8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800cc92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cc94:	f7fc fa3c 	bl	8009110 <HAL_GetTick>
 800cc98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800cc9a:	e00f      	b.n	800ccbc <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cc9c:	f7fc fa38 	bl	8009110 <HAL_GetTick>
 800cca0:	4602      	mov	r2, r0
 800cca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cca4:	1ad3      	subs	r3, r2, r3
 800cca6:	2b02      	cmp	r3, #2
 800cca8:	d908      	bls.n	800ccbc <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 800ccaa:	2303      	movs	r3, #3
 800ccac:	e077      	b.n	800cd9e <HAL_RCC_OscConfig+0x852>
 800ccae:	bf00      	nop
 800ccb0:	58024400 	.word	0x58024400
 800ccb4:	fffffc0c 	.word	0xfffffc0c
 800ccb8:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ccbc:	4b3a      	ldr	r3, [pc, #232]	; (800cda8 <HAL_RCC_OscConfig+0x85c>)
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d1e9      	bne.n	800cc9c <HAL_RCC_OscConfig+0x750>
 800ccc8:	e068      	b.n	800cd9c <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800ccca:	4b37      	ldr	r3, [pc, #220]	; (800cda8 <HAL_RCC_OscConfig+0x85c>)
 800cccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccce:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800ccd0:	4b35      	ldr	r3, [pc, #212]	; (800cda8 <HAL_RCC_OscConfig+0x85c>)
 800ccd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccd4:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccda:	2b01      	cmp	r3, #1
 800ccdc:	d031      	beq.n	800cd42 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ccde:	693b      	ldr	r3, [r7, #16]
 800cce0:	f003 0203 	and.w	r2, r3, #3
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800cce8:	429a      	cmp	r2, r3
 800ccea:	d12a      	bne.n	800cd42 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800ccec:	693b      	ldr	r3, [r7, #16]
 800ccee:	091b      	lsrs	r3, r3, #4
 800ccf0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ccf8:	429a      	cmp	r2, r3
 800ccfa:	d122      	bne.n	800cd42 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd06:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800cd08:	429a      	cmp	r2, r3
 800cd0a:	d11a      	bne.n	800cd42 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	0a5b      	lsrs	r3, r3, #9
 800cd10:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd18:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800cd1a:	429a      	cmp	r2, r3
 800cd1c:	d111      	bne.n	800cd42 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	0c1b      	lsrs	r3, r3, #16
 800cd22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd2a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800cd2c:	429a      	cmp	r2, r3
 800cd2e:	d108      	bne.n	800cd42 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	0e1b      	lsrs	r3, r3, #24
 800cd34:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd3c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800cd3e:	429a      	cmp	r2, r3
 800cd40:	d001      	beq.n	800cd46 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800cd42:	2301      	movs	r3, #1
 800cd44:	e02b      	b.n	800cd9e <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800cd46:	4b18      	ldr	r3, [pc, #96]	; (800cda8 <HAL_RCC_OscConfig+0x85c>)
 800cd48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd4a:	08db      	lsrs	r3, r3, #3
 800cd4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cd50:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cd56:	693a      	ldr	r2, [r7, #16]
 800cd58:	429a      	cmp	r2, r3
 800cd5a:	d01f      	beq.n	800cd9c <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800cd5c:	4b12      	ldr	r3, [pc, #72]	; (800cda8 <HAL_RCC_OscConfig+0x85c>)
 800cd5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd60:	4a11      	ldr	r2, [pc, #68]	; (800cda8 <HAL_RCC_OscConfig+0x85c>)
 800cd62:	f023 0301 	bic.w	r3, r3, #1
 800cd66:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800cd68:	f7fc f9d2 	bl	8009110 <HAL_GetTick>
 800cd6c:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800cd6e:	bf00      	nop
 800cd70:	f7fc f9ce 	bl	8009110 <HAL_GetTick>
 800cd74:	4602      	mov	r2, r0
 800cd76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd78:	4293      	cmp	r3, r2
 800cd7a:	d0f9      	beq.n	800cd70 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800cd7c:	4b0a      	ldr	r3, [pc, #40]	; (800cda8 <HAL_RCC_OscConfig+0x85c>)
 800cd7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cd80:	4b0a      	ldr	r3, [pc, #40]	; (800cdac <HAL_RCC_OscConfig+0x860>)
 800cd82:	4013      	ands	r3, r2
 800cd84:	687a      	ldr	r2, [r7, #4]
 800cd86:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800cd88:	00d2      	lsls	r2, r2, #3
 800cd8a:	4907      	ldr	r1, [pc, #28]	; (800cda8 <HAL_RCC_OscConfig+0x85c>)
 800cd8c:	4313      	orrs	r3, r2
 800cd8e:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800cd90:	4b05      	ldr	r3, [pc, #20]	; (800cda8 <HAL_RCC_OscConfig+0x85c>)
 800cd92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd94:	4a04      	ldr	r2, [pc, #16]	; (800cda8 <HAL_RCC_OscConfig+0x85c>)
 800cd96:	f043 0301 	orr.w	r3, r3, #1
 800cd9a:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800cd9c:	2300      	movs	r3, #0
}
 800cd9e:	4618      	mov	r0, r3
 800cda0:	3730      	adds	r7, #48	; 0x30
 800cda2:	46bd      	mov	sp, r7
 800cda4:	bd80      	pop	{r7, pc}
 800cda6:	bf00      	nop
 800cda8:	58024400 	.word	0x58024400
 800cdac:	ffff0007 	.word	0xffff0007

0800cdb0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	b086      	sub	sp, #24
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	6078      	str	r0, [r7, #4]
 800cdb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d101      	bne.n	800cdc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800cdc0:	2301      	movs	r3, #1
 800cdc2:	e19c      	b.n	800d0fe <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800cdc4:	4b8a      	ldr	r3, [pc, #552]	; (800cff0 <HAL_RCC_ClockConfig+0x240>)
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	f003 030f 	and.w	r3, r3, #15
 800cdcc:	683a      	ldr	r2, [r7, #0]
 800cdce:	429a      	cmp	r2, r3
 800cdd0:	d910      	bls.n	800cdf4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cdd2:	4b87      	ldr	r3, [pc, #540]	; (800cff0 <HAL_RCC_ClockConfig+0x240>)
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	f023 020f 	bic.w	r2, r3, #15
 800cdda:	4985      	ldr	r1, [pc, #532]	; (800cff0 <HAL_RCC_ClockConfig+0x240>)
 800cddc:	683b      	ldr	r3, [r7, #0]
 800cdde:	4313      	orrs	r3, r2
 800cde0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cde2:	4b83      	ldr	r3, [pc, #524]	; (800cff0 <HAL_RCC_ClockConfig+0x240>)
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	f003 030f 	and.w	r3, r3, #15
 800cdea:	683a      	ldr	r2, [r7, #0]
 800cdec:	429a      	cmp	r2, r3
 800cdee:	d001      	beq.n	800cdf4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800cdf0:	2301      	movs	r3, #1
 800cdf2:	e184      	b.n	800d0fe <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	f003 0304 	and.w	r3, r3, #4
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d010      	beq.n	800ce22 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	691a      	ldr	r2, [r3, #16]
 800ce04:	4b7b      	ldr	r3, [pc, #492]	; (800cff4 <HAL_RCC_ClockConfig+0x244>)
 800ce06:	699b      	ldr	r3, [r3, #24]
 800ce08:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ce0c:	429a      	cmp	r2, r3
 800ce0e:	d908      	bls.n	800ce22 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800ce10:	4b78      	ldr	r3, [pc, #480]	; (800cff4 <HAL_RCC_ClockConfig+0x244>)
 800ce12:	699b      	ldr	r3, [r3, #24]
 800ce14:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	691b      	ldr	r3, [r3, #16]
 800ce1c:	4975      	ldr	r1, [pc, #468]	; (800cff4 <HAL_RCC_ClockConfig+0x244>)
 800ce1e:	4313      	orrs	r3, r2
 800ce20:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	f003 0308 	and.w	r3, r3, #8
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d010      	beq.n	800ce50 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	695a      	ldr	r2, [r3, #20]
 800ce32:	4b70      	ldr	r3, [pc, #448]	; (800cff4 <HAL_RCC_ClockConfig+0x244>)
 800ce34:	69db      	ldr	r3, [r3, #28]
 800ce36:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ce3a:	429a      	cmp	r2, r3
 800ce3c:	d908      	bls.n	800ce50 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800ce3e:	4b6d      	ldr	r3, [pc, #436]	; (800cff4 <HAL_RCC_ClockConfig+0x244>)
 800ce40:	69db      	ldr	r3, [r3, #28]
 800ce42:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	695b      	ldr	r3, [r3, #20]
 800ce4a:	496a      	ldr	r1, [pc, #424]	; (800cff4 <HAL_RCC_ClockConfig+0x244>)
 800ce4c:	4313      	orrs	r3, r2
 800ce4e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	f003 0310 	and.w	r3, r3, #16
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d010      	beq.n	800ce7e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	699a      	ldr	r2, [r3, #24]
 800ce60:	4b64      	ldr	r3, [pc, #400]	; (800cff4 <HAL_RCC_ClockConfig+0x244>)
 800ce62:	69db      	ldr	r3, [r3, #28]
 800ce64:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ce68:	429a      	cmp	r2, r3
 800ce6a:	d908      	bls.n	800ce7e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800ce6c:	4b61      	ldr	r3, [pc, #388]	; (800cff4 <HAL_RCC_ClockConfig+0x244>)
 800ce6e:	69db      	ldr	r3, [r3, #28]
 800ce70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	699b      	ldr	r3, [r3, #24]
 800ce78:	495e      	ldr	r1, [pc, #376]	; (800cff4 <HAL_RCC_ClockConfig+0x244>)
 800ce7a:	4313      	orrs	r3, r2
 800ce7c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	f003 0320 	and.w	r3, r3, #32
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d010      	beq.n	800ceac <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	69da      	ldr	r2, [r3, #28]
 800ce8e:	4b59      	ldr	r3, [pc, #356]	; (800cff4 <HAL_RCC_ClockConfig+0x244>)
 800ce90:	6a1b      	ldr	r3, [r3, #32]
 800ce92:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ce96:	429a      	cmp	r2, r3
 800ce98:	d908      	bls.n	800ceac <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800ce9a:	4b56      	ldr	r3, [pc, #344]	; (800cff4 <HAL_RCC_ClockConfig+0x244>)
 800ce9c:	6a1b      	ldr	r3, [r3, #32]
 800ce9e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	69db      	ldr	r3, [r3, #28]
 800cea6:	4953      	ldr	r1, [pc, #332]	; (800cff4 <HAL_RCC_ClockConfig+0x244>)
 800cea8:	4313      	orrs	r3, r2
 800ceaa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	f003 0302 	and.w	r3, r3, #2
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d010      	beq.n	800ceda <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	68da      	ldr	r2, [r3, #12]
 800cebc:	4b4d      	ldr	r3, [pc, #308]	; (800cff4 <HAL_RCC_ClockConfig+0x244>)
 800cebe:	699b      	ldr	r3, [r3, #24]
 800cec0:	f003 030f 	and.w	r3, r3, #15
 800cec4:	429a      	cmp	r2, r3
 800cec6:	d908      	bls.n	800ceda <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800cec8:	4b4a      	ldr	r3, [pc, #296]	; (800cff4 <HAL_RCC_ClockConfig+0x244>)
 800ceca:	699b      	ldr	r3, [r3, #24]
 800cecc:	f023 020f 	bic.w	r2, r3, #15
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	68db      	ldr	r3, [r3, #12]
 800ced4:	4947      	ldr	r1, [pc, #284]	; (800cff4 <HAL_RCC_ClockConfig+0x244>)
 800ced6:	4313      	orrs	r3, r2
 800ced8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	f003 0301 	and.w	r3, r3, #1
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d055      	beq.n	800cf92 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800cee6:	4b43      	ldr	r3, [pc, #268]	; (800cff4 <HAL_RCC_ClockConfig+0x244>)
 800cee8:	699b      	ldr	r3, [r3, #24]
 800ceea:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	689b      	ldr	r3, [r3, #8]
 800cef2:	4940      	ldr	r1, [pc, #256]	; (800cff4 <HAL_RCC_ClockConfig+0x244>)
 800cef4:	4313      	orrs	r3, r2
 800cef6:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	685b      	ldr	r3, [r3, #4]
 800cefc:	2b02      	cmp	r3, #2
 800cefe:	d107      	bne.n	800cf10 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800cf00:	4b3c      	ldr	r3, [pc, #240]	; (800cff4 <HAL_RCC_ClockConfig+0x244>)
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d121      	bne.n	800cf50 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800cf0c:	2301      	movs	r3, #1
 800cf0e:	e0f6      	b.n	800d0fe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	685b      	ldr	r3, [r3, #4]
 800cf14:	2b03      	cmp	r3, #3
 800cf16:	d107      	bne.n	800cf28 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800cf18:	4b36      	ldr	r3, [pc, #216]	; (800cff4 <HAL_RCC_ClockConfig+0x244>)
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d115      	bne.n	800cf50 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800cf24:	2301      	movs	r3, #1
 800cf26:	e0ea      	b.n	800d0fe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	685b      	ldr	r3, [r3, #4]
 800cf2c:	2b01      	cmp	r3, #1
 800cf2e:	d107      	bne.n	800cf40 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800cf30:	4b30      	ldr	r3, [pc, #192]	; (800cff4 <HAL_RCC_ClockConfig+0x244>)
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d109      	bne.n	800cf50 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800cf3c:	2301      	movs	r3, #1
 800cf3e:	e0de      	b.n	800d0fe <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800cf40:	4b2c      	ldr	r3, [pc, #176]	; (800cff4 <HAL_RCC_ClockConfig+0x244>)
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	f003 0304 	and.w	r3, r3, #4
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d101      	bne.n	800cf50 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800cf4c:	2301      	movs	r3, #1
 800cf4e:	e0d6      	b.n	800d0fe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800cf50:	4b28      	ldr	r3, [pc, #160]	; (800cff4 <HAL_RCC_ClockConfig+0x244>)
 800cf52:	691b      	ldr	r3, [r3, #16]
 800cf54:	f023 0207 	bic.w	r2, r3, #7
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	685b      	ldr	r3, [r3, #4]
 800cf5c:	4925      	ldr	r1, [pc, #148]	; (800cff4 <HAL_RCC_ClockConfig+0x244>)
 800cf5e:	4313      	orrs	r3, r2
 800cf60:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cf62:	f7fc f8d5 	bl	8009110 <HAL_GetTick>
 800cf66:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cf68:	e00a      	b.n	800cf80 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cf6a:	f7fc f8d1 	bl	8009110 <HAL_GetTick>
 800cf6e:	4602      	mov	r2, r0
 800cf70:	697b      	ldr	r3, [r7, #20]
 800cf72:	1ad3      	subs	r3, r2, r3
 800cf74:	f241 3288 	movw	r2, #5000	; 0x1388
 800cf78:	4293      	cmp	r3, r2
 800cf7a:	d901      	bls.n	800cf80 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800cf7c:	2303      	movs	r3, #3
 800cf7e:	e0be      	b.n	800d0fe <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cf80:	4b1c      	ldr	r3, [pc, #112]	; (800cff4 <HAL_RCC_ClockConfig+0x244>)
 800cf82:	691b      	ldr	r3, [r3, #16]
 800cf84:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	685b      	ldr	r3, [r3, #4]
 800cf8c:	00db      	lsls	r3, r3, #3
 800cf8e:	429a      	cmp	r2, r3
 800cf90:	d1eb      	bne.n	800cf6a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	f003 0302 	and.w	r3, r3, #2
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d010      	beq.n	800cfc0 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	68da      	ldr	r2, [r3, #12]
 800cfa2:	4b14      	ldr	r3, [pc, #80]	; (800cff4 <HAL_RCC_ClockConfig+0x244>)
 800cfa4:	699b      	ldr	r3, [r3, #24]
 800cfa6:	f003 030f 	and.w	r3, r3, #15
 800cfaa:	429a      	cmp	r2, r3
 800cfac:	d208      	bcs.n	800cfc0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800cfae:	4b11      	ldr	r3, [pc, #68]	; (800cff4 <HAL_RCC_ClockConfig+0x244>)
 800cfb0:	699b      	ldr	r3, [r3, #24]
 800cfb2:	f023 020f 	bic.w	r2, r3, #15
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	68db      	ldr	r3, [r3, #12]
 800cfba:	490e      	ldr	r1, [pc, #56]	; (800cff4 <HAL_RCC_ClockConfig+0x244>)
 800cfbc:	4313      	orrs	r3, r2
 800cfbe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800cfc0:	4b0b      	ldr	r3, [pc, #44]	; (800cff0 <HAL_RCC_ClockConfig+0x240>)
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	f003 030f 	and.w	r3, r3, #15
 800cfc8:	683a      	ldr	r2, [r7, #0]
 800cfca:	429a      	cmp	r2, r3
 800cfcc:	d214      	bcs.n	800cff8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cfce:	4b08      	ldr	r3, [pc, #32]	; (800cff0 <HAL_RCC_ClockConfig+0x240>)
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	f023 020f 	bic.w	r2, r3, #15
 800cfd6:	4906      	ldr	r1, [pc, #24]	; (800cff0 <HAL_RCC_ClockConfig+0x240>)
 800cfd8:	683b      	ldr	r3, [r7, #0]
 800cfda:	4313      	orrs	r3, r2
 800cfdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cfde:	4b04      	ldr	r3, [pc, #16]	; (800cff0 <HAL_RCC_ClockConfig+0x240>)
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	f003 030f 	and.w	r3, r3, #15
 800cfe6:	683a      	ldr	r2, [r7, #0]
 800cfe8:	429a      	cmp	r2, r3
 800cfea:	d005      	beq.n	800cff8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800cfec:	2301      	movs	r3, #1
 800cfee:	e086      	b.n	800d0fe <HAL_RCC_ClockConfig+0x34e>
 800cff0:	52002000 	.word	0x52002000
 800cff4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	f003 0304 	and.w	r3, r3, #4
 800d000:	2b00      	cmp	r3, #0
 800d002:	d010      	beq.n	800d026 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	691a      	ldr	r2, [r3, #16]
 800d008:	4b3f      	ldr	r3, [pc, #252]	; (800d108 <HAL_RCC_ClockConfig+0x358>)
 800d00a:	699b      	ldr	r3, [r3, #24]
 800d00c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d010:	429a      	cmp	r2, r3
 800d012:	d208      	bcs.n	800d026 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800d014:	4b3c      	ldr	r3, [pc, #240]	; (800d108 <HAL_RCC_ClockConfig+0x358>)
 800d016:	699b      	ldr	r3, [r3, #24]
 800d018:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	691b      	ldr	r3, [r3, #16]
 800d020:	4939      	ldr	r1, [pc, #228]	; (800d108 <HAL_RCC_ClockConfig+0x358>)
 800d022:	4313      	orrs	r3, r2
 800d024:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	f003 0308 	and.w	r3, r3, #8
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d010      	beq.n	800d054 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	695a      	ldr	r2, [r3, #20]
 800d036:	4b34      	ldr	r3, [pc, #208]	; (800d108 <HAL_RCC_ClockConfig+0x358>)
 800d038:	69db      	ldr	r3, [r3, #28]
 800d03a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d03e:	429a      	cmp	r2, r3
 800d040:	d208      	bcs.n	800d054 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800d042:	4b31      	ldr	r3, [pc, #196]	; (800d108 <HAL_RCC_ClockConfig+0x358>)
 800d044:	69db      	ldr	r3, [r3, #28]
 800d046:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	695b      	ldr	r3, [r3, #20]
 800d04e:	492e      	ldr	r1, [pc, #184]	; (800d108 <HAL_RCC_ClockConfig+0x358>)
 800d050:	4313      	orrs	r3, r2
 800d052:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	f003 0310 	and.w	r3, r3, #16
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d010      	beq.n	800d082 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	699a      	ldr	r2, [r3, #24]
 800d064:	4b28      	ldr	r3, [pc, #160]	; (800d108 <HAL_RCC_ClockConfig+0x358>)
 800d066:	69db      	ldr	r3, [r3, #28]
 800d068:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d06c:	429a      	cmp	r2, r3
 800d06e:	d208      	bcs.n	800d082 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800d070:	4b25      	ldr	r3, [pc, #148]	; (800d108 <HAL_RCC_ClockConfig+0x358>)
 800d072:	69db      	ldr	r3, [r3, #28]
 800d074:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	699b      	ldr	r3, [r3, #24]
 800d07c:	4922      	ldr	r1, [pc, #136]	; (800d108 <HAL_RCC_ClockConfig+0x358>)
 800d07e:	4313      	orrs	r3, r2
 800d080:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	f003 0320 	and.w	r3, r3, #32
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d010      	beq.n	800d0b0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	69da      	ldr	r2, [r3, #28]
 800d092:	4b1d      	ldr	r3, [pc, #116]	; (800d108 <HAL_RCC_ClockConfig+0x358>)
 800d094:	6a1b      	ldr	r3, [r3, #32]
 800d096:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d09a:	429a      	cmp	r2, r3
 800d09c:	d208      	bcs.n	800d0b0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800d09e:	4b1a      	ldr	r3, [pc, #104]	; (800d108 <HAL_RCC_ClockConfig+0x358>)
 800d0a0:	6a1b      	ldr	r3, [r3, #32]
 800d0a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	69db      	ldr	r3, [r3, #28]
 800d0aa:	4917      	ldr	r1, [pc, #92]	; (800d108 <HAL_RCC_ClockConfig+0x358>)
 800d0ac:	4313      	orrs	r3, r2
 800d0ae:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800d0b0:	f000 f834 	bl	800d11c <HAL_RCC_GetSysClockFreq>
 800d0b4:	4602      	mov	r2, r0
 800d0b6:	4b14      	ldr	r3, [pc, #80]	; (800d108 <HAL_RCC_ClockConfig+0x358>)
 800d0b8:	699b      	ldr	r3, [r3, #24]
 800d0ba:	0a1b      	lsrs	r3, r3, #8
 800d0bc:	f003 030f 	and.w	r3, r3, #15
 800d0c0:	4912      	ldr	r1, [pc, #72]	; (800d10c <HAL_RCC_ClockConfig+0x35c>)
 800d0c2:	5ccb      	ldrb	r3, [r1, r3]
 800d0c4:	f003 031f 	and.w	r3, r3, #31
 800d0c8:	fa22 f303 	lsr.w	r3, r2, r3
 800d0cc:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800d0ce:	4b0e      	ldr	r3, [pc, #56]	; (800d108 <HAL_RCC_ClockConfig+0x358>)
 800d0d0:	699b      	ldr	r3, [r3, #24]
 800d0d2:	f003 030f 	and.w	r3, r3, #15
 800d0d6:	4a0d      	ldr	r2, [pc, #52]	; (800d10c <HAL_RCC_ClockConfig+0x35c>)
 800d0d8:	5cd3      	ldrb	r3, [r2, r3]
 800d0da:	f003 031f 	and.w	r3, r3, #31
 800d0de:	693a      	ldr	r2, [r7, #16]
 800d0e0:	fa22 f303 	lsr.w	r3, r2, r3
 800d0e4:	4a0a      	ldr	r2, [pc, #40]	; (800d110 <HAL_RCC_ClockConfig+0x360>)
 800d0e6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800d0e8:	4a0a      	ldr	r2, [pc, #40]	; (800d114 <HAL_RCC_ClockConfig+0x364>)
 800d0ea:	693b      	ldr	r3, [r7, #16]
 800d0ec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800d0ee:	4b0a      	ldr	r3, [pc, #40]	; (800d118 <HAL_RCC_ClockConfig+0x368>)
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	4618      	mov	r0, r3
 800d0f4:	f7f4 fdc4 	bl	8001c80 <HAL_InitTick>
 800d0f8:	4603      	mov	r3, r0
 800d0fa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800d0fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0fe:	4618      	mov	r0, r3
 800d100:	3718      	adds	r7, #24
 800d102:	46bd      	mov	sp, r7
 800d104:	bd80      	pop	{r7, pc}
 800d106:	bf00      	nop
 800d108:	58024400 	.word	0x58024400
 800d10c:	0802b924 	.word	0x0802b924
 800d110:	24000044 	.word	0x24000044
 800d114:	24000040 	.word	0x24000040
 800d118:	24000048 	.word	0x24000048

0800d11c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d11c:	b480      	push	{r7}
 800d11e:	b089      	sub	sp, #36	; 0x24
 800d120:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d122:	4bb3      	ldr	r3, [pc, #716]	; (800d3f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d124:	691b      	ldr	r3, [r3, #16]
 800d126:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d12a:	2b18      	cmp	r3, #24
 800d12c:	f200 8155 	bhi.w	800d3da <HAL_RCC_GetSysClockFreq+0x2be>
 800d130:	a201      	add	r2, pc, #4	; (adr r2, 800d138 <HAL_RCC_GetSysClockFreq+0x1c>)
 800d132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d136:	bf00      	nop
 800d138:	0800d19d 	.word	0x0800d19d
 800d13c:	0800d3db 	.word	0x0800d3db
 800d140:	0800d3db 	.word	0x0800d3db
 800d144:	0800d3db 	.word	0x0800d3db
 800d148:	0800d3db 	.word	0x0800d3db
 800d14c:	0800d3db 	.word	0x0800d3db
 800d150:	0800d3db 	.word	0x0800d3db
 800d154:	0800d3db 	.word	0x0800d3db
 800d158:	0800d1c3 	.word	0x0800d1c3
 800d15c:	0800d3db 	.word	0x0800d3db
 800d160:	0800d3db 	.word	0x0800d3db
 800d164:	0800d3db 	.word	0x0800d3db
 800d168:	0800d3db 	.word	0x0800d3db
 800d16c:	0800d3db 	.word	0x0800d3db
 800d170:	0800d3db 	.word	0x0800d3db
 800d174:	0800d3db 	.word	0x0800d3db
 800d178:	0800d1c9 	.word	0x0800d1c9
 800d17c:	0800d3db 	.word	0x0800d3db
 800d180:	0800d3db 	.word	0x0800d3db
 800d184:	0800d3db 	.word	0x0800d3db
 800d188:	0800d3db 	.word	0x0800d3db
 800d18c:	0800d3db 	.word	0x0800d3db
 800d190:	0800d3db 	.word	0x0800d3db
 800d194:	0800d3db 	.word	0x0800d3db
 800d198:	0800d1cf 	.word	0x0800d1cf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d19c:	4b94      	ldr	r3, [pc, #592]	; (800d3f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	f003 0320 	and.w	r3, r3, #32
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d009      	beq.n	800d1bc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d1a8:	4b91      	ldr	r3, [pc, #580]	; (800d3f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	08db      	lsrs	r3, r3, #3
 800d1ae:	f003 0303 	and.w	r3, r3, #3
 800d1b2:	4a90      	ldr	r2, [pc, #576]	; (800d3f4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800d1b4:	fa22 f303 	lsr.w	r3, r2, r3
 800d1b8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800d1ba:	e111      	b.n	800d3e0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800d1bc:	4b8d      	ldr	r3, [pc, #564]	; (800d3f4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800d1be:	61bb      	str	r3, [r7, #24]
      break;
 800d1c0:	e10e      	b.n	800d3e0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800d1c2:	4b8d      	ldr	r3, [pc, #564]	; (800d3f8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800d1c4:	61bb      	str	r3, [r7, #24]
      break;
 800d1c6:	e10b      	b.n	800d3e0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800d1c8:	4b8c      	ldr	r3, [pc, #560]	; (800d3fc <HAL_RCC_GetSysClockFreq+0x2e0>)
 800d1ca:	61bb      	str	r3, [r7, #24]
      break;
 800d1cc:	e108      	b.n	800d3e0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d1ce:	4b88      	ldr	r3, [pc, #544]	; (800d3f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d1d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1d2:	f003 0303 	and.w	r3, r3, #3
 800d1d6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800d1d8:	4b85      	ldr	r3, [pc, #532]	; (800d3f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d1da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1dc:	091b      	lsrs	r3, r3, #4
 800d1de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d1e2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800d1e4:	4b82      	ldr	r3, [pc, #520]	; (800d3f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d1e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1e8:	f003 0301 	and.w	r3, r3, #1
 800d1ec:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d1ee:	4b80      	ldr	r3, [pc, #512]	; (800d3f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d1f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1f2:	08db      	lsrs	r3, r3, #3
 800d1f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d1f8:	68fa      	ldr	r2, [r7, #12]
 800d1fa:	fb02 f303 	mul.w	r3, r2, r3
 800d1fe:	ee07 3a90 	vmov	s15, r3
 800d202:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d206:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800d20a:	693b      	ldr	r3, [r7, #16]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	f000 80e1 	beq.w	800d3d4 <HAL_RCC_GetSysClockFreq+0x2b8>
 800d212:	697b      	ldr	r3, [r7, #20]
 800d214:	2b02      	cmp	r3, #2
 800d216:	f000 8083 	beq.w	800d320 <HAL_RCC_GetSysClockFreq+0x204>
 800d21a:	697b      	ldr	r3, [r7, #20]
 800d21c:	2b02      	cmp	r3, #2
 800d21e:	f200 80a1 	bhi.w	800d364 <HAL_RCC_GetSysClockFreq+0x248>
 800d222:	697b      	ldr	r3, [r7, #20]
 800d224:	2b00      	cmp	r3, #0
 800d226:	d003      	beq.n	800d230 <HAL_RCC_GetSysClockFreq+0x114>
 800d228:	697b      	ldr	r3, [r7, #20]
 800d22a:	2b01      	cmp	r3, #1
 800d22c:	d056      	beq.n	800d2dc <HAL_RCC_GetSysClockFreq+0x1c0>
 800d22e:	e099      	b.n	800d364 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d230:	4b6f      	ldr	r3, [pc, #444]	; (800d3f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	f003 0320 	and.w	r3, r3, #32
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d02d      	beq.n	800d298 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d23c:	4b6c      	ldr	r3, [pc, #432]	; (800d3f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	08db      	lsrs	r3, r3, #3
 800d242:	f003 0303 	and.w	r3, r3, #3
 800d246:	4a6b      	ldr	r2, [pc, #428]	; (800d3f4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800d248:	fa22 f303 	lsr.w	r3, r2, r3
 800d24c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	ee07 3a90 	vmov	s15, r3
 800d254:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d258:	693b      	ldr	r3, [r7, #16]
 800d25a:	ee07 3a90 	vmov	s15, r3
 800d25e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d262:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d266:	4b62      	ldr	r3, [pc, #392]	; (800d3f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d26a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d26e:	ee07 3a90 	vmov	s15, r3
 800d272:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d276:	ed97 6a02 	vldr	s12, [r7, #8]
 800d27a:	eddf 5a61 	vldr	s11, [pc, #388]	; 800d400 <HAL_RCC_GetSysClockFreq+0x2e4>
 800d27e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d282:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d286:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d28a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d28e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d292:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800d296:	e087      	b.n	800d3a8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d298:	693b      	ldr	r3, [r7, #16]
 800d29a:	ee07 3a90 	vmov	s15, r3
 800d29e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2a2:	eddf 6a58 	vldr	s13, [pc, #352]	; 800d404 <HAL_RCC_GetSysClockFreq+0x2e8>
 800d2a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d2aa:	4b51      	ldr	r3, [pc, #324]	; (800d3f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d2ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d2b2:	ee07 3a90 	vmov	s15, r3
 800d2b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d2ba:	ed97 6a02 	vldr	s12, [r7, #8]
 800d2be:	eddf 5a50 	vldr	s11, [pc, #320]	; 800d400 <HAL_RCC_GetSysClockFreq+0x2e4>
 800d2c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d2c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d2ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d2ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d2d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d2d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800d2da:	e065      	b.n	800d3a8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d2dc:	693b      	ldr	r3, [r7, #16]
 800d2de:	ee07 3a90 	vmov	s15, r3
 800d2e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2e6:	eddf 6a48 	vldr	s13, [pc, #288]	; 800d408 <HAL_RCC_GetSysClockFreq+0x2ec>
 800d2ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d2ee:	4b40      	ldr	r3, [pc, #256]	; (800d3f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d2f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d2f6:	ee07 3a90 	vmov	s15, r3
 800d2fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d2fe:	ed97 6a02 	vldr	s12, [r7, #8]
 800d302:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800d400 <HAL_RCC_GetSysClockFreq+0x2e4>
 800d306:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d30a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d30e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d312:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d316:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d31a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800d31e:	e043      	b.n	800d3a8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d320:	693b      	ldr	r3, [r7, #16]
 800d322:	ee07 3a90 	vmov	s15, r3
 800d326:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d32a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800d40c <HAL_RCC_GetSysClockFreq+0x2f0>
 800d32e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d332:	4b2f      	ldr	r3, [pc, #188]	; (800d3f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d336:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d33a:	ee07 3a90 	vmov	s15, r3
 800d33e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d342:	ed97 6a02 	vldr	s12, [r7, #8]
 800d346:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800d400 <HAL_RCC_GetSysClockFreq+0x2e4>
 800d34a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d34e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d352:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d356:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d35a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d35e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800d362:	e021      	b.n	800d3a8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d364:	693b      	ldr	r3, [r7, #16]
 800d366:	ee07 3a90 	vmov	s15, r3
 800d36a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d36e:	eddf 6a26 	vldr	s13, [pc, #152]	; 800d408 <HAL_RCC_GetSysClockFreq+0x2ec>
 800d372:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d376:	4b1e      	ldr	r3, [pc, #120]	; (800d3f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d37a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d37e:	ee07 3a90 	vmov	s15, r3
 800d382:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d386:	ed97 6a02 	vldr	s12, [r7, #8]
 800d38a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800d400 <HAL_RCC_GetSysClockFreq+0x2e4>
 800d38e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d392:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d396:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d39a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d39e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d3a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800d3a6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800d3a8:	4b11      	ldr	r3, [pc, #68]	; (800d3f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d3aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d3ac:	0a5b      	lsrs	r3, r3, #9
 800d3ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d3b2:	3301      	adds	r3, #1
 800d3b4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800d3b6:	683b      	ldr	r3, [r7, #0]
 800d3b8:	ee07 3a90 	vmov	s15, r3
 800d3bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d3c0:	edd7 6a07 	vldr	s13, [r7, #28]
 800d3c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d3c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d3cc:	ee17 3a90 	vmov	r3, s15
 800d3d0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800d3d2:	e005      	b.n	800d3e0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800d3d4:	2300      	movs	r3, #0
 800d3d6:	61bb      	str	r3, [r7, #24]
      break;
 800d3d8:	e002      	b.n	800d3e0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800d3da:	4b07      	ldr	r3, [pc, #28]	; (800d3f8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800d3dc:	61bb      	str	r3, [r7, #24]
      break;
 800d3de:	bf00      	nop
  }

  return sysclockfreq;
 800d3e0:	69bb      	ldr	r3, [r7, #24]
}
 800d3e2:	4618      	mov	r0, r3
 800d3e4:	3724      	adds	r7, #36	; 0x24
 800d3e6:	46bd      	mov	sp, r7
 800d3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ec:	4770      	bx	lr
 800d3ee:	bf00      	nop
 800d3f0:	58024400 	.word	0x58024400
 800d3f4:	03d09000 	.word	0x03d09000
 800d3f8:	003d0900 	.word	0x003d0900
 800d3fc:	016e3600 	.word	0x016e3600
 800d400:	46000000 	.word	0x46000000
 800d404:	4c742400 	.word	0x4c742400
 800d408:	4a742400 	.word	0x4a742400
 800d40c:	4bb71b00 	.word	0x4bb71b00

0800d410 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d410:	b580      	push	{r7, lr}
 800d412:	b082      	sub	sp, #8
 800d414:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800d416:	f7ff fe81 	bl	800d11c <HAL_RCC_GetSysClockFreq>
 800d41a:	4602      	mov	r2, r0
 800d41c:	4b10      	ldr	r3, [pc, #64]	; (800d460 <HAL_RCC_GetHCLKFreq+0x50>)
 800d41e:	699b      	ldr	r3, [r3, #24]
 800d420:	0a1b      	lsrs	r3, r3, #8
 800d422:	f003 030f 	and.w	r3, r3, #15
 800d426:	490f      	ldr	r1, [pc, #60]	; (800d464 <HAL_RCC_GetHCLKFreq+0x54>)
 800d428:	5ccb      	ldrb	r3, [r1, r3]
 800d42a:	f003 031f 	and.w	r3, r3, #31
 800d42e:	fa22 f303 	lsr.w	r3, r2, r3
 800d432:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800d434:	4b0a      	ldr	r3, [pc, #40]	; (800d460 <HAL_RCC_GetHCLKFreq+0x50>)
 800d436:	699b      	ldr	r3, [r3, #24]
 800d438:	f003 030f 	and.w	r3, r3, #15
 800d43c:	4a09      	ldr	r2, [pc, #36]	; (800d464 <HAL_RCC_GetHCLKFreq+0x54>)
 800d43e:	5cd3      	ldrb	r3, [r2, r3]
 800d440:	f003 031f 	and.w	r3, r3, #31
 800d444:	687a      	ldr	r2, [r7, #4]
 800d446:	fa22 f303 	lsr.w	r3, r2, r3
 800d44a:	4a07      	ldr	r2, [pc, #28]	; (800d468 <HAL_RCC_GetHCLKFreq+0x58>)
 800d44c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800d44e:	4a07      	ldr	r2, [pc, #28]	; (800d46c <HAL_RCC_GetHCLKFreq+0x5c>)
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800d454:	4b04      	ldr	r3, [pc, #16]	; (800d468 <HAL_RCC_GetHCLKFreq+0x58>)
 800d456:	681b      	ldr	r3, [r3, #0]
}
 800d458:	4618      	mov	r0, r3
 800d45a:	3708      	adds	r7, #8
 800d45c:	46bd      	mov	sp, r7
 800d45e:	bd80      	pop	{r7, pc}
 800d460:	58024400 	.word	0x58024400
 800d464:	0802b924 	.word	0x0802b924
 800d468:	24000044 	.word	0x24000044
 800d46c:	24000040 	.word	0x24000040

0800d470 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d470:	b580      	push	{r7, lr}
 800d472:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800d474:	f7ff ffcc 	bl	800d410 <HAL_RCC_GetHCLKFreq>
 800d478:	4602      	mov	r2, r0
 800d47a:	4b06      	ldr	r3, [pc, #24]	; (800d494 <HAL_RCC_GetPCLK1Freq+0x24>)
 800d47c:	69db      	ldr	r3, [r3, #28]
 800d47e:	091b      	lsrs	r3, r3, #4
 800d480:	f003 0307 	and.w	r3, r3, #7
 800d484:	4904      	ldr	r1, [pc, #16]	; (800d498 <HAL_RCC_GetPCLK1Freq+0x28>)
 800d486:	5ccb      	ldrb	r3, [r1, r3]
 800d488:	f003 031f 	and.w	r3, r3, #31
 800d48c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800d490:	4618      	mov	r0, r3
 800d492:	bd80      	pop	{r7, pc}
 800d494:	58024400 	.word	0x58024400
 800d498:	0802b924 	.word	0x0802b924

0800d49c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d49c:	b580      	push	{r7, lr}
 800d49e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 800d4a0:	f7ff ffb6 	bl	800d410 <HAL_RCC_GetHCLKFreq>
 800d4a4:	4602      	mov	r2, r0
 800d4a6:	4b06      	ldr	r3, [pc, #24]	; (800d4c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800d4a8:	69db      	ldr	r3, [r3, #28]
 800d4aa:	0a1b      	lsrs	r3, r3, #8
 800d4ac:	f003 0307 	and.w	r3, r3, #7
 800d4b0:	4904      	ldr	r1, [pc, #16]	; (800d4c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 800d4b2:	5ccb      	ldrb	r3, [r1, r3]
 800d4b4:	f003 031f 	and.w	r3, r3, #31
 800d4b8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800d4bc:	4618      	mov	r0, r3
 800d4be:	bd80      	pop	{r7, pc}
 800d4c0:	58024400 	.word	0x58024400
 800d4c4:	0802b924 	.word	0x0802b924

0800d4c8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800d4c8:	b480      	push	{r7}
 800d4ca:	b083      	sub	sp, #12
 800d4cc:	af00      	add	r7, sp, #0
 800d4ce:	6078      	str	r0, [r7, #4]
 800d4d0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	223f      	movs	r2, #63	; 0x3f
 800d4d6:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800d4d8:	4b1a      	ldr	r3, [pc, #104]	; (800d544 <HAL_RCC_GetClockConfig+0x7c>)
 800d4da:	691b      	ldr	r3, [r3, #16]
 800d4dc:	f003 0207 	and.w	r2, r3, #7
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	605a      	str	r2, [r3, #4]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
#else
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE);
 800d4e4:	4b17      	ldr	r3, [pc, #92]	; (800d544 <HAL_RCC_GetClockConfig+0x7c>)
 800d4e6:	699b      	ldr	r3, [r3, #24]
 800d4e8:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE);
 800d4f0:	4b14      	ldr	r3, [pc, #80]	; (800d544 <HAL_RCC_GetClockConfig+0x7c>)
 800d4f2:	699b      	ldr	r3, [r3, #24]
 800d4f4:	f003 020f 	and.w	r2, r3, #15
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE);
 800d4fc:	4b11      	ldr	r3, [pc, #68]	; (800d544 <HAL_RCC_GetClockConfig+0x7c>)
 800d4fe:	699b      	ldr	r3, [r3, #24]
 800d500:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1);
 800d508:	4b0e      	ldr	r3, [pc, #56]	; (800d544 <HAL_RCC_GetClockConfig+0x7c>)
 800d50a:	69db      	ldr	r3, [r3, #28]
 800d50c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2);
 800d514:	4b0b      	ldr	r3, [pc, #44]	; (800d544 <HAL_RCC_GetClockConfig+0x7c>)
 800d516:	69db      	ldr	r3, [r3, #28]
 800d518:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
 800d520:	4b08      	ldr	r3, [pc, #32]	; (800d544 <HAL_RCC_GetClockConfig+0x7c>)
 800d522:	6a1b      	ldr	r3, [r3, #32]
 800d524:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	61da      	str	r2, [r3, #28]
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800d52c:	4b06      	ldr	r3, [pc, #24]	; (800d548 <HAL_RCC_GetClockConfig+0x80>)
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	f003 020f 	and.w	r2, r3, #15
 800d534:	683b      	ldr	r3, [r7, #0]
 800d536:	601a      	str	r2, [r3, #0]
}
 800d538:	bf00      	nop
 800d53a:	370c      	adds	r7, #12
 800d53c:	46bd      	mov	sp, r7
 800d53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d542:	4770      	bx	lr
 800d544:	58024400 	.word	0x58024400
 800d548:	52002000 	.word	0x52002000

0800d54c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800d54c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d550:	b0c8      	sub	sp, #288	; 0x120
 800d552:	af00      	add	r7, sp, #0
 800d554:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800d558:	2300      	movs	r3, #0
 800d55a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800d55e:	2300      	movs	r3, #0
 800d560:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800d564:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d56c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800d570:	2500      	movs	r5, #0
 800d572:	ea54 0305 	orrs.w	r3, r4, r5
 800d576:	d049      	beq.n	800d60c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800d578:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d57c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d57e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800d582:	d02f      	beq.n	800d5e4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800d584:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800d588:	d828      	bhi.n	800d5dc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800d58a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d58e:	d01a      	beq.n	800d5c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800d590:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d594:	d822      	bhi.n	800d5dc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800d596:	2b00      	cmp	r3, #0
 800d598:	d003      	beq.n	800d5a2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800d59a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d59e:	d007      	beq.n	800d5b0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800d5a0:	e01c      	b.n	800d5dc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d5a2:	4ba7      	ldr	r3, [pc, #668]	; (800d840 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800d5a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5a6:	4aa6      	ldr	r2, [pc, #664]	; (800d840 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800d5a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d5ac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800d5ae:	e01a      	b.n	800d5e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d5b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d5b4:	3308      	adds	r3, #8
 800d5b6:	2102      	movs	r1, #2
 800d5b8:	4618      	mov	r0, r3
 800d5ba:	f002 fa6d 	bl	800fa98 <RCCEx_PLL2_Config>
 800d5be:	4603      	mov	r3, r0
 800d5c0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800d5c4:	e00f      	b.n	800d5e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d5c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d5ca:	3328      	adds	r3, #40	; 0x28
 800d5cc:	2102      	movs	r1, #2
 800d5ce:	4618      	mov	r0, r3
 800d5d0:	f002 fb14 	bl	800fbfc <RCCEx_PLL3_Config>
 800d5d4:	4603      	mov	r3, r0
 800d5d6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800d5da:	e004      	b.n	800d5e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d5dc:	2301      	movs	r3, #1
 800d5de:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800d5e2:	e000      	b.n	800d5e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800d5e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d5e6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d10a      	bne.n	800d604 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800d5ee:	4b94      	ldr	r3, [pc, #592]	; (800d840 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800d5f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d5f2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800d5f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d5fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d5fc:	4a90      	ldr	r2, [pc, #576]	; (800d840 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800d5fe:	430b      	orrs	r3, r1
 800d600:	6513      	str	r3, [r2, #80]	; 0x50
 800d602:	e003      	b.n	800d60c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d604:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d608:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800d60c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d610:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d614:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800d618:	f04f 0900 	mov.w	r9, #0
 800d61c:	ea58 0309 	orrs.w	r3, r8, r9
 800d620:	d047      	beq.n	800d6b2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800d622:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d628:	2b04      	cmp	r3, #4
 800d62a:	d82a      	bhi.n	800d682 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800d62c:	a201      	add	r2, pc, #4	; (adr r2, 800d634 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800d62e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d632:	bf00      	nop
 800d634:	0800d649 	.word	0x0800d649
 800d638:	0800d657 	.word	0x0800d657
 800d63c:	0800d66d 	.word	0x0800d66d
 800d640:	0800d68b 	.word	0x0800d68b
 800d644:	0800d68b 	.word	0x0800d68b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d648:	4b7d      	ldr	r3, [pc, #500]	; (800d840 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800d64a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d64c:	4a7c      	ldr	r2, [pc, #496]	; (800d840 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800d64e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d652:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800d654:	e01a      	b.n	800d68c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d656:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d65a:	3308      	adds	r3, #8
 800d65c:	2100      	movs	r1, #0
 800d65e:	4618      	mov	r0, r3
 800d660:	f002 fa1a 	bl	800fa98 <RCCEx_PLL2_Config>
 800d664:	4603      	mov	r3, r0
 800d666:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800d66a:	e00f      	b.n	800d68c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d66c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d670:	3328      	adds	r3, #40	; 0x28
 800d672:	2100      	movs	r1, #0
 800d674:	4618      	mov	r0, r3
 800d676:	f002 fac1 	bl	800fbfc <RCCEx_PLL3_Config>
 800d67a:	4603      	mov	r3, r0
 800d67c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800d680:	e004      	b.n	800d68c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d682:	2301      	movs	r3, #1
 800d684:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800d688:	e000      	b.n	800d68c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800d68a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d68c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d690:	2b00      	cmp	r3, #0
 800d692:	d10a      	bne.n	800d6aa <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800d694:	4b6a      	ldr	r3, [pc, #424]	; (800d840 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800d696:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d698:	f023 0107 	bic.w	r1, r3, #7
 800d69c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d6a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d6a2:	4a67      	ldr	r2, [pc, #412]	; (800d840 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800d6a4:	430b      	orrs	r3, r1
 800d6a6:	6513      	str	r3, [r2, #80]	; 0x50
 800d6a8:	e003      	b.n	800d6b2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d6aa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d6ae:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800d6b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d6b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6ba:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800d6be:	f04f 0b00 	mov.w	fp, #0
 800d6c2:	ea5a 030b 	orrs.w	r3, sl, fp
 800d6c6:	d054      	beq.n	800d772 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 800d6c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d6cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d6ce:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800d6d2:	d036      	beq.n	800d742 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800d6d4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800d6d8:	d82f      	bhi.n	800d73a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800d6da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d6de:	d032      	beq.n	800d746 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800d6e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d6e4:	d829      	bhi.n	800d73a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800d6e6:	2bc0      	cmp	r3, #192	; 0xc0
 800d6e8:	d02f      	beq.n	800d74a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800d6ea:	2bc0      	cmp	r3, #192	; 0xc0
 800d6ec:	d825      	bhi.n	800d73a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800d6ee:	2b80      	cmp	r3, #128	; 0x80
 800d6f0:	d018      	beq.n	800d724 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800d6f2:	2b80      	cmp	r3, #128	; 0x80
 800d6f4:	d821      	bhi.n	800d73a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d002      	beq.n	800d700 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800d6fa:	2b40      	cmp	r3, #64	; 0x40
 800d6fc:	d007      	beq.n	800d70e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800d6fe:	e01c      	b.n	800d73a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d700:	4b4f      	ldr	r3, [pc, #316]	; (800d840 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800d702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d704:	4a4e      	ldr	r2, [pc, #312]	; (800d840 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800d706:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d70a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800d70c:	e01e      	b.n	800d74c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d70e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d712:	3308      	adds	r3, #8
 800d714:	2100      	movs	r1, #0
 800d716:	4618      	mov	r0, r3
 800d718:	f002 f9be 	bl	800fa98 <RCCEx_PLL2_Config>
 800d71c:	4603      	mov	r3, r0
 800d71e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800d722:	e013      	b.n	800d74c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d724:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d728:	3328      	adds	r3, #40	; 0x28
 800d72a:	2100      	movs	r1, #0
 800d72c:	4618      	mov	r0, r3
 800d72e:	f002 fa65 	bl	800fbfc <RCCEx_PLL3_Config>
 800d732:	4603      	mov	r3, r0
 800d734:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800d738:	e008      	b.n	800d74c <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d73a:	2301      	movs	r3, #1
 800d73c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800d740:	e004      	b.n	800d74c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800d742:	bf00      	nop
 800d744:	e002      	b.n	800d74c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800d746:	bf00      	nop
 800d748:	e000      	b.n	800d74c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800d74a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d74c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d750:	2b00      	cmp	r3, #0
 800d752:	d10a      	bne.n	800d76a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800d754:	4b3a      	ldr	r3, [pc, #232]	; (800d840 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800d756:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d758:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800d75c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d760:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d762:	4a37      	ldr	r2, [pc, #220]	; (800d840 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800d764:	430b      	orrs	r3, r1
 800d766:	6513      	str	r3, [r2, #80]	; 0x50
 800d768:	e003      	b.n	800d772 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d76a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d76e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800d772:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d77a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800d77e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800d782:	2300      	movs	r3, #0
 800d784:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800d788:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800d78c:	460b      	mov	r3, r1
 800d78e:	4313      	orrs	r3, r2
 800d790:	d05c      	beq.n	800d84c <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800d792:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d796:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d798:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800d79c:	d03b      	beq.n	800d816 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800d79e:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800d7a2:	d834      	bhi.n	800d80e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800d7a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d7a8:	d037      	beq.n	800d81a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800d7aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d7ae:	d82e      	bhi.n	800d80e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800d7b0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800d7b4:	d033      	beq.n	800d81e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800d7b6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800d7ba:	d828      	bhi.n	800d80e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800d7bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d7c0:	d01a      	beq.n	800d7f8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800d7c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d7c6:	d822      	bhi.n	800d80e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d003      	beq.n	800d7d4 <HAL_RCCEx_PeriphCLKConfig+0x288>
 800d7cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d7d0:	d007      	beq.n	800d7e2 <HAL_RCCEx_PeriphCLKConfig+0x296>
 800d7d2:	e01c      	b.n	800d80e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d7d4:	4b1a      	ldr	r3, [pc, #104]	; (800d840 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800d7d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7d8:	4a19      	ldr	r2, [pc, #100]	; (800d840 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800d7da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d7de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800d7e0:	e01e      	b.n	800d820 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d7e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d7e6:	3308      	adds	r3, #8
 800d7e8:	2100      	movs	r1, #0
 800d7ea:	4618      	mov	r0, r3
 800d7ec:	f002 f954 	bl	800fa98 <RCCEx_PLL2_Config>
 800d7f0:	4603      	mov	r3, r0
 800d7f2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800d7f6:	e013      	b.n	800d820 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d7f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d7fc:	3328      	adds	r3, #40	; 0x28
 800d7fe:	2100      	movs	r1, #0
 800d800:	4618      	mov	r0, r3
 800d802:	f002 f9fb 	bl	800fbfc <RCCEx_PLL3_Config>
 800d806:	4603      	mov	r3, r0
 800d808:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800d80c:	e008      	b.n	800d820 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d80e:	2301      	movs	r3, #1
 800d810:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800d814:	e004      	b.n	800d820 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800d816:	bf00      	nop
 800d818:	e002      	b.n	800d820 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800d81a:	bf00      	nop
 800d81c:	e000      	b.n	800d820 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800d81e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d820:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d824:	2b00      	cmp	r3, #0
 800d826:	d10d      	bne.n	800d844 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800d828:	4b05      	ldr	r3, [pc, #20]	; (800d840 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800d82a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d82c:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 800d830:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d834:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d836:	4a02      	ldr	r2, [pc, #8]	; (800d840 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800d838:	430b      	orrs	r3, r1
 800d83a:	6513      	str	r3, [r2, #80]	; 0x50
 800d83c:	e006      	b.n	800d84c <HAL_RCCEx_PeriphCLKConfig+0x300>
 800d83e:	bf00      	nop
 800d840:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d844:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d848:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800d84c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d850:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d854:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800d858:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800d85c:	2300      	movs	r3, #0
 800d85e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800d862:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800d866:	460b      	mov	r3, r1
 800d868:	4313      	orrs	r3, r2
 800d86a:	d03a      	beq.n	800d8e2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800d86c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d872:	2b30      	cmp	r3, #48	; 0x30
 800d874:	d01f      	beq.n	800d8b6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800d876:	2b30      	cmp	r3, #48	; 0x30
 800d878:	d819      	bhi.n	800d8ae <HAL_RCCEx_PeriphCLKConfig+0x362>
 800d87a:	2b20      	cmp	r3, #32
 800d87c:	d00c      	beq.n	800d898 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800d87e:	2b20      	cmp	r3, #32
 800d880:	d815      	bhi.n	800d8ae <HAL_RCCEx_PeriphCLKConfig+0x362>
 800d882:	2b00      	cmp	r3, #0
 800d884:	d019      	beq.n	800d8ba <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800d886:	2b10      	cmp	r3, #16
 800d888:	d111      	bne.n	800d8ae <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d88a:	4bae      	ldr	r3, [pc, #696]	; (800db44 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800d88c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d88e:	4aad      	ldr	r2, [pc, #692]	; (800db44 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800d890:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d894:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800d896:	e011      	b.n	800d8bc <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d898:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d89c:	3308      	adds	r3, #8
 800d89e:	2102      	movs	r1, #2
 800d8a0:	4618      	mov	r0, r3
 800d8a2:	f002 f8f9 	bl	800fa98 <RCCEx_PLL2_Config>
 800d8a6:	4603      	mov	r3, r0
 800d8a8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800d8ac:	e006      	b.n	800d8bc <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800d8ae:	2301      	movs	r3, #1
 800d8b0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800d8b4:	e002      	b.n	800d8bc <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800d8b6:	bf00      	nop
 800d8b8:	e000      	b.n	800d8bc <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800d8ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d8bc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d10a      	bne.n	800d8da <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800d8c4:	4b9f      	ldr	r3, [pc, #636]	; (800db44 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800d8c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d8c8:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800d8cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d8d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d8d2:	4a9c      	ldr	r2, [pc, #624]	; (800db44 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800d8d4:	430b      	orrs	r3, r1
 800d8d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d8d8:	e003      	b.n	800d8e2 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d8da:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d8de:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800d8e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d8e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8ea:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800d8ee:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800d8f2:	2300      	movs	r3, #0
 800d8f4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800d8f8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800d8fc:	460b      	mov	r3, r1
 800d8fe:	4313      	orrs	r3, r2
 800d900:	d051      	beq.n	800d9a6 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800d902:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d906:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d908:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d90c:	d035      	beq.n	800d97a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800d90e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d912:	d82e      	bhi.n	800d972 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800d914:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d918:	d031      	beq.n	800d97e <HAL_RCCEx_PeriphCLKConfig+0x432>
 800d91a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d91e:	d828      	bhi.n	800d972 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800d920:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d924:	d01a      	beq.n	800d95c <HAL_RCCEx_PeriphCLKConfig+0x410>
 800d926:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d92a:	d822      	bhi.n	800d972 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d003      	beq.n	800d938 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800d930:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d934:	d007      	beq.n	800d946 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800d936:	e01c      	b.n	800d972 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d938:	4b82      	ldr	r3, [pc, #520]	; (800db44 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800d93a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d93c:	4a81      	ldr	r2, [pc, #516]	; (800db44 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800d93e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d942:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800d944:	e01c      	b.n	800d980 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d946:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d94a:	3308      	adds	r3, #8
 800d94c:	2100      	movs	r1, #0
 800d94e:	4618      	mov	r0, r3
 800d950:	f002 f8a2 	bl	800fa98 <RCCEx_PLL2_Config>
 800d954:	4603      	mov	r3, r0
 800d956:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800d95a:	e011      	b.n	800d980 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d95c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d960:	3328      	adds	r3, #40	; 0x28
 800d962:	2100      	movs	r1, #0
 800d964:	4618      	mov	r0, r3
 800d966:	f002 f949 	bl	800fbfc <RCCEx_PLL3_Config>
 800d96a:	4603      	mov	r3, r0
 800d96c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800d970:	e006      	b.n	800d980 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d972:	2301      	movs	r3, #1
 800d974:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800d978:	e002      	b.n	800d980 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800d97a:	bf00      	nop
 800d97c:	e000      	b.n	800d980 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800d97e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d980:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d984:	2b00      	cmp	r3, #0
 800d986:	d10a      	bne.n	800d99e <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800d988:	4b6e      	ldr	r3, [pc, #440]	; (800db44 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800d98a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d98c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800d990:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d994:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d996:	4a6b      	ldr	r2, [pc, #428]	; (800db44 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800d998:	430b      	orrs	r3, r1
 800d99a:	6513      	str	r3, [r2, #80]	; 0x50
 800d99c:	e003      	b.n	800d9a6 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d99e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d9a2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800d9a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d9aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9ae:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800d9b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800d9b6:	2300      	movs	r3, #0
 800d9b8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800d9bc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800d9c0:	460b      	mov	r3, r1
 800d9c2:	4313      	orrs	r3, r2
 800d9c4:	d053      	beq.n	800da6e <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800d9c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d9ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d9cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d9d0:	d033      	beq.n	800da3a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800d9d2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d9d6:	d82c      	bhi.n	800da32 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800d9d8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800d9dc:	d02f      	beq.n	800da3e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 800d9de:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800d9e2:	d826      	bhi.n	800da32 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800d9e4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800d9e8:	d02b      	beq.n	800da42 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800d9ea:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800d9ee:	d820      	bhi.n	800da32 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800d9f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d9f4:	d012      	beq.n	800da1c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800d9f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d9fa:	d81a      	bhi.n	800da32 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d022      	beq.n	800da46 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 800da00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800da04:	d115      	bne.n	800da32 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800da06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800da0a:	3308      	adds	r3, #8
 800da0c:	2101      	movs	r1, #1
 800da0e:	4618      	mov	r0, r3
 800da10:	f002 f842 	bl	800fa98 <RCCEx_PLL2_Config>
 800da14:	4603      	mov	r3, r0
 800da16:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800da1a:	e015      	b.n	800da48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800da1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800da20:	3328      	adds	r3, #40	; 0x28
 800da22:	2101      	movs	r1, #1
 800da24:	4618      	mov	r0, r3
 800da26:	f002 f8e9 	bl	800fbfc <RCCEx_PLL3_Config>
 800da2a:	4603      	mov	r3, r0
 800da2c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800da30:	e00a      	b.n	800da48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800da32:	2301      	movs	r3, #1
 800da34:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800da38:	e006      	b.n	800da48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800da3a:	bf00      	nop
 800da3c:	e004      	b.n	800da48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800da3e:	bf00      	nop
 800da40:	e002      	b.n	800da48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800da42:	bf00      	nop
 800da44:	e000      	b.n	800da48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800da46:	bf00      	nop
    }

    if (ret == HAL_OK)
 800da48:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d10a      	bne.n	800da66 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800da50:	4b3c      	ldr	r3, [pc, #240]	; (800db44 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800da52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800da54:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800da58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800da5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da5e:	4a39      	ldr	r2, [pc, #228]	; (800db44 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800da60:	430b      	orrs	r3, r1
 800da62:	6513      	str	r3, [r2, #80]	; 0x50
 800da64:	e003      	b.n	800da6e <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800da66:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800da6a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800da6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800da72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da76:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800da7a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800da7e:	2300      	movs	r3, #0
 800da80:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800da84:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800da88:	460b      	mov	r3, r1
 800da8a:	4313      	orrs	r3, r2
 800da8c:	d060      	beq.n	800db50 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800da8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800da92:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800da96:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800da9a:	d039      	beq.n	800db10 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 800da9c:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800daa0:	d832      	bhi.n	800db08 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800daa2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800daa6:	d035      	beq.n	800db14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800daa8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800daac:	d82c      	bhi.n	800db08 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800daae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dab2:	d031      	beq.n	800db18 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800dab4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dab8:	d826      	bhi.n	800db08 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800daba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800dabe:	d02d      	beq.n	800db1c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800dac0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800dac4:	d820      	bhi.n	800db08 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800dac6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800daca:	d012      	beq.n	800daf2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800dacc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800dad0:	d81a      	bhi.n	800db08 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d024      	beq.n	800db20 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800dad6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800dada:	d115      	bne.n	800db08 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800dadc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dae0:	3308      	adds	r3, #8
 800dae2:	2101      	movs	r1, #1
 800dae4:	4618      	mov	r0, r3
 800dae6:	f001 ffd7 	bl	800fa98 <RCCEx_PLL2_Config>
 800daea:	4603      	mov	r3, r0
 800daec:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800daf0:	e017      	b.n	800db22 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800daf2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800daf6:	3328      	adds	r3, #40	; 0x28
 800daf8:	2101      	movs	r1, #1
 800dafa:	4618      	mov	r0, r3
 800dafc:	f002 f87e 	bl	800fbfc <RCCEx_PLL3_Config>
 800db00:	4603      	mov	r3, r0
 800db02:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800db06:	e00c      	b.n	800db22 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800db08:	2301      	movs	r3, #1
 800db0a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800db0e:	e008      	b.n	800db22 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800db10:	bf00      	nop
 800db12:	e006      	b.n	800db22 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800db14:	bf00      	nop
 800db16:	e004      	b.n	800db22 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800db18:	bf00      	nop
 800db1a:	e002      	b.n	800db22 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800db1c:	bf00      	nop
 800db1e:	e000      	b.n	800db22 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800db20:	bf00      	nop
    }

    if (ret == HAL_OK)
 800db22:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800db26:	2b00      	cmp	r3, #0
 800db28:	d10e      	bne.n	800db48 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800db2a:	4b06      	ldr	r3, [pc, #24]	; (800db44 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800db2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800db2e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800db32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800db36:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800db3a:	4a02      	ldr	r2, [pc, #8]	; (800db44 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800db3c:	430b      	orrs	r3, r1
 800db3e:	6593      	str	r3, [r2, #88]	; 0x58
 800db40:	e006      	b.n	800db50 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800db42:	bf00      	nop
 800db44:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800db48:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800db4c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800db50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800db54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db58:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800db5c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800db60:	2300      	movs	r3, #0
 800db62:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800db66:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800db6a:	460b      	mov	r3, r1
 800db6c:	4313      	orrs	r3, r2
 800db6e:	d037      	beq.n	800dbe0 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800db70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800db74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800db76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800db7a:	d00e      	beq.n	800db9a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800db7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800db80:	d816      	bhi.n	800dbb0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800db82:	2b00      	cmp	r3, #0
 800db84:	d018      	beq.n	800dbb8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800db86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800db8a:	d111      	bne.n	800dbb0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800db8c:	4bc4      	ldr	r3, [pc, #784]	; (800dea0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800db8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db90:	4ac3      	ldr	r2, [pc, #780]	; (800dea0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800db92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800db96:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800db98:	e00f      	b.n	800dbba <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800db9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800db9e:	3308      	adds	r3, #8
 800dba0:	2101      	movs	r1, #1
 800dba2:	4618      	mov	r0, r3
 800dba4:	f001 ff78 	bl	800fa98 <RCCEx_PLL2_Config>
 800dba8:	4603      	mov	r3, r0
 800dbaa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800dbae:	e004      	b.n	800dbba <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800dbb0:	2301      	movs	r3, #1
 800dbb2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800dbb6:	e000      	b.n	800dbba <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800dbb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dbba:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d10a      	bne.n	800dbd8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800dbc2:	4bb7      	ldr	r3, [pc, #732]	; (800dea0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800dbc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dbc6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800dbca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dbce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dbd0:	4ab3      	ldr	r2, [pc, #716]	; (800dea0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800dbd2:	430b      	orrs	r3, r1
 800dbd4:	6513      	str	r3, [r2, #80]	; 0x50
 800dbd6:	e003      	b.n	800dbe0 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dbd8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800dbdc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800dbe0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dbe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbe8:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800dbec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800dbf0:	2300      	movs	r3, #0
 800dbf2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800dbf6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800dbfa:	460b      	mov	r3, r1
 800dbfc:	4313      	orrs	r3, r2
 800dbfe:	d039      	beq.n	800dc74 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800dc00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dc04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dc06:	2b03      	cmp	r3, #3
 800dc08:	d81c      	bhi.n	800dc44 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800dc0a:	a201      	add	r2, pc, #4	; (adr r2, 800dc10 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800dc0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc10:	0800dc4d 	.word	0x0800dc4d
 800dc14:	0800dc21 	.word	0x0800dc21
 800dc18:	0800dc2f 	.word	0x0800dc2f
 800dc1c:	0800dc4d 	.word	0x0800dc4d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dc20:	4b9f      	ldr	r3, [pc, #636]	; (800dea0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800dc22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc24:	4a9e      	ldr	r2, [pc, #632]	; (800dea0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800dc26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800dc2a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800dc2c:	e00f      	b.n	800dc4e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800dc2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dc32:	3308      	adds	r3, #8
 800dc34:	2102      	movs	r1, #2
 800dc36:	4618      	mov	r0, r3
 800dc38:	f001 ff2e 	bl	800fa98 <RCCEx_PLL2_Config>
 800dc3c:	4603      	mov	r3, r0
 800dc3e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800dc42:	e004      	b.n	800dc4e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800dc44:	2301      	movs	r3, #1
 800dc46:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800dc4a:	e000      	b.n	800dc4e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800dc4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dc4e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d10a      	bne.n	800dc6c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800dc56:	4b92      	ldr	r3, [pc, #584]	; (800dea0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800dc58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dc5a:	f023 0103 	bic.w	r1, r3, #3
 800dc5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dc62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dc64:	4a8e      	ldr	r2, [pc, #568]	; (800dea0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800dc66:	430b      	orrs	r3, r1
 800dc68:	64d3      	str	r3, [r2, #76]	; 0x4c
 800dc6a:	e003      	b.n	800dc74 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dc6c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800dc70:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800dc74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dc78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc7c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800dc80:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800dc84:	2300      	movs	r3, #0
 800dc86:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800dc8a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800dc8e:	460b      	mov	r3, r1
 800dc90:	4313      	orrs	r3, r2
 800dc92:	f000 8099 	beq.w	800ddc8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800dc96:	4b83      	ldr	r3, [pc, #524]	; (800dea4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	4a82      	ldr	r2, [pc, #520]	; (800dea4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800dc9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dca0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800dca2:	f7fb fa35 	bl	8009110 <HAL_GetTick>
 800dca6:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800dcaa:	e00b      	b.n	800dcc4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800dcac:	f7fb fa30 	bl	8009110 <HAL_GetTick>
 800dcb0:	4602      	mov	r2, r0
 800dcb2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800dcb6:	1ad3      	subs	r3, r2, r3
 800dcb8:	2b64      	cmp	r3, #100	; 0x64
 800dcba:	d903      	bls.n	800dcc4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800dcbc:	2303      	movs	r3, #3
 800dcbe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800dcc2:	e005      	b.n	800dcd0 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800dcc4:	4b77      	ldr	r3, [pc, #476]	; (800dea4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d0ed      	beq.n	800dcac <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800dcd0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d173      	bne.n	800ddc0 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800dcd8:	4b71      	ldr	r3, [pc, #452]	; (800dea0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800dcda:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800dcdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dce0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800dce4:	4053      	eors	r3, r2
 800dce6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d015      	beq.n	800dd1a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800dcee:	4b6c      	ldr	r3, [pc, #432]	; (800dea0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800dcf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dcf2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dcf6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800dcfa:	4b69      	ldr	r3, [pc, #420]	; (800dea0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800dcfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dcfe:	4a68      	ldr	r2, [pc, #416]	; (800dea0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800dd00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800dd04:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800dd06:	4b66      	ldr	r3, [pc, #408]	; (800dea0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800dd08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd0a:	4a65      	ldr	r2, [pc, #404]	; (800dea0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800dd0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800dd10:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800dd12:	4a63      	ldr	r2, [pc, #396]	; (800dea0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800dd14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dd18:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800dd1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dd1e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800dd22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dd26:	d118      	bne.n	800dd5a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dd28:	f7fb f9f2 	bl	8009110 <HAL_GetTick>
 800dd2c:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800dd30:	e00d      	b.n	800dd4e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800dd32:	f7fb f9ed 	bl	8009110 <HAL_GetTick>
 800dd36:	4602      	mov	r2, r0
 800dd38:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800dd3c:	1ad2      	subs	r2, r2, r3
 800dd3e:	f241 3388 	movw	r3, #5000	; 0x1388
 800dd42:	429a      	cmp	r2, r3
 800dd44:	d903      	bls.n	800dd4e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800dd46:	2303      	movs	r3, #3
 800dd48:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 800dd4c:	e005      	b.n	800dd5a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800dd4e:	4b54      	ldr	r3, [pc, #336]	; (800dea0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800dd50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd52:	f003 0302 	and.w	r3, r3, #2
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d0eb      	beq.n	800dd32 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800dd5a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d129      	bne.n	800ddb6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800dd62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dd66:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800dd6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800dd6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800dd72:	d10e      	bne.n	800dd92 <HAL_RCCEx_PeriphCLKConfig+0x846>
 800dd74:	4b4a      	ldr	r3, [pc, #296]	; (800dea0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800dd76:	691b      	ldr	r3, [r3, #16]
 800dd78:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800dd7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dd80:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800dd84:	091a      	lsrs	r2, r3, #4
 800dd86:	4b48      	ldr	r3, [pc, #288]	; (800dea8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800dd88:	4013      	ands	r3, r2
 800dd8a:	4a45      	ldr	r2, [pc, #276]	; (800dea0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800dd8c:	430b      	orrs	r3, r1
 800dd8e:	6113      	str	r3, [r2, #16]
 800dd90:	e005      	b.n	800dd9e <HAL_RCCEx_PeriphCLKConfig+0x852>
 800dd92:	4b43      	ldr	r3, [pc, #268]	; (800dea0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800dd94:	691b      	ldr	r3, [r3, #16]
 800dd96:	4a42      	ldr	r2, [pc, #264]	; (800dea0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800dd98:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800dd9c:	6113      	str	r3, [r2, #16]
 800dd9e:	4b40      	ldr	r3, [pc, #256]	; (800dea0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800dda0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800dda2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dda6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800ddaa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ddae:	4a3c      	ldr	r2, [pc, #240]	; (800dea0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ddb0:	430b      	orrs	r3, r1
 800ddb2:	6713      	str	r3, [r2, #112]	; 0x70
 800ddb4:	e008      	b.n	800ddc8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800ddb6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ddba:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 800ddbe:	e003      	b.n	800ddc8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ddc0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ddc4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800ddc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ddcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddd0:	f002 0301 	and.w	r3, r2, #1
 800ddd4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ddd8:	2300      	movs	r3, #0
 800ddda:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ddde:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800dde2:	460b      	mov	r3, r1
 800dde4:	4313      	orrs	r3, r2
 800dde6:	f000 8090 	beq.w	800df0a <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800ddea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ddee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ddf2:	2b28      	cmp	r3, #40	; 0x28
 800ddf4:	d870      	bhi.n	800ded8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800ddf6:	a201      	add	r2, pc, #4	; (adr r2, 800ddfc <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800ddf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddfc:	0800dee1 	.word	0x0800dee1
 800de00:	0800ded9 	.word	0x0800ded9
 800de04:	0800ded9 	.word	0x0800ded9
 800de08:	0800ded9 	.word	0x0800ded9
 800de0c:	0800ded9 	.word	0x0800ded9
 800de10:	0800ded9 	.word	0x0800ded9
 800de14:	0800ded9 	.word	0x0800ded9
 800de18:	0800ded9 	.word	0x0800ded9
 800de1c:	0800dead 	.word	0x0800dead
 800de20:	0800ded9 	.word	0x0800ded9
 800de24:	0800ded9 	.word	0x0800ded9
 800de28:	0800ded9 	.word	0x0800ded9
 800de2c:	0800ded9 	.word	0x0800ded9
 800de30:	0800ded9 	.word	0x0800ded9
 800de34:	0800ded9 	.word	0x0800ded9
 800de38:	0800ded9 	.word	0x0800ded9
 800de3c:	0800dec3 	.word	0x0800dec3
 800de40:	0800ded9 	.word	0x0800ded9
 800de44:	0800ded9 	.word	0x0800ded9
 800de48:	0800ded9 	.word	0x0800ded9
 800de4c:	0800ded9 	.word	0x0800ded9
 800de50:	0800ded9 	.word	0x0800ded9
 800de54:	0800ded9 	.word	0x0800ded9
 800de58:	0800ded9 	.word	0x0800ded9
 800de5c:	0800dee1 	.word	0x0800dee1
 800de60:	0800ded9 	.word	0x0800ded9
 800de64:	0800ded9 	.word	0x0800ded9
 800de68:	0800ded9 	.word	0x0800ded9
 800de6c:	0800ded9 	.word	0x0800ded9
 800de70:	0800ded9 	.word	0x0800ded9
 800de74:	0800ded9 	.word	0x0800ded9
 800de78:	0800ded9 	.word	0x0800ded9
 800de7c:	0800dee1 	.word	0x0800dee1
 800de80:	0800ded9 	.word	0x0800ded9
 800de84:	0800ded9 	.word	0x0800ded9
 800de88:	0800ded9 	.word	0x0800ded9
 800de8c:	0800ded9 	.word	0x0800ded9
 800de90:	0800ded9 	.word	0x0800ded9
 800de94:	0800ded9 	.word	0x0800ded9
 800de98:	0800ded9 	.word	0x0800ded9
 800de9c:	0800dee1 	.word	0x0800dee1
 800dea0:	58024400 	.word	0x58024400
 800dea4:	58024800 	.word	0x58024800
 800dea8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800deac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800deb0:	3308      	adds	r3, #8
 800deb2:	2101      	movs	r1, #1
 800deb4:	4618      	mov	r0, r3
 800deb6:	f001 fdef 	bl	800fa98 <RCCEx_PLL2_Config>
 800deba:	4603      	mov	r3, r0
 800debc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800dec0:	e00f      	b.n	800dee2 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800dec2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dec6:	3328      	adds	r3, #40	; 0x28
 800dec8:	2101      	movs	r1, #1
 800deca:	4618      	mov	r0, r3
 800decc:	f001 fe96 	bl	800fbfc <RCCEx_PLL3_Config>
 800ded0:	4603      	mov	r3, r0
 800ded2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800ded6:	e004      	b.n	800dee2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ded8:	2301      	movs	r3, #1
 800deda:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800dede:	e000      	b.n	800dee2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800dee0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dee2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d10b      	bne.n	800df02 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800deea:	4bc0      	ldr	r3, [pc, #768]	; (800e1ec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800deec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800deee:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800def2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800def6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800defa:	4abc      	ldr	r2, [pc, #752]	; (800e1ec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800defc:	430b      	orrs	r3, r1
 800defe:	6553      	str	r3, [r2, #84]	; 0x54
 800df00:	e003      	b.n	800df0a <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800df02:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800df06:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800df0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800df0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df12:	f002 0302 	and.w	r3, r2, #2
 800df16:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800df1a:	2300      	movs	r3, #0
 800df1c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800df20:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800df24:	460b      	mov	r3, r1
 800df26:	4313      	orrs	r3, r2
 800df28:	d043      	beq.n	800dfb2 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800df2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800df2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800df32:	2b05      	cmp	r3, #5
 800df34:	d824      	bhi.n	800df80 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800df36:	a201      	add	r2, pc, #4	; (adr r2, 800df3c <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 800df38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df3c:	0800df89 	.word	0x0800df89
 800df40:	0800df55 	.word	0x0800df55
 800df44:	0800df6b 	.word	0x0800df6b
 800df48:	0800df89 	.word	0x0800df89
 800df4c:	0800df89 	.word	0x0800df89
 800df50:	0800df89 	.word	0x0800df89
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800df54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800df58:	3308      	adds	r3, #8
 800df5a:	2101      	movs	r1, #1
 800df5c:	4618      	mov	r0, r3
 800df5e:	f001 fd9b 	bl	800fa98 <RCCEx_PLL2_Config>
 800df62:	4603      	mov	r3, r0
 800df64:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800df68:	e00f      	b.n	800df8a <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800df6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800df6e:	3328      	adds	r3, #40	; 0x28
 800df70:	2101      	movs	r1, #1
 800df72:	4618      	mov	r0, r3
 800df74:	f001 fe42 	bl	800fbfc <RCCEx_PLL3_Config>
 800df78:	4603      	mov	r3, r0
 800df7a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800df7e:	e004      	b.n	800df8a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800df80:	2301      	movs	r3, #1
 800df82:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800df86:	e000      	b.n	800df8a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 800df88:	bf00      	nop
    }

    if (ret == HAL_OK)
 800df8a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d10b      	bne.n	800dfaa <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800df92:	4b96      	ldr	r3, [pc, #600]	; (800e1ec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800df94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800df96:	f023 0107 	bic.w	r1, r3, #7
 800df9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800df9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dfa2:	4a92      	ldr	r2, [pc, #584]	; (800e1ec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800dfa4:	430b      	orrs	r3, r1
 800dfa6:	6553      	str	r3, [r2, #84]	; 0x54
 800dfa8:	e003      	b.n	800dfb2 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dfaa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800dfae:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800dfb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dfb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfba:	f002 0304 	and.w	r3, r2, #4
 800dfbe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800dfc2:	2300      	movs	r3, #0
 800dfc4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800dfc8:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800dfcc:	460b      	mov	r3, r1
 800dfce:	4313      	orrs	r3, r2
 800dfd0:	d043      	beq.n	800e05a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800dfd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dfd6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800dfda:	2b05      	cmp	r3, #5
 800dfdc:	d824      	bhi.n	800e028 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800dfde:	a201      	add	r2, pc, #4	; (adr r2, 800dfe4 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 800dfe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfe4:	0800e031 	.word	0x0800e031
 800dfe8:	0800dffd 	.word	0x0800dffd
 800dfec:	0800e013 	.word	0x0800e013
 800dff0:	0800e031 	.word	0x0800e031
 800dff4:	0800e031 	.word	0x0800e031
 800dff8:	0800e031 	.word	0x0800e031
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800dffc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e000:	3308      	adds	r3, #8
 800e002:	2101      	movs	r1, #1
 800e004:	4618      	mov	r0, r3
 800e006:	f001 fd47 	bl	800fa98 <RCCEx_PLL2_Config>
 800e00a:	4603      	mov	r3, r0
 800e00c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800e010:	e00f      	b.n	800e032 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e012:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e016:	3328      	adds	r3, #40	; 0x28
 800e018:	2101      	movs	r1, #1
 800e01a:	4618      	mov	r0, r3
 800e01c:	f001 fdee 	bl	800fbfc <RCCEx_PLL3_Config>
 800e020:	4603      	mov	r3, r0
 800e022:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800e026:	e004      	b.n	800e032 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e028:	2301      	movs	r3, #1
 800e02a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800e02e:	e000      	b.n	800e032 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 800e030:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e032:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800e036:	2b00      	cmp	r3, #0
 800e038:	d10b      	bne.n	800e052 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800e03a:	4b6c      	ldr	r3, [pc, #432]	; (800e1ec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800e03c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e03e:	f023 0107 	bic.w	r1, r3, #7
 800e042:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e046:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800e04a:	4a68      	ldr	r2, [pc, #416]	; (800e1ec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800e04c:	430b      	orrs	r3, r1
 800e04e:	6593      	str	r3, [r2, #88]	; 0x58
 800e050:	e003      	b.n	800e05a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e052:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800e056:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800e05a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e05e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e062:	f002 0320 	and.w	r3, r2, #32
 800e066:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800e06a:	2300      	movs	r3, #0
 800e06c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e070:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800e074:	460b      	mov	r3, r1
 800e076:	4313      	orrs	r3, r2
 800e078:	d055      	beq.n	800e126 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800e07a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e07e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800e082:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e086:	d033      	beq.n	800e0f0 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800e088:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e08c:	d82c      	bhi.n	800e0e8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800e08e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e092:	d02f      	beq.n	800e0f4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800e094:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e098:	d826      	bhi.n	800e0e8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800e09a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800e09e:	d02b      	beq.n	800e0f8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800e0a0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800e0a4:	d820      	bhi.n	800e0e8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800e0a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e0aa:	d012      	beq.n	800e0d2 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800e0ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e0b0:	d81a      	bhi.n	800e0e8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d022      	beq.n	800e0fc <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800e0b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e0ba:	d115      	bne.n	800e0e8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e0bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e0c0:	3308      	adds	r3, #8
 800e0c2:	2100      	movs	r1, #0
 800e0c4:	4618      	mov	r0, r3
 800e0c6:	f001 fce7 	bl	800fa98 <RCCEx_PLL2_Config>
 800e0ca:	4603      	mov	r3, r0
 800e0cc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800e0d0:	e015      	b.n	800e0fe <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e0d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e0d6:	3328      	adds	r3, #40	; 0x28
 800e0d8:	2102      	movs	r1, #2
 800e0da:	4618      	mov	r0, r3
 800e0dc:	f001 fd8e 	bl	800fbfc <RCCEx_PLL3_Config>
 800e0e0:	4603      	mov	r3, r0
 800e0e2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800e0e6:	e00a      	b.n	800e0fe <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e0e8:	2301      	movs	r3, #1
 800e0ea:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800e0ee:	e006      	b.n	800e0fe <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800e0f0:	bf00      	nop
 800e0f2:	e004      	b.n	800e0fe <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800e0f4:	bf00      	nop
 800e0f6:	e002      	b.n	800e0fe <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800e0f8:	bf00      	nop
 800e0fa:	e000      	b.n	800e0fe <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800e0fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e0fe:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800e102:	2b00      	cmp	r3, #0
 800e104:	d10b      	bne.n	800e11e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800e106:	4b39      	ldr	r3, [pc, #228]	; (800e1ec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800e108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e10a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800e10e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e112:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800e116:	4a35      	ldr	r2, [pc, #212]	; (800e1ec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800e118:	430b      	orrs	r3, r1
 800e11a:	6553      	str	r3, [r2, #84]	; 0x54
 800e11c:	e003      	b.n	800e126 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e11e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800e122:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800e126:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e12a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e12e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800e132:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800e136:	2300      	movs	r3, #0
 800e138:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800e13c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800e140:	460b      	mov	r3, r1
 800e142:	4313      	orrs	r3, r2
 800e144:	d058      	beq.n	800e1f8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800e146:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e14a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800e14e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800e152:	d033      	beq.n	800e1bc <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800e154:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800e158:	d82c      	bhi.n	800e1b4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800e15a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e15e:	d02f      	beq.n	800e1c0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800e160:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e164:	d826      	bhi.n	800e1b4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800e166:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e16a:	d02b      	beq.n	800e1c4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800e16c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e170:	d820      	bhi.n	800e1b4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800e172:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e176:	d012      	beq.n	800e19e <HAL_RCCEx_PeriphCLKConfig+0xc52>
 800e178:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e17c:	d81a      	bhi.n	800e1b4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d022      	beq.n	800e1c8 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800e182:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e186:	d115      	bne.n	800e1b4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e188:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e18c:	3308      	adds	r3, #8
 800e18e:	2100      	movs	r1, #0
 800e190:	4618      	mov	r0, r3
 800e192:	f001 fc81 	bl	800fa98 <RCCEx_PLL2_Config>
 800e196:	4603      	mov	r3, r0
 800e198:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800e19c:	e015      	b.n	800e1ca <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e19e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e1a2:	3328      	adds	r3, #40	; 0x28
 800e1a4:	2102      	movs	r1, #2
 800e1a6:	4618      	mov	r0, r3
 800e1a8:	f001 fd28 	bl	800fbfc <RCCEx_PLL3_Config>
 800e1ac:	4603      	mov	r3, r0
 800e1ae:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800e1b2:	e00a      	b.n	800e1ca <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e1b4:	2301      	movs	r3, #1
 800e1b6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800e1ba:	e006      	b.n	800e1ca <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800e1bc:	bf00      	nop
 800e1be:	e004      	b.n	800e1ca <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800e1c0:	bf00      	nop
 800e1c2:	e002      	b.n	800e1ca <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800e1c4:	bf00      	nop
 800e1c6:	e000      	b.n	800e1ca <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800e1c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e1ca:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d10e      	bne.n	800e1f0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800e1d2:	4b06      	ldr	r3, [pc, #24]	; (800e1ec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800e1d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e1d6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800e1da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e1de:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800e1e2:	4a02      	ldr	r2, [pc, #8]	; (800e1ec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800e1e4:	430b      	orrs	r3, r1
 800e1e6:	6593      	str	r3, [r2, #88]	; 0x58
 800e1e8:	e006      	b.n	800e1f8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800e1ea:	bf00      	nop
 800e1ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e1f0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800e1f4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800e1f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e1fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e200:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800e204:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800e208:	2300      	movs	r3, #0
 800e20a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800e20e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800e212:	460b      	mov	r3, r1
 800e214:	4313      	orrs	r3, r2
 800e216:	d055      	beq.n	800e2c4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800e218:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e21c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800e220:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800e224:	d033      	beq.n	800e28e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800e226:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800e22a:	d82c      	bhi.n	800e286 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800e22c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e230:	d02f      	beq.n	800e292 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800e232:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e236:	d826      	bhi.n	800e286 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800e238:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800e23c:	d02b      	beq.n	800e296 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800e23e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800e242:	d820      	bhi.n	800e286 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800e244:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e248:	d012      	beq.n	800e270 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800e24a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e24e:	d81a      	bhi.n	800e286 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800e250:	2b00      	cmp	r3, #0
 800e252:	d022      	beq.n	800e29a <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 800e254:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e258:	d115      	bne.n	800e286 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e25a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e25e:	3308      	adds	r3, #8
 800e260:	2100      	movs	r1, #0
 800e262:	4618      	mov	r0, r3
 800e264:	f001 fc18 	bl	800fa98 <RCCEx_PLL2_Config>
 800e268:	4603      	mov	r3, r0
 800e26a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800e26e:	e015      	b.n	800e29c <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e270:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e274:	3328      	adds	r3, #40	; 0x28
 800e276:	2102      	movs	r1, #2
 800e278:	4618      	mov	r0, r3
 800e27a:	f001 fcbf 	bl	800fbfc <RCCEx_PLL3_Config>
 800e27e:	4603      	mov	r3, r0
 800e280:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800e284:	e00a      	b.n	800e29c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e286:	2301      	movs	r3, #1
 800e288:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800e28c:	e006      	b.n	800e29c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800e28e:	bf00      	nop
 800e290:	e004      	b.n	800e29c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800e292:	bf00      	nop
 800e294:	e002      	b.n	800e29c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800e296:	bf00      	nop
 800e298:	e000      	b.n	800e29c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800e29a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e29c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d10b      	bne.n	800e2bc <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800e2a4:	4ba1      	ldr	r3, [pc, #644]	; (800e52c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800e2a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e2a8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800e2ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e2b0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800e2b4:	4a9d      	ldr	r2, [pc, #628]	; (800e52c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800e2b6:	430b      	orrs	r3, r1
 800e2b8:	6593      	str	r3, [r2, #88]	; 0x58
 800e2ba:	e003      	b.n	800e2c4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e2bc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800e2c0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800e2c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e2c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2cc:	f002 0308 	and.w	r3, r2, #8
 800e2d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800e2d4:	2300      	movs	r3, #0
 800e2d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e2da:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800e2de:	460b      	mov	r3, r1
 800e2e0:	4313      	orrs	r3, r2
 800e2e2:	d01e      	beq.n	800e322 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800e2e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e2e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e2ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e2f0:	d10c      	bne.n	800e30c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800e2f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e2f6:	3328      	adds	r3, #40	; 0x28
 800e2f8:	2102      	movs	r1, #2
 800e2fa:	4618      	mov	r0, r3
 800e2fc:	f001 fc7e 	bl	800fbfc <RCCEx_PLL3_Config>
 800e300:	4603      	mov	r3, r0
 800e302:	2b00      	cmp	r3, #0
 800e304:	d002      	beq.n	800e30c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800e306:	2301      	movs	r3, #1
 800e308:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800e30c:	4b87      	ldr	r3, [pc, #540]	; (800e52c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800e30e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e310:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e314:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e318:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e31c:	4a83      	ldr	r2, [pc, #524]	; (800e52c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800e31e:	430b      	orrs	r3, r1
 800e320:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800e322:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e32a:	f002 0310 	and.w	r3, r2, #16
 800e32e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800e332:	2300      	movs	r3, #0
 800e334:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800e338:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800e33c:	460b      	mov	r3, r1
 800e33e:	4313      	orrs	r3, r2
 800e340:	d01e      	beq.n	800e380 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800e342:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e346:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800e34a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e34e:	d10c      	bne.n	800e36a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800e350:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e354:	3328      	adds	r3, #40	; 0x28
 800e356:	2102      	movs	r1, #2
 800e358:	4618      	mov	r0, r3
 800e35a:	f001 fc4f 	bl	800fbfc <RCCEx_PLL3_Config>
 800e35e:	4603      	mov	r3, r0
 800e360:	2b00      	cmp	r3, #0
 800e362:	d002      	beq.n	800e36a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 800e364:	2301      	movs	r3, #1
 800e366:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800e36a:	4b70      	ldr	r3, [pc, #448]	; (800e52c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800e36c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e36e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800e372:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e376:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800e37a:	4a6c      	ldr	r2, [pc, #432]	; (800e52c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800e37c:	430b      	orrs	r3, r1
 800e37e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800e380:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e384:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e388:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800e38c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800e390:	2300      	movs	r3, #0
 800e392:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e396:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800e39a:	460b      	mov	r3, r1
 800e39c:	4313      	orrs	r3, r2
 800e39e:	d03e      	beq.n	800e41e <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800e3a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e3a4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800e3a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e3ac:	d022      	beq.n	800e3f4 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800e3ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e3b2:	d81b      	bhi.n	800e3ec <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d003      	beq.n	800e3c0 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 800e3b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e3bc:	d00b      	beq.n	800e3d6 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800e3be:	e015      	b.n	800e3ec <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e3c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e3c4:	3308      	adds	r3, #8
 800e3c6:	2100      	movs	r1, #0
 800e3c8:	4618      	mov	r0, r3
 800e3ca:	f001 fb65 	bl	800fa98 <RCCEx_PLL2_Config>
 800e3ce:	4603      	mov	r3, r0
 800e3d0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800e3d4:	e00f      	b.n	800e3f6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e3d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e3da:	3328      	adds	r3, #40	; 0x28
 800e3dc:	2102      	movs	r1, #2
 800e3de:	4618      	mov	r0, r3
 800e3e0:	f001 fc0c 	bl	800fbfc <RCCEx_PLL3_Config>
 800e3e4:	4603      	mov	r3, r0
 800e3e6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800e3ea:	e004      	b.n	800e3f6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e3ec:	2301      	movs	r3, #1
 800e3ee:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800e3f2:	e000      	b.n	800e3f6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 800e3f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e3f6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d10b      	bne.n	800e416 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800e3fe:	4b4b      	ldr	r3, [pc, #300]	; (800e52c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800e400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e402:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800e406:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e40a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800e40e:	4a47      	ldr	r2, [pc, #284]	; (800e52c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800e410:	430b      	orrs	r3, r1
 800e412:	6593      	str	r3, [r2, #88]	; 0x58
 800e414:	e003      	b.n	800e41e <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e416:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800e41a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800e41e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e422:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e426:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800e42a:	67bb      	str	r3, [r7, #120]	; 0x78
 800e42c:	2300      	movs	r3, #0
 800e42e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e430:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800e434:	460b      	mov	r3, r1
 800e436:	4313      	orrs	r3, r2
 800e438:	d03b      	beq.n	800e4b2 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800e43a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e43e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e442:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800e446:	d01f      	beq.n	800e488 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 800e448:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800e44c:	d818      	bhi.n	800e480 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800e44e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e452:	d003      	beq.n	800e45c <HAL_RCCEx_PeriphCLKConfig+0xf10>
 800e454:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e458:	d007      	beq.n	800e46a <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800e45a:	e011      	b.n	800e480 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e45c:	4b33      	ldr	r3, [pc, #204]	; (800e52c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800e45e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e460:	4a32      	ldr	r2, [pc, #200]	; (800e52c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800e462:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e466:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800e468:	e00f      	b.n	800e48a <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e46a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e46e:	3328      	adds	r3, #40	; 0x28
 800e470:	2101      	movs	r1, #1
 800e472:	4618      	mov	r0, r3
 800e474:	f001 fbc2 	bl	800fbfc <RCCEx_PLL3_Config>
 800e478:	4603      	mov	r3, r0
 800e47a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800e47e:	e004      	b.n	800e48a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e480:	2301      	movs	r3, #1
 800e482:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800e486:	e000      	b.n	800e48a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 800e488:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e48a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d10b      	bne.n	800e4aa <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800e492:	4b26      	ldr	r3, [pc, #152]	; (800e52c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800e494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e496:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800e49a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e49e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e4a2:	4a22      	ldr	r2, [pc, #136]	; (800e52c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800e4a4:	430b      	orrs	r3, r1
 800e4a6:	6553      	str	r3, [r2, #84]	; 0x54
 800e4a8:	e003      	b.n	800e4b2 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e4aa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800e4ae:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800e4b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e4b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4ba:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800e4be:	673b      	str	r3, [r7, #112]	; 0x70
 800e4c0:	2300      	movs	r3, #0
 800e4c2:	677b      	str	r3, [r7, #116]	; 0x74
 800e4c4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800e4c8:	460b      	mov	r3, r1
 800e4ca:	4313      	orrs	r3, r2
 800e4cc:	d034      	beq.n	800e538 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800e4ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e4d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d003      	beq.n	800e4e0 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 800e4d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e4dc:	d007      	beq.n	800e4ee <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 800e4de:	e011      	b.n	800e504 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e4e0:	4b12      	ldr	r3, [pc, #72]	; (800e52c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800e4e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4e4:	4a11      	ldr	r2, [pc, #68]	; (800e52c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800e4e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e4ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800e4ec:	e00e      	b.n	800e50c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e4ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e4f2:	3308      	adds	r3, #8
 800e4f4:	2102      	movs	r1, #2
 800e4f6:	4618      	mov	r0, r3
 800e4f8:	f001 face 	bl	800fa98 <RCCEx_PLL2_Config>
 800e4fc:	4603      	mov	r3, r0
 800e4fe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800e502:	e003      	b.n	800e50c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 800e504:	2301      	movs	r3, #1
 800e506:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800e50a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e50c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800e510:	2b00      	cmp	r3, #0
 800e512:	d10d      	bne.n	800e530 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800e514:	4b05      	ldr	r3, [pc, #20]	; (800e52c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800e516:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e518:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e51c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e520:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e522:	4a02      	ldr	r2, [pc, #8]	; (800e52c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800e524:	430b      	orrs	r3, r1
 800e526:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e528:	e006      	b.n	800e538 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800e52a:	bf00      	nop
 800e52c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e530:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800e534:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800e538:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e53c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e540:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800e544:	66bb      	str	r3, [r7, #104]	; 0x68
 800e546:	2300      	movs	r3, #0
 800e548:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e54a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800e54e:	460b      	mov	r3, r1
 800e550:	4313      	orrs	r3, r2
 800e552:	d00c      	beq.n	800e56e <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800e554:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e558:	3328      	adds	r3, #40	; 0x28
 800e55a:	2102      	movs	r1, #2
 800e55c:	4618      	mov	r0, r3
 800e55e:	f001 fb4d 	bl	800fbfc <RCCEx_PLL3_Config>
 800e562:	4603      	mov	r3, r0
 800e564:	2b00      	cmp	r3, #0
 800e566:	d002      	beq.n	800e56e <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 800e568:	2301      	movs	r3, #1
 800e56a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800e56e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e572:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e576:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800e57a:	663b      	str	r3, [r7, #96]	; 0x60
 800e57c:	2300      	movs	r3, #0
 800e57e:	667b      	str	r3, [r7, #100]	; 0x64
 800e580:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800e584:	460b      	mov	r3, r1
 800e586:	4313      	orrs	r3, r2
 800e588:	d038      	beq.n	800e5fc <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800e58a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e58e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e592:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e596:	d018      	beq.n	800e5ca <HAL_RCCEx_PeriphCLKConfig+0x107e>
 800e598:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e59c:	d811      	bhi.n	800e5c2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800e59e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e5a2:	d014      	beq.n	800e5ce <HAL_RCCEx_PeriphCLKConfig+0x1082>
 800e5a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e5a8:	d80b      	bhi.n	800e5c2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d011      	beq.n	800e5d2 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 800e5ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e5b2:	d106      	bne.n	800e5c2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e5b4:	4bc3      	ldr	r3, [pc, #780]	; (800e8c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800e5b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5b8:	4ac2      	ldr	r2, [pc, #776]	; (800e8c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800e5ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e5be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800e5c0:	e008      	b.n	800e5d4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e5c2:	2301      	movs	r3, #1
 800e5c4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800e5c8:	e004      	b.n	800e5d4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800e5ca:	bf00      	nop
 800e5cc:	e002      	b.n	800e5d4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800e5ce:	bf00      	nop
 800e5d0:	e000      	b.n	800e5d4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800e5d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e5d4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d10b      	bne.n	800e5f4 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800e5dc:	4bb9      	ldr	r3, [pc, #740]	; (800e8c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800e5de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e5e0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800e5e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e5e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e5ec:	4ab5      	ldr	r2, [pc, #724]	; (800e8c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800e5ee:	430b      	orrs	r3, r1
 800e5f0:	6553      	str	r3, [r2, #84]	; 0x54
 800e5f2:	e003      	b.n	800e5fc <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e5f4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800e5f8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800e5fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e600:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e604:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800e608:	65bb      	str	r3, [r7, #88]	; 0x58
 800e60a:	2300      	movs	r3, #0
 800e60c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e60e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800e612:	460b      	mov	r3, r1
 800e614:	4313      	orrs	r3, r2
 800e616:	d009      	beq.n	800e62c <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800e618:	4baa      	ldr	r3, [pc, #680]	; (800e8c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800e61a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e61c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e620:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e624:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e626:	4aa7      	ldr	r2, [pc, #668]	; (800e8c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800e628:	430b      	orrs	r3, r1
 800e62a:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800e62c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e630:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e634:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800e638:	653b      	str	r3, [r7, #80]	; 0x50
 800e63a:	2300      	movs	r3, #0
 800e63c:	657b      	str	r3, [r7, #84]	; 0x54
 800e63e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800e642:	460b      	mov	r3, r1
 800e644:	4313      	orrs	r3, r2
 800e646:	d009      	beq.n	800e65c <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800e648:	4b9e      	ldr	r3, [pc, #632]	; (800e8c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800e64a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e64c:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800e650:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e656:	4a9b      	ldr	r2, [pc, #620]	; (800e8c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800e658:	430b      	orrs	r3, r1
 800e65a:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800e65c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e660:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e664:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800e668:	64bb      	str	r3, [r7, #72]	; 0x48
 800e66a:	2300      	movs	r3, #0
 800e66c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e66e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800e672:	460b      	mov	r3, r1
 800e674:	4313      	orrs	r3, r2
 800e676:	d009      	beq.n	800e68c <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800e678:	4b92      	ldr	r3, [pc, #584]	; (800e8c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800e67a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e67c:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 800e680:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e684:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e686:	4a8f      	ldr	r2, [pc, #572]	; (800e8c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800e688:	430b      	orrs	r3, r1
 800e68a:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800e68c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e690:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e694:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800e698:	643b      	str	r3, [r7, #64]	; 0x40
 800e69a:	2300      	movs	r3, #0
 800e69c:	647b      	str	r3, [r7, #68]	; 0x44
 800e69e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800e6a2:	460b      	mov	r3, r1
 800e6a4:	4313      	orrs	r3, r2
 800e6a6:	d00e      	beq.n	800e6c6 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800e6a8:	4b86      	ldr	r3, [pc, #536]	; (800e8c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800e6aa:	691b      	ldr	r3, [r3, #16]
 800e6ac:	4a85      	ldr	r2, [pc, #532]	; (800e8c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800e6ae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e6b2:	6113      	str	r3, [r2, #16]
 800e6b4:	4b83      	ldr	r3, [pc, #524]	; (800e8c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800e6b6:	6919      	ldr	r1, [r3, #16]
 800e6b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e6bc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800e6c0:	4a80      	ldr	r2, [pc, #512]	; (800e8c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800e6c2:	430b      	orrs	r3, r1
 800e6c4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800e6c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e6ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6ce:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800e6d2:	63bb      	str	r3, [r7, #56]	; 0x38
 800e6d4:	2300      	movs	r3, #0
 800e6d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e6d8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800e6dc:	460b      	mov	r3, r1
 800e6de:	4313      	orrs	r3, r2
 800e6e0:	d009      	beq.n	800e6f6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800e6e2:	4b78      	ldr	r3, [pc, #480]	; (800e8c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800e6e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e6e6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800e6ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e6ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e6f0:	4a74      	ldr	r2, [pc, #464]	; (800e8c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800e6f2:	430b      	orrs	r3, r1
 800e6f4:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800e6f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e6fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6fe:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800e702:	633b      	str	r3, [r7, #48]	; 0x30
 800e704:	2300      	movs	r3, #0
 800e706:	637b      	str	r3, [r7, #52]	; 0x34
 800e708:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800e70c:	460b      	mov	r3, r1
 800e70e:	4313      	orrs	r3, r2
 800e710:	d00a      	beq.n	800e728 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800e712:	4b6c      	ldr	r3, [pc, #432]	; (800e8c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800e714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e716:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800e71a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e71e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e722:	4a68      	ldr	r2, [pc, #416]	; (800e8c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800e724:	430b      	orrs	r3, r1
 800e726:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800e728:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e72c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e730:	2100      	movs	r1, #0
 800e732:	62b9      	str	r1, [r7, #40]	; 0x28
 800e734:	f003 0301 	and.w	r3, r3, #1
 800e738:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e73a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800e73e:	460b      	mov	r3, r1
 800e740:	4313      	orrs	r3, r2
 800e742:	d011      	beq.n	800e768 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e744:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e748:	3308      	adds	r3, #8
 800e74a:	2100      	movs	r1, #0
 800e74c:	4618      	mov	r0, r3
 800e74e:	f001 f9a3 	bl	800fa98 <RCCEx_PLL2_Config>
 800e752:	4603      	mov	r3, r0
 800e754:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800e758:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d003      	beq.n	800e768 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e760:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800e764:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800e768:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e76c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e770:	2100      	movs	r1, #0
 800e772:	6239      	str	r1, [r7, #32]
 800e774:	f003 0302 	and.w	r3, r3, #2
 800e778:	627b      	str	r3, [r7, #36]	; 0x24
 800e77a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800e77e:	460b      	mov	r3, r1
 800e780:	4313      	orrs	r3, r2
 800e782:	d011      	beq.n	800e7a8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e784:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e788:	3308      	adds	r3, #8
 800e78a:	2101      	movs	r1, #1
 800e78c:	4618      	mov	r0, r3
 800e78e:	f001 f983 	bl	800fa98 <RCCEx_PLL2_Config>
 800e792:	4603      	mov	r3, r0
 800e794:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800e798:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d003      	beq.n	800e7a8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e7a0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800e7a4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800e7a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e7ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7b0:	2100      	movs	r1, #0
 800e7b2:	61b9      	str	r1, [r7, #24]
 800e7b4:	f003 0304 	and.w	r3, r3, #4
 800e7b8:	61fb      	str	r3, [r7, #28]
 800e7ba:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800e7be:	460b      	mov	r3, r1
 800e7c0:	4313      	orrs	r3, r2
 800e7c2:	d011      	beq.n	800e7e8 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e7c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e7c8:	3308      	adds	r3, #8
 800e7ca:	2102      	movs	r1, #2
 800e7cc:	4618      	mov	r0, r3
 800e7ce:	f001 f963 	bl	800fa98 <RCCEx_PLL2_Config>
 800e7d2:	4603      	mov	r3, r0
 800e7d4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800e7d8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d003      	beq.n	800e7e8 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e7e0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800e7e4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800e7e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e7ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7f0:	2100      	movs	r1, #0
 800e7f2:	6139      	str	r1, [r7, #16]
 800e7f4:	f003 0308 	and.w	r3, r3, #8
 800e7f8:	617b      	str	r3, [r7, #20]
 800e7fa:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800e7fe:	460b      	mov	r3, r1
 800e800:	4313      	orrs	r3, r2
 800e802:	d011      	beq.n	800e828 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e804:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e808:	3328      	adds	r3, #40	; 0x28
 800e80a:	2100      	movs	r1, #0
 800e80c:	4618      	mov	r0, r3
 800e80e:	f001 f9f5 	bl	800fbfc <RCCEx_PLL3_Config>
 800e812:	4603      	mov	r3, r0
 800e814:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 800e818:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d003      	beq.n	800e828 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e820:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800e824:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800e828:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e82c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e830:	2100      	movs	r1, #0
 800e832:	60b9      	str	r1, [r7, #8]
 800e834:	f003 0310 	and.w	r3, r3, #16
 800e838:	60fb      	str	r3, [r7, #12]
 800e83a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800e83e:	460b      	mov	r3, r1
 800e840:	4313      	orrs	r3, r2
 800e842:	d011      	beq.n	800e868 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e844:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e848:	3328      	adds	r3, #40	; 0x28
 800e84a:	2101      	movs	r1, #1
 800e84c:	4618      	mov	r0, r3
 800e84e:	f001 f9d5 	bl	800fbfc <RCCEx_PLL3_Config>
 800e852:	4603      	mov	r3, r0
 800e854:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800e858:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d003      	beq.n	800e868 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e860:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800e864:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800e868:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e86c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e870:	2100      	movs	r1, #0
 800e872:	6039      	str	r1, [r7, #0]
 800e874:	f003 0320 	and.w	r3, r3, #32
 800e878:	607b      	str	r3, [r7, #4]
 800e87a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800e87e:	460b      	mov	r3, r1
 800e880:	4313      	orrs	r3, r2
 800e882:	d011      	beq.n	800e8a8 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e884:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e888:	3328      	adds	r3, #40	; 0x28
 800e88a:	2102      	movs	r1, #2
 800e88c:	4618      	mov	r0, r3
 800e88e:	f001 f9b5 	bl	800fbfc <RCCEx_PLL3_Config>
 800e892:	4603      	mov	r3, r0
 800e894:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800e898:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d003      	beq.n	800e8a8 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e8a0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800e8a4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 800e8a8:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d101      	bne.n	800e8b4 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 800e8b0:	2300      	movs	r3, #0
 800e8b2:	e000      	b.n	800e8b6 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 800e8b4:	2301      	movs	r3, #1
}
 800e8b6:	4618      	mov	r0, r3
 800e8b8:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800e8bc:	46bd      	mov	sp, r7
 800e8be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e8c2:	bf00      	nop
 800e8c4:	58024400 	.word	0x58024400

0800e8c8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800e8c8:	b580      	push	{r7, lr}
 800e8ca:	b090      	sub	sp, #64	; 0x40
 800e8cc:	af00      	add	r7, sp, #0
 800e8ce:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800e8d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e8d6:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800e8da:	430b      	orrs	r3, r1
 800e8dc:	f040 8094 	bne.w	800ea08 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800e8e0:	4b97      	ldr	r3, [pc, #604]	; (800eb40 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e8e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e8e4:	f003 0307 	and.w	r3, r3, #7
 800e8e8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800e8ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8ec:	2b04      	cmp	r3, #4
 800e8ee:	f200 8087 	bhi.w	800ea00 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800e8f2:	a201      	add	r2, pc, #4	; (adr r2, 800e8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800e8f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8f8:	0800e90d 	.word	0x0800e90d
 800e8fc:	0800e935 	.word	0x0800e935
 800e900:	0800e95d 	.word	0x0800e95d
 800e904:	0800e9f9 	.word	0x0800e9f9
 800e908:	0800e985 	.word	0x0800e985
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e90c:	4b8c      	ldr	r3, [pc, #560]	; (800eb40 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e914:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e918:	d108      	bne.n	800e92c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e91a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e91e:	4618      	mov	r0, r3
 800e920:	f000 ff68 	bl	800f7f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e926:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e928:	f000 bc97 	b.w	800f25a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800e92c:	2300      	movs	r3, #0
 800e92e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e930:	f000 bc93 	b.w	800f25a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e934:	4b82      	ldr	r3, [pc, #520]	; (800eb40 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e93c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e940:	d108      	bne.n	800e954 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e942:	f107 0318 	add.w	r3, r7, #24
 800e946:	4618      	mov	r0, r3
 800e948:	f000 fcac 	bl	800f2a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800e94c:	69bb      	ldr	r3, [r7, #24]
 800e94e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e950:	f000 bc83 	b.w	800f25a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800e954:	2300      	movs	r3, #0
 800e956:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e958:	f000 bc7f 	b.w	800f25a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e95c:	4b78      	ldr	r3, [pc, #480]	; (800eb40 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e964:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e968:	d108      	bne.n	800e97c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e96a:	f107 030c 	add.w	r3, r7, #12
 800e96e:	4618      	mov	r0, r3
 800e970:	f000 fdec 	bl	800f54c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e978:	f000 bc6f 	b.w	800f25a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800e97c:	2300      	movs	r3, #0
 800e97e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e980:	f000 bc6b 	b.w	800f25a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800e984:	4b6e      	ldr	r3, [pc, #440]	; (800eb40 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e986:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e988:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800e98c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e98e:	4b6c      	ldr	r3, [pc, #432]	; (800eb40 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	f003 0304 	and.w	r3, r3, #4
 800e996:	2b04      	cmp	r3, #4
 800e998:	d10c      	bne.n	800e9b4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800e99a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d109      	bne.n	800e9b4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e9a0:	4b67      	ldr	r3, [pc, #412]	; (800eb40 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	08db      	lsrs	r3, r3, #3
 800e9a6:	f003 0303 	and.w	r3, r3, #3
 800e9aa:	4a66      	ldr	r2, [pc, #408]	; (800eb44 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800e9ac:	fa22 f303 	lsr.w	r3, r2, r3
 800e9b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e9b2:	e01f      	b.n	800e9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e9b4:	4b62      	ldr	r3, [pc, #392]	; (800eb40 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e9bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e9c0:	d106      	bne.n	800e9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800e9c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e9c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e9c8:	d102      	bne.n	800e9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800e9ca:	4b5f      	ldr	r3, [pc, #380]	; (800eb48 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800e9cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e9ce:	e011      	b.n	800e9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e9d0:	4b5b      	ldr	r3, [pc, #364]	; (800eb40 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e9d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e9dc:	d106      	bne.n	800e9ec <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800e9de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e9e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e9e4:	d102      	bne.n	800e9ec <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800e9e6:	4b59      	ldr	r3, [pc, #356]	; (800eb4c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800e9e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e9ea:	e003      	b.n	800e9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800e9ec:	2300      	movs	r3, #0
 800e9ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800e9f0:	f000 bc33 	b.w	800f25a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800e9f4:	f000 bc31 	b.w	800f25a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800e9f8:	4b55      	ldr	r3, [pc, #340]	; (800eb50 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800e9fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e9fc:	f000 bc2d 	b.w	800f25a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 800ea00:	2300      	movs	r3, #0
 800ea02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ea04:	f000 bc29 	b.w	800f25a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 800ea08:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ea0c:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800ea10:	430b      	orrs	r3, r1
 800ea12:	f040 809f 	bne.w	800eb54 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 800ea16:	4b4a      	ldr	r3, [pc, #296]	; (800eb40 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ea18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ea1a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800ea1e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800ea20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ea26:	d04d      	beq.n	800eac4 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 800ea28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ea2e:	f200 8084 	bhi.w	800eb3a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800ea32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea34:	2bc0      	cmp	r3, #192	; 0xc0
 800ea36:	d07d      	beq.n	800eb34 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 800ea38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea3a:	2bc0      	cmp	r3, #192	; 0xc0
 800ea3c:	d87d      	bhi.n	800eb3a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800ea3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea40:	2b80      	cmp	r3, #128	; 0x80
 800ea42:	d02d      	beq.n	800eaa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 800ea44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea46:	2b80      	cmp	r3, #128	; 0x80
 800ea48:	d877      	bhi.n	800eb3a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800ea4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d003      	beq.n	800ea58 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 800ea50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea52:	2b40      	cmp	r3, #64	; 0x40
 800ea54:	d012      	beq.n	800ea7c <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 800ea56:	e070      	b.n	800eb3a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ea58:	4b39      	ldr	r3, [pc, #228]	; (800eb40 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ea60:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ea64:	d107      	bne.n	800ea76 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ea66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ea6a:	4618      	mov	r0, r3
 800ea6c:	f000 fec2 	bl	800f7f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ea70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea72:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ea74:	e3f1      	b.n	800f25a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800ea76:	2300      	movs	r3, #0
 800ea78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ea7a:	e3ee      	b.n	800f25a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ea7c:	4b30      	ldr	r3, [pc, #192]	; (800eb40 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ea84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ea88:	d107      	bne.n	800ea9a <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ea8a:	f107 0318 	add.w	r3, r7, #24
 800ea8e:	4618      	mov	r0, r3
 800ea90:	f000 fc08 	bl	800f2a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ea94:	69bb      	ldr	r3, [r7, #24]
 800ea96:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ea98:	e3df      	b.n	800f25a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800ea9a:	2300      	movs	r3, #0
 800ea9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ea9e:	e3dc      	b.n	800f25a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800eaa0:	4b27      	ldr	r3, [pc, #156]	; (800eb40 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800eaa8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800eaac:	d107      	bne.n	800eabe <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800eaae:	f107 030c 	add.w	r3, r7, #12
 800eab2:	4618      	mov	r0, r3
 800eab4:	f000 fd4a 	bl	800f54c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800eabc:	e3cd      	b.n	800f25a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800eabe:	2300      	movs	r3, #0
 800eac0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eac2:	e3ca      	b.n	800f25a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800eac4:	4b1e      	ldr	r3, [pc, #120]	; (800eb40 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800eac6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800eac8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800eacc:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800eace:	4b1c      	ldr	r3, [pc, #112]	; (800eb40 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	f003 0304 	and.w	r3, r3, #4
 800ead6:	2b04      	cmp	r3, #4
 800ead8:	d10c      	bne.n	800eaf4 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 800eada:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d109      	bne.n	800eaf4 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800eae0:	4b17      	ldr	r3, [pc, #92]	; (800eb40 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	08db      	lsrs	r3, r3, #3
 800eae6:	f003 0303 	and.w	r3, r3, #3
 800eaea:	4a16      	ldr	r2, [pc, #88]	; (800eb44 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800eaec:	fa22 f303 	lsr.w	r3, r2, r3
 800eaf0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800eaf2:	e01e      	b.n	800eb32 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800eaf4:	4b12      	ldr	r3, [pc, #72]	; (800eb40 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800eafc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800eb00:	d106      	bne.n	800eb10 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 800eb02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800eb08:	d102      	bne.n	800eb10 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800eb0a:	4b0f      	ldr	r3, [pc, #60]	; (800eb48 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800eb0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800eb0e:	e010      	b.n	800eb32 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800eb10:	4b0b      	ldr	r3, [pc, #44]	; (800eb40 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800eb18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800eb1c:	d106      	bne.n	800eb2c <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800eb1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800eb24:	d102      	bne.n	800eb2c <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800eb26:	4b09      	ldr	r3, [pc, #36]	; (800eb4c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800eb28:	63fb      	str	r3, [r7, #60]	; 0x3c
 800eb2a:	e002      	b.n	800eb32 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800eb2c:	2300      	movs	r3, #0
 800eb2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800eb30:	e393      	b.n	800f25a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800eb32:	e392      	b.n	800f25a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800eb34:	4b06      	ldr	r3, [pc, #24]	; (800eb50 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800eb36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eb38:	e38f      	b.n	800f25a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800eb3a:	2300      	movs	r3, #0
 800eb3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eb3e:	e38c      	b.n	800f25a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800eb40:	58024400 	.word	0x58024400
 800eb44:	03d09000 	.word	0x03d09000
 800eb48:	003d0900 	.word	0x003d0900
 800eb4c:	016e3600 	.word	0x016e3600
 800eb50:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 800eb54:	e9d7 2300 	ldrd	r2, r3, [r7]
 800eb58:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800eb5c:	430b      	orrs	r3, r1
 800eb5e:	f040 809c 	bne.w	800ec9a <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 800eb62:	4b9e      	ldr	r3, [pc, #632]	; (800eddc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800eb64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eb66:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 800eb6a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800eb6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800eb72:	d054      	beq.n	800ec1e <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 800eb74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800eb7a:	f200 808b 	bhi.w	800ec94 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800eb7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb80:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800eb84:	f000 8083 	beq.w	800ec8e <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 800eb88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb8a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800eb8e:	f200 8081 	bhi.w	800ec94 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800eb92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800eb98:	d02f      	beq.n	800ebfa <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 800eb9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800eba0:	d878      	bhi.n	800ec94 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800eba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d004      	beq.n	800ebb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 800eba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebaa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ebae:	d012      	beq.n	800ebd6 <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 800ebb0:	e070      	b.n	800ec94 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ebb2:	4b8a      	ldr	r3, [pc, #552]	; (800eddc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ebba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ebbe:	d107      	bne.n	800ebd0 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ebc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ebc4:	4618      	mov	r0, r3
 800ebc6:	f000 fe15 	bl	800f7f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ebca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebcc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ebce:	e344      	b.n	800f25a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800ebd0:	2300      	movs	r3, #0
 800ebd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ebd4:	e341      	b.n	800f25a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ebd6:	4b81      	ldr	r3, [pc, #516]	; (800eddc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ebde:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ebe2:	d107      	bne.n	800ebf4 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ebe4:	f107 0318 	add.w	r3, r7, #24
 800ebe8:	4618      	mov	r0, r3
 800ebea:	f000 fb5b 	bl	800f2a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ebee:	69bb      	ldr	r3, [r7, #24]
 800ebf0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ebf2:	e332      	b.n	800f25a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800ebf4:	2300      	movs	r3, #0
 800ebf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ebf8:	e32f      	b.n	800f25a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ebfa:	4b78      	ldr	r3, [pc, #480]	; (800eddc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ec02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ec06:	d107      	bne.n	800ec18 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ec08:	f107 030c 	add.w	r3, r7, #12
 800ec0c:	4618      	mov	r0, r3
 800ec0e:	f000 fc9d 	bl	800f54c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ec16:	e320      	b.n	800f25a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800ec18:	2300      	movs	r3, #0
 800ec1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ec1c:	e31d      	b.n	800f25a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ec1e:	4b6f      	ldr	r3, [pc, #444]	; (800eddc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800ec20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ec22:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ec26:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ec28:	4b6c      	ldr	r3, [pc, #432]	; (800eddc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	f003 0304 	and.w	r3, r3, #4
 800ec30:	2b04      	cmp	r3, #4
 800ec32:	d10c      	bne.n	800ec4e <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 800ec34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d109      	bne.n	800ec4e <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ec3a:	4b68      	ldr	r3, [pc, #416]	; (800eddc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	08db      	lsrs	r3, r3, #3
 800ec40:	f003 0303 	and.w	r3, r3, #3
 800ec44:	4a66      	ldr	r2, [pc, #408]	; (800ede0 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 800ec46:	fa22 f303 	lsr.w	r3, r2, r3
 800ec4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ec4c:	e01e      	b.n	800ec8c <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ec4e:	4b63      	ldr	r3, [pc, #396]	; (800eddc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ec56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ec5a:	d106      	bne.n	800ec6a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800ec5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ec62:	d102      	bne.n	800ec6a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ec64:	4b5f      	ldr	r3, [pc, #380]	; (800ede4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 800ec66:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ec68:	e010      	b.n	800ec8c <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ec6a:	4b5c      	ldr	r3, [pc, #368]	; (800eddc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ec72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ec76:	d106      	bne.n	800ec86 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800ec78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ec7e:	d102      	bne.n	800ec86 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ec80:	4b59      	ldr	r3, [pc, #356]	; (800ede8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800ec82:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ec84:	e002      	b.n	800ec8c <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ec86:	2300      	movs	r3, #0
 800ec88:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        break;
 800ec8a:	e2e6      	b.n	800f25a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800ec8c:	e2e5      	b.n	800f25a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ec8e:	4b57      	ldr	r3, [pc, #348]	; (800edec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ec90:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ec92:	e2e2      	b.n	800f25a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800ec94:	2300      	movs	r3, #0
 800ec96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ec98:	e2df      	b.n	800f25a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800ec9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ec9e:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800eca2:	430b      	orrs	r3, r1
 800eca4:	f040 80a7 	bne.w	800edf6 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800eca8:	4b4c      	ldr	r3, [pc, #304]	; (800eddc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800ecaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ecac:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800ecb0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800ecb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecb4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ecb8:	d055      	beq.n	800ed66 <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 800ecba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecbc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ecc0:	f200 8096 	bhi.w	800edf0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 800ecc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecc6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ecca:	f000 8084 	beq.w	800edd6 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 800ecce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecd0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ecd4:	f200 808c 	bhi.w	800edf0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 800ecd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ecde:	d030      	beq.n	800ed42 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 800ece0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ece2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ece6:	f200 8083 	bhi.w	800edf0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 800ecea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d004      	beq.n	800ecfa <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 800ecf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ecf6:	d012      	beq.n	800ed1e <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 800ecf8:	e07a      	b.n	800edf0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ecfa:	4b38      	ldr	r3, [pc, #224]	; (800eddc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ed02:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ed06:	d107      	bne.n	800ed18 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ed08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ed0c:	4618      	mov	r0, r3
 800ed0e:	f000 fd71 	bl	800f7f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ed12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed14:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ed16:	e2a0      	b.n	800f25a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800ed18:	2300      	movs	r3, #0
 800ed1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ed1c:	e29d      	b.n	800f25a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ed1e:	4b2f      	ldr	r3, [pc, #188]	; (800eddc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ed26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ed2a:	d107      	bne.n	800ed3c <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ed2c:	f107 0318 	add.w	r3, r7, #24
 800ed30:	4618      	mov	r0, r3
 800ed32:	f000 fab7 	bl	800f2a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ed36:	69bb      	ldr	r3, [r7, #24]
 800ed38:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ed3a:	e28e      	b.n	800f25a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800ed3c:	2300      	movs	r3, #0
 800ed3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ed40:	e28b      	b.n	800f25a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ed42:	4b26      	ldr	r3, [pc, #152]	; (800eddc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ed4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ed4e:	d107      	bne.n	800ed60 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ed50:	f107 030c 	add.w	r3, r7, #12
 800ed54:	4618      	mov	r0, r3
 800ed56:	f000 fbf9 	bl	800f54c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ed5a:	68fb      	ldr	r3, [r7, #12]
 800ed5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ed5e:	e27c      	b.n	800f25a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800ed60:	2300      	movs	r3, #0
 800ed62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ed64:	e279      	b.n	800f25a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ed66:	4b1d      	ldr	r3, [pc, #116]	; (800eddc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800ed68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ed6a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ed6e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ed70:	4b1a      	ldr	r3, [pc, #104]	; (800eddc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	f003 0304 	and.w	r3, r3, #4
 800ed78:	2b04      	cmp	r3, #4
 800ed7a:	d10c      	bne.n	800ed96 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 800ed7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d109      	bne.n	800ed96 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ed82:	4b16      	ldr	r3, [pc, #88]	; (800eddc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	08db      	lsrs	r3, r3, #3
 800ed88:	f003 0303 	and.w	r3, r3, #3
 800ed8c:	4a14      	ldr	r2, [pc, #80]	; (800ede0 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 800ed8e:	fa22 f303 	lsr.w	r3, r2, r3
 800ed92:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ed94:	e01e      	b.n	800edd4 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ed96:	4b11      	ldr	r3, [pc, #68]	; (800eddc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ed9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800eda2:	d106      	bne.n	800edb2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800eda4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eda6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800edaa:	d102      	bne.n	800edb2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800edac:	4b0d      	ldr	r3, [pc, #52]	; (800ede4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 800edae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800edb0:	e010      	b.n	800edd4 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800edb2:	4b0a      	ldr	r3, [pc, #40]	; (800eddc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800edba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800edbe:	d106      	bne.n	800edce <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800edc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800edc2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800edc6:	d102      	bne.n	800edce <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800edc8:	4b07      	ldr	r3, [pc, #28]	; (800ede8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800edca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800edcc:	e002      	b.n	800edd4 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800edce:	2300      	movs	r3, #0
 800edd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800edd2:	e242      	b.n	800f25a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800edd4:	e241      	b.n	800f25a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800edd6:	4b05      	ldr	r3, [pc, #20]	; (800edec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800edd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800edda:	e23e      	b.n	800f25a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800eddc:	58024400 	.word	0x58024400
 800ede0:	03d09000 	.word	0x03d09000
 800ede4:	003d0900 	.word	0x003d0900
 800ede8:	016e3600 	.word	0x016e3600
 800edec:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800edf0:	2300      	movs	r3, #0
 800edf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800edf4:	e231      	b.n	800f25a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800edf6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800edfa:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800edfe:	430b      	orrs	r3, r1
 800ee00:	f040 8085 	bne.w	800ef0e <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800ee04:	4b9c      	ldr	r3, [pc, #624]	; (800f078 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ee06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ee08:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800ee0c:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800ee0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ee14:	d06b      	beq.n	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 800ee16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ee1c:	d874      	bhi.n	800ef08 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800ee1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee20:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ee24:	d056      	beq.n	800eed4 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 800ee26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee28:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ee2c:	d86c      	bhi.n	800ef08 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800ee2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee30:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ee34:	d03b      	beq.n	800eeae <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 800ee36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee38:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ee3c:	d864      	bhi.n	800ef08 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800ee3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ee44:	d021      	beq.n	800ee8a <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 800ee46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ee4c:	d85c      	bhi.n	800ef08 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800ee4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d004      	beq.n	800ee5e <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 800ee54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ee5a:	d004      	beq.n	800ee66 <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 800ee5c:	e054      	b.n	800ef08 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800ee5e:	f7fe fb07 	bl	800d470 <HAL_RCC_GetPCLK1Freq>
 800ee62:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ee64:	e1f9      	b.n	800f25a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ee66:	4b84      	ldr	r3, [pc, #528]	; (800f078 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ee6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ee72:	d107      	bne.n	800ee84 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ee74:	f107 0318 	add.w	r3, r7, #24
 800ee78:	4618      	mov	r0, r3
 800ee7a:	f000 fa13 	bl	800f2a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ee7e:	69fb      	ldr	r3, [r7, #28]
 800ee80:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ee82:	e1ea      	b.n	800f25a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800ee84:	2300      	movs	r3, #0
 800ee86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ee88:	e1e7      	b.n	800f25a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ee8a:	4b7b      	ldr	r3, [pc, #492]	; (800f078 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ee92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ee96:	d107      	bne.n	800eea8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ee98:	f107 030c 	add.w	r3, r7, #12
 800ee9c:	4618      	mov	r0, r3
 800ee9e:	f000 fb55 	bl	800f54c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800eea2:	693b      	ldr	r3, [r7, #16]
 800eea4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800eea6:	e1d8      	b.n	800f25a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800eea8:	2300      	movs	r3, #0
 800eeaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eeac:	e1d5      	b.n	800f25a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800eeae:	4b72      	ldr	r3, [pc, #456]	; (800f078 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	f003 0304 	and.w	r3, r3, #4
 800eeb6:	2b04      	cmp	r3, #4
 800eeb8:	d109      	bne.n	800eece <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800eeba:	4b6f      	ldr	r3, [pc, #444]	; (800f078 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	08db      	lsrs	r3, r3, #3
 800eec0:	f003 0303 	and.w	r3, r3, #3
 800eec4:	4a6d      	ldr	r2, [pc, #436]	; (800f07c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800eec6:	fa22 f303 	lsr.w	r3, r2, r3
 800eeca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800eecc:	e1c5      	b.n	800f25a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800eece:	2300      	movs	r3, #0
 800eed0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eed2:	e1c2      	b.n	800f25a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800eed4:	4b68      	ldr	r3, [pc, #416]	; (800f078 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800eedc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800eee0:	d102      	bne.n	800eee8 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
 800eee2:	4b67      	ldr	r3, [pc, #412]	; (800f080 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800eee4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800eee6:	e1b8      	b.n	800f25a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800eee8:	2300      	movs	r3, #0
 800eeea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eeec:	e1b5      	b.n	800f25a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800eeee:	4b62      	ldr	r3, [pc, #392]	; (800f078 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800eef6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800eefa:	d102      	bne.n	800ef02 <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
 800eefc:	4b61      	ldr	r3, [pc, #388]	; (800f084 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 800eefe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ef00:	e1ab      	b.n	800f25a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800ef02:	2300      	movs	r3, #0
 800ef04:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ef06:	e1a8      	b.n	800f25a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 800ef08:	2300      	movs	r3, #0
 800ef0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ef0c:	e1a5      	b.n	800f25a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800ef0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ef12:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800ef16:	430b      	orrs	r3, r1
 800ef18:	d173      	bne.n	800f002 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800ef1a:	4b57      	ldr	r3, [pc, #348]	; (800f078 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ef1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ef1e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800ef22:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800ef24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef26:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ef2a:	d02f      	beq.n	800ef8c <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 800ef2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ef32:	d863      	bhi.n	800effc <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 800ef34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d004      	beq.n	800ef44 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800ef3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ef40:	d012      	beq.n	800ef68 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 800ef42:	e05b      	b.n	800effc <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ef44:	4b4c      	ldr	r3, [pc, #304]	; (800f078 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ef4c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ef50:	d107      	bne.n	800ef62 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ef52:	f107 0318 	add.w	r3, r7, #24
 800ef56:	4618      	mov	r0, r3
 800ef58:	f000 f9a4 	bl	800f2a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ef5c:	69bb      	ldr	r3, [r7, #24]
 800ef5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ef60:	e17b      	b.n	800f25a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800ef62:	2300      	movs	r3, #0
 800ef64:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ef66:	e178      	b.n	800f25a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ef68:	4b43      	ldr	r3, [pc, #268]	; (800f078 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ef70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ef74:	d107      	bne.n	800ef86 <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ef76:	f107 030c 	add.w	r3, r7, #12
 800ef7a:	4618      	mov	r0, r3
 800ef7c:	f000 fae6 	bl	800f54c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800ef80:	697b      	ldr	r3, [r7, #20]
 800ef82:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ef84:	e169      	b.n	800f25a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800ef86:	2300      	movs	r3, #0
 800ef88:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ef8a:	e166      	b.n	800f25a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ef8c:	4b3a      	ldr	r3, [pc, #232]	; (800f078 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ef8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ef90:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ef94:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ef96:	4b38      	ldr	r3, [pc, #224]	; (800f078 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	f003 0304 	and.w	r3, r3, #4
 800ef9e:	2b04      	cmp	r3, #4
 800efa0:	d10c      	bne.n	800efbc <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 800efa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d109      	bne.n	800efbc <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800efa8:	4b33      	ldr	r3, [pc, #204]	; (800f078 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	08db      	lsrs	r3, r3, #3
 800efae:	f003 0303 	and.w	r3, r3, #3
 800efb2:	4a32      	ldr	r2, [pc, #200]	; (800f07c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800efb4:	fa22 f303 	lsr.w	r3, r2, r3
 800efb8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800efba:	e01e      	b.n	800effa <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800efbc:	4b2e      	ldr	r3, [pc, #184]	; (800f078 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800efc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800efc8:	d106      	bne.n	800efd8 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 800efca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800efcc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800efd0:	d102      	bne.n	800efd8 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800efd2:	4b2b      	ldr	r3, [pc, #172]	; (800f080 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800efd4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800efd6:	e010      	b.n	800effa <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800efd8:	4b27      	ldr	r3, [pc, #156]	; (800f078 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800efe0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800efe4:	d106      	bne.n	800eff4 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 800efe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800efe8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800efec:	d102      	bne.n	800eff4 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800efee:	4b25      	ldr	r3, [pc, #148]	; (800f084 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 800eff0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800eff2:	e002      	b.n	800effa <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800eff4:	2300      	movs	r3, #0
 800eff6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800eff8:	e12f      	b.n	800f25a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800effa:	e12e      	b.n	800f25a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800effc:	2300      	movs	r3, #0
 800effe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f000:	e12b      	b.n	800f25a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800f002:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f006:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800f00a:	430b      	orrs	r3, r1
 800f00c:	d13c      	bne.n	800f088 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800f00e:	4b1a      	ldr	r3, [pc, #104]	; (800f078 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800f010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f012:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f016:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800f018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d004      	beq.n	800f028 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 800f01e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f020:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f024:	d012      	beq.n	800f04c <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 800f026:	e023      	b.n	800f070 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f028:	4b13      	ldr	r3, [pc, #76]	; (800f078 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f030:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f034:	d107      	bne.n	800f046 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f036:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f03a:	4618      	mov	r0, r3
 800f03c:	f000 fbda 	bl	800f7f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f042:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f044:	e109      	b.n	800f25a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800f046:	2300      	movs	r3, #0
 800f048:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f04a:	e106      	b.n	800f25a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f04c:	4b0a      	ldr	r3, [pc, #40]	; (800f078 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f054:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f058:	d107      	bne.n	800f06a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f05a:	f107 0318 	add.w	r3, r7, #24
 800f05e:	4618      	mov	r0, r3
 800f060:	f000 f920 	bl	800f2a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800f064:	6a3b      	ldr	r3, [r7, #32]
 800f066:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f068:	e0f7      	b.n	800f25a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800f06a:	2300      	movs	r3, #0
 800f06c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f06e:	e0f4      	b.n	800f25a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800f070:	2300      	movs	r3, #0
 800f072:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f074:	e0f1      	b.n	800f25a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800f076:	bf00      	nop
 800f078:	58024400 	.word	0x58024400
 800f07c:	03d09000 	.word	0x03d09000
 800f080:	003d0900 	.word	0x003d0900
 800f084:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800f088:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f08c:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800f090:	430b      	orrs	r3, r1
 800f092:	f040 8091 	bne.w	800f1b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800f096:	4b73      	ldr	r3, [pc, #460]	; (800f264 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800f098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f09a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800f09e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800f0a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0a2:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800f0a6:	f000 8081 	beq.w	800f1ac <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800f0aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0ac:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800f0b0:	d87f      	bhi.n	800f1b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800f0b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f0b8:	d06b      	beq.n	800f192 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 800f0ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f0c0:	d877      	bhi.n	800f1b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800f0c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f0c8:	d056      	beq.n	800f178 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 800f0ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f0d0:	d86f      	bhi.n	800f1b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800f0d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0d4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f0d8:	d03b      	beq.n	800f152 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 800f0da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0dc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f0e0:	d867      	bhi.n	800f1b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800f0e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f0e8:	d021      	beq.n	800f12e <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800f0ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f0f0:	d85f      	bhi.n	800f1b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800f0f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d004      	beq.n	800f102 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800f0f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f0fe:	d004      	beq.n	800f10a <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 800f100:	e057      	b.n	800f1b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800f102:	f000 f8b9 	bl	800f278 <HAL_RCCEx_GetD3PCLK1Freq>
 800f106:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f108:	e0a7      	b.n	800f25a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f10a:	4b56      	ldr	r3, [pc, #344]	; (800f264 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f112:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f116:	d107      	bne.n	800f128 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f118:	f107 0318 	add.w	r3, r7, #24
 800f11c:	4618      	mov	r0, r3
 800f11e:	f000 f8c1 	bl	800f2a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800f122:	69fb      	ldr	r3, [r7, #28]
 800f124:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f126:	e098      	b.n	800f25a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800f128:	2300      	movs	r3, #0
 800f12a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f12c:	e095      	b.n	800f25a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f12e:	4b4d      	ldr	r3, [pc, #308]	; (800f264 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f136:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f13a:	d107      	bne.n	800f14c <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f13c:	f107 030c 	add.w	r3, r7, #12
 800f140:	4618      	mov	r0, r3
 800f142:	f000 fa03 	bl	800f54c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800f146:	693b      	ldr	r3, [r7, #16]
 800f148:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f14a:	e086      	b.n	800f25a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800f14c:	2300      	movs	r3, #0
 800f14e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f150:	e083      	b.n	800f25a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800f152:	4b44      	ldr	r3, [pc, #272]	; (800f264 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	f003 0304 	and.w	r3, r3, #4
 800f15a:	2b04      	cmp	r3, #4
 800f15c:	d109      	bne.n	800f172 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f15e:	4b41      	ldr	r3, [pc, #260]	; (800f264 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	08db      	lsrs	r3, r3, #3
 800f164:	f003 0303 	and.w	r3, r3, #3
 800f168:	4a3f      	ldr	r2, [pc, #252]	; (800f268 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800f16a:	fa22 f303 	lsr.w	r3, r2, r3
 800f16e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f170:	e073      	b.n	800f25a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800f172:	2300      	movs	r3, #0
 800f174:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f176:	e070      	b.n	800f25a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800f178:	4b3a      	ldr	r3, [pc, #232]	; (800f264 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f180:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f184:	d102      	bne.n	800f18c <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
 800f186:	4b39      	ldr	r3, [pc, #228]	; (800f26c <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 800f188:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f18a:	e066      	b.n	800f25a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800f18c:	2300      	movs	r3, #0
 800f18e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f190:	e063      	b.n	800f25a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800f192:	4b34      	ldr	r3, [pc, #208]	; (800f264 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f19a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f19e:	d102      	bne.n	800f1a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
 800f1a0:	4b33      	ldr	r3, [pc, #204]	; (800f270 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 800f1a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f1a4:	e059      	b.n	800f25a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800f1a6:	2300      	movs	r3, #0
 800f1a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f1aa:	e056      	b.n	800f25a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800f1ac:	4b31      	ldr	r3, [pc, #196]	; (800f274 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 800f1ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f1b0:	e053      	b.n	800f25a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800f1b2:	2300      	movs	r3, #0
 800f1b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f1b6:	e050      	b.n	800f25a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800f1b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f1bc:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800f1c0:	430b      	orrs	r3, r1
 800f1c2:	d148      	bne.n	800f256 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800f1c4:	4b27      	ldr	r3, [pc, #156]	; (800f264 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800f1c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f1c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f1cc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800f1ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f1d4:	d02a      	beq.n	800f22c <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 800f1d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f1dc:	d838      	bhi.n	800f250 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800f1de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d004      	beq.n	800f1ee <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 800f1e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f1ea:	d00d      	beq.n	800f208 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 800f1ec:	e030      	b.n	800f250 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800f1ee:	4b1d      	ldr	r3, [pc, #116]	; (800f264 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f1f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f1fa:	d102      	bne.n	800f202 <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
 800f1fc:	4b1c      	ldr	r3, [pc, #112]	; (800f270 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 800f1fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f200:	e02b      	b.n	800f25a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800f202:	2300      	movs	r3, #0
 800f204:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f206:	e028      	b.n	800f25a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f208:	4b16      	ldr	r3, [pc, #88]	; (800f264 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f210:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f214:	d107      	bne.n	800f226 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f216:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f21a:	4618      	mov	r0, r3
 800f21c:	f000 faea 	bl	800f7f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f222:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f224:	e019      	b.n	800f25a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800f226:	2300      	movs	r3, #0
 800f228:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f22a:	e016      	b.n	800f25a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f22c:	4b0d      	ldr	r3, [pc, #52]	; (800f264 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f234:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f238:	d107      	bne.n	800f24a <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f23a:	f107 0318 	add.w	r3, r7, #24
 800f23e:	4618      	mov	r0, r3
 800f240:	f000 f830 	bl	800f2a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800f244:	69fb      	ldr	r3, [r7, #28]
 800f246:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f248:	e007      	b.n	800f25a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800f24a:	2300      	movs	r3, #0
 800f24c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f24e:	e004      	b.n	800f25a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 800f250:	2300      	movs	r3, #0
 800f252:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f254:	e001      	b.n	800f25a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
 800f256:	2300      	movs	r3, #0
 800f258:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800f25a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800f25c:	4618      	mov	r0, r3
 800f25e:	3740      	adds	r7, #64	; 0x40
 800f260:	46bd      	mov	sp, r7
 800f262:	bd80      	pop	{r7, pc}
 800f264:	58024400 	.word	0x58024400
 800f268:	03d09000 	.word	0x03d09000
 800f26c:	003d0900 	.word	0x003d0900
 800f270:	016e3600 	.word	0x016e3600
 800f274:	00bb8000 	.word	0x00bb8000

0800f278 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800f278:	b580      	push	{r7, lr}
 800f27a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800f27c:	f7fe f8c8 	bl	800d410 <HAL_RCC_GetHCLKFreq>
 800f280:	4602      	mov	r2, r0
 800f282:	4b06      	ldr	r3, [pc, #24]	; (800f29c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800f284:	6a1b      	ldr	r3, [r3, #32]
 800f286:	091b      	lsrs	r3, r3, #4
 800f288:	f003 0307 	and.w	r3, r3, #7
 800f28c:	4904      	ldr	r1, [pc, #16]	; (800f2a0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800f28e:	5ccb      	ldrb	r3, [r1, r3]
 800f290:	f003 031f 	and.w	r3, r3, #31
 800f294:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800f298:	4618      	mov	r0, r3
 800f29a:	bd80      	pop	{r7, pc}
 800f29c:	58024400 	.word	0x58024400
 800f2a0:	0802b924 	.word	0x0802b924

0800f2a4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800f2a4:	b480      	push	{r7}
 800f2a6:	b089      	sub	sp, #36	; 0x24
 800f2a8:	af00      	add	r7, sp, #0
 800f2aa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f2ac:	4ba1      	ldr	r3, [pc, #644]	; (800f534 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f2ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2b0:	f003 0303 	and.w	r3, r3, #3
 800f2b4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800f2b6:	4b9f      	ldr	r3, [pc, #636]	; (800f534 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f2b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2ba:	0b1b      	lsrs	r3, r3, #12
 800f2bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f2c0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800f2c2:	4b9c      	ldr	r3, [pc, #624]	; (800f534 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f2c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2c6:	091b      	lsrs	r3, r3, #4
 800f2c8:	f003 0301 	and.w	r3, r3, #1
 800f2cc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800f2ce:	4b99      	ldr	r3, [pc, #612]	; (800f534 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f2d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f2d2:	08db      	lsrs	r3, r3, #3
 800f2d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f2d8:	693a      	ldr	r2, [r7, #16]
 800f2da:	fb02 f303 	mul.w	r3, r2, r3
 800f2de:	ee07 3a90 	vmov	s15, r3
 800f2e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f2e6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800f2ea:	697b      	ldr	r3, [r7, #20]
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	f000 8111 	beq.w	800f514 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800f2f2:	69bb      	ldr	r3, [r7, #24]
 800f2f4:	2b02      	cmp	r3, #2
 800f2f6:	f000 8083 	beq.w	800f400 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800f2fa:	69bb      	ldr	r3, [r7, #24]
 800f2fc:	2b02      	cmp	r3, #2
 800f2fe:	f200 80a1 	bhi.w	800f444 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800f302:	69bb      	ldr	r3, [r7, #24]
 800f304:	2b00      	cmp	r3, #0
 800f306:	d003      	beq.n	800f310 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800f308:	69bb      	ldr	r3, [r7, #24]
 800f30a:	2b01      	cmp	r3, #1
 800f30c:	d056      	beq.n	800f3bc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800f30e:	e099      	b.n	800f444 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f310:	4b88      	ldr	r3, [pc, #544]	; (800f534 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	f003 0320 	and.w	r3, r3, #32
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d02d      	beq.n	800f378 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f31c:	4b85      	ldr	r3, [pc, #532]	; (800f534 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	08db      	lsrs	r3, r3, #3
 800f322:	f003 0303 	and.w	r3, r3, #3
 800f326:	4a84      	ldr	r2, [pc, #528]	; (800f538 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800f328:	fa22 f303 	lsr.w	r3, r2, r3
 800f32c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f32e:	68bb      	ldr	r3, [r7, #8]
 800f330:	ee07 3a90 	vmov	s15, r3
 800f334:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f338:	697b      	ldr	r3, [r7, #20]
 800f33a:	ee07 3a90 	vmov	s15, r3
 800f33e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f342:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f346:	4b7b      	ldr	r3, [pc, #492]	; (800f534 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f34a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f34e:	ee07 3a90 	vmov	s15, r3
 800f352:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f356:	ed97 6a03 	vldr	s12, [r7, #12]
 800f35a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800f53c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f35e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f362:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f366:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f36a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f36e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f372:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800f376:	e087      	b.n	800f488 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f378:	697b      	ldr	r3, [r7, #20]
 800f37a:	ee07 3a90 	vmov	s15, r3
 800f37e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f382:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800f540 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800f386:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f38a:	4b6a      	ldr	r3, [pc, #424]	; (800f534 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f38c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f38e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f392:	ee07 3a90 	vmov	s15, r3
 800f396:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f39a:	ed97 6a03 	vldr	s12, [r7, #12]
 800f39e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800f53c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f3a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f3a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f3aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f3ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f3b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f3b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f3ba:	e065      	b.n	800f488 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f3bc:	697b      	ldr	r3, [r7, #20]
 800f3be:	ee07 3a90 	vmov	s15, r3
 800f3c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f3c6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800f544 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800f3ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f3ce:	4b59      	ldr	r3, [pc, #356]	; (800f534 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f3d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f3d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f3d6:	ee07 3a90 	vmov	s15, r3
 800f3da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f3de:	ed97 6a03 	vldr	s12, [r7, #12]
 800f3e2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800f53c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f3e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f3ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f3ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f3f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f3f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f3fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f3fe:	e043      	b.n	800f488 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f400:	697b      	ldr	r3, [r7, #20]
 800f402:	ee07 3a90 	vmov	s15, r3
 800f406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f40a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800f548 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800f40e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f412:	4b48      	ldr	r3, [pc, #288]	; (800f534 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f416:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f41a:	ee07 3a90 	vmov	s15, r3
 800f41e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f422:	ed97 6a03 	vldr	s12, [r7, #12]
 800f426:	eddf 5a45 	vldr	s11, [pc, #276]	; 800f53c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f42a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f42e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f432:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f436:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f43a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f43e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f442:	e021      	b.n	800f488 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f444:	697b      	ldr	r3, [r7, #20]
 800f446:	ee07 3a90 	vmov	s15, r3
 800f44a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f44e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800f544 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800f452:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f456:	4b37      	ldr	r3, [pc, #220]	; (800f534 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f45a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f45e:	ee07 3a90 	vmov	s15, r3
 800f462:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f466:	ed97 6a03 	vldr	s12, [r7, #12]
 800f46a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800f53c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f46e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f472:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f476:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f47a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f47e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f482:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f486:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800f488:	4b2a      	ldr	r3, [pc, #168]	; (800f534 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f48a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f48c:	0a5b      	lsrs	r3, r3, #9
 800f48e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f492:	ee07 3a90 	vmov	s15, r3
 800f496:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f49a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f49e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f4a2:	edd7 6a07 	vldr	s13, [r7, #28]
 800f4a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f4aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f4ae:	ee17 2a90 	vmov	r2, s15
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800f4b6:	4b1f      	ldr	r3, [pc, #124]	; (800f534 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f4b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f4ba:	0c1b      	lsrs	r3, r3, #16
 800f4bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f4c0:	ee07 3a90 	vmov	s15, r3
 800f4c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f4c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f4cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f4d0:	edd7 6a07 	vldr	s13, [r7, #28]
 800f4d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f4d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f4dc:	ee17 2a90 	vmov	r2, s15
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800f4e4:	4b13      	ldr	r3, [pc, #76]	; (800f534 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f4e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f4e8:	0e1b      	lsrs	r3, r3, #24
 800f4ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f4ee:	ee07 3a90 	vmov	s15, r3
 800f4f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f4f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f4fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f4fe:	edd7 6a07 	vldr	s13, [r7, #28]
 800f502:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f506:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f50a:	ee17 2a90 	vmov	r2, s15
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800f512:	e008      	b.n	800f526 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	2200      	movs	r2, #0
 800f518:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	2200      	movs	r2, #0
 800f51e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	2200      	movs	r2, #0
 800f524:	609a      	str	r2, [r3, #8]
}
 800f526:	bf00      	nop
 800f528:	3724      	adds	r7, #36	; 0x24
 800f52a:	46bd      	mov	sp, r7
 800f52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f530:	4770      	bx	lr
 800f532:	bf00      	nop
 800f534:	58024400 	.word	0x58024400
 800f538:	03d09000 	.word	0x03d09000
 800f53c:	46000000 	.word	0x46000000
 800f540:	4c742400 	.word	0x4c742400
 800f544:	4a742400 	.word	0x4a742400
 800f548:	4bb71b00 	.word	0x4bb71b00

0800f54c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800f54c:	b480      	push	{r7}
 800f54e:	b089      	sub	sp, #36	; 0x24
 800f550:	af00      	add	r7, sp, #0
 800f552:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f554:	4ba1      	ldr	r3, [pc, #644]	; (800f7dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f558:	f003 0303 	and.w	r3, r3, #3
 800f55c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800f55e:	4b9f      	ldr	r3, [pc, #636]	; (800f7dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f562:	0d1b      	lsrs	r3, r3, #20
 800f564:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f568:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800f56a:	4b9c      	ldr	r3, [pc, #624]	; (800f7dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f56c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f56e:	0a1b      	lsrs	r3, r3, #8
 800f570:	f003 0301 	and.w	r3, r3, #1
 800f574:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800f576:	4b99      	ldr	r3, [pc, #612]	; (800f7dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f57a:	08db      	lsrs	r3, r3, #3
 800f57c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f580:	693a      	ldr	r2, [r7, #16]
 800f582:	fb02 f303 	mul.w	r3, r2, r3
 800f586:	ee07 3a90 	vmov	s15, r3
 800f58a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f58e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800f592:	697b      	ldr	r3, [r7, #20]
 800f594:	2b00      	cmp	r3, #0
 800f596:	f000 8111 	beq.w	800f7bc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800f59a:	69bb      	ldr	r3, [r7, #24]
 800f59c:	2b02      	cmp	r3, #2
 800f59e:	f000 8083 	beq.w	800f6a8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800f5a2:	69bb      	ldr	r3, [r7, #24]
 800f5a4:	2b02      	cmp	r3, #2
 800f5a6:	f200 80a1 	bhi.w	800f6ec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800f5aa:	69bb      	ldr	r3, [r7, #24]
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d003      	beq.n	800f5b8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800f5b0:	69bb      	ldr	r3, [r7, #24]
 800f5b2:	2b01      	cmp	r3, #1
 800f5b4:	d056      	beq.n	800f664 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800f5b6:	e099      	b.n	800f6ec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f5b8:	4b88      	ldr	r3, [pc, #544]	; (800f7dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	f003 0320 	and.w	r3, r3, #32
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d02d      	beq.n	800f620 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f5c4:	4b85      	ldr	r3, [pc, #532]	; (800f7dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	08db      	lsrs	r3, r3, #3
 800f5ca:	f003 0303 	and.w	r3, r3, #3
 800f5ce:	4a84      	ldr	r2, [pc, #528]	; (800f7e0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800f5d0:	fa22 f303 	lsr.w	r3, r2, r3
 800f5d4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f5d6:	68bb      	ldr	r3, [r7, #8]
 800f5d8:	ee07 3a90 	vmov	s15, r3
 800f5dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f5e0:	697b      	ldr	r3, [r7, #20]
 800f5e2:	ee07 3a90 	vmov	s15, r3
 800f5e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f5ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f5ee:	4b7b      	ldr	r3, [pc, #492]	; (800f7dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f5f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f5f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f5f6:	ee07 3a90 	vmov	s15, r3
 800f5fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f5fe:	ed97 6a03 	vldr	s12, [r7, #12]
 800f602:	eddf 5a78 	vldr	s11, [pc, #480]	; 800f7e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f606:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f60a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f60e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f612:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f616:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f61a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800f61e:	e087      	b.n	800f730 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f620:	697b      	ldr	r3, [r7, #20]
 800f622:	ee07 3a90 	vmov	s15, r3
 800f626:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f62a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800f7e8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800f62e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f632:	4b6a      	ldr	r3, [pc, #424]	; (800f7dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f636:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f63a:	ee07 3a90 	vmov	s15, r3
 800f63e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f642:	ed97 6a03 	vldr	s12, [r7, #12]
 800f646:	eddf 5a67 	vldr	s11, [pc, #412]	; 800f7e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f64a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f64e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f652:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f656:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f65a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f65e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f662:	e065      	b.n	800f730 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f664:	697b      	ldr	r3, [r7, #20]
 800f666:	ee07 3a90 	vmov	s15, r3
 800f66a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f66e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800f7ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800f672:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f676:	4b59      	ldr	r3, [pc, #356]	; (800f7dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f67a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f67e:	ee07 3a90 	vmov	s15, r3
 800f682:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f686:	ed97 6a03 	vldr	s12, [r7, #12]
 800f68a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800f7e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f68e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f692:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f696:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f69a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f69e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f6a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f6a6:	e043      	b.n	800f730 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f6a8:	697b      	ldr	r3, [r7, #20]
 800f6aa:	ee07 3a90 	vmov	s15, r3
 800f6ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f6b2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800f7f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800f6b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f6ba:	4b48      	ldr	r3, [pc, #288]	; (800f7dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f6bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f6be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f6c2:	ee07 3a90 	vmov	s15, r3
 800f6c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f6ca:	ed97 6a03 	vldr	s12, [r7, #12]
 800f6ce:	eddf 5a45 	vldr	s11, [pc, #276]	; 800f7e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f6d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f6d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f6da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f6de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f6e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f6e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f6ea:	e021      	b.n	800f730 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f6ec:	697b      	ldr	r3, [r7, #20]
 800f6ee:	ee07 3a90 	vmov	s15, r3
 800f6f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f6f6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800f7ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800f6fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f6fe:	4b37      	ldr	r3, [pc, #220]	; (800f7dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f702:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f706:	ee07 3a90 	vmov	s15, r3
 800f70a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f70e:	ed97 6a03 	vldr	s12, [r7, #12]
 800f712:	eddf 5a34 	vldr	s11, [pc, #208]	; 800f7e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f716:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f71a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f71e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f722:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f726:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f72a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f72e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800f730:	4b2a      	ldr	r3, [pc, #168]	; (800f7dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f734:	0a5b      	lsrs	r3, r3, #9
 800f736:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f73a:	ee07 3a90 	vmov	s15, r3
 800f73e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f742:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f746:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f74a:	edd7 6a07 	vldr	s13, [r7, #28]
 800f74e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f752:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f756:	ee17 2a90 	vmov	r2, s15
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800f75e:	4b1f      	ldr	r3, [pc, #124]	; (800f7dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f762:	0c1b      	lsrs	r3, r3, #16
 800f764:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f768:	ee07 3a90 	vmov	s15, r3
 800f76c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f770:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f774:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f778:	edd7 6a07 	vldr	s13, [r7, #28]
 800f77c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f780:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f784:	ee17 2a90 	vmov	r2, s15
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800f78c:	4b13      	ldr	r3, [pc, #76]	; (800f7dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f78e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f790:	0e1b      	lsrs	r3, r3, #24
 800f792:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f796:	ee07 3a90 	vmov	s15, r3
 800f79a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f79e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f7a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f7a6:	edd7 6a07 	vldr	s13, [r7, #28]
 800f7aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f7ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f7b2:	ee17 2a90 	vmov	r2, s15
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800f7ba:	e008      	b.n	800f7ce <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	2200      	movs	r2, #0
 800f7c0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	2200      	movs	r2, #0
 800f7c6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	2200      	movs	r2, #0
 800f7cc:	609a      	str	r2, [r3, #8]
}
 800f7ce:	bf00      	nop
 800f7d0:	3724      	adds	r7, #36	; 0x24
 800f7d2:	46bd      	mov	sp, r7
 800f7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7d8:	4770      	bx	lr
 800f7da:	bf00      	nop
 800f7dc:	58024400 	.word	0x58024400
 800f7e0:	03d09000 	.word	0x03d09000
 800f7e4:	46000000 	.word	0x46000000
 800f7e8:	4c742400 	.word	0x4c742400
 800f7ec:	4a742400 	.word	0x4a742400
 800f7f0:	4bb71b00 	.word	0x4bb71b00

0800f7f4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800f7f4:	b480      	push	{r7}
 800f7f6:	b089      	sub	sp, #36	; 0x24
 800f7f8:	af00      	add	r7, sp, #0
 800f7fa:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f7fc:	4ba0      	ldr	r3, [pc, #640]	; (800fa80 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f7fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f800:	f003 0303 	and.w	r3, r3, #3
 800f804:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800f806:	4b9e      	ldr	r3, [pc, #632]	; (800fa80 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f80a:	091b      	lsrs	r3, r3, #4
 800f80c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f810:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800f812:	4b9b      	ldr	r3, [pc, #620]	; (800fa80 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f816:	f003 0301 	and.w	r3, r3, #1
 800f81a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800f81c:	4b98      	ldr	r3, [pc, #608]	; (800fa80 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f81e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f820:	08db      	lsrs	r3, r3, #3
 800f822:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f826:	693a      	ldr	r2, [r7, #16]
 800f828:	fb02 f303 	mul.w	r3, r2, r3
 800f82c:	ee07 3a90 	vmov	s15, r3
 800f830:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f834:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800f838:	697b      	ldr	r3, [r7, #20]
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	f000 8111 	beq.w	800fa62 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800f840:	69bb      	ldr	r3, [r7, #24]
 800f842:	2b02      	cmp	r3, #2
 800f844:	f000 8083 	beq.w	800f94e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800f848:	69bb      	ldr	r3, [r7, #24]
 800f84a:	2b02      	cmp	r3, #2
 800f84c:	f200 80a1 	bhi.w	800f992 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800f850:	69bb      	ldr	r3, [r7, #24]
 800f852:	2b00      	cmp	r3, #0
 800f854:	d003      	beq.n	800f85e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800f856:	69bb      	ldr	r3, [r7, #24]
 800f858:	2b01      	cmp	r3, #1
 800f85a:	d056      	beq.n	800f90a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800f85c:	e099      	b.n	800f992 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f85e:	4b88      	ldr	r3, [pc, #544]	; (800fa80 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f860:	681b      	ldr	r3, [r3, #0]
 800f862:	f003 0320 	and.w	r3, r3, #32
 800f866:	2b00      	cmp	r3, #0
 800f868:	d02d      	beq.n	800f8c6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f86a:	4b85      	ldr	r3, [pc, #532]	; (800fa80 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	08db      	lsrs	r3, r3, #3
 800f870:	f003 0303 	and.w	r3, r3, #3
 800f874:	4a83      	ldr	r2, [pc, #524]	; (800fa84 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800f876:	fa22 f303 	lsr.w	r3, r2, r3
 800f87a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f87c:	68bb      	ldr	r3, [r7, #8]
 800f87e:	ee07 3a90 	vmov	s15, r3
 800f882:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f886:	697b      	ldr	r3, [r7, #20]
 800f888:	ee07 3a90 	vmov	s15, r3
 800f88c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f890:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f894:	4b7a      	ldr	r3, [pc, #488]	; (800fa80 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f898:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f89c:	ee07 3a90 	vmov	s15, r3
 800f8a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f8a4:	ed97 6a03 	vldr	s12, [r7, #12]
 800f8a8:	eddf 5a77 	vldr	s11, [pc, #476]	; 800fa88 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800f8ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f8b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f8b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f8b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f8bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f8c0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800f8c4:	e087      	b.n	800f9d6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f8c6:	697b      	ldr	r3, [r7, #20]
 800f8c8:	ee07 3a90 	vmov	s15, r3
 800f8cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f8d0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800fa8c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800f8d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f8d8:	4b69      	ldr	r3, [pc, #420]	; (800fa80 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f8da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f8dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f8e0:	ee07 3a90 	vmov	s15, r3
 800f8e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f8e8:	ed97 6a03 	vldr	s12, [r7, #12]
 800f8ec:	eddf 5a66 	vldr	s11, [pc, #408]	; 800fa88 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800f8f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f8f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f8f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f8fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f900:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f904:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f908:	e065      	b.n	800f9d6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f90a:	697b      	ldr	r3, [r7, #20]
 800f90c:	ee07 3a90 	vmov	s15, r3
 800f910:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f914:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800fa90 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800f918:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f91c:	4b58      	ldr	r3, [pc, #352]	; (800fa80 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f91e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f920:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f924:	ee07 3a90 	vmov	s15, r3
 800f928:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f92c:	ed97 6a03 	vldr	s12, [r7, #12]
 800f930:	eddf 5a55 	vldr	s11, [pc, #340]	; 800fa88 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800f934:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f938:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f93c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f940:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f944:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f948:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f94c:	e043      	b.n	800f9d6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f94e:	697b      	ldr	r3, [r7, #20]
 800f950:	ee07 3a90 	vmov	s15, r3
 800f954:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f958:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800fa94 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800f95c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f960:	4b47      	ldr	r3, [pc, #284]	; (800fa80 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f964:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f968:	ee07 3a90 	vmov	s15, r3
 800f96c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f970:	ed97 6a03 	vldr	s12, [r7, #12]
 800f974:	eddf 5a44 	vldr	s11, [pc, #272]	; 800fa88 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800f978:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f97c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f980:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f984:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f988:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f98c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f990:	e021      	b.n	800f9d6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f992:	697b      	ldr	r3, [r7, #20]
 800f994:	ee07 3a90 	vmov	s15, r3
 800f998:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f99c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800fa8c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800f9a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f9a4:	4b36      	ldr	r3, [pc, #216]	; (800fa80 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f9a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f9a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f9ac:	ee07 3a90 	vmov	s15, r3
 800f9b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f9b4:	ed97 6a03 	vldr	s12, [r7, #12]
 800f9b8:	eddf 5a33 	vldr	s11, [pc, #204]	; 800fa88 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800f9bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f9c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f9c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f9c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f9cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f9d0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f9d4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800f9d6:	4b2a      	ldr	r3, [pc, #168]	; (800fa80 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f9d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f9da:	0a5b      	lsrs	r3, r3, #9
 800f9dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f9e0:	ee07 3a90 	vmov	s15, r3
 800f9e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f9e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f9ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f9f0:	edd7 6a07 	vldr	s13, [r7, #28]
 800f9f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f9f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f9fc:	ee17 2a90 	vmov	r2, s15
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800fa04:	4b1e      	ldr	r3, [pc, #120]	; (800fa80 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fa06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa08:	0c1b      	lsrs	r3, r3, #16
 800fa0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fa0e:	ee07 3a90 	vmov	s15, r3
 800fa12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fa16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fa1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fa1e:	edd7 6a07 	vldr	s13, [r7, #28]
 800fa22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fa26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fa2a:	ee17 2a90 	vmov	r2, s15
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800fa32:	4b13      	ldr	r3, [pc, #76]	; (800fa80 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fa34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa36:	0e1b      	lsrs	r3, r3, #24
 800fa38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fa3c:	ee07 3a90 	vmov	s15, r3
 800fa40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fa44:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fa48:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fa4c:	edd7 6a07 	vldr	s13, [r7, #28]
 800fa50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fa54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fa58:	ee17 2a90 	vmov	r2, s15
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800fa60:	e008      	b.n	800fa74 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	2200      	movs	r2, #0
 800fa66:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	2200      	movs	r2, #0
 800fa6c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	2200      	movs	r2, #0
 800fa72:	609a      	str	r2, [r3, #8]
}
 800fa74:	bf00      	nop
 800fa76:	3724      	adds	r7, #36	; 0x24
 800fa78:	46bd      	mov	sp, r7
 800fa7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa7e:	4770      	bx	lr
 800fa80:	58024400 	.word	0x58024400
 800fa84:	03d09000 	.word	0x03d09000
 800fa88:	46000000 	.word	0x46000000
 800fa8c:	4c742400 	.word	0x4c742400
 800fa90:	4a742400 	.word	0x4a742400
 800fa94:	4bb71b00 	.word	0x4bb71b00

0800fa98 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800fa98:	b580      	push	{r7, lr}
 800fa9a:	b084      	sub	sp, #16
 800fa9c:	af00      	add	r7, sp, #0
 800fa9e:	6078      	str	r0, [r7, #4]
 800faa0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800faa2:	2300      	movs	r3, #0
 800faa4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800faa6:	4b53      	ldr	r3, [pc, #332]	; (800fbf4 <RCCEx_PLL2_Config+0x15c>)
 800faa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800faaa:	f003 0303 	and.w	r3, r3, #3
 800faae:	2b03      	cmp	r3, #3
 800fab0:	d101      	bne.n	800fab6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800fab2:	2301      	movs	r3, #1
 800fab4:	e099      	b.n	800fbea <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800fab6:	4b4f      	ldr	r3, [pc, #316]	; (800fbf4 <RCCEx_PLL2_Config+0x15c>)
 800fab8:	681b      	ldr	r3, [r3, #0]
 800faba:	4a4e      	ldr	r2, [pc, #312]	; (800fbf4 <RCCEx_PLL2_Config+0x15c>)
 800fabc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800fac0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800fac2:	f7f9 fb25 	bl	8009110 <HAL_GetTick>
 800fac6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800fac8:	e008      	b.n	800fadc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800faca:	f7f9 fb21 	bl	8009110 <HAL_GetTick>
 800face:	4602      	mov	r2, r0
 800fad0:	68bb      	ldr	r3, [r7, #8]
 800fad2:	1ad3      	subs	r3, r2, r3
 800fad4:	2b02      	cmp	r3, #2
 800fad6:	d901      	bls.n	800fadc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800fad8:	2303      	movs	r3, #3
 800fada:	e086      	b.n	800fbea <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800fadc:	4b45      	ldr	r3, [pc, #276]	; (800fbf4 <RCCEx_PLL2_Config+0x15c>)
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d1f0      	bne.n	800faca <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800fae8:	4b42      	ldr	r3, [pc, #264]	; (800fbf4 <RCCEx_PLL2_Config+0x15c>)
 800faea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800faec:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	681b      	ldr	r3, [r3, #0]
 800faf4:	031b      	lsls	r3, r3, #12
 800faf6:	493f      	ldr	r1, [pc, #252]	; (800fbf4 <RCCEx_PLL2_Config+0x15c>)
 800faf8:	4313      	orrs	r3, r2
 800fafa:	628b      	str	r3, [r1, #40]	; 0x28
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	685b      	ldr	r3, [r3, #4]
 800fb00:	3b01      	subs	r3, #1
 800fb02:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	689b      	ldr	r3, [r3, #8]
 800fb0a:	3b01      	subs	r3, #1
 800fb0c:	025b      	lsls	r3, r3, #9
 800fb0e:	b29b      	uxth	r3, r3
 800fb10:	431a      	orrs	r2, r3
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	68db      	ldr	r3, [r3, #12]
 800fb16:	3b01      	subs	r3, #1
 800fb18:	041b      	lsls	r3, r3, #16
 800fb1a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800fb1e:	431a      	orrs	r2, r3
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	691b      	ldr	r3, [r3, #16]
 800fb24:	3b01      	subs	r3, #1
 800fb26:	061b      	lsls	r3, r3, #24
 800fb28:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800fb2c:	4931      	ldr	r1, [pc, #196]	; (800fbf4 <RCCEx_PLL2_Config+0x15c>)
 800fb2e:	4313      	orrs	r3, r2
 800fb30:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800fb32:	4b30      	ldr	r3, [pc, #192]	; (800fbf4 <RCCEx_PLL2_Config+0x15c>)
 800fb34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb36:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	695b      	ldr	r3, [r3, #20]
 800fb3e:	492d      	ldr	r1, [pc, #180]	; (800fbf4 <RCCEx_PLL2_Config+0x15c>)
 800fb40:	4313      	orrs	r3, r2
 800fb42:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800fb44:	4b2b      	ldr	r3, [pc, #172]	; (800fbf4 <RCCEx_PLL2_Config+0x15c>)
 800fb46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb48:	f023 0220 	bic.w	r2, r3, #32
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	699b      	ldr	r3, [r3, #24]
 800fb50:	4928      	ldr	r1, [pc, #160]	; (800fbf4 <RCCEx_PLL2_Config+0x15c>)
 800fb52:	4313      	orrs	r3, r2
 800fb54:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800fb56:	4b27      	ldr	r3, [pc, #156]	; (800fbf4 <RCCEx_PLL2_Config+0x15c>)
 800fb58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb5a:	4a26      	ldr	r2, [pc, #152]	; (800fbf4 <RCCEx_PLL2_Config+0x15c>)
 800fb5c:	f023 0310 	bic.w	r3, r3, #16
 800fb60:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800fb62:	4b24      	ldr	r3, [pc, #144]	; (800fbf4 <RCCEx_PLL2_Config+0x15c>)
 800fb64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fb66:	4b24      	ldr	r3, [pc, #144]	; (800fbf8 <RCCEx_PLL2_Config+0x160>)
 800fb68:	4013      	ands	r3, r2
 800fb6a:	687a      	ldr	r2, [r7, #4]
 800fb6c:	69d2      	ldr	r2, [r2, #28]
 800fb6e:	00d2      	lsls	r2, r2, #3
 800fb70:	4920      	ldr	r1, [pc, #128]	; (800fbf4 <RCCEx_PLL2_Config+0x15c>)
 800fb72:	4313      	orrs	r3, r2
 800fb74:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800fb76:	4b1f      	ldr	r3, [pc, #124]	; (800fbf4 <RCCEx_PLL2_Config+0x15c>)
 800fb78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb7a:	4a1e      	ldr	r2, [pc, #120]	; (800fbf4 <RCCEx_PLL2_Config+0x15c>)
 800fb7c:	f043 0310 	orr.w	r3, r3, #16
 800fb80:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800fb82:	683b      	ldr	r3, [r7, #0]
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d106      	bne.n	800fb96 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800fb88:	4b1a      	ldr	r3, [pc, #104]	; (800fbf4 <RCCEx_PLL2_Config+0x15c>)
 800fb8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb8c:	4a19      	ldr	r2, [pc, #100]	; (800fbf4 <RCCEx_PLL2_Config+0x15c>)
 800fb8e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fb92:	62d3      	str	r3, [r2, #44]	; 0x2c
 800fb94:	e00f      	b.n	800fbb6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800fb96:	683b      	ldr	r3, [r7, #0]
 800fb98:	2b01      	cmp	r3, #1
 800fb9a:	d106      	bne.n	800fbaa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800fb9c:	4b15      	ldr	r3, [pc, #84]	; (800fbf4 <RCCEx_PLL2_Config+0x15c>)
 800fb9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fba0:	4a14      	ldr	r2, [pc, #80]	; (800fbf4 <RCCEx_PLL2_Config+0x15c>)
 800fba2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fba6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800fba8:	e005      	b.n	800fbb6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800fbaa:	4b12      	ldr	r3, [pc, #72]	; (800fbf4 <RCCEx_PLL2_Config+0x15c>)
 800fbac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbae:	4a11      	ldr	r2, [pc, #68]	; (800fbf4 <RCCEx_PLL2_Config+0x15c>)
 800fbb0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800fbb4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800fbb6:	4b0f      	ldr	r3, [pc, #60]	; (800fbf4 <RCCEx_PLL2_Config+0x15c>)
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	4a0e      	ldr	r2, [pc, #56]	; (800fbf4 <RCCEx_PLL2_Config+0x15c>)
 800fbbc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800fbc0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800fbc2:	f7f9 faa5 	bl	8009110 <HAL_GetTick>
 800fbc6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800fbc8:	e008      	b.n	800fbdc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800fbca:	f7f9 faa1 	bl	8009110 <HAL_GetTick>
 800fbce:	4602      	mov	r2, r0
 800fbd0:	68bb      	ldr	r3, [r7, #8]
 800fbd2:	1ad3      	subs	r3, r2, r3
 800fbd4:	2b02      	cmp	r3, #2
 800fbd6:	d901      	bls.n	800fbdc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800fbd8:	2303      	movs	r3, #3
 800fbda:	e006      	b.n	800fbea <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800fbdc:	4b05      	ldr	r3, [pc, #20]	; (800fbf4 <RCCEx_PLL2_Config+0x15c>)
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	d0f0      	beq.n	800fbca <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800fbe8:	7bfb      	ldrb	r3, [r7, #15]
}
 800fbea:	4618      	mov	r0, r3
 800fbec:	3710      	adds	r7, #16
 800fbee:	46bd      	mov	sp, r7
 800fbf0:	bd80      	pop	{r7, pc}
 800fbf2:	bf00      	nop
 800fbf4:	58024400 	.word	0x58024400
 800fbf8:	ffff0007 	.word	0xffff0007

0800fbfc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800fbfc:	b580      	push	{r7, lr}
 800fbfe:	b084      	sub	sp, #16
 800fc00:	af00      	add	r7, sp, #0
 800fc02:	6078      	str	r0, [r7, #4]
 800fc04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800fc06:	2300      	movs	r3, #0
 800fc08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800fc0a:	4b53      	ldr	r3, [pc, #332]	; (800fd58 <RCCEx_PLL3_Config+0x15c>)
 800fc0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc0e:	f003 0303 	and.w	r3, r3, #3
 800fc12:	2b03      	cmp	r3, #3
 800fc14:	d101      	bne.n	800fc1a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800fc16:	2301      	movs	r3, #1
 800fc18:	e099      	b.n	800fd4e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800fc1a:	4b4f      	ldr	r3, [pc, #316]	; (800fd58 <RCCEx_PLL3_Config+0x15c>)
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	4a4e      	ldr	r2, [pc, #312]	; (800fd58 <RCCEx_PLL3_Config+0x15c>)
 800fc20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800fc24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800fc26:	f7f9 fa73 	bl	8009110 <HAL_GetTick>
 800fc2a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800fc2c:	e008      	b.n	800fc40 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800fc2e:	f7f9 fa6f 	bl	8009110 <HAL_GetTick>
 800fc32:	4602      	mov	r2, r0
 800fc34:	68bb      	ldr	r3, [r7, #8]
 800fc36:	1ad3      	subs	r3, r2, r3
 800fc38:	2b02      	cmp	r3, #2
 800fc3a:	d901      	bls.n	800fc40 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800fc3c:	2303      	movs	r3, #3
 800fc3e:	e086      	b.n	800fd4e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800fc40:	4b45      	ldr	r3, [pc, #276]	; (800fd58 <RCCEx_PLL3_Config+0x15c>)
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d1f0      	bne.n	800fc2e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800fc4c:	4b42      	ldr	r3, [pc, #264]	; (800fd58 <RCCEx_PLL3_Config+0x15c>)
 800fc4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc50:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	051b      	lsls	r3, r3, #20
 800fc5a:	493f      	ldr	r1, [pc, #252]	; (800fd58 <RCCEx_PLL3_Config+0x15c>)
 800fc5c:	4313      	orrs	r3, r2
 800fc5e:	628b      	str	r3, [r1, #40]	; 0x28
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	685b      	ldr	r3, [r3, #4]
 800fc64:	3b01      	subs	r3, #1
 800fc66:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	689b      	ldr	r3, [r3, #8]
 800fc6e:	3b01      	subs	r3, #1
 800fc70:	025b      	lsls	r3, r3, #9
 800fc72:	b29b      	uxth	r3, r3
 800fc74:	431a      	orrs	r2, r3
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	68db      	ldr	r3, [r3, #12]
 800fc7a:	3b01      	subs	r3, #1
 800fc7c:	041b      	lsls	r3, r3, #16
 800fc7e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800fc82:	431a      	orrs	r2, r3
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	691b      	ldr	r3, [r3, #16]
 800fc88:	3b01      	subs	r3, #1
 800fc8a:	061b      	lsls	r3, r3, #24
 800fc8c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800fc90:	4931      	ldr	r1, [pc, #196]	; (800fd58 <RCCEx_PLL3_Config+0x15c>)
 800fc92:	4313      	orrs	r3, r2
 800fc94:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800fc96:	4b30      	ldr	r3, [pc, #192]	; (800fd58 <RCCEx_PLL3_Config+0x15c>)
 800fc98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc9a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	695b      	ldr	r3, [r3, #20]
 800fca2:	492d      	ldr	r1, [pc, #180]	; (800fd58 <RCCEx_PLL3_Config+0x15c>)
 800fca4:	4313      	orrs	r3, r2
 800fca6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800fca8:	4b2b      	ldr	r3, [pc, #172]	; (800fd58 <RCCEx_PLL3_Config+0x15c>)
 800fcaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fcac:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	699b      	ldr	r3, [r3, #24]
 800fcb4:	4928      	ldr	r1, [pc, #160]	; (800fd58 <RCCEx_PLL3_Config+0x15c>)
 800fcb6:	4313      	orrs	r3, r2
 800fcb8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800fcba:	4b27      	ldr	r3, [pc, #156]	; (800fd58 <RCCEx_PLL3_Config+0x15c>)
 800fcbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fcbe:	4a26      	ldr	r2, [pc, #152]	; (800fd58 <RCCEx_PLL3_Config+0x15c>)
 800fcc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fcc4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800fcc6:	4b24      	ldr	r3, [pc, #144]	; (800fd58 <RCCEx_PLL3_Config+0x15c>)
 800fcc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fcca:	4b24      	ldr	r3, [pc, #144]	; (800fd5c <RCCEx_PLL3_Config+0x160>)
 800fccc:	4013      	ands	r3, r2
 800fcce:	687a      	ldr	r2, [r7, #4]
 800fcd0:	69d2      	ldr	r2, [r2, #28]
 800fcd2:	00d2      	lsls	r2, r2, #3
 800fcd4:	4920      	ldr	r1, [pc, #128]	; (800fd58 <RCCEx_PLL3_Config+0x15c>)
 800fcd6:	4313      	orrs	r3, r2
 800fcd8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800fcda:	4b1f      	ldr	r3, [pc, #124]	; (800fd58 <RCCEx_PLL3_Config+0x15c>)
 800fcdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fcde:	4a1e      	ldr	r2, [pc, #120]	; (800fd58 <RCCEx_PLL3_Config+0x15c>)
 800fce0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fce4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800fce6:	683b      	ldr	r3, [r7, #0]
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d106      	bne.n	800fcfa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800fcec:	4b1a      	ldr	r3, [pc, #104]	; (800fd58 <RCCEx_PLL3_Config+0x15c>)
 800fcee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fcf0:	4a19      	ldr	r2, [pc, #100]	; (800fd58 <RCCEx_PLL3_Config+0x15c>)
 800fcf2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800fcf6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800fcf8:	e00f      	b.n	800fd1a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800fcfa:	683b      	ldr	r3, [r7, #0]
 800fcfc:	2b01      	cmp	r3, #1
 800fcfe:	d106      	bne.n	800fd0e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800fd00:	4b15      	ldr	r3, [pc, #84]	; (800fd58 <RCCEx_PLL3_Config+0x15c>)
 800fd02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd04:	4a14      	ldr	r2, [pc, #80]	; (800fd58 <RCCEx_PLL3_Config+0x15c>)
 800fd06:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800fd0a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800fd0c:	e005      	b.n	800fd1a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800fd0e:	4b12      	ldr	r3, [pc, #72]	; (800fd58 <RCCEx_PLL3_Config+0x15c>)
 800fd10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd12:	4a11      	ldr	r2, [pc, #68]	; (800fd58 <RCCEx_PLL3_Config+0x15c>)
 800fd14:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800fd18:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800fd1a:	4b0f      	ldr	r3, [pc, #60]	; (800fd58 <RCCEx_PLL3_Config+0x15c>)
 800fd1c:	681b      	ldr	r3, [r3, #0]
 800fd1e:	4a0e      	ldr	r2, [pc, #56]	; (800fd58 <RCCEx_PLL3_Config+0x15c>)
 800fd20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fd24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800fd26:	f7f9 f9f3 	bl	8009110 <HAL_GetTick>
 800fd2a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800fd2c:	e008      	b.n	800fd40 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800fd2e:	f7f9 f9ef 	bl	8009110 <HAL_GetTick>
 800fd32:	4602      	mov	r2, r0
 800fd34:	68bb      	ldr	r3, [r7, #8]
 800fd36:	1ad3      	subs	r3, r2, r3
 800fd38:	2b02      	cmp	r3, #2
 800fd3a:	d901      	bls.n	800fd40 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800fd3c:	2303      	movs	r3, #3
 800fd3e:	e006      	b.n	800fd4e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800fd40:	4b05      	ldr	r3, [pc, #20]	; (800fd58 <RCCEx_PLL3_Config+0x15c>)
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d0f0      	beq.n	800fd2e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800fd4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd4e:	4618      	mov	r0, r3
 800fd50:	3710      	adds	r7, #16
 800fd52:	46bd      	mov	sp, r7
 800fd54:	bd80      	pop	{r7, pc}
 800fd56:	bf00      	nop
 800fd58:	58024400 	.word	0x58024400
 800fd5c:	ffff0007 	.word	0xffff0007

0800fd60 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800fd60:	b580      	push	{r7, lr}
 800fd62:	b08a      	sub	sp, #40	; 0x28
 800fd64:	af00      	add	r7, sp, #0
 800fd66:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d101      	bne.n	800fd72 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800fd6e:	2301      	movs	r3, #1
 800fd70:	e075      	b.n	800fe5e <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fd78:	b2db      	uxtb	r3, r3
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d105      	bne.n	800fd8a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	2200      	movs	r2, #0
 800fd82:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800fd84:	6878      	ldr	r0, [r7, #4]
 800fd86:	f7f1 fe95 	bl	8001ab4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	2204      	movs	r2, #4
 800fd8e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800fd92:	6878      	ldr	r0, [r7, #4]
 800fd94:	f000 f868 	bl	800fe68 <HAL_SD_InitCard>
 800fd98:	4603      	mov	r3, r0
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d001      	beq.n	800fda2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800fd9e:	2301      	movs	r3, #1
 800fda0:	e05d      	b.n	800fe5e <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800fda2:	f107 0308 	add.w	r3, r7, #8
 800fda6:	4619      	mov	r1, r3
 800fda8:	6878      	ldr	r0, [r7, #4]
 800fdaa:	f000 fbed 	bl	8010588 <HAL_SD_GetCardStatus>
 800fdae:	4603      	mov	r3, r0
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d001      	beq.n	800fdb8 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800fdb4:	2301      	movs	r3, #1
 800fdb6:	e052      	b.n	800fe5e <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800fdb8:	7e3b      	ldrb	r3, [r7, #24]
 800fdba:	b2db      	uxtb	r3, r3
 800fdbc:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800fdbe:	7e7b      	ldrb	r3, [r7, #25]
 800fdc0:	b2db      	uxtb	r3, r3
 800fdc2:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fdc8:	2b01      	cmp	r3, #1
 800fdca:	d10a      	bne.n	800fde2 <HAL_SD_Init+0x82>
 800fdcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d102      	bne.n	800fdd8 <HAL_SD_Init+0x78>
 800fdd2:	6a3b      	ldr	r3, [r7, #32]
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d004      	beq.n	800fde2 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fdde:	659a      	str	r2, [r3, #88]	; 0x58
 800fde0:	e00b      	b.n	800fdfa <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fde6:	2b01      	cmp	r3, #1
 800fde8:	d104      	bne.n	800fdf4 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fdf0:	659a      	str	r2, [r3, #88]	; 0x58
 800fdf2:	e002      	b.n	800fdfa <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	2200      	movs	r2, #0
 800fdf8:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	68db      	ldr	r3, [r3, #12]
 800fdfe:	4619      	mov	r1, r3
 800fe00:	6878      	ldr	r0, [r7, #4]
 800fe02:	f000 fcab 	bl	801075c <HAL_SD_ConfigWideBusOperation>
 800fe06:	4603      	mov	r3, r0
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	d001      	beq.n	800fe10 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800fe0c:	2301      	movs	r3, #1
 800fe0e:	e026      	b.n	800fe5e <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800fe10:	f7f9 f97e 	bl	8009110 <HAL_GetTick>
 800fe14:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800fe16:	e011      	b.n	800fe3c <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800fe18:	f7f9 f97a 	bl	8009110 <HAL_GetTick>
 800fe1c:	4602      	mov	r2, r0
 800fe1e:	69fb      	ldr	r3, [r7, #28]
 800fe20:	1ad3      	subs	r3, r2, r3
 800fe22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe26:	d109      	bne.n	800fe3c <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800fe2e:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	2201      	movs	r2, #1
 800fe34:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800fe38:	2303      	movs	r3, #3
 800fe3a:	e010      	b.n	800fe5e <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800fe3c:	6878      	ldr	r0, [r7, #4]
 800fe3e:	f000 fd9f 	bl	8010980 <HAL_SD_GetCardState>
 800fe42:	4603      	mov	r3, r0
 800fe44:	2b04      	cmp	r3, #4
 800fe46:	d1e7      	bne.n	800fe18 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	2200      	movs	r2, #0
 800fe4c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	2200      	movs	r2, #0
 800fe52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	2201      	movs	r2, #1
 800fe58:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800fe5c:	2300      	movs	r3, #0
}
 800fe5e:	4618      	mov	r0, r3
 800fe60:	3728      	adds	r7, #40	; 0x28
 800fe62:	46bd      	mov	sp, r7
 800fe64:	bd80      	pop	{r7, pc}
	...

0800fe68 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800fe68:	b590      	push	{r4, r7, lr}
 800fe6a:	b08d      	sub	sp, #52	; 0x34
 800fe6c:	af02      	add	r7, sp, #8
 800fe6e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800fe70:	2300      	movs	r3, #0
 800fe72:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800fe74:	2300      	movs	r3, #0
 800fe76:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800fe78:	2300      	movs	r3, #0
 800fe7a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800fe7c:	2300      	movs	r3, #0
 800fe7e:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800fe80:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800fe84:	f04f 0100 	mov.w	r1, #0
 800fe88:	f7fe fd1e 	bl	800e8c8 <HAL_RCCEx_GetPeriphCLKFreq>
 800fe8c:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800fe8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d109      	bne.n	800fea8 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	2201      	movs	r2, #1
 800fe98:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800fea2:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800fea4:	2301      	movs	r3, #1
 800fea6:	e070      	b.n	800ff8a <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800fea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800feaa:	0a1b      	lsrs	r3, r3, #8
 800feac:	4a39      	ldr	r2, [pc, #228]	; (800ff94 <HAL_SD_InitCard+0x12c>)
 800feae:	fba2 2303 	umull	r2, r3, r2, r3
 800feb2:	091b      	lsrs	r3, r3, #4
 800feb4:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	681c      	ldr	r4, [r3, #0]
 800feba:	466a      	mov	r2, sp
 800febc:	f107 0318 	add.w	r3, r7, #24
 800fec0:	e893 0003 	ldmia.w	r3, {r0, r1}
 800fec4:	e882 0003 	stmia.w	r2, {r0, r1}
 800fec8:	f107 030c 	add.w	r3, r7, #12
 800fecc:	cb0e      	ldmia	r3, {r1, r2, r3}
 800fece:	4620      	mov	r0, r4
 800fed0:	f002 fe72 	bl	8012bb8 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	681b      	ldr	r3, [r3, #0]
 800fed8:	4618      	mov	r0, r3
 800feda:	f002 fea4 	bl	8012c26 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800fede:	69fb      	ldr	r3, [r7, #28]
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d005      	beq.n	800fef0 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800fee4:	69fb      	ldr	r3, [r7, #28]
 800fee6:	005b      	lsls	r3, r3, #1
 800fee8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800feea:	fbb2 f3f3 	udiv	r3, r2, r3
 800feee:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 800fef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d007      	beq.n	800ff06 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800fef6:	4a28      	ldr	r2, [pc, #160]	; (800ff98 <HAL_SD_InitCard+0x130>)
 800fef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fefa:	fbb2 f3f3 	udiv	r3, r2, r3
 800fefe:	3301      	adds	r3, #1
 800ff00:	4618      	mov	r0, r3
 800ff02:	f7f9 f911 	bl	8009128 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800ff06:	6878      	ldr	r0, [r7, #4]
 800ff08:	f000 fe28 	bl	8010b5c <SD_PowerON>
 800ff0c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ff0e:	6a3b      	ldr	r3, [r7, #32]
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	d00b      	beq.n	800ff2c <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	2201      	movs	r2, #1
 800ff18:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ff20:	6a3b      	ldr	r3, [r7, #32]
 800ff22:	431a      	orrs	r2, r3
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800ff28:	2301      	movs	r3, #1
 800ff2a:	e02e      	b.n	800ff8a <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800ff2c:	6878      	ldr	r0, [r7, #4]
 800ff2e:	f000 fd47 	bl	80109c0 <SD_InitCard>
 800ff32:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ff34:	6a3b      	ldr	r3, [r7, #32]
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d00b      	beq.n	800ff52 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	2201      	movs	r2, #1
 800ff3e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ff46:	6a3b      	ldr	r3, [r7, #32]
 800ff48:	431a      	orrs	r2, r3
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800ff4e:	2301      	movs	r3, #1
 800ff50:	e01b      	b.n	800ff8a <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ff5a:	4618      	mov	r0, r3
 800ff5c:	f002 fef8 	bl	8012d50 <SDMMC_CmdBlockLength>
 800ff60:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ff62:	6a3b      	ldr	r3, [r7, #32]
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d00f      	beq.n	800ff88 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	4a0b      	ldr	r2, [pc, #44]	; (800ff9c <HAL_SD_InitCard+0x134>)
 800ff6e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ff74:	6a3b      	ldr	r3, [r7, #32]
 800ff76:	431a      	orrs	r2, r3
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	2201      	movs	r2, #1
 800ff80:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800ff84:	2301      	movs	r3, #1
 800ff86:	e000      	b.n	800ff8a <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800ff88:	2300      	movs	r3, #0
}
 800ff8a:	4618      	mov	r0, r3
 800ff8c:	372c      	adds	r7, #44	; 0x2c
 800ff8e:	46bd      	mov	sp, r7
 800ff90:	bd90      	pop	{r4, r7, pc}
 800ff92:	bf00      	nop
 800ff94:	014f8b59 	.word	0x014f8b59
 800ff98:	00012110 	.word	0x00012110
 800ff9c:	1fe00fff 	.word	0x1fe00fff

0800ffa0 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800ffa0:	b580      	push	{r7, lr}
 800ffa2:	b08c      	sub	sp, #48	; 0x30
 800ffa4:	af00      	add	r7, sp, #0
 800ffa6:	60f8      	str	r0, [r7, #12]
 800ffa8:	60b9      	str	r1, [r7, #8]
 800ffaa:	607a      	str	r2, [r7, #4]
 800ffac:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800ffb2:	68bb      	ldr	r3, [r7, #8]
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	d107      	bne.n	800ffc8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ffb8:	68fb      	ldr	r3, [r7, #12]
 800ffba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ffbc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ffc0:	68fb      	ldr	r3, [r7, #12]
 800ffc2:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800ffc4:	2301      	movs	r3, #1
 800ffc6:	e08d      	b.n	80100e4 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800ffc8:	68fb      	ldr	r3, [r7, #12]
 800ffca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ffce:	b2db      	uxtb	r3, r3
 800ffd0:	2b01      	cmp	r3, #1
 800ffd2:	f040 8086 	bne.w	80100e2 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ffd6:	68fb      	ldr	r3, [r7, #12]
 800ffd8:	2200      	movs	r2, #0
 800ffda:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800ffdc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ffde:	683b      	ldr	r3, [r7, #0]
 800ffe0:	441a      	add	r2, r3
 800ffe2:	68fb      	ldr	r3, [r7, #12]
 800ffe4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ffe6:	429a      	cmp	r2, r3
 800ffe8:	d907      	bls.n	800fffa <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800ffea:	68fb      	ldr	r3, [r7, #12]
 800ffec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ffee:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800fff2:	68fb      	ldr	r3, [r7, #12]
 800fff4:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800fff6:	2301      	movs	r3, #1
 800fff8:	e074      	b.n	80100e4 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800fffa:	68fb      	ldr	r3, [r7, #12]
 800fffc:	2203      	movs	r2, #3
 800fffe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8010002:	68fb      	ldr	r3, [r7, #12]
 8010004:	681b      	ldr	r3, [r3, #0]
 8010006:	2200      	movs	r2, #0
 8010008:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 801000a:	68fb      	ldr	r3, [r7, #12]
 801000c:	68ba      	ldr	r2, [r7, #8]
 801000e:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8010010:	683b      	ldr	r3, [r7, #0]
 8010012:	025a      	lsls	r2, r3, #9
 8010014:	68fb      	ldr	r3, [r7, #12]
 8010016:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801001c:	2b01      	cmp	r3, #1
 801001e:	d002      	beq.n	8010026 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 8010020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010022:	025b      	lsls	r3, r3, #9
 8010024:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8010026:	f04f 33ff 	mov.w	r3, #4294967295
 801002a:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 801002c:	683b      	ldr	r3, [r7, #0]
 801002e:	025b      	lsls	r3, r3, #9
 8010030:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8010032:	2390      	movs	r3, #144	; 0x90
 8010034:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8010036:	2302      	movs	r3, #2
 8010038:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 801003a:	2300      	movs	r3, #0
 801003c:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 801003e:	2300      	movs	r3, #0
 8010040:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	f107 0210 	add.w	r2, r7, #16
 801004a:	4611      	mov	r1, r2
 801004c:	4618      	mov	r0, r3
 801004e:	f002 fe53 	bl	8012cf8 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8010052:	68fb      	ldr	r3, [r7, #12]
 8010054:	681b      	ldr	r3, [r3, #0]
 8010056:	68da      	ldr	r2, [r3, #12]
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010060:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8010062:	68fb      	ldr	r3, [r7, #12]
 8010064:	681b      	ldr	r3, [r3, #0]
 8010066:	68ba      	ldr	r2, [r7, #8]
 8010068:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 801006a:	68fb      	ldr	r3, [r7, #12]
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	2201      	movs	r2, #1
 8010070:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 8010072:	683b      	ldr	r3, [r7, #0]
 8010074:	2b01      	cmp	r3, #1
 8010076:	d90a      	bls.n	801008e <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8010078:	68fb      	ldr	r3, [r7, #12]
 801007a:	2282      	movs	r2, #130	; 0x82
 801007c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 801007e:	68fb      	ldr	r3, [r7, #12]
 8010080:	681b      	ldr	r3, [r3, #0]
 8010082:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010084:	4618      	mov	r0, r3
 8010086:	f002 fea9 	bl	8012ddc <SDMMC_CmdReadMultiBlock>
 801008a:	62f8      	str	r0, [r7, #44]	; 0x2c
 801008c:	e009      	b.n	80100a2 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 801008e:	68fb      	ldr	r3, [r7, #12]
 8010090:	2281      	movs	r2, #129	; 0x81
 8010092:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8010094:	68fb      	ldr	r3, [r7, #12]
 8010096:	681b      	ldr	r3, [r3, #0]
 8010098:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801009a:	4618      	mov	r0, r3
 801009c:	f002 fe7b 	bl	8012d96 <SDMMC_CmdReadSingleBlock>
 80100a0:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 80100a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	d012      	beq.n	80100ce <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80100a8:	68fb      	ldr	r3, [r7, #12]
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	4a0f      	ldr	r2, [pc, #60]	; (80100ec <HAL_SD_ReadBlocks_DMA+0x14c>)
 80100ae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80100b0:	68fb      	ldr	r3, [r7, #12]
 80100b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80100b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100b6:	431a      	orrs	r2, r3
 80100b8:	68fb      	ldr	r3, [r7, #12]
 80100ba:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80100bc:	68fb      	ldr	r3, [r7, #12]
 80100be:	2201      	movs	r2, #1
 80100c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	2200      	movs	r2, #0
 80100c8:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80100ca:	2301      	movs	r3, #1
 80100cc:	e00a      	b.n	80100e4 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80100ce:	68fb      	ldr	r3, [r7, #12]
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80100d4:	68fb      	ldr	r3, [r7, #12]
 80100d6:	681b      	ldr	r3, [r3, #0]
 80100d8:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 80100dc:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 80100de:	2300      	movs	r3, #0
 80100e0:	e000      	b.n	80100e4 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 80100e2:	2302      	movs	r3, #2
  }
}
 80100e4:	4618      	mov	r0, r3
 80100e6:	3730      	adds	r7, #48	; 0x30
 80100e8:	46bd      	mov	sp, r7
 80100ea:	bd80      	pop	{r7, pc}
 80100ec:	1fe00fff 	.word	0x1fe00fff

080100f0 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 80100f0:	b580      	push	{r7, lr}
 80100f2:	b08c      	sub	sp, #48	; 0x30
 80100f4:	af00      	add	r7, sp, #0
 80100f6:	60f8      	str	r0, [r7, #12]
 80100f8:	60b9      	str	r1, [r7, #8]
 80100fa:	607a      	str	r2, [r7, #4]
 80100fc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 8010102:	68bb      	ldr	r3, [r7, #8]
 8010104:	2b00      	cmp	r3, #0
 8010106:	d107      	bne.n	8010118 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8010108:	68fb      	ldr	r3, [r7, #12]
 801010a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801010c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8010110:	68fb      	ldr	r3, [r7, #12]
 8010112:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8010114:	2301      	movs	r3, #1
 8010116:	e08d      	b.n	8010234 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8010118:	68fb      	ldr	r3, [r7, #12]
 801011a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801011e:	b2db      	uxtb	r3, r3
 8010120:	2b01      	cmp	r3, #1
 8010122:	f040 8086 	bne.w	8010232 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8010126:	68fb      	ldr	r3, [r7, #12]
 8010128:	2200      	movs	r2, #0
 801012a:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 801012c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801012e:	683b      	ldr	r3, [r7, #0]
 8010130:	441a      	add	r2, r3
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010136:	429a      	cmp	r2, r3
 8010138:	d907      	bls.n	801014a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 801013a:	68fb      	ldr	r3, [r7, #12]
 801013c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801013e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8010142:	68fb      	ldr	r3, [r7, #12]
 8010144:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8010146:	2301      	movs	r3, #1
 8010148:	e074      	b.n	8010234 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 801014a:	68fb      	ldr	r3, [r7, #12]
 801014c:	2203      	movs	r2, #3
 801014e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	681b      	ldr	r3, [r3, #0]
 8010156:	2200      	movs	r2, #0
 8010158:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 801015a:	68fb      	ldr	r3, [r7, #12]
 801015c:	68ba      	ldr	r2, [r7, #8]
 801015e:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8010160:	683b      	ldr	r3, [r7, #0]
 8010162:	025a      	lsls	r2, r3, #9
 8010164:	68fb      	ldr	r3, [r7, #12]
 8010166:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801016c:	2b01      	cmp	r3, #1
 801016e:	d002      	beq.n	8010176 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8010170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010172:	025b      	lsls	r3, r3, #9
 8010174:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8010176:	f04f 33ff 	mov.w	r3, #4294967295
 801017a:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 801017c:	683b      	ldr	r3, [r7, #0]
 801017e:	025b      	lsls	r3, r3, #9
 8010180:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8010182:	2390      	movs	r3, #144	; 0x90
 8010184:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8010186:	2300      	movs	r3, #0
 8010188:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 801018a:	2300      	movs	r3, #0
 801018c:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 801018e:	2300      	movs	r3, #0
 8010190:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8010192:	68fb      	ldr	r3, [r7, #12]
 8010194:	681b      	ldr	r3, [r3, #0]
 8010196:	f107 0210 	add.w	r2, r7, #16
 801019a:	4611      	mov	r1, r2
 801019c:	4618      	mov	r0, r3
 801019e:	f002 fdab 	bl	8012cf8 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80101a2:	68fb      	ldr	r3, [r7, #12]
 80101a4:	681b      	ldr	r3, [r3, #0]
 80101a6:	68da      	ldr	r2, [r3, #12]
 80101a8:	68fb      	ldr	r3, [r7, #12]
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80101b0:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 80101b2:	68fb      	ldr	r3, [r7, #12]
 80101b4:	681b      	ldr	r3, [r3, #0]
 80101b6:	68ba      	ldr	r2, [r7, #8]
 80101b8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 80101ba:	68fb      	ldr	r3, [r7, #12]
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	2201      	movs	r2, #1
 80101c0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 80101c2:	683b      	ldr	r3, [r7, #0]
 80101c4:	2b01      	cmp	r3, #1
 80101c6:	d90a      	bls.n	80101de <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80101c8:	68fb      	ldr	r3, [r7, #12]
 80101ca:	22a0      	movs	r2, #160	; 0xa0
 80101cc:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80101ce:	68fb      	ldr	r3, [r7, #12]
 80101d0:	681b      	ldr	r3, [r3, #0]
 80101d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80101d4:	4618      	mov	r0, r3
 80101d6:	f002 fe47 	bl	8012e68 <SDMMC_CmdWriteMultiBlock>
 80101da:	62f8      	str	r0, [r7, #44]	; 0x2c
 80101dc:	e009      	b.n	80101f2 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80101de:	68fb      	ldr	r3, [r7, #12]
 80101e0:	2290      	movs	r2, #144	; 0x90
 80101e2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80101ea:	4618      	mov	r0, r3
 80101ec:	f002 fe19 	bl	8012e22 <SDMMC_CmdWriteSingleBlock>
 80101f0:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 80101f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	d012      	beq.n	801021e <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80101f8:	68fb      	ldr	r3, [r7, #12]
 80101fa:	681b      	ldr	r3, [r3, #0]
 80101fc:	4a0f      	ldr	r2, [pc, #60]	; (801023c <HAL_SD_WriteBlocks_DMA+0x14c>)
 80101fe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8010200:	68fb      	ldr	r3, [r7, #12]
 8010202:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010206:	431a      	orrs	r2, r3
 8010208:	68fb      	ldr	r3, [r7, #12]
 801020a:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	2201      	movs	r2, #1
 8010210:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8010214:	68fb      	ldr	r3, [r7, #12]
 8010216:	2200      	movs	r2, #0
 8010218:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 801021a:	2301      	movs	r3, #1
 801021c:	e00a      	b.n	8010234 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 801021e:	68fb      	ldr	r3, [r7, #12]
 8010220:	681b      	ldr	r3, [r3, #0]
 8010222:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	681b      	ldr	r3, [r3, #0]
 8010228:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 801022c:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 801022e:	2300      	movs	r3, #0
 8010230:	e000      	b.n	8010234 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8010232:	2302      	movs	r3, #2
  }
}
 8010234:	4618      	mov	r0, r3
 8010236:	3730      	adds	r7, #48	; 0x30
 8010238:	46bd      	mov	sp, r7
 801023a:	bd80      	pop	{r7, pc}
 801023c:	1fe00fff 	.word	0x1fe00fff

08010240 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8010240:	b480      	push	{r7}
 8010242:	b083      	sub	sp, #12
 8010244:	af00      	add	r7, sp, #0
 8010246:	6078      	str	r0, [r7, #4]
 8010248:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801024e:	0f9b      	lsrs	r3, r3, #30
 8010250:	b2da      	uxtb	r2, r3
 8010252:	683b      	ldr	r3, [r7, #0]
 8010254:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801025a:	0e9b      	lsrs	r3, r3, #26
 801025c:	b2db      	uxtb	r3, r3
 801025e:	f003 030f 	and.w	r3, r3, #15
 8010262:	b2da      	uxtb	r2, r3
 8010264:	683b      	ldr	r3, [r7, #0]
 8010266:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801026c:	0e1b      	lsrs	r3, r3, #24
 801026e:	b2db      	uxtb	r3, r3
 8010270:	f003 0303 	and.w	r3, r3, #3
 8010274:	b2da      	uxtb	r2, r3
 8010276:	683b      	ldr	r3, [r7, #0]
 8010278:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801027e:	0c1b      	lsrs	r3, r3, #16
 8010280:	b2da      	uxtb	r2, r3
 8010282:	683b      	ldr	r3, [r7, #0]
 8010284:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801028a:	0a1b      	lsrs	r3, r3, #8
 801028c:	b2da      	uxtb	r2, r3
 801028e:	683b      	ldr	r3, [r7, #0]
 8010290:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010296:	b2da      	uxtb	r2, r3
 8010298:	683b      	ldr	r3, [r7, #0]
 801029a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80102a0:	0d1b      	lsrs	r3, r3, #20
 80102a2:	b29a      	uxth	r2, r3
 80102a4:	683b      	ldr	r3, [r7, #0]
 80102a6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80102ac:	0c1b      	lsrs	r3, r3, #16
 80102ae:	b2db      	uxtb	r3, r3
 80102b0:	f003 030f 	and.w	r3, r3, #15
 80102b4:	b2da      	uxtb	r2, r3
 80102b6:	683b      	ldr	r3, [r7, #0]
 80102b8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80102be:	0bdb      	lsrs	r3, r3, #15
 80102c0:	b2db      	uxtb	r3, r3
 80102c2:	f003 0301 	and.w	r3, r3, #1
 80102c6:	b2da      	uxtb	r2, r3
 80102c8:	683b      	ldr	r3, [r7, #0]
 80102ca:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80102d0:	0b9b      	lsrs	r3, r3, #14
 80102d2:	b2db      	uxtb	r3, r3
 80102d4:	f003 0301 	and.w	r3, r3, #1
 80102d8:	b2da      	uxtb	r2, r3
 80102da:	683b      	ldr	r3, [r7, #0]
 80102dc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80102e2:	0b5b      	lsrs	r3, r3, #13
 80102e4:	b2db      	uxtb	r3, r3
 80102e6:	f003 0301 	and.w	r3, r3, #1
 80102ea:	b2da      	uxtb	r2, r3
 80102ec:	683b      	ldr	r3, [r7, #0]
 80102ee:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80102f4:	0b1b      	lsrs	r3, r3, #12
 80102f6:	b2db      	uxtb	r3, r3
 80102f8:	f003 0301 	and.w	r3, r3, #1
 80102fc:	b2da      	uxtb	r2, r3
 80102fe:	683b      	ldr	r3, [r7, #0]
 8010300:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8010302:	683b      	ldr	r3, [r7, #0]
 8010304:	2200      	movs	r2, #0
 8010306:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801030c:	2b00      	cmp	r3, #0
 801030e:	d163      	bne.n	80103d8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010314:	009a      	lsls	r2, r3, #2
 8010316:	f640 73fc 	movw	r3, #4092	; 0xffc
 801031a:	4013      	ands	r3, r2
 801031c:	687a      	ldr	r2, [r7, #4]
 801031e:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8010320:	0f92      	lsrs	r2, r2, #30
 8010322:	431a      	orrs	r2, r3
 8010324:	683b      	ldr	r3, [r7, #0]
 8010326:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801032c:	0edb      	lsrs	r3, r3, #27
 801032e:	b2db      	uxtb	r3, r3
 8010330:	f003 0307 	and.w	r3, r3, #7
 8010334:	b2da      	uxtb	r2, r3
 8010336:	683b      	ldr	r3, [r7, #0]
 8010338:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801033e:	0e1b      	lsrs	r3, r3, #24
 8010340:	b2db      	uxtb	r3, r3
 8010342:	f003 0307 	and.w	r3, r3, #7
 8010346:	b2da      	uxtb	r2, r3
 8010348:	683b      	ldr	r3, [r7, #0]
 801034a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010350:	0d5b      	lsrs	r3, r3, #21
 8010352:	b2db      	uxtb	r3, r3
 8010354:	f003 0307 	and.w	r3, r3, #7
 8010358:	b2da      	uxtb	r2, r3
 801035a:	683b      	ldr	r3, [r7, #0]
 801035c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010362:	0c9b      	lsrs	r3, r3, #18
 8010364:	b2db      	uxtb	r3, r3
 8010366:	f003 0307 	and.w	r3, r3, #7
 801036a:	b2da      	uxtb	r2, r3
 801036c:	683b      	ldr	r3, [r7, #0]
 801036e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010374:	0bdb      	lsrs	r3, r3, #15
 8010376:	b2db      	uxtb	r3, r3
 8010378:	f003 0307 	and.w	r3, r3, #7
 801037c:	b2da      	uxtb	r2, r3
 801037e:	683b      	ldr	r3, [r7, #0]
 8010380:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8010382:	683b      	ldr	r3, [r7, #0]
 8010384:	691b      	ldr	r3, [r3, #16]
 8010386:	1c5a      	adds	r2, r3, #1
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 801038c:	683b      	ldr	r3, [r7, #0]
 801038e:	7e1b      	ldrb	r3, [r3, #24]
 8010390:	b2db      	uxtb	r3, r3
 8010392:	f003 0307 	and.w	r3, r3, #7
 8010396:	3302      	adds	r3, #2
 8010398:	2201      	movs	r2, #1
 801039a:	fa02 f303 	lsl.w	r3, r2, r3
 801039e:	687a      	ldr	r2, [r7, #4]
 80103a0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80103a2:	fb03 f202 	mul.w	r2, r3, r2
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80103aa:	683b      	ldr	r3, [r7, #0]
 80103ac:	7a1b      	ldrb	r3, [r3, #8]
 80103ae:	b2db      	uxtb	r3, r3
 80103b0:	f003 030f 	and.w	r3, r3, #15
 80103b4:	2201      	movs	r2, #1
 80103b6:	409a      	lsls	r2, r3
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80103c0:	687a      	ldr	r2, [r7, #4]
 80103c2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80103c4:	0a52      	lsrs	r2, r2, #9
 80103c6:	fb03 f202 	mul.w	r2, r3, r2
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80103d4:	655a      	str	r2, [r3, #84]	; 0x54
 80103d6:	e031      	b.n	801043c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80103dc:	2b01      	cmp	r3, #1
 80103de:	d11d      	bne.n	801041c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80103e4:	041b      	lsls	r3, r3, #16
 80103e6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80103ee:	0c1b      	lsrs	r3, r3, #16
 80103f0:	431a      	orrs	r2, r3
 80103f2:	683b      	ldr	r3, [r7, #0]
 80103f4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80103f6:	683b      	ldr	r3, [r7, #0]
 80103f8:	691b      	ldr	r3, [r3, #16]
 80103fa:	3301      	adds	r3, #1
 80103fc:	029a      	lsls	r2, r3, #10
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010410:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	655a      	str	r2, [r3, #84]	; 0x54
 801041a:	e00f      	b.n	801043c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	4a58      	ldr	r2, [pc, #352]	; (8010584 <HAL_SD_GetCardCSD+0x344>)
 8010422:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010428:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	2201      	movs	r2, #1
 8010434:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8010438:	2301      	movs	r3, #1
 801043a:	e09d      	b.n	8010578 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010440:	0b9b      	lsrs	r3, r3, #14
 8010442:	b2db      	uxtb	r3, r3
 8010444:	f003 0301 	and.w	r3, r3, #1
 8010448:	b2da      	uxtb	r2, r3
 801044a:	683b      	ldr	r3, [r7, #0]
 801044c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010452:	09db      	lsrs	r3, r3, #7
 8010454:	b2db      	uxtb	r3, r3
 8010456:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801045a:	b2da      	uxtb	r2, r3
 801045c:	683b      	ldr	r3, [r7, #0]
 801045e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010464:	b2db      	uxtb	r3, r3
 8010466:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801046a:	b2da      	uxtb	r2, r3
 801046c:	683b      	ldr	r3, [r7, #0]
 801046e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010474:	0fdb      	lsrs	r3, r3, #31
 8010476:	b2da      	uxtb	r2, r3
 8010478:	683b      	ldr	r3, [r7, #0]
 801047a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010480:	0f5b      	lsrs	r3, r3, #29
 8010482:	b2db      	uxtb	r3, r3
 8010484:	f003 0303 	and.w	r3, r3, #3
 8010488:	b2da      	uxtb	r2, r3
 801048a:	683b      	ldr	r3, [r7, #0]
 801048c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010492:	0e9b      	lsrs	r3, r3, #26
 8010494:	b2db      	uxtb	r3, r3
 8010496:	f003 0307 	and.w	r3, r3, #7
 801049a:	b2da      	uxtb	r2, r3
 801049c:	683b      	ldr	r3, [r7, #0]
 801049e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80104a4:	0d9b      	lsrs	r3, r3, #22
 80104a6:	b2db      	uxtb	r3, r3
 80104a8:	f003 030f 	and.w	r3, r3, #15
 80104ac:	b2da      	uxtb	r2, r3
 80104ae:	683b      	ldr	r3, [r7, #0]
 80104b0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80104b6:	0d5b      	lsrs	r3, r3, #21
 80104b8:	b2db      	uxtb	r3, r3
 80104ba:	f003 0301 	and.w	r3, r3, #1
 80104be:	b2da      	uxtb	r2, r3
 80104c0:	683b      	ldr	r3, [r7, #0]
 80104c2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80104c6:	683b      	ldr	r3, [r7, #0]
 80104c8:	2200      	movs	r2, #0
 80104ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80104d2:	0c1b      	lsrs	r3, r3, #16
 80104d4:	b2db      	uxtb	r3, r3
 80104d6:	f003 0301 	and.w	r3, r3, #1
 80104da:	b2da      	uxtb	r2, r3
 80104dc:	683b      	ldr	r3, [r7, #0]
 80104de:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80104e6:	0bdb      	lsrs	r3, r3, #15
 80104e8:	b2db      	uxtb	r3, r3
 80104ea:	f003 0301 	and.w	r3, r3, #1
 80104ee:	b2da      	uxtb	r2, r3
 80104f0:	683b      	ldr	r3, [r7, #0]
 80104f2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80104fa:	0b9b      	lsrs	r3, r3, #14
 80104fc:	b2db      	uxtb	r3, r3
 80104fe:	f003 0301 	and.w	r3, r3, #1
 8010502:	b2da      	uxtb	r2, r3
 8010504:	683b      	ldr	r3, [r7, #0]
 8010506:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801050e:	0b5b      	lsrs	r3, r3, #13
 8010510:	b2db      	uxtb	r3, r3
 8010512:	f003 0301 	and.w	r3, r3, #1
 8010516:	b2da      	uxtb	r2, r3
 8010518:	683b      	ldr	r3, [r7, #0]
 801051a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010522:	0b1b      	lsrs	r3, r3, #12
 8010524:	b2db      	uxtb	r3, r3
 8010526:	f003 0301 	and.w	r3, r3, #1
 801052a:	b2da      	uxtb	r2, r3
 801052c:	683b      	ldr	r3, [r7, #0]
 801052e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010536:	0a9b      	lsrs	r3, r3, #10
 8010538:	b2db      	uxtb	r3, r3
 801053a:	f003 0303 	and.w	r3, r3, #3
 801053e:	b2da      	uxtb	r2, r3
 8010540:	683b      	ldr	r3, [r7, #0]
 8010542:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801054a:	0a1b      	lsrs	r3, r3, #8
 801054c:	b2db      	uxtb	r3, r3
 801054e:	f003 0303 	and.w	r3, r3, #3
 8010552:	b2da      	uxtb	r2, r3
 8010554:	683b      	ldr	r3, [r7, #0]
 8010556:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801055e:	085b      	lsrs	r3, r3, #1
 8010560:	b2db      	uxtb	r3, r3
 8010562:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010566:	b2da      	uxtb	r2, r3
 8010568:	683b      	ldr	r3, [r7, #0]
 801056a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 801056e:	683b      	ldr	r3, [r7, #0]
 8010570:	2201      	movs	r2, #1
 8010572:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8010576:	2300      	movs	r3, #0
}
 8010578:	4618      	mov	r0, r3
 801057a:	370c      	adds	r7, #12
 801057c:	46bd      	mov	sp, r7
 801057e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010582:	4770      	bx	lr
 8010584:	1fe00fff 	.word	0x1fe00fff

08010588 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8010588:	b580      	push	{r7, lr}
 801058a:	b094      	sub	sp, #80	; 0x50
 801058c:	af00      	add	r7, sp, #0
 801058e:	6078      	str	r0, [r7, #4]
 8010590:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8010592:	2300      	movs	r3, #0
 8010594:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801059e:	b2db      	uxtb	r3, r3
 80105a0:	2b03      	cmp	r3, #3
 80105a2:	d101      	bne.n	80105a8 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 80105a4:	2301      	movs	r3, #1
 80105a6:	e0a7      	b.n	80106f8 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 80105a8:	f107 0308 	add.w	r3, r7, #8
 80105ac:	4619      	mov	r1, r3
 80105ae:	6878      	ldr	r0, [r7, #4]
 80105b0:	f000 fb62 	bl	8010c78 <SD_SendSDStatus>
 80105b4:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80105b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d011      	beq.n	80105e0 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	681b      	ldr	r3, [r3, #0]
 80105c0:	4a4f      	ldr	r2, [pc, #316]	; (8010700 <HAL_SD_GetCardStatus+0x178>)
 80105c2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80105c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80105ca:	431a      	orrs	r2, r3
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	2201      	movs	r2, #1
 80105d4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 80105d8:	2301      	movs	r3, #1
 80105da:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80105de:	e070      	b.n	80106c2 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 80105e0:	68bb      	ldr	r3, [r7, #8]
 80105e2:	099b      	lsrs	r3, r3, #6
 80105e4:	b2db      	uxtb	r3, r3
 80105e6:	f003 0303 	and.w	r3, r3, #3
 80105ea:	b2da      	uxtb	r2, r3
 80105ec:	683b      	ldr	r3, [r7, #0]
 80105ee:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 80105f0:	68bb      	ldr	r3, [r7, #8]
 80105f2:	095b      	lsrs	r3, r3, #5
 80105f4:	b2db      	uxtb	r3, r3
 80105f6:	f003 0301 	and.w	r3, r3, #1
 80105fa:	b2da      	uxtb	r2, r3
 80105fc:	683b      	ldr	r3, [r7, #0]
 80105fe:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8010600:	68bb      	ldr	r3, [r7, #8]
 8010602:	0a1b      	lsrs	r3, r3, #8
 8010604:	b29b      	uxth	r3, r3
 8010606:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 801060a:	b29a      	uxth	r2, r3
 801060c:	68bb      	ldr	r3, [r7, #8]
 801060e:	0e1b      	lsrs	r3, r3, #24
 8010610:	b29b      	uxth	r3, r3
 8010612:	4313      	orrs	r3, r2
 8010614:	b29a      	uxth	r2, r3
 8010616:	683b      	ldr	r3, [r7, #0]
 8010618:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 801061a:	68fb      	ldr	r3, [r7, #12]
 801061c:	061a      	lsls	r2, r3, #24
 801061e:	68fb      	ldr	r3, [r7, #12]
 8010620:	021b      	lsls	r3, r3, #8
 8010622:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8010626:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8010628:	68fb      	ldr	r3, [r7, #12]
 801062a:	0a1b      	lsrs	r3, r3, #8
 801062c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8010630:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8010632:	68fb      	ldr	r3, [r7, #12]
 8010634:	0e1b      	lsrs	r3, r3, #24
 8010636:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8010638:	683b      	ldr	r3, [r7, #0]
 801063a:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 801063c:	693b      	ldr	r3, [r7, #16]
 801063e:	b2da      	uxtb	r2, r3
 8010640:	683b      	ldr	r3, [r7, #0]
 8010642:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8010644:	693b      	ldr	r3, [r7, #16]
 8010646:	0a1b      	lsrs	r3, r3, #8
 8010648:	b2da      	uxtb	r2, r3
 801064a:	683b      	ldr	r3, [r7, #0]
 801064c:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 801064e:	693b      	ldr	r3, [r7, #16]
 8010650:	0d1b      	lsrs	r3, r3, #20
 8010652:	b2db      	uxtb	r3, r3
 8010654:	f003 030f 	and.w	r3, r3, #15
 8010658:	b2da      	uxtb	r2, r3
 801065a:	683b      	ldr	r3, [r7, #0]
 801065c:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 801065e:	693b      	ldr	r3, [r7, #16]
 8010660:	0c1b      	lsrs	r3, r3, #16
 8010662:	b29b      	uxth	r3, r3
 8010664:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8010668:	b29a      	uxth	r2, r3
 801066a:	697b      	ldr	r3, [r7, #20]
 801066c:	b29b      	uxth	r3, r3
 801066e:	b2db      	uxtb	r3, r3
 8010670:	b29b      	uxth	r3, r3
 8010672:	4313      	orrs	r3, r2
 8010674:	b29a      	uxth	r2, r3
 8010676:	683b      	ldr	r3, [r7, #0]
 8010678:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 801067a:	697b      	ldr	r3, [r7, #20]
 801067c:	0a9b      	lsrs	r3, r3, #10
 801067e:	b2db      	uxtb	r3, r3
 8010680:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010684:	b2da      	uxtb	r2, r3
 8010686:	683b      	ldr	r3, [r7, #0]
 8010688:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 801068a:	697b      	ldr	r3, [r7, #20]
 801068c:	0a1b      	lsrs	r3, r3, #8
 801068e:	b2db      	uxtb	r3, r3
 8010690:	f003 0303 	and.w	r3, r3, #3
 8010694:	b2da      	uxtb	r2, r3
 8010696:	683b      	ldr	r3, [r7, #0]
 8010698:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 801069a:	697b      	ldr	r3, [r7, #20]
 801069c:	091b      	lsrs	r3, r3, #4
 801069e:	b2db      	uxtb	r3, r3
 80106a0:	f003 030f 	and.w	r3, r3, #15
 80106a4:	b2da      	uxtb	r2, r3
 80106a6:	683b      	ldr	r3, [r7, #0]
 80106a8:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80106aa:	697b      	ldr	r3, [r7, #20]
 80106ac:	b2db      	uxtb	r3, r3
 80106ae:	f003 030f 	and.w	r3, r3, #15
 80106b2:	b2da      	uxtb	r2, r3
 80106b4:	683b      	ldr	r3, [r7, #0]
 80106b6:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 80106b8:	69bb      	ldr	r3, [r7, #24]
 80106ba:	0e1b      	lsrs	r3, r3, #24
 80106bc:	b2da      	uxtb	r2, r3
 80106be:	683b      	ldr	r3, [r7, #0]
 80106c0:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	681b      	ldr	r3, [r3, #0]
 80106c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80106ca:	4618      	mov	r0, r3
 80106cc:	f002 fb40 	bl	8012d50 <SDMMC_CmdBlockLength>
 80106d0:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80106d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d00d      	beq.n	80106f4 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	681b      	ldr	r3, [r3, #0]
 80106dc:	4a08      	ldr	r2, [pc, #32]	; (8010700 <HAL_SD_GetCardStatus+0x178>)
 80106de:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80106e4:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	2201      	movs	r2, #1
 80106ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 80106ee:	2301      	movs	r3, #1
 80106f0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 80106f4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 80106f8:	4618      	mov	r0, r3
 80106fa:	3750      	adds	r7, #80	; 0x50
 80106fc:	46bd      	mov	sp, r7
 80106fe:	bd80      	pop	{r7, pc}
 8010700:	1fe00fff 	.word	0x1fe00fff

08010704 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8010704:	b480      	push	{r7}
 8010706:	b083      	sub	sp, #12
 8010708:	af00      	add	r7, sp, #0
 801070a:	6078      	str	r0, [r7, #4]
 801070c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010712:	683b      	ldr	r3, [r7, #0]
 8010714:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801071a:	683b      	ldr	r3, [r7, #0]
 801071c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010722:	683b      	ldr	r3, [r7, #0]
 8010724:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801072a:	683b      	ldr	r3, [r7, #0]
 801072c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010732:	683b      	ldr	r3, [r7, #0]
 8010734:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801073a:	683b      	ldr	r3, [r7, #0]
 801073c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010742:	683b      	ldr	r3, [r7, #0]
 8010744:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801074a:	683b      	ldr	r3, [r7, #0]
 801074c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 801074e:	2300      	movs	r3, #0
}
 8010750:	4618      	mov	r0, r3
 8010752:	370c      	adds	r7, #12
 8010754:	46bd      	mov	sp, r7
 8010756:	f85d 7b04 	ldr.w	r7, [sp], #4
 801075a:	4770      	bx	lr

0801075c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 801075c:	b590      	push	{r4, r7, lr}
 801075e:	b08d      	sub	sp, #52	; 0x34
 8010760:	af02      	add	r7, sp, #8
 8010762:	6078      	str	r0, [r7, #4]
 8010764:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8010766:	2300      	movs	r3, #0
 8010768:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	2203      	movs	r2, #3
 8010770:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010778:	2b03      	cmp	r3, #3
 801077a:	d02e      	beq.n	80107da <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 801077c:	683b      	ldr	r3, [r7, #0]
 801077e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010782:	d106      	bne.n	8010792 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010788:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	635a      	str	r2, [r3, #52]	; 0x34
 8010790:	e029      	b.n	80107e6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8010792:	683b      	ldr	r3, [r7, #0]
 8010794:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010798:	d10a      	bne.n	80107b0 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 801079a:	6878      	ldr	r0, [r7, #4]
 801079c:	f000 fb64 	bl	8010e68 <SD_WideBus_Enable>
 80107a0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80107a6:	6a3b      	ldr	r3, [r7, #32]
 80107a8:	431a      	orrs	r2, r3
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	635a      	str	r2, [r3, #52]	; 0x34
 80107ae:	e01a      	b.n	80107e6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 80107b0:	683b      	ldr	r3, [r7, #0]
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	d10a      	bne.n	80107cc <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80107b6:	6878      	ldr	r0, [r7, #4]
 80107b8:	f000 fba1 	bl	8010efe <SD_WideBus_Disable>
 80107bc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80107c2:	6a3b      	ldr	r3, [r7, #32]
 80107c4:	431a      	orrs	r2, r3
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	635a      	str	r2, [r3, #52]	; 0x34
 80107ca:	e00c      	b.n	80107e6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80107d0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	635a      	str	r2, [r3, #52]	; 0x34
 80107d8:	e005      	b.n	80107e6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80107de:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d007      	beq.n	80107fe <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	4a5f      	ldr	r2, [pc, #380]	; (8010970 <HAL_SD_ConfigWideBusOperation+0x214>)
 80107f4:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80107f6:	2301      	movs	r3, #1
 80107f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80107fc:	e096      	b.n	801092c <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80107fe:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8010802:	f04f 0100 	mov.w	r1, #0
 8010806:	f7fe f85f 	bl	800e8c8 <HAL_RCCEx_GetPeriphCLKFreq>
 801080a:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 801080c:	69fb      	ldr	r3, [r7, #28]
 801080e:	2b00      	cmp	r3, #0
 8010810:	f000 8083 	beq.w	801091a <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	685b      	ldr	r3, [r3, #4]
 8010818:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	689b      	ldr	r3, [r3, #8]
 801081e:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8010820:	683b      	ldr	r3, [r7, #0]
 8010822:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	691b      	ldr	r3, [r3, #16]
 8010828:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	695a      	ldr	r2, [r3, #20]
 801082e:	69fb      	ldr	r3, [r7, #28]
 8010830:	4950      	ldr	r1, [pc, #320]	; (8010974 <HAL_SD_ConfigWideBusOperation+0x218>)
 8010832:	fba1 1303 	umull	r1, r3, r1, r3
 8010836:	0e1b      	lsrs	r3, r3, #24
 8010838:	429a      	cmp	r2, r3
 801083a:	d303      	bcc.n	8010844 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	695b      	ldr	r3, [r3, #20]
 8010840:	61bb      	str	r3, [r7, #24]
 8010842:	e05a      	b.n	80108fa <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010848:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801084c:	d103      	bne.n	8010856 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	695b      	ldr	r3, [r3, #20]
 8010852:	61bb      	str	r3, [r7, #24]
 8010854:	e051      	b.n	80108fa <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801085a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801085e:	d126      	bne.n	80108ae <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	695b      	ldr	r3, [r3, #20]
 8010864:	2b00      	cmp	r3, #0
 8010866:	d10e      	bne.n	8010886 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8010868:	69fb      	ldr	r3, [r7, #28]
 801086a:	4a43      	ldr	r2, [pc, #268]	; (8010978 <HAL_SD_ConfigWideBusOperation+0x21c>)
 801086c:	4293      	cmp	r3, r2
 801086e:	d906      	bls.n	801087e <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8010870:	69fb      	ldr	r3, [r7, #28]
 8010872:	4a40      	ldr	r2, [pc, #256]	; (8010974 <HAL_SD_ConfigWideBusOperation+0x218>)
 8010874:	fba2 2303 	umull	r2, r3, r2, r3
 8010878:	0e5b      	lsrs	r3, r3, #25
 801087a:	61bb      	str	r3, [r7, #24]
 801087c:	e03d      	b.n	80108fa <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	695b      	ldr	r3, [r3, #20]
 8010882:	61bb      	str	r3, [r7, #24]
 8010884:	e039      	b.n	80108fa <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	695b      	ldr	r3, [r3, #20]
 801088a:	005b      	lsls	r3, r3, #1
 801088c:	69fa      	ldr	r2, [r7, #28]
 801088e:	fbb2 f3f3 	udiv	r3, r2, r3
 8010892:	4a39      	ldr	r2, [pc, #228]	; (8010978 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8010894:	4293      	cmp	r3, r2
 8010896:	d906      	bls.n	80108a6 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8010898:	69fb      	ldr	r3, [r7, #28]
 801089a:	4a36      	ldr	r2, [pc, #216]	; (8010974 <HAL_SD_ConfigWideBusOperation+0x218>)
 801089c:	fba2 2303 	umull	r2, r3, r2, r3
 80108a0:	0e5b      	lsrs	r3, r3, #25
 80108a2:	61bb      	str	r3, [r7, #24]
 80108a4:	e029      	b.n	80108fa <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	695b      	ldr	r3, [r3, #20]
 80108aa:	61bb      	str	r3, [r7, #24]
 80108ac:	e025      	b.n	80108fa <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	695b      	ldr	r3, [r3, #20]
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	d10e      	bne.n	80108d4 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 80108b6:	69fb      	ldr	r3, [r7, #28]
 80108b8:	4a30      	ldr	r2, [pc, #192]	; (801097c <HAL_SD_ConfigWideBusOperation+0x220>)
 80108ba:	4293      	cmp	r3, r2
 80108bc:	d906      	bls.n	80108cc <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80108be:	69fb      	ldr	r3, [r7, #28]
 80108c0:	4a2c      	ldr	r2, [pc, #176]	; (8010974 <HAL_SD_ConfigWideBusOperation+0x218>)
 80108c2:	fba2 2303 	umull	r2, r3, r2, r3
 80108c6:	0e1b      	lsrs	r3, r3, #24
 80108c8:	61bb      	str	r3, [r7, #24]
 80108ca:	e016      	b.n	80108fa <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	695b      	ldr	r3, [r3, #20]
 80108d0:	61bb      	str	r3, [r7, #24]
 80108d2:	e012      	b.n	80108fa <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	695b      	ldr	r3, [r3, #20]
 80108d8:	005b      	lsls	r3, r3, #1
 80108da:	69fa      	ldr	r2, [r7, #28]
 80108dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80108e0:	4a26      	ldr	r2, [pc, #152]	; (801097c <HAL_SD_ConfigWideBusOperation+0x220>)
 80108e2:	4293      	cmp	r3, r2
 80108e4:	d906      	bls.n	80108f4 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80108e6:	69fb      	ldr	r3, [r7, #28]
 80108e8:	4a22      	ldr	r2, [pc, #136]	; (8010974 <HAL_SD_ConfigWideBusOperation+0x218>)
 80108ea:	fba2 2303 	umull	r2, r3, r2, r3
 80108ee:	0e1b      	lsrs	r3, r3, #24
 80108f0:	61bb      	str	r3, [r7, #24]
 80108f2:	e002      	b.n	80108fa <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	695b      	ldr	r3, [r3, #20]
 80108f8:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	681c      	ldr	r4, [r3, #0]
 80108fe:	466a      	mov	r2, sp
 8010900:	f107 0314 	add.w	r3, r7, #20
 8010904:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010908:	e882 0003 	stmia.w	r2, {r0, r1}
 801090c:	f107 0308 	add.w	r3, r7, #8
 8010910:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010912:	4620      	mov	r0, r4
 8010914:	f002 f950 	bl	8012bb8 <SDMMC_Init>
 8010918:	e008      	b.n	801092c <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801091e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 8010926:	2301      	movs	r3, #1
 8010928:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010934:	4618      	mov	r0, r3
 8010936:	f002 fa0b 	bl	8012d50 <SDMMC_CmdBlockLength>
 801093a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 801093c:	6a3b      	ldr	r3, [r7, #32]
 801093e:	2b00      	cmp	r3, #0
 8010940:	d00c      	beq.n	801095c <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	681b      	ldr	r3, [r3, #0]
 8010946:	4a0a      	ldr	r2, [pc, #40]	; (8010970 <HAL_SD_ConfigWideBusOperation+0x214>)
 8010948:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801094e:	6a3b      	ldr	r3, [r7, #32]
 8010950:	431a      	orrs	r2, r3
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8010956:	2301      	movs	r3, #1
 8010958:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	2201      	movs	r2, #1
 8010960:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8010964:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8010968:	4618      	mov	r0, r3
 801096a:	372c      	adds	r7, #44	; 0x2c
 801096c:	46bd      	mov	sp, r7
 801096e:	bd90      	pop	{r4, r7, pc}
 8010970:	1fe00fff 	.word	0x1fe00fff
 8010974:	55e63b89 	.word	0x55e63b89
 8010978:	02faf080 	.word	0x02faf080
 801097c:	017d7840 	.word	0x017d7840

08010980 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8010980:	b580      	push	{r7, lr}
 8010982:	b086      	sub	sp, #24
 8010984:	af00      	add	r7, sp, #0
 8010986:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8010988:	2300      	movs	r3, #0
 801098a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 801098c:	f107 030c 	add.w	r3, r7, #12
 8010990:	4619      	mov	r1, r3
 8010992:	6878      	ldr	r0, [r7, #4]
 8010994:	f000 fa40 	bl	8010e18 <SD_SendStatus>
 8010998:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 801099a:	697b      	ldr	r3, [r7, #20]
 801099c:	2b00      	cmp	r3, #0
 801099e:	d005      	beq.n	80109ac <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80109a4:	697b      	ldr	r3, [r7, #20]
 80109a6:	431a      	orrs	r2, r3
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80109ac:	68fb      	ldr	r3, [r7, #12]
 80109ae:	0a5b      	lsrs	r3, r3, #9
 80109b0:	f003 030f 	and.w	r3, r3, #15
 80109b4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80109b6:	693b      	ldr	r3, [r7, #16]
}
 80109b8:	4618      	mov	r0, r3
 80109ba:	3718      	adds	r7, #24
 80109bc:	46bd      	mov	sp, r7
 80109be:	bd80      	pop	{r7, pc}

080109c0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80109c0:	b580      	push	{r7, lr}
 80109c2:	b090      	sub	sp, #64	; 0x40
 80109c4:	af00      	add	r7, sp, #0
 80109c6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 80109c8:	2300      	movs	r3, #0
 80109ca:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 80109cc:	f7f8 fba0 	bl	8009110 <HAL_GetTick>
 80109d0:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	681b      	ldr	r3, [r3, #0]
 80109d6:	4618      	mov	r0, r3
 80109d8:	f002 f936 	bl	8012c48 <SDMMC_GetPowerState>
 80109dc:	4603      	mov	r3, r0
 80109de:	2b00      	cmp	r3, #0
 80109e0:	d102      	bne.n	80109e8 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80109e2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80109e6:	e0b5      	b.n	8010b54 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80109ec:	2b03      	cmp	r3, #3
 80109ee:	d02e      	beq.n	8010a4e <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	4618      	mov	r0, r3
 80109f6:	f002 fb43 	bl	8013080 <SDMMC_CmdSendCID>
 80109fa:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 80109fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	d001      	beq.n	8010a06 <SD_InitCard+0x46>
    {
      return errorstate;
 8010a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a04:	e0a6      	b.n	8010b54 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	681b      	ldr	r3, [r3, #0]
 8010a0a:	2100      	movs	r1, #0
 8010a0c:	4618      	mov	r0, r3
 8010a0e:	f002 f960 	bl	8012cd2 <SDMMC_GetResponse>
 8010a12:	4602      	mov	r2, r0
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	2104      	movs	r1, #4
 8010a1e:	4618      	mov	r0, r3
 8010a20:	f002 f957 	bl	8012cd2 <SDMMC_GetResponse>
 8010a24:	4602      	mov	r2, r0
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	681b      	ldr	r3, [r3, #0]
 8010a2e:	2108      	movs	r1, #8
 8010a30:	4618      	mov	r0, r3
 8010a32:	f002 f94e 	bl	8012cd2 <SDMMC_GetResponse>
 8010a36:	4602      	mov	r2, r0
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	681b      	ldr	r3, [r3, #0]
 8010a40:	210c      	movs	r1, #12
 8010a42:	4618      	mov	r0, r3
 8010a44:	f002 f945 	bl	8012cd2 <SDMMC_GetResponse>
 8010a48:	4602      	mov	r2, r0
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a52:	2b03      	cmp	r3, #3
 8010a54:	d01d      	beq.n	8010a92 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8010a56:	e019      	b.n	8010a8c <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	681b      	ldr	r3, [r3, #0]
 8010a5c:	f107 020a 	add.w	r2, r7, #10
 8010a60:	4611      	mov	r1, r2
 8010a62:	4618      	mov	r0, r3
 8010a64:	f002 fb4b 	bl	80130fe <SDMMC_CmdSetRelAdd>
 8010a68:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8010a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d001      	beq.n	8010a74 <SD_InitCard+0xb4>
      {
        return errorstate;
 8010a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a72:	e06f      	b.n	8010b54 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8010a74:	f7f8 fb4c 	bl	8009110 <HAL_GetTick>
 8010a78:	4602      	mov	r2, r0
 8010a7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a7c:	1ad3      	subs	r3, r2, r3
 8010a7e:	f241 3287 	movw	r2, #4999	; 0x1387
 8010a82:	4293      	cmp	r3, r2
 8010a84:	d902      	bls.n	8010a8c <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8010a86:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010a8a:	e063      	b.n	8010b54 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8010a8c:	897b      	ldrh	r3, [r7, #10]
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d0e2      	beq.n	8010a58 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a96:	2b03      	cmp	r3, #3
 8010a98:	d036      	beq.n	8010b08 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8010a9a:	897b      	ldrh	r3, [r7, #10]
 8010a9c:	461a      	mov	r2, r3
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	681a      	ldr	r2, [r3, #0]
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010aaa:	041b      	lsls	r3, r3, #16
 8010aac:	4619      	mov	r1, r3
 8010aae:	4610      	mov	r0, r2
 8010ab0:	f002 fb05 	bl	80130be <SDMMC_CmdSendCSD>
 8010ab4:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8010ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	d001      	beq.n	8010ac0 <SD_InitCard+0x100>
    {
      return errorstate;
 8010abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010abe:	e049      	b.n	8010b54 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	681b      	ldr	r3, [r3, #0]
 8010ac4:	2100      	movs	r1, #0
 8010ac6:	4618      	mov	r0, r3
 8010ac8:	f002 f903 	bl	8012cd2 <SDMMC_GetResponse>
 8010acc:	4602      	mov	r2, r0
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	681b      	ldr	r3, [r3, #0]
 8010ad6:	2104      	movs	r1, #4
 8010ad8:	4618      	mov	r0, r3
 8010ada:	f002 f8fa 	bl	8012cd2 <SDMMC_GetResponse>
 8010ade:	4602      	mov	r2, r0
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	681b      	ldr	r3, [r3, #0]
 8010ae8:	2108      	movs	r1, #8
 8010aea:	4618      	mov	r0, r3
 8010aec:	f002 f8f1 	bl	8012cd2 <SDMMC_GetResponse>
 8010af0:	4602      	mov	r2, r0
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	210c      	movs	r1, #12
 8010afc:	4618      	mov	r0, r3
 8010afe:	f002 f8e8 	bl	8012cd2 <SDMMC_GetResponse>
 8010b02:	4602      	mov	r2, r0
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	681b      	ldr	r3, [r3, #0]
 8010b0c:	2104      	movs	r1, #4
 8010b0e:	4618      	mov	r0, r3
 8010b10:	f002 f8df 	bl	8012cd2 <SDMMC_GetResponse>
 8010b14:	4603      	mov	r3, r0
 8010b16:	0d1a      	lsrs	r2, r3, #20
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8010b1c:	f107 030c 	add.w	r3, r7, #12
 8010b20:	4619      	mov	r1, r3
 8010b22:	6878      	ldr	r0, [r7, #4]
 8010b24:	f7ff fb8c 	bl	8010240 <HAL_SD_GetCardCSD>
 8010b28:	4603      	mov	r3, r0
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d002      	beq.n	8010b34 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8010b2e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8010b32:	e00f      	b.n	8010b54 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	681a      	ldr	r2, [r3, #0]
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010b3c:	041b      	lsls	r3, r3, #16
 8010b3e:	4619      	mov	r1, r3
 8010b40:	4610      	mov	r0, r2
 8010b42:	f002 f9b4 	bl	8012eae <SDMMC_CmdSelDesel>
 8010b46:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8010b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d001      	beq.n	8010b52 <SD_InitCard+0x192>
  {
    return errorstate;
 8010b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b50:	e000      	b.n	8010b54 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8010b52:	2300      	movs	r3, #0
}
 8010b54:	4618      	mov	r0, r3
 8010b56:	3740      	adds	r7, #64	; 0x40
 8010b58:	46bd      	mov	sp, r7
 8010b5a:	bd80      	pop	{r7, pc}

08010b5c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8010b5c:	b580      	push	{r7, lr}
 8010b5e:	b086      	sub	sp, #24
 8010b60:	af00      	add	r7, sp, #0
 8010b62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010b64:	2300      	movs	r3, #0
 8010b66:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8010b68:	2300      	movs	r3, #0
 8010b6a:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8010b6c:	2300      	movs	r3, #0
 8010b6e:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	681b      	ldr	r3, [r3, #0]
 8010b74:	4618      	mov	r0, r3
 8010b76:	f002 f9bd 	bl	8012ef4 <SDMMC_CmdGoIdleState>
 8010b7a:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8010b7c:	68fb      	ldr	r3, [r7, #12]
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	d001      	beq.n	8010b86 <SD_PowerON+0x2a>
  {
    return errorstate;
 8010b82:	68fb      	ldr	r3, [r7, #12]
 8010b84:	e072      	b.n	8010c6c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	681b      	ldr	r3, [r3, #0]
 8010b8a:	4618      	mov	r0, r3
 8010b8c:	f002 f9d0 	bl	8012f30 <SDMMC_CmdOperCond>
 8010b90:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8010b92:	68fb      	ldr	r3, [r7, #12]
 8010b94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010b98:	d10d      	bne.n	8010bb6 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	2200      	movs	r2, #0
 8010b9e:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	681b      	ldr	r3, [r3, #0]
 8010ba4:	4618      	mov	r0, r3
 8010ba6:	f002 f9a5 	bl	8012ef4 <SDMMC_CmdGoIdleState>
 8010baa:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8010bac:	68fb      	ldr	r3, [r7, #12]
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	d004      	beq.n	8010bbc <SD_PowerON+0x60>
    {
      return errorstate;
 8010bb2:	68fb      	ldr	r3, [r7, #12]
 8010bb4:	e05a      	b.n	8010c6c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	2201      	movs	r2, #1
 8010bba:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010bc0:	2b01      	cmp	r3, #1
 8010bc2:	d137      	bne.n	8010c34 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	681b      	ldr	r3, [r3, #0]
 8010bc8:	2100      	movs	r1, #0
 8010bca:	4618      	mov	r0, r3
 8010bcc:	f002 f9d0 	bl	8012f70 <SDMMC_CmdAppCommand>
 8010bd0:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8010bd2:	68fb      	ldr	r3, [r7, #12]
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d02d      	beq.n	8010c34 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8010bd8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8010bdc:	e046      	b.n	8010c6c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	681b      	ldr	r3, [r3, #0]
 8010be2:	2100      	movs	r1, #0
 8010be4:	4618      	mov	r0, r3
 8010be6:	f002 f9c3 	bl	8012f70 <SDMMC_CmdAppCommand>
 8010bea:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8010bec:	68fb      	ldr	r3, [r7, #12]
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	d001      	beq.n	8010bf6 <SD_PowerON+0x9a>
    {
      return errorstate;
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	e03a      	b.n	8010c6c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	681b      	ldr	r3, [r3, #0]
 8010bfa:	491e      	ldr	r1, [pc, #120]	; (8010c74 <SD_PowerON+0x118>)
 8010bfc:	4618      	mov	r0, r3
 8010bfe:	f002 f9da 	bl	8012fb6 <SDMMC_CmdAppOperCommand>
 8010c02:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8010c04:	68fb      	ldr	r3, [r7, #12]
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	d002      	beq.n	8010c10 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8010c0a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8010c0e:	e02d      	b.n	8010c6c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	681b      	ldr	r3, [r3, #0]
 8010c14:	2100      	movs	r1, #0
 8010c16:	4618      	mov	r0, r3
 8010c18:	f002 f85b 	bl	8012cd2 <SDMMC_GetResponse>
 8010c1c:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8010c1e:	697b      	ldr	r3, [r7, #20]
 8010c20:	0fdb      	lsrs	r3, r3, #31
 8010c22:	2b01      	cmp	r3, #1
 8010c24:	d101      	bne.n	8010c2a <SD_PowerON+0xce>
 8010c26:	2301      	movs	r3, #1
 8010c28:	e000      	b.n	8010c2c <SD_PowerON+0xd0>
 8010c2a:	2300      	movs	r3, #0
 8010c2c:	613b      	str	r3, [r7, #16]

    count++;
 8010c2e:	68bb      	ldr	r3, [r7, #8]
 8010c30:	3301      	adds	r3, #1
 8010c32:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8010c34:	68bb      	ldr	r3, [r7, #8]
 8010c36:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8010c3a:	4293      	cmp	r3, r2
 8010c3c:	d802      	bhi.n	8010c44 <SD_PowerON+0xe8>
 8010c3e:	693b      	ldr	r3, [r7, #16]
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d0cc      	beq.n	8010bde <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8010c44:	68bb      	ldr	r3, [r7, #8]
 8010c46:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8010c4a:	4293      	cmp	r3, r2
 8010c4c:	d902      	bls.n	8010c54 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8010c4e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8010c52:	e00b      	b.n	8010c6c <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	2200      	movs	r2, #0
 8010c58:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8010c5a:	697b      	ldr	r3, [r7, #20]
 8010c5c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	d002      	beq.n	8010c6a <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	2201      	movs	r2, #1
 8010c68:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8010c6a:	2300      	movs	r3, #0
}
 8010c6c:	4618      	mov	r0, r3
 8010c6e:	3718      	adds	r7, #24
 8010c70:	46bd      	mov	sp, r7
 8010c72:	bd80      	pop	{r7, pc}
 8010c74:	c1100000 	.word	0xc1100000

08010c78 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8010c78:	b580      	push	{r7, lr}
 8010c7a:	b08c      	sub	sp, #48	; 0x30
 8010c7c:	af00      	add	r7, sp, #0
 8010c7e:	6078      	str	r0, [r7, #4]
 8010c80:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8010c82:	f7f8 fa45 	bl	8009110 <HAL_GetTick>
 8010c86:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8010c88:	683b      	ldr	r3, [r7, #0]
 8010c8a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	681b      	ldr	r3, [r3, #0]
 8010c90:	2100      	movs	r1, #0
 8010c92:	4618      	mov	r0, r3
 8010c94:	f002 f81d 	bl	8012cd2 <SDMMC_GetResponse>
 8010c98:	4603      	mov	r3, r0
 8010c9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010c9e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010ca2:	d102      	bne.n	8010caa <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8010ca4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010ca8:	e0b0      	b.n	8010e0c <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	681b      	ldr	r3, [r3, #0]
 8010cae:	2140      	movs	r1, #64	; 0x40
 8010cb0:	4618      	mov	r0, r3
 8010cb2:	f002 f84d 	bl	8012d50 <SDMMC_CmdBlockLength>
 8010cb6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8010cb8:	6a3b      	ldr	r3, [r7, #32]
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d005      	beq.n	8010cca <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8010cc6:	6a3b      	ldr	r3, [r7, #32]
 8010cc8:	e0a0      	b.n	8010e0c <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	681a      	ldr	r2, [r3, #0]
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010cd2:	041b      	lsls	r3, r3, #16
 8010cd4:	4619      	mov	r1, r3
 8010cd6:	4610      	mov	r0, r2
 8010cd8:	f002 f94a 	bl	8012f70 <SDMMC_CmdAppCommand>
 8010cdc:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8010cde:	6a3b      	ldr	r3, [r7, #32]
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d005      	beq.n	8010cf0 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8010cec:	6a3b      	ldr	r3, [r7, #32]
 8010cee:	e08d      	b.n	8010e0c <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8010cf0:	f04f 33ff 	mov.w	r3, #4294967295
 8010cf4:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8010cf6:	2340      	movs	r3, #64	; 0x40
 8010cf8:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8010cfa:	2360      	movs	r3, #96	; 0x60
 8010cfc:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8010cfe:	2302      	movs	r3, #2
 8010d00:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8010d02:	2300      	movs	r3, #0
 8010d04:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8010d06:	2301      	movs	r3, #1
 8010d08:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	681b      	ldr	r3, [r3, #0]
 8010d0e:	f107 0208 	add.w	r2, r7, #8
 8010d12:	4611      	mov	r1, r2
 8010d14:	4618      	mov	r0, r3
 8010d16:	f001 ffef 	bl	8012cf8 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	681b      	ldr	r3, [r3, #0]
 8010d1e:	4618      	mov	r0, r3
 8010d20:	f002 fa32 	bl	8013188 <SDMMC_CmdStatusRegister>
 8010d24:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8010d26:	6a3b      	ldr	r3, [r7, #32]
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	d02b      	beq.n	8010d84 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8010d34:	6a3b      	ldr	r3, [r7, #32]
 8010d36:	e069      	b.n	8010e0c <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	681b      	ldr	r3, [r3, #0]
 8010d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d013      	beq.n	8010d6e <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8010d46:	2300      	movs	r3, #0
 8010d48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010d4a:	e00d      	b.n	8010d68 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	681b      	ldr	r3, [r3, #0]
 8010d50:	4618      	mov	r0, r3
 8010d52:	f001 ff5b 	bl	8012c0c <SDMMC_ReadFIFO>
 8010d56:	4602      	mov	r2, r0
 8010d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d5a:	601a      	str	r2, [r3, #0]
        pData++;
 8010d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d5e:	3304      	adds	r3, #4
 8010d60:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 8010d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d64:	3301      	adds	r3, #1
 8010d66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d6a:	2b07      	cmp	r3, #7
 8010d6c:	d9ee      	bls.n	8010d4c <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8010d6e:	f7f8 f9cf 	bl	8009110 <HAL_GetTick>
 8010d72:	4602      	mov	r2, r0
 8010d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d76:	1ad3      	subs	r3, r2, r3
 8010d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d7c:	d102      	bne.n	8010d84 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8010d7e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010d82:	e043      	b.n	8010e0c <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	681b      	ldr	r3, [r3, #0]
 8010d88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d8a:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d0d2      	beq.n	8010d38 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	681b      	ldr	r3, [r3, #0]
 8010d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d98:	f003 0308 	and.w	r3, r3, #8
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	d001      	beq.n	8010da4 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8010da0:	2308      	movs	r3, #8
 8010da2:	e033      	b.n	8010e0c <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	681b      	ldr	r3, [r3, #0]
 8010da8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010daa:	f003 0302 	and.w	r3, r3, #2
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	d001      	beq.n	8010db6 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8010db2:	2302      	movs	r3, #2
 8010db4:	e02a      	b.n	8010e0c <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	681b      	ldr	r3, [r3, #0]
 8010dba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010dbc:	f003 0320 	and.w	r3, r3, #32
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	d017      	beq.n	8010df4 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8010dc4:	2320      	movs	r3, #32
 8010dc6:	e021      	b.n	8010e0c <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	681b      	ldr	r3, [r3, #0]
 8010dcc:	4618      	mov	r0, r3
 8010dce:	f001 ff1d 	bl	8012c0c <SDMMC_ReadFIFO>
 8010dd2:	4602      	mov	r2, r0
 8010dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dd6:	601a      	str	r2, [r3, #0]
    pData++;
 8010dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dda:	3304      	adds	r3, #4
 8010ddc:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8010dde:	f7f8 f997 	bl	8009110 <HAL_GetTick>
 8010de2:	4602      	mov	r2, r0
 8010de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010de6:	1ad3      	subs	r3, r2, r3
 8010de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010dec:	d102      	bne.n	8010df4 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8010dee:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010df2:	e00b      	b.n	8010e0c <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	681b      	ldr	r3, [r3, #0]
 8010df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010dfa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	d1e2      	bne.n	8010dc8 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	681b      	ldr	r3, [r3, #0]
 8010e06:	4a03      	ldr	r2, [pc, #12]	; (8010e14 <SD_SendSDStatus+0x19c>)
 8010e08:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8010e0a:	2300      	movs	r3, #0
}
 8010e0c:	4618      	mov	r0, r3
 8010e0e:	3730      	adds	r7, #48	; 0x30
 8010e10:	46bd      	mov	sp, r7
 8010e12:	bd80      	pop	{r7, pc}
 8010e14:	18000f3a 	.word	0x18000f3a

08010e18 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8010e18:	b580      	push	{r7, lr}
 8010e1a:	b084      	sub	sp, #16
 8010e1c:	af00      	add	r7, sp, #0
 8010e1e:	6078      	str	r0, [r7, #4]
 8010e20:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8010e22:	683b      	ldr	r3, [r7, #0]
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d102      	bne.n	8010e2e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8010e28:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8010e2c:	e018      	b.n	8010e60 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	681a      	ldr	r2, [r3, #0]
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010e36:	041b      	lsls	r3, r3, #16
 8010e38:	4619      	mov	r1, r3
 8010e3a:	4610      	mov	r0, r2
 8010e3c:	f002 f981 	bl	8013142 <SDMMC_CmdSendStatus>
 8010e40:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8010e42:	68fb      	ldr	r3, [r7, #12]
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	d001      	beq.n	8010e4c <SD_SendStatus+0x34>
  {
    return errorstate;
 8010e48:	68fb      	ldr	r3, [r7, #12]
 8010e4a:	e009      	b.n	8010e60 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	681b      	ldr	r3, [r3, #0]
 8010e50:	2100      	movs	r1, #0
 8010e52:	4618      	mov	r0, r3
 8010e54:	f001 ff3d 	bl	8012cd2 <SDMMC_GetResponse>
 8010e58:	4602      	mov	r2, r0
 8010e5a:	683b      	ldr	r3, [r7, #0]
 8010e5c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8010e5e:	2300      	movs	r3, #0
}
 8010e60:	4618      	mov	r0, r3
 8010e62:	3710      	adds	r7, #16
 8010e64:	46bd      	mov	sp, r7
 8010e66:	bd80      	pop	{r7, pc}

08010e68 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8010e68:	b580      	push	{r7, lr}
 8010e6a:	b086      	sub	sp, #24
 8010e6c:	af00      	add	r7, sp, #0
 8010e6e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8010e70:	2300      	movs	r3, #0
 8010e72:	60fb      	str	r3, [r7, #12]
 8010e74:	2300      	movs	r3, #0
 8010e76:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	681b      	ldr	r3, [r3, #0]
 8010e7c:	2100      	movs	r1, #0
 8010e7e:	4618      	mov	r0, r3
 8010e80:	f001 ff27 	bl	8012cd2 <SDMMC_GetResponse>
 8010e84:	4603      	mov	r3, r0
 8010e86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010e8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010e8e:	d102      	bne.n	8010e96 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8010e90:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010e94:	e02f      	b.n	8010ef6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8010e96:	f107 030c 	add.w	r3, r7, #12
 8010e9a:	4619      	mov	r1, r3
 8010e9c:	6878      	ldr	r0, [r7, #4]
 8010e9e:	f000 f879 	bl	8010f94 <SD_FindSCR>
 8010ea2:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8010ea4:	697b      	ldr	r3, [r7, #20]
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	d001      	beq.n	8010eae <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8010eaa:	697b      	ldr	r3, [r7, #20]
 8010eac:	e023      	b.n	8010ef6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8010eae:	693b      	ldr	r3, [r7, #16]
 8010eb0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	d01c      	beq.n	8010ef2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	681a      	ldr	r2, [r3, #0]
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010ec0:	041b      	lsls	r3, r3, #16
 8010ec2:	4619      	mov	r1, r3
 8010ec4:	4610      	mov	r0, r2
 8010ec6:	f002 f853 	bl	8012f70 <SDMMC_CmdAppCommand>
 8010eca:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8010ecc:	697b      	ldr	r3, [r7, #20]
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	d001      	beq.n	8010ed6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8010ed2:	697b      	ldr	r3, [r7, #20]
 8010ed4:	e00f      	b.n	8010ef6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	681b      	ldr	r3, [r3, #0]
 8010eda:	2102      	movs	r1, #2
 8010edc:	4618      	mov	r0, r3
 8010ede:	f002 f88a 	bl	8012ff6 <SDMMC_CmdBusWidth>
 8010ee2:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8010ee4:	697b      	ldr	r3, [r7, #20]
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	d001      	beq.n	8010eee <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8010eea:	697b      	ldr	r3, [r7, #20]
 8010eec:	e003      	b.n	8010ef6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8010eee:	2300      	movs	r3, #0
 8010ef0:	e001      	b.n	8010ef6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8010ef2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8010ef6:	4618      	mov	r0, r3
 8010ef8:	3718      	adds	r7, #24
 8010efa:	46bd      	mov	sp, r7
 8010efc:	bd80      	pop	{r7, pc}

08010efe <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8010efe:	b580      	push	{r7, lr}
 8010f00:	b086      	sub	sp, #24
 8010f02:	af00      	add	r7, sp, #0
 8010f04:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8010f06:	2300      	movs	r3, #0
 8010f08:	60fb      	str	r3, [r7, #12]
 8010f0a:	2300      	movs	r3, #0
 8010f0c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	681b      	ldr	r3, [r3, #0]
 8010f12:	2100      	movs	r1, #0
 8010f14:	4618      	mov	r0, r3
 8010f16:	f001 fedc 	bl	8012cd2 <SDMMC_GetResponse>
 8010f1a:	4603      	mov	r3, r0
 8010f1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010f20:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010f24:	d102      	bne.n	8010f2c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8010f26:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010f2a:	e02f      	b.n	8010f8c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8010f2c:	f107 030c 	add.w	r3, r7, #12
 8010f30:	4619      	mov	r1, r3
 8010f32:	6878      	ldr	r0, [r7, #4]
 8010f34:	f000 f82e 	bl	8010f94 <SD_FindSCR>
 8010f38:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8010f3a:	697b      	ldr	r3, [r7, #20]
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	d001      	beq.n	8010f44 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8010f40:	697b      	ldr	r3, [r7, #20]
 8010f42:	e023      	b.n	8010f8c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8010f44:	693b      	ldr	r3, [r7, #16]
 8010f46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	d01c      	beq.n	8010f88 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	681a      	ldr	r2, [r3, #0]
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010f56:	041b      	lsls	r3, r3, #16
 8010f58:	4619      	mov	r1, r3
 8010f5a:	4610      	mov	r0, r2
 8010f5c:	f002 f808 	bl	8012f70 <SDMMC_CmdAppCommand>
 8010f60:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8010f62:	697b      	ldr	r3, [r7, #20]
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	d001      	beq.n	8010f6c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8010f68:	697b      	ldr	r3, [r7, #20]
 8010f6a:	e00f      	b.n	8010f8c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	681b      	ldr	r3, [r3, #0]
 8010f70:	2100      	movs	r1, #0
 8010f72:	4618      	mov	r0, r3
 8010f74:	f002 f83f 	bl	8012ff6 <SDMMC_CmdBusWidth>
 8010f78:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8010f7a:	697b      	ldr	r3, [r7, #20]
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	d001      	beq.n	8010f84 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8010f80:	697b      	ldr	r3, [r7, #20]
 8010f82:	e003      	b.n	8010f8c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8010f84:	2300      	movs	r3, #0
 8010f86:	e001      	b.n	8010f8c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8010f88:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8010f8c:	4618      	mov	r0, r3
 8010f8e:	3718      	adds	r7, #24
 8010f90:	46bd      	mov	sp, r7
 8010f92:	bd80      	pop	{r7, pc}

08010f94 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8010f94:	b580      	push	{r7, lr}
 8010f96:	b08e      	sub	sp, #56	; 0x38
 8010f98:	af00      	add	r7, sp, #0
 8010f9a:	6078      	str	r0, [r7, #4]
 8010f9c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8010f9e:	f7f8 f8b7 	bl	8009110 <HAL_GetTick>
 8010fa2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8010fa4:	2300      	movs	r3, #0
 8010fa6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8010fa8:	2300      	movs	r3, #0
 8010faa:	60bb      	str	r3, [r7, #8]
 8010fac:	2300      	movs	r3, #0
 8010fae:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8010fb0:	683b      	ldr	r3, [r7, #0]
 8010fb2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	681b      	ldr	r3, [r3, #0]
 8010fb8:	2108      	movs	r1, #8
 8010fba:	4618      	mov	r0, r3
 8010fbc:	f001 fec8 	bl	8012d50 <SDMMC_CmdBlockLength>
 8010fc0:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8010fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d001      	beq.n	8010fcc <SD_FindSCR+0x38>
  {
    return errorstate;
 8010fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fca:	e0ad      	b.n	8011128 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	681a      	ldr	r2, [r3, #0]
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010fd4:	041b      	lsls	r3, r3, #16
 8010fd6:	4619      	mov	r1, r3
 8010fd8:	4610      	mov	r0, r2
 8010fda:	f001 ffc9 	bl	8012f70 <SDMMC_CmdAppCommand>
 8010fde:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8010fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	d001      	beq.n	8010fea <SD_FindSCR+0x56>
  {
    return errorstate;
 8010fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fe8:	e09e      	b.n	8011128 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8010fea:	f04f 33ff 	mov.w	r3, #4294967295
 8010fee:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8010ff0:	2308      	movs	r3, #8
 8010ff2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8010ff4:	2330      	movs	r3, #48	; 0x30
 8010ff6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8010ff8:	2302      	movs	r3, #2
 8010ffa:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8010ffc:	2300      	movs	r3, #0
 8010ffe:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8011000:	2301      	movs	r3, #1
 8011002:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	681b      	ldr	r3, [r3, #0]
 8011008:	f107 0210 	add.w	r2, r7, #16
 801100c:	4611      	mov	r1, r2
 801100e:	4618      	mov	r0, r3
 8011010:	f001 fe72 	bl	8012cf8 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	681b      	ldr	r3, [r3, #0]
 8011018:	4618      	mov	r0, r3
 801101a:	f002 f80f 	bl	801303c <SDMMC_CmdSendSCR>
 801101e:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8011020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011022:	2b00      	cmp	r3, #0
 8011024:	d027      	beq.n	8011076 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8011026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011028:	e07e      	b.n	8011128 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	681b      	ldr	r3, [r3, #0]
 801102e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011030:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8011034:	2b00      	cmp	r3, #0
 8011036:	d113      	bne.n	8011060 <SD_FindSCR+0xcc>
 8011038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801103a:	2b00      	cmp	r3, #0
 801103c:	d110      	bne.n	8011060 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	681b      	ldr	r3, [r3, #0]
 8011042:	4618      	mov	r0, r3
 8011044:	f001 fde2 	bl	8012c0c <SDMMC_ReadFIFO>
 8011048:	4603      	mov	r3, r0
 801104a:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	681b      	ldr	r3, [r3, #0]
 8011050:	4618      	mov	r0, r3
 8011052:	f001 fddb 	bl	8012c0c <SDMMC_ReadFIFO>
 8011056:	4603      	mov	r3, r0
 8011058:	60fb      	str	r3, [r7, #12]
      index++;
 801105a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801105c:	3301      	adds	r3, #1
 801105e:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8011060:	f7f8 f856 	bl	8009110 <HAL_GetTick>
 8011064:	4602      	mov	r2, r0
 8011066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011068:	1ad3      	subs	r3, r2, r3
 801106a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801106e:	d102      	bne.n	8011076 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8011070:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011074:	e058      	b.n	8011128 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	681b      	ldr	r3, [r3, #0]
 801107a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801107c:	f240 532a 	movw	r3, #1322	; 0x52a
 8011080:	4013      	ands	r3, r2
 8011082:	2b00      	cmp	r3, #0
 8011084:	d0d1      	beq.n	801102a <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	681b      	ldr	r3, [r3, #0]
 801108a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801108c:	f003 0308 	and.w	r3, r3, #8
 8011090:	2b00      	cmp	r3, #0
 8011092:	d005      	beq.n	80110a0 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	681b      	ldr	r3, [r3, #0]
 8011098:	2208      	movs	r2, #8
 801109a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 801109c:	2308      	movs	r3, #8
 801109e:	e043      	b.n	8011128 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	681b      	ldr	r3, [r3, #0]
 80110a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80110a6:	f003 0302 	and.w	r3, r3, #2
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	d005      	beq.n	80110ba <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	681b      	ldr	r3, [r3, #0]
 80110b2:	2202      	movs	r2, #2
 80110b4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80110b6:	2302      	movs	r3, #2
 80110b8:	e036      	b.n	8011128 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	681b      	ldr	r3, [r3, #0]
 80110be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80110c0:	f003 0320 	and.w	r3, r3, #32
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	d005      	beq.n	80110d4 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	681b      	ldr	r3, [r3, #0]
 80110cc:	2220      	movs	r2, #32
 80110ce:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80110d0:	2320      	movs	r3, #32
 80110d2:	e029      	b.n	8011128 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	681b      	ldr	r3, [r3, #0]
 80110d8:	4a15      	ldr	r2, [pc, #84]	; (8011130 <SD_FindSCR+0x19c>)
 80110da:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 80110dc:	68fb      	ldr	r3, [r7, #12]
 80110de:	061a      	lsls	r2, r3, #24
 80110e0:	68fb      	ldr	r3, [r7, #12]
 80110e2:	021b      	lsls	r3, r3, #8
 80110e4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80110e8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80110ea:	68fb      	ldr	r3, [r7, #12]
 80110ec:	0a1b      	lsrs	r3, r3, #8
 80110ee:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 80110f2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80110f4:	68fb      	ldr	r3, [r7, #12]
 80110f6:	0e1b      	lsrs	r3, r3, #24
 80110f8:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 80110fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110fc:	601a      	str	r2, [r3, #0]
    scr++;
 80110fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011100:	3304      	adds	r3, #4
 8011102:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8011104:	68bb      	ldr	r3, [r7, #8]
 8011106:	061a      	lsls	r2, r3, #24
 8011108:	68bb      	ldr	r3, [r7, #8]
 801110a:	021b      	lsls	r3, r3, #8
 801110c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8011110:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8011112:	68bb      	ldr	r3, [r7, #8]
 8011114:	0a1b      	lsrs	r3, r3, #8
 8011116:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 801111a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 801111c:	68bb      	ldr	r3, [r7, #8]
 801111e:	0e1b      	lsrs	r3, r3, #24
 8011120:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8011122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011124:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8011126:	2300      	movs	r3, #0
}
 8011128:	4618      	mov	r0, r3
 801112a:	3738      	adds	r7, #56	; 0x38
 801112c:	46bd      	mov	sp, r7
 801112e:	bd80      	pop	{r7, pc}
 8011130:	18000f3a 	.word	0x18000f3a

08011134 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8011134:	b580      	push	{r7, lr}
 8011136:	b082      	sub	sp, #8
 8011138:	af00      	add	r7, sp, #0
 801113a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	2b00      	cmp	r3, #0
 8011140:	d101      	bne.n	8011146 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8011142:	2301      	movs	r3, #1
 8011144:	e049      	b.n	80111da <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801114c:	b2db      	uxtb	r3, r3
 801114e:	2b00      	cmp	r3, #0
 8011150:	d106      	bne.n	8011160 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	2200      	movs	r2, #0
 8011156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801115a:	6878      	ldr	r0, [r7, #4]
 801115c:	f000 f841 	bl	80111e2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	2202      	movs	r2, #2
 8011164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	681a      	ldr	r2, [r3, #0]
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	3304      	adds	r3, #4
 8011170:	4619      	mov	r1, r3
 8011172:	4610      	mov	r0, r2
 8011174:	f000 fa00 	bl	8011578 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	2201      	movs	r2, #1
 801117c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	2201      	movs	r2, #1
 8011184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	2201      	movs	r2, #1
 801118c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	2201      	movs	r2, #1
 8011194:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	2201      	movs	r2, #1
 801119c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	2201      	movs	r2, #1
 80111a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	2201      	movs	r2, #1
 80111ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	2201      	movs	r2, #1
 80111b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	2201      	movs	r2, #1
 80111bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	2201      	movs	r2, #1
 80111c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	2201      	movs	r2, #1
 80111cc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	2201      	movs	r2, #1
 80111d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80111d8:	2300      	movs	r3, #0
}
 80111da:	4618      	mov	r0, r3
 80111dc:	3708      	adds	r7, #8
 80111de:	46bd      	mov	sp, r7
 80111e0:	bd80      	pop	{r7, pc}

080111e2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80111e2:	b480      	push	{r7}
 80111e4:	b083      	sub	sp, #12
 80111e6:	af00      	add	r7, sp, #0
 80111e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80111ea:	bf00      	nop
 80111ec:	370c      	adds	r7, #12
 80111ee:	46bd      	mov	sp, r7
 80111f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111f4:	4770      	bx	lr
	...

080111f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80111f8:	b480      	push	{r7}
 80111fa:	b085      	sub	sp, #20
 80111fc:	af00      	add	r7, sp, #0
 80111fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011206:	b2db      	uxtb	r3, r3
 8011208:	2b01      	cmp	r3, #1
 801120a:	d001      	beq.n	8011210 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801120c:	2301      	movs	r3, #1
 801120e:	e054      	b.n	80112ba <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	2202      	movs	r2, #2
 8011214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	681b      	ldr	r3, [r3, #0]
 801121c:	68da      	ldr	r2, [r3, #12]
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	681b      	ldr	r3, [r3, #0]
 8011222:	f042 0201 	orr.w	r2, r2, #1
 8011226:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	681b      	ldr	r3, [r3, #0]
 801122c:	4a26      	ldr	r2, [pc, #152]	; (80112c8 <HAL_TIM_Base_Start_IT+0xd0>)
 801122e:	4293      	cmp	r3, r2
 8011230:	d022      	beq.n	8011278 <HAL_TIM_Base_Start_IT+0x80>
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	681b      	ldr	r3, [r3, #0]
 8011236:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801123a:	d01d      	beq.n	8011278 <HAL_TIM_Base_Start_IT+0x80>
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	681b      	ldr	r3, [r3, #0]
 8011240:	4a22      	ldr	r2, [pc, #136]	; (80112cc <HAL_TIM_Base_Start_IT+0xd4>)
 8011242:	4293      	cmp	r3, r2
 8011244:	d018      	beq.n	8011278 <HAL_TIM_Base_Start_IT+0x80>
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	681b      	ldr	r3, [r3, #0]
 801124a:	4a21      	ldr	r2, [pc, #132]	; (80112d0 <HAL_TIM_Base_Start_IT+0xd8>)
 801124c:	4293      	cmp	r3, r2
 801124e:	d013      	beq.n	8011278 <HAL_TIM_Base_Start_IT+0x80>
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	681b      	ldr	r3, [r3, #0]
 8011254:	4a1f      	ldr	r2, [pc, #124]	; (80112d4 <HAL_TIM_Base_Start_IT+0xdc>)
 8011256:	4293      	cmp	r3, r2
 8011258:	d00e      	beq.n	8011278 <HAL_TIM_Base_Start_IT+0x80>
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	681b      	ldr	r3, [r3, #0]
 801125e:	4a1e      	ldr	r2, [pc, #120]	; (80112d8 <HAL_TIM_Base_Start_IT+0xe0>)
 8011260:	4293      	cmp	r3, r2
 8011262:	d009      	beq.n	8011278 <HAL_TIM_Base_Start_IT+0x80>
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	681b      	ldr	r3, [r3, #0]
 8011268:	4a1c      	ldr	r2, [pc, #112]	; (80112dc <HAL_TIM_Base_Start_IT+0xe4>)
 801126a:	4293      	cmp	r3, r2
 801126c:	d004      	beq.n	8011278 <HAL_TIM_Base_Start_IT+0x80>
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	681b      	ldr	r3, [r3, #0]
 8011272:	4a1b      	ldr	r2, [pc, #108]	; (80112e0 <HAL_TIM_Base_Start_IT+0xe8>)
 8011274:	4293      	cmp	r3, r2
 8011276:	d115      	bne.n	80112a4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	681b      	ldr	r3, [r3, #0]
 801127c:	689a      	ldr	r2, [r3, #8]
 801127e:	4b19      	ldr	r3, [pc, #100]	; (80112e4 <HAL_TIM_Base_Start_IT+0xec>)
 8011280:	4013      	ands	r3, r2
 8011282:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011284:	68fb      	ldr	r3, [r7, #12]
 8011286:	2b06      	cmp	r3, #6
 8011288:	d015      	beq.n	80112b6 <HAL_TIM_Base_Start_IT+0xbe>
 801128a:	68fb      	ldr	r3, [r7, #12]
 801128c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011290:	d011      	beq.n	80112b6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	681b      	ldr	r3, [r3, #0]
 8011296:	681a      	ldr	r2, [r3, #0]
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	681b      	ldr	r3, [r3, #0]
 801129c:	f042 0201 	orr.w	r2, r2, #1
 80112a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80112a2:	e008      	b.n	80112b6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	681b      	ldr	r3, [r3, #0]
 80112a8:	681a      	ldr	r2, [r3, #0]
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	681b      	ldr	r3, [r3, #0]
 80112ae:	f042 0201 	orr.w	r2, r2, #1
 80112b2:	601a      	str	r2, [r3, #0]
 80112b4:	e000      	b.n	80112b8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80112b6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80112b8:	2300      	movs	r3, #0
}
 80112ba:	4618      	mov	r0, r3
 80112bc:	3714      	adds	r7, #20
 80112be:	46bd      	mov	sp, r7
 80112c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112c4:	4770      	bx	lr
 80112c6:	bf00      	nop
 80112c8:	40010000 	.word	0x40010000
 80112cc:	40000400 	.word	0x40000400
 80112d0:	40000800 	.word	0x40000800
 80112d4:	40000c00 	.word	0x40000c00
 80112d8:	40010400 	.word	0x40010400
 80112dc:	40001800 	.word	0x40001800
 80112e0:	40014000 	.word	0x40014000
 80112e4:	00010007 	.word	0x00010007

080112e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80112e8:	b580      	push	{r7, lr}
 80112ea:	b082      	sub	sp, #8
 80112ec:	af00      	add	r7, sp, #0
 80112ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	681b      	ldr	r3, [r3, #0]
 80112f4:	691b      	ldr	r3, [r3, #16]
 80112f6:	f003 0302 	and.w	r3, r3, #2
 80112fa:	2b02      	cmp	r3, #2
 80112fc:	d122      	bne.n	8011344 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	681b      	ldr	r3, [r3, #0]
 8011302:	68db      	ldr	r3, [r3, #12]
 8011304:	f003 0302 	and.w	r3, r3, #2
 8011308:	2b02      	cmp	r3, #2
 801130a:	d11b      	bne.n	8011344 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	681b      	ldr	r3, [r3, #0]
 8011310:	f06f 0202 	mvn.w	r2, #2
 8011314:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	2201      	movs	r2, #1
 801131a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	681b      	ldr	r3, [r3, #0]
 8011320:	699b      	ldr	r3, [r3, #24]
 8011322:	f003 0303 	and.w	r3, r3, #3
 8011326:	2b00      	cmp	r3, #0
 8011328:	d003      	beq.n	8011332 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801132a:	6878      	ldr	r0, [r7, #4]
 801132c:	f000 f905 	bl	801153a <HAL_TIM_IC_CaptureCallback>
 8011330:	e005      	b.n	801133e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8011332:	6878      	ldr	r0, [r7, #4]
 8011334:	f000 f8f7 	bl	8011526 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011338:	6878      	ldr	r0, [r7, #4]
 801133a:	f000 f908 	bl	801154e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	2200      	movs	r2, #0
 8011342:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	681b      	ldr	r3, [r3, #0]
 8011348:	691b      	ldr	r3, [r3, #16]
 801134a:	f003 0304 	and.w	r3, r3, #4
 801134e:	2b04      	cmp	r3, #4
 8011350:	d122      	bne.n	8011398 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	681b      	ldr	r3, [r3, #0]
 8011356:	68db      	ldr	r3, [r3, #12]
 8011358:	f003 0304 	and.w	r3, r3, #4
 801135c:	2b04      	cmp	r3, #4
 801135e:	d11b      	bne.n	8011398 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	681b      	ldr	r3, [r3, #0]
 8011364:	f06f 0204 	mvn.w	r2, #4
 8011368:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	2202      	movs	r2, #2
 801136e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	681b      	ldr	r3, [r3, #0]
 8011374:	699b      	ldr	r3, [r3, #24]
 8011376:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801137a:	2b00      	cmp	r3, #0
 801137c:	d003      	beq.n	8011386 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801137e:	6878      	ldr	r0, [r7, #4]
 8011380:	f000 f8db 	bl	801153a <HAL_TIM_IC_CaptureCallback>
 8011384:	e005      	b.n	8011392 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011386:	6878      	ldr	r0, [r7, #4]
 8011388:	f000 f8cd 	bl	8011526 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801138c:	6878      	ldr	r0, [r7, #4]
 801138e:	f000 f8de 	bl	801154e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	2200      	movs	r2, #0
 8011396:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	681b      	ldr	r3, [r3, #0]
 801139c:	691b      	ldr	r3, [r3, #16]
 801139e:	f003 0308 	and.w	r3, r3, #8
 80113a2:	2b08      	cmp	r3, #8
 80113a4:	d122      	bne.n	80113ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	681b      	ldr	r3, [r3, #0]
 80113aa:	68db      	ldr	r3, [r3, #12]
 80113ac:	f003 0308 	and.w	r3, r3, #8
 80113b0:	2b08      	cmp	r3, #8
 80113b2:	d11b      	bne.n	80113ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	681b      	ldr	r3, [r3, #0]
 80113b8:	f06f 0208 	mvn.w	r2, #8
 80113bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	2204      	movs	r2, #4
 80113c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	681b      	ldr	r3, [r3, #0]
 80113c8:	69db      	ldr	r3, [r3, #28]
 80113ca:	f003 0303 	and.w	r3, r3, #3
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	d003      	beq.n	80113da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80113d2:	6878      	ldr	r0, [r7, #4]
 80113d4:	f000 f8b1 	bl	801153a <HAL_TIM_IC_CaptureCallback>
 80113d8:	e005      	b.n	80113e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80113da:	6878      	ldr	r0, [r7, #4]
 80113dc:	f000 f8a3 	bl	8011526 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80113e0:	6878      	ldr	r0, [r7, #4]
 80113e2:	f000 f8b4 	bl	801154e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	2200      	movs	r2, #0
 80113ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	681b      	ldr	r3, [r3, #0]
 80113f0:	691b      	ldr	r3, [r3, #16]
 80113f2:	f003 0310 	and.w	r3, r3, #16
 80113f6:	2b10      	cmp	r3, #16
 80113f8:	d122      	bne.n	8011440 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	681b      	ldr	r3, [r3, #0]
 80113fe:	68db      	ldr	r3, [r3, #12]
 8011400:	f003 0310 	and.w	r3, r3, #16
 8011404:	2b10      	cmp	r3, #16
 8011406:	d11b      	bne.n	8011440 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	681b      	ldr	r3, [r3, #0]
 801140c:	f06f 0210 	mvn.w	r2, #16
 8011410:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	2208      	movs	r2, #8
 8011416:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	681b      	ldr	r3, [r3, #0]
 801141c:	69db      	ldr	r3, [r3, #28]
 801141e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011422:	2b00      	cmp	r3, #0
 8011424:	d003      	beq.n	801142e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011426:	6878      	ldr	r0, [r7, #4]
 8011428:	f000 f887 	bl	801153a <HAL_TIM_IC_CaptureCallback>
 801142c:	e005      	b.n	801143a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801142e:	6878      	ldr	r0, [r7, #4]
 8011430:	f000 f879 	bl	8011526 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011434:	6878      	ldr	r0, [r7, #4]
 8011436:	f000 f88a 	bl	801154e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	2200      	movs	r2, #0
 801143e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	681b      	ldr	r3, [r3, #0]
 8011444:	691b      	ldr	r3, [r3, #16]
 8011446:	f003 0301 	and.w	r3, r3, #1
 801144a:	2b01      	cmp	r3, #1
 801144c:	d10e      	bne.n	801146c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	681b      	ldr	r3, [r3, #0]
 8011452:	68db      	ldr	r3, [r3, #12]
 8011454:	f003 0301 	and.w	r3, r3, #1
 8011458:	2b01      	cmp	r3, #1
 801145a:	d107      	bne.n	801146c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	681b      	ldr	r3, [r3, #0]
 8011460:	f06f 0201 	mvn.w	r2, #1
 8011464:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8011466:	6878      	ldr	r0, [r7, #4]
 8011468:	f7f0 f8dc 	bl	8001624 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	681b      	ldr	r3, [r3, #0]
 8011470:	691b      	ldr	r3, [r3, #16]
 8011472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011476:	2b80      	cmp	r3, #128	; 0x80
 8011478:	d10e      	bne.n	8011498 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	681b      	ldr	r3, [r3, #0]
 801147e:	68db      	ldr	r3, [r3, #12]
 8011480:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011484:	2b80      	cmp	r3, #128	; 0x80
 8011486:	d107      	bne.n	8011498 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	681b      	ldr	r3, [r3, #0]
 801148c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8011490:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8011492:	6878      	ldr	r0, [r7, #4]
 8011494:	f000 f914 	bl	80116c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	681b      	ldr	r3, [r3, #0]
 801149c:	691b      	ldr	r3, [r3, #16]
 801149e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80114a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80114a6:	d10e      	bne.n	80114c6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	681b      	ldr	r3, [r3, #0]
 80114ac:	68db      	ldr	r3, [r3, #12]
 80114ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80114b2:	2b80      	cmp	r3, #128	; 0x80
 80114b4:	d107      	bne.n	80114c6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	681b      	ldr	r3, [r3, #0]
 80114ba:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80114be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80114c0:	6878      	ldr	r0, [r7, #4]
 80114c2:	f000 f907 	bl	80116d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	681b      	ldr	r3, [r3, #0]
 80114ca:	691b      	ldr	r3, [r3, #16]
 80114cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80114d0:	2b40      	cmp	r3, #64	; 0x40
 80114d2:	d10e      	bne.n	80114f2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	681b      	ldr	r3, [r3, #0]
 80114d8:	68db      	ldr	r3, [r3, #12]
 80114da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80114de:	2b40      	cmp	r3, #64	; 0x40
 80114e0:	d107      	bne.n	80114f2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	681b      	ldr	r3, [r3, #0]
 80114e6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80114ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80114ec:	6878      	ldr	r0, [r7, #4]
 80114ee:	f000 f838 	bl	8011562 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	681b      	ldr	r3, [r3, #0]
 80114f6:	691b      	ldr	r3, [r3, #16]
 80114f8:	f003 0320 	and.w	r3, r3, #32
 80114fc:	2b20      	cmp	r3, #32
 80114fe:	d10e      	bne.n	801151e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	681b      	ldr	r3, [r3, #0]
 8011504:	68db      	ldr	r3, [r3, #12]
 8011506:	f003 0320 	and.w	r3, r3, #32
 801150a:	2b20      	cmp	r3, #32
 801150c:	d107      	bne.n	801151e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	681b      	ldr	r3, [r3, #0]
 8011512:	f06f 0220 	mvn.w	r2, #32
 8011516:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8011518:	6878      	ldr	r0, [r7, #4]
 801151a:	f000 f8c7 	bl	80116ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801151e:	bf00      	nop
 8011520:	3708      	adds	r7, #8
 8011522:	46bd      	mov	sp, r7
 8011524:	bd80      	pop	{r7, pc}

08011526 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8011526:	b480      	push	{r7}
 8011528:	b083      	sub	sp, #12
 801152a:	af00      	add	r7, sp, #0
 801152c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801152e:	bf00      	nop
 8011530:	370c      	adds	r7, #12
 8011532:	46bd      	mov	sp, r7
 8011534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011538:	4770      	bx	lr

0801153a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801153a:	b480      	push	{r7}
 801153c:	b083      	sub	sp, #12
 801153e:	af00      	add	r7, sp, #0
 8011540:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8011542:	bf00      	nop
 8011544:	370c      	adds	r7, #12
 8011546:	46bd      	mov	sp, r7
 8011548:	f85d 7b04 	ldr.w	r7, [sp], #4
 801154c:	4770      	bx	lr

0801154e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801154e:	b480      	push	{r7}
 8011550:	b083      	sub	sp, #12
 8011552:	af00      	add	r7, sp, #0
 8011554:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8011556:	bf00      	nop
 8011558:	370c      	adds	r7, #12
 801155a:	46bd      	mov	sp, r7
 801155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011560:	4770      	bx	lr

08011562 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8011562:	b480      	push	{r7}
 8011564:	b083      	sub	sp, #12
 8011566:	af00      	add	r7, sp, #0
 8011568:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801156a:	bf00      	nop
 801156c:	370c      	adds	r7, #12
 801156e:	46bd      	mov	sp, r7
 8011570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011574:	4770      	bx	lr
	...

08011578 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8011578:	b480      	push	{r7}
 801157a:	b085      	sub	sp, #20
 801157c:	af00      	add	r7, sp, #0
 801157e:	6078      	str	r0, [r7, #4]
 8011580:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	681b      	ldr	r3, [r3, #0]
 8011586:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	4a40      	ldr	r2, [pc, #256]	; (801168c <TIM_Base_SetConfig+0x114>)
 801158c:	4293      	cmp	r3, r2
 801158e:	d013      	beq.n	80115b8 <TIM_Base_SetConfig+0x40>
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011596:	d00f      	beq.n	80115b8 <TIM_Base_SetConfig+0x40>
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	4a3d      	ldr	r2, [pc, #244]	; (8011690 <TIM_Base_SetConfig+0x118>)
 801159c:	4293      	cmp	r3, r2
 801159e:	d00b      	beq.n	80115b8 <TIM_Base_SetConfig+0x40>
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	4a3c      	ldr	r2, [pc, #240]	; (8011694 <TIM_Base_SetConfig+0x11c>)
 80115a4:	4293      	cmp	r3, r2
 80115a6:	d007      	beq.n	80115b8 <TIM_Base_SetConfig+0x40>
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	4a3b      	ldr	r2, [pc, #236]	; (8011698 <TIM_Base_SetConfig+0x120>)
 80115ac:	4293      	cmp	r3, r2
 80115ae:	d003      	beq.n	80115b8 <TIM_Base_SetConfig+0x40>
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	4a3a      	ldr	r2, [pc, #232]	; (801169c <TIM_Base_SetConfig+0x124>)
 80115b4:	4293      	cmp	r3, r2
 80115b6:	d108      	bne.n	80115ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80115b8:	68fb      	ldr	r3, [r7, #12]
 80115ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80115be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80115c0:	683b      	ldr	r3, [r7, #0]
 80115c2:	685b      	ldr	r3, [r3, #4]
 80115c4:	68fa      	ldr	r2, [r7, #12]
 80115c6:	4313      	orrs	r3, r2
 80115c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	4a2f      	ldr	r2, [pc, #188]	; (801168c <TIM_Base_SetConfig+0x114>)
 80115ce:	4293      	cmp	r3, r2
 80115d0:	d01f      	beq.n	8011612 <TIM_Base_SetConfig+0x9a>
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80115d8:	d01b      	beq.n	8011612 <TIM_Base_SetConfig+0x9a>
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	4a2c      	ldr	r2, [pc, #176]	; (8011690 <TIM_Base_SetConfig+0x118>)
 80115de:	4293      	cmp	r3, r2
 80115e0:	d017      	beq.n	8011612 <TIM_Base_SetConfig+0x9a>
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	4a2b      	ldr	r2, [pc, #172]	; (8011694 <TIM_Base_SetConfig+0x11c>)
 80115e6:	4293      	cmp	r3, r2
 80115e8:	d013      	beq.n	8011612 <TIM_Base_SetConfig+0x9a>
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	4a2a      	ldr	r2, [pc, #168]	; (8011698 <TIM_Base_SetConfig+0x120>)
 80115ee:	4293      	cmp	r3, r2
 80115f0:	d00f      	beq.n	8011612 <TIM_Base_SetConfig+0x9a>
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	4a29      	ldr	r2, [pc, #164]	; (801169c <TIM_Base_SetConfig+0x124>)
 80115f6:	4293      	cmp	r3, r2
 80115f8:	d00b      	beq.n	8011612 <TIM_Base_SetConfig+0x9a>
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	4a28      	ldr	r2, [pc, #160]	; (80116a0 <TIM_Base_SetConfig+0x128>)
 80115fe:	4293      	cmp	r3, r2
 8011600:	d007      	beq.n	8011612 <TIM_Base_SetConfig+0x9a>
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	4a27      	ldr	r2, [pc, #156]	; (80116a4 <TIM_Base_SetConfig+0x12c>)
 8011606:	4293      	cmp	r3, r2
 8011608:	d003      	beq.n	8011612 <TIM_Base_SetConfig+0x9a>
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	4a26      	ldr	r2, [pc, #152]	; (80116a8 <TIM_Base_SetConfig+0x130>)
 801160e:	4293      	cmp	r3, r2
 8011610:	d108      	bne.n	8011624 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8011612:	68fb      	ldr	r3, [r7, #12]
 8011614:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011618:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801161a:	683b      	ldr	r3, [r7, #0]
 801161c:	68db      	ldr	r3, [r3, #12]
 801161e:	68fa      	ldr	r2, [r7, #12]
 8011620:	4313      	orrs	r3, r2
 8011622:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8011624:	68fb      	ldr	r3, [r7, #12]
 8011626:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801162a:	683b      	ldr	r3, [r7, #0]
 801162c:	695b      	ldr	r3, [r3, #20]
 801162e:	4313      	orrs	r3, r2
 8011630:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	68fa      	ldr	r2, [r7, #12]
 8011636:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011638:	683b      	ldr	r3, [r7, #0]
 801163a:	689a      	ldr	r2, [r3, #8]
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8011640:	683b      	ldr	r3, [r7, #0]
 8011642:	681a      	ldr	r2, [r3, #0]
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	4a10      	ldr	r2, [pc, #64]	; (801168c <TIM_Base_SetConfig+0x114>)
 801164c:	4293      	cmp	r3, r2
 801164e:	d00f      	beq.n	8011670 <TIM_Base_SetConfig+0xf8>
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	4a12      	ldr	r2, [pc, #72]	; (801169c <TIM_Base_SetConfig+0x124>)
 8011654:	4293      	cmp	r3, r2
 8011656:	d00b      	beq.n	8011670 <TIM_Base_SetConfig+0xf8>
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	4a11      	ldr	r2, [pc, #68]	; (80116a0 <TIM_Base_SetConfig+0x128>)
 801165c:	4293      	cmp	r3, r2
 801165e:	d007      	beq.n	8011670 <TIM_Base_SetConfig+0xf8>
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	4a10      	ldr	r2, [pc, #64]	; (80116a4 <TIM_Base_SetConfig+0x12c>)
 8011664:	4293      	cmp	r3, r2
 8011666:	d003      	beq.n	8011670 <TIM_Base_SetConfig+0xf8>
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	4a0f      	ldr	r2, [pc, #60]	; (80116a8 <TIM_Base_SetConfig+0x130>)
 801166c:	4293      	cmp	r3, r2
 801166e:	d103      	bne.n	8011678 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8011670:	683b      	ldr	r3, [r7, #0]
 8011672:	691a      	ldr	r2, [r3, #16]
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	2201      	movs	r2, #1
 801167c:	615a      	str	r2, [r3, #20]
}
 801167e:	bf00      	nop
 8011680:	3714      	adds	r7, #20
 8011682:	46bd      	mov	sp, r7
 8011684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011688:	4770      	bx	lr
 801168a:	bf00      	nop
 801168c:	40010000 	.word	0x40010000
 8011690:	40000400 	.word	0x40000400
 8011694:	40000800 	.word	0x40000800
 8011698:	40000c00 	.word	0x40000c00
 801169c:	40010400 	.word	0x40010400
 80116a0:	40014000 	.word	0x40014000
 80116a4:	40014400 	.word	0x40014400
 80116a8:	40014800 	.word	0x40014800

080116ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80116ac:	b480      	push	{r7}
 80116ae:	b083      	sub	sp, #12
 80116b0:	af00      	add	r7, sp, #0
 80116b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80116b4:	bf00      	nop
 80116b6:	370c      	adds	r7, #12
 80116b8:	46bd      	mov	sp, r7
 80116ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116be:	4770      	bx	lr

080116c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80116c0:	b480      	push	{r7}
 80116c2:	b083      	sub	sp, #12
 80116c4:	af00      	add	r7, sp, #0
 80116c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80116c8:	bf00      	nop
 80116ca:	370c      	adds	r7, #12
 80116cc:	46bd      	mov	sp, r7
 80116ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116d2:	4770      	bx	lr

080116d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80116d4:	b480      	push	{r7}
 80116d6:	b083      	sub	sp, #12
 80116d8:	af00      	add	r7, sp, #0
 80116da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80116dc:	bf00      	nop
 80116de:	370c      	adds	r7, #12
 80116e0:	46bd      	mov	sp, r7
 80116e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116e6:	4770      	bx	lr

080116e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80116e8:	b580      	push	{r7, lr}
 80116ea:	b082      	sub	sp, #8
 80116ec:	af00      	add	r7, sp, #0
 80116ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	2b00      	cmp	r3, #0
 80116f4:	d101      	bne.n	80116fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80116f6:	2301      	movs	r3, #1
 80116f8:	e042      	b.n	8011780 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011700:	2b00      	cmp	r3, #0
 8011702:	d106      	bne.n	8011712 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	2200      	movs	r2, #0
 8011708:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801170c:	6878      	ldr	r0, [r7, #4]
 801170e:	f7f0 fa4d 	bl	8001bac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	2224      	movs	r2, #36	; 0x24
 8011716:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	681b      	ldr	r3, [r3, #0]
 801171e:	681a      	ldr	r2, [r3, #0]
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	681b      	ldr	r3, [r3, #0]
 8011724:	f022 0201 	bic.w	r2, r2, #1
 8011728:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801172a:	6878      	ldr	r0, [r7, #4]
 801172c:	f000 f8ba 	bl	80118a4 <UART_SetConfig>
 8011730:	4603      	mov	r3, r0
 8011732:	2b01      	cmp	r3, #1
 8011734:	d101      	bne.n	801173a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8011736:	2301      	movs	r3, #1
 8011738:	e022      	b.n	8011780 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801173e:	2b00      	cmp	r3, #0
 8011740:	d002      	beq.n	8011748 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8011742:	6878      	ldr	r0, [r7, #4]
 8011744:	f000 ff1a 	bl	801257c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	681b      	ldr	r3, [r3, #0]
 801174c:	685a      	ldr	r2, [r3, #4]
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	681b      	ldr	r3, [r3, #0]
 8011752:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8011756:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	681b      	ldr	r3, [r3, #0]
 801175c:	689a      	ldr	r2, [r3, #8]
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	681b      	ldr	r3, [r3, #0]
 8011762:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8011766:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	681b      	ldr	r3, [r3, #0]
 801176c:	681a      	ldr	r2, [r3, #0]
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	681b      	ldr	r3, [r3, #0]
 8011772:	f042 0201 	orr.w	r2, r2, #1
 8011776:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8011778:	6878      	ldr	r0, [r7, #4]
 801177a:	f000 ffa1 	bl	80126c0 <UART_CheckIdleState>
 801177e:	4603      	mov	r3, r0
}
 8011780:	4618      	mov	r0, r3
 8011782:	3708      	adds	r7, #8
 8011784:	46bd      	mov	sp, r7
 8011786:	bd80      	pop	{r7, pc}

08011788 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011788:	b580      	push	{r7, lr}
 801178a:	b08a      	sub	sp, #40	; 0x28
 801178c:	af02      	add	r7, sp, #8
 801178e:	60f8      	str	r0, [r7, #12]
 8011790:	60b9      	str	r1, [r7, #8]
 8011792:	603b      	str	r3, [r7, #0]
 8011794:	4613      	mov	r3, r2
 8011796:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8011798:	68fb      	ldr	r3, [r7, #12]
 801179a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801179e:	2b20      	cmp	r3, #32
 80117a0:	d17b      	bne.n	801189a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80117a2:	68bb      	ldr	r3, [r7, #8]
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	d002      	beq.n	80117ae <HAL_UART_Transmit+0x26>
 80117a8:	88fb      	ldrh	r3, [r7, #6]
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	d101      	bne.n	80117b2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80117ae:	2301      	movs	r3, #1
 80117b0:	e074      	b.n	801189c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80117b2:	68fb      	ldr	r3, [r7, #12]
 80117b4:	2200      	movs	r2, #0
 80117b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80117ba:	68fb      	ldr	r3, [r7, #12]
 80117bc:	2221      	movs	r2, #33	; 0x21
 80117be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80117c2:	f7f7 fca5 	bl	8009110 <HAL_GetTick>
 80117c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80117c8:	68fb      	ldr	r3, [r7, #12]
 80117ca:	88fa      	ldrh	r2, [r7, #6]
 80117cc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80117d0:	68fb      	ldr	r3, [r7, #12]
 80117d2:	88fa      	ldrh	r2, [r7, #6]
 80117d4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80117d8:	68fb      	ldr	r3, [r7, #12]
 80117da:	689b      	ldr	r3, [r3, #8]
 80117dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80117e0:	d108      	bne.n	80117f4 <HAL_UART_Transmit+0x6c>
 80117e2:	68fb      	ldr	r3, [r7, #12]
 80117e4:	691b      	ldr	r3, [r3, #16]
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	d104      	bne.n	80117f4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80117ea:	2300      	movs	r3, #0
 80117ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80117ee:	68bb      	ldr	r3, [r7, #8]
 80117f0:	61bb      	str	r3, [r7, #24]
 80117f2:	e003      	b.n	80117fc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80117f4:	68bb      	ldr	r3, [r7, #8]
 80117f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80117f8:	2300      	movs	r3, #0
 80117fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80117fc:	e030      	b.n	8011860 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80117fe:	683b      	ldr	r3, [r7, #0]
 8011800:	9300      	str	r3, [sp, #0]
 8011802:	697b      	ldr	r3, [r7, #20]
 8011804:	2200      	movs	r2, #0
 8011806:	2180      	movs	r1, #128	; 0x80
 8011808:	68f8      	ldr	r0, [r7, #12]
 801180a:	f001 f803 	bl	8012814 <UART_WaitOnFlagUntilTimeout>
 801180e:	4603      	mov	r3, r0
 8011810:	2b00      	cmp	r3, #0
 8011812:	d005      	beq.n	8011820 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8011814:	68fb      	ldr	r3, [r7, #12]
 8011816:	2220      	movs	r2, #32
 8011818:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 801181c:	2303      	movs	r3, #3
 801181e:	e03d      	b.n	801189c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8011820:	69fb      	ldr	r3, [r7, #28]
 8011822:	2b00      	cmp	r3, #0
 8011824:	d10b      	bne.n	801183e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8011826:	69bb      	ldr	r3, [r7, #24]
 8011828:	881b      	ldrh	r3, [r3, #0]
 801182a:	461a      	mov	r2, r3
 801182c:	68fb      	ldr	r3, [r7, #12]
 801182e:	681b      	ldr	r3, [r3, #0]
 8011830:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8011834:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8011836:	69bb      	ldr	r3, [r7, #24]
 8011838:	3302      	adds	r3, #2
 801183a:	61bb      	str	r3, [r7, #24]
 801183c:	e007      	b.n	801184e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801183e:	69fb      	ldr	r3, [r7, #28]
 8011840:	781a      	ldrb	r2, [r3, #0]
 8011842:	68fb      	ldr	r3, [r7, #12]
 8011844:	681b      	ldr	r3, [r3, #0]
 8011846:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8011848:	69fb      	ldr	r3, [r7, #28]
 801184a:	3301      	adds	r3, #1
 801184c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801184e:	68fb      	ldr	r3, [r7, #12]
 8011850:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8011854:	b29b      	uxth	r3, r3
 8011856:	3b01      	subs	r3, #1
 8011858:	b29a      	uxth	r2, r3
 801185a:	68fb      	ldr	r3, [r7, #12]
 801185c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8011860:	68fb      	ldr	r3, [r7, #12]
 8011862:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8011866:	b29b      	uxth	r3, r3
 8011868:	2b00      	cmp	r3, #0
 801186a:	d1c8      	bne.n	80117fe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801186c:	683b      	ldr	r3, [r7, #0]
 801186e:	9300      	str	r3, [sp, #0]
 8011870:	697b      	ldr	r3, [r7, #20]
 8011872:	2200      	movs	r2, #0
 8011874:	2140      	movs	r1, #64	; 0x40
 8011876:	68f8      	ldr	r0, [r7, #12]
 8011878:	f000 ffcc 	bl	8012814 <UART_WaitOnFlagUntilTimeout>
 801187c:	4603      	mov	r3, r0
 801187e:	2b00      	cmp	r3, #0
 8011880:	d005      	beq.n	801188e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8011882:	68fb      	ldr	r3, [r7, #12]
 8011884:	2220      	movs	r2, #32
 8011886:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 801188a:	2303      	movs	r3, #3
 801188c:	e006      	b.n	801189c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801188e:	68fb      	ldr	r3, [r7, #12]
 8011890:	2220      	movs	r2, #32
 8011892:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8011896:	2300      	movs	r3, #0
 8011898:	e000      	b.n	801189c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 801189a:	2302      	movs	r3, #2
  }
}
 801189c:	4618      	mov	r0, r3
 801189e:	3720      	adds	r7, #32
 80118a0:	46bd      	mov	sp, r7
 80118a2:	bd80      	pop	{r7, pc}

080118a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80118a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80118a8:	b092      	sub	sp, #72	; 0x48
 80118aa:	af00      	add	r7, sp, #0
 80118ac:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80118ae:	2300      	movs	r3, #0
 80118b0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80118b4:	697b      	ldr	r3, [r7, #20]
 80118b6:	689a      	ldr	r2, [r3, #8]
 80118b8:	697b      	ldr	r3, [r7, #20]
 80118ba:	691b      	ldr	r3, [r3, #16]
 80118bc:	431a      	orrs	r2, r3
 80118be:	697b      	ldr	r3, [r7, #20]
 80118c0:	695b      	ldr	r3, [r3, #20]
 80118c2:	431a      	orrs	r2, r3
 80118c4:	697b      	ldr	r3, [r7, #20]
 80118c6:	69db      	ldr	r3, [r3, #28]
 80118c8:	4313      	orrs	r3, r2
 80118ca:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80118cc:	697b      	ldr	r3, [r7, #20]
 80118ce:	681b      	ldr	r3, [r3, #0]
 80118d0:	681a      	ldr	r2, [r3, #0]
 80118d2:	4bbe      	ldr	r3, [pc, #760]	; (8011bcc <UART_SetConfig+0x328>)
 80118d4:	4013      	ands	r3, r2
 80118d6:	697a      	ldr	r2, [r7, #20]
 80118d8:	6812      	ldr	r2, [r2, #0]
 80118da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80118dc:	430b      	orrs	r3, r1
 80118de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80118e0:	697b      	ldr	r3, [r7, #20]
 80118e2:	681b      	ldr	r3, [r3, #0]
 80118e4:	685b      	ldr	r3, [r3, #4]
 80118e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80118ea:	697b      	ldr	r3, [r7, #20]
 80118ec:	68da      	ldr	r2, [r3, #12]
 80118ee:	697b      	ldr	r3, [r7, #20]
 80118f0:	681b      	ldr	r3, [r3, #0]
 80118f2:	430a      	orrs	r2, r1
 80118f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80118f6:	697b      	ldr	r3, [r7, #20]
 80118f8:	699b      	ldr	r3, [r3, #24]
 80118fa:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80118fc:	697b      	ldr	r3, [r7, #20]
 80118fe:	681b      	ldr	r3, [r3, #0]
 8011900:	4ab3      	ldr	r2, [pc, #716]	; (8011bd0 <UART_SetConfig+0x32c>)
 8011902:	4293      	cmp	r3, r2
 8011904:	d004      	beq.n	8011910 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8011906:	697b      	ldr	r3, [r7, #20]
 8011908:	6a1b      	ldr	r3, [r3, #32]
 801190a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801190c:	4313      	orrs	r3, r2
 801190e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8011910:	697b      	ldr	r3, [r7, #20]
 8011912:	681b      	ldr	r3, [r3, #0]
 8011914:	689a      	ldr	r2, [r3, #8]
 8011916:	4baf      	ldr	r3, [pc, #700]	; (8011bd4 <UART_SetConfig+0x330>)
 8011918:	4013      	ands	r3, r2
 801191a:	697a      	ldr	r2, [r7, #20]
 801191c:	6812      	ldr	r2, [r2, #0]
 801191e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011920:	430b      	orrs	r3, r1
 8011922:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8011924:	697b      	ldr	r3, [r7, #20]
 8011926:	681b      	ldr	r3, [r3, #0]
 8011928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801192a:	f023 010f 	bic.w	r1, r3, #15
 801192e:	697b      	ldr	r3, [r7, #20]
 8011930:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011932:	697b      	ldr	r3, [r7, #20]
 8011934:	681b      	ldr	r3, [r3, #0]
 8011936:	430a      	orrs	r2, r1
 8011938:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801193a:	697b      	ldr	r3, [r7, #20]
 801193c:	681b      	ldr	r3, [r3, #0]
 801193e:	4aa6      	ldr	r2, [pc, #664]	; (8011bd8 <UART_SetConfig+0x334>)
 8011940:	4293      	cmp	r3, r2
 8011942:	d177      	bne.n	8011a34 <UART_SetConfig+0x190>
 8011944:	4ba5      	ldr	r3, [pc, #660]	; (8011bdc <UART_SetConfig+0x338>)
 8011946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011948:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801194c:	2b28      	cmp	r3, #40	; 0x28
 801194e:	d86d      	bhi.n	8011a2c <UART_SetConfig+0x188>
 8011950:	a201      	add	r2, pc, #4	; (adr r2, 8011958 <UART_SetConfig+0xb4>)
 8011952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011956:	bf00      	nop
 8011958:	080119fd 	.word	0x080119fd
 801195c:	08011a2d 	.word	0x08011a2d
 8011960:	08011a2d 	.word	0x08011a2d
 8011964:	08011a2d 	.word	0x08011a2d
 8011968:	08011a2d 	.word	0x08011a2d
 801196c:	08011a2d 	.word	0x08011a2d
 8011970:	08011a2d 	.word	0x08011a2d
 8011974:	08011a2d 	.word	0x08011a2d
 8011978:	08011a05 	.word	0x08011a05
 801197c:	08011a2d 	.word	0x08011a2d
 8011980:	08011a2d 	.word	0x08011a2d
 8011984:	08011a2d 	.word	0x08011a2d
 8011988:	08011a2d 	.word	0x08011a2d
 801198c:	08011a2d 	.word	0x08011a2d
 8011990:	08011a2d 	.word	0x08011a2d
 8011994:	08011a2d 	.word	0x08011a2d
 8011998:	08011a0d 	.word	0x08011a0d
 801199c:	08011a2d 	.word	0x08011a2d
 80119a0:	08011a2d 	.word	0x08011a2d
 80119a4:	08011a2d 	.word	0x08011a2d
 80119a8:	08011a2d 	.word	0x08011a2d
 80119ac:	08011a2d 	.word	0x08011a2d
 80119b0:	08011a2d 	.word	0x08011a2d
 80119b4:	08011a2d 	.word	0x08011a2d
 80119b8:	08011a15 	.word	0x08011a15
 80119bc:	08011a2d 	.word	0x08011a2d
 80119c0:	08011a2d 	.word	0x08011a2d
 80119c4:	08011a2d 	.word	0x08011a2d
 80119c8:	08011a2d 	.word	0x08011a2d
 80119cc:	08011a2d 	.word	0x08011a2d
 80119d0:	08011a2d 	.word	0x08011a2d
 80119d4:	08011a2d 	.word	0x08011a2d
 80119d8:	08011a1d 	.word	0x08011a1d
 80119dc:	08011a2d 	.word	0x08011a2d
 80119e0:	08011a2d 	.word	0x08011a2d
 80119e4:	08011a2d 	.word	0x08011a2d
 80119e8:	08011a2d 	.word	0x08011a2d
 80119ec:	08011a2d 	.word	0x08011a2d
 80119f0:	08011a2d 	.word	0x08011a2d
 80119f4:	08011a2d 	.word	0x08011a2d
 80119f8:	08011a25 	.word	0x08011a25
 80119fc:	2301      	movs	r3, #1
 80119fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011a02:	e326      	b.n	8012052 <UART_SetConfig+0x7ae>
 8011a04:	2304      	movs	r3, #4
 8011a06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011a0a:	e322      	b.n	8012052 <UART_SetConfig+0x7ae>
 8011a0c:	2308      	movs	r3, #8
 8011a0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011a12:	e31e      	b.n	8012052 <UART_SetConfig+0x7ae>
 8011a14:	2310      	movs	r3, #16
 8011a16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011a1a:	e31a      	b.n	8012052 <UART_SetConfig+0x7ae>
 8011a1c:	2320      	movs	r3, #32
 8011a1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011a22:	e316      	b.n	8012052 <UART_SetConfig+0x7ae>
 8011a24:	2340      	movs	r3, #64	; 0x40
 8011a26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011a2a:	e312      	b.n	8012052 <UART_SetConfig+0x7ae>
 8011a2c:	2380      	movs	r3, #128	; 0x80
 8011a2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011a32:	e30e      	b.n	8012052 <UART_SetConfig+0x7ae>
 8011a34:	697b      	ldr	r3, [r7, #20]
 8011a36:	681b      	ldr	r3, [r3, #0]
 8011a38:	4a69      	ldr	r2, [pc, #420]	; (8011be0 <UART_SetConfig+0x33c>)
 8011a3a:	4293      	cmp	r3, r2
 8011a3c:	d130      	bne.n	8011aa0 <UART_SetConfig+0x1fc>
 8011a3e:	4b67      	ldr	r3, [pc, #412]	; (8011bdc <UART_SetConfig+0x338>)
 8011a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011a42:	f003 0307 	and.w	r3, r3, #7
 8011a46:	2b05      	cmp	r3, #5
 8011a48:	d826      	bhi.n	8011a98 <UART_SetConfig+0x1f4>
 8011a4a:	a201      	add	r2, pc, #4	; (adr r2, 8011a50 <UART_SetConfig+0x1ac>)
 8011a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a50:	08011a69 	.word	0x08011a69
 8011a54:	08011a71 	.word	0x08011a71
 8011a58:	08011a79 	.word	0x08011a79
 8011a5c:	08011a81 	.word	0x08011a81
 8011a60:	08011a89 	.word	0x08011a89
 8011a64:	08011a91 	.word	0x08011a91
 8011a68:	2300      	movs	r3, #0
 8011a6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011a6e:	e2f0      	b.n	8012052 <UART_SetConfig+0x7ae>
 8011a70:	2304      	movs	r3, #4
 8011a72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011a76:	e2ec      	b.n	8012052 <UART_SetConfig+0x7ae>
 8011a78:	2308      	movs	r3, #8
 8011a7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011a7e:	e2e8      	b.n	8012052 <UART_SetConfig+0x7ae>
 8011a80:	2310      	movs	r3, #16
 8011a82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011a86:	e2e4      	b.n	8012052 <UART_SetConfig+0x7ae>
 8011a88:	2320      	movs	r3, #32
 8011a8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011a8e:	e2e0      	b.n	8012052 <UART_SetConfig+0x7ae>
 8011a90:	2340      	movs	r3, #64	; 0x40
 8011a92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011a96:	e2dc      	b.n	8012052 <UART_SetConfig+0x7ae>
 8011a98:	2380      	movs	r3, #128	; 0x80
 8011a9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011a9e:	e2d8      	b.n	8012052 <UART_SetConfig+0x7ae>
 8011aa0:	697b      	ldr	r3, [r7, #20]
 8011aa2:	681b      	ldr	r3, [r3, #0]
 8011aa4:	4a4f      	ldr	r2, [pc, #316]	; (8011be4 <UART_SetConfig+0x340>)
 8011aa6:	4293      	cmp	r3, r2
 8011aa8:	d130      	bne.n	8011b0c <UART_SetConfig+0x268>
 8011aaa:	4b4c      	ldr	r3, [pc, #304]	; (8011bdc <UART_SetConfig+0x338>)
 8011aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011aae:	f003 0307 	and.w	r3, r3, #7
 8011ab2:	2b05      	cmp	r3, #5
 8011ab4:	d826      	bhi.n	8011b04 <UART_SetConfig+0x260>
 8011ab6:	a201      	add	r2, pc, #4	; (adr r2, 8011abc <UART_SetConfig+0x218>)
 8011ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011abc:	08011ad5 	.word	0x08011ad5
 8011ac0:	08011add 	.word	0x08011add
 8011ac4:	08011ae5 	.word	0x08011ae5
 8011ac8:	08011aed 	.word	0x08011aed
 8011acc:	08011af5 	.word	0x08011af5
 8011ad0:	08011afd 	.word	0x08011afd
 8011ad4:	2300      	movs	r3, #0
 8011ad6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011ada:	e2ba      	b.n	8012052 <UART_SetConfig+0x7ae>
 8011adc:	2304      	movs	r3, #4
 8011ade:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011ae2:	e2b6      	b.n	8012052 <UART_SetConfig+0x7ae>
 8011ae4:	2308      	movs	r3, #8
 8011ae6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011aea:	e2b2      	b.n	8012052 <UART_SetConfig+0x7ae>
 8011aec:	2310      	movs	r3, #16
 8011aee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011af2:	e2ae      	b.n	8012052 <UART_SetConfig+0x7ae>
 8011af4:	2320      	movs	r3, #32
 8011af6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011afa:	e2aa      	b.n	8012052 <UART_SetConfig+0x7ae>
 8011afc:	2340      	movs	r3, #64	; 0x40
 8011afe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011b02:	e2a6      	b.n	8012052 <UART_SetConfig+0x7ae>
 8011b04:	2380      	movs	r3, #128	; 0x80
 8011b06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011b0a:	e2a2      	b.n	8012052 <UART_SetConfig+0x7ae>
 8011b0c:	697b      	ldr	r3, [r7, #20]
 8011b0e:	681b      	ldr	r3, [r3, #0]
 8011b10:	4a35      	ldr	r2, [pc, #212]	; (8011be8 <UART_SetConfig+0x344>)
 8011b12:	4293      	cmp	r3, r2
 8011b14:	d130      	bne.n	8011b78 <UART_SetConfig+0x2d4>
 8011b16:	4b31      	ldr	r3, [pc, #196]	; (8011bdc <UART_SetConfig+0x338>)
 8011b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011b1a:	f003 0307 	and.w	r3, r3, #7
 8011b1e:	2b05      	cmp	r3, #5
 8011b20:	d826      	bhi.n	8011b70 <UART_SetConfig+0x2cc>
 8011b22:	a201      	add	r2, pc, #4	; (adr r2, 8011b28 <UART_SetConfig+0x284>)
 8011b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b28:	08011b41 	.word	0x08011b41
 8011b2c:	08011b49 	.word	0x08011b49
 8011b30:	08011b51 	.word	0x08011b51
 8011b34:	08011b59 	.word	0x08011b59
 8011b38:	08011b61 	.word	0x08011b61
 8011b3c:	08011b69 	.word	0x08011b69
 8011b40:	2300      	movs	r3, #0
 8011b42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011b46:	e284      	b.n	8012052 <UART_SetConfig+0x7ae>
 8011b48:	2304      	movs	r3, #4
 8011b4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011b4e:	e280      	b.n	8012052 <UART_SetConfig+0x7ae>
 8011b50:	2308      	movs	r3, #8
 8011b52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011b56:	e27c      	b.n	8012052 <UART_SetConfig+0x7ae>
 8011b58:	2310      	movs	r3, #16
 8011b5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011b5e:	e278      	b.n	8012052 <UART_SetConfig+0x7ae>
 8011b60:	2320      	movs	r3, #32
 8011b62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011b66:	e274      	b.n	8012052 <UART_SetConfig+0x7ae>
 8011b68:	2340      	movs	r3, #64	; 0x40
 8011b6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011b6e:	e270      	b.n	8012052 <UART_SetConfig+0x7ae>
 8011b70:	2380      	movs	r3, #128	; 0x80
 8011b72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011b76:	e26c      	b.n	8012052 <UART_SetConfig+0x7ae>
 8011b78:	697b      	ldr	r3, [r7, #20]
 8011b7a:	681b      	ldr	r3, [r3, #0]
 8011b7c:	4a1b      	ldr	r2, [pc, #108]	; (8011bec <UART_SetConfig+0x348>)
 8011b7e:	4293      	cmp	r3, r2
 8011b80:	d142      	bne.n	8011c08 <UART_SetConfig+0x364>
 8011b82:	4b16      	ldr	r3, [pc, #88]	; (8011bdc <UART_SetConfig+0x338>)
 8011b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011b86:	f003 0307 	and.w	r3, r3, #7
 8011b8a:	2b05      	cmp	r3, #5
 8011b8c:	d838      	bhi.n	8011c00 <UART_SetConfig+0x35c>
 8011b8e:	a201      	add	r2, pc, #4	; (adr r2, 8011b94 <UART_SetConfig+0x2f0>)
 8011b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b94:	08011bad 	.word	0x08011bad
 8011b98:	08011bb5 	.word	0x08011bb5
 8011b9c:	08011bbd 	.word	0x08011bbd
 8011ba0:	08011bc5 	.word	0x08011bc5
 8011ba4:	08011bf1 	.word	0x08011bf1
 8011ba8:	08011bf9 	.word	0x08011bf9
 8011bac:	2300      	movs	r3, #0
 8011bae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011bb2:	e24e      	b.n	8012052 <UART_SetConfig+0x7ae>
 8011bb4:	2304      	movs	r3, #4
 8011bb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011bba:	e24a      	b.n	8012052 <UART_SetConfig+0x7ae>
 8011bbc:	2308      	movs	r3, #8
 8011bbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011bc2:	e246      	b.n	8012052 <UART_SetConfig+0x7ae>
 8011bc4:	2310      	movs	r3, #16
 8011bc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011bca:	e242      	b.n	8012052 <UART_SetConfig+0x7ae>
 8011bcc:	cfff69f3 	.word	0xcfff69f3
 8011bd0:	58000c00 	.word	0x58000c00
 8011bd4:	11fff4ff 	.word	0x11fff4ff
 8011bd8:	40011000 	.word	0x40011000
 8011bdc:	58024400 	.word	0x58024400
 8011be0:	40004400 	.word	0x40004400
 8011be4:	40004800 	.word	0x40004800
 8011be8:	40004c00 	.word	0x40004c00
 8011bec:	40005000 	.word	0x40005000
 8011bf0:	2320      	movs	r3, #32
 8011bf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011bf6:	e22c      	b.n	8012052 <UART_SetConfig+0x7ae>
 8011bf8:	2340      	movs	r3, #64	; 0x40
 8011bfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011bfe:	e228      	b.n	8012052 <UART_SetConfig+0x7ae>
 8011c00:	2380      	movs	r3, #128	; 0x80
 8011c02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011c06:	e224      	b.n	8012052 <UART_SetConfig+0x7ae>
 8011c08:	697b      	ldr	r3, [r7, #20]
 8011c0a:	681b      	ldr	r3, [r3, #0]
 8011c0c:	4ab1      	ldr	r2, [pc, #708]	; (8011ed4 <UART_SetConfig+0x630>)
 8011c0e:	4293      	cmp	r3, r2
 8011c10:	d176      	bne.n	8011d00 <UART_SetConfig+0x45c>
 8011c12:	4bb1      	ldr	r3, [pc, #708]	; (8011ed8 <UART_SetConfig+0x634>)
 8011c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011c16:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011c1a:	2b28      	cmp	r3, #40	; 0x28
 8011c1c:	d86c      	bhi.n	8011cf8 <UART_SetConfig+0x454>
 8011c1e:	a201      	add	r2, pc, #4	; (adr r2, 8011c24 <UART_SetConfig+0x380>)
 8011c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c24:	08011cc9 	.word	0x08011cc9
 8011c28:	08011cf9 	.word	0x08011cf9
 8011c2c:	08011cf9 	.word	0x08011cf9
 8011c30:	08011cf9 	.word	0x08011cf9
 8011c34:	08011cf9 	.word	0x08011cf9
 8011c38:	08011cf9 	.word	0x08011cf9
 8011c3c:	08011cf9 	.word	0x08011cf9
 8011c40:	08011cf9 	.word	0x08011cf9
 8011c44:	08011cd1 	.word	0x08011cd1
 8011c48:	08011cf9 	.word	0x08011cf9
 8011c4c:	08011cf9 	.word	0x08011cf9
 8011c50:	08011cf9 	.word	0x08011cf9
 8011c54:	08011cf9 	.word	0x08011cf9
 8011c58:	08011cf9 	.word	0x08011cf9
 8011c5c:	08011cf9 	.word	0x08011cf9
 8011c60:	08011cf9 	.word	0x08011cf9
 8011c64:	08011cd9 	.word	0x08011cd9
 8011c68:	08011cf9 	.word	0x08011cf9
 8011c6c:	08011cf9 	.word	0x08011cf9
 8011c70:	08011cf9 	.word	0x08011cf9
 8011c74:	08011cf9 	.word	0x08011cf9
 8011c78:	08011cf9 	.word	0x08011cf9
 8011c7c:	08011cf9 	.word	0x08011cf9
 8011c80:	08011cf9 	.word	0x08011cf9
 8011c84:	08011ce1 	.word	0x08011ce1
 8011c88:	08011cf9 	.word	0x08011cf9
 8011c8c:	08011cf9 	.word	0x08011cf9
 8011c90:	08011cf9 	.word	0x08011cf9
 8011c94:	08011cf9 	.word	0x08011cf9
 8011c98:	08011cf9 	.word	0x08011cf9
 8011c9c:	08011cf9 	.word	0x08011cf9
 8011ca0:	08011cf9 	.word	0x08011cf9
 8011ca4:	08011ce9 	.word	0x08011ce9
 8011ca8:	08011cf9 	.word	0x08011cf9
 8011cac:	08011cf9 	.word	0x08011cf9
 8011cb0:	08011cf9 	.word	0x08011cf9
 8011cb4:	08011cf9 	.word	0x08011cf9
 8011cb8:	08011cf9 	.word	0x08011cf9
 8011cbc:	08011cf9 	.word	0x08011cf9
 8011cc0:	08011cf9 	.word	0x08011cf9
 8011cc4:	08011cf1 	.word	0x08011cf1
 8011cc8:	2301      	movs	r3, #1
 8011cca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011cce:	e1c0      	b.n	8012052 <UART_SetConfig+0x7ae>
 8011cd0:	2304      	movs	r3, #4
 8011cd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011cd6:	e1bc      	b.n	8012052 <UART_SetConfig+0x7ae>
 8011cd8:	2308      	movs	r3, #8
 8011cda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011cde:	e1b8      	b.n	8012052 <UART_SetConfig+0x7ae>
 8011ce0:	2310      	movs	r3, #16
 8011ce2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011ce6:	e1b4      	b.n	8012052 <UART_SetConfig+0x7ae>
 8011ce8:	2320      	movs	r3, #32
 8011cea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011cee:	e1b0      	b.n	8012052 <UART_SetConfig+0x7ae>
 8011cf0:	2340      	movs	r3, #64	; 0x40
 8011cf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011cf6:	e1ac      	b.n	8012052 <UART_SetConfig+0x7ae>
 8011cf8:	2380      	movs	r3, #128	; 0x80
 8011cfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011cfe:	e1a8      	b.n	8012052 <UART_SetConfig+0x7ae>
 8011d00:	697b      	ldr	r3, [r7, #20]
 8011d02:	681b      	ldr	r3, [r3, #0]
 8011d04:	4a75      	ldr	r2, [pc, #468]	; (8011edc <UART_SetConfig+0x638>)
 8011d06:	4293      	cmp	r3, r2
 8011d08:	d130      	bne.n	8011d6c <UART_SetConfig+0x4c8>
 8011d0a:	4b73      	ldr	r3, [pc, #460]	; (8011ed8 <UART_SetConfig+0x634>)
 8011d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011d0e:	f003 0307 	and.w	r3, r3, #7
 8011d12:	2b05      	cmp	r3, #5
 8011d14:	d826      	bhi.n	8011d64 <UART_SetConfig+0x4c0>
 8011d16:	a201      	add	r2, pc, #4	; (adr r2, 8011d1c <UART_SetConfig+0x478>)
 8011d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d1c:	08011d35 	.word	0x08011d35
 8011d20:	08011d3d 	.word	0x08011d3d
 8011d24:	08011d45 	.word	0x08011d45
 8011d28:	08011d4d 	.word	0x08011d4d
 8011d2c:	08011d55 	.word	0x08011d55
 8011d30:	08011d5d 	.word	0x08011d5d
 8011d34:	2300      	movs	r3, #0
 8011d36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d3a:	e18a      	b.n	8012052 <UART_SetConfig+0x7ae>
 8011d3c:	2304      	movs	r3, #4
 8011d3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d42:	e186      	b.n	8012052 <UART_SetConfig+0x7ae>
 8011d44:	2308      	movs	r3, #8
 8011d46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d4a:	e182      	b.n	8012052 <UART_SetConfig+0x7ae>
 8011d4c:	2310      	movs	r3, #16
 8011d4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d52:	e17e      	b.n	8012052 <UART_SetConfig+0x7ae>
 8011d54:	2320      	movs	r3, #32
 8011d56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d5a:	e17a      	b.n	8012052 <UART_SetConfig+0x7ae>
 8011d5c:	2340      	movs	r3, #64	; 0x40
 8011d5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d62:	e176      	b.n	8012052 <UART_SetConfig+0x7ae>
 8011d64:	2380      	movs	r3, #128	; 0x80
 8011d66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d6a:	e172      	b.n	8012052 <UART_SetConfig+0x7ae>
 8011d6c:	697b      	ldr	r3, [r7, #20]
 8011d6e:	681b      	ldr	r3, [r3, #0]
 8011d70:	4a5b      	ldr	r2, [pc, #364]	; (8011ee0 <UART_SetConfig+0x63c>)
 8011d72:	4293      	cmp	r3, r2
 8011d74:	d130      	bne.n	8011dd8 <UART_SetConfig+0x534>
 8011d76:	4b58      	ldr	r3, [pc, #352]	; (8011ed8 <UART_SetConfig+0x634>)
 8011d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011d7a:	f003 0307 	and.w	r3, r3, #7
 8011d7e:	2b05      	cmp	r3, #5
 8011d80:	d826      	bhi.n	8011dd0 <UART_SetConfig+0x52c>
 8011d82:	a201      	add	r2, pc, #4	; (adr r2, 8011d88 <UART_SetConfig+0x4e4>)
 8011d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d88:	08011da1 	.word	0x08011da1
 8011d8c:	08011da9 	.word	0x08011da9
 8011d90:	08011db1 	.word	0x08011db1
 8011d94:	08011db9 	.word	0x08011db9
 8011d98:	08011dc1 	.word	0x08011dc1
 8011d9c:	08011dc9 	.word	0x08011dc9
 8011da0:	2300      	movs	r3, #0
 8011da2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011da6:	e154      	b.n	8012052 <UART_SetConfig+0x7ae>
 8011da8:	2304      	movs	r3, #4
 8011daa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011dae:	e150      	b.n	8012052 <UART_SetConfig+0x7ae>
 8011db0:	2308      	movs	r3, #8
 8011db2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011db6:	e14c      	b.n	8012052 <UART_SetConfig+0x7ae>
 8011db8:	2310      	movs	r3, #16
 8011dba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011dbe:	e148      	b.n	8012052 <UART_SetConfig+0x7ae>
 8011dc0:	2320      	movs	r3, #32
 8011dc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011dc6:	e144      	b.n	8012052 <UART_SetConfig+0x7ae>
 8011dc8:	2340      	movs	r3, #64	; 0x40
 8011dca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011dce:	e140      	b.n	8012052 <UART_SetConfig+0x7ae>
 8011dd0:	2380      	movs	r3, #128	; 0x80
 8011dd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011dd6:	e13c      	b.n	8012052 <UART_SetConfig+0x7ae>
 8011dd8:	697b      	ldr	r3, [r7, #20]
 8011dda:	681b      	ldr	r3, [r3, #0]
 8011ddc:	4a41      	ldr	r2, [pc, #260]	; (8011ee4 <UART_SetConfig+0x640>)
 8011dde:	4293      	cmp	r3, r2
 8011de0:	f040 8082 	bne.w	8011ee8 <UART_SetConfig+0x644>
 8011de4:	4b3c      	ldr	r3, [pc, #240]	; (8011ed8 <UART_SetConfig+0x634>)
 8011de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011de8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011dec:	2b28      	cmp	r3, #40	; 0x28
 8011dee:	d86d      	bhi.n	8011ecc <UART_SetConfig+0x628>
 8011df0:	a201      	add	r2, pc, #4	; (adr r2, 8011df8 <UART_SetConfig+0x554>)
 8011df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011df6:	bf00      	nop
 8011df8:	08011e9d 	.word	0x08011e9d
 8011dfc:	08011ecd 	.word	0x08011ecd
 8011e00:	08011ecd 	.word	0x08011ecd
 8011e04:	08011ecd 	.word	0x08011ecd
 8011e08:	08011ecd 	.word	0x08011ecd
 8011e0c:	08011ecd 	.word	0x08011ecd
 8011e10:	08011ecd 	.word	0x08011ecd
 8011e14:	08011ecd 	.word	0x08011ecd
 8011e18:	08011ea5 	.word	0x08011ea5
 8011e1c:	08011ecd 	.word	0x08011ecd
 8011e20:	08011ecd 	.word	0x08011ecd
 8011e24:	08011ecd 	.word	0x08011ecd
 8011e28:	08011ecd 	.word	0x08011ecd
 8011e2c:	08011ecd 	.word	0x08011ecd
 8011e30:	08011ecd 	.word	0x08011ecd
 8011e34:	08011ecd 	.word	0x08011ecd
 8011e38:	08011ead 	.word	0x08011ead
 8011e3c:	08011ecd 	.word	0x08011ecd
 8011e40:	08011ecd 	.word	0x08011ecd
 8011e44:	08011ecd 	.word	0x08011ecd
 8011e48:	08011ecd 	.word	0x08011ecd
 8011e4c:	08011ecd 	.word	0x08011ecd
 8011e50:	08011ecd 	.word	0x08011ecd
 8011e54:	08011ecd 	.word	0x08011ecd
 8011e58:	08011eb5 	.word	0x08011eb5
 8011e5c:	08011ecd 	.word	0x08011ecd
 8011e60:	08011ecd 	.word	0x08011ecd
 8011e64:	08011ecd 	.word	0x08011ecd
 8011e68:	08011ecd 	.word	0x08011ecd
 8011e6c:	08011ecd 	.word	0x08011ecd
 8011e70:	08011ecd 	.word	0x08011ecd
 8011e74:	08011ecd 	.word	0x08011ecd
 8011e78:	08011ebd 	.word	0x08011ebd
 8011e7c:	08011ecd 	.word	0x08011ecd
 8011e80:	08011ecd 	.word	0x08011ecd
 8011e84:	08011ecd 	.word	0x08011ecd
 8011e88:	08011ecd 	.word	0x08011ecd
 8011e8c:	08011ecd 	.word	0x08011ecd
 8011e90:	08011ecd 	.word	0x08011ecd
 8011e94:	08011ecd 	.word	0x08011ecd
 8011e98:	08011ec5 	.word	0x08011ec5
 8011e9c:	2301      	movs	r3, #1
 8011e9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011ea2:	e0d6      	b.n	8012052 <UART_SetConfig+0x7ae>
 8011ea4:	2304      	movs	r3, #4
 8011ea6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011eaa:	e0d2      	b.n	8012052 <UART_SetConfig+0x7ae>
 8011eac:	2308      	movs	r3, #8
 8011eae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011eb2:	e0ce      	b.n	8012052 <UART_SetConfig+0x7ae>
 8011eb4:	2310      	movs	r3, #16
 8011eb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011eba:	e0ca      	b.n	8012052 <UART_SetConfig+0x7ae>
 8011ebc:	2320      	movs	r3, #32
 8011ebe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011ec2:	e0c6      	b.n	8012052 <UART_SetConfig+0x7ae>
 8011ec4:	2340      	movs	r3, #64	; 0x40
 8011ec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011eca:	e0c2      	b.n	8012052 <UART_SetConfig+0x7ae>
 8011ecc:	2380      	movs	r3, #128	; 0x80
 8011ece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011ed2:	e0be      	b.n	8012052 <UART_SetConfig+0x7ae>
 8011ed4:	40011400 	.word	0x40011400
 8011ed8:	58024400 	.word	0x58024400
 8011edc:	40007800 	.word	0x40007800
 8011ee0:	40007c00 	.word	0x40007c00
 8011ee4:	40011800 	.word	0x40011800
 8011ee8:	697b      	ldr	r3, [r7, #20]
 8011eea:	681b      	ldr	r3, [r3, #0]
 8011eec:	4aad      	ldr	r2, [pc, #692]	; (80121a4 <UART_SetConfig+0x900>)
 8011eee:	4293      	cmp	r3, r2
 8011ef0:	d176      	bne.n	8011fe0 <UART_SetConfig+0x73c>
 8011ef2:	4bad      	ldr	r3, [pc, #692]	; (80121a8 <UART_SetConfig+0x904>)
 8011ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011ef6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011efa:	2b28      	cmp	r3, #40	; 0x28
 8011efc:	d86c      	bhi.n	8011fd8 <UART_SetConfig+0x734>
 8011efe:	a201      	add	r2, pc, #4	; (adr r2, 8011f04 <UART_SetConfig+0x660>)
 8011f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f04:	08011fa9 	.word	0x08011fa9
 8011f08:	08011fd9 	.word	0x08011fd9
 8011f0c:	08011fd9 	.word	0x08011fd9
 8011f10:	08011fd9 	.word	0x08011fd9
 8011f14:	08011fd9 	.word	0x08011fd9
 8011f18:	08011fd9 	.word	0x08011fd9
 8011f1c:	08011fd9 	.word	0x08011fd9
 8011f20:	08011fd9 	.word	0x08011fd9
 8011f24:	08011fb1 	.word	0x08011fb1
 8011f28:	08011fd9 	.word	0x08011fd9
 8011f2c:	08011fd9 	.word	0x08011fd9
 8011f30:	08011fd9 	.word	0x08011fd9
 8011f34:	08011fd9 	.word	0x08011fd9
 8011f38:	08011fd9 	.word	0x08011fd9
 8011f3c:	08011fd9 	.word	0x08011fd9
 8011f40:	08011fd9 	.word	0x08011fd9
 8011f44:	08011fb9 	.word	0x08011fb9
 8011f48:	08011fd9 	.word	0x08011fd9
 8011f4c:	08011fd9 	.word	0x08011fd9
 8011f50:	08011fd9 	.word	0x08011fd9
 8011f54:	08011fd9 	.word	0x08011fd9
 8011f58:	08011fd9 	.word	0x08011fd9
 8011f5c:	08011fd9 	.word	0x08011fd9
 8011f60:	08011fd9 	.word	0x08011fd9
 8011f64:	08011fc1 	.word	0x08011fc1
 8011f68:	08011fd9 	.word	0x08011fd9
 8011f6c:	08011fd9 	.word	0x08011fd9
 8011f70:	08011fd9 	.word	0x08011fd9
 8011f74:	08011fd9 	.word	0x08011fd9
 8011f78:	08011fd9 	.word	0x08011fd9
 8011f7c:	08011fd9 	.word	0x08011fd9
 8011f80:	08011fd9 	.word	0x08011fd9
 8011f84:	08011fc9 	.word	0x08011fc9
 8011f88:	08011fd9 	.word	0x08011fd9
 8011f8c:	08011fd9 	.word	0x08011fd9
 8011f90:	08011fd9 	.word	0x08011fd9
 8011f94:	08011fd9 	.word	0x08011fd9
 8011f98:	08011fd9 	.word	0x08011fd9
 8011f9c:	08011fd9 	.word	0x08011fd9
 8011fa0:	08011fd9 	.word	0x08011fd9
 8011fa4:	08011fd1 	.word	0x08011fd1
 8011fa8:	2301      	movs	r3, #1
 8011faa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011fae:	e050      	b.n	8012052 <UART_SetConfig+0x7ae>
 8011fb0:	2304      	movs	r3, #4
 8011fb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011fb6:	e04c      	b.n	8012052 <UART_SetConfig+0x7ae>
 8011fb8:	2308      	movs	r3, #8
 8011fba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011fbe:	e048      	b.n	8012052 <UART_SetConfig+0x7ae>
 8011fc0:	2310      	movs	r3, #16
 8011fc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011fc6:	e044      	b.n	8012052 <UART_SetConfig+0x7ae>
 8011fc8:	2320      	movs	r3, #32
 8011fca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011fce:	e040      	b.n	8012052 <UART_SetConfig+0x7ae>
 8011fd0:	2340      	movs	r3, #64	; 0x40
 8011fd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011fd6:	e03c      	b.n	8012052 <UART_SetConfig+0x7ae>
 8011fd8:	2380      	movs	r3, #128	; 0x80
 8011fda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011fde:	e038      	b.n	8012052 <UART_SetConfig+0x7ae>
 8011fe0:	697b      	ldr	r3, [r7, #20]
 8011fe2:	681b      	ldr	r3, [r3, #0]
 8011fe4:	4a71      	ldr	r2, [pc, #452]	; (80121ac <UART_SetConfig+0x908>)
 8011fe6:	4293      	cmp	r3, r2
 8011fe8:	d130      	bne.n	801204c <UART_SetConfig+0x7a8>
 8011fea:	4b6f      	ldr	r3, [pc, #444]	; (80121a8 <UART_SetConfig+0x904>)
 8011fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011fee:	f003 0307 	and.w	r3, r3, #7
 8011ff2:	2b05      	cmp	r3, #5
 8011ff4:	d826      	bhi.n	8012044 <UART_SetConfig+0x7a0>
 8011ff6:	a201      	add	r2, pc, #4	; (adr r2, 8011ffc <UART_SetConfig+0x758>)
 8011ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ffc:	08012015 	.word	0x08012015
 8012000:	0801201d 	.word	0x0801201d
 8012004:	08012025 	.word	0x08012025
 8012008:	0801202d 	.word	0x0801202d
 801200c:	08012035 	.word	0x08012035
 8012010:	0801203d 	.word	0x0801203d
 8012014:	2302      	movs	r3, #2
 8012016:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801201a:	e01a      	b.n	8012052 <UART_SetConfig+0x7ae>
 801201c:	2304      	movs	r3, #4
 801201e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012022:	e016      	b.n	8012052 <UART_SetConfig+0x7ae>
 8012024:	2308      	movs	r3, #8
 8012026:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801202a:	e012      	b.n	8012052 <UART_SetConfig+0x7ae>
 801202c:	2310      	movs	r3, #16
 801202e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012032:	e00e      	b.n	8012052 <UART_SetConfig+0x7ae>
 8012034:	2320      	movs	r3, #32
 8012036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801203a:	e00a      	b.n	8012052 <UART_SetConfig+0x7ae>
 801203c:	2340      	movs	r3, #64	; 0x40
 801203e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012042:	e006      	b.n	8012052 <UART_SetConfig+0x7ae>
 8012044:	2380      	movs	r3, #128	; 0x80
 8012046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801204a:	e002      	b.n	8012052 <UART_SetConfig+0x7ae>
 801204c:	2380      	movs	r3, #128	; 0x80
 801204e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8012052:	697b      	ldr	r3, [r7, #20]
 8012054:	681b      	ldr	r3, [r3, #0]
 8012056:	4a55      	ldr	r2, [pc, #340]	; (80121ac <UART_SetConfig+0x908>)
 8012058:	4293      	cmp	r3, r2
 801205a:	f040 80f8 	bne.w	801224e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801205e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8012062:	2b20      	cmp	r3, #32
 8012064:	dc46      	bgt.n	80120f4 <UART_SetConfig+0x850>
 8012066:	2b02      	cmp	r3, #2
 8012068:	db75      	blt.n	8012156 <UART_SetConfig+0x8b2>
 801206a:	3b02      	subs	r3, #2
 801206c:	2b1e      	cmp	r3, #30
 801206e:	d872      	bhi.n	8012156 <UART_SetConfig+0x8b2>
 8012070:	a201      	add	r2, pc, #4	; (adr r2, 8012078 <UART_SetConfig+0x7d4>)
 8012072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012076:	bf00      	nop
 8012078:	080120fb 	.word	0x080120fb
 801207c:	08012157 	.word	0x08012157
 8012080:	08012103 	.word	0x08012103
 8012084:	08012157 	.word	0x08012157
 8012088:	08012157 	.word	0x08012157
 801208c:	08012157 	.word	0x08012157
 8012090:	08012113 	.word	0x08012113
 8012094:	08012157 	.word	0x08012157
 8012098:	08012157 	.word	0x08012157
 801209c:	08012157 	.word	0x08012157
 80120a0:	08012157 	.word	0x08012157
 80120a4:	08012157 	.word	0x08012157
 80120a8:	08012157 	.word	0x08012157
 80120ac:	08012157 	.word	0x08012157
 80120b0:	08012123 	.word	0x08012123
 80120b4:	08012157 	.word	0x08012157
 80120b8:	08012157 	.word	0x08012157
 80120bc:	08012157 	.word	0x08012157
 80120c0:	08012157 	.word	0x08012157
 80120c4:	08012157 	.word	0x08012157
 80120c8:	08012157 	.word	0x08012157
 80120cc:	08012157 	.word	0x08012157
 80120d0:	08012157 	.word	0x08012157
 80120d4:	08012157 	.word	0x08012157
 80120d8:	08012157 	.word	0x08012157
 80120dc:	08012157 	.word	0x08012157
 80120e0:	08012157 	.word	0x08012157
 80120e4:	08012157 	.word	0x08012157
 80120e8:	08012157 	.word	0x08012157
 80120ec:	08012157 	.word	0x08012157
 80120f0:	08012149 	.word	0x08012149
 80120f4:	2b40      	cmp	r3, #64	; 0x40
 80120f6:	d02a      	beq.n	801214e <UART_SetConfig+0x8aa>
 80120f8:	e02d      	b.n	8012156 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80120fa:	f7fd f8bd 	bl	800f278 <HAL_RCCEx_GetD3PCLK1Freq>
 80120fe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8012100:	e02f      	b.n	8012162 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012102:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012106:	4618      	mov	r0, r3
 8012108:	f7fd f8cc 	bl	800f2a4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801210c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801210e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012110:	e027      	b.n	8012162 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012112:	f107 0318 	add.w	r3, r7, #24
 8012116:	4618      	mov	r0, r3
 8012118:	f7fd fa18 	bl	800f54c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801211c:	69fb      	ldr	r3, [r7, #28]
 801211e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012120:	e01f      	b.n	8012162 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012122:	4b21      	ldr	r3, [pc, #132]	; (80121a8 <UART_SetConfig+0x904>)
 8012124:	681b      	ldr	r3, [r3, #0]
 8012126:	f003 0320 	and.w	r3, r3, #32
 801212a:	2b00      	cmp	r3, #0
 801212c:	d009      	beq.n	8012142 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801212e:	4b1e      	ldr	r3, [pc, #120]	; (80121a8 <UART_SetConfig+0x904>)
 8012130:	681b      	ldr	r3, [r3, #0]
 8012132:	08db      	lsrs	r3, r3, #3
 8012134:	f003 0303 	and.w	r3, r3, #3
 8012138:	4a1d      	ldr	r2, [pc, #116]	; (80121b0 <UART_SetConfig+0x90c>)
 801213a:	fa22 f303 	lsr.w	r3, r2, r3
 801213e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8012140:	e00f      	b.n	8012162 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8012142:	4b1b      	ldr	r3, [pc, #108]	; (80121b0 <UART_SetConfig+0x90c>)
 8012144:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012146:	e00c      	b.n	8012162 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8012148:	4b1a      	ldr	r3, [pc, #104]	; (80121b4 <UART_SetConfig+0x910>)
 801214a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801214c:	e009      	b.n	8012162 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801214e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012152:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012154:	e005      	b.n	8012162 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8012156:	2300      	movs	r3, #0
 8012158:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801215a:	2301      	movs	r3, #1
 801215c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8012160:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8012162:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012164:	2b00      	cmp	r3, #0
 8012166:	f000 81ee 	beq.w	8012546 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801216a:	697b      	ldr	r3, [r7, #20]
 801216c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801216e:	4a12      	ldr	r2, [pc, #72]	; (80121b8 <UART_SetConfig+0x914>)
 8012170:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012174:	461a      	mov	r2, r3
 8012176:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012178:	fbb3 f3f2 	udiv	r3, r3, r2
 801217c:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801217e:	697b      	ldr	r3, [r7, #20]
 8012180:	685a      	ldr	r2, [r3, #4]
 8012182:	4613      	mov	r3, r2
 8012184:	005b      	lsls	r3, r3, #1
 8012186:	4413      	add	r3, r2
 8012188:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801218a:	429a      	cmp	r2, r3
 801218c:	d305      	bcc.n	801219a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801218e:	697b      	ldr	r3, [r7, #20]
 8012190:	685b      	ldr	r3, [r3, #4]
 8012192:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8012194:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012196:	429a      	cmp	r2, r3
 8012198:	d910      	bls.n	80121bc <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 801219a:	2301      	movs	r3, #1
 801219c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80121a0:	e1d1      	b.n	8012546 <UART_SetConfig+0xca2>
 80121a2:	bf00      	nop
 80121a4:	40011c00 	.word	0x40011c00
 80121a8:	58024400 	.word	0x58024400
 80121ac:	58000c00 	.word	0x58000c00
 80121b0:	03d09000 	.word	0x03d09000
 80121b4:	003d0900 	.word	0x003d0900
 80121b8:	0802b934 	.word	0x0802b934
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80121bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80121be:	2200      	movs	r2, #0
 80121c0:	60bb      	str	r3, [r7, #8]
 80121c2:	60fa      	str	r2, [r7, #12]
 80121c4:	697b      	ldr	r3, [r7, #20]
 80121c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121c8:	4ac0      	ldr	r2, [pc, #768]	; (80124cc <UART_SetConfig+0xc28>)
 80121ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80121ce:	b29b      	uxth	r3, r3
 80121d0:	2200      	movs	r2, #0
 80121d2:	603b      	str	r3, [r7, #0]
 80121d4:	607a      	str	r2, [r7, #4]
 80121d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80121da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80121de:	f7ee f8ef 	bl	80003c0 <__aeabi_uldivmod>
 80121e2:	4602      	mov	r2, r0
 80121e4:	460b      	mov	r3, r1
 80121e6:	4610      	mov	r0, r2
 80121e8:	4619      	mov	r1, r3
 80121ea:	f04f 0200 	mov.w	r2, #0
 80121ee:	f04f 0300 	mov.w	r3, #0
 80121f2:	020b      	lsls	r3, r1, #8
 80121f4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80121f8:	0202      	lsls	r2, r0, #8
 80121fa:	6979      	ldr	r1, [r7, #20]
 80121fc:	6849      	ldr	r1, [r1, #4]
 80121fe:	0849      	lsrs	r1, r1, #1
 8012200:	2000      	movs	r0, #0
 8012202:	460c      	mov	r4, r1
 8012204:	4605      	mov	r5, r0
 8012206:	eb12 0804 	adds.w	r8, r2, r4
 801220a:	eb43 0905 	adc.w	r9, r3, r5
 801220e:	697b      	ldr	r3, [r7, #20]
 8012210:	685b      	ldr	r3, [r3, #4]
 8012212:	2200      	movs	r2, #0
 8012214:	469a      	mov	sl, r3
 8012216:	4693      	mov	fp, r2
 8012218:	4652      	mov	r2, sl
 801221a:	465b      	mov	r3, fp
 801221c:	4640      	mov	r0, r8
 801221e:	4649      	mov	r1, r9
 8012220:	f7ee f8ce 	bl	80003c0 <__aeabi_uldivmod>
 8012224:	4602      	mov	r2, r0
 8012226:	460b      	mov	r3, r1
 8012228:	4613      	mov	r3, r2
 801222a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801222c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801222e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8012232:	d308      	bcc.n	8012246 <UART_SetConfig+0x9a2>
 8012234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012236:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801223a:	d204      	bcs.n	8012246 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 801223c:	697b      	ldr	r3, [r7, #20]
 801223e:	681b      	ldr	r3, [r3, #0]
 8012240:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012242:	60da      	str	r2, [r3, #12]
 8012244:	e17f      	b.n	8012546 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8012246:	2301      	movs	r3, #1
 8012248:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 801224c:	e17b      	b.n	8012546 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801224e:	697b      	ldr	r3, [r7, #20]
 8012250:	69db      	ldr	r3, [r3, #28]
 8012252:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012256:	f040 80bd 	bne.w	80123d4 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 801225a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801225e:	2b20      	cmp	r3, #32
 8012260:	dc48      	bgt.n	80122f4 <UART_SetConfig+0xa50>
 8012262:	2b00      	cmp	r3, #0
 8012264:	db7b      	blt.n	801235e <UART_SetConfig+0xaba>
 8012266:	2b20      	cmp	r3, #32
 8012268:	d879      	bhi.n	801235e <UART_SetConfig+0xaba>
 801226a:	a201      	add	r2, pc, #4	; (adr r2, 8012270 <UART_SetConfig+0x9cc>)
 801226c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012270:	080122fb 	.word	0x080122fb
 8012274:	08012303 	.word	0x08012303
 8012278:	0801235f 	.word	0x0801235f
 801227c:	0801235f 	.word	0x0801235f
 8012280:	0801230b 	.word	0x0801230b
 8012284:	0801235f 	.word	0x0801235f
 8012288:	0801235f 	.word	0x0801235f
 801228c:	0801235f 	.word	0x0801235f
 8012290:	0801231b 	.word	0x0801231b
 8012294:	0801235f 	.word	0x0801235f
 8012298:	0801235f 	.word	0x0801235f
 801229c:	0801235f 	.word	0x0801235f
 80122a0:	0801235f 	.word	0x0801235f
 80122a4:	0801235f 	.word	0x0801235f
 80122a8:	0801235f 	.word	0x0801235f
 80122ac:	0801235f 	.word	0x0801235f
 80122b0:	0801232b 	.word	0x0801232b
 80122b4:	0801235f 	.word	0x0801235f
 80122b8:	0801235f 	.word	0x0801235f
 80122bc:	0801235f 	.word	0x0801235f
 80122c0:	0801235f 	.word	0x0801235f
 80122c4:	0801235f 	.word	0x0801235f
 80122c8:	0801235f 	.word	0x0801235f
 80122cc:	0801235f 	.word	0x0801235f
 80122d0:	0801235f 	.word	0x0801235f
 80122d4:	0801235f 	.word	0x0801235f
 80122d8:	0801235f 	.word	0x0801235f
 80122dc:	0801235f 	.word	0x0801235f
 80122e0:	0801235f 	.word	0x0801235f
 80122e4:	0801235f 	.word	0x0801235f
 80122e8:	0801235f 	.word	0x0801235f
 80122ec:	0801235f 	.word	0x0801235f
 80122f0:	08012351 	.word	0x08012351
 80122f4:	2b40      	cmp	r3, #64	; 0x40
 80122f6:	d02e      	beq.n	8012356 <UART_SetConfig+0xab2>
 80122f8:	e031      	b.n	801235e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80122fa:	f7fb f8b9 	bl	800d470 <HAL_RCC_GetPCLK1Freq>
 80122fe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8012300:	e033      	b.n	801236a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8012302:	f7fb f8cb 	bl	800d49c <HAL_RCC_GetPCLK2Freq>
 8012306:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8012308:	e02f      	b.n	801236a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801230a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801230e:	4618      	mov	r0, r3
 8012310:	f7fc ffc8 	bl	800f2a4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8012314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012316:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012318:	e027      	b.n	801236a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801231a:	f107 0318 	add.w	r3, r7, #24
 801231e:	4618      	mov	r0, r3
 8012320:	f7fd f914 	bl	800f54c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8012324:	69fb      	ldr	r3, [r7, #28]
 8012326:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012328:	e01f      	b.n	801236a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801232a:	4b69      	ldr	r3, [pc, #420]	; (80124d0 <UART_SetConfig+0xc2c>)
 801232c:	681b      	ldr	r3, [r3, #0]
 801232e:	f003 0320 	and.w	r3, r3, #32
 8012332:	2b00      	cmp	r3, #0
 8012334:	d009      	beq.n	801234a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8012336:	4b66      	ldr	r3, [pc, #408]	; (80124d0 <UART_SetConfig+0xc2c>)
 8012338:	681b      	ldr	r3, [r3, #0]
 801233a:	08db      	lsrs	r3, r3, #3
 801233c:	f003 0303 	and.w	r3, r3, #3
 8012340:	4a64      	ldr	r2, [pc, #400]	; (80124d4 <UART_SetConfig+0xc30>)
 8012342:	fa22 f303 	lsr.w	r3, r2, r3
 8012346:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8012348:	e00f      	b.n	801236a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 801234a:	4b62      	ldr	r3, [pc, #392]	; (80124d4 <UART_SetConfig+0xc30>)
 801234c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801234e:	e00c      	b.n	801236a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8012350:	4b61      	ldr	r3, [pc, #388]	; (80124d8 <UART_SetConfig+0xc34>)
 8012352:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012354:	e009      	b.n	801236a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8012356:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801235a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801235c:	e005      	b.n	801236a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 801235e:	2300      	movs	r3, #0
 8012360:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8012362:	2301      	movs	r3, #1
 8012364:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8012368:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801236a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801236c:	2b00      	cmp	r3, #0
 801236e:	f000 80ea 	beq.w	8012546 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012372:	697b      	ldr	r3, [r7, #20]
 8012374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012376:	4a55      	ldr	r2, [pc, #340]	; (80124cc <UART_SetConfig+0xc28>)
 8012378:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801237c:	461a      	mov	r2, r3
 801237e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012380:	fbb3 f3f2 	udiv	r3, r3, r2
 8012384:	005a      	lsls	r2, r3, #1
 8012386:	697b      	ldr	r3, [r7, #20]
 8012388:	685b      	ldr	r3, [r3, #4]
 801238a:	085b      	lsrs	r3, r3, #1
 801238c:	441a      	add	r2, r3
 801238e:	697b      	ldr	r3, [r7, #20]
 8012390:	685b      	ldr	r3, [r3, #4]
 8012392:	fbb2 f3f3 	udiv	r3, r2, r3
 8012396:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801239a:	2b0f      	cmp	r3, #15
 801239c:	d916      	bls.n	80123cc <UART_SetConfig+0xb28>
 801239e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80123a4:	d212      	bcs.n	80123cc <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80123a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123a8:	b29b      	uxth	r3, r3
 80123aa:	f023 030f 	bic.w	r3, r3, #15
 80123ae:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80123b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123b2:	085b      	lsrs	r3, r3, #1
 80123b4:	b29b      	uxth	r3, r3
 80123b6:	f003 0307 	and.w	r3, r3, #7
 80123ba:	b29a      	uxth	r2, r3
 80123bc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80123be:	4313      	orrs	r3, r2
 80123c0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80123c2:	697b      	ldr	r3, [r7, #20]
 80123c4:	681b      	ldr	r3, [r3, #0]
 80123c6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80123c8:	60da      	str	r2, [r3, #12]
 80123ca:	e0bc      	b.n	8012546 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80123cc:	2301      	movs	r3, #1
 80123ce:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80123d2:	e0b8      	b.n	8012546 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80123d4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80123d8:	2b20      	cmp	r3, #32
 80123da:	dc4b      	bgt.n	8012474 <UART_SetConfig+0xbd0>
 80123dc:	2b00      	cmp	r3, #0
 80123de:	f2c0 8087 	blt.w	80124f0 <UART_SetConfig+0xc4c>
 80123e2:	2b20      	cmp	r3, #32
 80123e4:	f200 8084 	bhi.w	80124f0 <UART_SetConfig+0xc4c>
 80123e8:	a201      	add	r2, pc, #4	; (adr r2, 80123f0 <UART_SetConfig+0xb4c>)
 80123ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80123ee:	bf00      	nop
 80123f0:	0801247b 	.word	0x0801247b
 80123f4:	08012483 	.word	0x08012483
 80123f8:	080124f1 	.word	0x080124f1
 80123fc:	080124f1 	.word	0x080124f1
 8012400:	0801248b 	.word	0x0801248b
 8012404:	080124f1 	.word	0x080124f1
 8012408:	080124f1 	.word	0x080124f1
 801240c:	080124f1 	.word	0x080124f1
 8012410:	0801249b 	.word	0x0801249b
 8012414:	080124f1 	.word	0x080124f1
 8012418:	080124f1 	.word	0x080124f1
 801241c:	080124f1 	.word	0x080124f1
 8012420:	080124f1 	.word	0x080124f1
 8012424:	080124f1 	.word	0x080124f1
 8012428:	080124f1 	.word	0x080124f1
 801242c:	080124f1 	.word	0x080124f1
 8012430:	080124ab 	.word	0x080124ab
 8012434:	080124f1 	.word	0x080124f1
 8012438:	080124f1 	.word	0x080124f1
 801243c:	080124f1 	.word	0x080124f1
 8012440:	080124f1 	.word	0x080124f1
 8012444:	080124f1 	.word	0x080124f1
 8012448:	080124f1 	.word	0x080124f1
 801244c:	080124f1 	.word	0x080124f1
 8012450:	080124f1 	.word	0x080124f1
 8012454:	080124f1 	.word	0x080124f1
 8012458:	080124f1 	.word	0x080124f1
 801245c:	080124f1 	.word	0x080124f1
 8012460:	080124f1 	.word	0x080124f1
 8012464:	080124f1 	.word	0x080124f1
 8012468:	080124f1 	.word	0x080124f1
 801246c:	080124f1 	.word	0x080124f1
 8012470:	080124e3 	.word	0x080124e3
 8012474:	2b40      	cmp	r3, #64	; 0x40
 8012476:	d037      	beq.n	80124e8 <UART_SetConfig+0xc44>
 8012478:	e03a      	b.n	80124f0 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801247a:	f7fa fff9 	bl	800d470 <HAL_RCC_GetPCLK1Freq>
 801247e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8012480:	e03c      	b.n	80124fc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8012482:	f7fb f80b 	bl	800d49c <HAL_RCC_GetPCLK2Freq>
 8012486:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8012488:	e038      	b.n	80124fc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801248a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801248e:	4618      	mov	r0, r3
 8012490:	f7fc ff08 	bl	800f2a4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8012494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012496:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012498:	e030      	b.n	80124fc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801249a:	f107 0318 	add.w	r3, r7, #24
 801249e:	4618      	mov	r0, r3
 80124a0:	f7fd f854 	bl	800f54c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80124a4:	69fb      	ldr	r3, [r7, #28]
 80124a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80124a8:	e028      	b.n	80124fc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80124aa:	4b09      	ldr	r3, [pc, #36]	; (80124d0 <UART_SetConfig+0xc2c>)
 80124ac:	681b      	ldr	r3, [r3, #0]
 80124ae:	f003 0320 	and.w	r3, r3, #32
 80124b2:	2b00      	cmp	r3, #0
 80124b4:	d012      	beq.n	80124dc <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80124b6:	4b06      	ldr	r3, [pc, #24]	; (80124d0 <UART_SetConfig+0xc2c>)
 80124b8:	681b      	ldr	r3, [r3, #0]
 80124ba:	08db      	lsrs	r3, r3, #3
 80124bc:	f003 0303 	and.w	r3, r3, #3
 80124c0:	4a04      	ldr	r2, [pc, #16]	; (80124d4 <UART_SetConfig+0xc30>)
 80124c2:	fa22 f303 	lsr.w	r3, r2, r3
 80124c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80124c8:	e018      	b.n	80124fc <UART_SetConfig+0xc58>
 80124ca:	bf00      	nop
 80124cc:	0802b934 	.word	0x0802b934
 80124d0:	58024400 	.word	0x58024400
 80124d4:	03d09000 	.word	0x03d09000
 80124d8:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80124dc:	4b24      	ldr	r3, [pc, #144]	; (8012570 <UART_SetConfig+0xccc>)
 80124de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80124e0:	e00c      	b.n	80124fc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80124e2:	4b24      	ldr	r3, [pc, #144]	; (8012574 <UART_SetConfig+0xcd0>)
 80124e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80124e6:	e009      	b.n	80124fc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80124e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80124ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80124ee:	e005      	b.n	80124fc <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80124f0:	2300      	movs	r3, #0
 80124f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80124f4:	2301      	movs	r3, #1
 80124f6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80124fa:	bf00      	nop
    }

    if (pclk != 0U)
 80124fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80124fe:	2b00      	cmp	r3, #0
 8012500:	d021      	beq.n	8012546 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012502:	697b      	ldr	r3, [r7, #20]
 8012504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012506:	4a1c      	ldr	r2, [pc, #112]	; (8012578 <UART_SetConfig+0xcd4>)
 8012508:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801250c:	461a      	mov	r2, r3
 801250e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012510:	fbb3 f2f2 	udiv	r2, r3, r2
 8012514:	697b      	ldr	r3, [r7, #20]
 8012516:	685b      	ldr	r3, [r3, #4]
 8012518:	085b      	lsrs	r3, r3, #1
 801251a:	441a      	add	r2, r3
 801251c:	697b      	ldr	r3, [r7, #20]
 801251e:	685b      	ldr	r3, [r3, #4]
 8012520:	fbb2 f3f3 	udiv	r3, r2, r3
 8012524:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012528:	2b0f      	cmp	r3, #15
 801252a:	d909      	bls.n	8012540 <UART_SetConfig+0xc9c>
 801252c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801252e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012532:	d205      	bcs.n	8012540 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8012534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012536:	b29a      	uxth	r2, r3
 8012538:	697b      	ldr	r3, [r7, #20]
 801253a:	681b      	ldr	r3, [r3, #0]
 801253c:	60da      	str	r2, [r3, #12]
 801253e:	e002      	b.n	8012546 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8012540:	2301      	movs	r3, #1
 8012542:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8012546:	697b      	ldr	r3, [r7, #20]
 8012548:	2201      	movs	r2, #1
 801254a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 801254e:	697b      	ldr	r3, [r7, #20]
 8012550:	2201      	movs	r2, #1
 8012552:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8012556:	697b      	ldr	r3, [r7, #20]
 8012558:	2200      	movs	r2, #0
 801255a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 801255c:	697b      	ldr	r3, [r7, #20]
 801255e:	2200      	movs	r2, #0
 8012560:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8012562:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8012566:	4618      	mov	r0, r3
 8012568:	3748      	adds	r7, #72	; 0x48
 801256a:	46bd      	mov	sp, r7
 801256c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8012570:	03d09000 	.word	0x03d09000
 8012574:	003d0900 	.word	0x003d0900
 8012578:	0802b934 	.word	0x0802b934

0801257c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801257c:	b480      	push	{r7}
 801257e:	b083      	sub	sp, #12
 8012580:	af00      	add	r7, sp, #0
 8012582:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012588:	f003 0301 	and.w	r3, r3, #1
 801258c:	2b00      	cmp	r3, #0
 801258e:	d00a      	beq.n	80125a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	681b      	ldr	r3, [r3, #0]
 8012594:	685b      	ldr	r3, [r3, #4]
 8012596:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	681b      	ldr	r3, [r3, #0]
 80125a2:	430a      	orrs	r2, r1
 80125a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80125aa:	f003 0302 	and.w	r3, r3, #2
 80125ae:	2b00      	cmp	r3, #0
 80125b0:	d00a      	beq.n	80125c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	681b      	ldr	r3, [r3, #0]
 80125b6:	685b      	ldr	r3, [r3, #4]
 80125b8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	681b      	ldr	r3, [r3, #0]
 80125c4:	430a      	orrs	r2, r1
 80125c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80125cc:	f003 0304 	and.w	r3, r3, #4
 80125d0:	2b00      	cmp	r3, #0
 80125d2:	d00a      	beq.n	80125ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	681b      	ldr	r3, [r3, #0]
 80125d8:	685b      	ldr	r3, [r3, #4]
 80125da:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	681b      	ldr	r3, [r3, #0]
 80125e6:	430a      	orrs	r2, r1
 80125e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80125ee:	f003 0308 	and.w	r3, r3, #8
 80125f2:	2b00      	cmp	r3, #0
 80125f4:	d00a      	beq.n	801260c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	681b      	ldr	r3, [r3, #0]
 80125fa:	685b      	ldr	r3, [r3, #4]
 80125fc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	681b      	ldr	r3, [r3, #0]
 8012608:	430a      	orrs	r2, r1
 801260a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012610:	f003 0310 	and.w	r3, r3, #16
 8012614:	2b00      	cmp	r3, #0
 8012616:	d00a      	beq.n	801262e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	681b      	ldr	r3, [r3, #0]
 801261c:	689b      	ldr	r3, [r3, #8]
 801261e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	681b      	ldr	r3, [r3, #0]
 801262a:	430a      	orrs	r2, r1
 801262c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012632:	f003 0320 	and.w	r3, r3, #32
 8012636:	2b00      	cmp	r3, #0
 8012638:	d00a      	beq.n	8012650 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	681b      	ldr	r3, [r3, #0]
 801263e:	689b      	ldr	r3, [r3, #8]
 8012640:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	681b      	ldr	r3, [r3, #0]
 801264c:	430a      	orrs	r2, r1
 801264e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012654:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012658:	2b00      	cmp	r3, #0
 801265a:	d01a      	beq.n	8012692 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	681b      	ldr	r3, [r3, #0]
 8012660:	685b      	ldr	r3, [r3, #4]
 8012662:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	681b      	ldr	r3, [r3, #0]
 801266e:	430a      	orrs	r2, r1
 8012670:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012676:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801267a:	d10a      	bne.n	8012692 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	681b      	ldr	r3, [r3, #0]
 8012680:	685b      	ldr	r3, [r3, #4]
 8012682:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	681b      	ldr	r3, [r3, #0]
 801268e:	430a      	orrs	r2, r1
 8012690:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801269a:	2b00      	cmp	r3, #0
 801269c:	d00a      	beq.n	80126b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	681b      	ldr	r3, [r3, #0]
 80126a2:	685b      	ldr	r3, [r3, #4]
 80126a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	681b      	ldr	r3, [r3, #0]
 80126b0:	430a      	orrs	r2, r1
 80126b2:	605a      	str	r2, [r3, #4]
  }
}
 80126b4:	bf00      	nop
 80126b6:	370c      	adds	r7, #12
 80126b8:	46bd      	mov	sp, r7
 80126ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126be:	4770      	bx	lr

080126c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80126c0:	b580      	push	{r7, lr}
 80126c2:	b098      	sub	sp, #96	; 0x60
 80126c4:	af02      	add	r7, sp, #8
 80126c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	2200      	movs	r2, #0
 80126cc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80126d0:	f7f6 fd1e 	bl	8009110 <HAL_GetTick>
 80126d4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	681b      	ldr	r3, [r3, #0]
 80126da:	681b      	ldr	r3, [r3, #0]
 80126dc:	f003 0308 	and.w	r3, r3, #8
 80126e0:	2b08      	cmp	r3, #8
 80126e2:	d12f      	bne.n	8012744 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80126e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80126e8:	9300      	str	r3, [sp, #0]
 80126ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80126ec:	2200      	movs	r2, #0
 80126ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80126f2:	6878      	ldr	r0, [r7, #4]
 80126f4:	f000 f88e 	bl	8012814 <UART_WaitOnFlagUntilTimeout>
 80126f8:	4603      	mov	r3, r0
 80126fa:	2b00      	cmp	r3, #0
 80126fc:	d022      	beq.n	8012744 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	681b      	ldr	r3, [r3, #0]
 8012702:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012706:	e853 3f00 	ldrex	r3, [r3]
 801270a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801270c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801270e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012712:	653b      	str	r3, [r7, #80]	; 0x50
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	681b      	ldr	r3, [r3, #0]
 8012718:	461a      	mov	r2, r3
 801271a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801271c:	647b      	str	r3, [r7, #68]	; 0x44
 801271e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012720:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012722:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012724:	e841 2300 	strex	r3, r2, [r1]
 8012728:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801272a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801272c:	2b00      	cmp	r3, #0
 801272e:	d1e6      	bne.n	80126fe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	2220      	movs	r2, #32
 8012734:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	2200      	movs	r2, #0
 801273c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8012740:	2303      	movs	r3, #3
 8012742:	e063      	b.n	801280c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8012744:	687b      	ldr	r3, [r7, #4]
 8012746:	681b      	ldr	r3, [r3, #0]
 8012748:	681b      	ldr	r3, [r3, #0]
 801274a:	f003 0304 	and.w	r3, r3, #4
 801274e:	2b04      	cmp	r3, #4
 8012750:	d149      	bne.n	80127e6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8012752:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8012756:	9300      	str	r3, [sp, #0]
 8012758:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801275a:	2200      	movs	r2, #0
 801275c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8012760:	6878      	ldr	r0, [r7, #4]
 8012762:	f000 f857 	bl	8012814 <UART_WaitOnFlagUntilTimeout>
 8012766:	4603      	mov	r3, r0
 8012768:	2b00      	cmp	r3, #0
 801276a:	d03c      	beq.n	80127e6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	681b      	ldr	r3, [r3, #0]
 8012770:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012774:	e853 3f00 	ldrex	r3, [r3]
 8012778:	623b      	str	r3, [r7, #32]
   return(result);
 801277a:	6a3b      	ldr	r3, [r7, #32]
 801277c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012780:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	681b      	ldr	r3, [r3, #0]
 8012786:	461a      	mov	r2, r3
 8012788:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801278a:	633b      	str	r3, [r7, #48]	; 0x30
 801278c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801278e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012790:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012792:	e841 2300 	strex	r3, r2, [r1]
 8012796:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8012798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801279a:	2b00      	cmp	r3, #0
 801279c:	d1e6      	bne.n	801276c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	681b      	ldr	r3, [r3, #0]
 80127a2:	3308      	adds	r3, #8
 80127a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80127a6:	693b      	ldr	r3, [r7, #16]
 80127a8:	e853 3f00 	ldrex	r3, [r3]
 80127ac:	60fb      	str	r3, [r7, #12]
   return(result);
 80127ae:	68fb      	ldr	r3, [r7, #12]
 80127b0:	f023 0301 	bic.w	r3, r3, #1
 80127b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	681b      	ldr	r3, [r3, #0]
 80127ba:	3308      	adds	r3, #8
 80127bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80127be:	61fa      	str	r2, [r7, #28]
 80127c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80127c2:	69b9      	ldr	r1, [r7, #24]
 80127c4:	69fa      	ldr	r2, [r7, #28]
 80127c6:	e841 2300 	strex	r3, r2, [r1]
 80127ca:	617b      	str	r3, [r7, #20]
   return(result);
 80127cc:	697b      	ldr	r3, [r7, #20]
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	d1e5      	bne.n	801279e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80127d2:	687b      	ldr	r3, [r7, #4]
 80127d4:	2220      	movs	r2, #32
 80127d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	2200      	movs	r2, #0
 80127de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80127e2:	2303      	movs	r3, #3
 80127e4:	e012      	b.n	801280c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80127e6:	687b      	ldr	r3, [r7, #4]
 80127e8:	2220      	movs	r2, #32
 80127ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	2220      	movs	r2, #32
 80127f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	2200      	movs	r2, #0
 80127fa:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	2200      	movs	r2, #0
 8012800:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	2200      	movs	r2, #0
 8012806:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801280a:	2300      	movs	r3, #0
}
 801280c:	4618      	mov	r0, r3
 801280e:	3758      	adds	r7, #88	; 0x58
 8012810:	46bd      	mov	sp, r7
 8012812:	bd80      	pop	{r7, pc}

08012814 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8012814:	b580      	push	{r7, lr}
 8012816:	b084      	sub	sp, #16
 8012818:	af00      	add	r7, sp, #0
 801281a:	60f8      	str	r0, [r7, #12]
 801281c:	60b9      	str	r1, [r7, #8]
 801281e:	603b      	str	r3, [r7, #0]
 8012820:	4613      	mov	r3, r2
 8012822:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012824:	e049      	b.n	80128ba <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8012826:	69bb      	ldr	r3, [r7, #24]
 8012828:	f1b3 3fff 	cmp.w	r3, #4294967295
 801282c:	d045      	beq.n	80128ba <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801282e:	f7f6 fc6f 	bl	8009110 <HAL_GetTick>
 8012832:	4602      	mov	r2, r0
 8012834:	683b      	ldr	r3, [r7, #0]
 8012836:	1ad3      	subs	r3, r2, r3
 8012838:	69ba      	ldr	r2, [r7, #24]
 801283a:	429a      	cmp	r2, r3
 801283c:	d302      	bcc.n	8012844 <UART_WaitOnFlagUntilTimeout+0x30>
 801283e:	69bb      	ldr	r3, [r7, #24]
 8012840:	2b00      	cmp	r3, #0
 8012842:	d101      	bne.n	8012848 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8012844:	2303      	movs	r3, #3
 8012846:	e048      	b.n	80128da <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8012848:	68fb      	ldr	r3, [r7, #12]
 801284a:	681b      	ldr	r3, [r3, #0]
 801284c:	681b      	ldr	r3, [r3, #0]
 801284e:	f003 0304 	and.w	r3, r3, #4
 8012852:	2b00      	cmp	r3, #0
 8012854:	d031      	beq.n	80128ba <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8012856:	68fb      	ldr	r3, [r7, #12]
 8012858:	681b      	ldr	r3, [r3, #0]
 801285a:	69db      	ldr	r3, [r3, #28]
 801285c:	f003 0308 	and.w	r3, r3, #8
 8012860:	2b08      	cmp	r3, #8
 8012862:	d110      	bne.n	8012886 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8012864:	68fb      	ldr	r3, [r7, #12]
 8012866:	681b      	ldr	r3, [r3, #0]
 8012868:	2208      	movs	r2, #8
 801286a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 801286c:	68f8      	ldr	r0, [r7, #12]
 801286e:	f000 f839 	bl	80128e4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8012872:	68fb      	ldr	r3, [r7, #12]
 8012874:	2208      	movs	r2, #8
 8012876:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 801287a:	68fb      	ldr	r3, [r7, #12]
 801287c:	2200      	movs	r2, #0
 801287e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8012882:	2301      	movs	r3, #1
 8012884:	e029      	b.n	80128da <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8012886:	68fb      	ldr	r3, [r7, #12]
 8012888:	681b      	ldr	r3, [r3, #0]
 801288a:	69db      	ldr	r3, [r3, #28]
 801288c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012890:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012894:	d111      	bne.n	80128ba <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8012896:	68fb      	ldr	r3, [r7, #12]
 8012898:	681b      	ldr	r3, [r3, #0]
 801289a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801289e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80128a0:	68f8      	ldr	r0, [r7, #12]
 80128a2:	f000 f81f 	bl	80128e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80128a6:	68fb      	ldr	r3, [r7, #12]
 80128a8:	2220      	movs	r2, #32
 80128aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80128ae:	68fb      	ldr	r3, [r7, #12]
 80128b0:	2200      	movs	r2, #0
 80128b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80128b6:	2303      	movs	r3, #3
 80128b8:	e00f      	b.n	80128da <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80128ba:	68fb      	ldr	r3, [r7, #12]
 80128bc:	681b      	ldr	r3, [r3, #0]
 80128be:	69da      	ldr	r2, [r3, #28]
 80128c0:	68bb      	ldr	r3, [r7, #8]
 80128c2:	4013      	ands	r3, r2
 80128c4:	68ba      	ldr	r2, [r7, #8]
 80128c6:	429a      	cmp	r2, r3
 80128c8:	bf0c      	ite	eq
 80128ca:	2301      	moveq	r3, #1
 80128cc:	2300      	movne	r3, #0
 80128ce:	b2db      	uxtb	r3, r3
 80128d0:	461a      	mov	r2, r3
 80128d2:	79fb      	ldrb	r3, [r7, #7]
 80128d4:	429a      	cmp	r2, r3
 80128d6:	d0a6      	beq.n	8012826 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80128d8:	2300      	movs	r3, #0
}
 80128da:	4618      	mov	r0, r3
 80128dc:	3710      	adds	r7, #16
 80128de:	46bd      	mov	sp, r7
 80128e0:	bd80      	pop	{r7, pc}
	...

080128e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80128e4:	b480      	push	{r7}
 80128e6:	b095      	sub	sp, #84	; 0x54
 80128e8:	af00      	add	r7, sp, #0
 80128ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	681b      	ldr	r3, [r3, #0]
 80128f0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80128f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80128f4:	e853 3f00 	ldrex	r3, [r3]
 80128f8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80128fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012900:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	681b      	ldr	r3, [r3, #0]
 8012906:	461a      	mov	r2, r3
 8012908:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801290a:	643b      	str	r3, [r7, #64]	; 0x40
 801290c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801290e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012910:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012912:	e841 2300 	strex	r3, r2, [r1]
 8012916:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8012918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801291a:	2b00      	cmp	r3, #0
 801291c:	d1e6      	bne.n	80128ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	681b      	ldr	r3, [r3, #0]
 8012922:	3308      	adds	r3, #8
 8012924:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012926:	6a3b      	ldr	r3, [r7, #32]
 8012928:	e853 3f00 	ldrex	r3, [r3]
 801292c:	61fb      	str	r3, [r7, #28]
   return(result);
 801292e:	69fa      	ldr	r2, [r7, #28]
 8012930:	4b1e      	ldr	r3, [pc, #120]	; (80129ac <UART_EndRxTransfer+0xc8>)
 8012932:	4013      	ands	r3, r2
 8012934:	64bb      	str	r3, [r7, #72]	; 0x48
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	681b      	ldr	r3, [r3, #0]
 801293a:	3308      	adds	r3, #8
 801293c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801293e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8012940:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012942:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012944:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012946:	e841 2300 	strex	r3, r2, [r1]
 801294a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801294c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801294e:	2b00      	cmp	r3, #0
 8012950:	d1e5      	bne.n	801291e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012956:	2b01      	cmp	r3, #1
 8012958:	d118      	bne.n	801298c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	681b      	ldr	r3, [r3, #0]
 801295e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012960:	68fb      	ldr	r3, [r7, #12]
 8012962:	e853 3f00 	ldrex	r3, [r3]
 8012966:	60bb      	str	r3, [r7, #8]
   return(result);
 8012968:	68bb      	ldr	r3, [r7, #8]
 801296a:	f023 0310 	bic.w	r3, r3, #16
 801296e:	647b      	str	r3, [r7, #68]	; 0x44
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	681b      	ldr	r3, [r3, #0]
 8012974:	461a      	mov	r2, r3
 8012976:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012978:	61bb      	str	r3, [r7, #24]
 801297a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801297c:	6979      	ldr	r1, [r7, #20]
 801297e:	69ba      	ldr	r2, [r7, #24]
 8012980:	e841 2300 	strex	r3, r2, [r1]
 8012984:	613b      	str	r3, [r7, #16]
   return(result);
 8012986:	693b      	ldr	r3, [r7, #16]
 8012988:	2b00      	cmp	r3, #0
 801298a:	d1e6      	bne.n	801295a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	2220      	movs	r2, #32
 8012990:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	2200      	movs	r2, #0
 8012998:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	2200      	movs	r2, #0
 801299e:	675a      	str	r2, [r3, #116]	; 0x74
}
 80129a0:	bf00      	nop
 80129a2:	3754      	adds	r7, #84	; 0x54
 80129a4:	46bd      	mov	sp, r7
 80129a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129aa:	4770      	bx	lr
 80129ac:	effffffe 	.word	0xeffffffe

080129b0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80129b0:	b480      	push	{r7}
 80129b2:	b085      	sub	sp, #20
 80129b4:	af00      	add	r7, sp, #0
 80129b6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80129be:	2b01      	cmp	r3, #1
 80129c0:	d101      	bne.n	80129c6 <HAL_UARTEx_DisableFifoMode+0x16>
 80129c2:	2302      	movs	r3, #2
 80129c4:	e027      	b.n	8012a16 <HAL_UARTEx_DisableFifoMode+0x66>
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	2201      	movs	r2, #1
 80129ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	2224      	movs	r2, #36	; 0x24
 80129d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	681b      	ldr	r3, [r3, #0]
 80129da:	681b      	ldr	r3, [r3, #0]
 80129dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	681b      	ldr	r3, [r3, #0]
 80129e2:	681a      	ldr	r2, [r3, #0]
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	681b      	ldr	r3, [r3, #0]
 80129e8:	f022 0201 	bic.w	r2, r2, #1
 80129ec:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80129ee:	68fb      	ldr	r3, [r7, #12]
 80129f0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80129f4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	2200      	movs	r2, #0
 80129fa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	681b      	ldr	r3, [r3, #0]
 8012a00:	68fa      	ldr	r2, [r7, #12]
 8012a02:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	2220      	movs	r2, #32
 8012a08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	2200      	movs	r2, #0
 8012a10:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012a14:	2300      	movs	r3, #0
}
 8012a16:	4618      	mov	r0, r3
 8012a18:	3714      	adds	r7, #20
 8012a1a:	46bd      	mov	sp, r7
 8012a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a20:	4770      	bx	lr

08012a22 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012a22:	b580      	push	{r7, lr}
 8012a24:	b084      	sub	sp, #16
 8012a26:	af00      	add	r7, sp, #0
 8012a28:	6078      	str	r0, [r7, #4]
 8012a2a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012a32:	2b01      	cmp	r3, #1
 8012a34:	d101      	bne.n	8012a3a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8012a36:	2302      	movs	r3, #2
 8012a38:	e02d      	b.n	8012a96 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	2201      	movs	r2, #1
 8012a3e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	2224      	movs	r2, #36	; 0x24
 8012a46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	681b      	ldr	r3, [r3, #0]
 8012a4e:	681b      	ldr	r3, [r3, #0]
 8012a50:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	681b      	ldr	r3, [r3, #0]
 8012a56:	681a      	ldr	r2, [r3, #0]
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	681b      	ldr	r3, [r3, #0]
 8012a5c:	f022 0201 	bic.w	r2, r2, #1
 8012a60:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8012a62:	687b      	ldr	r3, [r7, #4]
 8012a64:	681b      	ldr	r3, [r3, #0]
 8012a66:	689b      	ldr	r3, [r3, #8]
 8012a68:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	681b      	ldr	r3, [r3, #0]
 8012a70:	683a      	ldr	r2, [r7, #0]
 8012a72:	430a      	orrs	r2, r1
 8012a74:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012a76:	6878      	ldr	r0, [r7, #4]
 8012a78:	f000 f850 	bl	8012b1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	681b      	ldr	r3, [r3, #0]
 8012a80:	68fa      	ldr	r2, [r7, #12]
 8012a82:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	2220      	movs	r2, #32
 8012a88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	2200      	movs	r2, #0
 8012a90:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012a94:	2300      	movs	r3, #0
}
 8012a96:	4618      	mov	r0, r3
 8012a98:	3710      	adds	r7, #16
 8012a9a:	46bd      	mov	sp, r7
 8012a9c:	bd80      	pop	{r7, pc}

08012a9e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012a9e:	b580      	push	{r7, lr}
 8012aa0:	b084      	sub	sp, #16
 8012aa2:	af00      	add	r7, sp, #0
 8012aa4:	6078      	str	r0, [r7, #4]
 8012aa6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012aae:	2b01      	cmp	r3, #1
 8012ab0:	d101      	bne.n	8012ab6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8012ab2:	2302      	movs	r3, #2
 8012ab4:	e02d      	b.n	8012b12 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	2201      	movs	r2, #1
 8012aba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	2224      	movs	r2, #36	; 0x24
 8012ac2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	681b      	ldr	r3, [r3, #0]
 8012aca:	681b      	ldr	r3, [r3, #0]
 8012acc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	681b      	ldr	r3, [r3, #0]
 8012ad2:	681a      	ldr	r2, [r3, #0]
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	681b      	ldr	r3, [r3, #0]
 8012ad8:	f022 0201 	bic.w	r2, r2, #1
 8012adc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	681b      	ldr	r3, [r3, #0]
 8012ae2:	689b      	ldr	r3, [r3, #8]
 8012ae4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	681b      	ldr	r3, [r3, #0]
 8012aec:	683a      	ldr	r2, [r7, #0]
 8012aee:	430a      	orrs	r2, r1
 8012af0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012af2:	6878      	ldr	r0, [r7, #4]
 8012af4:	f000 f812 	bl	8012b1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	681b      	ldr	r3, [r3, #0]
 8012afc:	68fa      	ldr	r2, [r7, #12]
 8012afe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	2220      	movs	r2, #32
 8012b04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	2200      	movs	r2, #0
 8012b0c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012b10:	2300      	movs	r3, #0
}
 8012b12:	4618      	mov	r0, r3
 8012b14:	3710      	adds	r7, #16
 8012b16:	46bd      	mov	sp, r7
 8012b18:	bd80      	pop	{r7, pc}
	...

08012b1c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8012b1c:	b480      	push	{r7}
 8012b1e:	b085      	sub	sp, #20
 8012b20:	af00      	add	r7, sp, #0
 8012b22:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012b28:	2b00      	cmp	r3, #0
 8012b2a:	d108      	bne.n	8012b3e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	2201      	movs	r2, #1
 8012b30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	2201      	movs	r2, #1
 8012b38:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8012b3c:	e031      	b.n	8012ba2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8012b3e:	2310      	movs	r3, #16
 8012b40:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8012b42:	2310      	movs	r3, #16
 8012b44:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	681b      	ldr	r3, [r3, #0]
 8012b4a:	689b      	ldr	r3, [r3, #8]
 8012b4c:	0e5b      	lsrs	r3, r3, #25
 8012b4e:	b2db      	uxtb	r3, r3
 8012b50:	f003 0307 	and.w	r3, r3, #7
 8012b54:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	681b      	ldr	r3, [r3, #0]
 8012b5a:	689b      	ldr	r3, [r3, #8]
 8012b5c:	0f5b      	lsrs	r3, r3, #29
 8012b5e:	b2db      	uxtb	r3, r3
 8012b60:	f003 0307 	and.w	r3, r3, #7
 8012b64:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012b66:	7bbb      	ldrb	r3, [r7, #14]
 8012b68:	7b3a      	ldrb	r2, [r7, #12]
 8012b6a:	4911      	ldr	r1, [pc, #68]	; (8012bb0 <UARTEx_SetNbDataToProcess+0x94>)
 8012b6c:	5c8a      	ldrb	r2, [r1, r2]
 8012b6e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8012b72:	7b3a      	ldrb	r2, [r7, #12]
 8012b74:	490f      	ldr	r1, [pc, #60]	; (8012bb4 <UARTEx_SetNbDataToProcess+0x98>)
 8012b76:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012b78:	fb93 f3f2 	sdiv	r3, r3, r2
 8012b7c:	b29a      	uxth	r2, r3
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012b84:	7bfb      	ldrb	r3, [r7, #15]
 8012b86:	7b7a      	ldrb	r2, [r7, #13]
 8012b88:	4909      	ldr	r1, [pc, #36]	; (8012bb0 <UARTEx_SetNbDataToProcess+0x94>)
 8012b8a:	5c8a      	ldrb	r2, [r1, r2]
 8012b8c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8012b90:	7b7a      	ldrb	r2, [r7, #13]
 8012b92:	4908      	ldr	r1, [pc, #32]	; (8012bb4 <UARTEx_SetNbDataToProcess+0x98>)
 8012b94:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012b96:	fb93 f3f2 	sdiv	r3, r3, r2
 8012b9a:	b29a      	uxth	r2, r3
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8012ba2:	bf00      	nop
 8012ba4:	3714      	adds	r7, #20
 8012ba6:	46bd      	mov	sp, r7
 8012ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bac:	4770      	bx	lr
 8012bae:	bf00      	nop
 8012bb0:	0802b94c 	.word	0x0802b94c
 8012bb4:	0802b954 	.word	0x0802b954

08012bb8 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8012bb8:	b084      	sub	sp, #16
 8012bba:	b480      	push	{r7}
 8012bbc:	b085      	sub	sp, #20
 8012bbe:	af00      	add	r7, sp, #0
 8012bc0:	6078      	str	r0, [r7, #4]
 8012bc2:	f107 001c 	add.w	r0, r7, #28
 8012bc6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8012bca:	2300      	movs	r3, #0
 8012bcc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8012bce:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8012bd0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8012bd2:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8012bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8012bd6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8012bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 8012bda:	431a      	orrs	r2, r3
             Init.ClockDiv
 8012bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8012bde:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8012be0:	68fa      	ldr	r2, [r7, #12]
 8012be2:	4313      	orrs	r3, r2
 8012be4:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	685a      	ldr	r2, [r3, #4]
 8012bea:	4b07      	ldr	r3, [pc, #28]	; (8012c08 <SDMMC_Init+0x50>)
 8012bec:	4013      	ands	r3, r2
 8012bee:	68fa      	ldr	r2, [r7, #12]
 8012bf0:	431a      	orrs	r2, r3
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8012bf6:	2300      	movs	r3, #0
}
 8012bf8:	4618      	mov	r0, r3
 8012bfa:	3714      	adds	r7, #20
 8012bfc:	46bd      	mov	sp, r7
 8012bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c02:	b004      	add	sp, #16
 8012c04:	4770      	bx	lr
 8012c06:	bf00      	nop
 8012c08:	ffc02c00 	.word	0xffc02c00

08012c0c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8012c0c:	b480      	push	{r7}
 8012c0e:	b083      	sub	sp, #12
 8012c10:	af00      	add	r7, sp, #0
 8012c12:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8012c1a:	4618      	mov	r0, r3
 8012c1c:	370c      	adds	r7, #12
 8012c1e:	46bd      	mov	sp, r7
 8012c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c24:	4770      	bx	lr

08012c26 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8012c26:	b480      	push	{r7}
 8012c28:	b083      	sub	sp, #12
 8012c2a:	af00      	add	r7, sp, #0
 8012c2c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8012c2e:	687b      	ldr	r3, [r7, #4]
 8012c30:	681b      	ldr	r3, [r3, #0]
 8012c32:	f043 0203 	orr.w	r2, r3, #3
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8012c3a:	2300      	movs	r3, #0
}
 8012c3c:	4618      	mov	r0, r3
 8012c3e:	370c      	adds	r7, #12
 8012c40:	46bd      	mov	sp, r7
 8012c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c46:	4770      	bx	lr

08012c48 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8012c48:	b480      	push	{r7}
 8012c4a:	b083      	sub	sp, #12
 8012c4c:	af00      	add	r7, sp, #0
 8012c4e:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	681b      	ldr	r3, [r3, #0]
 8012c54:	f003 0303 	and.w	r3, r3, #3
}
 8012c58:	4618      	mov	r0, r3
 8012c5a:	370c      	adds	r7, #12
 8012c5c:	46bd      	mov	sp, r7
 8012c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c62:	4770      	bx	lr

08012c64 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8012c64:	b480      	push	{r7}
 8012c66:	b085      	sub	sp, #20
 8012c68:	af00      	add	r7, sp, #0
 8012c6a:	6078      	str	r0, [r7, #4]
 8012c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8012c6e:	2300      	movs	r3, #0
 8012c70:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8012c72:	683b      	ldr	r3, [r7, #0]
 8012c74:	681a      	ldr	r2, [r3, #0]
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8012c7a:	683b      	ldr	r3, [r7, #0]
 8012c7c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8012c7e:	683b      	ldr	r3, [r7, #0]
 8012c80:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8012c82:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8012c84:	683b      	ldr	r3, [r7, #0]
 8012c86:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8012c88:	431a      	orrs	r2, r3
                       Command->CPSM);
 8012c8a:	683b      	ldr	r3, [r7, #0]
 8012c8c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8012c8e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8012c90:	68fa      	ldr	r2, [r7, #12]
 8012c92:	4313      	orrs	r3, r2
 8012c94:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	68da      	ldr	r2, [r3, #12]
 8012c9a:	4b06      	ldr	r3, [pc, #24]	; (8012cb4 <SDMMC_SendCommand+0x50>)
 8012c9c:	4013      	ands	r3, r2
 8012c9e:	68fa      	ldr	r2, [r7, #12]
 8012ca0:	431a      	orrs	r2, r3
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8012ca6:	2300      	movs	r3, #0
}
 8012ca8:	4618      	mov	r0, r3
 8012caa:	3714      	adds	r7, #20
 8012cac:	46bd      	mov	sp, r7
 8012cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cb2:	4770      	bx	lr
 8012cb4:	fffee0c0 	.word	0xfffee0c0

08012cb8 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8012cb8:	b480      	push	{r7}
 8012cba:	b083      	sub	sp, #12
 8012cbc:	af00      	add	r7, sp, #0
 8012cbe:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	691b      	ldr	r3, [r3, #16]
 8012cc4:	b2db      	uxtb	r3, r3
}
 8012cc6:	4618      	mov	r0, r3
 8012cc8:	370c      	adds	r7, #12
 8012cca:	46bd      	mov	sp, r7
 8012ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cd0:	4770      	bx	lr

08012cd2 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8012cd2:	b480      	push	{r7}
 8012cd4:	b085      	sub	sp, #20
 8012cd6:	af00      	add	r7, sp, #0
 8012cd8:	6078      	str	r0, [r7, #4]
 8012cda:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	3314      	adds	r3, #20
 8012ce0:	461a      	mov	r2, r3
 8012ce2:	683b      	ldr	r3, [r7, #0]
 8012ce4:	4413      	add	r3, r2
 8012ce6:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8012ce8:	68fb      	ldr	r3, [r7, #12]
 8012cea:	681b      	ldr	r3, [r3, #0]
}
 8012cec:	4618      	mov	r0, r3
 8012cee:	3714      	adds	r7, #20
 8012cf0:	46bd      	mov	sp, r7
 8012cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cf6:	4770      	bx	lr

08012cf8 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8012cf8:	b480      	push	{r7}
 8012cfa:	b085      	sub	sp, #20
 8012cfc:	af00      	add	r7, sp, #0
 8012cfe:	6078      	str	r0, [r7, #4]
 8012d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8012d02:	2300      	movs	r3, #0
 8012d04:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8012d06:	683b      	ldr	r3, [r7, #0]
 8012d08:	681a      	ldr	r2, [r3, #0]
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8012d0e:	683b      	ldr	r3, [r7, #0]
 8012d10:	685a      	ldr	r2, [r3, #4]
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8012d16:	683b      	ldr	r3, [r7, #0]
 8012d18:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8012d1a:	683b      	ldr	r3, [r7, #0]
 8012d1c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8012d1e:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8012d20:	683b      	ldr	r3, [r7, #0]
 8012d22:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8012d24:	431a      	orrs	r2, r3
                       Data->DPSM);
 8012d26:	683b      	ldr	r3, [r7, #0]
 8012d28:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8012d2a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8012d2c:	68fa      	ldr	r2, [r7, #12]
 8012d2e:	4313      	orrs	r3, r2
 8012d30:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d36:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8012d3a:	68fb      	ldr	r3, [r7, #12]
 8012d3c:	431a      	orrs	r2, r3
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8012d42:	2300      	movs	r3, #0

}
 8012d44:	4618      	mov	r0, r3
 8012d46:	3714      	adds	r7, #20
 8012d48:	46bd      	mov	sp, r7
 8012d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d4e:	4770      	bx	lr

08012d50 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8012d50:	b580      	push	{r7, lr}
 8012d52:	b088      	sub	sp, #32
 8012d54:	af00      	add	r7, sp, #0
 8012d56:	6078      	str	r0, [r7, #4]
 8012d58:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8012d5a:	683b      	ldr	r3, [r7, #0]
 8012d5c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8012d5e:	2310      	movs	r3, #16
 8012d60:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012d62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012d66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012d68:	2300      	movs	r3, #0
 8012d6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012d6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012d70:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012d72:	f107 0308 	add.w	r3, r7, #8
 8012d76:	4619      	mov	r1, r3
 8012d78:	6878      	ldr	r0, [r7, #4]
 8012d7a:	f7ff ff73 	bl	8012c64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8012d7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8012d82:	2110      	movs	r1, #16
 8012d84:	6878      	ldr	r0, [r7, #4]
 8012d86:	f000 fa21 	bl	80131cc <SDMMC_GetCmdResp1>
 8012d8a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012d8c:	69fb      	ldr	r3, [r7, #28]
}
 8012d8e:	4618      	mov	r0, r3
 8012d90:	3720      	adds	r7, #32
 8012d92:	46bd      	mov	sp, r7
 8012d94:	bd80      	pop	{r7, pc}

08012d96 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8012d96:	b580      	push	{r7, lr}
 8012d98:	b088      	sub	sp, #32
 8012d9a:	af00      	add	r7, sp, #0
 8012d9c:	6078      	str	r0, [r7, #4]
 8012d9e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8012da0:	683b      	ldr	r3, [r7, #0]
 8012da2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8012da4:	2311      	movs	r3, #17
 8012da6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012da8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012dac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012dae:	2300      	movs	r3, #0
 8012db0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012db2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012db6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012db8:	f107 0308 	add.w	r3, r7, #8
 8012dbc:	4619      	mov	r1, r3
 8012dbe:	6878      	ldr	r0, [r7, #4]
 8012dc0:	f7ff ff50 	bl	8012c64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8012dc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8012dc8:	2111      	movs	r1, #17
 8012dca:	6878      	ldr	r0, [r7, #4]
 8012dcc:	f000 f9fe 	bl	80131cc <SDMMC_GetCmdResp1>
 8012dd0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012dd2:	69fb      	ldr	r3, [r7, #28]
}
 8012dd4:	4618      	mov	r0, r3
 8012dd6:	3720      	adds	r7, #32
 8012dd8:	46bd      	mov	sp, r7
 8012dda:	bd80      	pop	{r7, pc}

08012ddc <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8012ddc:	b580      	push	{r7, lr}
 8012dde:	b088      	sub	sp, #32
 8012de0:	af00      	add	r7, sp, #0
 8012de2:	6078      	str	r0, [r7, #4]
 8012de4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8012de6:	683b      	ldr	r3, [r7, #0]
 8012de8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8012dea:	2312      	movs	r3, #18
 8012dec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012dee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012df2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012df4:	2300      	movs	r3, #0
 8012df6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012df8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012dfc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012dfe:	f107 0308 	add.w	r3, r7, #8
 8012e02:	4619      	mov	r1, r3
 8012e04:	6878      	ldr	r0, [r7, #4]
 8012e06:	f7ff ff2d 	bl	8012c64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8012e0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8012e0e:	2112      	movs	r1, #18
 8012e10:	6878      	ldr	r0, [r7, #4]
 8012e12:	f000 f9db 	bl	80131cc <SDMMC_GetCmdResp1>
 8012e16:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012e18:	69fb      	ldr	r3, [r7, #28]
}
 8012e1a:	4618      	mov	r0, r3
 8012e1c:	3720      	adds	r7, #32
 8012e1e:	46bd      	mov	sp, r7
 8012e20:	bd80      	pop	{r7, pc}

08012e22 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8012e22:	b580      	push	{r7, lr}
 8012e24:	b088      	sub	sp, #32
 8012e26:	af00      	add	r7, sp, #0
 8012e28:	6078      	str	r0, [r7, #4]
 8012e2a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8012e2c:	683b      	ldr	r3, [r7, #0]
 8012e2e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8012e30:	2318      	movs	r3, #24
 8012e32:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012e34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012e38:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012e3a:	2300      	movs	r3, #0
 8012e3c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012e3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012e42:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012e44:	f107 0308 	add.w	r3, r7, #8
 8012e48:	4619      	mov	r1, r3
 8012e4a:	6878      	ldr	r0, [r7, #4]
 8012e4c:	f7ff ff0a 	bl	8012c64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8012e50:	f241 3288 	movw	r2, #5000	; 0x1388
 8012e54:	2118      	movs	r1, #24
 8012e56:	6878      	ldr	r0, [r7, #4]
 8012e58:	f000 f9b8 	bl	80131cc <SDMMC_GetCmdResp1>
 8012e5c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012e5e:	69fb      	ldr	r3, [r7, #28]
}
 8012e60:	4618      	mov	r0, r3
 8012e62:	3720      	adds	r7, #32
 8012e64:	46bd      	mov	sp, r7
 8012e66:	bd80      	pop	{r7, pc}

08012e68 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8012e68:	b580      	push	{r7, lr}
 8012e6a:	b088      	sub	sp, #32
 8012e6c:	af00      	add	r7, sp, #0
 8012e6e:	6078      	str	r0, [r7, #4]
 8012e70:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8012e72:	683b      	ldr	r3, [r7, #0]
 8012e74:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8012e76:	2319      	movs	r3, #25
 8012e78:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012e7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012e7e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012e80:	2300      	movs	r3, #0
 8012e82:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012e84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012e88:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012e8a:	f107 0308 	add.w	r3, r7, #8
 8012e8e:	4619      	mov	r1, r3
 8012e90:	6878      	ldr	r0, [r7, #4]
 8012e92:	f7ff fee7 	bl	8012c64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8012e96:	f241 3288 	movw	r2, #5000	; 0x1388
 8012e9a:	2119      	movs	r1, #25
 8012e9c:	6878      	ldr	r0, [r7, #4]
 8012e9e:	f000 f995 	bl	80131cc <SDMMC_GetCmdResp1>
 8012ea2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012ea4:	69fb      	ldr	r3, [r7, #28]
}
 8012ea6:	4618      	mov	r0, r3
 8012ea8:	3720      	adds	r7, #32
 8012eaa:	46bd      	mov	sp, r7
 8012eac:	bd80      	pop	{r7, pc}

08012eae <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8012eae:	b580      	push	{r7, lr}
 8012eb0:	b088      	sub	sp, #32
 8012eb2:	af00      	add	r7, sp, #0
 8012eb4:	6078      	str	r0, [r7, #4]
 8012eb6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8012eb8:	683b      	ldr	r3, [r7, #0]
 8012eba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8012ebc:	2307      	movs	r3, #7
 8012ebe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012ec0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012ec4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012ec6:	2300      	movs	r3, #0
 8012ec8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012eca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012ece:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012ed0:	f107 0308 	add.w	r3, r7, #8
 8012ed4:	4619      	mov	r1, r3
 8012ed6:	6878      	ldr	r0, [r7, #4]
 8012ed8:	f7ff fec4 	bl	8012c64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8012edc:	f241 3288 	movw	r2, #5000	; 0x1388
 8012ee0:	2107      	movs	r1, #7
 8012ee2:	6878      	ldr	r0, [r7, #4]
 8012ee4:	f000 f972 	bl	80131cc <SDMMC_GetCmdResp1>
 8012ee8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012eea:	69fb      	ldr	r3, [r7, #28]
}
 8012eec:	4618      	mov	r0, r3
 8012eee:	3720      	adds	r7, #32
 8012ef0:	46bd      	mov	sp, r7
 8012ef2:	bd80      	pop	{r7, pc}

08012ef4 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8012ef4:	b580      	push	{r7, lr}
 8012ef6:	b088      	sub	sp, #32
 8012ef8:	af00      	add	r7, sp, #0
 8012efa:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8012efc:	2300      	movs	r3, #0
 8012efe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8012f00:	2300      	movs	r3, #0
 8012f02:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8012f04:	2300      	movs	r3, #0
 8012f06:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012f08:	2300      	movs	r3, #0
 8012f0a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012f0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012f10:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012f12:	f107 0308 	add.w	r3, r7, #8
 8012f16:	4619      	mov	r1, r3
 8012f18:	6878      	ldr	r0, [r7, #4]
 8012f1a:	f7ff fea3 	bl	8012c64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8012f1e:	6878      	ldr	r0, [r7, #4]
 8012f20:	f000 fb96 	bl	8013650 <SDMMC_GetCmdError>
 8012f24:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012f26:	69fb      	ldr	r3, [r7, #28]
}
 8012f28:	4618      	mov	r0, r3
 8012f2a:	3720      	adds	r7, #32
 8012f2c:	46bd      	mov	sp, r7
 8012f2e:	bd80      	pop	{r7, pc}

08012f30 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8012f30:	b580      	push	{r7, lr}
 8012f32:	b088      	sub	sp, #32
 8012f34:	af00      	add	r7, sp, #0
 8012f36:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8012f38:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8012f3c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8012f3e:	2308      	movs	r3, #8
 8012f40:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012f42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012f46:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012f48:	2300      	movs	r3, #0
 8012f4a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012f4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012f50:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012f52:	f107 0308 	add.w	r3, r7, #8
 8012f56:	4619      	mov	r1, r3
 8012f58:	6878      	ldr	r0, [r7, #4]
 8012f5a:	f7ff fe83 	bl	8012c64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8012f5e:	6878      	ldr	r0, [r7, #4]
 8012f60:	f000 fb28 	bl	80135b4 <SDMMC_GetCmdResp7>
 8012f64:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012f66:	69fb      	ldr	r3, [r7, #28]
}
 8012f68:	4618      	mov	r0, r3
 8012f6a:	3720      	adds	r7, #32
 8012f6c:	46bd      	mov	sp, r7
 8012f6e:	bd80      	pop	{r7, pc}

08012f70 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012f70:	b580      	push	{r7, lr}
 8012f72:	b088      	sub	sp, #32
 8012f74:	af00      	add	r7, sp, #0
 8012f76:	6078      	str	r0, [r7, #4]
 8012f78:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8012f7a:	683b      	ldr	r3, [r7, #0]
 8012f7c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8012f7e:	2337      	movs	r3, #55	; 0x37
 8012f80:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012f82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012f86:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012f88:	2300      	movs	r3, #0
 8012f8a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012f8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012f90:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012f92:	f107 0308 	add.w	r3, r7, #8
 8012f96:	4619      	mov	r1, r3
 8012f98:	6878      	ldr	r0, [r7, #4]
 8012f9a:	f7ff fe63 	bl	8012c64 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8012f9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8012fa2:	2137      	movs	r1, #55	; 0x37
 8012fa4:	6878      	ldr	r0, [r7, #4]
 8012fa6:	f000 f911 	bl	80131cc <SDMMC_GetCmdResp1>
 8012faa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012fac:	69fb      	ldr	r3, [r7, #28]
}
 8012fae:	4618      	mov	r0, r3
 8012fb0:	3720      	adds	r7, #32
 8012fb2:	46bd      	mov	sp, r7
 8012fb4:	bd80      	pop	{r7, pc}

08012fb6 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012fb6:	b580      	push	{r7, lr}
 8012fb8:	b088      	sub	sp, #32
 8012fba:	af00      	add	r7, sp, #0
 8012fbc:	6078      	str	r0, [r7, #4]
 8012fbe:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8012fc0:	683b      	ldr	r3, [r7, #0]
 8012fc2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8012fc4:	2329      	movs	r3, #41	; 0x29
 8012fc6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012fc8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012fcc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012fce:	2300      	movs	r3, #0
 8012fd0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012fd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012fd6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012fd8:	f107 0308 	add.w	r3, r7, #8
 8012fdc:	4619      	mov	r1, r3
 8012fde:	6878      	ldr	r0, [r7, #4]
 8012fe0:	f7ff fe40 	bl	8012c64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8012fe4:	6878      	ldr	r0, [r7, #4]
 8012fe6:	f000 fa2d 	bl	8013444 <SDMMC_GetCmdResp3>
 8012fea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012fec:	69fb      	ldr	r3, [r7, #28]
}
 8012fee:	4618      	mov	r0, r3
 8012ff0:	3720      	adds	r7, #32
 8012ff2:	46bd      	mov	sp, r7
 8012ff4:	bd80      	pop	{r7, pc}

08012ff6 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8012ff6:	b580      	push	{r7, lr}
 8012ff8:	b088      	sub	sp, #32
 8012ffa:	af00      	add	r7, sp, #0
 8012ffc:	6078      	str	r0, [r7, #4]
 8012ffe:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8013000:	683b      	ldr	r3, [r7, #0]
 8013002:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8013004:	2306      	movs	r3, #6
 8013006:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013008:	f44f 7380 	mov.w	r3, #256	; 0x100
 801300c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801300e:	2300      	movs	r3, #0
 8013010:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013012:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013016:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013018:	f107 0308 	add.w	r3, r7, #8
 801301c:	4619      	mov	r1, r3
 801301e:	6878      	ldr	r0, [r7, #4]
 8013020:	f7ff fe20 	bl	8012c64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8013024:	f241 3288 	movw	r2, #5000	; 0x1388
 8013028:	2106      	movs	r1, #6
 801302a:	6878      	ldr	r0, [r7, #4]
 801302c:	f000 f8ce 	bl	80131cc <SDMMC_GetCmdResp1>
 8013030:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013032:	69fb      	ldr	r3, [r7, #28]
}
 8013034:	4618      	mov	r0, r3
 8013036:	3720      	adds	r7, #32
 8013038:	46bd      	mov	sp, r7
 801303a:	bd80      	pop	{r7, pc}

0801303c <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 801303c:	b580      	push	{r7, lr}
 801303e:	b088      	sub	sp, #32
 8013040:	af00      	add	r7, sp, #0
 8013042:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8013044:	2300      	movs	r3, #0
 8013046:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8013048:	2333      	movs	r3, #51	; 0x33
 801304a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801304c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013050:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013052:	2300      	movs	r3, #0
 8013054:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013056:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801305a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801305c:	f107 0308 	add.w	r3, r7, #8
 8013060:	4619      	mov	r1, r3
 8013062:	6878      	ldr	r0, [r7, #4]
 8013064:	f7ff fdfe 	bl	8012c64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8013068:	f241 3288 	movw	r2, #5000	; 0x1388
 801306c:	2133      	movs	r1, #51	; 0x33
 801306e:	6878      	ldr	r0, [r7, #4]
 8013070:	f000 f8ac 	bl	80131cc <SDMMC_GetCmdResp1>
 8013074:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013076:	69fb      	ldr	r3, [r7, #28]
}
 8013078:	4618      	mov	r0, r3
 801307a:	3720      	adds	r7, #32
 801307c:	46bd      	mov	sp, r7
 801307e:	bd80      	pop	{r7, pc}

08013080 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8013080:	b580      	push	{r7, lr}
 8013082:	b088      	sub	sp, #32
 8013084:	af00      	add	r7, sp, #0
 8013086:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8013088:	2300      	movs	r3, #0
 801308a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 801308c:	2302      	movs	r3, #2
 801308e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8013090:	f44f 7340 	mov.w	r3, #768	; 0x300
 8013094:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013096:	2300      	movs	r3, #0
 8013098:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801309a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801309e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80130a0:	f107 0308 	add.w	r3, r7, #8
 80130a4:	4619      	mov	r1, r3
 80130a6:	6878      	ldr	r0, [r7, #4]
 80130a8:	f7ff fddc 	bl	8012c64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80130ac:	6878      	ldr	r0, [r7, #4]
 80130ae:	f000 f97f 	bl	80133b0 <SDMMC_GetCmdResp2>
 80130b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80130b4:	69fb      	ldr	r3, [r7, #28]
}
 80130b6:	4618      	mov	r0, r3
 80130b8:	3720      	adds	r7, #32
 80130ba:	46bd      	mov	sp, r7
 80130bc:	bd80      	pop	{r7, pc}

080130be <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80130be:	b580      	push	{r7, lr}
 80130c0:	b088      	sub	sp, #32
 80130c2:	af00      	add	r7, sp, #0
 80130c4:	6078      	str	r0, [r7, #4]
 80130c6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80130c8:	683b      	ldr	r3, [r7, #0]
 80130ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80130cc:	2309      	movs	r3, #9
 80130ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80130d0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80130d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80130d6:	2300      	movs	r3, #0
 80130d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80130da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80130de:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80130e0:	f107 0308 	add.w	r3, r7, #8
 80130e4:	4619      	mov	r1, r3
 80130e6:	6878      	ldr	r0, [r7, #4]
 80130e8:	f7ff fdbc 	bl	8012c64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80130ec:	6878      	ldr	r0, [r7, #4]
 80130ee:	f000 f95f 	bl	80133b0 <SDMMC_GetCmdResp2>
 80130f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80130f4:	69fb      	ldr	r3, [r7, #28]
}
 80130f6:	4618      	mov	r0, r3
 80130f8:	3720      	adds	r7, #32
 80130fa:	46bd      	mov	sp, r7
 80130fc:	bd80      	pop	{r7, pc}

080130fe <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80130fe:	b580      	push	{r7, lr}
 8013100:	b088      	sub	sp, #32
 8013102:	af00      	add	r7, sp, #0
 8013104:	6078      	str	r0, [r7, #4]
 8013106:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8013108:	2300      	movs	r3, #0
 801310a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 801310c:	2303      	movs	r3, #3
 801310e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013110:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013114:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013116:	2300      	movs	r3, #0
 8013118:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801311a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801311e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013120:	f107 0308 	add.w	r3, r7, #8
 8013124:	4619      	mov	r1, r3
 8013126:	6878      	ldr	r0, [r7, #4]
 8013128:	f7ff fd9c 	bl	8012c64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 801312c:	683a      	ldr	r2, [r7, #0]
 801312e:	2103      	movs	r1, #3
 8013130:	6878      	ldr	r0, [r7, #4]
 8013132:	f000 f9c7 	bl	80134c4 <SDMMC_GetCmdResp6>
 8013136:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013138:	69fb      	ldr	r3, [r7, #28]
}
 801313a:	4618      	mov	r0, r3
 801313c:	3720      	adds	r7, #32
 801313e:	46bd      	mov	sp, r7
 8013140:	bd80      	pop	{r7, pc}

08013142 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8013142:	b580      	push	{r7, lr}
 8013144:	b088      	sub	sp, #32
 8013146:	af00      	add	r7, sp, #0
 8013148:	6078      	str	r0, [r7, #4]
 801314a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 801314c:	683b      	ldr	r3, [r7, #0]
 801314e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8013150:	230d      	movs	r3, #13
 8013152:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013154:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013158:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801315a:	2300      	movs	r3, #0
 801315c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801315e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013162:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013164:	f107 0308 	add.w	r3, r7, #8
 8013168:	4619      	mov	r1, r3
 801316a:	6878      	ldr	r0, [r7, #4]
 801316c:	f7ff fd7a 	bl	8012c64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8013170:	f241 3288 	movw	r2, #5000	; 0x1388
 8013174:	210d      	movs	r1, #13
 8013176:	6878      	ldr	r0, [r7, #4]
 8013178:	f000 f828 	bl	80131cc <SDMMC_GetCmdResp1>
 801317c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801317e:	69fb      	ldr	r3, [r7, #28]
}
 8013180:	4618      	mov	r0, r3
 8013182:	3720      	adds	r7, #32
 8013184:	46bd      	mov	sp, r7
 8013186:	bd80      	pop	{r7, pc}

08013188 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8013188:	b580      	push	{r7, lr}
 801318a:	b088      	sub	sp, #32
 801318c:	af00      	add	r7, sp, #0
 801318e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8013190:	2300      	movs	r3, #0
 8013192:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8013194:	230d      	movs	r3, #13
 8013196:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013198:	f44f 7380 	mov.w	r3, #256	; 0x100
 801319c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801319e:	2300      	movs	r3, #0
 80131a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80131a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80131a6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80131a8:	f107 0308 	add.w	r3, r7, #8
 80131ac:	4619      	mov	r1, r3
 80131ae:	6878      	ldr	r0, [r7, #4]
 80131b0:	f7ff fd58 	bl	8012c64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 80131b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80131b8:	210d      	movs	r1, #13
 80131ba:	6878      	ldr	r0, [r7, #4]
 80131bc:	f000 f806 	bl	80131cc <SDMMC_GetCmdResp1>
 80131c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80131c2:	69fb      	ldr	r3, [r7, #28]
}
 80131c4:	4618      	mov	r0, r3
 80131c6:	3720      	adds	r7, #32
 80131c8:	46bd      	mov	sp, r7
 80131ca:	bd80      	pop	{r7, pc}

080131cc <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80131cc:	b580      	push	{r7, lr}
 80131ce:	b088      	sub	sp, #32
 80131d0:	af00      	add	r7, sp, #0
 80131d2:	60f8      	str	r0, [r7, #12]
 80131d4:	460b      	mov	r3, r1
 80131d6:	607a      	str	r2, [r7, #4]
 80131d8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80131da:	4b70      	ldr	r3, [pc, #448]	; (801339c <SDMMC_GetCmdResp1+0x1d0>)
 80131dc:	681b      	ldr	r3, [r3, #0]
 80131de:	4a70      	ldr	r2, [pc, #448]	; (80133a0 <SDMMC_GetCmdResp1+0x1d4>)
 80131e0:	fba2 2303 	umull	r2, r3, r2, r3
 80131e4:	0a5a      	lsrs	r2, r3, #9
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	fb02 f303 	mul.w	r3, r2, r3
 80131ec:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80131ee:	69fb      	ldr	r3, [r7, #28]
 80131f0:	1e5a      	subs	r2, r3, #1
 80131f2:	61fa      	str	r2, [r7, #28]
 80131f4:	2b00      	cmp	r3, #0
 80131f6:	d102      	bne.n	80131fe <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80131f8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80131fc:	e0c9      	b.n	8013392 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80131fe:	68fb      	ldr	r3, [r7, #12]
 8013200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013202:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8013204:	69ba      	ldr	r2, [r7, #24]
 8013206:	4b67      	ldr	r3, [pc, #412]	; (80133a4 <SDMMC_GetCmdResp1+0x1d8>)
 8013208:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801320a:	2b00      	cmp	r3, #0
 801320c:	d0ef      	beq.n	80131ee <SDMMC_GetCmdResp1+0x22>
 801320e:	69bb      	ldr	r3, [r7, #24]
 8013210:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8013214:	2b00      	cmp	r3, #0
 8013216:	d1ea      	bne.n	80131ee <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013218:	68fb      	ldr	r3, [r7, #12]
 801321a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801321c:	f003 0304 	and.w	r3, r3, #4
 8013220:	2b00      	cmp	r3, #0
 8013222:	d004      	beq.n	801322e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013224:	68fb      	ldr	r3, [r7, #12]
 8013226:	2204      	movs	r2, #4
 8013228:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801322a:	2304      	movs	r3, #4
 801322c:	e0b1      	b.n	8013392 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801322e:	68fb      	ldr	r3, [r7, #12]
 8013230:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013232:	f003 0301 	and.w	r3, r3, #1
 8013236:	2b00      	cmp	r3, #0
 8013238:	d004      	beq.n	8013244 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801323a:	68fb      	ldr	r3, [r7, #12]
 801323c:	2201      	movs	r2, #1
 801323e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013240:	2301      	movs	r3, #1
 8013242:	e0a6      	b.n	8013392 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013244:	68fb      	ldr	r3, [r7, #12]
 8013246:	4a58      	ldr	r2, [pc, #352]	; (80133a8 <SDMMC_GetCmdResp1+0x1dc>)
 8013248:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801324a:	68f8      	ldr	r0, [r7, #12]
 801324c:	f7ff fd34 	bl	8012cb8 <SDMMC_GetCommandResponse>
 8013250:	4603      	mov	r3, r0
 8013252:	461a      	mov	r2, r3
 8013254:	7afb      	ldrb	r3, [r7, #11]
 8013256:	4293      	cmp	r3, r2
 8013258:	d001      	beq.n	801325e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801325a:	2301      	movs	r3, #1
 801325c:	e099      	b.n	8013392 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 801325e:	2100      	movs	r1, #0
 8013260:	68f8      	ldr	r0, [r7, #12]
 8013262:	f7ff fd36 	bl	8012cd2 <SDMMC_GetResponse>
 8013266:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8013268:	697a      	ldr	r2, [r7, #20]
 801326a:	4b50      	ldr	r3, [pc, #320]	; (80133ac <SDMMC_GetCmdResp1+0x1e0>)
 801326c:	4013      	ands	r3, r2
 801326e:	2b00      	cmp	r3, #0
 8013270:	d101      	bne.n	8013276 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8013272:	2300      	movs	r3, #0
 8013274:	e08d      	b.n	8013392 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8013276:	697b      	ldr	r3, [r7, #20]
 8013278:	2b00      	cmp	r3, #0
 801327a:	da02      	bge.n	8013282 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 801327c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8013280:	e087      	b.n	8013392 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8013282:	697b      	ldr	r3, [r7, #20]
 8013284:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8013288:	2b00      	cmp	r3, #0
 801328a:	d001      	beq.n	8013290 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 801328c:	2340      	movs	r3, #64	; 0x40
 801328e:	e080      	b.n	8013392 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8013290:	697b      	ldr	r3, [r7, #20]
 8013292:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8013296:	2b00      	cmp	r3, #0
 8013298:	d001      	beq.n	801329e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 801329a:	2380      	movs	r3, #128	; 0x80
 801329c:	e079      	b.n	8013392 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 801329e:	697b      	ldr	r3, [r7, #20]
 80132a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80132a4:	2b00      	cmp	r3, #0
 80132a6:	d002      	beq.n	80132ae <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80132a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80132ac:	e071      	b.n	8013392 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80132ae:	697b      	ldr	r3, [r7, #20]
 80132b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	d002      	beq.n	80132be <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80132b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80132bc:	e069      	b.n	8013392 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80132be:	697b      	ldr	r3, [r7, #20]
 80132c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	d002      	beq.n	80132ce <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80132c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80132cc:	e061      	b.n	8013392 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80132ce:	697b      	ldr	r3, [r7, #20]
 80132d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80132d4:	2b00      	cmp	r3, #0
 80132d6:	d002      	beq.n	80132de <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80132d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80132dc:	e059      	b.n	8013392 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80132de:	697b      	ldr	r3, [r7, #20]
 80132e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80132e4:	2b00      	cmp	r3, #0
 80132e6:	d002      	beq.n	80132ee <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80132e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80132ec:	e051      	b.n	8013392 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80132ee:	697b      	ldr	r3, [r7, #20]
 80132f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80132f4:	2b00      	cmp	r3, #0
 80132f6:	d002      	beq.n	80132fe <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80132f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80132fc:	e049      	b.n	8013392 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80132fe:	697b      	ldr	r3, [r7, #20]
 8013300:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8013304:	2b00      	cmp	r3, #0
 8013306:	d002      	beq.n	801330e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8013308:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801330c:	e041      	b.n	8013392 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 801330e:	697b      	ldr	r3, [r7, #20]
 8013310:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8013314:	2b00      	cmp	r3, #0
 8013316:	d002      	beq.n	801331e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8013318:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801331c:	e039      	b.n	8013392 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 801331e:	697b      	ldr	r3, [r7, #20]
 8013320:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8013324:	2b00      	cmp	r3, #0
 8013326:	d002      	beq.n	801332e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8013328:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801332c:	e031      	b.n	8013392 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 801332e:	697b      	ldr	r3, [r7, #20]
 8013330:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013334:	2b00      	cmp	r3, #0
 8013336:	d002      	beq.n	801333e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8013338:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801333c:	e029      	b.n	8013392 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 801333e:	697b      	ldr	r3, [r7, #20]
 8013340:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8013344:	2b00      	cmp	r3, #0
 8013346:	d002      	beq.n	801334e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8013348:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801334c:	e021      	b.n	8013392 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 801334e:	697b      	ldr	r3, [r7, #20]
 8013350:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013354:	2b00      	cmp	r3, #0
 8013356:	d002      	beq.n	801335e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8013358:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 801335c:	e019      	b.n	8013392 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 801335e:	697b      	ldr	r3, [r7, #20]
 8013360:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013364:	2b00      	cmp	r3, #0
 8013366:	d002      	beq.n	801336e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8013368:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 801336c:	e011      	b.n	8013392 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 801336e:	697b      	ldr	r3, [r7, #20]
 8013370:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8013374:	2b00      	cmp	r3, #0
 8013376:	d002      	beq.n	801337e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8013378:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801337c:	e009      	b.n	8013392 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 801337e:	697b      	ldr	r3, [r7, #20]
 8013380:	f003 0308 	and.w	r3, r3, #8
 8013384:	2b00      	cmp	r3, #0
 8013386:	d002      	beq.n	801338e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8013388:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 801338c:	e001      	b.n	8013392 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801338e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8013392:	4618      	mov	r0, r3
 8013394:	3720      	adds	r7, #32
 8013396:	46bd      	mov	sp, r7
 8013398:	bd80      	pop	{r7, pc}
 801339a:	bf00      	nop
 801339c:	24000040 	.word	0x24000040
 80133a0:	10624dd3 	.word	0x10624dd3
 80133a4:	00200045 	.word	0x00200045
 80133a8:	002000c5 	.word	0x002000c5
 80133ac:	fdffe008 	.word	0xfdffe008

080133b0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80133b0:	b480      	push	{r7}
 80133b2:	b085      	sub	sp, #20
 80133b4:	af00      	add	r7, sp, #0
 80133b6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80133b8:	4b1f      	ldr	r3, [pc, #124]	; (8013438 <SDMMC_GetCmdResp2+0x88>)
 80133ba:	681b      	ldr	r3, [r3, #0]
 80133bc:	4a1f      	ldr	r2, [pc, #124]	; (801343c <SDMMC_GetCmdResp2+0x8c>)
 80133be:	fba2 2303 	umull	r2, r3, r2, r3
 80133c2:	0a5b      	lsrs	r3, r3, #9
 80133c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80133c8:	fb02 f303 	mul.w	r3, r2, r3
 80133cc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80133ce:	68fb      	ldr	r3, [r7, #12]
 80133d0:	1e5a      	subs	r2, r3, #1
 80133d2:	60fa      	str	r2, [r7, #12]
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	d102      	bne.n	80133de <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80133d8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80133dc:	e026      	b.n	801342c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80133de:	687b      	ldr	r3, [r7, #4]
 80133e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80133e2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80133e4:	68bb      	ldr	r3, [r7, #8]
 80133e6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80133ea:	2b00      	cmp	r3, #0
 80133ec:	d0ef      	beq.n	80133ce <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80133ee:	68bb      	ldr	r3, [r7, #8]
 80133f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80133f4:	2b00      	cmp	r3, #0
 80133f6:	d1ea      	bne.n	80133ce <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80133fc:	f003 0304 	and.w	r3, r3, #4
 8013400:	2b00      	cmp	r3, #0
 8013402:	d004      	beq.n	801340e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	2204      	movs	r2, #4
 8013408:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801340a:	2304      	movs	r3, #4
 801340c:	e00e      	b.n	801342c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013412:	f003 0301 	and.w	r3, r3, #1
 8013416:	2b00      	cmp	r3, #0
 8013418:	d004      	beq.n	8013424 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801341a:	687b      	ldr	r3, [r7, #4]
 801341c:	2201      	movs	r2, #1
 801341e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013420:	2301      	movs	r3, #1
 8013422:	e003      	b.n	801342c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	4a06      	ldr	r2, [pc, #24]	; (8013440 <SDMMC_GetCmdResp2+0x90>)
 8013428:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 801342a:	2300      	movs	r3, #0
}
 801342c:	4618      	mov	r0, r3
 801342e:	3714      	adds	r7, #20
 8013430:	46bd      	mov	sp, r7
 8013432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013436:	4770      	bx	lr
 8013438:	24000040 	.word	0x24000040
 801343c:	10624dd3 	.word	0x10624dd3
 8013440:	002000c5 	.word	0x002000c5

08013444 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8013444:	b480      	push	{r7}
 8013446:	b085      	sub	sp, #20
 8013448:	af00      	add	r7, sp, #0
 801344a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801344c:	4b1a      	ldr	r3, [pc, #104]	; (80134b8 <SDMMC_GetCmdResp3+0x74>)
 801344e:	681b      	ldr	r3, [r3, #0]
 8013450:	4a1a      	ldr	r2, [pc, #104]	; (80134bc <SDMMC_GetCmdResp3+0x78>)
 8013452:	fba2 2303 	umull	r2, r3, r2, r3
 8013456:	0a5b      	lsrs	r3, r3, #9
 8013458:	f241 3288 	movw	r2, #5000	; 0x1388
 801345c:	fb02 f303 	mul.w	r3, r2, r3
 8013460:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8013462:	68fb      	ldr	r3, [r7, #12]
 8013464:	1e5a      	subs	r2, r3, #1
 8013466:	60fa      	str	r2, [r7, #12]
 8013468:	2b00      	cmp	r3, #0
 801346a:	d102      	bne.n	8013472 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801346c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013470:	e01b      	b.n	80134aa <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013476:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013478:	68bb      	ldr	r3, [r7, #8]
 801347a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 801347e:	2b00      	cmp	r3, #0
 8013480:	d0ef      	beq.n	8013462 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8013482:	68bb      	ldr	r3, [r7, #8]
 8013484:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013488:	2b00      	cmp	r3, #0
 801348a:	d1ea      	bne.n	8013462 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013490:	f003 0304 	and.w	r3, r3, #4
 8013494:	2b00      	cmp	r3, #0
 8013496:	d004      	beq.n	80134a2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013498:	687b      	ldr	r3, [r7, #4]
 801349a:	2204      	movs	r2, #4
 801349c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801349e:	2304      	movs	r3, #4
 80134a0:	e003      	b.n	80134aa <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	4a06      	ldr	r2, [pc, #24]	; (80134c0 <SDMMC_GetCmdResp3+0x7c>)
 80134a6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80134a8:	2300      	movs	r3, #0
}
 80134aa:	4618      	mov	r0, r3
 80134ac:	3714      	adds	r7, #20
 80134ae:	46bd      	mov	sp, r7
 80134b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134b4:	4770      	bx	lr
 80134b6:	bf00      	nop
 80134b8:	24000040 	.word	0x24000040
 80134bc:	10624dd3 	.word	0x10624dd3
 80134c0:	002000c5 	.word	0x002000c5

080134c4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80134c4:	b580      	push	{r7, lr}
 80134c6:	b088      	sub	sp, #32
 80134c8:	af00      	add	r7, sp, #0
 80134ca:	60f8      	str	r0, [r7, #12]
 80134cc:	460b      	mov	r3, r1
 80134ce:	607a      	str	r2, [r7, #4]
 80134d0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80134d2:	4b35      	ldr	r3, [pc, #212]	; (80135a8 <SDMMC_GetCmdResp6+0xe4>)
 80134d4:	681b      	ldr	r3, [r3, #0]
 80134d6:	4a35      	ldr	r2, [pc, #212]	; (80135ac <SDMMC_GetCmdResp6+0xe8>)
 80134d8:	fba2 2303 	umull	r2, r3, r2, r3
 80134dc:	0a5b      	lsrs	r3, r3, #9
 80134de:	f241 3288 	movw	r2, #5000	; 0x1388
 80134e2:	fb02 f303 	mul.w	r3, r2, r3
 80134e6:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80134e8:	69fb      	ldr	r3, [r7, #28]
 80134ea:	1e5a      	subs	r2, r3, #1
 80134ec:	61fa      	str	r2, [r7, #28]
 80134ee:	2b00      	cmp	r3, #0
 80134f0:	d102      	bne.n	80134f8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80134f2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80134f6:	e052      	b.n	801359e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80134f8:	68fb      	ldr	r3, [r7, #12]
 80134fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80134fc:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80134fe:	69bb      	ldr	r3, [r7, #24]
 8013500:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8013504:	2b00      	cmp	r3, #0
 8013506:	d0ef      	beq.n	80134e8 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8013508:	69bb      	ldr	r3, [r7, #24]
 801350a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801350e:	2b00      	cmp	r3, #0
 8013510:	d1ea      	bne.n	80134e8 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013512:	68fb      	ldr	r3, [r7, #12]
 8013514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013516:	f003 0304 	and.w	r3, r3, #4
 801351a:	2b00      	cmp	r3, #0
 801351c:	d004      	beq.n	8013528 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801351e:	68fb      	ldr	r3, [r7, #12]
 8013520:	2204      	movs	r2, #4
 8013522:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013524:	2304      	movs	r3, #4
 8013526:	e03a      	b.n	801359e <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8013528:	68fb      	ldr	r3, [r7, #12]
 801352a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801352c:	f003 0301 	and.w	r3, r3, #1
 8013530:	2b00      	cmp	r3, #0
 8013532:	d004      	beq.n	801353e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8013534:	68fb      	ldr	r3, [r7, #12]
 8013536:	2201      	movs	r2, #1
 8013538:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801353a:	2301      	movs	r3, #1
 801353c:	e02f      	b.n	801359e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801353e:	68f8      	ldr	r0, [r7, #12]
 8013540:	f7ff fbba 	bl	8012cb8 <SDMMC_GetCommandResponse>
 8013544:	4603      	mov	r3, r0
 8013546:	461a      	mov	r2, r3
 8013548:	7afb      	ldrb	r3, [r7, #11]
 801354a:	4293      	cmp	r3, r2
 801354c:	d001      	beq.n	8013552 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801354e:	2301      	movs	r3, #1
 8013550:	e025      	b.n	801359e <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013552:	68fb      	ldr	r3, [r7, #12]
 8013554:	4a16      	ldr	r2, [pc, #88]	; (80135b0 <SDMMC_GetCmdResp6+0xec>)
 8013556:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8013558:	2100      	movs	r1, #0
 801355a:	68f8      	ldr	r0, [r7, #12]
 801355c:	f7ff fbb9 	bl	8012cd2 <SDMMC_GetResponse>
 8013560:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8013562:	697b      	ldr	r3, [r7, #20]
 8013564:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8013568:	2b00      	cmp	r3, #0
 801356a:	d106      	bne.n	801357a <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 801356c:	697b      	ldr	r3, [r7, #20]
 801356e:	0c1b      	lsrs	r3, r3, #16
 8013570:	b29a      	uxth	r2, r3
 8013572:	687b      	ldr	r3, [r7, #4]
 8013574:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8013576:	2300      	movs	r3, #0
 8013578:	e011      	b.n	801359e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 801357a:	697b      	ldr	r3, [r7, #20]
 801357c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013580:	2b00      	cmp	r3, #0
 8013582:	d002      	beq.n	801358a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8013584:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8013588:	e009      	b.n	801359e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 801358a:	697b      	ldr	r3, [r7, #20]
 801358c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013590:	2b00      	cmp	r3, #0
 8013592:	d002      	beq.n	801359a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8013594:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013598:	e001      	b.n	801359e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801359a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 801359e:	4618      	mov	r0, r3
 80135a0:	3720      	adds	r7, #32
 80135a2:	46bd      	mov	sp, r7
 80135a4:	bd80      	pop	{r7, pc}
 80135a6:	bf00      	nop
 80135a8:	24000040 	.word	0x24000040
 80135ac:	10624dd3 	.word	0x10624dd3
 80135b0:	002000c5 	.word	0x002000c5

080135b4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80135b4:	b480      	push	{r7}
 80135b6:	b085      	sub	sp, #20
 80135b8:	af00      	add	r7, sp, #0
 80135ba:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80135bc:	4b22      	ldr	r3, [pc, #136]	; (8013648 <SDMMC_GetCmdResp7+0x94>)
 80135be:	681b      	ldr	r3, [r3, #0]
 80135c0:	4a22      	ldr	r2, [pc, #136]	; (801364c <SDMMC_GetCmdResp7+0x98>)
 80135c2:	fba2 2303 	umull	r2, r3, r2, r3
 80135c6:	0a5b      	lsrs	r3, r3, #9
 80135c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80135cc:	fb02 f303 	mul.w	r3, r2, r3
 80135d0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80135d2:	68fb      	ldr	r3, [r7, #12]
 80135d4:	1e5a      	subs	r2, r3, #1
 80135d6:	60fa      	str	r2, [r7, #12]
 80135d8:	2b00      	cmp	r3, #0
 80135da:	d102      	bne.n	80135e2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80135dc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80135e0:	e02c      	b.n	801363c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80135e2:	687b      	ldr	r3, [r7, #4]
 80135e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80135e6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80135e8:	68bb      	ldr	r3, [r7, #8]
 80135ea:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80135ee:	2b00      	cmp	r3, #0
 80135f0:	d0ef      	beq.n	80135d2 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80135f2:	68bb      	ldr	r3, [r7, #8]
 80135f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80135f8:	2b00      	cmp	r3, #0
 80135fa:	d1ea      	bne.n	80135d2 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013600:	f003 0304 	and.w	r3, r3, #4
 8013604:	2b00      	cmp	r3, #0
 8013606:	d004      	beq.n	8013612 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	2204      	movs	r2, #4
 801360c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801360e:	2304      	movs	r3, #4
 8013610:	e014      	b.n	801363c <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013616:	f003 0301 	and.w	r3, r3, #1
 801361a:	2b00      	cmp	r3, #0
 801361c:	d004      	beq.n	8013628 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	2201      	movs	r2, #1
 8013622:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013624:	2301      	movs	r3, #1
 8013626:	e009      	b.n	801363c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8013628:	687b      	ldr	r3, [r7, #4]
 801362a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801362c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013630:	2b00      	cmp	r3, #0
 8013632:	d002      	beq.n	801363a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	2240      	movs	r2, #64	; 0x40
 8013638:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 801363a:	2300      	movs	r3, #0

}
 801363c:	4618      	mov	r0, r3
 801363e:	3714      	adds	r7, #20
 8013640:	46bd      	mov	sp, r7
 8013642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013646:	4770      	bx	lr
 8013648:	24000040 	.word	0x24000040
 801364c:	10624dd3 	.word	0x10624dd3

08013650 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8013650:	b480      	push	{r7}
 8013652:	b085      	sub	sp, #20
 8013654:	af00      	add	r7, sp, #0
 8013656:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8013658:	4b11      	ldr	r3, [pc, #68]	; (80136a0 <SDMMC_GetCmdError+0x50>)
 801365a:	681b      	ldr	r3, [r3, #0]
 801365c:	4a11      	ldr	r2, [pc, #68]	; (80136a4 <SDMMC_GetCmdError+0x54>)
 801365e:	fba2 2303 	umull	r2, r3, r2, r3
 8013662:	0a5b      	lsrs	r3, r3, #9
 8013664:	f241 3288 	movw	r2, #5000	; 0x1388
 8013668:	fb02 f303 	mul.w	r3, r2, r3
 801366c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801366e:	68fb      	ldr	r3, [r7, #12]
 8013670:	1e5a      	subs	r2, r3, #1
 8013672:	60fa      	str	r2, [r7, #12]
 8013674:	2b00      	cmp	r3, #0
 8013676:	d102      	bne.n	801367e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013678:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801367c:	e009      	b.n	8013692 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 801367e:	687b      	ldr	r3, [r7, #4]
 8013680:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013686:	2b00      	cmp	r3, #0
 8013688:	d0f1      	beq.n	801366e <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801368a:	687b      	ldr	r3, [r7, #4]
 801368c:	4a06      	ldr	r2, [pc, #24]	; (80136a8 <SDMMC_GetCmdError+0x58>)
 801368e:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8013690:	2300      	movs	r3, #0
}
 8013692:	4618      	mov	r0, r3
 8013694:	3714      	adds	r7, #20
 8013696:	46bd      	mov	sp, r7
 8013698:	f85d 7b04 	ldr.w	r7, [sp], #4
 801369c:	4770      	bx	lr
 801369e:	bf00      	nop
 80136a0:	24000040 	.word	0x24000040
 80136a4:	10624dd3 	.word	0x10624dd3
 80136a8:	002000c5 	.word	0x002000c5

080136ac <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80136ac:	b580      	push	{r7, lr}
 80136ae:	b084      	sub	sp, #16
 80136b0:	af00      	add	r7, sp, #0
 80136b2:	4603      	mov	r3, r0
 80136b4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80136b6:	79fb      	ldrb	r3, [r7, #7]
 80136b8:	4a08      	ldr	r2, [pc, #32]	; (80136dc <disk_status+0x30>)
 80136ba:	009b      	lsls	r3, r3, #2
 80136bc:	4413      	add	r3, r2
 80136be:	685b      	ldr	r3, [r3, #4]
 80136c0:	685b      	ldr	r3, [r3, #4]
 80136c2:	79fa      	ldrb	r2, [r7, #7]
 80136c4:	4905      	ldr	r1, [pc, #20]	; (80136dc <disk_status+0x30>)
 80136c6:	440a      	add	r2, r1
 80136c8:	7a12      	ldrb	r2, [r2, #8]
 80136ca:	4610      	mov	r0, r2
 80136cc:	4798      	blx	r3
 80136ce:	4603      	mov	r3, r0
 80136d0:	73fb      	strb	r3, [r7, #15]
  return stat;
 80136d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80136d4:	4618      	mov	r0, r3
 80136d6:	3710      	adds	r7, #16
 80136d8:	46bd      	mov	sp, r7
 80136da:	bd80      	pop	{r7, pc}
 80136dc:	24002684 	.word	0x24002684

080136e0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80136e0:	b580      	push	{r7, lr}
 80136e2:	b084      	sub	sp, #16
 80136e4:	af00      	add	r7, sp, #0
 80136e6:	4603      	mov	r3, r0
 80136e8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80136ea:	2300      	movs	r3, #0
 80136ec:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80136ee:	79fb      	ldrb	r3, [r7, #7]
 80136f0:	4a0d      	ldr	r2, [pc, #52]	; (8013728 <disk_initialize+0x48>)
 80136f2:	5cd3      	ldrb	r3, [r2, r3]
 80136f4:	2b00      	cmp	r3, #0
 80136f6:	d111      	bne.n	801371c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80136f8:	79fb      	ldrb	r3, [r7, #7]
 80136fa:	4a0b      	ldr	r2, [pc, #44]	; (8013728 <disk_initialize+0x48>)
 80136fc:	2101      	movs	r1, #1
 80136fe:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8013700:	79fb      	ldrb	r3, [r7, #7]
 8013702:	4a09      	ldr	r2, [pc, #36]	; (8013728 <disk_initialize+0x48>)
 8013704:	009b      	lsls	r3, r3, #2
 8013706:	4413      	add	r3, r2
 8013708:	685b      	ldr	r3, [r3, #4]
 801370a:	681b      	ldr	r3, [r3, #0]
 801370c:	79fa      	ldrb	r2, [r7, #7]
 801370e:	4906      	ldr	r1, [pc, #24]	; (8013728 <disk_initialize+0x48>)
 8013710:	440a      	add	r2, r1
 8013712:	7a12      	ldrb	r2, [r2, #8]
 8013714:	4610      	mov	r0, r2
 8013716:	4798      	blx	r3
 8013718:	4603      	mov	r3, r0
 801371a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 801371c:	7bfb      	ldrb	r3, [r7, #15]
}
 801371e:	4618      	mov	r0, r3
 8013720:	3710      	adds	r7, #16
 8013722:	46bd      	mov	sp, r7
 8013724:	bd80      	pop	{r7, pc}
 8013726:	bf00      	nop
 8013728:	24002684 	.word	0x24002684

0801372c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 801372c:	b590      	push	{r4, r7, lr}
 801372e:	b087      	sub	sp, #28
 8013730:	af00      	add	r7, sp, #0
 8013732:	60b9      	str	r1, [r7, #8]
 8013734:	607a      	str	r2, [r7, #4]
 8013736:	603b      	str	r3, [r7, #0]
 8013738:	4603      	mov	r3, r0
 801373a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 801373c:	7bfb      	ldrb	r3, [r7, #15]
 801373e:	4a0a      	ldr	r2, [pc, #40]	; (8013768 <disk_read+0x3c>)
 8013740:	009b      	lsls	r3, r3, #2
 8013742:	4413      	add	r3, r2
 8013744:	685b      	ldr	r3, [r3, #4]
 8013746:	689c      	ldr	r4, [r3, #8]
 8013748:	7bfb      	ldrb	r3, [r7, #15]
 801374a:	4a07      	ldr	r2, [pc, #28]	; (8013768 <disk_read+0x3c>)
 801374c:	4413      	add	r3, r2
 801374e:	7a18      	ldrb	r0, [r3, #8]
 8013750:	683b      	ldr	r3, [r7, #0]
 8013752:	687a      	ldr	r2, [r7, #4]
 8013754:	68b9      	ldr	r1, [r7, #8]
 8013756:	47a0      	blx	r4
 8013758:	4603      	mov	r3, r0
 801375a:	75fb      	strb	r3, [r7, #23]
  return res;
 801375c:	7dfb      	ldrb	r3, [r7, #23]
}
 801375e:	4618      	mov	r0, r3
 8013760:	371c      	adds	r7, #28
 8013762:	46bd      	mov	sp, r7
 8013764:	bd90      	pop	{r4, r7, pc}
 8013766:	bf00      	nop
 8013768:	24002684 	.word	0x24002684

0801376c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 801376c:	b590      	push	{r4, r7, lr}
 801376e:	b087      	sub	sp, #28
 8013770:	af00      	add	r7, sp, #0
 8013772:	60b9      	str	r1, [r7, #8]
 8013774:	607a      	str	r2, [r7, #4]
 8013776:	603b      	str	r3, [r7, #0]
 8013778:	4603      	mov	r3, r0
 801377a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 801377c:	7bfb      	ldrb	r3, [r7, #15]
 801377e:	4a0a      	ldr	r2, [pc, #40]	; (80137a8 <disk_write+0x3c>)
 8013780:	009b      	lsls	r3, r3, #2
 8013782:	4413      	add	r3, r2
 8013784:	685b      	ldr	r3, [r3, #4]
 8013786:	68dc      	ldr	r4, [r3, #12]
 8013788:	7bfb      	ldrb	r3, [r7, #15]
 801378a:	4a07      	ldr	r2, [pc, #28]	; (80137a8 <disk_write+0x3c>)
 801378c:	4413      	add	r3, r2
 801378e:	7a18      	ldrb	r0, [r3, #8]
 8013790:	683b      	ldr	r3, [r7, #0]
 8013792:	687a      	ldr	r2, [r7, #4]
 8013794:	68b9      	ldr	r1, [r7, #8]
 8013796:	47a0      	blx	r4
 8013798:	4603      	mov	r3, r0
 801379a:	75fb      	strb	r3, [r7, #23]
  return res;
 801379c:	7dfb      	ldrb	r3, [r7, #23]
}
 801379e:	4618      	mov	r0, r3
 80137a0:	371c      	adds	r7, #28
 80137a2:	46bd      	mov	sp, r7
 80137a4:	bd90      	pop	{r4, r7, pc}
 80137a6:	bf00      	nop
 80137a8:	24002684 	.word	0x24002684

080137ac <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80137ac:	b580      	push	{r7, lr}
 80137ae:	b084      	sub	sp, #16
 80137b0:	af00      	add	r7, sp, #0
 80137b2:	4603      	mov	r3, r0
 80137b4:	603a      	str	r2, [r7, #0]
 80137b6:	71fb      	strb	r3, [r7, #7]
 80137b8:	460b      	mov	r3, r1
 80137ba:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80137bc:	79fb      	ldrb	r3, [r7, #7]
 80137be:	4a09      	ldr	r2, [pc, #36]	; (80137e4 <disk_ioctl+0x38>)
 80137c0:	009b      	lsls	r3, r3, #2
 80137c2:	4413      	add	r3, r2
 80137c4:	685b      	ldr	r3, [r3, #4]
 80137c6:	691b      	ldr	r3, [r3, #16]
 80137c8:	79fa      	ldrb	r2, [r7, #7]
 80137ca:	4906      	ldr	r1, [pc, #24]	; (80137e4 <disk_ioctl+0x38>)
 80137cc:	440a      	add	r2, r1
 80137ce:	7a10      	ldrb	r0, [r2, #8]
 80137d0:	79b9      	ldrb	r1, [r7, #6]
 80137d2:	683a      	ldr	r2, [r7, #0]
 80137d4:	4798      	blx	r3
 80137d6:	4603      	mov	r3, r0
 80137d8:	73fb      	strb	r3, [r7, #15]
  return res;
 80137da:	7bfb      	ldrb	r3, [r7, #15]
}
 80137dc:	4618      	mov	r0, r3
 80137de:	3710      	adds	r7, #16
 80137e0:	46bd      	mov	sp, r7
 80137e2:	bd80      	pop	{r7, pc}
 80137e4:	24002684 	.word	0x24002684

080137e8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80137e8:	b480      	push	{r7}
 80137ea:	b085      	sub	sp, #20
 80137ec:	af00      	add	r7, sp, #0
 80137ee:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80137f0:	687b      	ldr	r3, [r7, #4]
 80137f2:	3301      	adds	r3, #1
 80137f4:	781b      	ldrb	r3, [r3, #0]
 80137f6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80137f8:	89fb      	ldrh	r3, [r7, #14]
 80137fa:	021b      	lsls	r3, r3, #8
 80137fc:	b21a      	sxth	r2, r3
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	781b      	ldrb	r3, [r3, #0]
 8013802:	b21b      	sxth	r3, r3
 8013804:	4313      	orrs	r3, r2
 8013806:	b21b      	sxth	r3, r3
 8013808:	81fb      	strh	r3, [r7, #14]
	return rv;
 801380a:	89fb      	ldrh	r3, [r7, #14]
}
 801380c:	4618      	mov	r0, r3
 801380e:	3714      	adds	r7, #20
 8013810:	46bd      	mov	sp, r7
 8013812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013816:	4770      	bx	lr

08013818 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8013818:	b480      	push	{r7}
 801381a:	b085      	sub	sp, #20
 801381c:	af00      	add	r7, sp, #0
 801381e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8013820:	687b      	ldr	r3, [r7, #4]
 8013822:	3303      	adds	r3, #3
 8013824:	781b      	ldrb	r3, [r3, #0]
 8013826:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8013828:	68fb      	ldr	r3, [r7, #12]
 801382a:	021b      	lsls	r3, r3, #8
 801382c:	687a      	ldr	r2, [r7, #4]
 801382e:	3202      	adds	r2, #2
 8013830:	7812      	ldrb	r2, [r2, #0]
 8013832:	4313      	orrs	r3, r2
 8013834:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8013836:	68fb      	ldr	r3, [r7, #12]
 8013838:	021b      	lsls	r3, r3, #8
 801383a:	687a      	ldr	r2, [r7, #4]
 801383c:	3201      	adds	r2, #1
 801383e:	7812      	ldrb	r2, [r2, #0]
 8013840:	4313      	orrs	r3, r2
 8013842:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8013844:	68fb      	ldr	r3, [r7, #12]
 8013846:	021b      	lsls	r3, r3, #8
 8013848:	687a      	ldr	r2, [r7, #4]
 801384a:	7812      	ldrb	r2, [r2, #0]
 801384c:	4313      	orrs	r3, r2
 801384e:	60fb      	str	r3, [r7, #12]
	return rv;
 8013850:	68fb      	ldr	r3, [r7, #12]
}
 8013852:	4618      	mov	r0, r3
 8013854:	3714      	adds	r7, #20
 8013856:	46bd      	mov	sp, r7
 8013858:	f85d 7b04 	ldr.w	r7, [sp], #4
 801385c:	4770      	bx	lr

0801385e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801385e:	b480      	push	{r7}
 8013860:	b083      	sub	sp, #12
 8013862:	af00      	add	r7, sp, #0
 8013864:	6078      	str	r0, [r7, #4]
 8013866:	460b      	mov	r3, r1
 8013868:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801386a:	687b      	ldr	r3, [r7, #4]
 801386c:	1c5a      	adds	r2, r3, #1
 801386e:	607a      	str	r2, [r7, #4]
 8013870:	887a      	ldrh	r2, [r7, #2]
 8013872:	b2d2      	uxtb	r2, r2
 8013874:	701a      	strb	r2, [r3, #0]
 8013876:	887b      	ldrh	r3, [r7, #2]
 8013878:	0a1b      	lsrs	r3, r3, #8
 801387a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	1c5a      	adds	r2, r3, #1
 8013880:	607a      	str	r2, [r7, #4]
 8013882:	887a      	ldrh	r2, [r7, #2]
 8013884:	b2d2      	uxtb	r2, r2
 8013886:	701a      	strb	r2, [r3, #0]
}
 8013888:	bf00      	nop
 801388a:	370c      	adds	r7, #12
 801388c:	46bd      	mov	sp, r7
 801388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013892:	4770      	bx	lr

08013894 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8013894:	b480      	push	{r7}
 8013896:	b083      	sub	sp, #12
 8013898:	af00      	add	r7, sp, #0
 801389a:	6078      	str	r0, [r7, #4]
 801389c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801389e:	687b      	ldr	r3, [r7, #4]
 80138a0:	1c5a      	adds	r2, r3, #1
 80138a2:	607a      	str	r2, [r7, #4]
 80138a4:	683a      	ldr	r2, [r7, #0]
 80138a6:	b2d2      	uxtb	r2, r2
 80138a8:	701a      	strb	r2, [r3, #0]
 80138aa:	683b      	ldr	r3, [r7, #0]
 80138ac:	0a1b      	lsrs	r3, r3, #8
 80138ae:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	1c5a      	adds	r2, r3, #1
 80138b4:	607a      	str	r2, [r7, #4]
 80138b6:	683a      	ldr	r2, [r7, #0]
 80138b8:	b2d2      	uxtb	r2, r2
 80138ba:	701a      	strb	r2, [r3, #0]
 80138bc:	683b      	ldr	r3, [r7, #0]
 80138be:	0a1b      	lsrs	r3, r3, #8
 80138c0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80138c2:	687b      	ldr	r3, [r7, #4]
 80138c4:	1c5a      	adds	r2, r3, #1
 80138c6:	607a      	str	r2, [r7, #4]
 80138c8:	683a      	ldr	r2, [r7, #0]
 80138ca:	b2d2      	uxtb	r2, r2
 80138cc:	701a      	strb	r2, [r3, #0]
 80138ce:	683b      	ldr	r3, [r7, #0]
 80138d0:	0a1b      	lsrs	r3, r3, #8
 80138d2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80138d4:	687b      	ldr	r3, [r7, #4]
 80138d6:	1c5a      	adds	r2, r3, #1
 80138d8:	607a      	str	r2, [r7, #4]
 80138da:	683a      	ldr	r2, [r7, #0]
 80138dc:	b2d2      	uxtb	r2, r2
 80138de:	701a      	strb	r2, [r3, #0]
}
 80138e0:	bf00      	nop
 80138e2:	370c      	adds	r7, #12
 80138e4:	46bd      	mov	sp, r7
 80138e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138ea:	4770      	bx	lr

080138ec <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80138ec:	b480      	push	{r7}
 80138ee:	b087      	sub	sp, #28
 80138f0:	af00      	add	r7, sp, #0
 80138f2:	60f8      	str	r0, [r7, #12]
 80138f4:	60b9      	str	r1, [r7, #8]
 80138f6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80138f8:	68fb      	ldr	r3, [r7, #12]
 80138fa:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80138fc:	68bb      	ldr	r3, [r7, #8]
 80138fe:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	2b00      	cmp	r3, #0
 8013904:	d00d      	beq.n	8013922 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8013906:	693a      	ldr	r2, [r7, #16]
 8013908:	1c53      	adds	r3, r2, #1
 801390a:	613b      	str	r3, [r7, #16]
 801390c:	697b      	ldr	r3, [r7, #20]
 801390e:	1c59      	adds	r1, r3, #1
 8013910:	6179      	str	r1, [r7, #20]
 8013912:	7812      	ldrb	r2, [r2, #0]
 8013914:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8013916:	687b      	ldr	r3, [r7, #4]
 8013918:	3b01      	subs	r3, #1
 801391a:	607b      	str	r3, [r7, #4]
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	2b00      	cmp	r3, #0
 8013920:	d1f1      	bne.n	8013906 <mem_cpy+0x1a>
	}
}
 8013922:	bf00      	nop
 8013924:	371c      	adds	r7, #28
 8013926:	46bd      	mov	sp, r7
 8013928:	f85d 7b04 	ldr.w	r7, [sp], #4
 801392c:	4770      	bx	lr

0801392e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 801392e:	b480      	push	{r7}
 8013930:	b087      	sub	sp, #28
 8013932:	af00      	add	r7, sp, #0
 8013934:	60f8      	str	r0, [r7, #12]
 8013936:	60b9      	str	r1, [r7, #8]
 8013938:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801393a:	68fb      	ldr	r3, [r7, #12]
 801393c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 801393e:	697b      	ldr	r3, [r7, #20]
 8013940:	1c5a      	adds	r2, r3, #1
 8013942:	617a      	str	r2, [r7, #20]
 8013944:	68ba      	ldr	r2, [r7, #8]
 8013946:	b2d2      	uxtb	r2, r2
 8013948:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801394a:	687b      	ldr	r3, [r7, #4]
 801394c:	3b01      	subs	r3, #1
 801394e:	607b      	str	r3, [r7, #4]
 8013950:	687b      	ldr	r3, [r7, #4]
 8013952:	2b00      	cmp	r3, #0
 8013954:	d1f3      	bne.n	801393e <mem_set+0x10>
}
 8013956:	bf00      	nop
 8013958:	bf00      	nop
 801395a:	371c      	adds	r7, #28
 801395c:	46bd      	mov	sp, r7
 801395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013962:	4770      	bx	lr

08013964 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8013964:	b480      	push	{r7}
 8013966:	b089      	sub	sp, #36	; 0x24
 8013968:	af00      	add	r7, sp, #0
 801396a:	60f8      	str	r0, [r7, #12]
 801396c:	60b9      	str	r1, [r7, #8]
 801396e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8013970:	68fb      	ldr	r3, [r7, #12]
 8013972:	61fb      	str	r3, [r7, #28]
 8013974:	68bb      	ldr	r3, [r7, #8]
 8013976:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8013978:	2300      	movs	r3, #0
 801397a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 801397c:	69fb      	ldr	r3, [r7, #28]
 801397e:	1c5a      	adds	r2, r3, #1
 8013980:	61fa      	str	r2, [r7, #28]
 8013982:	781b      	ldrb	r3, [r3, #0]
 8013984:	4619      	mov	r1, r3
 8013986:	69bb      	ldr	r3, [r7, #24]
 8013988:	1c5a      	adds	r2, r3, #1
 801398a:	61ba      	str	r2, [r7, #24]
 801398c:	781b      	ldrb	r3, [r3, #0]
 801398e:	1acb      	subs	r3, r1, r3
 8013990:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8013992:	687b      	ldr	r3, [r7, #4]
 8013994:	3b01      	subs	r3, #1
 8013996:	607b      	str	r3, [r7, #4]
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	2b00      	cmp	r3, #0
 801399c:	d002      	beq.n	80139a4 <mem_cmp+0x40>
 801399e:	697b      	ldr	r3, [r7, #20]
 80139a0:	2b00      	cmp	r3, #0
 80139a2:	d0eb      	beq.n	801397c <mem_cmp+0x18>

	return r;
 80139a4:	697b      	ldr	r3, [r7, #20]
}
 80139a6:	4618      	mov	r0, r3
 80139a8:	3724      	adds	r7, #36	; 0x24
 80139aa:	46bd      	mov	sp, r7
 80139ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139b0:	4770      	bx	lr

080139b2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80139b2:	b480      	push	{r7}
 80139b4:	b083      	sub	sp, #12
 80139b6:	af00      	add	r7, sp, #0
 80139b8:	6078      	str	r0, [r7, #4]
 80139ba:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80139bc:	e002      	b.n	80139c4 <chk_chr+0x12>
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	3301      	adds	r3, #1
 80139c2:	607b      	str	r3, [r7, #4]
 80139c4:	687b      	ldr	r3, [r7, #4]
 80139c6:	781b      	ldrb	r3, [r3, #0]
 80139c8:	2b00      	cmp	r3, #0
 80139ca:	d005      	beq.n	80139d8 <chk_chr+0x26>
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	781b      	ldrb	r3, [r3, #0]
 80139d0:	461a      	mov	r2, r3
 80139d2:	683b      	ldr	r3, [r7, #0]
 80139d4:	4293      	cmp	r3, r2
 80139d6:	d1f2      	bne.n	80139be <chk_chr+0xc>
	return *str;
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	781b      	ldrb	r3, [r3, #0]
}
 80139dc:	4618      	mov	r0, r3
 80139de:	370c      	adds	r7, #12
 80139e0:	46bd      	mov	sp, r7
 80139e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139e6:	4770      	bx	lr

080139e8 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 80139e8:	b580      	push	{r7, lr}
 80139ea:	b082      	sub	sp, #8
 80139ec:	af00      	add	r7, sp, #0
 80139ee:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	2b00      	cmp	r3, #0
 80139f4:	d009      	beq.n	8013a0a <lock_fs+0x22>
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	68db      	ldr	r3, [r3, #12]
 80139fa:	4618      	mov	r0, r3
 80139fc:	f002 fb98 	bl	8016130 <ff_req_grant>
 8013a00:	4603      	mov	r3, r0
 8013a02:	2b00      	cmp	r3, #0
 8013a04:	d001      	beq.n	8013a0a <lock_fs+0x22>
 8013a06:	2301      	movs	r3, #1
 8013a08:	e000      	b.n	8013a0c <lock_fs+0x24>
 8013a0a:	2300      	movs	r3, #0
}
 8013a0c:	4618      	mov	r0, r3
 8013a0e:	3708      	adds	r7, #8
 8013a10:	46bd      	mov	sp, r7
 8013a12:	bd80      	pop	{r7, pc}

08013a14 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8013a14:	b580      	push	{r7, lr}
 8013a16:	b082      	sub	sp, #8
 8013a18:	af00      	add	r7, sp, #0
 8013a1a:	6078      	str	r0, [r7, #4]
 8013a1c:	460b      	mov	r3, r1
 8013a1e:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	2b00      	cmp	r3, #0
 8013a24:	d00d      	beq.n	8013a42 <unlock_fs+0x2e>
 8013a26:	78fb      	ldrb	r3, [r7, #3]
 8013a28:	2b0c      	cmp	r3, #12
 8013a2a:	d00a      	beq.n	8013a42 <unlock_fs+0x2e>
 8013a2c:	78fb      	ldrb	r3, [r7, #3]
 8013a2e:	2b0b      	cmp	r3, #11
 8013a30:	d007      	beq.n	8013a42 <unlock_fs+0x2e>
 8013a32:	78fb      	ldrb	r3, [r7, #3]
 8013a34:	2b0f      	cmp	r3, #15
 8013a36:	d004      	beq.n	8013a42 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8013a38:	687b      	ldr	r3, [r7, #4]
 8013a3a:	68db      	ldr	r3, [r3, #12]
 8013a3c:	4618      	mov	r0, r3
 8013a3e:	f002 fb8c 	bl	801615a <ff_rel_grant>
	}
}
 8013a42:	bf00      	nop
 8013a44:	3708      	adds	r7, #8
 8013a46:	46bd      	mov	sp, r7
 8013a48:	bd80      	pop	{r7, pc}
	...

08013a4c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8013a4c:	b480      	push	{r7}
 8013a4e:	b085      	sub	sp, #20
 8013a50:	af00      	add	r7, sp, #0
 8013a52:	6078      	str	r0, [r7, #4]
 8013a54:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8013a56:	2300      	movs	r3, #0
 8013a58:	60bb      	str	r3, [r7, #8]
 8013a5a:	68bb      	ldr	r3, [r7, #8]
 8013a5c:	60fb      	str	r3, [r7, #12]
 8013a5e:	e029      	b.n	8013ab4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8013a60:	4a27      	ldr	r2, [pc, #156]	; (8013b00 <chk_lock+0xb4>)
 8013a62:	68fb      	ldr	r3, [r7, #12]
 8013a64:	011b      	lsls	r3, r3, #4
 8013a66:	4413      	add	r3, r2
 8013a68:	681b      	ldr	r3, [r3, #0]
 8013a6a:	2b00      	cmp	r3, #0
 8013a6c:	d01d      	beq.n	8013aaa <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8013a6e:	4a24      	ldr	r2, [pc, #144]	; (8013b00 <chk_lock+0xb4>)
 8013a70:	68fb      	ldr	r3, [r7, #12]
 8013a72:	011b      	lsls	r3, r3, #4
 8013a74:	4413      	add	r3, r2
 8013a76:	681a      	ldr	r2, [r3, #0]
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	681b      	ldr	r3, [r3, #0]
 8013a7c:	429a      	cmp	r2, r3
 8013a7e:	d116      	bne.n	8013aae <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8013a80:	4a1f      	ldr	r2, [pc, #124]	; (8013b00 <chk_lock+0xb4>)
 8013a82:	68fb      	ldr	r3, [r7, #12]
 8013a84:	011b      	lsls	r3, r3, #4
 8013a86:	4413      	add	r3, r2
 8013a88:	3304      	adds	r3, #4
 8013a8a:	681a      	ldr	r2, [r3, #0]
 8013a8c:	687b      	ldr	r3, [r7, #4]
 8013a8e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8013a90:	429a      	cmp	r2, r3
 8013a92:	d10c      	bne.n	8013aae <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8013a94:	4a1a      	ldr	r2, [pc, #104]	; (8013b00 <chk_lock+0xb4>)
 8013a96:	68fb      	ldr	r3, [r7, #12]
 8013a98:	011b      	lsls	r3, r3, #4
 8013a9a:	4413      	add	r3, r2
 8013a9c:	3308      	adds	r3, #8
 8013a9e:	681a      	ldr	r2, [r3, #0]
 8013aa0:	687b      	ldr	r3, [r7, #4]
 8013aa2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8013aa4:	429a      	cmp	r2, r3
 8013aa6:	d102      	bne.n	8013aae <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8013aa8:	e007      	b.n	8013aba <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8013aaa:	2301      	movs	r3, #1
 8013aac:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8013aae:	68fb      	ldr	r3, [r7, #12]
 8013ab0:	3301      	adds	r3, #1
 8013ab2:	60fb      	str	r3, [r7, #12]
 8013ab4:	68fb      	ldr	r3, [r7, #12]
 8013ab6:	2b01      	cmp	r3, #1
 8013ab8:	d9d2      	bls.n	8013a60 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8013aba:	68fb      	ldr	r3, [r7, #12]
 8013abc:	2b02      	cmp	r3, #2
 8013abe:	d109      	bne.n	8013ad4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8013ac0:	68bb      	ldr	r3, [r7, #8]
 8013ac2:	2b00      	cmp	r3, #0
 8013ac4:	d102      	bne.n	8013acc <chk_lock+0x80>
 8013ac6:	683b      	ldr	r3, [r7, #0]
 8013ac8:	2b02      	cmp	r3, #2
 8013aca:	d101      	bne.n	8013ad0 <chk_lock+0x84>
 8013acc:	2300      	movs	r3, #0
 8013ace:	e010      	b.n	8013af2 <chk_lock+0xa6>
 8013ad0:	2312      	movs	r3, #18
 8013ad2:	e00e      	b.n	8013af2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8013ad4:	683b      	ldr	r3, [r7, #0]
 8013ad6:	2b00      	cmp	r3, #0
 8013ad8:	d108      	bne.n	8013aec <chk_lock+0xa0>
 8013ada:	4a09      	ldr	r2, [pc, #36]	; (8013b00 <chk_lock+0xb4>)
 8013adc:	68fb      	ldr	r3, [r7, #12]
 8013ade:	011b      	lsls	r3, r3, #4
 8013ae0:	4413      	add	r3, r2
 8013ae2:	330c      	adds	r3, #12
 8013ae4:	881b      	ldrh	r3, [r3, #0]
 8013ae6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013aea:	d101      	bne.n	8013af0 <chk_lock+0xa4>
 8013aec:	2310      	movs	r3, #16
 8013aee:	e000      	b.n	8013af2 <chk_lock+0xa6>
 8013af0:	2300      	movs	r3, #0
}
 8013af2:	4618      	mov	r0, r3
 8013af4:	3714      	adds	r7, #20
 8013af6:	46bd      	mov	sp, r7
 8013af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013afc:	4770      	bx	lr
 8013afe:	bf00      	nop
 8013b00:	24002664 	.word	0x24002664

08013b04 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8013b04:	b480      	push	{r7}
 8013b06:	b083      	sub	sp, #12
 8013b08:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8013b0a:	2300      	movs	r3, #0
 8013b0c:	607b      	str	r3, [r7, #4]
 8013b0e:	e002      	b.n	8013b16 <enq_lock+0x12>
 8013b10:	687b      	ldr	r3, [r7, #4]
 8013b12:	3301      	adds	r3, #1
 8013b14:	607b      	str	r3, [r7, #4]
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	2b01      	cmp	r3, #1
 8013b1a:	d806      	bhi.n	8013b2a <enq_lock+0x26>
 8013b1c:	4a09      	ldr	r2, [pc, #36]	; (8013b44 <enq_lock+0x40>)
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	011b      	lsls	r3, r3, #4
 8013b22:	4413      	add	r3, r2
 8013b24:	681b      	ldr	r3, [r3, #0]
 8013b26:	2b00      	cmp	r3, #0
 8013b28:	d1f2      	bne.n	8013b10 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8013b2a:	687b      	ldr	r3, [r7, #4]
 8013b2c:	2b02      	cmp	r3, #2
 8013b2e:	bf14      	ite	ne
 8013b30:	2301      	movne	r3, #1
 8013b32:	2300      	moveq	r3, #0
 8013b34:	b2db      	uxtb	r3, r3
}
 8013b36:	4618      	mov	r0, r3
 8013b38:	370c      	adds	r7, #12
 8013b3a:	46bd      	mov	sp, r7
 8013b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b40:	4770      	bx	lr
 8013b42:	bf00      	nop
 8013b44:	24002664 	.word	0x24002664

08013b48 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8013b48:	b480      	push	{r7}
 8013b4a:	b085      	sub	sp, #20
 8013b4c:	af00      	add	r7, sp, #0
 8013b4e:	6078      	str	r0, [r7, #4]
 8013b50:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8013b52:	2300      	movs	r3, #0
 8013b54:	60fb      	str	r3, [r7, #12]
 8013b56:	e01f      	b.n	8013b98 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8013b58:	4a41      	ldr	r2, [pc, #260]	; (8013c60 <inc_lock+0x118>)
 8013b5a:	68fb      	ldr	r3, [r7, #12]
 8013b5c:	011b      	lsls	r3, r3, #4
 8013b5e:	4413      	add	r3, r2
 8013b60:	681a      	ldr	r2, [r3, #0]
 8013b62:	687b      	ldr	r3, [r7, #4]
 8013b64:	681b      	ldr	r3, [r3, #0]
 8013b66:	429a      	cmp	r2, r3
 8013b68:	d113      	bne.n	8013b92 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8013b6a:	4a3d      	ldr	r2, [pc, #244]	; (8013c60 <inc_lock+0x118>)
 8013b6c:	68fb      	ldr	r3, [r7, #12]
 8013b6e:	011b      	lsls	r3, r3, #4
 8013b70:	4413      	add	r3, r2
 8013b72:	3304      	adds	r3, #4
 8013b74:	681a      	ldr	r2, [r3, #0]
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8013b7a:	429a      	cmp	r2, r3
 8013b7c:	d109      	bne.n	8013b92 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8013b7e:	4a38      	ldr	r2, [pc, #224]	; (8013c60 <inc_lock+0x118>)
 8013b80:	68fb      	ldr	r3, [r7, #12]
 8013b82:	011b      	lsls	r3, r3, #4
 8013b84:	4413      	add	r3, r2
 8013b86:	3308      	adds	r3, #8
 8013b88:	681a      	ldr	r2, [r3, #0]
 8013b8a:	687b      	ldr	r3, [r7, #4]
 8013b8c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8013b8e:	429a      	cmp	r2, r3
 8013b90:	d006      	beq.n	8013ba0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8013b92:	68fb      	ldr	r3, [r7, #12]
 8013b94:	3301      	adds	r3, #1
 8013b96:	60fb      	str	r3, [r7, #12]
 8013b98:	68fb      	ldr	r3, [r7, #12]
 8013b9a:	2b01      	cmp	r3, #1
 8013b9c:	d9dc      	bls.n	8013b58 <inc_lock+0x10>
 8013b9e:	e000      	b.n	8013ba2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8013ba0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8013ba2:	68fb      	ldr	r3, [r7, #12]
 8013ba4:	2b02      	cmp	r3, #2
 8013ba6:	d132      	bne.n	8013c0e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8013ba8:	2300      	movs	r3, #0
 8013baa:	60fb      	str	r3, [r7, #12]
 8013bac:	e002      	b.n	8013bb4 <inc_lock+0x6c>
 8013bae:	68fb      	ldr	r3, [r7, #12]
 8013bb0:	3301      	adds	r3, #1
 8013bb2:	60fb      	str	r3, [r7, #12]
 8013bb4:	68fb      	ldr	r3, [r7, #12]
 8013bb6:	2b01      	cmp	r3, #1
 8013bb8:	d806      	bhi.n	8013bc8 <inc_lock+0x80>
 8013bba:	4a29      	ldr	r2, [pc, #164]	; (8013c60 <inc_lock+0x118>)
 8013bbc:	68fb      	ldr	r3, [r7, #12]
 8013bbe:	011b      	lsls	r3, r3, #4
 8013bc0:	4413      	add	r3, r2
 8013bc2:	681b      	ldr	r3, [r3, #0]
 8013bc4:	2b00      	cmp	r3, #0
 8013bc6:	d1f2      	bne.n	8013bae <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8013bc8:	68fb      	ldr	r3, [r7, #12]
 8013bca:	2b02      	cmp	r3, #2
 8013bcc:	d101      	bne.n	8013bd2 <inc_lock+0x8a>
 8013bce:	2300      	movs	r3, #0
 8013bd0:	e040      	b.n	8013c54 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8013bd2:	687b      	ldr	r3, [r7, #4]
 8013bd4:	681a      	ldr	r2, [r3, #0]
 8013bd6:	4922      	ldr	r1, [pc, #136]	; (8013c60 <inc_lock+0x118>)
 8013bd8:	68fb      	ldr	r3, [r7, #12]
 8013bda:	011b      	lsls	r3, r3, #4
 8013bdc:	440b      	add	r3, r1
 8013bde:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8013be0:	687b      	ldr	r3, [r7, #4]
 8013be2:	689a      	ldr	r2, [r3, #8]
 8013be4:	491e      	ldr	r1, [pc, #120]	; (8013c60 <inc_lock+0x118>)
 8013be6:	68fb      	ldr	r3, [r7, #12]
 8013be8:	011b      	lsls	r3, r3, #4
 8013bea:	440b      	add	r3, r1
 8013bec:	3304      	adds	r3, #4
 8013bee:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8013bf0:	687b      	ldr	r3, [r7, #4]
 8013bf2:	695a      	ldr	r2, [r3, #20]
 8013bf4:	491a      	ldr	r1, [pc, #104]	; (8013c60 <inc_lock+0x118>)
 8013bf6:	68fb      	ldr	r3, [r7, #12]
 8013bf8:	011b      	lsls	r3, r3, #4
 8013bfa:	440b      	add	r3, r1
 8013bfc:	3308      	adds	r3, #8
 8013bfe:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8013c00:	4a17      	ldr	r2, [pc, #92]	; (8013c60 <inc_lock+0x118>)
 8013c02:	68fb      	ldr	r3, [r7, #12]
 8013c04:	011b      	lsls	r3, r3, #4
 8013c06:	4413      	add	r3, r2
 8013c08:	330c      	adds	r3, #12
 8013c0a:	2200      	movs	r2, #0
 8013c0c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8013c0e:	683b      	ldr	r3, [r7, #0]
 8013c10:	2b00      	cmp	r3, #0
 8013c12:	d009      	beq.n	8013c28 <inc_lock+0xe0>
 8013c14:	4a12      	ldr	r2, [pc, #72]	; (8013c60 <inc_lock+0x118>)
 8013c16:	68fb      	ldr	r3, [r7, #12]
 8013c18:	011b      	lsls	r3, r3, #4
 8013c1a:	4413      	add	r3, r2
 8013c1c:	330c      	adds	r3, #12
 8013c1e:	881b      	ldrh	r3, [r3, #0]
 8013c20:	2b00      	cmp	r3, #0
 8013c22:	d001      	beq.n	8013c28 <inc_lock+0xe0>
 8013c24:	2300      	movs	r3, #0
 8013c26:	e015      	b.n	8013c54 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8013c28:	683b      	ldr	r3, [r7, #0]
 8013c2a:	2b00      	cmp	r3, #0
 8013c2c:	d108      	bne.n	8013c40 <inc_lock+0xf8>
 8013c2e:	4a0c      	ldr	r2, [pc, #48]	; (8013c60 <inc_lock+0x118>)
 8013c30:	68fb      	ldr	r3, [r7, #12]
 8013c32:	011b      	lsls	r3, r3, #4
 8013c34:	4413      	add	r3, r2
 8013c36:	330c      	adds	r3, #12
 8013c38:	881b      	ldrh	r3, [r3, #0]
 8013c3a:	3301      	adds	r3, #1
 8013c3c:	b29a      	uxth	r2, r3
 8013c3e:	e001      	b.n	8013c44 <inc_lock+0xfc>
 8013c40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8013c44:	4906      	ldr	r1, [pc, #24]	; (8013c60 <inc_lock+0x118>)
 8013c46:	68fb      	ldr	r3, [r7, #12]
 8013c48:	011b      	lsls	r3, r3, #4
 8013c4a:	440b      	add	r3, r1
 8013c4c:	330c      	adds	r3, #12
 8013c4e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8013c50:	68fb      	ldr	r3, [r7, #12]
 8013c52:	3301      	adds	r3, #1
}
 8013c54:	4618      	mov	r0, r3
 8013c56:	3714      	adds	r7, #20
 8013c58:	46bd      	mov	sp, r7
 8013c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c5e:	4770      	bx	lr
 8013c60:	24002664 	.word	0x24002664

08013c64 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8013c64:	b480      	push	{r7}
 8013c66:	b085      	sub	sp, #20
 8013c68:	af00      	add	r7, sp, #0
 8013c6a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	3b01      	subs	r3, #1
 8013c70:	607b      	str	r3, [r7, #4]
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	2b01      	cmp	r3, #1
 8013c76:	d825      	bhi.n	8013cc4 <dec_lock+0x60>
		n = Files[i].ctr;
 8013c78:	4a17      	ldr	r2, [pc, #92]	; (8013cd8 <dec_lock+0x74>)
 8013c7a:	687b      	ldr	r3, [r7, #4]
 8013c7c:	011b      	lsls	r3, r3, #4
 8013c7e:	4413      	add	r3, r2
 8013c80:	330c      	adds	r3, #12
 8013c82:	881b      	ldrh	r3, [r3, #0]
 8013c84:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8013c86:	89fb      	ldrh	r3, [r7, #14]
 8013c88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013c8c:	d101      	bne.n	8013c92 <dec_lock+0x2e>
 8013c8e:	2300      	movs	r3, #0
 8013c90:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8013c92:	89fb      	ldrh	r3, [r7, #14]
 8013c94:	2b00      	cmp	r3, #0
 8013c96:	d002      	beq.n	8013c9e <dec_lock+0x3a>
 8013c98:	89fb      	ldrh	r3, [r7, #14]
 8013c9a:	3b01      	subs	r3, #1
 8013c9c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8013c9e:	4a0e      	ldr	r2, [pc, #56]	; (8013cd8 <dec_lock+0x74>)
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	011b      	lsls	r3, r3, #4
 8013ca4:	4413      	add	r3, r2
 8013ca6:	330c      	adds	r3, #12
 8013ca8:	89fa      	ldrh	r2, [r7, #14]
 8013caa:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8013cac:	89fb      	ldrh	r3, [r7, #14]
 8013cae:	2b00      	cmp	r3, #0
 8013cb0:	d105      	bne.n	8013cbe <dec_lock+0x5a>
 8013cb2:	4a09      	ldr	r2, [pc, #36]	; (8013cd8 <dec_lock+0x74>)
 8013cb4:	687b      	ldr	r3, [r7, #4]
 8013cb6:	011b      	lsls	r3, r3, #4
 8013cb8:	4413      	add	r3, r2
 8013cba:	2200      	movs	r2, #0
 8013cbc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8013cbe:	2300      	movs	r3, #0
 8013cc0:	737b      	strb	r3, [r7, #13]
 8013cc2:	e001      	b.n	8013cc8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8013cc4:	2302      	movs	r3, #2
 8013cc6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8013cc8:	7b7b      	ldrb	r3, [r7, #13]
}
 8013cca:	4618      	mov	r0, r3
 8013ccc:	3714      	adds	r7, #20
 8013cce:	46bd      	mov	sp, r7
 8013cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cd4:	4770      	bx	lr
 8013cd6:	bf00      	nop
 8013cd8:	24002664 	.word	0x24002664

08013cdc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8013cdc:	b480      	push	{r7}
 8013cde:	b085      	sub	sp, #20
 8013ce0:	af00      	add	r7, sp, #0
 8013ce2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8013ce4:	2300      	movs	r3, #0
 8013ce6:	60fb      	str	r3, [r7, #12]
 8013ce8:	e010      	b.n	8013d0c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8013cea:	4a0d      	ldr	r2, [pc, #52]	; (8013d20 <clear_lock+0x44>)
 8013cec:	68fb      	ldr	r3, [r7, #12]
 8013cee:	011b      	lsls	r3, r3, #4
 8013cf0:	4413      	add	r3, r2
 8013cf2:	681b      	ldr	r3, [r3, #0]
 8013cf4:	687a      	ldr	r2, [r7, #4]
 8013cf6:	429a      	cmp	r2, r3
 8013cf8:	d105      	bne.n	8013d06 <clear_lock+0x2a>
 8013cfa:	4a09      	ldr	r2, [pc, #36]	; (8013d20 <clear_lock+0x44>)
 8013cfc:	68fb      	ldr	r3, [r7, #12]
 8013cfe:	011b      	lsls	r3, r3, #4
 8013d00:	4413      	add	r3, r2
 8013d02:	2200      	movs	r2, #0
 8013d04:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8013d06:	68fb      	ldr	r3, [r7, #12]
 8013d08:	3301      	adds	r3, #1
 8013d0a:	60fb      	str	r3, [r7, #12]
 8013d0c:	68fb      	ldr	r3, [r7, #12]
 8013d0e:	2b01      	cmp	r3, #1
 8013d10:	d9eb      	bls.n	8013cea <clear_lock+0xe>
	}
}
 8013d12:	bf00      	nop
 8013d14:	bf00      	nop
 8013d16:	3714      	adds	r7, #20
 8013d18:	46bd      	mov	sp, r7
 8013d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d1e:	4770      	bx	lr
 8013d20:	24002664 	.word	0x24002664

08013d24 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8013d24:	b580      	push	{r7, lr}
 8013d26:	b086      	sub	sp, #24
 8013d28:	af00      	add	r7, sp, #0
 8013d2a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8013d2c:	2300      	movs	r3, #0
 8013d2e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	78db      	ldrb	r3, [r3, #3]
 8013d34:	2b00      	cmp	r3, #0
 8013d36:	d034      	beq.n	8013da2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8013d38:	687b      	ldr	r3, [r7, #4]
 8013d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013d3c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8013d3e:	687b      	ldr	r3, [r7, #4]
 8013d40:	7858      	ldrb	r0, [r3, #1]
 8013d42:	687b      	ldr	r3, [r7, #4]
 8013d44:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8013d48:	2301      	movs	r3, #1
 8013d4a:	697a      	ldr	r2, [r7, #20]
 8013d4c:	f7ff fd0e 	bl	801376c <disk_write>
 8013d50:	4603      	mov	r3, r0
 8013d52:	2b00      	cmp	r3, #0
 8013d54:	d002      	beq.n	8013d5c <sync_window+0x38>
			res = FR_DISK_ERR;
 8013d56:	2301      	movs	r3, #1
 8013d58:	73fb      	strb	r3, [r7, #15]
 8013d5a:	e022      	b.n	8013da2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	2200      	movs	r2, #0
 8013d60:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8013d62:	687b      	ldr	r3, [r7, #4]
 8013d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d66:	697a      	ldr	r2, [r7, #20]
 8013d68:	1ad2      	subs	r2, r2, r3
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	69db      	ldr	r3, [r3, #28]
 8013d6e:	429a      	cmp	r2, r3
 8013d70:	d217      	bcs.n	8013da2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8013d72:	687b      	ldr	r3, [r7, #4]
 8013d74:	789b      	ldrb	r3, [r3, #2]
 8013d76:	613b      	str	r3, [r7, #16]
 8013d78:	e010      	b.n	8013d9c <sync_window+0x78>
					wsect += fs->fsize;
 8013d7a:	687b      	ldr	r3, [r7, #4]
 8013d7c:	69db      	ldr	r3, [r3, #28]
 8013d7e:	697a      	ldr	r2, [r7, #20]
 8013d80:	4413      	add	r3, r2
 8013d82:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	7858      	ldrb	r0, [r3, #1]
 8013d88:	687b      	ldr	r3, [r7, #4]
 8013d8a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8013d8e:	2301      	movs	r3, #1
 8013d90:	697a      	ldr	r2, [r7, #20]
 8013d92:	f7ff fceb 	bl	801376c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8013d96:	693b      	ldr	r3, [r7, #16]
 8013d98:	3b01      	subs	r3, #1
 8013d9a:	613b      	str	r3, [r7, #16]
 8013d9c:	693b      	ldr	r3, [r7, #16]
 8013d9e:	2b01      	cmp	r3, #1
 8013da0:	d8eb      	bhi.n	8013d7a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8013da2:	7bfb      	ldrb	r3, [r7, #15]
}
 8013da4:	4618      	mov	r0, r3
 8013da6:	3718      	adds	r7, #24
 8013da8:	46bd      	mov	sp, r7
 8013daa:	bd80      	pop	{r7, pc}

08013dac <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8013dac:	b580      	push	{r7, lr}
 8013dae:	b084      	sub	sp, #16
 8013db0:	af00      	add	r7, sp, #0
 8013db2:	6078      	str	r0, [r7, #4]
 8013db4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8013db6:	2300      	movs	r3, #0
 8013db8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013dbe:	683a      	ldr	r2, [r7, #0]
 8013dc0:	429a      	cmp	r2, r3
 8013dc2:	d01b      	beq.n	8013dfc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8013dc4:	6878      	ldr	r0, [r7, #4]
 8013dc6:	f7ff ffad 	bl	8013d24 <sync_window>
 8013dca:	4603      	mov	r3, r0
 8013dcc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8013dce:	7bfb      	ldrb	r3, [r7, #15]
 8013dd0:	2b00      	cmp	r3, #0
 8013dd2:	d113      	bne.n	8013dfc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8013dd4:	687b      	ldr	r3, [r7, #4]
 8013dd6:	7858      	ldrb	r0, [r3, #1]
 8013dd8:	687b      	ldr	r3, [r7, #4]
 8013dda:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8013dde:	2301      	movs	r3, #1
 8013de0:	683a      	ldr	r2, [r7, #0]
 8013de2:	f7ff fca3 	bl	801372c <disk_read>
 8013de6:	4603      	mov	r3, r0
 8013de8:	2b00      	cmp	r3, #0
 8013dea:	d004      	beq.n	8013df6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8013dec:	f04f 33ff 	mov.w	r3, #4294967295
 8013df0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8013df2:	2301      	movs	r3, #1
 8013df4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8013df6:	687b      	ldr	r3, [r7, #4]
 8013df8:	683a      	ldr	r2, [r7, #0]
 8013dfa:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8013dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8013dfe:	4618      	mov	r0, r3
 8013e00:	3710      	adds	r7, #16
 8013e02:	46bd      	mov	sp, r7
 8013e04:	bd80      	pop	{r7, pc}
	...

08013e08 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8013e08:	b580      	push	{r7, lr}
 8013e0a:	b084      	sub	sp, #16
 8013e0c:	af00      	add	r7, sp, #0
 8013e0e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8013e10:	6878      	ldr	r0, [r7, #4]
 8013e12:	f7ff ff87 	bl	8013d24 <sync_window>
 8013e16:	4603      	mov	r3, r0
 8013e18:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8013e1a:	7bfb      	ldrb	r3, [r7, #15]
 8013e1c:	2b00      	cmp	r3, #0
 8013e1e:	d158      	bne.n	8013ed2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8013e20:	687b      	ldr	r3, [r7, #4]
 8013e22:	781b      	ldrb	r3, [r3, #0]
 8013e24:	2b03      	cmp	r3, #3
 8013e26:	d148      	bne.n	8013eba <sync_fs+0xb2>
 8013e28:	687b      	ldr	r3, [r7, #4]
 8013e2a:	791b      	ldrb	r3, [r3, #4]
 8013e2c:	2b01      	cmp	r3, #1
 8013e2e:	d144      	bne.n	8013eba <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8013e30:	687b      	ldr	r3, [r7, #4]
 8013e32:	3334      	adds	r3, #52	; 0x34
 8013e34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013e38:	2100      	movs	r1, #0
 8013e3a:	4618      	mov	r0, r3
 8013e3c:	f7ff fd77 	bl	801392e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8013e40:	687b      	ldr	r3, [r7, #4]
 8013e42:	3334      	adds	r3, #52	; 0x34
 8013e44:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8013e48:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8013e4c:	4618      	mov	r0, r3
 8013e4e:	f7ff fd06 	bl	801385e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8013e52:	687b      	ldr	r3, [r7, #4]
 8013e54:	3334      	adds	r3, #52	; 0x34
 8013e56:	4921      	ldr	r1, [pc, #132]	; (8013edc <sync_fs+0xd4>)
 8013e58:	4618      	mov	r0, r3
 8013e5a:	f7ff fd1b 	bl	8013894 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	3334      	adds	r3, #52	; 0x34
 8013e62:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8013e66:	491e      	ldr	r1, [pc, #120]	; (8013ee0 <sync_fs+0xd8>)
 8013e68:	4618      	mov	r0, r3
 8013e6a:	f7ff fd13 	bl	8013894 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8013e6e:	687b      	ldr	r3, [r7, #4]
 8013e70:	3334      	adds	r3, #52	; 0x34
 8013e72:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8013e76:	687b      	ldr	r3, [r7, #4]
 8013e78:	695b      	ldr	r3, [r3, #20]
 8013e7a:	4619      	mov	r1, r3
 8013e7c:	4610      	mov	r0, r2
 8013e7e:	f7ff fd09 	bl	8013894 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8013e82:	687b      	ldr	r3, [r7, #4]
 8013e84:	3334      	adds	r3, #52	; 0x34
 8013e86:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	691b      	ldr	r3, [r3, #16]
 8013e8e:	4619      	mov	r1, r3
 8013e90:	4610      	mov	r0, r2
 8013e92:	f7ff fcff 	bl	8013894 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8013e96:	687b      	ldr	r3, [r7, #4]
 8013e98:	6a1b      	ldr	r3, [r3, #32]
 8013e9a:	1c5a      	adds	r2, r3, #1
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8013ea0:	687b      	ldr	r3, [r7, #4]
 8013ea2:	7858      	ldrb	r0, [r3, #1]
 8013ea4:	687b      	ldr	r3, [r7, #4]
 8013ea6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8013eaa:	687b      	ldr	r3, [r7, #4]
 8013eac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013eae:	2301      	movs	r3, #1
 8013eb0:	f7ff fc5c 	bl	801376c <disk_write>
			fs->fsi_flag = 0;
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	2200      	movs	r2, #0
 8013eb8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8013eba:	687b      	ldr	r3, [r7, #4]
 8013ebc:	785b      	ldrb	r3, [r3, #1]
 8013ebe:	2200      	movs	r2, #0
 8013ec0:	2100      	movs	r1, #0
 8013ec2:	4618      	mov	r0, r3
 8013ec4:	f7ff fc72 	bl	80137ac <disk_ioctl>
 8013ec8:	4603      	mov	r3, r0
 8013eca:	2b00      	cmp	r3, #0
 8013ecc:	d001      	beq.n	8013ed2 <sync_fs+0xca>
 8013ece:	2301      	movs	r3, #1
 8013ed0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8013ed2:	7bfb      	ldrb	r3, [r7, #15]
}
 8013ed4:	4618      	mov	r0, r3
 8013ed6:	3710      	adds	r7, #16
 8013ed8:	46bd      	mov	sp, r7
 8013eda:	bd80      	pop	{r7, pc}
 8013edc:	41615252 	.word	0x41615252
 8013ee0:	61417272 	.word	0x61417272

08013ee4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8013ee4:	b480      	push	{r7}
 8013ee6:	b083      	sub	sp, #12
 8013ee8:	af00      	add	r7, sp, #0
 8013eea:	6078      	str	r0, [r7, #4]
 8013eec:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8013eee:	683b      	ldr	r3, [r7, #0]
 8013ef0:	3b02      	subs	r3, #2
 8013ef2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8013ef4:	687b      	ldr	r3, [r7, #4]
 8013ef6:	699b      	ldr	r3, [r3, #24]
 8013ef8:	3b02      	subs	r3, #2
 8013efa:	683a      	ldr	r2, [r7, #0]
 8013efc:	429a      	cmp	r2, r3
 8013efe:	d301      	bcc.n	8013f04 <clust2sect+0x20>
 8013f00:	2300      	movs	r3, #0
 8013f02:	e008      	b.n	8013f16 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8013f04:	687b      	ldr	r3, [r7, #4]
 8013f06:	895b      	ldrh	r3, [r3, #10]
 8013f08:	461a      	mov	r2, r3
 8013f0a:	683b      	ldr	r3, [r7, #0]
 8013f0c:	fb03 f202 	mul.w	r2, r3, r2
 8013f10:	687b      	ldr	r3, [r7, #4]
 8013f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f14:	4413      	add	r3, r2
}
 8013f16:	4618      	mov	r0, r3
 8013f18:	370c      	adds	r7, #12
 8013f1a:	46bd      	mov	sp, r7
 8013f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f20:	4770      	bx	lr

08013f22 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8013f22:	b580      	push	{r7, lr}
 8013f24:	b086      	sub	sp, #24
 8013f26:	af00      	add	r7, sp, #0
 8013f28:	6078      	str	r0, [r7, #4]
 8013f2a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8013f2c:	687b      	ldr	r3, [r7, #4]
 8013f2e:	681b      	ldr	r3, [r3, #0]
 8013f30:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8013f32:	683b      	ldr	r3, [r7, #0]
 8013f34:	2b01      	cmp	r3, #1
 8013f36:	d904      	bls.n	8013f42 <get_fat+0x20>
 8013f38:	693b      	ldr	r3, [r7, #16]
 8013f3a:	699b      	ldr	r3, [r3, #24]
 8013f3c:	683a      	ldr	r2, [r7, #0]
 8013f3e:	429a      	cmp	r2, r3
 8013f40:	d302      	bcc.n	8013f48 <get_fat+0x26>
		val = 1;	/* Internal error */
 8013f42:	2301      	movs	r3, #1
 8013f44:	617b      	str	r3, [r7, #20]
 8013f46:	e08f      	b.n	8014068 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8013f48:	f04f 33ff 	mov.w	r3, #4294967295
 8013f4c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8013f4e:	693b      	ldr	r3, [r7, #16]
 8013f50:	781b      	ldrb	r3, [r3, #0]
 8013f52:	2b03      	cmp	r3, #3
 8013f54:	d062      	beq.n	801401c <get_fat+0xfa>
 8013f56:	2b03      	cmp	r3, #3
 8013f58:	dc7c      	bgt.n	8014054 <get_fat+0x132>
 8013f5a:	2b01      	cmp	r3, #1
 8013f5c:	d002      	beq.n	8013f64 <get_fat+0x42>
 8013f5e:	2b02      	cmp	r3, #2
 8013f60:	d042      	beq.n	8013fe8 <get_fat+0xc6>
 8013f62:	e077      	b.n	8014054 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8013f64:	683b      	ldr	r3, [r7, #0]
 8013f66:	60fb      	str	r3, [r7, #12]
 8013f68:	68fb      	ldr	r3, [r7, #12]
 8013f6a:	085b      	lsrs	r3, r3, #1
 8013f6c:	68fa      	ldr	r2, [r7, #12]
 8013f6e:	4413      	add	r3, r2
 8013f70:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013f72:	693b      	ldr	r3, [r7, #16]
 8013f74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013f76:	68fb      	ldr	r3, [r7, #12]
 8013f78:	0a5b      	lsrs	r3, r3, #9
 8013f7a:	4413      	add	r3, r2
 8013f7c:	4619      	mov	r1, r3
 8013f7e:	6938      	ldr	r0, [r7, #16]
 8013f80:	f7ff ff14 	bl	8013dac <move_window>
 8013f84:	4603      	mov	r3, r0
 8013f86:	2b00      	cmp	r3, #0
 8013f88:	d167      	bne.n	801405a <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8013f8a:	68fb      	ldr	r3, [r7, #12]
 8013f8c:	1c5a      	adds	r2, r3, #1
 8013f8e:	60fa      	str	r2, [r7, #12]
 8013f90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013f94:	693a      	ldr	r2, [r7, #16]
 8013f96:	4413      	add	r3, r2
 8013f98:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013f9c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013f9e:	693b      	ldr	r3, [r7, #16]
 8013fa0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013fa2:	68fb      	ldr	r3, [r7, #12]
 8013fa4:	0a5b      	lsrs	r3, r3, #9
 8013fa6:	4413      	add	r3, r2
 8013fa8:	4619      	mov	r1, r3
 8013faa:	6938      	ldr	r0, [r7, #16]
 8013fac:	f7ff fefe 	bl	8013dac <move_window>
 8013fb0:	4603      	mov	r3, r0
 8013fb2:	2b00      	cmp	r3, #0
 8013fb4:	d153      	bne.n	801405e <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8013fb6:	68fb      	ldr	r3, [r7, #12]
 8013fb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013fbc:	693a      	ldr	r2, [r7, #16]
 8013fbe:	4413      	add	r3, r2
 8013fc0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013fc4:	021b      	lsls	r3, r3, #8
 8013fc6:	461a      	mov	r2, r3
 8013fc8:	68bb      	ldr	r3, [r7, #8]
 8013fca:	4313      	orrs	r3, r2
 8013fcc:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8013fce:	683b      	ldr	r3, [r7, #0]
 8013fd0:	f003 0301 	and.w	r3, r3, #1
 8013fd4:	2b00      	cmp	r3, #0
 8013fd6:	d002      	beq.n	8013fde <get_fat+0xbc>
 8013fd8:	68bb      	ldr	r3, [r7, #8]
 8013fda:	091b      	lsrs	r3, r3, #4
 8013fdc:	e002      	b.n	8013fe4 <get_fat+0xc2>
 8013fde:	68bb      	ldr	r3, [r7, #8]
 8013fe0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8013fe4:	617b      	str	r3, [r7, #20]
			break;
 8013fe6:	e03f      	b.n	8014068 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8013fe8:	693b      	ldr	r3, [r7, #16]
 8013fea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013fec:	683b      	ldr	r3, [r7, #0]
 8013fee:	0a1b      	lsrs	r3, r3, #8
 8013ff0:	4413      	add	r3, r2
 8013ff2:	4619      	mov	r1, r3
 8013ff4:	6938      	ldr	r0, [r7, #16]
 8013ff6:	f7ff fed9 	bl	8013dac <move_window>
 8013ffa:	4603      	mov	r3, r0
 8013ffc:	2b00      	cmp	r3, #0
 8013ffe:	d130      	bne.n	8014062 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8014000:	693b      	ldr	r3, [r7, #16]
 8014002:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8014006:	683b      	ldr	r3, [r7, #0]
 8014008:	005b      	lsls	r3, r3, #1
 801400a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 801400e:	4413      	add	r3, r2
 8014010:	4618      	mov	r0, r3
 8014012:	f7ff fbe9 	bl	80137e8 <ld_word>
 8014016:	4603      	mov	r3, r0
 8014018:	617b      	str	r3, [r7, #20]
			break;
 801401a:	e025      	b.n	8014068 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801401c:	693b      	ldr	r3, [r7, #16]
 801401e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014020:	683b      	ldr	r3, [r7, #0]
 8014022:	09db      	lsrs	r3, r3, #7
 8014024:	4413      	add	r3, r2
 8014026:	4619      	mov	r1, r3
 8014028:	6938      	ldr	r0, [r7, #16]
 801402a:	f7ff febf 	bl	8013dac <move_window>
 801402e:	4603      	mov	r3, r0
 8014030:	2b00      	cmp	r3, #0
 8014032:	d118      	bne.n	8014066 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8014034:	693b      	ldr	r3, [r7, #16]
 8014036:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801403a:	683b      	ldr	r3, [r7, #0]
 801403c:	009b      	lsls	r3, r3, #2
 801403e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8014042:	4413      	add	r3, r2
 8014044:	4618      	mov	r0, r3
 8014046:	f7ff fbe7 	bl	8013818 <ld_dword>
 801404a:	4603      	mov	r3, r0
 801404c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8014050:	617b      	str	r3, [r7, #20]
			break;
 8014052:	e009      	b.n	8014068 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8014054:	2301      	movs	r3, #1
 8014056:	617b      	str	r3, [r7, #20]
 8014058:	e006      	b.n	8014068 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801405a:	bf00      	nop
 801405c:	e004      	b.n	8014068 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801405e:	bf00      	nop
 8014060:	e002      	b.n	8014068 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8014062:	bf00      	nop
 8014064:	e000      	b.n	8014068 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8014066:	bf00      	nop
		}
	}

	return val;
 8014068:	697b      	ldr	r3, [r7, #20]
}
 801406a:	4618      	mov	r0, r3
 801406c:	3718      	adds	r7, #24
 801406e:	46bd      	mov	sp, r7
 8014070:	bd80      	pop	{r7, pc}

08014072 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8014072:	b590      	push	{r4, r7, lr}
 8014074:	b089      	sub	sp, #36	; 0x24
 8014076:	af00      	add	r7, sp, #0
 8014078:	60f8      	str	r0, [r7, #12]
 801407a:	60b9      	str	r1, [r7, #8]
 801407c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 801407e:	2302      	movs	r3, #2
 8014080:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8014082:	68bb      	ldr	r3, [r7, #8]
 8014084:	2b01      	cmp	r3, #1
 8014086:	f240 80d9 	bls.w	801423c <put_fat+0x1ca>
 801408a:	68fb      	ldr	r3, [r7, #12]
 801408c:	699b      	ldr	r3, [r3, #24]
 801408e:	68ba      	ldr	r2, [r7, #8]
 8014090:	429a      	cmp	r2, r3
 8014092:	f080 80d3 	bcs.w	801423c <put_fat+0x1ca>
		switch (fs->fs_type) {
 8014096:	68fb      	ldr	r3, [r7, #12]
 8014098:	781b      	ldrb	r3, [r3, #0]
 801409a:	2b03      	cmp	r3, #3
 801409c:	f000 8096 	beq.w	80141cc <put_fat+0x15a>
 80140a0:	2b03      	cmp	r3, #3
 80140a2:	f300 80cb 	bgt.w	801423c <put_fat+0x1ca>
 80140a6:	2b01      	cmp	r3, #1
 80140a8:	d002      	beq.n	80140b0 <put_fat+0x3e>
 80140aa:	2b02      	cmp	r3, #2
 80140ac:	d06e      	beq.n	801418c <put_fat+0x11a>
 80140ae:	e0c5      	b.n	801423c <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80140b0:	68bb      	ldr	r3, [r7, #8]
 80140b2:	61bb      	str	r3, [r7, #24]
 80140b4:	69bb      	ldr	r3, [r7, #24]
 80140b6:	085b      	lsrs	r3, r3, #1
 80140b8:	69ba      	ldr	r2, [r7, #24]
 80140ba:	4413      	add	r3, r2
 80140bc:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80140be:	68fb      	ldr	r3, [r7, #12]
 80140c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80140c2:	69bb      	ldr	r3, [r7, #24]
 80140c4:	0a5b      	lsrs	r3, r3, #9
 80140c6:	4413      	add	r3, r2
 80140c8:	4619      	mov	r1, r3
 80140ca:	68f8      	ldr	r0, [r7, #12]
 80140cc:	f7ff fe6e 	bl	8013dac <move_window>
 80140d0:	4603      	mov	r3, r0
 80140d2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80140d4:	7ffb      	ldrb	r3, [r7, #31]
 80140d6:	2b00      	cmp	r3, #0
 80140d8:	f040 80a9 	bne.w	801422e <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 80140dc:	68fb      	ldr	r3, [r7, #12]
 80140de:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80140e2:	69bb      	ldr	r3, [r7, #24]
 80140e4:	1c59      	adds	r1, r3, #1
 80140e6:	61b9      	str	r1, [r7, #24]
 80140e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80140ec:	4413      	add	r3, r2
 80140ee:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80140f0:	68bb      	ldr	r3, [r7, #8]
 80140f2:	f003 0301 	and.w	r3, r3, #1
 80140f6:	2b00      	cmp	r3, #0
 80140f8:	d00d      	beq.n	8014116 <put_fat+0xa4>
 80140fa:	697b      	ldr	r3, [r7, #20]
 80140fc:	781b      	ldrb	r3, [r3, #0]
 80140fe:	b25b      	sxtb	r3, r3
 8014100:	f003 030f 	and.w	r3, r3, #15
 8014104:	b25a      	sxtb	r2, r3
 8014106:	687b      	ldr	r3, [r7, #4]
 8014108:	b2db      	uxtb	r3, r3
 801410a:	011b      	lsls	r3, r3, #4
 801410c:	b25b      	sxtb	r3, r3
 801410e:	4313      	orrs	r3, r2
 8014110:	b25b      	sxtb	r3, r3
 8014112:	b2db      	uxtb	r3, r3
 8014114:	e001      	b.n	801411a <put_fat+0xa8>
 8014116:	687b      	ldr	r3, [r7, #4]
 8014118:	b2db      	uxtb	r3, r3
 801411a:	697a      	ldr	r2, [r7, #20]
 801411c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801411e:	68fb      	ldr	r3, [r7, #12]
 8014120:	2201      	movs	r2, #1
 8014122:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8014124:	68fb      	ldr	r3, [r7, #12]
 8014126:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014128:	69bb      	ldr	r3, [r7, #24]
 801412a:	0a5b      	lsrs	r3, r3, #9
 801412c:	4413      	add	r3, r2
 801412e:	4619      	mov	r1, r3
 8014130:	68f8      	ldr	r0, [r7, #12]
 8014132:	f7ff fe3b 	bl	8013dac <move_window>
 8014136:	4603      	mov	r3, r0
 8014138:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801413a:	7ffb      	ldrb	r3, [r7, #31]
 801413c:	2b00      	cmp	r3, #0
 801413e:	d178      	bne.n	8014232 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8014140:	68fb      	ldr	r3, [r7, #12]
 8014142:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8014146:	69bb      	ldr	r3, [r7, #24]
 8014148:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801414c:	4413      	add	r3, r2
 801414e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8014150:	68bb      	ldr	r3, [r7, #8]
 8014152:	f003 0301 	and.w	r3, r3, #1
 8014156:	2b00      	cmp	r3, #0
 8014158:	d003      	beq.n	8014162 <put_fat+0xf0>
 801415a:	687b      	ldr	r3, [r7, #4]
 801415c:	091b      	lsrs	r3, r3, #4
 801415e:	b2db      	uxtb	r3, r3
 8014160:	e00e      	b.n	8014180 <put_fat+0x10e>
 8014162:	697b      	ldr	r3, [r7, #20]
 8014164:	781b      	ldrb	r3, [r3, #0]
 8014166:	b25b      	sxtb	r3, r3
 8014168:	f023 030f 	bic.w	r3, r3, #15
 801416c:	b25a      	sxtb	r2, r3
 801416e:	687b      	ldr	r3, [r7, #4]
 8014170:	0a1b      	lsrs	r3, r3, #8
 8014172:	b25b      	sxtb	r3, r3
 8014174:	f003 030f 	and.w	r3, r3, #15
 8014178:	b25b      	sxtb	r3, r3
 801417a:	4313      	orrs	r3, r2
 801417c:	b25b      	sxtb	r3, r3
 801417e:	b2db      	uxtb	r3, r3
 8014180:	697a      	ldr	r2, [r7, #20]
 8014182:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8014184:	68fb      	ldr	r3, [r7, #12]
 8014186:	2201      	movs	r2, #1
 8014188:	70da      	strb	r2, [r3, #3]
			break;
 801418a:	e057      	b.n	801423c <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 801418c:	68fb      	ldr	r3, [r7, #12]
 801418e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014190:	68bb      	ldr	r3, [r7, #8]
 8014192:	0a1b      	lsrs	r3, r3, #8
 8014194:	4413      	add	r3, r2
 8014196:	4619      	mov	r1, r3
 8014198:	68f8      	ldr	r0, [r7, #12]
 801419a:	f7ff fe07 	bl	8013dac <move_window>
 801419e:	4603      	mov	r3, r0
 80141a0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80141a2:	7ffb      	ldrb	r3, [r7, #31]
 80141a4:	2b00      	cmp	r3, #0
 80141a6:	d146      	bne.n	8014236 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80141a8:	68fb      	ldr	r3, [r7, #12]
 80141aa:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80141ae:	68bb      	ldr	r3, [r7, #8]
 80141b0:	005b      	lsls	r3, r3, #1
 80141b2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80141b6:	4413      	add	r3, r2
 80141b8:	687a      	ldr	r2, [r7, #4]
 80141ba:	b292      	uxth	r2, r2
 80141bc:	4611      	mov	r1, r2
 80141be:	4618      	mov	r0, r3
 80141c0:	f7ff fb4d 	bl	801385e <st_word>
			fs->wflag = 1;
 80141c4:	68fb      	ldr	r3, [r7, #12]
 80141c6:	2201      	movs	r2, #1
 80141c8:	70da      	strb	r2, [r3, #3]
			break;
 80141ca:	e037      	b.n	801423c <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80141cc:	68fb      	ldr	r3, [r7, #12]
 80141ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80141d0:	68bb      	ldr	r3, [r7, #8]
 80141d2:	09db      	lsrs	r3, r3, #7
 80141d4:	4413      	add	r3, r2
 80141d6:	4619      	mov	r1, r3
 80141d8:	68f8      	ldr	r0, [r7, #12]
 80141da:	f7ff fde7 	bl	8013dac <move_window>
 80141de:	4603      	mov	r3, r0
 80141e0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80141e2:	7ffb      	ldrb	r3, [r7, #31]
 80141e4:	2b00      	cmp	r3, #0
 80141e6:	d128      	bne.n	801423a <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80141ee:	68fb      	ldr	r3, [r7, #12]
 80141f0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80141f4:	68bb      	ldr	r3, [r7, #8]
 80141f6:	009b      	lsls	r3, r3, #2
 80141f8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80141fc:	4413      	add	r3, r2
 80141fe:	4618      	mov	r0, r3
 8014200:	f7ff fb0a 	bl	8013818 <ld_dword>
 8014204:	4603      	mov	r3, r0
 8014206:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801420a:	4323      	orrs	r3, r4
 801420c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 801420e:	68fb      	ldr	r3, [r7, #12]
 8014210:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8014214:	68bb      	ldr	r3, [r7, #8]
 8014216:	009b      	lsls	r3, r3, #2
 8014218:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 801421c:	4413      	add	r3, r2
 801421e:	6879      	ldr	r1, [r7, #4]
 8014220:	4618      	mov	r0, r3
 8014222:	f7ff fb37 	bl	8013894 <st_dword>
			fs->wflag = 1;
 8014226:	68fb      	ldr	r3, [r7, #12]
 8014228:	2201      	movs	r2, #1
 801422a:	70da      	strb	r2, [r3, #3]
			break;
 801422c:	e006      	b.n	801423c <put_fat+0x1ca>
			if (res != FR_OK) break;
 801422e:	bf00      	nop
 8014230:	e004      	b.n	801423c <put_fat+0x1ca>
			if (res != FR_OK) break;
 8014232:	bf00      	nop
 8014234:	e002      	b.n	801423c <put_fat+0x1ca>
			if (res != FR_OK) break;
 8014236:	bf00      	nop
 8014238:	e000      	b.n	801423c <put_fat+0x1ca>
			if (res != FR_OK) break;
 801423a:	bf00      	nop
		}
	}
	return res;
 801423c:	7ffb      	ldrb	r3, [r7, #31]
}
 801423e:	4618      	mov	r0, r3
 8014240:	3724      	adds	r7, #36	; 0x24
 8014242:	46bd      	mov	sp, r7
 8014244:	bd90      	pop	{r4, r7, pc}

08014246 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8014246:	b580      	push	{r7, lr}
 8014248:	b088      	sub	sp, #32
 801424a:	af00      	add	r7, sp, #0
 801424c:	60f8      	str	r0, [r7, #12]
 801424e:	60b9      	str	r1, [r7, #8]
 8014250:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8014252:	2300      	movs	r3, #0
 8014254:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8014256:	68fb      	ldr	r3, [r7, #12]
 8014258:	681b      	ldr	r3, [r3, #0]
 801425a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 801425c:	68bb      	ldr	r3, [r7, #8]
 801425e:	2b01      	cmp	r3, #1
 8014260:	d904      	bls.n	801426c <remove_chain+0x26>
 8014262:	69bb      	ldr	r3, [r7, #24]
 8014264:	699b      	ldr	r3, [r3, #24]
 8014266:	68ba      	ldr	r2, [r7, #8]
 8014268:	429a      	cmp	r2, r3
 801426a:	d301      	bcc.n	8014270 <remove_chain+0x2a>
 801426c:	2302      	movs	r3, #2
 801426e:	e04b      	b.n	8014308 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8014270:	687b      	ldr	r3, [r7, #4]
 8014272:	2b00      	cmp	r3, #0
 8014274:	d00c      	beq.n	8014290 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8014276:	f04f 32ff 	mov.w	r2, #4294967295
 801427a:	6879      	ldr	r1, [r7, #4]
 801427c:	69b8      	ldr	r0, [r7, #24]
 801427e:	f7ff fef8 	bl	8014072 <put_fat>
 8014282:	4603      	mov	r3, r0
 8014284:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8014286:	7ffb      	ldrb	r3, [r7, #31]
 8014288:	2b00      	cmp	r3, #0
 801428a:	d001      	beq.n	8014290 <remove_chain+0x4a>
 801428c:	7ffb      	ldrb	r3, [r7, #31]
 801428e:	e03b      	b.n	8014308 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8014290:	68b9      	ldr	r1, [r7, #8]
 8014292:	68f8      	ldr	r0, [r7, #12]
 8014294:	f7ff fe45 	bl	8013f22 <get_fat>
 8014298:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 801429a:	697b      	ldr	r3, [r7, #20]
 801429c:	2b00      	cmp	r3, #0
 801429e:	d031      	beq.n	8014304 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80142a0:	697b      	ldr	r3, [r7, #20]
 80142a2:	2b01      	cmp	r3, #1
 80142a4:	d101      	bne.n	80142aa <remove_chain+0x64>
 80142a6:	2302      	movs	r3, #2
 80142a8:	e02e      	b.n	8014308 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80142aa:	697b      	ldr	r3, [r7, #20]
 80142ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80142b0:	d101      	bne.n	80142b6 <remove_chain+0x70>
 80142b2:	2301      	movs	r3, #1
 80142b4:	e028      	b.n	8014308 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80142b6:	2200      	movs	r2, #0
 80142b8:	68b9      	ldr	r1, [r7, #8]
 80142ba:	69b8      	ldr	r0, [r7, #24]
 80142bc:	f7ff fed9 	bl	8014072 <put_fat>
 80142c0:	4603      	mov	r3, r0
 80142c2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80142c4:	7ffb      	ldrb	r3, [r7, #31]
 80142c6:	2b00      	cmp	r3, #0
 80142c8:	d001      	beq.n	80142ce <remove_chain+0x88>
 80142ca:	7ffb      	ldrb	r3, [r7, #31]
 80142cc:	e01c      	b.n	8014308 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80142ce:	69bb      	ldr	r3, [r7, #24]
 80142d0:	695a      	ldr	r2, [r3, #20]
 80142d2:	69bb      	ldr	r3, [r7, #24]
 80142d4:	699b      	ldr	r3, [r3, #24]
 80142d6:	3b02      	subs	r3, #2
 80142d8:	429a      	cmp	r2, r3
 80142da:	d20b      	bcs.n	80142f4 <remove_chain+0xae>
			fs->free_clst++;
 80142dc:	69bb      	ldr	r3, [r7, #24]
 80142de:	695b      	ldr	r3, [r3, #20]
 80142e0:	1c5a      	adds	r2, r3, #1
 80142e2:	69bb      	ldr	r3, [r7, #24]
 80142e4:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80142e6:	69bb      	ldr	r3, [r7, #24]
 80142e8:	791b      	ldrb	r3, [r3, #4]
 80142ea:	f043 0301 	orr.w	r3, r3, #1
 80142ee:	b2da      	uxtb	r2, r3
 80142f0:	69bb      	ldr	r3, [r7, #24]
 80142f2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80142f4:	697b      	ldr	r3, [r7, #20]
 80142f6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80142f8:	69bb      	ldr	r3, [r7, #24]
 80142fa:	699b      	ldr	r3, [r3, #24]
 80142fc:	68ba      	ldr	r2, [r7, #8]
 80142fe:	429a      	cmp	r2, r3
 8014300:	d3c6      	bcc.n	8014290 <remove_chain+0x4a>
 8014302:	e000      	b.n	8014306 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8014304:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8014306:	2300      	movs	r3, #0
}
 8014308:	4618      	mov	r0, r3
 801430a:	3720      	adds	r7, #32
 801430c:	46bd      	mov	sp, r7
 801430e:	bd80      	pop	{r7, pc}

08014310 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8014310:	b580      	push	{r7, lr}
 8014312:	b088      	sub	sp, #32
 8014314:	af00      	add	r7, sp, #0
 8014316:	6078      	str	r0, [r7, #4]
 8014318:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	681b      	ldr	r3, [r3, #0]
 801431e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8014320:	683b      	ldr	r3, [r7, #0]
 8014322:	2b00      	cmp	r3, #0
 8014324:	d10d      	bne.n	8014342 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8014326:	693b      	ldr	r3, [r7, #16]
 8014328:	691b      	ldr	r3, [r3, #16]
 801432a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 801432c:	69bb      	ldr	r3, [r7, #24]
 801432e:	2b00      	cmp	r3, #0
 8014330:	d004      	beq.n	801433c <create_chain+0x2c>
 8014332:	693b      	ldr	r3, [r7, #16]
 8014334:	699b      	ldr	r3, [r3, #24]
 8014336:	69ba      	ldr	r2, [r7, #24]
 8014338:	429a      	cmp	r2, r3
 801433a:	d31b      	bcc.n	8014374 <create_chain+0x64>
 801433c:	2301      	movs	r3, #1
 801433e:	61bb      	str	r3, [r7, #24]
 8014340:	e018      	b.n	8014374 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8014342:	6839      	ldr	r1, [r7, #0]
 8014344:	6878      	ldr	r0, [r7, #4]
 8014346:	f7ff fdec 	bl	8013f22 <get_fat>
 801434a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 801434c:	68fb      	ldr	r3, [r7, #12]
 801434e:	2b01      	cmp	r3, #1
 8014350:	d801      	bhi.n	8014356 <create_chain+0x46>
 8014352:	2301      	movs	r3, #1
 8014354:	e070      	b.n	8014438 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8014356:	68fb      	ldr	r3, [r7, #12]
 8014358:	f1b3 3fff 	cmp.w	r3, #4294967295
 801435c:	d101      	bne.n	8014362 <create_chain+0x52>
 801435e:	68fb      	ldr	r3, [r7, #12]
 8014360:	e06a      	b.n	8014438 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8014362:	693b      	ldr	r3, [r7, #16]
 8014364:	699b      	ldr	r3, [r3, #24]
 8014366:	68fa      	ldr	r2, [r7, #12]
 8014368:	429a      	cmp	r2, r3
 801436a:	d201      	bcs.n	8014370 <create_chain+0x60>
 801436c:	68fb      	ldr	r3, [r7, #12]
 801436e:	e063      	b.n	8014438 <create_chain+0x128>
		scl = clst;
 8014370:	683b      	ldr	r3, [r7, #0]
 8014372:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8014374:	69bb      	ldr	r3, [r7, #24]
 8014376:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8014378:	69fb      	ldr	r3, [r7, #28]
 801437a:	3301      	adds	r3, #1
 801437c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 801437e:	693b      	ldr	r3, [r7, #16]
 8014380:	699b      	ldr	r3, [r3, #24]
 8014382:	69fa      	ldr	r2, [r7, #28]
 8014384:	429a      	cmp	r2, r3
 8014386:	d307      	bcc.n	8014398 <create_chain+0x88>
				ncl = 2;
 8014388:	2302      	movs	r3, #2
 801438a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 801438c:	69fa      	ldr	r2, [r7, #28]
 801438e:	69bb      	ldr	r3, [r7, #24]
 8014390:	429a      	cmp	r2, r3
 8014392:	d901      	bls.n	8014398 <create_chain+0x88>
 8014394:	2300      	movs	r3, #0
 8014396:	e04f      	b.n	8014438 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8014398:	69f9      	ldr	r1, [r7, #28]
 801439a:	6878      	ldr	r0, [r7, #4]
 801439c:	f7ff fdc1 	bl	8013f22 <get_fat>
 80143a0:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80143a2:	68fb      	ldr	r3, [r7, #12]
 80143a4:	2b00      	cmp	r3, #0
 80143a6:	d00e      	beq.n	80143c6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80143a8:	68fb      	ldr	r3, [r7, #12]
 80143aa:	2b01      	cmp	r3, #1
 80143ac:	d003      	beq.n	80143b6 <create_chain+0xa6>
 80143ae:	68fb      	ldr	r3, [r7, #12]
 80143b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80143b4:	d101      	bne.n	80143ba <create_chain+0xaa>
 80143b6:	68fb      	ldr	r3, [r7, #12]
 80143b8:	e03e      	b.n	8014438 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80143ba:	69fa      	ldr	r2, [r7, #28]
 80143bc:	69bb      	ldr	r3, [r7, #24]
 80143be:	429a      	cmp	r2, r3
 80143c0:	d1da      	bne.n	8014378 <create_chain+0x68>
 80143c2:	2300      	movs	r3, #0
 80143c4:	e038      	b.n	8014438 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80143c6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80143c8:	f04f 32ff 	mov.w	r2, #4294967295
 80143cc:	69f9      	ldr	r1, [r7, #28]
 80143ce:	6938      	ldr	r0, [r7, #16]
 80143d0:	f7ff fe4f 	bl	8014072 <put_fat>
 80143d4:	4603      	mov	r3, r0
 80143d6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80143d8:	7dfb      	ldrb	r3, [r7, #23]
 80143da:	2b00      	cmp	r3, #0
 80143dc:	d109      	bne.n	80143f2 <create_chain+0xe2>
 80143de:	683b      	ldr	r3, [r7, #0]
 80143e0:	2b00      	cmp	r3, #0
 80143e2:	d006      	beq.n	80143f2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80143e4:	69fa      	ldr	r2, [r7, #28]
 80143e6:	6839      	ldr	r1, [r7, #0]
 80143e8:	6938      	ldr	r0, [r7, #16]
 80143ea:	f7ff fe42 	bl	8014072 <put_fat>
 80143ee:	4603      	mov	r3, r0
 80143f0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80143f2:	7dfb      	ldrb	r3, [r7, #23]
 80143f4:	2b00      	cmp	r3, #0
 80143f6:	d116      	bne.n	8014426 <create_chain+0x116>
		fs->last_clst = ncl;
 80143f8:	693b      	ldr	r3, [r7, #16]
 80143fa:	69fa      	ldr	r2, [r7, #28]
 80143fc:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80143fe:	693b      	ldr	r3, [r7, #16]
 8014400:	695a      	ldr	r2, [r3, #20]
 8014402:	693b      	ldr	r3, [r7, #16]
 8014404:	699b      	ldr	r3, [r3, #24]
 8014406:	3b02      	subs	r3, #2
 8014408:	429a      	cmp	r2, r3
 801440a:	d804      	bhi.n	8014416 <create_chain+0x106>
 801440c:	693b      	ldr	r3, [r7, #16]
 801440e:	695b      	ldr	r3, [r3, #20]
 8014410:	1e5a      	subs	r2, r3, #1
 8014412:	693b      	ldr	r3, [r7, #16]
 8014414:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8014416:	693b      	ldr	r3, [r7, #16]
 8014418:	791b      	ldrb	r3, [r3, #4]
 801441a:	f043 0301 	orr.w	r3, r3, #1
 801441e:	b2da      	uxtb	r2, r3
 8014420:	693b      	ldr	r3, [r7, #16]
 8014422:	711a      	strb	r2, [r3, #4]
 8014424:	e007      	b.n	8014436 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8014426:	7dfb      	ldrb	r3, [r7, #23]
 8014428:	2b01      	cmp	r3, #1
 801442a:	d102      	bne.n	8014432 <create_chain+0x122>
 801442c:	f04f 33ff 	mov.w	r3, #4294967295
 8014430:	e000      	b.n	8014434 <create_chain+0x124>
 8014432:	2301      	movs	r3, #1
 8014434:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8014436:	69fb      	ldr	r3, [r7, #28]
}
 8014438:	4618      	mov	r0, r3
 801443a:	3720      	adds	r7, #32
 801443c:	46bd      	mov	sp, r7
 801443e:	bd80      	pop	{r7, pc}

08014440 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8014440:	b480      	push	{r7}
 8014442:	b087      	sub	sp, #28
 8014444:	af00      	add	r7, sp, #0
 8014446:	6078      	str	r0, [r7, #4]
 8014448:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 801444a:	687b      	ldr	r3, [r7, #4]
 801444c:	681b      	ldr	r3, [r3, #0]
 801444e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8014450:	687b      	ldr	r3, [r7, #4]
 8014452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014454:	3304      	adds	r3, #4
 8014456:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8014458:	683b      	ldr	r3, [r7, #0]
 801445a:	0a5b      	lsrs	r3, r3, #9
 801445c:	68fa      	ldr	r2, [r7, #12]
 801445e:	8952      	ldrh	r2, [r2, #10]
 8014460:	fbb3 f3f2 	udiv	r3, r3, r2
 8014464:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8014466:	693b      	ldr	r3, [r7, #16]
 8014468:	1d1a      	adds	r2, r3, #4
 801446a:	613a      	str	r2, [r7, #16]
 801446c:	681b      	ldr	r3, [r3, #0]
 801446e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8014470:	68bb      	ldr	r3, [r7, #8]
 8014472:	2b00      	cmp	r3, #0
 8014474:	d101      	bne.n	801447a <clmt_clust+0x3a>
 8014476:	2300      	movs	r3, #0
 8014478:	e010      	b.n	801449c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 801447a:	697a      	ldr	r2, [r7, #20]
 801447c:	68bb      	ldr	r3, [r7, #8]
 801447e:	429a      	cmp	r2, r3
 8014480:	d307      	bcc.n	8014492 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8014482:	697a      	ldr	r2, [r7, #20]
 8014484:	68bb      	ldr	r3, [r7, #8]
 8014486:	1ad3      	subs	r3, r2, r3
 8014488:	617b      	str	r3, [r7, #20]
 801448a:	693b      	ldr	r3, [r7, #16]
 801448c:	3304      	adds	r3, #4
 801448e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8014490:	e7e9      	b.n	8014466 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8014492:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8014494:	693b      	ldr	r3, [r7, #16]
 8014496:	681a      	ldr	r2, [r3, #0]
 8014498:	697b      	ldr	r3, [r7, #20]
 801449a:	4413      	add	r3, r2
}
 801449c:	4618      	mov	r0, r3
 801449e:	371c      	adds	r7, #28
 80144a0:	46bd      	mov	sp, r7
 80144a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144a6:	4770      	bx	lr

080144a8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80144a8:	b580      	push	{r7, lr}
 80144aa:	b086      	sub	sp, #24
 80144ac:	af00      	add	r7, sp, #0
 80144ae:	6078      	str	r0, [r7, #4]
 80144b0:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80144b2:	687b      	ldr	r3, [r7, #4]
 80144b4:	681b      	ldr	r3, [r3, #0]
 80144b6:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80144b8:	683b      	ldr	r3, [r7, #0]
 80144ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80144be:	d204      	bcs.n	80144ca <dir_sdi+0x22>
 80144c0:	683b      	ldr	r3, [r7, #0]
 80144c2:	f003 031f 	and.w	r3, r3, #31
 80144c6:	2b00      	cmp	r3, #0
 80144c8:	d001      	beq.n	80144ce <dir_sdi+0x26>
		return FR_INT_ERR;
 80144ca:	2302      	movs	r3, #2
 80144cc:	e063      	b.n	8014596 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80144ce:	687b      	ldr	r3, [r7, #4]
 80144d0:	683a      	ldr	r2, [r7, #0]
 80144d2:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80144d4:	687b      	ldr	r3, [r7, #4]
 80144d6:	689b      	ldr	r3, [r3, #8]
 80144d8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80144da:	697b      	ldr	r3, [r7, #20]
 80144dc:	2b00      	cmp	r3, #0
 80144de:	d106      	bne.n	80144ee <dir_sdi+0x46>
 80144e0:	693b      	ldr	r3, [r7, #16]
 80144e2:	781b      	ldrb	r3, [r3, #0]
 80144e4:	2b02      	cmp	r3, #2
 80144e6:	d902      	bls.n	80144ee <dir_sdi+0x46>
		clst = fs->dirbase;
 80144e8:	693b      	ldr	r3, [r7, #16]
 80144ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80144ec:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80144ee:	697b      	ldr	r3, [r7, #20]
 80144f0:	2b00      	cmp	r3, #0
 80144f2:	d10c      	bne.n	801450e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80144f4:	683b      	ldr	r3, [r7, #0]
 80144f6:	095b      	lsrs	r3, r3, #5
 80144f8:	693a      	ldr	r2, [r7, #16]
 80144fa:	8912      	ldrh	r2, [r2, #8]
 80144fc:	4293      	cmp	r3, r2
 80144fe:	d301      	bcc.n	8014504 <dir_sdi+0x5c>
 8014500:	2302      	movs	r3, #2
 8014502:	e048      	b.n	8014596 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8014504:	693b      	ldr	r3, [r7, #16]
 8014506:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014508:	687b      	ldr	r3, [r7, #4]
 801450a:	61da      	str	r2, [r3, #28]
 801450c:	e029      	b.n	8014562 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801450e:	693b      	ldr	r3, [r7, #16]
 8014510:	895b      	ldrh	r3, [r3, #10]
 8014512:	025b      	lsls	r3, r3, #9
 8014514:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8014516:	e019      	b.n	801454c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8014518:	687b      	ldr	r3, [r7, #4]
 801451a:	6979      	ldr	r1, [r7, #20]
 801451c:	4618      	mov	r0, r3
 801451e:	f7ff fd00 	bl	8013f22 <get_fat>
 8014522:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8014524:	697b      	ldr	r3, [r7, #20]
 8014526:	f1b3 3fff 	cmp.w	r3, #4294967295
 801452a:	d101      	bne.n	8014530 <dir_sdi+0x88>
 801452c:	2301      	movs	r3, #1
 801452e:	e032      	b.n	8014596 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8014530:	697b      	ldr	r3, [r7, #20]
 8014532:	2b01      	cmp	r3, #1
 8014534:	d904      	bls.n	8014540 <dir_sdi+0x98>
 8014536:	693b      	ldr	r3, [r7, #16]
 8014538:	699b      	ldr	r3, [r3, #24]
 801453a:	697a      	ldr	r2, [r7, #20]
 801453c:	429a      	cmp	r2, r3
 801453e:	d301      	bcc.n	8014544 <dir_sdi+0x9c>
 8014540:	2302      	movs	r3, #2
 8014542:	e028      	b.n	8014596 <dir_sdi+0xee>
			ofs -= csz;
 8014544:	683a      	ldr	r2, [r7, #0]
 8014546:	68fb      	ldr	r3, [r7, #12]
 8014548:	1ad3      	subs	r3, r2, r3
 801454a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 801454c:	683a      	ldr	r2, [r7, #0]
 801454e:	68fb      	ldr	r3, [r7, #12]
 8014550:	429a      	cmp	r2, r3
 8014552:	d2e1      	bcs.n	8014518 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8014554:	6979      	ldr	r1, [r7, #20]
 8014556:	6938      	ldr	r0, [r7, #16]
 8014558:	f7ff fcc4 	bl	8013ee4 <clust2sect>
 801455c:	4602      	mov	r2, r0
 801455e:	687b      	ldr	r3, [r7, #4]
 8014560:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8014562:	687b      	ldr	r3, [r7, #4]
 8014564:	697a      	ldr	r2, [r7, #20]
 8014566:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8014568:	687b      	ldr	r3, [r7, #4]
 801456a:	69db      	ldr	r3, [r3, #28]
 801456c:	2b00      	cmp	r3, #0
 801456e:	d101      	bne.n	8014574 <dir_sdi+0xcc>
 8014570:	2302      	movs	r3, #2
 8014572:	e010      	b.n	8014596 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8014574:	687b      	ldr	r3, [r7, #4]
 8014576:	69da      	ldr	r2, [r3, #28]
 8014578:	683b      	ldr	r3, [r7, #0]
 801457a:	0a5b      	lsrs	r3, r3, #9
 801457c:	441a      	add	r2, r3
 801457e:	687b      	ldr	r3, [r7, #4]
 8014580:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8014582:	693b      	ldr	r3, [r7, #16]
 8014584:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8014588:	683b      	ldr	r3, [r7, #0]
 801458a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801458e:	441a      	add	r2, r3
 8014590:	687b      	ldr	r3, [r7, #4]
 8014592:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8014594:	2300      	movs	r3, #0
}
 8014596:	4618      	mov	r0, r3
 8014598:	3718      	adds	r7, #24
 801459a:	46bd      	mov	sp, r7
 801459c:	bd80      	pop	{r7, pc}

0801459e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801459e:	b580      	push	{r7, lr}
 80145a0:	b086      	sub	sp, #24
 80145a2:	af00      	add	r7, sp, #0
 80145a4:	6078      	str	r0, [r7, #4]
 80145a6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80145a8:	687b      	ldr	r3, [r7, #4]
 80145aa:	681b      	ldr	r3, [r3, #0]
 80145ac:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80145ae:	687b      	ldr	r3, [r7, #4]
 80145b0:	695b      	ldr	r3, [r3, #20]
 80145b2:	3320      	adds	r3, #32
 80145b4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80145b6:	687b      	ldr	r3, [r7, #4]
 80145b8:	69db      	ldr	r3, [r3, #28]
 80145ba:	2b00      	cmp	r3, #0
 80145bc:	d003      	beq.n	80145c6 <dir_next+0x28>
 80145be:	68bb      	ldr	r3, [r7, #8]
 80145c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80145c4:	d301      	bcc.n	80145ca <dir_next+0x2c>
 80145c6:	2304      	movs	r3, #4
 80145c8:	e0aa      	b.n	8014720 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80145ca:	68bb      	ldr	r3, [r7, #8]
 80145cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80145d0:	2b00      	cmp	r3, #0
 80145d2:	f040 8098 	bne.w	8014706 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80145d6:	687b      	ldr	r3, [r7, #4]
 80145d8:	69db      	ldr	r3, [r3, #28]
 80145da:	1c5a      	adds	r2, r3, #1
 80145dc:	687b      	ldr	r3, [r7, #4]
 80145de:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80145e0:	687b      	ldr	r3, [r7, #4]
 80145e2:	699b      	ldr	r3, [r3, #24]
 80145e4:	2b00      	cmp	r3, #0
 80145e6:	d10b      	bne.n	8014600 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80145e8:	68bb      	ldr	r3, [r7, #8]
 80145ea:	095b      	lsrs	r3, r3, #5
 80145ec:	68fa      	ldr	r2, [r7, #12]
 80145ee:	8912      	ldrh	r2, [r2, #8]
 80145f0:	4293      	cmp	r3, r2
 80145f2:	f0c0 8088 	bcc.w	8014706 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80145f6:	687b      	ldr	r3, [r7, #4]
 80145f8:	2200      	movs	r2, #0
 80145fa:	61da      	str	r2, [r3, #28]
 80145fc:	2304      	movs	r3, #4
 80145fe:	e08f      	b.n	8014720 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8014600:	68bb      	ldr	r3, [r7, #8]
 8014602:	0a5b      	lsrs	r3, r3, #9
 8014604:	68fa      	ldr	r2, [r7, #12]
 8014606:	8952      	ldrh	r2, [r2, #10]
 8014608:	3a01      	subs	r2, #1
 801460a:	4013      	ands	r3, r2
 801460c:	2b00      	cmp	r3, #0
 801460e:	d17a      	bne.n	8014706 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8014610:	687a      	ldr	r2, [r7, #4]
 8014612:	687b      	ldr	r3, [r7, #4]
 8014614:	699b      	ldr	r3, [r3, #24]
 8014616:	4619      	mov	r1, r3
 8014618:	4610      	mov	r0, r2
 801461a:	f7ff fc82 	bl	8013f22 <get_fat>
 801461e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8014620:	697b      	ldr	r3, [r7, #20]
 8014622:	2b01      	cmp	r3, #1
 8014624:	d801      	bhi.n	801462a <dir_next+0x8c>
 8014626:	2302      	movs	r3, #2
 8014628:	e07a      	b.n	8014720 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801462a:	697b      	ldr	r3, [r7, #20]
 801462c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014630:	d101      	bne.n	8014636 <dir_next+0x98>
 8014632:	2301      	movs	r3, #1
 8014634:	e074      	b.n	8014720 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8014636:	68fb      	ldr	r3, [r7, #12]
 8014638:	699b      	ldr	r3, [r3, #24]
 801463a:	697a      	ldr	r2, [r7, #20]
 801463c:	429a      	cmp	r2, r3
 801463e:	d358      	bcc.n	80146f2 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8014640:	683b      	ldr	r3, [r7, #0]
 8014642:	2b00      	cmp	r3, #0
 8014644:	d104      	bne.n	8014650 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8014646:	687b      	ldr	r3, [r7, #4]
 8014648:	2200      	movs	r2, #0
 801464a:	61da      	str	r2, [r3, #28]
 801464c:	2304      	movs	r3, #4
 801464e:	e067      	b.n	8014720 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8014650:	687a      	ldr	r2, [r7, #4]
 8014652:	687b      	ldr	r3, [r7, #4]
 8014654:	699b      	ldr	r3, [r3, #24]
 8014656:	4619      	mov	r1, r3
 8014658:	4610      	mov	r0, r2
 801465a:	f7ff fe59 	bl	8014310 <create_chain>
 801465e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8014660:	697b      	ldr	r3, [r7, #20]
 8014662:	2b00      	cmp	r3, #0
 8014664:	d101      	bne.n	801466a <dir_next+0xcc>
 8014666:	2307      	movs	r3, #7
 8014668:	e05a      	b.n	8014720 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801466a:	697b      	ldr	r3, [r7, #20]
 801466c:	2b01      	cmp	r3, #1
 801466e:	d101      	bne.n	8014674 <dir_next+0xd6>
 8014670:	2302      	movs	r3, #2
 8014672:	e055      	b.n	8014720 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8014674:	697b      	ldr	r3, [r7, #20]
 8014676:	f1b3 3fff 	cmp.w	r3, #4294967295
 801467a:	d101      	bne.n	8014680 <dir_next+0xe2>
 801467c:	2301      	movs	r3, #1
 801467e:	e04f      	b.n	8014720 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8014680:	68f8      	ldr	r0, [r7, #12]
 8014682:	f7ff fb4f 	bl	8013d24 <sync_window>
 8014686:	4603      	mov	r3, r0
 8014688:	2b00      	cmp	r3, #0
 801468a:	d001      	beq.n	8014690 <dir_next+0xf2>
 801468c:	2301      	movs	r3, #1
 801468e:	e047      	b.n	8014720 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8014690:	68fb      	ldr	r3, [r7, #12]
 8014692:	3334      	adds	r3, #52	; 0x34
 8014694:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014698:	2100      	movs	r1, #0
 801469a:	4618      	mov	r0, r3
 801469c:	f7ff f947 	bl	801392e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80146a0:	2300      	movs	r3, #0
 80146a2:	613b      	str	r3, [r7, #16]
 80146a4:	6979      	ldr	r1, [r7, #20]
 80146a6:	68f8      	ldr	r0, [r7, #12]
 80146a8:	f7ff fc1c 	bl	8013ee4 <clust2sect>
 80146ac:	4602      	mov	r2, r0
 80146ae:	68fb      	ldr	r3, [r7, #12]
 80146b0:	631a      	str	r2, [r3, #48]	; 0x30
 80146b2:	e012      	b.n	80146da <dir_next+0x13c>
						fs->wflag = 1;
 80146b4:	68fb      	ldr	r3, [r7, #12]
 80146b6:	2201      	movs	r2, #1
 80146b8:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80146ba:	68f8      	ldr	r0, [r7, #12]
 80146bc:	f7ff fb32 	bl	8013d24 <sync_window>
 80146c0:	4603      	mov	r3, r0
 80146c2:	2b00      	cmp	r3, #0
 80146c4:	d001      	beq.n	80146ca <dir_next+0x12c>
 80146c6:	2301      	movs	r3, #1
 80146c8:	e02a      	b.n	8014720 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80146ca:	693b      	ldr	r3, [r7, #16]
 80146cc:	3301      	adds	r3, #1
 80146ce:	613b      	str	r3, [r7, #16]
 80146d0:	68fb      	ldr	r3, [r7, #12]
 80146d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80146d4:	1c5a      	adds	r2, r3, #1
 80146d6:	68fb      	ldr	r3, [r7, #12]
 80146d8:	631a      	str	r2, [r3, #48]	; 0x30
 80146da:	68fb      	ldr	r3, [r7, #12]
 80146dc:	895b      	ldrh	r3, [r3, #10]
 80146de:	461a      	mov	r2, r3
 80146e0:	693b      	ldr	r3, [r7, #16]
 80146e2:	4293      	cmp	r3, r2
 80146e4:	d3e6      	bcc.n	80146b4 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80146e6:	68fb      	ldr	r3, [r7, #12]
 80146e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80146ea:	693b      	ldr	r3, [r7, #16]
 80146ec:	1ad2      	subs	r2, r2, r3
 80146ee:	68fb      	ldr	r3, [r7, #12]
 80146f0:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80146f2:	687b      	ldr	r3, [r7, #4]
 80146f4:	697a      	ldr	r2, [r7, #20]
 80146f6:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80146f8:	6979      	ldr	r1, [r7, #20]
 80146fa:	68f8      	ldr	r0, [r7, #12]
 80146fc:	f7ff fbf2 	bl	8013ee4 <clust2sect>
 8014700:	4602      	mov	r2, r0
 8014702:	687b      	ldr	r3, [r7, #4]
 8014704:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8014706:	687b      	ldr	r3, [r7, #4]
 8014708:	68ba      	ldr	r2, [r7, #8]
 801470a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801470c:	68fb      	ldr	r3, [r7, #12]
 801470e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8014712:	68bb      	ldr	r3, [r7, #8]
 8014714:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014718:	441a      	add	r2, r3
 801471a:	687b      	ldr	r3, [r7, #4]
 801471c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801471e:	2300      	movs	r3, #0
}
 8014720:	4618      	mov	r0, r3
 8014722:	3718      	adds	r7, #24
 8014724:	46bd      	mov	sp, r7
 8014726:	bd80      	pop	{r7, pc}

08014728 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8014728:	b580      	push	{r7, lr}
 801472a:	b086      	sub	sp, #24
 801472c:	af00      	add	r7, sp, #0
 801472e:	6078      	str	r0, [r7, #4]
 8014730:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8014732:	687b      	ldr	r3, [r7, #4]
 8014734:	681b      	ldr	r3, [r3, #0]
 8014736:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8014738:	2100      	movs	r1, #0
 801473a:	6878      	ldr	r0, [r7, #4]
 801473c:	f7ff feb4 	bl	80144a8 <dir_sdi>
 8014740:	4603      	mov	r3, r0
 8014742:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8014744:	7dfb      	ldrb	r3, [r7, #23]
 8014746:	2b00      	cmp	r3, #0
 8014748:	d12b      	bne.n	80147a2 <dir_alloc+0x7a>
		n = 0;
 801474a:	2300      	movs	r3, #0
 801474c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801474e:	687b      	ldr	r3, [r7, #4]
 8014750:	69db      	ldr	r3, [r3, #28]
 8014752:	4619      	mov	r1, r3
 8014754:	68f8      	ldr	r0, [r7, #12]
 8014756:	f7ff fb29 	bl	8013dac <move_window>
 801475a:	4603      	mov	r3, r0
 801475c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801475e:	7dfb      	ldrb	r3, [r7, #23]
 8014760:	2b00      	cmp	r3, #0
 8014762:	d11d      	bne.n	80147a0 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8014764:	687b      	ldr	r3, [r7, #4]
 8014766:	6a1b      	ldr	r3, [r3, #32]
 8014768:	781b      	ldrb	r3, [r3, #0]
 801476a:	2be5      	cmp	r3, #229	; 0xe5
 801476c:	d004      	beq.n	8014778 <dir_alloc+0x50>
 801476e:	687b      	ldr	r3, [r7, #4]
 8014770:	6a1b      	ldr	r3, [r3, #32]
 8014772:	781b      	ldrb	r3, [r3, #0]
 8014774:	2b00      	cmp	r3, #0
 8014776:	d107      	bne.n	8014788 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8014778:	693b      	ldr	r3, [r7, #16]
 801477a:	3301      	adds	r3, #1
 801477c:	613b      	str	r3, [r7, #16]
 801477e:	693a      	ldr	r2, [r7, #16]
 8014780:	683b      	ldr	r3, [r7, #0]
 8014782:	429a      	cmp	r2, r3
 8014784:	d102      	bne.n	801478c <dir_alloc+0x64>
 8014786:	e00c      	b.n	80147a2 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8014788:	2300      	movs	r3, #0
 801478a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801478c:	2101      	movs	r1, #1
 801478e:	6878      	ldr	r0, [r7, #4]
 8014790:	f7ff ff05 	bl	801459e <dir_next>
 8014794:	4603      	mov	r3, r0
 8014796:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8014798:	7dfb      	ldrb	r3, [r7, #23]
 801479a:	2b00      	cmp	r3, #0
 801479c:	d0d7      	beq.n	801474e <dir_alloc+0x26>
 801479e:	e000      	b.n	80147a2 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80147a0:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80147a2:	7dfb      	ldrb	r3, [r7, #23]
 80147a4:	2b04      	cmp	r3, #4
 80147a6:	d101      	bne.n	80147ac <dir_alloc+0x84>
 80147a8:	2307      	movs	r3, #7
 80147aa:	75fb      	strb	r3, [r7, #23]
	return res;
 80147ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80147ae:	4618      	mov	r0, r3
 80147b0:	3718      	adds	r7, #24
 80147b2:	46bd      	mov	sp, r7
 80147b4:	bd80      	pop	{r7, pc}

080147b6 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80147b6:	b580      	push	{r7, lr}
 80147b8:	b084      	sub	sp, #16
 80147ba:	af00      	add	r7, sp, #0
 80147bc:	6078      	str	r0, [r7, #4]
 80147be:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80147c0:	683b      	ldr	r3, [r7, #0]
 80147c2:	331a      	adds	r3, #26
 80147c4:	4618      	mov	r0, r3
 80147c6:	f7ff f80f 	bl	80137e8 <ld_word>
 80147ca:	4603      	mov	r3, r0
 80147cc:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80147ce:	687b      	ldr	r3, [r7, #4]
 80147d0:	781b      	ldrb	r3, [r3, #0]
 80147d2:	2b03      	cmp	r3, #3
 80147d4:	d109      	bne.n	80147ea <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80147d6:	683b      	ldr	r3, [r7, #0]
 80147d8:	3314      	adds	r3, #20
 80147da:	4618      	mov	r0, r3
 80147dc:	f7ff f804 	bl	80137e8 <ld_word>
 80147e0:	4603      	mov	r3, r0
 80147e2:	041b      	lsls	r3, r3, #16
 80147e4:	68fa      	ldr	r2, [r7, #12]
 80147e6:	4313      	orrs	r3, r2
 80147e8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80147ea:	68fb      	ldr	r3, [r7, #12]
}
 80147ec:	4618      	mov	r0, r3
 80147ee:	3710      	adds	r7, #16
 80147f0:	46bd      	mov	sp, r7
 80147f2:	bd80      	pop	{r7, pc}

080147f4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80147f4:	b580      	push	{r7, lr}
 80147f6:	b084      	sub	sp, #16
 80147f8:	af00      	add	r7, sp, #0
 80147fa:	60f8      	str	r0, [r7, #12]
 80147fc:	60b9      	str	r1, [r7, #8]
 80147fe:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8014800:	68bb      	ldr	r3, [r7, #8]
 8014802:	331a      	adds	r3, #26
 8014804:	687a      	ldr	r2, [r7, #4]
 8014806:	b292      	uxth	r2, r2
 8014808:	4611      	mov	r1, r2
 801480a:	4618      	mov	r0, r3
 801480c:	f7ff f827 	bl	801385e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8014810:	68fb      	ldr	r3, [r7, #12]
 8014812:	781b      	ldrb	r3, [r3, #0]
 8014814:	2b03      	cmp	r3, #3
 8014816:	d109      	bne.n	801482c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8014818:	68bb      	ldr	r3, [r7, #8]
 801481a:	f103 0214 	add.w	r2, r3, #20
 801481e:	687b      	ldr	r3, [r7, #4]
 8014820:	0c1b      	lsrs	r3, r3, #16
 8014822:	b29b      	uxth	r3, r3
 8014824:	4619      	mov	r1, r3
 8014826:	4610      	mov	r0, r2
 8014828:	f7ff f819 	bl	801385e <st_word>
	}
}
 801482c:	bf00      	nop
 801482e:	3710      	adds	r7, #16
 8014830:	46bd      	mov	sp, r7
 8014832:	bd80      	pop	{r7, pc}

08014834 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8014834:	b580      	push	{r7, lr}
 8014836:	b086      	sub	sp, #24
 8014838:	af00      	add	r7, sp, #0
 801483a:	6078      	str	r0, [r7, #4]
 801483c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 801483e:	2304      	movs	r3, #4
 8014840:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8014842:	687b      	ldr	r3, [r7, #4]
 8014844:	681b      	ldr	r3, [r3, #0]
 8014846:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8014848:	e03c      	b.n	80148c4 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 801484a:	687b      	ldr	r3, [r7, #4]
 801484c:	69db      	ldr	r3, [r3, #28]
 801484e:	4619      	mov	r1, r3
 8014850:	6938      	ldr	r0, [r7, #16]
 8014852:	f7ff faab 	bl	8013dac <move_window>
 8014856:	4603      	mov	r3, r0
 8014858:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801485a:	7dfb      	ldrb	r3, [r7, #23]
 801485c:	2b00      	cmp	r3, #0
 801485e:	d136      	bne.n	80148ce <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8014860:	687b      	ldr	r3, [r7, #4]
 8014862:	6a1b      	ldr	r3, [r3, #32]
 8014864:	781b      	ldrb	r3, [r3, #0]
 8014866:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8014868:	7bfb      	ldrb	r3, [r7, #15]
 801486a:	2b00      	cmp	r3, #0
 801486c:	d102      	bne.n	8014874 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 801486e:	2304      	movs	r3, #4
 8014870:	75fb      	strb	r3, [r7, #23]
 8014872:	e031      	b.n	80148d8 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8014874:	687b      	ldr	r3, [r7, #4]
 8014876:	6a1b      	ldr	r3, [r3, #32]
 8014878:	330b      	adds	r3, #11
 801487a:	781b      	ldrb	r3, [r3, #0]
 801487c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014880:	73bb      	strb	r3, [r7, #14]
 8014882:	687b      	ldr	r3, [r7, #4]
 8014884:	7bba      	ldrb	r2, [r7, #14]
 8014886:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8014888:	7bfb      	ldrb	r3, [r7, #15]
 801488a:	2be5      	cmp	r3, #229	; 0xe5
 801488c:	d011      	beq.n	80148b2 <dir_read+0x7e>
 801488e:	7bfb      	ldrb	r3, [r7, #15]
 8014890:	2b2e      	cmp	r3, #46	; 0x2e
 8014892:	d00e      	beq.n	80148b2 <dir_read+0x7e>
 8014894:	7bbb      	ldrb	r3, [r7, #14]
 8014896:	2b0f      	cmp	r3, #15
 8014898:	d00b      	beq.n	80148b2 <dir_read+0x7e>
 801489a:	7bbb      	ldrb	r3, [r7, #14]
 801489c:	f023 0320 	bic.w	r3, r3, #32
 80148a0:	2b08      	cmp	r3, #8
 80148a2:	bf0c      	ite	eq
 80148a4:	2301      	moveq	r3, #1
 80148a6:	2300      	movne	r3, #0
 80148a8:	b2db      	uxtb	r3, r3
 80148aa:	461a      	mov	r2, r3
 80148ac:	683b      	ldr	r3, [r7, #0]
 80148ae:	4293      	cmp	r3, r2
 80148b0:	d00f      	beq.n	80148d2 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80148b2:	2100      	movs	r1, #0
 80148b4:	6878      	ldr	r0, [r7, #4]
 80148b6:	f7ff fe72 	bl	801459e <dir_next>
 80148ba:	4603      	mov	r3, r0
 80148bc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80148be:	7dfb      	ldrb	r3, [r7, #23]
 80148c0:	2b00      	cmp	r3, #0
 80148c2:	d108      	bne.n	80148d6 <dir_read+0xa2>
	while (dp->sect) {
 80148c4:	687b      	ldr	r3, [r7, #4]
 80148c6:	69db      	ldr	r3, [r3, #28]
 80148c8:	2b00      	cmp	r3, #0
 80148ca:	d1be      	bne.n	801484a <dir_read+0x16>
 80148cc:	e004      	b.n	80148d8 <dir_read+0xa4>
		if (res != FR_OK) break;
 80148ce:	bf00      	nop
 80148d0:	e002      	b.n	80148d8 <dir_read+0xa4>
				break;
 80148d2:	bf00      	nop
 80148d4:	e000      	b.n	80148d8 <dir_read+0xa4>
		if (res != FR_OK) break;
 80148d6:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80148d8:	7dfb      	ldrb	r3, [r7, #23]
 80148da:	2b00      	cmp	r3, #0
 80148dc:	d002      	beq.n	80148e4 <dir_read+0xb0>
 80148de:	687b      	ldr	r3, [r7, #4]
 80148e0:	2200      	movs	r2, #0
 80148e2:	61da      	str	r2, [r3, #28]
	return res;
 80148e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80148e6:	4618      	mov	r0, r3
 80148e8:	3718      	adds	r7, #24
 80148ea:	46bd      	mov	sp, r7
 80148ec:	bd80      	pop	{r7, pc}

080148ee <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80148ee:	b580      	push	{r7, lr}
 80148f0:	b086      	sub	sp, #24
 80148f2:	af00      	add	r7, sp, #0
 80148f4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80148f6:	687b      	ldr	r3, [r7, #4]
 80148f8:	681b      	ldr	r3, [r3, #0]
 80148fa:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80148fc:	2100      	movs	r1, #0
 80148fe:	6878      	ldr	r0, [r7, #4]
 8014900:	f7ff fdd2 	bl	80144a8 <dir_sdi>
 8014904:	4603      	mov	r3, r0
 8014906:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8014908:	7dfb      	ldrb	r3, [r7, #23]
 801490a:	2b00      	cmp	r3, #0
 801490c:	d001      	beq.n	8014912 <dir_find+0x24>
 801490e:	7dfb      	ldrb	r3, [r7, #23]
 8014910:	e03e      	b.n	8014990 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8014912:	687b      	ldr	r3, [r7, #4]
 8014914:	69db      	ldr	r3, [r3, #28]
 8014916:	4619      	mov	r1, r3
 8014918:	6938      	ldr	r0, [r7, #16]
 801491a:	f7ff fa47 	bl	8013dac <move_window>
 801491e:	4603      	mov	r3, r0
 8014920:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8014922:	7dfb      	ldrb	r3, [r7, #23]
 8014924:	2b00      	cmp	r3, #0
 8014926:	d12f      	bne.n	8014988 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8014928:	687b      	ldr	r3, [r7, #4]
 801492a:	6a1b      	ldr	r3, [r3, #32]
 801492c:	781b      	ldrb	r3, [r3, #0]
 801492e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8014930:	7bfb      	ldrb	r3, [r7, #15]
 8014932:	2b00      	cmp	r3, #0
 8014934:	d102      	bne.n	801493c <dir_find+0x4e>
 8014936:	2304      	movs	r3, #4
 8014938:	75fb      	strb	r3, [r7, #23]
 801493a:	e028      	b.n	801498e <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 801493c:	687b      	ldr	r3, [r7, #4]
 801493e:	6a1b      	ldr	r3, [r3, #32]
 8014940:	330b      	adds	r3, #11
 8014942:	781b      	ldrb	r3, [r3, #0]
 8014944:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014948:	b2da      	uxtb	r2, r3
 801494a:	687b      	ldr	r3, [r7, #4]
 801494c:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801494e:	687b      	ldr	r3, [r7, #4]
 8014950:	6a1b      	ldr	r3, [r3, #32]
 8014952:	330b      	adds	r3, #11
 8014954:	781b      	ldrb	r3, [r3, #0]
 8014956:	f003 0308 	and.w	r3, r3, #8
 801495a:	2b00      	cmp	r3, #0
 801495c:	d10a      	bne.n	8014974 <dir_find+0x86>
 801495e:	687b      	ldr	r3, [r7, #4]
 8014960:	6a18      	ldr	r0, [r3, #32]
 8014962:	687b      	ldr	r3, [r7, #4]
 8014964:	3324      	adds	r3, #36	; 0x24
 8014966:	220b      	movs	r2, #11
 8014968:	4619      	mov	r1, r3
 801496a:	f7fe fffb 	bl	8013964 <mem_cmp>
 801496e:	4603      	mov	r3, r0
 8014970:	2b00      	cmp	r3, #0
 8014972:	d00b      	beq.n	801498c <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8014974:	2100      	movs	r1, #0
 8014976:	6878      	ldr	r0, [r7, #4]
 8014978:	f7ff fe11 	bl	801459e <dir_next>
 801497c:	4603      	mov	r3, r0
 801497e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8014980:	7dfb      	ldrb	r3, [r7, #23]
 8014982:	2b00      	cmp	r3, #0
 8014984:	d0c5      	beq.n	8014912 <dir_find+0x24>
 8014986:	e002      	b.n	801498e <dir_find+0xa0>
		if (res != FR_OK) break;
 8014988:	bf00      	nop
 801498a:	e000      	b.n	801498e <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801498c:	bf00      	nop

	return res;
 801498e:	7dfb      	ldrb	r3, [r7, #23]
}
 8014990:	4618      	mov	r0, r3
 8014992:	3718      	adds	r7, #24
 8014994:	46bd      	mov	sp, r7
 8014996:	bd80      	pop	{r7, pc}

08014998 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8014998:	b580      	push	{r7, lr}
 801499a:	b084      	sub	sp, #16
 801499c:	af00      	add	r7, sp, #0
 801499e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80149a0:	687b      	ldr	r3, [r7, #4]
 80149a2:	681b      	ldr	r3, [r3, #0]
 80149a4:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80149a6:	2101      	movs	r1, #1
 80149a8:	6878      	ldr	r0, [r7, #4]
 80149aa:	f7ff febd 	bl	8014728 <dir_alloc>
 80149ae:	4603      	mov	r3, r0
 80149b0:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80149b2:	7bfb      	ldrb	r3, [r7, #15]
 80149b4:	2b00      	cmp	r3, #0
 80149b6:	d11c      	bne.n	80149f2 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80149b8:	687b      	ldr	r3, [r7, #4]
 80149ba:	69db      	ldr	r3, [r3, #28]
 80149bc:	4619      	mov	r1, r3
 80149be:	68b8      	ldr	r0, [r7, #8]
 80149c0:	f7ff f9f4 	bl	8013dac <move_window>
 80149c4:	4603      	mov	r3, r0
 80149c6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80149c8:	7bfb      	ldrb	r3, [r7, #15]
 80149ca:	2b00      	cmp	r3, #0
 80149cc:	d111      	bne.n	80149f2 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80149ce:	687b      	ldr	r3, [r7, #4]
 80149d0:	6a1b      	ldr	r3, [r3, #32]
 80149d2:	2220      	movs	r2, #32
 80149d4:	2100      	movs	r1, #0
 80149d6:	4618      	mov	r0, r3
 80149d8:	f7fe ffa9 	bl	801392e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80149dc:	687b      	ldr	r3, [r7, #4]
 80149de:	6a18      	ldr	r0, [r3, #32]
 80149e0:	687b      	ldr	r3, [r7, #4]
 80149e2:	3324      	adds	r3, #36	; 0x24
 80149e4:	220b      	movs	r2, #11
 80149e6:	4619      	mov	r1, r3
 80149e8:	f7fe ff80 	bl	80138ec <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80149ec:	68bb      	ldr	r3, [r7, #8]
 80149ee:	2201      	movs	r2, #1
 80149f0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80149f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80149f4:	4618      	mov	r0, r3
 80149f6:	3710      	adds	r7, #16
 80149f8:	46bd      	mov	sp, r7
 80149fa:	bd80      	pop	{r7, pc}

080149fc <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 80149fc:	b580      	push	{r7, lr}
 80149fe:	b084      	sub	sp, #16
 8014a00:	af00      	add	r7, sp, #0
 8014a02:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8014a04:	687b      	ldr	r3, [r7, #4]
 8014a06:	681b      	ldr	r3, [r3, #0]
 8014a08:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 8014a0a:	687b      	ldr	r3, [r7, #4]
 8014a0c:	69db      	ldr	r3, [r3, #28]
 8014a0e:	4619      	mov	r1, r3
 8014a10:	68f8      	ldr	r0, [r7, #12]
 8014a12:	f7ff f9cb 	bl	8013dac <move_window>
 8014a16:	4603      	mov	r3, r0
 8014a18:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 8014a1a:	7afb      	ldrb	r3, [r7, #11]
 8014a1c:	2b00      	cmp	r3, #0
 8014a1e:	d106      	bne.n	8014a2e <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	6a1b      	ldr	r3, [r3, #32]
 8014a24:	22e5      	movs	r2, #229	; 0xe5
 8014a26:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8014a28:	68fb      	ldr	r3, [r7, #12]
 8014a2a:	2201      	movs	r2, #1
 8014a2c:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 8014a2e:	7afb      	ldrb	r3, [r7, #11]
}
 8014a30:	4618      	mov	r0, r3
 8014a32:	3710      	adds	r7, #16
 8014a34:	46bd      	mov	sp, r7
 8014a36:	bd80      	pop	{r7, pc}

08014a38 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8014a38:	b580      	push	{r7, lr}
 8014a3a:	b086      	sub	sp, #24
 8014a3c:	af00      	add	r7, sp, #0
 8014a3e:	6078      	str	r0, [r7, #4]
 8014a40:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8014a42:	683b      	ldr	r3, [r7, #0]
 8014a44:	2200      	movs	r2, #0
 8014a46:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	69db      	ldr	r3, [r3, #28]
 8014a4c:	2b00      	cmp	r3, #0
 8014a4e:	d04e      	beq.n	8014aee <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8014a50:	2300      	movs	r3, #0
 8014a52:	613b      	str	r3, [r7, #16]
 8014a54:	693b      	ldr	r3, [r7, #16]
 8014a56:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8014a58:	e021      	b.n	8014a9e <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 8014a5a:	687b      	ldr	r3, [r7, #4]
 8014a5c:	6a1a      	ldr	r2, [r3, #32]
 8014a5e:	697b      	ldr	r3, [r7, #20]
 8014a60:	1c59      	adds	r1, r3, #1
 8014a62:	6179      	str	r1, [r7, #20]
 8014a64:	4413      	add	r3, r2
 8014a66:	781b      	ldrb	r3, [r3, #0]
 8014a68:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8014a6a:	7bfb      	ldrb	r3, [r7, #15]
 8014a6c:	2b20      	cmp	r3, #32
 8014a6e:	d100      	bne.n	8014a72 <get_fileinfo+0x3a>
 8014a70:	e015      	b.n	8014a9e <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8014a72:	7bfb      	ldrb	r3, [r7, #15]
 8014a74:	2b05      	cmp	r3, #5
 8014a76:	d101      	bne.n	8014a7c <get_fileinfo+0x44>
 8014a78:	23e5      	movs	r3, #229	; 0xe5
 8014a7a:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8014a7c:	697b      	ldr	r3, [r7, #20]
 8014a7e:	2b09      	cmp	r3, #9
 8014a80:	d106      	bne.n	8014a90 <get_fileinfo+0x58>
 8014a82:	693b      	ldr	r3, [r7, #16]
 8014a84:	1c5a      	adds	r2, r3, #1
 8014a86:	613a      	str	r2, [r7, #16]
 8014a88:	683a      	ldr	r2, [r7, #0]
 8014a8a:	4413      	add	r3, r2
 8014a8c:	222e      	movs	r2, #46	; 0x2e
 8014a8e:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8014a90:	693b      	ldr	r3, [r7, #16]
 8014a92:	1c5a      	adds	r2, r3, #1
 8014a94:	613a      	str	r2, [r7, #16]
 8014a96:	683a      	ldr	r2, [r7, #0]
 8014a98:	4413      	add	r3, r2
 8014a9a:	7bfa      	ldrb	r2, [r7, #15]
 8014a9c:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 8014a9e:	697b      	ldr	r3, [r7, #20]
 8014aa0:	2b0a      	cmp	r3, #10
 8014aa2:	d9da      	bls.n	8014a5a <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8014aa4:	683a      	ldr	r2, [r7, #0]
 8014aa6:	693b      	ldr	r3, [r7, #16]
 8014aa8:	4413      	add	r3, r2
 8014aaa:	3309      	adds	r3, #9
 8014aac:	2200      	movs	r2, #0
 8014aae:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8014ab0:	687b      	ldr	r3, [r7, #4]
 8014ab2:	6a1b      	ldr	r3, [r3, #32]
 8014ab4:	7ada      	ldrb	r2, [r3, #11]
 8014ab6:	683b      	ldr	r3, [r7, #0]
 8014ab8:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8014aba:	687b      	ldr	r3, [r7, #4]
 8014abc:	6a1b      	ldr	r3, [r3, #32]
 8014abe:	331c      	adds	r3, #28
 8014ac0:	4618      	mov	r0, r3
 8014ac2:	f7fe fea9 	bl	8013818 <ld_dword>
 8014ac6:	4602      	mov	r2, r0
 8014ac8:	683b      	ldr	r3, [r7, #0]
 8014aca:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8014acc:	687b      	ldr	r3, [r7, #4]
 8014ace:	6a1b      	ldr	r3, [r3, #32]
 8014ad0:	3316      	adds	r3, #22
 8014ad2:	4618      	mov	r0, r3
 8014ad4:	f7fe fea0 	bl	8013818 <ld_dword>
 8014ad8:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8014ada:	68bb      	ldr	r3, [r7, #8]
 8014adc:	b29a      	uxth	r2, r3
 8014ade:	683b      	ldr	r3, [r7, #0]
 8014ae0:	80da      	strh	r2, [r3, #6]
 8014ae2:	68bb      	ldr	r3, [r7, #8]
 8014ae4:	0c1b      	lsrs	r3, r3, #16
 8014ae6:	b29a      	uxth	r2, r3
 8014ae8:	683b      	ldr	r3, [r7, #0]
 8014aea:	809a      	strh	r2, [r3, #4]
 8014aec:	e000      	b.n	8014af0 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8014aee:	bf00      	nop
}
 8014af0:	3718      	adds	r7, #24
 8014af2:	46bd      	mov	sp, r7
 8014af4:	bd80      	pop	{r7, pc}
	...

08014af8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8014af8:	b580      	push	{r7, lr}
 8014afa:	b088      	sub	sp, #32
 8014afc:	af00      	add	r7, sp, #0
 8014afe:	6078      	str	r0, [r7, #4]
 8014b00:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8014b02:	683b      	ldr	r3, [r7, #0]
 8014b04:	681b      	ldr	r3, [r3, #0]
 8014b06:	60fb      	str	r3, [r7, #12]
 8014b08:	687b      	ldr	r3, [r7, #4]
 8014b0a:	3324      	adds	r3, #36	; 0x24
 8014b0c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8014b0e:	220b      	movs	r2, #11
 8014b10:	2120      	movs	r1, #32
 8014b12:	68b8      	ldr	r0, [r7, #8]
 8014b14:	f7fe ff0b 	bl	801392e <mem_set>
	si = i = 0; ni = 8;
 8014b18:	2300      	movs	r3, #0
 8014b1a:	613b      	str	r3, [r7, #16]
 8014b1c:	693b      	ldr	r3, [r7, #16]
 8014b1e:	61fb      	str	r3, [r7, #28]
 8014b20:	2308      	movs	r3, #8
 8014b22:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8014b24:	69fb      	ldr	r3, [r7, #28]
 8014b26:	1c5a      	adds	r2, r3, #1
 8014b28:	61fa      	str	r2, [r7, #28]
 8014b2a:	68fa      	ldr	r2, [r7, #12]
 8014b2c:	4413      	add	r3, r2
 8014b2e:	781b      	ldrb	r3, [r3, #0]
 8014b30:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8014b32:	7efb      	ldrb	r3, [r7, #27]
 8014b34:	2b20      	cmp	r3, #32
 8014b36:	d94e      	bls.n	8014bd6 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8014b38:	7efb      	ldrb	r3, [r7, #27]
 8014b3a:	2b2f      	cmp	r3, #47	; 0x2f
 8014b3c:	d006      	beq.n	8014b4c <create_name+0x54>
 8014b3e:	7efb      	ldrb	r3, [r7, #27]
 8014b40:	2b5c      	cmp	r3, #92	; 0x5c
 8014b42:	d110      	bne.n	8014b66 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8014b44:	e002      	b.n	8014b4c <create_name+0x54>
 8014b46:	69fb      	ldr	r3, [r7, #28]
 8014b48:	3301      	adds	r3, #1
 8014b4a:	61fb      	str	r3, [r7, #28]
 8014b4c:	68fa      	ldr	r2, [r7, #12]
 8014b4e:	69fb      	ldr	r3, [r7, #28]
 8014b50:	4413      	add	r3, r2
 8014b52:	781b      	ldrb	r3, [r3, #0]
 8014b54:	2b2f      	cmp	r3, #47	; 0x2f
 8014b56:	d0f6      	beq.n	8014b46 <create_name+0x4e>
 8014b58:	68fa      	ldr	r2, [r7, #12]
 8014b5a:	69fb      	ldr	r3, [r7, #28]
 8014b5c:	4413      	add	r3, r2
 8014b5e:	781b      	ldrb	r3, [r3, #0]
 8014b60:	2b5c      	cmp	r3, #92	; 0x5c
 8014b62:	d0f0      	beq.n	8014b46 <create_name+0x4e>
			break;
 8014b64:	e038      	b.n	8014bd8 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8014b66:	7efb      	ldrb	r3, [r7, #27]
 8014b68:	2b2e      	cmp	r3, #46	; 0x2e
 8014b6a:	d003      	beq.n	8014b74 <create_name+0x7c>
 8014b6c:	693a      	ldr	r2, [r7, #16]
 8014b6e:	697b      	ldr	r3, [r7, #20]
 8014b70:	429a      	cmp	r2, r3
 8014b72:	d30c      	bcc.n	8014b8e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8014b74:	697b      	ldr	r3, [r7, #20]
 8014b76:	2b0b      	cmp	r3, #11
 8014b78:	d002      	beq.n	8014b80 <create_name+0x88>
 8014b7a:	7efb      	ldrb	r3, [r7, #27]
 8014b7c:	2b2e      	cmp	r3, #46	; 0x2e
 8014b7e:	d001      	beq.n	8014b84 <create_name+0x8c>
 8014b80:	2306      	movs	r3, #6
 8014b82:	e044      	b.n	8014c0e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8014b84:	2308      	movs	r3, #8
 8014b86:	613b      	str	r3, [r7, #16]
 8014b88:	230b      	movs	r3, #11
 8014b8a:	617b      	str	r3, [r7, #20]
			continue;
 8014b8c:	e022      	b.n	8014bd4 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8014b8e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8014b92:	2b00      	cmp	r3, #0
 8014b94:	da04      	bge.n	8014ba0 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8014b96:	7efb      	ldrb	r3, [r7, #27]
 8014b98:	3b80      	subs	r3, #128	; 0x80
 8014b9a:	4a1f      	ldr	r2, [pc, #124]	; (8014c18 <create_name+0x120>)
 8014b9c:	5cd3      	ldrb	r3, [r2, r3]
 8014b9e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8014ba0:	7efb      	ldrb	r3, [r7, #27]
 8014ba2:	4619      	mov	r1, r3
 8014ba4:	481d      	ldr	r0, [pc, #116]	; (8014c1c <create_name+0x124>)
 8014ba6:	f7fe ff04 	bl	80139b2 <chk_chr>
 8014baa:	4603      	mov	r3, r0
 8014bac:	2b00      	cmp	r3, #0
 8014bae:	d001      	beq.n	8014bb4 <create_name+0xbc>
 8014bb0:	2306      	movs	r3, #6
 8014bb2:	e02c      	b.n	8014c0e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8014bb4:	7efb      	ldrb	r3, [r7, #27]
 8014bb6:	2b60      	cmp	r3, #96	; 0x60
 8014bb8:	d905      	bls.n	8014bc6 <create_name+0xce>
 8014bba:	7efb      	ldrb	r3, [r7, #27]
 8014bbc:	2b7a      	cmp	r3, #122	; 0x7a
 8014bbe:	d802      	bhi.n	8014bc6 <create_name+0xce>
 8014bc0:	7efb      	ldrb	r3, [r7, #27]
 8014bc2:	3b20      	subs	r3, #32
 8014bc4:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8014bc6:	693b      	ldr	r3, [r7, #16]
 8014bc8:	1c5a      	adds	r2, r3, #1
 8014bca:	613a      	str	r2, [r7, #16]
 8014bcc:	68ba      	ldr	r2, [r7, #8]
 8014bce:	4413      	add	r3, r2
 8014bd0:	7efa      	ldrb	r2, [r7, #27]
 8014bd2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8014bd4:	e7a6      	b.n	8014b24 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8014bd6:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8014bd8:	68fa      	ldr	r2, [r7, #12]
 8014bda:	69fb      	ldr	r3, [r7, #28]
 8014bdc:	441a      	add	r2, r3
 8014bde:	683b      	ldr	r3, [r7, #0]
 8014be0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8014be2:	693b      	ldr	r3, [r7, #16]
 8014be4:	2b00      	cmp	r3, #0
 8014be6:	d101      	bne.n	8014bec <create_name+0xf4>
 8014be8:	2306      	movs	r3, #6
 8014bea:	e010      	b.n	8014c0e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8014bec:	68bb      	ldr	r3, [r7, #8]
 8014bee:	781b      	ldrb	r3, [r3, #0]
 8014bf0:	2be5      	cmp	r3, #229	; 0xe5
 8014bf2:	d102      	bne.n	8014bfa <create_name+0x102>
 8014bf4:	68bb      	ldr	r3, [r7, #8]
 8014bf6:	2205      	movs	r2, #5
 8014bf8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8014bfa:	7efb      	ldrb	r3, [r7, #27]
 8014bfc:	2b20      	cmp	r3, #32
 8014bfe:	d801      	bhi.n	8014c04 <create_name+0x10c>
 8014c00:	2204      	movs	r2, #4
 8014c02:	e000      	b.n	8014c06 <create_name+0x10e>
 8014c04:	2200      	movs	r2, #0
 8014c06:	68bb      	ldr	r3, [r7, #8]
 8014c08:	330b      	adds	r3, #11
 8014c0a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8014c0c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8014c0e:	4618      	mov	r0, r3
 8014c10:	3720      	adds	r7, #32
 8014c12:	46bd      	mov	sp, r7
 8014c14:	bd80      	pop	{r7, pc}
 8014c16:	bf00      	nop
 8014c18:	0802b95c 	.word	0x0802b95c
 8014c1c:	0802b064 	.word	0x0802b064

08014c20 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8014c20:	b580      	push	{r7, lr}
 8014c22:	b086      	sub	sp, #24
 8014c24:	af00      	add	r7, sp, #0
 8014c26:	6078      	str	r0, [r7, #4]
 8014c28:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8014c2a:	687b      	ldr	r3, [r7, #4]
 8014c2c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8014c2e:	693b      	ldr	r3, [r7, #16]
 8014c30:	681b      	ldr	r3, [r3, #0]
 8014c32:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8014c34:	e002      	b.n	8014c3c <follow_path+0x1c>
 8014c36:	683b      	ldr	r3, [r7, #0]
 8014c38:	3301      	adds	r3, #1
 8014c3a:	603b      	str	r3, [r7, #0]
 8014c3c:	683b      	ldr	r3, [r7, #0]
 8014c3e:	781b      	ldrb	r3, [r3, #0]
 8014c40:	2b2f      	cmp	r3, #47	; 0x2f
 8014c42:	d0f8      	beq.n	8014c36 <follow_path+0x16>
 8014c44:	683b      	ldr	r3, [r7, #0]
 8014c46:	781b      	ldrb	r3, [r3, #0]
 8014c48:	2b5c      	cmp	r3, #92	; 0x5c
 8014c4a:	d0f4      	beq.n	8014c36 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8014c4c:	693b      	ldr	r3, [r7, #16]
 8014c4e:	2200      	movs	r2, #0
 8014c50:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8014c52:	683b      	ldr	r3, [r7, #0]
 8014c54:	781b      	ldrb	r3, [r3, #0]
 8014c56:	2b1f      	cmp	r3, #31
 8014c58:	d80a      	bhi.n	8014c70 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8014c5a:	687b      	ldr	r3, [r7, #4]
 8014c5c:	2280      	movs	r2, #128	; 0x80
 8014c5e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8014c62:	2100      	movs	r1, #0
 8014c64:	6878      	ldr	r0, [r7, #4]
 8014c66:	f7ff fc1f 	bl	80144a8 <dir_sdi>
 8014c6a:	4603      	mov	r3, r0
 8014c6c:	75fb      	strb	r3, [r7, #23]
 8014c6e:	e043      	b.n	8014cf8 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8014c70:	463b      	mov	r3, r7
 8014c72:	4619      	mov	r1, r3
 8014c74:	6878      	ldr	r0, [r7, #4]
 8014c76:	f7ff ff3f 	bl	8014af8 <create_name>
 8014c7a:	4603      	mov	r3, r0
 8014c7c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8014c7e:	7dfb      	ldrb	r3, [r7, #23]
 8014c80:	2b00      	cmp	r3, #0
 8014c82:	d134      	bne.n	8014cee <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8014c84:	6878      	ldr	r0, [r7, #4]
 8014c86:	f7ff fe32 	bl	80148ee <dir_find>
 8014c8a:	4603      	mov	r3, r0
 8014c8c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8014c8e:	687b      	ldr	r3, [r7, #4]
 8014c90:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8014c94:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8014c96:	7dfb      	ldrb	r3, [r7, #23]
 8014c98:	2b00      	cmp	r3, #0
 8014c9a:	d00a      	beq.n	8014cb2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8014c9c:	7dfb      	ldrb	r3, [r7, #23]
 8014c9e:	2b04      	cmp	r3, #4
 8014ca0:	d127      	bne.n	8014cf2 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8014ca2:	7afb      	ldrb	r3, [r7, #11]
 8014ca4:	f003 0304 	and.w	r3, r3, #4
 8014ca8:	2b00      	cmp	r3, #0
 8014caa:	d122      	bne.n	8014cf2 <follow_path+0xd2>
 8014cac:	2305      	movs	r3, #5
 8014cae:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8014cb0:	e01f      	b.n	8014cf2 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8014cb2:	7afb      	ldrb	r3, [r7, #11]
 8014cb4:	f003 0304 	and.w	r3, r3, #4
 8014cb8:	2b00      	cmp	r3, #0
 8014cba:	d11c      	bne.n	8014cf6 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8014cbc:	693b      	ldr	r3, [r7, #16]
 8014cbe:	799b      	ldrb	r3, [r3, #6]
 8014cc0:	f003 0310 	and.w	r3, r3, #16
 8014cc4:	2b00      	cmp	r3, #0
 8014cc6:	d102      	bne.n	8014cce <follow_path+0xae>
				res = FR_NO_PATH; break;
 8014cc8:	2305      	movs	r3, #5
 8014cca:	75fb      	strb	r3, [r7, #23]
 8014ccc:	e014      	b.n	8014cf8 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8014cce:	68fb      	ldr	r3, [r7, #12]
 8014cd0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8014cd4:	687b      	ldr	r3, [r7, #4]
 8014cd6:	695b      	ldr	r3, [r3, #20]
 8014cd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014cdc:	4413      	add	r3, r2
 8014cde:	4619      	mov	r1, r3
 8014ce0:	68f8      	ldr	r0, [r7, #12]
 8014ce2:	f7ff fd68 	bl	80147b6 <ld_clust>
 8014ce6:	4602      	mov	r2, r0
 8014ce8:	693b      	ldr	r3, [r7, #16]
 8014cea:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8014cec:	e7c0      	b.n	8014c70 <follow_path+0x50>
			if (res != FR_OK) break;
 8014cee:	bf00      	nop
 8014cf0:	e002      	b.n	8014cf8 <follow_path+0xd8>
				break;
 8014cf2:	bf00      	nop
 8014cf4:	e000      	b.n	8014cf8 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8014cf6:	bf00      	nop
			}
		}
	}

	return res;
 8014cf8:	7dfb      	ldrb	r3, [r7, #23]
}
 8014cfa:	4618      	mov	r0, r3
 8014cfc:	3718      	adds	r7, #24
 8014cfe:	46bd      	mov	sp, r7
 8014d00:	bd80      	pop	{r7, pc}

08014d02 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8014d02:	b480      	push	{r7}
 8014d04:	b087      	sub	sp, #28
 8014d06:	af00      	add	r7, sp, #0
 8014d08:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8014d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8014d0e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8014d10:	687b      	ldr	r3, [r7, #4]
 8014d12:	681b      	ldr	r3, [r3, #0]
 8014d14:	2b00      	cmp	r3, #0
 8014d16:	d031      	beq.n	8014d7c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8014d18:	687b      	ldr	r3, [r7, #4]
 8014d1a:	681b      	ldr	r3, [r3, #0]
 8014d1c:	617b      	str	r3, [r7, #20]
 8014d1e:	e002      	b.n	8014d26 <get_ldnumber+0x24>
 8014d20:	697b      	ldr	r3, [r7, #20]
 8014d22:	3301      	adds	r3, #1
 8014d24:	617b      	str	r3, [r7, #20]
 8014d26:	697b      	ldr	r3, [r7, #20]
 8014d28:	781b      	ldrb	r3, [r3, #0]
 8014d2a:	2b20      	cmp	r3, #32
 8014d2c:	d903      	bls.n	8014d36 <get_ldnumber+0x34>
 8014d2e:	697b      	ldr	r3, [r7, #20]
 8014d30:	781b      	ldrb	r3, [r3, #0]
 8014d32:	2b3a      	cmp	r3, #58	; 0x3a
 8014d34:	d1f4      	bne.n	8014d20 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8014d36:	697b      	ldr	r3, [r7, #20]
 8014d38:	781b      	ldrb	r3, [r3, #0]
 8014d3a:	2b3a      	cmp	r3, #58	; 0x3a
 8014d3c:	d11c      	bne.n	8014d78 <get_ldnumber+0x76>
			tp = *path;
 8014d3e:	687b      	ldr	r3, [r7, #4]
 8014d40:	681b      	ldr	r3, [r3, #0]
 8014d42:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8014d44:	68fb      	ldr	r3, [r7, #12]
 8014d46:	1c5a      	adds	r2, r3, #1
 8014d48:	60fa      	str	r2, [r7, #12]
 8014d4a:	781b      	ldrb	r3, [r3, #0]
 8014d4c:	3b30      	subs	r3, #48	; 0x30
 8014d4e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8014d50:	68bb      	ldr	r3, [r7, #8]
 8014d52:	2b09      	cmp	r3, #9
 8014d54:	d80e      	bhi.n	8014d74 <get_ldnumber+0x72>
 8014d56:	68fa      	ldr	r2, [r7, #12]
 8014d58:	697b      	ldr	r3, [r7, #20]
 8014d5a:	429a      	cmp	r2, r3
 8014d5c:	d10a      	bne.n	8014d74 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8014d5e:	68bb      	ldr	r3, [r7, #8]
 8014d60:	2b00      	cmp	r3, #0
 8014d62:	d107      	bne.n	8014d74 <get_ldnumber+0x72>
					vol = (int)i;
 8014d64:	68bb      	ldr	r3, [r7, #8]
 8014d66:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8014d68:	697b      	ldr	r3, [r7, #20]
 8014d6a:	3301      	adds	r3, #1
 8014d6c:	617b      	str	r3, [r7, #20]
 8014d6e:	687b      	ldr	r3, [r7, #4]
 8014d70:	697a      	ldr	r2, [r7, #20]
 8014d72:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8014d74:	693b      	ldr	r3, [r7, #16]
 8014d76:	e002      	b.n	8014d7e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8014d78:	2300      	movs	r3, #0
 8014d7a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8014d7c:	693b      	ldr	r3, [r7, #16]
}
 8014d7e:	4618      	mov	r0, r3
 8014d80:	371c      	adds	r7, #28
 8014d82:	46bd      	mov	sp, r7
 8014d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d88:	4770      	bx	lr
	...

08014d8c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8014d8c:	b580      	push	{r7, lr}
 8014d8e:	b082      	sub	sp, #8
 8014d90:	af00      	add	r7, sp, #0
 8014d92:	6078      	str	r0, [r7, #4]
 8014d94:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8014d96:	687b      	ldr	r3, [r7, #4]
 8014d98:	2200      	movs	r2, #0
 8014d9a:	70da      	strb	r2, [r3, #3]
 8014d9c:	687b      	ldr	r3, [r7, #4]
 8014d9e:	f04f 32ff 	mov.w	r2, #4294967295
 8014da2:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8014da4:	6839      	ldr	r1, [r7, #0]
 8014da6:	6878      	ldr	r0, [r7, #4]
 8014da8:	f7ff f800 	bl	8013dac <move_window>
 8014dac:	4603      	mov	r3, r0
 8014dae:	2b00      	cmp	r3, #0
 8014db0:	d001      	beq.n	8014db6 <check_fs+0x2a>
 8014db2:	2304      	movs	r3, #4
 8014db4:	e038      	b.n	8014e28 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8014db6:	687b      	ldr	r3, [r7, #4]
 8014db8:	3334      	adds	r3, #52	; 0x34
 8014dba:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8014dbe:	4618      	mov	r0, r3
 8014dc0:	f7fe fd12 	bl	80137e8 <ld_word>
 8014dc4:	4603      	mov	r3, r0
 8014dc6:	461a      	mov	r2, r3
 8014dc8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8014dcc:	429a      	cmp	r2, r3
 8014dce:	d001      	beq.n	8014dd4 <check_fs+0x48>
 8014dd0:	2303      	movs	r3, #3
 8014dd2:	e029      	b.n	8014e28 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8014dd4:	687b      	ldr	r3, [r7, #4]
 8014dd6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8014dda:	2be9      	cmp	r3, #233	; 0xe9
 8014ddc:	d009      	beq.n	8014df2 <check_fs+0x66>
 8014dde:	687b      	ldr	r3, [r7, #4]
 8014de0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8014de4:	2beb      	cmp	r3, #235	; 0xeb
 8014de6:	d11e      	bne.n	8014e26 <check_fs+0x9a>
 8014de8:	687b      	ldr	r3, [r7, #4]
 8014dea:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8014dee:	2b90      	cmp	r3, #144	; 0x90
 8014df0:	d119      	bne.n	8014e26 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8014df2:	687b      	ldr	r3, [r7, #4]
 8014df4:	3334      	adds	r3, #52	; 0x34
 8014df6:	3336      	adds	r3, #54	; 0x36
 8014df8:	4618      	mov	r0, r3
 8014dfa:	f7fe fd0d 	bl	8013818 <ld_dword>
 8014dfe:	4603      	mov	r3, r0
 8014e00:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8014e04:	4a0a      	ldr	r2, [pc, #40]	; (8014e30 <check_fs+0xa4>)
 8014e06:	4293      	cmp	r3, r2
 8014e08:	d101      	bne.n	8014e0e <check_fs+0x82>
 8014e0a:	2300      	movs	r3, #0
 8014e0c:	e00c      	b.n	8014e28 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8014e0e:	687b      	ldr	r3, [r7, #4]
 8014e10:	3334      	adds	r3, #52	; 0x34
 8014e12:	3352      	adds	r3, #82	; 0x52
 8014e14:	4618      	mov	r0, r3
 8014e16:	f7fe fcff 	bl	8013818 <ld_dword>
 8014e1a:	4603      	mov	r3, r0
 8014e1c:	4a05      	ldr	r2, [pc, #20]	; (8014e34 <check_fs+0xa8>)
 8014e1e:	4293      	cmp	r3, r2
 8014e20:	d101      	bne.n	8014e26 <check_fs+0x9a>
 8014e22:	2300      	movs	r3, #0
 8014e24:	e000      	b.n	8014e28 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8014e26:	2302      	movs	r3, #2
}
 8014e28:	4618      	mov	r0, r3
 8014e2a:	3708      	adds	r7, #8
 8014e2c:	46bd      	mov	sp, r7
 8014e2e:	bd80      	pop	{r7, pc}
 8014e30:	00544146 	.word	0x00544146
 8014e34:	33544146 	.word	0x33544146

08014e38 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8014e38:	b580      	push	{r7, lr}
 8014e3a:	b096      	sub	sp, #88	; 0x58
 8014e3c:	af00      	add	r7, sp, #0
 8014e3e:	60f8      	str	r0, [r7, #12]
 8014e40:	60b9      	str	r1, [r7, #8]
 8014e42:	4613      	mov	r3, r2
 8014e44:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8014e46:	68bb      	ldr	r3, [r7, #8]
 8014e48:	2200      	movs	r2, #0
 8014e4a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8014e4c:	68f8      	ldr	r0, [r7, #12]
 8014e4e:	f7ff ff58 	bl	8014d02 <get_ldnumber>
 8014e52:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8014e54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014e56:	2b00      	cmp	r3, #0
 8014e58:	da01      	bge.n	8014e5e <find_volume+0x26>
 8014e5a:	230b      	movs	r3, #11
 8014e5c:	e235      	b.n	80152ca <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8014e5e:	4aa5      	ldr	r2, [pc, #660]	; (80150f4 <find_volume+0x2bc>)
 8014e60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014e62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014e66:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8014e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e6a:	2b00      	cmp	r3, #0
 8014e6c:	d101      	bne.n	8014e72 <find_volume+0x3a>
 8014e6e:	230c      	movs	r3, #12
 8014e70:	e22b      	b.n	80152ca <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 8014e72:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014e74:	f7fe fdb8 	bl	80139e8 <lock_fs>
 8014e78:	4603      	mov	r3, r0
 8014e7a:	2b00      	cmp	r3, #0
 8014e7c:	d101      	bne.n	8014e82 <find_volume+0x4a>
 8014e7e:	230f      	movs	r3, #15
 8014e80:	e223      	b.n	80152ca <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 8014e82:	68bb      	ldr	r3, [r7, #8]
 8014e84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014e86:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8014e88:	79fb      	ldrb	r3, [r7, #7]
 8014e8a:	f023 0301 	bic.w	r3, r3, #1
 8014e8e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8014e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e92:	781b      	ldrb	r3, [r3, #0]
 8014e94:	2b00      	cmp	r3, #0
 8014e96:	d01a      	beq.n	8014ece <find_volume+0x96>
		stat = disk_status(fs->drv);
 8014e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e9a:	785b      	ldrb	r3, [r3, #1]
 8014e9c:	4618      	mov	r0, r3
 8014e9e:	f7fe fc05 	bl	80136ac <disk_status>
 8014ea2:	4603      	mov	r3, r0
 8014ea4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8014ea8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014eac:	f003 0301 	and.w	r3, r3, #1
 8014eb0:	2b00      	cmp	r3, #0
 8014eb2:	d10c      	bne.n	8014ece <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8014eb4:	79fb      	ldrb	r3, [r7, #7]
 8014eb6:	2b00      	cmp	r3, #0
 8014eb8:	d007      	beq.n	8014eca <find_volume+0x92>
 8014eba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014ebe:	f003 0304 	and.w	r3, r3, #4
 8014ec2:	2b00      	cmp	r3, #0
 8014ec4:	d001      	beq.n	8014eca <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8014ec6:	230a      	movs	r3, #10
 8014ec8:	e1ff      	b.n	80152ca <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 8014eca:	2300      	movs	r3, #0
 8014ecc:	e1fd      	b.n	80152ca <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8014ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ed0:	2200      	movs	r2, #0
 8014ed2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8014ed4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014ed6:	b2da      	uxtb	r2, r3
 8014ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014eda:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8014edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ede:	785b      	ldrb	r3, [r3, #1]
 8014ee0:	4618      	mov	r0, r3
 8014ee2:	f7fe fbfd 	bl	80136e0 <disk_initialize>
 8014ee6:	4603      	mov	r3, r0
 8014ee8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8014eec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014ef0:	f003 0301 	and.w	r3, r3, #1
 8014ef4:	2b00      	cmp	r3, #0
 8014ef6:	d001      	beq.n	8014efc <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8014ef8:	2303      	movs	r3, #3
 8014efa:	e1e6      	b.n	80152ca <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8014efc:	79fb      	ldrb	r3, [r7, #7]
 8014efe:	2b00      	cmp	r3, #0
 8014f00:	d007      	beq.n	8014f12 <find_volume+0xda>
 8014f02:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014f06:	f003 0304 	and.w	r3, r3, #4
 8014f0a:	2b00      	cmp	r3, #0
 8014f0c:	d001      	beq.n	8014f12 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8014f0e:	230a      	movs	r3, #10
 8014f10:	e1db      	b.n	80152ca <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8014f12:	2300      	movs	r3, #0
 8014f14:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8014f16:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014f18:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014f1a:	f7ff ff37 	bl	8014d8c <check_fs>
 8014f1e:	4603      	mov	r3, r0
 8014f20:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8014f24:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014f28:	2b02      	cmp	r3, #2
 8014f2a:	d149      	bne.n	8014fc0 <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8014f2c:	2300      	movs	r3, #0
 8014f2e:	643b      	str	r3, [r7, #64]	; 0x40
 8014f30:	e01e      	b.n	8014f70 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8014f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f34:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8014f38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014f3a:	011b      	lsls	r3, r3, #4
 8014f3c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8014f40:	4413      	add	r3, r2
 8014f42:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8014f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f46:	3304      	adds	r3, #4
 8014f48:	781b      	ldrb	r3, [r3, #0]
 8014f4a:	2b00      	cmp	r3, #0
 8014f4c:	d006      	beq.n	8014f5c <find_volume+0x124>
 8014f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f50:	3308      	adds	r3, #8
 8014f52:	4618      	mov	r0, r3
 8014f54:	f7fe fc60 	bl	8013818 <ld_dword>
 8014f58:	4602      	mov	r2, r0
 8014f5a:	e000      	b.n	8014f5e <find_volume+0x126>
 8014f5c:	2200      	movs	r2, #0
 8014f5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014f60:	009b      	lsls	r3, r3, #2
 8014f62:	3358      	adds	r3, #88	; 0x58
 8014f64:	443b      	add	r3, r7
 8014f66:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8014f6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014f6c:	3301      	adds	r3, #1
 8014f6e:	643b      	str	r3, [r7, #64]	; 0x40
 8014f70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014f72:	2b03      	cmp	r3, #3
 8014f74:	d9dd      	bls.n	8014f32 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8014f76:	2300      	movs	r3, #0
 8014f78:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8014f7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014f7c:	2b00      	cmp	r3, #0
 8014f7e:	d002      	beq.n	8014f86 <find_volume+0x14e>
 8014f80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014f82:	3b01      	subs	r3, #1
 8014f84:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8014f86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014f88:	009b      	lsls	r3, r3, #2
 8014f8a:	3358      	adds	r3, #88	; 0x58
 8014f8c:	443b      	add	r3, r7
 8014f8e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8014f92:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8014f94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014f96:	2b00      	cmp	r3, #0
 8014f98:	d005      	beq.n	8014fa6 <find_volume+0x16e>
 8014f9a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014f9c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014f9e:	f7ff fef5 	bl	8014d8c <check_fs>
 8014fa2:	4603      	mov	r3, r0
 8014fa4:	e000      	b.n	8014fa8 <find_volume+0x170>
 8014fa6:	2303      	movs	r3, #3
 8014fa8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8014fac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014fb0:	2b01      	cmp	r3, #1
 8014fb2:	d905      	bls.n	8014fc0 <find_volume+0x188>
 8014fb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014fb6:	3301      	adds	r3, #1
 8014fb8:	643b      	str	r3, [r7, #64]	; 0x40
 8014fba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014fbc:	2b03      	cmp	r3, #3
 8014fbe:	d9e2      	bls.n	8014f86 <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8014fc0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014fc4:	2b04      	cmp	r3, #4
 8014fc6:	d101      	bne.n	8014fcc <find_volume+0x194>
 8014fc8:	2301      	movs	r3, #1
 8014fca:	e17e      	b.n	80152ca <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8014fcc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014fd0:	2b01      	cmp	r3, #1
 8014fd2:	d901      	bls.n	8014fd8 <find_volume+0x1a0>
 8014fd4:	230d      	movs	r3, #13
 8014fd6:	e178      	b.n	80152ca <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8014fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014fda:	3334      	adds	r3, #52	; 0x34
 8014fdc:	330b      	adds	r3, #11
 8014fde:	4618      	mov	r0, r3
 8014fe0:	f7fe fc02 	bl	80137e8 <ld_word>
 8014fe4:	4603      	mov	r3, r0
 8014fe6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014fea:	d001      	beq.n	8014ff0 <find_volume+0x1b8>
 8014fec:	230d      	movs	r3, #13
 8014fee:	e16c      	b.n	80152ca <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8014ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ff2:	3334      	adds	r3, #52	; 0x34
 8014ff4:	3316      	adds	r3, #22
 8014ff6:	4618      	mov	r0, r3
 8014ff8:	f7fe fbf6 	bl	80137e8 <ld_word>
 8014ffc:	4603      	mov	r3, r0
 8014ffe:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8015000:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015002:	2b00      	cmp	r3, #0
 8015004:	d106      	bne.n	8015014 <find_volume+0x1dc>
 8015006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015008:	3334      	adds	r3, #52	; 0x34
 801500a:	3324      	adds	r3, #36	; 0x24
 801500c:	4618      	mov	r0, r3
 801500e:	f7fe fc03 	bl	8013818 <ld_dword>
 8015012:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8015014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015016:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8015018:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801501a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801501c:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8015020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015022:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8015024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015026:	789b      	ldrb	r3, [r3, #2]
 8015028:	2b01      	cmp	r3, #1
 801502a:	d005      	beq.n	8015038 <find_volume+0x200>
 801502c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801502e:	789b      	ldrb	r3, [r3, #2]
 8015030:	2b02      	cmp	r3, #2
 8015032:	d001      	beq.n	8015038 <find_volume+0x200>
 8015034:	230d      	movs	r3, #13
 8015036:	e148      	b.n	80152ca <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8015038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801503a:	789b      	ldrb	r3, [r3, #2]
 801503c:	461a      	mov	r2, r3
 801503e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015040:	fb02 f303 	mul.w	r3, r2, r3
 8015044:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8015046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015048:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801504c:	b29a      	uxth	r2, r3
 801504e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015050:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8015052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015054:	895b      	ldrh	r3, [r3, #10]
 8015056:	2b00      	cmp	r3, #0
 8015058:	d008      	beq.n	801506c <find_volume+0x234>
 801505a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801505c:	895b      	ldrh	r3, [r3, #10]
 801505e:	461a      	mov	r2, r3
 8015060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015062:	895b      	ldrh	r3, [r3, #10]
 8015064:	3b01      	subs	r3, #1
 8015066:	4013      	ands	r3, r2
 8015068:	2b00      	cmp	r3, #0
 801506a:	d001      	beq.n	8015070 <find_volume+0x238>
 801506c:	230d      	movs	r3, #13
 801506e:	e12c      	b.n	80152ca <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8015070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015072:	3334      	adds	r3, #52	; 0x34
 8015074:	3311      	adds	r3, #17
 8015076:	4618      	mov	r0, r3
 8015078:	f7fe fbb6 	bl	80137e8 <ld_word>
 801507c:	4603      	mov	r3, r0
 801507e:	461a      	mov	r2, r3
 8015080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015082:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8015084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015086:	891b      	ldrh	r3, [r3, #8]
 8015088:	f003 030f 	and.w	r3, r3, #15
 801508c:	b29b      	uxth	r3, r3
 801508e:	2b00      	cmp	r3, #0
 8015090:	d001      	beq.n	8015096 <find_volume+0x25e>
 8015092:	230d      	movs	r3, #13
 8015094:	e119      	b.n	80152ca <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8015096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015098:	3334      	adds	r3, #52	; 0x34
 801509a:	3313      	adds	r3, #19
 801509c:	4618      	mov	r0, r3
 801509e:	f7fe fba3 	bl	80137e8 <ld_word>
 80150a2:	4603      	mov	r3, r0
 80150a4:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80150a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80150a8:	2b00      	cmp	r3, #0
 80150aa:	d106      	bne.n	80150ba <find_volume+0x282>
 80150ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80150ae:	3334      	adds	r3, #52	; 0x34
 80150b0:	3320      	adds	r3, #32
 80150b2:	4618      	mov	r0, r3
 80150b4:	f7fe fbb0 	bl	8013818 <ld_dword>
 80150b8:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80150ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80150bc:	3334      	adds	r3, #52	; 0x34
 80150be:	330e      	adds	r3, #14
 80150c0:	4618      	mov	r0, r3
 80150c2:	f7fe fb91 	bl	80137e8 <ld_word>
 80150c6:	4603      	mov	r3, r0
 80150c8:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80150ca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80150cc:	2b00      	cmp	r3, #0
 80150ce:	d101      	bne.n	80150d4 <find_volume+0x29c>
 80150d0:	230d      	movs	r3, #13
 80150d2:	e0fa      	b.n	80152ca <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80150d4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80150d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80150d8:	4413      	add	r3, r2
 80150da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80150dc:	8912      	ldrh	r2, [r2, #8]
 80150de:	0912      	lsrs	r2, r2, #4
 80150e0:	b292      	uxth	r2, r2
 80150e2:	4413      	add	r3, r2
 80150e4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80150e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80150e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150ea:	429a      	cmp	r2, r3
 80150ec:	d204      	bcs.n	80150f8 <find_volume+0x2c0>
 80150ee:	230d      	movs	r3, #13
 80150f0:	e0eb      	b.n	80152ca <find_volume+0x492>
 80150f2:	bf00      	nop
 80150f4:	2400265c 	.word	0x2400265c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80150f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80150fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150fc:	1ad3      	subs	r3, r2, r3
 80150fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015100:	8952      	ldrh	r2, [r2, #10]
 8015102:	fbb3 f3f2 	udiv	r3, r3, r2
 8015106:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8015108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801510a:	2b00      	cmp	r3, #0
 801510c:	d101      	bne.n	8015112 <find_volume+0x2da>
 801510e:	230d      	movs	r3, #13
 8015110:	e0db      	b.n	80152ca <find_volume+0x492>
		fmt = FS_FAT32;
 8015112:	2303      	movs	r3, #3
 8015114:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8015118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801511a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 801511e:	4293      	cmp	r3, r2
 8015120:	d802      	bhi.n	8015128 <find_volume+0x2f0>
 8015122:	2302      	movs	r3, #2
 8015124:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8015128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801512a:	f640 72f5 	movw	r2, #4085	; 0xff5
 801512e:	4293      	cmp	r3, r2
 8015130:	d802      	bhi.n	8015138 <find_volume+0x300>
 8015132:	2301      	movs	r3, #1
 8015134:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8015138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801513a:	1c9a      	adds	r2, r3, #2
 801513c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801513e:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8015140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015142:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015144:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8015146:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8015148:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801514a:	441a      	add	r2, r3
 801514c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801514e:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8015150:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015154:	441a      	add	r2, r3
 8015156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015158:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 801515a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801515e:	2b03      	cmp	r3, #3
 8015160:	d11e      	bne.n	80151a0 <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8015162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015164:	3334      	adds	r3, #52	; 0x34
 8015166:	332a      	adds	r3, #42	; 0x2a
 8015168:	4618      	mov	r0, r3
 801516a:	f7fe fb3d 	bl	80137e8 <ld_word>
 801516e:	4603      	mov	r3, r0
 8015170:	2b00      	cmp	r3, #0
 8015172:	d001      	beq.n	8015178 <find_volume+0x340>
 8015174:	230d      	movs	r3, #13
 8015176:	e0a8      	b.n	80152ca <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8015178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801517a:	891b      	ldrh	r3, [r3, #8]
 801517c:	2b00      	cmp	r3, #0
 801517e:	d001      	beq.n	8015184 <find_volume+0x34c>
 8015180:	230d      	movs	r3, #13
 8015182:	e0a2      	b.n	80152ca <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8015184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015186:	3334      	adds	r3, #52	; 0x34
 8015188:	332c      	adds	r3, #44	; 0x2c
 801518a:	4618      	mov	r0, r3
 801518c:	f7fe fb44 	bl	8013818 <ld_dword>
 8015190:	4602      	mov	r2, r0
 8015192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015194:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8015196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015198:	699b      	ldr	r3, [r3, #24]
 801519a:	009b      	lsls	r3, r3, #2
 801519c:	647b      	str	r3, [r7, #68]	; 0x44
 801519e:	e01f      	b.n	80151e0 <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80151a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80151a2:	891b      	ldrh	r3, [r3, #8]
 80151a4:	2b00      	cmp	r3, #0
 80151a6:	d101      	bne.n	80151ac <find_volume+0x374>
 80151a8:	230d      	movs	r3, #13
 80151aa:	e08e      	b.n	80152ca <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80151ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80151ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80151b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80151b2:	441a      	add	r2, r3
 80151b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80151b6:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80151b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80151bc:	2b02      	cmp	r3, #2
 80151be:	d103      	bne.n	80151c8 <find_volume+0x390>
 80151c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80151c2:	699b      	ldr	r3, [r3, #24]
 80151c4:	005b      	lsls	r3, r3, #1
 80151c6:	e00a      	b.n	80151de <find_volume+0x3a6>
 80151c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80151ca:	699a      	ldr	r2, [r3, #24]
 80151cc:	4613      	mov	r3, r2
 80151ce:	005b      	lsls	r3, r3, #1
 80151d0:	4413      	add	r3, r2
 80151d2:	085a      	lsrs	r2, r3, #1
 80151d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80151d6:	699b      	ldr	r3, [r3, #24]
 80151d8:	f003 0301 	and.w	r3, r3, #1
 80151dc:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80151de:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80151e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80151e2:	69da      	ldr	r2, [r3, #28]
 80151e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80151e6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80151ea:	0a5b      	lsrs	r3, r3, #9
 80151ec:	429a      	cmp	r2, r3
 80151ee:	d201      	bcs.n	80151f4 <find_volume+0x3bc>
 80151f0:	230d      	movs	r3, #13
 80151f2:	e06a      	b.n	80152ca <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80151f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80151f6:	f04f 32ff 	mov.w	r2, #4294967295
 80151fa:	615a      	str	r2, [r3, #20]
 80151fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80151fe:	695a      	ldr	r2, [r3, #20]
 8015200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015202:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8015204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015206:	2280      	movs	r2, #128	; 0x80
 8015208:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801520a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801520e:	2b03      	cmp	r3, #3
 8015210:	d149      	bne.n	80152a6 <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8015212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015214:	3334      	adds	r3, #52	; 0x34
 8015216:	3330      	adds	r3, #48	; 0x30
 8015218:	4618      	mov	r0, r3
 801521a:	f7fe fae5 	bl	80137e8 <ld_word>
 801521e:	4603      	mov	r3, r0
 8015220:	2b01      	cmp	r3, #1
 8015222:	d140      	bne.n	80152a6 <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8015224:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015226:	3301      	adds	r3, #1
 8015228:	4619      	mov	r1, r3
 801522a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801522c:	f7fe fdbe 	bl	8013dac <move_window>
 8015230:	4603      	mov	r3, r0
 8015232:	2b00      	cmp	r3, #0
 8015234:	d137      	bne.n	80152a6 <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 8015236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015238:	2200      	movs	r2, #0
 801523a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801523c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801523e:	3334      	adds	r3, #52	; 0x34
 8015240:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8015244:	4618      	mov	r0, r3
 8015246:	f7fe facf 	bl	80137e8 <ld_word>
 801524a:	4603      	mov	r3, r0
 801524c:	461a      	mov	r2, r3
 801524e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8015252:	429a      	cmp	r2, r3
 8015254:	d127      	bne.n	80152a6 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8015256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015258:	3334      	adds	r3, #52	; 0x34
 801525a:	4618      	mov	r0, r3
 801525c:	f7fe fadc 	bl	8013818 <ld_dword>
 8015260:	4603      	mov	r3, r0
 8015262:	4a1c      	ldr	r2, [pc, #112]	; (80152d4 <find_volume+0x49c>)
 8015264:	4293      	cmp	r3, r2
 8015266:	d11e      	bne.n	80152a6 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8015268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801526a:	3334      	adds	r3, #52	; 0x34
 801526c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8015270:	4618      	mov	r0, r3
 8015272:	f7fe fad1 	bl	8013818 <ld_dword>
 8015276:	4603      	mov	r3, r0
 8015278:	4a17      	ldr	r2, [pc, #92]	; (80152d8 <find_volume+0x4a0>)
 801527a:	4293      	cmp	r3, r2
 801527c:	d113      	bne.n	80152a6 <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801527e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015280:	3334      	adds	r3, #52	; 0x34
 8015282:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8015286:	4618      	mov	r0, r3
 8015288:	f7fe fac6 	bl	8013818 <ld_dword>
 801528c:	4602      	mov	r2, r0
 801528e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015290:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8015292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015294:	3334      	adds	r3, #52	; 0x34
 8015296:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 801529a:	4618      	mov	r0, r3
 801529c:	f7fe fabc 	bl	8013818 <ld_dword>
 80152a0:	4602      	mov	r2, r0
 80152a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80152a4:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80152a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80152a8:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80152ac:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80152ae:	4b0b      	ldr	r3, [pc, #44]	; (80152dc <find_volume+0x4a4>)
 80152b0:	881b      	ldrh	r3, [r3, #0]
 80152b2:	3301      	adds	r3, #1
 80152b4:	b29a      	uxth	r2, r3
 80152b6:	4b09      	ldr	r3, [pc, #36]	; (80152dc <find_volume+0x4a4>)
 80152b8:	801a      	strh	r2, [r3, #0]
 80152ba:	4b08      	ldr	r3, [pc, #32]	; (80152dc <find_volume+0x4a4>)
 80152bc:	881a      	ldrh	r2, [r3, #0]
 80152be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80152c0:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80152c2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80152c4:	f7fe fd0a 	bl	8013cdc <clear_lock>
#endif
	return FR_OK;
 80152c8:	2300      	movs	r3, #0
}
 80152ca:	4618      	mov	r0, r3
 80152cc:	3758      	adds	r7, #88	; 0x58
 80152ce:	46bd      	mov	sp, r7
 80152d0:	bd80      	pop	{r7, pc}
 80152d2:	bf00      	nop
 80152d4:	41615252 	.word	0x41615252
 80152d8:	61417272 	.word	0x61417272
 80152dc:	24002660 	.word	0x24002660

080152e0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80152e0:	b580      	push	{r7, lr}
 80152e2:	b084      	sub	sp, #16
 80152e4:	af00      	add	r7, sp, #0
 80152e6:	6078      	str	r0, [r7, #4]
 80152e8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80152ea:	2309      	movs	r3, #9
 80152ec:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80152ee:	687b      	ldr	r3, [r7, #4]
 80152f0:	2b00      	cmp	r3, #0
 80152f2:	d02e      	beq.n	8015352 <validate+0x72>
 80152f4:	687b      	ldr	r3, [r7, #4]
 80152f6:	681b      	ldr	r3, [r3, #0]
 80152f8:	2b00      	cmp	r3, #0
 80152fa:	d02a      	beq.n	8015352 <validate+0x72>
 80152fc:	687b      	ldr	r3, [r7, #4]
 80152fe:	681b      	ldr	r3, [r3, #0]
 8015300:	781b      	ldrb	r3, [r3, #0]
 8015302:	2b00      	cmp	r3, #0
 8015304:	d025      	beq.n	8015352 <validate+0x72>
 8015306:	687b      	ldr	r3, [r7, #4]
 8015308:	889a      	ldrh	r2, [r3, #4]
 801530a:	687b      	ldr	r3, [r7, #4]
 801530c:	681b      	ldr	r3, [r3, #0]
 801530e:	88db      	ldrh	r3, [r3, #6]
 8015310:	429a      	cmp	r2, r3
 8015312:	d11e      	bne.n	8015352 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8015314:	687b      	ldr	r3, [r7, #4]
 8015316:	681b      	ldr	r3, [r3, #0]
 8015318:	4618      	mov	r0, r3
 801531a:	f7fe fb65 	bl	80139e8 <lock_fs>
 801531e:	4603      	mov	r3, r0
 8015320:	2b00      	cmp	r3, #0
 8015322:	d014      	beq.n	801534e <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8015324:	687b      	ldr	r3, [r7, #4]
 8015326:	681b      	ldr	r3, [r3, #0]
 8015328:	785b      	ldrb	r3, [r3, #1]
 801532a:	4618      	mov	r0, r3
 801532c:	f7fe f9be 	bl	80136ac <disk_status>
 8015330:	4603      	mov	r3, r0
 8015332:	f003 0301 	and.w	r3, r3, #1
 8015336:	2b00      	cmp	r3, #0
 8015338:	d102      	bne.n	8015340 <validate+0x60>
				res = FR_OK;
 801533a:	2300      	movs	r3, #0
 801533c:	73fb      	strb	r3, [r7, #15]
 801533e:	e008      	b.n	8015352 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8015340:	687b      	ldr	r3, [r7, #4]
 8015342:	681b      	ldr	r3, [r3, #0]
 8015344:	2100      	movs	r1, #0
 8015346:	4618      	mov	r0, r3
 8015348:	f7fe fb64 	bl	8013a14 <unlock_fs>
 801534c:	e001      	b.n	8015352 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 801534e:	230f      	movs	r3, #15
 8015350:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8015352:	7bfb      	ldrb	r3, [r7, #15]
 8015354:	2b00      	cmp	r3, #0
 8015356:	d102      	bne.n	801535e <validate+0x7e>
 8015358:	687b      	ldr	r3, [r7, #4]
 801535a:	681b      	ldr	r3, [r3, #0]
 801535c:	e000      	b.n	8015360 <validate+0x80>
 801535e:	2300      	movs	r3, #0
 8015360:	683a      	ldr	r2, [r7, #0]
 8015362:	6013      	str	r3, [r2, #0]
	return res;
 8015364:	7bfb      	ldrb	r3, [r7, #15]
}
 8015366:	4618      	mov	r0, r3
 8015368:	3710      	adds	r7, #16
 801536a:	46bd      	mov	sp, r7
 801536c:	bd80      	pop	{r7, pc}
	...

08015370 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8015370:	b580      	push	{r7, lr}
 8015372:	b088      	sub	sp, #32
 8015374:	af00      	add	r7, sp, #0
 8015376:	60f8      	str	r0, [r7, #12]
 8015378:	60b9      	str	r1, [r7, #8]
 801537a:	4613      	mov	r3, r2
 801537c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801537e:	68bb      	ldr	r3, [r7, #8]
 8015380:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8015382:	f107 0310 	add.w	r3, r7, #16
 8015386:	4618      	mov	r0, r3
 8015388:	f7ff fcbb 	bl	8014d02 <get_ldnumber>
 801538c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801538e:	69fb      	ldr	r3, [r7, #28]
 8015390:	2b00      	cmp	r3, #0
 8015392:	da01      	bge.n	8015398 <f_mount+0x28>
 8015394:	230b      	movs	r3, #11
 8015396:	e048      	b.n	801542a <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8015398:	4a26      	ldr	r2, [pc, #152]	; (8015434 <f_mount+0xc4>)
 801539a:	69fb      	ldr	r3, [r7, #28]
 801539c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80153a0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80153a2:	69bb      	ldr	r3, [r7, #24]
 80153a4:	2b00      	cmp	r3, #0
 80153a6:	d00f      	beq.n	80153c8 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80153a8:	69b8      	ldr	r0, [r7, #24]
 80153aa:	f7fe fc97 	bl	8013cdc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 80153ae:	69bb      	ldr	r3, [r7, #24]
 80153b0:	68db      	ldr	r3, [r3, #12]
 80153b2:	4618      	mov	r0, r3
 80153b4:	f000 feb0 	bl	8016118 <ff_del_syncobj>
 80153b8:	4603      	mov	r3, r0
 80153ba:	2b00      	cmp	r3, #0
 80153bc:	d101      	bne.n	80153c2 <f_mount+0x52>
 80153be:	2302      	movs	r3, #2
 80153c0:	e033      	b.n	801542a <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80153c2:	69bb      	ldr	r3, [r7, #24]
 80153c4:	2200      	movs	r2, #0
 80153c6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80153c8:	68fb      	ldr	r3, [r7, #12]
 80153ca:	2b00      	cmp	r3, #0
 80153cc:	d00f      	beq.n	80153ee <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 80153ce:	68fb      	ldr	r3, [r7, #12]
 80153d0:	2200      	movs	r2, #0
 80153d2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 80153d4:	69fb      	ldr	r3, [r7, #28]
 80153d6:	b2da      	uxtb	r2, r3
 80153d8:	68fb      	ldr	r3, [r7, #12]
 80153da:	330c      	adds	r3, #12
 80153dc:	4619      	mov	r1, r3
 80153de:	4610      	mov	r0, r2
 80153e0:	f000 fe7f 	bl	80160e2 <ff_cre_syncobj>
 80153e4:	4603      	mov	r3, r0
 80153e6:	2b00      	cmp	r3, #0
 80153e8:	d101      	bne.n	80153ee <f_mount+0x7e>
 80153ea:	2302      	movs	r3, #2
 80153ec:	e01d      	b.n	801542a <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80153ee:	68fa      	ldr	r2, [r7, #12]
 80153f0:	4910      	ldr	r1, [pc, #64]	; (8015434 <f_mount+0xc4>)
 80153f2:	69fb      	ldr	r3, [r7, #28]
 80153f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80153f8:	68fb      	ldr	r3, [r7, #12]
 80153fa:	2b00      	cmp	r3, #0
 80153fc:	d002      	beq.n	8015404 <f_mount+0x94>
 80153fe:	79fb      	ldrb	r3, [r7, #7]
 8015400:	2b01      	cmp	r3, #1
 8015402:	d001      	beq.n	8015408 <f_mount+0x98>
 8015404:	2300      	movs	r3, #0
 8015406:	e010      	b.n	801542a <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8015408:	f107 010c 	add.w	r1, r7, #12
 801540c:	f107 0308 	add.w	r3, r7, #8
 8015410:	2200      	movs	r2, #0
 8015412:	4618      	mov	r0, r3
 8015414:	f7ff fd10 	bl	8014e38 <find_volume>
 8015418:	4603      	mov	r3, r0
 801541a:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801541c:	68fb      	ldr	r3, [r7, #12]
 801541e:	7dfa      	ldrb	r2, [r7, #23]
 8015420:	4611      	mov	r1, r2
 8015422:	4618      	mov	r0, r3
 8015424:	f7fe faf6 	bl	8013a14 <unlock_fs>
 8015428:	7dfb      	ldrb	r3, [r7, #23]
}
 801542a:	4618      	mov	r0, r3
 801542c:	3720      	adds	r7, #32
 801542e:	46bd      	mov	sp, r7
 8015430:	bd80      	pop	{r7, pc}
 8015432:	bf00      	nop
 8015434:	2400265c 	.word	0x2400265c

08015438 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8015438:	b580      	push	{r7, lr}
 801543a:	b098      	sub	sp, #96	; 0x60
 801543c:	af00      	add	r7, sp, #0
 801543e:	60f8      	str	r0, [r7, #12]
 8015440:	60b9      	str	r1, [r7, #8]
 8015442:	4613      	mov	r3, r2
 8015444:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8015446:	68fb      	ldr	r3, [r7, #12]
 8015448:	2b00      	cmp	r3, #0
 801544a:	d101      	bne.n	8015450 <f_open+0x18>
 801544c:	2309      	movs	r3, #9
 801544e:	e1b4      	b.n	80157ba <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8015450:	79fb      	ldrb	r3, [r7, #7]
 8015452:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015456:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8015458:	79fa      	ldrb	r2, [r7, #7]
 801545a:	f107 0110 	add.w	r1, r7, #16
 801545e:	f107 0308 	add.w	r3, r7, #8
 8015462:	4618      	mov	r0, r3
 8015464:	f7ff fce8 	bl	8014e38 <find_volume>
 8015468:	4603      	mov	r3, r0
 801546a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 801546e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8015472:	2b00      	cmp	r3, #0
 8015474:	f040 8191 	bne.w	801579a <f_open+0x362>
		dj.obj.fs = fs;
 8015478:	693b      	ldr	r3, [r7, #16]
 801547a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801547c:	68ba      	ldr	r2, [r7, #8]
 801547e:	f107 0314 	add.w	r3, r7, #20
 8015482:	4611      	mov	r1, r2
 8015484:	4618      	mov	r0, r3
 8015486:	f7ff fbcb 	bl	8014c20 <follow_path>
 801548a:	4603      	mov	r3, r0
 801548c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8015490:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8015494:	2b00      	cmp	r3, #0
 8015496:	d11a      	bne.n	80154ce <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8015498:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801549c:	b25b      	sxtb	r3, r3
 801549e:	2b00      	cmp	r3, #0
 80154a0:	da03      	bge.n	80154aa <f_open+0x72>
				res = FR_INVALID_NAME;
 80154a2:	2306      	movs	r3, #6
 80154a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80154a8:	e011      	b.n	80154ce <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80154aa:	79fb      	ldrb	r3, [r7, #7]
 80154ac:	f023 0301 	bic.w	r3, r3, #1
 80154b0:	2b00      	cmp	r3, #0
 80154b2:	bf14      	ite	ne
 80154b4:	2301      	movne	r3, #1
 80154b6:	2300      	moveq	r3, #0
 80154b8:	b2db      	uxtb	r3, r3
 80154ba:	461a      	mov	r2, r3
 80154bc:	f107 0314 	add.w	r3, r7, #20
 80154c0:	4611      	mov	r1, r2
 80154c2:	4618      	mov	r0, r3
 80154c4:	f7fe fac2 	bl	8013a4c <chk_lock>
 80154c8:	4603      	mov	r3, r0
 80154ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80154ce:	79fb      	ldrb	r3, [r7, #7]
 80154d0:	f003 031c 	and.w	r3, r3, #28
 80154d4:	2b00      	cmp	r3, #0
 80154d6:	d07f      	beq.n	80155d8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80154d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80154dc:	2b00      	cmp	r3, #0
 80154de:	d017      	beq.n	8015510 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80154e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80154e4:	2b04      	cmp	r3, #4
 80154e6:	d10e      	bne.n	8015506 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80154e8:	f7fe fb0c 	bl	8013b04 <enq_lock>
 80154ec:	4603      	mov	r3, r0
 80154ee:	2b00      	cmp	r3, #0
 80154f0:	d006      	beq.n	8015500 <f_open+0xc8>
 80154f2:	f107 0314 	add.w	r3, r7, #20
 80154f6:	4618      	mov	r0, r3
 80154f8:	f7ff fa4e 	bl	8014998 <dir_register>
 80154fc:	4603      	mov	r3, r0
 80154fe:	e000      	b.n	8015502 <f_open+0xca>
 8015500:	2312      	movs	r3, #18
 8015502:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8015506:	79fb      	ldrb	r3, [r7, #7]
 8015508:	f043 0308 	orr.w	r3, r3, #8
 801550c:	71fb      	strb	r3, [r7, #7]
 801550e:	e010      	b.n	8015532 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8015510:	7ebb      	ldrb	r3, [r7, #26]
 8015512:	f003 0311 	and.w	r3, r3, #17
 8015516:	2b00      	cmp	r3, #0
 8015518:	d003      	beq.n	8015522 <f_open+0xea>
					res = FR_DENIED;
 801551a:	2307      	movs	r3, #7
 801551c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8015520:	e007      	b.n	8015532 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8015522:	79fb      	ldrb	r3, [r7, #7]
 8015524:	f003 0304 	and.w	r3, r3, #4
 8015528:	2b00      	cmp	r3, #0
 801552a:	d002      	beq.n	8015532 <f_open+0xfa>
 801552c:	2308      	movs	r3, #8
 801552e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8015532:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8015536:	2b00      	cmp	r3, #0
 8015538:	d168      	bne.n	801560c <f_open+0x1d4>
 801553a:	79fb      	ldrb	r3, [r7, #7]
 801553c:	f003 0308 	and.w	r3, r3, #8
 8015540:	2b00      	cmp	r3, #0
 8015542:	d063      	beq.n	801560c <f_open+0x1d4>
				dw = GET_FATTIME();
 8015544:	f7ec fd2e 	bl	8001fa4 <get_fattime>
 8015548:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801554a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801554c:	330e      	adds	r3, #14
 801554e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8015550:	4618      	mov	r0, r3
 8015552:	f7fe f99f 	bl	8013894 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8015556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015558:	3316      	adds	r3, #22
 801555a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801555c:	4618      	mov	r0, r3
 801555e:	f7fe f999 	bl	8013894 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8015562:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015564:	330b      	adds	r3, #11
 8015566:	2220      	movs	r2, #32
 8015568:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801556a:	693b      	ldr	r3, [r7, #16]
 801556c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801556e:	4611      	mov	r1, r2
 8015570:	4618      	mov	r0, r3
 8015572:	f7ff f920 	bl	80147b6 <ld_clust>
 8015576:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8015578:	693b      	ldr	r3, [r7, #16]
 801557a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801557c:	2200      	movs	r2, #0
 801557e:	4618      	mov	r0, r3
 8015580:	f7ff f938 	bl	80147f4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8015584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015586:	331c      	adds	r3, #28
 8015588:	2100      	movs	r1, #0
 801558a:	4618      	mov	r0, r3
 801558c:	f7fe f982 	bl	8013894 <st_dword>
					fs->wflag = 1;
 8015590:	693b      	ldr	r3, [r7, #16]
 8015592:	2201      	movs	r2, #1
 8015594:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8015596:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015598:	2b00      	cmp	r3, #0
 801559a:	d037      	beq.n	801560c <f_open+0x1d4>
						dw = fs->winsect;
 801559c:	693b      	ldr	r3, [r7, #16]
 801559e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80155a0:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80155a2:	f107 0314 	add.w	r3, r7, #20
 80155a6:	2200      	movs	r2, #0
 80155a8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80155aa:	4618      	mov	r0, r3
 80155ac:	f7fe fe4b 	bl	8014246 <remove_chain>
 80155b0:	4603      	mov	r3, r0
 80155b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80155b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80155ba:	2b00      	cmp	r3, #0
 80155bc:	d126      	bne.n	801560c <f_open+0x1d4>
							res = move_window(fs, dw);
 80155be:	693b      	ldr	r3, [r7, #16]
 80155c0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80155c2:	4618      	mov	r0, r3
 80155c4:	f7fe fbf2 	bl	8013dac <move_window>
 80155c8:	4603      	mov	r3, r0
 80155ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80155ce:	693b      	ldr	r3, [r7, #16]
 80155d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80155d2:	3a01      	subs	r2, #1
 80155d4:	611a      	str	r2, [r3, #16]
 80155d6:	e019      	b.n	801560c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80155d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80155dc:	2b00      	cmp	r3, #0
 80155de:	d115      	bne.n	801560c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80155e0:	7ebb      	ldrb	r3, [r7, #26]
 80155e2:	f003 0310 	and.w	r3, r3, #16
 80155e6:	2b00      	cmp	r3, #0
 80155e8:	d003      	beq.n	80155f2 <f_open+0x1ba>
					res = FR_NO_FILE;
 80155ea:	2304      	movs	r3, #4
 80155ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80155f0:	e00c      	b.n	801560c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80155f2:	79fb      	ldrb	r3, [r7, #7]
 80155f4:	f003 0302 	and.w	r3, r3, #2
 80155f8:	2b00      	cmp	r3, #0
 80155fa:	d007      	beq.n	801560c <f_open+0x1d4>
 80155fc:	7ebb      	ldrb	r3, [r7, #26]
 80155fe:	f003 0301 	and.w	r3, r3, #1
 8015602:	2b00      	cmp	r3, #0
 8015604:	d002      	beq.n	801560c <f_open+0x1d4>
						res = FR_DENIED;
 8015606:	2307      	movs	r3, #7
 8015608:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 801560c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8015610:	2b00      	cmp	r3, #0
 8015612:	d128      	bne.n	8015666 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8015614:	79fb      	ldrb	r3, [r7, #7]
 8015616:	f003 0308 	and.w	r3, r3, #8
 801561a:	2b00      	cmp	r3, #0
 801561c:	d003      	beq.n	8015626 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 801561e:	79fb      	ldrb	r3, [r7, #7]
 8015620:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015624:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8015626:	693b      	ldr	r3, [r7, #16]
 8015628:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801562a:	68fb      	ldr	r3, [r7, #12]
 801562c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 801562e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015630:	68fb      	ldr	r3, [r7, #12]
 8015632:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8015634:	79fb      	ldrb	r3, [r7, #7]
 8015636:	f023 0301 	bic.w	r3, r3, #1
 801563a:	2b00      	cmp	r3, #0
 801563c:	bf14      	ite	ne
 801563e:	2301      	movne	r3, #1
 8015640:	2300      	moveq	r3, #0
 8015642:	b2db      	uxtb	r3, r3
 8015644:	461a      	mov	r2, r3
 8015646:	f107 0314 	add.w	r3, r7, #20
 801564a:	4611      	mov	r1, r2
 801564c:	4618      	mov	r0, r3
 801564e:	f7fe fa7b 	bl	8013b48 <inc_lock>
 8015652:	4602      	mov	r2, r0
 8015654:	68fb      	ldr	r3, [r7, #12]
 8015656:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8015658:	68fb      	ldr	r3, [r7, #12]
 801565a:	691b      	ldr	r3, [r3, #16]
 801565c:	2b00      	cmp	r3, #0
 801565e:	d102      	bne.n	8015666 <f_open+0x22e>
 8015660:	2302      	movs	r3, #2
 8015662:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8015666:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801566a:	2b00      	cmp	r3, #0
 801566c:	f040 8095 	bne.w	801579a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8015670:	693b      	ldr	r3, [r7, #16]
 8015672:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015674:	4611      	mov	r1, r2
 8015676:	4618      	mov	r0, r3
 8015678:	f7ff f89d 	bl	80147b6 <ld_clust>
 801567c:	4602      	mov	r2, r0
 801567e:	68fb      	ldr	r3, [r7, #12]
 8015680:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8015682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015684:	331c      	adds	r3, #28
 8015686:	4618      	mov	r0, r3
 8015688:	f7fe f8c6 	bl	8013818 <ld_dword>
 801568c:	4602      	mov	r2, r0
 801568e:	68fb      	ldr	r3, [r7, #12]
 8015690:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8015692:	68fb      	ldr	r3, [r7, #12]
 8015694:	2200      	movs	r2, #0
 8015696:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8015698:	693a      	ldr	r2, [r7, #16]
 801569a:	68fb      	ldr	r3, [r7, #12]
 801569c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801569e:	693b      	ldr	r3, [r7, #16]
 80156a0:	88da      	ldrh	r2, [r3, #6]
 80156a2:	68fb      	ldr	r3, [r7, #12]
 80156a4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80156a6:	68fb      	ldr	r3, [r7, #12]
 80156a8:	79fa      	ldrb	r2, [r7, #7]
 80156aa:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80156ac:	68fb      	ldr	r3, [r7, #12]
 80156ae:	2200      	movs	r2, #0
 80156b0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80156b2:	68fb      	ldr	r3, [r7, #12]
 80156b4:	2200      	movs	r2, #0
 80156b6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80156b8:	68fb      	ldr	r3, [r7, #12]
 80156ba:	2200      	movs	r2, #0
 80156bc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80156be:	68fb      	ldr	r3, [r7, #12]
 80156c0:	3330      	adds	r3, #48	; 0x30
 80156c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80156c6:	2100      	movs	r1, #0
 80156c8:	4618      	mov	r0, r3
 80156ca:	f7fe f930 	bl	801392e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80156ce:	79fb      	ldrb	r3, [r7, #7]
 80156d0:	f003 0320 	and.w	r3, r3, #32
 80156d4:	2b00      	cmp	r3, #0
 80156d6:	d060      	beq.n	801579a <f_open+0x362>
 80156d8:	68fb      	ldr	r3, [r7, #12]
 80156da:	68db      	ldr	r3, [r3, #12]
 80156dc:	2b00      	cmp	r3, #0
 80156de:	d05c      	beq.n	801579a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80156e0:	68fb      	ldr	r3, [r7, #12]
 80156e2:	68da      	ldr	r2, [r3, #12]
 80156e4:	68fb      	ldr	r3, [r7, #12]
 80156e6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80156e8:	693b      	ldr	r3, [r7, #16]
 80156ea:	895b      	ldrh	r3, [r3, #10]
 80156ec:	025b      	lsls	r3, r3, #9
 80156ee:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80156f0:	68fb      	ldr	r3, [r7, #12]
 80156f2:	689b      	ldr	r3, [r3, #8]
 80156f4:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80156f6:	68fb      	ldr	r3, [r7, #12]
 80156f8:	68db      	ldr	r3, [r3, #12]
 80156fa:	657b      	str	r3, [r7, #84]	; 0x54
 80156fc:	e016      	b.n	801572c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80156fe:	68fb      	ldr	r3, [r7, #12]
 8015700:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8015702:	4618      	mov	r0, r3
 8015704:	f7fe fc0d 	bl	8013f22 <get_fat>
 8015708:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 801570a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801570c:	2b01      	cmp	r3, #1
 801570e:	d802      	bhi.n	8015716 <f_open+0x2de>
 8015710:	2302      	movs	r3, #2
 8015712:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8015716:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015718:	f1b3 3fff 	cmp.w	r3, #4294967295
 801571c:	d102      	bne.n	8015724 <f_open+0x2ec>
 801571e:	2301      	movs	r3, #1
 8015720:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8015724:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8015726:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015728:	1ad3      	subs	r3, r2, r3
 801572a:	657b      	str	r3, [r7, #84]	; 0x54
 801572c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8015730:	2b00      	cmp	r3, #0
 8015732:	d103      	bne.n	801573c <f_open+0x304>
 8015734:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8015736:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015738:	429a      	cmp	r2, r3
 801573a:	d8e0      	bhi.n	80156fe <f_open+0x2c6>
				}
				fp->clust = clst;
 801573c:	68fb      	ldr	r3, [r7, #12]
 801573e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8015740:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8015742:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8015746:	2b00      	cmp	r3, #0
 8015748:	d127      	bne.n	801579a <f_open+0x362>
 801574a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801574c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015750:	2b00      	cmp	r3, #0
 8015752:	d022      	beq.n	801579a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8015754:	693b      	ldr	r3, [r7, #16]
 8015756:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8015758:	4618      	mov	r0, r3
 801575a:	f7fe fbc3 	bl	8013ee4 <clust2sect>
 801575e:	6478      	str	r0, [r7, #68]	; 0x44
 8015760:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015762:	2b00      	cmp	r3, #0
 8015764:	d103      	bne.n	801576e <f_open+0x336>
						res = FR_INT_ERR;
 8015766:	2302      	movs	r3, #2
 8015768:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801576c:	e015      	b.n	801579a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801576e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015770:	0a5a      	lsrs	r2, r3, #9
 8015772:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015774:	441a      	add	r2, r3
 8015776:	68fb      	ldr	r3, [r7, #12]
 8015778:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801577a:	693b      	ldr	r3, [r7, #16]
 801577c:	7858      	ldrb	r0, [r3, #1]
 801577e:	68fb      	ldr	r3, [r7, #12]
 8015780:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015784:	68fb      	ldr	r3, [r7, #12]
 8015786:	6a1a      	ldr	r2, [r3, #32]
 8015788:	2301      	movs	r3, #1
 801578a:	f7fd ffcf 	bl	801372c <disk_read>
 801578e:	4603      	mov	r3, r0
 8015790:	2b00      	cmp	r3, #0
 8015792:	d002      	beq.n	801579a <f_open+0x362>
 8015794:	2301      	movs	r3, #1
 8015796:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801579a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801579e:	2b00      	cmp	r3, #0
 80157a0:	d002      	beq.n	80157a8 <f_open+0x370>
 80157a2:	68fb      	ldr	r3, [r7, #12]
 80157a4:	2200      	movs	r2, #0
 80157a6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80157a8:	693b      	ldr	r3, [r7, #16]
 80157aa:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 80157ae:	4611      	mov	r1, r2
 80157b0:	4618      	mov	r0, r3
 80157b2:	f7fe f92f 	bl	8013a14 <unlock_fs>
 80157b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80157ba:	4618      	mov	r0, r3
 80157bc:	3760      	adds	r7, #96	; 0x60
 80157be:	46bd      	mov	sp, r7
 80157c0:	bd80      	pop	{r7, pc}

080157c2 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80157c2:	b580      	push	{r7, lr}
 80157c4:	b08c      	sub	sp, #48	; 0x30
 80157c6:	af00      	add	r7, sp, #0
 80157c8:	60f8      	str	r0, [r7, #12]
 80157ca:	60b9      	str	r1, [r7, #8]
 80157cc:	607a      	str	r2, [r7, #4]
 80157ce:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80157d0:	68bb      	ldr	r3, [r7, #8]
 80157d2:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80157d4:	683b      	ldr	r3, [r7, #0]
 80157d6:	2200      	movs	r2, #0
 80157d8:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80157da:	68fb      	ldr	r3, [r7, #12]
 80157dc:	f107 0210 	add.w	r2, r7, #16
 80157e0:	4611      	mov	r1, r2
 80157e2:	4618      	mov	r0, r3
 80157e4:	f7ff fd7c 	bl	80152e0 <validate>
 80157e8:	4603      	mov	r3, r0
 80157ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80157ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80157f2:	2b00      	cmp	r3, #0
 80157f4:	d107      	bne.n	8015806 <f_write+0x44>
 80157f6:	68fb      	ldr	r3, [r7, #12]
 80157f8:	7d5b      	ldrb	r3, [r3, #21]
 80157fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80157fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015802:	2b00      	cmp	r3, #0
 8015804:	d009      	beq.n	801581a <f_write+0x58>
 8015806:	693b      	ldr	r3, [r7, #16]
 8015808:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 801580c:	4611      	mov	r1, r2
 801580e:	4618      	mov	r0, r3
 8015810:	f7fe f900 	bl	8013a14 <unlock_fs>
 8015814:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015818:	e173      	b.n	8015b02 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801581a:	68fb      	ldr	r3, [r7, #12]
 801581c:	7d1b      	ldrb	r3, [r3, #20]
 801581e:	f003 0302 	and.w	r3, r3, #2
 8015822:	2b00      	cmp	r3, #0
 8015824:	d106      	bne.n	8015834 <f_write+0x72>
 8015826:	693b      	ldr	r3, [r7, #16]
 8015828:	2107      	movs	r1, #7
 801582a:	4618      	mov	r0, r3
 801582c:	f7fe f8f2 	bl	8013a14 <unlock_fs>
 8015830:	2307      	movs	r3, #7
 8015832:	e166      	b.n	8015b02 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8015834:	68fb      	ldr	r3, [r7, #12]
 8015836:	699a      	ldr	r2, [r3, #24]
 8015838:	687b      	ldr	r3, [r7, #4]
 801583a:	441a      	add	r2, r3
 801583c:	68fb      	ldr	r3, [r7, #12]
 801583e:	699b      	ldr	r3, [r3, #24]
 8015840:	429a      	cmp	r2, r3
 8015842:	f080 814b 	bcs.w	8015adc <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8015846:	68fb      	ldr	r3, [r7, #12]
 8015848:	699b      	ldr	r3, [r3, #24]
 801584a:	43db      	mvns	r3, r3
 801584c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801584e:	e145      	b.n	8015adc <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8015850:	68fb      	ldr	r3, [r7, #12]
 8015852:	699b      	ldr	r3, [r3, #24]
 8015854:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015858:	2b00      	cmp	r3, #0
 801585a:	f040 8101 	bne.w	8015a60 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801585e:	68fb      	ldr	r3, [r7, #12]
 8015860:	699b      	ldr	r3, [r3, #24]
 8015862:	0a5b      	lsrs	r3, r3, #9
 8015864:	693a      	ldr	r2, [r7, #16]
 8015866:	8952      	ldrh	r2, [r2, #10]
 8015868:	3a01      	subs	r2, #1
 801586a:	4013      	ands	r3, r2
 801586c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801586e:	69bb      	ldr	r3, [r7, #24]
 8015870:	2b00      	cmp	r3, #0
 8015872:	d14d      	bne.n	8015910 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8015874:	68fb      	ldr	r3, [r7, #12]
 8015876:	699b      	ldr	r3, [r3, #24]
 8015878:	2b00      	cmp	r3, #0
 801587a:	d10c      	bne.n	8015896 <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801587c:	68fb      	ldr	r3, [r7, #12]
 801587e:	689b      	ldr	r3, [r3, #8]
 8015880:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8015882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015884:	2b00      	cmp	r3, #0
 8015886:	d11a      	bne.n	80158be <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8015888:	68fb      	ldr	r3, [r7, #12]
 801588a:	2100      	movs	r1, #0
 801588c:	4618      	mov	r0, r3
 801588e:	f7fe fd3f 	bl	8014310 <create_chain>
 8015892:	62b8      	str	r0, [r7, #40]	; 0x28
 8015894:	e013      	b.n	80158be <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8015896:	68fb      	ldr	r3, [r7, #12]
 8015898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801589a:	2b00      	cmp	r3, #0
 801589c:	d007      	beq.n	80158ae <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801589e:	68fb      	ldr	r3, [r7, #12]
 80158a0:	699b      	ldr	r3, [r3, #24]
 80158a2:	4619      	mov	r1, r3
 80158a4:	68f8      	ldr	r0, [r7, #12]
 80158a6:	f7fe fdcb 	bl	8014440 <clmt_clust>
 80158aa:	62b8      	str	r0, [r7, #40]	; 0x28
 80158ac:	e007      	b.n	80158be <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80158ae:	68fa      	ldr	r2, [r7, #12]
 80158b0:	68fb      	ldr	r3, [r7, #12]
 80158b2:	69db      	ldr	r3, [r3, #28]
 80158b4:	4619      	mov	r1, r3
 80158b6:	4610      	mov	r0, r2
 80158b8:	f7fe fd2a 	bl	8014310 <create_chain>
 80158bc:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80158be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158c0:	2b00      	cmp	r3, #0
 80158c2:	f000 8110 	beq.w	8015ae6 <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80158c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158c8:	2b01      	cmp	r3, #1
 80158ca:	d109      	bne.n	80158e0 <f_write+0x11e>
 80158cc:	68fb      	ldr	r3, [r7, #12]
 80158ce:	2202      	movs	r2, #2
 80158d0:	755a      	strb	r2, [r3, #21]
 80158d2:	693b      	ldr	r3, [r7, #16]
 80158d4:	2102      	movs	r1, #2
 80158d6:	4618      	mov	r0, r3
 80158d8:	f7fe f89c 	bl	8013a14 <unlock_fs>
 80158dc:	2302      	movs	r3, #2
 80158de:	e110      	b.n	8015b02 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80158e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80158e6:	d109      	bne.n	80158fc <f_write+0x13a>
 80158e8:	68fb      	ldr	r3, [r7, #12]
 80158ea:	2201      	movs	r2, #1
 80158ec:	755a      	strb	r2, [r3, #21]
 80158ee:	693b      	ldr	r3, [r7, #16]
 80158f0:	2101      	movs	r1, #1
 80158f2:	4618      	mov	r0, r3
 80158f4:	f7fe f88e 	bl	8013a14 <unlock_fs>
 80158f8:	2301      	movs	r3, #1
 80158fa:	e102      	b.n	8015b02 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 80158fc:	68fb      	ldr	r3, [r7, #12]
 80158fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015900:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8015902:	68fb      	ldr	r3, [r7, #12]
 8015904:	689b      	ldr	r3, [r3, #8]
 8015906:	2b00      	cmp	r3, #0
 8015908:	d102      	bne.n	8015910 <f_write+0x14e>
 801590a:	68fb      	ldr	r3, [r7, #12]
 801590c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801590e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8015910:	68fb      	ldr	r3, [r7, #12]
 8015912:	7d1b      	ldrb	r3, [r3, #20]
 8015914:	b25b      	sxtb	r3, r3
 8015916:	2b00      	cmp	r3, #0
 8015918:	da1d      	bge.n	8015956 <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801591a:	693b      	ldr	r3, [r7, #16]
 801591c:	7858      	ldrb	r0, [r3, #1]
 801591e:	68fb      	ldr	r3, [r7, #12]
 8015920:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015924:	68fb      	ldr	r3, [r7, #12]
 8015926:	6a1a      	ldr	r2, [r3, #32]
 8015928:	2301      	movs	r3, #1
 801592a:	f7fd ff1f 	bl	801376c <disk_write>
 801592e:	4603      	mov	r3, r0
 8015930:	2b00      	cmp	r3, #0
 8015932:	d009      	beq.n	8015948 <f_write+0x186>
 8015934:	68fb      	ldr	r3, [r7, #12]
 8015936:	2201      	movs	r2, #1
 8015938:	755a      	strb	r2, [r3, #21]
 801593a:	693b      	ldr	r3, [r7, #16]
 801593c:	2101      	movs	r1, #1
 801593e:	4618      	mov	r0, r3
 8015940:	f7fe f868 	bl	8013a14 <unlock_fs>
 8015944:	2301      	movs	r3, #1
 8015946:	e0dc      	b.n	8015b02 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 8015948:	68fb      	ldr	r3, [r7, #12]
 801594a:	7d1b      	ldrb	r3, [r3, #20]
 801594c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015950:	b2da      	uxtb	r2, r3
 8015952:	68fb      	ldr	r3, [r7, #12]
 8015954:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8015956:	693a      	ldr	r2, [r7, #16]
 8015958:	68fb      	ldr	r3, [r7, #12]
 801595a:	69db      	ldr	r3, [r3, #28]
 801595c:	4619      	mov	r1, r3
 801595e:	4610      	mov	r0, r2
 8015960:	f7fe fac0 	bl	8013ee4 <clust2sect>
 8015964:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8015966:	697b      	ldr	r3, [r7, #20]
 8015968:	2b00      	cmp	r3, #0
 801596a:	d109      	bne.n	8015980 <f_write+0x1be>
 801596c:	68fb      	ldr	r3, [r7, #12]
 801596e:	2202      	movs	r2, #2
 8015970:	755a      	strb	r2, [r3, #21]
 8015972:	693b      	ldr	r3, [r7, #16]
 8015974:	2102      	movs	r1, #2
 8015976:	4618      	mov	r0, r3
 8015978:	f7fe f84c 	bl	8013a14 <unlock_fs>
 801597c:	2302      	movs	r3, #2
 801597e:	e0c0      	b.n	8015b02 <f_write+0x340>
			sect += csect;
 8015980:	697a      	ldr	r2, [r7, #20]
 8015982:	69bb      	ldr	r3, [r7, #24]
 8015984:	4413      	add	r3, r2
 8015986:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8015988:	687b      	ldr	r3, [r7, #4]
 801598a:	0a5b      	lsrs	r3, r3, #9
 801598c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801598e:	6a3b      	ldr	r3, [r7, #32]
 8015990:	2b00      	cmp	r3, #0
 8015992:	d041      	beq.n	8015a18 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8015994:	69ba      	ldr	r2, [r7, #24]
 8015996:	6a3b      	ldr	r3, [r7, #32]
 8015998:	4413      	add	r3, r2
 801599a:	693a      	ldr	r2, [r7, #16]
 801599c:	8952      	ldrh	r2, [r2, #10]
 801599e:	4293      	cmp	r3, r2
 80159a0:	d905      	bls.n	80159ae <f_write+0x1ec>
					cc = fs->csize - csect;
 80159a2:	693b      	ldr	r3, [r7, #16]
 80159a4:	895b      	ldrh	r3, [r3, #10]
 80159a6:	461a      	mov	r2, r3
 80159a8:	69bb      	ldr	r3, [r7, #24]
 80159aa:	1ad3      	subs	r3, r2, r3
 80159ac:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80159ae:	693b      	ldr	r3, [r7, #16]
 80159b0:	7858      	ldrb	r0, [r3, #1]
 80159b2:	6a3b      	ldr	r3, [r7, #32]
 80159b4:	697a      	ldr	r2, [r7, #20]
 80159b6:	69f9      	ldr	r1, [r7, #28]
 80159b8:	f7fd fed8 	bl	801376c <disk_write>
 80159bc:	4603      	mov	r3, r0
 80159be:	2b00      	cmp	r3, #0
 80159c0:	d009      	beq.n	80159d6 <f_write+0x214>
 80159c2:	68fb      	ldr	r3, [r7, #12]
 80159c4:	2201      	movs	r2, #1
 80159c6:	755a      	strb	r2, [r3, #21]
 80159c8:	693b      	ldr	r3, [r7, #16]
 80159ca:	2101      	movs	r1, #1
 80159cc:	4618      	mov	r0, r3
 80159ce:	f7fe f821 	bl	8013a14 <unlock_fs>
 80159d2:	2301      	movs	r3, #1
 80159d4:	e095      	b.n	8015b02 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80159d6:	68fb      	ldr	r3, [r7, #12]
 80159d8:	6a1a      	ldr	r2, [r3, #32]
 80159da:	697b      	ldr	r3, [r7, #20]
 80159dc:	1ad3      	subs	r3, r2, r3
 80159de:	6a3a      	ldr	r2, [r7, #32]
 80159e0:	429a      	cmp	r2, r3
 80159e2:	d915      	bls.n	8015a10 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80159e4:	68fb      	ldr	r3, [r7, #12]
 80159e6:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80159ea:	68fb      	ldr	r3, [r7, #12]
 80159ec:	6a1a      	ldr	r2, [r3, #32]
 80159ee:	697b      	ldr	r3, [r7, #20]
 80159f0:	1ad3      	subs	r3, r2, r3
 80159f2:	025b      	lsls	r3, r3, #9
 80159f4:	69fa      	ldr	r2, [r7, #28]
 80159f6:	4413      	add	r3, r2
 80159f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80159fc:	4619      	mov	r1, r3
 80159fe:	f7fd ff75 	bl	80138ec <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8015a02:	68fb      	ldr	r3, [r7, #12]
 8015a04:	7d1b      	ldrb	r3, [r3, #20]
 8015a06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015a0a:	b2da      	uxtb	r2, r3
 8015a0c:	68fb      	ldr	r3, [r7, #12]
 8015a0e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8015a10:	6a3b      	ldr	r3, [r7, #32]
 8015a12:	025b      	lsls	r3, r3, #9
 8015a14:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8015a16:	e044      	b.n	8015aa2 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8015a18:	68fb      	ldr	r3, [r7, #12]
 8015a1a:	6a1b      	ldr	r3, [r3, #32]
 8015a1c:	697a      	ldr	r2, [r7, #20]
 8015a1e:	429a      	cmp	r2, r3
 8015a20:	d01b      	beq.n	8015a5a <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 8015a22:	68fb      	ldr	r3, [r7, #12]
 8015a24:	699a      	ldr	r2, [r3, #24]
 8015a26:	68fb      	ldr	r3, [r7, #12]
 8015a28:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8015a2a:	429a      	cmp	r2, r3
 8015a2c:	d215      	bcs.n	8015a5a <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8015a2e:	693b      	ldr	r3, [r7, #16]
 8015a30:	7858      	ldrb	r0, [r3, #1]
 8015a32:	68fb      	ldr	r3, [r7, #12]
 8015a34:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015a38:	2301      	movs	r3, #1
 8015a3a:	697a      	ldr	r2, [r7, #20]
 8015a3c:	f7fd fe76 	bl	801372c <disk_read>
 8015a40:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8015a42:	2b00      	cmp	r3, #0
 8015a44:	d009      	beq.n	8015a5a <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 8015a46:	68fb      	ldr	r3, [r7, #12]
 8015a48:	2201      	movs	r2, #1
 8015a4a:	755a      	strb	r2, [r3, #21]
 8015a4c:	693b      	ldr	r3, [r7, #16]
 8015a4e:	2101      	movs	r1, #1
 8015a50:	4618      	mov	r0, r3
 8015a52:	f7fd ffdf 	bl	8013a14 <unlock_fs>
 8015a56:	2301      	movs	r3, #1
 8015a58:	e053      	b.n	8015b02 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 8015a5a:	68fb      	ldr	r3, [r7, #12]
 8015a5c:	697a      	ldr	r2, [r7, #20]
 8015a5e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8015a60:	68fb      	ldr	r3, [r7, #12]
 8015a62:	699b      	ldr	r3, [r3, #24]
 8015a64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015a68:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8015a6c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8015a6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015a70:	687b      	ldr	r3, [r7, #4]
 8015a72:	429a      	cmp	r2, r3
 8015a74:	d901      	bls.n	8015a7a <f_write+0x2b8>
 8015a76:	687b      	ldr	r3, [r7, #4]
 8015a78:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8015a7a:	68fb      	ldr	r3, [r7, #12]
 8015a7c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8015a80:	68fb      	ldr	r3, [r7, #12]
 8015a82:	699b      	ldr	r3, [r3, #24]
 8015a84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015a88:	4413      	add	r3, r2
 8015a8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015a8c:	69f9      	ldr	r1, [r7, #28]
 8015a8e:	4618      	mov	r0, r3
 8015a90:	f7fd ff2c 	bl	80138ec <mem_cpy>
		fp->flag |= FA_DIRTY;
 8015a94:	68fb      	ldr	r3, [r7, #12]
 8015a96:	7d1b      	ldrb	r3, [r3, #20]
 8015a98:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8015a9c:	b2da      	uxtb	r2, r3
 8015a9e:	68fb      	ldr	r3, [r7, #12]
 8015aa0:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8015aa2:	69fa      	ldr	r2, [r7, #28]
 8015aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015aa6:	4413      	add	r3, r2
 8015aa8:	61fb      	str	r3, [r7, #28]
 8015aaa:	68fb      	ldr	r3, [r7, #12]
 8015aac:	699a      	ldr	r2, [r3, #24]
 8015aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ab0:	441a      	add	r2, r3
 8015ab2:	68fb      	ldr	r3, [r7, #12]
 8015ab4:	619a      	str	r2, [r3, #24]
 8015ab6:	68fb      	ldr	r3, [r7, #12]
 8015ab8:	68da      	ldr	r2, [r3, #12]
 8015aba:	68fb      	ldr	r3, [r7, #12]
 8015abc:	699b      	ldr	r3, [r3, #24]
 8015abe:	429a      	cmp	r2, r3
 8015ac0:	bf38      	it	cc
 8015ac2:	461a      	movcc	r2, r3
 8015ac4:	68fb      	ldr	r3, [r7, #12]
 8015ac6:	60da      	str	r2, [r3, #12]
 8015ac8:	683b      	ldr	r3, [r7, #0]
 8015aca:	681a      	ldr	r2, [r3, #0]
 8015acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ace:	441a      	add	r2, r3
 8015ad0:	683b      	ldr	r3, [r7, #0]
 8015ad2:	601a      	str	r2, [r3, #0]
 8015ad4:	687a      	ldr	r2, [r7, #4]
 8015ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ad8:	1ad3      	subs	r3, r2, r3
 8015ada:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8015adc:	687b      	ldr	r3, [r7, #4]
 8015ade:	2b00      	cmp	r3, #0
 8015ae0:	f47f aeb6 	bne.w	8015850 <f_write+0x8e>
 8015ae4:	e000      	b.n	8015ae8 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8015ae6:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8015ae8:	68fb      	ldr	r3, [r7, #12]
 8015aea:	7d1b      	ldrb	r3, [r3, #20]
 8015aec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015af0:	b2da      	uxtb	r2, r3
 8015af2:	68fb      	ldr	r3, [r7, #12]
 8015af4:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8015af6:	693b      	ldr	r3, [r7, #16]
 8015af8:	2100      	movs	r1, #0
 8015afa:	4618      	mov	r0, r3
 8015afc:	f7fd ff8a 	bl	8013a14 <unlock_fs>
 8015b00:	2300      	movs	r3, #0
}
 8015b02:	4618      	mov	r0, r3
 8015b04:	3730      	adds	r7, #48	; 0x30
 8015b06:	46bd      	mov	sp, r7
 8015b08:	bd80      	pop	{r7, pc}

08015b0a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8015b0a:	b580      	push	{r7, lr}
 8015b0c:	b086      	sub	sp, #24
 8015b0e:	af00      	add	r7, sp, #0
 8015b10:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8015b12:	687b      	ldr	r3, [r7, #4]
 8015b14:	f107 0208 	add.w	r2, r7, #8
 8015b18:	4611      	mov	r1, r2
 8015b1a:	4618      	mov	r0, r3
 8015b1c:	f7ff fbe0 	bl	80152e0 <validate>
 8015b20:	4603      	mov	r3, r0
 8015b22:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8015b24:	7dfb      	ldrb	r3, [r7, #23]
 8015b26:	2b00      	cmp	r3, #0
 8015b28:	d16d      	bne.n	8015c06 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8015b2a:	687b      	ldr	r3, [r7, #4]
 8015b2c:	7d1b      	ldrb	r3, [r3, #20]
 8015b2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015b32:	2b00      	cmp	r3, #0
 8015b34:	d067      	beq.n	8015c06 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8015b36:	687b      	ldr	r3, [r7, #4]
 8015b38:	7d1b      	ldrb	r3, [r3, #20]
 8015b3a:	b25b      	sxtb	r3, r3
 8015b3c:	2b00      	cmp	r3, #0
 8015b3e:	da1a      	bge.n	8015b76 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8015b40:	68bb      	ldr	r3, [r7, #8]
 8015b42:	7858      	ldrb	r0, [r3, #1]
 8015b44:	687b      	ldr	r3, [r7, #4]
 8015b46:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015b4a:	687b      	ldr	r3, [r7, #4]
 8015b4c:	6a1a      	ldr	r2, [r3, #32]
 8015b4e:	2301      	movs	r3, #1
 8015b50:	f7fd fe0c 	bl	801376c <disk_write>
 8015b54:	4603      	mov	r3, r0
 8015b56:	2b00      	cmp	r3, #0
 8015b58:	d006      	beq.n	8015b68 <f_sync+0x5e>
 8015b5a:	68bb      	ldr	r3, [r7, #8]
 8015b5c:	2101      	movs	r1, #1
 8015b5e:	4618      	mov	r0, r3
 8015b60:	f7fd ff58 	bl	8013a14 <unlock_fs>
 8015b64:	2301      	movs	r3, #1
 8015b66:	e055      	b.n	8015c14 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8015b68:	687b      	ldr	r3, [r7, #4]
 8015b6a:	7d1b      	ldrb	r3, [r3, #20]
 8015b6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015b70:	b2da      	uxtb	r2, r3
 8015b72:	687b      	ldr	r3, [r7, #4]
 8015b74:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8015b76:	f7ec fa15 	bl	8001fa4 <get_fattime>
 8015b7a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8015b7c:	68ba      	ldr	r2, [r7, #8]
 8015b7e:	687b      	ldr	r3, [r7, #4]
 8015b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b82:	4619      	mov	r1, r3
 8015b84:	4610      	mov	r0, r2
 8015b86:	f7fe f911 	bl	8013dac <move_window>
 8015b8a:	4603      	mov	r3, r0
 8015b8c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8015b8e:	7dfb      	ldrb	r3, [r7, #23]
 8015b90:	2b00      	cmp	r3, #0
 8015b92:	d138      	bne.n	8015c06 <f_sync+0xfc>
					dir = fp->dir_ptr;
 8015b94:	687b      	ldr	r3, [r7, #4]
 8015b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015b98:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8015b9a:	68fb      	ldr	r3, [r7, #12]
 8015b9c:	330b      	adds	r3, #11
 8015b9e:	781a      	ldrb	r2, [r3, #0]
 8015ba0:	68fb      	ldr	r3, [r7, #12]
 8015ba2:	330b      	adds	r3, #11
 8015ba4:	f042 0220 	orr.w	r2, r2, #32
 8015ba8:	b2d2      	uxtb	r2, r2
 8015baa:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8015bac:	687b      	ldr	r3, [r7, #4]
 8015bae:	6818      	ldr	r0, [r3, #0]
 8015bb0:	687b      	ldr	r3, [r7, #4]
 8015bb2:	689b      	ldr	r3, [r3, #8]
 8015bb4:	461a      	mov	r2, r3
 8015bb6:	68f9      	ldr	r1, [r7, #12]
 8015bb8:	f7fe fe1c 	bl	80147f4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8015bbc:	68fb      	ldr	r3, [r7, #12]
 8015bbe:	f103 021c 	add.w	r2, r3, #28
 8015bc2:	687b      	ldr	r3, [r7, #4]
 8015bc4:	68db      	ldr	r3, [r3, #12]
 8015bc6:	4619      	mov	r1, r3
 8015bc8:	4610      	mov	r0, r2
 8015bca:	f7fd fe63 	bl	8013894 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8015bce:	68fb      	ldr	r3, [r7, #12]
 8015bd0:	3316      	adds	r3, #22
 8015bd2:	6939      	ldr	r1, [r7, #16]
 8015bd4:	4618      	mov	r0, r3
 8015bd6:	f7fd fe5d 	bl	8013894 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8015bda:	68fb      	ldr	r3, [r7, #12]
 8015bdc:	3312      	adds	r3, #18
 8015bde:	2100      	movs	r1, #0
 8015be0:	4618      	mov	r0, r3
 8015be2:	f7fd fe3c 	bl	801385e <st_word>
					fs->wflag = 1;
 8015be6:	68bb      	ldr	r3, [r7, #8]
 8015be8:	2201      	movs	r2, #1
 8015bea:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8015bec:	68bb      	ldr	r3, [r7, #8]
 8015bee:	4618      	mov	r0, r3
 8015bf0:	f7fe f90a 	bl	8013e08 <sync_fs>
 8015bf4:	4603      	mov	r3, r0
 8015bf6:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8015bf8:	687b      	ldr	r3, [r7, #4]
 8015bfa:	7d1b      	ldrb	r3, [r3, #20]
 8015bfc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015c00:	b2da      	uxtb	r2, r3
 8015c02:	687b      	ldr	r3, [r7, #4]
 8015c04:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8015c06:	68bb      	ldr	r3, [r7, #8]
 8015c08:	7dfa      	ldrb	r2, [r7, #23]
 8015c0a:	4611      	mov	r1, r2
 8015c0c:	4618      	mov	r0, r3
 8015c0e:	f7fd ff01 	bl	8013a14 <unlock_fs>
 8015c12:	7dfb      	ldrb	r3, [r7, #23]
}
 8015c14:	4618      	mov	r0, r3
 8015c16:	3718      	adds	r7, #24
 8015c18:	46bd      	mov	sp, r7
 8015c1a:	bd80      	pop	{r7, pc}

08015c1c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8015c1c:	b580      	push	{r7, lr}
 8015c1e:	b084      	sub	sp, #16
 8015c20:	af00      	add	r7, sp, #0
 8015c22:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8015c24:	6878      	ldr	r0, [r7, #4]
 8015c26:	f7ff ff70 	bl	8015b0a <f_sync>
 8015c2a:	4603      	mov	r3, r0
 8015c2c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8015c2e:	7bfb      	ldrb	r3, [r7, #15]
 8015c30:	2b00      	cmp	r3, #0
 8015c32:	d11d      	bne.n	8015c70 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8015c34:	687b      	ldr	r3, [r7, #4]
 8015c36:	f107 0208 	add.w	r2, r7, #8
 8015c3a:	4611      	mov	r1, r2
 8015c3c:	4618      	mov	r0, r3
 8015c3e:	f7ff fb4f 	bl	80152e0 <validate>
 8015c42:	4603      	mov	r3, r0
 8015c44:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8015c46:	7bfb      	ldrb	r3, [r7, #15]
 8015c48:	2b00      	cmp	r3, #0
 8015c4a:	d111      	bne.n	8015c70 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8015c4c:	687b      	ldr	r3, [r7, #4]
 8015c4e:	691b      	ldr	r3, [r3, #16]
 8015c50:	4618      	mov	r0, r3
 8015c52:	f7fe f807 	bl	8013c64 <dec_lock>
 8015c56:	4603      	mov	r3, r0
 8015c58:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8015c5a:	7bfb      	ldrb	r3, [r7, #15]
 8015c5c:	2b00      	cmp	r3, #0
 8015c5e:	d102      	bne.n	8015c66 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8015c60:	687b      	ldr	r3, [r7, #4]
 8015c62:	2200      	movs	r2, #0
 8015c64:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8015c66:	68bb      	ldr	r3, [r7, #8]
 8015c68:	2100      	movs	r1, #0
 8015c6a:	4618      	mov	r0, r3
 8015c6c:	f7fd fed2 	bl	8013a14 <unlock_fs>
#endif
		}
	}
	return res;
 8015c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8015c72:	4618      	mov	r0, r3
 8015c74:	3710      	adds	r7, #16
 8015c76:	46bd      	mov	sp, r7
 8015c78:	bd80      	pop	{r7, pc}

08015c7a <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8015c7a:	b580      	push	{r7, lr}
 8015c7c:	b086      	sub	sp, #24
 8015c7e:	af00      	add	r7, sp, #0
 8015c80:	6078      	str	r0, [r7, #4]
 8015c82:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8015c84:	687b      	ldr	r3, [r7, #4]
 8015c86:	2b00      	cmp	r3, #0
 8015c88:	d101      	bne.n	8015c8e <f_opendir+0x14>
 8015c8a:	2309      	movs	r3, #9
 8015c8c:	e06a      	b.n	8015d64 <f_opendir+0xea>

	/* Get logical drive */
	obj = &dp->obj;
 8015c8e:	687b      	ldr	r3, [r7, #4]
 8015c90:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8015c92:	f107 010c 	add.w	r1, r7, #12
 8015c96:	463b      	mov	r3, r7
 8015c98:	2200      	movs	r2, #0
 8015c9a:	4618      	mov	r0, r3
 8015c9c:	f7ff f8cc 	bl	8014e38 <find_volume>
 8015ca0:	4603      	mov	r3, r0
 8015ca2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8015ca4:	7dfb      	ldrb	r3, [r7, #23]
 8015ca6:	2b00      	cmp	r3, #0
 8015ca8:	d14f      	bne.n	8015d4a <f_opendir+0xd0>
		obj->fs = fs;
 8015caa:	68fa      	ldr	r2, [r7, #12]
 8015cac:	693b      	ldr	r3, [r7, #16]
 8015cae:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8015cb0:	683b      	ldr	r3, [r7, #0]
 8015cb2:	4619      	mov	r1, r3
 8015cb4:	6878      	ldr	r0, [r7, #4]
 8015cb6:	f7fe ffb3 	bl	8014c20 <follow_path>
 8015cba:	4603      	mov	r3, r0
 8015cbc:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8015cbe:	7dfb      	ldrb	r3, [r7, #23]
 8015cc0:	2b00      	cmp	r3, #0
 8015cc2:	d13d      	bne.n	8015d40 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8015cc4:	687b      	ldr	r3, [r7, #4]
 8015cc6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8015cca:	b25b      	sxtb	r3, r3
 8015ccc:	2b00      	cmp	r3, #0
 8015cce:	db12      	blt.n	8015cf6 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8015cd0:	693b      	ldr	r3, [r7, #16]
 8015cd2:	799b      	ldrb	r3, [r3, #6]
 8015cd4:	f003 0310 	and.w	r3, r3, #16
 8015cd8:	2b00      	cmp	r3, #0
 8015cda:	d00a      	beq.n	8015cf2 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8015cdc:	68fa      	ldr	r2, [r7, #12]
 8015cde:	687b      	ldr	r3, [r7, #4]
 8015ce0:	6a1b      	ldr	r3, [r3, #32]
 8015ce2:	4619      	mov	r1, r3
 8015ce4:	4610      	mov	r0, r2
 8015ce6:	f7fe fd66 	bl	80147b6 <ld_clust>
 8015cea:	4602      	mov	r2, r0
 8015cec:	693b      	ldr	r3, [r7, #16]
 8015cee:	609a      	str	r2, [r3, #8]
 8015cf0:	e001      	b.n	8015cf6 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8015cf2:	2305      	movs	r3, #5
 8015cf4:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8015cf6:	7dfb      	ldrb	r3, [r7, #23]
 8015cf8:	2b00      	cmp	r3, #0
 8015cfa:	d121      	bne.n	8015d40 <f_opendir+0xc6>
				obj->id = fs->id;
 8015cfc:	68fb      	ldr	r3, [r7, #12]
 8015cfe:	88da      	ldrh	r2, [r3, #6]
 8015d00:	693b      	ldr	r3, [r7, #16]
 8015d02:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8015d04:	2100      	movs	r1, #0
 8015d06:	6878      	ldr	r0, [r7, #4]
 8015d08:	f7fe fbce 	bl	80144a8 <dir_sdi>
 8015d0c:	4603      	mov	r3, r0
 8015d0e:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8015d10:	7dfb      	ldrb	r3, [r7, #23]
 8015d12:	2b00      	cmp	r3, #0
 8015d14:	d114      	bne.n	8015d40 <f_opendir+0xc6>
					if (obj->sclust) {
 8015d16:	693b      	ldr	r3, [r7, #16]
 8015d18:	689b      	ldr	r3, [r3, #8]
 8015d1a:	2b00      	cmp	r3, #0
 8015d1c:	d00d      	beq.n	8015d3a <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8015d1e:	2100      	movs	r1, #0
 8015d20:	6878      	ldr	r0, [r7, #4]
 8015d22:	f7fd ff11 	bl	8013b48 <inc_lock>
 8015d26:	4602      	mov	r2, r0
 8015d28:	693b      	ldr	r3, [r7, #16]
 8015d2a:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8015d2c:	693b      	ldr	r3, [r7, #16]
 8015d2e:	691b      	ldr	r3, [r3, #16]
 8015d30:	2b00      	cmp	r3, #0
 8015d32:	d105      	bne.n	8015d40 <f_opendir+0xc6>
 8015d34:	2312      	movs	r3, #18
 8015d36:	75fb      	strb	r3, [r7, #23]
 8015d38:	e002      	b.n	8015d40 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8015d3a:	693b      	ldr	r3, [r7, #16]
 8015d3c:	2200      	movs	r2, #0
 8015d3e:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8015d40:	7dfb      	ldrb	r3, [r7, #23]
 8015d42:	2b04      	cmp	r3, #4
 8015d44:	d101      	bne.n	8015d4a <f_opendir+0xd0>
 8015d46:	2305      	movs	r3, #5
 8015d48:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8015d4a:	7dfb      	ldrb	r3, [r7, #23]
 8015d4c:	2b00      	cmp	r3, #0
 8015d4e:	d002      	beq.n	8015d56 <f_opendir+0xdc>
 8015d50:	693b      	ldr	r3, [r7, #16]
 8015d52:	2200      	movs	r2, #0
 8015d54:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8015d56:	68fb      	ldr	r3, [r7, #12]
 8015d58:	7dfa      	ldrb	r2, [r7, #23]
 8015d5a:	4611      	mov	r1, r2
 8015d5c:	4618      	mov	r0, r3
 8015d5e:	f7fd fe59 	bl	8013a14 <unlock_fs>
 8015d62:	7dfb      	ldrb	r3, [r7, #23]
}
 8015d64:	4618      	mov	r0, r3
 8015d66:	3718      	adds	r7, #24
 8015d68:	46bd      	mov	sp, r7
 8015d6a:	bd80      	pop	{r7, pc}

08015d6c <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8015d6c:	b580      	push	{r7, lr}
 8015d6e:	b084      	sub	sp, #16
 8015d70:	af00      	add	r7, sp, #0
 8015d72:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8015d74:	687b      	ldr	r3, [r7, #4]
 8015d76:	f107 0208 	add.w	r2, r7, #8
 8015d7a:	4611      	mov	r1, r2
 8015d7c:	4618      	mov	r0, r3
 8015d7e:	f7ff faaf 	bl	80152e0 <validate>
 8015d82:	4603      	mov	r3, r0
 8015d84:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8015d86:	7bfb      	ldrb	r3, [r7, #15]
 8015d88:	2b00      	cmp	r3, #0
 8015d8a:	d115      	bne.n	8015db8 <f_closedir+0x4c>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8015d8c:	687b      	ldr	r3, [r7, #4]
 8015d8e:	691b      	ldr	r3, [r3, #16]
 8015d90:	2b00      	cmp	r3, #0
 8015d92:	d006      	beq.n	8015da2 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8015d94:	687b      	ldr	r3, [r7, #4]
 8015d96:	691b      	ldr	r3, [r3, #16]
 8015d98:	4618      	mov	r0, r3
 8015d9a:	f7fd ff63 	bl	8013c64 <dec_lock>
 8015d9e:	4603      	mov	r3, r0
 8015da0:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8015da2:	7bfb      	ldrb	r3, [r7, #15]
 8015da4:	2b00      	cmp	r3, #0
 8015da6:	d102      	bne.n	8015dae <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8015da8:	687b      	ldr	r3, [r7, #4]
 8015daa:	2200      	movs	r2, #0
 8015dac:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 8015dae:	68bb      	ldr	r3, [r7, #8]
 8015db0:	2100      	movs	r1, #0
 8015db2:	4618      	mov	r0, r3
 8015db4:	f7fd fe2e 	bl	8013a14 <unlock_fs>
#endif
	}
	return res;
 8015db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8015dba:	4618      	mov	r0, r3
 8015dbc:	3710      	adds	r7, #16
 8015dbe:	46bd      	mov	sp, r7
 8015dc0:	bd80      	pop	{r7, pc}

08015dc2 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8015dc2:	b580      	push	{r7, lr}
 8015dc4:	b084      	sub	sp, #16
 8015dc6:	af00      	add	r7, sp, #0
 8015dc8:	6078      	str	r0, [r7, #4]
 8015dca:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8015dcc:	687b      	ldr	r3, [r7, #4]
 8015dce:	f107 0208 	add.w	r2, r7, #8
 8015dd2:	4611      	mov	r1, r2
 8015dd4:	4618      	mov	r0, r3
 8015dd6:	f7ff fa83 	bl	80152e0 <validate>
 8015dda:	4603      	mov	r3, r0
 8015ddc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8015dde:	7bfb      	ldrb	r3, [r7, #15]
 8015de0:	2b00      	cmp	r3, #0
 8015de2:	d126      	bne.n	8015e32 <f_readdir+0x70>
		if (!fno) {
 8015de4:	683b      	ldr	r3, [r7, #0]
 8015de6:	2b00      	cmp	r3, #0
 8015de8:	d106      	bne.n	8015df8 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8015dea:	2100      	movs	r1, #0
 8015dec:	6878      	ldr	r0, [r7, #4]
 8015dee:	f7fe fb5b 	bl	80144a8 <dir_sdi>
 8015df2:	4603      	mov	r3, r0
 8015df4:	73fb      	strb	r3, [r7, #15]
 8015df6:	e01c      	b.n	8015e32 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8015df8:	2100      	movs	r1, #0
 8015dfa:	6878      	ldr	r0, [r7, #4]
 8015dfc:	f7fe fd1a 	bl	8014834 <dir_read>
 8015e00:	4603      	mov	r3, r0
 8015e02:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8015e04:	7bfb      	ldrb	r3, [r7, #15]
 8015e06:	2b04      	cmp	r3, #4
 8015e08:	d101      	bne.n	8015e0e <f_readdir+0x4c>
 8015e0a:	2300      	movs	r3, #0
 8015e0c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8015e0e:	7bfb      	ldrb	r3, [r7, #15]
 8015e10:	2b00      	cmp	r3, #0
 8015e12:	d10e      	bne.n	8015e32 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8015e14:	6839      	ldr	r1, [r7, #0]
 8015e16:	6878      	ldr	r0, [r7, #4]
 8015e18:	f7fe fe0e 	bl	8014a38 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8015e1c:	2100      	movs	r1, #0
 8015e1e:	6878      	ldr	r0, [r7, #4]
 8015e20:	f7fe fbbd 	bl	801459e <dir_next>
 8015e24:	4603      	mov	r3, r0
 8015e26:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8015e28:	7bfb      	ldrb	r3, [r7, #15]
 8015e2a:	2b04      	cmp	r3, #4
 8015e2c:	d101      	bne.n	8015e32 <f_readdir+0x70>
 8015e2e:	2300      	movs	r3, #0
 8015e30:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8015e32:	68bb      	ldr	r3, [r7, #8]
 8015e34:	7bfa      	ldrb	r2, [r7, #15]
 8015e36:	4611      	mov	r1, r2
 8015e38:	4618      	mov	r0, r3
 8015e3a:	f7fd fdeb 	bl	8013a14 <unlock_fs>
 8015e3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8015e40:	4618      	mov	r0, r3
 8015e42:	3710      	adds	r7, #16
 8015e44:	46bd      	mov	sp, r7
 8015e46:	bd80      	pop	{r7, pc}

08015e48 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8015e48:	b580      	push	{r7, lr}
 8015e4a:	b090      	sub	sp, #64	; 0x40
 8015e4c:	af00      	add	r7, sp, #0
 8015e4e:	6078      	str	r0, [r7, #4]
 8015e50:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 8015e52:	f107 010c 	add.w	r1, r7, #12
 8015e56:	1d3b      	adds	r3, r7, #4
 8015e58:	2200      	movs	r2, #0
 8015e5a:	4618      	mov	r0, r3
 8015e5c:	f7fe ffec 	bl	8014e38 <find_volume>
 8015e60:	4603      	mov	r3, r0
 8015e62:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8015e66:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015e6a:	2b00      	cmp	r3, #0
 8015e6c:	d11f      	bne.n	8015eae <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8015e6e:	687a      	ldr	r2, [r7, #4]
 8015e70:	f107 030c 	add.w	r3, r7, #12
 8015e74:	4611      	mov	r1, r2
 8015e76:	4618      	mov	r0, r3
 8015e78:	f7fe fed2 	bl	8014c20 <follow_path>
 8015e7c:	4603      	mov	r3, r0
 8015e7e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 8015e82:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015e86:	2b00      	cmp	r3, #0
 8015e88:	d111      	bne.n	8015eae <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8015e8a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8015e8e:	b25b      	sxtb	r3, r3
 8015e90:	2b00      	cmp	r3, #0
 8015e92:	da03      	bge.n	8015e9c <f_stat+0x54>
				res = FR_INVALID_NAME;
 8015e94:	2306      	movs	r3, #6
 8015e96:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8015e9a:	e008      	b.n	8015eae <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 8015e9c:	683b      	ldr	r3, [r7, #0]
 8015e9e:	2b00      	cmp	r3, #0
 8015ea0:	d005      	beq.n	8015eae <f_stat+0x66>
 8015ea2:	f107 030c 	add.w	r3, r7, #12
 8015ea6:	6839      	ldr	r1, [r7, #0]
 8015ea8:	4618      	mov	r0, r3
 8015eaa:	f7fe fdc5 	bl	8014a38 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 8015eae:	68fb      	ldr	r3, [r7, #12]
 8015eb0:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8015eb4:	4611      	mov	r1, r2
 8015eb6:	4618      	mov	r0, r3
 8015eb8:	f7fd fdac 	bl	8013a14 <unlock_fs>
 8015ebc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8015ec0:	4618      	mov	r0, r3
 8015ec2:	3740      	adds	r7, #64	; 0x40
 8015ec4:	46bd      	mov	sp, r7
 8015ec6:	bd80      	pop	{r7, pc}

08015ec8 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8015ec8:	b580      	push	{r7, lr}
 8015eca:	b09e      	sub	sp, #120	; 0x78
 8015ecc:	af00      	add	r7, sp, #0
 8015ece:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8015ed0:	2300      	movs	r3, #0
 8015ed2:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8015ed4:	f107 010c 	add.w	r1, r7, #12
 8015ed8:	1d3b      	adds	r3, r7, #4
 8015eda:	2202      	movs	r2, #2
 8015edc:	4618      	mov	r0, r3
 8015ede:	f7fe ffab 	bl	8014e38 <find_volume>
 8015ee2:	4603      	mov	r3, r0
 8015ee4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 8015ee8:	68fb      	ldr	r3, [r7, #12]
 8015eea:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 8015eec:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8015ef0:	2b00      	cmp	r3, #0
 8015ef2:	f040 808e 	bne.w	8016012 <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8015ef6:	687a      	ldr	r2, [r7, #4]
 8015ef8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8015efc:	4611      	mov	r1, r2
 8015efe:	4618      	mov	r0, r3
 8015f00:	f7fe fe8e 	bl	8014c20 <follow_path>
 8015f04:	4603      	mov	r3, r0
 8015f06:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8015f0a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8015f0e:	2b00      	cmp	r3, #0
 8015f10:	d108      	bne.n	8015f24 <f_unlink+0x5c>
 8015f12:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8015f16:	2102      	movs	r1, #2
 8015f18:	4618      	mov	r0, r3
 8015f1a:	f7fd fd97 	bl	8013a4c <chk_lock>
 8015f1e:	4603      	mov	r3, r0
 8015f20:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8015f24:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8015f28:	2b00      	cmp	r3, #0
 8015f2a:	d172      	bne.n	8016012 <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8015f2c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8015f30:	b25b      	sxtb	r3, r3
 8015f32:	2b00      	cmp	r3, #0
 8015f34:	da03      	bge.n	8015f3e <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8015f36:	2306      	movs	r3, #6
 8015f38:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8015f3c:	e008      	b.n	8015f50 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8015f3e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8015f42:	f003 0301 	and.w	r3, r3, #1
 8015f46:	2b00      	cmp	r3, #0
 8015f48:	d002      	beq.n	8015f50 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8015f4a:	2307      	movs	r3, #7
 8015f4c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 8015f50:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8015f54:	2b00      	cmp	r3, #0
 8015f56:	d134      	bne.n	8015fc2 <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8015f58:	68fb      	ldr	r3, [r7, #12]
 8015f5a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8015f5c:	4611      	mov	r1, r2
 8015f5e:	4618      	mov	r0, r3
 8015f60:	f7fe fc29 	bl	80147b6 <ld_clust>
 8015f64:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8015f66:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8015f6a:	f003 0310 	and.w	r3, r3, #16
 8015f6e:	2b00      	cmp	r3, #0
 8015f70:	d027      	beq.n	8015fc2 <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8015f72:	68fb      	ldr	r3, [r7, #12]
 8015f74:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 8015f76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015f78:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8015f7a:	f107 0310 	add.w	r3, r7, #16
 8015f7e:	2100      	movs	r1, #0
 8015f80:	4618      	mov	r0, r3
 8015f82:	f7fe fa91 	bl	80144a8 <dir_sdi>
 8015f86:	4603      	mov	r3, r0
 8015f88:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 8015f8c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8015f90:	2b00      	cmp	r3, #0
 8015f92:	d116      	bne.n	8015fc2 <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 8015f94:	f107 0310 	add.w	r3, r7, #16
 8015f98:	2100      	movs	r1, #0
 8015f9a:	4618      	mov	r0, r3
 8015f9c:	f7fe fc4a 	bl	8014834 <dir_read>
 8015fa0:	4603      	mov	r3, r0
 8015fa2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8015fa6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8015faa:	2b00      	cmp	r3, #0
 8015fac:	d102      	bne.n	8015fb4 <f_unlink+0xec>
 8015fae:	2307      	movs	r3, #7
 8015fb0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8015fb4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8015fb8:	2b04      	cmp	r3, #4
 8015fba:	d102      	bne.n	8015fc2 <f_unlink+0xfa>
 8015fbc:	2300      	movs	r3, #0
 8015fbe:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 8015fc2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8015fc6:	2b00      	cmp	r3, #0
 8015fc8:	d123      	bne.n	8016012 <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8015fca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8015fce:	4618      	mov	r0, r3
 8015fd0:	f7fe fd14 	bl	80149fc <dir_remove>
 8015fd4:	4603      	mov	r3, r0
 8015fd6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8015fda:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8015fde:	2b00      	cmp	r3, #0
 8015fe0:	d10c      	bne.n	8015ffc <f_unlink+0x134>
 8015fe2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015fe4:	2b00      	cmp	r3, #0
 8015fe6:	d009      	beq.n	8015ffc <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8015fe8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8015fec:	2200      	movs	r2, #0
 8015fee:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8015ff0:	4618      	mov	r0, r3
 8015ff2:	f7fe f928 	bl	8014246 <remove_chain>
 8015ff6:	4603      	mov	r3, r0
 8015ff8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8015ffc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8016000:	2b00      	cmp	r3, #0
 8016002:	d106      	bne.n	8016012 <f_unlink+0x14a>
 8016004:	68fb      	ldr	r3, [r7, #12]
 8016006:	4618      	mov	r0, r3
 8016008:	f7fd fefe 	bl	8013e08 <sync_fs>
 801600c:	4603      	mov	r3, r0
 801600e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8016012:	68fb      	ldr	r3, [r7, #12]
 8016014:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 8016018:	4611      	mov	r1, r2
 801601a:	4618      	mov	r0, r3
 801601c:	f7fd fcfa 	bl	8013a14 <unlock_fs>
 8016020:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8016024:	4618      	mov	r0, r3
 8016026:	3778      	adds	r7, #120	; 0x78
 8016028:	46bd      	mov	sp, r7
 801602a:	bd80      	pop	{r7, pc}

0801602c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801602c:	b480      	push	{r7}
 801602e:	b087      	sub	sp, #28
 8016030:	af00      	add	r7, sp, #0
 8016032:	60f8      	str	r0, [r7, #12]
 8016034:	60b9      	str	r1, [r7, #8]
 8016036:	4613      	mov	r3, r2
 8016038:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801603a:	2301      	movs	r3, #1
 801603c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801603e:	2300      	movs	r3, #0
 8016040:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8016042:	4b1f      	ldr	r3, [pc, #124]	; (80160c0 <FATFS_LinkDriverEx+0x94>)
 8016044:	7a5b      	ldrb	r3, [r3, #9]
 8016046:	b2db      	uxtb	r3, r3
 8016048:	2b00      	cmp	r3, #0
 801604a:	d131      	bne.n	80160b0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801604c:	4b1c      	ldr	r3, [pc, #112]	; (80160c0 <FATFS_LinkDriverEx+0x94>)
 801604e:	7a5b      	ldrb	r3, [r3, #9]
 8016050:	b2db      	uxtb	r3, r3
 8016052:	461a      	mov	r2, r3
 8016054:	4b1a      	ldr	r3, [pc, #104]	; (80160c0 <FATFS_LinkDriverEx+0x94>)
 8016056:	2100      	movs	r1, #0
 8016058:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801605a:	4b19      	ldr	r3, [pc, #100]	; (80160c0 <FATFS_LinkDriverEx+0x94>)
 801605c:	7a5b      	ldrb	r3, [r3, #9]
 801605e:	b2db      	uxtb	r3, r3
 8016060:	4a17      	ldr	r2, [pc, #92]	; (80160c0 <FATFS_LinkDriverEx+0x94>)
 8016062:	009b      	lsls	r3, r3, #2
 8016064:	4413      	add	r3, r2
 8016066:	68fa      	ldr	r2, [r7, #12]
 8016068:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801606a:	4b15      	ldr	r3, [pc, #84]	; (80160c0 <FATFS_LinkDriverEx+0x94>)
 801606c:	7a5b      	ldrb	r3, [r3, #9]
 801606e:	b2db      	uxtb	r3, r3
 8016070:	461a      	mov	r2, r3
 8016072:	4b13      	ldr	r3, [pc, #76]	; (80160c0 <FATFS_LinkDriverEx+0x94>)
 8016074:	4413      	add	r3, r2
 8016076:	79fa      	ldrb	r2, [r7, #7]
 8016078:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801607a:	4b11      	ldr	r3, [pc, #68]	; (80160c0 <FATFS_LinkDriverEx+0x94>)
 801607c:	7a5b      	ldrb	r3, [r3, #9]
 801607e:	b2db      	uxtb	r3, r3
 8016080:	1c5a      	adds	r2, r3, #1
 8016082:	b2d1      	uxtb	r1, r2
 8016084:	4a0e      	ldr	r2, [pc, #56]	; (80160c0 <FATFS_LinkDriverEx+0x94>)
 8016086:	7251      	strb	r1, [r2, #9]
 8016088:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801608a:	7dbb      	ldrb	r3, [r7, #22]
 801608c:	3330      	adds	r3, #48	; 0x30
 801608e:	b2da      	uxtb	r2, r3
 8016090:	68bb      	ldr	r3, [r7, #8]
 8016092:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8016094:	68bb      	ldr	r3, [r7, #8]
 8016096:	3301      	adds	r3, #1
 8016098:	223a      	movs	r2, #58	; 0x3a
 801609a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801609c:	68bb      	ldr	r3, [r7, #8]
 801609e:	3302      	adds	r3, #2
 80160a0:	222f      	movs	r2, #47	; 0x2f
 80160a2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80160a4:	68bb      	ldr	r3, [r7, #8]
 80160a6:	3303      	adds	r3, #3
 80160a8:	2200      	movs	r2, #0
 80160aa:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80160ac:	2300      	movs	r3, #0
 80160ae:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80160b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80160b2:	4618      	mov	r0, r3
 80160b4:	371c      	adds	r7, #28
 80160b6:	46bd      	mov	sp, r7
 80160b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160bc:	4770      	bx	lr
 80160be:	bf00      	nop
 80160c0:	24002684 	.word	0x24002684

080160c4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80160c4:	b580      	push	{r7, lr}
 80160c6:	b082      	sub	sp, #8
 80160c8:	af00      	add	r7, sp, #0
 80160ca:	6078      	str	r0, [r7, #4]
 80160cc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80160ce:	2200      	movs	r2, #0
 80160d0:	6839      	ldr	r1, [r7, #0]
 80160d2:	6878      	ldr	r0, [r7, #4]
 80160d4:	f7ff ffaa 	bl	801602c <FATFS_LinkDriverEx>
 80160d8:	4603      	mov	r3, r0
}
 80160da:	4618      	mov	r0, r3
 80160dc:	3708      	adds	r7, #8
 80160de:	46bd      	mov	sp, r7
 80160e0:	bd80      	pop	{r7, pc}

080160e2 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 80160e2:	b580      	push	{r7, lr}
 80160e4:	b084      	sub	sp, #16
 80160e6:	af00      	add	r7, sp, #0
 80160e8:	4603      	mov	r3, r0
 80160ea:	6039      	str	r1, [r7, #0]
 80160ec:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 80160ee:	2200      	movs	r2, #0
 80160f0:	2101      	movs	r1, #1
 80160f2:	2001      	movs	r0, #1
 80160f4:	f000 f9ae 	bl	8016454 <osSemaphoreNew>
 80160f8:	4602      	mov	r2, r0
 80160fa:	683b      	ldr	r3, [r7, #0]
 80160fc:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 80160fe:	683b      	ldr	r3, [r7, #0]
 8016100:	681b      	ldr	r3, [r3, #0]
 8016102:	2b00      	cmp	r3, #0
 8016104:	bf14      	ite	ne
 8016106:	2301      	movne	r3, #1
 8016108:	2300      	moveq	r3, #0
 801610a:	b2db      	uxtb	r3, r3
 801610c:	60fb      	str	r3, [r7, #12]

    return ret;
 801610e:	68fb      	ldr	r3, [r7, #12]
}
 8016110:	4618      	mov	r0, r3
 8016112:	3710      	adds	r7, #16
 8016114:	46bd      	mov	sp, r7
 8016116:	bd80      	pop	{r7, pc}

08016118 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8016118:	b580      	push	{r7, lr}
 801611a:	b082      	sub	sp, #8
 801611c:	af00      	add	r7, sp, #0
 801611e:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8016120:	6878      	ldr	r0, [r7, #4]
 8016122:	f000 fab7 	bl	8016694 <osSemaphoreDelete>
#endif
    return 1;
 8016126:	2301      	movs	r3, #1
}
 8016128:	4618      	mov	r0, r3
 801612a:	3708      	adds	r7, #8
 801612c:	46bd      	mov	sp, r7
 801612e:	bd80      	pop	{r7, pc}

08016130 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8016130:	b580      	push	{r7, lr}
 8016132:	b084      	sub	sp, #16
 8016134:	af00      	add	r7, sp, #0
 8016136:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8016138:	2300      	movs	r3, #0
 801613a:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 801613c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8016140:	6878      	ldr	r0, [r7, #4]
 8016142:	f000 fa11 	bl	8016568 <osSemaphoreAcquire>
 8016146:	4603      	mov	r3, r0
 8016148:	2b00      	cmp	r3, #0
 801614a:	d101      	bne.n	8016150 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 801614c:	2301      	movs	r3, #1
 801614e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8016150:	68fb      	ldr	r3, [r7, #12]
}
 8016152:	4618      	mov	r0, r3
 8016154:	3710      	adds	r7, #16
 8016156:	46bd      	mov	sp, r7
 8016158:	bd80      	pop	{r7, pc}

0801615a <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 801615a:	b580      	push	{r7, lr}
 801615c:	b082      	sub	sp, #8
 801615e:	af00      	add	r7, sp, #0
 8016160:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8016162:	6878      	ldr	r0, [r7, #4]
 8016164:	f000 fa52 	bl	801660c <osSemaphoreRelease>
#endif
}
 8016168:	bf00      	nop
 801616a:	3708      	adds	r7, #8
 801616c:	46bd      	mov	sp, r7
 801616e:	bd80      	pop	{r7, pc}

08016170 <__NVIC_SetPriority>:
{
 8016170:	b480      	push	{r7}
 8016172:	b083      	sub	sp, #12
 8016174:	af00      	add	r7, sp, #0
 8016176:	4603      	mov	r3, r0
 8016178:	6039      	str	r1, [r7, #0]
 801617a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 801617c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016180:	2b00      	cmp	r3, #0
 8016182:	db0a      	blt.n	801619a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016184:	683b      	ldr	r3, [r7, #0]
 8016186:	b2da      	uxtb	r2, r3
 8016188:	490c      	ldr	r1, [pc, #48]	; (80161bc <__NVIC_SetPriority+0x4c>)
 801618a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801618e:	0112      	lsls	r2, r2, #4
 8016190:	b2d2      	uxtb	r2, r2
 8016192:	440b      	add	r3, r1
 8016194:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8016198:	e00a      	b.n	80161b0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801619a:	683b      	ldr	r3, [r7, #0]
 801619c:	b2da      	uxtb	r2, r3
 801619e:	4908      	ldr	r1, [pc, #32]	; (80161c0 <__NVIC_SetPriority+0x50>)
 80161a0:	88fb      	ldrh	r3, [r7, #6]
 80161a2:	f003 030f 	and.w	r3, r3, #15
 80161a6:	3b04      	subs	r3, #4
 80161a8:	0112      	lsls	r2, r2, #4
 80161aa:	b2d2      	uxtb	r2, r2
 80161ac:	440b      	add	r3, r1
 80161ae:	761a      	strb	r2, [r3, #24]
}
 80161b0:	bf00      	nop
 80161b2:	370c      	adds	r7, #12
 80161b4:	46bd      	mov	sp, r7
 80161b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161ba:	4770      	bx	lr
 80161bc:	e000e100 	.word	0xe000e100
 80161c0:	e000ed00 	.word	0xe000ed00

080161c4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80161c4:	b580      	push	{r7, lr}
 80161c6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80161c8:	4b05      	ldr	r3, [pc, #20]	; (80161e0 <SysTick_Handler+0x1c>)
 80161ca:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80161cc:	f002 ff1a 	bl	8019004 <xTaskGetSchedulerState>
 80161d0:	4603      	mov	r3, r0
 80161d2:	2b01      	cmp	r3, #1
 80161d4:	d001      	beq.n	80161da <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80161d6:	f001 f847 	bl	8017268 <xPortSysTickHandler>
  }
}
 80161da:	bf00      	nop
 80161dc:	bd80      	pop	{r7, pc}
 80161de:	bf00      	nop
 80161e0:	e000e010 	.word	0xe000e010

080161e4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80161e4:	b580      	push	{r7, lr}
 80161e6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80161e8:	2100      	movs	r1, #0
 80161ea:	f06f 0004 	mvn.w	r0, #4
 80161ee:	f7ff ffbf 	bl	8016170 <__NVIC_SetPriority>
#endif
}
 80161f2:	bf00      	nop
 80161f4:	bd80      	pop	{r7, pc}
	...

080161f8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80161f8:	b480      	push	{r7}
 80161fa:	b083      	sub	sp, #12
 80161fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80161fe:	f3ef 8305 	mrs	r3, IPSR
 8016202:	603b      	str	r3, [r7, #0]
  return(result);
 8016204:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8016206:	2b00      	cmp	r3, #0
 8016208:	d003      	beq.n	8016212 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 801620a:	f06f 0305 	mvn.w	r3, #5
 801620e:	607b      	str	r3, [r7, #4]
 8016210:	e00c      	b.n	801622c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8016212:	4b0a      	ldr	r3, [pc, #40]	; (801623c <osKernelInitialize+0x44>)
 8016214:	681b      	ldr	r3, [r3, #0]
 8016216:	2b00      	cmp	r3, #0
 8016218:	d105      	bne.n	8016226 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 801621a:	4b08      	ldr	r3, [pc, #32]	; (801623c <osKernelInitialize+0x44>)
 801621c:	2201      	movs	r2, #1
 801621e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8016220:	2300      	movs	r3, #0
 8016222:	607b      	str	r3, [r7, #4]
 8016224:	e002      	b.n	801622c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8016226:	f04f 33ff 	mov.w	r3, #4294967295
 801622a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 801622c:	687b      	ldr	r3, [r7, #4]
}
 801622e:	4618      	mov	r0, r3
 8016230:	370c      	adds	r7, #12
 8016232:	46bd      	mov	sp, r7
 8016234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016238:	4770      	bx	lr
 801623a:	bf00      	nop
 801623c:	24002690 	.word	0x24002690

08016240 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 8016240:	b580      	push	{r7, lr}
 8016242:	b082      	sub	sp, #8
 8016244:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 8016246:	f002 fedd 	bl	8019004 <xTaskGetSchedulerState>
 801624a:	4603      	mov	r3, r0
 801624c:	2b00      	cmp	r3, #0
 801624e:	d004      	beq.n	801625a <osKernelGetState+0x1a>
 8016250:	2b02      	cmp	r3, #2
 8016252:	d105      	bne.n	8016260 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 8016254:	2302      	movs	r3, #2
 8016256:	607b      	str	r3, [r7, #4]
      break;
 8016258:	e00c      	b.n	8016274 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 801625a:	2303      	movs	r3, #3
 801625c:	607b      	str	r3, [r7, #4]
      break;
 801625e:	e009      	b.n	8016274 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 8016260:	4b07      	ldr	r3, [pc, #28]	; (8016280 <osKernelGetState+0x40>)
 8016262:	681b      	ldr	r3, [r3, #0]
 8016264:	2b01      	cmp	r3, #1
 8016266:	d102      	bne.n	801626e <osKernelGetState+0x2e>
        state = osKernelReady;
 8016268:	2301      	movs	r3, #1
 801626a:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 801626c:	e001      	b.n	8016272 <osKernelGetState+0x32>
        state = osKernelInactive;
 801626e:	2300      	movs	r3, #0
 8016270:	607b      	str	r3, [r7, #4]
      break;
 8016272:	bf00      	nop
  }

  return (state);
 8016274:	687b      	ldr	r3, [r7, #4]
}
 8016276:	4618      	mov	r0, r3
 8016278:	3708      	adds	r7, #8
 801627a:	46bd      	mov	sp, r7
 801627c:	bd80      	pop	{r7, pc}
 801627e:	bf00      	nop
 8016280:	24002690 	.word	0x24002690

08016284 <osKernelStart>:

osStatus_t osKernelStart (void) {
 8016284:	b580      	push	{r7, lr}
 8016286:	b082      	sub	sp, #8
 8016288:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801628a:	f3ef 8305 	mrs	r3, IPSR
 801628e:	603b      	str	r3, [r7, #0]
  return(result);
 8016290:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8016292:	2b00      	cmp	r3, #0
 8016294:	d003      	beq.n	801629e <osKernelStart+0x1a>
    stat = osErrorISR;
 8016296:	f06f 0305 	mvn.w	r3, #5
 801629a:	607b      	str	r3, [r7, #4]
 801629c:	e010      	b.n	80162c0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 801629e:	4b0b      	ldr	r3, [pc, #44]	; (80162cc <osKernelStart+0x48>)
 80162a0:	681b      	ldr	r3, [r3, #0]
 80162a2:	2b01      	cmp	r3, #1
 80162a4:	d109      	bne.n	80162ba <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80162a6:	f7ff ff9d 	bl	80161e4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80162aa:	4b08      	ldr	r3, [pc, #32]	; (80162cc <osKernelStart+0x48>)
 80162ac:	2202      	movs	r2, #2
 80162ae:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80162b0:	f002 fa4e 	bl	8018750 <vTaskStartScheduler>
      stat = osOK;
 80162b4:	2300      	movs	r3, #0
 80162b6:	607b      	str	r3, [r7, #4]
 80162b8:	e002      	b.n	80162c0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80162ba:	f04f 33ff 	mov.w	r3, #4294967295
 80162be:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80162c0:	687b      	ldr	r3, [r7, #4]
}
 80162c2:	4618      	mov	r0, r3
 80162c4:	3708      	adds	r7, #8
 80162c6:	46bd      	mov	sp, r7
 80162c8:	bd80      	pop	{r7, pc}
 80162ca:	bf00      	nop
 80162cc:	24002690 	.word	0x24002690

080162d0 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 80162d0:	b580      	push	{r7, lr}
 80162d2:	b082      	sub	sp, #8
 80162d4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80162d6:	f3ef 8305 	mrs	r3, IPSR
 80162da:	603b      	str	r3, [r7, #0]
  return(result);
 80162dc:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 80162de:	2b00      	cmp	r3, #0
 80162e0:	d003      	beq.n	80162ea <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 80162e2:	f002 fb57 	bl	8018994 <xTaskGetTickCountFromISR>
 80162e6:	6078      	str	r0, [r7, #4]
 80162e8:	e002      	b.n	80162f0 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 80162ea:	f002 fb43 	bl	8018974 <xTaskGetTickCount>
 80162ee:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 80162f0:	687b      	ldr	r3, [r7, #4]
}
 80162f2:	4618      	mov	r0, r3
 80162f4:	3708      	adds	r7, #8
 80162f6:	46bd      	mov	sp, r7
 80162f8:	bd80      	pop	{r7, pc}

080162fa <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80162fa:	b580      	push	{r7, lr}
 80162fc:	b08e      	sub	sp, #56	; 0x38
 80162fe:	af04      	add	r7, sp, #16
 8016300:	60f8      	str	r0, [r7, #12]
 8016302:	60b9      	str	r1, [r7, #8]
 8016304:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8016306:	2300      	movs	r3, #0
 8016308:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801630a:	f3ef 8305 	mrs	r3, IPSR
 801630e:	617b      	str	r3, [r7, #20]
  return(result);
 8016310:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8016312:	2b00      	cmp	r3, #0
 8016314:	d17e      	bne.n	8016414 <osThreadNew+0x11a>
 8016316:	68fb      	ldr	r3, [r7, #12]
 8016318:	2b00      	cmp	r3, #0
 801631a:	d07b      	beq.n	8016414 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 801631c:	2380      	movs	r3, #128	; 0x80
 801631e:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8016320:	2318      	movs	r3, #24
 8016322:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8016324:	2300      	movs	r3, #0
 8016326:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8016328:	f04f 33ff 	mov.w	r3, #4294967295
 801632c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801632e:	687b      	ldr	r3, [r7, #4]
 8016330:	2b00      	cmp	r3, #0
 8016332:	d045      	beq.n	80163c0 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8016334:	687b      	ldr	r3, [r7, #4]
 8016336:	681b      	ldr	r3, [r3, #0]
 8016338:	2b00      	cmp	r3, #0
 801633a:	d002      	beq.n	8016342 <osThreadNew+0x48>
        name = attr->name;
 801633c:	687b      	ldr	r3, [r7, #4]
 801633e:	681b      	ldr	r3, [r3, #0]
 8016340:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8016342:	687b      	ldr	r3, [r7, #4]
 8016344:	699b      	ldr	r3, [r3, #24]
 8016346:	2b00      	cmp	r3, #0
 8016348:	d002      	beq.n	8016350 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 801634a:	687b      	ldr	r3, [r7, #4]
 801634c:	699b      	ldr	r3, [r3, #24]
 801634e:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8016350:	69fb      	ldr	r3, [r7, #28]
 8016352:	2b00      	cmp	r3, #0
 8016354:	d008      	beq.n	8016368 <osThreadNew+0x6e>
 8016356:	69fb      	ldr	r3, [r7, #28]
 8016358:	2b38      	cmp	r3, #56	; 0x38
 801635a:	d805      	bhi.n	8016368 <osThreadNew+0x6e>
 801635c:	687b      	ldr	r3, [r7, #4]
 801635e:	685b      	ldr	r3, [r3, #4]
 8016360:	f003 0301 	and.w	r3, r3, #1
 8016364:	2b00      	cmp	r3, #0
 8016366:	d001      	beq.n	801636c <osThreadNew+0x72>
        return (NULL);
 8016368:	2300      	movs	r3, #0
 801636a:	e054      	b.n	8016416 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 801636c:	687b      	ldr	r3, [r7, #4]
 801636e:	695b      	ldr	r3, [r3, #20]
 8016370:	2b00      	cmp	r3, #0
 8016372:	d003      	beq.n	801637c <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8016374:	687b      	ldr	r3, [r7, #4]
 8016376:	695b      	ldr	r3, [r3, #20]
 8016378:	089b      	lsrs	r3, r3, #2
 801637a:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801637c:	687b      	ldr	r3, [r7, #4]
 801637e:	689b      	ldr	r3, [r3, #8]
 8016380:	2b00      	cmp	r3, #0
 8016382:	d00e      	beq.n	80163a2 <osThreadNew+0xa8>
 8016384:	687b      	ldr	r3, [r7, #4]
 8016386:	68db      	ldr	r3, [r3, #12]
 8016388:	2b5b      	cmp	r3, #91	; 0x5b
 801638a:	d90a      	bls.n	80163a2 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801638c:	687b      	ldr	r3, [r7, #4]
 801638e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8016390:	2b00      	cmp	r3, #0
 8016392:	d006      	beq.n	80163a2 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8016394:	687b      	ldr	r3, [r7, #4]
 8016396:	695b      	ldr	r3, [r3, #20]
 8016398:	2b00      	cmp	r3, #0
 801639a:	d002      	beq.n	80163a2 <osThreadNew+0xa8>
        mem = 1;
 801639c:	2301      	movs	r3, #1
 801639e:	61bb      	str	r3, [r7, #24]
 80163a0:	e010      	b.n	80163c4 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80163a2:	687b      	ldr	r3, [r7, #4]
 80163a4:	689b      	ldr	r3, [r3, #8]
 80163a6:	2b00      	cmp	r3, #0
 80163a8:	d10c      	bne.n	80163c4 <osThreadNew+0xca>
 80163aa:	687b      	ldr	r3, [r7, #4]
 80163ac:	68db      	ldr	r3, [r3, #12]
 80163ae:	2b00      	cmp	r3, #0
 80163b0:	d108      	bne.n	80163c4 <osThreadNew+0xca>
 80163b2:	687b      	ldr	r3, [r7, #4]
 80163b4:	691b      	ldr	r3, [r3, #16]
 80163b6:	2b00      	cmp	r3, #0
 80163b8:	d104      	bne.n	80163c4 <osThreadNew+0xca>
          mem = 0;
 80163ba:	2300      	movs	r3, #0
 80163bc:	61bb      	str	r3, [r7, #24]
 80163be:	e001      	b.n	80163c4 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80163c0:	2300      	movs	r3, #0
 80163c2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80163c4:	69bb      	ldr	r3, [r7, #24]
 80163c6:	2b01      	cmp	r3, #1
 80163c8:	d110      	bne.n	80163ec <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80163ca:	687b      	ldr	r3, [r7, #4]
 80163cc:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80163ce:	687a      	ldr	r2, [r7, #4]
 80163d0:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80163d2:	9202      	str	r2, [sp, #8]
 80163d4:	9301      	str	r3, [sp, #4]
 80163d6:	69fb      	ldr	r3, [r7, #28]
 80163d8:	9300      	str	r3, [sp, #0]
 80163da:	68bb      	ldr	r3, [r7, #8]
 80163dc:	6a3a      	ldr	r2, [r7, #32]
 80163de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80163e0:	68f8      	ldr	r0, [r7, #12]
 80163e2:	f001 ffdf 	bl	80183a4 <xTaskCreateStatic>
 80163e6:	4603      	mov	r3, r0
 80163e8:	613b      	str	r3, [r7, #16]
 80163ea:	e013      	b.n	8016414 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80163ec:	69bb      	ldr	r3, [r7, #24]
 80163ee:	2b00      	cmp	r3, #0
 80163f0:	d110      	bne.n	8016414 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80163f2:	6a3b      	ldr	r3, [r7, #32]
 80163f4:	b29a      	uxth	r2, r3
 80163f6:	f107 0310 	add.w	r3, r7, #16
 80163fa:	9301      	str	r3, [sp, #4]
 80163fc:	69fb      	ldr	r3, [r7, #28]
 80163fe:	9300      	str	r3, [sp, #0]
 8016400:	68bb      	ldr	r3, [r7, #8]
 8016402:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016404:	68f8      	ldr	r0, [r7, #12]
 8016406:	f002 f82a 	bl	801845e <xTaskCreate>
 801640a:	4603      	mov	r3, r0
 801640c:	2b01      	cmp	r3, #1
 801640e:	d001      	beq.n	8016414 <osThreadNew+0x11a>
            hTask = NULL;
 8016410:	2300      	movs	r3, #0
 8016412:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8016414:	693b      	ldr	r3, [r7, #16]
}
 8016416:	4618      	mov	r0, r3
 8016418:	3728      	adds	r7, #40	; 0x28
 801641a:	46bd      	mov	sp, r7
 801641c:	bd80      	pop	{r7, pc}

0801641e <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 801641e:	b580      	push	{r7, lr}
 8016420:	b084      	sub	sp, #16
 8016422:	af00      	add	r7, sp, #0
 8016424:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016426:	f3ef 8305 	mrs	r3, IPSR
 801642a:	60bb      	str	r3, [r7, #8]
  return(result);
 801642c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 801642e:	2b00      	cmp	r3, #0
 8016430:	d003      	beq.n	801643a <osDelay+0x1c>
    stat = osErrorISR;
 8016432:	f06f 0305 	mvn.w	r3, #5
 8016436:	60fb      	str	r3, [r7, #12]
 8016438:	e007      	b.n	801644a <osDelay+0x2c>
  }
  else {
    stat = osOK;
 801643a:	2300      	movs	r3, #0
 801643c:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 801643e:	687b      	ldr	r3, [r7, #4]
 8016440:	2b00      	cmp	r3, #0
 8016442:	d002      	beq.n	801644a <osDelay+0x2c>
      vTaskDelay(ticks);
 8016444:	6878      	ldr	r0, [r7, #4]
 8016446:	f002 f94f 	bl	80186e8 <vTaskDelay>
    }
  }

  return (stat);
 801644a:	68fb      	ldr	r3, [r7, #12]
}
 801644c:	4618      	mov	r0, r3
 801644e:	3710      	adds	r7, #16
 8016450:	46bd      	mov	sp, r7
 8016452:	bd80      	pop	{r7, pc}

08016454 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8016454:	b580      	push	{r7, lr}
 8016456:	b08a      	sub	sp, #40	; 0x28
 8016458:	af02      	add	r7, sp, #8
 801645a:	60f8      	str	r0, [r7, #12]
 801645c:	60b9      	str	r1, [r7, #8]
 801645e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8016460:	2300      	movs	r3, #0
 8016462:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016464:	f3ef 8305 	mrs	r3, IPSR
 8016468:	613b      	str	r3, [r7, #16]
  return(result);
 801646a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 801646c:	2b00      	cmp	r3, #0
 801646e:	d175      	bne.n	801655c <osSemaphoreNew+0x108>
 8016470:	68fb      	ldr	r3, [r7, #12]
 8016472:	2b00      	cmp	r3, #0
 8016474:	d072      	beq.n	801655c <osSemaphoreNew+0x108>
 8016476:	68ba      	ldr	r2, [r7, #8]
 8016478:	68fb      	ldr	r3, [r7, #12]
 801647a:	429a      	cmp	r2, r3
 801647c:	d86e      	bhi.n	801655c <osSemaphoreNew+0x108>
    mem = -1;
 801647e:	f04f 33ff 	mov.w	r3, #4294967295
 8016482:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8016484:	687b      	ldr	r3, [r7, #4]
 8016486:	2b00      	cmp	r3, #0
 8016488:	d015      	beq.n	80164b6 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 801648a:	687b      	ldr	r3, [r7, #4]
 801648c:	689b      	ldr	r3, [r3, #8]
 801648e:	2b00      	cmp	r3, #0
 8016490:	d006      	beq.n	80164a0 <osSemaphoreNew+0x4c>
 8016492:	687b      	ldr	r3, [r7, #4]
 8016494:	68db      	ldr	r3, [r3, #12]
 8016496:	2b4f      	cmp	r3, #79	; 0x4f
 8016498:	d902      	bls.n	80164a0 <osSemaphoreNew+0x4c>
        mem = 1;
 801649a:	2301      	movs	r3, #1
 801649c:	61bb      	str	r3, [r7, #24]
 801649e:	e00c      	b.n	80164ba <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80164a0:	687b      	ldr	r3, [r7, #4]
 80164a2:	689b      	ldr	r3, [r3, #8]
 80164a4:	2b00      	cmp	r3, #0
 80164a6:	d108      	bne.n	80164ba <osSemaphoreNew+0x66>
 80164a8:	687b      	ldr	r3, [r7, #4]
 80164aa:	68db      	ldr	r3, [r3, #12]
 80164ac:	2b00      	cmp	r3, #0
 80164ae:	d104      	bne.n	80164ba <osSemaphoreNew+0x66>
          mem = 0;
 80164b0:	2300      	movs	r3, #0
 80164b2:	61bb      	str	r3, [r7, #24]
 80164b4:	e001      	b.n	80164ba <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80164b6:	2300      	movs	r3, #0
 80164b8:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80164ba:	69bb      	ldr	r3, [r7, #24]
 80164bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80164c0:	d04c      	beq.n	801655c <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80164c2:	68fb      	ldr	r3, [r7, #12]
 80164c4:	2b01      	cmp	r3, #1
 80164c6:	d128      	bne.n	801651a <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80164c8:	69bb      	ldr	r3, [r7, #24]
 80164ca:	2b01      	cmp	r3, #1
 80164cc:	d10a      	bne.n	80164e4 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80164ce:	687b      	ldr	r3, [r7, #4]
 80164d0:	689b      	ldr	r3, [r3, #8]
 80164d2:	2203      	movs	r2, #3
 80164d4:	9200      	str	r2, [sp, #0]
 80164d6:	2200      	movs	r2, #0
 80164d8:	2100      	movs	r1, #0
 80164da:	2001      	movs	r0, #1
 80164dc:	f000 ffbc 	bl	8017458 <xQueueGenericCreateStatic>
 80164e0:	61f8      	str	r0, [r7, #28]
 80164e2:	e005      	b.n	80164f0 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80164e4:	2203      	movs	r2, #3
 80164e6:	2100      	movs	r1, #0
 80164e8:	2001      	movs	r0, #1
 80164ea:	f001 f82d 	bl	8017548 <xQueueGenericCreate>
 80164ee:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80164f0:	69fb      	ldr	r3, [r7, #28]
 80164f2:	2b00      	cmp	r3, #0
 80164f4:	d022      	beq.n	801653c <osSemaphoreNew+0xe8>
 80164f6:	68bb      	ldr	r3, [r7, #8]
 80164f8:	2b00      	cmp	r3, #0
 80164fa:	d01f      	beq.n	801653c <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80164fc:	2300      	movs	r3, #0
 80164fe:	2200      	movs	r2, #0
 8016500:	2100      	movs	r1, #0
 8016502:	69f8      	ldr	r0, [r7, #28]
 8016504:	f001 f8e8 	bl	80176d8 <xQueueGenericSend>
 8016508:	4603      	mov	r3, r0
 801650a:	2b01      	cmp	r3, #1
 801650c:	d016      	beq.n	801653c <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 801650e:	69f8      	ldr	r0, [r7, #28]
 8016510:	f001 fd74 	bl	8017ffc <vQueueDelete>
            hSemaphore = NULL;
 8016514:	2300      	movs	r3, #0
 8016516:	61fb      	str	r3, [r7, #28]
 8016518:	e010      	b.n	801653c <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 801651a:	69bb      	ldr	r3, [r7, #24]
 801651c:	2b01      	cmp	r3, #1
 801651e:	d108      	bne.n	8016532 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8016520:	687b      	ldr	r3, [r7, #4]
 8016522:	689b      	ldr	r3, [r3, #8]
 8016524:	461a      	mov	r2, r3
 8016526:	68b9      	ldr	r1, [r7, #8]
 8016528:	68f8      	ldr	r0, [r7, #12]
 801652a:	f001 f86a 	bl	8017602 <xQueueCreateCountingSemaphoreStatic>
 801652e:	61f8      	str	r0, [r7, #28]
 8016530:	e004      	b.n	801653c <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8016532:	68b9      	ldr	r1, [r7, #8]
 8016534:	68f8      	ldr	r0, [r7, #12]
 8016536:	f001 f89b 	bl	8017670 <xQueueCreateCountingSemaphore>
 801653a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 801653c:	69fb      	ldr	r3, [r7, #28]
 801653e:	2b00      	cmp	r3, #0
 8016540:	d00c      	beq.n	801655c <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8016542:	687b      	ldr	r3, [r7, #4]
 8016544:	2b00      	cmp	r3, #0
 8016546:	d003      	beq.n	8016550 <osSemaphoreNew+0xfc>
          name = attr->name;
 8016548:	687b      	ldr	r3, [r7, #4]
 801654a:	681b      	ldr	r3, [r3, #0]
 801654c:	617b      	str	r3, [r7, #20]
 801654e:	e001      	b.n	8016554 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8016550:	2300      	movs	r3, #0
 8016552:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8016554:	6979      	ldr	r1, [r7, #20]
 8016556:	69f8      	ldr	r0, [r7, #28]
 8016558:	f001 fe9c 	bl	8018294 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 801655c:	69fb      	ldr	r3, [r7, #28]
}
 801655e:	4618      	mov	r0, r3
 8016560:	3720      	adds	r7, #32
 8016562:	46bd      	mov	sp, r7
 8016564:	bd80      	pop	{r7, pc}
	...

08016568 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8016568:	b580      	push	{r7, lr}
 801656a:	b086      	sub	sp, #24
 801656c:	af00      	add	r7, sp, #0
 801656e:	6078      	str	r0, [r7, #4]
 8016570:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8016572:	687b      	ldr	r3, [r7, #4]
 8016574:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8016576:	2300      	movs	r3, #0
 8016578:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 801657a:	693b      	ldr	r3, [r7, #16]
 801657c:	2b00      	cmp	r3, #0
 801657e:	d103      	bne.n	8016588 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8016580:	f06f 0303 	mvn.w	r3, #3
 8016584:	617b      	str	r3, [r7, #20]
 8016586:	e039      	b.n	80165fc <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016588:	f3ef 8305 	mrs	r3, IPSR
 801658c:	60fb      	str	r3, [r7, #12]
  return(result);
 801658e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8016590:	2b00      	cmp	r3, #0
 8016592:	d022      	beq.n	80165da <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8016594:	683b      	ldr	r3, [r7, #0]
 8016596:	2b00      	cmp	r3, #0
 8016598:	d003      	beq.n	80165a2 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 801659a:	f06f 0303 	mvn.w	r3, #3
 801659e:	617b      	str	r3, [r7, #20]
 80165a0:	e02c      	b.n	80165fc <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80165a2:	2300      	movs	r3, #0
 80165a4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80165a6:	f107 0308 	add.w	r3, r7, #8
 80165aa:	461a      	mov	r2, r3
 80165ac:	2100      	movs	r1, #0
 80165ae:	6938      	ldr	r0, [r7, #16]
 80165b0:	f001 fca4 	bl	8017efc <xQueueReceiveFromISR>
 80165b4:	4603      	mov	r3, r0
 80165b6:	2b01      	cmp	r3, #1
 80165b8:	d003      	beq.n	80165c2 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 80165ba:	f06f 0302 	mvn.w	r3, #2
 80165be:	617b      	str	r3, [r7, #20]
 80165c0:	e01c      	b.n	80165fc <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 80165c2:	68bb      	ldr	r3, [r7, #8]
 80165c4:	2b00      	cmp	r3, #0
 80165c6:	d019      	beq.n	80165fc <osSemaphoreAcquire+0x94>
 80165c8:	4b0f      	ldr	r3, [pc, #60]	; (8016608 <osSemaphoreAcquire+0xa0>)
 80165ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80165ce:	601a      	str	r2, [r3, #0]
 80165d0:	f3bf 8f4f 	dsb	sy
 80165d4:	f3bf 8f6f 	isb	sy
 80165d8:	e010      	b.n	80165fc <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80165da:	6839      	ldr	r1, [r7, #0]
 80165dc:	6938      	ldr	r0, [r7, #16]
 80165de:	f001 fb81 	bl	8017ce4 <xQueueSemaphoreTake>
 80165e2:	4603      	mov	r3, r0
 80165e4:	2b01      	cmp	r3, #1
 80165e6:	d009      	beq.n	80165fc <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80165e8:	683b      	ldr	r3, [r7, #0]
 80165ea:	2b00      	cmp	r3, #0
 80165ec:	d003      	beq.n	80165f6 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80165ee:	f06f 0301 	mvn.w	r3, #1
 80165f2:	617b      	str	r3, [r7, #20]
 80165f4:	e002      	b.n	80165fc <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80165f6:	f06f 0302 	mvn.w	r3, #2
 80165fa:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80165fc:	697b      	ldr	r3, [r7, #20]
}
 80165fe:	4618      	mov	r0, r3
 8016600:	3718      	adds	r7, #24
 8016602:	46bd      	mov	sp, r7
 8016604:	bd80      	pop	{r7, pc}
 8016606:	bf00      	nop
 8016608:	e000ed04 	.word	0xe000ed04

0801660c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 801660c:	b580      	push	{r7, lr}
 801660e:	b086      	sub	sp, #24
 8016610:	af00      	add	r7, sp, #0
 8016612:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8016614:	687b      	ldr	r3, [r7, #4]
 8016616:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8016618:	2300      	movs	r3, #0
 801661a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 801661c:	693b      	ldr	r3, [r7, #16]
 801661e:	2b00      	cmp	r3, #0
 8016620:	d103      	bne.n	801662a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8016622:	f06f 0303 	mvn.w	r3, #3
 8016626:	617b      	str	r3, [r7, #20]
 8016628:	e02c      	b.n	8016684 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801662a:	f3ef 8305 	mrs	r3, IPSR
 801662e:	60fb      	str	r3, [r7, #12]
  return(result);
 8016630:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8016632:	2b00      	cmp	r3, #0
 8016634:	d01a      	beq.n	801666c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8016636:	2300      	movs	r3, #0
 8016638:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 801663a:	f107 0308 	add.w	r3, r7, #8
 801663e:	4619      	mov	r1, r3
 8016640:	6938      	ldr	r0, [r7, #16]
 8016642:	f001 f9e2 	bl	8017a0a <xQueueGiveFromISR>
 8016646:	4603      	mov	r3, r0
 8016648:	2b01      	cmp	r3, #1
 801664a:	d003      	beq.n	8016654 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 801664c:	f06f 0302 	mvn.w	r3, #2
 8016650:	617b      	str	r3, [r7, #20]
 8016652:	e017      	b.n	8016684 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8016654:	68bb      	ldr	r3, [r7, #8]
 8016656:	2b00      	cmp	r3, #0
 8016658:	d014      	beq.n	8016684 <osSemaphoreRelease+0x78>
 801665a:	4b0d      	ldr	r3, [pc, #52]	; (8016690 <osSemaphoreRelease+0x84>)
 801665c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016660:	601a      	str	r2, [r3, #0]
 8016662:	f3bf 8f4f 	dsb	sy
 8016666:	f3bf 8f6f 	isb	sy
 801666a:	e00b      	b.n	8016684 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 801666c:	2300      	movs	r3, #0
 801666e:	2200      	movs	r2, #0
 8016670:	2100      	movs	r1, #0
 8016672:	6938      	ldr	r0, [r7, #16]
 8016674:	f001 f830 	bl	80176d8 <xQueueGenericSend>
 8016678:	4603      	mov	r3, r0
 801667a:	2b01      	cmp	r3, #1
 801667c:	d002      	beq.n	8016684 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 801667e:	f06f 0302 	mvn.w	r3, #2
 8016682:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8016684:	697b      	ldr	r3, [r7, #20]
}
 8016686:	4618      	mov	r0, r3
 8016688:	3718      	adds	r7, #24
 801668a:	46bd      	mov	sp, r7
 801668c:	bd80      	pop	{r7, pc}
 801668e:	bf00      	nop
 8016690:	e000ed04 	.word	0xe000ed04

08016694 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8016694:	b580      	push	{r7, lr}
 8016696:	b086      	sub	sp, #24
 8016698:	af00      	add	r7, sp, #0
 801669a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 801669c:	687b      	ldr	r3, [r7, #4]
 801669e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80166a0:	f3ef 8305 	mrs	r3, IPSR
 80166a4:	60fb      	str	r3, [r7, #12]
  return(result);
 80166a6:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 80166a8:	2b00      	cmp	r3, #0
 80166aa:	d003      	beq.n	80166b4 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 80166ac:	f06f 0305 	mvn.w	r3, #5
 80166b0:	617b      	str	r3, [r7, #20]
 80166b2:	e00e      	b.n	80166d2 <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 80166b4:	693b      	ldr	r3, [r7, #16]
 80166b6:	2b00      	cmp	r3, #0
 80166b8:	d103      	bne.n	80166c2 <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 80166ba:	f06f 0303 	mvn.w	r3, #3
 80166be:	617b      	str	r3, [r7, #20]
 80166c0:	e007      	b.n	80166d2 <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 80166c2:	6938      	ldr	r0, [r7, #16]
 80166c4:	f001 fe10 	bl	80182e8 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 80166c8:	2300      	movs	r3, #0
 80166ca:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 80166cc:	6938      	ldr	r0, [r7, #16]
 80166ce:	f001 fc95 	bl	8017ffc <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 80166d2:	697b      	ldr	r3, [r7, #20]
}
 80166d4:	4618      	mov	r0, r3
 80166d6:	3718      	adds	r7, #24
 80166d8:	46bd      	mov	sp, r7
 80166da:	bd80      	pop	{r7, pc}

080166dc <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80166dc:	b580      	push	{r7, lr}
 80166de:	b08a      	sub	sp, #40	; 0x28
 80166e0:	af02      	add	r7, sp, #8
 80166e2:	60f8      	str	r0, [r7, #12]
 80166e4:	60b9      	str	r1, [r7, #8]
 80166e6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80166e8:	2300      	movs	r3, #0
 80166ea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80166ec:	f3ef 8305 	mrs	r3, IPSR
 80166f0:	613b      	str	r3, [r7, #16]
  return(result);
 80166f2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80166f4:	2b00      	cmp	r3, #0
 80166f6:	d15f      	bne.n	80167b8 <osMessageQueueNew+0xdc>
 80166f8:	68fb      	ldr	r3, [r7, #12]
 80166fa:	2b00      	cmp	r3, #0
 80166fc:	d05c      	beq.n	80167b8 <osMessageQueueNew+0xdc>
 80166fe:	68bb      	ldr	r3, [r7, #8]
 8016700:	2b00      	cmp	r3, #0
 8016702:	d059      	beq.n	80167b8 <osMessageQueueNew+0xdc>
    mem = -1;
 8016704:	f04f 33ff 	mov.w	r3, #4294967295
 8016708:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801670a:	687b      	ldr	r3, [r7, #4]
 801670c:	2b00      	cmp	r3, #0
 801670e:	d029      	beq.n	8016764 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8016710:	687b      	ldr	r3, [r7, #4]
 8016712:	689b      	ldr	r3, [r3, #8]
 8016714:	2b00      	cmp	r3, #0
 8016716:	d012      	beq.n	801673e <osMessageQueueNew+0x62>
 8016718:	687b      	ldr	r3, [r7, #4]
 801671a:	68db      	ldr	r3, [r3, #12]
 801671c:	2b4f      	cmp	r3, #79	; 0x4f
 801671e:	d90e      	bls.n	801673e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8016720:	687b      	ldr	r3, [r7, #4]
 8016722:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8016724:	2b00      	cmp	r3, #0
 8016726:	d00a      	beq.n	801673e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8016728:	687b      	ldr	r3, [r7, #4]
 801672a:	695a      	ldr	r2, [r3, #20]
 801672c:	68fb      	ldr	r3, [r7, #12]
 801672e:	68b9      	ldr	r1, [r7, #8]
 8016730:	fb01 f303 	mul.w	r3, r1, r3
 8016734:	429a      	cmp	r2, r3
 8016736:	d302      	bcc.n	801673e <osMessageQueueNew+0x62>
        mem = 1;
 8016738:	2301      	movs	r3, #1
 801673a:	61bb      	str	r3, [r7, #24]
 801673c:	e014      	b.n	8016768 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 801673e:	687b      	ldr	r3, [r7, #4]
 8016740:	689b      	ldr	r3, [r3, #8]
 8016742:	2b00      	cmp	r3, #0
 8016744:	d110      	bne.n	8016768 <osMessageQueueNew+0x8c>
 8016746:	687b      	ldr	r3, [r7, #4]
 8016748:	68db      	ldr	r3, [r3, #12]
 801674a:	2b00      	cmp	r3, #0
 801674c:	d10c      	bne.n	8016768 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 801674e:	687b      	ldr	r3, [r7, #4]
 8016750:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8016752:	2b00      	cmp	r3, #0
 8016754:	d108      	bne.n	8016768 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8016756:	687b      	ldr	r3, [r7, #4]
 8016758:	695b      	ldr	r3, [r3, #20]
 801675a:	2b00      	cmp	r3, #0
 801675c:	d104      	bne.n	8016768 <osMessageQueueNew+0x8c>
          mem = 0;
 801675e:	2300      	movs	r3, #0
 8016760:	61bb      	str	r3, [r7, #24]
 8016762:	e001      	b.n	8016768 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8016764:	2300      	movs	r3, #0
 8016766:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8016768:	69bb      	ldr	r3, [r7, #24]
 801676a:	2b01      	cmp	r3, #1
 801676c:	d10b      	bne.n	8016786 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 801676e:	687b      	ldr	r3, [r7, #4]
 8016770:	691a      	ldr	r2, [r3, #16]
 8016772:	687b      	ldr	r3, [r7, #4]
 8016774:	689b      	ldr	r3, [r3, #8]
 8016776:	2100      	movs	r1, #0
 8016778:	9100      	str	r1, [sp, #0]
 801677a:	68b9      	ldr	r1, [r7, #8]
 801677c:	68f8      	ldr	r0, [r7, #12]
 801677e:	f000 fe6b 	bl	8017458 <xQueueGenericCreateStatic>
 8016782:	61f8      	str	r0, [r7, #28]
 8016784:	e008      	b.n	8016798 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8016786:	69bb      	ldr	r3, [r7, #24]
 8016788:	2b00      	cmp	r3, #0
 801678a:	d105      	bne.n	8016798 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 801678c:	2200      	movs	r2, #0
 801678e:	68b9      	ldr	r1, [r7, #8]
 8016790:	68f8      	ldr	r0, [r7, #12]
 8016792:	f000 fed9 	bl	8017548 <xQueueGenericCreate>
 8016796:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8016798:	69fb      	ldr	r3, [r7, #28]
 801679a:	2b00      	cmp	r3, #0
 801679c:	d00c      	beq.n	80167b8 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 801679e:	687b      	ldr	r3, [r7, #4]
 80167a0:	2b00      	cmp	r3, #0
 80167a2:	d003      	beq.n	80167ac <osMessageQueueNew+0xd0>
        name = attr->name;
 80167a4:	687b      	ldr	r3, [r7, #4]
 80167a6:	681b      	ldr	r3, [r3, #0]
 80167a8:	617b      	str	r3, [r7, #20]
 80167aa:	e001      	b.n	80167b0 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80167ac:	2300      	movs	r3, #0
 80167ae:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80167b0:	6979      	ldr	r1, [r7, #20]
 80167b2:	69f8      	ldr	r0, [r7, #28]
 80167b4:	f001 fd6e 	bl	8018294 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80167b8:	69fb      	ldr	r3, [r7, #28]
}
 80167ba:	4618      	mov	r0, r3
 80167bc:	3720      	adds	r7, #32
 80167be:	46bd      	mov	sp, r7
 80167c0:	bd80      	pop	{r7, pc}
	...

080167c4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80167c4:	b580      	push	{r7, lr}
 80167c6:	b088      	sub	sp, #32
 80167c8:	af00      	add	r7, sp, #0
 80167ca:	60f8      	str	r0, [r7, #12]
 80167cc:	60b9      	str	r1, [r7, #8]
 80167ce:	603b      	str	r3, [r7, #0]
 80167d0:	4613      	mov	r3, r2
 80167d2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80167d4:	68fb      	ldr	r3, [r7, #12]
 80167d6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80167d8:	2300      	movs	r3, #0
 80167da:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80167dc:	f3ef 8305 	mrs	r3, IPSR
 80167e0:	617b      	str	r3, [r7, #20]
  return(result);
 80167e2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80167e4:	2b00      	cmp	r3, #0
 80167e6:	d028      	beq.n	801683a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80167e8:	69bb      	ldr	r3, [r7, #24]
 80167ea:	2b00      	cmp	r3, #0
 80167ec:	d005      	beq.n	80167fa <osMessageQueuePut+0x36>
 80167ee:	68bb      	ldr	r3, [r7, #8]
 80167f0:	2b00      	cmp	r3, #0
 80167f2:	d002      	beq.n	80167fa <osMessageQueuePut+0x36>
 80167f4:	683b      	ldr	r3, [r7, #0]
 80167f6:	2b00      	cmp	r3, #0
 80167f8:	d003      	beq.n	8016802 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80167fa:	f06f 0303 	mvn.w	r3, #3
 80167fe:	61fb      	str	r3, [r7, #28]
 8016800:	e038      	b.n	8016874 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8016802:	2300      	movs	r3, #0
 8016804:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8016806:	f107 0210 	add.w	r2, r7, #16
 801680a:	2300      	movs	r3, #0
 801680c:	68b9      	ldr	r1, [r7, #8]
 801680e:	69b8      	ldr	r0, [r7, #24]
 8016810:	f001 f860 	bl	80178d4 <xQueueGenericSendFromISR>
 8016814:	4603      	mov	r3, r0
 8016816:	2b01      	cmp	r3, #1
 8016818:	d003      	beq.n	8016822 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 801681a:	f06f 0302 	mvn.w	r3, #2
 801681e:	61fb      	str	r3, [r7, #28]
 8016820:	e028      	b.n	8016874 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8016822:	693b      	ldr	r3, [r7, #16]
 8016824:	2b00      	cmp	r3, #0
 8016826:	d025      	beq.n	8016874 <osMessageQueuePut+0xb0>
 8016828:	4b15      	ldr	r3, [pc, #84]	; (8016880 <osMessageQueuePut+0xbc>)
 801682a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801682e:	601a      	str	r2, [r3, #0]
 8016830:	f3bf 8f4f 	dsb	sy
 8016834:	f3bf 8f6f 	isb	sy
 8016838:	e01c      	b.n	8016874 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 801683a:	69bb      	ldr	r3, [r7, #24]
 801683c:	2b00      	cmp	r3, #0
 801683e:	d002      	beq.n	8016846 <osMessageQueuePut+0x82>
 8016840:	68bb      	ldr	r3, [r7, #8]
 8016842:	2b00      	cmp	r3, #0
 8016844:	d103      	bne.n	801684e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8016846:	f06f 0303 	mvn.w	r3, #3
 801684a:	61fb      	str	r3, [r7, #28]
 801684c:	e012      	b.n	8016874 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 801684e:	2300      	movs	r3, #0
 8016850:	683a      	ldr	r2, [r7, #0]
 8016852:	68b9      	ldr	r1, [r7, #8]
 8016854:	69b8      	ldr	r0, [r7, #24]
 8016856:	f000 ff3f 	bl	80176d8 <xQueueGenericSend>
 801685a:	4603      	mov	r3, r0
 801685c:	2b01      	cmp	r3, #1
 801685e:	d009      	beq.n	8016874 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8016860:	683b      	ldr	r3, [r7, #0]
 8016862:	2b00      	cmp	r3, #0
 8016864:	d003      	beq.n	801686e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8016866:	f06f 0301 	mvn.w	r3, #1
 801686a:	61fb      	str	r3, [r7, #28]
 801686c:	e002      	b.n	8016874 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 801686e:	f06f 0302 	mvn.w	r3, #2
 8016872:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8016874:	69fb      	ldr	r3, [r7, #28]
}
 8016876:	4618      	mov	r0, r3
 8016878:	3720      	adds	r7, #32
 801687a:	46bd      	mov	sp, r7
 801687c:	bd80      	pop	{r7, pc}
 801687e:	bf00      	nop
 8016880:	e000ed04 	.word	0xe000ed04

08016884 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8016884:	b580      	push	{r7, lr}
 8016886:	b088      	sub	sp, #32
 8016888:	af00      	add	r7, sp, #0
 801688a:	60f8      	str	r0, [r7, #12]
 801688c:	60b9      	str	r1, [r7, #8]
 801688e:	607a      	str	r2, [r7, #4]
 8016890:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8016892:	68fb      	ldr	r3, [r7, #12]
 8016894:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8016896:	2300      	movs	r3, #0
 8016898:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801689a:	f3ef 8305 	mrs	r3, IPSR
 801689e:	617b      	str	r3, [r7, #20]
  return(result);
 80168a0:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80168a2:	2b00      	cmp	r3, #0
 80168a4:	d028      	beq.n	80168f8 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80168a6:	69bb      	ldr	r3, [r7, #24]
 80168a8:	2b00      	cmp	r3, #0
 80168aa:	d005      	beq.n	80168b8 <osMessageQueueGet+0x34>
 80168ac:	68bb      	ldr	r3, [r7, #8]
 80168ae:	2b00      	cmp	r3, #0
 80168b0:	d002      	beq.n	80168b8 <osMessageQueueGet+0x34>
 80168b2:	683b      	ldr	r3, [r7, #0]
 80168b4:	2b00      	cmp	r3, #0
 80168b6:	d003      	beq.n	80168c0 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80168b8:	f06f 0303 	mvn.w	r3, #3
 80168bc:	61fb      	str	r3, [r7, #28]
 80168be:	e037      	b.n	8016930 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80168c0:	2300      	movs	r3, #0
 80168c2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80168c4:	f107 0310 	add.w	r3, r7, #16
 80168c8:	461a      	mov	r2, r3
 80168ca:	68b9      	ldr	r1, [r7, #8]
 80168cc:	69b8      	ldr	r0, [r7, #24]
 80168ce:	f001 fb15 	bl	8017efc <xQueueReceiveFromISR>
 80168d2:	4603      	mov	r3, r0
 80168d4:	2b01      	cmp	r3, #1
 80168d6:	d003      	beq.n	80168e0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80168d8:	f06f 0302 	mvn.w	r3, #2
 80168dc:	61fb      	str	r3, [r7, #28]
 80168de:	e027      	b.n	8016930 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80168e0:	693b      	ldr	r3, [r7, #16]
 80168e2:	2b00      	cmp	r3, #0
 80168e4:	d024      	beq.n	8016930 <osMessageQueueGet+0xac>
 80168e6:	4b15      	ldr	r3, [pc, #84]	; (801693c <osMessageQueueGet+0xb8>)
 80168e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80168ec:	601a      	str	r2, [r3, #0]
 80168ee:	f3bf 8f4f 	dsb	sy
 80168f2:	f3bf 8f6f 	isb	sy
 80168f6:	e01b      	b.n	8016930 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80168f8:	69bb      	ldr	r3, [r7, #24]
 80168fa:	2b00      	cmp	r3, #0
 80168fc:	d002      	beq.n	8016904 <osMessageQueueGet+0x80>
 80168fe:	68bb      	ldr	r3, [r7, #8]
 8016900:	2b00      	cmp	r3, #0
 8016902:	d103      	bne.n	801690c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8016904:	f06f 0303 	mvn.w	r3, #3
 8016908:	61fb      	str	r3, [r7, #28]
 801690a:	e011      	b.n	8016930 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 801690c:	683a      	ldr	r2, [r7, #0]
 801690e:	68b9      	ldr	r1, [r7, #8]
 8016910:	69b8      	ldr	r0, [r7, #24]
 8016912:	f001 f907 	bl	8017b24 <xQueueReceive>
 8016916:	4603      	mov	r3, r0
 8016918:	2b01      	cmp	r3, #1
 801691a:	d009      	beq.n	8016930 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 801691c:	683b      	ldr	r3, [r7, #0]
 801691e:	2b00      	cmp	r3, #0
 8016920:	d003      	beq.n	801692a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8016922:	f06f 0301 	mvn.w	r3, #1
 8016926:	61fb      	str	r3, [r7, #28]
 8016928:	e002      	b.n	8016930 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 801692a:	f06f 0302 	mvn.w	r3, #2
 801692e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8016930:	69fb      	ldr	r3, [r7, #28]
}
 8016932:	4618      	mov	r0, r3
 8016934:	3720      	adds	r7, #32
 8016936:	46bd      	mov	sp, r7
 8016938:	bd80      	pop	{r7, pc}
 801693a:	bf00      	nop
 801693c:	e000ed04 	.word	0xe000ed04

08016940 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8016940:	b480      	push	{r7}
 8016942:	b085      	sub	sp, #20
 8016944:	af00      	add	r7, sp, #0
 8016946:	60f8      	str	r0, [r7, #12]
 8016948:	60b9      	str	r1, [r7, #8]
 801694a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 801694c:	68fb      	ldr	r3, [r7, #12]
 801694e:	4a07      	ldr	r2, [pc, #28]	; (801696c <vApplicationGetIdleTaskMemory+0x2c>)
 8016950:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8016952:	68bb      	ldr	r3, [r7, #8]
 8016954:	4a06      	ldr	r2, [pc, #24]	; (8016970 <vApplicationGetIdleTaskMemory+0x30>)
 8016956:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8016958:	687b      	ldr	r3, [r7, #4]
 801695a:	2280      	movs	r2, #128	; 0x80
 801695c:	601a      	str	r2, [r3, #0]
}
 801695e:	bf00      	nop
 8016960:	3714      	adds	r7, #20
 8016962:	46bd      	mov	sp, r7
 8016964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016968:	4770      	bx	lr
 801696a:	bf00      	nop
 801696c:	24002694 	.word	0x24002694
 8016970:	240026f0 	.word	0x240026f0

08016974 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8016974:	b480      	push	{r7}
 8016976:	b085      	sub	sp, #20
 8016978:	af00      	add	r7, sp, #0
 801697a:	60f8      	str	r0, [r7, #12]
 801697c:	60b9      	str	r1, [r7, #8]
 801697e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8016980:	68fb      	ldr	r3, [r7, #12]
 8016982:	4a07      	ldr	r2, [pc, #28]	; (80169a0 <vApplicationGetTimerTaskMemory+0x2c>)
 8016984:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8016986:	68bb      	ldr	r3, [r7, #8]
 8016988:	4a06      	ldr	r2, [pc, #24]	; (80169a4 <vApplicationGetTimerTaskMemory+0x30>)
 801698a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 801698c:	687b      	ldr	r3, [r7, #4]
 801698e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8016992:	601a      	str	r2, [r3, #0]
}
 8016994:	bf00      	nop
 8016996:	3714      	adds	r7, #20
 8016998:	46bd      	mov	sp, r7
 801699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801699e:	4770      	bx	lr
 80169a0:	240028f0 	.word	0x240028f0
 80169a4:	2400294c 	.word	0x2400294c

080169a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80169a8:	b580      	push	{r7, lr}
 80169aa:	b08a      	sub	sp, #40	; 0x28
 80169ac:	af00      	add	r7, sp, #0
 80169ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80169b0:	2300      	movs	r3, #0
 80169b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80169b4:	f001 ff32 	bl	801881c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80169b8:	4b5b      	ldr	r3, [pc, #364]	; (8016b28 <pvPortMalloc+0x180>)
 80169ba:	681b      	ldr	r3, [r3, #0]
 80169bc:	2b00      	cmp	r3, #0
 80169be:	d101      	bne.n	80169c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80169c0:	f000 f920 	bl	8016c04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80169c4:	4b59      	ldr	r3, [pc, #356]	; (8016b2c <pvPortMalloc+0x184>)
 80169c6:	681a      	ldr	r2, [r3, #0]
 80169c8:	687b      	ldr	r3, [r7, #4]
 80169ca:	4013      	ands	r3, r2
 80169cc:	2b00      	cmp	r3, #0
 80169ce:	f040 8093 	bne.w	8016af8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80169d2:	687b      	ldr	r3, [r7, #4]
 80169d4:	2b00      	cmp	r3, #0
 80169d6:	d01d      	beq.n	8016a14 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80169d8:	2208      	movs	r2, #8
 80169da:	687b      	ldr	r3, [r7, #4]
 80169dc:	4413      	add	r3, r2
 80169de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80169e0:	687b      	ldr	r3, [r7, #4]
 80169e2:	f003 0307 	and.w	r3, r3, #7
 80169e6:	2b00      	cmp	r3, #0
 80169e8:	d014      	beq.n	8016a14 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80169ea:	687b      	ldr	r3, [r7, #4]
 80169ec:	f023 0307 	bic.w	r3, r3, #7
 80169f0:	3308      	adds	r3, #8
 80169f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80169f4:	687b      	ldr	r3, [r7, #4]
 80169f6:	f003 0307 	and.w	r3, r3, #7
 80169fa:	2b00      	cmp	r3, #0
 80169fc:	d00a      	beq.n	8016a14 <pvPortMalloc+0x6c>
	__asm volatile
 80169fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a02:	f383 8811 	msr	BASEPRI, r3
 8016a06:	f3bf 8f6f 	isb	sy
 8016a0a:	f3bf 8f4f 	dsb	sy
 8016a0e:	617b      	str	r3, [r7, #20]
}
 8016a10:	bf00      	nop
 8016a12:	e7fe      	b.n	8016a12 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8016a14:	687b      	ldr	r3, [r7, #4]
 8016a16:	2b00      	cmp	r3, #0
 8016a18:	d06e      	beq.n	8016af8 <pvPortMalloc+0x150>
 8016a1a:	4b45      	ldr	r3, [pc, #276]	; (8016b30 <pvPortMalloc+0x188>)
 8016a1c:	681b      	ldr	r3, [r3, #0]
 8016a1e:	687a      	ldr	r2, [r7, #4]
 8016a20:	429a      	cmp	r2, r3
 8016a22:	d869      	bhi.n	8016af8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8016a24:	4b43      	ldr	r3, [pc, #268]	; (8016b34 <pvPortMalloc+0x18c>)
 8016a26:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8016a28:	4b42      	ldr	r3, [pc, #264]	; (8016b34 <pvPortMalloc+0x18c>)
 8016a2a:	681b      	ldr	r3, [r3, #0]
 8016a2c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8016a2e:	e004      	b.n	8016a3a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8016a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a32:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8016a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a36:	681b      	ldr	r3, [r3, #0]
 8016a38:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8016a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a3c:	685b      	ldr	r3, [r3, #4]
 8016a3e:	687a      	ldr	r2, [r7, #4]
 8016a40:	429a      	cmp	r2, r3
 8016a42:	d903      	bls.n	8016a4c <pvPortMalloc+0xa4>
 8016a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a46:	681b      	ldr	r3, [r3, #0]
 8016a48:	2b00      	cmp	r3, #0
 8016a4a:	d1f1      	bne.n	8016a30 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8016a4c:	4b36      	ldr	r3, [pc, #216]	; (8016b28 <pvPortMalloc+0x180>)
 8016a4e:	681b      	ldr	r3, [r3, #0]
 8016a50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016a52:	429a      	cmp	r2, r3
 8016a54:	d050      	beq.n	8016af8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8016a56:	6a3b      	ldr	r3, [r7, #32]
 8016a58:	681b      	ldr	r3, [r3, #0]
 8016a5a:	2208      	movs	r2, #8
 8016a5c:	4413      	add	r3, r2
 8016a5e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8016a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a62:	681a      	ldr	r2, [r3, #0]
 8016a64:	6a3b      	ldr	r3, [r7, #32]
 8016a66:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8016a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a6a:	685a      	ldr	r2, [r3, #4]
 8016a6c:	687b      	ldr	r3, [r7, #4]
 8016a6e:	1ad2      	subs	r2, r2, r3
 8016a70:	2308      	movs	r3, #8
 8016a72:	005b      	lsls	r3, r3, #1
 8016a74:	429a      	cmp	r2, r3
 8016a76:	d91f      	bls.n	8016ab8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8016a78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016a7a:	687b      	ldr	r3, [r7, #4]
 8016a7c:	4413      	add	r3, r2
 8016a7e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016a80:	69bb      	ldr	r3, [r7, #24]
 8016a82:	f003 0307 	and.w	r3, r3, #7
 8016a86:	2b00      	cmp	r3, #0
 8016a88:	d00a      	beq.n	8016aa0 <pvPortMalloc+0xf8>
	__asm volatile
 8016a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a8e:	f383 8811 	msr	BASEPRI, r3
 8016a92:	f3bf 8f6f 	isb	sy
 8016a96:	f3bf 8f4f 	dsb	sy
 8016a9a:	613b      	str	r3, [r7, #16]
}
 8016a9c:	bf00      	nop
 8016a9e:	e7fe      	b.n	8016a9e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8016aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016aa2:	685a      	ldr	r2, [r3, #4]
 8016aa4:	687b      	ldr	r3, [r7, #4]
 8016aa6:	1ad2      	subs	r2, r2, r3
 8016aa8:	69bb      	ldr	r3, [r7, #24]
 8016aaa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8016aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016aae:	687a      	ldr	r2, [r7, #4]
 8016ab0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8016ab2:	69b8      	ldr	r0, [r7, #24]
 8016ab4:	f000 f908 	bl	8016cc8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8016ab8:	4b1d      	ldr	r3, [pc, #116]	; (8016b30 <pvPortMalloc+0x188>)
 8016aba:	681a      	ldr	r2, [r3, #0]
 8016abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016abe:	685b      	ldr	r3, [r3, #4]
 8016ac0:	1ad3      	subs	r3, r2, r3
 8016ac2:	4a1b      	ldr	r2, [pc, #108]	; (8016b30 <pvPortMalloc+0x188>)
 8016ac4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8016ac6:	4b1a      	ldr	r3, [pc, #104]	; (8016b30 <pvPortMalloc+0x188>)
 8016ac8:	681a      	ldr	r2, [r3, #0]
 8016aca:	4b1b      	ldr	r3, [pc, #108]	; (8016b38 <pvPortMalloc+0x190>)
 8016acc:	681b      	ldr	r3, [r3, #0]
 8016ace:	429a      	cmp	r2, r3
 8016ad0:	d203      	bcs.n	8016ada <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8016ad2:	4b17      	ldr	r3, [pc, #92]	; (8016b30 <pvPortMalloc+0x188>)
 8016ad4:	681b      	ldr	r3, [r3, #0]
 8016ad6:	4a18      	ldr	r2, [pc, #96]	; (8016b38 <pvPortMalloc+0x190>)
 8016ad8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8016ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016adc:	685a      	ldr	r2, [r3, #4]
 8016ade:	4b13      	ldr	r3, [pc, #76]	; (8016b2c <pvPortMalloc+0x184>)
 8016ae0:	681b      	ldr	r3, [r3, #0]
 8016ae2:	431a      	orrs	r2, r3
 8016ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ae6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8016ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016aea:	2200      	movs	r2, #0
 8016aec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8016aee:	4b13      	ldr	r3, [pc, #76]	; (8016b3c <pvPortMalloc+0x194>)
 8016af0:	681b      	ldr	r3, [r3, #0]
 8016af2:	3301      	adds	r3, #1
 8016af4:	4a11      	ldr	r2, [pc, #68]	; (8016b3c <pvPortMalloc+0x194>)
 8016af6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8016af8:	f001 fe9e 	bl	8018838 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8016afc:	69fb      	ldr	r3, [r7, #28]
 8016afe:	f003 0307 	and.w	r3, r3, #7
 8016b02:	2b00      	cmp	r3, #0
 8016b04:	d00a      	beq.n	8016b1c <pvPortMalloc+0x174>
	__asm volatile
 8016b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b0a:	f383 8811 	msr	BASEPRI, r3
 8016b0e:	f3bf 8f6f 	isb	sy
 8016b12:	f3bf 8f4f 	dsb	sy
 8016b16:	60fb      	str	r3, [r7, #12]
}
 8016b18:	bf00      	nop
 8016b1a:	e7fe      	b.n	8016b1a <pvPortMalloc+0x172>
	return pvReturn;
 8016b1c:	69fb      	ldr	r3, [r7, #28]
}
 8016b1e:	4618      	mov	r0, r3
 8016b20:	3728      	adds	r7, #40	; 0x28
 8016b22:	46bd      	mov	sp, r7
 8016b24:	bd80      	pop	{r7, pc}
 8016b26:	bf00      	nop
 8016b28:	24006954 	.word	0x24006954
 8016b2c:	24006968 	.word	0x24006968
 8016b30:	24006958 	.word	0x24006958
 8016b34:	2400694c 	.word	0x2400694c
 8016b38:	2400695c 	.word	0x2400695c
 8016b3c:	24006960 	.word	0x24006960

08016b40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8016b40:	b580      	push	{r7, lr}
 8016b42:	b086      	sub	sp, #24
 8016b44:	af00      	add	r7, sp, #0
 8016b46:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8016b48:	687b      	ldr	r3, [r7, #4]
 8016b4a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8016b4c:	687b      	ldr	r3, [r7, #4]
 8016b4e:	2b00      	cmp	r3, #0
 8016b50:	d04d      	beq.n	8016bee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8016b52:	2308      	movs	r3, #8
 8016b54:	425b      	negs	r3, r3
 8016b56:	697a      	ldr	r2, [r7, #20]
 8016b58:	4413      	add	r3, r2
 8016b5a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8016b5c:	697b      	ldr	r3, [r7, #20]
 8016b5e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8016b60:	693b      	ldr	r3, [r7, #16]
 8016b62:	685a      	ldr	r2, [r3, #4]
 8016b64:	4b24      	ldr	r3, [pc, #144]	; (8016bf8 <vPortFree+0xb8>)
 8016b66:	681b      	ldr	r3, [r3, #0]
 8016b68:	4013      	ands	r3, r2
 8016b6a:	2b00      	cmp	r3, #0
 8016b6c:	d10a      	bne.n	8016b84 <vPortFree+0x44>
	__asm volatile
 8016b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b72:	f383 8811 	msr	BASEPRI, r3
 8016b76:	f3bf 8f6f 	isb	sy
 8016b7a:	f3bf 8f4f 	dsb	sy
 8016b7e:	60fb      	str	r3, [r7, #12]
}
 8016b80:	bf00      	nop
 8016b82:	e7fe      	b.n	8016b82 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8016b84:	693b      	ldr	r3, [r7, #16]
 8016b86:	681b      	ldr	r3, [r3, #0]
 8016b88:	2b00      	cmp	r3, #0
 8016b8a:	d00a      	beq.n	8016ba2 <vPortFree+0x62>
	__asm volatile
 8016b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b90:	f383 8811 	msr	BASEPRI, r3
 8016b94:	f3bf 8f6f 	isb	sy
 8016b98:	f3bf 8f4f 	dsb	sy
 8016b9c:	60bb      	str	r3, [r7, #8]
}
 8016b9e:	bf00      	nop
 8016ba0:	e7fe      	b.n	8016ba0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8016ba2:	693b      	ldr	r3, [r7, #16]
 8016ba4:	685a      	ldr	r2, [r3, #4]
 8016ba6:	4b14      	ldr	r3, [pc, #80]	; (8016bf8 <vPortFree+0xb8>)
 8016ba8:	681b      	ldr	r3, [r3, #0]
 8016baa:	4013      	ands	r3, r2
 8016bac:	2b00      	cmp	r3, #0
 8016bae:	d01e      	beq.n	8016bee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8016bb0:	693b      	ldr	r3, [r7, #16]
 8016bb2:	681b      	ldr	r3, [r3, #0]
 8016bb4:	2b00      	cmp	r3, #0
 8016bb6:	d11a      	bne.n	8016bee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8016bb8:	693b      	ldr	r3, [r7, #16]
 8016bba:	685a      	ldr	r2, [r3, #4]
 8016bbc:	4b0e      	ldr	r3, [pc, #56]	; (8016bf8 <vPortFree+0xb8>)
 8016bbe:	681b      	ldr	r3, [r3, #0]
 8016bc0:	43db      	mvns	r3, r3
 8016bc2:	401a      	ands	r2, r3
 8016bc4:	693b      	ldr	r3, [r7, #16]
 8016bc6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8016bc8:	f001 fe28 	bl	801881c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8016bcc:	693b      	ldr	r3, [r7, #16]
 8016bce:	685a      	ldr	r2, [r3, #4]
 8016bd0:	4b0a      	ldr	r3, [pc, #40]	; (8016bfc <vPortFree+0xbc>)
 8016bd2:	681b      	ldr	r3, [r3, #0]
 8016bd4:	4413      	add	r3, r2
 8016bd6:	4a09      	ldr	r2, [pc, #36]	; (8016bfc <vPortFree+0xbc>)
 8016bd8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8016bda:	6938      	ldr	r0, [r7, #16]
 8016bdc:	f000 f874 	bl	8016cc8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8016be0:	4b07      	ldr	r3, [pc, #28]	; (8016c00 <vPortFree+0xc0>)
 8016be2:	681b      	ldr	r3, [r3, #0]
 8016be4:	3301      	adds	r3, #1
 8016be6:	4a06      	ldr	r2, [pc, #24]	; (8016c00 <vPortFree+0xc0>)
 8016be8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8016bea:	f001 fe25 	bl	8018838 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8016bee:	bf00      	nop
 8016bf0:	3718      	adds	r7, #24
 8016bf2:	46bd      	mov	sp, r7
 8016bf4:	bd80      	pop	{r7, pc}
 8016bf6:	bf00      	nop
 8016bf8:	24006968 	.word	0x24006968
 8016bfc:	24006958 	.word	0x24006958
 8016c00:	24006964 	.word	0x24006964

08016c04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8016c04:	b480      	push	{r7}
 8016c06:	b085      	sub	sp, #20
 8016c08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8016c0a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8016c0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8016c10:	4b27      	ldr	r3, [pc, #156]	; (8016cb0 <prvHeapInit+0xac>)
 8016c12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8016c14:	68fb      	ldr	r3, [r7, #12]
 8016c16:	f003 0307 	and.w	r3, r3, #7
 8016c1a:	2b00      	cmp	r3, #0
 8016c1c:	d00c      	beq.n	8016c38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8016c1e:	68fb      	ldr	r3, [r7, #12]
 8016c20:	3307      	adds	r3, #7
 8016c22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016c24:	68fb      	ldr	r3, [r7, #12]
 8016c26:	f023 0307 	bic.w	r3, r3, #7
 8016c2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8016c2c:	68ba      	ldr	r2, [r7, #8]
 8016c2e:	68fb      	ldr	r3, [r7, #12]
 8016c30:	1ad3      	subs	r3, r2, r3
 8016c32:	4a1f      	ldr	r2, [pc, #124]	; (8016cb0 <prvHeapInit+0xac>)
 8016c34:	4413      	add	r3, r2
 8016c36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8016c38:	68fb      	ldr	r3, [r7, #12]
 8016c3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8016c3c:	4a1d      	ldr	r2, [pc, #116]	; (8016cb4 <prvHeapInit+0xb0>)
 8016c3e:	687b      	ldr	r3, [r7, #4]
 8016c40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8016c42:	4b1c      	ldr	r3, [pc, #112]	; (8016cb4 <prvHeapInit+0xb0>)
 8016c44:	2200      	movs	r2, #0
 8016c46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8016c48:	687b      	ldr	r3, [r7, #4]
 8016c4a:	68ba      	ldr	r2, [r7, #8]
 8016c4c:	4413      	add	r3, r2
 8016c4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8016c50:	2208      	movs	r2, #8
 8016c52:	68fb      	ldr	r3, [r7, #12]
 8016c54:	1a9b      	subs	r3, r3, r2
 8016c56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016c58:	68fb      	ldr	r3, [r7, #12]
 8016c5a:	f023 0307 	bic.w	r3, r3, #7
 8016c5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8016c60:	68fb      	ldr	r3, [r7, #12]
 8016c62:	4a15      	ldr	r2, [pc, #84]	; (8016cb8 <prvHeapInit+0xb4>)
 8016c64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8016c66:	4b14      	ldr	r3, [pc, #80]	; (8016cb8 <prvHeapInit+0xb4>)
 8016c68:	681b      	ldr	r3, [r3, #0]
 8016c6a:	2200      	movs	r2, #0
 8016c6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8016c6e:	4b12      	ldr	r3, [pc, #72]	; (8016cb8 <prvHeapInit+0xb4>)
 8016c70:	681b      	ldr	r3, [r3, #0]
 8016c72:	2200      	movs	r2, #0
 8016c74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8016c76:	687b      	ldr	r3, [r7, #4]
 8016c78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8016c7a:	683b      	ldr	r3, [r7, #0]
 8016c7c:	68fa      	ldr	r2, [r7, #12]
 8016c7e:	1ad2      	subs	r2, r2, r3
 8016c80:	683b      	ldr	r3, [r7, #0]
 8016c82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8016c84:	4b0c      	ldr	r3, [pc, #48]	; (8016cb8 <prvHeapInit+0xb4>)
 8016c86:	681a      	ldr	r2, [r3, #0]
 8016c88:	683b      	ldr	r3, [r7, #0]
 8016c8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016c8c:	683b      	ldr	r3, [r7, #0]
 8016c8e:	685b      	ldr	r3, [r3, #4]
 8016c90:	4a0a      	ldr	r2, [pc, #40]	; (8016cbc <prvHeapInit+0xb8>)
 8016c92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016c94:	683b      	ldr	r3, [r7, #0]
 8016c96:	685b      	ldr	r3, [r3, #4]
 8016c98:	4a09      	ldr	r2, [pc, #36]	; (8016cc0 <prvHeapInit+0xbc>)
 8016c9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8016c9c:	4b09      	ldr	r3, [pc, #36]	; (8016cc4 <prvHeapInit+0xc0>)
 8016c9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8016ca2:	601a      	str	r2, [r3, #0]
}
 8016ca4:	bf00      	nop
 8016ca6:	3714      	adds	r7, #20
 8016ca8:	46bd      	mov	sp, r7
 8016caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cae:	4770      	bx	lr
 8016cb0:	24002d4c 	.word	0x24002d4c
 8016cb4:	2400694c 	.word	0x2400694c
 8016cb8:	24006954 	.word	0x24006954
 8016cbc:	2400695c 	.word	0x2400695c
 8016cc0:	24006958 	.word	0x24006958
 8016cc4:	24006968 	.word	0x24006968

08016cc8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8016cc8:	b480      	push	{r7}
 8016cca:	b085      	sub	sp, #20
 8016ccc:	af00      	add	r7, sp, #0
 8016cce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8016cd0:	4b28      	ldr	r3, [pc, #160]	; (8016d74 <prvInsertBlockIntoFreeList+0xac>)
 8016cd2:	60fb      	str	r3, [r7, #12]
 8016cd4:	e002      	b.n	8016cdc <prvInsertBlockIntoFreeList+0x14>
 8016cd6:	68fb      	ldr	r3, [r7, #12]
 8016cd8:	681b      	ldr	r3, [r3, #0]
 8016cda:	60fb      	str	r3, [r7, #12]
 8016cdc:	68fb      	ldr	r3, [r7, #12]
 8016cde:	681b      	ldr	r3, [r3, #0]
 8016ce0:	687a      	ldr	r2, [r7, #4]
 8016ce2:	429a      	cmp	r2, r3
 8016ce4:	d8f7      	bhi.n	8016cd6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8016ce6:	68fb      	ldr	r3, [r7, #12]
 8016ce8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8016cea:	68fb      	ldr	r3, [r7, #12]
 8016cec:	685b      	ldr	r3, [r3, #4]
 8016cee:	68ba      	ldr	r2, [r7, #8]
 8016cf0:	4413      	add	r3, r2
 8016cf2:	687a      	ldr	r2, [r7, #4]
 8016cf4:	429a      	cmp	r2, r3
 8016cf6:	d108      	bne.n	8016d0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8016cf8:	68fb      	ldr	r3, [r7, #12]
 8016cfa:	685a      	ldr	r2, [r3, #4]
 8016cfc:	687b      	ldr	r3, [r7, #4]
 8016cfe:	685b      	ldr	r3, [r3, #4]
 8016d00:	441a      	add	r2, r3
 8016d02:	68fb      	ldr	r3, [r7, #12]
 8016d04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8016d06:	68fb      	ldr	r3, [r7, #12]
 8016d08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8016d0a:	687b      	ldr	r3, [r7, #4]
 8016d0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8016d0e:	687b      	ldr	r3, [r7, #4]
 8016d10:	685b      	ldr	r3, [r3, #4]
 8016d12:	68ba      	ldr	r2, [r7, #8]
 8016d14:	441a      	add	r2, r3
 8016d16:	68fb      	ldr	r3, [r7, #12]
 8016d18:	681b      	ldr	r3, [r3, #0]
 8016d1a:	429a      	cmp	r2, r3
 8016d1c:	d118      	bne.n	8016d50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8016d1e:	68fb      	ldr	r3, [r7, #12]
 8016d20:	681a      	ldr	r2, [r3, #0]
 8016d22:	4b15      	ldr	r3, [pc, #84]	; (8016d78 <prvInsertBlockIntoFreeList+0xb0>)
 8016d24:	681b      	ldr	r3, [r3, #0]
 8016d26:	429a      	cmp	r2, r3
 8016d28:	d00d      	beq.n	8016d46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8016d2a:	687b      	ldr	r3, [r7, #4]
 8016d2c:	685a      	ldr	r2, [r3, #4]
 8016d2e:	68fb      	ldr	r3, [r7, #12]
 8016d30:	681b      	ldr	r3, [r3, #0]
 8016d32:	685b      	ldr	r3, [r3, #4]
 8016d34:	441a      	add	r2, r3
 8016d36:	687b      	ldr	r3, [r7, #4]
 8016d38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8016d3a:	68fb      	ldr	r3, [r7, #12]
 8016d3c:	681b      	ldr	r3, [r3, #0]
 8016d3e:	681a      	ldr	r2, [r3, #0]
 8016d40:	687b      	ldr	r3, [r7, #4]
 8016d42:	601a      	str	r2, [r3, #0]
 8016d44:	e008      	b.n	8016d58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8016d46:	4b0c      	ldr	r3, [pc, #48]	; (8016d78 <prvInsertBlockIntoFreeList+0xb0>)
 8016d48:	681a      	ldr	r2, [r3, #0]
 8016d4a:	687b      	ldr	r3, [r7, #4]
 8016d4c:	601a      	str	r2, [r3, #0]
 8016d4e:	e003      	b.n	8016d58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8016d50:	68fb      	ldr	r3, [r7, #12]
 8016d52:	681a      	ldr	r2, [r3, #0]
 8016d54:	687b      	ldr	r3, [r7, #4]
 8016d56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8016d58:	68fa      	ldr	r2, [r7, #12]
 8016d5a:	687b      	ldr	r3, [r7, #4]
 8016d5c:	429a      	cmp	r2, r3
 8016d5e:	d002      	beq.n	8016d66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8016d60:	68fb      	ldr	r3, [r7, #12]
 8016d62:	687a      	ldr	r2, [r7, #4]
 8016d64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016d66:	bf00      	nop
 8016d68:	3714      	adds	r7, #20
 8016d6a:	46bd      	mov	sp, r7
 8016d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d70:	4770      	bx	lr
 8016d72:	bf00      	nop
 8016d74:	2400694c 	.word	0x2400694c
 8016d78:	24006954 	.word	0x24006954

08016d7c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8016d7c:	b480      	push	{r7}
 8016d7e:	b083      	sub	sp, #12
 8016d80:	af00      	add	r7, sp, #0
 8016d82:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8016d84:	687b      	ldr	r3, [r7, #4]
 8016d86:	f103 0208 	add.w	r2, r3, #8
 8016d8a:	687b      	ldr	r3, [r7, #4]
 8016d8c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8016d8e:	687b      	ldr	r3, [r7, #4]
 8016d90:	f04f 32ff 	mov.w	r2, #4294967295
 8016d94:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8016d96:	687b      	ldr	r3, [r7, #4]
 8016d98:	f103 0208 	add.w	r2, r3, #8
 8016d9c:	687b      	ldr	r3, [r7, #4]
 8016d9e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8016da0:	687b      	ldr	r3, [r7, #4]
 8016da2:	f103 0208 	add.w	r2, r3, #8
 8016da6:	687b      	ldr	r3, [r7, #4]
 8016da8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8016daa:	687b      	ldr	r3, [r7, #4]
 8016dac:	2200      	movs	r2, #0
 8016dae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8016db0:	bf00      	nop
 8016db2:	370c      	adds	r7, #12
 8016db4:	46bd      	mov	sp, r7
 8016db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dba:	4770      	bx	lr

08016dbc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8016dbc:	b480      	push	{r7}
 8016dbe:	b083      	sub	sp, #12
 8016dc0:	af00      	add	r7, sp, #0
 8016dc2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8016dc4:	687b      	ldr	r3, [r7, #4]
 8016dc6:	2200      	movs	r2, #0
 8016dc8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8016dca:	bf00      	nop
 8016dcc:	370c      	adds	r7, #12
 8016dce:	46bd      	mov	sp, r7
 8016dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dd4:	4770      	bx	lr

08016dd6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8016dd6:	b480      	push	{r7}
 8016dd8:	b085      	sub	sp, #20
 8016dda:	af00      	add	r7, sp, #0
 8016ddc:	6078      	str	r0, [r7, #4]
 8016dde:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8016de0:	687b      	ldr	r3, [r7, #4]
 8016de2:	685b      	ldr	r3, [r3, #4]
 8016de4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8016de6:	683b      	ldr	r3, [r7, #0]
 8016de8:	68fa      	ldr	r2, [r7, #12]
 8016dea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8016dec:	68fb      	ldr	r3, [r7, #12]
 8016dee:	689a      	ldr	r2, [r3, #8]
 8016df0:	683b      	ldr	r3, [r7, #0]
 8016df2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8016df4:	68fb      	ldr	r3, [r7, #12]
 8016df6:	689b      	ldr	r3, [r3, #8]
 8016df8:	683a      	ldr	r2, [r7, #0]
 8016dfa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8016dfc:	68fb      	ldr	r3, [r7, #12]
 8016dfe:	683a      	ldr	r2, [r7, #0]
 8016e00:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8016e02:	683b      	ldr	r3, [r7, #0]
 8016e04:	687a      	ldr	r2, [r7, #4]
 8016e06:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8016e08:	687b      	ldr	r3, [r7, #4]
 8016e0a:	681b      	ldr	r3, [r3, #0]
 8016e0c:	1c5a      	adds	r2, r3, #1
 8016e0e:	687b      	ldr	r3, [r7, #4]
 8016e10:	601a      	str	r2, [r3, #0]
}
 8016e12:	bf00      	nop
 8016e14:	3714      	adds	r7, #20
 8016e16:	46bd      	mov	sp, r7
 8016e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e1c:	4770      	bx	lr

08016e1e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8016e1e:	b480      	push	{r7}
 8016e20:	b085      	sub	sp, #20
 8016e22:	af00      	add	r7, sp, #0
 8016e24:	6078      	str	r0, [r7, #4]
 8016e26:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8016e28:	683b      	ldr	r3, [r7, #0]
 8016e2a:	681b      	ldr	r3, [r3, #0]
 8016e2c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8016e2e:	68bb      	ldr	r3, [r7, #8]
 8016e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016e34:	d103      	bne.n	8016e3e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8016e36:	687b      	ldr	r3, [r7, #4]
 8016e38:	691b      	ldr	r3, [r3, #16]
 8016e3a:	60fb      	str	r3, [r7, #12]
 8016e3c:	e00c      	b.n	8016e58 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8016e3e:	687b      	ldr	r3, [r7, #4]
 8016e40:	3308      	adds	r3, #8
 8016e42:	60fb      	str	r3, [r7, #12]
 8016e44:	e002      	b.n	8016e4c <vListInsert+0x2e>
 8016e46:	68fb      	ldr	r3, [r7, #12]
 8016e48:	685b      	ldr	r3, [r3, #4]
 8016e4a:	60fb      	str	r3, [r7, #12]
 8016e4c:	68fb      	ldr	r3, [r7, #12]
 8016e4e:	685b      	ldr	r3, [r3, #4]
 8016e50:	681b      	ldr	r3, [r3, #0]
 8016e52:	68ba      	ldr	r2, [r7, #8]
 8016e54:	429a      	cmp	r2, r3
 8016e56:	d2f6      	bcs.n	8016e46 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8016e58:	68fb      	ldr	r3, [r7, #12]
 8016e5a:	685a      	ldr	r2, [r3, #4]
 8016e5c:	683b      	ldr	r3, [r7, #0]
 8016e5e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8016e60:	683b      	ldr	r3, [r7, #0]
 8016e62:	685b      	ldr	r3, [r3, #4]
 8016e64:	683a      	ldr	r2, [r7, #0]
 8016e66:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8016e68:	683b      	ldr	r3, [r7, #0]
 8016e6a:	68fa      	ldr	r2, [r7, #12]
 8016e6c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8016e6e:	68fb      	ldr	r3, [r7, #12]
 8016e70:	683a      	ldr	r2, [r7, #0]
 8016e72:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8016e74:	683b      	ldr	r3, [r7, #0]
 8016e76:	687a      	ldr	r2, [r7, #4]
 8016e78:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8016e7a:	687b      	ldr	r3, [r7, #4]
 8016e7c:	681b      	ldr	r3, [r3, #0]
 8016e7e:	1c5a      	adds	r2, r3, #1
 8016e80:	687b      	ldr	r3, [r7, #4]
 8016e82:	601a      	str	r2, [r3, #0]
}
 8016e84:	bf00      	nop
 8016e86:	3714      	adds	r7, #20
 8016e88:	46bd      	mov	sp, r7
 8016e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e8e:	4770      	bx	lr

08016e90 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8016e90:	b480      	push	{r7}
 8016e92:	b085      	sub	sp, #20
 8016e94:	af00      	add	r7, sp, #0
 8016e96:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8016e98:	687b      	ldr	r3, [r7, #4]
 8016e9a:	691b      	ldr	r3, [r3, #16]
 8016e9c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8016e9e:	687b      	ldr	r3, [r7, #4]
 8016ea0:	685b      	ldr	r3, [r3, #4]
 8016ea2:	687a      	ldr	r2, [r7, #4]
 8016ea4:	6892      	ldr	r2, [r2, #8]
 8016ea6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8016ea8:	687b      	ldr	r3, [r7, #4]
 8016eaa:	689b      	ldr	r3, [r3, #8]
 8016eac:	687a      	ldr	r2, [r7, #4]
 8016eae:	6852      	ldr	r2, [r2, #4]
 8016eb0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8016eb2:	68fb      	ldr	r3, [r7, #12]
 8016eb4:	685b      	ldr	r3, [r3, #4]
 8016eb6:	687a      	ldr	r2, [r7, #4]
 8016eb8:	429a      	cmp	r2, r3
 8016eba:	d103      	bne.n	8016ec4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8016ebc:	687b      	ldr	r3, [r7, #4]
 8016ebe:	689a      	ldr	r2, [r3, #8]
 8016ec0:	68fb      	ldr	r3, [r7, #12]
 8016ec2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8016ec4:	687b      	ldr	r3, [r7, #4]
 8016ec6:	2200      	movs	r2, #0
 8016ec8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8016eca:	68fb      	ldr	r3, [r7, #12]
 8016ecc:	681b      	ldr	r3, [r3, #0]
 8016ece:	1e5a      	subs	r2, r3, #1
 8016ed0:	68fb      	ldr	r3, [r7, #12]
 8016ed2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8016ed4:	68fb      	ldr	r3, [r7, #12]
 8016ed6:	681b      	ldr	r3, [r3, #0]
}
 8016ed8:	4618      	mov	r0, r3
 8016eda:	3714      	adds	r7, #20
 8016edc:	46bd      	mov	sp, r7
 8016ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ee2:	4770      	bx	lr

08016ee4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8016ee4:	b480      	push	{r7}
 8016ee6:	b085      	sub	sp, #20
 8016ee8:	af00      	add	r7, sp, #0
 8016eea:	60f8      	str	r0, [r7, #12]
 8016eec:	60b9      	str	r1, [r7, #8]
 8016eee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8016ef0:	68fb      	ldr	r3, [r7, #12]
 8016ef2:	3b04      	subs	r3, #4
 8016ef4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8016ef6:	68fb      	ldr	r3, [r7, #12]
 8016ef8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8016efc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8016efe:	68fb      	ldr	r3, [r7, #12]
 8016f00:	3b04      	subs	r3, #4
 8016f02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8016f04:	68bb      	ldr	r3, [r7, #8]
 8016f06:	f023 0201 	bic.w	r2, r3, #1
 8016f0a:	68fb      	ldr	r3, [r7, #12]
 8016f0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8016f0e:	68fb      	ldr	r3, [r7, #12]
 8016f10:	3b04      	subs	r3, #4
 8016f12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8016f14:	4a0c      	ldr	r2, [pc, #48]	; (8016f48 <pxPortInitialiseStack+0x64>)
 8016f16:	68fb      	ldr	r3, [r7, #12]
 8016f18:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8016f1a:	68fb      	ldr	r3, [r7, #12]
 8016f1c:	3b14      	subs	r3, #20
 8016f1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8016f20:	687a      	ldr	r2, [r7, #4]
 8016f22:	68fb      	ldr	r3, [r7, #12]
 8016f24:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8016f26:	68fb      	ldr	r3, [r7, #12]
 8016f28:	3b04      	subs	r3, #4
 8016f2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8016f2c:	68fb      	ldr	r3, [r7, #12]
 8016f2e:	f06f 0202 	mvn.w	r2, #2
 8016f32:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8016f34:	68fb      	ldr	r3, [r7, #12]
 8016f36:	3b20      	subs	r3, #32
 8016f38:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8016f3a:	68fb      	ldr	r3, [r7, #12]
}
 8016f3c:	4618      	mov	r0, r3
 8016f3e:	3714      	adds	r7, #20
 8016f40:	46bd      	mov	sp, r7
 8016f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f46:	4770      	bx	lr
 8016f48:	08016f4d 	.word	0x08016f4d

08016f4c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8016f4c:	b480      	push	{r7}
 8016f4e:	b085      	sub	sp, #20
 8016f50:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8016f52:	2300      	movs	r3, #0
 8016f54:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8016f56:	4b12      	ldr	r3, [pc, #72]	; (8016fa0 <prvTaskExitError+0x54>)
 8016f58:	681b      	ldr	r3, [r3, #0]
 8016f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016f5e:	d00a      	beq.n	8016f76 <prvTaskExitError+0x2a>
	__asm volatile
 8016f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016f64:	f383 8811 	msr	BASEPRI, r3
 8016f68:	f3bf 8f6f 	isb	sy
 8016f6c:	f3bf 8f4f 	dsb	sy
 8016f70:	60fb      	str	r3, [r7, #12]
}
 8016f72:	bf00      	nop
 8016f74:	e7fe      	b.n	8016f74 <prvTaskExitError+0x28>
	__asm volatile
 8016f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016f7a:	f383 8811 	msr	BASEPRI, r3
 8016f7e:	f3bf 8f6f 	isb	sy
 8016f82:	f3bf 8f4f 	dsb	sy
 8016f86:	60bb      	str	r3, [r7, #8]
}
 8016f88:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8016f8a:	bf00      	nop
 8016f8c:	687b      	ldr	r3, [r7, #4]
 8016f8e:	2b00      	cmp	r3, #0
 8016f90:	d0fc      	beq.n	8016f8c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8016f92:	bf00      	nop
 8016f94:	bf00      	nop
 8016f96:	3714      	adds	r7, #20
 8016f98:	46bd      	mov	sp, r7
 8016f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f9e:	4770      	bx	lr
 8016fa0:	24000050 	.word	0x24000050
	...

08016fb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8016fb0:	4b07      	ldr	r3, [pc, #28]	; (8016fd0 <pxCurrentTCBConst2>)
 8016fb2:	6819      	ldr	r1, [r3, #0]
 8016fb4:	6808      	ldr	r0, [r1, #0]
 8016fb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016fba:	f380 8809 	msr	PSP, r0
 8016fbe:	f3bf 8f6f 	isb	sy
 8016fc2:	f04f 0000 	mov.w	r0, #0
 8016fc6:	f380 8811 	msr	BASEPRI, r0
 8016fca:	4770      	bx	lr
 8016fcc:	f3af 8000 	nop.w

08016fd0 <pxCurrentTCBConst2>:
 8016fd0:	240069b4 	.word	0x240069b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8016fd4:	bf00      	nop
 8016fd6:	bf00      	nop

08016fd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8016fd8:	4808      	ldr	r0, [pc, #32]	; (8016ffc <prvPortStartFirstTask+0x24>)
 8016fda:	6800      	ldr	r0, [r0, #0]
 8016fdc:	6800      	ldr	r0, [r0, #0]
 8016fde:	f380 8808 	msr	MSP, r0
 8016fe2:	f04f 0000 	mov.w	r0, #0
 8016fe6:	f380 8814 	msr	CONTROL, r0
 8016fea:	b662      	cpsie	i
 8016fec:	b661      	cpsie	f
 8016fee:	f3bf 8f4f 	dsb	sy
 8016ff2:	f3bf 8f6f 	isb	sy
 8016ff6:	df00      	svc	0
 8016ff8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8016ffa:	bf00      	nop
 8016ffc:	e000ed08 	.word	0xe000ed08

08017000 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8017000:	b580      	push	{r7, lr}
 8017002:	b086      	sub	sp, #24
 8017004:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8017006:	4b46      	ldr	r3, [pc, #280]	; (8017120 <xPortStartScheduler+0x120>)
 8017008:	681b      	ldr	r3, [r3, #0]
 801700a:	4a46      	ldr	r2, [pc, #280]	; (8017124 <xPortStartScheduler+0x124>)
 801700c:	4293      	cmp	r3, r2
 801700e:	d10a      	bne.n	8017026 <xPortStartScheduler+0x26>
	__asm volatile
 8017010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017014:	f383 8811 	msr	BASEPRI, r3
 8017018:	f3bf 8f6f 	isb	sy
 801701c:	f3bf 8f4f 	dsb	sy
 8017020:	613b      	str	r3, [r7, #16]
}
 8017022:	bf00      	nop
 8017024:	e7fe      	b.n	8017024 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8017026:	4b3e      	ldr	r3, [pc, #248]	; (8017120 <xPortStartScheduler+0x120>)
 8017028:	681b      	ldr	r3, [r3, #0]
 801702a:	4a3f      	ldr	r2, [pc, #252]	; (8017128 <xPortStartScheduler+0x128>)
 801702c:	4293      	cmp	r3, r2
 801702e:	d10a      	bne.n	8017046 <xPortStartScheduler+0x46>
	__asm volatile
 8017030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017034:	f383 8811 	msr	BASEPRI, r3
 8017038:	f3bf 8f6f 	isb	sy
 801703c:	f3bf 8f4f 	dsb	sy
 8017040:	60fb      	str	r3, [r7, #12]
}
 8017042:	bf00      	nop
 8017044:	e7fe      	b.n	8017044 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8017046:	4b39      	ldr	r3, [pc, #228]	; (801712c <xPortStartScheduler+0x12c>)
 8017048:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801704a:	697b      	ldr	r3, [r7, #20]
 801704c:	781b      	ldrb	r3, [r3, #0]
 801704e:	b2db      	uxtb	r3, r3
 8017050:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8017052:	697b      	ldr	r3, [r7, #20]
 8017054:	22ff      	movs	r2, #255	; 0xff
 8017056:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8017058:	697b      	ldr	r3, [r7, #20]
 801705a:	781b      	ldrb	r3, [r3, #0]
 801705c:	b2db      	uxtb	r3, r3
 801705e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8017060:	78fb      	ldrb	r3, [r7, #3]
 8017062:	b2db      	uxtb	r3, r3
 8017064:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8017068:	b2da      	uxtb	r2, r3
 801706a:	4b31      	ldr	r3, [pc, #196]	; (8017130 <xPortStartScheduler+0x130>)
 801706c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801706e:	4b31      	ldr	r3, [pc, #196]	; (8017134 <xPortStartScheduler+0x134>)
 8017070:	2207      	movs	r2, #7
 8017072:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8017074:	e009      	b.n	801708a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8017076:	4b2f      	ldr	r3, [pc, #188]	; (8017134 <xPortStartScheduler+0x134>)
 8017078:	681b      	ldr	r3, [r3, #0]
 801707a:	3b01      	subs	r3, #1
 801707c:	4a2d      	ldr	r2, [pc, #180]	; (8017134 <xPortStartScheduler+0x134>)
 801707e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8017080:	78fb      	ldrb	r3, [r7, #3]
 8017082:	b2db      	uxtb	r3, r3
 8017084:	005b      	lsls	r3, r3, #1
 8017086:	b2db      	uxtb	r3, r3
 8017088:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801708a:	78fb      	ldrb	r3, [r7, #3]
 801708c:	b2db      	uxtb	r3, r3
 801708e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017092:	2b80      	cmp	r3, #128	; 0x80
 8017094:	d0ef      	beq.n	8017076 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8017096:	4b27      	ldr	r3, [pc, #156]	; (8017134 <xPortStartScheduler+0x134>)
 8017098:	681b      	ldr	r3, [r3, #0]
 801709a:	f1c3 0307 	rsb	r3, r3, #7
 801709e:	2b04      	cmp	r3, #4
 80170a0:	d00a      	beq.n	80170b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80170a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80170a6:	f383 8811 	msr	BASEPRI, r3
 80170aa:	f3bf 8f6f 	isb	sy
 80170ae:	f3bf 8f4f 	dsb	sy
 80170b2:	60bb      	str	r3, [r7, #8]
}
 80170b4:	bf00      	nop
 80170b6:	e7fe      	b.n	80170b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80170b8:	4b1e      	ldr	r3, [pc, #120]	; (8017134 <xPortStartScheduler+0x134>)
 80170ba:	681b      	ldr	r3, [r3, #0]
 80170bc:	021b      	lsls	r3, r3, #8
 80170be:	4a1d      	ldr	r2, [pc, #116]	; (8017134 <xPortStartScheduler+0x134>)
 80170c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80170c2:	4b1c      	ldr	r3, [pc, #112]	; (8017134 <xPortStartScheduler+0x134>)
 80170c4:	681b      	ldr	r3, [r3, #0]
 80170c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80170ca:	4a1a      	ldr	r2, [pc, #104]	; (8017134 <xPortStartScheduler+0x134>)
 80170cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80170ce:	687b      	ldr	r3, [r7, #4]
 80170d0:	b2da      	uxtb	r2, r3
 80170d2:	697b      	ldr	r3, [r7, #20]
 80170d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80170d6:	4b18      	ldr	r3, [pc, #96]	; (8017138 <xPortStartScheduler+0x138>)
 80170d8:	681b      	ldr	r3, [r3, #0]
 80170da:	4a17      	ldr	r2, [pc, #92]	; (8017138 <xPortStartScheduler+0x138>)
 80170dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80170e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80170e2:	4b15      	ldr	r3, [pc, #84]	; (8017138 <xPortStartScheduler+0x138>)
 80170e4:	681b      	ldr	r3, [r3, #0]
 80170e6:	4a14      	ldr	r2, [pc, #80]	; (8017138 <xPortStartScheduler+0x138>)
 80170e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80170ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80170ee:	f000 f8dd 	bl	80172ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80170f2:	4b12      	ldr	r3, [pc, #72]	; (801713c <xPortStartScheduler+0x13c>)
 80170f4:	2200      	movs	r2, #0
 80170f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80170f8:	f000 f8fc 	bl	80172f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80170fc:	4b10      	ldr	r3, [pc, #64]	; (8017140 <xPortStartScheduler+0x140>)
 80170fe:	681b      	ldr	r3, [r3, #0]
 8017100:	4a0f      	ldr	r2, [pc, #60]	; (8017140 <xPortStartScheduler+0x140>)
 8017102:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8017106:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8017108:	f7ff ff66 	bl	8016fd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801710c:	f001 fd0e 	bl	8018b2c <vTaskSwitchContext>
	prvTaskExitError();
 8017110:	f7ff ff1c 	bl	8016f4c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8017114:	2300      	movs	r3, #0
}
 8017116:	4618      	mov	r0, r3
 8017118:	3718      	adds	r7, #24
 801711a:	46bd      	mov	sp, r7
 801711c:	bd80      	pop	{r7, pc}
 801711e:	bf00      	nop
 8017120:	e000ed00 	.word	0xe000ed00
 8017124:	410fc271 	.word	0x410fc271
 8017128:	410fc270 	.word	0x410fc270
 801712c:	e000e400 	.word	0xe000e400
 8017130:	2400696c 	.word	0x2400696c
 8017134:	24006970 	.word	0x24006970
 8017138:	e000ed20 	.word	0xe000ed20
 801713c:	24000050 	.word	0x24000050
 8017140:	e000ef34 	.word	0xe000ef34

08017144 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8017144:	b480      	push	{r7}
 8017146:	b083      	sub	sp, #12
 8017148:	af00      	add	r7, sp, #0
	__asm volatile
 801714a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801714e:	f383 8811 	msr	BASEPRI, r3
 8017152:	f3bf 8f6f 	isb	sy
 8017156:	f3bf 8f4f 	dsb	sy
 801715a:	607b      	str	r3, [r7, #4]
}
 801715c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801715e:	4b0f      	ldr	r3, [pc, #60]	; (801719c <vPortEnterCritical+0x58>)
 8017160:	681b      	ldr	r3, [r3, #0]
 8017162:	3301      	adds	r3, #1
 8017164:	4a0d      	ldr	r2, [pc, #52]	; (801719c <vPortEnterCritical+0x58>)
 8017166:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8017168:	4b0c      	ldr	r3, [pc, #48]	; (801719c <vPortEnterCritical+0x58>)
 801716a:	681b      	ldr	r3, [r3, #0]
 801716c:	2b01      	cmp	r3, #1
 801716e:	d10f      	bne.n	8017190 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8017170:	4b0b      	ldr	r3, [pc, #44]	; (80171a0 <vPortEnterCritical+0x5c>)
 8017172:	681b      	ldr	r3, [r3, #0]
 8017174:	b2db      	uxtb	r3, r3
 8017176:	2b00      	cmp	r3, #0
 8017178:	d00a      	beq.n	8017190 <vPortEnterCritical+0x4c>
	__asm volatile
 801717a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801717e:	f383 8811 	msr	BASEPRI, r3
 8017182:	f3bf 8f6f 	isb	sy
 8017186:	f3bf 8f4f 	dsb	sy
 801718a:	603b      	str	r3, [r7, #0]
}
 801718c:	bf00      	nop
 801718e:	e7fe      	b.n	801718e <vPortEnterCritical+0x4a>
	}
}
 8017190:	bf00      	nop
 8017192:	370c      	adds	r7, #12
 8017194:	46bd      	mov	sp, r7
 8017196:	f85d 7b04 	ldr.w	r7, [sp], #4
 801719a:	4770      	bx	lr
 801719c:	24000050 	.word	0x24000050
 80171a0:	e000ed04 	.word	0xe000ed04

080171a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80171a4:	b480      	push	{r7}
 80171a6:	b083      	sub	sp, #12
 80171a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80171aa:	4b12      	ldr	r3, [pc, #72]	; (80171f4 <vPortExitCritical+0x50>)
 80171ac:	681b      	ldr	r3, [r3, #0]
 80171ae:	2b00      	cmp	r3, #0
 80171b0:	d10a      	bne.n	80171c8 <vPortExitCritical+0x24>
	__asm volatile
 80171b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80171b6:	f383 8811 	msr	BASEPRI, r3
 80171ba:	f3bf 8f6f 	isb	sy
 80171be:	f3bf 8f4f 	dsb	sy
 80171c2:	607b      	str	r3, [r7, #4]
}
 80171c4:	bf00      	nop
 80171c6:	e7fe      	b.n	80171c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80171c8:	4b0a      	ldr	r3, [pc, #40]	; (80171f4 <vPortExitCritical+0x50>)
 80171ca:	681b      	ldr	r3, [r3, #0]
 80171cc:	3b01      	subs	r3, #1
 80171ce:	4a09      	ldr	r2, [pc, #36]	; (80171f4 <vPortExitCritical+0x50>)
 80171d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80171d2:	4b08      	ldr	r3, [pc, #32]	; (80171f4 <vPortExitCritical+0x50>)
 80171d4:	681b      	ldr	r3, [r3, #0]
 80171d6:	2b00      	cmp	r3, #0
 80171d8:	d105      	bne.n	80171e6 <vPortExitCritical+0x42>
 80171da:	2300      	movs	r3, #0
 80171dc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80171de:	683b      	ldr	r3, [r7, #0]
 80171e0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80171e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80171e6:	bf00      	nop
 80171e8:	370c      	adds	r7, #12
 80171ea:	46bd      	mov	sp, r7
 80171ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171f0:	4770      	bx	lr
 80171f2:	bf00      	nop
 80171f4:	24000050 	.word	0x24000050
	...

08017200 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8017200:	f3ef 8009 	mrs	r0, PSP
 8017204:	f3bf 8f6f 	isb	sy
 8017208:	4b15      	ldr	r3, [pc, #84]	; (8017260 <pxCurrentTCBConst>)
 801720a:	681a      	ldr	r2, [r3, #0]
 801720c:	f01e 0f10 	tst.w	lr, #16
 8017210:	bf08      	it	eq
 8017212:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8017216:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801721a:	6010      	str	r0, [r2, #0]
 801721c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8017220:	f04f 0050 	mov.w	r0, #80	; 0x50
 8017224:	f380 8811 	msr	BASEPRI, r0
 8017228:	f3bf 8f4f 	dsb	sy
 801722c:	f3bf 8f6f 	isb	sy
 8017230:	f001 fc7c 	bl	8018b2c <vTaskSwitchContext>
 8017234:	f04f 0000 	mov.w	r0, #0
 8017238:	f380 8811 	msr	BASEPRI, r0
 801723c:	bc09      	pop	{r0, r3}
 801723e:	6819      	ldr	r1, [r3, #0]
 8017240:	6808      	ldr	r0, [r1, #0]
 8017242:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017246:	f01e 0f10 	tst.w	lr, #16
 801724a:	bf08      	it	eq
 801724c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8017250:	f380 8809 	msr	PSP, r0
 8017254:	f3bf 8f6f 	isb	sy
 8017258:	4770      	bx	lr
 801725a:	bf00      	nop
 801725c:	f3af 8000 	nop.w

08017260 <pxCurrentTCBConst>:
 8017260:	240069b4 	.word	0x240069b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8017264:	bf00      	nop
 8017266:	bf00      	nop

08017268 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8017268:	b580      	push	{r7, lr}
 801726a:	b082      	sub	sp, #8
 801726c:	af00      	add	r7, sp, #0
	__asm volatile
 801726e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017272:	f383 8811 	msr	BASEPRI, r3
 8017276:	f3bf 8f6f 	isb	sy
 801727a:	f3bf 8f4f 	dsb	sy
 801727e:	607b      	str	r3, [r7, #4]
}
 8017280:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8017282:	f001 fb99 	bl	80189b8 <xTaskIncrementTick>
 8017286:	4603      	mov	r3, r0
 8017288:	2b00      	cmp	r3, #0
 801728a:	d003      	beq.n	8017294 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801728c:	4b06      	ldr	r3, [pc, #24]	; (80172a8 <xPortSysTickHandler+0x40>)
 801728e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017292:	601a      	str	r2, [r3, #0]
 8017294:	2300      	movs	r3, #0
 8017296:	603b      	str	r3, [r7, #0]
	__asm volatile
 8017298:	683b      	ldr	r3, [r7, #0]
 801729a:	f383 8811 	msr	BASEPRI, r3
}
 801729e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80172a0:	bf00      	nop
 80172a2:	3708      	adds	r7, #8
 80172a4:	46bd      	mov	sp, r7
 80172a6:	bd80      	pop	{r7, pc}
 80172a8:	e000ed04 	.word	0xe000ed04

080172ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80172ac:	b480      	push	{r7}
 80172ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80172b0:	4b0b      	ldr	r3, [pc, #44]	; (80172e0 <vPortSetupTimerInterrupt+0x34>)
 80172b2:	2200      	movs	r2, #0
 80172b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80172b6:	4b0b      	ldr	r3, [pc, #44]	; (80172e4 <vPortSetupTimerInterrupt+0x38>)
 80172b8:	2200      	movs	r2, #0
 80172ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80172bc:	4b0a      	ldr	r3, [pc, #40]	; (80172e8 <vPortSetupTimerInterrupt+0x3c>)
 80172be:	681b      	ldr	r3, [r3, #0]
 80172c0:	4a0a      	ldr	r2, [pc, #40]	; (80172ec <vPortSetupTimerInterrupt+0x40>)
 80172c2:	fba2 2303 	umull	r2, r3, r2, r3
 80172c6:	099b      	lsrs	r3, r3, #6
 80172c8:	4a09      	ldr	r2, [pc, #36]	; (80172f0 <vPortSetupTimerInterrupt+0x44>)
 80172ca:	3b01      	subs	r3, #1
 80172cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80172ce:	4b04      	ldr	r3, [pc, #16]	; (80172e0 <vPortSetupTimerInterrupt+0x34>)
 80172d0:	2207      	movs	r2, #7
 80172d2:	601a      	str	r2, [r3, #0]
}
 80172d4:	bf00      	nop
 80172d6:	46bd      	mov	sp, r7
 80172d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172dc:	4770      	bx	lr
 80172de:	bf00      	nop
 80172e0:	e000e010 	.word	0xe000e010
 80172e4:	e000e018 	.word	0xe000e018
 80172e8:	24000040 	.word	0x24000040
 80172ec:	10624dd3 	.word	0x10624dd3
 80172f0:	e000e014 	.word	0xe000e014

080172f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80172f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8017304 <vPortEnableVFP+0x10>
 80172f8:	6801      	ldr	r1, [r0, #0]
 80172fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80172fe:	6001      	str	r1, [r0, #0]
 8017300:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8017302:	bf00      	nop
 8017304:	e000ed88 	.word	0xe000ed88

08017308 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8017308:	b480      	push	{r7}
 801730a:	b085      	sub	sp, #20
 801730c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801730e:	f3ef 8305 	mrs	r3, IPSR
 8017312:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8017314:	68fb      	ldr	r3, [r7, #12]
 8017316:	2b0f      	cmp	r3, #15
 8017318:	d914      	bls.n	8017344 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801731a:	4a17      	ldr	r2, [pc, #92]	; (8017378 <vPortValidateInterruptPriority+0x70>)
 801731c:	68fb      	ldr	r3, [r7, #12]
 801731e:	4413      	add	r3, r2
 8017320:	781b      	ldrb	r3, [r3, #0]
 8017322:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8017324:	4b15      	ldr	r3, [pc, #84]	; (801737c <vPortValidateInterruptPriority+0x74>)
 8017326:	781b      	ldrb	r3, [r3, #0]
 8017328:	7afa      	ldrb	r2, [r7, #11]
 801732a:	429a      	cmp	r2, r3
 801732c:	d20a      	bcs.n	8017344 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801732e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017332:	f383 8811 	msr	BASEPRI, r3
 8017336:	f3bf 8f6f 	isb	sy
 801733a:	f3bf 8f4f 	dsb	sy
 801733e:	607b      	str	r3, [r7, #4]
}
 8017340:	bf00      	nop
 8017342:	e7fe      	b.n	8017342 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8017344:	4b0e      	ldr	r3, [pc, #56]	; (8017380 <vPortValidateInterruptPriority+0x78>)
 8017346:	681b      	ldr	r3, [r3, #0]
 8017348:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801734c:	4b0d      	ldr	r3, [pc, #52]	; (8017384 <vPortValidateInterruptPriority+0x7c>)
 801734e:	681b      	ldr	r3, [r3, #0]
 8017350:	429a      	cmp	r2, r3
 8017352:	d90a      	bls.n	801736a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8017354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017358:	f383 8811 	msr	BASEPRI, r3
 801735c:	f3bf 8f6f 	isb	sy
 8017360:	f3bf 8f4f 	dsb	sy
 8017364:	603b      	str	r3, [r7, #0]
}
 8017366:	bf00      	nop
 8017368:	e7fe      	b.n	8017368 <vPortValidateInterruptPriority+0x60>
	}
 801736a:	bf00      	nop
 801736c:	3714      	adds	r7, #20
 801736e:	46bd      	mov	sp, r7
 8017370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017374:	4770      	bx	lr
 8017376:	bf00      	nop
 8017378:	e000e3f0 	.word	0xe000e3f0
 801737c:	2400696c 	.word	0x2400696c
 8017380:	e000ed0c 	.word	0xe000ed0c
 8017384:	24006970 	.word	0x24006970

08017388 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8017388:	b580      	push	{r7, lr}
 801738a:	b084      	sub	sp, #16
 801738c:	af00      	add	r7, sp, #0
 801738e:	6078      	str	r0, [r7, #4]
 8017390:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8017392:	687b      	ldr	r3, [r7, #4]
 8017394:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8017396:	68fb      	ldr	r3, [r7, #12]
 8017398:	2b00      	cmp	r3, #0
 801739a:	d10a      	bne.n	80173b2 <xQueueGenericReset+0x2a>
	__asm volatile
 801739c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80173a0:	f383 8811 	msr	BASEPRI, r3
 80173a4:	f3bf 8f6f 	isb	sy
 80173a8:	f3bf 8f4f 	dsb	sy
 80173ac:	60bb      	str	r3, [r7, #8]
}
 80173ae:	bf00      	nop
 80173b0:	e7fe      	b.n	80173b0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80173b2:	f7ff fec7 	bl	8017144 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80173b6:	68fb      	ldr	r3, [r7, #12]
 80173b8:	681a      	ldr	r2, [r3, #0]
 80173ba:	68fb      	ldr	r3, [r7, #12]
 80173bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80173be:	68f9      	ldr	r1, [r7, #12]
 80173c0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80173c2:	fb01 f303 	mul.w	r3, r1, r3
 80173c6:	441a      	add	r2, r3
 80173c8:	68fb      	ldr	r3, [r7, #12]
 80173ca:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80173cc:	68fb      	ldr	r3, [r7, #12]
 80173ce:	2200      	movs	r2, #0
 80173d0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80173d2:	68fb      	ldr	r3, [r7, #12]
 80173d4:	681a      	ldr	r2, [r3, #0]
 80173d6:	68fb      	ldr	r3, [r7, #12]
 80173d8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80173da:	68fb      	ldr	r3, [r7, #12]
 80173dc:	681a      	ldr	r2, [r3, #0]
 80173de:	68fb      	ldr	r3, [r7, #12]
 80173e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80173e2:	3b01      	subs	r3, #1
 80173e4:	68f9      	ldr	r1, [r7, #12]
 80173e6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80173e8:	fb01 f303 	mul.w	r3, r1, r3
 80173ec:	441a      	add	r2, r3
 80173ee:	68fb      	ldr	r3, [r7, #12]
 80173f0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80173f2:	68fb      	ldr	r3, [r7, #12]
 80173f4:	22ff      	movs	r2, #255	; 0xff
 80173f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80173fa:	68fb      	ldr	r3, [r7, #12]
 80173fc:	22ff      	movs	r2, #255	; 0xff
 80173fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8017402:	683b      	ldr	r3, [r7, #0]
 8017404:	2b00      	cmp	r3, #0
 8017406:	d114      	bne.n	8017432 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017408:	68fb      	ldr	r3, [r7, #12]
 801740a:	691b      	ldr	r3, [r3, #16]
 801740c:	2b00      	cmp	r3, #0
 801740e:	d01a      	beq.n	8017446 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017410:	68fb      	ldr	r3, [r7, #12]
 8017412:	3310      	adds	r3, #16
 8017414:	4618      	mov	r0, r3
 8017416:	f001 fc37 	bl	8018c88 <xTaskRemoveFromEventList>
 801741a:	4603      	mov	r3, r0
 801741c:	2b00      	cmp	r3, #0
 801741e:	d012      	beq.n	8017446 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8017420:	4b0c      	ldr	r3, [pc, #48]	; (8017454 <xQueueGenericReset+0xcc>)
 8017422:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017426:	601a      	str	r2, [r3, #0]
 8017428:	f3bf 8f4f 	dsb	sy
 801742c:	f3bf 8f6f 	isb	sy
 8017430:	e009      	b.n	8017446 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8017432:	68fb      	ldr	r3, [r7, #12]
 8017434:	3310      	adds	r3, #16
 8017436:	4618      	mov	r0, r3
 8017438:	f7ff fca0 	bl	8016d7c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801743c:	68fb      	ldr	r3, [r7, #12]
 801743e:	3324      	adds	r3, #36	; 0x24
 8017440:	4618      	mov	r0, r3
 8017442:	f7ff fc9b 	bl	8016d7c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8017446:	f7ff fead 	bl	80171a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801744a:	2301      	movs	r3, #1
}
 801744c:	4618      	mov	r0, r3
 801744e:	3710      	adds	r7, #16
 8017450:	46bd      	mov	sp, r7
 8017452:	bd80      	pop	{r7, pc}
 8017454:	e000ed04 	.word	0xe000ed04

08017458 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8017458:	b580      	push	{r7, lr}
 801745a:	b08e      	sub	sp, #56	; 0x38
 801745c:	af02      	add	r7, sp, #8
 801745e:	60f8      	str	r0, [r7, #12]
 8017460:	60b9      	str	r1, [r7, #8]
 8017462:	607a      	str	r2, [r7, #4]
 8017464:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8017466:	68fb      	ldr	r3, [r7, #12]
 8017468:	2b00      	cmp	r3, #0
 801746a:	d10a      	bne.n	8017482 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 801746c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017470:	f383 8811 	msr	BASEPRI, r3
 8017474:	f3bf 8f6f 	isb	sy
 8017478:	f3bf 8f4f 	dsb	sy
 801747c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801747e:	bf00      	nop
 8017480:	e7fe      	b.n	8017480 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8017482:	683b      	ldr	r3, [r7, #0]
 8017484:	2b00      	cmp	r3, #0
 8017486:	d10a      	bne.n	801749e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8017488:	f04f 0350 	mov.w	r3, #80	; 0x50
 801748c:	f383 8811 	msr	BASEPRI, r3
 8017490:	f3bf 8f6f 	isb	sy
 8017494:	f3bf 8f4f 	dsb	sy
 8017498:	627b      	str	r3, [r7, #36]	; 0x24
}
 801749a:	bf00      	nop
 801749c:	e7fe      	b.n	801749c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801749e:	687b      	ldr	r3, [r7, #4]
 80174a0:	2b00      	cmp	r3, #0
 80174a2:	d002      	beq.n	80174aa <xQueueGenericCreateStatic+0x52>
 80174a4:	68bb      	ldr	r3, [r7, #8]
 80174a6:	2b00      	cmp	r3, #0
 80174a8:	d001      	beq.n	80174ae <xQueueGenericCreateStatic+0x56>
 80174aa:	2301      	movs	r3, #1
 80174ac:	e000      	b.n	80174b0 <xQueueGenericCreateStatic+0x58>
 80174ae:	2300      	movs	r3, #0
 80174b0:	2b00      	cmp	r3, #0
 80174b2:	d10a      	bne.n	80174ca <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80174b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80174b8:	f383 8811 	msr	BASEPRI, r3
 80174bc:	f3bf 8f6f 	isb	sy
 80174c0:	f3bf 8f4f 	dsb	sy
 80174c4:	623b      	str	r3, [r7, #32]
}
 80174c6:	bf00      	nop
 80174c8:	e7fe      	b.n	80174c8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80174ca:	687b      	ldr	r3, [r7, #4]
 80174cc:	2b00      	cmp	r3, #0
 80174ce:	d102      	bne.n	80174d6 <xQueueGenericCreateStatic+0x7e>
 80174d0:	68bb      	ldr	r3, [r7, #8]
 80174d2:	2b00      	cmp	r3, #0
 80174d4:	d101      	bne.n	80174da <xQueueGenericCreateStatic+0x82>
 80174d6:	2301      	movs	r3, #1
 80174d8:	e000      	b.n	80174dc <xQueueGenericCreateStatic+0x84>
 80174da:	2300      	movs	r3, #0
 80174dc:	2b00      	cmp	r3, #0
 80174de:	d10a      	bne.n	80174f6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80174e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80174e4:	f383 8811 	msr	BASEPRI, r3
 80174e8:	f3bf 8f6f 	isb	sy
 80174ec:	f3bf 8f4f 	dsb	sy
 80174f0:	61fb      	str	r3, [r7, #28]
}
 80174f2:	bf00      	nop
 80174f4:	e7fe      	b.n	80174f4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80174f6:	2350      	movs	r3, #80	; 0x50
 80174f8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80174fa:	697b      	ldr	r3, [r7, #20]
 80174fc:	2b50      	cmp	r3, #80	; 0x50
 80174fe:	d00a      	beq.n	8017516 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8017500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017504:	f383 8811 	msr	BASEPRI, r3
 8017508:	f3bf 8f6f 	isb	sy
 801750c:	f3bf 8f4f 	dsb	sy
 8017510:	61bb      	str	r3, [r7, #24]
}
 8017512:	bf00      	nop
 8017514:	e7fe      	b.n	8017514 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8017516:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8017518:	683b      	ldr	r3, [r7, #0]
 801751a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 801751c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801751e:	2b00      	cmp	r3, #0
 8017520:	d00d      	beq.n	801753e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8017522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017524:	2201      	movs	r2, #1
 8017526:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801752a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801752e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017530:	9300      	str	r3, [sp, #0]
 8017532:	4613      	mov	r3, r2
 8017534:	687a      	ldr	r2, [r7, #4]
 8017536:	68b9      	ldr	r1, [r7, #8]
 8017538:	68f8      	ldr	r0, [r7, #12]
 801753a:	f000 f83f 	bl	80175bc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801753e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8017540:	4618      	mov	r0, r3
 8017542:	3730      	adds	r7, #48	; 0x30
 8017544:	46bd      	mov	sp, r7
 8017546:	bd80      	pop	{r7, pc}

08017548 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8017548:	b580      	push	{r7, lr}
 801754a:	b08a      	sub	sp, #40	; 0x28
 801754c:	af02      	add	r7, sp, #8
 801754e:	60f8      	str	r0, [r7, #12]
 8017550:	60b9      	str	r1, [r7, #8]
 8017552:	4613      	mov	r3, r2
 8017554:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8017556:	68fb      	ldr	r3, [r7, #12]
 8017558:	2b00      	cmp	r3, #0
 801755a:	d10a      	bne.n	8017572 <xQueueGenericCreate+0x2a>
	__asm volatile
 801755c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017560:	f383 8811 	msr	BASEPRI, r3
 8017564:	f3bf 8f6f 	isb	sy
 8017568:	f3bf 8f4f 	dsb	sy
 801756c:	613b      	str	r3, [r7, #16]
}
 801756e:	bf00      	nop
 8017570:	e7fe      	b.n	8017570 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017572:	68fb      	ldr	r3, [r7, #12]
 8017574:	68ba      	ldr	r2, [r7, #8]
 8017576:	fb02 f303 	mul.w	r3, r2, r3
 801757a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 801757c:	69fb      	ldr	r3, [r7, #28]
 801757e:	3350      	adds	r3, #80	; 0x50
 8017580:	4618      	mov	r0, r3
 8017582:	f7ff fa11 	bl	80169a8 <pvPortMalloc>
 8017586:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8017588:	69bb      	ldr	r3, [r7, #24]
 801758a:	2b00      	cmp	r3, #0
 801758c:	d011      	beq.n	80175b2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801758e:	69bb      	ldr	r3, [r7, #24]
 8017590:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8017592:	697b      	ldr	r3, [r7, #20]
 8017594:	3350      	adds	r3, #80	; 0x50
 8017596:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8017598:	69bb      	ldr	r3, [r7, #24]
 801759a:	2200      	movs	r2, #0
 801759c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80175a0:	79fa      	ldrb	r2, [r7, #7]
 80175a2:	69bb      	ldr	r3, [r7, #24]
 80175a4:	9300      	str	r3, [sp, #0]
 80175a6:	4613      	mov	r3, r2
 80175a8:	697a      	ldr	r2, [r7, #20]
 80175aa:	68b9      	ldr	r1, [r7, #8]
 80175ac:	68f8      	ldr	r0, [r7, #12]
 80175ae:	f000 f805 	bl	80175bc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80175b2:	69bb      	ldr	r3, [r7, #24]
	}
 80175b4:	4618      	mov	r0, r3
 80175b6:	3720      	adds	r7, #32
 80175b8:	46bd      	mov	sp, r7
 80175ba:	bd80      	pop	{r7, pc}

080175bc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80175bc:	b580      	push	{r7, lr}
 80175be:	b084      	sub	sp, #16
 80175c0:	af00      	add	r7, sp, #0
 80175c2:	60f8      	str	r0, [r7, #12]
 80175c4:	60b9      	str	r1, [r7, #8]
 80175c6:	607a      	str	r2, [r7, #4]
 80175c8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80175ca:	68bb      	ldr	r3, [r7, #8]
 80175cc:	2b00      	cmp	r3, #0
 80175ce:	d103      	bne.n	80175d8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80175d0:	69bb      	ldr	r3, [r7, #24]
 80175d2:	69ba      	ldr	r2, [r7, #24]
 80175d4:	601a      	str	r2, [r3, #0]
 80175d6:	e002      	b.n	80175de <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80175d8:	69bb      	ldr	r3, [r7, #24]
 80175da:	687a      	ldr	r2, [r7, #4]
 80175dc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80175de:	69bb      	ldr	r3, [r7, #24]
 80175e0:	68fa      	ldr	r2, [r7, #12]
 80175e2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80175e4:	69bb      	ldr	r3, [r7, #24]
 80175e6:	68ba      	ldr	r2, [r7, #8]
 80175e8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80175ea:	2101      	movs	r1, #1
 80175ec:	69b8      	ldr	r0, [r7, #24]
 80175ee:	f7ff fecb 	bl	8017388 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80175f2:	69bb      	ldr	r3, [r7, #24]
 80175f4:	78fa      	ldrb	r2, [r7, #3]
 80175f6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80175fa:	bf00      	nop
 80175fc:	3710      	adds	r7, #16
 80175fe:	46bd      	mov	sp, r7
 8017600:	bd80      	pop	{r7, pc}

08017602 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8017602:	b580      	push	{r7, lr}
 8017604:	b08a      	sub	sp, #40	; 0x28
 8017606:	af02      	add	r7, sp, #8
 8017608:	60f8      	str	r0, [r7, #12]
 801760a:	60b9      	str	r1, [r7, #8]
 801760c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 801760e:	68fb      	ldr	r3, [r7, #12]
 8017610:	2b00      	cmp	r3, #0
 8017612:	d10a      	bne.n	801762a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8017614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017618:	f383 8811 	msr	BASEPRI, r3
 801761c:	f3bf 8f6f 	isb	sy
 8017620:	f3bf 8f4f 	dsb	sy
 8017624:	61bb      	str	r3, [r7, #24]
}
 8017626:	bf00      	nop
 8017628:	e7fe      	b.n	8017628 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 801762a:	68ba      	ldr	r2, [r7, #8]
 801762c:	68fb      	ldr	r3, [r7, #12]
 801762e:	429a      	cmp	r2, r3
 8017630:	d90a      	bls.n	8017648 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8017632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017636:	f383 8811 	msr	BASEPRI, r3
 801763a:	f3bf 8f6f 	isb	sy
 801763e:	f3bf 8f4f 	dsb	sy
 8017642:	617b      	str	r3, [r7, #20]
}
 8017644:	bf00      	nop
 8017646:	e7fe      	b.n	8017646 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8017648:	2302      	movs	r3, #2
 801764a:	9300      	str	r3, [sp, #0]
 801764c:	687b      	ldr	r3, [r7, #4]
 801764e:	2200      	movs	r2, #0
 8017650:	2100      	movs	r1, #0
 8017652:	68f8      	ldr	r0, [r7, #12]
 8017654:	f7ff ff00 	bl	8017458 <xQueueGenericCreateStatic>
 8017658:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 801765a:	69fb      	ldr	r3, [r7, #28]
 801765c:	2b00      	cmp	r3, #0
 801765e:	d002      	beq.n	8017666 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8017660:	69fb      	ldr	r3, [r7, #28]
 8017662:	68ba      	ldr	r2, [r7, #8]
 8017664:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8017666:	69fb      	ldr	r3, [r7, #28]
	}
 8017668:	4618      	mov	r0, r3
 801766a:	3720      	adds	r7, #32
 801766c:	46bd      	mov	sp, r7
 801766e:	bd80      	pop	{r7, pc}

08017670 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8017670:	b580      	push	{r7, lr}
 8017672:	b086      	sub	sp, #24
 8017674:	af00      	add	r7, sp, #0
 8017676:	6078      	str	r0, [r7, #4]
 8017678:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 801767a:	687b      	ldr	r3, [r7, #4]
 801767c:	2b00      	cmp	r3, #0
 801767e:	d10a      	bne.n	8017696 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8017680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017684:	f383 8811 	msr	BASEPRI, r3
 8017688:	f3bf 8f6f 	isb	sy
 801768c:	f3bf 8f4f 	dsb	sy
 8017690:	613b      	str	r3, [r7, #16]
}
 8017692:	bf00      	nop
 8017694:	e7fe      	b.n	8017694 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8017696:	683a      	ldr	r2, [r7, #0]
 8017698:	687b      	ldr	r3, [r7, #4]
 801769a:	429a      	cmp	r2, r3
 801769c:	d90a      	bls.n	80176b4 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 801769e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80176a2:	f383 8811 	msr	BASEPRI, r3
 80176a6:	f3bf 8f6f 	isb	sy
 80176aa:	f3bf 8f4f 	dsb	sy
 80176ae:	60fb      	str	r3, [r7, #12]
}
 80176b0:	bf00      	nop
 80176b2:	e7fe      	b.n	80176b2 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80176b4:	2202      	movs	r2, #2
 80176b6:	2100      	movs	r1, #0
 80176b8:	6878      	ldr	r0, [r7, #4]
 80176ba:	f7ff ff45 	bl	8017548 <xQueueGenericCreate>
 80176be:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80176c0:	697b      	ldr	r3, [r7, #20]
 80176c2:	2b00      	cmp	r3, #0
 80176c4:	d002      	beq.n	80176cc <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80176c6:	697b      	ldr	r3, [r7, #20]
 80176c8:	683a      	ldr	r2, [r7, #0]
 80176ca:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80176cc:	697b      	ldr	r3, [r7, #20]
	}
 80176ce:	4618      	mov	r0, r3
 80176d0:	3718      	adds	r7, #24
 80176d2:	46bd      	mov	sp, r7
 80176d4:	bd80      	pop	{r7, pc}
	...

080176d8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80176d8:	b580      	push	{r7, lr}
 80176da:	b08e      	sub	sp, #56	; 0x38
 80176dc:	af00      	add	r7, sp, #0
 80176de:	60f8      	str	r0, [r7, #12]
 80176e0:	60b9      	str	r1, [r7, #8]
 80176e2:	607a      	str	r2, [r7, #4]
 80176e4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80176e6:	2300      	movs	r3, #0
 80176e8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80176ea:	68fb      	ldr	r3, [r7, #12]
 80176ec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80176ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176f0:	2b00      	cmp	r3, #0
 80176f2:	d10a      	bne.n	801770a <xQueueGenericSend+0x32>
	__asm volatile
 80176f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80176f8:	f383 8811 	msr	BASEPRI, r3
 80176fc:	f3bf 8f6f 	isb	sy
 8017700:	f3bf 8f4f 	dsb	sy
 8017704:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8017706:	bf00      	nop
 8017708:	e7fe      	b.n	8017708 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801770a:	68bb      	ldr	r3, [r7, #8]
 801770c:	2b00      	cmp	r3, #0
 801770e:	d103      	bne.n	8017718 <xQueueGenericSend+0x40>
 8017710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017714:	2b00      	cmp	r3, #0
 8017716:	d101      	bne.n	801771c <xQueueGenericSend+0x44>
 8017718:	2301      	movs	r3, #1
 801771a:	e000      	b.n	801771e <xQueueGenericSend+0x46>
 801771c:	2300      	movs	r3, #0
 801771e:	2b00      	cmp	r3, #0
 8017720:	d10a      	bne.n	8017738 <xQueueGenericSend+0x60>
	__asm volatile
 8017722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017726:	f383 8811 	msr	BASEPRI, r3
 801772a:	f3bf 8f6f 	isb	sy
 801772e:	f3bf 8f4f 	dsb	sy
 8017732:	627b      	str	r3, [r7, #36]	; 0x24
}
 8017734:	bf00      	nop
 8017736:	e7fe      	b.n	8017736 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8017738:	683b      	ldr	r3, [r7, #0]
 801773a:	2b02      	cmp	r3, #2
 801773c:	d103      	bne.n	8017746 <xQueueGenericSend+0x6e>
 801773e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017742:	2b01      	cmp	r3, #1
 8017744:	d101      	bne.n	801774a <xQueueGenericSend+0x72>
 8017746:	2301      	movs	r3, #1
 8017748:	e000      	b.n	801774c <xQueueGenericSend+0x74>
 801774a:	2300      	movs	r3, #0
 801774c:	2b00      	cmp	r3, #0
 801774e:	d10a      	bne.n	8017766 <xQueueGenericSend+0x8e>
	__asm volatile
 8017750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017754:	f383 8811 	msr	BASEPRI, r3
 8017758:	f3bf 8f6f 	isb	sy
 801775c:	f3bf 8f4f 	dsb	sy
 8017760:	623b      	str	r3, [r7, #32]
}
 8017762:	bf00      	nop
 8017764:	e7fe      	b.n	8017764 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8017766:	f001 fc4d 	bl	8019004 <xTaskGetSchedulerState>
 801776a:	4603      	mov	r3, r0
 801776c:	2b00      	cmp	r3, #0
 801776e:	d102      	bne.n	8017776 <xQueueGenericSend+0x9e>
 8017770:	687b      	ldr	r3, [r7, #4]
 8017772:	2b00      	cmp	r3, #0
 8017774:	d101      	bne.n	801777a <xQueueGenericSend+0xa2>
 8017776:	2301      	movs	r3, #1
 8017778:	e000      	b.n	801777c <xQueueGenericSend+0xa4>
 801777a:	2300      	movs	r3, #0
 801777c:	2b00      	cmp	r3, #0
 801777e:	d10a      	bne.n	8017796 <xQueueGenericSend+0xbe>
	__asm volatile
 8017780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017784:	f383 8811 	msr	BASEPRI, r3
 8017788:	f3bf 8f6f 	isb	sy
 801778c:	f3bf 8f4f 	dsb	sy
 8017790:	61fb      	str	r3, [r7, #28]
}
 8017792:	bf00      	nop
 8017794:	e7fe      	b.n	8017794 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8017796:	f7ff fcd5 	bl	8017144 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801779a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801779c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801779e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80177a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80177a2:	429a      	cmp	r2, r3
 80177a4:	d302      	bcc.n	80177ac <xQueueGenericSend+0xd4>
 80177a6:	683b      	ldr	r3, [r7, #0]
 80177a8:	2b02      	cmp	r3, #2
 80177aa:	d129      	bne.n	8017800 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80177ac:	683a      	ldr	r2, [r7, #0]
 80177ae:	68b9      	ldr	r1, [r7, #8]
 80177b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80177b2:	f000 fc5e 	bl	8018072 <prvCopyDataToQueue>
 80177b6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80177b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80177ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80177bc:	2b00      	cmp	r3, #0
 80177be:	d010      	beq.n	80177e2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80177c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80177c2:	3324      	adds	r3, #36	; 0x24
 80177c4:	4618      	mov	r0, r3
 80177c6:	f001 fa5f 	bl	8018c88 <xTaskRemoveFromEventList>
 80177ca:	4603      	mov	r3, r0
 80177cc:	2b00      	cmp	r3, #0
 80177ce:	d013      	beq.n	80177f8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80177d0:	4b3f      	ldr	r3, [pc, #252]	; (80178d0 <xQueueGenericSend+0x1f8>)
 80177d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80177d6:	601a      	str	r2, [r3, #0]
 80177d8:	f3bf 8f4f 	dsb	sy
 80177dc:	f3bf 8f6f 	isb	sy
 80177e0:	e00a      	b.n	80177f8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80177e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80177e4:	2b00      	cmp	r3, #0
 80177e6:	d007      	beq.n	80177f8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80177e8:	4b39      	ldr	r3, [pc, #228]	; (80178d0 <xQueueGenericSend+0x1f8>)
 80177ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80177ee:	601a      	str	r2, [r3, #0]
 80177f0:	f3bf 8f4f 	dsb	sy
 80177f4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80177f8:	f7ff fcd4 	bl	80171a4 <vPortExitCritical>
				return pdPASS;
 80177fc:	2301      	movs	r3, #1
 80177fe:	e063      	b.n	80178c8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8017800:	687b      	ldr	r3, [r7, #4]
 8017802:	2b00      	cmp	r3, #0
 8017804:	d103      	bne.n	801780e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8017806:	f7ff fccd 	bl	80171a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801780a:	2300      	movs	r3, #0
 801780c:	e05c      	b.n	80178c8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 801780e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017810:	2b00      	cmp	r3, #0
 8017812:	d106      	bne.n	8017822 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8017814:	f107 0314 	add.w	r3, r7, #20
 8017818:	4618      	mov	r0, r3
 801781a:	f001 fa99 	bl	8018d50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801781e:	2301      	movs	r3, #1
 8017820:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8017822:	f7ff fcbf 	bl	80171a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8017826:	f000 fff9 	bl	801881c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801782a:	f7ff fc8b 	bl	8017144 <vPortEnterCritical>
 801782e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017830:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017834:	b25b      	sxtb	r3, r3
 8017836:	f1b3 3fff 	cmp.w	r3, #4294967295
 801783a:	d103      	bne.n	8017844 <xQueueGenericSend+0x16c>
 801783c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801783e:	2200      	movs	r2, #0
 8017840:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8017844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017846:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801784a:	b25b      	sxtb	r3, r3
 801784c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017850:	d103      	bne.n	801785a <xQueueGenericSend+0x182>
 8017852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017854:	2200      	movs	r2, #0
 8017856:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801785a:	f7ff fca3 	bl	80171a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801785e:	1d3a      	adds	r2, r7, #4
 8017860:	f107 0314 	add.w	r3, r7, #20
 8017864:	4611      	mov	r1, r2
 8017866:	4618      	mov	r0, r3
 8017868:	f001 fa88 	bl	8018d7c <xTaskCheckForTimeOut>
 801786c:	4603      	mov	r3, r0
 801786e:	2b00      	cmp	r3, #0
 8017870:	d124      	bne.n	80178bc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8017872:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017874:	f000 fcf5 	bl	8018262 <prvIsQueueFull>
 8017878:	4603      	mov	r3, r0
 801787a:	2b00      	cmp	r3, #0
 801787c:	d018      	beq.n	80178b0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801787e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017880:	3310      	adds	r3, #16
 8017882:	687a      	ldr	r2, [r7, #4]
 8017884:	4611      	mov	r1, r2
 8017886:	4618      	mov	r0, r3
 8017888:	f001 f9ae 	bl	8018be8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801788c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801788e:	f000 fc80 	bl	8018192 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8017892:	f000 ffd1 	bl	8018838 <xTaskResumeAll>
 8017896:	4603      	mov	r3, r0
 8017898:	2b00      	cmp	r3, #0
 801789a:	f47f af7c 	bne.w	8017796 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 801789e:	4b0c      	ldr	r3, [pc, #48]	; (80178d0 <xQueueGenericSend+0x1f8>)
 80178a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80178a4:	601a      	str	r2, [r3, #0]
 80178a6:	f3bf 8f4f 	dsb	sy
 80178aa:	f3bf 8f6f 	isb	sy
 80178ae:	e772      	b.n	8017796 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80178b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80178b2:	f000 fc6e 	bl	8018192 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80178b6:	f000 ffbf 	bl	8018838 <xTaskResumeAll>
 80178ba:	e76c      	b.n	8017796 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80178bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80178be:	f000 fc68 	bl	8018192 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80178c2:	f000 ffb9 	bl	8018838 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80178c6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80178c8:	4618      	mov	r0, r3
 80178ca:	3738      	adds	r7, #56	; 0x38
 80178cc:	46bd      	mov	sp, r7
 80178ce:	bd80      	pop	{r7, pc}
 80178d0:	e000ed04 	.word	0xe000ed04

080178d4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80178d4:	b580      	push	{r7, lr}
 80178d6:	b090      	sub	sp, #64	; 0x40
 80178d8:	af00      	add	r7, sp, #0
 80178da:	60f8      	str	r0, [r7, #12]
 80178dc:	60b9      	str	r1, [r7, #8]
 80178de:	607a      	str	r2, [r7, #4]
 80178e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80178e2:	68fb      	ldr	r3, [r7, #12]
 80178e4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80178e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80178e8:	2b00      	cmp	r3, #0
 80178ea:	d10a      	bne.n	8017902 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80178ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80178f0:	f383 8811 	msr	BASEPRI, r3
 80178f4:	f3bf 8f6f 	isb	sy
 80178f8:	f3bf 8f4f 	dsb	sy
 80178fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80178fe:	bf00      	nop
 8017900:	e7fe      	b.n	8017900 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017902:	68bb      	ldr	r3, [r7, #8]
 8017904:	2b00      	cmp	r3, #0
 8017906:	d103      	bne.n	8017910 <xQueueGenericSendFromISR+0x3c>
 8017908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801790a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801790c:	2b00      	cmp	r3, #0
 801790e:	d101      	bne.n	8017914 <xQueueGenericSendFromISR+0x40>
 8017910:	2301      	movs	r3, #1
 8017912:	e000      	b.n	8017916 <xQueueGenericSendFromISR+0x42>
 8017914:	2300      	movs	r3, #0
 8017916:	2b00      	cmp	r3, #0
 8017918:	d10a      	bne.n	8017930 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 801791a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801791e:	f383 8811 	msr	BASEPRI, r3
 8017922:	f3bf 8f6f 	isb	sy
 8017926:	f3bf 8f4f 	dsb	sy
 801792a:	627b      	str	r3, [r7, #36]	; 0x24
}
 801792c:	bf00      	nop
 801792e:	e7fe      	b.n	801792e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8017930:	683b      	ldr	r3, [r7, #0]
 8017932:	2b02      	cmp	r3, #2
 8017934:	d103      	bne.n	801793e <xQueueGenericSendFromISR+0x6a>
 8017936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801793a:	2b01      	cmp	r3, #1
 801793c:	d101      	bne.n	8017942 <xQueueGenericSendFromISR+0x6e>
 801793e:	2301      	movs	r3, #1
 8017940:	e000      	b.n	8017944 <xQueueGenericSendFromISR+0x70>
 8017942:	2300      	movs	r3, #0
 8017944:	2b00      	cmp	r3, #0
 8017946:	d10a      	bne.n	801795e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8017948:	f04f 0350 	mov.w	r3, #80	; 0x50
 801794c:	f383 8811 	msr	BASEPRI, r3
 8017950:	f3bf 8f6f 	isb	sy
 8017954:	f3bf 8f4f 	dsb	sy
 8017958:	623b      	str	r3, [r7, #32]
}
 801795a:	bf00      	nop
 801795c:	e7fe      	b.n	801795c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801795e:	f7ff fcd3 	bl	8017308 <vPortValidateInterruptPriority>
	__asm volatile
 8017962:	f3ef 8211 	mrs	r2, BASEPRI
 8017966:	f04f 0350 	mov.w	r3, #80	; 0x50
 801796a:	f383 8811 	msr	BASEPRI, r3
 801796e:	f3bf 8f6f 	isb	sy
 8017972:	f3bf 8f4f 	dsb	sy
 8017976:	61fa      	str	r2, [r7, #28]
 8017978:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 801797a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801797c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801797e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017980:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8017982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017986:	429a      	cmp	r2, r3
 8017988:	d302      	bcc.n	8017990 <xQueueGenericSendFromISR+0xbc>
 801798a:	683b      	ldr	r3, [r7, #0]
 801798c:	2b02      	cmp	r3, #2
 801798e:	d12f      	bne.n	80179f0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8017990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017992:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017996:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 801799a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801799c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801799e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80179a0:	683a      	ldr	r2, [r7, #0]
 80179a2:	68b9      	ldr	r1, [r7, #8]
 80179a4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80179a6:	f000 fb64 	bl	8018072 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80179aa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80179ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80179b2:	d112      	bne.n	80179da <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80179b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80179b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80179b8:	2b00      	cmp	r3, #0
 80179ba:	d016      	beq.n	80179ea <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80179bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80179be:	3324      	adds	r3, #36	; 0x24
 80179c0:	4618      	mov	r0, r3
 80179c2:	f001 f961 	bl	8018c88 <xTaskRemoveFromEventList>
 80179c6:	4603      	mov	r3, r0
 80179c8:	2b00      	cmp	r3, #0
 80179ca:	d00e      	beq.n	80179ea <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80179cc:	687b      	ldr	r3, [r7, #4]
 80179ce:	2b00      	cmp	r3, #0
 80179d0:	d00b      	beq.n	80179ea <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80179d2:	687b      	ldr	r3, [r7, #4]
 80179d4:	2201      	movs	r2, #1
 80179d6:	601a      	str	r2, [r3, #0]
 80179d8:	e007      	b.n	80179ea <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80179da:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80179de:	3301      	adds	r3, #1
 80179e0:	b2db      	uxtb	r3, r3
 80179e2:	b25a      	sxtb	r2, r3
 80179e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80179e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80179ea:	2301      	movs	r3, #1
 80179ec:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80179ee:	e001      	b.n	80179f4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80179f0:	2300      	movs	r3, #0
 80179f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80179f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80179f6:	617b      	str	r3, [r7, #20]
	__asm volatile
 80179f8:	697b      	ldr	r3, [r7, #20]
 80179fa:	f383 8811 	msr	BASEPRI, r3
}
 80179fe:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8017a00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8017a02:	4618      	mov	r0, r3
 8017a04:	3740      	adds	r7, #64	; 0x40
 8017a06:	46bd      	mov	sp, r7
 8017a08:	bd80      	pop	{r7, pc}

08017a0a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8017a0a:	b580      	push	{r7, lr}
 8017a0c:	b08e      	sub	sp, #56	; 0x38
 8017a0e:	af00      	add	r7, sp, #0
 8017a10:	6078      	str	r0, [r7, #4]
 8017a12:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8017a14:	687b      	ldr	r3, [r7, #4]
 8017a16:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8017a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a1a:	2b00      	cmp	r3, #0
 8017a1c:	d10a      	bne.n	8017a34 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8017a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a22:	f383 8811 	msr	BASEPRI, r3
 8017a26:	f3bf 8f6f 	isb	sy
 8017a2a:	f3bf 8f4f 	dsb	sy
 8017a2e:	623b      	str	r3, [r7, #32]
}
 8017a30:	bf00      	nop
 8017a32:	e7fe      	b.n	8017a32 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8017a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017a38:	2b00      	cmp	r3, #0
 8017a3a:	d00a      	beq.n	8017a52 <xQueueGiveFromISR+0x48>
	__asm volatile
 8017a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a40:	f383 8811 	msr	BASEPRI, r3
 8017a44:	f3bf 8f6f 	isb	sy
 8017a48:	f3bf 8f4f 	dsb	sy
 8017a4c:	61fb      	str	r3, [r7, #28]
}
 8017a4e:	bf00      	nop
 8017a50:	e7fe      	b.n	8017a50 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8017a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a54:	681b      	ldr	r3, [r3, #0]
 8017a56:	2b00      	cmp	r3, #0
 8017a58:	d103      	bne.n	8017a62 <xQueueGiveFromISR+0x58>
 8017a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a5c:	689b      	ldr	r3, [r3, #8]
 8017a5e:	2b00      	cmp	r3, #0
 8017a60:	d101      	bne.n	8017a66 <xQueueGiveFromISR+0x5c>
 8017a62:	2301      	movs	r3, #1
 8017a64:	e000      	b.n	8017a68 <xQueueGiveFromISR+0x5e>
 8017a66:	2300      	movs	r3, #0
 8017a68:	2b00      	cmp	r3, #0
 8017a6a:	d10a      	bne.n	8017a82 <xQueueGiveFromISR+0x78>
	__asm volatile
 8017a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a70:	f383 8811 	msr	BASEPRI, r3
 8017a74:	f3bf 8f6f 	isb	sy
 8017a78:	f3bf 8f4f 	dsb	sy
 8017a7c:	61bb      	str	r3, [r7, #24]
}
 8017a7e:	bf00      	nop
 8017a80:	e7fe      	b.n	8017a80 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8017a82:	f7ff fc41 	bl	8017308 <vPortValidateInterruptPriority>
	__asm volatile
 8017a86:	f3ef 8211 	mrs	r2, BASEPRI
 8017a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a8e:	f383 8811 	msr	BASEPRI, r3
 8017a92:	f3bf 8f6f 	isb	sy
 8017a96:	f3bf 8f4f 	dsb	sy
 8017a9a:	617a      	str	r2, [r7, #20]
 8017a9c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8017a9e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8017aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017aa6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8017aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017aaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017aac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017aae:	429a      	cmp	r2, r3
 8017ab0:	d22b      	bcs.n	8017b0a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8017ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ab4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017ab8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8017abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017abe:	1c5a      	adds	r2, r3, #1
 8017ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ac2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8017ac4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8017ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017acc:	d112      	bne.n	8017af4 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017ad2:	2b00      	cmp	r3, #0
 8017ad4:	d016      	beq.n	8017b04 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ad8:	3324      	adds	r3, #36	; 0x24
 8017ada:	4618      	mov	r0, r3
 8017adc:	f001 f8d4 	bl	8018c88 <xTaskRemoveFromEventList>
 8017ae0:	4603      	mov	r3, r0
 8017ae2:	2b00      	cmp	r3, #0
 8017ae4:	d00e      	beq.n	8017b04 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8017ae6:	683b      	ldr	r3, [r7, #0]
 8017ae8:	2b00      	cmp	r3, #0
 8017aea:	d00b      	beq.n	8017b04 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8017aec:	683b      	ldr	r3, [r7, #0]
 8017aee:	2201      	movs	r2, #1
 8017af0:	601a      	str	r2, [r3, #0]
 8017af2:	e007      	b.n	8017b04 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8017af4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017af8:	3301      	adds	r3, #1
 8017afa:	b2db      	uxtb	r3, r3
 8017afc:	b25a      	sxtb	r2, r3
 8017afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8017b04:	2301      	movs	r3, #1
 8017b06:	637b      	str	r3, [r7, #52]	; 0x34
 8017b08:	e001      	b.n	8017b0e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8017b0a:	2300      	movs	r3, #0
 8017b0c:	637b      	str	r3, [r7, #52]	; 0x34
 8017b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b10:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8017b12:	68fb      	ldr	r3, [r7, #12]
 8017b14:	f383 8811 	msr	BASEPRI, r3
}
 8017b18:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8017b1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8017b1c:	4618      	mov	r0, r3
 8017b1e:	3738      	adds	r7, #56	; 0x38
 8017b20:	46bd      	mov	sp, r7
 8017b22:	bd80      	pop	{r7, pc}

08017b24 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8017b24:	b580      	push	{r7, lr}
 8017b26:	b08c      	sub	sp, #48	; 0x30
 8017b28:	af00      	add	r7, sp, #0
 8017b2a:	60f8      	str	r0, [r7, #12]
 8017b2c:	60b9      	str	r1, [r7, #8]
 8017b2e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8017b30:	2300      	movs	r3, #0
 8017b32:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8017b34:	68fb      	ldr	r3, [r7, #12]
 8017b36:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8017b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b3a:	2b00      	cmp	r3, #0
 8017b3c:	d10a      	bne.n	8017b54 <xQueueReceive+0x30>
	__asm volatile
 8017b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b42:	f383 8811 	msr	BASEPRI, r3
 8017b46:	f3bf 8f6f 	isb	sy
 8017b4a:	f3bf 8f4f 	dsb	sy
 8017b4e:	623b      	str	r3, [r7, #32]
}
 8017b50:	bf00      	nop
 8017b52:	e7fe      	b.n	8017b52 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017b54:	68bb      	ldr	r3, [r7, #8]
 8017b56:	2b00      	cmp	r3, #0
 8017b58:	d103      	bne.n	8017b62 <xQueueReceive+0x3e>
 8017b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017b5e:	2b00      	cmp	r3, #0
 8017b60:	d101      	bne.n	8017b66 <xQueueReceive+0x42>
 8017b62:	2301      	movs	r3, #1
 8017b64:	e000      	b.n	8017b68 <xQueueReceive+0x44>
 8017b66:	2300      	movs	r3, #0
 8017b68:	2b00      	cmp	r3, #0
 8017b6a:	d10a      	bne.n	8017b82 <xQueueReceive+0x5e>
	__asm volatile
 8017b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b70:	f383 8811 	msr	BASEPRI, r3
 8017b74:	f3bf 8f6f 	isb	sy
 8017b78:	f3bf 8f4f 	dsb	sy
 8017b7c:	61fb      	str	r3, [r7, #28]
}
 8017b7e:	bf00      	nop
 8017b80:	e7fe      	b.n	8017b80 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8017b82:	f001 fa3f 	bl	8019004 <xTaskGetSchedulerState>
 8017b86:	4603      	mov	r3, r0
 8017b88:	2b00      	cmp	r3, #0
 8017b8a:	d102      	bne.n	8017b92 <xQueueReceive+0x6e>
 8017b8c:	687b      	ldr	r3, [r7, #4]
 8017b8e:	2b00      	cmp	r3, #0
 8017b90:	d101      	bne.n	8017b96 <xQueueReceive+0x72>
 8017b92:	2301      	movs	r3, #1
 8017b94:	e000      	b.n	8017b98 <xQueueReceive+0x74>
 8017b96:	2300      	movs	r3, #0
 8017b98:	2b00      	cmp	r3, #0
 8017b9a:	d10a      	bne.n	8017bb2 <xQueueReceive+0x8e>
	__asm volatile
 8017b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017ba0:	f383 8811 	msr	BASEPRI, r3
 8017ba4:	f3bf 8f6f 	isb	sy
 8017ba8:	f3bf 8f4f 	dsb	sy
 8017bac:	61bb      	str	r3, [r7, #24]
}
 8017bae:	bf00      	nop
 8017bb0:	e7fe      	b.n	8017bb0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8017bb2:	f7ff fac7 	bl	8017144 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017bba:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017bbe:	2b00      	cmp	r3, #0
 8017bc0:	d01f      	beq.n	8017c02 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8017bc2:	68b9      	ldr	r1, [r7, #8]
 8017bc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017bc6:	f000 fabe 	bl	8018146 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8017bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017bcc:	1e5a      	subs	r2, r3, #1
 8017bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017bd0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017bd4:	691b      	ldr	r3, [r3, #16]
 8017bd6:	2b00      	cmp	r3, #0
 8017bd8:	d00f      	beq.n	8017bfa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017bdc:	3310      	adds	r3, #16
 8017bde:	4618      	mov	r0, r3
 8017be0:	f001 f852 	bl	8018c88 <xTaskRemoveFromEventList>
 8017be4:	4603      	mov	r3, r0
 8017be6:	2b00      	cmp	r3, #0
 8017be8:	d007      	beq.n	8017bfa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8017bea:	4b3d      	ldr	r3, [pc, #244]	; (8017ce0 <xQueueReceive+0x1bc>)
 8017bec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017bf0:	601a      	str	r2, [r3, #0]
 8017bf2:	f3bf 8f4f 	dsb	sy
 8017bf6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8017bfa:	f7ff fad3 	bl	80171a4 <vPortExitCritical>
				return pdPASS;
 8017bfe:	2301      	movs	r3, #1
 8017c00:	e069      	b.n	8017cd6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8017c02:	687b      	ldr	r3, [r7, #4]
 8017c04:	2b00      	cmp	r3, #0
 8017c06:	d103      	bne.n	8017c10 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8017c08:	f7ff facc 	bl	80171a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8017c0c:	2300      	movs	r3, #0
 8017c0e:	e062      	b.n	8017cd6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8017c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c12:	2b00      	cmp	r3, #0
 8017c14:	d106      	bne.n	8017c24 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8017c16:	f107 0310 	add.w	r3, r7, #16
 8017c1a:	4618      	mov	r0, r3
 8017c1c:	f001 f898 	bl	8018d50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8017c20:	2301      	movs	r3, #1
 8017c22:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8017c24:	f7ff fabe 	bl	80171a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8017c28:	f000 fdf8 	bl	801881c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8017c2c:	f7ff fa8a 	bl	8017144 <vPortEnterCritical>
 8017c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c32:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017c36:	b25b      	sxtb	r3, r3
 8017c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017c3c:	d103      	bne.n	8017c46 <xQueueReceive+0x122>
 8017c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c40:	2200      	movs	r2, #0
 8017c42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8017c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017c4c:	b25b      	sxtb	r3, r3
 8017c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017c52:	d103      	bne.n	8017c5c <xQueueReceive+0x138>
 8017c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c56:	2200      	movs	r2, #0
 8017c58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8017c5c:	f7ff faa2 	bl	80171a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8017c60:	1d3a      	adds	r2, r7, #4
 8017c62:	f107 0310 	add.w	r3, r7, #16
 8017c66:	4611      	mov	r1, r2
 8017c68:	4618      	mov	r0, r3
 8017c6a:	f001 f887 	bl	8018d7c <xTaskCheckForTimeOut>
 8017c6e:	4603      	mov	r3, r0
 8017c70:	2b00      	cmp	r3, #0
 8017c72:	d123      	bne.n	8017cbc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017c74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017c76:	f000 fade 	bl	8018236 <prvIsQueueEmpty>
 8017c7a:	4603      	mov	r3, r0
 8017c7c:	2b00      	cmp	r3, #0
 8017c7e:	d017      	beq.n	8017cb0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8017c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c82:	3324      	adds	r3, #36	; 0x24
 8017c84:	687a      	ldr	r2, [r7, #4]
 8017c86:	4611      	mov	r1, r2
 8017c88:	4618      	mov	r0, r3
 8017c8a:	f000 ffad 	bl	8018be8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8017c8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017c90:	f000 fa7f 	bl	8018192 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8017c94:	f000 fdd0 	bl	8018838 <xTaskResumeAll>
 8017c98:	4603      	mov	r3, r0
 8017c9a:	2b00      	cmp	r3, #0
 8017c9c:	d189      	bne.n	8017bb2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8017c9e:	4b10      	ldr	r3, [pc, #64]	; (8017ce0 <xQueueReceive+0x1bc>)
 8017ca0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017ca4:	601a      	str	r2, [r3, #0]
 8017ca6:	f3bf 8f4f 	dsb	sy
 8017caa:	f3bf 8f6f 	isb	sy
 8017cae:	e780      	b.n	8017bb2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8017cb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017cb2:	f000 fa6e 	bl	8018192 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8017cb6:	f000 fdbf 	bl	8018838 <xTaskResumeAll>
 8017cba:	e77a      	b.n	8017bb2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8017cbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017cbe:	f000 fa68 	bl	8018192 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8017cc2:	f000 fdb9 	bl	8018838 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017cc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017cc8:	f000 fab5 	bl	8018236 <prvIsQueueEmpty>
 8017ccc:	4603      	mov	r3, r0
 8017cce:	2b00      	cmp	r3, #0
 8017cd0:	f43f af6f 	beq.w	8017bb2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8017cd4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8017cd6:	4618      	mov	r0, r3
 8017cd8:	3730      	adds	r7, #48	; 0x30
 8017cda:	46bd      	mov	sp, r7
 8017cdc:	bd80      	pop	{r7, pc}
 8017cde:	bf00      	nop
 8017ce0:	e000ed04 	.word	0xe000ed04

08017ce4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8017ce4:	b580      	push	{r7, lr}
 8017ce6:	b08e      	sub	sp, #56	; 0x38
 8017ce8:	af00      	add	r7, sp, #0
 8017cea:	6078      	str	r0, [r7, #4]
 8017cec:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8017cee:	2300      	movs	r3, #0
 8017cf0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8017cf2:	687b      	ldr	r3, [r7, #4]
 8017cf4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8017cf6:	2300      	movs	r3, #0
 8017cf8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8017cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017cfc:	2b00      	cmp	r3, #0
 8017cfe:	d10a      	bne.n	8017d16 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8017d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d04:	f383 8811 	msr	BASEPRI, r3
 8017d08:	f3bf 8f6f 	isb	sy
 8017d0c:	f3bf 8f4f 	dsb	sy
 8017d10:	623b      	str	r3, [r7, #32]
}
 8017d12:	bf00      	nop
 8017d14:	e7fe      	b.n	8017d14 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8017d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017d1a:	2b00      	cmp	r3, #0
 8017d1c:	d00a      	beq.n	8017d34 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8017d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d22:	f383 8811 	msr	BASEPRI, r3
 8017d26:	f3bf 8f6f 	isb	sy
 8017d2a:	f3bf 8f4f 	dsb	sy
 8017d2e:	61fb      	str	r3, [r7, #28]
}
 8017d30:	bf00      	nop
 8017d32:	e7fe      	b.n	8017d32 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8017d34:	f001 f966 	bl	8019004 <xTaskGetSchedulerState>
 8017d38:	4603      	mov	r3, r0
 8017d3a:	2b00      	cmp	r3, #0
 8017d3c:	d102      	bne.n	8017d44 <xQueueSemaphoreTake+0x60>
 8017d3e:	683b      	ldr	r3, [r7, #0]
 8017d40:	2b00      	cmp	r3, #0
 8017d42:	d101      	bne.n	8017d48 <xQueueSemaphoreTake+0x64>
 8017d44:	2301      	movs	r3, #1
 8017d46:	e000      	b.n	8017d4a <xQueueSemaphoreTake+0x66>
 8017d48:	2300      	movs	r3, #0
 8017d4a:	2b00      	cmp	r3, #0
 8017d4c:	d10a      	bne.n	8017d64 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8017d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d52:	f383 8811 	msr	BASEPRI, r3
 8017d56:	f3bf 8f6f 	isb	sy
 8017d5a:	f3bf 8f4f 	dsb	sy
 8017d5e:	61bb      	str	r3, [r7, #24]
}
 8017d60:	bf00      	nop
 8017d62:	e7fe      	b.n	8017d62 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8017d64:	f7ff f9ee 	bl	8017144 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8017d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017d6c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8017d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d70:	2b00      	cmp	r3, #0
 8017d72:	d024      	beq.n	8017dbe <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8017d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d76:	1e5a      	subs	r2, r3, #1
 8017d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d7a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8017d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d7e:	681b      	ldr	r3, [r3, #0]
 8017d80:	2b00      	cmp	r3, #0
 8017d82:	d104      	bne.n	8017d8e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8017d84:	f001 fab4 	bl	80192f0 <pvTaskIncrementMutexHeldCount>
 8017d88:	4602      	mov	r2, r0
 8017d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d8c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d90:	691b      	ldr	r3, [r3, #16]
 8017d92:	2b00      	cmp	r3, #0
 8017d94:	d00f      	beq.n	8017db6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d98:	3310      	adds	r3, #16
 8017d9a:	4618      	mov	r0, r3
 8017d9c:	f000 ff74 	bl	8018c88 <xTaskRemoveFromEventList>
 8017da0:	4603      	mov	r3, r0
 8017da2:	2b00      	cmp	r3, #0
 8017da4:	d007      	beq.n	8017db6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8017da6:	4b54      	ldr	r3, [pc, #336]	; (8017ef8 <xQueueSemaphoreTake+0x214>)
 8017da8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017dac:	601a      	str	r2, [r3, #0]
 8017dae:	f3bf 8f4f 	dsb	sy
 8017db2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8017db6:	f7ff f9f5 	bl	80171a4 <vPortExitCritical>
				return pdPASS;
 8017dba:	2301      	movs	r3, #1
 8017dbc:	e097      	b.n	8017eee <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8017dbe:	683b      	ldr	r3, [r7, #0]
 8017dc0:	2b00      	cmp	r3, #0
 8017dc2:	d111      	bne.n	8017de8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8017dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017dc6:	2b00      	cmp	r3, #0
 8017dc8:	d00a      	beq.n	8017de0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8017dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017dce:	f383 8811 	msr	BASEPRI, r3
 8017dd2:	f3bf 8f6f 	isb	sy
 8017dd6:	f3bf 8f4f 	dsb	sy
 8017dda:	617b      	str	r3, [r7, #20]
}
 8017ddc:	bf00      	nop
 8017dde:	e7fe      	b.n	8017dde <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8017de0:	f7ff f9e0 	bl	80171a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8017de4:	2300      	movs	r3, #0
 8017de6:	e082      	b.n	8017eee <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8017de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017dea:	2b00      	cmp	r3, #0
 8017dec:	d106      	bne.n	8017dfc <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8017dee:	f107 030c 	add.w	r3, r7, #12
 8017df2:	4618      	mov	r0, r3
 8017df4:	f000 ffac 	bl	8018d50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8017df8:	2301      	movs	r3, #1
 8017dfa:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8017dfc:	f7ff f9d2 	bl	80171a4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8017e00:	f000 fd0c 	bl	801881c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8017e04:	f7ff f99e 	bl	8017144 <vPortEnterCritical>
 8017e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017e0e:	b25b      	sxtb	r3, r3
 8017e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017e14:	d103      	bne.n	8017e1e <xQueueSemaphoreTake+0x13a>
 8017e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e18:	2200      	movs	r2, #0
 8017e1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8017e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017e24:	b25b      	sxtb	r3, r3
 8017e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017e2a:	d103      	bne.n	8017e34 <xQueueSemaphoreTake+0x150>
 8017e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e2e:	2200      	movs	r2, #0
 8017e30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8017e34:	f7ff f9b6 	bl	80171a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8017e38:	463a      	mov	r2, r7
 8017e3a:	f107 030c 	add.w	r3, r7, #12
 8017e3e:	4611      	mov	r1, r2
 8017e40:	4618      	mov	r0, r3
 8017e42:	f000 ff9b 	bl	8018d7c <xTaskCheckForTimeOut>
 8017e46:	4603      	mov	r3, r0
 8017e48:	2b00      	cmp	r3, #0
 8017e4a:	d132      	bne.n	8017eb2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017e4c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017e4e:	f000 f9f2 	bl	8018236 <prvIsQueueEmpty>
 8017e52:	4603      	mov	r3, r0
 8017e54:	2b00      	cmp	r3, #0
 8017e56:	d026      	beq.n	8017ea6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8017e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e5a:	681b      	ldr	r3, [r3, #0]
 8017e5c:	2b00      	cmp	r3, #0
 8017e5e:	d109      	bne.n	8017e74 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8017e60:	f7ff f970 	bl	8017144 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8017e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e66:	689b      	ldr	r3, [r3, #8]
 8017e68:	4618      	mov	r0, r3
 8017e6a:	f001 f8e9 	bl	8019040 <xTaskPriorityInherit>
 8017e6e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8017e70:	f7ff f998 	bl	80171a4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8017e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e76:	3324      	adds	r3, #36	; 0x24
 8017e78:	683a      	ldr	r2, [r7, #0]
 8017e7a:	4611      	mov	r1, r2
 8017e7c:	4618      	mov	r0, r3
 8017e7e:	f000 feb3 	bl	8018be8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8017e82:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017e84:	f000 f985 	bl	8018192 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8017e88:	f000 fcd6 	bl	8018838 <xTaskResumeAll>
 8017e8c:	4603      	mov	r3, r0
 8017e8e:	2b00      	cmp	r3, #0
 8017e90:	f47f af68 	bne.w	8017d64 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8017e94:	4b18      	ldr	r3, [pc, #96]	; (8017ef8 <xQueueSemaphoreTake+0x214>)
 8017e96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017e9a:	601a      	str	r2, [r3, #0]
 8017e9c:	f3bf 8f4f 	dsb	sy
 8017ea0:	f3bf 8f6f 	isb	sy
 8017ea4:	e75e      	b.n	8017d64 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8017ea6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017ea8:	f000 f973 	bl	8018192 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8017eac:	f000 fcc4 	bl	8018838 <xTaskResumeAll>
 8017eb0:	e758      	b.n	8017d64 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8017eb2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017eb4:	f000 f96d 	bl	8018192 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8017eb8:	f000 fcbe 	bl	8018838 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017ebc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017ebe:	f000 f9ba 	bl	8018236 <prvIsQueueEmpty>
 8017ec2:	4603      	mov	r3, r0
 8017ec4:	2b00      	cmp	r3, #0
 8017ec6:	f43f af4d 	beq.w	8017d64 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8017eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ecc:	2b00      	cmp	r3, #0
 8017ece:	d00d      	beq.n	8017eec <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8017ed0:	f7ff f938 	bl	8017144 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8017ed4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017ed6:	f000 f8b4 	bl	8018042 <prvGetDisinheritPriorityAfterTimeout>
 8017eda:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8017edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ede:	689b      	ldr	r3, [r3, #8]
 8017ee0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017ee2:	4618      	mov	r0, r3
 8017ee4:	f001 f982 	bl	80191ec <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8017ee8:	f7ff f95c 	bl	80171a4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8017eec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8017eee:	4618      	mov	r0, r3
 8017ef0:	3738      	adds	r7, #56	; 0x38
 8017ef2:	46bd      	mov	sp, r7
 8017ef4:	bd80      	pop	{r7, pc}
 8017ef6:	bf00      	nop
 8017ef8:	e000ed04 	.word	0xe000ed04

08017efc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8017efc:	b580      	push	{r7, lr}
 8017efe:	b08e      	sub	sp, #56	; 0x38
 8017f00:	af00      	add	r7, sp, #0
 8017f02:	60f8      	str	r0, [r7, #12]
 8017f04:	60b9      	str	r1, [r7, #8]
 8017f06:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8017f08:	68fb      	ldr	r3, [r7, #12]
 8017f0a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8017f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f0e:	2b00      	cmp	r3, #0
 8017f10:	d10a      	bne.n	8017f28 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8017f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017f16:	f383 8811 	msr	BASEPRI, r3
 8017f1a:	f3bf 8f6f 	isb	sy
 8017f1e:	f3bf 8f4f 	dsb	sy
 8017f22:	623b      	str	r3, [r7, #32]
}
 8017f24:	bf00      	nop
 8017f26:	e7fe      	b.n	8017f26 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017f28:	68bb      	ldr	r3, [r7, #8]
 8017f2a:	2b00      	cmp	r3, #0
 8017f2c:	d103      	bne.n	8017f36 <xQueueReceiveFromISR+0x3a>
 8017f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017f32:	2b00      	cmp	r3, #0
 8017f34:	d101      	bne.n	8017f3a <xQueueReceiveFromISR+0x3e>
 8017f36:	2301      	movs	r3, #1
 8017f38:	e000      	b.n	8017f3c <xQueueReceiveFromISR+0x40>
 8017f3a:	2300      	movs	r3, #0
 8017f3c:	2b00      	cmp	r3, #0
 8017f3e:	d10a      	bne.n	8017f56 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8017f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017f44:	f383 8811 	msr	BASEPRI, r3
 8017f48:	f3bf 8f6f 	isb	sy
 8017f4c:	f3bf 8f4f 	dsb	sy
 8017f50:	61fb      	str	r3, [r7, #28]
}
 8017f52:	bf00      	nop
 8017f54:	e7fe      	b.n	8017f54 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8017f56:	f7ff f9d7 	bl	8017308 <vPortValidateInterruptPriority>
	__asm volatile
 8017f5a:	f3ef 8211 	mrs	r2, BASEPRI
 8017f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017f62:	f383 8811 	msr	BASEPRI, r3
 8017f66:	f3bf 8f6f 	isb	sy
 8017f6a:	f3bf 8f4f 	dsb	sy
 8017f6e:	61ba      	str	r2, [r7, #24]
 8017f70:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8017f72:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8017f74:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017f7a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f7e:	2b00      	cmp	r3, #0
 8017f80:	d02f      	beq.n	8017fe2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8017f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f84:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017f88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8017f8c:	68b9      	ldr	r1, [r7, #8]
 8017f8e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017f90:	f000 f8d9 	bl	8018146 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8017f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f96:	1e5a      	subs	r2, r3, #1
 8017f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f9a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8017f9c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8017fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017fa4:	d112      	bne.n	8017fcc <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017fa8:	691b      	ldr	r3, [r3, #16]
 8017faa:	2b00      	cmp	r3, #0
 8017fac:	d016      	beq.n	8017fdc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017fb0:	3310      	adds	r3, #16
 8017fb2:	4618      	mov	r0, r3
 8017fb4:	f000 fe68 	bl	8018c88 <xTaskRemoveFromEventList>
 8017fb8:	4603      	mov	r3, r0
 8017fba:	2b00      	cmp	r3, #0
 8017fbc:	d00e      	beq.n	8017fdc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8017fbe:	687b      	ldr	r3, [r7, #4]
 8017fc0:	2b00      	cmp	r3, #0
 8017fc2:	d00b      	beq.n	8017fdc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8017fc4:	687b      	ldr	r3, [r7, #4]
 8017fc6:	2201      	movs	r2, #1
 8017fc8:	601a      	str	r2, [r3, #0]
 8017fca:	e007      	b.n	8017fdc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8017fcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017fd0:	3301      	adds	r3, #1
 8017fd2:	b2db      	uxtb	r3, r3
 8017fd4:	b25a      	sxtb	r2, r3
 8017fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017fd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8017fdc:	2301      	movs	r3, #1
 8017fde:	637b      	str	r3, [r7, #52]	; 0x34
 8017fe0:	e001      	b.n	8017fe6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8017fe2:	2300      	movs	r3, #0
 8017fe4:	637b      	str	r3, [r7, #52]	; 0x34
 8017fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017fe8:	613b      	str	r3, [r7, #16]
	__asm volatile
 8017fea:	693b      	ldr	r3, [r7, #16]
 8017fec:	f383 8811 	msr	BASEPRI, r3
}
 8017ff0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8017ff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8017ff4:	4618      	mov	r0, r3
 8017ff6:	3738      	adds	r7, #56	; 0x38
 8017ff8:	46bd      	mov	sp, r7
 8017ffa:	bd80      	pop	{r7, pc}

08017ffc <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8017ffc:	b580      	push	{r7, lr}
 8017ffe:	b084      	sub	sp, #16
 8018000:	af00      	add	r7, sp, #0
 8018002:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8018004:	687b      	ldr	r3, [r7, #4]
 8018006:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8018008:	68fb      	ldr	r3, [r7, #12]
 801800a:	2b00      	cmp	r3, #0
 801800c:	d10a      	bne.n	8018024 <vQueueDelete+0x28>
	__asm volatile
 801800e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018012:	f383 8811 	msr	BASEPRI, r3
 8018016:	f3bf 8f6f 	isb	sy
 801801a:	f3bf 8f4f 	dsb	sy
 801801e:	60bb      	str	r3, [r7, #8]
}
 8018020:	bf00      	nop
 8018022:	e7fe      	b.n	8018022 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8018024:	68f8      	ldr	r0, [r7, #12]
 8018026:	f000 f95f 	bl	80182e8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 801802a:	68fb      	ldr	r3, [r7, #12]
 801802c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8018030:	2b00      	cmp	r3, #0
 8018032:	d102      	bne.n	801803a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8018034:	68f8      	ldr	r0, [r7, #12]
 8018036:	f7fe fd83 	bl	8016b40 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 801803a:	bf00      	nop
 801803c:	3710      	adds	r7, #16
 801803e:	46bd      	mov	sp, r7
 8018040:	bd80      	pop	{r7, pc}

08018042 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8018042:	b480      	push	{r7}
 8018044:	b085      	sub	sp, #20
 8018046:	af00      	add	r7, sp, #0
 8018048:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 801804a:	687b      	ldr	r3, [r7, #4]
 801804c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801804e:	2b00      	cmp	r3, #0
 8018050:	d006      	beq.n	8018060 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8018052:	687b      	ldr	r3, [r7, #4]
 8018054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018056:	681b      	ldr	r3, [r3, #0]
 8018058:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 801805c:	60fb      	str	r3, [r7, #12]
 801805e:	e001      	b.n	8018064 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8018060:	2300      	movs	r3, #0
 8018062:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8018064:	68fb      	ldr	r3, [r7, #12]
	}
 8018066:	4618      	mov	r0, r3
 8018068:	3714      	adds	r7, #20
 801806a:	46bd      	mov	sp, r7
 801806c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018070:	4770      	bx	lr

08018072 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8018072:	b580      	push	{r7, lr}
 8018074:	b086      	sub	sp, #24
 8018076:	af00      	add	r7, sp, #0
 8018078:	60f8      	str	r0, [r7, #12]
 801807a:	60b9      	str	r1, [r7, #8]
 801807c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801807e:	2300      	movs	r3, #0
 8018080:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8018082:	68fb      	ldr	r3, [r7, #12]
 8018084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018086:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8018088:	68fb      	ldr	r3, [r7, #12]
 801808a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801808c:	2b00      	cmp	r3, #0
 801808e:	d10d      	bne.n	80180ac <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8018090:	68fb      	ldr	r3, [r7, #12]
 8018092:	681b      	ldr	r3, [r3, #0]
 8018094:	2b00      	cmp	r3, #0
 8018096:	d14d      	bne.n	8018134 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8018098:	68fb      	ldr	r3, [r7, #12]
 801809a:	689b      	ldr	r3, [r3, #8]
 801809c:	4618      	mov	r0, r3
 801809e:	f001 f837 	bl	8019110 <xTaskPriorityDisinherit>
 80180a2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80180a4:	68fb      	ldr	r3, [r7, #12]
 80180a6:	2200      	movs	r2, #0
 80180a8:	609a      	str	r2, [r3, #8]
 80180aa:	e043      	b.n	8018134 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80180ac:	687b      	ldr	r3, [r7, #4]
 80180ae:	2b00      	cmp	r3, #0
 80180b0:	d119      	bne.n	80180e6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80180b2:	68fb      	ldr	r3, [r7, #12]
 80180b4:	6858      	ldr	r0, [r3, #4]
 80180b6:	68fb      	ldr	r3, [r7, #12]
 80180b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80180ba:	461a      	mov	r2, r3
 80180bc:	68b9      	ldr	r1, [r7, #8]
 80180be:	f011 fa1e 	bl	80294fe <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80180c2:	68fb      	ldr	r3, [r7, #12]
 80180c4:	685a      	ldr	r2, [r3, #4]
 80180c6:	68fb      	ldr	r3, [r7, #12]
 80180c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80180ca:	441a      	add	r2, r3
 80180cc:	68fb      	ldr	r3, [r7, #12]
 80180ce:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80180d0:	68fb      	ldr	r3, [r7, #12]
 80180d2:	685a      	ldr	r2, [r3, #4]
 80180d4:	68fb      	ldr	r3, [r7, #12]
 80180d6:	689b      	ldr	r3, [r3, #8]
 80180d8:	429a      	cmp	r2, r3
 80180da:	d32b      	bcc.n	8018134 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80180dc:	68fb      	ldr	r3, [r7, #12]
 80180de:	681a      	ldr	r2, [r3, #0]
 80180e0:	68fb      	ldr	r3, [r7, #12]
 80180e2:	605a      	str	r2, [r3, #4]
 80180e4:	e026      	b.n	8018134 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80180e6:	68fb      	ldr	r3, [r7, #12]
 80180e8:	68d8      	ldr	r0, [r3, #12]
 80180ea:	68fb      	ldr	r3, [r7, #12]
 80180ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80180ee:	461a      	mov	r2, r3
 80180f0:	68b9      	ldr	r1, [r7, #8]
 80180f2:	f011 fa04 	bl	80294fe <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80180f6:	68fb      	ldr	r3, [r7, #12]
 80180f8:	68da      	ldr	r2, [r3, #12]
 80180fa:	68fb      	ldr	r3, [r7, #12]
 80180fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80180fe:	425b      	negs	r3, r3
 8018100:	441a      	add	r2, r3
 8018102:	68fb      	ldr	r3, [r7, #12]
 8018104:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8018106:	68fb      	ldr	r3, [r7, #12]
 8018108:	68da      	ldr	r2, [r3, #12]
 801810a:	68fb      	ldr	r3, [r7, #12]
 801810c:	681b      	ldr	r3, [r3, #0]
 801810e:	429a      	cmp	r2, r3
 8018110:	d207      	bcs.n	8018122 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8018112:	68fb      	ldr	r3, [r7, #12]
 8018114:	689a      	ldr	r2, [r3, #8]
 8018116:	68fb      	ldr	r3, [r7, #12]
 8018118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801811a:	425b      	negs	r3, r3
 801811c:	441a      	add	r2, r3
 801811e:	68fb      	ldr	r3, [r7, #12]
 8018120:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8018122:	687b      	ldr	r3, [r7, #4]
 8018124:	2b02      	cmp	r3, #2
 8018126:	d105      	bne.n	8018134 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8018128:	693b      	ldr	r3, [r7, #16]
 801812a:	2b00      	cmp	r3, #0
 801812c:	d002      	beq.n	8018134 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801812e:	693b      	ldr	r3, [r7, #16]
 8018130:	3b01      	subs	r3, #1
 8018132:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8018134:	693b      	ldr	r3, [r7, #16]
 8018136:	1c5a      	adds	r2, r3, #1
 8018138:	68fb      	ldr	r3, [r7, #12]
 801813a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801813c:	697b      	ldr	r3, [r7, #20]
}
 801813e:	4618      	mov	r0, r3
 8018140:	3718      	adds	r7, #24
 8018142:	46bd      	mov	sp, r7
 8018144:	bd80      	pop	{r7, pc}

08018146 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8018146:	b580      	push	{r7, lr}
 8018148:	b082      	sub	sp, #8
 801814a:	af00      	add	r7, sp, #0
 801814c:	6078      	str	r0, [r7, #4]
 801814e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8018150:	687b      	ldr	r3, [r7, #4]
 8018152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018154:	2b00      	cmp	r3, #0
 8018156:	d018      	beq.n	801818a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8018158:	687b      	ldr	r3, [r7, #4]
 801815a:	68da      	ldr	r2, [r3, #12]
 801815c:	687b      	ldr	r3, [r7, #4]
 801815e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018160:	441a      	add	r2, r3
 8018162:	687b      	ldr	r3, [r7, #4]
 8018164:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8018166:	687b      	ldr	r3, [r7, #4]
 8018168:	68da      	ldr	r2, [r3, #12]
 801816a:	687b      	ldr	r3, [r7, #4]
 801816c:	689b      	ldr	r3, [r3, #8]
 801816e:	429a      	cmp	r2, r3
 8018170:	d303      	bcc.n	801817a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8018172:	687b      	ldr	r3, [r7, #4]
 8018174:	681a      	ldr	r2, [r3, #0]
 8018176:	687b      	ldr	r3, [r7, #4]
 8018178:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801817a:	687b      	ldr	r3, [r7, #4]
 801817c:	68d9      	ldr	r1, [r3, #12]
 801817e:	687b      	ldr	r3, [r7, #4]
 8018180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018182:	461a      	mov	r2, r3
 8018184:	6838      	ldr	r0, [r7, #0]
 8018186:	f011 f9ba 	bl	80294fe <memcpy>
	}
}
 801818a:	bf00      	nop
 801818c:	3708      	adds	r7, #8
 801818e:	46bd      	mov	sp, r7
 8018190:	bd80      	pop	{r7, pc}

08018192 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8018192:	b580      	push	{r7, lr}
 8018194:	b084      	sub	sp, #16
 8018196:	af00      	add	r7, sp, #0
 8018198:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801819a:	f7fe ffd3 	bl	8017144 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801819e:	687b      	ldr	r3, [r7, #4]
 80181a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80181a4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80181a6:	e011      	b.n	80181cc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80181a8:	687b      	ldr	r3, [r7, #4]
 80181aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80181ac:	2b00      	cmp	r3, #0
 80181ae:	d012      	beq.n	80181d6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80181b0:	687b      	ldr	r3, [r7, #4]
 80181b2:	3324      	adds	r3, #36	; 0x24
 80181b4:	4618      	mov	r0, r3
 80181b6:	f000 fd67 	bl	8018c88 <xTaskRemoveFromEventList>
 80181ba:	4603      	mov	r3, r0
 80181bc:	2b00      	cmp	r3, #0
 80181be:	d001      	beq.n	80181c4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80181c0:	f000 fe3e 	bl	8018e40 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80181c4:	7bfb      	ldrb	r3, [r7, #15]
 80181c6:	3b01      	subs	r3, #1
 80181c8:	b2db      	uxtb	r3, r3
 80181ca:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80181cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80181d0:	2b00      	cmp	r3, #0
 80181d2:	dce9      	bgt.n	80181a8 <prvUnlockQueue+0x16>
 80181d4:	e000      	b.n	80181d8 <prvUnlockQueue+0x46>
					break;
 80181d6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80181d8:	687b      	ldr	r3, [r7, #4]
 80181da:	22ff      	movs	r2, #255	; 0xff
 80181dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80181e0:	f7fe ffe0 	bl	80171a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80181e4:	f7fe ffae 	bl	8017144 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80181e8:	687b      	ldr	r3, [r7, #4]
 80181ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80181ee:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80181f0:	e011      	b.n	8018216 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80181f2:	687b      	ldr	r3, [r7, #4]
 80181f4:	691b      	ldr	r3, [r3, #16]
 80181f6:	2b00      	cmp	r3, #0
 80181f8:	d012      	beq.n	8018220 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80181fa:	687b      	ldr	r3, [r7, #4]
 80181fc:	3310      	adds	r3, #16
 80181fe:	4618      	mov	r0, r3
 8018200:	f000 fd42 	bl	8018c88 <xTaskRemoveFromEventList>
 8018204:	4603      	mov	r3, r0
 8018206:	2b00      	cmp	r3, #0
 8018208:	d001      	beq.n	801820e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801820a:	f000 fe19 	bl	8018e40 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801820e:	7bbb      	ldrb	r3, [r7, #14]
 8018210:	3b01      	subs	r3, #1
 8018212:	b2db      	uxtb	r3, r3
 8018214:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8018216:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801821a:	2b00      	cmp	r3, #0
 801821c:	dce9      	bgt.n	80181f2 <prvUnlockQueue+0x60>
 801821e:	e000      	b.n	8018222 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8018220:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8018222:	687b      	ldr	r3, [r7, #4]
 8018224:	22ff      	movs	r2, #255	; 0xff
 8018226:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801822a:	f7fe ffbb 	bl	80171a4 <vPortExitCritical>
}
 801822e:	bf00      	nop
 8018230:	3710      	adds	r7, #16
 8018232:	46bd      	mov	sp, r7
 8018234:	bd80      	pop	{r7, pc}

08018236 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8018236:	b580      	push	{r7, lr}
 8018238:	b084      	sub	sp, #16
 801823a:	af00      	add	r7, sp, #0
 801823c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801823e:	f7fe ff81 	bl	8017144 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8018242:	687b      	ldr	r3, [r7, #4]
 8018244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018246:	2b00      	cmp	r3, #0
 8018248:	d102      	bne.n	8018250 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801824a:	2301      	movs	r3, #1
 801824c:	60fb      	str	r3, [r7, #12]
 801824e:	e001      	b.n	8018254 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8018250:	2300      	movs	r3, #0
 8018252:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8018254:	f7fe ffa6 	bl	80171a4 <vPortExitCritical>

	return xReturn;
 8018258:	68fb      	ldr	r3, [r7, #12]
}
 801825a:	4618      	mov	r0, r3
 801825c:	3710      	adds	r7, #16
 801825e:	46bd      	mov	sp, r7
 8018260:	bd80      	pop	{r7, pc}

08018262 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8018262:	b580      	push	{r7, lr}
 8018264:	b084      	sub	sp, #16
 8018266:	af00      	add	r7, sp, #0
 8018268:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801826a:	f7fe ff6b 	bl	8017144 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801826e:	687b      	ldr	r3, [r7, #4]
 8018270:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8018272:	687b      	ldr	r3, [r7, #4]
 8018274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018276:	429a      	cmp	r2, r3
 8018278:	d102      	bne.n	8018280 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801827a:	2301      	movs	r3, #1
 801827c:	60fb      	str	r3, [r7, #12]
 801827e:	e001      	b.n	8018284 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8018280:	2300      	movs	r3, #0
 8018282:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8018284:	f7fe ff8e 	bl	80171a4 <vPortExitCritical>

	return xReturn;
 8018288:	68fb      	ldr	r3, [r7, #12]
}
 801828a:	4618      	mov	r0, r3
 801828c:	3710      	adds	r7, #16
 801828e:	46bd      	mov	sp, r7
 8018290:	bd80      	pop	{r7, pc}
	...

08018294 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8018294:	b480      	push	{r7}
 8018296:	b085      	sub	sp, #20
 8018298:	af00      	add	r7, sp, #0
 801829a:	6078      	str	r0, [r7, #4]
 801829c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801829e:	2300      	movs	r3, #0
 80182a0:	60fb      	str	r3, [r7, #12]
 80182a2:	e014      	b.n	80182ce <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80182a4:	4a0f      	ldr	r2, [pc, #60]	; (80182e4 <vQueueAddToRegistry+0x50>)
 80182a6:	68fb      	ldr	r3, [r7, #12]
 80182a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80182ac:	2b00      	cmp	r3, #0
 80182ae:	d10b      	bne.n	80182c8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80182b0:	490c      	ldr	r1, [pc, #48]	; (80182e4 <vQueueAddToRegistry+0x50>)
 80182b2:	68fb      	ldr	r3, [r7, #12]
 80182b4:	683a      	ldr	r2, [r7, #0]
 80182b6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80182ba:	4a0a      	ldr	r2, [pc, #40]	; (80182e4 <vQueueAddToRegistry+0x50>)
 80182bc:	68fb      	ldr	r3, [r7, #12]
 80182be:	00db      	lsls	r3, r3, #3
 80182c0:	4413      	add	r3, r2
 80182c2:	687a      	ldr	r2, [r7, #4]
 80182c4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80182c6:	e006      	b.n	80182d6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80182c8:	68fb      	ldr	r3, [r7, #12]
 80182ca:	3301      	adds	r3, #1
 80182cc:	60fb      	str	r3, [r7, #12]
 80182ce:	68fb      	ldr	r3, [r7, #12]
 80182d0:	2b07      	cmp	r3, #7
 80182d2:	d9e7      	bls.n	80182a4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80182d4:	bf00      	nop
 80182d6:	bf00      	nop
 80182d8:	3714      	adds	r7, #20
 80182da:	46bd      	mov	sp, r7
 80182dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182e0:	4770      	bx	lr
 80182e2:	bf00      	nop
 80182e4:	24006974 	.word	0x24006974

080182e8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80182e8:	b480      	push	{r7}
 80182ea:	b085      	sub	sp, #20
 80182ec:	af00      	add	r7, sp, #0
 80182ee:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80182f0:	2300      	movs	r3, #0
 80182f2:	60fb      	str	r3, [r7, #12]
 80182f4:	e016      	b.n	8018324 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80182f6:	4a10      	ldr	r2, [pc, #64]	; (8018338 <vQueueUnregisterQueue+0x50>)
 80182f8:	68fb      	ldr	r3, [r7, #12]
 80182fa:	00db      	lsls	r3, r3, #3
 80182fc:	4413      	add	r3, r2
 80182fe:	685b      	ldr	r3, [r3, #4]
 8018300:	687a      	ldr	r2, [r7, #4]
 8018302:	429a      	cmp	r2, r3
 8018304:	d10b      	bne.n	801831e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8018306:	4a0c      	ldr	r2, [pc, #48]	; (8018338 <vQueueUnregisterQueue+0x50>)
 8018308:	68fb      	ldr	r3, [r7, #12]
 801830a:	2100      	movs	r1, #0
 801830c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8018310:	4a09      	ldr	r2, [pc, #36]	; (8018338 <vQueueUnregisterQueue+0x50>)
 8018312:	68fb      	ldr	r3, [r7, #12]
 8018314:	00db      	lsls	r3, r3, #3
 8018316:	4413      	add	r3, r2
 8018318:	2200      	movs	r2, #0
 801831a:	605a      	str	r2, [r3, #4]
				break;
 801831c:	e006      	b.n	801832c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801831e:	68fb      	ldr	r3, [r7, #12]
 8018320:	3301      	adds	r3, #1
 8018322:	60fb      	str	r3, [r7, #12]
 8018324:	68fb      	ldr	r3, [r7, #12]
 8018326:	2b07      	cmp	r3, #7
 8018328:	d9e5      	bls.n	80182f6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 801832a:	bf00      	nop
 801832c:	bf00      	nop
 801832e:	3714      	adds	r7, #20
 8018330:	46bd      	mov	sp, r7
 8018332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018336:	4770      	bx	lr
 8018338:	24006974 	.word	0x24006974

0801833c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801833c:	b580      	push	{r7, lr}
 801833e:	b086      	sub	sp, #24
 8018340:	af00      	add	r7, sp, #0
 8018342:	60f8      	str	r0, [r7, #12]
 8018344:	60b9      	str	r1, [r7, #8]
 8018346:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8018348:	68fb      	ldr	r3, [r7, #12]
 801834a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 801834c:	f7fe fefa 	bl	8017144 <vPortEnterCritical>
 8018350:	697b      	ldr	r3, [r7, #20]
 8018352:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8018356:	b25b      	sxtb	r3, r3
 8018358:	f1b3 3fff 	cmp.w	r3, #4294967295
 801835c:	d103      	bne.n	8018366 <vQueueWaitForMessageRestricted+0x2a>
 801835e:	697b      	ldr	r3, [r7, #20]
 8018360:	2200      	movs	r2, #0
 8018362:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8018366:	697b      	ldr	r3, [r7, #20]
 8018368:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801836c:	b25b      	sxtb	r3, r3
 801836e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018372:	d103      	bne.n	801837c <vQueueWaitForMessageRestricted+0x40>
 8018374:	697b      	ldr	r3, [r7, #20]
 8018376:	2200      	movs	r2, #0
 8018378:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801837c:	f7fe ff12 	bl	80171a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8018380:	697b      	ldr	r3, [r7, #20]
 8018382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018384:	2b00      	cmp	r3, #0
 8018386:	d106      	bne.n	8018396 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8018388:	697b      	ldr	r3, [r7, #20]
 801838a:	3324      	adds	r3, #36	; 0x24
 801838c:	687a      	ldr	r2, [r7, #4]
 801838e:	68b9      	ldr	r1, [r7, #8]
 8018390:	4618      	mov	r0, r3
 8018392:	f000 fc4d 	bl	8018c30 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8018396:	6978      	ldr	r0, [r7, #20]
 8018398:	f7ff fefb 	bl	8018192 <prvUnlockQueue>
	}
 801839c:	bf00      	nop
 801839e:	3718      	adds	r7, #24
 80183a0:	46bd      	mov	sp, r7
 80183a2:	bd80      	pop	{r7, pc}

080183a4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80183a4:	b580      	push	{r7, lr}
 80183a6:	b08e      	sub	sp, #56	; 0x38
 80183a8:	af04      	add	r7, sp, #16
 80183aa:	60f8      	str	r0, [r7, #12]
 80183ac:	60b9      	str	r1, [r7, #8]
 80183ae:	607a      	str	r2, [r7, #4]
 80183b0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80183b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80183b4:	2b00      	cmp	r3, #0
 80183b6:	d10a      	bne.n	80183ce <xTaskCreateStatic+0x2a>
	__asm volatile
 80183b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80183bc:	f383 8811 	msr	BASEPRI, r3
 80183c0:	f3bf 8f6f 	isb	sy
 80183c4:	f3bf 8f4f 	dsb	sy
 80183c8:	623b      	str	r3, [r7, #32]
}
 80183ca:	bf00      	nop
 80183cc:	e7fe      	b.n	80183cc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80183ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80183d0:	2b00      	cmp	r3, #0
 80183d2:	d10a      	bne.n	80183ea <xTaskCreateStatic+0x46>
	__asm volatile
 80183d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80183d8:	f383 8811 	msr	BASEPRI, r3
 80183dc:	f3bf 8f6f 	isb	sy
 80183e0:	f3bf 8f4f 	dsb	sy
 80183e4:	61fb      	str	r3, [r7, #28]
}
 80183e6:	bf00      	nop
 80183e8:	e7fe      	b.n	80183e8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80183ea:	235c      	movs	r3, #92	; 0x5c
 80183ec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80183ee:	693b      	ldr	r3, [r7, #16]
 80183f0:	2b5c      	cmp	r3, #92	; 0x5c
 80183f2:	d00a      	beq.n	801840a <xTaskCreateStatic+0x66>
	__asm volatile
 80183f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80183f8:	f383 8811 	msr	BASEPRI, r3
 80183fc:	f3bf 8f6f 	isb	sy
 8018400:	f3bf 8f4f 	dsb	sy
 8018404:	61bb      	str	r3, [r7, #24]
}
 8018406:	bf00      	nop
 8018408:	e7fe      	b.n	8018408 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801840a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801840c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801840e:	2b00      	cmp	r3, #0
 8018410:	d01e      	beq.n	8018450 <xTaskCreateStatic+0xac>
 8018412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018414:	2b00      	cmp	r3, #0
 8018416:	d01b      	beq.n	8018450 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8018418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801841a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801841c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801841e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018420:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8018422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018424:	2202      	movs	r2, #2
 8018426:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801842a:	2300      	movs	r3, #0
 801842c:	9303      	str	r3, [sp, #12]
 801842e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018430:	9302      	str	r3, [sp, #8]
 8018432:	f107 0314 	add.w	r3, r7, #20
 8018436:	9301      	str	r3, [sp, #4]
 8018438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801843a:	9300      	str	r3, [sp, #0]
 801843c:	683b      	ldr	r3, [r7, #0]
 801843e:	687a      	ldr	r2, [r7, #4]
 8018440:	68b9      	ldr	r1, [r7, #8]
 8018442:	68f8      	ldr	r0, [r7, #12]
 8018444:	f000 f850 	bl	80184e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8018448:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801844a:	f000 f8dd 	bl	8018608 <prvAddNewTaskToReadyList>
 801844e:	e001      	b.n	8018454 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8018450:	2300      	movs	r3, #0
 8018452:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8018454:	697b      	ldr	r3, [r7, #20]
	}
 8018456:	4618      	mov	r0, r3
 8018458:	3728      	adds	r7, #40	; 0x28
 801845a:	46bd      	mov	sp, r7
 801845c:	bd80      	pop	{r7, pc}

0801845e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801845e:	b580      	push	{r7, lr}
 8018460:	b08c      	sub	sp, #48	; 0x30
 8018462:	af04      	add	r7, sp, #16
 8018464:	60f8      	str	r0, [r7, #12]
 8018466:	60b9      	str	r1, [r7, #8]
 8018468:	603b      	str	r3, [r7, #0]
 801846a:	4613      	mov	r3, r2
 801846c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801846e:	88fb      	ldrh	r3, [r7, #6]
 8018470:	009b      	lsls	r3, r3, #2
 8018472:	4618      	mov	r0, r3
 8018474:	f7fe fa98 	bl	80169a8 <pvPortMalloc>
 8018478:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801847a:	697b      	ldr	r3, [r7, #20]
 801847c:	2b00      	cmp	r3, #0
 801847e:	d00e      	beq.n	801849e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8018480:	205c      	movs	r0, #92	; 0x5c
 8018482:	f7fe fa91 	bl	80169a8 <pvPortMalloc>
 8018486:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8018488:	69fb      	ldr	r3, [r7, #28]
 801848a:	2b00      	cmp	r3, #0
 801848c:	d003      	beq.n	8018496 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801848e:	69fb      	ldr	r3, [r7, #28]
 8018490:	697a      	ldr	r2, [r7, #20]
 8018492:	631a      	str	r2, [r3, #48]	; 0x30
 8018494:	e005      	b.n	80184a2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8018496:	6978      	ldr	r0, [r7, #20]
 8018498:	f7fe fb52 	bl	8016b40 <vPortFree>
 801849c:	e001      	b.n	80184a2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801849e:	2300      	movs	r3, #0
 80184a0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80184a2:	69fb      	ldr	r3, [r7, #28]
 80184a4:	2b00      	cmp	r3, #0
 80184a6:	d017      	beq.n	80184d8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80184a8:	69fb      	ldr	r3, [r7, #28]
 80184aa:	2200      	movs	r2, #0
 80184ac:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80184b0:	88fa      	ldrh	r2, [r7, #6]
 80184b2:	2300      	movs	r3, #0
 80184b4:	9303      	str	r3, [sp, #12]
 80184b6:	69fb      	ldr	r3, [r7, #28]
 80184b8:	9302      	str	r3, [sp, #8]
 80184ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80184bc:	9301      	str	r3, [sp, #4]
 80184be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80184c0:	9300      	str	r3, [sp, #0]
 80184c2:	683b      	ldr	r3, [r7, #0]
 80184c4:	68b9      	ldr	r1, [r7, #8]
 80184c6:	68f8      	ldr	r0, [r7, #12]
 80184c8:	f000 f80e 	bl	80184e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80184cc:	69f8      	ldr	r0, [r7, #28]
 80184ce:	f000 f89b 	bl	8018608 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80184d2:	2301      	movs	r3, #1
 80184d4:	61bb      	str	r3, [r7, #24]
 80184d6:	e002      	b.n	80184de <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80184d8:	f04f 33ff 	mov.w	r3, #4294967295
 80184dc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80184de:	69bb      	ldr	r3, [r7, #24]
	}
 80184e0:	4618      	mov	r0, r3
 80184e2:	3720      	adds	r7, #32
 80184e4:	46bd      	mov	sp, r7
 80184e6:	bd80      	pop	{r7, pc}

080184e8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80184e8:	b580      	push	{r7, lr}
 80184ea:	b088      	sub	sp, #32
 80184ec:	af00      	add	r7, sp, #0
 80184ee:	60f8      	str	r0, [r7, #12]
 80184f0:	60b9      	str	r1, [r7, #8]
 80184f2:	607a      	str	r2, [r7, #4]
 80184f4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80184f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80184f8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80184fa:	687b      	ldr	r3, [r7, #4]
 80184fc:	009b      	lsls	r3, r3, #2
 80184fe:	461a      	mov	r2, r3
 8018500:	21a5      	movs	r1, #165	; 0xa5
 8018502:	f010 ff2c 	bl	802935e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8018506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018508:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801850a:	6879      	ldr	r1, [r7, #4]
 801850c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8018510:	440b      	add	r3, r1
 8018512:	009b      	lsls	r3, r3, #2
 8018514:	4413      	add	r3, r2
 8018516:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8018518:	69bb      	ldr	r3, [r7, #24]
 801851a:	f023 0307 	bic.w	r3, r3, #7
 801851e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8018520:	69bb      	ldr	r3, [r7, #24]
 8018522:	f003 0307 	and.w	r3, r3, #7
 8018526:	2b00      	cmp	r3, #0
 8018528:	d00a      	beq.n	8018540 <prvInitialiseNewTask+0x58>
	__asm volatile
 801852a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801852e:	f383 8811 	msr	BASEPRI, r3
 8018532:	f3bf 8f6f 	isb	sy
 8018536:	f3bf 8f4f 	dsb	sy
 801853a:	617b      	str	r3, [r7, #20]
}
 801853c:	bf00      	nop
 801853e:	e7fe      	b.n	801853e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8018540:	68bb      	ldr	r3, [r7, #8]
 8018542:	2b00      	cmp	r3, #0
 8018544:	d01f      	beq.n	8018586 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8018546:	2300      	movs	r3, #0
 8018548:	61fb      	str	r3, [r7, #28]
 801854a:	e012      	b.n	8018572 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801854c:	68ba      	ldr	r2, [r7, #8]
 801854e:	69fb      	ldr	r3, [r7, #28]
 8018550:	4413      	add	r3, r2
 8018552:	7819      	ldrb	r1, [r3, #0]
 8018554:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018556:	69fb      	ldr	r3, [r7, #28]
 8018558:	4413      	add	r3, r2
 801855a:	3334      	adds	r3, #52	; 0x34
 801855c:	460a      	mov	r2, r1
 801855e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8018560:	68ba      	ldr	r2, [r7, #8]
 8018562:	69fb      	ldr	r3, [r7, #28]
 8018564:	4413      	add	r3, r2
 8018566:	781b      	ldrb	r3, [r3, #0]
 8018568:	2b00      	cmp	r3, #0
 801856a:	d006      	beq.n	801857a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801856c:	69fb      	ldr	r3, [r7, #28]
 801856e:	3301      	adds	r3, #1
 8018570:	61fb      	str	r3, [r7, #28]
 8018572:	69fb      	ldr	r3, [r7, #28]
 8018574:	2b0f      	cmp	r3, #15
 8018576:	d9e9      	bls.n	801854c <prvInitialiseNewTask+0x64>
 8018578:	e000      	b.n	801857c <prvInitialiseNewTask+0x94>
			{
				break;
 801857a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801857c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801857e:	2200      	movs	r2, #0
 8018580:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8018584:	e003      	b.n	801858e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8018586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018588:	2200      	movs	r2, #0
 801858a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801858e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018590:	2b37      	cmp	r3, #55	; 0x37
 8018592:	d901      	bls.n	8018598 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8018594:	2337      	movs	r3, #55	; 0x37
 8018596:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8018598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801859a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801859c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801859e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80185a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80185a2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80185a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80185a6:	2200      	movs	r2, #0
 80185a8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80185aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80185ac:	3304      	adds	r3, #4
 80185ae:	4618      	mov	r0, r3
 80185b0:	f7fe fc04 	bl	8016dbc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80185b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80185b6:	3318      	adds	r3, #24
 80185b8:	4618      	mov	r0, r3
 80185ba:	f7fe fbff 	bl	8016dbc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80185be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80185c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80185c2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80185c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80185c6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80185ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80185cc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80185ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80185d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80185d2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80185d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80185d6:	2200      	movs	r2, #0
 80185d8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80185da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80185dc:	2200      	movs	r2, #0
 80185de:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80185e2:	683a      	ldr	r2, [r7, #0]
 80185e4:	68f9      	ldr	r1, [r7, #12]
 80185e6:	69b8      	ldr	r0, [r7, #24]
 80185e8:	f7fe fc7c 	bl	8016ee4 <pxPortInitialiseStack>
 80185ec:	4602      	mov	r2, r0
 80185ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80185f0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80185f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80185f4:	2b00      	cmp	r3, #0
 80185f6:	d002      	beq.n	80185fe <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80185f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80185fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80185fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80185fe:	bf00      	nop
 8018600:	3720      	adds	r7, #32
 8018602:	46bd      	mov	sp, r7
 8018604:	bd80      	pop	{r7, pc}
	...

08018608 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8018608:	b580      	push	{r7, lr}
 801860a:	b082      	sub	sp, #8
 801860c:	af00      	add	r7, sp, #0
 801860e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8018610:	f7fe fd98 	bl	8017144 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8018614:	4b2d      	ldr	r3, [pc, #180]	; (80186cc <prvAddNewTaskToReadyList+0xc4>)
 8018616:	681b      	ldr	r3, [r3, #0]
 8018618:	3301      	adds	r3, #1
 801861a:	4a2c      	ldr	r2, [pc, #176]	; (80186cc <prvAddNewTaskToReadyList+0xc4>)
 801861c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801861e:	4b2c      	ldr	r3, [pc, #176]	; (80186d0 <prvAddNewTaskToReadyList+0xc8>)
 8018620:	681b      	ldr	r3, [r3, #0]
 8018622:	2b00      	cmp	r3, #0
 8018624:	d109      	bne.n	801863a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8018626:	4a2a      	ldr	r2, [pc, #168]	; (80186d0 <prvAddNewTaskToReadyList+0xc8>)
 8018628:	687b      	ldr	r3, [r7, #4]
 801862a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801862c:	4b27      	ldr	r3, [pc, #156]	; (80186cc <prvAddNewTaskToReadyList+0xc4>)
 801862e:	681b      	ldr	r3, [r3, #0]
 8018630:	2b01      	cmp	r3, #1
 8018632:	d110      	bne.n	8018656 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8018634:	f000 fc28 	bl	8018e88 <prvInitialiseTaskLists>
 8018638:	e00d      	b.n	8018656 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801863a:	4b26      	ldr	r3, [pc, #152]	; (80186d4 <prvAddNewTaskToReadyList+0xcc>)
 801863c:	681b      	ldr	r3, [r3, #0]
 801863e:	2b00      	cmp	r3, #0
 8018640:	d109      	bne.n	8018656 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8018642:	4b23      	ldr	r3, [pc, #140]	; (80186d0 <prvAddNewTaskToReadyList+0xc8>)
 8018644:	681b      	ldr	r3, [r3, #0]
 8018646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018648:	687b      	ldr	r3, [r7, #4]
 801864a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801864c:	429a      	cmp	r2, r3
 801864e:	d802      	bhi.n	8018656 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8018650:	4a1f      	ldr	r2, [pc, #124]	; (80186d0 <prvAddNewTaskToReadyList+0xc8>)
 8018652:	687b      	ldr	r3, [r7, #4]
 8018654:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8018656:	4b20      	ldr	r3, [pc, #128]	; (80186d8 <prvAddNewTaskToReadyList+0xd0>)
 8018658:	681b      	ldr	r3, [r3, #0]
 801865a:	3301      	adds	r3, #1
 801865c:	4a1e      	ldr	r2, [pc, #120]	; (80186d8 <prvAddNewTaskToReadyList+0xd0>)
 801865e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8018660:	4b1d      	ldr	r3, [pc, #116]	; (80186d8 <prvAddNewTaskToReadyList+0xd0>)
 8018662:	681a      	ldr	r2, [r3, #0]
 8018664:	687b      	ldr	r3, [r7, #4]
 8018666:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8018668:	687b      	ldr	r3, [r7, #4]
 801866a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801866c:	4b1b      	ldr	r3, [pc, #108]	; (80186dc <prvAddNewTaskToReadyList+0xd4>)
 801866e:	681b      	ldr	r3, [r3, #0]
 8018670:	429a      	cmp	r2, r3
 8018672:	d903      	bls.n	801867c <prvAddNewTaskToReadyList+0x74>
 8018674:	687b      	ldr	r3, [r7, #4]
 8018676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018678:	4a18      	ldr	r2, [pc, #96]	; (80186dc <prvAddNewTaskToReadyList+0xd4>)
 801867a:	6013      	str	r3, [r2, #0]
 801867c:	687b      	ldr	r3, [r7, #4]
 801867e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018680:	4613      	mov	r3, r2
 8018682:	009b      	lsls	r3, r3, #2
 8018684:	4413      	add	r3, r2
 8018686:	009b      	lsls	r3, r3, #2
 8018688:	4a15      	ldr	r2, [pc, #84]	; (80186e0 <prvAddNewTaskToReadyList+0xd8>)
 801868a:	441a      	add	r2, r3
 801868c:	687b      	ldr	r3, [r7, #4]
 801868e:	3304      	adds	r3, #4
 8018690:	4619      	mov	r1, r3
 8018692:	4610      	mov	r0, r2
 8018694:	f7fe fb9f 	bl	8016dd6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8018698:	f7fe fd84 	bl	80171a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801869c:	4b0d      	ldr	r3, [pc, #52]	; (80186d4 <prvAddNewTaskToReadyList+0xcc>)
 801869e:	681b      	ldr	r3, [r3, #0]
 80186a0:	2b00      	cmp	r3, #0
 80186a2:	d00e      	beq.n	80186c2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80186a4:	4b0a      	ldr	r3, [pc, #40]	; (80186d0 <prvAddNewTaskToReadyList+0xc8>)
 80186a6:	681b      	ldr	r3, [r3, #0]
 80186a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80186aa:	687b      	ldr	r3, [r7, #4]
 80186ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80186ae:	429a      	cmp	r2, r3
 80186b0:	d207      	bcs.n	80186c2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80186b2:	4b0c      	ldr	r3, [pc, #48]	; (80186e4 <prvAddNewTaskToReadyList+0xdc>)
 80186b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80186b8:	601a      	str	r2, [r3, #0]
 80186ba:	f3bf 8f4f 	dsb	sy
 80186be:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80186c2:	bf00      	nop
 80186c4:	3708      	adds	r7, #8
 80186c6:	46bd      	mov	sp, r7
 80186c8:	bd80      	pop	{r7, pc}
 80186ca:	bf00      	nop
 80186cc:	24006e88 	.word	0x24006e88
 80186d0:	240069b4 	.word	0x240069b4
 80186d4:	24006e94 	.word	0x24006e94
 80186d8:	24006ea4 	.word	0x24006ea4
 80186dc:	24006e90 	.word	0x24006e90
 80186e0:	240069b8 	.word	0x240069b8
 80186e4:	e000ed04 	.word	0xe000ed04

080186e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80186e8:	b580      	push	{r7, lr}
 80186ea:	b084      	sub	sp, #16
 80186ec:	af00      	add	r7, sp, #0
 80186ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80186f0:	2300      	movs	r3, #0
 80186f2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80186f4:	687b      	ldr	r3, [r7, #4]
 80186f6:	2b00      	cmp	r3, #0
 80186f8:	d017      	beq.n	801872a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80186fa:	4b13      	ldr	r3, [pc, #76]	; (8018748 <vTaskDelay+0x60>)
 80186fc:	681b      	ldr	r3, [r3, #0]
 80186fe:	2b00      	cmp	r3, #0
 8018700:	d00a      	beq.n	8018718 <vTaskDelay+0x30>
	__asm volatile
 8018702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018706:	f383 8811 	msr	BASEPRI, r3
 801870a:	f3bf 8f6f 	isb	sy
 801870e:	f3bf 8f4f 	dsb	sy
 8018712:	60bb      	str	r3, [r7, #8]
}
 8018714:	bf00      	nop
 8018716:	e7fe      	b.n	8018716 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8018718:	f000 f880 	bl	801881c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801871c:	2100      	movs	r1, #0
 801871e:	6878      	ldr	r0, [r7, #4]
 8018720:	f000 fdfa 	bl	8019318 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8018724:	f000 f888 	bl	8018838 <xTaskResumeAll>
 8018728:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801872a:	68fb      	ldr	r3, [r7, #12]
 801872c:	2b00      	cmp	r3, #0
 801872e:	d107      	bne.n	8018740 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8018730:	4b06      	ldr	r3, [pc, #24]	; (801874c <vTaskDelay+0x64>)
 8018732:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018736:	601a      	str	r2, [r3, #0]
 8018738:	f3bf 8f4f 	dsb	sy
 801873c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8018740:	bf00      	nop
 8018742:	3710      	adds	r7, #16
 8018744:	46bd      	mov	sp, r7
 8018746:	bd80      	pop	{r7, pc}
 8018748:	24006eb0 	.word	0x24006eb0
 801874c:	e000ed04 	.word	0xe000ed04

08018750 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8018750:	b580      	push	{r7, lr}
 8018752:	b08a      	sub	sp, #40	; 0x28
 8018754:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8018756:	2300      	movs	r3, #0
 8018758:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801875a:	2300      	movs	r3, #0
 801875c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801875e:	463a      	mov	r2, r7
 8018760:	1d39      	adds	r1, r7, #4
 8018762:	f107 0308 	add.w	r3, r7, #8
 8018766:	4618      	mov	r0, r3
 8018768:	f7fe f8ea 	bl	8016940 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801876c:	6839      	ldr	r1, [r7, #0]
 801876e:	687b      	ldr	r3, [r7, #4]
 8018770:	68ba      	ldr	r2, [r7, #8]
 8018772:	9202      	str	r2, [sp, #8]
 8018774:	9301      	str	r3, [sp, #4]
 8018776:	2300      	movs	r3, #0
 8018778:	9300      	str	r3, [sp, #0]
 801877a:	2300      	movs	r3, #0
 801877c:	460a      	mov	r2, r1
 801877e:	4921      	ldr	r1, [pc, #132]	; (8018804 <vTaskStartScheduler+0xb4>)
 8018780:	4821      	ldr	r0, [pc, #132]	; (8018808 <vTaskStartScheduler+0xb8>)
 8018782:	f7ff fe0f 	bl	80183a4 <xTaskCreateStatic>
 8018786:	4603      	mov	r3, r0
 8018788:	4a20      	ldr	r2, [pc, #128]	; (801880c <vTaskStartScheduler+0xbc>)
 801878a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801878c:	4b1f      	ldr	r3, [pc, #124]	; (801880c <vTaskStartScheduler+0xbc>)
 801878e:	681b      	ldr	r3, [r3, #0]
 8018790:	2b00      	cmp	r3, #0
 8018792:	d002      	beq.n	801879a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8018794:	2301      	movs	r3, #1
 8018796:	617b      	str	r3, [r7, #20]
 8018798:	e001      	b.n	801879e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801879a:	2300      	movs	r3, #0
 801879c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801879e:	697b      	ldr	r3, [r7, #20]
 80187a0:	2b01      	cmp	r3, #1
 80187a2:	d102      	bne.n	80187aa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80187a4:	f000 fe0c 	bl	80193c0 <xTimerCreateTimerTask>
 80187a8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80187aa:	697b      	ldr	r3, [r7, #20]
 80187ac:	2b01      	cmp	r3, #1
 80187ae:	d116      	bne.n	80187de <vTaskStartScheduler+0x8e>
	__asm volatile
 80187b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80187b4:	f383 8811 	msr	BASEPRI, r3
 80187b8:	f3bf 8f6f 	isb	sy
 80187bc:	f3bf 8f4f 	dsb	sy
 80187c0:	613b      	str	r3, [r7, #16]
}
 80187c2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80187c4:	4b12      	ldr	r3, [pc, #72]	; (8018810 <vTaskStartScheduler+0xc0>)
 80187c6:	f04f 32ff 	mov.w	r2, #4294967295
 80187ca:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80187cc:	4b11      	ldr	r3, [pc, #68]	; (8018814 <vTaskStartScheduler+0xc4>)
 80187ce:	2201      	movs	r2, #1
 80187d0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80187d2:	4b11      	ldr	r3, [pc, #68]	; (8018818 <vTaskStartScheduler+0xc8>)
 80187d4:	2200      	movs	r2, #0
 80187d6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80187d8:	f7fe fc12 	bl	8017000 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80187dc:	e00e      	b.n	80187fc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80187de:	697b      	ldr	r3, [r7, #20]
 80187e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80187e4:	d10a      	bne.n	80187fc <vTaskStartScheduler+0xac>
	__asm volatile
 80187e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80187ea:	f383 8811 	msr	BASEPRI, r3
 80187ee:	f3bf 8f6f 	isb	sy
 80187f2:	f3bf 8f4f 	dsb	sy
 80187f6:	60fb      	str	r3, [r7, #12]
}
 80187f8:	bf00      	nop
 80187fa:	e7fe      	b.n	80187fa <vTaskStartScheduler+0xaa>
}
 80187fc:	bf00      	nop
 80187fe:	3718      	adds	r7, #24
 8018800:	46bd      	mov	sp, r7
 8018802:	bd80      	pop	{r7, pc}
 8018804:	0802b0a8 	.word	0x0802b0a8
 8018808:	08018e59 	.word	0x08018e59
 801880c:	24006eac 	.word	0x24006eac
 8018810:	24006ea8 	.word	0x24006ea8
 8018814:	24006e94 	.word	0x24006e94
 8018818:	24006e8c 	.word	0x24006e8c

0801881c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801881c:	b480      	push	{r7}
 801881e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8018820:	4b04      	ldr	r3, [pc, #16]	; (8018834 <vTaskSuspendAll+0x18>)
 8018822:	681b      	ldr	r3, [r3, #0]
 8018824:	3301      	adds	r3, #1
 8018826:	4a03      	ldr	r2, [pc, #12]	; (8018834 <vTaskSuspendAll+0x18>)
 8018828:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801882a:	bf00      	nop
 801882c:	46bd      	mov	sp, r7
 801882e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018832:	4770      	bx	lr
 8018834:	24006eb0 	.word	0x24006eb0

08018838 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8018838:	b580      	push	{r7, lr}
 801883a:	b084      	sub	sp, #16
 801883c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801883e:	2300      	movs	r3, #0
 8018840:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8018842:	2300      	movs	r3, #0
 8018844:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8018846:	4b42      	ldr	r3, [pc, #264]	; (8018950 <xTaskResumeAll+0x118>)
 8018848:	681b      	ldr	r3, [r3, #0]
 801884a:	2b00      	cmp	r3, #0
 801884c:	d10a      	bne.n	8018864 <xTaskResumeAll+0x2c>
	__asm volatile
 801884e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018852:	f383 8811 	msr	BASEPRI, r3
 8018856:	f3bf 8f6f 	isb	sy
 801885a:	f3bf 8f4f 	dsb	sy
 801885e:	603b      	str	r3, [r7, #0]
}
 8018860:	bf00      	nop
 8018862:	e7fe      	b.n	8018862 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8018864:	f7fe fc6e 	bl	8017144 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8018868:	4b39      	ldr	r3, [pc, #228]	; (8018950 <xTaskResumeAll+0x118>)
 801886a:	681b      	ldr	r3, [r3, #0]
 801886c:	3b01      	subs	r3, #1
 801886e:	4a38      	ldr	r2, [pc, #224]	; (8018950 <xTaskResumeAll+0x118>)
 8018870:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018872:	4b37      	ldr	r3, [pc, #220]	; (8018950 <xTaskResumeAll+0x118>)
 8018874:	681b      	ldr	r3, [r3, #0]
 8018876:	2b00      	cmp	r3, #0
 8018878:	d162      	bne.n	8018940 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801887a:	4b36      	ldr	r3, [pc, #216]	; (8018954 <xTaskResumeAll+0x11c>)
 801887c:	681b      	ldr	r3, [r3, #0]
 801887e:	2b00      	cmp	r3, #0
 8018880:	d05e      	beq.n	8018940 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8018882:	e02f      	b.n	80188e4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018884:	4b34      	ldr	r3, [pc, #208]	; (8018958 <xTaskResumeAll+0x120>)
 8018886:	68db      	ldr	r3, [r3, #12]
 8018888:	68db      	ldr	r3, [r3, #12]
 801888a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801888c:	68fb      	ldr	r3, [r7, #12]
 801888e:	3318      	adds	r3, #24
 8018890:	4618      	mov	r0, r3
 8018892:	f7fe fafd 	bl	8016e90 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018896:	68fb      	ldr	r3, [r7, #12]
 8018898:	3304      	adds	r3, #4
 801889a:	4618      	mov	r0, r3
 801889c:	f7fe faf8 	bl	8016e90 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80188a0:	68fb      	ldr	r3, [r7, #12]
 80188a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80188a4:	4b2d      	ldr	r3, [pc, #180]	; (801895c <xTaskResumeAll+0x124>)
 80188a6:	681b      	ldr	r3, [r3, #0]
 80188a8:	429a      	cmp	r2, r3
 80188aa:	d903      	bls.n	80188b4 <xTaskResumeAll+0x7c>
 80188ac:	68fb      	ldr	r3, [r7, #12]
 80188ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80188b0:	4a2a      	ldr	r2, [pc, #168]	; (801895c <xTaskResumeAll+0x124>)
 80188b2:	6013      	str	r3, [r2, #0]
 80188b4:	68fb      	ldr	r3, [r7, #12]
 80188b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80188b8:	4613      	mov	r3, r2
 80188ba:	009b      	lsls	r3, r3, #2
 80188bc:	4413      	add	r3, r2
 80188be:	009b      	lsls	r3, r3, #2
 80188c0:	4a27      	ldr	r2, [pc, #156]	; (8018960 <xTaskResumeAll+0x128>)
 80188c2:	441a      	add	r2, r3
 80188c4:	68fb      	ldr	r3, [r7, #12]
 80188c6:	3304      	adds	r3, #4
 80188c8:	4619      	mov	r1, r3
 80188ca:	4610      	mov	r0, r2
 80188cc:	f7fe fa83 	bl	8016dd6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80188d0:	68fb      	ldr	r3, [r7, #12]
 80188d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80188d4:	4b23      	ldr	r3, [pc, #140]	; (8018964 <xTaskResumeAll+0x12c>)
 80188d6:	681b      	ldr	r3, [r3, #0]
 80188d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80188da:	429a      	cmp	r2, r3
 80188dc:	d302      	bcc.n	80188e4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80188de:	4b22      	ldr	r3, [pc, #136]	; (8018968 <xTaskResumeAll+0x130>)
 80188e0:	2201      	movs	r2, #1
 80188e2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80188e4:	4b1c      	ldr	r3, [pc, #112]	; (8018958 <xTaskResumeAll+0x120>)
 80188e6:	681b      	ldr	r3, [r3, #0]
 80188e8:	2b00      	cmp	r3, #0
 80188ea:	d1cb      	bne.n	8018884 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80188ec:	68fb      	ldr	r3, [r7, #12]
 80188ee:	2b00      	cmp	r3, #0
 80188f0:	d001      	beq.n	80188f6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80188f2:	f000 fb67 	bl	8018fc4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80188f6:	4b1d      	ldr	r3, [pc, #116]	; (801896c <xTaskResumeAll+0x134>)
 80188f8:	681b      	ldr	r3, [r3, #0]
 80188fa:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80188fc:	687b      	ldr	r3, [r7, #4]
 80188fe:	2b00      	cmp	r3, #0
 8018900:	d010      	beq.n	8018924 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8018902:	f000 f859 	bl	80189b8 <xTaskIncrementTick>
 8018906:	4603      	mov	r3, r0
 8018908:	2b00      	cmp	r3, #0
 801890a:	d002      	beq.n	8018912 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 801890c:	4b16      	ldr	r3, [pc, #88]	; (8018968 <xTaskResumeAll+0x130>)
 801890e:	2201      	movs	r2, #1
 8018910:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8018912:	687b      	ldr	r3, [r7, #4]
 8018914:	3b01      	subs	r3, #1
 8018916:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8018918:	687b      	ldr	r3, [r7, #4]
 801891a:	2b00      	cmp	r3, #0
 801891c:	d1f1      	bne.n	8018902 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 801891e:	4b13      	ldr	r3, [pc, #76]	; (801896c <xTaskResumeAll+0x134>)
 8018920:	2200      	movs	r2, #0
 8018922:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8018924:	4b10      	ldr	r3, [pc, #64]	; (8018968 <xTaskResumeAll+0x130>)
 8018926:	681b      	ldr	r3, [r3, #0]
 8018928:	2b00      	cmp	r3, #0
 801892a:	d009      	beq.n	8018940 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801892c:	2301      	movs	r3, #1
 801892e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8018930:	4b0f      	ldr	r3, [pc, #60]	; (8018970 <xTaskResumeAll+0x138>)
 8018932:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018936:	601a      	str	r2, [r3, #0]
 8018938:	f3bf 8f4f 	dsb	sy
 801893c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8018940:	f7fe fc30 	bl	80171a4 <vPortExitCritical>

	return xAlreadyYielded;
 8018944:	68bb      	ldr	r3, [r7, #8]
}
 8018946:	4618      	mov	r0, r3
 8018948:	3710      	adds	r7, #16
 801894a:	46bd      	mov	sp, r7
 801894c:	bd80      	pop	{r7, pc}
 801894e:	bf00      	nop
 8018950:	24006eb0 	.word	0x24006eb0
 8018954:	24006e88 	.word	0x24006e88
 8018958:	24006e48 	.word	0x24006e48
 801895c:	24006e90 	.word	0x24006e90
 8018960:	240069b8 	.word	0x240069b8
 8018964:	240069b4 	.word	0x240069b4
 8018968:	24006e9c 	.word	0x24006e9c
 801896c:	24006e98 	.word	0x24006e98
 8018970:	e000ed04 	.word	0xe000ed04

08018974 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8018974:	b480      	push	{r7}
 8018976:	b083      	sub	sp, #12
 8018978:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801897a:	4b05      	ldr	r3, [pc, #20]	; (8018990 <xTaskGetTickCount+0x1c>)
 801897c:	681b      	ldr	r3, [r3, #0]
 801897e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8018980:	687b      	ldr	r3, [r7, #4]
}
 8018982:	4618      	mov	r0, r3
 8018984:	370c      	adds	r7, #12
 8018986:	46bd      	mov	sp, r7
 8018988:	f85d 7b04 	ldr.w	r7, [sp], #4
 801898c:	4770      	bx	lr
 801898e:	bf00      	nop
 8018990:	24006e8c 	.word	0x24006e8c

08018994 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8018994:	b580      	push	{r7, lr}
 8018996:	b082      	sub	sp, #8
 8018998:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801899a:	f7fe fcb5 	bl	8017308 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 801899e:	2300      	movs	r3, #0
 80189a0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80189a2:	4b04      	ldr	r3, [pc, #16]	; (80189b4 <xTaskGetTickCountFromISR+0x20>)
 80189a4:	681b      	ldr	r3, [r3, #0]
 80189a6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80189a8:	683b      	ldr	r3, [r7, #0]
}
 80189aa:	4618      	mov	r0, r3
 80189ac:	3708      	adds	r7, #8
 80189ae:	46bd      	mov	sp, r7
 80189b0:	bd80      	pop	{r7, pc}
 80189b2:	bf00      	nop
 80189b4:	24006e8c 	.word	0x24006e8c

080189b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80189b8:	b580      	push	{r7, lr}
 80189ba:	b086      	sub	sp, #24
 80189bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80189be:	2300      	movs	r3, #0
 80189c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80189c2:	4b4f      	ldr	r3, [pc, #316]	; (8018b00 <xTaskIncrementTick+0x148>)
 80189c4:	681b      	ldr	r3, [r3, #0]
 80189c6:	2b00      	cmp	r3, #0
 80189c8:	f040 808f 	bne.w	8018aea <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80189cc:	4b4d      	ldr	r3, [pc, #308]	; (8018b04 <xTaskIncrementTick+0x14c>)
 80189ce:	681b      	ldr	r3, [r3, #0]
 80189d0:	3301      	adds	r3, #1
 80189d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80189d4:	4a4b      	ldr	r2, [pc, #300]	; (8018b04 <xTaskIncrementTick+0x14c>)
 80189d6:	693b      	ldr	r3, [r7, #16]
 80189d8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80189da:	693b      	ldr	r3, [r7, #16]
 80189dc:	2b00      	cmp	r3, #0
 80189de:	d120      	bne.n	8018a22 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80189e0:	4b49      	ldr	r3, [pc, #292]	; (8018b08 <xTaskIncrementTick+0x150>)
 80189e2:	681b      	ldr	r3, [r3, #0]
 80189e4:	681b      	ldr	r3, [r3, #0]
 80189e6:	2b00      	cmp	r3, #0
 80189e8:	d00a      	beq.n	8018a00 <xTaskIncrementTick+0x48>
	__asm volatile
 80189ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80189ee:	f383 8811 	msr	BASEPRI, r3
 80189f2:	f3bf 8f6f 	isb	sy
 80189f6:	f3bf 8f4f 	dsb	sy
 80189fa:	603b      	str	r3, [r7, #0]
}
 80189fc:	bf00      	nop
 80189fe:	e7fe      	b.n	80189fe <xTaskIncrementTick+0x46>
 8018a00:	4b41      	ldr	r3, [pc, #260]	; (8018b08 <xTaskIncrementTick+0x150>)
 8018a02:	681b      	ldr	r3, [r3, #0]
 8018a04:	60fb      	str	r3, [r7, #12]
 8018a06:	4b41      	ldr	r3, [pc, #260]	; (8018b0c <xTaskIncrementTick+0x154>)
 8018a08:	681b      	ldr	r3, [r3, #0]
 8018a0a:	4a3f      	ldr	r2, [pc, #252]	; (8018b08 <xTaskIncrementTick+0x150>)
 8018a0c:	6013      	str	r3, [r2, #0]
 8018a0e:	4a3f      	ldr	r2, [pc, #252]	; (8018b0c <xTaskIncrementTick+0x154>)
 8018a10:	68fb      	ldr	r3, [r7, #12]
 8018a12:	6013      	str	r3, [r2, #0]
 8018a14:	4b3e      	ldr	r3, [pc, #248]	; (8018b10 <xTaskIncrementTick+0x158>)
 8018a16:	681b      	ldr	r3, [r3, #0]
 8018a18:	3301      	adds	r3, #1
 8018a1a:	4a3d      	ldr	r2, [pc, #244]	; (8018b10 <xTaskIncrementTick+0x158>)
 8018a1c:	6013      	str	r3, [r2, #0]
 8018a1e:	f000 fad1 	bl	8018fc4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8018a22:	4b3c      	ldr	r3, [pc, #240]	; (8018b14 <xTaskIncrementTick+0x15c>)
 8018a24:	681b      	ldr	r3, [r3, #0]
 8018a26:	693a      	ldr	r2, [r7, #16]
 8018a28:	429a      	cmp	r2, r3
 8018a2a:	d349      	bcc.n	8018ac0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018a2c:	4b36      	ldr	r3, [pc, #216]	; (8018b08 <xTaskIncrementTick+0x150>)
 8018a2e:	681b      	ldr	r3, [r3, #0]
 8018a30:	681b      	ldr	r3, [r3, #0]
 8018a32:	2b00      	cmp	r3, #0
 8018a34:	d104      	bne.n	8018a40 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018a36:	4b37      	ldr	r3, [pc, #220]	; (8018b14 <xTaskIncrementTick+0x15c>)
 8018a38:	f04f 32ff 	mov.w	r2, #4294967295
 8018a3c:	601a      	str	r2, [r3, #0]
					break;
 8018a3e:	e03f      	b.n	8018ac0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018a40:	4b31      	ldr	r3, [pc, #196]	; (8018b08 <xTaskIncrementTick+0x150>)
 8018a42:	681b      	ldr	r3, [r3, #0]
 8018a44:	68db      	ldr	r3, [r3, #12]
 8018a46:	68db      	ldr	r3, [r3, #12]
 8018a48:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8018a4a:	68bb      	ldr	r3, [r7, #8]
 8018a4c:	685b      	ldr	r3, [r3, #4]
 8018a4e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8018a50:	693a      	ldr	r2, [r7, #16]
 8018a52:	687b      	ldr	r3, [r7, #4]
 8018a54:	429a      	cmp	r2, r3
 8018a56:	d203      	bcs.n	8018a60 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8018a58:	4a2e      	ldr	r2, [pc, #184]	; (8018b14 <xTaskIncrementTick+0x15c>)
 8018a5a:	687b      	ldr	r3, [r7, #4]
 8018a5c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8018a5e:	e02f      	b.n	8018ac0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018a60:	68bb      	ldr	r3, [r7, #8]
 8018a62:	3304      	adds	r3, #4
 8018a64:	4618      	mov	r0, r3
 8018a66:	f7fe fa13 	bl	8016e90 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8018a6a:	68bb      	ldr	r3, [r7, #8]
 8018a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018a6e:	2b00      	cmp	r3, #0
 8018a70:	d004      	beq.n	8018a7c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8018a72:	68bb      	ldr	r3, [r7, #8]
 8018a74:	3318      	adds	r3, #24
 8018a76:	4618      	mov	r0, r3
 8018a78:	f7fe fa0a 	bl	8016e90 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8018a7c:	68bb      	ldr	r3, [r7, #8]
 8018a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018a80:	4b25      	ldr	r3, [pc, #148]	; (8018b18 <xTaskIncrementTick+0x160>)
 8018a82:	681b      	ldr	r3, [r3, #0]
 8018a84:	429a      	cmp	r2, r3
 8018a86:	d903      	bls.n	8018a90 <xTaskIncrementTick+0xd8>
 8018a88:	68bb      	ldr	r3, [r7, #8]
 8018a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018a8c:	4a22      	ldr	r2, [pc, #136]	; (8018b18 <xTaskIncrementTick+0x160>)
 8018a8e:	6013      	str	r3, [r2, #0]
 8018a90:	68bb      	ldr	r3, [r7, #8]
 8018a92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018a94:	4613      	mov	r3, r2
 8018a96:	009b      	lsls	r3, r3, #2
 8018a98:	4413      	add	r3, r2
 8018a9a:	009b      	lsls	r3, r3, #2
 8018a9c:	4a1f      	ldr	r2, [pc, #124]	; (8018b1c <xTaskIncrementTick+0x164>)
 8018a9e:	441a      	add	r2, r3
 8018aa0:	68bb      	ldr	r3, [r7, #8]
 8018aa2:	3304      	adds	r3, #4
 8018aa4:	4619      	mov	r1, r3
 8018aa6:	4610      	mov	r0, r2
 8018aa8:	f7fe f995 	bl	8016dd6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8018aac:	68bb      	ldr	r3, [r7, #8]
 8018aae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018ab0:	4b1b      	ldr	r3, [pc, #108]	; (8018b20 <xTaskIncrementTick+0x168>)
 8018ab2:	681b      	ldr	r3, [r3, #0]
 8018ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018ab6:	429a      	cmp	r2, r3
 8018ab8:	d3b8      	bcc.n	8018a2c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8018aba:	2301      	movs	r3, #1
 8018abc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018abe:	e7b5      	b.n	8018a2c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8018ac0:	4b17      	ldr	r3, [pc, #92]	; (8018b20 <xTaskIncrementTick+0x168>)
 8018ac2:	681b      	ldr	r3, [r3, #0]
 8018ac4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018ac6:	4915      	ldr	r1, [pc, #84]	; (8018b1c <xTaskIncrementTick+0x164>)
 8018ac8:	4613      	mov	r3, r2
 8018aca:	009b      	lsls	r3, r3, #2
 8018acc:	4413      	add	r3, r2
 8018ace:	009b      	lsls	r3, r3, #2
 8018ad0:	440b      	add	r3, r1
 8018ad2:	681b      	ldr	r3, [r3, #0]
 8018ad4:	2b01      	cmp	r3, #1
 8018ad6:	d901      	bls.n	8018adc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8018ad8:	2301      	movs	r3, #1
 8018ada:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8018adc:	4b11      	ldr	r3, [pc, #68]	; (8018b24 <xTaskIncrementTick+0x16c>)
 8018ade:	681b      	ldr	r3, [r3, #0]
 8018ae0:	2b00      	cmp	r3, #0
 8018ae2:	d007      	beq.n	8018af4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8018ae4:	2301      	movs	r3, #1
 8018ae6:	617b      	str	r3, [r7, #20]
 8018ae8:	e004      	b.n	8018af4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8018aea:	4b0f      	ldr	r3, [pc, #60]	; (8018b28 <xTaskIncrementTick+0x170>)
 8018aec:	681b      	ldr	r3, [r3, #0]
 8018aee:	3301      	adds	r3, #1
 8018af0:	4a0d      	ldr	r2, [pc, #52]	; (8018b28 <xTaskIncrementTick+0x170>)
 8018af2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8018af4:	697b      	ldr	r3, [r7, #20]
}
 8018af6:	4618      	mov	r0, r3
 8018af8:	3718      	adds	r7, #24
 8018afa:	46bd      	mov	sp, r7
 8018afc:	bd80      	pop	{r7, pc}
 8018afe:	bf00      	nop
 8018b00:	24006eb0 	.word	0x24006eb0
 8018b04:	24006e8c 	.word	0x24006e8c
 8018b08:	24006e40 	.word	0x24006e40
 8018b0c:	24006e44 	.word	0x24006e44
 8018b10:	24006ea0 	.word	0x24006ea0
 8018b14:	24006ea8 	.word	0x24006ea8
 8018b18:	24006e90 	.word	0x24006e90
 8018b1c:	240069b8 	.word	0x240069b8
 8018b20:	240069b4 	.word	0x240069b4
 8018b24:	24006e9c 	.word	0x24006e9c
 8018b28:	24006e98 	.word	0x24006e98

08018b2c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8018b2c:	b480      	push	{r7}
 8018b2e:	b085      	sub	sp, #20
 8018b30:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8018b32:	4b28      	ldr	r3, [pc, #160]	; (8018bd4 <vTaskSwitchContext+0xa8>)
 8018b34:	681b      	ldr	r3, [r3, #0]
 8018b36:	2b00      	cmp	r3, #0
 8018b38:	d003      	beq.n	8018b42 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8018b3a:	4b27      	ldr	r3, [pc, #156]	; (8018bd8 <vTaskSwitchContext+0xac>)
 8018b3c:	2201      	movs	r2, #1
 8018b3e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8018b40:	e041      	b.n	8018bc6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8018b42:	4b25      	ldr	r3, [pc, #148]	; (8018bd8 <vTaskSwitchContext+0xac>)
 8018b44:	2200      	movs	r2, #0
 8018b46:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018b48:	4b24      	ldr	r3, [pc, #144]	; (8018bdc <vTaskSwitchContext+0xb0>)
 8018b4a:	681b      	ldr	r3, [r3, #0]
 8018b4c:	60fb      	str	r3, [r7, #12]
 8018b4e:	e010      	b.n	8018b72 <vTaskSwitchContext+0x46>
 8018b50:	68fb      	ldr	r3, [r7, #12]
 8018b52:	2b00      	cmp	r3, #0
 8018b54:	d10a      	bne.n	8018b6c <vTaskSwitchContext+0x40>
	__asm volatile
 8018b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018b5a:	f383 8811 	msr	BASEPRI, r3
 8018b5e:	f3bf 8f6f 	isb	sy
 8018b62:	f3bf 8f4f 	dsb	sy
 8018b66:	607b      	str	r3, [r7, #4]
}
 8018b68:	bf00      	nop
 8018b6a:	e7fe      	b.n	8018b6a <vTaskSwitchContext+0x3e>
 8018b6c:	68fb      	ldr	r3, [r7, #12]
 8018b6e:	3b01      	subs	r3, #1
 8018b70:	60fb      	str	r3, [r7, #12]
 8018b72:	491b      	ldr	r1, [pc, #108]	; (8018be0 <vTaskSwitchContext+0xb4>)
 8018b74:	68fa      	ldr	r2, [r7, #12]
 8018b76:	4613      	mov	r3, r2
 8018b78:	009b      	lsls	r3, r3, #2
 8018b7a:	4413      	add	r3, r2
 8018b7c:	009b      	lsls	r3, r3, #2
 8018b7e:	440b      	add	r3, r1
 8018b80:	681b      	ldr	r3, [r3, #0]
 8018b82:	2b00      	cmp	r3, #0
 8018b84:	d0e4      	beq.n	8018b50 <vTaskSwitchContext+0x24>
 8018b86:	68fa      	ldr	r2, [r7, #12]
 8018b88:	4613      	mov	r3, r2
 8018b8a:	009b      	lsls	r3, r3, #2
 8018b8c:	4413      	add	r3, r2
 8018b8e:	009b      	lsls	r3, r3, #2
 8018b90:	4a13      	ldr	r2, [pc, #76]	; (8018be0 <vTaskSwitchContext+0xb4>)
 8018b92:	4413      	add	r3, r2
 8018b94:	60bb      	str	r3, [r7, #8]
 8018b96:	68bb      	ldr	r3, [r7, #8]
 8018b98:	685b      	ldr	r3, [r3, #4]
 8018b9a:	685a      	ldr	r2, [r3, #4]
 8018b9c:	68bb      	ldr	r3, [r7, #8]
 8018b9e:	605a      	str	r2, [r3, #4]
 8018ba0:	68bb      	ldr	r3, [r7, #8]
 8018ba2:	685a      	ldr	r2, [r3, #4]
 8018ba4:	68bb      	ldr	r3, [r7, #8]
 8018ba6:	3308      	adds	r3, #8
 8018ba8:	429a      	cmp	r2, r3
 8018baa:	d104      	bne.n	8018bb6 <vTaskSwitchContext+0x8a>
 8018bac:	68bb      	ldr	r3, [r7, #8]
 8018bae:	685b      	ldr	r3, [r3, #4]
 8018bb0:	685a      	ldr	r2, [r3, #4]
 8018bb2:	68bb      	ldr	r3, [r7, #8]
 8018bb4:	605a      	str	r2, [r3, #4]
 8018bb6:	68bb      	ldr	r3, [r7, #8]
 8018bb8:	685b      	ldr	r3, [r3, #4]
 8018bba:	68db      	ldr	r3, [r3, #12]
 8018bbc:	4a09      	ldr	r2, [pc, #36]	; (8018be4 <vTaskSwitchContext+0xb8>)
 8018bbe:	6013      	str	r3, [r2, #0]
 8018bc0:	4a06      	ldr	r2, [pc, #24]	; (8018bdc <vTaskSwitchContext+0xb0>)
 8018bc2:	68fb      	ldr	r3, [r7, #12]
 8018bc4:	6013      	str	r3, [r2, #0]
}
 8018bc6:	bf00      	nop
 8018bc8:	3714      	adds	r7, #20
 8018bca:	46bd      	mov	sp, r7
 8018bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bd0:	4770      	bx	lr
 8018bd2:	bf00      	nop
 8018bd4:	24006eb0 	.word	0x24006eb0
 8018bd8:	24006e9c 	.word	0x24006e9c
 8018bdc:	24006e90 	.word	0x24006e90
 8018be0:	240069b8 	.word	0x240069b8
 8018be4:	240069b4 	.word	0x240069b4

08018be8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8018be8:	b580      	push	{r7, lr}
 8018bea:	b084      	sub	sp, #16
 8018bec:	af00      	add	r7, sp, #0
 8018bee:	6078      	str	r0, [r7, #4]
 8018bf0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8018bf2:	687b      	ldr	r3, [r7, #4]
 8018bf4:	2b00      	cmp	r3, #0
 8018bf6:	d10a      	bne.n	8018c0e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8018bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018bfc:	f383 8811 	msr	BASEPRI, r3
 8018c00:	f3bf 8f6f 	isb	sy
 8018c04:	f3bf 8f4f 	dsb	sy
 8018c08:	60fb      	str	r3, [r7, #12]
}
 8018c0a:	bf00      	nop
 8018c0c:	e7fe      	b.n	8018c0c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8018c0e:	4b07      	ldr	r3, [pc, #28]	; (8018c2c <vTaskPlaceOnEventList+0x44>)
 8018c10:	681b      	ldr	r3, [r3, #0]
 8018c12:	3318      	adds	r3, #24
 8018c14:	4619      	mov	r1, r3
 8018c16:	6878      	ldr	r0, [r7, #4]
 8018c18:	f7fe f901 	bl	8016e1e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8018c1c:	2101      	movs	r1, #1
 8018c1e:	6838      	ldr	r0, [r7, #0]
 8018c20:	f000 fb7a 	bl	8019318 <prvAddCurrentTaskToDelayedList>
}
 8018c24:	bf00      	nop
 8018c26:	3710      	adds	r7, #16
 8018c28:	46bd      	mov	sp, r7
 8018c2a:	bd80      	pop	{r7, pc}
 8018c2c:	240069b4 	.word	0x240069b4

08018c30 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8018c30:	b580      	push	{r7, lr}
 8018c32:	b086      	sub	sp, #24
 8018c34:	af00      	add	r7, sp, #0
 8018c36:	60f8      	str	r0, [r7, #12]
 8018c38:	60b9      	str	r1, [r7, #8]
 8018c3a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8018c3c:	68fb      	ldr	r3, [r7, #12]
 8018c3e:	2b00      	cmp	r3, #0
 8018c40:	d10a      	bne.n	8018c58 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8018c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018c46:	f383 8811 	msr	BASEPRI, r3
 8018c4a:	f3bf 8f6f 	isb	sy
 8018c4e:	f3bf 8f4f 	dsb	sy
 8018c52:	617b      	str	r3, [r7, #20]
}
 8018c54:	bf00      	nop
 8018c56:	e7fe      	b.n	8018c56 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8018c58:	4b0a      	ldr	r3, [pc, #40]	; (8018c84 <vTaskPlaceOnEventListRestricted+0x54>)
 8018c5a:	681b      	ldr	r3, [r3, #0]
 8018c5c:	3318      	adds	r3, #24
 8018c5e:	4619      	mov	r1, r3
 8018c60:	68f8      	ldr	r0, [r7, #12]
 8018c62:	f7fe f8b8 	bl	8016dd6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8018c66:	687b      	ldr	r3, [r7, #4]
 8018c68:	2b00      	cmp	r3, #0
 8018c6a:	d002      	beq.n	8018c72 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8018c6c:	f04f 33ff 	mov.w	r3, #4294967295
 8018c70:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8018c72:	6879      	ldr	r1, [r7, #4]
 8018c74:	68b8      	ldr	r0, [r7, #8]
 8018c76:	f000 fb4f 	bl	8019318 <prvAddCurrentTaskToDelayedList>
	}
 8018c7a:	bf00      	nop
 8018c7c:	3718      	adds	r7, #24
 8018c7e:	46bd      	mov	sp, r7
 8018c80:	bd80      	pop	{r7, pc}
 8018c82:	bf00      	nop
 8018c84:	240069b4 	.word	0x240069b4

08018c88 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8018c88:	b580      	push	{r7, lr}
 8018c8a:	b086      	sub	sp, #24
 8018c8c:	af00      	add	r7, sp, #0
 8018c8e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018c90:	687b      	ldr	r3, [r7, #4]
 8018c92:	68db      	ldr	r3, [r3, #12]
 8018c94:	68db      	ldr	r3, [r3, #12]
 8018c96:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8018c98:	693b      	ldr	r3, [r7, #16]
 8018c9a:	2b00      	cmp	r3, #0
 8018c9c:	d10a      	bne.n	8018cb4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8018c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018ca2:	f383 8811 	msr	BASEPRI, r3
 8018ca6:	f3bf 8f6f 	isb	sy
 8018caa:	f3bf 8f4f 	dsb	sy
 8018cae:	60fb      	str	r3, [r7, #12]
}
 8018cb0:	bf00      	nop
 8018cb2:	e7fe      	b.n	8018cb2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8018cb4:	693b      	ldr	r3, [r7, #16]
 8018cb6:	3318      	adds	r3, #24
 8018cb8:	4618      	mov	r0, r3
 8018cba:	f7fe f8e9 	bl	8016e90 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018cbe:	4b1e      	ldr	r3, [pc, #120]	; (8018d38 <xTaskRemoveFromEventList+0xb0>)
 8018cc0:	681b      	ldr	r3, [r3, #0]
 8018cc2:	2b00      	cmp	r3, #0
 8018cc4:	d11d      	bne.n	8018d02 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8018cc6:	693b      	ldr	r3, [r7, #16]
 8018cc8:	3304      	adds	r3, #4
 8018cca:	4618      	mov	r0, r3
 8018ccc:	f7fe f8e0 	bl	8016e90 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8018cd0:	693b      	ldr	r3, [r7, #16]
 8018cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018cd4:	4b19      	ldr	r3, [pc, #100]	; (8018d3c <xTaskRemoveFromEventList+0xb4>)
 8018cd6:	681b      	ldr	r3, [r3, #0]
 8018cd8:	429a      	cmp	r2, r3
 8018cda:	d903      	bls.n	8018ce4 <xTaskRemoveFromEventList+0x5c>
 8018cdc:	693b      	ldr	r3, [r7, #16]
 8018cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018ce0:	4a16      	ldr	r2, [pc, #88]	; (8018d3c <xTaskRemoveFromEventList+0xb4>)
 8018ce2:	6013      	str	r3, [r2, #0]
 8018ce4:	693b      	ldr	r3, [r7, #16]
 8018ce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018ce8:	4613      	mov	r3, r2
 8018cea:	009b      	lsls	r3, r3, #2
 8018cec:	4413      	add	r3, r2
 8018cee:	009b      	lsls	r3, r3, #2
 8018cf0:	4a13      	ldr	r2, [pc, #76]	; (8018d40 <xTaskRemoveFromEventList+0xb8>)
 8018cf2:	441a      	add	r2, r3
 8018cf4:	693b      	ldr	r3, [r7, #16]
 8018cf6:	3304      	adds	r3, #4
 8018cf8:	4619      	mov	r1, r3
 8018cfa:	4610      	mov	r0, r2
 8018cfc:	f7fe f86b 	bl	8016dd6 <vListInsertEnd>
 8018d00:	e005      	b.n	8018d0e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8018d02:	693b      	ldr	r3, [r7, #16]
 8018d04:	3318      	adds	r3, #24
 8018d06:	4619      	mov	r1, r3
 8018d08:	480e      	ldr	r0, [pc, #56]	; (8018d44 <xTaskRemoveFromEventList+0xbc>)
 8018d0a:	f7fe f864 	bl	8016dd6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8018d0e:	693b      	ldr	r3, [r7, #16]
 8018d10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018d12:	4b0d      	ldr	r3, [pc, #52]	; (8018d48 <xTaskRemoveFromEventList+0xc0>)
 8018d14:	681b      	ldr	r3, [r3, #0]
 8018d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018d18:	429a      	cmp	r2, r3
 8018d1a:	d905      	bls.n	8018d28 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8018d1c:	2301      	movs	r3, #1
 8018d1e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8018d20:	4b0a      	ldr	r3, [pc, #40]	; (8018d4c <xTaskRemoveFromEventList+0xc4>)
 8018d22:	2201      	movs	r2, #1
 8018d24:	601a      	str	r2, [r3, #0]
 8018d26:	e001      	b.n	8018d2c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8018d28:	2300      	movs	r3, #0
 8018d2a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8018d2c:	697b      	ldr	r3, [r7, #20]
}
 8018d2e:	4618      	mov	r0, r3
 8018d30:	3718      	adds	r7, #24
 8018d32:	46bd      	mov	sp, r7
 8018d34:	bd80      	pop	{r7, pc}
 8018d36:	bf00      	nop
 8018d38:	24006eb0 	.word	0x24006eb0
 8018d3c:	24006e90 	.word	0x24006e90
 8018d40:	240069b8 	.word	0x240069b8
 8018d44:	24006e48 	.word	0x24006e48
 8018d48:	240069b4 	.word	0x240069b4
 8018d4c:	24006e9c 	.word	0x24006e9c

08018d50 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8018d50:	b480      	push	{r7}
 8018d52:	b083      	sub	sp, #12
 8018d54:	af00      	add	r7, sp, #0
 8018d56:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8018d58:	4b06      	ldr	r3, [pc, #24]	; (8018d74 <vTaskInternalSetTimeOutState+0x24>)
 8018d5a:	681a      	ldr	r2, [r3, #0]
 8018d5c:	687b      	ldr	r3, [r7, #4]
 8018d5e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8018d60:	4b05      	ldr	r3, [pc, #20]	; (8018d78 <vTaskInternalSetTimeOutState+0x28>)
 8018d62:	681a      	ldr	r2, [r3, #0]
 8018d64:	687b      	ldr	r3, [r7, #4]
 8018d66:	605a      	str	r2, [r3, #4]
}
 8018d68:	bf00      	nop
 8018d6a:	370c      	adds	r7, #12
 8018d6c:	46bd      	mov	sp, r7
 8018d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d72:	4770      	bx	lr
 8018d74:	24006ea0 	.word	0x24006ea0
 8018d78:	24006e8c 	.word	0x24006e8c

08018d7c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8018d7c:	b580      	push	{r7, lr}
 8018d7e:	b088      	sub	sp, #32
 8018d80:	af00      	add	r7, sp, #0
 8018d82:	6078      	str	r0, [r7, #4]
 8018d84:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8018d86:	687b      	ldr	r3, [r7, #4]
 8018d88:	2b00      	cmp	r3, #0
 8018d8a:	d10a      	bne.n	8018da2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8018d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018d90:	f383 8811 	msr	BASEPRI, r3
 8018d94:	f3bf 8f6f 	isb	sy
 8018d98:	f3bf 8f4f 	dsb	sy
 8018d9c:	613b      	str	r3, [r7, #16]
}
 8018d9e:	bf00      	nop
 8018da0:	e7fe      	b.n	8018da0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8018da2:	683b      	ldr	r3, [r7, #0]
 8018da4:	2b00      	cmp	r3, #0
 8018da6:	d10a      	bne.n	8018dbe <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8018da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018dac:	f383 8811 	msr	BASEPRI, r3
 8018db0:	f3bf 8f6f 	isb	sy
 8018db4:	f3bf 8f4f 	dsb	sy
 8018db8:	60fb      	str	r3, [r7, #12]
}
 8018dba:	bf00      	nop
 8018dbc:	e7fe      	b.n	8018dbc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8018dbe:	f7fe f9c1 	bl	8017144 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8018dc2:	4b1d      	ldr	r3, [pc, #116]	; (8018e38 <xTaskCheckForTimeOut+0xbc>)
 8018dc4:	681b      	ldr	r3, [r3, #0]
 8018dc6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8018dc8:	687b      	ldr	r3, [r7, #4]
 8018dca:	685b      	ldr	r3, [r3, #4]
 8018dcc:	69ba      	ldr	r2, [r7, #24]
 8018dce:	1ad3      	subs	r3, r2, r3
 8018dd0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8018dd2:	683b      	ldr	r3, [r7, #0]
 8018dd4:	681b      	ldr	r3, [r3, #0]
 8018dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018dda:	d102      	bne.n	8018de2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8018ddc:	2300      	movs	r3, #0
 8018dde:	61fb      	str	r3, [r7, #28]
 8018de0:	e023      	b.n	8018e2a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8018de2:	687b      	ldr	r3, [r7, #4]
 8018de4:	681a      	ldr	r2, [r3, #0]
 8018de6:	4b15      	ldr	r3, [pc, #84]	; (8018e3c <xTaskCheckForTimeOut+0xc0>)
 8018de8:	681b      	ldr	r3, [r3, #0]
 8018dea:	429a      	cmp	r2, r3
 8018dec:	d007      	beq.n	8018dfe <xTaskCheckForTimeOut+0x82>
 8018dee:	687b      	ldr	r3, [r7, #4]
 8018df0:	685b      	ldr	r3, [r3, #4]
 8018df2:	69ba      	ldr	r2, [r7, #24]
 8018df4:	429a      	cmp	r2, r3
 8018df6:	d302      	bcc.n	8018dfe <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8018df8:	2301      	movs	r3, #1
 8018dfa:	61fb      	str	r3, [r7, #28]
 8018dfc:	e015      	b.n	8018e2a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8018dfe:	683b      	ldr	r3, [r7, #0]
 8018e00:	681b      	ldr	r3, [r3, #0]
 8018e02:	697a      	ldr	r2, [r7, #20]
 8018e04:	429a      	cmp	r2, r3
 8018e06:	d20b      	bcs.n	8018e20 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8018e08:	683b      	ldr	r3, [r7, #0]
 8018e0a:	681a      	ldr	r2, [r3, #0]
 8018e0c:	697b      	ldr	r3, [r7, #20]
 8018e0e:	1ad2      	subs	r2, r2, r3
 8018e10:	683b      	ldr	r3, [r7, #0]
 8018e12:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8018e14:	6878      	ldr	r0, [r7, #4]
 8018e16:	f7ff ff9b 	bl	8018d50 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8018e1a:	2300      	movs	r3, #0
 8018e1c:	61fb      	str	r3, [r7, #28]
 8018e1e:	e004      	b.n	8018e2a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8018e20:	683b      	ldr	r3, [r7, #0]
 8018e22:	2200      	movs	r2, #0
 8018e24:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8018e26:	2301      	movs	r3, #1
 8018e28:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8018e2a:	f7fe f9bb 	bl	80171a4 <vPortExitCritical>

	return xReturn;
 8018e2e:	69fb      	ldr	r3, [r7, #28]
}
 8018e30:	4618      	mov	r0, r3
 8018e32:	3720      	adds	r7, #32
 8018e34:	46bd      	mov	sp, r7
 8018e36:	bd80      	pop	{r7, pc}
 8018e38:	24006e8c 	.word	0x24006e8c
 8018e3c:	24006ea0 	.word	0x24006ea0

08018e40 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8018e40:	b480      	push	{r7}
 8018e42:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8018e44:	4b03      	ldr	r3, [pc, #12]	; (8018e54 <vTaskMissedYield+0x14>)
 8018e46:	2201      	movs	r2, #1
 8018e48:	601a      	str	r2, [r3, #0]
}
 8018e4a:	bf00      	nop
 8018e4c:	46bd      	mov	sp, r7
 8018e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e52:	4770      	bx	lr
 8018e54:	24006e9c 	.word	0x24006e9c

08018e58 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8018e58:	b580      	push	{r7, lr}
 8018e5a:	b082      	sub	sp, #8
 8018e5c:	af00      	add	r7, sp, #0
 8018e5e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8018e60:	f000 f852 	bl	8018f08 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8018e64:	4b06      	ldr	r3, [pc, #24]	; (8018e80 <prvIdleTask+0x28>)
 8018e66:	681b      	ldr	r3, [r3, #0]
 8018e68:	2b01      	cmp	r3, #1
 8018e6a:	d9f9      	bls.n	8018e60 <prvIdleTask+0x8>
			{
				taskYIELD();
 8018e6c:	4b05      	ldr	r3, [pc, #20]	; (8018e84 <prvIdleTask+0x2c>)
 8018e6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018e72:	601a      	str	r2, [r3, #0]
 8018e74:	f3bf 8f4f 	dsb	sy
 8018e78:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8018e7c:	e7f0      	b.n	8018e60 <prvIdleTask+0x8>
 8018e7e:	bf00      	nop
 8018e80:	240069b8 	.word	0x240069b8
 8018e84:	e000ed04 	.word	0xe000ed04

08018e88 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8018e88:	b580      	push	{r7, lr}
 8018e8a:	b082      	sub	sp, #8
 8018e8c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8018e8e:	2300      	movs	r3, #0
 8018e90:	607b      	str	r3, [r7, #4]
 8018e92:	e00c      	b.n	8018eae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8018e94:	687a      	ldr	r2, [r7, #4]
 8018e96:	4613      	mov	r3, r2
 8018e98:	009b      	lsls	r3, r3, #2
 8018e9a:	4413      	add	r3, r2
 8018e9c:	009b      	lsls	r3, r3, #2
 8018e9e:	4a12      	ldr	r2, [pc, #72]	; (8018ee8 <prvInitialiseTaskLists+0x60>)
 8018ea0:	4413      	add	r3, r2
 8018ea2:	4618      	mov	r0, r3
 8018ea4:	f7fd ff6a 	bl	8016d7c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8018ea8:	687b      	ldr	r3, [r7, #4]
 8018eaa:	3301      	adds	r3, #1
 8018eac:	607b      	str	r3, [r7, #4]
 8018eae:	687b      	ldr	r3, [r7, #4]
 8018eb0:	2b37      	cmp	r3, #55	; 0x37
 8018eb2:	d9ef      	bls.n	8018e94 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8018eb4:	480d      	ldr	r0, [pc, #52]	; (8018eec <prvInitialiseTaskLists+0x64>)
 8018eb6:	f7fd ff61 	bl	8016d7c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8018eba:	480d      	ldr	r0, [pc, #52]	; (8018ef0 <prvInitialiseTaskLists+0x68>)
 8018ebc:	f7fd ff5e 	bl	8016d7c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8018ec0:	480c      	ldr	r0, [pc, #48]	; (8018ef4 <prvInitialiseTaskLists+0x6c>)
 8018ec2:	f7fd ff5b 	bl	8016d7c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8018ec6:	480c      	ldr	r0, [pc, #48]	; (8018ef8 <prvInitialiseTaskLists+0x70>)
 8018ec8:	f7fd ff58 	bl	8016d7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8018ecc:	480b      	ldr	r0, [pc, #44]	; (8018efc <prvInitialiseTaskLists+0x74>)
 8018ece:	f7fd ff55 	bl	8016d7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8018ed2:	4b0b      	ldr	r3, [pc, #44]	; (8018f00 <prvInitialiseTaskLists+0x78>)
 8018ed4:	4a05      	ldr	r2, [pc, #20]	; (8018eec <prvInitialiseTaskLists+0x64>)
 8018ed6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8018ed8:	4b0a      	ldr	r3, [pc, #40]	; (8018f04 <prvInitialiseTaskLists+0x7c>)
 8018eda:	4a05      	ldr	r2, [pc, #20]	; (8018ef0 <prvInitialiseTaskLists+0x68>)
 8018edc:	601a      	str	r2, [r3, #0]
}
 8018ede:	bf00      	nop
 8018ee0:	3708      	adds	r7, #8
 8018ee2:	46bd      	mov	sp, r7
 8018ee4:	bd80      	pop	{r7, pc}
 8018ee6:	bf00      	nop
 8018ee8:	240069b8 	.word	0x240069b8
 8018eec:	24006e18 	.word	0x24006e18
 8018ef0:	24006e2c 	.word	0x24006e2c
 8018ef4:	24006e48 	.word	0x24006e48
 8018ef8:	24006e5c 	.word	0x24006e5c
 8018efc:	24006e74 	.word	0x24006e74
 8018f00:	24006e40 	.word	0x24006e40
 8018f04:	24006e44 	.word	0x24006e44

08018f08 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8018f08:	b580      	push	{r7, lr}
 8018f0a:	b082      	sub	sp, #8
 8018f0c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8018f0e:	e019      	b.n	8018f44 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8018f10:	f7fe f918 	bl	8017144 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018f14:	4b10      	ldr	r3, [pc, #64]	; (8018f58 <prvCheckTasksWaitingTermination+0x50>)
 8018f16:	68db      	ldr	r3, [r3, #12]
 8018f18:	68db      	ldr	r3, [r3, #12]
 8018f1a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018f1c:	687b      	ldr	r3, [r7, #4]
 8018f1e:	3304      	adds	r3, #4
 8018f20:	4618      	mov	r0, r3
 8018f22:	f7fd ffb5 	bl	8016e90 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8018f26:	4b0d      	ldr	r3, [pc, #52]	; (8018f5c <prvCheckTasksWaitingTermination+0x54>)
 8018f28:	681b      	ldr	r3, [r3, #0]
 8018f2a:	3b01      	subs	r3, #1
 8018f2c:	4a0b      	ldr	r2, [pc, #44]	; (8018f5c <prvCheckTasksWaitingTermination+0x54>)
 8018f2e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8018f30:	4b0b      	ldr	r3, [pc, #44]	; (8018f60 <prvCheckTasksWaitingTermination+0x58>)
 8018f32:	681b      	ldr	r3, [r3, #0]
 8018f34:	3b01      	subs	r3, #1
 8018f36:	4a0a      	ldr	r2, [pc, #40]	; (8018f60 <prvCheckTasksWaitingTermination+0x58>)
 8018f38:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8018f3a:	f7fe f933 	bl	80171a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8018f3e:	6878      	ldr	r0, [r7, #4]
 8018f40:	f000 f810 	bl	8018f64 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8018f44:	4b06      	ldr	r3, [pc, #24]	; (8018f60 <prvCheckTasksWaitingTermination+0x58>)
 8018f46:	681b      	ldr	r3, [r3, #0]
 8018f48:	2b00      	cmp	r3, #0
 8018f4a:	d1e1      	bne.n	8018f10 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8018f4c:	bf00      	nop
 8018f4e:	bf00      	nop
 8018f50:	3708      	adds	r7, #8
 8018f52:	46bd      	mov	sp, r7
 8018f54:	bd80      	pop	{r7, pc}
 8018f56:	bf00      	nop
 8018f58:	24006e5c 	.word	0x24006e5c
 8018f5c:	24006e88 	.word	0x24006e88
 8018f60:	24006e70 	.word	0x24006e70

08018f64 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8018f64:	b580      	push	{r7, lr}
 8018f66:	b084      	sub	sp, #16
 8018f68:	af00      	add	r7, sp, #0
 8018f6a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8018f6c:	687b      	ldr	r3, [r7, #4]
 8018f6e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8018f72:	2b00      	cmp	r3, #0
 8018f74:	d108      	bne.n	8018f88 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8018f76:	687b      	ldr	r3, [r7, #4]
 8018f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018f7a:	4618      	mov	r0, r3
 8018f7c:	f7fd fde0 	bl	8016b40 <vPortFree>
				vPortFree( pxTCB );
 8018f80:	6878      	ldr	r0, [r7, #4]
 8018f82:	f7fd fddd 	bl	8016b40 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8018f86:	e018      	b.n	8018fba <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8018f88:	687b      	ldr	r3, [r7, #4]
 8018f8a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8018f8e:	2b01      	cmp	r3, #1
 8018f90:	d103      	bne.n	8018f9a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8018f92:	6878      	ldr	r0, [r7, #4]
 8018f94:	f7fd fdd4 	bl	8016b40 <vPortFree>
	}
 8018f98:	e00f      	b.n	8018fba <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8018f9a:	687b      	ldr	r3, [r7, #4]
 8018f9c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8018fa0:	2b02      	cmp	r3, #2
 8018fa2:	d00a      	beq.n	8018fba <prvDeleteTCB+0x56>
	__asm volatile
 8018fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018fa8:	f383 8811 	msr	BASEPRI, r3
 8018fac:	f3bf 8f6f 	isb	sy
 8018fb0:	f3bf 8f4f 	dsb	sy
 8018fb4:	60fb      	str	r3, [r7, #12]
}
 8018fb6:	bf00      	nop
 8018fb8:	e7fe      	b.n	8018fb8 <prvDeleteTCB+0x54>
	}
 8018fba:	bf00      	nop
 8018fbc:	3710      	adds	r7, #16
 8018fbe:	46bd      	mov	sp, r7
 8018fc0:	bd80      	pop	{r7, pc}
	...

08018fc4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8018fc4:	b480      	push	{r7}
 8018fc6:	b083      	sub	sp, #12
 8018fc8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018fca:	4b0c      	ldr	r3, [pc, #48]	; (8018ffc <prvResetNextTaskUnblockTime+0x38>)
 8018fcc:	681b      	ldr	r3, [r3, #0]
 8018fce:	681b      	ldr	r3, [r3, #0]
 8018fd0:	2b00      	cmp	r3, #0
 8018fd2:	d104      	bne.n	8018fde <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8018fd4:	4b0a      	ldr	r3, [pc, #40]	; (8019000 <prvResetNextTaskUnblockTime+0x3c>)
 8018fd6:	f04f 32ff 	mov.w	r2, #4294967295
 8018fda:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8018fdc:	e008      	b.n	8018ff0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018fde:	4b07      	ldr	r3, [pc, #28]	; (8018ffc <prvResetNextTaskUnblockTime+0x38>)
 8018fe0:	681b      	ldr	r3, [r3, #0]
 8018fe2:	68db      	ldr	r3, [r3, #12]
 8018fe4:	68db      	ldr	r3, [r3, #12]
 8018fe6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8018fe8:	687b      	ldr	r3, [r7, #4]
 8018fea:	685b      	ldr	r3, [r3, #4]
 8018fec:	4a04      	ldr	r2, [pc, #16]	; (8019000 <prvResetNextTaskUnblockTime+0x3c>)
 8018fee:	6013      	str	r3, [r2, #0]
}
 8018ff0:	bf00      	nop
 8018ff2:	370c      	adds	r7, #12
 8018ff4:	46bd      	mov	sp, r7
 8018ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ffa:	4770      	bx	lr
 8018ffc:	24006e40 	.word	0x24006e40
 8019000:	24006ea8 	.word	0x24006ea8

08019004 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8019004:	b480      	push	{r7}
 8019006:	b083      	sub	sp, #12
 8019008:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801900a:	4b0b      	ldr	r3, [pc, #44]	; (8019038 <xTaskGetSchedulerState+0x34>)
 801900c:	681b      	ldr	r3, [r3, #0]
 801900e:	2b00      	cmp	r3, #0
 8019010:	d102      	bne.n	8019018 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8019012:	2301      	movs	r3, #1
 8019014:	607b      	str	r3, [r7, #4]
 8019016:	e008      	b.n	801902a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8019018:	4b08      	ldr	r3, [pc, #32]	; (801903c <xTaskGetSchedulerState+0x38>)
 801901a:	681b      	ldr	r3, [r3, #0]
 801901c:	2b00      	cmp	r3, #0
 801901e:	d102      	bne.n	8019026 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8019020:	2302      	movs	r3, #2
 8019022:	607b      	str	r3, [r7, #4]
 8019024:	e001      	b.n	801902a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8019026:	2300      	movs	r3, #0
 8019028:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801902a:	687b      	ldr	r3, [r7, #4]
	}
 801902c:	4618      	mov	r0, r3
 801902e:	370c      	adds	r7, #12
 8019030:	46bd      	mov	sp, r7
 8019032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019036:	4770      	bx	lr
 8019038:	24006e94 	.word	0x24006e94
 801903c:	24006eb0 	.word	0x24006eb0

08019040 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8019040:	b580      	push	{r7, lr}
 8019042:	b084      	sub	sp, #16
 8019044:	af00      	add	r7, sp, #0
 8019046:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8019048:	687b      	ldr	r3, [r7, #4]
 801904a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801904c:	2300      	movs	r3, #0
 801904e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8019050:	687b      	ldr	r3, [r7, #4]
 8019052:	2b00      	cmp	r3, #0
 8019054:	d051      	beq.n	80190fa <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8019056:	68bb      	ldr	r3, [r7, #8]
 8019058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801905a:	4b2a      	ldr	r3, [pc, #168]	; (8019104 <xTaskPriorityInherit+0xc4>)
 801905c:	681b      	ldr	r3, [r3, #0]
 801905e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019060:	429a      	cmp	r2, r3
 8019062:	d241      	bcs.n	80190e8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8019064:	68bb      	ldr	r3, [r7, #8]
 8019066:	699b      	ldr	r3, [r3, #24]
 8019068:	2b00      	cmp	r3, #0
 801906a:	db06      	blt.n	801907a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801906c:	4b25      	ldr	r3, [pc, #148]	; (8019104 <xTaskPriorityInherit+0xc4>)
 801906e:	681b      	ldr	r3, [r3, #0]
 8019070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019072:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8019076:	68bb      	ldr	r3, [r7, #8]
 8019078:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801907a:	68bb      	ldr	r3, [r7, #8]
 801907c:	6959      	ldr	r1, [r3, #20]
 801907e:	68bb      	ldr	r3, [r7, #8]
 8019080:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019082:	4613      	mov	r3, r2
 8019084:	009b      	lsls	r3, r3, #2
 8019086:	4413      	add	r3, r2
 8019088:	009b      	lsls	r3, r3, #2
 801908a:	4a1f      	ldr	r2, [pc, #124]	; (8019108 <xTaskPriorityInherit+0xc8>)
 801908c:	4413      	add	r3, r2
 801908e:	4299      	cmp	r1, r3
 8019090:	d122      	bne.n	80190d8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8019092:	68bb      	ldr	r3, [r7, #8]
 8019094:	3304      	adds	r3, #4
 8019096:	4618      	mov	r0, r3
 8019098:	f7fd fefa 	bl	8016e90 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801909c:	4b19      	ldr	r3, [pc, #100]	; (8019104 <xTaskPriorityInherit+0xc4>)
 801909e:	681b      	ldr	r3, [r3, #0]
 80190a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80190a2:	68bb      	ldr	r3, [r7, #8]
 80190a4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80190a6:	68bb      	ldr	r3, [r7, #8]
 80190a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80190aa:	4b18      	ldr	r3, [pc, #96]	; (801910c <xTaskPriorityInherit+0xcc>)
 80190ac:	681b      	ldr	r3, [r3, #0]
 80190ae:	429a      	cmp	r2, r3
 80190b0:	d903      	bls.n	80190ba <xTaskPriorityInherit+0x7a>
 80190b2:	68bb      	ldr	r3, [r7, #8]
 80190b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80190b6:	4a15      	ldr	r2, [pc, #84]	; (801910c <xTaskPriorityInherit+0xcc>)
 80190b8:	6013      	str	r3, [r2, #0]
 80190ba:	68bb      	ldr	r3, [r7, #8]
 80190bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80190be:	4613      	mov	r3, r2
 80190c0:	009b      	lsls	r3, r3, #2
 80190c2:	4413      	add	r3, r2
 80190c4:	009b      	lsls	r3, r3, #2
 80190c6:	4a10      	ldr	r2, [pc, #64]	; (8019108 <xTaskPriorityInherit+0xc8>)
 80190c8:	441a      	add	r2, r3
 80190ca:	68bb      	ldr	r3, [r7, #8]
 80190cc:	3304      	adds	r3, #4
 80190ce:	4619      	mov	r1, r3
 80190d0:	4610      	mov	r0, r2
 80190d2:	f7fd fe80 	bl	8016dd6 <vListInsertEnd>
 80190d6:	e004      	b.n	80190e2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80190d8:	4b0a      	ldr	r3, [pc, #40]	; (8019104 <xTaskPriorityInherit+0xc4>)
 80190da:	681b      	ldr	r3, [r3, #0]
 80190dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80190de:	68bb      	ldr	r3, [r7, #8]
 80190e0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80190e2:	2301      	movs	r3, #1
 80190e4:	60fb      	str	r3, [r7, #12]
 80190e6:	e008      	b.n	80190fa <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80190e8:	68bb      	ldr	r3, [r7, #8]
 80190ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80190ec:	4b05      	ldr	r3, [pc, #20]	; (8019104 <xTaskPriorityInherit+0xc4>)
 80190ee:	681b      	ldr	r3, [r3, #0]
 80190f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80190f2:	429a      	cmp	r2, r3
 80190f4:	d201      	bcs.n	80190fa <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80190f6:	2301      	movs	r3, #1
 80190f8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80190fa:	68fb      	ldr	r3, [r7, #12]
	}
 80190fc:	4618      	mov	r0, r3
 80190fe:	3710      	adds	r7, #16
 8019100:	46bd      	mov	sp, r7
 8019102:	bd80      	pop	{r7, pc}
 8019104:	240069b4 	.word	0x240069b4
 8019108:	240069b8 	.word	0x240069b8
 801910c:	24006e90 	.word	0x24006e90

08019110 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8019110:	b580      	push	{r7, lr}
 8019112:	b086      	sub	sp, #24
 8019114:	af00      	add	r7, sp, #0
 8019116:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8019118:	687b      	ldr	r3, [r7, #4]
 801911a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801911c:	2300      	movs	r3, #0
 801911e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8019120:	687b      	ldr	r3, [r7, #4]
 8019122:	2b00      	cmp	r3, #0
 8019124:	d056      	beq.n	80191d4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8019126:	4b2e      	ldr	r3, [pc, #184]	; (80191e0 <xTaskPriorityDisinherit+0xd0>)
 8019128:	681b      	ldr	r3, [r3, #0]
 801912a:	693a      	ldr	r2, [r7, #16]
 801912c:	429a      	cmp	r2, r3
 801912e:	d00a      	beq.n	8019146 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8019130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019134:	f383 8811 	msr	BASEPRI, r3
 8019138:	f3bf 8f6f 	isb	sy
 801913c:	f3bf 8f4f 	dsb	sy
 8019140:	60fb      	str	r3, [r7, #12]
}
 8019142:	bf00      	nop
 8019144:	e7fe      	b.n	8019144 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8019146:	693b      	ldr	r3, [r7, #16]
 8019148:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801914a:	2b00      	cmp	r3, #0
 801914c:	d10a      	bne.n	8019164 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801914e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019152:	f383 8811 	msr	BASEPRI, r3
 8019156:	f3bf 8f6f 	isb	sy
 801915a:	f3bf 8f4f 	dsb	sy
 801915e:	60bb      	str	r3, [r7, #8]
}
 8019160:	bf00      	nop
 8019162:	e7fe      	b.n	8019162 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8019164:	693b      	ldr	r3, [r7, #16]
 8019166:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019168:	1e5a      	subs	r2, r3, #1
 801916a:	693b      	ldr	r3, [r7, #16]
 801916c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801916e:	693b      	ldr	r3, [r7, #16]
 8019170:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019172:	693b      	ldr	r3, [r7, #16]
 8019174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019176:	429a      	cmp	r2, r3
 8019178:	d02c      	beq.n	80191d4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801917a:	693b      	ldr	r3, [r7, #16]
 801917c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801917e:	2b00      	cmp	r3, #0
 8019180:	d128      	bne.n	80191d4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8019182:	693b      	ldr	r3, [r7, #16]
 8019184:	3304      	adds	r3, #4
 8019186:	4618      	mov	r0, r3
 8019188:	f7fd fe82 	bl	8016e90 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801918c:	693b      	ldr	r3, [r7, #16]
 801918e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8019190:	693b      	ldr	r3, [r7, #16]
 8019192:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019194:	693b      	ldr	r3, [r7, #16]
 8019196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019198:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801919c:	693b      	ldr	r3, [r7, #16]
 801919e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80191a0:	693b      	ldr	r3, [r7, #16]
 80191a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80191a4:	4b0f      	ldr	r3, [pc, #60]	; (80191e4 <xTaskPriorityDisinherit+0xd4>)
 80191a6:	681b      	ldr	r3, [r3, #0]
 80191a8:	429a      	cmp	r2, r3
 80191aa:	d903      	bls.n	80191b4 <xTaskPriorityDisinherit+0xa4>
 80191ac:	693b      	ldr	r3, [r7, #16]
 80191ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80191b0:	4a0c      	ldr	r2, [pc, #48]	; (80191e4 <xTaskPriorityDisinherit+0xd4>)
 80191b2:	6013      	str	r3, [r2, #0]
 80191b4:	693b      	ldr	r3, [r7, #16]
 80191b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80191b8:	4613      	mov	r3, r2
 80191ba:	009b      	lsls	r3, r3, #2
 80191bc:	4413      	add	r3, r2
 80191be:	009b      	lsls	r3, r3, #2
 80191c0:	4a09      	ldr	r2, [pc, #36]	; (80191e8 <xTaskPriorityDisinherit+0xd8>)
 80191c2:	441a      	add	r2, r3
 80191c4:	693b      	ldr	r3, [r7, #16]
 80191c6:	3304      	adds	r3, #4
 80191c8:	4619      	mov	r1, r3
 80191ca:	4610      	mov	r0, r2
 80191cc:	f7fd fe03 	bl	8016dd6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80191d0:	2301      	movs	r3, #1
 80191d2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80191d4:	697b      	ldr	r3, [r7, #20]
	}
 80191d6:	4618      	mov	r0, r3
 80191d8:	3718      	adds	r7, #24
 80191da:	46bd      	mov	sp, r7
 80191dc:	bd80      	pop	{r7, pc}
 80191de:	bf00      	nop
 80191e0:	240069b4 	.word	0x240069b4
 80191e4:	24006e90 	.word	0x24006e90
 80191e8:	240069b8 	.word	0x240069b8

080191ec <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80191ec:	b580      	push	{r7, lr}
 80191ee:	b088      	sub	sp, #32
 80191f0:	af00      	add	r7, sp, #0
 80191f2:	6078      	str	r0, [r7, #4]
 80191f4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80191f6:	687b      	ldr	r3, [r7, #4]
 80191f8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80191fa:	2301      	movs	r3, #1
 80191fc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80191fe:	687b      	ldr	r3, [r7, #4]
 8019200:	2b00      	cmp	r3, #0
 8019202:	d06a      	beq.n	80192da <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8019204:	69bb      	ldr	r3, [r7, #24]
 8019206:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019208:	2b00      	cmp	r3, #0
 801920a:	d10a      	bne.n	8019222 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 801920c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019210:	f383 8811 	msr	BASEPRI, r3
 8019214:	f3bf 8f6f 	isb	sy
 8019218:	f3bf 8f4f 	dsb	sy
 801921c:	60fb      	str	r3, [r7, #12]
}
 801921e:	bf00      	nop
 8019220:	e7fe      	b.n	8019220 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8019222:	69bb      	ldr	r3, [r7, #24]
 8019224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019226:	683a      	ldr	r2, [r7, #0]
 8019228:	429a      	cmp	r2, r3
 801922a:	d902      	bls.n	8019232 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801922c:	683b      	ldr	r3, [r7, #0]
 801922e:	61fb      	str	r3, [r7, #28]
 8019230:	e002      	b.n	8019238 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8019232:	69bb      	ldr	r3, [r7, #24]
 8019234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019236:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8019238:	69bb      	ldr	r3, [r7, #24]
 801923a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801923c:	69fa      	ldr	r2, [r7, #28]
 801923e:	429a      	cmp	r2, r3
 8019240:	d04b      	beq.n	80192da <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8019242:	69bb      	ldr	r3, [r7, #24]
 8019244:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019246:	697a      	ldr	r2, [r7, #20]
 8019248:	429a      	cmp	r2, r3
 801924a:	d146      	bne.n	80192da <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801924c:	4b25      	ldr	r3, [pc, #148]	; (80192e4 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 801924e:	681b      	ldr	r3, [r3, #0]
 8019250:	69ba      	ldr	r2, [r7, #24]
 8019252:	429a      	cmp	r2, r3
 8019254:	d10a      	bne.n	801926c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8019256:	f04f 0350 	mov.w	r3, #80	; 0x50
 801925a:	f383 8811 	msr	BASEPRI, r3
 801925e:	f3bf 8f6f 	isb	sy
 8019262:	f3bf 8f4f 	dsb	sy
 8019266:	60bb      	str	r3, [r7, #8]
}
 8019268:	bf00      	nop
 801926a:	e7fe      	b.n	801926a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801926c:	69bb      	ldr	r3, [r7, #24]
 801926e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019270:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8019272:	69bb      	ldr	r3, [r7, #24]
 8019274:	69fa      	ldr	r2, [r7, #28]
 8019276:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8019278:	69bb      	ldr	r3, [r7, #24]
 801927a:	699b      	ldr	r3, [r3, #24]
 801927c:	2b00      	cmp	r3, #0
 801927e:	db04      	blt.n	801928a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019280:	69fb      	ldr	r3, [r7, #28]
 8019282:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8019286:	69bb      	ldr	r3, [r7, #24]
 8019288:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801928a:	69bb      	ldr	r3, [r7, #24]
 801928c:	6959      	ldr	r1, [r3, #20]
 801928e:	693a      	ldr	r2, [r7, #16]
 8019290:	4613      	mov	r3, r2
 8019292:	009b      	lsls	r3, r3, #2
 8019294:	4413      	add	r3, r2
 8019296:	009b      	lsls	r3, r3, #2
 8019298:	4a13      	ldr	r2, [pc, #76]	; (80192e8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801929a:	4413      	add	r3, r2
 801929c:	4299      	cmp	r1, r3
 801929e:	d11c      	bne.n	80192da <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80192a0:	69bb      	ldr	r3, [r7, #24]
 80192a2:	3304      	adds	r3, #4
 80192a4:	4618      	mov	r0, r3
 80192a6:	f7fd fdf3 	bl	8016e90 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80192aa:	69bb      	ldr	r3, [r7, #24]
 80192ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80192ae:	4b0f      	ldr	r3, [pc, #60]	; (80192ec <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80192b0:	681b      	ldr	r3, [r3, #0]
 80192b2:	429a      	cmp	r2, r3
 80192b4:	d903      	bls.n	80192be <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80192b6:	69bb      	ldr	r3, [r7, #24]
 80192b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80192ba:	4a0c      	ldr	r2, [pc, #48]	; (80192ec <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80192bc:	6013      	str	r3, [r2, #0]
 80192be:	69bb      	ldr	r3, [r7, #24]
 80192c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80192c2:	4613      	mov	r3, r2
 80192c4:	009b      	lsls	r3, r3, #2
 80192c6:	4413      	add	r3, r2
 80192c8:	009b      	lsls	r3, r3, #2
 80192ca:	4a07      	ldr	r2, [pc, #28]	; (80192e8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80192cc:	441a      	add	r2, r3
 80192ce:	69bb      	ldr	r3, [r7, #24]
 80192d0:	3304      	adds	r3, #4
 80192d2:	4619      	mov	r1, r3
 80192d4:	4610      	mov	r0, r2
 80192d6:	f7fd fd7e 	bl	8016dd6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80192da:	bf00      	nop
 80192dc:	3720      	adds	r7, #32
 80192de:	46bd      	mov	sp, r7
 80192e0:	bd80      	pop	{r7, pc}
 80192e2:	bf00      	nop
 80192e4:	240069b4 	.word	0x240069b4
 80192e8:	240069b8 	.word	0x240069b8
 80192ec:	24006e90 	.word	0x24006e90

080192f0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80192f0:	b480      	push	{r7}
 80192f2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80192f4:	4b07      	ldr	r3, [pc, #28]	; (8019314 <pvTaskIncrementMutexHeldCount+0x24>)
 80192f6:	681b      	ldr	r3, [r3, #0]
 80192f8:	2b00      	cmp	r3, #0
 80192fa:	d004      	beq.n	8019306 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80192fc:	4b05      	ldr	r3, [pc, #20]	; (8019314 <pvTaskIncrementMutexHeldCount+0x24>)
 80192fe:	681b      	ldr	r3, [r3, #0]
 8019300:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8019302:	3201      	adds	r2, #1
 8019304:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8019306:	4b03      	ldr	r3, [pc, #12]	; (8019314 <pvTaskIncrementMutexHeldCount+0x24>)
 8019308:	681b      	ldr	r3, [r3, #0]
	}
 801930a:	4618      	mov	r0, r3
 801930c:	46bd      	mov	sp, r7
 801930e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019312:	4770      	bx	lr
 8019314:	240069b4 	.word	0x240069b4

08019318 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8019318:	b580      	push	{r7, lr}
 801931a:	b084      	sub	sp, #16
 801931c:	af00      	add	r7, sp, #0
 801931e:	6078      	str	r0, [r7, #4]
 8019320:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8019322:	4b21      	ldr	r3, [pc, #132]	; (80193a8 <prvAddCurrentTaskToDelayedList+0x90>)
 8019324:	681b      	ldr	r3, [r3, #0]
 8019326:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8019328:	4b20      	ldr	r3, [pc, #128]	; (80193ac <prvAddCurrentTaskToDelayedList+0x94>)
 801932a:	681b      	ldr	r3, [r3, #0]
 801932c:	3304      	adds	r3, #4
 801932e:	4618      	mov	r0, r3
 8019330:	f7fd fdae 	bl	8016e90 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8019334:	687b      	ldr	r3, [r7, #4]
 8019336:	f1b3 3fff 	cmp.w	r3, #4294967295
 801933a:	d10a      	bne.n	8019352 <prvAddCurrentTaskToDelayedList+0x3a>
 801933c:	683b      	ldr	r3, [r7, #0]
 801933e:	2b00      	cmp	r3, #0
 8019340:	d007      	beq.n	8019352 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8019342:	4b1a      	ldr	r3, [pc, #104]	; (80193ac <prvAddCurrentTaskToDelayedList+0x94>)
 8019344:	681b      	ldr	r3, [r3, #0]
 8019346:	3304      	adds	r3, #4
 8019348:	4619      	mov	r1, r3
 801934a:	4819      	ldr	r0, [pc, #100]	; (80193b0 <prvAddCurrentTaskToDelayedList+0x98>)
 801934c:	f7fd fd43 	bl	8016dd6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8019350:	e026      	b.n	80193a0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8019352:	68fa      	ldr	r2, [r7, #12]
 8019354:	687b      	ldr	r3, [r7, #4]
 8019356:	4413      	add	r3, r2
 8019358:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801935a:	4b14      	ldr	r3, [pc, #80]	; (80193ac <prvAddCurrentTaskToDelayedList+0x94>)
 801935c:	681b      	ldr	r3, [r3, #0]
 801935e:	68ba      	ldr	r2, [r7, #8]
 8019360:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8019362:	68ba      	ldr	r2, [r7, #8]
 8019364:	68fb      	ldr	r3, [r7, #12]
 8019366:	429a      	cmp	r2, r3
 8019368:	d209      	bcs.n	801937e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801936a:	4b12      	ldr	r3, [pc, #72]	; (80193b4 <prvAddCurrentTaskToDelayedList+0x9c>)
 801936c:	681a      	ldr	r2, [r3, #0]
 801936e:	4b0f      	ldr	r3, [pc, #60]	; (80193ac <prvAddCurrentTaskToDelayedList+0x94>)
 8019370:	681b      	ldr	r3, [r3, #0]
 8019372:	3304      	adds	r3, #4
 8019374:	4619      	mov	r1, r3
 8019376:	4610      	mov	r0, r2
 8019378:	f7fd fd51 	bl	8016e1e <vListInsert>
}
 801937c:	e010      	b.n	80193a0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801937e:	4b0e      	ldr	r3, [pc, #56]	; (80193b8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8019380:	681a      	ldr	r2, [r3, #0]
 8019382:	4b0a      	ldr	r3, [pc, #40]	; (80193ac <prvAddCurrentTaskToDelayedList+0x94>)
 8019384:	681b      	ldr	r3, [r3, #0]
 8019386:	3304      	adds	r3, #4
 8019388:	4619      	mov	r1, r3
 801938a:	4610      	mov	r0, r2
 801938c:	f7fd fd47 	bl	8016e1e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8019390:	4b0a      	ldr	r3, [pc, #40]	; (80193bc <prvAddCurrentTaskToDelayedList+0xa4>)
 8019392:	681b      	ldr	r3, [r3, #0]
 8019394:	68ba      	ldr	r2, [r7, #8]
 8019396:	429a      	cmp	r2, r3
 8019398:	d202      	bcs.n	80193a0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801939a:	4a08      	ldr	r2, [pc, #32]	; (80193bc <prvAddCurrentTaskToDelayedList+0xa4>)
 801939c:	68bb      	ldr	r3, [r7, #8]
 801939e:	6013      	str	r3, [r2, #0]
}
 80193a0:	bf00      	nop
 80193a2:	3710      	adds	r7, #16
 80193a4:	46bd      	mov	sp, r7
 80193a6:	bd80      	pop	{r7, pc}
 80193a8:	24006e8c 	.word	0x24006e8c
 80193ac:	240069b4 	.word	0x240069b4
 80193b0:	24006e74 	.word	0x24006e74
 80193b4:	24006e44 	.word	0x24006e44
 80193b8:	24006e40 	.word	0x24006e40
 80193bc:	24006ea8 	.word	0x24006ea8

080193c0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80193c0:	b580      	push	{r7, lr}
 80193c2:	b08a      	sub	sp, #40	; 0x28
 80193c4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80193c6:	2300      	movs	r3, #0
 80193c8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80193ca:	f000 fb07 	bl	80199dc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80193ce:	4b1c      	ldr	r3, [pc, #112]	; (8019440 <xTimerCreateTimerTask+0x80>)
 80193d0:	681b      	ldr	r3, [r3, #0]
 80193d2:	2b00      	cmp	r3, #0
 80193d4:	d021      	beq.n	801941a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80193d6:	2300      	movs	r3, #0
 80193d8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80193da:	2300      	movs	r3, #0
 80193dc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80193de:	1d3a      	adds	r2, r7, #4
 80193e0:	f107 0108 	add.w	r1, r7, #8
 80193e4:	f107 030c 	add.w	r3, r7, #12
 80193e8:	4618      	mov	r0, r3
 80193ea:	f7fd fac3 	bl	8016974 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80193ee:	6879      	ldr	r1, [r7, #4]
 80193f0:	68bb      	ldr	r3, [r7, #8]
 80193f2:	68fa      	ldr	r2, [r7, #12]
 80193f4:	9202      	str	r2, [sp, #8]
 80193f6:	9301      	str	r3, [sp, #4]
 80193f8:	2302      	movs	r3, #2
 80193fa:	9300      	str	r3, [sp, #0]
 80193fc:	2300      	movs	r3, #0
 80193fe:	460a      	mov	r2, r1
 8019400:	4910      	ldr	r1, [pc, #64]	; (8019444 <xTimerCreateTimerTask+0x84>)
 8019402:	4811      	ldr	r0, [pc, #68]	; (8019448 <xTimerCreateTimerTask+0x88>)
 8019404:	f7fe ffce 	bl	80183a4 <xTaskCreateStatic>
 8019408:	4603      	mov	r3, r0
 801940a:	4a10      	ldr	r2, [pc, #64]	; (801944c <xTimerCreateTimerTask+0x8c>)
 801940c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801940e:	4b0f      	ldr	r3, [pc, #60]	; (801944c <xTimerCreateTimerTask+0x8c>)
 8019410:	681b      	ldr	r3, [r3, #0]
 8019412:	2b00      	cmp	r3, #0
 8019414:	d001      	beq.n	801941a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8019416:	2301      	movs	r3, #1
 8019418:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801941a:	697b      	ldr	r3, [r7, #20]
 801941c:	2b00      	cmp	r3, #0
 801941e:	d10a      	bne.n	8019436 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8019420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019424:	f383 8811 	msr	BASEPRI, r3
 8019428:	f3bf 8f6f 	isb	sy
 801942c:	f3bf 8f4f 	dsb	sy
 8019430:	613b      	str	r3, [r7, #16]
}
 8019432:	bf00      	nop
 8019434:	e7fe      	b.n	8019434 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8019436:	697b      	ldr	r3, [r7, #20]
}
 8019438:	4618      	mov	r0, r3
 801943a:	3718      	adds	r7, #24
 801943c:	46bd      	mov	sp, r7
 801943e:	bd80      	pop	{r7, pc}
 8019440:	24006ee4 	.word	0x24006ee4
 8019444:	0802b0b0 	.word	0x0802b0b0
 8019448:	08019585 	.word	0x08019585
 801944c:	24006ee8 	.word	0x24006ee8

08019450 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8019450:	b580      	push	{r7, lr}
 8019452:	b08a      	sub	sp, #40	; 0x28
 8019454:	af00      	add	r7, sp, #0
 8019456:	60f8      	str	r0, [r7, #12]
 8019458:	60b9      	str	r1, [r7, #8]
 801945a:	607a      	str	r2, [r7, #4]
 801945c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801945e:	2300      	movs	r3, #0
 8019460:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8019462:	68fb      	ldr	r3, [r7, #12]
 8019464:	2b00      	cmp	r3, #0
 8019466:	d10a      	bne.n	801947e <xTimerGenericCommand+0x2e>
	__asm volatile
 8019468:	f04f 0350 	mov.w	r3, #80	; 0x50
 801946c:	f383 8811 	msr	BASEPRI, r3
 8019470:	f3bf 8f6f 	isb	sy
 8019474:	f3bf 8f4f 	dsb	sy
 8019478:	623b      	str	r3, [r7, #32]
}
 801947a:	bf00      	nop
 801947c:	e7fe      	b.n	801947c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801947e:	4b1a      	ldr	r3, [pc, #104]	; (80194e8 <xTimerGenericCommand+0x98>)
 8019480:	681b      	ldr	r3, [r3, #0]
 8019482:	2b00      	cmp	r3, #0
 8019484:	d02a      	beq.n	80194dc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8019486:	68bb      	ldr	r3, [r7, #8]
 8019488:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801948a:	687b      	ldr	r3, [r7, #4]
 801948c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801948e:	68fb      	ldr	r3, [r7, #12]
 8019490:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8019492:	68bb      	ldr	r3, [r7, #8]
 8019494:	2b05      	cmp	r3, #5
 8019496:	dc18      	bgt.n	80194ca <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8019498:	f7ff fdb4 	bl	8019004 <xTaskGetSchedulerState>
 801949c:	4603      	mov	r3, r0
 801949e:	2b02      	cmp	r3, #2
 80194a0:	d109      	bne.n	80194b6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80194a2:	4b11      	ldr	r3, [pc, #68]	; (80194e8 <xTimerGenericCommand+0x98>)
 80194a4:	6818      	ldr	r0, [r3, #0]
 80194a6:	f107 0110 	add.w	r1, r7, #16
 80194aa:	2300      	movs	r3, #0
 80194ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80194ae:	f7fe f913 	bl	80176d8 <xQueueGenericSend>
 80194b2:	6278      	str	r0, [r7, #36]	; 0x24
 80194b4:	e012      	b.n	80194dc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80194b6:	4b0c      	ldr	r3, [pc, #48]	; (80194e8 <xTimerGenericCommand+0x98>)
 80194b8:	6818      	ldr	r0, [r3, #0]
 80194ba:	f107 0110 	add.w	r1, r7, #16
 80194be:	2300      	movs	r3, #0
 80194c0:	2200      	movs	r2, #0
 80194c2:	f7fe f909 	bl	80176d8 <xQueueGenericSend>
 80194c6:	6278      	str	r0, [r7, #36]	; 0x24
 80194c8:	e008      	b.n	80194dc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80194ca:	4b07      	ldr	r3, [pc, #28]	; (80194e8 <xTimerGenericCommand+0x98>)
 80194cc:	6818      	ldr	r0, [r3, #0]
 80194ce:	f107 0110 	add.w	r1, r7, #16
 80194d2:	2300      	movs	r3, #0
 80194d4:	683a      	ldr	r2, [r7, #0]
 80194d6:	f7fe f9fd 	bl	80178d4 <xQueueGenericSendFromISR>
 80194da:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80194dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80194de:	4618      	mov	r0, r3
 80194e0:	3728      	adds	r7, #40	; 0x28
 80194e2:	46bd      	mov	sp, r7
 80194e4:	bd80      	pop	{r7, pc}
 80194e6:	bf00      	nop
 80194e8:	24006ee4 	.word	0x24006ee4

080194ec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80194ec:	b580      	push	{r7, lr}
 80194ee:	b088      	sub	sp, #32
 80194f0:	af02      	add	r7, sp, #8
 80194f2:	6078      	str	r0, [r7, #4]
 80194f4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80194f6:	4b22      	ldr	r3, [pc, #136]	; (8019580 <prvProcessExpiredTimer+0x94>)
 80194f8:	681b      	ldr	r3, [r3, #0]
 80194fa:	68db      	ldr	r3, [r3, #12]
 80194fc:	68db      	ldr	r3, [r3, #12]
 80194fe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8019500:	697b      	ldr	r3, [r7, #20]
 8019502:	3304      	adds	r3, #4
 8019504:	4618      	mov	r0, r3
 8019506:	f7fd fcc3 	bl	8016e90 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801950a:	697b      	ldr	r3, [r7, #20]
 801950c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019510:	f003 0304 	and.w	r3, r3, #4
 8019514:	2b00      	cmp	r3, #0
 8019516:	d022      	beq.n	801955e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8019518:	697b      	ldr	r3, [r7, #20]
 801951a:	699a      	ldr	r2, [r3, #24]
 801951c:	687b      	ldr	r3, [r7, #4]
 801951e:	18d1      	adds	r1, r2, r3
 8019520:	687b      	ldr	r3, [r7, #4]
 8019522:	683a      	ldr	r2, [r7, #0]
 8019524:	6978      	ldr	r0, [r7, #20]
 8019526:	f000 f8d1 	bl	80196cc <prvInsertTimerInActiveList>
 801952a:	4603      	mov	r3, r0
 801952c:	2b00      	cmp	r3, #0
 801952e:	d01f      	beq.n	8019570 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8019530:	2300      	movs	r3, #0
 8019532:	9300      	str	r3, [sp, #0]
 8019534:	2300      	movs	r3, #0
 8019536:	687a      	ldr	r2, [r7, #4]
 8019538:	2100      	movs	r1, #0
 801953a:	6978      	ldr	r0, [r7, #20]
 801953c:	f7ff ff88 	bl	8019450 <xTimerGenericCommand>
 8019540:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8019542:	693b      	ldr	r3, [r7, #16]
 8019544:	2b00      	cmp	r3, #0
 8019546:	d113      	bne.n	8019570 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8019548:	f04f 0350 	mov.w	r3, #80	; 0x50
 801954c:	f383 8811 	msr	BASEPRI, r3
 8019550:	f3bf 8f6f 	isb	sy
 8019554:	f3bf 8f4f 	dsb	sy
 8019558:	60fb      	str	r3, [r7, #12]
}
 801955a:	bf00      	nop
 801955c:	e7fe      	b.n	801955c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801955e:	697b      	ldr	r3, [r7, #20]
 8019560:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019564:	f023 0301 	bic.w	r3, r3, #1
 8019568:	b2da      	uxtb	r2, r3
 801956a:	697b      	ldr	r3, [r7, #20]
 801956c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8019570:	697b      	ldr	r3, [r7, #20]
 8019572:	6a1b      	ldr	r3, [r3, #32]
 8019574:	6978      	ldr	r0, [r7, #20]
 8019576:	4798      	blx	r3
}
 8019578:	bf00      	nop
 801957a:	3718      	adds	r7, #24
 801957c:	46bd      	mov	sp, r7
 801957e:	bd80      	pop	{r7, pc}
 8019580:	24006edc 	.word	0x24006edc

08019584 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8019584:	b580      	push	{r7, lr}
 8019586:	b084      	sub	sp, #16
 8019588:	af00      	add	r7, sp, #0
 801958a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801958c:	f107 0308 	add.w	r3, r7, #8
 8019590:	4618      	mov	r0, r3
 8019592:	f000 f857 	bl	8019644 <prvGetNextExpireTime>
 8019596:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8019598:	68bb      	ldr	r3, [r7, #8]
 801959a:	4619      	mov	r1, r3
 801959c:	68f8      	ldr	r0, [r7, #12]
 801959e:	f000 f803 	bl	80195a8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80195a2:	f000 f8d5 	bl	8019750 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80195a6:	e7f1      	b.n	801958c <prvTimerTask+0x8>

080195a8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80195a8:	b580      	push	{r7, lr}
 80195aa:	b084      	sub	sp, #16
 80195ac:	af00      	add	r7, sp, #0
 80195ae:	6078      	str	r0, [r7, #4]
 80195b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80195b2:	f7ff f933 	bl	801881c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80195b6:	f107 0308 	add.w	r3, r7, #8
 80195ba:	4618      	mov	r0, r3
 80195bc:	f000 f866 	bl	801968c <prvSampleTimeNow>
 80195c0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80195c2:	68bb      	ldr	r3, [r7, #8]
 80195c4:	2b00      	cmp	r3, #0
 80195c6:	d130      	bne.n	801962a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80195c8:	683b      	ldr	r3, [r7, #0]
 80195ca:	2b00      	cmp	r3, #0
 80195cc:	d10a      	bne.n	80195e4 <prvProcessTimerOrBlockTask+0x3c>
 80195ce:	687a      	ldr	r2, [r7, #4]
 80195d0:	68fb      	ldr	r3, [r7, #12]
 80195d2:	429a      	cmp	r2, r3
 80195d4:	d806      	bhi.n	80195e4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80195d6:	f7ff f92f 	bl	8018838 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80195da:	68f9      	ldr	r1, [r7, #12]
 80195dc:	6878      	ldr	r0, [r7, #4]
 80195de:	f7ff ff85 	bl	80194ec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80195e2:	e024      	b.n	801962e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80195e4:	683b      	ldr	r3, [r7, #0]
 80195e6:	2b00      	cmp	r3, #0
 80195e8:	d008      	beq.n	80195fc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80195ea:	4b13      	ldr	r3, [pc, #76]	; (8019638 <prvProcessTimerOrBlockTask+0x90>)
 80195ec:	681b      	ldr	r3, [r3, #0]
 80195ee:	681b      	ldr	r3, [r3, #0]
 80195f0:	2b00      	cmp	r3, #0
 80195f2:	d101      	bne.n	80195f8 <prvProcessTimerOrBlockTask+0x50>
 80195f4:	2301      	movs	r3, #1
 80195f6:	e000      	b.n	80195fa <prvProcessTimerOrBlockTask+0x52>
 80195f8:	2300      	movs	r3, #0
 80195fa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80195fc:	4b0f      	ldr	r3, [pc, #60]	; (801963c <prvProcessTimerOrBlockTask+0x94>)
 80195fe:	6818      	ldr	r0, [r3, #0]
 8019600:	687a      	ldr	r2, [r7, #4]
 8019602:	68fb      	ldr	r3, [r7, #12]
 8019604:	1ad3      	subs	r3, r2, r3
 8019606:	683a      	ldr	r2, [r7, #0]
 8019608:	4619      	mov	r1, r3
 801960a:	f7fe fe97 	bl	801833c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801960e:	f7ff f913 	bl	8018838 <xTaskResumeAll>
 8019612:	4603      	mov	r3, r0
 8019614:	2b00      	cmp	r3, #0
 8019616:	d10a      	bne.n	801962e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8019618:	4b09      	ldr	r3, [pc, #36]	; (8019640 <prvProcessTimerOrBlockTask+0x98>)
 801961a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801961e:	601a      	str	r2, [r3, #0]
 8019620:	f3bf 8f4f 	dsb	sy
 8019624:	f3bf 8f6f 	isb	sy
}
 8019628:	e001      	b.n	801962e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801962a:	f7ff f905 	bl	8018838 <xTaskResumeAll>
}
 801962e:	bf00      	nop
 8019630:	3710      	adds	r7, #16
 8019632:	46bd      	mov	sp, r7
 8019634:	bd80      	pop	{r7, pc}
 8019636:	bf00      	nop
 8019638:	24006ee0 	.word	0x24006ee0
 801963c:	24006ee4 	.word	0x24006ee4
 8019640:	e000ed04 	.word	0xe000ed04

08019644 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8019644:	b480      	push	{r7}
 8019646:	b085      	sub	sp, #20
 8019648:	af00      	add	r7, sp, #0
 801964a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801964c:	4b0e      	ldr	r3, [pc, #56]	; (8019688 <prvGetNextExpireTime+0x44>)
 801964e:	681b      	ldr	r3, [r3, #0]
 8019650:	681b      	ldr	r3, [r3, #0]
 8019652:	2b00      	cmp	r3, #0
 8019654:	d101      	bne.n	801965a <prvGetNextExpireTime+0x16>
 8019656:	2201      	movs	r2, #1
 8019658:	e000      	b.n	801965c <prvGetNextExpireTime+0x18>
 801965a:	2200      	movs	r2, #0
 801965c:	687b      	ldr	r3, [r7, #4]
 801965e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8019660:	687b      	ldr	r3, [r7, #4]
 8019662:	681b      	ldr	r3, [r3, #0]
 8019664:	2b00      	cmp	r3, #0
 8019666:	d105      	bne.n	8019674 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8019668:	4b07      	ldr	r3, [pc, #28]	; (8019688 <prvGetNextExpireTime+0x44>)
 801966a:	681b      	ldr	r3, [r3, #0]
 801966c:	68db      	ldr	r3, [r3, #12]
 801966e:	681b      	ldr	r3, [r3, #0]
 8019670:	60fb      	str	r3, [r7, #12]
 8019672:	e001      	b.n	8019678 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8019674:	2300      	movs	r3, #0
 8019676:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8019678:	68fb      	ldr	r3, [r7, #12]
}
 801967a:	4618      	mov	r0, r3
 801967c:	3714      	adds	r7, #20
 801967e:	46bd      	mov	sp, r7
 8019680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019684:	4770      	bx	lr
 8019686:	bf00      	nop
 8019688:	24006edc 	.word	0x24006edc

0801968c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801968c:	b580      	push	{r7, lr}
 801968e:	b084      	sub	sp, #16
 8019690:	af00      	add	r7, sp, #0
 8019692:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8019694:	f7ff f96e 	bl	8018974 <xTaskGetTickCount>
 8019698:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801969a:	4b0b      	ldr	r3, [pc, #44]	; (80196c8 <prvSampleTimeNow+0x3c>)
 801969c:	681b      	ldr	r3, [r3, #0]
 801969e:	68fa      	ldr	r2, [r7, #12]
 80196a0:	429a      	cmp	r2, r3
 80196a2:	d205      	bcs.n	80196b0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80196a4:	f000 f936 	bl	8019914 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80196a8:	687b      	ldr	r3, [r7, #4]
 80196aa:	2201      	movs	r2, #1
 80196ac:	601a      	str	r2, [r3, #0]
 80196ae:	e002      	b.n	80196b6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80196b0:	687b      	ldr	r3, [r7, #4]
 80196b2:	2200      	movs	r2, #0
 80196b4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80196b6:	4a04      	ldr	r2, [pc, #16]	; (80196c8 <prvSampleTimeNow+0x3c>)
 80196b8:	68fb      	ldr	r3, [r7, #12]
 80196ba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80196bc:	68fb      	ldr	r3, [r7, #12]
}
 80196be:	4618      	mov	r0, r3
 80196c0:	3710      	adds	r7, #16
 80196c2:	46bd      	mov	sp, r7
 80196c4:	bd80      	pop	{r7, pc}
 80196c6:	bf00      	nop
 80196c8:	24006eec 	.word	0x24006eec

080196cc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80196cc:	b580      	push	{r7, lr}
 80196ce:	b086      	sub	sp, #24
 80196d0:	af00      	add	r7, sp, #0
 80196d2:	60f8      	str	r0, [r7, #12]
 80196d4:	60b9      	str	r1, [r7, #8]
 80196d6:	607a      	str	r2, [r7, #4]
 80196d8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80196da:	2300      	movs	r3, #0
 80196dc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80196de:	68fb      	ldr	r3, [r7, #12]
 80196e0:	68ba      	ldr	r2, [r7, #8]
 80196e2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80196e4:	68fb      	ldr	r3, [r7, #12]
 80196e6:	68fa      	ldr	r2, [r7, #12]
 80196e8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80196ea:	68ba      	ldr	r2, [r7, #8]
 80196ec:	687b      	ldr	r3, [r7, #4]
 80196ee:	429a      	cmp	r2, r3
 80196f0:	d812      	bhi.n	8019718 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80196f2:	687a      	ldr	r2, [r7, #4]
 80196f4:	683b      	ldr	r3, [r7, #0]
 80196f6:	1ad2      	subs	r2, r2, r3
 80196f8:	68fb      	ldr	r3, [r7, #12]
 80196fa:	699b      	ldr	r3, [r3, #24]
 80196fc:	429a      	cmp	r2, r3
 80196fe:	d302      	bcc.n	8019706 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8019700:	2301      	movs	r3, #1
 8019702:	617b      	str	r3, [r7, #20]
 8019704:	e01b      	b.n	801973e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8019706:	4b10      	ldr	r3, [pc, #64]	; (8019748 <prvInsertTimerInActiveList+0x7c>)
 8019708:	681a      	ldr	r2, [r3, #0]
 801970a:	68fb      	ldr	r3, [r7, #12]
 801970c:	3304      	adds	r3, #4
 801970e:	4619      	mov	r1, r3
 8019710:	4610      	mov	r0, r2
 8019712:	f7fd fb84 	bl	8016e1e <vListInsert>
 8019716:	e012      	b.n	801973e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8019718:	687a      	ldr	r2, [r7, #4]
 801971a:	683b      	ldr	r3, [r7, #0]
 801971c:	429a      	cmp	r2, r3
 801971e:	d206      	bcs.n	801972e <prvInsertTimerInActiveList+0x62>
 8019720:	68ba      	ldr	r2, [r7, #8]
 8019722:	683b      	ldr	r3, [r7, #0]
 8019724:	429a      	cmp	r2, r3
 8019726:	d302      	bcc.n	801972e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8019728:	2301      	movs	r3, #1
 801972a:	617b      	str	r3, [r7, #20]
 801972c:	e007      	b.n	801973e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801972e:	4b07      	ldr	r3, [pc, #28]	; (801974c <prvInsertTimerInActiveList+0x80>)
 8019730:	681a      	ldr	r2, [r3, #0]
 8019732:	68fb      	ldr	r3, [r7, #12]
 8019734:	3304      	adds	r3, #4
 8019736:	4619      	mov	r1, r3
 8019738:	4610      	mov	r0, r2
 801973a:	f7fd fb70 	bl	8016e1e <vListInsert>
		}
	}

	return xProcessTimerNow;
 801973e:	697b      	ldr	r3, [r7, #20]
}
 8019740:	4618      	mov	r0, r3
 8019742:	3718      	adds	r7, #24
 8019744:	46bd      	mov	sp, r7
 8019746:	bd80      	pop	{r7, pc}
 8019748:	24006ee0 	.word	0x24006ee0
 801974c:	24006edc 	.word	0x24006edc

08019750 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8019750:	b580      	push	{r7, lr}
 8019752:	b08e      	sub	sp, #56	; 0x38
 8019754:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8019756:	e0ca      	b.n	80198ee <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8019758:	687b      	ldr	r3, [r7, #4]
 801975a:	2b00      	cmp	r3, #0
 801975c:	da18      	bge.n	8019790 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801975e:	1d3b      	adds	r3, r7, #4
 8019760:	3304      	adds	r3, #4
 8019762:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8019764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019766:	2b00      	cmp	r3, #0
 8019768:	d10a      	bne.n	8019780 <prvProcessReceivedCommands+0x30>
	__asm volatile
 801976a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801976e:	f383 8811 	msr	BASEPRI, r3
 8019772:	f3bf 8f6f 	isb	sy
 8019776:	f3bf 8f4f 	dsb	sy
 801977a:	61fb      	str	r3, [r7, #28]
}
 801977c:	bf00      	nop
 801977e:	e7fe      	b.n	801977e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8019780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019782:	681b      	ldr	r3, [r3, #0]
 8019784:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019786:	6850      	ldr	r0, [r2, #4]
 8019788:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801978a:	6892      	ldr	r2, [r2, #8]
 801978c:	4611      	mov	r1, r2
 801978e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8019790:	687b      	ldr	r3, [r7, #4]
 8019792:	2b00      	cmp	r3, #0
 8019794:	f2c0 80ab 	blt.w	80198ee <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8019798:	68fb      	ldr	r3, [r7, #12]
 801979a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801979c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801979e:	695b      	ldr	r3, [r3, #20]
 80197a0:	2b00      	cmp	r3, #0
 80197a2:	d004      	beq.n	80197ae <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80197a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80197a6:	3304      	adds	r3, #4
 80197a8:	4618      	mov	r0, r3
 80197aa:	f7fd fb71 	bl	8016e90 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80197ae:	463b      	mov	r3, r7
 80197b0:	4618      	mov	r0, r3
 80197b2:	f7ff ff6b 	bl	801968c <prvSampleTimeNow>
 80197b6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80197b8:	687b      	ldr	r3, [r7, #4]
 80197ba:	2b09      	cmp	r3, #9
 80197bc:	f200 8096 	bhi.w	80198ec <prvProcessReceivedCommands+0x19c>
 80197c0:	a201      	add	r2, pc, #4	; (adr r2, 80197c8 <prvProcessReceivedCommands+0x78>)
 80197c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80197c6:	bf00      	nop
 80197c8:	080197f1 	.word	0x080197f1
 80197cc:	080197f1 	.word	0x080197f1
 80197d0:	080197f1 	.word	0x080197f1
 80197d4:	08019865 	.word	0x08019865
 80197d8:	08019879 	.word	0x08019879
 80197dc:	080198c3 	.word	0x080198c3
 80197e0:	080197f1 	.word	0x080197f1
 80197e4:	080197f1 	.word	0x080197f1
 80197e8:	08019865 	.word	0x08019865
 80197ec:	08019879 	.word	0x08019879
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80197f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80197f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80197f6:	f043 0301 	orr.w	r3, r3, #1
 80197fa:	b2da      	uxtb	r2, r3
 80197fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80197fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8019802:	68ba      	ldr	r2, [r7, #8]
 8019804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019806:	699b      	ldr	r3, [r3, #24]
 8019808:	18d1      	adds	r1, r2, r3
 801980a:	68bb      	ldr	r3, [r7, #8]
 801980c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801980e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019810:	f7ff ff5c 	bl	80196cc <prvInsertTimerInActiveList>
 8019814:	4603      	mov	r3, r0
 8019816:	2b00      	cmp	r3, #0
 8019818:	d069      	beq.n	80198ee <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801981a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801981c:	6a1b      	ldr	r3, [r3, #32]
 801981e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019820:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8019822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019824:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019828:	f003 0304 	and.w	r3, r3, #4
 801982c:	2b00      	cmp	r3, #0
 801982e:	d05e      	beq.n	80198ee <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8019830:	68ba      	ldr	r2, [r7, #8]
 8019832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019834:	699b      	ldr	r3, [r3, #24]
 8019836:	441a      	add	r2, r3
 8019838:	2300      	movs	r3, #0
 801983a:	9300      	str	r3, [sp, #0]
 801983c:	2300      	movs	r3, #0
 801983e:	2100      	movs	r1, #0
 8019840:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019842:	f7ff fe05 	bl	8019450 <xTimerGenericCommand>
 8019846:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8019848:	6a3b      	ldr	r3, [r7, #32]
 801984a:	2b00      	cmp	r3, #0
 801984c:	d14f      	bne.n	80198ee <prvProcessReceivedCommands+0x19e>
	__asm volatile
 801984e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019852:	f383 8811 	msr	BASEPRI, r3
 8019856:	f3bf 8f6f 	isb	sy
 801985a:	f3bf 8f4f 	dsb	sy
 801985e:	61bb      	str	r3, [r7, #24]
}
 8019860:	bf00      	nop
 8019862:	e7fe      	b.n	8019862 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8019864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019866:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801986a:	f023 0301 	bic.w	r3, r3, #1
 801986e:	b2da      	uxtb	r2, r3
 8019870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019872:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8019876:	e03a      	b.n	80198ee <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8019878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801987a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801987e:	f043 0301 	orr.w	r3, r3, #1
 8019882:	b2da      	uxtb	r2, r3
 8019884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019886:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801988a:	68ba      	ldr	r2, [r7, #8]
 801988c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801988e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8019890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019892:	699b      	ldr	r3, [r3, #24]
 8019894:	2b00      	cmp	r3, #0
 8019896:	d10a      	bne.n	80198ae <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8019898:	f04f 0350 	mov.w	r3, #80	; 0x50
 801989c:	f383 8811 	msr	BASEPRI, r3
 80198a0:	f3bf 8f6f 	isb	sy
 80198a4:	f3bf 8f4f 	dsb	sy
 80198a8:	617b      	str	r3, [r7, #20]
}
 80198aa:	bf00      	nop
 80198ac:	e7fe      	b.n	80198ac <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80198ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80198b0:	699a      	ldr	r2, [r3, #24]
 80198b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80198b4:	18d1      	adds	r1, r2, r3
 80198b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80198b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80198ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80198bc:	f7ff ff06 	bl	80196cc <prvInsertTimerInActiveList>
					break;
 80198c0:	e015      	b.n	80198ee <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80198c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80198c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80198c8:	f003 0302 	and.w	r3, r3, #2
 80198cc:	2b00      	cmp	r3, #0
 80198ce:	d103      	bne.n	80198d8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80198d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80198d2:	f7fd f935 	bl	8016b40 <vPortFree>
 80198d6:	e00a      	b.n	80198ee <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80198d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80198da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80198de:	f023 0301 	bic.w	r3, r3, #1
 80198e2:	b2da      	uxtb	r2, r3
 80198e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80198e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80198ea:	e000      	b.n	80198ee <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80198ec:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80198ee:	4b08      	ldr	r3, [pc, #32]	; (8019910 <prvProcessReceivedCommands+0x1c0>)
 80198f0:	681b      	ldr	r3, [r3, #0]
 80198f2:	1d39      	adds	r1, r7, #4
 80198f4:	2200      	movs	r2, #0
 80198f6:	4618      	mov	r0, r3
 80198f8:	f7fe f914 	bl	8017b24 <xQueueReceive>
 80198fc:	4603      	mov	r3, r0
 80198fe:	2b00      	cmp	r3, #0
 8019900:	f47f af2a 	bne.w	8019758 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8019904:	bf00      	nop
 8019906:	bf00      	nop
 8019908:	3730      	adds	r7, #48	; 0x30
 801990a:	46bd      	mov	sp, r7
 801990c:	bd80      	pop	{r7, pc}
 801990e:	bf00      	nop
 8019910:	24006ee4 	.word	0x24006ee4

08019914 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8019914:	b580      	push	{r7, lr}
 8019916:	b088      	sub	sp, #32
 8019918:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801991a:	e048      	b.n	80199ae <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801991c:	4b2d      	ldr	r3, [pc, #180]	; (80199d4 <prvSwitchTimerLists+0xc0>)
 801991e:	681b      	ldr	r3, [r3, #0]
 8019920:	68db      	ldr	r3, [r3, #12]
 8019922:	681b      	ldr	r3, [r3, #0]
 8019924:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019926:	4b2b      	ldr	r3, [pc, #172]	; (80199d4 <prvSwitchTimerLists+0xc0>)
 8019928:	681b      	ldr	r3, [r3, #0]
 801992a:	68db      	ldr	r3, [r3, #12]
 801992c:	68db      	ldr	r3, [r3, #12]
 801992e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8019930:	68fb      	ldr	r3, [r7, #12]
 8019932:	3304      	adds	r3, #4
 8019934:	4618      	mov	r0, r3
 8019936:	f7fd faab 	bl	8016e90 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801993a:	68fb      	ldr	r3, [r7, #12]
 801993c:	6a1b      	ldr	r3, [r3, #32]
 801993e:	68f8      	ldr	r0, [r7, #12]
 8019940:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8019942:	68fb      	ldr	r3, [r7, #12]
 8019944:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019948:	f003 0304 	and.w	r3, r3, #4
 801994c:	2b00      	cmp	r3, #0
 801994e:	d02e      	beq.n	80199ae <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8019950:	68fb      	ldr	r3, [r7, #12]
 8019952:	699b      	ldr	r3, [r3, #24]
 8019954:	693a      	ldr	r2, [r7, #16]
 8019956:	4413      	add	r3, r2
 8019958:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801995a:	68ba      	ldr	r2, [r7, #8]
 801995c:	693b      	ldr	r3, [r7, #16]
 801995e:	429a      	cmp	r2, r3
 8019960:	d90e      	bls.n	8019980 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8019962:	68fb      	ldr	r3, [r7, #12]
 8019964:	68ba      	ldr	r2, [r7, #8]
 8019966:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8019968:	68fb      	ldr	r3, [r7, #12]
 801996a:	68fa      	ldr	r2, [r7, #12]
 801996c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801996e:	4b19      	ldr	r3, [pc, #100]	; (80199d4 <prvSwitchTimerLists+0xc0>)
 8019970:	681a      	ldr	r2, [r3, #0]
 8019972:	68fb      	ldr	r3, [r7, #12]
 8019974:	3304      	adds	r3, #4
 8019976:	4619      	mov	r1, r3
 8019978:	4610      	mov	r0, r2
 801997a:	f7fd fa50 	bl	8016e1e <vListInsert>
 801997e:	e016      	b.n	80199ae <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8019980:	2300      	movs	r3, #0
 8019982:	9300      	str	r3, [sp, #0]
 8019984:	2300      	movs	r3, #0
 8019986:	693a      	ldr	r2, [r7, #16]
 8019988:	2100      	movs	r1, #0
 801998a:	68f8      	ldr	r0, [r7, #12]
 801998c:	f7ff fd60 	bl	8019450 <xTimerGenericCommand>
 8019990:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8019992:	687b      	ldr	r3, [r7, #4]
 8019994:	2b00      	cmp	r3, #0
 8019996:	d10a      	bne.n	80199ae <prvSwitchTimerLists+0x9a>
	__asm volatile
 8019998:	f04f 0350 	mov.w	r3, #80	; 0x50
 801999c:	f383 8811 	msr	BASEPRI, r3
 80199a0:	f3bf 8f6f 	isb	sy
 80199a4:	f3bf 8f4f 	dsb	sy
 80199a8:	603b      	str	r3, [r7, #0]
}
 80199aa:	bf00      	nop
 80199ac:	e7fe      	b.n	80199ac <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80199ae:	4b09      	ldr	r3, [pc, #36]	; (80199d4 <prvSwitchTimerLists+0xc0>)
 80199b0:	681b      	ldr	r3, [r3, #0]
 80199b2:	681b      	ldr	r3, [r3, #0]
 80199b4:	2b00      	cmp	r3, #0
 80199b6:	d1b1      	bne.n	801991c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80199b8:	4b06      	ldr	r3, [pc, #24]	; (80199d4 <prvSwitchTimerLists+0xc0>)
 80199ba:	681b      	ldr	r3, [r3, #0]
 80199bc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80199be:	4b06      	ldr	r3, [pc, #24]	; (80199d8 <prvSwitchTimerLists+0xc4>)
 80199c0:	681b      	ldr	r3, [r3, #0]
 80199c2:	4a04      	ldr	r2, [pc, #16]	; (80199d4 <prvSwitchTimerLists+0xc0>)
 80199c4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80199c6:	4a04      	ldr	r2, [pc, #16]	; (80199d8 <prvSwitchTimerLists+0xc4>)
 80199c8:	697b      	ldr	r3, [r7, #20]
 80199ca:	6013      	str	r3, [r2, #0]
}
 80199cc:	bf00      	nop
 80199ce:	3718      	adds	r7, #24
 80199d0:	46bd      	mov	sp, r7
 80199d2:	bd80      	pop	{r7, pc}
 80199d4:	24006edc 	.word	0x24006edc
 80199d8:	24006ee0 	.word	0x24006ee0

080199dc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80199dc:	b580      	push	{r7, lr}
 80199de:	b082      	sub	sp, #8
 80199e0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80199e2:	f7fd fbaf 	bl	8017144 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80199e6:	4b15      	ldr	r3, [pc, #84]	; (8019a3c <prvCheckForValidListAndQueue+0x60>)
 80199e8:	681b      	ldr	r3, [r3, #0]
 80199ea:	2b00      	cmp	r3, #0
 80199ec:	d120      	bne.n	8019a30 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80199ee:	4814      	ldr	r0, [pc, #80]	; (8019a40 <prvCheckForValidListAndQueue+0x64>)
 80199f0:	f7fd f9c4 	bl	8016d7c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80199f4:	4813      	ldr	r0, [pc, #76]	; (8019a44 <prvCheckForValidListAndQueue+0x68>)
 80199f6:	f7fd f9c1 	bl	8016d7c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80199fa:	4b13      	ldr	r3, [pc, #76]	; (8019a48 <prvCheckForValidListAndQueue+0x6c>)
 80199fc:	4a10      	ldr	r2, [pc, #64]	; (8019a40 <prvCheckForValidListAndQueue+0x64>)
 80199fe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8019a00:	4b12      	ldr	r3, [pc, #72]	; (8019a4c <prvCheckForValidListAndQueue+0x70>)
 8019a02:	4a10      	ldr	r2, [pc, #64]	; (8019a44 <prvCheckForValidListAndQueue+0x68>)
 8019a04:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8019a06:	2300      	movs	r3, #0
 8019a08:	9300      	str	r3, [sp, #0]
 8019a0a:	4b11      	ldr	r3, [pc, #68]	; (8019a50 <prvCheckForValidListAndQueue+0x74>)
 8019a0c:	4a11      	ldr	r2, [pc, #68]	; (8019a54 <prvCheckForValidListAndQueue+0x78>)
 8019a0e:	2110      	movs	r1, #16
 8019a10:	200a      	movs	r0, #10
 8019a12:	f7fd fd21 	bl	8017458 <xQueueGenericCreateStatic>
 8019a16:	4603      	mov	r3, r0
 8019a18:	4a08      	ldr	r2, [pc, #32]	; (8019a3c <prvCheckForValidListAndQueue+0x60>)
 8019a1a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8019a1c:	4b07      	ldr	r3, [pc, #28]	; (8019a3c <prvCheckForValidListAndQueue+0x60>)
 8019a1e:	681b      	ldr	r3, [r3, #0]
 8019a20:	2b00      	cmp	r3, #0
 8019a22:	d005      	beq.n	8019a30 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8019a24:	4b05      	ldr	r3, [pc, #20]	; (8019a3c <prvCheckForValidListAndQueue+0x60>)
 8019a26:	681b      	ldr	r3, [r3, #0]
 8019a28:	490b      	ldr	r1, [pc, #44]	; (8019a58 <prvCheckForValidListAndQueue+0x7c>)
 8019a2a:	4618      	mov	r0, r3
 8019a2c:	f7fe fc32 	bl	8018294 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8019a30:	f7fd fbb8 	bl	80171a4 <vPortExitCritical>
}
 8019a34:	bf00      	nop
 8019a36:	46bd      	mov	sp, r7
 8019a38:	bd80      	pop	{r7, pc}
 8019a3a:	bf00      	nop
 8019a3c:	24006ee4 	.word	0x24006ee4
 8019a40:	24006eb4 	.word	0x24006eb4
 8019a44:	24006ec8 	.word	0x24006ec8
 8019a48:	24006edc 	.word	0x24006edc
 8019a4c:	24006ee0 	.word	0x24006ee0
 8019a50:	24006f90 	.word	0x24006f90
 8019a54:	24006ef0 	.word	0x24006ef0
 8019a58:	0802b0b8 	.word	0x0802b0b8

08019a5c <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8019a5c:	8880      	ldrh	r0, [r0, #4]
 8019a5e:	4770      	bx	lr

08019a60 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8019a60:	b570      	push	{r4, r5, r6, lr}
 8019a62:	6803      	ldr	r3, [r0, #0]
 8019a64:	460c      	mov	r4, r1
 8019a66:	2100      	movs	r1, #0
 8019a68:	4605      	mov	r5, r0
 8019a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019a6c:	4798      	blx	r3
 8019a6e:	4606      	mov	r6, r0
 8019a70:	682b      	ldr	r3, [r5, #0]
 8019a72:	4628      	mov	r0, r5
 8019a74:	1ba4      	subs	r4, r4, r6
 8019a76:	6a1b      	ldr	r3, [r3, #32]
 8019a78:	b2a4      	uxth	r4, r4
 8019a7a:	4798      	blx	r3
 8019a7c:	fbb4 f0f0 	udiv	r0, r4, r0
 8019a80:	bd70      	pop	{r4, r5, r6, pc}

08019a82 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8019a82:	2300      	movs	r3, #0
 8019a84:	8083      	strh	r3, [r0, #4]
 8019a86:	4770      	bx	lr

08019a88 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8019a88:	b510      	push	{r4, lr}
 8019a8a:	6803      	ldr	r3, [r0, #0]
 8019a8c:	4604      	mov	r4, r0
 8019a8e:	8881      	ldrh	r1, [r0, #4]
 8019a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019a92:	4798      	blx	r3
 8019a94:	88a3      	ldrh	r3, [r4, #4]
 8019a96:	3301      	adds	r3, #1
 8019a98:	80a3      	strh	r3, [r4, #4]
 8019a9a:	bd10      	pop	{r4, pc}

08019a9c <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8019a9c:	6803      	ldr	r3, [r0, #0]
 8019a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019aa0:	4718      	bx	r3

08019aa2 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8019aa2:	4770      	bx	lr

08019aa4 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8019aa4:	4a02      	ldr	r2, [pc, #8]	; (8019ab0 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8019aa6:	6002      	str	r2, [r0, #0]
 8019aa8:	2200      	movs	r2, #0
 8019aaa:	8082      	strh	r2, [r0, #4]
 8019aac:	4770      	bx	lr
 8019aae:	bf00      	nop
 8019ab0:	0802b9e4 	.word	0x0802b9e4

08019ab4 <_ZN8touchgfx9Container13getFirstChildEv>:
 8019ab4:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8019ab6:	4770      	bx	lr

08019ab8 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8019ab8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8019aba:	2000      	movs	r0, #0
 8019abc:	b12b      	cbz	r3, 8019aca <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8019abe:	b920      	cbnz	r0, 8019aca <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8019ac0:	1a5a      	subs	r2, r3, r1
 8019ac2:	699b      	ldr	r3, [r3, #24]
 8019ac4:	4250      	negs	r0, r2
 8019ac6:	4150      	adcs	r0, r2
 8019ac8:	e7f8      	b.n	8019abc <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8019aca:	4770      	bx	lr

08019acc <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8019acc:	2300      	movs	r3, #0
 8019ace:	6148      	str	r0, [r1, #20]
 8019ad0:	618b      	str	r3, [r1, #24]
 8019ad2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8019ad4:	b913      	cbnz	r3, 8019adc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 8019ad6:	6281      	str	r1, [r0, #40]	; 0x28
 8019ad8:	4770      	bx	lr
 8019ada:	4613      	mov	r3, r2
 8019adc:	699a      	ldr	r2, [r3, #24]
 8019ade:	2a00      	cmp	r2, #0
 8019ae0:	d1fb      	bne.n	8019ada <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 8019ae2:	6199      	str	r1, [r3, #24]
 8019ae4:	4770      	bx	lr

08019ae6 <_ZN8touchgfx9Container9removeAllEv>:
 8019ae6:	2200      	movs	r2, #0
 8019ae8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8019aea:	b123      	cbz	r3, 8019af6 <_ZN8touchgfx9Container9removeAllEv+0x10>
 8019aec:	6999      	ldr	r1, [r3, #24]
 8019aee:	6281      	str	r1, [r0, #40]	; 0x28
 8019af0:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8019af4:	e7f8      	b.n	8019ae8 <_ZN8touchgfx9Container9removeAllEv+0x2>
 8019af6:	4770      	bx	lr

08019af8 <_ZN8touchgfx9Container6unlinkEv>:
 8019af8:	2300      	movs	r3, #0
 8019afa:	6283      	str	r3, [r0, #40]	; 0x28
 8019afc:	4770      	bx	lr

08019afe <_ZNK8touchgfx9Container12getSolidRectEv>:
 8019afe:	2200      	movs	r2, #0
 8019b00:	8002      	strh	r2, [r0, #0]
 8019b02:	8042      	strh	r2, [r0, #2]
 8019b04:	8082      	strh	r2, [r0, #4]
 8019b06:	80c2      	strh	r2, [r0, #6]
 8019b08:	4770      	bx	lr

08019b0a <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8019b0a:	b570      	push	{r4, r5, r6, lr}
 8019b0c:	460d      	mov	r5, r1
 8019b0e:	4616      	mov	r6, r2
 8019b10:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8019b12:	b13c      	cbz	r4, 8019b24 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8019b14:	6823      	ldr	r3, [r4, #0]
 8019b16:	4620      	mov	r0, r4
 8019b18:	4632      	mov	r2, r6
 8019b1a:	4629      	mov	r1, r5
 8019b1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019b1e:	4798      	blx	r3
 8019b20:	69a4      	ldr	r4, [r4, #24]
 8019b22:	e7f6      	b.n	8019b12 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8019b24:	bd70      	pop	{r4, r5, r6, pc}

08019b26 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8019b26:	b538      	push	{r3, r4, r5, lr}
 8019b28:	460d      	mov	r5, r1
 8019b2a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8019b2c:	b134      	cbz	r4, 8019b3c <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8019b2e:	682b      	ldr	r3, [r5, #0]
 8019b30:	4621      	mov	r1, r4
 8019b32:	4628      	mov	r0, r5
 8019b34:	689b      	ldr	r3, [r3, #8]
 8019b36:	4798      	blx	r3
 8019b38:	69a4      	ldr	r4, [r4, #24]
 8019b3a:	e7f7      	b.n	8019b2c <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8019b3c:	bd38      	pop	{r3, r4, r5, pc}

08019b3e <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8019b3e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8019b40:	b19b      	cbz	r3, 8019b6a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8019b42:	428b      	cmp	r3, r1
 8019b44:	d109      	bne.n	8019b5a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8019b46:	699a      	ldr	r2, [r3, #24]
 8019b48:	2100      	movs	r1, #0
 8019b4a:	6159      	str	r1, [r3, #20]
 8019b4c:	6282      	str	r2, [r0, #40]	; 0x28
 8019b4e:	b902      	cbnz	r2, 8019b52 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8019b50:	4770      	bx	lr
 8019b52:	6199      	str	r1, [r3, #24]
 8019b54:	4770      	bx	lr
 8019b56:	4613      	mov	r3, r2
 8019b58:	b13a      	cbz	r2, 8019b6a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8019b5a:	699a      	ldr	r2, [r3, #24]
 8019b5c:	428a      	cmp	r2, r1
 8019b5e:	d1fa      	bne.n	8019b56 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8019b60:	698a      	ldr	r2, [r1, #24]
 8019b62:	619a      	str	r2, [r3, #24]
 8019b64:	2300      	movs	r3, #0
 8019b66:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8019b6a:	4770      	bx	lr

08019b6c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8019b6c:	b410      	push	{r4}
 8019b6e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8019b70:	4604      	mov	r4, r0
 8019b72:	b92b      	cbnz	r3, 8019b80 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8019b74:	6803      	ldr	r3, [r0, #0]
 8019b76:	4611      	mov	r1, r2
 8019b78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019b7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019b7e:	4718      	bx	r3
 8019b80:	b941      	cbnz	r1, 8019b94 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8019b82:	6193      	str	r3, [r2, #24]
 8019b84:	6282      	str	r2, [r0, #40]	; 0x28
 8019b86:	6154      	str	r4, [r2, #20]
 8019b88:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019b8c:	4770      	bx	lr
 8019b8e:	4603      	mov	r3, r0
 8019b90:	2800      	cmp	r0, #0
 8019b92:	d0f9      	beq.n	8019b88 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8019b94:	4299      	cmp	r1, r3
 8019b96:	6998      	ldr	r0, [r3, #24]
 8019b98:	d1f9      	bne.n	8019b8e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8019b9a:	6190      	str	r0, [r2, #24]
 8019b9c:	618a      	str	r2, [r1, #24]
 8019b9e:	e7f2      	b.n	8019b86 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

08019ba0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8019ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019ba4:	461f      	mov	r7, r3
 8019ba6:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8019baa:	460d      	mov	r5, r1
 8019bac:	4616      	mov	r6, r2
 8019bae:	b103      	cbz	r3, 8019bb2 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8019bb0:	6038      	str	r0, [r7, #0]
 8019bb2:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8019bb4:	b314      	cbz	r4, 8019bfc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8019bb6:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8019bba:	b1eb      	cbz	r3, 8019bf8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8019bbc:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8019bc0:	428d      	cmp	r5, r1
 8019bc2:	db19      	blt.n	8019bf8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8019bc4:	b289      	uxth	r1, r1
 8019bc6:	8923      	ldrh	r3, [r4, #8]
 8019bc8:	440b      	add	r3, r1
 8019bca:	b21b      	sxth	r3, r3
 8019bcc:	429d      	cmp	r5, r3
 8019bce:	da13      	bge.n	8019bf8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8019bd0:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8019bd4:	4296      	cmp	r6, r2
 8019bd6:	db0f      	blt.n	8019bf8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8019bd8:	b292      	uxth	r2, r2
 8019bda:	8963      	ldrh	r3, [r4, #10]
 8019bdc:	4413      	add	r3, r2
 8019bde:	b21b      	sxth	r3, r3
 8019be0:	429e      	cmp	r6, r3
 8019be2:	da09      	bge.n	8019bf8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8019be4:	6823      	ldr	r3, [r4, #0]
 8019be6:	1ab2      	subs	r2, r6, r2
 8019be8:	1a69      	subs	r1, r5, r1
 8019bea:	4620      	mov	r0, r4
 8019bec:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 8019bf0:	b212      	sxth	r2, r2
 8019bf2:	463b      	mov	r3, r7
 8019bf4:	b209      	sxth	r1, r1
 8019bf6:	47c0      	blx	r8
 8019bf8:	69a4      	ldr	r4, [r4, #24]
 8019bfa:	e7db      	b.n	8019bb4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8019bfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019c00 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8019c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c04:	4c6d      	ldr	r4, [pc, #436]	; (8019dbc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 8019c06:	b0a1      	sub	sp, #132	; 0x84
 8019c08:	4606      	mov	r6, r0
 8019c0a:	6824      	ldr	r4, [r4, #0]
 8019c0c:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8019c0e:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 8019c12:	2400      	movs	r4, #0
 8019c14:	9303      	str	r3, [sp, #12]
 8019c16:	802c      	strh	r4, [r5, #0]
 8019c18:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 8019c1a:	802c      	strh	r4, [r5, #0]
 8019c1c:	601c      	str	r4, [r3, #0]
 8019c1e:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8019c22:	f7ff ffbd 	bl	8019ba0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8019c26:	f1b9 0f03 	cmp.w	r9, #3
 8019c2a:	f340 80c1 	ble.w	8019db0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 8019c2e:	4631      	mov	r1, r6
 8019c30:	a80c      	add	r0, sp, #48	; 0x30
 8019c32:	f004 fabd 	bl	801e1b0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019c36:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8019c3a:	9306      	str	r3, [sp, #24]
 8019c3c:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8019c40:	9307      	str	r3, [sp, #28]
 8019c42:	9b03      	ldr	r3, [sp, #12]
 8019c44:	f8d3 a000 	ldr.w	sl, [r3]
 8019c48:	f1ba 0f00 	cmp.w	sl, #0
 8019c4c:	f000 80b3 	beq.w	8019db6 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 8019c50:	4651      	mov	r1, sl
 8019c52:	a810      	add	r0, sp, #64	; 0x40
 8019c54:	f004 faac 	bl	801e1b0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019c58:	2002      	movs	r0, #2
 8019c5a:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 8019c5e:	9b01      	ldr	r3, [sp, #4]
 8019c60:	9a06      	ldr	r2, [sp, #24]
 8019c62:	fb91 f1f0 	sdiv	r1, r1, r0
 8019c66:	189d      	adds	r5, r3, r2
 8019c68:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 8019c6c:	9a07      	ldr	r2, [sp, #28]
 8019c6e:	4419      	add	r1, r3
 8019c70:	9b02      	ldr	r3, [sp, #8]
 8019c72:	4413      	add	r3, r2
 8019c74:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 8019c78:	1a6d      	subs	r5, r5, r1
 8019c7a:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8019c7e:	fb92 f2f0 	sdiv	r2, r2, r0
 8019c82:	440a      	add	r2, r1
 8019c84:	1a9b      	subs	r3, r3, r2
 8019c86:	435b      	muls	r3, r3
 8019c88:	fb05 3505 	mla	r5, r5, r5, r3
 8019c8c:	4f4c      	ldr	r7, [pc, #304]	; (8019dc0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 8019c8e:	ac10      	add	r4, sp, #64	; 0x40
 8019c90:	f1b9 0f0c 	cmp.w	r9, #12
 8019c94:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8019c96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019c98:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8019c9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019c9c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8019c9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019ca0:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8019ca4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8019ca8:	f04f 0303 	mov.w	r3, #3
 8019cac:	bfd8      	it	le
 8019cae:	f109 32ff 	addle.w	r2, r9, #4294967295
 8019cb2:	f04f 0400 	mov.w	r4, #0
 8019cb6:	f8cd 9000 	str.w	r9, [sp]
 8019cba:	bfcc      	ite	gt
 8019cbc:	4698      	movgt	r8, r3
 8019cbe:	fb92 f8f3 	sdivle	r8, r2, r3
 8019cc2:	1c63      	adds	r3, r4, #1
 8019cc4:	aa10      	add	r2, sp, #64	; 0x40
 8019cc6:	f004 0401 	and.w	r4, r4, #1
 8019cca:	f04f 0b00 	mov.w	fp, #0
 8019cce:	9308      	str	r3, [sp, #32]
 8019cd0:	9b00      	ldr	r3, [sp, #0]
 8019cd2:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8019cd6:	fb93 f3f8 	sdiv	r3, r3, r8
 8019cda:	3404      	adds	r4, #4
 8019cdc:	b29b      	uxth	r3, r3
 8019cde:	9304      	str	r3, [sp, #16]
 8019ce0:	9a04      	ldr	r2, [sp, #16]
 8019ce2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8019ce6:	fb13 f302 	smulbb	r3, r3, r2
 8019cea:	9a01      	ldr	r2, [sp, #4]
 8019cec:	b29b      	uxth	r3, r3
 8019cee:	1899      	adds	r1, r3, r2
 8019cf0:	9305      	str	r3, [sp, #20]
 8019cf2:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8019cf6:	b209      	sxth	r1, r1
 8019cf8:	4299      	cmp	r1, r3
 8019cfa:	db4d      	blt.n	8019d98 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8019cfc:	8932      	ldrh	r2, [r6, #8]
 8019cfe:	4413      	add	r3, r2
 8019d00:	b21b      	sxth	r3, r3
 8019d02:	4299      	cmp	r1, r3
 8019d04:	da48      	bge.n	8019d98 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8019d06:	9b04      	ldr	r3, [sp, #16]
 8019d08:	6827      	ldr	r7, [r4, #0]
 8019d0a:	fb17 f703 	smulbb	r7, r7, r3
 8019d0e:	9b02      	ldr	r3, [sp, #8]
 8019d10:	b2bf      	uxth	r7, r7
 8019d12:	18fa      	adds	r2, r7, r3
 8019d14:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8019d18:	b212      	sxth	r2, r2
 8019d1a:	429a      	cmp	r2, r3
 8019d1c:	db3c      	blt.n	8019d98 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8019d1e:	8970      	ldrh	r0, [r6, #10]
 8019d20:	4403      	add	r3, r0
 8019d22:	b21b      	sxth	r3, r3
 8019d24:	429a      	cmp	r2, r3
 8019d26:	da37      	bge.n	8019d98 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8019d28:	2300      	movs	r3, #0
 8019d2a:	4630      	mov	r0, r6
 8019d2c:	930b      	str	r3, [sp, #44]	; 0x2c
 8019d2e:	ab0b      	add	r3, sp, #44	; 0x2c
 8019d30:	f7ff ff36 	bl	8019ba0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8019d34:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019d36:	b37a      	cbz	r2, 8019d98 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8019d38:	4552      	cmp	r2, sl
 8019d3a:	d02d      	beq.n	8019d98 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8019d3c:	4611      	mov	r1, r2
 8019d3e:	a80e      	add	r0, sp, #56	; 0x38
 8019d40:	9209      	str	r2, [sp, #36]	; 0x24
 8019d42:	f004 fa35 	bl	801e1b0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019d46:	f04f 0e02 	mov.w	lr, #2
 8019d4a:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 8019d4e:	9a06      	ldr	r2, [sp, #24]
 8019d50:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 8019d54:	9b01      	ldr	r3, [sp, #4]
 8019d56:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 8019d5a:	4413      	add	r3, r2
 8019d5c:	9a07      	ldr	r2, [sp, #28]
 8019d5e:	fb91 f1fe 	sdiv	r1, r1, lr
 8019d62:	fb9c fcfe 	sdiv	ip, ip, lr
 8019d66:	4401      	add	r1, r0
 8019d68:	1a58      	subs	r0, r3, r1
 8019d6a:	9b02      	ldr	r3, [sp, #8]
 8019d6c:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 8019d70:	4413      	add	r3, r2
 8019d72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019d74:	448c      	add	ip, r1
 8019d76:	eba3 030c 	sub.w	r3, r3, ip
 8019d7a:	435b      	muls	r3, r3
 8019d7c:	fb00 3300 	mla	r3, r0, r0, r3
 8019d80:	42ab      	cmp	r3, r5
 8019d82:	d208      	bcs.n	8019d96 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 8019d84:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8019d86:	461d      	mov	r5, r3
 8019d88:	9803      	ldr	r0, [sp, #12]
 8019d8a:	6001      	str	r1, [r0, #0]
 8019d8c:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8019d8e:	9805      	ldr	r0, [sp, #20]
 8019d90:	8008      	strh	r0, [r1, #0]
 8019d92:	992b      	ldr	r1, [sp, #172]	; 0xac
 8019d94:	800f      	strh	r7, [r1, #0]
 8019d96:	4692      	mov	sl, r2
 8019d98:	f10b 0b01 	add.w	fp, fp, #1
 8019d9c:	3408      	adds	r4, #8
 8019d9e:	f1bb 0f04 	cmp.w	fp, #4
 8019da2:	d19d      	bne.n	8019ce0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 8019da4:	9b00      	ldr	r3, [sp, #0]
 8019da6:	9c08      	ldr	r4, [sp, #32]
 8019da8:	444b      	add	r3, r9
 8019daa:	4544      	cmp	r4, r8
 8019dac:	9300      	str	r3, [sp, #0]
 8019dae:	d188      	bne.n	8019cc2 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 8019db0:	b021      	add	sp, #132	; 0x84
 8019db2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019db6:	f04f 35ff 	mov.w	r5, #4294967295
 8019dba:	e767      	b.n	8019c8c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 8019dbc:	24006fec 	.word	0x24006fec
 8019dc0:	0802b0c0 	.word	0x0802b0c0

08019dc4 <_ZN8touchgfx4RectaNERKS0_>:
 8019dc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019dc8:	f9b1 7000 	ldrsh.w	r7, [r1]
 8019dcc:	888c      	ldrh	r4, [r1, #4]
 8019dce:	f9b0 9000 	ldrsh.w	r9, [r0]
 8019dd2:	443c      	add	r4, r7
 8019dd4:	b2a4      	uxth	r4, r4
 8019dd6:	fa0f f884 	sxth.w	r8, r4
 8019dda:	45c1      	cmp	r9, r8
 8019ddc:	da2f      	bge.n	8019e3e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8019dde:	8882      	ldrh	r2, [r0, #4]
 8019de0:	444a      	add	r2, r9
 8019de2:	b292      	uxth	r2, r2
 8019de4:	fa0f fe82 	sxth.w	lr, r2
 8019de8:	4577      	cmp	r7, lr
 8019dea:	da28      	bge.n	8019e3e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8019dec:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8019df0:	88cb      	ldrh	r3, [r1, #6]
 8019df2:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8019df6:	442b      	add	r3, r5
 8019df8:	b21b      	sxth	r3, r3
 8019dfa:	429e      	cmp	r6, r3
 8019dfc:	da1f      	bge.n	8019e3e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8019dfe:	88c3      	ldrh	r3, [r0, #6]
 8019e00:	4433      	add	r3, r6
 8019e02:	b29b      	uxth	r3, r3
 8019e04:	fa0f fc83 	sxth.w	ip, r3
 8019e08:	4565      	cmp	r5, ip
 8019e0a:	da18      	bge.n	8019e3e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8019e0c:	454f      	cmp	r7, r9
 8019e0e:	bfb8      	it	lt
 8019e10:	464f      	movlt	r7, r9
 8019e12:	42b5      	cmp	r5, r6
 8019e14:	bfb8      	it	lt
 8019e16:	4635      	movlt	r5, r6
 8019e18:	45f0      	cmp	r8, lr
 8019e1a:	bfd8      	it	le
 8019e1c:	4622      	movle	r2, r4
 8019e1e:	1bd2      	subs	r2, r2, r7
 8019e20:	8082      	strh	r2, [r0, #4]
 8019e22:	884a      	ldrh	r2, [r1, #2]
 8019e24:	88c9      	ldrh	r1, [r1, #6]
 8019e26:	8007      	strh	r7, [r0, #0]
 8019e28:	440a      	add	r2, r1
 8019e2a:	8045      	strh	r5, [r0, #2]
 8019e2c:	b292      	uxth	r2, r2
 8019e2e:	b211      	sxth	r1, r2
 8019e30:	458c      	cmp	ip, r1
 8019e32:	bfa8      	it	ge
 8019e34:	4613      	movge	r3, r2
 8019e36:	1b5b      	subs	r3, r3, r5
 8019e38:	80c3      	strh	r3, [r0, #6]
 8019e3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019e3e:	2300      	movs	r3, #0
 8019e40:	8003      	strh	r3, [r0, #0]
 8019e42:	8043      	strh	r3, [r0, #2]
 8019e44:	8083      	strh	r3, [r0, #4]
 8019e46:	80c3      	strh	r3, [r0, #6]
 8019e48:	e7f7      	b.n	8019e3a <_ZN8touchgfx4RectaNERKS0_+0x76>

08019e4a <_ZNK8touchgfx4Rect7isEmptyEv>:
 8019e4a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8019e4e:	2b00      	cmp	r3, #0
 8019e50:	dd06      	ble.n	8019e60 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8019e52:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8019e56:	2800      	cmp	r0, #0
 8019e58:	bfcc      	ite	gt
 8019e5a:	2000      	movgt	r0, #0
 8019e5c:	2001      	movle	r0, #1
 8019e5e:	4770      	bx	lr
 8019e60:	2001      	movs	r0, #1
 8019e62:	4770      	bx	lr

08019e64 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8019e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019e68:	2300      	movs	r3, #0
 8019e6a:	4604      	mov	r4, r0
 8019e6c:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8019e6e:	8003      	strh	r3, [r0, #0]
 8019e70:	8043      	strh	r3, [r0, #2]
 8019e72:	8083      	strh	r3, [r0, #4]
 8019e74:	80c3      	strh	r3, [r0, #6]
 8019e76:	2d00      	cmp	r5, #0
 8019e78:	d040      	beq.n	8019efc <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8019e7a:	1d28      	adds	r0, r5, #4
 8019e7c:	f7ff ffe5 	bl	8019e4a <_ZNK8touchgfx4Rect7isEmptyEv>
 8019e80:	b988      	cbnz	r0, 8019ea6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8019e82:	4620      	mov	r0, r4
 8019e84:	f7ff ffe1 	bl	8019e4a <_ZNK8touchgfx4Rect7isEmptyEv>
 8019e88:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8019e8c:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8019e90:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8019e94:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8019e98:	b138      	cbz	r0, 8019eaa <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8019e9a:	8022      	strh	r2, [r4, #0]
 8019e9c:	8063      	strh	r3, [r4, #2]
 8019e9e:	f8a4 e004 	strh.w	lr, [r4, #4]
 8019ea2:	f8a4 c006 	strh.w	ip, [r4, #6]
 8019ea6:	69ad      	ldr	r5, [r5, #24]
 8019ea8:	e7e5      	b.n	8019e76 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8019eaa:	f9b4 0000 	ldrsh.w	r0, [r4]
 8019eae:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8019eb2:	4290      	cmp	r0, r2
 8019eb4:	4607      	mov	r7, r0
 8019eb6:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8019eba:	460e      	mov	r6, r1
 8019ebc:	bfa8      	it	ge
 8019ebe:	4617      	movge	r7, r2
 8019ec0:	4299      	cmp	r1, r3
 8019ec2:	4472      	add	r2, lr
 8019ec4:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8019ec8:	bfa8      	it	ge
 8019eca:	461e      	movge	r6, r3
 8019ecc:	4440      	add	r0, r8
 8019ece:	4471      	add	r1, lr
 8019ed0:	4463      	add	r3, ip
 8019ed2:	b200      	sxth	r0, r0
 8019ed4:	8027      	strh	r7, [r4, #0]
 8019ed6:	b212      	sxth	r2, r2
 8019ed8:	8066      	strh	r6, [r4, #2]
 8019eda:	b209      	sxth	r1, r1
 8019edc:	b21b      	sxth	r3, r3
 8019ede:	4290      	cmp	r0, r2
 8019ee0:	bfac      	ite	ge
 8019ee2:	ebc7 0200 	rsbge	r2, r7, r0
 8019ee6:	ebc7 0202 	rsblt	r2, r7, r2
 8019eea:	4299      	cmp	r1, r3
 8019eec:	bfac      	ite	ge
 8019eee:	ebc6 0301 	rsbge	r3, r6, r1
 8019ef2:	ebc6 0303 	rsblt	r3, r6, r3
 8019ef6:	80a2      	strh	r2, [r4, #4]
 8019ef8:	80e3      	strh	r3, [r4, #6]
 8019efa:	e7d4      	b.n	8019ea6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8019efc:	4620      	mov	r0, r4
 8019efe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019f02 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8019f02:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8019f06:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8019f0a:	b383      	cbz	r3, 8019f6e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8019f0c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8019f0e:	b374      	cbz	r4, 8019f6e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8019f10:	f9b1 5000 	ldrsh.w	r5, [r1]
 8019f14:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8019f18:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8019f1c:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8019f20:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8019f24:	b303      	cbz	r3, 8019f68 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8019f26:	4668      	mov	r0, sp
 8019f28:	1d21      	adds	r1, r4, #4
 8019f2a:	f8ad 5000 	strh.w	r5, [sp]
 8019f2e:	f8ad 6002 	strh.w	r6, [sp, #2]
 8019f32:	f8ad 7004 	strh.w	r7, [sp, #4]
 8019f36:	f8ad 8006 	strh.w	r8, [sp, #6]
 8019f3a:	f7ff ff43 	bl	8019dc4 <_ZN8touchgfx4RectaNERKS0_>
 8019f3e:	4668      	mov	r0, sp
 8019f40:	f7ff ff83 	bl	8019e4a <_ZNK8touchgfx4Rect7isEmptyEv>
 8019f44:	b980      	cbnz	r0, 8019f68 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8019f46:	f8bd 3000 	ldrh.w	r3, [sp]
 8019f4a:	4669      	mov	r1, sp
 8019f4c:	88a2      	ldrh	r2, [r4, #4]
 8019f4e:	4620      	mov	r0, r4
 8019f50:	1a9b      	subs	r3, r3, r2
 8019f52:	88e2      	ldrh	r2, [r4, #6]
 8019f54:	f8ad 3000 	strh.w	r3, [sp]
 8019f58:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8019f5c:	1a9b      	subs	r3, r3, r2
 8019f5e:	f8ad 3002 	strh.w	r3, [sp, #2]
 8019f62:	6823      	ldr	r3, [r4, #0]
 8019f64:	689b      	ldr	r3, [r3, #8]
 8019f66:	4798      	blx	r3
 8019f68:	69a4      	ldr	r4, [r4, #24]
 8019f6a:	2c00      	cmp	r4, #0
 8019f6c:	d1d8      	bne.n	8019f20 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8019f6e:	b002      	add	sp, #8
 8019f70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019f74 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8019f74:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019f76:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8019f7a:	460d      	mov	r5, r1
 8019f7c:	4616      	mov	r6, r2
 8019f7e:	b323      	cbz	r3, 8019fca <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8019f80:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8019f82:	b314      	cbz	r4, 8019fca <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8019f84:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8019f88:	b1eb      	cbz	r3, 8019fc6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8019f8a:	6828      	ldr	r0, [r5, #0]
 8019f8c:	466b      	mov	r3, sp
 8019f8e:	6869      	ldr	r1, [r5, #4]
 8019f90:	c303      	stmia	r3!, {r0, r1}
 8019f92:	4668      	mov	r0, sp
 8019f94:	1d21      	adds	r1, r4, #4
 8019f96:	f7ff ff15 	bl	8019dc4 <_ZN8touchgfx4RectaNERKS0_>
 8019f9a:	4668      	mov	r0, sp
 8019f9c:	f7ff ff55 	bl	8019e4a <_ZNK8touchgfx4Rect7isEmptyEv>
 8019fa0:	b988      	cbnz	r0, 8019fc6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8019fa2:	f8bd 3000 	ldrh.w	r3, [sp]
 8019fa6:	4669      	mov	r1, sp
 8019fa8:	88a2      	ldrh	r2, [r4, #4]
 8019faa:	4620      	mov	r0, r4
 8019fac:	1a9b      	subs	r3, r3, r2
 8019fae:	88e2      	ldrh	r2, [r4, #6]
 8019fb0:	f8ad 3000 	strh.w	r3, [sp]
 8019fb4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8019fb8:	1a9b      	subs	r3, r3, r2
 8019fba:	4632      	mov	r2, r6
 8019fbc:	f8ad 3002 	strh.w	r3, [sp, #2]
 8019fc0:	6823      	ldr	r3, [r4, #0]
 8019fc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019fc4:	4798      	blx	r3
 8019fc6:	69a4      	ldr	r4, [r4, #24]
 8019fc8:	e7db      	b.n	8019f82 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8019fca:	b002      	add	sp, #8
 8019fcc:	bd70      	pop	{r4, r5, r6, pc}

08019fce <_ZN8touchgfx3HAL15InvalidateCacheEv>:
 8019fce:	4770      	bx	lr

08019fd0 <_ZN8touchgfx3HAL10FlushCacheEv>:
 8019fd0:	4770      	bx	lr

08019fd2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8019fd2:	6803      	ldr	r3, [r0, #0]
 8019fd4:	b513      	push	{r0, r1, r4, lr}
 8019fd6:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 8019fda:	2300      	movs	r3, #0
 8019fdc:	e9cd 3300 	strd	r3, r3, [sp]
 8019fe0:	466b      	mov	r3, sp
 8019fe2:	47a0      	blx	r4
 8019fe4:	b002      	add	sp, #8
 8019fe6:	bd10      	pop	{r4, pc}

08019fe8 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8019fe8:	2301      	movs	r3, #1
 8019fea:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8019fee:	f880 306d 	strb.w	r3, [r0, #109]	; 0x6d
 8019ff2:	4770      	bx	lr

08019ff4 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8019ff4:	2301      	movs	r3, #1
 8019ff6:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8019ffa:	f880 306d 	strb.w	r3, [r0, #109]	; 0x6d
 8019ffe:	4770      	bx	lr

0801a000 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 801a000:	6843      	ldr	r3, [r0, #4]
 801a002:	2201      	movs	r2, #1
 801a004:	725a      	strb	r2, [r3, #9]
 801a006:	6840      	ldr	r0, [r0, #4]
 801a008:	6803      	ldr	r3, [r0, #0]
 801a00a:	691b      	ldr	r3, [r3, #16]
 801a00c:	4718      	bx	r3

0801a00e <_ZN8touchgfx3HAL8flushDMAEv>:
 801a00e:	6840      	ldr	r0, [r0, #4]
 801a010:	6803      	ldr	r3, [r0, #0]
 801a012:	689b      	ldr	r3, [r3, #8]
 801a014:	4718      	bx	r3

0801a016 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 801a016:	b530      	push	{r4, r5, lr}
 801a018:	b08b      	sub	sp, #44	; 0x2c
 801a01a:	6804      	ldr	r4, [r0, #0]
 801a01c:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 801a020:	9509      	str	r5, [sp, #36]	; 0x24
 801a022:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 801a026:	9508      	str	r5, [sp, #32]
 801a028:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 801a02c:	9507      	str	r5, [sp, #28]
 801a02e:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 801a032:	9506      	str	r5, [sp, #24]
 801a034:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 801a038:	9505      	str	r5, [sp, #20]
 801a03a:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 801a03e:	9504      	str	r5, [sp, #16]
 801a040:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 801a044:	9503      	str	r5, [sp, #12]
 801a046:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 801a04a:	9502      	str	r5, [sp, #8]
 801a04c:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 801a050:	e9cd 3500 	strd	r3, r5, [sp]
 801a054:	4613      	mov	r3, r2
 801a056:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 801a058:	2200      	movs	r2, #0
 801a05a:	47a0      	blx	r4
 801a05c:	b00b      	add	sp, #44	; 0x2c
 801a05e:	bd30      	pop	{r4, r5, pc}

0801a060 <_ZN8touchgfx3HAL10beginFrameEv>:
 801a060:	4b04      	ldr	r3, [pc, #16]	; (801a074 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 801a062:	781b      	ldrb	r3, [r3, #0]
 801a064:	b123      	cbz	r3, 801a070 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 801a066:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
 801a06a:	f080 0001 	eor.w	r0, r0, #1
 801a06e:	4770      	bx	lr
 801a070:	2001      	movs	r0, #1
 801a072:	4770      	bx	lr
 801a074:	24006fea 	.word	0x24006fea

0801a078 <_ZN8touchgfx3HAL8endFrameEv>:
 801a078:	b510      	push	{r4, lr}
 801a07a:	4604      	mov	r4, r0
 801a07c:	6840      	ldr	r0, [r0, #4]
 801a07e:	6803      	ldr	r3, [r0, #0]
 801a080:	689b      	ldr	r3, [r3, #8]
 801a082:	4798      	blx	r3
 801a084:	f894 306d 	ldrb.w	r3, [r4, #109]	; 0x6d
 801a088:	b113      	cbz	r3, 801a090 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 801a08a:	2301      	movs	r3, #1
 801a08c:	f884 306e 	strb.w	r3, [r4, #110]	; 0x6e
 801a090:	bd10      	pop	{r4, pc}

0801a092 <_ZN8touchgfx3HAL10initializeEv>:
 801a092:	b510      	push	{r4, lr}
 801a094:	4604      	mov	r4, r0
 801a096:	f7e8 fdb1 	bl	8002bfc <_ZN8touchgfx10OSWrappers10initializeEv>
 801a09a:	f7e8 fa6b 	bl	8002574 <_ZN8touchgfx4GPIO4initEv>
 801a09e:	6860      	ldr	r0, [r4, #4]
 801a0a0:	6803      	ldr	r3, [r0, #0]
 801a0a2:	68db      	ldr	r3, [r3, #12]
 801a0a4:	4798      	blx	r3
 801a0a6:	68e0      	ldr	r0, [r4, #12]
 801a0a8:	6803      	ldr	r3, [r0, #0]
 801a0aa:	689b      	ldr	r3, [r3, #8]
 801a0ac:	4798      	blx	r3
 801a0ae:	6823      	ldr	r3, [r4, #0]
 801a0b0:	4620      	mov	r0, r4
 801a0b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a0b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a0b8:	4718      	bx	r3

0801a0ba <_ZN8touchgfx3HAL9taskEntryEv>:
 801a0ba:	b508      	push	{r3, lr}
 801a0bc:	6803      	ldr	r3, [r0, #0]
 801a0be:	4604      	mov	r4, r0
 801a0c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801a0c4:	4798      	blx	r3
 801a0c6:	6823      	ldr	r3, [r4, #0]
 801a0c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801a0ca:	4620      	mov	r0, r4
 801a0cc:	4798      	blx	r3
 801a0ce:	f7e8 fe0b 	bl	8002ce8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 801a0d2:	6823      	ldr	r3, [r4, #0]
 801a0d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a0d6:	e7f8      	b.n	801a0ca <_ZN8touchgfx3HAL9taskEntryEv+0x10>

0801a0d8 <_ZN8touchgfx3HAL4tickEv>:
 801a0d8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801a0da:	6803      	ldr	r3, [r0, #0]
 801a0dc:	4604      	mov	r4, r0
 801a0de:	4d5b      	ldr	r5, [pc, #364]	; (801a24c <_ZN8touchgfx3HAL4tickEv+0x174>)
 801a0e0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801a0e4:	4798      	blx	r3
 801a0e6:	2800      	cmp	r0, #0
 801a0e8:	f000 8095 	beq.w	801a216 <_ZN8touchgfx3HAL4tickEv+0x13e>
 801a0ec:	2001      	movs	r0, #1
 801a0ee:	2600      	movs	r6, #0
 801a0f0:	f7e8 fa48 	bl	8002584 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 801a0f4:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
 801a0f8:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 801a0fc:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 801a100:	f894 3079 	ldrb.w	r3, [r4, #121]	; 0x79
 801a104:	f884 606a 	strb.w	r6, [r4, #106]	; 0x6a
 801a108:	b133      	cbz	r3, 801a118 <_ZN8touchgfx3HAL4tickEv+0x40>
 801a10a:	6823      	ldr	r3, [r4, #0]
 801a10c:	4620      	mov	r0, r4
 801a10e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 801a112:	4798      	blx	r3
 801a114:	f884 6079 	strb.w	r6, [r4, #121]	; 0x79
 801a118:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 801a11c:	2601      	movs	r6, #1
 801a11e:	6862      	ldr	r2, [r4, #4]
 801a120:	f083 0301 	eor.w	r3, r3, #1
 801a124:	702e      	strb	r6, [r5, #0]
 801a126:	7253      	strb	r3, [r2, #9]
 801a128:	f002 ff2e 	bl	801cf88 <_ZN8touchgfx11Application11getInstanceEv>
 801a12c:	6803      	ldr	r3, [r0, #0]
 801a12e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a130:	4798      	blx	r3
 801a132:	f894 306b 	ldrb.w	r3, [r4, #107]	; 0x6b
 801a136:	b90b      	cbnz	r3, 801a13c <_ZN8touchgfx3HAL4tickEv+0x64>
 801a138:	f884 606b 	strb.w	r6, [r4, #107]	; 0x6b
 801a13c:	f002 ff24 	bl	801cf88 <_ZN8touchgfx11Application11getInstanceEv>
 801a140:	6803      	ldr	r3, [r0, #0]
 801a142:	695b      	ldr	r3, [r3, #20]
 801a144:	4798      	blx	r3
 801a146:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 801a148:	6803      	ldr	r3, [r0, #0]
 801a14a:	691b      	ldr	r3, [r3, #16]
 801a14c:	4798      	blx	r3
 801a14e:	f894 306b 	ldrb.w	r3, [r4, #107]	; 0x6b
 801a152:	f894 206c 	ldrb.w	r2, [r4, #108]	; 0x6c
 801a156:	3b01      	subs	r3, #1
 801a158:	b2db      	uxtb	r3, r3
 801a15a:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 801a15e:	b10a      	cbz	r2, 801a164 <_ZN8touchgfx3HAL4tickEv+0x8c>
 801a160:	2b00      	cmp	r3, #0
 801a162:	d1eb      	bne.n	801a13c <_ZN8touchgfx3HAL4tickEv+0x64>
 801a164:	4a3a      	ldr	r2, [pc, #232]	; (801a250 <_ZN8touchgfx3HAL4tickEv+0x178>)
 801a166:	f994 1068 	ldrsb.w	r1, [r4, #104]	; 0x68
 801a16a:	7813      	ldrb	r3, [r2, #0]
 801a16c:	3301      	adds	r3, #1
 801a16e:	b25b      	sxtb	r3, r3
 801a170:	4299      	cmp	r1, r3
 801a172:	7013      	strb	r3, [r2, #0]
 801a174:	dc10      	bgt.n	801a198 <_ZN8touchgfx3HAL4tickEv+0xc0>
 801a176:	2300      	movs	r3, #0
 801a178:	68e0      	ldr	r0, [r4, #12]
 801a17a:	a902      	add	r1, sp, #8
 801a17c:	7013      	strb	r3, [r2, #0]
 801a17e:	aa03      	add	r2, sp, #12
 801a180:	6803      	ldr	r3, [r0, #0]
 801a182:	68db      	ldr	r3, [r3, #12]
 801a184:	4798      	blx	r3
 801a186:	6823      	ldr	r3, [r4, #0]
 801a188:	2800      	cmp	r0, #0
 801a18a:	d050      	beq.n	801a22e <_ZN8touchgfx3HAL4tickEv+0x156>
 801a18c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 801a190:	4620      	mov	r0, r4
 801a192:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801a196:	4798      	blx	r3
 801a198:	2300      	movs	r3, #0
 801a19a:	6960      	ldr	r0, [r4, #20]
 801a19c:	f88d 3007 	strb.w	r3, [sp, #7]
 801a1a0:	b158      	cbz	r0, 801a1ba <_ZN8touchgfx3HAL4tickEv+0xe2>
 801a1a2:	6803      	ldr	r3, [r0, #0]
 801a1a4:	f10d 0107 	add.w	r1, sp, #7
 801a1a8:	68db      	ldr	r3, [r3, #12]
 801a1aa:	4798      	blx	r3
 801a1ac:	b128      	cbz	r0, 801a1ba <_ZN8touchgfx3HAL4tickEv+0xe2>
 801a1ae:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 801a1b0:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801a1b4:	6803      	ldr	r3, [r0, #0]
 801a1b6:	68db      	ldr	r3, [r3, #12]
 801a1b8:	4798      	blx	r3
 801a1ba:	f104 001c 	add.w	r0, r4, #28
 801a1be:	f00e fdc5 	bl	8028d4c <_ZN8touchgfx8Gestures4tickEv>
 801a1c2:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 801a1c6:	b30b      	cbz	r3, 801a20c <_ZN8touchgfx3HAL4tickEv+0x134>
 801a1c8:	6920      	ldr	r0, [r4, #16]
 801a1ca:	6803      	ldr	r3, [r0, #0]
 801a1cc:	691b      	ldr	r3, [r3, #16]
 801a1ce:	4798      	blx	r3
 801a1d0:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801a1d2:	4606      	mov	r6, r0
 801a1d4:	b903      	cbnz	r3, 801a1d8 <_ZN8touchgfx3HAL4tickEv+0x100>
 801a1d6:	6760      	str	r0, [r4, #116]	; 0x74
 801a1d8:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801a1da:	4a1e      	ldr	r2, [pc, #120]	; (801a254 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 801a1dc:	1af3      	subs	r3, r6, r3
 801a1de:	4293      	cmp	r3, r2
 801a1e0:	d914      	bls.n	801a20c <_ZN8touchgfx3HAL4tickEv+0x134>
 801a1e2:	6920      	ldr	r0, [r4, #16]
 801a1e4:	6803      	ldr	r3, [r0, #0]
 801a1e6:	699b      	ldr	r3, [r3, #24]
 801a1e8:	4798      	blx	r3
 801a1ea:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801a1ec:	2264      	movs	r2, #100	; 0x64
 801a1ee:	1af3      	subs	r3, r6, r3
 801a1f0:	fbb3 f3f2 	udiv	r3, r3, r2
 801a1f4:	fbb0 f0f3 	udiv	r0, r0, r3
 801a1f8:	2800      	cmp	r0, #0
 801a1fa:	dc1d      	bgt.n	801a238 <_ZN8touchgfx3HAL4tickEv+0x160>
 801a1fc:	f884 2069 	strb.w	r2, [r4, #105]	; 0x69
 801a200:	6920      	ldr	r0, [r4, #16]
 801a202:	2100      	movs	r1, #0
 801a204:	6803      	ldr	r3, [r0, #0]
 801a206:	69db      	ldr	r3, [r3, #28]
 801a208:	4798      	blx	r3
 801a20a:	6766      	str	r6, [r4, #116]	; 0x74
 801a20c:	f002 febc 	bl	801cf88 <_ZN8touchgfx11Application11getInstanceEv>
 801a210:	6803      	ldr	r3, [r0, #0]
 801a212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a214:	4798      	blx	r3
 801a216:	6823      	ldr	r3, [r4, #0]
 801a218:	4620      	mov	r0, r4
 801a21a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801a21e:	4798      	blx	r3
 801a220:	2001      	movs	r0, #1
 801a222:	f7e8 f9e9 	bl	80025f8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801a226:	2300      	movs	r3, #0
 801a228:	702b      	strb	r3, [r5, #0]
 801a22a:	b004      	add	sp, #16
 801a22c:	bd70      	pop	{r4, r5, r6, pc}
 801a22e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 801a232:	4620      	mov	r0, r4
 801a234:	4798      	blx	r3
 801a236:	e7af      	b.n	801a198 <_ZN8touchgfx3HAL4tickEv+0xc0>
 801a238:	2863      	cmp	r0, #99	; 0x63
 801a23a:	bfcb      	itete	gt
 801a23c:	2300      	movgt	r3, #0
 801a23e:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 801a242:	f884 3069 	strbgt.w	r3, [r4, #105]	; 0x69
 801a246:	f884 0069 	strble.w	r0, [r4, #105]	; 0x69
 801a24a:	e7d9      	b.n	801a200 <_ZN8touchgfx3HAL4tickEv+0x128>
 801a24c:	24006ff0 	.word	0x24006ff0
 801a250:	24006ff1 	.word	0x24006ff1
 801a254:	05f5e100 	.word	0x05f5e100

0801a258 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 801a258:	b510      	push	{r4, lr}
 801a25a:	4604      	mov	r4, r0
 801a25c:	f7e8 fd10 	bl	8002c80 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>
 801a260:	2200      	movs	r2, #0
 801a262:	6863      	ldr	r3, [r4, #4]
 801a264:	729a      	strb	r2, [r3, #10]
 801a266:	bd10      	pop	{r4, pc}

0801a268 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 801a268:	65c1      	str	r1, [r0, #92]	; 0x5c
 801a26a:	301c      	adds	r0, #28
 801a26c:	f00e bd6c 	b.w	8028d48 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0801a270 <_ZN8touchgfx3HAL5touchEll>:
 801a270:	b530      	push	{r4, r5, lr}
 801a272:	b087      	sub	sp, #28
 801a274:	4604      	mov	r4, r0
 801a276:	a804      	add	r0, sp, #16
 801a278:	e9cd 1204 	strd	r1, r2, [sp, #16]
 801a27c:	f002 fc76 	bl	801cb6c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 801a280:	9b04      	ldr	r3, [sp, #16]
 801a282:	a906      	add	r1, sp, #24
 801a284:	a803      	add	r0, sp, #12
 801a286:	f8ad 300c 	strh.w	r3, [sp, #12]
 801a28a:	9b05      	ldr	r3, [sp, #20]
 801a28c:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 801a290:	f002 fcbe 	bl	801cc10 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 801a294:	f894 106f 	ldrb.w	r1, [r4, #111]	; 0x6f
 801a298:	f104 001c 	add.w	r0, r4, #28
 801a29c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 801a2a0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 801a2a4:	b189      	cbz	r1, 801a2ca <_ZN8touchgfx3HAL5touchEll+0x5a>
 801a2a6:	f8b4 5064 	ldrh.w	r5, [r4, #100]	; 0x64
 801a2aa:	9300      	str	r3, [sp, #0]
 801a2ac:	4613      	mov	r3, r2
 801a2ae:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 801a2b2:	462a      	mov	r2, r5
 801a2b4:	f00e fd58 	bl	8028d68 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 801a2b8:	b128      	cbz	r0, 801a2c6 <_ZN8touchgfx3HAL5touchEll+0x56>
 801a2ba:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801a2be:	6623      	str	r3, [r4, #96]	; 0x60
 801a2c0:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801a2c4:	6663      	str	r3, [r4, #100]	; 0x64
 801a2c6:	b007      	add	sp, #28
 801a2c8:	bd30      	pop	{r4, r5, pc}
 801a2ca:	f00e fd8d 	bl	8028de8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 801a2ce:	2301      	movs	r3, #1
 801a2d0:	f884 306f 	strb.w	r3, [r4, #111]	; 0x6f
 801a2d4:	e7f1      	b.n	801a2ba <_ZN8touchgfx3HAL5touchEll+0x4a>

0801a2d6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 801a2d6:	b510      	push	{r4, lr}
 801a2d8:	2b00      	cmp	r3, #0
 801a2da:	d046      	beq.n	801a36a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 801a2dc:	ea81 0002 	eor.w	r0, r1, r2
 801a2e0:	07c4      	lsls	r4, r0, #31
 801a2e2:	d508      	bpl.n	801a2f6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 801a2e4:	440b      	add	r3, r1
 801a2e6:	3a01      	subs	r2, #1
 801a2e8:	428b      	cmp	r3, r1
 801a2ea:	d93e      	bls.n	801a36a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 801a2ec:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 801a2f0:	f801 0b01 	strb.w	r0, [r1], #1
 801a2f4:	e7f8      	b.n	801a2e8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 801a2f6:	07d0      	lsls	r0, r2, #31
 801a2f8:	bf42      	ittt	mi
 801a2fa:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 801a2fe:	f103 33ff 	addmi.w	r3, r3, #4294967295
 801a302:	f801 0b01 	strbmi.w	r0, [r1], #1
 801a306:	2b01      	cmp	r3, #1
 801a308:	d911      	bls.n	801a32e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 801a30a:	ea81 0402 	eor.w	r4, r1, r2
 801a30e:	4610      	mov	r0, r2
 801a310:	07a4      	lsls	r4, r4, #30
 801a312:	d022      	beq.n	801a35a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 801a314:	f023 0401 	bic.w	r4, r3, #1
 801a318:	440c      	add	r4, r1
 801a31a:	428c      	cmp	r4, r1
 801a31c:	4602      	mov	r2, r0
 801a31e:	d904      	bls.n	801a32a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 801a320:	8812      	ldrh	r2, [r2, #0]
 801a322:	3002      	adds	r0, #2
 801a324:	f821 2b02 	strh.w	r2, [r1], #2
 801a328:	e7f7      	b.n	801a31a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 801a32a:	f003 0301 	and.w	r3, r3, #1
 801a32e:	f023 0003 	bic.w	r0, r3, #3
 801a332:	4408      	add	r0, r1
 801a334:	4288      	cmp	r0, r1
 801a336:	4614      	mov	r4, r2
 801a338:	d904      	bls.n	801a344 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 801a33a:	6824      	ldr	r4, [r4, #0]
 801a33c:	3204      	adds	r2, #4
 801a33e:	f841 4b04 	str.w	r4, [r1], #4
 801a342:	e7f7      	b.n	801a334 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 801a344:	f003 0303 	and.w	r3, r3, #3
 801a348:	3a01      	subs	r2, #1
 801a34a:	440b      	add	r3, r1
 801a34c:	428b      	cmp	r3, r1
 801a34e:	d90c      	bls.n	801a36a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 801a350:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 801a354:	f801 0b01 	strb.w	r0, [r1], #1
 801a358:	e7f8      	b.n	801a34c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 801a35a:	0790      	lsls	r0, r2, #30
 801a35c:	d0e7      	beq.n	801a32e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 801a35e:	f832 0b02 	ldrh.w	r0, [r2], #2
 801a362:	3b02      	subs	r3, #2
 801a364:	f821 0b02 	strh.w	r0, [r1], #2
 801a368:	e7e1      	b.n	801a32e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 801a36a:	2001      	movs	r0, #1
 801a36c:	bd10      	pop	{r4, pc}

0801a36e <_ZN8touchgfx3HAL7noTouchEv>:
 801a36e:	b510      	push	{r4, lr}
 801a370:	f890 306f 	ldrb.w	r3, [r0, #111]	; 0x6f
 801a374:	4604      	mov	r4, r0
 801a376:	b153      	cbz	r3, 801a38e <_ZN8touchgfx3HAL7noTouchEv+0x20>
 801a378:	f8b0 3064 	ldrh.w	r3, [r0, #100]	; 0x64
 801a37c:	2101      	movs	r1, #1
 801a37e:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
 801a382:	301c      	adds	r0, #28
 801a384:	f00e fd30 	bl	8028de8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 801a388:	2300      	movs	r3, #0
 801a38a:	f884 306f 	strb.w	r3, [r4, #111]	; 0x6f
 801a38e:	bd10      	pop	{r4, pc}

0801a390 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 801a390:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a394:	b085      	sub	sp, #20
 801a396:	4604      	mov	r4, r0
 801a398:	2000      	movs	r0, #0
 801a39a:	4699      	mov	r9, r3
 801a39c:	ad04      	add	r5, sp, #16
 801a39e:	460f      	mov	r7, r1
 801a3a0:	4690      	mov	r8, r2
 801a3a2:	f845 0d04 	str.w	r0, [r5, #-4]!
 801a3a6:	69a0      	ldr	r0, [r4, #24]
 801a3a8:	6806      	ldr	r6, [r0, #0]
 801a3aa:	9501      	str	r5, [sp, #4]
 801a3ac:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 801a3b0:	9500      	str	r5, [sp, #0]
 801a3b2:	6835      	ldr	r5, [r6, #0]
 801a3b4:	47a8      	blx	r5
 801a3b6:	4d10      	ldr	r5, [pc, #64]	; (801a3f8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 801a3b8:	4606      	mov	r6, r0
 801a3ba:	f8a5 9000 	strh.w	r9, [r5]
 801a3be:	f7ea fb85 	bl	8004acc <_ZN8touchgfx3HAL3lcdEv>
 801a3c2:	6803      	ldr	r3, [r0, #0]
 801a3c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a3c6:	4798      	blx	r3
 801a3c8:	b128      	cbz	r0, 801a3d6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 801a3ca:	2801      	cmp	r0, #1
 801a3cc:	d00b      	beq.n	801a3e6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 801a3ce:	4630      	mov	r0, r6
 801a3d0:	b005      	add	sp, #20
 801a3d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a3d6:	882b      	ldrh	r3, [r5, #0]
 801a3d8:	fb08 7203 	mla	r2, r8, r3, r7
 801a3dc:	9b03      	ldr	r3, [sp, #12]
 801a3de:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 801a3e2:	63e3      	str	r3, [r4, #60]	; 0x3c
 801a3e4:	e7f3      	b.n	801a3ce <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 801a3e6:	882a      	ldrh	r2, [r5, #0]
 801a3e8:	9b03      	ldr	r3, [sp, #12]
 801a3ea:	fb08 7202 	mla	r2, r8, r2, r7
 801a3ee:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801a3f2:	1a9a      	subs	r2, r3, r2
 801a3f4:	63e2      	str	r2, [r4, #60]	; 0x3c
 801a3f6:	e7ea      	b.n	801a3ce <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 801a3f8:	24006fe6 	.word	0x24006fe6

0801a3fc <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 801a3fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a3fe:	b08b      	sub	sp, #44	; 0x2c
 801a400:	4617      	mov	r7, r2
 801a402:	4604      	mov	r4, r0
 801a404:	460e      	mov	r6, r1
 801a406:	461d      	mov	r5, r3
 801a408:	f7ea fb60 	bl	8004acc <_ZN8touchgfx3HAL3lcdEv>
 801a40c:	6803      	ldr	r3, [r0, #0]
 801a40e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a410:	4798      	blx	r3
 801a412:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 801a416:	9007      	str	r0, [sp, #28]
 801a418:	4631      	mov	r1, r6
 801a41a:	6822      	ldr	r2, [r4, #0]
 801a41c:	e9cd 0308 	strd	r0, r3, [sp, #32]
 801a420:	4b0c      	ldr	r3, [pc, #48]	; (801a454 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 801a422:	4620      	mov	r0, r4
 801a424:	881b      	ldrh	r3, [r3, #0]
 801a426:	9306      	str	r3, [sp, #24]
 801a428:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 801a42c:	9305      	str	r3, [sp, #20]
 801a42e:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 801a432:	9304      	str	r3, [sp, #16]
 801a434:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801a438:	9303      	str	r3, [sp, #12]
 801a43a:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801a43e:	9302      	str	r3, [sp, #8]
 801a440:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801a444:	e9cd 5300 	strd	r5, r3, [sp]
 801a448:	463b      	mov	r3, r7
 801a44a:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 801a44c:	2200      	movs	r2, #0
 801a44e:	47a8      	blx	r5
 801a450:	b00b      	add	sp, #44	; 0x2c
 801a452:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a454:	24006fe6 	.word	0x24006fe6

0801a458 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 801a458:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a45c:	4698      	mov	r8, r3
 801a45e:	6803      	ldr	r3, [r0, #0]
 801a460:	b08b      	sub	sp, #44	; 0x2c
 801a462:	4617      	mov	r7, r2
 801a464:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 801a466:	460e      	mov	r6, r1
 801a468:	4b13      	ldr	r3, [pc, #76]	; (801a4b8 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 801a46a:	4604      	mov	r4, r0
 801a46c:	f8b3 9000 	ldrh.w	r9, [r3]
 801a470:	f7ea fb2c 	bl	8004acc <_ZN8touchgfx3HAL3lcdEv>
 801a474:	6803      	ldr	r3, [r0, #0]
 801a476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a478:	4798      	blx	r3
 801a47a:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 801a47e:	2200      	movs	r2, #0
 801a480:	4631      	mov	r1, r6
 801a482:	e9cd 0308 	strd	r0, r3, [sp, #32]
 801a486:	2302      	movs	r3, #2
 801a488:	4620      	mov	r0, r4
 801a48a:	e9cd 9306 	strd	r9, r3, [sp, #24]
 801a48e:	2301      	movs	r3, #1
 801a490:	9305      	str	r3, [sp, #20]
 801a492:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 801a496:	9304      	str	r3, [sp, #16]
 801a498:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 801a49c:	9303      	str	r3, [sp, #12]
 801a49e:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 801a4a2:	9302      	str	r3, [sp, #8]
 801a4a4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801a4a8:	e9cd 8300 	strd	r8, r3, [sp]
 801a4ac:	463b      	mov	r3, r7
 801a4ae:	47a8      	blx	r5
 801a4b0:	b00b      	add	sp, #44	; 0x2c
 801a4b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a4b6:	bf00      	nop
 801a4b8:	24006fe6 	.word	0x24006fe6

0801a4bc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 801a4bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a4c0:	4698      	mov	r8, r3
 801a4c2:	6803      	ldr	r3, [r0, #0]
 801a4c4:	b087      	sub	sp, #28
 801a4c6:	460e      	mov	r6, r1
 801a4c8:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 801a4ca:	4617      	mov	r7, r2
 801a4cc:	4b0f      	ldr	r3, [pc, #60]	; (801a50c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 801a4ce:	4604      	mov	r4, r0
 801a4d0:	f8b3 9000 	ldrh.w	r9, [r3]
 801a4d4:	f7ea fafa 	bl	8004acc <_ZN8touchgfx3HAL3lcdEv>
 801a4d8:	6803      	ldr	r3, [r0, #0]
 801a4da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a4dc:	4798      	blx	r3
 801a4de:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 801a4e2:	463a      	mov	r2, r7
 801a4e4:	4631      	mov	r1, r6
 801a4e6:	f8cd 900c 	str.w	r9, [sp, #12]
 801a4ea:	e9cd 0304 	strd	r0, r3, [sp, #16]
 801a4ee:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 801a4f2:	4620      	mov	r0, r4
 801a4f4:	9302      	str	r3, [sp, #8]
 801a4f6:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 801a4fa:	9301      	str	r3, [sp, #4]
 801a4fc:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801a500:	9300      	str	r3, [sp, #0]
 801a502:	4643      	mov	r3, r8
 801a504:	47a8      	blx	r5
 801a506:	b007      	add	sp, #28
 801a508:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a50c:	24006fe6 	.word	0x24006fe6

0801a510 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 801a510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a514:	4604      	mov	r4, r0
 801a516:	b08f      	sub	sp, #60	; 0x3c
 801a518:	4610      	mov	r0, r2
 801a51a:	460d      	mov	r5, r1
 801a51c:	4691      	mov	r9, r2
 801a51e:	461e      	mov	r6, r3
 801a520:	f005 f97a 	bl	801f818 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 801a524:	2800      	cmp	r0, #0
 801a526:	f000 809d 	beq.w	801a664 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 801a52a:	6823      	ldr	r3, [r4, #0]
 801a52c:	4620      	mov	r0, r4
 801a52e:	f8df b198 	ldr.w	fp, [pc, #408]	; 801a6c8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 801a532:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 801a536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a538:	4798      	blx	r3
 801a53a:	6823      	ldr	r3, [r4, #0]
 801a53c:	4620      	mov	r0, r4
 801a53e:	f8df a18c 	ldr.w	sl, [pc, #396]	; 801a6cc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 801a542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a544:	4798      	blx	r3
 801a546:	f8bb 3000 	ldrh.w	r3, [fp]
 801a54a:	4f5c      	ldr	r7, [pc, #368]	; (801a6bc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 801a54c:	9301      	str	r3, [sp, #4]
 801a54e:	f8ba 3000 	ldrh.w	r3, [sl]
 801a552:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 801a556:	4640      	mov	r0, r8
 801a558:	9302      	str	r3, [sp, #8]
 801a55a:	883b      	ldrh	r3, [r7, #0]
 801a55c:	9303      	str	r3, [sp, #12]
 801a55e:	4b58      	ldr	r3, [pc, #352]	; (801a6c0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 801a560:	881a      	ldrh	r2, [r3, #0]
 801a562:	9305      	str	r3, [sp, #20]
 801a564:	9204      	str	r2, [sp, #16]
 801a566:	f005 fa9b 	bl	801faa0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801a56a:	8038      	strh	r0, [r7, #0]
 801a56c:	4640      	mov	r0, r8
 801a56e:	f005 facb 	bl	801fb08 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801a572:	9b05      	ldr	r3, [sp, #20]
 801a574:	b280      	uxth	r0, r0
 801a576:	8018      	strh	r0, [r3, #0]
 801a578:	4b52      	ldr	r3, [pc, #328]	; (801a6c4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 801a57a:	781b      	ldrb	r3, [r3, #0]
 801a57c:	2b00      	cmp	r3, #0
 801a57e:	d174      	bne.n	801a66a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 801a580:	883b      	ldrh	r3, [r7, #0]
 801a582:	f8aa 0000 	strh.w	r0, [sl]
 801a586:	f8ab 3000 	strh.w	r3, [fp]
 801a58a:	4648      	mov	r0, r9
 801a58c:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 801a590:	f005 f942 	bl	801f818 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 801a594:	2200      	movs	r2, #0
 801a596:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 801a59a:	4611      	mov	r1, r2
 801a59c:	4628      	mov	r0, r5
 801a59e:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 801a5a2:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 801a5a6:	f7ea ff86 	bl	80054b6 <_ZN8touchgfx8Drawable5setXYEss>
 801a5aa:	2301      	movs	r3, #1
 801a5ac:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 801a5b0:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 801a5b4:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 801a5b8:	2b00      	cmp	r3, #0
 801a5ba:	dd5c      	ble.n	801a676 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 801a5bc:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 801a5c0:	2b00      	cmp	r3, #0
 801a5c2:	dd58      	ble.n	801a676 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 801a5c4:	462a      	mov	r2, r5
 801a5c6:	ab0a      	add	r3, sp, #40	; 0x28
 801a5c8:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801a5cc:	6851      	ldr	r1, [r2, #4]
 801a5ce:	c303      	stmia	r3!, {r0, r1}
 801a5d0:	4631      	mov	r1, r6
 801a5d2:	a80a      	add	r0, sp, #40	; 0x28
 801a5d4:	f7ff fbf6 	bl	8019dc4 <_ZN8touchgfx4RectaNERKS0_>
 801a5d8:	4b38      	ldr	r3, [pc, #224]	; (801a6bc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 801a5da:	2100      	movs	r1, #0
 801a5dc:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a5e0:	4b37      	ldr	r3, [pc, #220]	; (801a6c0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 801a5e2:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 801a5e6:	aa0a      	add	r2, sp, #40	; 0x28
 801a5e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a5ec:	910c      	str	r1, [sp, #48]	; 0x30
 801a5ee:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801a5f2:	ab08      	add	r3, sp, #32
 801a5f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a5f8:	e883 0003 	stmia.w	r3, {r0, r1}
 801a5fc:	4618      	mov	r0, r3
 801a5fe:	a90c      	add	r1, sp, #48	; 0x30
 801a600:	f7ff fbe0 	bl	8019dc4 <_ZN8touchgfx4RectaNERKS0_>
 801a604:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 801a606:	2b00      	cmp	r3, #0
 801a608:	d13c      	bne.n	801a684 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 801a60a:	2000      	movs	r0, #0
 801a60c:	f884 0058 	strb.w	r0, [r4, #88]	; 0x58
 801a610:	2600      	movs	r6, #0
 801a612:	696b      	ldr	r3, [r5, #20]
 801a614:	a908      	add	r1, sp, #32
 801a616:	682a      	ldr	r2, [r5, #0]
 801a618:	4628      	mov	r0, r5
 801a61a:	9305      	str	r3, [sp, #20]
 801a61c:	616e      	str	r6, [r5, #20]
 801a61e:	6892      	ldr	r2, [r2, #8]
 801a620:	4790      	blx	r2
 801a622:	9b05      	ldr	r3, [sp, #20]
 801a624:	4652      	mov	r2, sl
 801a626:	4649      	mov	r1, r9
 801a628:	616b      	str	r3, [r5, #20]
 801a62a:	4628      	mov	r0, r5
 801a62c:	f884 6058 	strb.w	r6, [r4, #88]	; 0x58
 801a630:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 801a634:	f7ea ff3f 	bl	80054b6 <_ZN8touchgfx8Drawable5setXYEss>
 801a638:	9a01      	ldr	r2, [sp, #4]
 801a63a:	4b23      	ldr	r3, [pc, #140]	; (801a6c8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 801a63c:	4620      	mov	r0, r4
 801a63e:	801a      	strh	r2, [r3, #0]
 801a640:	9a02      	ldr	r2, [sp, #8]
 801a642:	4b22      	ldr	r3, [pc, #136]	; (801a6cc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 801a644:	801a      	strh	r2, [r3, #0]
 801a646:	9a03      	ldr	r2, [sp, #12]
 801a648:	4b1c      	ldr	r3, [pc, #112]	; (801a6bc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 801a64a:	801a      	strh	r2, [r3, #0]
 801a64c:	4b1c      	ldr	r3, [pc, #112]	; (801a6c0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 801a64e:	9a04      	ldr	r2, [sp, #16]
 801a650:	801a      	strh	r2, [r3, #0]
 801a652:	6823      	ldr	r3, [r4, #0]
 801a654:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 801a658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a65a:	4798      	blx	r3
 801a65c:	6823      	ldr	r3, [r4, #0]
 801a65e:	4620      	mov	r0, r4
 801a660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a662:	4798      	blx	r3
 801a664:	b00f      	add	sp, #60	; 0x3c
 801a666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a66a:	883b      	ldrh	r3, [r7, #0]
 801a66c:	f8ab 0000 	strh.w	r0, [fp]
 801a670:	f8aa 3000 	strh.w	r3, [sl]
 801a674:	e789      	b.n	801a58a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 801a676:	462a      	mov	r2, r5
 801a678:	ab0a      	add	r3, sp, #40	; 0x28
 801a67a:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801a67e:	6851      	ldr	r1, [r2, #4]
 801a680:	c303      	stmia	r3!, {r0, r1}
 801a682:	e7a9      	b.n	801a5d8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 801a684:	a807      	add	r0, sp, #28
 801a686:	f005 faf7 	bl	801fc78 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801a68a:	4606      	mov	r6, r0
 801a68c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 801a68e:	6803      	ldr	r3, [r0, #0]
 801a690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a692:	4798      	blx	r3
 801a694:	4286      	cmp	r6, r0
 801a696:	d1b8      	bne.n	801a60a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 801a698:	f7ea fa18 	bl	8004acc <_ZN8touchgfx3HAL3lcdEv>
 801a69c:	6803      	ldr	r3, [r0, #0]
 801a69e:	4606      	mov	r6, r0
 801a6a0:	a807      	add	r0, sp, #28
 801a6a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a6a4:	9305      	str	r3, [sp, #20]
 801a6a6:	f005 fae7 	bl	801fc78 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801a6aa:	9b05      	ldr	r3, [sp, #20]
 801a6ac:	4601      	mov	r1, r0
 801a6ae:	4630      	mov	r0, r6
 801a6b0:	4798      	blx	r3
 801a6b2:	f080 0001 	eor.w	r0, r0, #1
 801a6b6:	b2c0      	uxtb	r0, r0
 801a6b8:	e7a8      	b.n	801a60c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 801a6ba:	bf00      	nop
 801a6bc:	24006fe0 	.word	0x24006fe0
 801a6c0:	24006fe2 	.word	0x24006fe2
 801a6c4:	24006fe4 	.word	0x24006fe4
 801a6c8:	24006fe6 	.word	0x24006fe6
 801a6cc:	24006fe8 	.word	0x24006fe8

0801a6d0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 801a6d0:	4b07      	ldr	r3, [pc, #28]	; (801a6f0 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 801a6d2:	b510      	push	{r4, lr}
 801a6d4:	781b      	ldrb	r3, [r3, #0]
 801a6d6:	4604      	mov	r4, r0
 801a6d8:	b13b      	cbz	r3, 801a6ea <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801a6da:	6803      	ldr	r3, [r0, #0]
 801a6dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a6de:	4798      	blx	r3
 801a6e0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801a6e2:	4283      	cmp	r3, r0
 801a6e4:	d101      	bne.n	801a6ea <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801a6e6:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801a6e8:	bd10      	pop	{r4, pc}
 801a6ea:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 801a6ec:	e7fc      	b.n	801a6e8 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 801a6ee:	bf00      	nop
 801a6f0:	24006fea 	.word	0x24006fea

0801a6f4 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 801a6f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a6f8:	461d      	mov	r5, r3
 801a6fa:	b08a      	sub	sp, #40	; 0x28
 801a6fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a700:	4690      	mov	r8, r2
 801a702:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 801a706:	2400      	movs	r4, #0
 801a708:	4607      	mov	r7, r0
 801a70a:	fb06 8505 	mla	r5, r6, r5, r8
 801a70e:	9404      	str	r4, [sp, #16]
 801a710:	f88d 4020 	strb.w	r4, [sp, #32]
 801a714:	e9cd 3101 	strd	r3, r1, [sp, #4]
 801a718:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801a71c:	f8ad 3018 	strh.w	r3, [sp, #24]
 801a720:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801a724:	f8ad 301a 	strh.w	r3, [sp, #26]
 801a728:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801a72c:	f8ad 301c 	strh.w	r3, [sp, #28]
 801a730:	f7ff ffce 	bl	801a6d0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801a734:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801a738:	6878      	ldr	r0, [r7, #4]
 801a73a:	f8ad 601e 	strh.w	r6, [sp, #30]
 801a73e:	a901      	add	r1, sp, #4
 801a740:	9505      	str	r5, [sp, #20]
 801a742:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 801a746:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 801a74a:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 801a74e:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 801a752:	6803      	ldr	r3, [r0, #0]
 801a754:	685b      	ldr	r3, [r3, #4]
 801a756:	4798      	blx	r3
 801a758:	b00a      	add	sp, #40	; 0x28
 801a75a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a75e <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 801a75e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a762:	b08b      	sub	sp, #44	; 0x2c
 801a764:	2400      	movs	r4, #0
 801a766:	4691      	mov	r9, r2
 801a768:	461d      	mov	r5, r3
 801a76a:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 801a76e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801a772:	4688      	mov	r8, r1
 801a774:	4607      	mov	r7, r0
 801a776:	9404      	str	r4, [sp, #16]
 801a778:	fb06 9505 	mla	r5, r6, r5, r9
 801a77c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a780:	f7ff ffa6 	bl	801a6d0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801a784:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801a788:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801a78c:	6878      	ldr	r0, [r7, #4]
 801a78e:	f8ad 3018 	strh.w	r3, [sp, #24]
 801a792:	a901      	add	r1, sp, #4
 801a794:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 801a798:	9505      	str	r5, [sp, #20]
 801a79a:	f8ad 301a 	strh.w	r3, [sp, #26]
 801a79e:	f8ad 401c 	strh.w	r4, [sp, #28]
 801a7a2:	f8ad 601e 	strh.w	r6, [sp, #30]
 801a7a6:	f8cd 8010 	str.w	r8, [sp, #16]
 801a7aa:	f8ad 4020 	strh.w	r4, [sp, #32]
 801a7ae:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 801a7b2:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 801a7b6:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 801a7ba:	6803      	ldr	r3, [r0, #0]
 801a7bc:	685b      	ldr	r3, [r3, #4]
 801a7be:	4798      	blx	r3
 801a7c0:	b00b      	add	sp, #44	; 0x2c
 801a7c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0801a7c8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 801a7c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a7cc:	b08a      	sub	sp, #40	; 0x28
 801a7ce:	4698      	mov	r8, r3
 801a7d0:	2300      	movs	r3, #0
 801a7d2:	4606      	mov	r6, r0
 801a7d4:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 801a7d8:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 801a7dc:	2d0b      	cmp	r5, #11
 801a7de:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 801a7e2:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
 801a7e6:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
 801a7ea:	9304      	str	r3, [sp, #16]
 801a7ec:	d137      	bne.n	801a85e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 801a7ee:	2380      	movs	r3, #128	; 0x80
 801a7f0:	f88d 0020 	strb.w	r0, [sp, #32]
 801a7f4:	4630      	mov	r0, r6
 801a7f6:	9203      	str	r2, [sp, #12]
 801a7f8:	e9cd 3101 	strd	r3, r1, [sp, #4]
 801a7fc:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801a800:	f8ad 3018 	strh.w	r3, [sp, #24]
 801a804:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801a808:	f8ad 301a 	strh.w	r3, [sp, #26]
 801a80c:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 801a810:	f8ad 301c 	strh.w	r3, [sp, #28]
 801a814:	f7ff ff5c 	bl	801a6d0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801a818:	2c0b      	cmp	r4, #11
 801a81a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 801a81e:	f8ad 701e 	strh.w	r7, [sp, #30]
 801a822:	bf94      	ite	ls
 801a824:	4b19      	ldrls	r3, [pc, #100]	; (801a88c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 801a826:	2100      	movhi	r1, #0
 801a828:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 801a82c:	bf98      	it	ls
 801a82e:	5d19      	ldrbls	r1, [r3, r4]
 801a830:	fb02 8307 	mla	r3, r2, r7, r8
 801a834:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 801a838:	10c9      	asrs	r1, r1, #3
 801a83a:	fb01 0003 	mla	r0, r1, r3, r0
 801a83e:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 801a842:	a901      	add	r1, sp, #4
 801a844:	9005      	str	r0, [sp, #20]
 801a846:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 801a84a:	2300      	movs	r3, #0
 801a84c:	6870      	ldr	r0, [r6, #4]
 801a84e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801a852:	6803      	ldr	r3, [r0, #0]
 801a854:	685b      	ldr	r3, [r3, #4]
 801a856:	4798      	blx	r3
 801a858:	b00a      	add	sp, #40	; 0x28
 801a85a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a85e:	2d02      	cmp	r5, #2
 801a860:	d109      	bne.n	801a876 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 801a862:	28ff      	cmp	r0, #255	; 0xff
 801a864:	d105      	bne.n	801a872 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 801a866:	f1bc 0f00 	cmp.w	ip, #0
 801a86a:	bf14      	ite	ne
 801a86c:	2340      	movne	r3, #64	; 0x40
 801a86e:	2320      	moveq	r3, #32
 801a870:	e7be      	b.n	801a7f0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801a872:	2340      	movs	r3, #64	; 0x40
 801a874:	e7bc      	b.n	801a7f0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801a876:	28ff      	cmp	r0, #255	; 0xff
 801a878:	d105      	bne.n	801a886 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 801a87a:	f1bc 0f00 	cmp.w	ip, #0
 801a87e:	bf14      	ite	ne
 801a880:	2304      	movne	r3, #4
 801a882:	2301      	moveq	r3, #1
 801a884:	e7b4      	b.n	801a7f0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801a886:	2304      	movs	r3, #4
 801a888:	e7b2      	b.n	801a7f0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801a88a:	bf00      	nop
 801a88c:	0802baa0 	.word	0x0802baa0

0801a890 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 801a890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a894:	b08b      	sub	sp, #44	; 0x2c
 801a896:	461d      	mov	r5, r3
 801a898:	2400      	movs	r4, #0
 801a89a:	4688      	mov	r8, r1
 801a89c:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 801a8a0:	4693      	mov	fp, r2
 801a8a2:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
 801a8a6:	4607      	mov	r7, r0
 801a8a8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801a8ac:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
 801a8b0:	9404      	str	r4, [sp, #16]
 801a8b2:	bf14      	ite	ne
 801a8b4:	2308      	movne	r3, #8
 801a8b6:	2302      	moveq	r3, #2
 801a8b8:	fb05 b50a 	mla	r5, r5, sl, fp
 801a8bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a8c0:	f7ff ff06 	bl	801a6d0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801a8c4:	2e0b      	cmp	r6, #11
 801a8c6:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801a8ca:	a901      	add	r1, sp, #4
 801a8cc:	bf98      	it	ls
 801a8ce:	4b13      	ldrls	r3, [pc, #76]	; (801a91c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 801a8d0:	f8ad a01e 	strh.w	sl, [sp, #30]
 801a8d4:	bf98      	it	ls
 801a8d6:	5d9c      	ldrbls	r4, [r3, r6]
 801a8d8:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 801a8dc:	10e4      	asrs	r4, r4, #3
 801a8de:	f8cd 8010 	str.w	r8, [sp, #16]
 801a8e2:	f8ad 3018 	strh.w	r3, [sp, #24]
 801a8e6:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 801a8ea:	fb04 0405 	mla	r4, r4, r5, r0
 801a8ee:	6878      	ldr	r0, [r7, #4]
 801a8f0:	f8ad 301a 	strh.w	r3, [sp, #26]
 801a8f4:	2300      	movs	r3, #0
 801a8f6:	9405      	str	r4, [sp, #20]
 801a8f8:	f8ad 301c 	strh.w	r3, [sp, #28]
 801a8fc:	f88d 9020 	strb.w	r9, [sp, #32]
 801a900:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 801a904:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801a908:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
 801a90c:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
 801a910:	6803      	ldr	r3, [r0, #0]
 801a912:	685b      	ldr	r3, [r3, #4]
 801a914:	4798      	blx	r3
 801a916:	b00b      	add	sp, #44	; 0x2c
 801a918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a91c:	0802baa0 	.word	0x0802baa0

0801a920 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 801a920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a924:	461e      	mov	r6, r3
 801a926:	4b0a      	ldr	r3, [pc, #40]	; (801a950 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 801a928:	460f      	mov	r7, r1
 801a92a:	4690      	mov	r8, r2
 801a92c:	881d      	ldrh	r5, [r3, #0]
 801a92e:	f7ea f8cd 	bl	8004acc <_ZN8touchgfx3HAL3lcdEv>
 801a932:	6803      	ldr	r3, [r0, #0]
 801a934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a936:	4798      	blx	r3
 801a938:	280b      	cmp	r0, #11
 801a93a:	bf96      	itet	ls
 801a93c:	4b05      	ldrls	r3, [pc, #20]	; (801a954 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 801a93e:	2400      	movhi	r4, #0
 801a940:	5c1c      	ldrbls	r4, [r3, r0]
 801a942:	fb08 7005 	mla	r0, r8, r5, r7
 801a946:	10e4      	asrs	r4, r4, #3
 801a948:	fb04 6000 	mla	r0, r4, r0, r6
 801a94c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a950:	24006fe6 	.word	0x24006fe6
 801a954:	0802baa0 	.word	0x0802baa0

0801a958 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 801a958:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a95a:	b08b      	sub	sp, #44	; 0x2c
 801a95c:	461f      	mov	r7, r3
 801a95e:	4604      	mov	r4, r0
 801a960:	4616      	mov	r6, r2
 801a962:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 801a966:	2500      	movs	r5, #0
 801a968:	e9cd 3101 	strd	r3, r1, [sp, #4]
 801a96c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801a970:	9504      	str	r5, [sp, #16]
 801a972:	f8ad 3018 	strh.w	r3, [sp, #24]
 801a976:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801a97a:	f8ad 301a 	strh.w	r3, [sp, #26]
 801a97e:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801a982:	f8ad 301c 	strh.w	r3, [sp, #28]
 801a986:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 801a98a:	f88d 3020 	strb.w	r3, [sp, #32]
 801a98e:	f7ff fe9f 	bl	801a6d0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801a992:	463a      	mov	r2, r7
 801a994:	4631      	mov	r1, r6
 801a996:	4603      	mov	r3, r0
 801a998:	4620      	mov	r0, r4
 801a99a:	f7ff ffc1 	bl	801a920 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801a99e:	4b0e      	ldr	r3, [pc, #56]	; (801a9d8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 801a9a0:	9005      	str	r0, [sp, #20]
 801a9a2:	881b      	ldrh	r3, [r3, #0]
 801a9a4:	f8ad 301e 	strh.w	r3, [sp, #30]
 801a9a8:	f7ea f890 	bl	8004acc <_ZN8touchgfx3HAL3lcdEv>
 801a9ac:	6803      	ldr	r3, [r0, #0]
 801a9ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a9b0:	4798      	blx	r3
 801a9b2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801a9b4:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 801a9b8:	a901      	add	r1, sp, #4
 801a9ba:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 801a9be:	9304      	str	r3, [sp, #16]
 801a9c0:	6860      	ldr	r0, [r4, #4]
 801a9c2:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 801a9c6:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 801a9ca:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 801a9ce:	6803      	ldr	r3, [r0, #0]
 801a9d0:	685b      	ldr	r3, [r3, #4]
 801a9d2:	4798      	blx	r3
 801a9d4:	b00b      	add	sp, #44	; 0x2c
 801a9d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a9d8:	24006fe6 	.word	0x24006fe6

0801a9dc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 801a9dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a9de:	b08d      	sub	sp, #52	; 0x34
 801a9e0:	2501      	movs	r5, #1
 801a9e2:	4604      	mov	r4, r0
 801a9e4:	466b      	mov	r3, sp
 801a9e6:	9503      	str	r5, [sp, #12]
 801a9e8:	e883 0006 	stmia.w	r3, {r1, r2}
 801a9ec:	2300      	movs	r3, #0
 801a9ee:	f8bd 6000 	ldrh.w	r6, [sp]
 801a9f2:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 801a9f6:	9306      	str	r3, [sp, #24]
 801a9f8:	6803      	ldr	r3, [r0, #0]
 801a9fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a9fc:	4798      	blx	r3
 801a9fe:	463a      	mov	r2, r7
 801aa00:	4631      	mov	r1, r6
 801aa02:	4603      	mov	r3, r0
 801aa04:	4620      	mov	r0, r4
 801aa06:	f7ff ff8b 	bl	801a920 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801aa0a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801aa0c:	9004      	str	r0, [sp, #16]
 801aa0e:	9307      	str	r3, [sp, #28]
 801aa10:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801aa14:	f8ad 3020 	strh.w	r3, [sp, #32]
 801aa18:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801aa1c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801aa20:	4b0e      	ldr	r3, [pc, #56]	; (801aa5c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 801aa22:	881b      	ldrh	r3, [r3, #0]
 801aa24:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801aa28:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801aa2c:	f7ea f84e 	bl	8004acc <_ZN8touchgfx3HAL3lcdEv>
 801aa30:	6803      	ldr	r3, [r0, #0]
 801aa32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801aa34:	4798      	blx	r3
 801aa36:	23ff      	movs	r3, #255	; 0xff
 801aa38:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 801aa3c:	a903      	add	r1, sp, #12
 801aa3e:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 801aa42:	6860      	ldr	r0, [r4, #4]
 801aa44:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 801aa48:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 801aa4c:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 801aa50:	6803      	ldr	r3, [r0, #0]
 801aa52:	685b      	ldr	r3, [r3, #4]
 801aa54:	4798      	blx	r3
 801aa56:	6c60      	ldr	r0, [r4, #68]	; 0x44
 801aa58:	b00d      	add	sp, #52	; 0x34
 801aa5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801aa5c:	24006fe6 	.word	0x24006fe6

0801aa60 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 801aa60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aa64:	b08c      	sub	sp, #48	; 0x30
 801aa66:	461e      	mov	r6, r3
 801aa68:	2300      	movs	r3, #0
 801aa6a:	4604      	mov	r4, r0
 801aa6c:	466d      	mov	r5, sp
 801aa6e:	9306      	str	r3, [sp, #24]
 801aa70:	6803      	ldr	r3, [r0, #0]
 801aa72:	e885 0006 	stmia.w	r5, {r1, r2}
 801aa76:	2501      	movs	r5, #1
 801aa78:	f8bd 7000 	ldrh.w	r7, [sp]
 801aa7c:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 801aa80:	9503      	str	r5, [sp, #12]
 801aa82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801aa84:	4798      	blx	r3
 801aa86:	4642      	mov	r2, r8
 801aa88:	4639      	mov	r1, r7
 801aa8a:	4603      	mov	r3, r0
 801aa8c:	4620      	mov	r0, r4
 801aa8e:	f7ff ff47 	bl	801a920 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801aa92:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801aa96:	9004      	str	r0, [sp, #16]
 801aa98:	f8ad 3020 	strh.w	r3, [sp, #32]
 801aa9c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801aaa0:	9607      	str	r6, [sp, #28]
 801aaa2:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801aaa6:	4b10      	ldr	r3, [pc, #64]	; (801aae8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 801aaa8:	881b      	ldrh	r3, [r3, #0]
 801aaaa:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801aaae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801aab0:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801aab4:	f7ea f80a 	bl	8004acc <_ZN8touchgfx3HAL3lcdEv>
 801aab8:	6803      	ldr	r3, [r0, #0]
 801aaba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801aabc:	4798      	blx	r3
 801aabe:	23ff      	movs	r3, #255	; 0xff
 801aac0:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 801aac4:	a903      	add	r1, sp, #12
 801aac6:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 801aaca:	6860      	ldr	r0, [r4, #4]
 801aacc:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 801aad0:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 801aad4:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 801aad8:	6803      	ldr	r3, [r0, #0]
 801aada:	685b      	ldr	r3, [r3, #4]
 801aadc:	4798      	blx	r3
 801aade:	4630      	mov	r0, r6
 801aae0:	b00c      	add	sp, #48	; 0x30
 801aae2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aae6:	bf00      	nop
 801aae8:	24006fe6 	.word	0x24006fe6

0801aaec <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 801aaec:	b5f0      	push	{r4, r5, r6, r7, lr}
 801aaee:	b085      	sub	sp, #20
 801aaf0:	4605      	mov	r5, r0
 801aaf2:	ac02      	add	r4, sp, #8
 801aaf4:	e884 0006 	stmia.w	r4, {r1, r2}
 801aaf8:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 801aafc:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 801ab00:	f7ff fde6 	bl	801a6d0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801ab04:	4631      	mov	r1, r6
 801ab06:	4603      	mov	r3, r0
 801ab08:	463a      	mov	r2, r7
 801ab0a:	4628      	mov	r0, r5
 801ab0c:	f7ff ff08 	bl	801a920 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801ab10:	4a05      	ldr	r2, [pc, #20]	; (801ab28 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 801ab12:	682b      	ldr	r3, [r5, #0]
 801ab14:	8812      	ldrh	r2, [r2, #0]
 801ab16:	9200      	str	r2, [sp, #0]
 801ab18:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 801ab1a:	4603      	mov	r3, r0
 801ab1c:	4628      	mov	r0, r5
 801ab1e:	e894 0006 	ldmia.w	r4, {r1, r2}
 801ab22:	47b0      	blx	r6
 801ab24:	b005      	add	sp, #20
 801ab26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ab28:	24006fe6 	.word	0x24006fe6

0801ab2c <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 801ab2c:	b570      	push	{r4, r5, r6, lr}
 801ab2e:	f890 306e 	ldrb.w	r3, [r0, #110]	; 0x6e
 801ab32:	4604      	mov	r4, r0
 801ab34:	b19b      	cbz	r3, 801ab5e <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 801ab36:	2002      	movs	r0, #2
 801ab38:	f7e7 fd98 	bl	800266c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 801ab3c:	2300      	movs	r3, #0
 801ab3e:	4620      	mov	r0, r4
 801ab40:	f884 306e 	strb.w	r3, [r4, #110]	; 0x6e
 801ab44:	f884 306d 	strb.w	r3, [r4, #109]	; 0x6d
 801ab48:	6823      	ldr	r3, [r4, #0]
 801ab4a:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 801ab4e:	f7ff fdbf 	bl	801a6d0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801ab52:	4601      	mov	r1, r0
 801ab54:	4620      	mov	r0, r4
 801ab56:	462b      	mov	r3, r5
 801ab58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ab5c:	4718      	bx	r3
 801ab5e:	bd70      	pop	{r4, r5, r6, pc}

0801ab60 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 801ab60:	b538      	push	{r3, r4, r5, lr}
 801ab62:	f890 307b 	ldrb.w	r3, [r0, #123]	; 0x7b
 801ab66:	4604      	mov	r4, r0
 801ab68:	460d      	mov	r5, r1
 801ab6a:	428b      	cmp	r3, r1
 801ab6c:	d006      	beq.n	801ab7c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 801ab6e:	6803      	ldr	r3, [r0, #0]
 801ab70:	b929      	cbnz	r1, 801ab7e <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 801ab72:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 801ab76:	4798      	blx	r3
 801ab78:	f884 507b 	strb.w	r5, [r4, #123]	; 0x7b
 801ab7c:	bd38      	pop	{r3, r4, r5, pc}
 801ab7e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 801ab82:	e7f8      	b.n	801ab76 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

0801ab84 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 801ab84:	4b0d      	ldr	r3, [pc, #52]	; (801abbc <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 801ab86:	b510      	push	{r4, lr}
 801ab88:	781b      	ldrb	r3, [r3, #0]
 801ab8a:	4604      	mov	r4, r0
 801ab8c:	b95b      	cbnz	r3, 801aba6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801ab8e:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 801ab92:	2b02      	cmp	r3, #2
 801ab94:	d007      	beq.n	801aba6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801ab96:	6840      	ldr	r0, [r0, #4]
 801ab98:	f000 f90e 	bl	801adb8 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 801ab9c:	b118      	cbz	r0, 801aba6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801ab9e:	6862      	ldr	r2, [r4, #4]
 801aba0:	7a53      	ldrb	r3, [r2, #9]
 801aba2:	2b00      	cmp	r3, #0
 801aba4:	d0fc      	beq.n	801aba0 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 801aba6:	f7e8 f85d 	bl	8002c64 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801abaa:	4620      	mov	r0, r4
 801abac:	2100      	movs	r1, #0
 801abae:	f7ff ffd7 	bl	801ab60 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 801abb2:	4620      	mov	r0, r4
 801abb4:	f7ff fd8c 	bl	801a6d0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801abb8:	bd10      	pop	{r4, pc}
 801abba:	bf00      	nop
 801abbc:	24006fea 	.word	0x24006fea

0801abc0 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 801abc0:	4770      	bx	lr

0801abc2 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 801abc2:	2000      	movs	r0, #0
 801abc4:	4770      	bx	lr

0801abc6 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 801abc6:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 801abca:	1a13      	subs	r3, r2, r0
 801abcc:	4258      	negs	r0, r3
 801abce:	4158      	adcs	r0, r3
 801abd0:	4770      	bx	lr

0801abd2 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 801abd2:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 801abd6:	1a9b      	subs	r3, r3, r2
 801abd8:	2b00      	cmp	r3, #0
 801abda:	bfdc      	itt	le
 801abdc:	6882      	ldrle	r2, [r0, #8]
 801abde:	189b      	addle	r3, r3, r2
 801abe0:	2b01      	cmp	r3, #1
 801abe2:	bfcc      	ite	gt
 801abe4:	2000      	movgt	r0, #0
 801abe6:	2001      	movle	r0, #1
 801abe8:	4770      	bx	lr

0801abea <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 801abea:	6902      	ldr	r2, [r0, #16]
 801abec:	6843      	ldr	r3, [r0, #4]
 801abee:	2024      	movs	r0, #36	; 0x24
 801abf0:	fb00 3002 	mla	r0, r0, r2, r3
 801abf4:	4770      	bx	lr

0801abf6 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 801abf6:	6803      	ldr	r3, [r0, #0]
 801abf8:	691b      	ldr	r3, [r3, #16]
 801abfa:	4718      	bx	r3

0801abfc <_ZN8touchgfx13DMA_Interface7executeEv>:
 801abfc:	2301      	movs	r3, #1
 801abfe:	b570      	push	{r4, r5, r6, lr}
 801ac00:	7203      	strb	r3, [r0, #8]
 801ac02:	4604      	mov	r4, r0
 801ac04:	6840      	ldr	r0, [r0, #4]
 801ac06:	6803      	ldr	r3, [r0, #0]
 801ac08:	699b      	ldr	r3, [r3, #24]
 801ac0a:	4798      	blx	r3
 801ac0c:	6803      	ldr	r3, [r0, #0]
 801ac0e:	4605      	mov	r5, r0
 801ac10:	2b40      	cmp	r3, #64	; 0x40
 801ac12:	d00c      	beq.n	801ac2e <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801ac14:	d810      	bhi.n	801ac38 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 801ac16:	2b04      	cmp	r3, #4
 801ac18:	d01d      	beq.n	801ac56 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 801ac1a:	d804      	bhi.n	801ac26 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 801ac1c:	2b01      	cmp	r3, #1
 801ac1e:	d006      	beq.n	801ac2e <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801ac20:	2b02      	cmp	r3, #2
 801ac22:	d02c      	beq.n	801ac7e <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 801ac24:	bd70      	pop	{r4, r5, r6, pc}
 801ac26:	2b08      	cmp	r3, #8
 801ac28:	d01d      	beq.n	801ac66 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 801ac2a:	2b20      	cmp	r3, #32
 801ac2c:	d1fa      	bne.n	801ac24 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 801ac2e:	6823      	ldr	r3, [r4, #0]
 801ac30:	4620      	mov	r0, r4
 801ac32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ac34:	4798      	blx	r3
 801ac36:	e013      	b.n	801ac60 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 801ac38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801ac3c:	d0f7      	beq.n	801ac2e <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801ac3e:	d804      	bhi.n	801ac4a <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 801ac40:	2b80      	cmp	r3, #128	; 0x80
 801ac42:	d0f4      	beq.n	801ac2e <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801ac44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801ac48:	e7f0      	b.n	801ac2c <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 801ac4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801ac4e:	d0ee      	beq.n	801ac2e <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801ac50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801ac54:	e7e5      	b.n	801ac22 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 801ac56:	6823      	ldr	r3, [r4, #0]
 801ac58:	7f01      	ldrb	r1, [r0, #28]
 801ac5a:	4620      	mov	r0, r4
 801ac5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ac5e:	4798      	blx	r3
 801ac60:	6823      	ldr	r3, [r4, #0]
 801ac62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ac64:	e006      	b.n	801ac74 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 801ac66:	6823      	ldr	r3, [r4, #0]
 801ac68:	7f01      	ldrb	r1, [r0, #28]
 801ac6a:	4620      	mov	r0, r4
 801ac6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ac6e:	4798      	blx	r3
 801ac70:	6823      	ldr	r3, [r4, #0]
 801ac72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ac74:	4629      	mov	r1, r5
 801ac76:	4620      	mov	r0, r4
 801ac78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ac7c:	4718      	bx	r3
 801ac7e:	6823      	ldr	r3, [r4, #0]
 801ac80:	4620      	mov	r0, r4
 801ac82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ac84:	4798      	blx	r3
 801ac86:	e7f3      	b.n	801ac70 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

0801ac88 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 801ac88:	4770      	bx	lr

0801ac8a <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 801ac8a:	4770      	bx	lr

0801ac8c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 801ac8c:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 801ac90:	b510      	push	{r4, lr}
 801ac92:	1ad2      	subs	r2, r2, r3
 801ac94:	2a00      	cmp	r2, #0
 801ac96:	bfdc      	itt	le
 801ac98:	6884      	ldrle	r4, [r0, #8]
 801ac9a:	1912      	addle	r2, r2, r4
 801ac9c:	2a01      	cmp	r2, #1
 801ac9e:	dd16      	ble.n	801acce <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 801aca0:	6842      	ldr	r2, [r0, #4]
 801aca2:	2424      	movs	r4, #36	; 0x24
 801aca4:	fb04 2303 	mla	r3, r4, r3, r2
 801aca8:	f101 0220 	add.w	r2, r1, #32
 801acac:	f851 4b04 	ldr.w	r4, [r1], #4
 801acb0:	4291      	cmp	r1, r2
 801acb2:	f843 4b04 	str.w	r4, [r3], #4
 801acb6:	d1f9      	bne.n	801acac <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 801acb8:	780a      	ldrb	r2, [r1, #0]
 801acba:	701a      	strb	r2, [r3, #0]
 801acbc:	68c3      	ldr	r3, [r0, #12]
 801acbe:	6882      	ldr	r2, [r0, #8]
 801acc0:	f3bf 8f5b 	dmb	ish
 801acc4:	3301      	adds	r3, #1
 801acc6:	429a      	cmp	r2, r3
 801acc8:	bfd8      	it	le
 801acca:	1a9b      	suble	r3, r3, r2
 801accc:	60c3      	str	r3, [r0, #12]
 801acce:	bd10      	pop	{r4, pc}

0801acd0 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 801acd0:	6903      	ldr	r3, [r0, #16]
 801acd2:	6882      	ldr	r2, [r0, #8]
 801acd4:	f3bf 8f5b 	dmb	ish
 801acd8:	3301      	adds	r3, #1
 801acda:	429a      	cmp	r2, r3
 801acdc:	bfd8      	it	le
 801acde:	1a9b      	suble	r3, r3, r2
 801ace0:	6103      	str	r3, [r0, #16]
 801ace2:	4770      	bx	lr

0801ace4 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 801ace4:	b570      	push	{r4, r5, r6, lr}
 801ace6:	4604      	mov	r4, r0
 801ace8:	460e      	mov	r6, r1
 801acea:	6860      	ldr	r0, [r4, #4]
 801acec:	6803      	ldr	r3, [r0, #0]
 801acee:	685b      	ldr	r3, [r3, #4]
 801acf0:	4798      	blx	r3
 801acf2:	2800      	cmp	r0, #0
 801acf4:	d1f9      	bne.n	801acea <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 801acf6:	4d0d      	ldr	r5, [pc, #52]	; (801ad2c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 801acf8:	6828      	ldr	r0, [r5, #0]
 801acfa:	6803      	ldr	r3, [r0, #0]
 801acfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801acfe:	4798      	blx	r3
 801ad00:	f7e7 ffca 	bl	8002c98 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 801ad04:	6828      	ldr	r0, [r5, #0]
 801ad06:	2101      	movs	r1, #1
 801ad08:	f7ff ff2a 	bl	801ab60 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 801ad0c:	6860      	ldr	r0, [r4, #4]
 801ad0e:	4631      	mov	r1, r6
 801ad10:	6803      	ldr	r3, [r0, #0]
 801ad12:	689b      	ldr	r3, [r3, #8]
 801ad14:	4798      	blx	r3
 801ad16:	6823      	ldr	r3, [r4, #0]
 801ad18:	4620      	mov	r0, r4
 801ad1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ad1c:	4798      	blx	r3
 801ad1e:	6828      	ldr	r0, [r5, #0]
 801ad20:	6803      	ldr	r3, [r0, #0]
 801ad22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ad26:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801ad28:	4718      	bx	r3
 801ad2a:	bf00      	nop
 801ad2c:	24006fec 	.word	0x24006fec

0801ad30 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 801ad30:	b508      	push	{r3, lr}
 801ad32:	f7e7 ff97 	bl	8002c64 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801ad36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801ad3a:	f7e7 bfa1 	b.w	8002c80 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801ad3e <_ZN8touchgfx13DMA_Interface5startEv>:
 801ad3e:	b510      	push	{r4, lr}
 801ad40:	4604      	mov	r4, r0
 801ad42:	6840      	ldr	r0, [r0, #4]
 801ad44:	6803      	ldr	r3, [r0, #0]
 801ad46:	681b      	ldr	r3, [r3, #0]
 801ad48:	4798      	blx	r3
 801ad4a:	b948      	cbnz	r0, 801ad60 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801ad4c:	7a63      	ldrb	r3, [r4, #9]
 801ad4e:	b13b      	cbz	r3, 801ad60 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801ad50:	7a23      	ldrb	r3, [r4, #8]
 801ad52:	b92b      	cbnz	r3, 801ad60 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801ad54:	6823      	ldr	r3, [r4, #0]
 801ad56:	4620      	mov	r0, r4
 801ad58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ad5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ad5e:	4718      	bx	r3
 801ad60:	bd10      	pop	{r4, pc}

0801ad62 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 801ad62:	b570      	push	{r4, r5, r6, lr}
 801ad64:	4604      	mov	r4, r0
 801ad66:	6840      	ldr	r0, [r0, #4]
 801ad68:	6803      	ldr	r3, [r0, #0]
 801ad6a:	681b      	ldr	r3, [r3, #0]
 801ad6c:	4798      	blx	r3
 801ad6e:	4605      	mov	r5, r0
 801ad70:	b930      	cbnz	r0, 801ad80 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 801ad72:	7a23      	ldrb	r3, [r4, #8]
 801ad74:	b123      	cbz	r3, 801ad80 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 801ad76:	6860      	ldr	r0, [r4, #4]
 801ad78:	6803      	ldr	r3, [r0, #0]
 801ad7a:	695b      	ldr	r3, [r3, #20]
 801ad7c:	4798      	blx	r3
 801ad7e:	7225      	strb	r5, [r4, #8]
 801ad80:	6860      	ldr	r0, [r4, #4]
 801ad82:	6803      	ldr	r3, [r0, #0]
 801ad84:	681b      	ldr	r3, [r3, #0]
 801ad86:	4798      	blx	r3
 801ad88:	b928      	cbnz	r0, 801ad96 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 801ad8a:	6823      	ldr	r3, [r4, #0]
 801ad8c:	4620      	mov	r0, r4
 801ad8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ad90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ad94:	4718      	bx	r3
 801ad96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ad9a:	f7e7 bf89 	b.w	8002cb0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>
	...

0801ada0 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 801ada0:	b510      	push	{r4, lr}
 801ada2:	6082      	str	r2, [r0, #8]
 801ada4:	2200      	movs	r2, #0
 801ada6:	4c03      	ldr	r4, [pc, #12]	; (801adb4 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 801ada8:	e9c0 2203 	strd	r2, r2, [r0, #12]
 801adac:	e9c0 4100 	strd	r4, r1, [r0]
 801adb0:	bd10      	pop	{r4, pc}
 801adb2:	bf00      	nop
 801adb4:	0802bbdc 	.word	0x0802bbdc

0801adb8 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 801adb8:	6840      	ldr	r0, [r0, #4]
 801adba:	6803      	ldr	r3, [r0, #0]
 801adbc:	681b      	ldr	r3, [r3, #0]
 801adbe:	4718      	bx	r3

0801adc0 <_ZN8touchgfx8TextArea8setWidthEs>:
 801adc0:	b530      	push	{r4, r5, lr}
 801adc2:	b085      	sub	sp, #20
 801adc4:	6803      	ldr	r3, [r0, #0]
 801adc6:	4604      	mov	r4, r0
 801adc8:	8101      	strh	r1, [r0, #8]
 801adca:	466d      	mov	r5, sp
 801adcc:	4601      	mov	r1, r0
 801adce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801add2:	343c      	adds	r4, #60	; 0x3c
 801add4:	4628      	mov	r0, r5
 801add6:	4798      	blx	r3
 801add8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801addc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801ade0:	b005      	add	sp, #20
 801ade2:	bd30      	pop	{r4, r5, pc}

0801ade4 <_ZN8touchgfx8TextArea9setHeightEs>:
 801ade4:	b530      	push	{r4, r5, lr}
 801ade6:	b085      	sub	sp, #20
 801ade8:	6803      	ldr	r3, [r0, #0]
 801adea:	4604      	mov	r4, r0
 801adec:	8141      	strh	r1, [r0, #10]
 801adee:	466d      	mov	r5, sp
 801adf0:	4601      	mov	r1, r0
 801adf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801adf6:	343c      	adds	r4, #60	; 0x3c
 801adf8:	4628      	mov	r0, r5
 801adfa:	4798      	blx	r3
 801adfc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801ae00:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801ae04:	b005      	add	sp, #20
 801ae06:	bd30      	pop	{r4, r5, pc}

0801ae08 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 801ae08:	2200      	movs	r2, #0
 801ae0a:	8002      	strh	r2, [r0, #0]
 801ae0c:	8042      	strh	r2, [r0, #2]
 801ae0e:	8082      	strh	r2, [r0, #4]
 801ae10:	80c2      	strh	r2, [r0, #6]
 801ae12:	4770      	bx	lr

0801ae14 <_ZN8touchgfx8TextArea8setAlphaEh>:
 801ae14:	f880 1036 	strb.w	r1, [r0, #54]	; 0x36
 801ae18:	4770      	bx	lr
	...

0801ae1c <_ZN8touchgfx8TextArea12setBaselineYEs>:
 801ae1c:	b570      	push	{r4, r5, r6, lr}
 801ae1e:	6803      	ldr	r3, [r0, #0]
 801ae20:	4604      	mov	r4, r0
 801ae22:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 801ae24:	460d      	mov	r5, r1
 801ae26:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 801ae28:	4b08      	ldr	r3, [pc, #32]	; (801ae4c <_ZN8touchgfx8TextArea12setBaselineYEs+0x30>)
 801ae2a:	681b      	ldr	r3, [r3, #0]
 801ae2c:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 801ae30:	4b07      	ldr	r3, [pc, #28]	; (801ae50 <_ZN8touchgfx8TextArea12setBaselineYEs+0x34>)
 801ae32:	681b      	ldr	r3, [r3, #0]
 801ae34:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801ae38:	6803      	ldr	r3, [r0, #0]
 801ae3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ae3c:	4798      	blx	r3
 801ae3e:	1a29      	subs	r1, r5, r0
 801ae40:	4633      	mov	r3, r6
 801ae42:	4620      	mov	r0, r4
 801ae44:	b209      	sxth	r1, r1
 801ae46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ae4a:	4718      	bx	r3
 801ae4c:	2400703c 	.word	0x2400703c
 801ae50:	24007044 	.word	0x24007044

0801ae54 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
 801ae54:	b570      	push	{r4, r5, r6, lr}
 801ae56:	6803      	ldr	r3, [r0, #0]
 801ae58:	4604      	mov	r4, r0
 801ae5a:	4615      	mov	r5, r2
 801ae5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ae5e:	4798      	blx	r3
 801ae60:	6823      	ldr	r3, [r4, #0]
 801ae62:	4629      	mov	r1, r5
 801ae64:	4620      	mov	r0, r4
 801ae66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801ae68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ae6c:	4718      	bx	r3

0801ae6e <_ZNK8touchgfx8TextArea12getWildcard1Ev>:
 801ae6e:	2000      	movs	r0, #0
 801ae70:	4770      	bx	lr

0801ae72 <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
 801ae72:	2000      	movs	r0, #0
 801ae74:	4770      	bx	lr
	...

0801ae78 <_ZNK8touchgfx8TextArea12getAlignmentEv>:
 801ae78:	4b07      	ldr	r3, [pc, #28]	; (801ae98 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
 801ae7a:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 801ae7c:	881b      	ldrh	r3, [r3, #0]
 801ae7e:	4293      	cmp	r3, r2
 801ae80:	bf81      	itttt	hi
 801ae82:	4b06      	ldrhi	r3, [pc, #24]	; (801ae9c <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
 801ae84:	681b      	ldrhi	r3, [r3, #0]
 801ae86:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
 801ae8a:	7858      	ldrbhi	r0, [r3, #1]
 801ae8c:	bf8c      	ite	hi
 801ae8e:	f000 0003 	andhi.w	r0, r0, #3
 801ae92:	2000      	movls	r0, #0
 801ae94:	4770      	bx	lr
 801ae96:	bf00      	nop
 801ae98:	24007040 	.word	0x24007040
 801ae9c:	2400703c 	.word	0x2400703c

0801aea0 <_ZNK8touchgfx8TextArea13getTextHeightEv>:
 801aea0:	4b11      	ldr	r3, [pc, #68]	; (801aee8 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
 801aea2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aea6:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 801aea8:	4604      	mov	r4, r0
 801aeaa:	881b      	ldrh	r3, [r3, #0]
 801aeac:	428b      	cmp	r3, r1
 801aeae:	d918      	bls.n	801aee2 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
 801aeb0:	6803      	ldr	r3, [r0, #0]
 801aeb2:	6f9d      	ldr	r5, [r3, #120]	; 0x78
 801aeb4:	4b0d      	ldr	r3, [pc, #52]	; (801aeec <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
 801aeb6:	6818      	ldr	r0, [r3, #0]
 801aeb8:	f7eb f9c0 	bl	800623c <_ZNK8touchgfx5Texts7getTextEt>
 801aebc:	6823      	ldr	r3, [r4, #0]
 801aebe:	4606      	mov	r6, r0
 801aec0:	4620      	mov	r0, r4
 801aec2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801aec4:	4798      	blx	r3
 801aec6:	6823      	ldr	r3, [r4, #0]
 801aec8:	4607      	mov	r7, r0
 801aeca:	4620      	mov	r0, r4
 801aecc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801aed0:	4798      	blx	r3
 801aed2:	463a      	mov	r2, r7
 801aed4:	4603      	mov	r3, r0
 801aed6:	4631      	mov	r1, r6
 801aed8:	4620      	mov	r0, r4
 801aeda:	46ac      	mov	ip, r5
 801aedc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801aee0:	4760      	bx	ip
 801aee2:	2000      	movs	r0, #0
 801aee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aee8:	24007040 	.word	0x24007040
 801aeec:	24007048 	.word	0x24007048

0801aef0 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 801aef0:	4b18      	ldr	r3, [pc, #96]	; (801af54 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 801aef2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801aef6:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 801aef8:	4604      	mov	r4, r0
 801aefa:	881b      	ldrh	r3, [r3, #0]
 801aefc:	428b      	cmp	r3, r1
 801aefe:	d926      	bls.n	801af4e <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
 801af00:	4b15      	ldr	r3, [pc, #84]	; (801af58 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 801af02:	681b      	ldr	r3, [r3, #0]
 801af04:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 801af08:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 801af0c:	4b13      	ldr	r3, [pc, #76]	; (801af5c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 801af0e:	7855      	ldrb	r5, [r2, #1]
 801af10:	681b      	ldr	r3, [r3, #0]
 801af12:	f3c5 0581 	ubfx	r5, r5, #2, #2
 801af16:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 801af1a:	6833      	ldr	r3, [r6, #0]
 801af1c:	69df      	ldr	r7, [r3, #28]
 801af1e:	4b10      	ldr	r3, [pc, #64]	; (801af60 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 801af20:	6818      	ldr	r0, [r3, #0]
 801af22:	f7eb f98b 	bl	800623c <_ZNK8touchgfx5Texts7getTextEt>
 801af26:	6823      	ldr	r3, [r4, #0]
 801af28:	4680      	mov	r8, r0
 801af2a:	4620      	mov	r0, r4
 801af2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801af2e:	4798      	blx	r3
 801af30:	6823      	ldr	r3, [r4, #0]
 801af32:	4681      	mov	r9, r0
 801af34:	4620      	mov	r0, r4
 801af36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801af3a:	4798      	blx	r3
 801af3c:	464b      	mov	r3, r9
 801af3e:	9000      	str	r0, [sp, #0]
 801af40:	4642      	mov	r2, r8
 801af42:	4629      	mov	r1, r5
 801af44:	4630      	mov	r0, r6
 801af46:	47b8      	blx	r7
 801af48:	b003      	add	sp, #12
 801af4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801af4e:	2000      	movs	r0, #0
 801af50:	e7fa      	b.n	801af48 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
 801af52:	bf00      	nop
 801af54:	24007040 	.word	0x24007040
 801af58:	2400703c 	.word	0x2400703c
 801af5c:	24007044 	.word	0x24007044
 801af60:	24007048 	.word	0x24007048

0801af64 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 801af64:	b40e      	push	{r1, r2, r3}
 801af66:	4b30      	ldr	r3, [pc, #192]	; (801b028 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
 801af68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801af6c:	881a      	ldrh	r2, [r3, #0]
 801af6e:	b09d      	sub	sp, #116	; 0x74
 801af70:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 801af72:	4604      	mov	r4, r0
 801af74:	429a      	cmp	r2, r3
 801af76:	d954      	bls.n	801b022 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
 801af78:	aa26      	add	r2, sp, #152	; 0x98
 801af7a:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 801b02c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 801af7e:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 801b030 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 801af82:	9202      	str	r2, [sp, #8]
 801af84:	f8d9 2000 	ldr.w	r2, [r9]
 801af88:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 801af8c:	f8d8 3000 	ldr.w	r3, [r8]
 801af90:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801af94:	682b      	ldr	r3, [r5, #0]
 801af96:	4628      	mov	r0, r5
 801af98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801af9a:	4798      	blx	r3
 801af9c:	4606      	mov	r6, r0
 801af9e:	b207      	sxth	r7, r0
 801afa0:	a803      	add	r0, sp, #12
 801afa2:	f003 fcbb 	bl	801e91c <_ZN8touchgfx12TextProviderC1Ev>
 801afa6:	682b      	ldr	r3, [r5, #0]
 801afa8:	4628      	mov	r0, r5
 801afaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801afac:	4798      	blx	r3
 801afae:	682b      	ldr	r3, [r5, #0]
 801afb0:	4682      	mov	sl, r0
 801afb2:	4628      	mov	r0, r5
 801afb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801afb6:	4798      	blx	r3
 801afb8:	4653      	mov	r3, sl
 801afba:	9000      	str	r0, [sp, #0]
 801afbc:	a803      	add	r0, sp, #12
 801afbe:	9a02      	ldr	r2, [sp, #8]
 801afc0:	9925      	ldr	r1, [sp, #148]	; 0x94
 801afc2:	f003 fd06 	bl	801e9d2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801afc6:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 801afc8:	f8d9 3000 	ldr.w	r3, [r9]
 801afcc:	f894 c037 	ldrb.w	ip, [r4, #55]	; 0x37
 801afd0:	8925      	ldrh	r5, [r4, #8]
 801afd2:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 801afd6:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 801afda:	eba5 050c 	sub.w	r5, r5, ip
 801afde:	784a      	ldrb	r2, [r1, #1]
 801afe0:	f8d8 3000 	ldr.w	r3, [r8]
 801afe4:	b22d      	sxth	r5, r5
 801afe6:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 801afea:	f3c2 0281 	ubfx	r2, r2, #2, #2
 801afee:	9500      	str	r5, [sp, #0]
 801aff0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801aff4:	a803      	add	r0, sp, #12
 801aff6:	f001 fb3f 	bl	801c678 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 801affa:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 801affe:	b203      	sxth	r3, r0
 801b000:	18b9      	adds	r1, r7, r2
 801b002:	2900      	cmp	r1, #0
 801b004:	dd0b      	ble.n	801b01e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
 801b006:	3b01      	subs	r3, #1
 801b008:	fb13 f302 	smulbb	r3, r3, r2
 801b00c:	fb16 3300 	smlabb	r3, r6, r0, r3
 801b010:	b21f      	sxth	r7, r3
 801b012:	4638      	mov	r0, r7
 801b014:	b01d      	add	sp, #116	; 0x74
 801b016:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b01a:	b003      	add	sp, #12
 801b01c:	4770      	bx	lr
 801b01e:	2b00      	cmp	r3, #0
 801b020:	dcf7      	bgt.n	801b012 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 801b022:	2700      	movs	r7, #0
 801b024:	e7f5      	b.n	801b012 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 801b026:	bf00      	nop
 801b028:	24007040 	.word	0x24007040
 801b02c:	2400703c 	.word	0x2400703c
 801b030:	24007044 	.word	0x24007044

0801b034 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>:
 801b034:	4bbd      	ldr	r3, [pc, #756]	; (801b32c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f8>)
 801b036:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b03a:	460c      	mov	r4, r1
 801b03c:	881b      	ldrh	r3, [r3, #0]
 801b03e:	8d89      	ldrh	r1, [r1, #44]	; 0x2c
 801b040:	b0a9      	sub	sp, #164	; 0xa4
 801b042:	4680      	mov	r8, r0
 801b044:	428b      	cmp	r3, r1
 801b046:	d809      	bhi.n	801b05c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28>
 801b048:	2300      	movs	r3, #0
 801b04a:	f04f 32ff 	mov.w	r2, #4294967295
 801b04e:	6083      	str	r3, [r0, #8]
 801b050:	e9c0 3200 	strd	r3, r2, [r0]
 801b054:	4640      	mov	r0, r8
 801b056:	b029      	add	sp, #164	; 0xa4
 801b058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b05c:	4eb4      	ldr	r6, [pc, #720]	; (801b330 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>)
 801b05e:	6833      	ldr	r3, [r6, #0]
 801b060:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 801b064:	4bb3      	ldr	r3, [pc, #716]	; (801b334 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x300>)
 801b066:	681b      	ldr	r3, [r3, #0]
 801b068:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801b06c:	4bb2      	ldr	r3, [pc, #712]	; (801b338 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 801b06e:	6818      	ldr	r0, [r3, #0]
 801b070:	f7eb f8e4 	bl	800623c <_ZNK8touchgfx5Texts7getTextEt>
 801b074:	682b      	ldr	r3, [r5, #0]
 801b076:	4681      	mov	r9, r0
 801b078:	4628      	mov	r0, r5
 801b07a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b07c:	4798      	blx	r3
 801b07e:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
 801b080:	b203      	sxth	r3, r0
 801b082:	4682      	mov	sl, r0
 801b084:	4407      	add	r7, r0
 801b086:	a80f      	add	r0, sp, #60	; 0x3c
 801b088:	9304      	str	r3, [sp, #16]
 801b08a:	b2bb      	uxth	r3, r7
 801b08c:	9303      	str	r3, [sp, #12]
 801b08e:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 801b092:	2b00      	cmp	r3, #0
 801b094:	f040 80a5 	bne.w	801b1e2 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1ae>
 801b098:	f003 fc40 	bl	801e91c <_ZN8touchgfx12TextProviderC1Ev>
 801b09c:	682b      	ldr	r3, [r5, #0]
 801b09e:	4628      	mov	r0, r5
 801b0a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b0a2:	4798      	blx	r3
 801b0a4:	682b      	ldr	r3, [r5, #0]
 801b0a6:	4606      	mov	r6, r0
 801b0a8:	4628      	mov	r0, r5
 801b0aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b0ac:	4798      	blx	r3
 801b0ae:	6823      	ldr	r3, [r4, #0]
 801b0b0:	4607      	mov	r7, r0
 801b0b2:	4620      	mov	r0, r4
 801b0b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801b0b6:	4798      	blx	r3
 801b0b8:	6823      	ldr	r3, [r4, #0]
 801b0ba:	4683      	mov	fp, r0
 801b0bc:	4620      	mov	r0, r4
 801b0be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801b0c2:	4798      	blx	r3
 801b0c4:	463b      	mov	r3, r7
 801b0c6:	4649      	mov	r1, r9
 801b0c8:	4632      	mov	r2, r6
 801b0ca:	2600      	movs	r6, #0
 801b0cc:	e9cd b000 	strd	fp, r0, [sp]
 801b0d0:	a80f      	add	r0, sp, #60	; 0x3c
 801b0d2:	4637      	mov	r7, r6
 801b0d4:	f003 fc92 	bl	801e9fc <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 801b0d8:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801b0dc:	f8df b250 	ldr.w	fp, [pc, #592]	; 801b330 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>
 801b0e0:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 801b0e4:	bf0c      	ite	eq
 801b0e6:	f9b4 900a 	ldrsheq.w	r9, [r4, #10]
 801b0ea:	f9b4 9008 	ldrshne.w	r9, [r4, #8]
 801b0ee:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 801b0f0:	4629      	mov	r1, r5
 801b0f2:	f8db 3000 	ldr.w	r3, [fp]
 801b0f6:	a80f      	add	r0, sp, #60	; 0x3c
 801b0f8:	3701      	adds	r7, #1
 801b0fa:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 801b0fe:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801b102:	b2bf      	uxth	r7, r7
 801b104:	785b      	ldrb	r3, [r3, #1]
 801b106:	f3c3 0381 	ubfx	r3, r3, #2, #2
 801b10a:	f000 ffd0 	bl	801c0ae <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801b10e:	9b03      	ldr	r3, [sp, #12]
 801b110:	4286      	cmp	r6, r0
 801b112:	eba9 0903 	sub.w	r9, r9, r3
 801b116:	bfb8      	it	lt
 801b118:	4606      	movlt	r6, r0
 801b11a:	a80f      	add	r0, sp, #60	; 0x3c
 801b11c:	fa0f f989 	sxth.w	r9, r9
 801b120:	b236      	sxth	r6, r6
 801b122:	f003 fc22 	bl	801e96a <_ZN8touchgfx12TextProvider11endOfStringEv>
 801b126:	b918      	cbnz	r0, 801b130 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 801b128:	7a2b      	ldrb	r3, [r5, #8]
 801b12a:	444b      	add	r3, r9
 801b12c:	2b00      	cmp	r3, #0
 801b12e:	dcde      	bgt.n	801b0ee <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xba>
 801b130:	9b03      	ldr	r3, [sp, #12]
 801b132:	4620      	mov	r0, r4
 801b134:	9a04      	ldr	r2, [sp, #16]
 801b136:	fb13 f707 	smulbb	r7, r3, r7
 801b13a:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801b13c:	f895 9009 	ldrb.w	r9, [r5, #9]
 801b140:	1aff      	subs	r7, r7, r3
 801b142:	b2bf      	uxth	r7, r7
 801b144:	b23b      	sxth	r3, r7
 801b146:	429a      	cmp	r2, r3
 801b148:	bfa8      	it	ge
 801b14a:	4657      	movge	r7, sl
 801b14c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801b150:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 801b154:	6823      	ldr	r3, [r4, #0]
 801b156:	444f      	add	r7, r9
 801b158:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b15a:	bf08      	it	eq
 801b15c:	f9b4 a008 	ldrsheq.w	sl, [r4, #8]
 801b160:	fa1f f987 	uxth.w	r9, r7
 801b164:	bf18      	it	ne
 801b166:	f9b4 a00a 	ldrshne.w	sl, [r4, #10]
 801b16a:	4798      	blx	r3
 801b16c:	2801      	cmp	r0, #1
 801b16e:	fa0f f789 	sxth.w	r7, r9
 801b172:	b2b3      	uxth	r3, r6
 801b174:	f000 80e2 	beq.w	801b33c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x308>
 801b178:	2802      	cmp	r0, #2
 801b17a:	f894 6037 	ldrb.w	r6, [r4, #55]	; 0x37
 801b17e:	f000 80e3 	beq.w	801b348 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x314>
 801b182:	7aea      	ldrb	r2, [r5, #11]
 801b184:	b236      	sxth	r6, r6
 801b186:	7b2d      	ldrb	r5, [r5, #12]
 801b188:	1ab6      	subs	r6, r6, r2
 801b18a:	442a      	add	r2, r5
 801b18c:	fa1f fa86 	uxth.w	sl, r6
 801b190:	4413      	add	r3, r2
 801b192:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 801b196:	fa0f fb8a 	sxth.w	fp, sl
 801b19a:	b29b      	uxth	r3, r3
 801b19c:	2a02      	cmp	r2, #2
 801b19e:	b21e      	sxth	r6, r3
 801b1a0:	f000 80d6 	beq.w	801b350 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x31c>
 801b1a4:	2a03      	cmp	r2, #3
 801b1a6:	f000 80de 	beq.w	801b366 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x332>
 801b1aa:	2a01      	cmp	r2, #1
 801b1ac:	f040 80e6 	bne.w	801b37c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x348>
 801b1b0:	8925      	ldrh	r5, [r4, #8]
 801b1b2:	4633      	mov	r3, r6
 801b1b4:	463e      	mov	r6, r7
 801b1b6:	eba5 0909 	sub.w	r9, r5, r9
 801b1ba:	461f      	mov	r7, r3
 801b1bc:	465d      	mov	r5, fp
 801b1be:	fa0f fb89 	sxth.w	fp, r9
 801b1c2:	4b5d      	ldr	r3, [pc, #372]	; (801b338 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 801b1c4:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 801b1c6:	6818      	ldr	r0, [r3, #0]
 801b1c8:	f7eb f838 	bl	800623c <_ZNK8touchgfx5Texts7getTextEt>
 801b1cc:	f8a8 b000 	strh.w	fp, [r8]
 801b1d0:	f8a8 5002 	strh.w	r5, [r8, #2]
 801b1d4:	f8a8 6004 	strh.w	r6, [r8, #4]
 801b1d8:	f8a8 7006 	strh.w	r7, [r8, #6]
 801b1dc:	f8c8 0008 	str.w	r0, [r8, #8]
 801b1e0:	e738      	b.n	801b054 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x20>
 801b1e2:	f003 fb9b 	bl	801e91c <_ZN8touchgfx12TextProviderC1Ev>
 801b1e6:	682b      	ldr	r3, [r5, #0]
 801b1e8:	4628      	mov	r0, r5
 801b1ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b1ec:	4798      	blx	r3
 801b1ee:	682b      	ldr	r3, [r5, #0]
 801b1f0:	4607      	mov	r7, r0
 801b1f2:	4628      	mov	r0, r5
 801b1f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b1f6:	4798      	blx	r3
 801b1f8:	6823      	ldr	r3, [r4, #0]
 801b1fa:	4683      	mov	fp, r0
 801b1fc:	4620      	mov	r0, r4
 801b1fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801b200:	4798      	blx	r3
 801b202:	6822      	ldr	r2, [r4, #0]
 801b204:	9005      	str	r0, [sp, #20]
 801b206:	4620      	mov	r0, r4
 801b208:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 801b20c:	4790      	blx	r2
 801b20e:	9b05      	ldr	r3, [sp, #20]
 801b210:	463a      	mov	r2, r7
 801b212:	4649      	mov	r1, r9
 801b214:	9001      	str	r0, [sp, #4]
 801b216:	a80f      	add	r0, sp, #60	; 0x3c
 801b218:	9300      	str	r3, [sp, #0]
 801b21a:	465b      	mov	r3, fp
 801b21c:	f003 fbee 	bl	801e9fc <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 801b220:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801b224:	f9b4 9008 	ldrsh.w	r9, [r4, #8]
 801b228:	af0f      	add	r7, sp, #60	; 0x3c
 801b22a:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 801b22e:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801b232:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 801b234:	bf0a      	itet	eq
 801b236:	464a      	moveq	r2, r9
 801b238:	461a      	movne	r2, r3
 801b23a:	4699      	moveq	r9, r3
 801b23c:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 801b240:	f894 0039 	ldrb.w	r0, [r4, #57]	; 0x39
 801b244:	1ad2      	subs	r2, r2, r3
 801b246:	6833      	ldr	r3, [r6, #0]
 801b248:	f9b4 6034 	ldrsh.w	r6, [r4, #52]	; 0x34
 801b24c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 801b250:	7859      	ldrb	r1, [r3, #1]
 801b252:	2300      	movs	r3, #0
 801b254:	9707      	str	r7, [sp, #28]
 801b256:	f3c1 0181 	ubfx	r1, r1, #2, #2
 801b25a:	f8ad 3018 	strh.w	r3, [sp, #24]
 801b25e:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 801b262:	f88d 1020 	strb.w	r1, [sp, #32]
 801b266:	9509      	str	r5, [sp, #36]	; 0x24
 801b268:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801b26c:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 801b270:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
 801b274:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801b278:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 801b27c:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801b280:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 801b284:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801b288:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 801b28c:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 801b290:	b350      	cbz	r0, 801b2e8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 801b292:	682b      	ldr	r3, [r5, #0]
 801b294:	4628      	mov	r0, r5
 801b296:	695b      	ldr	r3, [r3, #20]
 801b298:	4798      	blx	r3
 801b29a:	4607      	mov	r7, r0
 801b29c:	b320      	cbz	r0, 801b2e8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 801b29e:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b2a0:	4639      	mov	r1, r7
 801b2a2:	6803      	ldr	r3, [r0, #0]
 801b2a4:	68db      	ldr	r3, [r3, #12]
 801b2a6:	4798      	blx	r3
 801b2a8:	4606      	mov	r6, r0
 801b2aa:	b1e8      	cbz	r0, 801b2e8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 801b2ac:	7b43      	ldrb	r3, [r0, #13]
 801b2ae:	7a82      	ldrb	r2, [r0, #10]
 801b2b0:	005b      	lsls	r3, r3, #1
 801b2b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b2b6:	4313      	orrs	r3, r2
 801b2b8:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 801b2bc:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 801b2c0:	2b06      	cmp	r3, #6
 801b2c2:	d111      	bne.n	801b2e8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 801b2c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b2c6:	4632      	mov	r2, r6
 801b2c8:	4639      	mov	r1, r7
 801b2ca:	6803      	ldr	r3, [r0, #0]
 801b2cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b2ce:	4798      	blx	r3
 801b2d0:	7b73      	ldrb	r3, [r6, #13]
 801b2d2:	005b      	lsls	r3, r3, #1
 801b2d4:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801b2d8:	7ab3      	ldrb	r3, [r6, #10]
 801b2da:	4313      	orrs	r3, r2
 801b2dc:	4418      	add	r0, r3
 801b2de:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801b2e2:	4418      	add	r0, r3
 801b2e4:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
 801b2e8:	2600      	movs	r6, #0
 801b2ea:	4637      	mov	r7, r6
 801b2ec:	a806      	add	r0, sp, #24
 801b2ee:	3701      	adds	r7, #1
 801b2f0:	f001 f8bf 	bl	801c472 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 801b2f4:	f8bd 0036 	ldrh.w	r0, [sp, #54]	; 0x36
 801b2f8:	9b03      	ldr	r3, [sp, #12]
 801b2fa:	b2bf      	uxth	r7, r7
 801b2fc:	4286      	cmp	r6, r0
 801b2fe:	eba9 0903 	sub.w	r9, r9, r3
 801b302:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 801b306:	bfb8      	it	lt
 801b308:	4606      	movlt	r6, r0
 801b30a:	fa0f f989 	sxth.w	r9, r9
 801b30e:	b236      	sxth	r6, r6
 801b310:	2b00      	cmp	r3, #0
 801b312:	f43f af0d 	beq.w	801b130 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 801b316:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 801b31a:	2b00      	cmp	r3, #0
 801b31c:	f47f af08 	bne.w	801b130 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 801b320:	7a2b      	ldrb	r3, [r5, #8]
 801b322:	444b      	add	r3, r9
 801b324:	2b00      	cmp	r3, #0
 801b326:	dce1      	bgt.n	801b2ec <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b8>
 801b328:	e702      	b.n	801b130 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 801b32a:	bf00      	nop
 801b32c:	24007040 	.word	0x24007040
 801b330:	2400703c 	.word	0x2400703c
 801b334:	24007044 	.word	0x24007044
 801b338:	24007048 	.word	0x24007048
 801b33c:	ebaa 0606 	sub.w	r6, sl, r6
 801b340:	2002      	movs	r0, #2
 801b342:	fb96 f6f0 	sdiv	r6, r6, r0
 801b346:	e71c      	b.n	801b182 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
 801b348:	441e      	add	r6, r3
 801b34a:	ebaa 0606 	sub.w	r6, sl, r6
 801b34e:	e718      	b.n	801b182 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
 801b350:	8925      	ldrh	r5, [r4, #8]
 801b352:	1aed      	subs	r5, r5, r3
 801b354:	eba5 050a 	sub.w	r5, r5, sl
 801b358:	fa0f fb85 	sxth.w	fp, r5
 801b35c:	8965      	ldrh	r5, [r4, #10]
 801b35e:	eba5 0509 	sub.w	r5, r5, r9
 801b362:	b22d      	sxth	r5, r5
 801b364:	e72d      	b.n	801b1c2 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 801b366:	8965      	ldrh	r5, [r4, #10]
 801b368:	f04f 0b00 	mov.w	fp, #0
 801b36c:	1aed      	subs	r5, r5, r3
 801b36e:	4633      	mov	r3, r6
 801b370:	463e      	mov	r6, r7
 801b372:	eba5 050a 	sub.w	r5, r5, sl
 801b376:	461f      	mov	r7, r3
 801b378:	b22d      	sxth	r5, r5
 801b37a:	e722      	b.n	801b1c2 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 801b37c:	2500      	movs	r5, #0
 801b37e:	e720      	b.n	801b1c2 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>

0801b380 <_ZNK8touchgfx8TextArea17invalidateContentEv>:
 801b380:	b513      	push	{r0, r1, r4, lr}
 801b382:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 801b386:	4604      	mov	r4, r0
 801b388:	b1fb      	cbz	r3, 801b3ca <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 801b38a:	4b16      	ldr	r3, [pc, #88]	; (801b3e4 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x64>)
 801b38c:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 801b38e:	881b      	ldrh	r3, [r3, #0]
 801b390:	428b      	cmp	r3, r1
 801b392:	d91a      	bls.n	801b3ca <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 801b394:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 801b398:	2b00      	cmp	r3, #0
 801b39a:	dd16      	ble.n	801b3ca <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 801b39c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801b3a0:	2b00      	cmp	r3, #0
 801b3a2:	dd12      	ble.n	801b3ca <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 801b3a4:	4b10      	ldr	r3, [pc, #64]	; (801b3e8 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x68>)
 801b3a6:	6818      	ldr	r0, [r3, #0]
 801b3a8:	f7ea ff48 	bl	800623c <_ZNK8touchgfx5Texts7getTextEt>
 801b3ac:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 801b3b0:	6822      	ldr	r2, [r4, #0]
 801b3b2:	2b00      	cmp	r3, #0
 801b3b4:	db06      	blt.n	801b3c4 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 801b3b6:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 801b3ba:	2b00      	cmp	r3, #0
 801b3bc:	db02      	blt.n	801b3c4 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 801b3be:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801b3c0:	4298      	cmp	r0, r3
 801b3c2:	d004      	beq.n	801b3ce <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4e>
 801b3c4:	6953      	ldr	r3, [r2, #20]
 801b3c6:	4620      	mov	r0, r4
 801b3c8:	4798      	blx	r3
 801b3ca:	b002      	add	sp, #8
 801b3cc:	bd10      	pop	{r4, pc}
 801b3ce:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 801b3d2:	466b      	mov	r3, sp
 801b3d4:	6912      	ldr	r2, [r2, #16]
 801b3d6:	c903      	ldmia	r1, {r0, r1}
 801b3d8:	e883 0003 	stmia.w	r3, {r0, r1}
 801b3dc:	4619      	mov	r1, r3
 801b3de:	4620      	mov	r0, r4
 801b3e0:	4790      	blx	r2
 801b3e2:	e7f2      	b.n	801b3ca <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 801b3e4:	24007040 	.word	0x24007040
 801b3e8:	24007048 	.word	0x24007048

0801b3ec <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 801b3ec:	4b45      	ldr	r3, [pc, #276]	; (801b504 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x118>)
 801b3ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b3f2:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 801b3f4:	b08e      	sub	sp, #56	; 0x38
 801b3f6:	881b      	ldrh	r3, [r3, #0]
 801b3f8:	4604      	mov	r4, r0
 801b3fa:	4293      	cmp	r3, r2
 801b3fc:	d97e      	bls.n	801b4fc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 801b3fe:	6808      	ldr	r0, [r1, #0]
 801b400:	ab05      	add	r3, sp, #20
 801b402:	6849      	ldr	r1, [r1, #4]
 801b404:	4d40      	ldr	r5, [pc, #256]	; (801b508 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x11c>)
 801b406:	c303      	stmia	r3!, {r0, r1}
 801b408:	4611      	mov	r1, r2
 801b40a:	6828      	ldr	r0, [r5, #0]
 801b40c:	f7ea ff16 	bl	800623c <_ZNK8touchgfx5Texts7getTextEt>
 801b410:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 801b414:	2b00      	cmp	r3, #0
 801b416:	db11      	blt.n	801b43c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 801b418:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 801b41c:	2b00      	cmp	r3, #0
 801b41e:	db0d      	blt.n	801b43c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 801b420:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801b422:	4298      	cmp	r0, r3
 801b424:	d10a      	bne.n	801b43c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 801b426:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 801b42a:	ab09      	add	r3, sp, #36	; 0x24
 801b42c:	e892 0003 	ldmia.w	r2, {r0, r1}
 801b430:	e883 0003 	stmia.w	r3, {r0, r1}
 801b434:	4619      	mov	r1, r3
 801b436:	a805      	add	r0, sp, #20
 801b438:	f7fe fcc4 	bl	8019dc4 <_ZN8touchgfx4RectaNERKS0_>
 801b43c:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801b440:	2b00      	cmp	r3, #0
 801b442:	dd5b      	ble.n	801b4fc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 801b444:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801b448:	2b00      	cmp	r3, #0
 801b44a:	dd57      	ble.n	801b4fc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 801b44c:	4f2f      	ldr	r7, [pc, #188]	; (801b50c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x120>)
 801b44e:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 801b450:	683b      	ldr	r3, [r7, #0]
 801b452:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 801b456:	4b2e      	ldr	r3, [pc, #184]	; (801b510 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x124>)
 801b458:	681b      	ldr	r3, [r3, #0]
 801b45a:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801b45e:	2e00      	cmp	r6, #0
 801b460:	d04c      	beq.n	801b4fc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 801b462:	6823      	ldr	r3, [r4, #0]
 801b464:	4620      	mov	r0, r4
 801b466:	f894 8036 	ldrb.w	r8, [r4, #54]	; 0x36
 801b46a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b46c:	4798      	blx	r3
 801b46e:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 801b470:	683b      	ldr	r3, [r7, #0]
 801b472:	f9b4 c034 	ldrsh.w	ip, [r4, #52]	; 0x34
 801b476:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 801b47a:	f894 e038 	ldrb.w	lr, [r4, #56]	; 0x38
 801b47e:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 801b482:	785b      	ldrb	r3, [r3, #1]
 801b484:	f894 7037 	ldrb.w	r7, [r4, #55]	; 0x37
 801b488:	f3c3 0381 	ubfx	r3, r3, #2, #2
 801b48c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801b48e:	9609      	str	r6, [sp, #36]	; 0x24
 801b490:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b494:	4b1f      	ldr	r3, [pc, #124]	; (801b514 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x128>)
 801b496:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
 801b49a:	681b      	ldr	r3, [r3, #0]
 801b49c:	f88d e02a 	strb.w	lr, [sp, #42]	; 0x2a
 801b4a0:	910b      	str	r1, [sp, #44]	; 0x2c
 801b4a2:	f8ad c030 	strh.w	ip, [sp, #48]	; 0x30
 801b4a6:	f88d 8032 	strb.w	r8, [sp, #50]	; 0x32
 801b4aa:	f88d 7033 	strb.w	r7, [sp, #51]	; 0x33
 801b4ae:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
 801b4b2:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 801b4b6:	b10a      	cbz	r2, 801b4bc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd0>
 801b4b8:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 801b4ba:	b906      	cbnz	r6, 801b4be <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd2>
 801b4bc:	689e      	ldr	r6, [r3, #8]
 801b4be:	af07      	add	r7, sp, #28
 801b4c0:	4621      	mov	r1, r4
 801b4c2:	4638      	mov	r0, r7
 801b4c4:	f002 fe74 	bl	801e1b0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b4c8:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 801b4ca:	6828      	ldr	r0, [r5, #0]
 801b4cc:	f7ea feb6 	bl	800623c <_ZNK8touchgfx5Texts7getTextEt>
 801b4d0:	6823      	ldr	r3, [r4, #0]
 801b4d2:	4605      	mov	r5, r0
 801b4d4:	4620      	mov	r0, r4
 801b4d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801b4d8:	4798      	blx	r3
 801b4da:	6823      	ldr	r3, [r4, #0]
 801b4dc:	4680      	mov	r8, r0
 801b4de:	4620      	mov	r0, r4
 801b4e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801b4e4:	4798      	blx	r3
 801b4e6:	ab09      	add	r3, sp, #36	; 0x24
 801b4e8:	9501      	str	r5, [sp, #4]
 801b4ea:	9300      	str	r3, [sp, #0]
 801b4ec:	ab05      	add	r3, sp, #20
 801b4ee:	e9cd 8002 	strd	r8, r0, [sp, #8]
 801b4f2:	4630      	mov	r0, r6
 801b4f4:	e897 0006 	ldmia.w	r7, {r1, r2}
 801b4f8:	f7ea fe31 	bl	800615e <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 801b4fc:	b00e      	add	sp, #56	; 0x38
 801b4fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b502:	bf00      	nop
 801b504:	24007040 	.word	0x24007040
 801b508:	24007048 	.word	0x24007048
 801b50c:	2400703c 	.word	0x2400703c
 801b510:	24007044 	.word	0x24007044
 801b514:	24006fec 	.word	0x24006fec

0801b518 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 801b518:	b538      	push	{r3, r4, r5, lr}
 801b51a:	4b0e      	ldr	r3, [pc, #56]	; (801b554 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
 801b51c:	4604      	mov	r4, r0
 801b51e:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 801b520:	881b      	ldrh	r3, [r3, #0]
 801b522:	429a      	cmp	r2, r3
 801b524:	d214      	bcs.n	801b550 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 801b526:	6803      	ldr	r3, [r0, #0]
 801b528:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b52a:	4798      	blx	r3
 801b52c:	6823      	ldr	r3, [r4, #0]
 801b52e:	4605      	mov	r5, r0
 801b530:	4620      	mov	r0, r4
 801b532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b534:	4798      	blx	r3
 801b536:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801b53a:	b22d      	sxth	r5, r5
 801b53c:	4601      	mov	r1, r0
 801b53e:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 801b542:	bf06      	itte	eq
 801b544:	4602      	moveq	r2, r0
 801b546:	4629      	moveq	r1, r5
 801b548:	462a      	movne	r2, r5
 801b54a:	4620      	mov	r0, r4
 801b54c:	f7ea f80f 	bl	800556e <_ZN8touchgfx8Drawable14setWidthHeightEss>
 801b550:	bd38      	pop	{r3, r4, r5, pc}
 801b552:	bf00      	nop
 801b554:	24007040 	.word	0x24007040

0801b558 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 801b558:	b530      	push	{r4, r5, lr}
 801b55a:	888b      	ldrh	r3, [r1, #4]
 801b55c:	b085      	sub	sp, #20
 801b55e:	4604      	mov	r4, r0
 801b560:	8583      	strh	r3, [r0, #44]	; 0x2c
 801b562:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 801b566:	b923      	cbnz	r3, 801b572 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 801b568:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801b56c:	b90b      	cbnz	r3, 801b572 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 801b56e:	f7ff ffd3 	bl	801b518 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 801b572:	6823      	ldr	r3, [r4, #0]
 801b574:	466d      	mov	r5, sp
 801b576:	4621      	mov	r1, r4
 801b578:	343c      	adds	r4, #60	; 0x3c
 801b57a:	4628      	mov	r0, r5
 801b57c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b580:	4798      	blx	r3
 801b582:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801b586:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801b58a:	b005      	add	sp, #20
 801b58c:	bd30      	pop	{r4, r5, pc}

0801b58e <_ZNK8touchgfx3Box12getSolidRectEv>:
 801b58e:	2300      	movs	r3, #0
 801b590:	8083      	strh	r3, [r0, #4]
 801b592:	80c3      	strh	r3, [r0, #6]
 801b594:	8003      	strh	r3, [r0, #0]
 801b596:	8043      	strh	r3, [r0, #2]
 801b598:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 801b59c:	2bff      	cmp	r3, #255	; 0xff
 801b59e:	bf01      	itttt	eq
 801b5a0:	890b      	ldrheq	r3, [r1, #8]
 801b5a2:	8083      	strheq	r3, [r0, #4]
 801b5a4:	894b      	ldrheq	r3, [r1, #10]
 801b5a6:	80c3      	strheq	r3, [r0, #6]
 801b5a8:	4770      	bx	lr
	...

0801b5ac <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 801b5ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b5ae:	4604      	mov	r4, r0
 801b5b0:	466b      	mov	r3, sp
 801b5b2:	6808      	ldr	r0, [r1, #0]
 801b5b4:	6849      	ldr	r1, [r1, #4]
 801b5b6:	c303      	stmia	r3!, {r0, r1}
 801b5b8:	6823      	ldr	r3, [r4, #0]
 801b5ba:	4669      	mov	r1, sp
 801b5bc:	4620      	mov	r0, r4
 801b5be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b5c0:	4798      	blx	r3
 801b5c2:	4b08      	ldr	r3, [pc, #32]	; (801b5e4 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 801b5c4:	681b      	ldr	r3, [r3, #0]
 801b5c6:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 801b5ca:	b10a      	cbz	r2, 801b5d0 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 801b5cc:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801b5ce:	b900      	cbnz	r0, 801b5d2 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 801b5d0:	6898      	ldr	r0, [r3, #8]
 801b5d2:	6803      	ldr	r3, [r0, #0]
 801b5d4:	4669      	mov	r1, sp
 801b5d6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 801b5d8:	6a1d      	ldr	r5, [r3, #32]
 801b5da:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801b5de:	47a8      	blx	r5
 801b5e0:	b003      	add	sp, #12
 801b5e2:	bd30      	pop	{r4, r5, pc}
 801b5e4:	24006fec 	.word	0x24006fec

0801b5e8 <_ZNK8touchgfx3Box17invalidateContentEv>:
 801b5e8:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 801b5ec:	b12a      	cbz	r2, 801b5fa <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 801b5ee:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 801b5f2:	b112      	cbz	r2, 801b5fa <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 801b5f4:	6803      	ldr	r3, [r0, #0]
 801b5f6:	695b      	ldr	r3, [r3, #20]
 801b5f8:	4718      	bx	r3
 801b5fa:	4770      	bx	lr

0801b5fc <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 801b5fc:	b510      	push	{r4, lr}
 801b5fe:	6803      	ldr	r3, [r0, #0]
 801b600:	460c      	mov	r4, r1
 801b602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b604:	4798      	blx	r3
 801b606:	1b03      	subs	r3, r0, r4
 801b608:	4258      	negs	r0, r3
 801b60a:	4158      	adcs	r0, r3
 801b60c:	bd10      	pop	{r4, pc}
	...

0801b610 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 801b610:	4b01      	ldr	r3, [pc, #4]	; (801b618 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 801b612:	6019      	str	r1, [r3, #0]
 801b614:	4770      	bx	lr
 801b616:	bf00      	nop
 801b618:	24006ff4 	.word	0x24006ff4

0801b61c <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 801b61c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b620:	4696      	mov	lr, r2
 801b622:	b097      	sub	sp, #92	; 0x5c
 801b624:	4605      	mov	r5, r0
 801b626:	4614      	mov	r4, r2
 801b628:	460e      	mov	r6, r1
 801b62a:	461f      	mov	r7, r3
 801b62c:	f10d 0c1c 	add.w	ip, sp, #28
 801b630:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 801b634:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 801b638:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 801b63c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801b640:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b644:	f8de 3000 	ldr.w	r3, [lr]
 801b648:	f104 0e14 	add.w	lr, r4, #20
 801b64c:	f8cc 3000 	str.w	r3, [ip]
 801b650:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801b654:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801b658:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b65c:	f8de 3000 	ldr.w	r3, [lr]
 801b660:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 801b664:	f8cc 3000 	str.w	r3, [ip]
 801b668:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 801b66c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801b670:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b674:	f8de 3000 	ldr.w	r3, [lr]
 801b678:	4631      	mov	r1, r6
 801b67a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801b67c:	4628      	mov	r0, r5
 801b67e:	f8cc 3000 	str.w	r3, [ip]
 801b682:	682b      	ldr	r3, [r5, #0]
 801b684:	9201      	str	r2, [sp, #4]
 801b686:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801b688:	f8cd 8008 	str.w	r8, [sp, #8]
 801b68c:	9200      	str	r2, [sp, #0]
 801b68e:	aa07      	add	r2, sp, #28
 801b690:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801b694:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 801b698:	463b      	mov	r3, r7
 801b69a:	47d8      	blx	fp
 801b69c:	46a6      	mov	lr, r4
 801b69e:	f10d 0c1c 	add.w	ip, sp, #28
 801b6a2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801b6a6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b6aa:	f8de 3000 	ldr.w	r3, [lr]
 801b6ae:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 801b6b2:	343c      	adds	r4, #60	; 0x3c
 801b6b4:	f8cc 3000 	str.w	r3, [ip]
 801b6b8:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801b6bc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801b6c0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b6c4:	f8de 3000 	ldr.w	r3, [lr]
 801b6c8:	f8cc 3000 	str.w	r3, [ip]
 801b6cc:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 801b6d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b6d2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b6d6:	6823      	ldr	r3, [r4, #0]
 801b6d8:	4631      	mov	r1, r6
 801b6da:	4628      	mov	r0, r5
 801b6dc:	f8cc 3000 	str.w	r3, [ip]
 801b6e0:	682b      	ldr	r3, [r5, #0]
 801b6e2:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801b6e6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801b6e8:	f8cd 8008 	str.w	r8, [sp, #8]
 801b6ec:	9201      	str	r2, [sp, #4]
 801b6ee:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801b6f0:	9200      	str	r2, [sp, #0]
 801b6f2:	aa07      	add	r2, sp, #28
 801b6f4:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 801b6f6:	463b      	mov	r3, r7
 801b6f8:	47a0      	blx	r4
 801b6fa:	b017      	add	sp, #92	; 0x5c
 801b6fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b700 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801b700:	2000      	movs	r0, #0
 801b702:	4770      	bx	lr

0801b704 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 801b704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b708:	b08d      	sub	sp, #52	; 0x34
 801b70a:	4688      	mov	r8, r1
 801b70c:	f8d3 c000 	ldr.w	ip, [r3]
 801b710:	9916      	ldr	r1, [sp, #88]	; 0x58
 801b712:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 801b716:	680f      	ldr	r7, [r1, #0]
 801b718:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 801b71c:	eba7 070c 	sub.w	r7, r7, ip
 801b720:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 801b724:	edd3 6a07 	vldr	s13, [r3, #28]
 801b728:	42bc      	cmp	r4, r7
 801b72a:	9918      	ldr	r1, [sp, #96]	; 0x60
 801b72c:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 801b730:	bfa8      	it	ge
 801b732:	463c      	movge	r4, r7
 801b734:	f9b1 9000 	ldrsh.w	r9, [r1]
 801b738:	f9ba 1000 	ldrsh.w	r1, [sl]
 801b73c:	ee07 4a90 	vmov	s15, r4
 801b740:	eb09 0e0c 	add.w	lr, r9, ip
 801b744:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 801b748:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 801b74c:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 801b750:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 801b754:	4571      	cmp	r1, lr
 801b756:	ee25 4a04 	vmul.f32	s8, s10, s8
 801b75a:	ee65 4a24 	vmul.f32	s9, s10, s9
 801b75e:	ee25 5a27 	vmul.f32	s10, s10, s15
 801b762:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801b766:	ee71 0aa4 	vadd.f32	s1, s3, s9
 801b76a:	ee32 1a05 	vadd.f32	s2, s4, s10
 801b76e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801b772:	ee36 0a84 	vadd.f32	s0, s13, s8
 801b776:	ee61 1a87 	vmul.f32	s3, s3, s14
 801b77a:	ee22 2a07 	vmul.f32	s4, s4, s14
 801b77e:	f340 808c 	ble.w	801b89a <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 801b782:	eba1 060e 	sub.w	r6, r1, lr
 801b786:	fb96 f5f4 	sdiv	r5, r6, r4
 801b78a:	ee07 5a10 	vmov	s14, r5
 801b78e:	2d00      	cmp	r5, #0
 801b790:	fb04 6615 	mls	r6, r4, r5, r6
 801b794:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b798:	eea7 0a04 	vfma.f32	s0, s14, s8
 801b79c:	eee7 0a24 	vfma.f32	s1, s14, s9
 801b7a0:	eea7 1a05 	vfma.f32	s2, s14, s10
 801b7a4:	dd12      	ble.n	801b7cc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 801b7a6:	ee70 6a44 	vsub.f32	s13, s0, s8
 801b7aa:	ee70 1ae4 	vsub.f32	s3, s1, s9
 801b7ae:	ee31 2a45 	vsub.f32	s4, s2, s10
 801b7b2:	eef5 6a40 	vcmp.f32	s13, #0.0
 801b7b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b7ba:	bf14      	ite	ne
 801b7bc:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 801b7c0:	eeb0 7a67 	vmoveq.f32	s14, s15
 801b7c4:	ee61 1a87 	vmul.f32	s3, s3, s14
 801b7c8:	ee22 2a07 	vmul.f32	s4, s4, s14
 801b7cc:	fb05 f204 	mul.w	r2, r5, r4
 801b7d0:	1abf      	subs	r7, r7, r2
 801b7d2:	4494      	add	ip, r2
 801b7d4:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 801b7d8:	4411      	add	r1, r2
 801b7da:	eb09 020c 	add.w	r2, r9, ip
 801b7de:	b209      	sxth	r1, r1
 801b7e0:	443a      	add	r2, r7
 801b7e2:	428a      	cmp	r2, r1
 801b7e4:	bfc4      	itt	gt
 801b7e6:	eba1 0209 	subgt.w	r2, r1, r9
 801b7ea:	eba2 070c 	subgt.w	r7, r2, ip
 801b7ee:	2f00      	cmp	r7, #0
 801b7f0:	dd50      	ble.n	801b894 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 801b7f2:	fb97 f1f4 	sdiv	r1, r7, r4
 801b7f6:	fb04 7211 	mls	r2, r4, r1, r7
 801b7fa:	b90a      	cbnz	r2, 801b800 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 801b7fc:	3901      	subs	r1, #1
 801b7fe:	4622      	mov	r2, r4
 801b800:	eec7 3a80 	vdiv.f32	s7, s15, s0
 801b804:	6840      	ldr	r0, [r0, #4]
 801b806:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 801b80a:	44b6      	add	lr, r6
 801b80c:	f8d0 a000 	ldr.w	sl, [r0]
 801b810:	2900      	cmp	r1, #0
 801b812:	bfcc      	ite	gt
 801b814:	46a1      	movgt	r9, r4
 801b816:	4691      	movle	r9, r2
 801b818:	900b      	str	r0, [sp, #44]	; 0x2c
 801b81a:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801b81c:	fb04 e505 	mla	r5, r4, r5, lr
 801b820:	eef0 6a42 	vmov.f32	s13, s4
 801b824:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 801b828:	9008      	str	r0, [sp, #32]
 801b82a:	eeb0 7a61 	vmov.f32	s14, s3
 801b82e:	9818      	ldr	r0, [sp, #96]	; 0x60
 801b830:	695b      	ldr	r3, [r3, #20]
 801b832:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b836:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 801b83a:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801b83e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801b840:	445b      	add	r3, fp
 801b842:	9307      	str	r3, [sp, #28]
 801b844:	ee16 3a90 	vmov	r3, s13
 801b848:	e9cd 8505 	strd	r8, r5, [sp, #20]
 801b84c:	ee60 2aa3 	vmul.f32	s5, s1, s7
 801b850:	ee21 3a23 	vmul.f32	s6, s2, s7
 801b854:	ee72 7ae1 	vsub.f32	s15, s5, s3
 801b858:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801b85c:	ee17 7a90 	vmov	r7, s15
 801b860:	ee73 7a42 	vsub.f32	s15, s6, s4
 801b864:	fb97 f7f4 	sdiv	r7, r7, r4
 801b868:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801b86c:	ee17 ca90 	vmov	ip, s15
 801b870:	fb9c fcf4 	sdiv	ip, ip, r4
 801b874:	fb0c 3306 	mla	r3, ip, r6, r3
 801b878:	9302      	str	r3, [sp, #8]
 801b87a:	ee17 3a10 	vmov	r3, s14
 801b87e:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 801b882:	fb07 3706 	mla	r7, r7, r6, r3
 801b886:	eba9 0306 	sub.w	r3, r9, r6
 801b88a:	e9cd 4700 	strd	r4, r7, [sp]
 801b88e:	f8da 4008 	ldr.w	r4, [sl, #8]
 801b892:	47a0      	blx	r4
 801b894:	b00d      	add	sp, #52	; 0x34
 801b896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b89a:	2500      	movs	r5, #0
 801b89c:	462e      	mov	r6, r5
 801b89e:	e799      	b.n	801b7d4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

0801b8a0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 801b8a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b8a4:	b0db      	sub	sp, #364	; 0x16c
 801b8a6:	461d      	mov	r5, r3
 801b8a8:	4614      	mov	r4, r2
 801b8aa:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 801b8ae:	910f      	str	r1, [sp, #60]	; 0x3c
 801b8b0:	4629      	mov	r1, r5
 801b8b2:	930a      	str	r3, [sp, #40]	; 0x28
 801b8b4:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 801b8b8:	9009      	str	r0, [sp, #36]	; 0x24
 801b8ba:	930b      	str	r3, [sp, #44]	; 0x2c
 801b8bc:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 801b8c0:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 801b8c4:	9310      	str	r3, [sp, #64]	; 0x40
 801b8c6:	6803      	ldr	r3, [r0, #0]
 801b8c8:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 801b8ca:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801b8ce:	47b8      	blx	r7
 801b8d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b8d2:	6058      	str	r0, [r3, #4]
 801b8d4:	2800      	cmp	r0, #0
 801b8d6:	f000 83a1 	beq.w	801c01c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801b8da:	682b      	ldr	r3, [r5, #0]
 801b8dc:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 801b8e0:	ed94 7a02 	vldr	s14, [r4, #8]
 801b8e4:	9314      	str	r3, [sp, #80]	; 0x50
 801b8e6:	686b      	ldr	r3, [r5, #4]
 801b8e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b8ec:	9315      	str	r3, [sp, #84]	; 0x54
 801b8ee:	4bc1      	ldr	r3, [pc, #772]	; (801bbf4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 801b8f0:	7819      	ldrb	r1, [r3, #0]
 801b8f2:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 801b8f6:	2900      	cmp	r1, #0
 801b8f8:	bf16      	itet	ne
 801b8fa:	4619      	movne	r1, r3
 801b8fc:	4611      	moveq	r1, r2
 801b8fe:	4613      	movne	r3, r2
 801b900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b904:	9116      	str	r1, [sp, #88]	; 0x58
 801b906:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 801b90a:	f240 8387 	bls.w	801c01c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801b90e:	ed94 7a07 	vldr	s14, [r4, #28]
 801b912:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b91a:	f240 837f 	bls.w	801c01c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801b91e:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 801b922:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b926:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b92a:	f240 8377 	bls.w	801c01c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801b92e:	6822      	ldr	r2, [r4, #0]
 801b930:	4bb1      	ldr	r3, [pc, #708]	; (801bbf8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 801b932:	429a      	cmp	r2, r3
 801b934:	f2c0 8372 	blt.w	801c01c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801b938:	49b0      	ldr	r1, [pc, #704]	; (801bbfc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 801b93a:	6963      	ldr	r3, [r4, #20]
 801b93c:	428a      	cmp	r2, r1
 801b93e:	f300 836d 	bgt.w	801c01c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801b942:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 801b946:	48ae      	ldr	r0, [pc, #696]	; (801bc00 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 801b948:	33ff      	adds	r3, #255	; 0xff
 801b94a:	4283      	cmp	r3, r0
 801b94c:	f200 8366 	bhi.w	801c01c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801b950:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801b952:	4dac      	ldr	r5, [pc, #688]	; (801bc04 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 801b954:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 801b958:	33ff      	adds	r3, #255	; 0xff
 801b95a:	42ab      	cmp	r3, r5
 801b95c:	f200 835e 	bhi.w	801c01c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801b960:	6862      	ldr	r2, [r4, #4]
 801b962:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 801b966:	33ff      	adds	r3, #255	; 0xff
 801b968:	4283      	cmp	r3, r0
 801b96a:	f200 8357 	bhi.w	801c01c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801b96e:	69a1      	ldr	r1, [r4, #24]
 801b970:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 801b974:	33ff      	adds	r3, #255	; 0xff
 801b976:	4283      	cmp	r3, r0
 801b978:	f200 8350 	bhi.w	801c01c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801b97c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801b97e:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 801b982:	30ff      	adds	r0, #255	; 0xff
 801b984:	42a8      	cmp	r0, r5
 801b986:	f200 8349 	bhi.w	801c01c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801b98a:	428a      	cmp	r2, r1
 801b98c:	f280 8110 	bge.w	801bbb0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 801b990:	429a      	cmp	r2, r3
 801b992:	f300 8119 	bgt.w	801bbc8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 801b996:	4299      	cmp	r1, r3
 801b998:	f280 811d 	bge.w	801bbd6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 801b99c:	2502      	movs	r5, #2
 801b99e:	2701      	movs	r7, #1
 801b9a0:	46a9      	mov	r9, r5
 801b9a2:	46b8      	mov	r8, r7
 801b9a4:	f04f 0a00 	mov.w	sl, #0
 801b9a8:	4621      	mov	r1, r4
 801b9aa:	a849      	add	r0, sp, #292	; 0x124
 801b9ac:	f003 fd00 	bl	801f3b0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 801b9b0:	4622      	mov	r2, r4
 801b9b2:	4653      	mov	r3, sl
 801b9b4:	a949      	add	r1, sp, #292	; 0x124
 801b9b6:	f8cd 9000 	str.w	r9, [sp]
 801b9ba:	a819      	add	r0, sp, #100	; 0x64
 801b9bc:	f003 fe28 	bl	801f610 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801b9c0:	4622      	mov	r2, r4
 801b9c2:	4653      	mov	r3, sl
 801b9c4:	a949      	add	r1, sp, #292	; 0x124
 801b9c6:	f8cd 8000 	str.w	r8, [sp]
 801b9ca:	a829      	add	r0, sp, #164	; 0xa4
 801b9cc:	f003 fe20 	bl	801f610 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801b9d0:	4643      	mov	r3, r8
 801b9d2:	4622      	mov	r2, r4
 801b9d4:	a949      	add	r1, sp, #292	; 0x124
 801b9d6:	f8cd 9000 	str.w	r9, [sp]
 801b9da:	a839      	add	r0, sp, #228	; 0xe4
 801b9dc:	f003 fe18 	bl	801f610 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801b9e0:	42af      	cmp	r7, r5
 801b9e2:	af12      	add	r7, sp, #72	; 0x48
 801b9e4:	bfb7      	itett	lt
 801b9e6:	2300      	movlt	r3, #0
 801b9e8:	2301      	movge	r3, #1
 801b9ea:	ad29      	addlt	r5, sp, #164	; 0xa4
 801b9ec:	ac19      	addlt	r4, sp, #100	; 0x64
 801b9ee:	bfb1      	iteee	lt
 801b9f0:	930e      	strlt	r3, [sp, #56]	; 0x38
 801b9f2:	ad19      	addge	r5, sp, #100	; 0x64
 801b9f4:	930e      	strge	r3, [sp, #56]	; 0x38
 801b9f6:	ac29      	addge	r4, sp, #164	; 0xa4
 801b9f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b9fa:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b9fe:	e887 0003 	stmia.w	r7, {r0, r1}
 801ba02:	b928      	cbnz	r0, 801ba10 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 801ba04:	4b80      	ldr	r3, [pc, #512]	; (801bc08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 801ba06:	6818      	ldr	r0, [r3, #0]
 801ba08:	6803      	ldr	r3, [r0, #0]
 801ba0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ba0c:	4798      	blx	r3
 801ba0e:	6038      	str	r0, [r7, #0]
 801ba10:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801ba12:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801ba16:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801ba1a:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801ba1c:	930c      	str	r3, [sp, #48]	; 0x30
 801ba1e:	990c      	ldr	r1, [sp, #48]	; 0x30
 801ba20:	6963      	ldr	r3, [r4, #20]
 801ba22:	440b      	add	r3, r1
 801ba24:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801ba28:	4408      	add	r0, r1
 801ba2a:	b200      	sxth	r0, r0
 801ba2c:	4283      	cmp	r3, r0
 801ba2e:	900d      	str	r0, [sp, #52]	; 0x34
 801ba30:	f280 80dd 	bge.w	801bbee <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 801ba34:	428b      	cmp	r3, r1
 801ba36:	da08      	bge.n	801ba4a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801ba38:	2a00      	cmp	r2, #0
 801ba3a:	dd06      	ble.n	801ba4a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801ba3c:	1acb      	subs	r3, r1, r3
 801ba3e:	429a      	cmp	r2, r3
 801ba40:	f2c0 80e4 	blt.w	801bc0c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 801ba44:	2b00      	cmp	r3, #0
 801ba46:	f300 80e2 	bgt.w	801bc0e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 801ba4a:	6967      	ldr	r7, [r4, #20]
 801ba4c:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 801ba50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ba52:	443b      	add	r3, r7
 801ba54:	461f      	mov	r7, r3
 801ba56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ba58:	1bdf      	subs	r7, r3, r7
 801ba5a:	4297      	cmp	r7, r2
 801ba5c:	bfa8      	it	ge
 801ba5e:	4617      	movge	r7, r2
 801ba60:	2f00      	cmp	r7, #0
 801ba62:	f340 8166 	ble.w	801bd32 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 801ba66:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801ba68:	6829      	ldr	r1, [r5, #0]
 801ba6a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801ba6e:	f9bb 3000 	ldrsh.w	r3, [fp]
 801ba72:	4411      	add	r1, r2
 801ba74:	6820      	ldr	r0, [r4, #0]
 801ba76:	4299      	cmp	r1, r3
 801ba78:	dd1a      	ble.n	801bab0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801ba7a:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801ba7e:	4402      	add	r2, r0
 801ba80:	440b      	add	r3, r1
 801ba82:	b21b      	sxth	r3, r3
 801ba84:	429a      	cmp	r2, r3
 801ba86:	dc13      	bgt.n	801bab0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801ba88:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ba8a:	a912      	add	r1, sp, #72	; 0x48
 801ba8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ba8e:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ba90:	681b      	ldr	r3, [r3, #0]
 801ba92:	9206      	str	r2, [sp, #24]
 801ba94:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801ba96:	9500      	str	r5, [sp, #0]
 801ba98:	9205      	str	r2, [sp, #20]
 801ba9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ba9c:	e9cd b203 	strd	fp, r2, [sp, #12]
 801baa0:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801baa2:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801baa6:	aa49      	add	r2, sp, #292	; 0x124
 801baa8:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 801baac:	4623      	mov	r3, r4
 801baae:	47c8      	blx	r9
 801bab0:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 801bab4:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 801bab8:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 801babc:	ee37 7a27 	vadd.f32	s14, s14, s15
 801bac0:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 801bac4:	68a1      	ldr	r1, [r4, #8]
 801bac6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801baca:	ed94 6a08 	vldr	s12, [r4, #32]
 801bace:	edd4 6a07 	vldr	s13, [r4, #28]
 801bad2:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801bad6:	ee76 6a86 	vadd.f32	s13, s13, s12
 801bada:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801bade:	e9d4 2300 	ldrd	r2, r3, [r4]
 801bae2:	edc4 6a07 	vstr	s13, [r4, #28]
 801bae6:	441a      	add	r2, r3
 801bae8:	6963      	ldr	r3, [r4, #20]
 801baea:	3301      	adds	r3, #1
 801baec:	6022      	str	r2, [r4, #0]
 801baee:	6163      	str	r3, [r4, #20]
 801baf0:	69a3      	ldr	r3, [r4, #24]
 801baf2:	3b01      	subs	r3, #1
 801baf4:	61a3      	str	r3, [r4, #24]
 801baf6:	6923      	ldr	r3, [r4, #16]
 801baf8:	440b      	add	r3, r1
 801bafa:	68e1      	ldr	r1, [r4, #12]
 801bafc:	428b      	cmp	r3, r1
 801bafe:	6123      	str	r3, [r4, #16]
 801bb00:	db15      	blt.n	801bb2e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 801bb02:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 801bb06:	3201      	adds	r2, #1
 801bb08:	1a5b      	subs	r3, r3, r1
 801bb0a:	ee76 6a26 	vadd.f32	s13, s12, s13
 801bb0e:	6022      	str	r2, [r4, #0]
 801bb10:	6123      	str	r3, [r4, #16]
 801bb12:	edc4 6a07 	vstr	s13, [r4, #28]
 801bb16:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 801bb1a:	ee36 7a87 	vadd.f32	s14, s13, s14
 801bb1e:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801bb22:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 801bb26:	ee77 7a27 	vadd.f32	s15, s14, s15
 801bb2a:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801bb2e:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 801bb32:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 801bb36:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 801bb3a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801bb3e:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 801bb42:	68a9      	ldr	r1, [r5, #8]
 801bb44:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801bb48:	ed95 6a08 	vldr	s12, [r5, #32]
 801bb4c:	edd5 6a07 	vldr	s13, [r5, #28]
 801bb50:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801bb54:	ee76 6a86 	vadd.f32	s13, s13, s12
 801bb58:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801bb5c:	e9d5 2300 	ldrd	r2, r3, [r5]
 801bb60:	edc5 6a07 	vstr	s13, [r5, #28]
 801bb64:	441a      	add	r2, r3
 801bb66:	696b      	ldr	r3, [r5, #20]
 801bb68:	3301      	adds	r3, #1
 801bb6a:	602a      	str	r2, [r5, #0]
 801bb6c:	616b      	str	r3, [r5, #20]
 801bb6e:	69ab      	ldr	r3, [r5, #24]
 801bb70:	3b01      	subs	r3, #1
 801bb72:	61ab      	str	r3, [r5, #24]
 801bb74:	692b      	ldr	r3, [r5, #16]
 801bb76:	440b      	add	r3, r1
 801bb78:	68e9      	ldr	r1, [r5, #12]
 801bb7a:	428b      	cmp	r3, r1
 801bb7c:	612b      	str	r3, [r5, #16]
 801bb7e:	db15      	blt.n	801bbac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 801bb80:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801bb84:	3201      	adds	r2, #1
 801bb86:	1a5b      	subs	r3, r3, r1
 801bb88:	ee76 6a26 	vadd.f32	s13, s12, s13
 801bb8c:	602a      	str	r2, [r5, #0]
 801bb8e:	612b      	str	r3, [r5, #16]
 801bb90:	edc5 6a07 	vstr	s13, [r5, #28]
 801bb94:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 801bb98:	ee36 7a87 	vadd.f32	s14, s13, s14
 801bb9c:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801bba0:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 801bba4:	ee77 7a27 	vadd.f32	s15, s14, s15
 801bba8:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801bbac:	3f01      	subs	r7, #1
 801bbae:	e757      	b.n	801ba60 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 801bbb0:	4299      	cmp	r1, r3
 801bbb2:	dc13      	bgt.n	801bbdc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 801bbb4:	429a      	cmp	r2, r3
 801bbb6:	da14      	bge.n	801bbe2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 801bbb8:	2502      	movs	r5, #2
 801bbba:	2703      	movs	r7, #3
 801bbbc:	f04f 0800 	mov.w	r8, #0
 801bbc0:	46a9      	mov	r9, r5
 801bbc2:	f04f 0a01 	mov.w	sl, #1
 801bbc6:	e6ef      	b.n	801b9a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801bbc8:	2501      	movs	r5, #1
 801bbca:	2700      	movs	r7, #0
 801bbcc:	46a9      	mov	r9, r5
 801bbce:	46b8      	mov	r8, r7
 801bbd0:	f04f 0a02 	mov.w	sl, #2
 801bbd4:	e6e8      	b.n	801b9a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801bbd6:	2501      	movs	r5, #1
 801bbd8:	2702      	movs	r7, #2
 801bbda:	e6e1      	b.n	801b9a0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 801bbdc:	2500      	movs	r5, #0
 801bbde:	2701      	movs	r7, #1
 801bbe0:	e7f4      	b.n	801bbcc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 801bbe2:	2702      	movs	r7, #2
 801bbe4:	2503      	movs	r5, #3
 801bbe6:	f04f 0900 	mov.w	r9, #0
 801bbea:	46b8      	mov	r8, r7
 801bbec:	e7e9      	b.n	801bbc2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 801bbee:	4613      	mov	r3, r2
 801bbf0:	e728      	b.n	801ba44 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 801bbf2:	bf00      	nop
 801bbf4:	24006fe4 	.word	0x24006fe4
 801bbf8:	fffd8f01 	.word	0xfffd8f01
 801bbfc:	00027100 	.word	0x00027100
 801bc00:	0004e1ff 	.word	0x0004e1ff
 801bc04:	0004e1fe 	.word	0x0004e1fe
 801bc08:	24006fec 	.word	0x24006fec
 801bc0c:	4613      	mov	r3, r2
 801bc0e:	992b      	ldr	r1, [sp, #172]	; 0xac
 801bc10:	469e      	mov	lr, r3
 801bc12:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 801bc14:	469c      	mov	ip, r3
 801bc16:	9111      	str	r1, [sp, #68]	; 0x44
 801bc18:	f04f 0900 	mov.w	r9, #0
 801bc1c:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 801bc20:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 801bc24:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 801bc28:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 801bc2c:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 801bc30:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 801bc34:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 801bc38:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 801bc3c:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 801bc40:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 801bc44:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 801bc48:	f1bc 0f00 	cmp.w	ip, #0
 801bc4c:	d147      	bne.n	801bcde <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 801bc4e:	eb03 0c07 	add.w	ip, r3, r7
 801bc52:	1ad7      	subs	r7, r2, r3
 801bc54:	f1b9 0f00 	cmp.w	r9, #0
 801bc58:	d009      	beq.n	801bc6e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 801bc5a:	9029      	str	r0, [sp, #164]	; 0xa4
 801bc5c:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 801bc60:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 801bc64:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 801bc68:	912d      	str	r1, [sp, #180]	; 0xb4
 801bc6a:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 801bc6e:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801bc70:	f04f 0800 	mov.w	r8, #0
 801bc74:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 801bc78:	9111      	str	r1, [sp, #68]	; 0x44
 801bc7a:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 801bc7e:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 801bc82:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801bc86:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801bc8a:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 801bc8e:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801bc92:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801bc96:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801bc9a:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 801bc9e:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 801bca2:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801bca6:	f1be 0f00 	cmp.w	lr, #0
 801bcaa:	d031      	beq.n	801bd10 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 801bcac:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801bcae:	4450      	add	r0, sl
 801bcb0:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801bcb4:	4431      	add	r1, r6
 801bcb6:	ee37 7a04 	vadd.f32	s14, s14, s8
 801bcba:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801bcbe:	4549      	cmp	r1, r9
 801bcc0:	db08      	blt.n	801bcd4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 801bcc2:	ee77 7a85 	vadd.f32	s15, s15, s10
 801bcc6:	3001      	adds	r0, #1
 801bcc8:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801bccc:	eba1 0109 	sub.w	r1, r1, r9
 801bcd0:	ee37 7a06 	vadd.f32	s14, s14, s12
 801bcd4:	f10e 3eff 	add.w	lr, lr, #4294967295
 801bcd8:	f04f 0801 	mov.w	r8, #1
 801bcdc:	e7e3      	b.n	801bca6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 801bcde:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801bce0:	4450      	add	r0, sl
 801bce2:	ee37 7a24 	vadd.f32	s14, s14, s9
 801bce6:	4431      	add	r1, r6
 801bce8:	ee77 7a84 	vadd.f32	s15, s15, s8
 801bcec:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801bcf0:	4541      	cmp	r1, r8
 801bcf2:	db08      	blt.n	801bd06 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 801bcf4:	ee76 6a85 	vadd.f32	s13, s13, s10
 801bcf8:	3001      	adds	r0, #1
 801bcfa:	ee37 7a25 	vadd.f32	s14, s14, s11
 801bcfe:	eba1 0108 	sub.w	r1, r1, r8
 801bd02:	ee77 7a86 	vadd.f32	s15, s15, s12
 801bd06:	f10c 3cff 	add.w	ip, ip, #4294967295
 801bd0a:	f04f 0901 	mov.w	r9, #1
 801bd0e:	e79b      	b.n	801bc48 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 801bd10:	449c      	add	ip, r3
 801bd12:	1aff      	subs	r7, r7, r3
 801bd14:	f1b8 0f00 	cmp.w	r8, #0
 801bd18:	d009      	beq.n	801bd2e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 801bd1a:	9019      	str	r0, [sp, #100]	; 0x64
 801bd1c:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 801bd20:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 801bd24:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 801bd28:	911d      	str	r1, [sp, #116]	; 0x74
 801bd2a:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 801bd2e:	1ad2      	subs	r2, r2, r3
 801bd30:	e68b      	b.n	801ba4a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801bd32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bd34:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 801bd36:	2b00      	cmp	r3, #0
 801bd38:	f000 80d1 	beq.w	801bede <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 801bd3c:	ad19      	add	r5, sp, #100	; 0x64
 801bd3e:	ac39      	add	r4, sp, #228	; 0xe4
 801bd40:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801bd42:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801bd46:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801bd4a:	930c      	str	r3, [sp, #48]	; 0x30
 801bd4c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801bd4e:	6963      	ldr	r3, [r4, #20]
 801bd50:	440b      	add	r3, r1
 801bd52:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801bd56:	4408      	add	r0, r1
 801bd58:	b200      	sxth	r0, r0
 801bd5a:	4283      	cmp	r3, r0
 801bd5c:	900d      	str	r0, [sp, #52]	; 0x34
 801bd5e:	f280 80c1 	bge.w	801bee4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 801bd62:	428b      	cmp	r3, r1
 801bd64:	da08      	bge.n	801bd78 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801bd66:	2a00      	cmp	r2, #0
 801bd68:	dd06      	ble.n	801bd78 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801bd6a:	1acb      	subs	r3, r1, r3
 801bd6c:	429a      	cmp	r2, r3
 801bd6e:	f2c0 80bb 	blt.w	801bee8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 801bd72:	2b00      	cmp	r3, #0
 801bd74:	f300 80b9 	bgt.w	801beea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 801bd78:	6967      	ldr	r7, [r4, #20]
 801bd7a:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 801bd7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bd80:	443b      	add	r3, r7
 801bd82:	461f      	mov	r7, r3
 801bd84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bd86:	1bdf      	subs	r7, r3, r7
 801bd88:	4297      	cmp	r7, r2
 801bd8a:	bfa8      	it	ge
 801bd8c:	4617      	movge	r7, r2
 801bd8e:	2f00      	cmp	r7, #0
 801bd90:	f340 813c 	ble.w	801c00c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 801bd94:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801bd96:	6829      	ldr	r1, [r5, #0]
 801bd98:	f9b3 2000 	ldrsh.w	r2, [r3]
 801bd9c:	f9bb 3000 	ldrsh.w	r3, [fp]
 801bda0:	4411      	add	r1, r2
 801bda2:	6820      	ldr	r0, [r4, #0]
 801bda4:	4299      	cmp	r1, r3
 801bda6:	dd1a      	ble.n	801bdde <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801bda8:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801bdac:	4402      	add	r2, r0
 801bdae:	440b      	add	r3, r1
 801bdb0:	b21b      	sxth	r3, r3
 801bdb2:	429a      	cmp	r2, r3
 801bdb4:	dc13      	bgt.n	801bdde <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801bdb6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801bdb8:	a912      	add	r1, sp, #72	; 0x48
 801bdba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bdbc:	9809      	ldr	r0, [sp, #36]	; 0x24
 801bdbe:	681b      	ldr	r3, [r3, #0]
 801bdc0:	9206      	str	r2, [sp, #24]
 801bdc2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801bdc4:	9500      	str	r5, [sp, #0]
 801bdc6:	9205      	str	r2, [sp, #20]
 801bdc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801bdca:	e9cd b203 	strd	fp, r2, [sp, #12]
 801bdce:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801bdd0:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801bdd4:	aa49      	add	r2, sp, #292	; 0x124
 801bdd6:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 801bdda:	4623      	mov	r3, r4
 801bddc:	47c8      	blx	r9
 801bdde:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 801bde2:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 801bde6:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 801bdea:	ee37 7a27 	vadd.f32	s14, s14, s15
 801bdee:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 801bdf2:	68a1      	ldr	r1, [r4, #8]
 801bdf4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801bdf8:	ed94 6a08 	vldr	s12, [r4, #32]
 801bdfc:	edd4 6a07 	vldr	s13, [r4, #28]
 801be00:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801be04:	ee76 6a86 	vadd.f32	s13, s13, s12
 801be08:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801be0c:	e9d4 2300 	ldrd	r2, r3, [r4]
 801be10:	edc4 6a07 	vstr	s13, [r4, #28]
 801be14:	441a      	add	r2, r3
 801be16:	6963      	ldr	r3, [r4, #20]
 801be18:	3301      	adds	r3, #1
 801be1a:	6022      	str	r2, [r4, #0]
 801be1c:	6163      	str	r3, [r4, #20]
 801be1e:	69a3      	ldr	r3, [r4, #24]
 801be20:	3b01      	subs	r3, #1
 801be22:	61a3      	str	r3, [r4, #24]
 801be24:	6923      	ldr	r3, [r4, #16]
 801be26:	440b      	add	r3, r1
 801be28:	68e1      	ldr	r1, [r4, #12]
 801be2a:	428b      	cmp	r3, r1
 801be2c:	6123      	str	r3, [r4, #16]
 801be2e:	db15      	blt.n	801be5c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 801be30:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 801be34:	3201      	adds	r2, #1
 801be36:	1a5b      	subs	r3, r3, r1
 801be38:	ee76 6a26 	vadd.f32	s13, s12, s13
 801be3c:	6022      	str	r2, [r4, #0]
 801be3e:	6123      	str	r3, [r4, #16]
 801be40:	edc4 6a07 	vstr	s13, [r4, #28]
 801be44:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 801be48:	ee36 7a87 	vadd.f32	s14, s13, s14
 801be4c:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801be50:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 801be54:	ee77 7a27 	vadd.f32	s15, s14, s15
 801be58:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801be5c:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 801be60:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 801be64:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 801be68:	ee37 7a27 	vadd.f32	s14, s14, s15
 801be6c:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 801be70:	68a9      	ldr	r1, [r5, #8]
 801be72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801be76:	ed95 6a08 	vldr	s12, [r5, #32]
 801be7a:	edd5 6a07 	vldr	s13, [r5, #28]
 801be7e:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801be82:	ee76 6a86 	vadd.f32	s13, s13, s12
 801be86:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801be8a:	e9d5 2300 	ldrd	r2, r3, [r5]
 801be8e:	edc5 6a07 	vstr	s13, [r5, #28]
 801be92:	441a      	add	r2, r3
 801be94:	696b      	ldr	r3, [r5, #20]
 801be96:	3301      	adds	r3, #1
 801be98:	602a      	str	r2, [r5, #0]
 801be9a:	616b      	str	r3, [r5, #20]
 801be9c:	69ab      	ldr	r3, [r5, #24]
 801be9e:	3b01      	subs	r3, #1
 801bea0:	61ab      	str	r3, [r5, #24]
 801bea2:	692b      	ldr	r3, [r5, #16]
 801bea4:	440b      	add	r3, r1
 801bea6:	68e9      	ldr	r1, [r5, #12]
 801bea8:	428b      	cmp	r3, r1
 801beaa:	612b      	str	r3, [r5, #16]
 801beac:	db15      	blt.n	801beda <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 801beae:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801beb2:	3201      	adds	r2, #1
 801beb4:	1a5b      	subs	r3, r3, r1
 801beb6:	ee76 6a26 	vadd.f32	s13, s12, s13
 801beba:	602a      	str	r2, [r5, #0]
 801bebc:	612b      	str	r3, [r5, #16]
 801bebe:	edc5 6a07 	vstr	s13, [r5, #28]
 801bec2:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 801bec6:	ee36 7a87 	vadd.f32	s14, s13, s14
 801beca:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801bece:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 801bed2:	ee77 7a27 	vadd.f32	s15, s14, s15
 801bed6:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801beda:	3f01      	subs	r7, #1
 801bedc:	e757      	b.n	801bd8e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 801bede:	ad39      	add	r5, sp, #228	; 0xe4
 801bee0:	ac19      	add	r4, sp, #100	; 0x64
 801bee2:	e72d      	b.n	801bd40 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 801bee4:	4613      	mov	r3, r2
 801bee6:	e744      	b.n	801bd72 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 801bee8:	4613      	mov	r3, r2
 801beea:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 801beec:	469e      	mov	lr, r3
 801beee:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 801bef2:	461f      	mov	r7, r3
 801bef4:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 801bef8:	f04f 0900 	mov.w	r9, #0
 801befc:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 801bf00:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 801bf04:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 801bf08:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 801bf0c:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 801bf10:	993d      	ldr	r1, [sp, #244]	; 0xf4
 801bf12:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 801bf16:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 801bf1a:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 801bf1e:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 801bf22:	960e      	str	r6, [sp, #56]	; 0x38
 801bf24:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 801bf28:	2f00      	cmp	r7, #0
 801bf2a:	d146      	bne.n	801bfba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 801bf2c:	449c      	add	ip, r3
 801bf2e:	1ad7      	subs	r7, r2, r3
 801bf30:	f1b9 0f00 	cmp.w	r9, #0
 801bf34:	d009      	beq.n	801bf4a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 801bf36:	9039      	str	r0, [sp, #228]	; 0xe4
 801bf38:	913d      	str	r1, [sp, #244]	; 0xf4
 801bf3a:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 801bf3e:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 801bf42:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 801bf46:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 801bf4a:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801bf4c:	f04f 0800 	mov.w	r8, #0
 801bf50:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 801bf54:	910e      	str	r1, [sp, #56]	; 0x38
 801bf56:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 801bf5a:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 801bf5e:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801bf62:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801bf66:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 801bf6a:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801bf6e:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801bf72:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801bf76:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 801bf7a:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 801bf7e:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801bf82:	f1be 0f00 	cmp.w	lr, #0
 801bf86:	d030      	beq.n	801bfea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 801bf88:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801bf8a:	4450      	add	r0, sl
 801bf8c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801bf90:	4431      	add	r1, r6
 801bf92:	ee37 7a04 	vadd.f32	s14, s14, s8
 801bf96:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801bf9a:	4549      	cmp	r1, r9
 801bf9c:	db08      	blt.n	801bfb0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 801bf9e:	ee77 7a85 	vadd.f32	s15, s15, s10
 801bfa2:	3001      	adds	r0, #1
 801bfa4:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801bfa8:	eba1 0109 	sub.w	r1, r1, r9
 801bfac:	ee37 7a06 	vadd.f32	s14, s14, s12
 801bfb0:	f10e 3eff 	add.w	lr, lr, #4294967295
 801bfb4:	f04f 0801 	mov.w	r8, #1
 801bfb8:	e7e3      	b.n	801bf82 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 801bfba:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801bfbc:	4450      	add	r0, sl
 801bfbe:	ee37 7a24 	vadd.f32	s14, s14, s9
 801bfc2:	4431      	add	r1, r6
 801bfc4:	ee77 7a84 	vadd.f32	s15, s15, s8
 801bfc8:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801bfcc:	4541      	cmp	r1, r8
 801bfce:	db08      	blt.n	801bfe2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 801bfd0:	ee76 6a85 	vadd.f32	s13, s13, s10
 801bfd4:	3001      	adds	r0, #1
 801bfd6:	ee37 7a25 	vadd.f32	s14, s14, s11
 801bfda:	eba1 0108 	sub.w	r1, r1, r8
 801bfde:	ee77 7a86 	vadd.f32	s15, s15, s12
 801bfe2:	3f01      	subs	r7, #1
 801bfe4:	f04f 0901 	mov.w	r9, #1
 801bfe8:	e79e      	b.n	801bf28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 801bfea:	449c      	add	ip, r3
 801bfec:	1aff      	subs	r7, r7, r3
 801bfee:	f1b8 0f00 	cmp.w	r8, #0
 801bff2:	d009      	beq.n	801c008 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 801bff4:	9019      	str	r0, [sp, #100]	; 0x64
 801bff6:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 801bffa:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 801bffe:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 801c002:	911d      	str	r1, [sp, #116]	; 0x74
 801c004:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 801c008:	1ad2      	subs	r2, r2, r3
 801c00a:	e6b5      	b.n	801bd78 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801c00c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c00e:	681b      	ldr	r3, [r3, #0]
 801c010:	b923      	cbnz	r3, 801c01c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801c012:	4b04      	ldr	r3, [pc, #16]	; (801c024 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 801c014:	6818      	ldr	r0, [r3, #0]
 801c016:	6803      	ldr	r3, [r0, #0]
 801c018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c01a:	4798      	blx	r3
 801c01c:	b05b      	add	sp, #364	; 0x16c
 801c01e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c022:	bf00      	nop
 801c024:	24006fec 	.word	0x24006fec

0801c028 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>:
 801c028:	b570      	push	{r4, r5, r6, lr}
 801c02a:	4604      	mov	r4, r0
 801c02c:	2500      	movs	r5, #0
 801c02e:	9805      	ldr	r0, [sp, #20]
 801c030:	f89d 601c 	ldrb.w	r6, [sp, #28]
 801c034:	6061      	str	r1, [r4, #4]
 801c036:	8263      	strh	r3, [r4, #18]
 801c038:	f89d 1010 	ldrb.w	r1, [sp, #16]
 801c03c:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801c040:	8025      	strh	r5, [r4, #0]
 801c042:	7221      	strb	r1, [r4, #8]
 801c044:	7266      	strb	r6, [r4, #9]
 801c046:	60e0      	str	r0, [r4, #12]
 801c048:	8222      	strh	r2, [r4, #16]
 801c04a:	82a3      	strh	r3, [r4, #20]
 801c04c:	82e5      	strh	r5, [r4, #22]
 801c04e:	8325      	strh	r5, [r4, #24]
 801c050:	8365      	strh	r5, [r4, #26]
 801c052:	83a5      	strh	r5, [r4, #28]
 801c054:	83e5      	strh	r5, [r4, #30]
 801c056:	8425      	strh	r5, [r4, #32]
 801c058:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
 801c05c:	b32e      	cbz	r6, 801c0aa <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 801c05e:	6803      	ldr	r3, [r0, #0]
 801c060:	695b      	ldr	r3, [r3, #20]
 801c062:	4798      	blx	r3
 801c064:	4606      	mov	r6, r0
 801c066:	b300      	cbz	r0, 801c0aa <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 801c068:	68e0      	ldr	r0, [r4, #12]
 801c06a:	4631      	mov	r1, r6
 801c06c:	6803      	ldr	r3, [r0, #0]
 801c06e:	68db      	ldr	r3, [r3, #12]
 801c070:	4798      	blx	r3
 801c072:	4605      	mov	r5, r0
 801c074:	b1c8      	cbz	r0, 801c0aa <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 801c076:	7b43      	ldrb	r3, [r0, #13]
 801c078:	7a82      	ldrb	r2, [r0, #10]
 801c07a:	005b      	lsls	r3, r3, #1
 801c07c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c080:	4313      	orrs	r3, r2
 801c082:	8423      	strh	r3, [r4, #32]
 801c084:	7a63      	ldrb	r3, [r4, #9]
 801c086:	2b06      	cmp	r3, #6
 801c088:	d10f      	bne.n	801c0aa <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 801c08a:	68e0      	ldr	r0, [r4, #12]
 801c08c:	462a      	mov	r2, r5
 801c08e:	4631      	mov	r1, r6
 801c090:	6803      	ldr	r3, [r0, #0]
 801c092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c094:	4798      	blx	r3
 801c096:	7b6b      	ldrb	r3, [r5, #13]
 801c098:	005b      	lsls	r3, r3, #1
 801c09a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801c09e:	7aab      	ldrb	r3, [r5, #10]
 801c0a0:	4313      	orrs	r3, r2
 801c0a2:	4418      	add	r0, r3
 801c0a4:	8c23      	ldrh	r3, [r4, #32]
 801c0a6:	4418      	add	r0, r3
 801c0a8:	8420      	strh	r0, [r4, #32]
 801c0aa:	4620      	mov	r0, r4
 801c0ac:	bd70      	pop	{r4, r5, r6, pc}

0801c0ae <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 801c0ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c0b2:	2400      	movs	r4, #0
 801c0b4:	b085      	sub	sp, #20
 801c0b6:	4681      	mov	r9, r0
 801c0b8:	4688      	mov	r8, r1
 801c0ba:	4692      	mov	sl, r2
 801c0bc:	469b      	mov	fp, r3
 801c0be:	4627      	mov	r7, r4
 801c0c0:	4625      	mov	r5, r4
 801c0c2:	4626      	mov	r6, r4
 801c0c4:	4554      	cmp	r4, sl
 801c0c6:	da2a      	bge.n	801c11e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801c0c8:	2300      	movs	r3, #0
 801c0ca:	9303      	str	r3, [sp, #12]
 801c0cc:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801c0d0:	429d      	cmp	r5, r3
 801c0d2:	d004      	beq.n	801c0de <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 801c0d4:	f242 030b 	movw	r3, #8203	; 0x200b
 801c0d8:	429d      	cmp	r5, r3
 801c0da:	bf18      	it	ne
 801c0dc:	462f      	movne	r7, r5
 801c0de:	ab03      	add	r3, sp, #12
 801c0e0:	4642      	mov	r2, r8
 801c0e2:	4659      	mov	r1, fp
 801c0e4:	4648      	mov	r0, r9
 801c0e6:	f002 ff79 	bl	801efdc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801c0ea:	4605      	mov	r5, r0
 801c0ec:	b1b8      	cbz	r0, 801c11e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801c0ee:	280a      	cmp	r0, #10
 801c0f0:	d015      	beq.n	801c11e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801c0f2:	9a03      	ldr	r2, [sp, #12]
 801c0f4:	b18a      	cbz	r2, 801c11a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 801c0f6:	7b50      	ldrb	r0, [r2, #13]
 801c0f8:	4639      	mov	r1, r7
 801c0fa:	7a93      	ldrb	r3, [r2, #10]
 801c0fc:	0040      	lsls	r0, r0, #1
 801c0fe:	8895      	ldrh	r5, [r2, #4]
 801c100:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801c104:	4303      	orrs	r3, r0
 801c106:	4640      	mov	r0, r8
 801c108:	9301      	str	r3, [sp, #4]
 801c10a:	f8d8 3000 	ldr.w	r3, [r8]
 801c10e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c110:	4798      	blx	r3
 801c112:	9b01      	ldr	r3, [sp, #4]
 801c114:	4418      	add	r0, r3
 801c116:	4406      	add	r6, r0
 801c118:	b2b6      	uxth	r6, r6
 801c11a:	3401      	adds	r4, #1
 801c11c:	e7d2      	b.n	801c0c4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 801c11e:	4630      	mov	r0, r6
 801c120:	b005      	add	sp, #20
 801c122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c126 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 801c126:	2a02      	cmp	r2, #2
 801c128:	b530      	push	{r4, r5, lr}
 801c12a:	d011      	beq.n	801c150 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 801c12c:	2a03      	cmp	r2, #3
 801c12e:	d01c      	beq.n	801c16a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 801c130:	2a01      	cmp	r2, #1
 801c132:	d10c      	bne.n	801c14e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801c134:	888b      	ldrh	r3, [r1, #4]
 801c136:	8801      	ldrh	r1, [r0, #0]
 801c138:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 801c13c:	1a5b      	subs	r3, r3, r1
 801c13e:	8844      	ldrh	r4, [r0, #2]
 801c140:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801c144:	1a9b      	subs	r3, r3, r2
 801c146:	8004      	strh	r4, [r0, #0]
 801c148:	8081      	strh	r1, [r0, #4]
 801c14a:	8043      	strh	r3, [r0, #2]
 801c14c:	80c2      	strh	r2, [r0, #6]
 801c14e:	bd30      	pop	{r4, r5, pc}
 801c150:	88cb      	ldrh	r3, [r1, #6]
 801c152:	8842      	ldrh	r2, [r0, #2]
 801c154:	1a9b      	subs	r3, r3, r2
 801c156:	88c2      	ldrh	r2, [r0, #6]
 801c158:	1a9b      	subs	r3, r3, r2
 801c15a:	888a      	ldrh	r2, [r1, #4]
 801c15c:	8801      	ldrh	r1, [r0, #0]
 801c15e:	8043      	strh	r3, [r0, #2]
 801c160:	1a52      	subs	r2, r2, r1
 801c162:	8881      	ldrh	r1, [r0, #4]
 801c164:	1a52      	subs	r2, r2, r1
 801c166:	8002      	strh	r2, [r0, #0]
 801c168:	e7f1      	b.n	801c14e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801c16a:	88cb      	ldrh	r3, [r1, #6]
 801c16c:	8841      	ldrh	r1, [r0, #2]
 801c16e:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801c172:	1a5b      	subs	r3, r3, r1
 801c174:	f9b0 5000 	ldrsh.w	r5, [r0]
 801c178:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 801c17c:	1a9b      	subs	r3, r3, r2
 801c17e:	8045      	strh	r5, [r0, #2]
 801c180:	8082      	strh	r2, [r0, #4]
 801c182:	8003      	strh	r3, [r0, #0]
 801c184:	80c4      	strh	r4, [r0, #6]
 801c186:	e7e2      	b.n	801c14e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

0801c188 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 801c188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c18c:	b09f      	sub	sp, #124	; 0x7c
 801c18e:	9116      	str	r1, [sp, #88]	; 0x58
 801c190:	9317      	str	r3, [sp, #92]	; 0x5c
 801c192:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801c194:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801c196:	8809      	ldrh	r1, [r1, #0]
 801c198:	889b      	ldrh	r3, [r3, #4]
 801c19a:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 801c19e:	440b      	add	r3, r1
 801c1a0:	9212      	str	r2, [sp, #72]	; 0x48
 801c1a2:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 801c1a6:	b21b      	sxth	r3, r3
 801c1a8:	9011      	str	r0, [sp, #68]	; 0x44
 801c1aa:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 801c1ae:	9310      	str	r3, [sp, #64]	; 0x40
 801c1b0:	f8d8 3000 	ldr.w	r3, [r8]
 801c1b4:	f9bd 60a0 	ldrsh.w	r6, [sp, #160]	; 0xa0
 801c1b8:	7b19      	ldrb	r1, [r3, #12]
 801c1ba:	7adb      	ldrb	r3, [r3, #11]
 801c1bc:	9114      	str	r1, [sp, #80]	; 0x50
 801c1be:	9315      	str	r3, [sp, #84]	; 0x54
 801c1c0:	2a00      	cmp	r2, #0
 801c1c2:	d06a      	beq.n	801c29a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 801c1c4:	f898 3010 	ldrb.w	r3, [r8, #16]
 801c1c8:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801c1ca:	2b06      	cmp	r3, #6
 801c1cc:	bf14      	ite	ne
 801c1ce:	2301      	movne	r3, #1
 801c1d0:	2302      	moveq	r3, #2
 801c1d2:	4413      	add	r3, r2
 801c1d4:	f04f 0900 	mov.w	r9, #0
 801c1d8:	930f      	str	r3, [sp, #60]	; 0x3c
 801c1da:	464c      	mov	r4, r9
 801c1dc:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801c1e0:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 801c1e4:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 801c1e8:	4293      	cmp	r3, r2
 801c1ea:	f280 808f 	bge.w	801c30c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 801c1ee:	2300      	movs	r3, #0
 801c1f0:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
 801c1f4:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 801c1f8:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801c1fc:	429c      	cmp	r4, r3
 801c1fe:	d006      	beq.n	801c20e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
 801c200:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c202:	f242 020b 	movw	r2, #8203	; 0x200b
 801c206:	4294      	cmp	r4, r2
 801c208:	bf18      	it	ne
 801c20a:	4623      	movne	r3, r4
 801c20c:	930d      	str	r3, [sp, #52]	; 0x34
 801c20e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c210:	992d      	ldr	r1, [sp, #180]	; 0xb4
 801c212:	f8d8 2000 	ldr.w	r2, [r8]
 801c216:	428b      	cmp	r3, r1
 801c218:	db41      	blt.n	801c29e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 801c21a:	6813      	ldr	r3, [r2, #0]
 801c21c:	4610      	mov	r0, r2
 801c21e:	695b      	ldr	r3, [r3, #20]
 801c220:	4798      	blx	r3
 801c222:	4604      	mov	r4, r0
 801c224:	f8d8 0000 	ldr.w	r0, [r8]
 801c228:	aa1d      	add	r2, sp, #116	; 0x74
 801c22a:	4621      	mov	r1, r4
 801c22c:	6803      	ldr	r3, [r0, #0]
 801c22e:	689d      	ldr	r5, [r3, #8]
 801c230:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 801c234:	47a8      	blx	r5
 801c236:	901c      	str	r0, [sp, #112]	; 0x70
 801c238:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801c23c:	429c      	cmp	r4, r3
 801c23e:	f000 80ec 	beq.w	801c41a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801c242:	f242 030b 	movw	r3, #8203	; 0x200b
 801c246:	429c      	cmp	r4, r3
 801c248:	f000 80e7 	beq.w	801c41a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801c24c:	2c00      	cmp	r4, #0
 801c24e:	f000 80f9 	beq.w	801c444 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 801c252:	2c0a      	cmp	r4, #10
 801c254:	d060      	beq.n	801c318 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 801c256:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801c258:	b36a      	cbz	r2, 801c2b6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 801c25a:	8894      	ldrh	r4, [r2, #4]
 801c25c:	f1bb 0f00 	cmp.w	fp, #0
 801c260:	d03b      	beq.n	801c2da <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 801c262:	f892 900d 	ldrb.w	r9, [r2, #13]
 801c266:	f1bb 0f01 	cmp.w	fp, #1
 801c26a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801c26e:	f409 7380 	and.w	r3, r9, #256	; 0x100
 801c272:	f892 900a 	ldrb.w	r9, [r2, #10]
 801c276:	ea49 0903 	orr.w	r9, r9, r3
 801c27a:	d134      	bne.n	801c2e6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15e>
 801c27c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c27e:	eba6 0609 	sub.w	r6, r6, r9
 801c282:	2b00      	cmp	r3, #0
 801c284:	d14f      	bne.n	801c326 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 801c286:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c288:	eb09 0306 	add.w	r3, r9, r6
 801c28c:	4413      	add	r3, r2
 801c28e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801c290:	f9b2 2000 	ldrsh.w	r2, [r2]
 801c294:	4293      	cmp	r3, r2
 801c296:	da51      	bge.n	801c33c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 801c298:	e038      	b.n	801c30c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 801c29a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801c29c:	e79a      	b.n	801c1d4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4c>
 801c29e:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 801c2a2:	4659      	mov	r1, fp
 801c2a4:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801c2a6:	9301      	str	r3, [sp, #4]
 801c2a8:	ab1d      	add	r3, sp, #116	; 0x74
 801c2aa:	9300      	str	r3, [sp, #0]
 801c2ac:	ab1c      	add	r3, sp, #112	; 0x70
 801c2ae:	f002 fede 	bl	801f06e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 801c2b2:	4604      	mov	r4, r0
 801c2b4:	e7c0      	b.n	801c238 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 801c2b6:	f8d8 0000 	ldr.w	r0, [r8]
 801c2ba:	6803      	ldr	r3, [r0, #0]
 801c2bc:	691b      	ldr	r3, [r3, #16]
 801c2be:	4798      	blx	r3
 801c2c0:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801c2c4:	4298      	cmp	r0, r3
 801c2c6:	f000 80a8 	beq.w	801c41a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801c2ca:	f242 030b 	movw	r3, #8203	; 0x200b
 801c2ce:	4298      	cmp	r0, r3
 801c2d0:	f000 80a3 	beq.w	801c41a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801c2d4:	f1bb 0f00 	cmp.w	fp, #0
 801c2d8:	d100      	bne.n	801c2dc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 801c2da:	444e      	add	r6, r9
 801c2dc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801c2de:	2a00      	cmp	r2, #0
 801c2e0:	d1bf      	bne.n	801c262 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 801c2e2:	4691      	mov	r9, r2
 801c2e4:	e099      	b.n	801c41a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801c2e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c2e8:	2b00      	cmp	r3, #0
 801c2ea:	f000 80ad 	beq.w	801c448 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c0>
 801c2ee:	f1bb 0f00 	cmp.w	fp, #0
 801c2f2:	d118      	bne.n	801c326 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 801c2f4:	f8d8 0000 	ldr.w	r0, [r8]
 801c2f8:	990d      	ldr	r1, [sp, #52]	; 0x34
 801c2fa:	6803      	ldr	r3, [r0, #0]
 801c2fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c2fe:	4798      	blx	r3
 801c300:	4406      	add	r6, r0
 801c302:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c304:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c306:	1af3      	subs	r3, r6, r3
 801c308:	4293      	cmp	r3, r2
 801c30a:	dd17      	ble.n	801c33c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 801c30c:	2c00      	cmp	r4, #0
 801c30e:	f000 8099 	beq.w	801c444 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 801c312:	2c0a      	cmp	r4, #10
 801c314:	f040 8087 	bne.w	801c426 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29e>
 801c318:	240a      	movs	r4, #10
 801c31a:	fab4 f084 	clz	r0, r4
 801c31e:	0940      	lsrs	r0, r0, #5
 801c320:	b01f      	add	sp, #124	; 0x7c
 801c322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c326:	f8d8 0000 	ldr.w	r0, [r8]
 801c32a:	990d      	ldr	r1, [sp, #52]	; 0x34
 801c32c:	6803      	ldr	r3, [r0, #0]
 801c32e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c330:	4798      	blx	r3
 801c332:	f1bb 0f01 	cmp.w	fp, #1
 801c336:	eba6 0600 	sub.w	r6, r6, r0
 801c33a:	d0a4      	beq.n	801c286 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 801c33c:	981c      	ldr	r0, [sp, #112]	; 0x70
 801c33e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801c340:	f990 1009 	ldrsb.w	r1, [r0, #9]
 801c344:	f9b3 7000 	ldrsh.w	r7, [r3]
 801c348:	7b43      	ldrb	r3, [r0, #13]
 801c34a:	4431      	add	r1, r6
 801c34c:	015b      	lsls	r3, r3, #5
 801c34e:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801c352:	7983      	ldrb	r3, [r0, #6]
 801c354:	4313      	orrs	r3, r2
 801c356:	440b      	add	r3, r1
 801c358:	42bb      	cmp	r3, r7
 801c35a:	db5e      	blt.n	801c41a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801c35c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c35e:	4299      	cmp	r1, r3
 801c360:	da5b      	bge.n	801c41a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801c362:	f8d8 0000 	ldr.w	r0, [r8]
 801c366:	42b7      	cmp	r7, r6
 801c368:	6803      	ldr	r3, [r0, #0]
 801c36a:	bfcc      	ite	gt
 801c36c:	1bbf      	subgt	r7, r7, r6
 801c36e:	2700      	movle	r7, #0
 801c370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c372:	bfc8      	it	gt
 801c374:	b2bf      	uxthgt	r7, r7
 801c376:	4798      	blx	r3
 801c378:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801c37a:	7b5a      	ldrb	r2, [r3, #13]
 801c37c:	00d1      	lsls	r1, r2, #3
 801c37e:	f401 7580 	and.w	r5, r1, #256	; 0x100
 801c382:	7a19      	ldrb	r1, [r3, #8]
 801c384:	4329      	orrs	r1, r5
 801c386:	0655      	lsls	r5, r2, #25
 801c388:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 801c38a:	bf48      	it	mi
 801c38c:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 801c390:	4405      	add	r5, r0
 801c392:	bf48      	it	mi
 801c394:	b209      	sxthmi	r1, r1
 801c396:	1a6d      	subs	r5, r5, r1
 801c398:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801c39a:	b2ad      	uxth	r5, r5
 801c39c:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 801c3a0:	fa0f fa85 	sxth.w	sl, r5
 801c3a4:	4551      	cmp	r1, sl
 801c3a6:	dd3c      	ble.n	801c422 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29a>
 801c3a8:	0112      	lsls	r2, r2, #4
 801c3aa:	79d8      	ldrb	r0, [r3, #7]
 801c3ac:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801c3b0:	4302      	orrs	r2, r0
 801c3b2:	4492      	add	sl, r2
 801c3b4:	4551      	cmp	r1, sl
 801c3b6:	dc30      	bgt.n	801c41a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801c3b8:	1b4d      	subs	r5, r1, r5
 801c3ba:	468a      	mov	sl, r1
 801c3bc:	b22d      	sxth	r5, r5
 801c3be:	9319      	str	r3, [sp, #100]	; 0x64
 801c3c0:	b2ad      	uxth	r5, r5
 801c3c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c3c4:	f8d8 0000 	ldr.w	r0, [r8]
 801c3c8:	681a      	ldr	r2, [r3, #0]
 801c3ca:	6801      	ldr	r1, [r0, #0]
 801c3cc:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 801c3ce:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801c3d0:	9313      	str	r3, [sp, #76]	; 0x4c
 801c3d2:	9218      	str	r2, [sp, #96]	; 0x60
 801c3d4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801c3d6:	4788      	blx	r1
 801c3d8:	f898 1006 	ldrb.w	r1, [r8, #6]
 801c3dc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801c3de:	910b      	str	r1, [sp, #44]	; 0x2c
 801c3e0:	f898 100e 	ldrb.w	r1, [r8, #14]
 801c3e4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801c3e6:	910a      	str	r1, [sp, #40]	; 0x28
 801c3e8:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 801c3ec:	9109      	str	r1, [sp, #36]	; 0x24
 801c3ee:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801c3f2:	9305      	str	r3, [sp, #20]
 801c3f4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801c3f6:	9206      	str	r2, [sp, #24]
 801c3f8:	9304      	str	r3, [sp, #16]
 801c3fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801c3fc:	f8cd a004 	str.w	sl, [sp, #4]
 801c400:	e9cd 7502 	strd	r7, r5, [sp, #8]
 801c404:	4437      	add	r7, r6
 801c406:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801c408:	b23f      	sxth	r7, r7
 801c40a:	e9cd 0107 	strd	r0, r1, [sp, #28]
 801c40e:	9700      	str	r7, [sp, #0]
 801c410:	9916      	ldr	r1, [sp, #88]	; 0x58
 801c412:	681a      	ldr	r2, [r3, #0]
 801c414:	9811      	ldr	r0, [sp, #68]	; 0x44
 801c416:	685b      	ldr	r3, [r3, #4]
 801c418:	47a8      	blx	r5
 801c41a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c41c:	3301      	adds	r3, #1
 801c41e:	930e      	str	r3, [sp, #56]	; 0x38
 801c420:	e6e0      	b.n	801c1e4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5c>
 801c422:	2500      	movs	r5, #0
 801c424:	e7cb      	b.n	801c3be <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x236>
 801c426:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801c428:	3501      	adds	r5, #1
 801c42a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801c42c:	429d      	cmp	r5, r3
 801c42e:	f6bf af74 	bge.w	801c31a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 801c432:	4659      	mov	r1, fp
 801c434:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801c436:	f7e9 fde1 	bl	8005ffc <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801c43a:	4604      	mov	r4, r0
 801c43c:	b110      	cbz	r0, 801c444 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 801c43e:	280a      	cmp	r0, #10
 801c440:	d1f2      	bne.n	801c428 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2a0>
 801c442:	e769      	b.n	801c318 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 801c444:	2400      	movs	r4, #0
 801c446:	e768      	b.n	801c31a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 801c448:	f1bb 0f00 	cmp.w	fp, #0
 801c44c:	f43f af59 	beq.w	801c302 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x17a>
 801c450:	e774      	b.n	801c33c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>

0801c452 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 801c452:	b530      	push	{r4, r5, lr}
 801c454:	8ac4      	ldrh	r4, [r0, #22]
 801c456:	8b45      	ldrh	r5, [r0, #26]
 801c458:	8343      	strh	r3, [r0, #26]
 801c45a:	442c      	add	r4, r5
 801c45c:	1ae4      	subs	r4, r4, r3
 801c45e:	8b83      	ldrh	r3, [r0, #28]
 801c460:	82c4      	strh	r4, [r0, #22]
 801c462:	8b04      	ldrh	r4, [r0, #24]
 801c464:	4422      	add	r2, r4
 801c466:	440c      	add	r4, r1
 801c468:	1a59      	subs	r1, r3, r1
 801c46a:	83c2      	strh	r2, [r0, #30]
 801c46c:	8304      	strh	r4, [r0, #24]
 801c46e:	8381      	strh	r1, [r0, #28]
 801c470:	bd30      	pop	{r4, r5, pc}

0801c472 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>:
 801c472:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c476:	4604      	mov	r4, r0
 801c478:	8a47      	ldrh	r7, [r0, #18]
 801c47a:	68c0      	ldr	r0, [r0, #12]
 801c47c:	b085      	sub	sp, #20
 801c47e:	6803      	ldr	r3, [r0, #0]
 801c480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c482:	4798      	blx	r3
 801c484:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 801c488:	7a63      	ldrb	r3, [r4, #9]
 801c48a:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 801c48e:	3b01      	subs	r3, #1
 801c490:	42b7      	cmp	r7, r6
 801c492:	bfac      	ite	ge
 801c494:	f04f 0900 	movge.w	r9, #0
 801c498:	f04f 0901 	movlt.w	r9, #1
 801c49c:	2b05      	cmp	r3, #5
 801c49e:	d804      	bhi.n	801c4aa <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x38>
 801c4a0:	e8df f003 	tbb	[pc, r3]
 801c4a4:	470f0854 	.word	0x470f0854
 801c4a8:	4c4c      	.short	0x4c4c
 801c4aa:	2500      	movs	r5, #0
 801c4ac:	46a9      	mov	r9, r5
 801c4ae:	462e      	mov	r6, r5
 801c4b0:	462f      	mov	r7, r5
 801c4b2:	e00e      	b.n	801c4d2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 801c4b4:	42b7      	cmp	r7, r6
 801c4b6:	f04f 0500 	mov.w	r5, #0
 801c4ba:	bfb4      	ite	lt
 801c4bc:	2600      	movlt	r6, #0
 801c4be:	2601      	movge	r6, #1
 801c4c0:	e7f6      	b.n	801c4b0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 801c4c2:	42b7      	cmp	r7, r6
 801c4c4:	464d      	mov	r5, r9
 801c4c6:	f04f 0900 	mov.w	r9, #0
 801c4ca:	bfb4      	ite	lt
 801c4cc:	2600      	movlt	r6, #0
 801c4ce:	2601      	movge	r6, #1
 801c4d0:	464f      	mov	r7, r9
 801c4d2:	f04f 0800 	mov.w	r8, #0
 801c4d6:	f8a4 8016 	strh.w	r8, [r4, #22]
 801c4da:	f8a4 8018 	strh.w	r8, [r4, #24]
 801c4de:	f8cd 8004 	str.w	r8, [sp, #4]
 801c4e2:	2300      	movs	r3, #0
 801c4e4:	9303      	str	r3, [sp, #12]
 801c4e6:	8823      	ldrh	r3, [r4, #0]
 801c4e8:	2b20      	cmp	r3, #32
 801c4ea:	d033      	beq.n	801c554 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xe2>
 801c4ec:	f242 010b 	movw	r1, #8203	; 0x200b
 801c4f0:	1a5a      	subs	r2, r3, r1
 801c4f2:	f1d2 0a00 	rsbs	sl, r2, #0
 801c4f6:	eb4a 0a02 	adc.w	sl, sl, r2
 801c4fa:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801c4fe:	4293      	cmp	r3, r2
 801c500:	d008      	beq.n	801c514 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 801c502:	428b      	cmp	r3, r1
 801c504:	9a01      	ldr	r2, [sp, #4]
 801c506:	bf0e      	itee	eq
 801c508:	f04f 0a01 	moveq.w	sl, #1
 801c50c:	461a      	movne	r2, r3
 801c50e:	f04f 0a00 	movne.w	sl, #0
 801c512:	9201      	str	r2, [sp, #4]
 801c514:	ab03      	add	r3, sp, #12
 801c516:	68e2      	ldr	r2, [r4, #12]
 801c518:	7a21      	ldrb	r1, [r4, #8]
 801c51a:	6860      	ldr	r0, [r4, #4]
 801c51c:	f002 fd5e 	bl	801efdc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801c520:	8020      	strh	r0, [r4, #0]
 801c522:	b9d8      	cbnz	r0, 801c55c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xea>
 801c524:	8ba2      	ldrh	r2, [r4, #28]
 801c526:	2300      	movs	r3, #0
 801c528:	4611      	mov	r1, r2
 801c52a:	4620      	mov	r0, r4
 801c52c:	f7ff ff91 	bl	801c452 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801c530:	e06e      	b.n	801c610 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 801c532:	2500      	movs	r5, #0
 801c534:	2701      	movs	r7, #1
 801c536:	46a9      	mov	r9, r5
 801c538:	462e      	mov	r6, r5
 801c53a:	e7ca      	b.n	801c4d2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 801c53c:	42b7      	cmp	r7, r6
 801c53e:	f04f 0500 	mov.w	r5, #0
 801c542:	bfb4      	ite	lt
 801c544:	2700      	movlt	r7, #0
 801c546:	2701      	movge	r7, #1
 801c548:	462e      	mov	r6, r5
 801c54a:	e7c2      	b.n	801c4d2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 801c54c:	2500      	movs	r5, #0
 801c54e:	2601      	movs	r6, #1
 801c550:	46a9      	mov	r9, r5
 801c552:	e7ad      	b.n	801c4b0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 801c554:	9301      	str	r3, [sp, #4]
 801c556:	f04f 0a01 	mov.w	sl, #1
 801c55a:	e7db      	b.n	801c514 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 801c55c:	8b63      	ldrh	r3, [r4, #26]
 801c55e:	280a      	cmp	r0, #10
 801c560:	f103 0301 	add.w	r3, r3, #1
 801c564:	8363      	strh	r3, [r4, #26]
 801c566:	d0dd      	beq.n	801c524 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb2>
 801c568:	9a03      	ldr	r2, [sp, #12]
 801c56a:	bb62      	cbnz	r2, 801c5c6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x154>
 801c56c:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801c570:	4298      	cmp	r0, r3
 801c572:	d003      	beq.n	801c57c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 801c574:	f242 030b 	movw	r3, #8203	; 0x200b
 801c578:	4298      	cmp	r0, r3
 801c57a:	d1b2      	bne.n	801c4e2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801c57c:	8823      	ldrh	r3, [r4, #0]
 801c57e:	8ba1      	ldrh	r1, [r4, #28]
 801c580:	2b20      	cmp	r3, #32
 801c582:	d003      	beq.n	801c58c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x11a>
 801c584:	f242 000b 	movw	r0, #8203	; 0x200b
 801c588:	4283      	cmp	r3, r0
 801c58a:	d131      	bne.n	801c5f0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x17e>
 801c58c:	f1ba 0f00 	cmp.w	sl, #0
 801c590:	bf0a      	itet	eq
 801c592:	4688      	moveq	r8, r1
 801c594:	4650      	movne	r0, sl
 801c596:	2001      	moveq	r0, #1
 801c598:	440a      	add	r2, r1
 801c59a:	8b23      	ldrh	r3, [r4, #24]
 801c59c:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 801c5a0:	b292      	uxth	r2, r2
 801c5a2:	83a2      	strh	r2, [r4, #28]
 801c5a4:	4413      	add	r3, r2
 801c5a6:	f1b9 0f00 	cmp.w	r9, #0
 801c5aa:	d102      	bne.n	801c5b2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x140>
 801c5ac:	2d00      	cmp	r5, #0
 801c5ae:	d042      	beq.n	801c636 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1c4>
 801c5b0:	b300      	cbz	r0, 801c5f4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x182>
 801c5b2:	8c21      	ldrh	r1, [r4, #32]
 801c5b4:	4419      	add	r1, r3
 801c5b6:	458c      	cmp	ip, r1
 801c5b8:	da37      	bge.n	801c62a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 801c5ba:	8ae1      	ldrh	r1, [r4, #22]
 801c5bc:	2900      	cmp	r1, #0
 801c5be:	d034      	beq.n	801c62a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 801c5c0:	4563      	cmp	r3, ip
 801c5c2:	dd8e      	ble.n	801c4e2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801c5c4:	e01d      	b.n	801c602 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x190>
 801c5c6:	8893      	ldrh	r3, [r2, #4]
 801c5c8:	9901      	ldr	r1, [sp, #4]
 801c5ca:	8023      	strh	r3, [r4, #0]
 801c5cc:	f892 b00d 	ldrb.w	fp, [r2, #13]
 801c5d0:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 801c5d4:	f40b 7080 	and.w	r0, fp, #256	; 0x100
 801c5d8:	f892 b00a 	ldrb.w	fp, [r2, #10]
 801c5dc:	ea4b 0b00 	orr.w	fp, fp, r0
 801c5e0:	68e0      	ldr	r0, [r4, #12]
 801c5e2:	6803      	ldr	r3, [r0, #0]
 801c5e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c5e6:	4798      	blx	r3
 801c5e8:	eb0b 0200 	add.w	r2, fp, r0
 801c5ec:	b292      	uxth	r2, r2
 801c5ee:	e7c5      	b.n	801c57c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 801c5f0:	2000      	movs	r0, #0
 801c5f2:	e7d1      	b.n	801c598 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x126>
 801c5f4:	4563      	cmp	r3, ip
 801c5f6:	f77f af74 	ble.w	801c4e2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801c5fa:	8ae3      	ldrh	r3, [r4, #22]
 801c5fc:	2b00      	cmp	r3, #0
 801c5fe:	f43f af70 	beq.w	801c4e2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801c602:	2301      	movs	r3, #1
 801c604:	8c22      	ldrh	r2, [r4, #32]
 801c606:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 801c60a:	8be3      	ldrh	r3, [r4, #30]
 801c60c:	4413      	add	r3, r2
 801c60e:	83e3      	strh	r3, [r4, #30]
 801c610:	68e0      	ldr	r0, [r4, #12]
 801c612:	6803      	ldr	r3, [r0, #0]
 801c614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c616:	4798      	blx	r3
 801c618:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 801c61c:	4418      	add	r0, r3
 801c61e:	8a63      	ldrh	r3, [r4, #18]
 801c620:	1a18      	subs	r0, r3, r0
 801c622:	8260      	strh	r0, [r4, #18]
 801c624:	b005      	add	sp, #20
 801c626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c62a:	2300      	movs	r3, #0
 801c62c:	4611      	mov	r1, r2
 801c62e:	4620      	mov	r0, r4
 801c630:	f7ff ff0f 	bl	801c452 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801c634:	e755      	b.n	801c4e2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801c636:	4563      	cmp	r3, ip
 801c638:	dd14      	ble.n	801c664 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1f2>
 801c63a:	b117      	cbz	r7, 801c642 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1d0>
 801c63c:	2301      	movs	r3, #1
 801c63e:	460a      	mov	r2, r1
 801c640:	e772      	b.n	801c528 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb6>
 801c642:	2e00      	cmp	r6, #0
 801c644:	f43f af4d 	beq.w	801c4e2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801c648:	2800      	cmp	r0, #0
 801c64a:	f47f af4a 	bne.w	801c4e2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801c64e:	f1ba 0f00 	cmp.w	sl, #0
 801c652:	d002      	beq.n	801c65a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1e8>
 801c654:	2301      	movs	r3, #1
 801c656:	4642      	mov	r2, r8
 801c658:	e767      	b.n	801c52a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb8>
 801c65a:	8ae3      	ldrh	r3, [r4, #22]
 801c65c:	2b00      	cmp	r3, #0
 801c65e:	f43f af40 	beq.w	801c4e2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801c662:	e7d5      	b.n	801c610 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 801c664:	2800      	cmp	r0, #0
 801c666:	f47f af3c 	bne.w	801c4e2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801c66a:	f1ba 0f00 	cmp.w	sl, #0
 801c66e:	f43f af38 	beq.w	801c4e2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801c672:	2301      	movs	r3, #1
 801c674:	4642      	mov	r2, r8
 801c676:	e7da      	b.n	801c62e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1bc>

0801c678 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 801c678:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c67a:	4605      	mov	r5, r0
 801c67c:	b08f      	sub	sp, #60	; 0x3c
 801c67e:	4617      	mov	r7, r2
 801c680:	461c      	mov	r4, r3
 801c682:	460e      	mov	r6, r1
 801c684:	b1d1      	cbz	r1, 801c6bc <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 801c686:	681b      	ldr	r3, [r3, #0]
 801c688:	4620      	mov	r0, r4
 801c68a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c68c:	4798      	blx	r3
 801c68e:	4240      	negs	r0, r0
 801c690:	9603      	str	r6, [sp, #12]
 801c692:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801c696:	b200      	sxth	r0, r0
 801c698:	9700      	str	r7, [sp, #0]
 801c69a:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 801c69e:	4629      	mov	r1, r5
 801c6a0:	e9cd 4001 	strd	r4, r0, [sp, #4]
 801c6a4:	2401      	movs	r4, #1
 801c6a6:	a805      	add	r0, sp, #20
 801c6a8:	f7ff fcbe 	bl	801c028 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 801c6ac:	a805      	add	r0, sp, #20
 801c6ae:	f7ff fee0 	bl	801c472 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 801c6b2:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801c6b6:	b163      	cbz	r3, 801c6d2 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x5a>
 801c6b8:	3401      	adds	r4, #1
 801c6ba:	e7f7      	b.n	801c6ac <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 801c6bc:	2401      	movs	r4, #1
 801c6be:	f002 fd59 	bl	801f174 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801c6c2:	280a      	cmp	r0, #10
 801c6c4:	4628      	mov	r0, r5
 801c6c6:	bf08      	it	eq
 801c6c8:	3401      	addeq	r4, #1
 801c6ca:	f002 fd53 	bl	801f174 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801c6ce:	2800      	cmp	r0, #0
 801c6d0:	d1f7      	bne.n	801c6c2 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 801c6d2:	b2a0      	uxth	r0, r4
 801c6d4:	b00f      	add	sp, #60	; 0x3c
 801c6d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c6d8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 801c6d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c6dc:	b0e3      	sub	sp, #396	; 0x18c
 801c6de:	461c      	mov	r4, r3
 801c6e0:	4683      	mov	fp, r0
 801c6e2:	4688      	mov	r8, r1
 801c6e4:	9b6c      	ldr	r3, [sp, #432]	; 0x1b0
 801c6e6:	2b00      	cmp	r3, #0
 801c6e8:	f000 8112 	beq.w	801c910 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801c6ec:	6823      	ldr	r3, [r4, #0]
 801c6ee:	2b00      	cmp	r3, #0
 801c6f0:	f000 810e 	beq.w	801c910 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801c6f4:	7ba3      	ldrb	r3, [r4, #14]
 801c6f6:	2b00      	cmp	r3, #0
 801c6f8:	f000 810a 	beq.w	801c910 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801c6fc:	ad0a      	add	r5, sp, #40	; 0x28
 801c6fe:	6810      	ldr	r0, [r2, #0]
 801c700:	6851      	ldr	r1, [r2, #4]
 801c702:	462b      	mov	r3, r5
 801c704:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 801c708:	c303      	stmia	r3!, {r0, r1}
 801c70a:	2100      	movs	r1, #0
 801c70c:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 801c710:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 801c714:	4628      	mov	r0, r5
 801c716:	910c      	str	r1, [sp, #48]	; 0x30
 801c718:	a90c      	add	r1, sp, #48	; 0x30
 801c71a:	79a2      	ldrb	r2, [r4, #6]
 801c71c:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801c720:	f7ff fd01 	bl	801c126 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801c724:	a90c      	add	r1, sp, #48	; 0x30
 801c726:	79a2      	ldrb	r2, [r4, #6]
 801c728:	4608      	mov	r0, r1
 801c72a:	f7ff fcfc 	bl	801c126 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801c72e:	a817      	add	r0, sp, #92	; 0x5c
 801c730:	f002 f8f4 	bl	801e91c <_ZN8touchgfx12TextProviderC1Ev>
 801c734:	6820      	ldr	r0, [r4, #0]
 801c736:	6803      	ldr	r3, [r0, #0]
 801c738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c73a:	4798      	blx	r3
 801c73c:	4606      	mov	r6, r0
 801c73e:	6820      	ldr	r0, [r4, #0]
 801c740:	6803      	ldr	r3, [r0, #0]
 801c742:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c744:	4798      	blx	r3
 801c746:	4633      	mov	r3, r6
 801c748:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
 801c74a:	996c      	ldr	r1, [sp, #432]	; 0x1b0
 801c74c:	9000      	str	r0, [sp, #0]
 801c74e:	a817      	add	r0, sp, #92	; 0x5c
 801c750:	f002 f93f 	bl	801e9d2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801c754:	6820      	ldr	r0, [r4, #0]
 801c756:	f894 a004 	ldrb.w	sl, [r4, #4]
 801c75a:	6803      	ldr	r3, [r0, #0]
 801c75c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c75e:	4798      	blx	r3
 801c760:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 801c764:	6823      	ldr	r3, [r4, #0]
 801c766:	4607      	mov	r7, r0
 801c768:	4406      	add	r6, r0
 801c76a:	a830      	add	r0, sp, #192	; 0xc0
 801c76c:	f893 9009 	ldrb.w	r9, [r3, #9]
 801c770:	f002 f8d4 	bl	801e91c <_ZN8touchgfx12TextProviderC1Ev>
 801c774:	7c23      	ldrb	r3, [r4, #16]
 801c776:	b17b      	cbz	r3, 801c798 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xc0>
 801c778:	6820      	ldr	r0, [r4, #0]
 801c77a:	6803      	ldr	r3, [r0, #0]
 801c77c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c77e:	4798      	blx	r3
 801c780:	9009      	str	r0, [sp, #36]	; 0x24
 801c782:	6820      	ldr	r0, [r4, #0]
 801c784:	6802      	ldr	r2, [r0, #0]
 801c786:	6d12      	ldr	r2, [r2, #80]	; 0x50
 801c788:	4790      	blx	r2
 801c78a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c78c:	9000      	str	r0, [sp, #0]
 801c78e:	a830      	add	r0, sp, #192	; 0xc0
 801c790:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
 801c792:	996c      	ldr	r1, [sp, #432]	; 0x1b0
 801c794:	f002 f91d 	bl	801e9d2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801c798:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801c79c:	a80e      	add	r0, sp, #56	; 0x38
 801c79e:	7be2      	ldrb	r2, [r4, #15]
 801c7a0:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 801c7a4:	1a8a      	subs	r2, r1, r2
 801c7a6:	7c21      	ldrb	r1, [r4, #16]
 801c7a8:	9103      	str	r1, [sp, #12]
 801c7aa:	b292      	uxth	r2, r2
 801c7ac:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 801c7b0:	9102      	str	r1, [sp, #8]
 801c7b2:	6821      	ldr	r1, [r4, #0]
 801c7b4:	9101      	str	r1, [sp, #4]
 801c7b6:	7961      	ldrb	r1, [r4, #5]
 801c7b8:	9100      	str	r1, [sp, #0]
 801c7ba:	a930      	add	r1, sp, #192	; 0xc0
 801c7bc:	f7ff fc34 	bl	801c028 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 801c7c0:	2e00      	cmp	r6, #0
 801c7c2:	dc5b      	bgt.n	801c87c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 801c7c4:	af17      	add	r7, sp, #92	; 0x5c
 801c7c6:	f04f 0900 	mov.w	r9, #0
 801c7ca:	7c23      	ldrb	r3, [r4, #16]
 801c7cc:	2b00      	cmp	r3, #0
 801c7ce:	f000 80b1 	beq.w	801c934 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 801c7d2:	a80e      	add	r0, sp, #56	; 0x38
 801c7d4:	f7ff fe4d 	bl	801c472 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 801c7d8:	f1ba 0f00 	cmp.w	sl, #0
 801c7dc:	f000 80a5 	beq.w	801c92a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 801c7e0:	7c23      	ldrb	r3, [r4, #16]
 801c7e2:	2264      	movs	r2, #100	; 0x64
 801c7e4:	4639      	mov	r1, r7
 801c7e6:	a849      	add	r0, sp, #292	; 0x124
 801c7e8:	9309      	str	r3, [sp, #36]	; 0x24
 801c7ea:	f00c fe88 	bl	80294fe <memcpy>
 801c7ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c7f0:	2b00      	cmp	r3, #0
 801c7f2:	f000 80a7 	beq.w	801c944 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 801c7f6:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 801c7fa:	7922      	ldrb	r2, [r4, #4]
 801c7fc:	2a01      	cmp	r2, #1
 801c7fe:	f040 808a 	bne.w	801c916 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 801c802:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	; 0x34
 801c806:	1ac0      	subs	r0, r0, r3
 801c808:	2302      	movs	r3, #2
 801c80a:	fb90 f0f3 	sdiv	r0, r0, r3
 801c80e:	b200      	sxth	r0, r0
 801c810:	7c23      	ldrb	r3, [r4, #16]
 801c812:	2b00      	cmp	r3, #0
 801c814:	f000 808b 	beq.w	801c92e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 801c818:	f8bd 204e 	ldrh.w	r2, [sp, #78]	; 0x4e
 801c81c:	f89d 105a 	ldrb.w	r1, [sp, #90]	; 0x5a
 801c820:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801c824:	e9cd 2105 	strd	r2, r1, [sp, #20]
 801c828:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 801c82c:	2100      	movs	r1, #0
 801c82e:	4410      	add	r0, r2
 801c830:	4642      	mov	r2, r8
 801c832:	b200      	sxth	r0, r0
 801c834:	e9cd 9703 	strd	r9, r7, [sp, #12]
 801c838:	9000      	str	r0, [sp, #0]
 801c83a:	4658      	mov	r0, fp
 801c83c:	e9cd 5401 	strd	r5, r4, [sp, #4]
 801c840:	f7ff fca2 	bl	801c188 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 801c844:	2800      	cmp	r0, #0
 801c846:	d163      	bne.n	801c910 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801c848:	b2b2      	uxth	r2, r6
 801c84a:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 801c84e:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 801c852:	4413      	add	r3, r2
 801c854:	1a8a      	subs	r2, r1, r2
 801c856:	b21b      	sxth	r3, r3
 801c858:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
 801c85c:	f89d 205a 	ldrb.w	r2, [sp, #90]	; 0x5a
 801c860:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801c864:	2a00      	cmp	r2, #0
 801c866:	d153      	bne.n	801c910 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801c868:	6822      	ldr	r2, [r4, #0]
 801c86a:	8869      	ldrh	r1, [r5, #2]
 801c86c:	7a12      	ldrb	r2, [r2, #8]
 801c86e:	1a9b      	subs	r3, r3, r2
 801c870:	88ea      	ldrh	r2, [r5, #6]
 801c872:	440a      	add	r2, r1
 801c874:	b212      	sxth	r2, r2
 801c876:	4293      	cmp	r3, r2
 801c878:	dda7      	ble.n	801c7ca <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf2>
 801c87a:	e049      	b.n	801c910 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801c87c:	7c23      	ldrb	r3, [r4, #16]
 801c87e:	444f      	add	r7, r9
 801c880:	b1c3      	cbz	r3, 801c8b4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>
 801c882:	f64f 79ff 	movw	r9, #65535	; 0xffff
 801c886:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801c88a:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801c88e:	443b      	add	r3, r7
 801c890:	4293      	cmp	r3, r2
 801c892:	da97      	bge.n	801c7c4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 801c894:	a80e      	add	r0, sp, #56	; 0x38
 801c896:	f7ff fdec 	bl	801c472 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 801c89a:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 801c89e:	3b01      	subs	r3, #1
 801c8a0:	b29b      	uxth	r3, r3
 801c8a2:	454b      	cmp	r3, r9
 801c8a4:	9309      	str	r3, [sp, #36]	; 0x24
 801c8a6:	d021      	beq.n	801c8ec <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x214>
 801c8a8:	7961      	ldrb	r1, [r4, #5]
 801c8aa:	a817      	add	r0, sp, #92	; 0x5c
 801c8ac:	f7e9 fba6 	bl	8005ffc <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801c8b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c8b2:	e7f4      	b.n	801c89e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>
 801c8b4:	fa1f f986 	uxth.w	r9, r6
 801c8b8:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801c8bc:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801c8c0:	443b      	add	r3, r7
 801c8c2:	4293      	cmp	r3, r2
 801c8c4:	f6bf af7e 	bge.w	801c7c4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 801c8c8:	a817      	add	r0, sp, #92	; 0x5c
 801c8ca:	f002 fc53 	bl	801f174 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801c8ce:	b1f8      	cbz	r0, 801c910 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801c8d0:	280a      	cmp	r0, #10
 801c8d2:	d1f1      	bne.n	801c8b8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 801c8d4:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 801c8d8:	444b      	add	r3, r9
 801c8da:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801c8de:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 801c8e2:	eba3 0309 	sub.w	r3, r3, r9
 801c8e6:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801c8ea:	e7e5      	b.n	801c8b8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 801c8ec:	b2b3      	uxth	r3, r6
 801c8ee:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801c8f2:	441a      	add	r2, r3
 801c8f4:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 801c8f8:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
 801c8fc:	1ad3      	subs	r3, r2, r3
 801c8fe:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801c902:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801c906:	b11b      	cbz	r3, 801c910 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801c908:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
 801c90c:	2b00      	cmp	r3, #0
 801c90e:	d0ba      	beq.n	801c886 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
 801c910:	b063      	add	sp, #396	; 0x18c
 801c912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c916:	2a02      	cmp	r2, #2
 801c918:	d105      	bne.n	801c926 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24e>
 801c91a:	7be2      	ldrb	r2, [r4, #15]
 801c91c:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 801c920:	1a80      	subs	r0, r0, r2
 801c922:	1ac0      	subs	r0, r0, r3
 801c924:	e773      	b.n	801c80e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x136>
 801c926:	2000      	movs	r0, #0
 801c928:	e772      	b.n	801c810 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 801c92a:	7be0      	ldrb	r0, [r4, #15]
 801c92c:	e770      	b.n	801c810 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 801c92e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801c932:	e773      	b.n	801c81c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
 801c934:	f1ba 0f00 	cmp.w	sl, #0
 801c938:	d0f7      	beq.n	801c92a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 801c93a:	2264      	movs	r2, #100	; 0x64
 801c93c:	4639      	mov	r1, r7
 801c93e:	a849      	add	r0, sp, #292	; 0x124
 801c940:	f00c fddd 	bl	80294fe <memcpy>
 801c944:	2300      	movs	r3, #0
 801c946:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801c94a:	6821      	ldr	r1, [r4, #0]
 801c94c:	a849      	add	r0, sp, #292	; 0x124
 801c94e:	f7ff fbae 	bl	801c0ae <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801c952:	b203      	sxth	r3, r0
 801c954:	e751      	b.n	801c7fa <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>

0801c956 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801c956:	2b03      	cmp	r3, #3
 801c958:	d818      	bhi.n	801c98c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 801c95a:	e8df f003 	tbb	[pc, r3]
 801c95e:	0602      	.short	0x0602
 801c960:	130d      	.short	0x130d
 801c962:	f9b0 2000 	ldrsh.w	r2, [r0]
 801c966:	1850      	adds	r0, r2, r1
 801c968:	4770      	bx	lr
 801c96a:	8803      	ldrh	r3, [r0, #0]
 801c96c:	8880      	ldrh	r0, [r0, #4]
 801c96e:	4418      	add	r0, r3
 801c970:	b200      	sxth	r0, r0
 801c972:	1a80      	subs	r0, r0, r2
 801c974:	3801      	subs	r0, #1
 801c976:	4770      	bx	lr
 801c978:	8803      	ldrh	r3, [r0, #0]
 801c97a:	8880      	ldrh	r0, [r0, #4]
 801c97c:	4418      	add	r0, r3
 801c97e:	b200      	sxth	r0, r0
 801c980:	1a40      	subs	r0, r0, r1
 801c982:	e7f7      	b.n	801c974 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801c984:	f9b0 0000 	ldrsh.w	r0, [r0]
 801c988:	4410      	add	r0, r2
 801c98a:	4770      	bx	lr
 801c98c:	2000      	movs	r0, #0
 801c98e:	4770      	bx	lr

0801c990 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801c990:	2b03      	cmp	r3, #3
 801c992:	d817      	bhi.n	801c9c4 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 801c994:	e8df f003 	tbb	[pc, r3]
 801c998:	10090602 	.word	0x10090602
 801c99c:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801c9a0:	1850      	adds	r0, r2, r1
 801c9a2:	4770      	bx	lr
 801c9a4:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801c9a8:	e7fa      	b.n	801c9a0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 801c9aa:	8843      	ldrh	r3, [r0, #2]
 801c9ac:	88c0      	ldrh	r0, [r0, #6]
 801c9ae:	4418      	add	r0, r3
 801c9b0:	b200      	sxth	r0, r0
 801c9b2:	1a80      	subs	r0, r0, r2
 801c9b4:	3801      	subs	r0, #1
 801c9b6:	4770      	bx	lr
 801c9b8:	8843      	ldrh	r3, [r0, #2]
 801c9ba:	88c0      	ldrh	r0, [r0, #6]
 801c9bc:	4418      	add	r0, r3
 801c9be:	b200      	sxth	r0, r0
 801c9c0:	1a40      	subs	r0, r0, r1
 801c9c2:	e7f7      	b.n	801c9b4 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801c9c4:	2000      	movs	r0, #0
 801c9c6:	4770      	bx	lr

0801c9c8 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 801c9c8:	4b01      	ldr	r3, [pc, #4]	; (801c9d0 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 801c9ca:	2200      	movs	r2, #0
 801c9cc:	601a      	str	r2, [r3, #0]
 801c9ce:	4770      	bx	lr
 801c9d0:	24006ff4 	.word	0x24006ff4

0801c9d4 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 801c9d4:	4603      	mov	r3, r0
 801c9d6:	b1c8      	cbz	r0, 801ca0c <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 801c9d8:	0c02      	lsrs	r2, r0, #16
 801c9da:	0412      	lsls	r2, r2, #16
 801c9dc:	b9a2      	cbnz	r2, 801ca08 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 801c9de:	0403      	lsls	r3, r0, #16
 801c9e0:	2010      	movs	r0, #16
 801c9e2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801c9e6:	bf04      	itt	eq
 801c9e8:	021b      	lsleq	r3, r3, #8
 801c9ea:	3008      	addeq	r0, #8
 801c9ec:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801c9f0:	bf04      	itt	eq
 801c9f2:	011b      	lsleq	r3, r3, #4
 801c9f4:	3004      	addeq	r0, #4
 801c9f6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801c9fa:	bf04      	itt	eq
 801c9fc:	009b      	lsleq	r3, r3, #2
 801c9fe:	3002      	addeq	r0, #2
 801ca00:	2b00      	cmp	r3, #0
 801ca02:	db04      	blt.n	801ca0e <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 801ca04:	3001      	adds	r0, #1
 801ca06:	4770      	bx	lr
 801ca08:	2000      	movs	r0, #0
 801ca0a:	e7ea      	b.n	801c9e2 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 801ca0c:	2020      	movs	r0, #32
 801ca0e:	4770      	bx	lr

0801ca10 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 801ca10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca14:	b087      	sub	sp, #28
 801ca16:	460d      	mov	r5, r1
 801ca18:	4616      	mov	r6, r2
 801ca1a:	4698      	mov	r8, r3
 801ca1c:	4601      	mov	r1, r0
 801ca1e:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 801ca22:	b120      	cbz	r0, 801ca2e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 801ca24:	b11a      	cbz	r2, 801ca2e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 801ca26:	2d1f      	cmp	r5, #31
 801ca28:	d801      	bhi.n	801ca2e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 801ca2a:	2b1f      	cmp	r3, #31
 801ca2c:	d904      	bls.n	801ca38 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x28>
 801ca2e:	2000      	movs	r0, #0
 801ca30:	6038      	str	r0, [r7, #0]
 801ca32:	b007      	add	sp, #28
 801ca34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ca38:	b97d      	cbnz	r5, 801ca5a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4a>
 801ca3a:	b143      	cbz	r3, 801ca4e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x3e>
 801ca3c:	4602      	mov	r2, r0
 801ca3e:	462b      	mov	r3, r5
 801ca40:	4641      	mov	r1, r8
 801ca42:	4630      	mov	r0, r6
 801ca44:	e9cd 4700 	strd	r4, r7, [sp]
 801ca48:	f7ff ffe2 	bl	801ca10 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801ca4c:	e7f1      	b.n	801ca32 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 801ca4e:	f04f 33ff 	mov.w	r3, #4294967295
 801ca52:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801ca56:	603b      	str	r3, [r7, #0]
 801ca58:	e7eb      	b.n	801ca32 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 801ca5a:	fa32 fa05 	lsrs.w	sl, r2, r5
 801ca5e:	d106      	bne.n	801ca6e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x5e>
 801ca60:	4346      	muls	r6, r0
 801ca62:	fbb6 f0f4 	udiv	r0, r6, r4
 801ca66:	fb04 6610 	mls	r6, r4, r0, r6
 801ca6a:	603e      	str	r6, [r7, #0]
 801ca6c:	e7e1      	b.n	801ca32 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 801ca6e:	2201      	movs	r2, #1
 801ca70:	fa00 fb05 	lsl.w	fp, r0, r5
 801ca74:	40aa      	lsls	r2, r5
 801ca76:	fbbb f9f4 	udiv	r9, fp, r4
 801ca7a:	3a01      	subs	r2, #1
 801ca7c:	fb0a f309 	mul.w	r3, sl, r9
 801ca80:	fb04 b919 	mls	r9, r4, r9, fp
 801ca84:	4016      	ands	r6, r2
 801ca86:	9303      	str	r3, [sp, #12]
 801ca88:	4630      	mov	r0, r6
 801ca8a:	f7ff ffa3 	bl	801c9d4 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801ca8e:	462b      	mov	r3, r5
 801ca90:	460a      	mov	r2, r1
 801ca92:	4601      	mov	r1, r0
 801ca94:	4630      	mov	r0, r6
 801ca96:	e9cd 4700 	strd	r4, r7, [sp]
 801ca9a:	f7ff ffb9 	bl	801ca10 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801ca9e:	4606      	mov	r6, r0
 801caa0:	4648      	mov	r0, r9
 801caa2:	eb05 0108 	add.w	r1, r5, r8
 801caa6:	f7ff ff95 	bl	801c9d4 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801caaa:	ab05      	add	r3, sp, #20
 801caac:	464a      	mov	r2, r9
 801caae:	e9cd 4300 	strd	r4, r3, [sp]
 801cab2:	4603      	mov	r3, r0
 801cab4:	4650      	mov	r0, sl
 801cab6:	f7ff ffab 	bl	801ca10 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801caba:	6839      	ldr	r1, [r7, #0]
 801cabc:	9a05      	ldr	r2, [sp, #20]
 801cabe:	9b03      	ldr	r3, [sp, #12]
 801cac0:	4411      	add	r1, r2
 801cac2:	fbb1 f2f4 	udiv	r2, r1, r4
 801cac6:	18d3      	adds	r3, r2, r3
 801cac8:	fb04 1412 	mls	r4, r4, r2, r1
 801cacc:	441e      	add	r6, r3
 801cace:	603c      	str	r4, [r7, #0]
 801cad0:	4430      	add	r0, r6
 801cad2:	e7ae      	b.n	801ca32 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>

0801cad4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 801cad4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801cad8:	b085      	sub	sp, #20
 801cada:	f1b0 0900 	subs.w	r9, r0, #0
 801cade:	461d      	mov	r5, r3
 801cae0:	4617      	mov	r7, r2
 801cae2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801cae4:	bfbb      	ittet	lt
 801cae6:	f1c9 0900 	rsblt	r9, r9, #0
 801caea:	f04f 36ff 	movlt.w	r6, #4294967295
 801caee:	2601      	movge	r6, #1
 801caf0:	6823      	ldrlt	r3, [r4, #0]
 801caf2:	bfbc      	itt	lt
 801caf4:	425b      	neglt	r3, r3
 801caf6:	6023      	strlt	r3, [r4, #0]
 801caf8:	2a00      	cmp	r2, #0
 801cafa:	da04      	bge.n	801cb06 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 801cafc:	6823      	ldr	r3, [r4, #0]
 801cafe:	4257      	negs	r7, r2
 801cb00:	4276      	negs	r6, r6
 801cb02:	425b      	negs	r3, r3
 801cb04:	6023      	str	r3, [r4, #0]
 801cb06:	2d00      	cmp	r5, #0
 801cb08:	4638      	mov	r0, r7
 801cb0a:	bfba      	itte	lt
 801cb0c:	426d      	neglt	r5, r5
 801cb0e:	f04f 38ff 	movlt.w	r8, #4294967295
 801cb12:	f04f 0801 	movge.w	r8, #1
 801cb16:	f7ff ff5d 	bl	801c9d4 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801cb1a:	ab03      	add	r3, sp, #12
 801cb1c:	463a      	mov	r2, r7
 801cb1e:	e9cd 5300 	strd	r5, r3, [sp]
 801cb22:	4603      	mov	r3, r0
 801cb24:	4648      	mov	r0, r9
 801cb26:	f7ff ff73 	bl	801ca10 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801cb2a:	6823      	ldr	r3, [r4, #0]
 801cb2c:	9a03      	ldr	r2, [sp, #12]
 801cb2e:	4546      	cmp	r6, r8
 801cb30:	441a      	add	r2, r3
 801cb32:	fb92 f3f5 	sdiv	r3, r2, r5
 801cb36:	4418      	add	r0, r3
 801cb38:	fb05 2313 	mls	r3, r5, r3, r2
 801cb3c:	bf18      	it	ne
 801cb3e:	4240      	negne	r0, r0
 801cb40:	1c72      	adds	r2, r6, #1
 801cb42:	6023      	str	r3, [r4, #0]
 801cb44:	d105      	bne.n	801cb52 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 801cb46:	2b00      	cmp	r3, #0
 801cb48:	f1c3 0200 	rsb	r2, r3, #0
 801cb4c:	db0b      	blt.n	801cb66 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 801cb4e:	6022      	str	r2, [r4, #0]
 801cb50:	e006      	b.n	801cb60 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801cb52:	2e01      	cmp	r6, #1
 801cb54:	d104      	bne.n	801cb60 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801cb56:	2b00      	cmp	r3, #0
 801cb58:	da02      	bge.n	801cb60 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801cb5a:	442b      	add	r3, r5
 801cb5c:	3801      	subs	r0, #1
 801cb5e:	6023      	str	r3, [r4, #0]
 801cb60:	b005      	add	sp, #20
 801cb62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801cb66:	3801      	subs	r0, #1
 801cb68:	1b52      	subs	r2, r2, r5
 801cb6a:	e7f0      	b.n	801cb4e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>

0801cb6c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801cb6c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801cb70:	4c1c      	ldr	r4, [pc, #112]	; (801cbe4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 801cb72:	4605      	mov	r5, r0
 801cb74:	6807      	ldr	r7, [r0, #0]
 801cb76:	69a3      	ldr	r3, [r4, #24]
 801cb78:	b92b      	cbnz	r3, 801cb86 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 801cb7a:	6840      	ldr	r0, [r0, #4]
 801cb7c:	e9c5 7000 	strd	r7, r0, [r5]
 801cb80:	b004      	add	sp, #16
 801cb82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cb86:	f04f 0802 	mov.w	r8, #2
 801cb8a:	68a2      	ldr	r2, [r4, #8]
 801cb8c:	ae04      	add	r6, sp, #16
 801cb8e:	6820      	ldr	r0, [r4, #0]
 801cb90:	fb93 f1f8 	sdiv	r1, r3, r8
 801cb94:	440a      	add	r2, r1
 801cb96:	69e1      	ldr	r1, [r4, #28]
 801cb98:	f846 2d04 	str.w	r2, [r6, #-4]!
 801cb9c:	463a      	mov	r2, r7
 801cb9e:	9600      	str	r6, [sp, #0]
 801cba0:	f7ff ff98 	bl	801cad4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801cba4:	69a3      	ldr	r3, [r4, #24]
 801cba6:	4607      	mov	r7, r0
 801cba8:	686a      	ldr	r2, [r5, #4]
 801cbaa:	6a21      	ldr	r1, [r4, #32]
 801cbac:	9600      	str	r6, [sp, #0]
 801cbae:	6860      	ldr	r0, [r4, #4]
 801cbb0:	f7ff ff90 	bl	801cad4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801cbb4:	69a3      	ldr	r3, [r4, #24]
 801cbb6:	6962      	ldr	r2, [r4, #20]
 801cbb8:	4407      	add	r7, r0
 801cbba:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801cbbc:	9600      	str	r6, [sp, #0]
 801cbbe:	68e0      	ldr	r0, [r4, #12]
 801cbc0:	fb93 f8f8 	sdiv	r8, r3, r8
 801cbc4:	4442      	add	r2, r8
 801cbc6:	9203      	str	r2, [sp, #12]
 801cbc8:	682a      	ldr	r2, [r5, #0]
 801cbca:	f7ff ff83 	bl	801cad4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801cbce:	4680      	mov	r8, r0
 801cbd0:	9600      	str	r6, [sp, #0]
 801cbd2:	69a3      	ldr	r3, [r4, #24]
 801cbd4:	686a      	ldr	r2, [r5, #4]
 801cbd6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801cbd8:	6920      	ldr	r0, [r4, #16]
 801cbda:	f7ff ff7b 	bl	801cad4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801cbde:	4440      	add	r0, r8
 801cbe0:	e7cc      	b.n	801cb7c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 801cbe2:	bf00      	nop
 801cbe4:	24006ff8 	.word	0x24006ff8

0801cbe8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 801cbe8:	4b07      	ldr	r3, [pc, #28]	; (801cc08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 801cbea:	781b      	ldrb	r3, [r3, #0]
 801cbec:	2b01      	cmp	r3, #1
 801cbee:	d109      	bne.n	801cc04 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 801cbf0:	f9b1 3000 	ldrsh.w	r3, [r1]
 801cbf4:	f9b0 2000 	ldrsh.w	r2, [r0]
 801cbf8:	8003      	strh	r3, [r0, #0]
 801cbfa:	4b04      	ldr	r3, [pc, #16]	; (801cc0c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 801cbfc:	881b      	ldrh	r3, [r3, #0]
 801cbfe:	3b01      	subs	r3, #1
 801cc00:	1a9b      	subs	r3, r3, r2
 801cc02:	800b      	strh	r3, [r1, #0]
 801cc04:	4770      	bx	lr
 801cc06:	bf00      	nop
 801cc08:	24006fe4 	.word	0x24006fe4
 801cc0c:	24006fe0 	.word	0x24006fe0

0801cc10 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 801cc10:	4b07      	ldr	r3, [pc, #28]	; (801cc30 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801cc12:	b510      	push	{r4, lr}
 801cc14:	781b      	ldrb	r3, [r3, #0]
 801cc16:	2b01      	cmp	r3, #1
 801cc18:	d108      	bne.n	801cc2c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801cc1a:	4b06      	ldr	r3, [pc, #24]	; (801cc34 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801cc1c:	880c      	ldrh	r4, [r1, #0]
 801cc1e:	881b      	ldrh	r3, [r3, #0]
 801cc20:	f9b0 2000 	ldrsh.w	r2, [r0]
 801cc24:	3b01      	subs	r3, #1
 801cc26:	1b1b      	subs	r3, r3, r4
 801cc28:	8003      	strh	r3, [r0, #0]
 801cc2a:	800a      	strh	r2, [r1, #0]
 801cc2c:	bd10      	pop	{r4, pc}
 801cc2e:	bf00      	nop
 801cc30:	24006fe4 	.word	0x24006fe4
 801cc34:	24006fe0 	.word	0x24006fe0

0801cc38 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 801cc38:	4b0a      	ldr	r3, [pc, #40]	; (801cc64 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801cc3a:	b510      	push	{r4, lr}
 801cc3c:	781b      	ldrb	r3, [r3, #0]
 801cc3e:	2b01      	cmp	r3, #1
 801cc40:	d10e      	bne.n	801cc60 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801cc42:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801cc46:	8843      	ldrh	r3, [r0, #2]
 801cc48:	f9b0 4000 	ldrsh.w	r4, [r0]
 801cc4c:	18ca      	adds	r2, r1, r3
 801cc4e:	4b06      	ldr	r3, [pc, #24]	; (801cc68 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 801cc50:	8044      	strh	r4, [r0, #2]
 801cc52:	881b      	ldrh	r3, [r3, #0]
 801cc54:	1a9b      	subs	r3, r3, r2
 801cc56:	8003      	strh	r3, [r0, #0]
 801cc58:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801cc5c:	8081      	strh	r1, [r0, #4]
 801cc5e:	80c3      	strh	r3, [r0, #6]
 801cc60:	bd10      	pop	{r4, pc}
 801cc62:	bf00      	nop
 801cc64:	24006fe4 	.word	0x24006fe4
 801cc68:	24006fe0 	.word	0x24006fe0

0801cc6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801cc6c:	4b08      	ldr	r3, [pc, #32]	; (801cc90 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 801cc6e:	781b      	ldrb	r3, [r3, #0]
 801cc70:	2b01      	cmp	r3, #1
 801cc72:	d10c      	bne.n	801cc8e <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 801cc74:	8803      	ldrh	r3, [r0, #0]
 801cc76:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 801cc7a:	8842      	ldrh	r2, [r0, #2]
 801cc7c:	8002      	strh	r2, [r0, #0]
 801cc7e:	185a      	adds	r2, r3, r1
 801cc80:	4b04      	ldr	r3, [pc, #16]	; (801cc94 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801cc82:	881b      	ldrh	r3, [r3, #0]
 801cc84:	1a9b      	subs	r3, r3, r2
 801cc86:	8043      	strh	r3, [r0, #2]
 801cc88:	88c3      	ldrh	r3, [r0, #6]
 801cc8a:	80c1      	strh	r1, [r0, #6]
 801cc8c:	8083      	strh	r3, [r0, #4]
 801cc8e:	4770      	bx	lr
 801cc90:	24006fe4 	.word	0x24006fe4
 801cc94:	24006fe0 	.word	0x24006fe0

0801cc98 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 801cc98:	4b07      	ldr	r3, [pc, #28]	; (801ccb8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801cc9a:	b510      	push	{r4, lr}
 801cc9c:	781b      	ldrb	r3, [r3, #0]
 801cc9e:	2b01      	cmp	r3, #1
 801cca0:	d108      	bne.n	801ccb4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801cca2:	f9b1 3000 	ldrsh.w	r3, [r1]
 801cca6:	f9b0 4000 	ldrsh.w	r4, [r0]
 801ccaa:	8003      	strh	r3, [r0, #0]
 801ccac:	8893      	ldrh	r3, [r2, #4]
 801ccae:	3b01      	subs	r3, #1
 801ccb0:	1b1b      	subs	r3, r3, r4
 801ccb2:	800b      	strh	r3, [r1, #0]
 801ccb4:	bd10      	pop	{r4, pc}
 801ccb6:	bf00      	nop
 801ccb8:	24006fe4 	.word	0x24006fe4

0801ccbc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801ccbc:	4b0a      	ldr	r3, [pc, #40]	; (801cce8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801ccbe:	460a      	mov	r2, r1
 801ccc0:	b510      	push	{r4, lr}
 801ccc2:	781b      	ldrb	r3, [r3, #0]
 801ccc4:	2b01      	cmp	r3, #1
 801ccc6:	d10d      	bne.n	801cce4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 801ccc8:	8881      	ldrh	r1, [r0, #4]
 801ccca:	8803      	ldrh	r3, [r0, #0]
 801cccc:	440b      	add	r3, r1
 801ccce:	4601      	mov	r1, r0
 801ccd0:	3b01      	subs	r3, #1
 801ccd2:	f821 3b02 	strh.w	r3, [r1], #2
 801ccd6:	f7ff ffdf 	bl	801cc98 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801ccda:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801ccde:	88c2      	ldrh	r2, [r0, #6]
 801cce0:	80c3      	strh	r3, [r0, #6]
 801cce2:	8082      	strh	r2, [r0, #4]
 801cce4:	bd10      	pop	{r4, pc}
 801cce6:	bf00      	nop
 801cce8:	24006fe4 	.word	0x24006fe4

0801ccec <_ZN8touchgfx11Application13requestRedrawEv>:
 801ccec:	4b06      	ldr	r3, [pc, #24]	; (801cd08 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 801ccee:	2100      	movs	r1, #0
 801ccf0:	f9b3 2000 	ldrsh.w	r2, [r3]
 801ccf4:	4b05      	ldr	r3, [pc, #20]	; (801cd0c <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 801ccf6:	f8c0 1130 	str.w	r1, [r0, #304]	; 0x130
 801ccfa:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ccfe:	f8a0 2134 	strh.w	r2, [r0, #308]	; 0x134
 801cd02:	f8a0 3136 	strh.w	r3, [r0, #310]	; 0x136
 801cd06:	4770      	bx	lr
 801cd08:	24006fe0 	.word	0x24006fe0
 801cd0c:	24006fe2 	.word	0x24006fe2

0801cd10 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 801cd10:	4b03      	ldr	r3, [pc, #12]	; (801cd20 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801cd12:	6818      	ldr	r0, [r3, #0]
 801cd14:	b110      	cbz	r0, 801cd1c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801cd16:	6803      	ldr	r3, [r0, #0]
 801cd18:	699b      	ldr	r3, [r3, #24]
 801cd1a:	4718      	bx	r3
 801cd1c:	4770      	bx	lr
 801cd1e:	bf00      	nop
 801cd20:	24007028 	.word	0x24007028

0801cd24 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801cd24:	4770      	bx	lr
	...

0801cd28 <_ZN8touchgfx11Application4drawEv>:
 801cd28:	4b09      	ldr	r3, [pc, #36]	; (801cd50 <_ZN8touchgfx11Application4drawEv+0x28>)
 801cd2a:	b507      	push	{r0, r1, r2, lr}
 801cd2c:	f9b3 2000 	ldrsh.w	r2, [r3]
 801cd30:	2100      	movs	r1, #0
 801cd32:	4b08      	ldr	r3, [pc, #32]	; (801cd54 <_ZN8touchgfx11Application4drawEv+0x2c>)
 801cd34:	9100      	str	r1, [sp, #0]
 801cd36:	4669      	mov	r1, sp
 801cd38:	f9b3 3000 	ldrsh.w	r3, [r3]
 801cd3c:	f8ad 2004 	strh.w	r2, [sp, #4]
 801cd40:	f8ad 3006 	strh.w	r3, [sp, #6]
 801cd44:	6803      	ldr	r3, [r0, #0]
 801cd46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801cd48:	4798      	blx	r3
 801cd4a:	b003      	add	sp, #12
 801cd4c:	f85d fb04 	ldr.w	pc, [sp], #4
 801cd50:	24006fe0 	.word	0x24006fe0
 801cd54:	24006fe2 	.word	0x24006fe2

0801cd58 <_ZN8touchgfx11Application10invalidateEv>:
 801cd58:	4b09      	ldr	r3, [pc, #36]	; (801cd80 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 801cd5a:	b082      	sub	sp, #8
 801cd5c:	2100      	movs	r1, #0
 801cd5e:	f9b3 2000 	ldrsh.w	r2, [r3]
 801cd62:	4b08      	ldr	r3, [pc, #32]	; (801cd84 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 801cd64:	f8ad 2004 	strh.w	r2, [sp, #4]
 801cd68:	aa02      	add	r2, sp, #8
 801cd6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801cd6e:	9100      	str	r1, [sp, #0]
 801cd70:	f8ad 3006 	strh.w	r3, [sp, #6]
 801cd74:	6803      	ldr	r3, [r0, #0]
 801cd76:	e912 0006 	ldmdb	r2, {r1, r2}
 801cd7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801cd7c:	b002      	add	sp, #8
 801cd7e:	4718      	bx	r3
 801cd80:	24006fe0 	.word	0x24006fe0
 801cd84:	24006fe2 	.word	0x24006fe2

0801cd88 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 801cd88:	4b03      	ldr	r3, [pc, #12]	; (801cd98 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801cd8a:	6818      	ldr	r0, [r3, #0]
 801cd8c:	b110      	cbz	r0, 801cd94 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801cd8e:	6803      	ldr	r3, [r0, #0]
 801cd90:	69db      	ldr	r3, [r3, #28]
 801cd92:	4718      	bx	r3
 801cd94:	4770      	bx	lr
 801cd96:	bf00      	nop
 801cd98:	24007028 	.word	0x24007028

0801cd9c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 801cd9c:	4b03      	ldr	r3, [pc, #12]	; (801cdac <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801cd9e:	6818      	ldr	r0, [r3, #0]
 801cda0:	b110      	cbz	r0, 801cda8 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801cda2:	6803      	ldr	r3, [r0, #0]
 801cda4:	6a1b      	ldr	r3, [r3, #32]
 801cda6:	4718      	bx	r3
 801cda8:	4770      	bx	lr
 801cdaa:	bf00      	nop
 801cdac:	24007028 	.word	0x24007028

0801cdb0 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 801cdb0:	2300      	movs	r3, #0
 801cdb2:	f8a0 30ec 	strh.w	r3, [r0, #236]	; 0xec
 801cdb6:	4770      	bx	lr

0801cdb8 <_ZN8touchgfx11Application14handleKeyEventEh>:
 801cdb8:	4b03      	ldr	r3, [pc, #12]	; (801cdc8 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801cdba:	6818      	ldr	r0, [r3, #0]
 801cdbc:	b110      	cbz	r0, 801cdc4 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801cdbe:	6803      	ldr	r3, [r0, #0]
 801cdc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cdc2:	4718      	bx	r3
 801cdc4:	4770      	bx	lr
 801cdc6:	bf00      	nop
 801cdc8:	24007028 	.word	0x24007028

0801cdcc <_ZNK8touchgfx4Rect9intersectERKS0_>:
 801cdcc:	b510      	push	{r4, lr}
 801cdce:	f9b1 4000 	ldrsh.w	r4, [r1]
 801cdd2:	888a      	ldrh	r2, [r1, #4]
 801cdd4:	f9b0 3000 	ldrsh.w	r3, [r0]
 801cdd8:	4422      	add	r2, r4
 801cdda:	b212      	sxth	r2, r2
 801cddc:	4293      	cmp	r3, r2
 801cdde:	da15      	bge.n	801ce0c <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801cde0:	8882      	ldrh	r2, [r0, #4]
 801cde2:	4413      	add	r3, r2
 801cde4:	b21b      	sxth	r3, r3
 801cde6:	429c      	cmp	r4, r3
 801cde8:	da10      	bge.n	801ce0c <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801cdea:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801cdee:	88c9      	ldrh	r1, [r1, #6]
 801cdf0:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801cdf4:	4419      	add	r1, r3
 801cdf6:	b209      	sxth	r1, r1
 801cdf8:	428a      	cmp	r2, r1
 801cdfa:	da07      	bge.n	801ce0c <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801cdfc:	88c0      	ldrh	r0, [r0, #6]
 801cdfe:	4410      	add	r0, r2
 801ce00:	b200      	sxth	r0, r0
 801ce02:	4283      	cmp	r3, r0
 801ce04:	bfac      	ite	ge
 801ce06:	2000      	movge	r0, #0
 801ce08:	2001      	movlt	r0, #1
 801ce0a:	bd10      	pop	{r4, pc}
 801ce0c:	2000      	movs	r0, #0
 801ce0e:	e7fc      	b.n	801ce0a <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0801ce10 <_ZN8touchgfx4Rect10restrictToEss>:
 801ce10:	f9b0 3000 	ldrsh.w	r3, [r0]
 801ce14:	2b00      	cmp	r3, #0
 801ce16:	b510      	push	{r4, lr}
 801ce18:	da04      	bge.n	801ce24 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 801ce1a:	8884      	ldrh	r4, [r0, #4]
 801ce1c:	4423      	add	r3, r4
 801ce1e:	8083      	strh	r3, [r0, #4]
 801ce20:	2300      	movs	r3, #0
 801ce22:	8003      	strh	r3, [r0, #0]
 801ce24:	f9b0 4000 	ldrsh.w	r4, [r0]
 801ce28:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801ce2c:	1b09      	subs	r1, r1, r4
 801ce2e:	428b      	cmp	r3, r1
 801ce30:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801ce34:	bfc8      	it	gt
 801ce36:	8081      	strhgt	r1, [r0, #4]
 801ce38:	2b00      	cmp	r3, #0
 801ce3a:	da04      	bge.n	801ce46 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 801ce3c:	88c1      	ldrh	r1, [r0, #6]
 801ce3e:	440b      	add	r3, r1
 801ce40:	80c3      	strh	r3, [r0, #6]
 801ce42:	2300      	movs	r3, #0
 801ce44:	8043      	strh	r3, [r0, #2]
 801ce46:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801ce4a:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801ce4e:	1a52      	subs	r2, r2, r1
 801ce50:	4293      	cmp	r3, r2
 801ce52:	bfc8      	it	gt
 801ce54:	80c2      	strhgt	r2, [r0, #6]
 801ce56:	bd10      	pop	{r4, pc}

0801ce58 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801ce58:	4b10      	ldr	r3, [pc, #64]	; (801ce9c <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 801ce5a:	b510      	push	{r4, lr}
 801ce5c:	460c      	mov	r4, r1
 801ce5e:	f9b3 2000 	ldrsh.w	r2, [r3]
 801ce62:	4b0f      	ldr	r3, [pc, #60]	; (801cea0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 801ce64:	4620      	mov	r0, r4
 801ce66:	f9b3 1000 	ldrsh.w	r1, [r3]
 801ce6a:	f7ff ffd1 	bl	801ce10 <_ZN8touchgfx4Rect10restrictToEss>
 801ce6e:	4b0d      	ldr	r3, [pc, #52]	; (801cea4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 801ce70:	6818      	ldr	r0, [r3, #0]
 801ce72:	b190      	cbz	r0, 801ce9a <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 801ce74:	6803      	ldr	r3, [r0, #0]
 801ce76:	4621      	mov	r1, r4
 801ce78:	689b      	ldr	r3, [r3, #8]
 801ce7a:	4798      	blx	r3
 801ce7c:	4b0a      	ldr	r3, [pc, #40]	; (801cea8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 801ce7e:	6818      	ldr	r0, [r3, #0]
 801ce80:	b118      	cbz	r0, 801ce8a <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 801ce82:	6803      	ldr	r3, [r0, #0]
 801ce84:	4621      	mov	r1, r4
 801ce86:	689b      	ldr	r3, [r3, #8]
 801ce88:	4798      	blx	r3
 801ce8a:	4b08      	ldr	r3, [pc, #32]	; (801ceac <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 801ce8c:	4621      	mov	r1, r4
 801ce8e:	6818      	ldr	r0, [r3, #0]
 801ce90:	6803      	ldr	r3, [r0, #0]
 801ce92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ce96:	69db      	ldr	r3, [r3, #28]
 801ce98:	4718      	bx	r3
 801ce9a:	bd10      	pop	{r4, pc}
 801ce9c:	24006fe2 	.word	0x24006fe2
 801cea0:	24006fe0 	.word	0x24006fe0
 801cea4:	24007028 	.word	0x24007028
 801cea8:	24007024 	.word	0x24007024
 801ceac:	24006fec 	.word	0x24006fec

0801ceb0 <_ZNK8touchgfx4Rect8includesERKS0_>:
 801ceb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ceb2:	4606      	mov	r6, r0
 801ceb4:	4608      	mov	r0, r1
 801ceb6:	460f      	mov	r7, r1
 801ceb8:	f7fc ffc7 	bl	8019e4a <_ZNK8touchgfx4Rect7isEmptyEv>
 801cebc:	b9e8      	cbnz	r0, 801cefa <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801cebe:	f9b7 5000 	ldrsh.w	r5, [r7]
 801cec2:	f9b6 4000 	ldrsh.w	r4, [r6]
 801cec6:	42a5      	cmp	r5, r4
 801cec8:	db17      	blt.n	801cefa <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801ceca:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801cece:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 801ced2:	429a      	cmp	r2, r3
 801ced4:	db11      	blt.n	801cefa <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801ced6:	88b9      	ldrh	r1, [r7, #4]
 801ced8:	440d      	add	r5, r1
 801ceda:	88b1      	ldrh	r1, [r6, #4]
 801cedc:	440c      	add	r4, r1
 801cede:	b22d      	sxth	r5, r5
 801cee0:	b224      	sxth	r4, r4
 801cee2:	42a5      	cmp	r5, r4
 801cee4:	dc09      	bgt.n	801cefa <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801cee6:	88f8      	ldrh	r0, [r7, #6]
 801cee8:	4410      	add	r0, r2
 801ceea:	88f2      	ldrh	r2, [r6, #6]
 801ceec:	4413      	add	r3, r2
 801ceee:	b200      	sxth	r0, r0
 801cef0:	b21b      	sxth	r3, r3
 801cef2:	4298      	cmp	r0, r3
 801cef4:	bfcc      	ite	gt
 801cef6:	2000      	movgt	r0, #0
 801cef8:	2001      	movle	r0, #1
 801cefa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801cefc <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 801cefc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cefe:	4604      	mov	r4, r0
 801cf00:	4608      	mov	r0, r1
 801cf02:	460d      	mov	r5, r1
 801cf04:	f7fc ffa1 	bl	8019e4a <_ZNK8touchgfx4Rect7isEmptyEv>
 801cf08:	b978      	cbnz	r0, 801cf2a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 801cf0a:	4620      	mov	r0, r4
 801cf0c:	f7fc ff9d 	bl	8019e4a <_ZNK8touchgfx4Rect7isEmptyEv>
 801cf10:	f9b5 6000 	ldrsh.w	r6, [r5]
 801cf14:	b150      	cbz	r0, 801cf2c <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 801cf16:	8026      	strh	r6, [r4, #0]
 801cf18:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801cf1c:	8063      	strh	r3, [r4, #2]
 801cf1e:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 801cf22:	80a3      	strh	r3, [r4, #4]
 801cf24:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801cf28:	80e3      	strh	r3, [r4, #6]
 801cf2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cf2c:	f9b4 1000 	ldrsh.w	r1, [r4]
 801cf30:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801cf34:	42b1      	cmp	r1, r6
 801cf36:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801cf3a:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 801cf3e:	460f      	mov	r7, r1
 801cf40:	88ed      	ldrh	r5, [r5, #6]
 801cf42:	bfa8      	it	ge
 801cf44:	4637      	movge	r7, r6
 801cf46:	4293      	cmp	r3, r2
 801cf48:	4618      	mov	r0, r3
 801cf4a:	4466      	add	r6, ip
 801cf4c:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801cf50:	bfa8      	it	ge
 801cf52:	4610      	movge	r0, r2
 801cf54:	442a      	add	r2, r5
 801cf56:	88e5      	ldrh	r5, [r4, #6]
 801cf58:	4461      	add	r1, ip
 801cf5a:	b236      	sxth	r6, r6
 801cf5c:	8027      	strh	r7, [r4, #0]
 801cf5e:	442b      	add	r3, r5
 801cf60:	b209      	sxth	r1, r1
 801cf62:	b212      	sxth	r2, r2
 801cf64:	8060      	strh	r0, [r4, #2]
 801cf66:	b21b      	sxth	r3, r3
 801cf68:	428e      	cmp	r6, r1
 801cf6a:	bfac      	ite	ge
 801cf6c:	ebc7 0106 	rsbge	r1, r7, r6
 801cf70:	ebc7 0101 	rsblt	r1, r7, r1
 801cf74:	429a      	cmp	r2, r3
 801cf76:	bfac      	ite	ge
 801cf78:	ebc0 0202 	rsbge	r2, r0, r2
 801cf7c:	ebc0 0203 	rsblt	r2, r0, r3
 801cf80:	80a1      	strh	r1, [r4, #4]
 801cf82:	80e2      	strh	r2, [r4, #6]
 801cf84:	e7d1      	b.n	801cf2a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

0801cf88 <_ZN8touchgfx11Application11getInstanceEv>:
 801cf88:	4b01      	ldr	r3, [pc, #4]	; (801cf90 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801cf8a:	6818      	ldr	r0, [r3, #0]
 801cf8c:	4770      	bx	lr
 801cf8e:	bf00      	nop
 801cf90:	24007038 	.word	0x24007038

0801cf94 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 801cf94:	2300      	movs	r3, #0
 801cf96:	b510      	push	{r4, lr}
 801cf98:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
 801cf9c:	4604      	mov	r4, r0
 801cf9e:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 801cfa2:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 801cfa6:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 801cfaa:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	; 0xa6
 801cfae:	429a      	cmp	r2, r3
 801cfb0:	d90e      	bls.n	801cfd0 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 801cfb2:	18e2      	adds	r2, r4, r3
 801cfb4:	f892 2084 	ldrb.w	r2, [r2, #132]	; 0x84
 801cfb8:	b122      	cbz	r2, 801cfc4 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 801cfba:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 801cfbe:	6803      	ldr	r3, [r0, #0]
 801cfc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801cfc2:	4798      	blx	r3
 801cfc4:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 801cfc8:	3301      	adds	r3, #1
 801cfca:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 801cfce:	e7ea      	b.n	801cfa6 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 801cfd0:	bd10      	pop	{r4, pc}

0801cfd2 <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 801cfd2:	2300      	movs	r3, #0
 801cfd4:	f100 0284 	add.w	r2, r0, #132	; 0x84
 801cfd8:	30a4      	adds	r0, #164	; 0xa4
 801cfda:	f820 3c24 	strh.w	r3, [r0, #-36]
 801cfde:	f802 3b01 	strb.w	r3, [r2], #1
 801cfe2:	4282      	cmp	r2, r0
 801cfe4:	d1fb      	bne.n	801cfde <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 801cfe6:	4770      	bx	lr

0801cfe8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801cfe8:	b570      	push	{r4, r5, r6, lr}
 801cfea:	4c0b      	ldr	r4, [pc, #44]	; (801d018 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 801cfec:	4605      	mov	r5, r0
 801cfee:	460e      	mov	r6, r1
 801cff0:	6820      	ldr	r0, [r4, #0]
 801cff2:	b110      	cbz	r0, 801cffa <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 801cff4:	6803      	ldr	r3, [r0, #0]
 801cff6:	695b      	ldr	r3, [r3, #20]
 801cff8:	4798      	blx	r3
 801cffa:	1d28      	adds	r0, r5, #4
 801cffc:	f7ff ffe9 	bl	801cfd2 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 801d000:	6026      	str	r6, [r4, #0]
 801d002:	6833      	ldr	r3, [r6, #0]
 801d004:	4630      	mov	r0, r6
 801d006:	68db      	ldr	r3, [r3, #12]
 801d008:	4798      	blx	r3
 801d00a:	682b      	ldr	r3, [r5, #0]
 801d00c:	4628      	mov	r0, r5
 801d00e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d010:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d014:	4718      	bx	r3
 801d016:	bf00      	nop
 801d018:	24007028 	.word	0x24007028

0801d01c <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 801d01c:	2300      	movs	r3, #0
 801d01e:	f8b0 c080 	ldrh.w	ip, [r0, #128]	; 0x80
 801d022:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	; 0xa4
 801d026:	461a      	mov	r2, r3
 801d028:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d02a:	461c      	mov	r4, r3
 801d02c:	461d      	mov	r5, r3
 801d02e:	459c      	cmp	ip, r3
 801d030:	dd1a      	ble.n	801d068 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 801d032:	18c6      	adds	r6, r0, r3
 801d034:	f896 6084 	ldrb.w	r6, [r6, #132]	; 0x84
 801d038:	b16e      	cbz	r6, 801d056 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 801d03a:	429a      	cmp	r2, r3
 801d03c:	d008      	beq.n	801d050 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 801d03e:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 801d042:	fa1f fe82 	uxth.w	lr, r2
 801d046:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 801d04a:	1887      	adds	r7, r0, r2
 801d04c:	f887 6084 	strb.w	r6, [r7, #132]	; 0x84
 801d050:	3201      	adds	r2, #1
 801d052:	3301      	adds	r3, #1
 801d054:	e7eb      	b.n	801d02e <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 801d056:	4299      	cmp	r1, r3
 801d058:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	; 0xa6
 801d05c:	bfa8      	it	ge
 801d05e:	3501      	addge	r5, #1
 801d060:	429e      	cmp	r6, r3
 801d062:	bfc8      	it	gt
 801d064:	3401      	addgt	r4, #1
 801d066:	e7f4      	b.n	801d052 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 801d068:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
 801d06c:	1b49      	subs	r1, r1, r5
 801d06e:	1b1b      	subs	r3, r3, r4
 801d070:	f8a0 10a4 	strh.w	r1, [r0, #164]	; 0xa4
 801d074:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 801d078:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 801d07c:	4293      	cmp	r3, r2
 801d07e:	dd03      	ble.n	801d088 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 801d080:	3b01      	subs	r3, #1
 801d082:	f8a0 3080 	strh.w	r3, [r0, #128]	; 0x80
 801d086:	e7f7      	b.n	801d078 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 801d088:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0801d08c <_ZN8touchgfx11Application15handleTickEventEv>:
 801d08c:	b570      	push	{r4, r5, r6, lr}
 801d08e:	4d16      	ldr	r5, [pc, #88]	; (801d0e8 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 801d090:	4604      	mov	r4, r0
 801d092:	6828      	ldr	r0, [r5, #0]
 801d094:	b140      	cbz	r0, 801d0a8 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801d096:	7a03      	ldrb	r3, [r0, #8]
 801d098:	b933      	cbnz	r3, 801d0a8 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801d09a:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 801d09e:	6803      	ldr	r3, [r0, #0]
 801d0a0:	689b      	ldr	r3, [r3, #8]
 801d0a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d0a6:	4718      	bx	r3
 801d0a8:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
 801d0ac:	4e0f      	ldr	r6, [pc, #60]	; (801d0ec <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 801d0ae:	b973      	cbnz	r3, 801d0ce <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801d0b0:	b168      	cbz	r0, 801d0ce <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801d0b2:	7a03      	ldrb	r3, [r0, #8]
 801d0b4:	b15b      	cbz	r3, 801d0ce <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801d0b6:	6830      	ldr	r0, [r6, #0]
 801d0b8:	b110      	cbz	r0, 801d0c0 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 801d0ba:	6803      	ldr	r3, [r0, #0]
 801d0bc:	691b      	ldr	r3, [r3, #16]
 801d0be:	4798      	blx	r3
 801d0c0:	6828      	ldr	r0, [r5, #0]
 801d0c2:	6803      	ldr	r3, [r0, #0]
 801d0c4:	68db      	ldr	r3, [r3, #12]
 801d0c6:	4798      	blx	r3
 801d0c8:	2301      	movs	r3, #1
 801d0ca:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 801d0ce:	3404      	adds	r4, #4
 801d0d0:	4620      	mov	r0, r4
 801d0d2:	f7ff ff5f 	bl	801cf94 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 801d0d6:	4620      	mov	r0, r4
 801d0d8:	f7ff ffa0 	bl	801d01c <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 801d0dc:	6830      	ldr	r0, [r6, #0]
 801d0de:	b110      	cbz	r0, 801d0e6 <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 801d0e0:	6803      	ldr	r3, [r0, #0]
 801d0e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d0e4:	e7dd      	b.n	801d0a2 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 801d0e6:	bd70      	pop	{r4, r5, r6, pc}
 801d0e8:	2400702c 	.word	0x2400702c
 801d0ec:	24007028 	.word	0x24007028

0801d0f0 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801d0f0:	4603      	mov	r3, r0
 801d0f2:	f100 0140 	add.w	r1, r0, #64	; 0x40
 801d0f6:	2200      	movs	r2, #0
 801d0f8:	801a      	strh	r2, [r3, #0]
 801d0fa:	3308      	adds	r3, #8
 801d0fc:	f823 2c06 	strh.w	r2, [r3, #-6]
 801d100:	f823 2c04 	strh.w	r2, [r3, #-4]
 801d104:	f823 2c02 	strh.w	r2, [r3, #-2]
 801d108:	428b      	cmp	r3, r1
 801d10a:	d1f5      	bne.n	801d0f8 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801d10c:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801d110:	4770      	bx	lr
	...

0801d114 <_ZN8touchgfx11ApplicationC1Ev>:
 801d114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d116:	4b1d      	ldr	r3, [pc, #116]	; (801d18c <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 801d118:	4606      	mov	r6, r0
 801d11a:	4604      	mov	r4, r0
 801d11c:	2500      	movs	r5, #0
 801d11e:	f846 3b04 	str.w	r3, [r6], #4
 801d122:	22a8      	movs	r2, #168	; 0xa8
 801d124:	2100      	movs	r1, #0
 801d126:	4630      	mov	r0, r6
 801d128:	f00c f919 	bl	802935e <memset>
 801d12c:	f8a4 5084 	strh.w	r5, [r4, #132]	; 0x84
 801d130:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 801d134:	4f16      	ldr	r7, [pc, #88]	; (801d190 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 801d136:	f7ff ffdb 	bl	801d0f0 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801d13a:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 801d13e:	f7ff ffd7 	bl	801d0f0 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801d142:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 801d146:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 801d14a:	f8a4 5134 	strh.w	r5, [r4, #308]	; 0x134
 801d14e:	f8a4 5136 	strh.w	r5, [r4, #310]	; 0x136
 801d152:	f884 5138 	strb.w	r5, [r4, #312]	; 0x138
 801d156:	490f      	ldr	r1, [pc, #60]	; (801d194 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 801d158:	480f      	ldr	r0, [pc, #60]	; (801d198 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 801d15a:	f00b fda3 	bl	8028ca4 <CRC_Lock>
 801d15e:	4b0f      	ldr	r3, [pc, #60]	; (801d19c <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 801d160:	b158      	cbz	r0, 801d17a <_ZN8touchgfx11ApplicationC1Ev+0x66>
 801d162:	801d      	strh	r5, [r3, #0]
 801d164:	2300      	movs	r3, #0
 801d166:	4a0e      	ldr	r2, [pc, #56]	; (801d1a0 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 801d168:	4630      	mov	r0, r6
 801d16a:	6013      	str	r3, [r2, #0]
 801d16c:	4a0d      	ldr	r2, [pc, #52]	; (801d1a4 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 801d16e:	603b      	str	r3, [r7, #0]
 801d170:	6013      	str	r3, [r2, #0]
 801d172:	f7ff ff2e 	bl	801cfd2 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 801d176:	4620      	mov	r0, r4
 801d178:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d17a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801d17e:	2002      	movs	r0, #2
 801d180:	801a      	strh	r2, [r3, #0]
 801d182:	6038      	str	r0, [r7, #0]
 801d184:	f001 fa50 	bl	801e628 <_ZN8touchgfx6Screen4drawEv>
 801d188:	e7ec      	b.n	801d164 <_ZN8touchgfx11ApplicationC1Ev+0x50>
 801d18a:	bf00      	nop
 801d18c:	0802bd50 	.word	0x0802bd50
 801d190:	24007028 	.word	0x24007028
 801d194:	b5e8b5cd 	.word	0xb5e8b5cd
 801d198:	f407a5c2 	.word	0xf407a5c2
 801d19c:	24000054 	.word	0x24000054
 801d1a0:	24007038 	.word	0x24007038
 801d1a4:	2400702c 	.word	0x2400702c

0801d1a8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801d1a8:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 801d1ac:	3b01      	subs	r3, #1
 801d1ae:	b29b      	uxth	r3, r3
 801d1b0:	428b      	cmp	r3, r1
 801d1b2:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 801d1b6:	b510      	push	{r4, lr}
 801d1b8:	d908      	bls.n	801d1cc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 801d1ba:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801d1be:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 801d1c2:	681a      	ldr	r2, [r3, #0]
 801d1c4:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 801d1c8:	685a      	ldr	r2, [r3, #4]
 801d1ca:	6062      	str	r2, [r4, #4]
 801d1cc:	bd10      	pop	{r4, pc}
	...

0801d1d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801d1d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d1d4:	b08f      	sub	sp, #60	; 0x3c
 801d1d6:	4b8f      	ldr	r3, [pc, #572]	; (801d414 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 801d1d8:	4683      	mov	fp, r0
 801d1da:	ac0a      	add	r4, sp, #40	; 0x28
 801d1dc:	e884 0006 	stmia.w	r4, {r1, r2}
 801d1e0:	f9b3 2000 	ldrsh.w	r2, [r3]
 801d1e4:	4620      	mov	r0, r4
 801d1e6:	4b8c      	ldr	r3, [pc, #560]	; (801d418 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 801d1e8:	f9b3 1000 	ldrsh.w	r1, [r3]
 801d1ec:	f7ff fe10 	bl	801ce10 <_ZN8touchgfx4Rect10restrictToEss>
 801d1f0:	4620      	mov	r0, r4
 801d1f2:	f7fc fe2a 	bl	8019e4a <_ZNK8touchgfx4Rect7isEmptyEv>
 801d1f6:	2800      	cmp	r0, #0
 801d1f8:	d16a      	bne.n	801d2d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801d1fa:	9403      	str	r4, [sp, #12]
 801d1fc:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	; 0xec
 801d200:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 801d204:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 801d208:	9301      	str	r3, [sp, #4]
 801d20a:	35a4      	adds	r5, #164	; 0xa4
 801d20c:	b15c      	cbz	r4, 801d226 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801d20e:	4629      	mov	r1, r5
 801d210:	9803      	ldr	r0, [sp, #12]
 801d212:	f7ff fe4d 	bl	801ceb0 <_ZNK8touchgfx4Rect8includesERKS0_>
 801d216:	3c01      	subs	r4, #1
 801d218:	b118      	cbz	r0, 801d222 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 801d21a:	b2a1      	uxth	r1, r4
 801d21c:	9801      	ldr	r0, [sp, #4]
 801d21e:	f7ff ffc3 	bl	801d1a8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801d222:	3d08      	subs	r5, #8
 801d224:	e7f2      	b.n	801d20c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 801d226:	f8bb a0ec 	ldrh.w	sl, [fp, #236]	; 0xec
 801d22a:	f10a 33ff 	add.w	r3, sl, #4294967295
 801d22e:	f8cd a010 	str.w	sl, [sp, #16]
 801d232:	9302      	str	r3, [sp, #8]
 801d234:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801d238:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 801d23c:	9306      	str	r3, [sp, #24]
 801d23e:	445c      	add	r4, fp
 801d240:	2500      	movs	r5, #0
 801d242:	4626      	mov	r6, r4
 801d244:	f8cd a014 	str.w	sl, [sp, #20]
 801d248:	462f      	mov	r7, r5
 801d24a:	9b05      	ldr	r3, [sp, #20]
 801d24c:	2b00      	cmp	r3, #0
 801d24e:	d073      	beq.n	801d338 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 801d250:	9903      	ldr	r1, [sp, #12]
 801d252:	4630      	mov	r0, r6
 801d254:	f7ff fdba 	bl	801cdcc <_ZNK8touchgfx4Rect9intersectERKS0_>
 801d258:	b350      	cbz	r0, 801d2b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 801d25a:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 801d25e:	f9b6 c000 	ldrsh.w	ip, [r6]
 801d262:	f9bd 802a 	ldrsh.w	r8, [sp, #42]	; 0x2a
 801d266:	45e6      	cmp	lr, ip
 801d268:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 801d26c:	db33      	blt.n	801d2d6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801d26e:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801d272:	88b3      	ldrh	r3, [r6, #4]
 801d274:	4472      	add	r2, lr
 801d276:	4463      	add	r3, ip
 801d278:	b212      	sxth	r2, r2
 801d27a:	b21b      	sxth	r3, r3
 801d27c:	429a      	cmp	r2, r3
 801d27e:	dc2a      	bgt.n	801d2d6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801d280:	fa1f f289 	uxth.w	r2, r9
 801d284:	88f3      	ldrh	r3, [r6, #6]
 801d286:	45c8      	cmp	r8, r9
 801d288:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801d28c:	4413      	add	r3, r2
 801d28e:	fa1f fc88 	uxth.w	ip, r8
 801d292:	b29b      	uxth	r3, r3
 801d294:	fa0f fe83 	sxth.w	lr, r3
 801d298:	db0f      	blt.n	801d2ba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 801d29a:	eba3 030c 	sub.w	r3, r3, ip
 801d29e:	1ac9      	subs	r1, r1, r3
 801d2a0:	b209      	sxth	r1, r1
 801d2a2:	2900      	cmp	r1, #0
 801d2a4:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801d2a8:	dd12      	ble.n	801d2d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801d2aa:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
 801d2ae:	4605      	mov	r5, r0
 801d2b0:	9b05      	ldr	r3, [sp, #20]
 801d2b2:	3e08      	subs	r6, #8
 801d2b4:	3b01      	subs	r3, #1
 801d2b6:	9305      	str	r3, [sp, #20]
 801d2b8:	e7c7      	b.n	801d24a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 801d2ba:	4461      	add	r1, ip
 801d2bc:	b209      	sxth	r1, r1
 801d2be:	4571      	cmp	r1, lr
 801d2c0:	dc38      	bgt.n	801d334 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801d2c2:	eba2 020c 	sub.w	r2, r2, ip
 801d2c6:	b212      	sxth	r2, r2
 801d2c8:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 801d2cc:	2a00      	cmp	r2, #0
 801d2ce:	dcee      	bgt.n	801d2ae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 801d2d0:	b00f      	add	sp, #60	; 0x3c
 801d2d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d2d6:	45c8      	cmp	r8, r9
 801d2d8:	db2c      	blt.n	801d334 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801d2da:	88f3      	ldrh	r3, [r6, #6]
 801d2dc:	4499      	add	r9, r3
 801d2de:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 801d2e2:	4498      	add	r8, r3
 801d2e4:	fa0f f989 	sxth.w	r9, r9
 801d2e8:	fa0f f888 	sxth.w	r8, r8
 801d2ec:	45c1      	cmp	r9, r8
 801d2ee:	db21      	blt.n	801d334 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801d2f0:	fa1f f28c 	uxth.w	r2, ip
 801d2f4:	88b3      	ldrh	r3, [r6, #4]
 801d2f6:	45e6      	cmp	lr, ip
 801d2f8:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801d2fc:	4413      	add	r3, r2
 801d2fe:	fa1f f88e 	uxth.w	r8, lr
 801d302:	b29b      	uxth	r3, r3
 801d304:	fa0f f983 	sxth.w	r9, r3
 801d308:	db0a      	blt.n	801d320 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 801d30a:	eba3 0308 	sub.w	r3, r3, r8
 801d30e:	1ac9      	subs	r1, r1, r3
 801d310:	b209      	sxth	r1, r1
 801d312:	2900      	cmp	r1, #0
 801d314:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 801d318:	ddda      	ble.n	801d2d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801d31a:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 801d31e:	e7c6      	b.n	801d2ae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 801d320:	4441      	add	r1, r8
 801d322:	b209      	sxth	r1, r1
 801d324:	4549      	cmp	r1, r9
 801d326:	dc05      	bgt.n	801d334 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801d328:	eba2 0208 	sub.w	r2, r2, r8
 801d32c:	b212      	sxth	r2, r2
 801d32e:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801d332:	e7cb      	b.n	801d2cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 801d334:	4607      	mov	r7, r0
 801d336:	e7bb      	b.n	801d2b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 801d338:	2d00      	cmp	r5, #0
 801d33a:	d181      	bne.n	801d240 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 801d33c:	2f00      	cmp	r7, #0
 801d33e:	f000 81dd 	beq.w	801d6fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 801d342:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
 801d346:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
 801d34a:	b2b3      	uxth	r3, r6
 801d34c:	f8bd a02e 	ldrh.w	sl, [sp, #46]	; 0x2e
 801d350:	9305      	str	r3, [sp, #20]
 801d352:	9a05      	ldr	r2, [sp, #20]
 801d354:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 801d358:	4413      	add	r3, r2
 801d35a:	b2ba      	uxth	r2, r7
 801d35c:	4492      	add	sl, r2
 801d35e:	b29b      	uxth	r3, r3
 801d360:	fa1f fa8a 	uxth.w	sl, sl
 801d364:	fa0f f883 	sxth.w	r8, r3
 801d368:	fa0f f98a 	sxth.w	r9, sl
 801d36c:	e9cd 2307 	strd	r2, r3, [sp, #28]
 801d370:	9b04      	ldr	r3, [sp, #16]
 801d372:	2b00      	cmp	r3, #0
 801d374:	d052      	beq.n	801d41c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 801d376:	9903      	ldr	r1, [sp, #12]
 801d378:	4620      	mov	r0, r4
 801d37a:	f7ff fd27 	bl	801cdcc <_ZNK8touchgfx4Rect9intersectERKS0_>
 801d37e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801d382:	b1c0      	cbz	r0, 801d3b6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801d384:	f9b4 e000 	ldrsh.w	lr, [r4]
 801d388:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801d38c:	4576      	cmp	r6, lr
 801d38e:	dc22      	bgt.n	801d3d6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801d390:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801d394:	44f4      	add	ip, lr
 801d396:	fa0f fc8c 	sxth.w	ip, ip
 801d39a:	45e0      	cmp	r8, ip
 801d39c:	db1b      	blt.n	801d3d6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801d39e:	428f      	cmp	r7, r1
 801d3a0:	fa1f fc81 	uxth.w	ip, r1
 801d3a4:	88e1      	ldrh	r1, [r4, #6]
 801d3a6:	dc0d      	bgt.n	801d3c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 801d3a8:	ebaa 0c0c 	sub.w	ip, sl, ip
 801d3ac:	f8a4 9002 	strh.w	r9, [r4, #2]
 801d3b0:	eba1 010c 	sub.w	r1, r1, ip
 801d3b4:	80e1      	strh	r1, [r4, #6]
 801d3b6:	4628      	mov	r0, r5
 801d3b8:	9904      	ldr	r1, [sp, #16]
 801d3ba:	3c08      	subs	r4, #8
 801d3bc:	4605      	mov	r5, r0
 801d3be:	3901      	subs	r1, #1
 801d3c0:	9104      	str	r1, [sp, #16]
 801d3c2:	e7d3      	b.n	801d36c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19c>
 801d3c4:	4461      	add	r1, ip
 801d3c6:	b209      	sxth	r1, r1
 801d3c8:	4549      	cmp	r1, r9
 801d3ca:	dcf5      	bgt.n	801d3b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 801d3cc:	eba2 0c0c 	sub.w	ip, r2, ip
 801d3d0:	f8a4 c006 	strh.w	ip, [r4, #6]
 801d3d4:	e7ef      	b.n	801d3b6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801d3d6:	428f      	cmp	r7, r1
 801d3d8:	dcee      	bgt.n	801d3b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 801d3da:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 801d3de:	4461      	add	r1, ip
 801d3e0:	b209      	sxth	r1, r1
 801d3e2:	4589      	cmp	r9, r1
 801d3e4:	dbe8      	blt.n	801d3b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 801d3e6:	4576      	cmp	r6, lr
 801d3e8:	fa1f fc8e 	uxth.w	ip, lr
 801d3ec:	88a1      	ldrh	r1, [r4, #4]
 801d3ee:	dc07      	bgt.n	801d400 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 801d3f0:	eba3 0c0c 	sub.w	ip, r3, ip
 801d3f4:	f8a4 8000 	strh.w	r8, [r4]
 801d3f8:	eba1 010c 	sub.w	r1, r1, ip
 801d3fc:	80a1      	strh	r1, [r4, #4]
 801d3fe:	e7da      	b.n	801d3b6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801d400:	4461      	add	r1, ip
 801d402:	b209      	sxth	r1, r1
 801d404:	4588      	cmp	r8, r1
 801d406:	dbd7      	blt.n	801d3b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 801d408:	9905      	ldr	r1, [sp, #20]
 801d40a:	eba1 0c0c 	sub.w	ip, r1, ip
 801d40e:	f8a4 c004 	strh.w	ip, [r4, #4]
 801d412:	e7d0      	b.n	801d3b6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801d414:	24006fe2 	.word	0x24006fe2
 801d418:	24006fe0 	.word	0x24006fe0
 801d41c:	2d00      	cmp	r5, #0
 801d41e:	f000 816d 	beq.w	801d6fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 801d422:	9b06      	ldr	r3, [sp, #24]
 801d424:	445b      	add	r3, fp
 801d426:	461c      	mov	r4, r3
 801d428:	9b02      	ldr	r3, [sp, #8]
 801d42a:	3301      	adds	r3, #1
 801d42c:	f000 8166 	beq.w	801d6fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 801d430:	f104 05a4 	add.w	r5, r4, #164	; 0xa4
 801d434:	9803      	ldr	r0, [sp, #12]
 801d436:	4629      	mov	r1, r5
 801d438:	f7ff fd3a 	bl	801ceb0 <_ZNK8touchgfx4Rect8includesERKS0_>
 801d43c:	b120      	cbz	r0, 801d448 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 801d43e:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801d442:	9801      	ldr	r0, [sp, #4]
 801d444:	f7ff feb0 	bl	801d1a8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801d448:	9903      	ldr	r1, [sp, #12]
 801d44a:	4628      	mov	r0, r5
 801d44c:	f7ff fcbe 	bl	801cdcc <_ZNK8touchgfx4Rect9intersectERKS0_>
 801d450:	2800      	cmp	r0, #0
 801d452:	f000 809c 	beq.w	801d58e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 801d456:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	; 0xa4
 801d45a:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 801d45e:	fa1f f189 	uxth.w	r1, r9
 801d462:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 801d466:	9309      	str	r3, [sp, #36]	; 0x24
 801d468:	eb01 0c03 	add.w	ip, r1, r3
 801d46c:	b283      	uxth	r3, r0
 801d46e:	4548      	cmp	r0, r9
 801d470:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
 801d474:	fa1f fa8c 	uxth.w	sl, ip
 801d478:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 801d47c:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	; 0xa6
 801d480:	eb03 050c 	add.w	r5, r3, ip
 801d484:	b2ad      	uxth	r5, r5
 801d486:	9505      	str	r5, [sp, #20]
 801d488:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 801d48c:	9504      	str	r5, [sp, #16]
 801d48e:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	; 0xec
 801d492:	f340 8099 	ble.w	801d5c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 801d496:	1a5b      	subs	r3, r3, r1
 801d498:	4596      	cmp	lr, r2
 801d49a:	fa0f f08a 	sxth.w	r0, sl
 801d49e:	b29b      	uxth	r3, r3
 801d4a0:	b21e      	sxth	r6, r3
 801d4a2:	dd2e      	ble.n	801d502 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 801d4a4:	9f02      	ldr	r7, [sp, #8]
 801d4a6:	fa1f fe8e 	uxth.w	lr, lr
 801d4aa:	b292      	uxth	r2, r2
 801d4ac:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
 801d4b0:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 801d4b4:	9f04      	ldr	r7, [sp, #16]
 801d4b6:	ebae 0102 	sub.w	r1, lr, r2
 801d4ba:	44a6      	add	lr, r4
 801d4bc:	1a3f      	subs	r7, r7, r0
 801d4be:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	; 0xb2
 801d4c2:	b289      	uxth	r1, r1
 801d4c4:	4402      	add	r2, r0
 801d4c6:	fa0f fe8e 	sxth.w	lr, lr
 801d4ca:	b20d      	sxth	r5, r1
 801d4cc:	b212      	sxth	r2, r2
 801d4ce:	436f      	muls	r7, r5
 801d4d0:	ebae 0202 	sub.w	r2, lr, r2
 801d4d4:	4372      	muls	r2, r6
 801d4d6:	4297      	cmp	r7, r2
 801d4d8:	db09      	blt.n	801d4ee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 801d4da:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	; 0xac
 801d4de:	f8a8 50b2 	strh.w	r5, [r8, #178]	; 0xb2
 801d4e2:	449c      	add	ip, r3
 801d4e4:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801d4e8:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 801d4ec:	e686      	b.n	801d1fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801d4ee:	4421      	add	r1, r4
 801d4f0:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	; 0xae
 801d4f4:	f8a8 60b0 	strh.w	r6, [r8, #176]	; 0xb0
 801d4f8:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801d4fc:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801d500:	e67c      	b.n	801d1fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801d502:	9f04      	ldr	r7, [sp, #16]
 801d504:	42b8      	cmp	r0, r7
 801d506:	da27      	bge.n	801d558 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 801d508:	9902      	ldr	r1, [sp, #8]
 801d50a:	1a3f      	subs	r7, r7, r0
 801d50c:	f8bd 502e 	ldrh.w	r5, [sp, #46]	; 0x2e
 801d510:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 801d514:	eb05 010e 	add.w	r1, r5, lr
 801d518:	fa1f f881 	uxth.w	r8, r1
 801d51c:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	; 0xb2
 801d520:	4411      	add	r1, r2
 801d522:	fa0f f988 	sxth.w	r9, r8
 801d526:	eba2 020e 	sub.w	r2, r2, lr
 801d52a:	eba1 0108 	sub.w	r1, r1, r8
 801d52e:	4372      	muls	r2, r6
 801d530:	b289      	uxth	r1, r1
 801d532:	fa0f f881 	sxth.w	r8, r1
 801d536:	fb08 f707 	mul.w	r7, r8, r7
 801d53a:	42ba      	cmp	r2, r7
 801d53c:	dc06      	bgt.n	801d54c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 801d53e:	f8a4 90ae 	strh.w	r9, [r4, #174]	; 0xae
 801d542:	f8a4 80b2 	strh.w	r8, [r4, #178]	; 0xb2
 801d546:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
 801d54a:	e7ca      	b.n	801d4e2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 801d54c:	4429      	add	r1, r5
 801d54e:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
 801d552:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801d556:	e651      	b.n	801d1fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801d558:	9805      	ldr	r0, [sp, #20]
 801d55a:	2d06      	cmp	r5, #6
 801d55c:	ebaa 0000 	sub.w	r0, sl, r0
 801d560:	b280      	uxth	r0, r0
 801d562:	fa0f fe80 	sxth.w	lr, r0
 801d566:	d817      	bhi.n	801d598 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 801d568:	9b04      	ldr	r3, [sp, #16]
 801d56a:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	; 0xaa
 801d56e:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 801d572:	1c6b      	adds	r3, r5, #1
 801d574:	f8a4 e0a8 	strh.w	lr, [r4, #168]	; 0xa8
 801d578:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 801d57c:	9b01      	ldr	r3, [sp, #4]
 801d57e:	9801      	ldr	r0, [sp, #4]
 801d580:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801d584:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 801d588:	805a      	strh	r2, [r3, #2]
 801d58a:	809e      	strh	r6, [r3, #4]
 801d58c:	80d9      	strh	r1, [r3, #6]
 801d58e:	9b02      	ldr	r3, [sp, #8]
 801d590:	3c08      	subs	r4, #8
 801d592:	3b01      	subs	r3, #1
 801d594:	9302      	str	r3, [sp, #8]
 801d596:	e747      	b.n	801d428 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 801d598:	9a02      	ldr	r2, [sp, #8]
 801d59a:	45b6      	cmp	lr, r6
 801d59c:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801d5a0:	db0d      	blt.n	801d5be <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 801d5a2:	449c      	add	ip, r3
 801d5a4:	445a      	add	r2, fp
 801d5a6:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 801d5aa:	fa1f fc8c 	uxth.w	ip, ip
 801d5ae:	f8a2 e0b0 	strh.w	lr, [r2, #176]	; 0xb0
 801d5b2:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 801d5b6:	448c      	add	ip, r1
 801d5b8:	f8a2 c0ac 	strh.w	ip, [r2, #172]	; 0xac
 801d5bc:	e61e      	b.n	801d1fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801d5be:	445a      	add	r2, fp
 801d5c0:	4484      	add	ip, r0
 801d5c2:	f8a2 60b0 	strh.w	r6, [r2, #176]	; 0xb0
 801d5c6:	e78f      	b.n	801d4e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801d5c8:	fa1f f18e 	uxth.w	r1, lr
 801d5cc:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 801d5d0:	b293      	uxth	r3, r2
 801d5d2:	4596      	cmp	lr, r2
 801d5d4:	eb01 0806 	add.w	r8, r1, r6
 801d5d8:	9306      	str	r3, [sp, #24]
 801d5da:	fa1f f888 	uxth.w	r8, r8
 801d5de:	9f06      	ldr	r7, [sp, #24]
 801d5e0:	fa0f f388 	sxth.w	r3, r8
 801d5e4:	9307      	str	r3, [sp, #28]
 801d5e6:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
 801d5ea:	443b      	add	r3, r7
 801d5ec:	b29b      	uxth	r3, r3
 801d5ee:	9308      	str	r3, [sp, #32]
 801d5f0:	da24      	bge.n	801d63c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 801d5f2:	9905      	ldr	r1, [sp, #20]
 801d5f4:	eba3 0308 	sub.w	r3, r3, r8
 801d5f8:	eba2 020e 	sub.w	r2, r2, lr
 801d5fc:	eba9 0000 	sub.w	r0, r9, r0
 801d600:	ebaa 0401 	sub.w	r4, sl, r1
 801d604:	b29b      	uxth	r3, r3
 801d606:	b2a4      	uxth	r4, r4
 801d608:	b219      	sxth	r1, r3
 801d60a:	b225      	sxth	r5, r4
 801d60c:	4348      	muls	r0, r1
 801d60e:	436a      	muls	r2, r5
 801d610:	4282      	cmp	r2, r0
 801d612:	9a02      	ldr	r2, [sp, #8]
 801d614:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801d618:	445a      	add	r2, fp
 801d61a:	dc06      	bgt.n	801d62a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 801d61c:	9b07      	ldr	r3, [sp, #28]
 801d61e:	44a4      	add	ip, r4
 801d620:	f8a2 10b2 	strh.w	r1, [r2, #178]	; 0xb2
 801d624:	f8a2 30ae 	strh.w	r3, [r2, #174]	; 0xae
 801d628:	e75e      	b.n	801d4e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801d62a:	9904      	ldr	r1, [sp, #16]
 801d62c:	f8a2 50b0 	strh.w	r5, [r2, #176]	; 0xb0
 801d630:	f8a2 10ac 	strh.w	r1, [r2, #172]	; 0xac
 801d634:	4433      	add	r3, r6
 801d636:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801d63a:	e5df      	b.n	801d1fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801d63c:	9f06      	ldr	r7, [sp, #24]
 801d63e:	9b04      	ldr	r3, [sp, #16]
 801d640:	1bc9      	subs	r1, r1, r7
 801d642:	fa0f f78a 	sxth.w	r7, sl
 801d646:	b289      	uxth	r1, r1
 801d648:	429f      	cmp	r7, r3
 801d64a:	fa0f fe81 	sxth.w	lr, r1
 801d64e:	dd23      	ble.n	801d698 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
 801d650:	9a05      	ldr	r2, [sp, #20]
 801d652:	eba9 0000 	sub.w	r0, r9, r0
 801d656:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801d65a:	ebaa 0202 	sub.w	r2, sl, r2
 801d65e:	9d07      	ldr	r5, [sp, #28]
 801d660:	fb0e f000 	mul.w	r0, lr, r0
 801d664:	b292      	uxth	r2, r2
 801d666:	eba5 0a03 	sub.w	sl, r5, r3
 801d66a:	9b02      	ldr	r3, [sp, #8]
 801d66c:	b214      	sxth	r4, r2
 801d66e:	00db      	lsls	r3, r3, #3
 801d670:	fb04 fa0a 	mul.w	sl, r4, sl
 801d674:	445b      	add	r3, fp
 801d676:	4550      	cmp	r0, sl
 801d678:	db03      	blt.n	801d682 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
 801d67a:	f8a3 e0b2 	strh.w	lr, [r3, #178]	; 0xb2
 801d67e:	4494      	add	ip, r2
 801d680:	e732      	b.n	801d4e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801d682:	9a04      	ldr	r2, [sp, #16]
 801d684:	4431      	add	r1, r6
 801d686:	f8a3 40b0 	strh.w	r4, [r3, #176]	; 0xb0
 801d68a:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 801d68e:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 801d692:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801d696:	e75c      	b.n	801d552 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 801d698:	9b08      	ldr	r3, [sp, #32]
 801d69a:	2d06      	cmp	r5, #6
 801d69c:	eba3 0308 	sub.w	r3, r3, r8
 801d6a0:	b29b      	uxth	r3, r3
 801d6a2:	b218      	sxth	r0, r3
 801d6a4:	d813      	bhi.n	801d6ce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
 801d6a6:	9b07      	ldr	r3, [sp, #28]
 801d6a8:	f8a4 00aa 	strh.w	r0, [r4, #170]	; 0xaa
 801d6ac:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
 801d6b0:	1c6b      	adds	r3, r5, #1
 801d6b2:	9901      	ldr	r1, [sp, #4]
 801d6b4:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 801d6b8:	9b01      	ldr	r3, [sp, #4]
 801d6ba:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 801d6be:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801d6c2:	805a      	strh	r2, [r3, #2]
 801d6c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d6c6:	f8a3 e006 	strh.w	lr, [r3, #6]
 801d6ca:	809a      	strh	r2, [r3, #4]
 801d6cc:	e75f      	b.n	801d58e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 801d6ce:	9c02      	ldr	r4, [sp, #8]
 801d6d0:	4570      	cmp	r0, lr
 801d6d2:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 801d6d6:	db0d      	blt.n	801d6f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
 801d6d8:	4431      	add	r1, r6
 801d6da:	9b06      	ldr	r3, [sp, #24]
 801d6dc:	445c      	add	r4, fp
 801d6de:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 801d6e2:	b289      	uxth	r1, r1
 801d6e4:	f8a4 00b2 	strh.w	r0, [r4, #178]	; 0xb2
 801d6e8:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801d6ec:	4419      	add	r1, r3
 801d6ee:	f8a4 10ae 	strh.w	r1, [r4, #174]	; 0xae
 801d6f2:	e583      	b.n	801d1fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801d6f4:	445c      	add	r4, fp
 801d6f6:	f8a4 e0b2 	strh.w	lr, [r4, #178]	; 0xb2
 801d6fa:	e79b      	b.n	801d634 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 801d6fc:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	; 0xec
 801d700:	f64f 76ff 	movw	r6, #65535	; 0xffff
 801d704:	1e65      	subs	r5, r4, #1
 801d706:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 801d70a:	b2ad      	uxth	r5, r5
 801d70c:	42b5      	cmp	r5, r6
 801d70e:	d044      	beq.n	801d79a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ca>
 801d710:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801d714:	f9b4 00a6 	ldrsh.w	r0, [r4, #166]	; 0xa6
 801d718:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 801d71c:	4282      	cmp	r2, r0
 801d71e:	f9b4 70a4 	ldrsh.w	r7, [r4, #164]	; 0xa4
 801d722:	d11f      	bne.n	801d764 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 801d724:	f9bd c02e 	ldrsh.w	ip, [sp, #46]	; 0x2e
 801d728:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	; 0xaa
 801d72c:	459c      	cmp	ip, r3
 801d72e:	d119      	bne.n	801d764 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 801d730:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
 801d734:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801d738:	19d8      	adds	r0, r3, r7
 801d73a:	b200      	sxth	r0, r0
 801d73c:	4288      	cmp	r0, r1
 801d73e:	d109      	bne.n	801d754 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x584>
 801d740:	f8ad 7028 	strh.w	r7, [sp, #40]	; 0x28
 801d744:	4413      	add	r3, r2
 801d746:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801d74a:	4629      	mov	r1, r5
 801d74c:	9801      	ldr	r0, [sp, #4]
 801d74e:	f7ff fd2b 	bl	801d1a8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801d752:	e003      	b.n	801d75c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 801d754:	4411      	add	r1, r2
 801d756:	b209      	sxth	r1, r1
 801d758:	42b9      	cmp	r1, r7
 801d75a:	d0f3      	beq.n	801d744 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x574>
 801d75c:	3d01      	subs	r5, #1
 801d75e:	3c08      	subs	r4, #8
 801d760:	b2ad      	uxth	r5, r5
 801d762:	e7d3      	b.n	801d70c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 801d764:	42b9      	cmp	r1, r7
 801d766:	d1f9      	bne.n	801d75c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 801d768:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	; 0x2c
 801d76c:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 801d770:	4299      	cmp	r1, r3
 801d772:	d1f3      	bne.n	801d75c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 801d774:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
 801d778:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801d77c:	181f      	adds	r7, r3, r0
 801d77e:	b23f      	sxth	r7, r7
 801d780:	42ba      	cmp	r2, r7
 801d782:	d105      	bne.n	801d790 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c0>
 801d784:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
 801d788:	440b      	add	r3, r1
 801d78a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801d78e:	e7dc      	b.n	801d74a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x57a>
 801d790:	440a      	add	r2, r1
 801d792:	b212      	sxth	r2, r2
 801d794:	4290      	cmp	r0, r2
 801d796:	d1e1      	bne.n	801d75c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 801d798:	e7f6      	b.n	801d788 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5b8>
 801d79a:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	; 0xec
 801d79e:	2e07      	cmp	r6, #7
 801d7a0:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 801d7a4:	d812      	bhi.n	801d7cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fc>
 801d7a6:	1c75      	adds	r5, r6, #1
 801d7a8:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 801d7ac:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 801d7b0:	f8ab 50ec 	strh.w	r5, [fp, #236]	; 0xec
 801d7b4:	9d01      	ldr	r5, [sp, #4]
 801d7b6:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 801d7ba:	442c      	add	r4, r5
 801d7bc:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 801d7c0:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 801d7c4:	8061      	strh	r1, [r4, #2]
 801d7c6:	80a2      	strh	r2, [r4, #4]
 801d7c8:	80e3      	strh	r3, [r4, #6]
 801d7ca:	e581      	b.n	801d2d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801d7cc:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 801d7d0:	3e01      	subs	r6, #1
 801d7d2:	445c      	add	r4, fp
 801d7d4:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 801d7d8:	f04f 37ff 	mov.w	r7, #4294967295
 801d7dc:	2500      	movs	r5, #0
 801d7de:	9305      	str	r3, [sp, #20]
 801d7e0:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 801d7e4:	1e72      	subs	r2, r6, #1
 801d7e6:	9302      	str	r3, [sp, #8]
 801d7e8:	4691      	mov	r9, r2
 801d7ea:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	; 0xaa
 801d7ee:	9304      	str	r3, [sp, #16]
 801d7f0:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
 801d7f4:	f1b9 3fff 	cmp.w	r9, #4294967295
 801d7f8:	6818      	ldr	r0, [r3, #0]
 801d7fa:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801d7fe:	9207      	str	r2, [sp, #28]
 801d800:	bf16      	itet	ne
 801d802:	9905      	ldrne	r1, [sp, #20]
 801d804:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 801d808:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 801d80c:	9306      	str	r3, [sp, #24]
 801d80e:	f8be 1006 	ldrh.w	r1, [lr, #6]
 801d812:	f8be 8004 	ldrh.w	r8, [lr, #4]
 801d816:	fb18 f801 	smulbb	r8, r8, r1
 801d81a:	6859      	ldr	r1, [r3, #4]
 801d81c:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801d820:	4671      	mov	r1, lr
 801d822:	a80c      	add	r0, sp, #48	; 0x30
 801d824:	f7ff fb6a 	bl	801cefc <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801d828:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 801d82c:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 801d830:	f04f 0c08 	mov.w	ip, #8
 801d834:	9b04      	ldr	r3, [sp, #16]
 801d836:	9a02      	ldr	r2, [sp, #8]
 801d838:	fb10 f001 	smulbb	r0, r0, r1
 801d83c:	fb02 8803 	mla	r8, r2, r3, r8
 801d840:	eba0 0108 	sub.w	r1, r0, r8
 801d844:	fb90 f0fc 	sdiv	r0, r0, ip
 801d848:	4288      	cmp	r0, r1
 801d84a:	dc20      	bgt.n	801d88e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6be>
 801d84c:	4551      	cmp	r1, sl
 801d84e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801d852:	da03      	bge.n	801d85c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x68c>
 801d854:	b1d9      	cbz	r1, 801d88e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6be>
 801d856:	468a      	mov	sl, r1
 801d858:	464f      	mov	r7, r9
 801d85a:	4635      	mov	r5, r6
 801d85c:	f109 39ff 	add.w	r9, r9, #4294967295
 801d860:	f119 0f02 	cmn.w	r9, #2
 801d864:	d1c6      	bne.n	801d7f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x624>
 801d866:	4616      	mov	r6, r2
 801d868:	3201      	adds	r2, #1
 801d86a:	f1a4 0408 	sub.w	r4, r4, #8
 801d86e:	d1b7      	bne.n	801d7e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x610>
 801d870:	9b01      	ldr	r3, [sp, #4]
 801d872:	b2ac      	uxth	r4, r5
 801d874:	00ed      	lsls	r5, r5, #3
 801d876:	1958      	adds	r0, r3, r5
 801d878:	1c7b      	adds	r3, r7, #1
 801d87a:	d10b      	bne.n	801d894 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c4>
 801d87c:	4601      	mov	r1, r0
 801d87e:	9803      	ldr	r0, [sp, #12]
 801d880:	f7ff fb3c 	bl	801cefc <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801d884:	4621      	mov	r1, r4
 801d886:	9801      	ldr	r0, [sp, #4]
 801d888:	f7ff fc8e 	bl	801d1a8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801d88c:	e4b6      	b.n	801d1fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801d88e:	464f      	mov	r7, r9
 801d890:	4635      	mov	r5, r6
 801d892:	e7ed      	b.n	801d870 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6a0>
 801d894:	9b01      	ldr	r3, [sp, #4]
 801d896:	00ff      	lsls	r7, r7, #3
 801d898:	445d      	add	r5, fp
 801d89a:	19d9      	adds	r1, r3, r7
 801d89c:	445f      	add	r7, fp
 801d89e:	f7ff fb2d 	bl	801cefc <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801d8a2:	9b03      	ldr	r3, [sp, #12]
 801d8a4:	cb03      	ldmia	r3!, {r0, r1}
 801d8a6:	9b03      	ldr	r3, [sp, #12]
 801d8a8:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
 801d8ac:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 801d8b0:	f855 0fac 	ldr.w	r0, [r5, #172]!
 801d8b4:	6869      	ldr	r1, [r5, #4]
 801d8b6:	c303      	stmia	r3!, {r0, r1}
 801d8b8:	e7e4      	b.n	801d884 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6b4>
 801d8ba:	bf00      	nop

0801d8bc <_ZN8touchgfx11Application15drawCachedAreasEv>:
 801d8bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d8c0:	f500 7698 	add.w	r6, r0, #304	; 0x130
 801d8c4:	b09b      	sub	sp, #108	; 0x6c
 801d8c6:	4604      	mov	r4, r0
 801d8c8:	4630      	mov	r0, r6
 801d8ca:	f7fc fabe 	bl	8019e4a <_ZNK8touchgfx4Rect7isEmptyEv>
 801d8ce:	4605      	mov	r5, r0
 801d8d0:	b948      	cbnz	r0, 801d8e6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a>
 801d8d2:	6823      	ldr	r3, [r4, #0]
 801d8d4:	4620      	mov	r0, r4
 801d8d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d8d8:	e896 0006 	ldmia.w	r6, {r1, r2}
 801d8dc:	4798      	blx	r3
 801d8de:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 801d8e2:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
 801d8e6:	4bc5      	ldr	r3, [pc, #788]	; (801dbfc <_ZN8touchgfx11Application15drawCachedAreasEv+0x340>)
 801d8e8:	681b      	ldr	r3, [r3, #0]
 801d8ea:	2b00      	cmp	r3, #0
 801d8ec:	d03f      	beq.n	801d96e <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 801d8ee:	4dc4      	ldr	r5, [pc, #784]	; (801dc00 <_ZN8touchgfx11Application15drawCachedAreasEv+0x344>)
 801d8f0:	4628      	mov	r0, r5
 801d8f2:	f7fc faaa 	bl	8019e4a <_ZNK8touchgfx4Rect7isEmptyEv>
 801d8f6:	4606      	mov	r6, r0
 801d8f8:	2800      	cmp	r0, #0
 801d8fa:	d138      	bne.n	801d96e <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 801d8fc:	4628      	mov	r0, r5
 801d8fe:	f7ff f99b 	bl	801cc38 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801d902:	6823      	ldr	r3, [r4, #0]
 801d904:	6829      	ldr	r1, [r5, #0]
 801d906:	4620      	mov	r0, r4
 801d908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d90a:	686a      	ldr	r2, [r5, #4]
 801d90c:	4798      	blx	r3
 801d90e:	802e      	strh	r6, [r5, #0]
 801d910:	806e      	strh	r6, [r5, #2]
 801d912:	80ae      	strh	r6, [r5, #4]
 801d914:	80ee      	strh	r6, [r5, #6]
 801d916:	f10d 0824 	add.w	r8, sp, #36	; 0x24
 801d91a:	4dba      	ldr	r5, [pc, #744]	; (801dc04 <_ZN8touchgfx11Application15drawCachedAreasEv+0x348>)
 801d91c:	4640      	mov	r0, r8
 801d91e:	f7ff fbe7 	bl	801d0f0 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801d922:	882e      	ldrh	r6, [r5, #0]
 801d924:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 801d928:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 801d92c:	4633      	mov	r3, r6
 801d92e:	42bb      	cmp	r3, r7
 801d930:	d224      	bcs.n	801d97c <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 801d932:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 801d936:	2907      	cmp	r1, #7
 801d938:	d816      	bhi.n	801d968 <_ZN8touchgfx11Application15drawCachedAreasEv+0xac>
 801d93a:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 801d93e:	f930 9033 	ldrsh.w	r9, [r0, r3, lsl #3]
 801d942:	f9b2 a002 	ldrsh.w	sl, [r2, #2]
 801d946:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 801d94a:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 801d94e:	1c4a      	adds	r2, r1, #1
 801d950:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
 801d954:	eb08 02c1 	add.w	r2, r8, r1, lsl #3
 801d958:	f828 9031 	strh.w	r9, [r8, r1, lsl #3]
 801d95c:	f8a2 a002 	strh.w	sl, [r2, #2]
 801d960:	f8a2 e004 	strh.w	lr, [r2, #4]
 801d964:	f8a2 c006 	strh.w	ip, [r2, #6]
 801d968:	3301      	adds	r3, #1
 801d96a:	b29b      	uxth	r3, r3
 801d96c:	e7df      	b.n	801d92e <_ZN8touchgfx11Application15drawCachedAreasEv+0x72>
 801d96e:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 801d972:	2b00      	cmp	r3, #0
 801d974:	d1cf      	bne.n	801d916 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5a>
 801d976:	b01b      	add	sp, #108	; 0x6c
 801d978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d97c:	f8b4 312e 	ldrh.w	r3, [r4, #302]	; 0x12e
 801d980:	42b3      	cmp	r3, r6
 801d982:	d90c      	bls.n	801d99e <_ZN8touchgfx11Application15drawCachedAreasEv+0xe2>
 801d984:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801d988:	6822      	ldr	r2, [r4, #0]
 801d98a:	3601      	adds	r6, #1
 801d98c:	4620      	mov	r0, r4
 801d98e:	6c17      	ldr	r7, [r2, #64]	; 0x40
 801d990:	f8d3 10ee 	ldr.w	r1, [r3, #238]	; 0xee
 801d994:	b2b6      	uxth	r6, r6
 801d996:	f8d3 20f2 	ldr.w	r2, [r3, #242]	; 0xf2
 801d99a:	47b8      	blx	r7
 801d99c:	e7ee      	b.n	801d97c <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 801d99e:	4a9a      	ldr	r2, [pc, #616]	; (801dc08 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 801d9a0:	6813      	ldr	r3, [r2, #0]
 801d9a2:	4691      	mov	r9, r2
 801d9a4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801d9a8:	2b01      	cmp	r3, #1
 801d9aa:	f040 80e0 	bne.w	801db6e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b2>
 801d9ae:	8829      	ldrh	r1, [r5, #0]
 801d9b0:	2600      	movs	r6, #0
 801d9b2:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 801d9b6:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
 801d9ba:	33ae      	adds	r3, #174	; 0xae
 801d9bc:	428f      	cmp	r7, r1
 801d9be:	f103 0308 	add.w	r3, r3, #8
 801d9c2:	dd0a      	ble.n	801d9da <_ZN8touchgfx11Application15drawCachedAreasEv+0x11e>
 801d9c4:	f833 2c04 	ldrh.w	r2, [r3, #-4]
 801d9c8:	3101      	adds	r1, #1
 801d9ca:	f833 0c08 	ldrh.w	r0, [r3, #-8]
 801d9ce:	4402      	add	r2, r0
 801d9d0:	b212      	sxth	r2, r2
 801d9d2:	4296      	cmp	r6, r2
 801d9d4:	bfb8      	it	lt
 801d9d6:	4616      	movlt	r6, r2
 801d9d8:	e7f0      	b.n	801d9bc <_ZN8touchgfx11Application15drawCachedAreasEv+0x100>
 801d9da:	4b8c      	ldr	r3, [pc, #560]	; (801dc0c <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 801d9dc:	f8df 9228 	ldr.w	r9, [pc, #552]	; 801dc08 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>
 801d9e0:	881b      	ldrh	r3, [r3, #0]
 801d9e2:	2b0f      	cmp	r3, #15
 801d9e4:	bf8c      	ite	hi
 801d9e6:	ea4f 0bd3 	movhi.w	fp, r3, lsr #3
 801d9ea:	f04f 0b01 	movls.w	fp, #1
 801d9ee:	2300      	movs	r3, #0
 801d9f0:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801d9f4:	f8bd 7016 	ldrh.w	r7, [sp, #22]
 801d9f8:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 801d9fc:	4b82      	ldr	r3, [pc, #520]	; (801dc08 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 801d9fe:	4438      	add	r0, r7
 801da00:	b207      	sxth	r7, r0
 801da02:	6818      	ldr	r0, [r3, #0]
 801da04:	42b7      	cmp	r7, r6
 801da06:	6803      	ldr	r3, [r0, #0]
 801da08:	f280 8083 	bge.w	801db12 <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
 801da0c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801da10:	4798      	blx	r3
 801da12:	eb07 030b 	add.w	r3, r7, fp
 801da16:	4298      	cmp	r0, r3
 801da18:	da07      	bge.n	801da2a <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 801da1a:	42b0      	cmp	r0, r6
 801da1c:	da05      	bge.n	801da2a <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 801da1e:	4287      	cmp	r7, r0
 801da20:	dd6c      	ble.n	801dafc <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 801da22:	2f00      	cmp	r7, #0
 801da24:	dd6a      	ble.n	801dafc <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 801da26:	4630      	mov	r0, r6
 801da28:	e004      	b.n	801da34 <_ZN8touchgfx11Application15drawCachedAreasEv+0x178>
 801da2a:	4287      	cmp	r7, r0
 801da2c:	dcfb      	bgt.n	801da26 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16a>
 801da2e:	42b0      	cmp	r0, r6
 801da30:	bfa8      	it	ge
 801da32:	4630      	movge	r0, r6
 801da34:	4b76      	ldr	r3, [pc, #472]	; (801dc10 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 801da36:	1bc0      	subs	r0, r0, r7
 801da38:	2200      	movs	r2, #0
 801da3a:	f8ad 7016 	strh.w	r7, [sp, #22]
 801da3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801da42:	882f      	ldrh	r7, [r5, #0]
 801da44:	f8ad 2014 	strh.w	r2, [sp, #20]
 801da48:	f8ad 3018 	strh.w	r3, [sp, #24]
 801da4c:	f8ad 001a 	strh.w	r0, [sp, #26]
 801da50:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 801da54:	42bb      	cmp	r3, r7
 801da56:	d9cd      	bls.n	801d9f4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x138>
 801da58:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 801da5c:	ab07      	add	r3, sp, #28
 801da5e:	f852 0fac 	ldr.w	r0, [r2, #172]!
 801da62:	6851      	ldr	r1, [r2, #4]
 801da64:	c303      	stmia	r3!, {r0, r1}
 801da66:	a905      	add	r1, sp, #20
 801da68:	a807      	add	r0, sp, #28
 801da6a:	f7ff f9af 	bl	801cdcc <_ZNK8touchgfx4Rect9intersectERKS0_>
 801da6e:	2800      	cmp	r0, #0
 801da70:	d04c      	beq.n	801db0c <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
 801da72:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 801da76:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 801da7a:	f8bd a020 	ldrh.w	sl, [sp, #32]
 801da7e:	4686      	mov	lr, r0
 801da80:	4290      	cmp	r0, r2
 801da82:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 801da86:	4450      	add	r0, sl
 801da88:	f8bd a018 	ldrh.w	sl, [sp, #24]
 801da8c:	bfb8      	it	lt
 801da8e:	4696      	movlt	lr, r2
 801da90:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801da94:	4452      	add	r2, sl
 801da96:	b280      	uxth	r0, r0
 801da98:	4299      	cmp	r1, r3
 801da9a:	468c      	mov	ip, r1
 801da9c:	b292      	uxth	r2, r2
 801da9e:	9302      	str	r3, [sp, #8]
 801daa0:	bfb8      	it	lt
 801daa2:	469c      	movlt	ip, r3
 801daa4:	b203      	sxth	r3, r0
 801daa6:	fa0f fa82 	sxth.w	sl, r2
 801daaa:	f8ad e01c 	strh.w	lr, [sp, #28]
 801daae:	f8ad c01e 	strh.w	ip, [sp, #30]
 801dab2:	4553      	cmp	r3, sl
 801dab4:	bfb8      	it	lt
 801dab6:	4602      	movlt	r2, r0
 801dab8:	9b02      	ldr	r3, [sp, #8]
 801daba:	eba2 020e 	sub.w	r2, r2, lr
 801dabe:	f8ad 2020 	strh.w	r2, [sp, #32]
 801dac2:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801dac6:	4411      	add	r1, r2
 801dac8:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801dacc:	4413      	add	r3, r2
 801dace:	b289      	uxth	r1, r1
 801dad0:	b29b      	uxth	r3, r3
 801dad2:	b208      	sxth	r0, r1
 801dad4:	b21a      	sxth	r2, r3
 801dad6:	4290      	cmp	r0, r2
 801dad8:	bfb8      	it	lt
 801dada:	460b      	movlt	r3, r1
 801dadc:	eba3 030c 	sub.w	r3, r3, ip
 801dae0:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801dae4:	a807      	add	r0, sp, #28
 801dae6:	f7fc f9b0 	bl	8019e4a <_ZNK8touchgfx4Rect7isEmptyEv>
 801daea:	b920      	cbnz	r0, 801daf6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
 801daec:	6823      	ldr	r3, [r4, #0]
 801daee:	a907      	add	r1, sp, #28
 801daf0:	4620      	mov	r0, r4
 801daf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801daf4:	4798      	blx	r3
 801daf6:	3701      	adds	r7, #1
 801daf8:	b2bf      	uxth	r7, r7
 801dafa:	e7a9      	b.n	801da50 <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
 801dafc:	f8d9 0000 	ldr.w	r0, [r9]
 801db00:	2101      	movs	r1, #1
 801db02:	6803      	ldr	r3, [r0, #0]
 801db04:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801db08:	4798      	blx	r3
 801db0a:	e773      	b.n	801d9f4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x138>
 801db0c:	e9cd 0007 	strd	r0, r0, [sp, #28]
 801db10:	e7e8      	b.n	801dae4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
 801db12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801db14:	4798      	blx	r3
 801db16:	4b3f      	ldr	r3, [pc, #252]	; (801dc14 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 801db18:	781b      	ldrb	r3, [r3, #0]
 801db1a:	2b00      	cmp	r3, #0
 801db1c:	f43f af2b 	beq.w	801d976 <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 801db20:	2300      	movs	r3, #0
 801db22:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 801db26:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
 801db2a:	882b      	ldrh	r3, [r5, #0]
 801db2c:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 801db30:	42ab      	cmp	r3, r5
 801db32:	f4bf af20 	bcs.w	801d976 <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 801db36:	f8b4 112e 	ldrh.w	r1, [r4, #302]	; 0x12e
 801db3a:	2907      	cmp	r1, #7
 801db3c:	d814      	bhi.n	801db68 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ac>
 801db3e:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
 801db42:	f938 e033 	ldrsh.w	lr, [r8, r3, lsl #3]
 801db46:	f9b2 c002 	ldrsh.w	ip, [r2, #2]
 801db4a:	f9b2 7004 	ldrsh.w	r7, [r2, #4]
 801db4e:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 801db52:	1c4a      	adds	r2, r1, #1
 801db54:	f8a4 212e 	strh.w	r2, [r4, #302]	; 0x12e
 801db58:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 801db5c:	f820 e031 	strh.w	lr, [r0, r1, lsl #3]
 801db60:	f8a2 c002 	strh.w	ip, [r2, #2]
 801db64:	8097      	strh	r7, [r2, #4]
 801db66:	80d6      	strh	r6, [r2, #6]
 801db68:	3301      	adds	r3, #1
 801db6a:	b29b      	uxth	r3, r3
 801db6c:	e7e0      	b.n	801db30 <_ZN8touchgfx11Application15drawCachedAreasEv+0x274>
 801db6e:	2b02      	cmp	r3, #2
 801db70:	f040 8133 	bne.w	801ddda <_ZN8touchgfx11Application15drawCachedAreasEv+0x51e>
 801db74:	4b28      	ldr	r3, [pc, #160]	; (801dc18 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 801db76:	f104 0aac 	add.w	sl, r4, #172	; 0xac
 801db7a:	781b      	ldrb	r3, [r3, #0]
 801db7c:	2b01      	cmp	r3, #1
 801db7e:	f000 8098 	beq.w	801dcb2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 801db82:	882a      	ldrh	r2, [r5, #0]
 801db84:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	; 0xec
 801db88:	3201      	adds	r2, #1
 801db8a:	b292      	uxth	r2, r2
 801db8c:	2900      	cmp	r1, #0
 801db8e:	d0c2      	beq.n	801db16 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801db90:	f8b4 60ae 	ldrh.w	r6, [r4, #174]	; 0xae
 801db94:	4694      	mov	ip, r2
 801db96:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
 801db9a:	f04f 0900 	mov.w	r9, #0
 801db9e:	441e      	add	r6, r3
 801dba0:	b236      	sxth	r6, r6
 801dba2:	fa1f f38c 	uxth.w	r3, ip
 801dba6:	ea4f 07c9 	mov.w	r7, r9, lsl #3
 801dbaa:	4299      	cmp	r1, r3
 801dbac:	f240 80be 	bls.w	801dd2c <_ZN8touchgfx11Application15drawCachedAreasEv+0x470>
 801dbb0:	4427      	add	r7, r4
 801dbb2:	eb04 0ecc 	add.w	lr, r4, ip, lsl #3
 801dbb6:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
 801dbba:	f9be 00ae 	ldrsh.w	r0, [lr, #174]	; 0xae
 801dbbe:	4283      	cmp	r3, r0
 801dbc0:	f340 80a0 	ble.w	801dd04 <_ZN8touchgfx11Application15drawCachedAreasEv+0x448>
 801dbc4:	f8be 60b2 	ldrh.w	r6, [lr, #178]	; 0xb2
 801dbc8:	46e1      	mov	r9, ip
 801dbca:	4406      	add	r6, r0
 801dbcc:	b236      	sxth	r6, r6
 801dbce:	429e      	cmp	r6, r3
 801dbd0:	bfa8      	it	ge
 801dbd2:	461e      	movge	r6, r3
 801dbd4:	f10c 0c01 	add.w	ip, ip, #1
 801dbd8:	e7e3      	b.n	801dba2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2e6>
 801dbda:	d10a      	bne.n	801dbf2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x336>
 801dbdc:	4562      	cmp	r2, ip
 801dbde:	f9b6 00b2 	ldrsh.w	r0, [r6, #178]	; 0xb2
 801dbe2:	f9be 10b2 	ldrsh.w	r1, [lr, #178]	; 0xb2
 801dbe6:	bfb8      	it	lt
 801dbe8:	4662      	movlt	r2, ip
 801dbea:	4288      	cmp	r0, r1
 801dbec:	bfb8      	it	lt
 801dbee:	461f      	movlt	r7, r3
 801dbf0:	e086      	b.n	801dd00 <_ZN8touchgfx11Application15drawCachedAreasEv+0x444>
 801dbf2:	428a      	cmp	r2, r1
 801dbf4:	bfb8      	it	lt
 801dbf6:	460a      	movlt	r2, r1
 801dbf8:	e082      	b.n	801dd00 <_ZN8touchgfx11Application15drawCachedAreasEv+0x444>
 801dbfa:	bf00      	nop
 801dbfc:	24007024 	.word	0x24007024
 801dc00:	24007030 	.word	0x24007030
 801dc04:	24000054 	.word	0x24000054
 801dc08:	24006fec 	.word	0x24006fec
 801dc0c:	24006fe2 	.word	0x24006fe2
 801dc10:	24006fe0 	.word	0x24006fe0
 801dc14:	24006fea 	.word	0x24006fea
 801dc18:	24006fe4 	.word	0x24006fe4
 801dc1c:	19a1      	adds	r1, r4, r6
 801dc1e:	ab07      	add	r3, sp, #28
 801dc20:	f851 0fac 	ldr.w	r0, [r1, #172]!
 801dc24:	6849      	ldr	r1, [r1, #4]
 801dc26:	c303      	stmia	r3!, {r0, r1}
 801dc28:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801dc2c:	a807      	add	r0, sp, #28
 801dc2e:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801dc32:	2b13      	cmp	r3, #19
 801dc34:	440b      	add	r3, r1
 801dc36:	bfd8      	it	le
 801dc38:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 801dc3c:	1a9b      	subs	r3, r3, r2
 801dc3e:	f8ad 201c 	strh.w	r2, [sp, #28]
 801dc42:	f8ad 3020 	strh.w	r3, [sp, #32]
 801dc46:	f7ff f811 	bl	801cc6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801dc4a:	a807      	add	r0, sp, #28
 801dc4c:	f7fc f8fd 	bl	8019e4a <_ZNK8touchgfx4Rect7isEmptyEv>
 801dc50:	bb78      	cbnz	r0, 801dcb2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 801dc52:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801dc56:	4426      	add	r6, r4
 801dc58:	f8d9 0000 	ldr.w	r0, [r9]
 801dc5c:	f1bc 0f14 	cmp.w	ip, #20
 801dc60:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801dc64:	f8d0 e000 	ldr.w	lr, [r0]
 801dc68:	bfa8      	it	ge
 801dc6a:	f04f 0c14 	movge.w	ip, #20
 801dc6e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801dc72:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801dc76:	fa1f fc8c 	uxth.w	ip, ip
 801dc7a:	f8cd c000 	str.w	ip, [sp]
 801dc7e:	f8de b090 	ldr.w	fp, [lr, #144]	; 0x90
 801dc82:	47d8      	blx	fp
 801dc84:	4683      	mov	fp, r0
 801dc86:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801dc8a:	a807      	add	r0, sp, #28
 801dc8c:	f7fe ffd4 	bl	801cc38 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801dc90:	6823      	ldr	r3, [r4, #0]
 801dc92:	4620      	mov	r0, r4
 801dc94:	a907      	add	r1, sp, #28
 801dc96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801dc98:	4798      	blx	r3
 801dc9a:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	; 0xb0
 801dc9e:	eba0 000b 	sub.w	r0, r0, fp
 801dca2:	b200      	sxth	r0, r0
 801dca4:	f8a6 00b0 	strh.w	r0, [r6, #176]	; 0xb0
 801dca8:	b918      	cbnz	r0, 801dcb2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 801dcaa:	b2b9      	uxth	r1, r7
 801dcac:	4650      	mov	r0, sl
 801dcae:	f7ff fa7b 	bl	801d1a8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801dcb2:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	; 0xec
 801dcb6:	f1bb 0f00 	cmp.w	fp, #0
 801dcba:	f43f af2c 	beq.w	801db16 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801dcbe:	882b      	ldrh	r3, [r5, #0]
 801dcc0:	2700      	movs	r7, #0
 801dcc2:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	; 0xac
 801dcc6:	3301      	adds	r3, #1
 801dcc8:	b29b      	uxth	r3, r3
 801dcca:	b299      	uxth	r1, r3
 801dccc:	00fe      	lsls	r6, r7, #3
 801dcce:	458b      	cmp	fp, r1
 801dcd0:	d9a4      	bls.n	801dc1c <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>
 801dcd2:	4426      	add	r6, r4
 801dcd4:	eb04 0ec3 	add.w	lr, r4, r3, lsl #3
 801dcd8:	f8b6 10ac 	ldrh.w	r1, [r6, #172]	; 0xac
 801dcdc:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	; 0xb0
 801dce0:	f9be c0ac 	ldrsh.w	ip, [lr, #172]	; 0xac
 801dce4:	4408      	add	r0, r1
 801dce6:	f8be 10b0 	ldrh.w	r1, [lr, #176]	; 0xb0
 801dcea:	4461      	add	r1, ip
 801dcec:	b200      	sxth	r0, r0
 801dcee:	b209      	sxth	r1, r1
 801dcf0:	4288      	cmp	r0, r1
 801dcf2:	f6bf af72 	bge.w	801dbda <_ZN8touchgfx11Application15drawCachedAreasEv+0x31e>
 801dcf6:	4584      	cmp	ip, r0
 801dcf8:	4662      	mov	r2, ip
 801dcfa:	461f      	mov	r7, r3
 801dcfc:	bfb8      	it	lt
 801dcfe:	4602      	movlt	r2, r0
 801dd00:	3301      	adds	r3, #1
 801dd02:	e7e2      	b.n	801dcca <_ZN8touchgfx11Application15drawCachedAreasEv+0x40e>
 801dd04:	d10e      	bne.n	801dd24 <_ZN8touchgfx11Application15drawCachedAreasEv+0x468>
 801dd06:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	; 0xb0
 801dd0a:	f8be e0b2 	ldrh.w	lr, [lr, #178]	; 0xb2
 801dd0e:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	; 0xb0
 801dd12:	4473      	add	r3, lr
 801dd14:	b21b      	sxth	r3, r3
 801dd16:	429e      	cmp	r6, r3
 801dd18:	bfa8      	it	ge
 801dd1a:	461e      	movge	r6, r3
 801dd1c:	4287      	cmp	r7, r0
 801dd1e:	bfb8      	it	lt
 801dd20:	46e1      	movlt	r9, ip
 801dd22:	e757      	b.n	801dbd4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 801dd24:	4286      	cmp	r6, r0
 801dd26:	bfa8      	it	ge
 801dd28:	4606      	movge	r6, r0
 801dd2a:	e753      	b.n	801dbd4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 801dd2c:	eb0a 0007 	add.w	r0, sl, r7
 801dd30:	4427      	add	r7, r4
 801dd32:	f9b7 b0b2 	ldrsh.w	fp, [r7, #178]	; 0xb2
 801dd36:	f1bb 0f13 	cmp.w	fp, #19
 801dd3a:	bfdc      	itt	le
 801dd3c:	f8b7 60ae 	ldrhle.w	r6, [r7, #174]	; 0xae
 801dd40:	445e      	addle	r6, fp
 801dd42:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801dd46:	bfd8      	it	le
 801dd48:	b236      	sxthle	r6, r6
 801dd4a:	f7fc f87e 	bl	8019e4a <_ZNK8touchgfx4Rect7isEmptyEv>
 801dd4e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801dd52:	2800      	cmp	r0, #0
 801dd54:	f47f af1a 	bne.w	801db8c <_ZN8touchgfx11Application15drawCachedAreasEv+0x2d0>
 801dd58:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
 801dd5c:	fa1f fb8b 	uxth.w	fp, fp
 801dd60:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801dd64:	1ab6      	subs	r6, r6, r2
 801dd66:	4829      	ldr	r0, [pc, #164]	; (801de0c <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>)
 801dd68:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	; 0xac
 801dd6c:	2e14      	cmp	r6, #20
 801dd6e:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
 801dd72:	6800      	ldr	r0, [r0, #0]
 801dd74:	bfa8      	it	ge
 801dd76:	2614      	movge	r6, #20
 801dd78:	f8ad 101c 	strh.w	r1, [sp, #28]
 801dd7c:	f8ad 201e 	strh.w	r2, [sp, #30]
 801dd80:	b289      	uxth	r1, r1
 801dd82:	f8ad 3020 	strh.w	r3, [sp, #32]
 801dd86:	b2b6      	uxth	r6, r6
 801dd88:	f8d0 c000 	ldr.w	ip, [r0]
 801dd8c:	b292      	uxth	r2, r2
 801dd8e:	455e      	cmp	r6, fp
 801dd90:	bf94      	ite	ls
 801dd92:	9600      	strls	r6, [sp, #0]
 801dd94:	f8cd b000 	strhi.w	fp, [sp]
 801dd98:	b29b      	uxth	r3, r3
 801dd9a:	f8dc 6090 	ldr.w	r6, [ip, #144]	; 0x90
 801dd9e:	47b0      	blx	r6
 801dda0:	6823      	ldr	r3, [r4, #0]
 801dda2:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801dda6:	a907      	add	r1, sp, #28
 801dda8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801ddaa:	4620      	mov	r0, r4
 801ddac:	4798      	blx	r3
 801ddae:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801ddb2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801ddb6:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 801ddba:	1a5b      	subs	r3, r3, r1
 801ddbc:	440a      	add	r2, r1
 801ddbe:	b21b      	sxth	r3, r3
 801ddc0:	f8a7 20ae 	strh.w	r2, [r7, #174]	; 0xae
 801ddc4:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801ddc8:	2b00      	cmp	r3, #0
 801ddca:	f47f aeda 	bne.w	801db82 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c6>
 801ddce:	fa1f f189 	uxth.w	r1, r9
 801ddd2:	4650      	mov	r0, sl
 801ddd4:	f7ff f9e8 	bl	801d1a8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801ddd8:	e6d3      	b.n	801db82 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c6>
 801ddda:	882e      	ldrh	r6, [r5, #0]
 801dddc:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 801dde0:	42b3      	cmp	r3, r6
 801dde2:	f67f ae98 	bls.w	801db16 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801dde6:	eb04 02c6 	add.w	r2, r4, r6, lsl #3
 801ddea:	ab07      	add	r3, sp, #28
 801ddec:	f852 0fac 	ldr.w	r0, [r2, #172]!
 801ddf0:	6851      	ldr	r1, [r2, #4]
 801ddf2:	c303      	stmia	r3!, {r0, r1}
 801ddf4:	a807      	add	r0, sp, #28
 801ddf6:	f7fc f828 	bl	8019e4a <_ZNK8touchgfx4Rect7isEmptyEv>
 801ddfa:	b920      	cbnz	r0, 801de06 <_ZN8touchgfx11Application15drawCachedAreasEv+0x54a>
 801ddfc:	6823      	ldr	r3, [r4, #0]
 801ddfe:	a907      	add	r1, sp, #28
 801de00:	4620      	mov	r0, r4
 801de02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801de04:	4798      	blx	r3
 801de06:	3601      	adds	r6, #1
 801de08:	b2b6      	uxth	r6, r6
 801de0a:	e7e7      	b.n	801dddc <_ZN8touchgfx11Application15drawCachedAreasEv+0x520>
 801de0c:	24006fec 	.word	0x24006fec

0801de10 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801de10:	4b03      	ldr	r3, [pc, #12]	; (801de20 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801de12:	2200      	movs	r2, #0
 801de14:	801a      	strh	r2, [r3, #0]
 801de16:	805a      	strh	r2, [r3, #2]
 801de18:	809a      	strh	r2, [r3, #4]
 801de1a:	80da      	strh	r2, [r3, #6]
 801de1c:	4770      	bx	lr
 801de1e:	bf00      	nop
 801de20:	24007030 	.word	0x24007030

0801de24 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801de24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801de28:	b09d      	sub	sp, #116	; 0x74
 801de2a:	4606      	mov	r6, r0
 801de2c:	4614      	mov	r4, r2
 801de2e:	468a      	mov	sl, r1
 801de30:	a803      	add	r0, sp, #12
 801de32:	461d      	mov	r5, r3
 801de34:	f000 fd72 	bl	801e91c <_ZN8touchgfx12TextProviderC1Ev>
 801de38:	6833      	ldr	r3, [r6, #0]
 801de3a:	4630      	mov	r0, r6
 801de3c:	f242 0b0b 	movw	fp, #8203	; 0x200b
 801de40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801de42:	4798      	blx	r3
 801de44:	6833      	ldr	r3, [r6, #0]
 801de46:	4607      	mov	r7, r0
 801de48:	4630      	mov	r0, r6
 801de4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801de4c:	4798      	blx	r3
 801de4e:	462a      	mov	r2, r5
 801de50:	2500      	movs	r5, #0
 801de52:	4621      	mov	r1, r4
 801de54:	9000      	str	r0, [sp, #0]
 801de56:	463b      	mov	r3, r7
 801de58:	462c      	mov	r4, r5
 801de5a:	46a9      	mov	r9, r5
 801de5c:	46a8      	mov	r8, r5
 801de5e:	a803      	add	r0, sp, #12
 801de60:	f000 fdb7 	bl	801e9d2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801de64:	2300      	movs	r3, #0
 801de66:	9302      	str	r3, [sp, #8]
 801de68:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801de6c:	429c      	cmp	r4, r3
 801de6e:	d002      	beq.n	801de76 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 801de70:	455c      	cmp	r4, fp
 801de72:	bf18      	it	ne
 801de74:	4625      	movne	r5, r4
 801de76:	ab02      	add	r3, sp, #8
 801de78:	4632      	mov	r2, r6
 801de7a:	4651      	mov	r1, sl
 801de7c:	a803      	add	r0, sp, #12
 801de7e:	f001 f8ad 	bl	801efdc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801de82:	4604      	mov	r4, r0
 801de84:	b108      	cbz	r0, 801de8a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 801de86:	280a      	cmp	r0, #10
 801de88:	d10a      	bne.n	801dea0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 801de8a:	45c1      	cmp	r9, r8
 801de8c:	bf38      	it	cc
 801de8e:	46c1      	movcc	r9, r8
 801de90:	f04f 0800 	mov.w	r8, #0
 801de94:	2c00      	cmp	r4, #0
 801de96:	d1e5      	bne.n	801de64 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801de98:	4648      	mov	r0, r9
 801de9a:	b01d      	add	sp, #116	; 0x74
 801de9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dea0:	9a02      	ldr	r2, [sp, #8]
 801dea2:	2a00      	cmp	r2, #0
 801dea4:	d0de      	beq.n	801de64 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801dea6:	7b57      	ldrb	r7, [r2, #13]
 801dea8:	4629      	mov	r1, r5
 801deaa:	6833      	ldr	r3, [r6, #0]
 801deac:	007f      	lsls	r7, r7, #1
 801deae:	8894      	ldrh	r4, [r2, #4]
 801deb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801deb2:	f407 7080 	and.w	r0, r7, #256	; 0x100
 801deb6:	7a97      	ldrb	r7, [r2, #10]
 801deb8:	4307      	orrs	r7, r0
 801deba:	4630      	mov	r0, r6
 801debc:	4798      	blx	r3
 801debe:	4438      	add	r0, r7
 801dec0:	4480      	add	r8, r0
 801dec2:	fa1f f888 	uxth.w	r8, r8
 801dec6:	e7e5      	b.n	801de94 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0801dec8 <_ZNK8touchgfx4Font12getCharWidthEt>:
 801dec8:	b508      	push	{r3, lr}
 801deca:	6803      	ldr	r3, [r0, #0]
 801decc:	68db      	ldr	r3, [r3, #12]
 801dece:	4798      	blx	r3
 801ded0:	b128      	cbz	r0, 801dede <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801ded2:	7b43      	ldrb	r3, [r0, #13]
 801ded4:	7a80      	ldrb	r0, [r0, #10]
 801ded6:	005b      	lsls	r3, r3, #1
 801ded8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801dedc:	4318      	orrs	r0, r3
 801dede:	bd08      	pop	{r3, pc}

0801dee0 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801dee0:	b40e      	push	{r1, r2, r3}
 801dee2:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dee4:	b09e      	sub	sp, #120	; 0x78
 801dee6:	4605      	mov	r5, r0
 801dee8:	ab23      	add	r3, sp, #140	; 0x8c
 801deea:	a805      	add	r0, sp, #20
 801deec:	f853 4b04 	ldr.w	r4, [r3], #4
 801def0:	9303      	str	r3, [sp, #12]
 801def2:	f000 fd13 	bl	801e91c <_ZN8touchgfx12TextProviderC1Ev>
 801def6:	682b      	ldr	r3, [r5, #0]
 801def8:	4628      	mov	r0, r5
 801defa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801defc:	4798      	blx	r3
 801defe:	682b      	ldr	r3, [r5, #0]
 801df00:	4606      	mov	r6, r0
 801df02:	4628      	mov	r0, r5
 801df04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801df06:	4798      	blx	r3
 801df08:	4633      	mov	r3, r6
 801df0a:	4621      	mov	r1, r4
 801df0c:	ae1e      	add	r6, sp, #120	; 0x78
 801df0e:	2400      	movs	r4, #0
 801df10:	9000      	str	r0, [sp, #0]
 801df12:	9a03      	ldr	r2, [sp, #12]
 801df14:	a805      	add	r0, sp, #20
 801df16:	f000 fd5c 	bl	801e9d2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801df1a:	f846 4d68 	str.w	r4, [r6, #-104]!
 801df1e:	462a      	mov	r2, r5
 801df20:	4633      	mov	r3, r6
 801df22:	4621      	mov	r1, r4
 801df24:	a805      	add	r0, sp, #20
 801df26:	f001 f859 	bl	801efdc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801df2a:	b300      	cbz	r0, 801df6e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 801df2c:	280a      	cmp	r0, #10
 801df2e:	d01a      	beq.n	801df66 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801df30:	9f04      	ldr	r7, [sp, #16]
 801df32:	b1c7      	cbz	r7, 801df66 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801df34:	7b78      	ldrb	r0, [r7, #13]
 801df36:	7a3b      	ldrb	r3, [r7, #8]
 801df38:	00c1      	lsls	r1, r0, #3
 801df3a:	88ea      	ldrh	r2, [r5, #6]
 801df3c:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801df40:	4319      	orrs	r1, r3
 801df42:	0643      	lsls	r3, r0, #25
 801df44:	ea4f 1000 	mov.w	r0, r0, lsl #4
 801df48:	bf48      	it	mi
 801df4a:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 801df4e:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801df52:	bf48      	it	mi
 801df54:	b219      	sxthmi	r1, r3
 801df56:	79fb      	ldrb	r3, [r7, #7]
 801df58:	4303      	orrs	r3, r0
 801df5a:	4413      	add	r3, r2
 801df5c:	1a5b      	subs	r3, r3, r1
 801df5e:	b21b      	sxth	r3, r3
 801df60:	429c      	cmp	r4, r3
 801df62:	bfb8      	it	lt
 801df64:	461c      	movlt	r4, r3
 801df66:	4633      	mov	r3, r6
 801df68:	462a      	mov	r2, r5
 801df6a:	2100      	movs	r1, #0
 801df6c:	e7da      	b.n	801df24 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 801df6e:	b2a0      	uxth	r0, r4
 801df70:	b01e      	add	sp, #120	; 0x78
 801df72:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801df76:	b003      	add	sp, #12
 801df78:	4770      	bx	lr

0801df7a <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 801df7a:	7a43      	ldrb	r3, [r0, #9]
 801df7c:	8880      	ldrh	r0, [r0, #4]
 801df7e:	4418      	add	r0, r3
 801df80:	b280      	uxth	r0, r0
 801df82:	4770      	bx	lr

0801df84 <_ZNK8touchgfx4Font13getFontHeightEv>:
 801df84:	6803      	ldr	r3, [r0, #0]
 801df86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801df88:	4718      	bx	r3

0801df8a <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801df8a:	b40e      	push	{r1, r2, r3}
 801df8c:	b570      	push	{r4, r5, r6, lr}
 801df8e:	b09d      	sub	sp, #116	; 0x74
 801df90:	4604      	mov	r4, r0
 801df92:	ab21      	add	r3, sp, #132	; 0x84
 801df94:	a803      	add	r0, sp, #12
 801df96:	f853 5b04 	ldr.w	r5, [r3], #4
 801df9a:	9302      	str	r3, [sp, #8]
 801df9c:	f000 fcbe 	bl	801e91c <_ZN8touchgfx12TextProviderC1Ev>
 801dfa0:	6823      	ldr	r3, [r4, #0]
 801dfa2:	4620      	mov	r0, r4
 801dfa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801dfa6:	4798      	blx	r3
 801dfa8:	6823      	ldr	r3, [r4, #0]
 801dfaa:	4606      	mov	r6, r0
 801dfac:	4620      	mov	r0, r4
 801dfae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801dfb0:	2401      	movs	r4, #1
 801dfb2:	4798      	blx	r3
 801dfb4:	4633      	mov	r3, r6
 801dfb6:	9000      	str	r0, [sp, #0]
 801dfb8:	4629      	mov	r1, r5
 801dfba:	9a02      	ldr	r2, [sp, #8]
 801dfbc:	a803      	add	r0, sp, #12
 801dfbe:	f000 fd08 	bl	801e9d2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801dfc2:	a803      	add	r0, sp, #12
 801dfc4:	f001 f8d6 	bl	801f174 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801dfc8:	b2a3      	uxth	r3, r4
 801dfca:	b138      	cbz	r0, 801dfdc <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 801dfcc:	280a      	cmp	r0, #10
 801dfce:	a803      	add	r0, sp, #12
 801dfd0:	bf04      	itt	eq
 801dfd2:	3301      	addeq	r3, #1
 801dfd4:	b21c      	sxtheq	r4, r3
 801dfd6:	f001 f8cd 	bl	801f174 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801dfda:	e7f5      	b.n	801dfc8 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 801dfdc:	4618      	mov	r0, r3
 801dfde:	b01d      	add	sp, #116	; 0x74
 801dfe0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801dfe4:	b003      	add	sp, #12
 801dfe6:	4770      	bx	lr

0801dfe8 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801dfe8:	b40e      	push	{r1, r2, r3}
 801dfea:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dfec:	b09e      	sub	sp, #120	; 0x78
 801dfee:	4604      	mov	r4, r0
 801dff0:	ab23      	add	r3, sp, #140	; 0x8c
 801dff2:	a805      	add	r0, sp, #20
 801dff4:	f853 5b04 	ldr.w	r5, [r3], #4
 801dff8:	9303      	str	r3, [sp, #12]
 801dffa:	f000 fc8f 	bl	801e91c <_ZN8touchgfx12TextProviderC1Ev>
 801dffe:	6823      	ldr	r3, [r4, #0]
 801e000:	4620      	mov	r0, r4
 801e002:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801e004:	4798      	blx	r3
 801e006:	6823      	ldr	r3, [r4, #0]
 801e008:	4606      	mov	r6, r0
 801e00a:	4620      	mov	r0, r4
 801e00c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e00e:	4798      	blx	r3
 801e010:	4633      	mov	r3, r6
 801e012:	4629      	mov	r1, r5
 801e014:	9000      	str	r0, [sp, #0]
 801e016:	9a03      	ldr	r2, [sp, #12]
 801e018:	a805      	add	r0, sp, #20
 801e01a:	f000 fcda 	bl	801e9d2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801e01e:	ad1e      	add	r5, sp, #120	; 0x78
 801e020:	2100      	movs	r1, #0
 801e022:	f647 76ff 	movw	r6, #32767	; 0x7fff
 801e026:	4622      	mov	r2, r4
 801e028:	a805      	add	r0, sp, #20
 801e02a:	f845 1d68 	str.w	r1, [r5, #-104]!
 801e02e:	462b      	mov	r3, r5
 801e030:	f000 ffd4 	bl	801efdc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801e034:	b1d8      	cbz	r0, 801e06e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 801e036:	280a      	cmp	r0, #10
 801e038:	d012      	beq.n	801e060 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801e03a:	9804      	ldr	r0, [sp, #16]
 801e03c:	b180      	cbz	r0, 801e060 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801e03e:	7b47      	ldrb	r7, [r0, #13]
 801e040:	88e2      	ldrh	r2, [r4, #6]
 801e042:	00fb      	lsls	r3, r7, #3
 801e044:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801e048:	7a03      	ldrb	r3, [r0, #8]
 801e04a:	430b      	orrs	r3, r1
 801e04c:	0679      	lsls	r1, r7, #25
 801e04e:	bf44      	itt	mi
 801e050:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801e054:	b21b      	sxthmi	r3, r3
 801e056:	1ad3      	subs	r3, r2, r3
 801e058:	b21b      	sxth	r3, r3
 801e05a:	429e      	cmp	r6, r3
 801e05c:	bfa8      	it	ge
 801e05e:	461e      	movge	r6, r3
 801e060:	462b      	mov	r3, r5
 801e062:	4622      	mov	r2, r4
 801e064:	2100      	movs	r1, #0
 801e066:	a805      	add	r0, sp, #20
 801e068:	f000 ffb8 	bl	801efdc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801e06c:	e7e2      	b.n	801e034 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 801e06e:	4630      	mov	r0, r6
 801e070:	b01e      	add	sp, #120	; 0x78
 801e072:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801e076:	b003      	add	sp, #12
 801e078:	4770      	bx	lr

0801e07a <_ZNK8touchgfx8Drawable10invalidateEv>:
 801e07a:	b513      	push	{r0, r1, r4, lr}
 801e07c:	6803      	ldr	r3, [r0, #0]
 801e07e:	2400      	movs	r4, #0
 801e080:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801e084:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801e088:	f8ad 1004 	strh.w	r1, [sp, #4]
 801e08c:	4669      	mov	r1, sp
 801e08e:	691b      	ldr	r3, [r3, #16]
 801e090:	9400      	str	r4, [sp, #0]
 801e092:	f8ad 2006 	strh.w	r2, [sp, #6]
 801e096:	4798      	blx	r3
 801e098:	b002      	add	sp, #8
 801e09a:	bd10      	pop	{r4, pc}

0801e09c <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801e09c:	b538      	push	{r3, r4, r5, lr}
 801e09e:	680b      	ldr	r3, [r1, #0]
 801e0a0:	460c      	mov	r4, r1
 801e0a2:	4605      	mov	r5, r0
 801e0a4:	68db      	ldr	r3, [r3, #12]
 801e0a6:	4798      	blx	r3
 801e0a8:	6823      	ldr	r3, [r4, #0]
 801e0aa:	4620      	mov	r0, r4
 801e0ac:	4629      	mov	r1, r5
 801e0ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e0b0:	4798      	blx	r3
 801e0b2:	4628      	mov	r0, r5
 801e0b4:	bd38      	pop	{r3, r4, r5, pc}

0801e0b6 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801e0b6:	b410      	push	{r4}
 801e0b8:	880a      	ldrh	r2, [r1, #0]
 801e0ba:	8884      	ldrh	r4, [r0, #4]
 801e0bc:	4422      	add	r2, r4
 801e0be:	800a      	strh	r2, [r1, #0]
 801e0c0:	884a      	ldrh	r2, [r1, #2]
 801e0c2:	88c4      	ldrh	r4, [r0, #6]
 801e0c4:	4422      	add	r2, r4
 801e0c6:	804a      	strh	r2, [r1, #2]
 801e0c8:	6940      	ldr	r0, [r0, #20]
 801e0ca:	b120      	cbz	r0, 801e0d6 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801e0cc:	6803      	ldr	r3, [r0, #0]
 801e0ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e0d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e0d4:	4718      	bx	r3
 801e0d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e0da:	4770      	bx	lr

0801e0dc <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801e0dc:	b570      	push	{r4, r5, r6, lr}
 801e0de:	8882      	ldrh	r2, [r0, #4]
 801e0e0:	460c      	mov	r4, r1
 801e0e2:	880b      	ldrh	r3, [r1, #0]
 801e0e4:	4605      	mov	r5, r0
 801e0e6:	4413      	add	r3, r2
 801e0e8:	800b      	strh	r3, [r1, #0]
 801e0ea:	884b      	ldrh	r3, [r1, #2]
 801e0ec:	88c2      	ldrh	r2, [r0, #6]
 801e0ee:	4413      	add	r3, r2
 801e0f0:	804b      	strh	r3, [r1, #2]
 801e0f2:	1d01      	adds	r1, r0, #4
 801e0f4:	4620      	mov	r0, r4
 801e0f6:	f7fb fe65 	bl	8019dc4 <_ZN8touchgfx4RectaNERKS0_>
 801e0fa:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801e0fe:	2b00      	cmp	r3, #0
 801e100:	dd0b      	ble.n	801e11a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801e102:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801e106:	2b00      	cmp	r3, #0
 801e108:	dd07      	ble.n	801e11a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801e10a:	6968      	ldr	r0, [r5, #20]
 801e10c:	b128      	cbz	r0, 801e11a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801e10e:	6803      	ldr	r3, [r0, #0]
 801e110:	4621      	mov	r1, r4
 801e112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e114:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e118:	4718      	bx	r3
 801e11a:	bd70      	pop	{r4, r5, r6, pc}

0801e11c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801e11c:	b570      	push	{r4, r5, r6, lr}
 801e11e:	8882      	ldrh	r2, [r0, #4]
 801e120:	460c      	mov	r4, r1
 801e122:	880b      	ldrh	r3, [r1, #0]
 801e124:	4605      	mov	r5, r0
 801e126:	4413      	add	r3, r2
 801e128:	800b      	strh	r3, [r1, #0]
 801e12a:	884b      	ldrh	r3, [r1, #2]
 801e12c:	88c2      	ldrh	r2, [r0, #6]
 801e12e:	4413      	add	r3, r2
 801e130:	804b      	strh	r3, [r1, #2]
 801e132:	1d01      	adds	r1, r0, #4
 801e134:	4620      	mov	r0, r4
 801e136:	f7fb fe45 	bl	8019dc4 <_ZN8touchgfx4RectaNERKS0_>
 801e13a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801e13e:	2b00      	cmp	r3, #0
 801e140:	dd19      	ble.n	801e176 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 801e142:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801e146:	2b00      	cmp	r3, #0
 801e148:	dd15      	ble.n	801e176 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 801e14a:	6968      	ldr	r0, [r5, #20]
 801e14c:	b128      	cbz	r0, 801e15a <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 801e14e:	6803      	ldr	r3, [r0, #0]
 801e150:	4621      	mov	r1, r4
 801e152:	691b      	ldr	r3, [r3, #16]
 801e154:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e158:	4718      	bx	r3
 801e15a:	4b07      	ldr	r3, [pc, #28]	; (801e178 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 801e15c:	681b      	ldr	r3, [r3, #0]
 801e15e:	3304      	adds	r3, #4
 801e160:	429d      	cmp	r5, r3
 801e162:	d108      	bne.n	801e176 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 801e164:	f7fe ff10 	bl	801cf88 <_ZN8touchgfx11Application11getInstanceEv>
 801e168:	6803      	ldr	r3, [r0, #0]
 801e16a:	6821      	ldr	r1, [r4, #0]
 801e16c:	6862      	ldr	r2, [r4, #4]
 801e16e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e170:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e174:	4718      	bx	r3
 801e176:	bd70      	pop	{r4, r5, r6, pc}
 801e178:	24007028 	.word	0x24007028

0801e17c <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801e17c:	b570      	push	{r4, r5, r6, lr}
 801e17e:	4604      	mov	r4, r0
 801e180:	4616      	mov	r6, r2
 801e182:	460d      	mov	r5, r1
 801e184:	b901      	cbnz	r1, 801e188 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801e186:	b192      	cbz	r2, 801e1ae <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 801e188:	6823      	ldr	r3, [r4, #0]
 801e18a:	4620      	mov	r0, r4
 801e18c:	699b      	ldr	r3, [r3, #24]
 801e18e:	4798      	blx	r3
 801e190:	88e2      	ldrh	r2, [r4, #6]
 801e192:	88a1      	ldrh	r1, [r4, #4]
 801e194:	4620      	mov	r0, r4
 801e196:	4432      	add	r2, r6
 801e198:	4429      	add	r1, r5
 801e19a:	b212      	sxth	r2, r2
 801e19c:	b209      	sxth	r1, r1
 801e19e:	f7e7 f98a 	bl	80054b6 <_ZN8touchgfx8Drawable5setXYEss>
 801e1a2:	6823      	ldr	r3, [r4, #0]
 801e1a4:	4620      	mov	r0, r4
 801e1a6:	699b      	ldr	r3, [r3, #24]
 801e1a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e1ac:	4718      	bx	r3
 801e1ae:	bd70      	pop	{r4, r5, r6, pc}

0801e1b0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801e1b0:	b510      	push	{r4, lr}
 801e1b2:	2300      	movs	r3, #0
 801e1b4:	4604      	mov	r4, r0
 801e1b6:	4608      	mov	r0, r1
 801e1b8:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801e1bc:	8023      	strh	r3, [r4, #0]
 801e1be:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801e1c2:	8063      	strh	r3, [r4, #2]
 801e1c4:	6803      	ldr	r3, [r0, #0]
 801e1c6:	80a1      	strh	r1, [r4, #4]
 801e1c8:	4621      	mov	r1, r4
 801e1ca:	80e2      	strh	r2, [r4, #6]
 801e1cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e1ce:	4798      	blx	r3
 801e1d0:	4620      	mov	r0, r4
 801e1d2:	bd10      	pop	{r4, pc}

0801e1d4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 801e1d4:	b530      	push	{r4, r5, lr}
 801e1d6:	8083      	strh	r3, [r0, #4]
 801e1d8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801e1dc:	f89d 5018 	ldrb.w	r5, [sp, #24]
 801e1e0:	80c3      	strh	r3, [r0, #6]
 801e1e2:	f89d 3010 	ldrb.w	r3, [sp, #16]
 801e1e6:	6141      	str	r1, [r0, #20]
 801e1e8:	7203      	strb	r3, [r0, #8]
 801e1ea:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801e1ee:	8302      	strh	r2, [r0, #24]
 801e1f0:	7243      	strb	r3, [r0, #9]
 801e1f2:	7a83      	ldrb	r3, [r0, #10]
 801e1f4:	f365 0306 	bfi	r3, r5, #0, #7
 801e1f8:	f89d 501c 	ldrb.w	r5, [sp, #28]
 801e1fc:	f365 13c7 	bfi	r3, r5, #7, #1
 801e200:	7283      	strb	r3, [r0, #10]
 801e202:	f89d 3020 	ldrb.w	r3, [sp, #32]
 801e206:	72c3      	strb	r3, [r0, #11]
 801e208:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 801e20c:	7303      	strb	r3, [r0, #12]
 801e20e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 801e212:	81c3      	strh	r3, [r0, #14]
 801e214:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 801e218:	8203      	strh	r3, [r0, #16]
 801e21a:	4b01      	ldr	r3, [pc, #4]	; (801e220 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 801e21c:	6003      	str	r3, [r0, #0]
 801e21e:	bd30      	pop	{r4, r5, pc}
 801e220:	0802be0c 	.word	0x0802be0c

0801e224 <_ZNK8touchgfx9ConstFont4findEt>:
 801e224:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e226:	6944      	ldr	r4, [r0, #20]
 801e228:	b3bc      	cbz	r4, 801e29a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801e22a:	88a3      	ldrh	r3, [r4, #4]
 801e22c:	8b02      	ldrh	r2, [r0, #24]
 801e22e:	1acb      	subs	r3, r1, r3
 801e230:	f102 32ff 	add.w	r2, r2, #4294967295
 801e234:	d431      	bmi.n	801e29a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801e236:	4293      	cmp	r3, r2
 801e238:	dd0c      	ble.n	801e254 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801e23a:	230e      	movs	r3, #14
 801e23c:	fb03 4302 	mla	r3, r3, r2, r4
 801e240:	889b      	ldrh	r3, [r3, #4]
 801e242:	1a5b      	subs	r3, r3, r1
 801e244:	1ad3      	subs	r3, r2, r3
 801e246:	429a      	cmp	r2, r3
 801e248:	db27      	blt.n	801e29a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801e24a:	2b00      	cmp	r3, #0
 801e24c:	bfbc      	itt	lt
 801e24e:	2302      	movlt	r3, #2
 801e250:	fb92 f3f3 	sdivlt	r3, r2, r3
 801e254:	2500      	movs	r5, #0
 801e256:	260e      	movs	r6, #14
 801e258:	4295      	cmp	r5, r2
 801e25a:	dc1e      	bgt.n	801e29a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801e25c:	fb06 4003 	mla	r0, r6, r3, r4
 801e260:	8887      	ldrh	r7, [r0, #4]
 801e262:	42b9      	cmp	r1, r7
 801e264:	d01a      	beq.n	801e29c <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801e266:	d20d      	bcs.n	801e284 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 801e268:	1e5a      	subs	r2, r3, #1
 801e26a:	4295      	cmp	r5, r2
 801e26c:	dc15      	bgt.n	801e29a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801e26e:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801e272:	1a5b      	subs	r3, r3, r1
 801e274:	1ad3      	subs	r3, r2, r3
 801e276:	429a      	cmp	r2, r3
 801e278:	db0f      	blt.n	801e29a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801e27a:	429d      	cmp	r5, r3
 801e27c:	ddec      	ble.n	801e258 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801e27e:	1953      	adds	r3, r2, r5
 801e280:	105b      	asrs	r3, r3, #1
 801e282:	e7e9      	b.n	801e258 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801e284:	1c5d      	adds	r5, r3, #1
 801e286:	42aa      	cmp	r2, r5
 801e288:	db07      	blt.n	801e29a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801e28a:	8a43      	ldrh	r3, [r0, #18]
 801e28c:	1acb      	subs	r3, r1, r3
 801e28e:	442b      	add	r3, r5
 801e290:	429d      	cmp	r5, r3
 801e292:	dc02      	bgt.n	801e29a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801e294:	429a      	cmp	r2, r3
 801e296:	dadf      	bge.n	801e258 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801e298:	e7f1      	b.n	801e27e <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801e29a:	2000      	movs	r0, #0
 801e29c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801e29e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801e29e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e2a0:	4604      	mov	r4, r0
 801e2a2:	4617      	mov	r7, r2
 801e2a4:	461e      	mov	r6, r3
 801e2a6:	b911      	cbnz	r1, 801e2ae <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801e2a8:	2500      	movs	r5, #0
 801e2aa:	4628      	mov	r0, r5
 801e2ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e2ae:	290a      	cmp	r1, #10
 801e2b0:	d0fa      	beq.n	801e2a8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801e2b2:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801e2b6:	4291      	cmp	r1, r2
 801e2b8:	d0f6      	beq.n	801e2a8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801e2ba:	f242 020b 	movw	r2, #8203	; 0x200b
 801e2be:	4291      	cmp	r1, r2
 801e2c0:	d0f2      	beq.n	801e2a8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801e2c2:	f7ff ffaf 	bl	801e224 <_ZNK8touchgfx9ConstFont4findEt>
 801e2c6:	4605      	mov	r5, r0
 801e2c8:	b950      	cbnz	r0, 801e2e0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801e2ca:	6823      	ldr	r3, [r4, #0]
 801e2cc:	4620      	mov	r0, r4
 801e2ce:	691b      	ldr	r3, [r3, #16]
 801e2d0:	4798      	blx	r3
 801e2d2:	4601      	mov	r1, r0
 801e2d4:	4620      	mov	r0, r4
 801e2d6:	f7ff ffa5 	bl	801e224 <_ZNK8touchgfx9ConstFont4findEt>
 801e2da:	4605      	mov	r5, r0
 801e2dc:	2800      	cmp	r0, #0
 801e2de:	d0e3      	beq.n	801e2a8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801e2e0:	6823      	ldr	r3, [r4, #0]
 801e2e2:	4629      	mov	r1, r5
 801e2e4:	4620      	mov	r0, r4
 801e2e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801e2e8:	4798      	blx	r3
 801e2ea:	6038      	str	r0, [r7, #0]
 801e2ec:	6823      	ldr	r3, [r4, #0]
 801e2ee:	4620      	mov	r0, r4
 801e2f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e2f2:	4798      	blx	r3
 801e2f4:	7030      	strb	r0, [r6, #0]
 801e2f6:	e7d8      	b.n	801e2aa <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801e2f8 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 801e2f8:	2000      	movs	r0, #0
 801e2fa:	4770      	bx	lr

0801e2fc <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 801e2fc:	2001      	movs	r0, #1
 801e2fe:	4770      	bx	lr

0801e300 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 801e300:	2002      	movs	r0, #2
 801e302:	4770      	bx	lr

0801e304 <_ZN8touchgfx12GestureEventD1Ev>:
 801e304:	4770      	bx	lr

0801e306 <_ZN8touchgfx9DragEventD1Ev>:
 801e306:	4770      	bx	lr

0801e308 <_ZN8touchgfx10ClickEventD1Ev>:
 801e308:	4770      	bx	lr

0801e30a <_ZN8touchgfx10ClickEventD0Ev>:
 801e30a:	b510      	push	{r4, lr}
 801e30c:	4604      	mov	r4, r0
 801e30e:	210c      	movs	r1, #12
 801e310:	f00a fdd1 	bl	8028eb6 <_ZdlPvj>
 801e314:	4620      	mov	r0, r4
 801e316:	bd10      	pop	{r4, pc}

0801e318 <_ZN8touchgfx9DragEventD0Ev>:
 801e318:	b510      	push	{r4, lr}
 801e31a:	4604      	mov	r4, r0
 801e31c:	2110      	movs	r1, #16
 801e31e:	f00a fdca 	bl	8028eb6 <_ZdlPvj>
 801e322:	4620      	mov	r0, r4
 801e324:	bd10      	pop	{r4, pc}

0801e326 <_ZN8touchgfx12GestureEventD0Ev>:
 801e326:	b510      	push	{r4, lr}
 801e328:	4604      	mov	r4, r0
 801e32a:	210c      	movs	r1, #12
 801e32c:	f00a fdc3 	bl	8028eb6 <_ZdlPvj>
 801e330:	4620      	mov	r0, r4
 801e332:	bd10      	pop	{r4, pc}

0801e334 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801e334:	b530      	push	{r4, r5, lr}
 801e336:	460d      	mov	r5, r1
 801e338:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801e33a:	b087      	sub	sp, #28
 801e33c:	4604      	mov	r4, r0
 801e33e:	b301      	cbz	r1, 801e382 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801e340:	a801      	add	r0, sp, #4
 801e342:	f7ff ff35 	bl	801e1b0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801e346:	892a      	ldrh	r2, [r5, #8]
 801e348:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801e34c:	7928      	ldrb	r0, [r5, #4]
 801e34e:	1ad2      	subs	r2, r2, r3
 801e350:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801e352:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801e356:	441a      	add	r2, r3
 801e358:	896b      	ldrh	r3, [r5, #10]
 801e35a:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801e35e:	f88d 0010 	strb.w	r0, [sp, #16]
 801e362:	1b5b      	subs	r3, r3, r5
 801e364:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801e366:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801e368:	442b      	add	r3, r5
 801e36a:	4d07      	ldr	r5, [pc, #28]	; (801e388 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801e36c:	f8ad 1012 	strh.w	r1, [sp, #18]
 801e370:	a903      	add	r1, sp, #12
 801e372:	9503      	str	r5, [sp, #12]
 801e374:	f8ad 2014 	strh.w	r2, [sp, #20]
 801e378:	f8ad 3016 	strh.w	r3, [sp, #22]
 801e37c:	6803      	ldr	r3, [r0, #0]
 801e37e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801e380:	4798      	blx	r3
 801e382:	b007      	add	sp, #28
 801e384:	bd30      	pop	{r4, r5, pc}
 801e386:	bf00      	nop
 801e388:	0802be94 	.word	0x0802be94

0801e38c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801e38c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e390:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801e392:	b08a      	sub	sp, #40	; 0x28
 801e394:	4604      	mov	r4, r0
 801e396:	460d      	mov	r5, r1
 801e398:	b113      	cbz	r3, 801e3a0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 801e39a:	790b      	ldrb	r3, [r1, #4]
 801e39c:	2b00      	cmp	r3, #0
 801e39e:	d044      	beq.n	801e42a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801e3a0:	f104 0804 	add.w	r8, r4, #4
 801e3a4:	a803      	add	r0, sp, #12
 801e3a6:	4641      	mov	r1, r8
 801e3a8:	f7ff ff02 	bl	801e1b0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801e3ac:	792b      	ldrb	r3, [r5, #4]
 801e3ae:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801e3b2:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 801e3b6:	b983      	cbnz	r3, 801e3da <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 801e3b8:	f104 0336 	add.w	r3, r4, #54	; 0x36
 801e3bc:	892a      	ldrh	r2, [r5, #8]
 801e3be:	88e9      	ldrh	r1, [r5, #6]
 801e3c0:	4640      	mov	r0, r8
 801e3c2:	1b92      	subs	r2, r2, r6
 801e3c4:	9301      	str	r3, [sp, #4]
 801e3c6:	1bc9      	subs	r1, r1, r7
 801e3c8:	f104 0334 	add.w	r3, r4, #52	; 0x34
 801e3cc:	b212      	sxth	r2, r2
 801e3ce:	9300      	str	r3, [sp, #0]
 801e3d0:	b209      	sxth	r1, r1
 801e3d2:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801e3d6:	f7fb fc13 	bl	8019c00 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 801e3da:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801e3dc:	b329      	cbz	r1, 801e42a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801e3de:	a805      	add	r0, sp, #20
 801e3e0:	f7ff fee6 	bl	801e1b0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801e3e4:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801e3e8:	792b      	ldrb	r3, [r5, #4]
 801e3ea:	a907      	add	r1, sp, #28
 801e3ec:	1abf      	subs	r7, r7, r2
 801e3ee:	88ea      	ldrh	r2, [r5, #6]
 801e3f0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801e3f2:	4417      	add	r7, r2
 801e3f4:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 801e3f6:	f88d 3020 	strb.w	r3, [sp, #32]
 801e3fa:	4417      	add	r7, r2
 801e3fc:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801e400:	1ab6      	subs	r6, r6, r2
 801e402:	892a      	ldrh	r2, [r5, #8]
 801e404:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 801e408:	4416      	add	r6, r2
 801e40a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801e40c:	4416      	add	r6, r2
 801e40e:	4a08      	ldr	r2, [pc, #32]	; (801e430 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 801e410:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 801e414:	2600      	movs	r6, #0
 801e416:	9207      	str	r2, [sp, #28]
 801e418:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 801e41c:	6803      	ldr	r3, [r0, #0]
 801e41e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e420:	4798      	blx	r3
 801e422:	792b      	ldrb	r3, [r5, #4]
 801e424:	b10b      	cbz	r3, 801e42a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801e426:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 801e42a:	b00a      	add	sp, #40	; 0x28
 801e42c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e430:	0802be6c 	.word	0x0802be6c

0801e434 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801e434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e438:	460c      	mov	r4, r1
 801e43a:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801e43c:	b088      	sub	sp, #32
 801e43e:	4605      	mov	r5, r0
 801e440:	2900      	cmp	r1, #0
 801e442:	d06d      	beq.n	801e520 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 801e444:	4668      	mov	r0, sp
 801e446:	f7ff feb3 	bl	801e1b0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801e44a:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 801e44c:	88e3      	ldrh	r3, [r4, #6]
 801e44e:	f9bd 8000 	ldrsh.w	r8, [sp]
 801e452:	440b      	add	r3, r1
 801e454:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 801e458:	b21b      	sxth	r3, r3
 801e45a:	4543      	cmp	r3, r8
 801e45c:	db31      	blt.n	801e4c2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801e45e:	f8bd c004 	ldrh.w	ip, [sp, #4]
 801e462:	44c4      	add	ip, r8
 801e464:	fa0f fc8c 	sxth.w	ip, ip
 801e468:	4563      	cmp	r3, ip
 801e46a:	da2a      	bge.n	801e4c2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801e46c:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 801e46e:	8926      	ldrh	r6, [r4, #8]
 801e470:	4416      	add	r6, r2
 801e472:	b236      	sxth	r6, r6
 801e474:	42be      	cmp	r6, r7
 801e476:	db24      	blt.n	801e4c2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801e478:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801e47c:	4438      	add	r0, r7
 801e47e:	b200      	sxth	r0, r0
 801e480:	4286      	cmp	r6, r0
 801e482:	da1e      	bge.n	801e4c2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801e484:	8963      	ldrh	r3, [r4, #10]
 801e486:	4419      	add	r1, r3
 801e488:	b209      	sxth	r1, r1
 801e48a:	4541      	cmp	r1, r8
 801e48c:	db08      	blt.n	801e4a0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801e48e:	4561      	cmp	r1, ip
 801e490:	da06      	bge.n	801e4a0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801e492:	89a3      	ldrh	r3, [r4, #12]
 801e494:	441a      	add	r2, r3
 801e496:	b212      	sxth	r2, r2
 801e498:	42ba      	cmp	r2, r7
 801e49a:	db01      	blt.n	801e4a0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801e49c:	4282      	cmp	r2, r0
 801e49e:	db10      	blt.n	801e4c2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801e4a0:	4b21      	ldr	r3, [pc, #132]	; (801e528 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 801e4a2:	a904      	add	r1, sp, #16
 801e4a4:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801e4a6:	9304      	str	r3, [sp, #16]
 801e4a8:	2302      	movs	r3, #2
 801e4aa:	f88d 3014 	strb.w	r3, [sp, #20]
 801e4ae:	2300      	movs	r3, #0
 801e4b0:	f8ad 3016 	strh.w	r3, [sp, #22]
 801e4b4:	f8ad 3018 	strh.w	r3, [sp, #24]
 801e4b8:	f8ad 301a 	strh.w	r3, [sp, #26]
 801e4bc:	6803      	ldr	r3, [r0, #0]
 801e4be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e4c0:	4798      	blx	r3
 801e4c2:	1d29      	adds	r1, r5, #4
 801e4c4:	a802      	add	r0, sp, #8
 801e4c6:	f7ff fe73 	bl	801e1b0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801e4ca:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801e4ce:	88e0      	ldrh	r0, [r4, #6]
 801e4d0:	eba3 0808 	sub.w	r8, r3, r8
 801e4d4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801e4d8:	7921      	ldrb	r1, [r4, #4]
 801e4da:	fa1f f888 	uxth.w	r8, r8
 801e4de:	1bdf      	subs	r7, r3, r7
 801e4e0:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 801e4e4:	b2bb      	uxth	r3, r7
 801e4e6:	4440      	add	r0, r8
 801e4e8:	8922      	ldrh	r2, [r4, #8]
 801e4ea:	8967      	ldrh	r7, [r4, #10]
 801e4ec:	4460      	add	r0, ip
 801e4ee:	89a4      	ldrh	r4, [r4, #12]
 801e4f0:	441a      	add	r2, r3
 801e4f2:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 801e4f4:	44b8      	add	r8, r7
 801e4f6:	4423      	add	r3, r4
 801e4f8:	f8ad 0016 	strh.w	r0, [sp, #22]
 801e4fc:	4432      	add	r2, r6
 801e4fe:	44e0      	add	r8, ip
 801e500:	4433      	add	r3, r6
 801e502:	4c0a      	ldr	r4, [pc, #40]	; (801e52c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 801e504:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801e506:	f88d 1014 	strb.w	r1, [sp, #20]
 801e50a:	a904      	add	r1, sp, #16
 801e50c:	9404      	str	r4, [sp, #16]
 801e50e:	f8ad 2018 	strh.w	r2, [sp, #24]
 801e512:	f8ad 801a 	strh.w	r8, [sp, #26]
 801e516:	f8ad 301c 	strh.w	r3, [sp, #28]
 801e51a:	6803      	ldr	r3, [r0, #0]
 801e51c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801e51e:	4798      	blx	r3
 801e520:	b008      	add	sp, #32
 801e522:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e526:	bf00      	nop
 801e528:	0802be6c 	.word	0x0802be6c
 801e52c:	0802be80 	.word	0x0802be80

0801e530 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801e530:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801e532:	4604      	mov	r4, r0
 801e534:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801e538:	3201      	adds	r2, #1
 801e53a:	d112      	bne.n	801e562 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801e53c:	2500      	movs	r5, #0
 801e53e:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801e542:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801e546:	6803      	ldr	r3, [r0, #0]
 801e548:	9500      	str	r5, [sp, #0]
 801e54a:	466d      	mov	r5, sp
 801e54c:	f8ad 1004 	strh.w	r1, [sp, #4]
 801e550:	f8ad 2006 	strh.w	r2, [sp, #6]
 801e554:	4629      	mov	r1, r5
 801e556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e558:	4798      	blx	r3
 801e55a:	e895 0003 	ldmia.w	r5, {r0, r1}
 801e55e:	e884 0003 	stmia.w	r4, {r0, r1}
 801e562:	4620      	mov	r0, r4
 801e564:	b003      	add	sp, #12
 801e566:	bd30      	pop	{r4, r5, pc}

0801e568 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801e568:	b513      	push	{r0, r1, r4, lr}
 801e56a:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801e56e:	4604      	mov	r4, r0
 801e570:	3301      	adds	r3, #1
 801e572:	d109      	bne.n	801e588 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801e574:	4601      	mov	r1, r0
 801e576:	4668      	mov	r0, sp
 801e578:	f7ff fe1a 	bl	801e1b0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801e57c:	f8bd 3000 	ldrh.w	r3, [sp]
 801e580:	8423      	strh	r3, [r4, #32]
 801e582:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801e586:	8463      	strh	r3, [r4, #34]	; 0x22
 801e588:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801e58c:	b002      	add	sp, #8
 801e58e:	bd10      	pop	{r4, pc}

0801e590 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801e590:	b513      	push	{r0, r1, r4, lr}
 801e592:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801e596:	4604      	mov	r4, r0
 801e598:	3301      	adds	r3, #1
 801e59a:	d109      	bne.n	801e5b0 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801e59c:	4601      	mov	r1, r0
 801e59e:	4668      	mov	r0, sp
 801e5a0:	f7ff fe06 	bl	801e1b0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801e5a4:	f8bd 3000 	ldrh.w	r3, [sp]
 801e5a8:	8423      	strh	r3, [r4, #32]
 801e5aa:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801e5ae:	8463      	strh	r3, [r4, #34]	; 0x22
 801e5b0:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801e5b4:	b002      	add	sp, #8
 801e5b6:	bd10      	pop	{r4, pc}

0801e5b8 <_ZN8touchgfx6ScreenC1Ev>:
 801e5b8:	b570      	push	{r4, r5, r6, lr}
 801e5ba:	4b17      	ldr	r3, [pc, #92]	; (801e618 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 801e5bc:	4605      	mov	r5, r0
 801e5be:	4a17      	ldr	r2, [pc, #92]	; (801e61c <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801e5c0:	2101      	movs	r1, #1
 801e5c2:	f845 3b04 	str.w	r3, [r5], #4
 801e5c6:	2300      	movs	r3, #0
 801e5c8:	6042      	str	r2, [r0, #4]
 801e5ca:	4604      	mov	r4, r0
 801e5cc:	8103      	strh	r3, [r0, #8]
 801e5ce:	8143      	strh	r3, [r0, #10]
 801e5d0:	8183      	strh	r3, [r0, #12]
 801e5d2:	81c3      	strh	r3, [r0, #14]
 801e5d4:	8203      	strh	r3, [r0, #16]
 801e5d6:	8243      	strh	r3, [r0, #18]
 801e5d8:	8283      	strh	r3, [r0, #20]
 801e5da:	82c3      	strh	r3, [r0, #22]
 801e5dc:	6203      	str	r3, [r0, #32]
 801e5de:	8483      	strh	r3, [r0, #36]	; 0x24
 801e5e0:	84c3      	strh	r3, [r0, #38]	; 0x26
 801e5e2:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 801e5e6:	6343      	str	r3, [r0, #52]	; 0x34
 801e5e8:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 801e5ec:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 801e5f0:	e9c0 3306 	strd	r3, r3, [r0, #24]
 801e5f4:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 801e5f8:	4b09      	ldr	r3, [pc, #36]	; (801e620 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801e5fa:	4628      	mov	r0, r5
 801e5fc:	f9b3 6000 	ldrsh.w	r6, [r3]
 801e600:	6b93      	ldr	r3, [r2, #56]	; 0x38
 801e602:	4a08      	ldr	r2, [pc, #32]	; (801e624 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801e604:	f9b2 1000 	ldrsh.w	r1, [r2]
 801e608:	4798      	blx	r3
 801e60a:	6863      	ldr	r3, [r4, #4]
 801e60c:	4628      	mov	r0, r5
 801e60e:	4631      	mov	r1, r6
 801e610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e612:	4798      	blx	r3
 801e614:	4620      	mov	r0, r4
 801e616:	bd70      	pop	{r4, r5, r6, pc}
 801e618:	0802bea8 	.word	0x0802bea8
 801e61c:	0802ba18 	.word	0x0802ba18
 801e620:	24006fe2 	.word	0x24006fe2
 801e624:	24006fe0 	.word	0x24006fe0

0801e628 <_ZN8touchgfx6Screen4drawEv>:
 801e628:	4b09      	ldr	r3, [pc, #36]	; (801e650 <_ZN8touchgfx6Screen4drawEv+0x28>)
 801e62a:	b507      	push	{r0, r1, r2, lr}
 801e62c:	f9b3 2000 	ldrsh.w	r2, [r3]
 801e630:	2100      	movs	r1, #0
 801e632:	4b08      	ldr	r3, [pc, #32]	; (801e654 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801e634:	9100      	str	r1, [sp, #0]
 801e636:	4669      	mov	r1, sp
 801e638:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e63c:	f8ad 2004 	strh.w	r2, [sp, #4]
 801e640:	f8ad 3006 	strh.w	r3, [sp, #6]
 801e644:	6803      	ldr	r3, [r0, #0]
 801e646:	689b      	ldr	r3, [r3, #8]
 801e648:	4798      	blx	r3
 801e64a:	b003      	add	sp, #12
 801e64c:	f85d fb04 	ldr.w	pc, [sp], #4
 801e650:	24006fe0 	.word	0x24006fe0
 801e654:	24006fe2 	.word	0x24006fe2

0801e658 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801e658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e65c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801e660:	b089      	sub	sp, #36	; 0x24
 801e662:	4680      	mov	r8, r0
 801e664:	460c      	mov	r4, r1
 801e666:	2b00      	cmp	r3, #0
 801e668:	4615      	mov	r5, r2
 801e66a:	dd0e      	ble.n	801e68a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801e66c:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801e670:	2b00      	cmp	r3, #0
 801e672:	dd0a      	ble.n	801e68a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801e674:	4628      	mov	r0, r5
 801e676:	f7ff ff5b 	bl	801e530 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801e67a:	4621      	mov	r1, r4
 801e67c:	f7fe fba6 	bl	801cdcc <_ZNK8touchgfx4Rect9intersectERKS0_>
 801e680:	69eb      	ldr	r3, [r5, #28]
 801e682:	b928      	cbnz	r0, 801e690 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801e684:	461d      	mov	r5, r3
 801e686:	2b00      	cmp	r3, #0
 801e688:	d1f4      	bne.n	801e674 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801e68a:	b009      	add	sp, #36	; 0x24
 801e68c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e690:	ae04      	add	r6, sp, #16
 801e692:	2b00      	cmp	r3, #0
 801e694:	f000 80b5 	beq.w	801e802 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801e698:	682b      	ldr	r3, [r5, #0]
 801e69a:	4629      	mov	r1, r5
 801e69c:	a802      	add	r0, sp, #8
 801e69e:	68db      	ldr	r3, [r3, #12]
 801e6a0:	4798      	blx	r3
 801e6a2:	4628      	mov	r0, r5
 801e6a4:	f7ff ff60 	bl	801e568 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801e6a8:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801e6ac:	4407      	add	r7, r0
 801e6ae:	4628      	mov	r0, r5
 801e6b0:	f7ff ff6e 	bl	801e590 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801e6b4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801e6b8:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801e6bc:	b23f      	sxth	r7, r7
 801e6be:	4418      	add	r0, r3
 801e6c0:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801e6c4:	4621      	mov	r1, r4
 801e6c6:	f8ad 2014 	strh.w	r2, [sp, #20]
 801e6ca:	f8ad 0012 	strh.w	r0, [sp, #18]
 801e6ce:	4630      	mov	r0, r6
 801e6d0:	f8ad 3016 	strh.w	r3, [sp, #22]
 801e6d4:	f8ad 7010 	strh.w	r7, [sp, #16]
 801e6d8:	f7fb fb74 	bl	8019dc4 <_ZN8touchgfx4RectaNERKS0_>
 801e6dc:	4628      	mov	r0, r5
 801e6de:	f7ff ff27 	bl	801e530 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801e6e2:	ab06      	add	r3, sp, #24
 801e6e4:	4602      	mov	r2, r0
 801e6e6:	e896 0003 	ldmia.w	r6, {r0, r1}
 801e6ea:	e883 0003 	stmia.w	r3, {r0, r1}
 801e6ee:	4611      	mov	r1, r2
 801e6f0:	4618      	mov	r0, r3
 801e6f2:	f7fb fb67 	bl	8019dc4 <_ZN8touchgfx4RectaNERKS0_>
 801e6f6:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801e6fa:	f9b4 1000 	ldrsh.w	r1, [r4]
 801e6fe:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801e702:	4299      	cmp	r1, r3
 801e704:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801e708:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801e70c:	d10b      	bne.n	801e726 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801e70e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801e712:	4552      	cmp	r2, sl
 801e714:	d107      	bne.n	801e726 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801e716:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801e71a:	455a      	cmp	r2, fp
 801e71c:	d103      	bne.n	801e726 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801e71e:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801e722:	454a      	cmp	r2, r9
 801e724:	d06d      	beq.n	801e802 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801e726:	f1bb 0f00 	cmp.w	fp, #0
 801e72a:	dd65      	ble.n	801e7f8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801e72c:	f1b9 0f00 	cmp.w	r9, #0
 801e730:	dd62      	ble.n	801e7f8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801e732:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801e736:	fa1f f08a 	uxth.w	r0, sl
 801e73a:	4552      	cmp	r2, sl
 801e73c:	9000      	str	r0, [sp, #0]
 801e73e:	da12      	bge.n	801e766 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 801e740:	9301      	str	r3, [sp, #4]
 801e742:	9b00      	ldr	r3, [sp, #0]
 801e744:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801e748:	f8ad 2012 	strh.w	r2, [sp, #18]
 801e74c:	1a9a      	subs	r2, r3, r2
 801e74e:	f8ad 1010 	strh.w	r1, [sp, #16]
 801e752:	4631      	mov	r1, r6
 801e754:	f8ad 0014 	strh.w	r0, [sp, #20]
 801e758:	4640      	mov	r0, r8
 801e75a:	f8ad 2016 	strh.w	r2, [sp, #22]
 801e75e:	69ea      	ldr	r2, [r5, #28]
 801e760:	f7ff ff7a 	bl	801e658 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801e764:	9b01      	ldr	r3, [sp, #4]
 801e766:	f9b4 2000 	ldrsh.w	r2, [r4]
 801e76a:	b29f      	uxth	r7, r3
 801e76c:	429a      	cmp	r2, r3
 801e76e:	da0d      	bge.n	801e78c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 801e770:	f8ad 2010 	strh.w	r2, [sp, #16]
 801e774:	1aba      	subs	r2, r7, r2
 801e776:	f8ad a012 	strh.w	sl, [sp, #18]
 801e77a:	4631      	mov	r1, r6
 801e77c:	f8ad 2014 	strh.w	r2, [sp, #20]
 801e780:	4640      	mov	r0, r8
 801e782:	f8ad 9016 	strh.w	r9, [sp, #22]
 801e786:	69ea      	ldr	r2, [r5, #28]
 801e788:	f7ff ff66 	bl	801e658 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801e78c:	8822      	ldrh	r2, [r4, #0]
 801e78e:	445f      	add	r7, fp
 801e790:	88a3      	ldrh	r3, [r4, #4]
 801e792:	b2bf      	uxth	r7, r7
 801e794:	4413      	add	r3, r2
 801e796:	b23a      	sxth	r2, r7
 801e798:	b29b      	uxth	r3, r3
 801e79a:	b219      	sxth	r1, r3
 801e79c:	4291      	cmp	r1, r2
 801e79e:	dd0d      	ble.n	801e7bc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 801e7a0:	1bdb      	subs	r3, r3, r7
 801e7a2:	f8ad 2010 	strh.w	r2, [sp, #16]
 801e7a6:	f8ad a012 	strh.w	sl, [sp, #18]
 801e7aa:	4631      	mov	r1, r6
 801e7ac:	f8ad 3014 	strh.w	r3, [sp, #20]
 801e7b0:	4640      	mov	r0, r8
 801e7b2:	f8ad 9016 	strh.w	r9, [sp, #22]
 801e7b6:	69ea      	ldr	r2, [r5, #28]
 801e7b8:	f7ff ff4e 	bl	801e658 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801e7bc:	88e2      	ldrh	r2, [r4, #6]
 801e7be:	8863      	ldrh	r3, [r4, #2]
 801e7c0:	4413      	add	r3, r2
 801e7c2:	9a00      	ldr	r2, [sp, #0]
 801e7c4:	444a      	add	r2, r9
 801e7c6:	b29b      	uxth	r3, r3
 801e7c8:	fa1f f982 	uxth.w	r9, r2
 801e7cc:	b219      	sxth	r1, r3
 801e7ce:	fa0f f289 	sxth.w	r2, r9
 801e7d2:	428a      	cmp	r2, r1
 801e7d4:	da15      	bge.n	801e802 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801e7d6:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801e7da:	eba3 0309 	sub.w	r3, r3, r9
 801e7de:	f9b4 0000 	ldrsh.w	r0, [r4]
 801e7e2:	f8ad 1014 	strh.w	r1, [sp, #20]
 801e7e6:	4631      	mov	r1, r6
 801e7e8:	f8ad 0010 	strh.w	r0, [sp, #16]
 801e7ec:	f8ad 2012 	strh.w	r2, [sp, #18]
 801e7f0:	f8ad 3016 	strh.w	r3, [sp, #22]
 801e7f4:	69ea      	ldr	r2, [r5, #28]
 801e7f6:	e001      	b.n	801e7fc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 801e7f8:	69ea      	ldr	r2, [r5, #28]
 801e7fa:	4621      	mov	r1, r4
 801e7fc:	4640      	mov	r0, r8
 801e7fe:	f7ff ff2b 	bl	801e658 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801e802:	4628      	mov	r0, r5
 801e804:	f7ff fe94 	bl	801e530 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801e808:	6861      	ldr	r1, [r4, #4]
 801e80a:	4602      	mov	r2, r0
 801e80c:	4633      	mov	r3, r6
 801e80e:	6820      	ldr	r0, [r4, #0]
 801e810:	c303      	stmia	r3!, {r0, r1}
 801e812:	4611      	mov	r1, r2
 801e814:	4630      	mov	r0, r6
 801e816:	f7fb fad5 	bl	8019dc4 <_ZN8touchgfx4RectaNERKS0_>
 801e81a:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801e81e:	2b00      	cmp	r3, #0
 801e820:	f77f af33 	ble.w	801e68a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801e824:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801e828:	2b00      	cmp	r3, #0
 801e82a:	f77f af2e 	ble.w	801e68a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801e82e:	4628      	mov	r0, r5
 801e830:	f7ff fe9a 	bl	801e568 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801e834:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801e838:	1a18      	subs	r0, r3, r0
 801e83a:	f8ad 0010 	strh.w	r0, [sp, #16]
 801e83e:	4628      	mov	r0, r5
 801e840:	f7ff fea6 	bl	801e590 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801e844:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801e848:	4631      	mov	r1, r6
 801e84a:	1a18      	subs	r0, r3, r0
 801e84c:	f8ad 0012 	strh.w	r0, [sp, #18]
 801e850:	4628      	mov	r0, r5
 801e852:	682b      	ldr	r3, [r5, #0]
 801e854:	689b      	ldr	r3, [r3, #8]
 801e856:	4798      	blx	r3
 801e858:	e717      	b.n	801e68a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801e85a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801e85a:	b570      	push	{r4, r5, r6, lr}
 801e85c:	1d06      	adds	r6, r0, #4
 801e85e:	b086      	sub	sp, #24
 801e860:	460c      	mov	r4, r1
 801e862:	2300      	movs	r3, #0
 801e864:	4631      	mov	r1, r6
 801e866:	4605      	mov	r5, r0
 801e868:	a802      	add	r0, sp, #8
 801e86a:	9301      	str	r3, [sp, #4]
 801e86c:	f7ff fca0 	bl	801e1b0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801e870:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801e874:	8822      	ldrh	r2, [r4, #0]
 801e876:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 801e87a:	1ad2      	subs	r2, r2, r3
 801e87c:	8863      	ldrh	r3, [r4, #2]
 801e87e:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801e882:	1a5b      	subs	r3, r3, r1
 801e884:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801e888:	f8ad 2010 	strh.w	r2, [sp, #16]
 801e88c:	aa01      	add	r2, sp, #4
 801e88e:	f8ad 0014 	strh.w	r0, [sp, #20]
 801e892:	4630      	mov	r0, r6
 801e894:	f8ad 1016 	strh.w	r1, [sp, #22]
 801e898:	a904      	add	r1, sp, #16
 801e89a:	f8ad 3012 	strh.w	r3, [sp, #18]
 801e89e:	f7fb fb69 	bl	8019f74 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801e8a2:	9a01      	ldr	r2, [sp, #4]
 801e8a4:	b11a      	cbz	r2, 801e8ae <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 801e8a6:	4621      	mov	r1, r4
 801e8a8:	4628      	mov	r0, r5
 801e8aa:	f7ff fed5 	bl	801e658 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801e8ae:	b006      	add	sp, #24
 801e8b0:	bd70      	pop	{r4, r5, r6, pc}

0801e8b2 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801e8b2:	4602      	mov	r2, r0
 801e8b4:	b530      	push	{r4, r5, lr}
 801e8b6:	4604      	mov	r4, r0
 801e8b8:	b085      	sub	sp, #20
 801e8ba:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801e8be:	460d      	mov	r5, r1
 801e8c0:	466b      	mov	r3, sp
 801e8c2:	6851      	ldr	r1, [r2, #4]
 801e8c4:	c303      	stmia	r3!, {r0, r1}
 801e8c6:	4629      	mov	r1, r5
 801e8c8:	4668      	mov	r0, sp
 801e8ca:	f7fb fa7b 	bl	8019dc4 <_ZN8touchgfx4RectaNERKS0_>
 801e8ce:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801e8d2:	b12b      	cbz	r3, 801e8e0 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 801e8d4:	4669      	mov	r1, sp
 801e8d6:	4620      	mov	r0, r4
 801e8d8:	f7ff ffbf 	bl	801e85a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801e8dc:	b005      	add	sp, #20
 801e8de:	bd30      	pop	{r4, r5, pc}
 801e8e0:	3404      	adds	r4, #4
 801e8e2:	a802      	add	r0, sp, #8
 801e8e4:	4621      	mov	r1, r4
 801e8e6:	f7ff fc63 	bl	801e1b0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801e8ea:	f8bd 3000 	ldrh.w	r3, [sp]
 801e8ee:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801e8f2:	4669      	mov	r1, sp
 801e8f4:	4620      	mov	r0, r4
 801e8f6:	1a9b      	subs	r3, r3, r2
 801e8f8:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801e8fc:	f8ad 3000 	strh.w	r3, [sp]
 801e900:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801e904:	1a9b      	subs	r3, r3, r2
 801e906:	f8ad 3002 	strh.w	r3, [sp, #2]
 801e90a:	f7fb fafa 	bl	8019f02 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801e90e:	e7e5      	b.n	801e8dc <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0801e910 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801e910:	460b      	mov	r3, r1
 801e912:	680a      	ldr	r2, [r1, #0]
 801e914:	1d01      	adds	r1, r0, #4
 801e916:	6992      	ldr	r2, [r2, #24]
 801e918:	4618      	mov	r0, r3
 801e91a:	4710      	bx	r2

0801e91c <_ZN8touchgfx12TextProviderC1Ev>:
 801e91c:	b538      	push	{r3, r4, r5, lr}
 801e91e:	2500      	movs	r5, #0
 801e920:	2302      	movs	r3, #2
 801e922:	4604      	mov	r4, r0
 801e924:	220e      	movs	r2, #14
 801e926:	7403      	strb	r3, [r0, #16]
 801e928:	4629      	mov	r1, r5
 801e92a:	6145      	str	r5, [r0, #20]
 801e92c:	7605      	strb	r5, [r0, #24]
 801e92e:	83c5      	strh	r5, [r0, #30]
 801e930:	8405      	strh	r5, [r0, #32]
 801e932:	86c5      	strh	r5, [r0, #54]	; 0x36
 801e934:	8705      	strh	r5, [r0, #56]	; 0x38
 801e936:	87c5      	strh	r5, [r0, #62]	; 0x3e
 801e938:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 801e93c:	e9c0 5500 	strd	r5, r5, [r0]
 801e940:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 801e944:	304c      	adds	r0, #76	; 0x4c
 801e946:	f00a fd0a 	bl	802935e <memset>
 801e94a:	2301      	movs	r3, #1
 801e94c:	4620      	mov	r0, r4
 801e94e:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 801e952:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801e956:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 801e95a:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 801e95e:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 801e962:	f7e7 fbf1 	bl	8006148 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801e966:	4620      	mov	r0, r4
 801e968:	bd38      	pop	{r3, r4, r5, pc}

0801e96a <_ZN8touchgfx12TextProvider11endOfStringEv>:
 801e96a:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801e96c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801e970:	8c40      	ldrh	r0, [r0, #34]	; 0x22
 801e972:	fab0 f080 	clz	r0, r0
 801e976:	0940      	lsrs	r0, r0, #5
 801e978:	4770      	bx	lr

0801e97a <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801e97a:	b530      	push	{r4, r5, lr}
 801e97c:	2500      	movs	r5, #0
 801e97e:	2401      	movs	r4, #1
 801e980:	6843      	ldr	r3, [r0, #4]
 801e982:	b913      	cbnz	r3, 801e98a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801e984:	6803      	ldr	r3, [r0, #0]
 801e986:	b313      	cbz	r3, 801e9ce <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801e988:	6043      	str	r3, [r0, #4]
 801e98a:	7e03      	ldrb	r3, [r0, #24]
 801e98c:	b143      	cbz	r3, 801e9a0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801e98e:	6943      	ldr	r3, [r0, #20]
 801e990:	b12b      	cbz	r3, 801e99e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801e992:	881a      	ldrh	r2, [r3, #0]
 801e994:	b11a      	cbz	r2, 801e99e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801e996:	1c9a      	adds	r2, r3, #2
 801e998:	6142      	str	r2, [r0, #20]
 801e99a:	8818      	ldrh	r0, [r3, #0]
 801e99c:	bd30      	pop	{r4, r5, pc}
 801e99e:	7605      	strb	r5, [r0, #24]
 801e9a0:	6843      	ldr	r3, [r0, #4]
 801e9a2:	8819      	ldrh	r1, [r3, #0]
 801e9a4:	b199      	cbz	r1, 801e9ce <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801e9a6:	1c9a      	adds	r2, r3, #2
 801e9a8:	2902      	cmp	r1, #2
 801e9aa:	6042      	str	r2, [r0, #4]
 801e9ac:	d1f5      	bne.n	801e99a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801e9ae:	7c03      	ldrb	r3, [r0, #16]
 801e9b0:	2b01      	cmp	r3, #1
 801e9b2:	d8e5      	bhi.n	801e980 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801e9b4:	1c5a      	adds	r2, r3, #1
 801e9b6:	3302      	adds	r3, #2
 801e9b8:	7402      	strb	r2, [r0, #16]
 801e9ba:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801e9be:	6143      	str	r3, [r0, #20]
 801e9c0:	2b00      	cmp	r3, #0
 801e9c2:	d0dd      	beq.n	801e980 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801e9c4:	881b      	ldrh	r3, [r3, #0]
 801e9c6:	2b00      	cmp	r3, #0
 801e9c8:	d0da      	beq.n	801e980 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801e9ca:	7604      	strb	r4, [r0, #24]
 801e9cc:	e7d8      	b.n	801e980 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801e9ce:	2000      	movs	r0, #0
 801e9d0:	e7e4      	b.n	801e99c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801e9d2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 801e9d2:	6001      	str	r1, [r0, #0]
 801e9d4:	2100      	movs	r1, #0
 801e9d6:	b430      	push	{r4, r5}
 801e9d8:	6041      	str	r1, [r0, #4]
 801e9da:	6815      	ldr	r5, [r2, #0]
 801e9dc:	6085      	str	r5, [r0, #8]
 801e9de:	6852      	ldr	r2, [r2, #4]
 801e9e0:	6443      	str	r3, [r0, #68]	; 0x44
 801e9e2:	9b02      	ldr	r3, [sp, #8]
 801e9e4:	60c2      	str	r2, [r0, #12]
 801e9e6:	7401      	strb	r1, [r0, #16]
 801e9e8:	6141      	str	r1, [r0, #20]
 801e9ea:	7601      	strb	r1, [r0, #24]
 801e9ec:	8701      	strh	r1, [r0, #56]	; 0x38
 801e9ee:	8401      	strh	r1, [r0, #32]
 801e9f0:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801e9f4:	6483      	str	r3, [r0, #72]	; 0x48
 801e9f6:	bc30      	pop	{r4, r5}
 801e9f8:	f7e7 bba6 	b.w	8006148 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801e9fc <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>:
 801e9fc:	b408      	push	{r3}
 801e9fe:	b510      	push	{r4, lr}
 801ea00:	b085      	sub	sp, #20
 801ea02:	ac07      	add	r4, sp, #28
 801ea04:	f854 3b04 	ldr.w	r3, [r4], #4
 801ea08:	9300      	str	r3, [sp, #0]
 801ea0a:	4613      	mov	r3, r2
 801ea0c:	4622      	mov	r2, r4
 801ea0e:	9403      	str	r4, [sp, #12]
 801ea10:	f7ff ffdf 	bl	801e9d2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801ea14:	b005      	add	sp, #20
 801ea16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ea1a:	b001      	add	sp, #4
 801ea1c:	4770      	bx	lr

0801ea1e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801ea1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ea20:	4605      	mov	r5, r0
 801ea22:	4608      	mov	r0, r1
 801ea24:	b1f1      	cbz	r1, 801ea64 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801ea26:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 801ea2a:	460b      	mov	r3, r1
 801ea2c:	f101 0708 	add.w	r7, r1, #8
 801ea30:	4622      	mov	r2, r4
 801ea32:	6818      	ldr	r0, [r3, #0]
 801ea34:	3308      	adds	r3, #8
 801ea36:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801ea3a:	4626      	mov	r6, r4
 801ea3c:	42bb      	cmp	r3, r7
 801ea3e:	c603      	stmia	r6!, {r0, r1}
 801ea40:	4634      	mov	r4, r6
 801ea42:	d1f6      	bne.n	801ea32 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801ea44:	6818      	ldr	r0, [r3, #0]
 801ea46:	6030      	str	r0, [r6, #0]
 801ea48:	4610      	mov	r0, r2
 801ea4a:	889b      	ldrh	r3, [r3, #4]
 801ea4c:	80b3      	strh	r3, [r6, #4]
 801ea4e:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 801ea52:	015b      	lsls	r3, r3, #5
 801ea54:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801ea58:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 801ea5c:	430b      	orrs	r3, r1
 801ea5e:	425b      	negs	r3, r3
 801ea60:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801ea64:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801ea66 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801ea66:	b538      	push	{r3, r4, r5, lr}
 801ea68:	460c      	mov	r4, r1
 801ea6a:	6811      	ldr	r1, [r2, #0]
 801ea6c:	4610      	mov	r0, r2
 801ea6e:	68cd      	ldr	r5, [r1, #12]
 801ea70:	4619      	mov	r1, r3
 801ea72:	47a8      	blx	r5
 801ea74:	2800      	cmp	r0, #0
 801ea76:	bf08      	it	eq
 801ea78:	4620      	moveq	r0, r4
 801ea7a:	bd38      	pop	{r3, r4, r5, pc}

0801ea7c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801ea7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ea7e:	4604      	mov	r4, r0
 801ea80:	4615      	mov	r5, r2
 801ea82:	4608      	mov	r0, r1
 801ea84:	b93a      	cbnz	r2, 801ea96 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801ea86:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801ea8a:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 801ea8e:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 801ea92:	4628      	mov	r0, r5
 801ea94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ea96:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801ea9a:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
 801ea9e:	8893      	ldrh	r3, [r2, #4]
 801eaa0:	ea4f 160c 	mov.w	r6, ip, lsl #4
 801eaa4:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801eaa8:	79ee      	ldrb	r6, [r5, #7]
 801eaaa:	4316      	orrs	r6, r2
 801eaac:	19da      	adds	r2, r3, r7
 801eaae:	b291      	uxth	r1, r2
 801eab0:	b2b7      	uxth	r7, r6
 801eab2:	291d      	cmp	r1, #29
 801eab4:	d87b      	bhi.n	801ebae <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 801eab6:	2201      	movs	r2, #1
 801eab8:	10f6      	asrs	r6, r6, #3
 801eaba:	408a      	lsls	r2, r1
 801eabc:	4974      	ldr	r1, [pc, #464]	; (801ec90 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 801eabe:	420a      	tst	r2, r1
 801eac0:	d12e      	bne.n	801eb20 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 801eac2:	f412 7f60 	tst.w	r2, #896	; 0x380
 801eac6:	d072      	beq.n	801ebae <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 801eac8:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 801eacc:	462b      	mov	r3, r5
 801eace:	f105 0e08 	add.w	lr, r5, #8
 801ead2:	4615      	mov	r5, r2
 801ead4:	6818      	ldr	r0, [r3, #0]
 801ead6:	3308      	adds	r3, #8
 801ead8:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801eadc:	4694      	mov	ip, r2
 801eade:	4573      	cmp	r3, lr
 801eae0:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801eae4:	4662      	mov	r2, ip
 801eae6:	d1f5      	bne.n	801ead4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 801eae8:	6818      	ldr	r0, [r3, #0]
 801eaea:	f8cc 0000 	str.w	r0, [ip]
 801eaee:	889b      	ldrh	r3, [r3, #4]
 801eaf0:	f8ac 3004 	strh.w	r3, [ip, #4]
 801eaf4:	b2b3      	uxth	r3, r6
 801eaf6:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801eafa:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 801eafe:	1aca      	subs	r2, r1, r3
 801eb00:	1bcf      	subs	r7, r1, r7
 801eb02:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 801eb06:	b292      	uxth	r2, r2
 801eb08:	1afb      	subs	r3, r7, r3
 801eb0a:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 801eb0e:	10d2      	asrs	r2, r2, #3
 801eb10:	f002 0260 	and.w	r2, r2, #96	; 0x60
 801eb14:	4302      	orrs	r2, r0
 801eb16:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 801eb1a:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801eb1e:	e7b8      	b.n	801ea92 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801eb20:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801eb22:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801eb26:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 801eb28:	f640 6333 	movw	r3, #3635	; 0xe33
 801eb2c:	4299      	cmp	r1, r3
 801eb2e:	d110      	bne.n	801eb52 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
 801eb30:	6803      	ldr	r3, [r0, #0]
 801eb32:	68db      	ldr	r3, [r3, #12]
 801eb34:	4798      	blx	r3
 801eb36:	7b41      	ldrb	r1, [r0, #13]
 801eb38:	00cb      	lsls	r3, r1, #3
 801eb3a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801eb3e:	7a03      	ldrb	r3, [r0, #8]
 801eb40:	0648      	lsls	r0, r1, #25
 801eb42:	ea43 0302 	orr.w	r3, r3, r2
 801eb46:	bf44      	itt	mi
 801eb48:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801eb4c:	b21b      	sxthmi	r3, r3
 801eb4e:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801eb52:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 801eb56:	462a      	mov	r2, r5
 801eb58:	f105 0c08 	add.w	ip, r5, #8
 801eb5c:	443b      	add	r3, r7
 801eb5e:	4433      	add	r3, r6
 801eb60:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 801eb64:	b29b      	uxth	r3, r3
 801eb66:	4635      	mov	r5, r6
 801eb68:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801eb6c:	6810      	ldr	r0, [r2, #0]
 801eb6e:	3208      	adds	r2, #8
 801eb70:	f852 1c04 	ldr.w	r1, [r2, #-4]
 801eb74:	4637      	mov	r7, r6
 801eb76:	4562      	cmp	r2, ip
 801eb78:	c703      	stmia	r7!, {r0, r1}
 801eb7a:	463e      	mov	r6, r7
 801eb7c:	d1f6      	bne.n	801eb6c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
 801eb7e:	6810      	ldr	r0, [r2, #0]
 801eb80:	6038      	str	r0, [r7, #0]
 801eb82:	8892      	ldrh	r2, [r2, #4]
 801eb84:	80ba      	strh	r2, [r7, #4]
 801eb86:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801eb8a:	10db      	asrs	r3, r3, #3
 801eb8c:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801eb90:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801eb94:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801eb98:	4313      	orrs	r3, r2
 801eb9a:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 801eb9e:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801eba2:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 801eba6:	1a9b      	subs	r3, r3, r2
 801eba8:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 801ebac:	e771      	b.n	801ea92 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801ebae:	f023 0204 	bic.w	r2, r3, #4
 801ebb2:	f640 611b 	movw	r1, #3611	; 0xe1b
 801ebb6:	428a      	cmp	r2, r1
 801ebb8:	d003      	beq.n	801ebc2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x146>
 801ebba:	f640 621d 	movw	r2, #3613	; 0xe1d
 801ebbe:	4293      	cmp	r3, r2
 801ebc0:	d120      	bne.n	801ec04 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x188>
 801ebc2:	3b01      	subs	r3, #1
 801ebc4:	4602      	mov	r2, r0
 801ebc6:	4629      	mov	r1, r5
 801ebc8:	4620      	mov	r0, r4
 801ebca:	b29b      	uxth	r3, r3
 801ebcc:	f7ff ff4b 	bl	801ea66 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801ebd0:	7b41      	ldrb	r1, [r0, #13]
 801ebd2:	00cb      	lsls	r3, r1, #3
 801ebd4:	0649      	lsls	r1, r1, #25
 801ebd6:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801ebda:	7a03      	ldrb	r3, [r0, #8]
 801ebdc:	ea43 0302 	orr.w	r3, r3, r2
 801ebe0:	bf44      	itt	mi
 801ebe2:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801ebe6:	b21b      	sxthmi	r3, r3
 801ebe8:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801ebec:	7b6b      	ldrb	r3, [r5, #13]
 801ebee:	7aaa      	ldrb	r2, [r5, #10]
 801ebf0:	005b      	lsls	r3, r3, #1
 801ebf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801ebf6:	4313      	orrs	r3, r2
 801ebf8:	115a      	asrs	r2, r3, #5
 801ebfa:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801ebfe:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801ec02:	e035      	b.n	801ec70 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
 801ec04:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 801ec08:	f01c 0f40 	tst.w	ip, #64	; 0x40
 801ec0c:	f402 7180 	and.w	r1, r2, #256	; 0x100
 801ec10:	7a2a      	ldrb	r2, [r5, #8]
 801ec12:	ea42 0201 	orr.w	r2, r2, r1
 801ec16:	f640 6109 	movw	r1, #3593	; 0xe09
 801ec1a:	bf1c      	itt	ne
 801ec1c:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 801ec20:	b212      	sxthne	r2, r2
 801ec22:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801ec26:	f023 0210 	bic.w	r2, r3, #16
 801ec2a:	428a      	cmp	r2, r1
 801ec2c:	d003      	beq.n	801ec36 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 801ec2e:	f640 6213 	movw	r2, #3603	; 0xe13
 801ec32:	4293      	cmp	r3, r2
 801ec34:	d129      	bne.n	801ec8a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
 801ec36:	7b6e      	ldrb	r6, [r5, #13]
 801ec38:	4629      	mov	r1, r5
 801ec3a:	0076      	lsls	r6, r6, #1
 801ec3c:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801ec40:	7aae      	ldrb	r6, [r5, #10]
 801ec42:	4316      	orrs	r6, r2
 801ec44:	f640 6213 	movw	r2, #3603	; 0xe13
 801ec48:	4293      	cmp	r3, r2
 801ec4a:	4602      	mov	r2, r0
 801ec4c:	4620      	mov	r0, r4
 801ec4e:	bf16      	itet	ne
 801ec50:	f103 33ff 	addne.w	r3, r3, #4294967295
 801ec54:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801ec58:	b29b      	uxthne	r3, r3
 801ec5a:	f7ff ff04 	bl	801ea66 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801ec5e:	7b43      	ldrb	r3, [r0, #13]
 801ec60:	7a82      	ldrb	r2, [r0, #10]
 801ec62:	005b      	lsls	r3, r3, #1
 801ec64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801ec68:	4313      	orrs	r3, r2
 801ec6a:	1af6      	subs	r6, r6, r3
 801ec6c:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 801ec70:	7b69      	ldrb	r1, [r5, #13]
 801ec72:	00cb      	lsls	r3, r1, #3
 801ec74:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801ec78:	7a2b      	ldrb	r3, [r5, #8]
 801ec7a:	4313      	orrs	r3, r2
 801ec7c:	064a      	lsls	r2, r1, #25
 801ec7e:	bf44      	itt	mi
 801ec80:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801ec84:	b21b      	sxthmi	r3, r3
 801ec86:	1bdb      	subs	r3, r3, r7
 801ec88:	e747      	b.n	801eb1a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 801ec8a:	2300      	movs	r3, #0
 801ec8c:	e7b7      	b.n	801ebfe <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x182>
 801ec8e:	bf00      	nop
 801ec90:	3fc00079 	.word	0x3fc00079

0801ec94 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801ec94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ec98:	4604      	mov	r4, r0
 801ec9a:	b942      	cbnz	r2, 801ecae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801ec9c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801eca0:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 801eca4:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 801eca8:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801ecac:	e047      	b.n	801ed3e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801ecae:	7b51      	ldrb	r1, [r2, #13]
 801ecb0:	8893      	ldrh	r3, [r2, #4]
 801ecb2:	010d      	lsls	r5, r1, #4
 801ecb4:	f405 7080 	and.w	r0, r5, #256	; 0x100
 801ecb8:	79d5      	ldrb	r5, [r2, #7]
 801ecba:	4305      	orrs	r5, r0
 801ecbc:	2d04      	cmp	r5, #4
 801ecbe:	bfcc      	ite	gt
 801ecc0:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 801ecc4:	f04f 0e01 	movle.w	lr, #1
 801ecc8:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 801eccc:	f200 80ab 	bhi.w	801ee26 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 801ecd0:	f240 60e7 	movw	r0, #1767	; 0x6e7
 801ecd4:	4283      	cmp	r3, r0
 801ecd6:	d216      	bcs.n	801ed06 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801ecd8:	f240 605b 	movw	r0, #1627	; 0x65b
 801ecdc:	4283      	cmp	r3, r0
 801ecde:	d859      	bhi.n	801ed94 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 801ece0:	f240 6057 	movw	r0, #1623	; 0x657
 801ece4:	4283      	cmp	r3, r0
 801ece6:	d20e      	bcs.n	801ed06 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801ece8:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801ecec:	d24a      	bcs.n	801ed84 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 801ecee:	f240 604e 	movw	r0, #1614	; 0x64e
 801ecf2:	4283      	cmp	r3, r0
 801ecf4:	d207      	bcs.n	801ed06 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801ecf6:	f240 601a 	movw	r0, #1562	; 0x61a
 801ecfa:	4283      	cmp	r3, r0
 801ecfc:	d02a      	beq.n	801ed54 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801ecfe:	d821      	bhi.n	801ed44 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 801ed00:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 801ed04:	d35b      	bcc.n	801edbe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801ed06:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 801ed0a:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801ed0e:	f040 80d0 	bne.w	801eeb2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801ed12:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 801ed16:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801ed1a:	f040 80ca 	bne.w	801eeb2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801ed1e:	00cb      	lsls	r3, r1, #3
 801ed20:	0649      	lsls	r1, r1, #25
 801ed22:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801ed26:	7a13      	ldrb	r3, [r2, #8]
 801ed28:	ea43 0300 	orr.w	r3, r3, r0
 801ed2c:	bf44      	itt	mi
 801ed2e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801ed32:	b21b      	sxthmi	r3, r3
 801ed34:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801ed38:	1b5d      	subs	r5, r3, r5
 801ed3a:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801ed3e:	4610      	mov	r0, r2
 801ed40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ed44:	f240 604b 	movw	r0, #1611	; 0x64b
 801ed48:	4283      	cmp	r3, r0
 801ed4a:	d338      	bcc.n	801edbe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801ed4c:	f240 604c 	movw	r0, #1612	; 0x64c
 801ed50:	4283      	cmp	r3, r0
 801ed52:	d9d8      	bls.n	801ed06 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801ed54:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 801ed58:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 801ed5c:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801ed60:	f040 80f3 	bne.w	801ef4a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 801ed64:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801ed68:	f040 80ef 	bne.w	801ef4a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 801ed6c:	00cb      	lsls	r3, r1, #3
 801ed6e:	064e      	lsls	r6, r1, #25
 801ed70:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801ed74:	7a13      	ldrb	r3, [r2, #8]
 801ed76:	ea43 0300 	orr.w	r3, r3, r0
 801ed7a:	bf44      	itt	mi
 801ed7c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801ed80:	b21b      	sxthmi	r3, r3
 801ed82:	e7d9      	b.n	801ed38 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 801ed84:	f240 6054 	movw	r0, #1620	; 0x654
 801ed88:	4283      	cmp	r3, r0
 801ed8a:	d8e3      	bhi.n	801ed54 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801ed8c:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801ed90:	d9e0      	bls.n	801ed54 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801ed92:	e7b8      	b.n	801ed06 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801ed94:	f240 6074 	movw	r0, #1652	; 0x674
 801ed98:	4283      	cmp	r3, r0
 801ed9a:	d0b4      	beq.n	801ed06 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801ed9c:	d82d      	bhi.n	801edfa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 801ed9e:	f240 605e 	movw	r0, #1630	; 0x65e
 801eda2:	4283      	cmp	r3, r0
 801eda4:	d804      	bhi.n	801edb0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 801eda6:	f240 605d 	movw	r0, #1629	; 0x65d
 801edaa:	4283      	cmp	r3, r0
 801edac:	d3d2      	bcc.n	801ed54 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801edae:	e7aa      	b.n	801ed06 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801edb0:	f240 605f 	movw	r0, #1631	; 0x65f
 801edb4:	4283      	cmp	r3, r0
 801edb6:	d0cd      	beq.n	801ed54 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801edb8:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 801edbc:	d0a3      	beq.n	801ed06 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801edbe:	00cb      	lsls	r3, r1, #3
 801edc0:	0649      	lsls	r1, r1, #25
 801edc2:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801edc6:	7a13      	ldrb	r3, [r2, #8]
 801edc8:	ea43 0300 	orr.w	r3, r3, r0
 801edcc:	bf44      	itt	mi
 801edce:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801edd2:	b21b      	sxthmi	r3, r3
 801edd4:	1b5d      	subs	r5, r3, r5
 801edd6:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801edda:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801edde:	7b53      	ldrb	r3, [r2, #13]
 801ede0:	015b      	lsls	r3, r3, #5
 801ede2:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801ede6:	7993      	ldrb	r3, [r2, #6]
 801ede8:	430b      	orrs	r3, r1
 801edea:	2105      	movs	r1, #5
 801edec:	005b      	lsls	r3, r3, #1
 801edee:	fb93 f3f1 	sdiv	r3, r3, r1
 801edf2:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801edf6:	440b      	add	r3, r1
 801edf8:	e756      	b.n	801eca8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801edfa:	f240 60e2 	movw	r0, #1762	; 0x6e2
 801edfe:	4283      	cmp	r3, r0
 801ee00:	d809      	bhi.n	801ee16 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 801ee02:	f240 60df 	movw	r0, #1759	; 0x6df
 801ee06:	4283      	cmp	r3, r0
 801ee08:	f4bf af7d 	bcs.w	801ed06 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801ee0c:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 801ee10:	2b05      	cmp	r3, #5
 801ee12:	d8d4      	bhi.n	801edbe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801ee14:	e777      	b.n	801ed06 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801ee16:	f240 60e3 	movw	r0, #1763	; 0x6e3
 801ee1a:	4283      	cmp	r3, r0
 801ee1c:	d09a      	beq.n	801ed54 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801ee1e:	f240 60e4 	movw	r0, #1764	; 0x6e4
 801ee22:	4283      	cmp	r3, r0
 801ee24:	e7ca      	b.n	801edbc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801ee26:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 801ee2a:	d22b      	bcs.n	801ee84 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 801ee2c:	f640 00ed 	movw	r0, #2285	; 0x8ed
 801ee30:	4283      	cmp	r3, r0
 801ee32:	d28f      	bcs.n	801ed54 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801ee34:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801ee38:	4283      	cmp	r3, r0
 801ee3a:	d816      	bhi.n	801ee6a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 801ee3c:	f640 00e4 	movw	r0, #2276	; 0x8e4
 801ee40:	4283      	cmp	r3, r0
 801ee42:	f4bf af60 	bcs.w	801ed06 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801ee46:	f240 60ec 	movw	r0, #1772	; 0x6ec
 801ee4a:	4283      	cmp	r3, r0
 801ee4c:	d80a      	bhi.n	801ee64 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 801ee4e:	f240 60eb 	movw	r0, #1771	; 0x6eb
 801ee52:	4283      	cmp	r3, r0
 801ee54:	f4bf af57 	bcs.w	801ed06 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801ee58:	f240 60ea 	movw	r0, #1770	; 0x6ea
 801ee5c:	4283      	cmp	r3, r0
 801ee5e:	f43f af79 	beq.w	801ed54 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801ee62:	e7ac      	b.n	801edbe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801ee64:	f240 60ed 	movw	r0, #1773	; 0x6ed
 801ee68:	e7f8      	b.n	801ee5c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 801ee6a:	f640 00e8 	movw	r0, #2280	; 0x8e8
 801ee6e:	4283      	cmp	r3, r0
 801ee70:	d802      	bhi.n	801ee78 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 801ee72:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801ee76:	e798      	b.n	801edaa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 801ee78:	f640 00e9 	movw	r0, #2281	; 0x8e9
 801ee7c:	4283      	cmp	r3, r0
 801ee7e:	f47f af42 	bne.w	801ed06 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801ee82:	e767      	b.n	801ed54 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801ee84:	f640 00f6 	movw	r0, #2294	; 0x8f6
 801ee88:	4283      	cmp	r3, r0
 801ee8a:	f43f af63 	beq.w	801ed54 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801ee8e:	d802      	bhi.n	801ee96 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 801ee90:	f640 00f2 	movw	r0, #2290	; 0x8f2
 801ee94:	e7f2      	b.n	801ee7c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 801ee96:	f640 00fa 	movw	r0, #2298	; 0x8fa
 801ee9a:	4283      	cmp	r3, r0
 801ee9c:	d805      	bhi.n	801eeaa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 801ee9e:	f640 00f9 	movw	r0, #2297	; 0x8f9
 801eea2:	4283      	cmp	r3, r0
 801eea4:	f4ff af2f 	bcc.w	801ed06 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801eea8:	e754      	b.n	801ed54 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801eeaa:	f640 00fe 	movw	r0, #2302	; 0x8fe
 801eeae:	4283      	cmp	r3, r0
 801eeb0:	e7af      	b.n	801ee12 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 801eeb2:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801eeb6:	4617      	mov	r7, r2
 801eeb8:	f102 0808 	add.w	r8, r2, #8
 801eebc:	4666      	mov	r6, ip
 801eebe:	6838      	ldr	r0, [r7, #0]
 801eec0:	3708      	adds	r7, #8
 801eec2:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801eec6:	46e6      	mov	lr, ip
 801eec8:	4547      	cmp	r7, r8
 801eeca:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801eece:	46f4      	mov	ip, lr
 801eed0:	d1f5      	bne.n	801eebe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 801eed2:	6838      	ldr	r0, [r7, #0]
 801eed4:	f8ce 0000 	str.w	r0, [lr]
 801eed8:	88b9      	ldrh	r1, [r7, #4]
 801eeda:	f8ae 1004 	strh.w	r1, [lr, #4]
 801eede:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801eee2:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801eee6:	d009      	beq.n	801eefc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 801eee8:	7b51      	ldrb	r1, [r2, #13]
 801eeea:	7992      	ldrb	r2, [r2, #6]
 801eeec:	0149      	lsls	r1, r1, #5
 801eeee:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801eef2:	4311      	orrs	r1, r2
 801eef4:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801eef8:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801eefc:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801ef00:	b2ad      	uxth	r5, r5
 801ef02:	d00d      	beq.n	801ef20 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 801ef04:	442b      	add	r3, r5
 801ef06:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801ef0a:	b29b      	uxth	r3, r3
 801ef0c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801ef10:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801ef14:	10db      	asrs	r3, r3, #3
 801ef16:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801ef1a:	4313      	orrs	r3, r2
 801ef1c:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801ef20:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801ef24:	00cb      	lsls	r3, r1, #3
 801ef26:	064f      	lsls	r7, r1, #25
 801ef28:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801ef2c:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801ef30:	ea43 0302 	orr.w	r3, r3, r2
 801ef34:	bf44      	itt	mi
 801ef36:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801ef3a:	b21b      	sxthmi	r3, r3
 801ef3c:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801ef40:	1b5b      	subs	r3, r3, r5
 801ef42:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801ef46:	4632      	mov	r2, r6
 801ef48:	e6f9      	b.n	801ed3e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801ef4a:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801ef4e:	4617      	mov	r7, r2
 801ef50:	f102 0908 	add.w	r9, r2, #8
 801ef54:	4666      	mov	r6, ip
 801ef56:	6838      	ldr	r0, [r7, #0]
 801ef58:	3708      	adds	r7, #8
 801ef5a:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801ef5e:	46e0      	mov	r8, ip
 801ef60:	454f      	cmp	r7, r9
 801ef62:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801ef66:	46c4      	mov	ip, r8
 801ef68:	d1f5      	bne.n	801ef56 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 801ef6a:	6838      	ldr	r0, [r7, #0]
 801ef6c:	f8c8 0000 	str.w	r0, [r8]
 801ef70:	88b9      	ldrh	r1, [r7, #4]
 801ef72:	f8a8 1004 	strh.w	r1, [r8, #4]
 801ef76:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801ef7a:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801ef7e:	d009      	beq.n	801ef94 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 801ef80:	7b51      	ldrb	r1, [r2, #13]
 801ef82:	7992      	ldrb	r2, [r2, #6]
 801ef84:	0149      	lsls	r1, r1, #5
 801ef86:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801ef8a:	4311      	orrs	r1, r2
 801ef8c:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801ef90:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801ef94:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801ef98:	d00e      	beq.n	801efb8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 801ef9a:	eba3 030e 	sub.w	r3, r3, lr
 801ef9e:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801efa2:	b29b      	uxth	r3, r3
 801efa4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801efa8:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801efac:	10db      	asrs	r3, r3, #3
 801efae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801efb2:	4313      	orrs	r3, r2
 801efb4:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801efb8:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801efbc:	00cb      	lsls	r3, r1, #3
 801efbe:	0648      	lsls	r0, r1, #25
 801efc0:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801efc4:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801efc8:	ea43 0302 	orr.w	r3, r3, r2
 801efcc:	bf44      	itt	mi
 801efce:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801efd2:	b21b      	sxthmi	r3, r3
 801efd4:	1b5d      	subs	r5, r3, r5
 801efd6:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801efda:	e7b4      	b.n	801ef46 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

0801efdc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801efdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801efe0:	461e      	mov	r6, r3
 801efe2:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801efe4:	4604      	mov	r4, r0
 801efe6:	4617      	mov	r7, r2
 801efe8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801efec:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801eff0:	f7e7 f804 	bl	8005ffc <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801eff4:	4605      	mov	r5, r0
 801eff6:	b918      	cbnz	r0, 801f000 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 801eff8:	6030      	str	r0, [r6, #0]
 801effa:	4628      	mov	r0, r5
 801effc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f000:	683b      	ldr	r3, [r7, #0]
 801f002:	4601      	mov	r1, r0
 801f004:	4638      	mov	r0, r7
 801f006:	68db      	ldr	r3, [r3, #12]
 801f008:	4798      	blx	r3
 801f00a:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801f00e:	4602      	mov	r2, r0
 801f010:	6030      	str	r0, [r6, #0]
 801f012:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801f016:	d213      	bcs.n	801f040 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 801f018:	4643      	mov	r3, r8
 801f01a:	4639      	mov	r1, r7
 801f01c:	4620      	mov	r0, r4
 801f01e:	f7ff fe39 	bl	801ec94 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801f022:	6030      	str	r0, [r6, #0]
 801f024:	6833      	ldr	r3, [r6, #0]
 801f026:	b143      	cbz	r3, 801f03a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 801f028:	7b5a      	ldrb	r2, [r3, #13]
 801f02a:	7a9b      	ldrb	r3, [r3, #10]
 801f02c:	0052      	lsls	r2, r2, #1
 801f02e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801f032:	4313      	orrs	r3, r2
 801f034:	bf0c      	ite	eq
 801f036:	2301      	moveq	r3, #1
 801f038:	2300      	movne	r3, #0
 801f03a:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801f03e:	e7dc      	b.n	801effa <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 801f040:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801f044:	b29b      	uxth	r3, r3
 801f046:	2b7f      	cmp	r3, #127	; 0x7f
 801f048:	d804      	bhi.n	801f054 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 801f04a:	4639      	mov	r1, r7
 801f04c:	4620      	mov	r0, r4
 801f04e:	f7ff fd15 	bl	801ea7c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801f052:	e7e6      	b.n	801f022 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 801f054:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801f058:	2b00      	cmp	r3, #0
 801f05a:	d0e3      	beq.n	801f024 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801f05c:	f640 1302 	movw	r3, #2306	; 0x902
 801f060:	429d      	cmp	r5, r3
 801f062:	d1df      	bne.n	801f024 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801f064:	4601      	mov	r1, r0
 801f066:	4620      	mov	r0, r4
 801f068:	f7ff fcd9 	bl	801ea1e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801f06c:	e7d9      	b.n	801f022 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

0801f06e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801f06e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f072:	461e      	mov	r6, r3
 801f074:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801f076:	4604      	mov	r4, r0
 801f078:	4617      	mov	r7, r2
 801f07a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801f07e:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801f082:	f7e6 ffbb 	bl	8005ffc <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801f086:	4605      	mov	r5, r0
 801f088:	b918      	cbnz	r0, 801f092 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 801f08a:	6030      	str	r0, [r6, #0]
 801f08c:	4628      	mov	r0, r5
 801f08e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f092:	683b      	ldr	r3, [r7, #0]
 801f094:	4601      	mov	r1, r0
 801f096:	4638      	mov	r0, r7
 801f098:	f8d3 9008 	ldr.w	r9, [r3, #8]
 801f09c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801f0a0:	47c8      	blx	r9
 801f0a2:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801f0a6:	4602      	mov	r2, r0
 801f0a8:	6030      	str	r0, [r6, #0]
 801f0aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801f0ae:	d213      	bcs.n	801f0d8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 801f0b0:	4643      	mov	r3, r8
 801f0b2:	4639      	mov	r1, r7
 801f0b4:	4620      	mov	r0, r4
 801f0b6:	f7ff fded 	bl	801ec94 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801f0ba:	6030      	str	r0, [r6, #0]
 801f0bc:	6833      	ldr	r3, [r6, #0]
 801f0be:	b143      	cbz	r3, 801f0d2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 801f0c0:	7b5a      	ldrb	r2, [r3, #13]
 801f0c2:	7a9b      	ldrb	r3, [r3, #10]
 801f0c4:	0052      	lsls	r2, r2, #1
 801f0c6:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801f0ca:	4313      	orrs	r3, r2
 801f0cc:	bf0c      	ite	eq
 801f0ce:	2301      	moveq	r3, #1
 801f0d0:	2300      	movne	r3, #0
 801f0d2:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801f0d6:	e7d9      	b.n	801f08c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 801f0d8:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801f0dc:	b29b      	uxth	r3, r3
 801f0de:	2b7f      	cmp	r3, #127	; 0x7f
 801f0e0:	d804      	bhi.n	801f0ec <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 801f0e2:	4639      	mov	r1, r7
 801f0e4:	4620      	mov	r0, r4
 801f0e6:	f7ff fcc9 	bl	801ea7c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801f0ea:	e7e6      	b.n	801f0ba <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 801f0ec:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801f0f0:	2b00      	cmp	r3, #0
 801f0f2:	d0e3      	beq.n	801f0bc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801f0f4:	f640 1302 	movw	r3, #2306	; 0x902
 801f0f8:	429d      	cmp	r5, r3
 801f0fa:	d1df      	bne.n	801f0bc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801f0fc:	4601      	mov	r1, r0
 801f0fe:	4620      	mov	r0, r4
 801f100:	f7ff fc8d 	bl	801ea1e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801f104:	e7d9      	b.n	801f0ba <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

0801f106 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801f106:	b510      	push	{r4, lr}
 801f108:	4604      	mov	r4, r0
 801f10a:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 801f10e:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801f110:	b1e1      	cbz	r1, 801f14c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801f112:	2b0a      	cmp	r3, #10
 801f114:	d02d      	beq.n	801f172 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801f116:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 801f118:	3901      	subs	r1, #1
 801f11a:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801f11e:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 801f120:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 801f124:	1c51      	adds	r1, r2, #1
 801f126:	b289      	uxth	r1, r1
 801f128:	2901      	cmp	r1, #1
 801f12a:	bf8a      	itet	hi
 801f12c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801f130:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 801f132:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 801f134:	1c5a      	adds	r2, r3, #1
 801f136:	8722      	strh	r2, [r4, #56]	; 0x38
 801f138:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801f13a:	4413      	add	r3, r2
 801f13c:	b29b      	uxth	r3, r3
 801f13e:	2b09      	cmp	r3, #9
 801f140:	bf88      	it	hi
 801f142:	3b0a      	subhi	r3, #10
 801f144:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801f148:	8458      	strh	r0, [r3, #34]	; 0x22
 801f14a:	e7de      	b.n	801f10a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801f14c:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801f14e:	2b0a      	cmp	r3, #10
 801f150:	d00f      	beq.n	801f172 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801f152:	4620      	mov	r0, r4
 801f154:	f7ff fc11 	bl	801e97a <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801f158:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801f15a:	1c5a      	adds	r2, r3, #1
 801f15c:	8722      	strh	r2, [r4, #56]	; 0x38
 801f15e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801f160:	4413      	add	r3, r2
 801f162:	b29b      	uxth	r3, r3
 801f164:	2b09      	cmp	r3, #9
 801f166:	bf88      	it	hi
 801f168:	3b0a      	subhi	r3, #10
 801f16a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801f16e:	8458      	strh	r0, [r3, #34]	; 0x22
 801f170:	e7ec      	b.n	801f14c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801f172:	bd10      	pop	{r4, pc}

0801f174 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801f174:	b538      	push	{r3, r4, r5, lr}
 801f176:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801f178:	4604      	mov	r4, r0
 801f17a:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 801f17e:	8c55      	ldrh	r5, [r2, #34]	; 0x22
 801f180:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 801f182:	3a01      	subs	r2, #1
 801f184:	8702      	strh	r2, [r0, #56]	; 0x38
 801f186:	1c5a      	adds	r2, r3, #1
 801f188:	b292      	uxth	r2, r2
 801f18a:	2a09      	cmp	r2, #9
 801f18c:	bf8a      	itet	hi
 801f18e:	3b09      	subhi	r3, #9
 801f190:	86c2      	strhls	r2, [r0, #54]	; 0x36
 801f192:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 801f194:	f7ff ffb7 	bl	801f106 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801f198:	8c23      	ldrh	r3, [r4, #32]
 801f19a:	2b01      	cmp	r3, #1
 801f19c:	bf9c      	itt	ls
 801f19e:	3301      	addls	r3, #1
 801f1a0:	8423      	strhls	r3, [r4, #32]
 801f1a2:	8be3      	ldrh	r3, [r4, #30]
 801f1a4:	b90b      	cbnz	r3, 801f1aa <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 801f1a6:	2302      	movs	r3, #2
 801f1a8:	83e3      	strh	r3, [r4, #30]
 801f1aa:	8be3      	ldrh	r3, [r4, #30]
 801f1ac:	4628      	mov	r0, r5
 801f1ae:	3b01      	subs	r3, #1
 801f1b0:	b29b      	uxth	r3, r3
 801f1b2:	83e3      	strh	r3, [r4, #30]
 801f1b4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801f1b8:	8365      	strh	r5, [r4, #26]
 801f1ba:	bd38      	pop	{r3, r4, r5, pc}

0801f1bc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801f1bc:	428a      	cmp	r2, r1
 801f1be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f1c2:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
 801f1c4:	d932      	bls.n	801f22c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 801f1c6:	8f05      	ldrh	r5, [r0, #56]	; 0x38
 801f1c8:	1a54      	subs	r4, r2, r1
 801f1ca:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
 801f1ce:	19ee      	adds	r6, r5, r7
 801f1d0:	fa1f fe84 	uxth.w	lr, r4
 801f1d4:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 801f1d8:	3e01      	subs	r6, #1
 801f1da:	b2b4      	uxth	r4, r6
 801f1dc:	eba4 090e 	sub.w	r9, r4, lr
 801f1e0:	fa1f f989 	uxth.w	r9, r9
 801f1e4:	2c09      	cmp	r4, #9
 801f1e6:	4626      	mov	r6, r4
 801f1e8:	bf88      	it	hi
 801f1ea:	f1a4 060a 	subhi.w	r6, r4, #10
 801f1ee:	f1bc 0f00 	cmp.w	ip, #0
 801f1f2:	f104 34ff 	add.w	r4, r4, #4294967295
 801f1f6:	bf08      	it	eq
 801f1f8:	f04f 0c02 	moveq.w	ip, #2
 801f1fc:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801f200:	b2a4      	uxth	r4, r4
 801f202:	f10c 3cff 	add.w	ip, ip, #4294967295
 801f206:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
 801f20a:	454c      	cmp	r4, r9
 801f20c:	fa1f fc8c 	uxth.w	ip, ip
 801f210:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 801f214:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
 801f218:	d1e4      	bne.n	801f1e4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 801f21a:	eba5 050e 	sub.w	r5, r5, lr
 801f21e:	eb0e 0408 	add.w	r4, lr, r8
 801f222:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
 801f226:	8705      	strh	r5, [r0, #56]	; 0x38
 801f228:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 801f22c:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 801f22e:	250a      	movs	r5, #10
 801f230:	1a64      	subs	r4, r4, r1
 801f232:	4439      	add	r1, r7
 801f234:	b289      	uxth	r1, r1
 801f236:	8704      	strh	r4, [r0, #56]	; 0x38
 801f238:	2909      	cmp	r1, #9
 801f23a:	bf88      	it	hi
 801f23c:	390a      	subhi	r1, #10
 801f23e:	86c1      	strh	r1, [r0, #54]	; 0x36
 801f240:	b18a      	cbz	r2, 801f266 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 801f242:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 801f244:	3a01      	subs	r2, #1
 801f246:	3101      	adds	r1, #1
 801f248:	b292      	uxth	r2, r2
 801f24a:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801f24e:	8701      	strh	r1, [r0, #56]	; 0x38
 801f250:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801f252:	b901      	cbnz	r1, 801f256 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 801f254:	86c5      	strh	r5, [r0, #54]	; 0x36
 801f256:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801f258:	3901      	subs	r1, #1
 801f25a:	b289      	uxth	r1, r1
 801f25c:	86c1      	strh	r1, [r0, #54]	; 0x36
 801f25e:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801f262:	844c      	strh	r4, [r1, #34]	; 0x22
 801f264:	e7ec      	b.n	801f240 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 801f266:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f26a:	f7ff bf4c 	b.w	801f106 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0801f26e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801f26e:	b570      	push	{r4, r5, r6, lr}
 801f270:	2500      	movs	r5, #0
 801f272:	4295      	cmp	r5, r2
 801f274:	d011      	beq.n	801f29a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 801f276:	8bc4      	ldrh	r4, [r0, #30]
 801f278:	f831 6b02 	ldrh.w	r6, [r1], #2
 801f27c:	4414      	add	r4, r2
 801f27e:	3c01      	subs	r4, #1
 801f280:	1b64      	subs	r4, r4, r5
 801f282:	b2a4      	uxth	r4, r4
 801f284:	2c01      	cmp	r4, #1
 801f286:	bf88      	it	hi
 801f288:	3c02      	subhi	r4, #2
 801f28a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801f28e:	8b64      	ldrh	r4, [r4, #26]
 801f290:	42b4      	cmp	r4, r6
 801f292:	d117      	bne.n	801f2c4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 801f294:	3501      	adds	r5, #1
 801f296:	b2ad      	uxth	r5, r5
 801f298:	e7eb      	b.n	801f272 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 801f29a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801f29e:	2400      	movs	r4, #0
 801f2a0:	4413      	add	r3, r2
 801f2a2:	b2a2      	uxth	r2, r4
 801f2a4:	429a      	cmp	r2, r3
 801f2a6:	da0f      	bge.n	801f2c8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 801f2a8:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 801f2aa:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801f2ae:	3401      	adds	r4, #1
 801f2b0:	4432      	add	r2, r6
 801f2b2:	b292      	uxth	r2, r2
 801f2b4:	2a09      	cmp	r2, #9
 801f2b6:	bf88      	it	hi
 801f2b8:	3a0a      	subhi	r2, #10
 801f2ba:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801f2be:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 801f2c0:	42aa      	cmp	r2, r5
 801f2c2:	d0ee      	beq.n	801f2a2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 801f2c4:	2000      	movs	r0, #0
 801f2c6:	bd70      	pop	{r4, r5, r6, pc}
 801f2c8:	2001      	movs	r0, #1
 801f2ca:	e7fc      	b.n	801f2c6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

0801f2cc <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801f2cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f2d0:	4605      	mov	r5, r0
 801f2d2:	4616      	mov	r6, r2
 801f2d4:	1c8c      	adds	r4, r1, #2
 801f2d6:	8809      	ldrh	r1, [r1, #0]
 801f2d8:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801f2dc:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801f2e0:	42b3      	cmp	r3, r6
 801f2e2:	d124      	bne.n	801f32e <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801f2e4:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801f2e8:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801f2ec:	f001 070f 	and.w	r7, r1, #15
 801f2f0:	4652      	mov	r2, sl
 801f2f2:	f8cd 8000 	str.w	r8, [sp]
 801f2f6:	464b      	mov	r3, r9
 801f2f8:	4621      	mov	r1, r4
 801f2fa:	4628      	mov	r0, r5
 801f2fc:	f7ff ffb7 	bl	801f26e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801f300:	4683      	mov	fp, r0
 801f302:	b168      	cbz	r0, 801f320 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801f304:	eb0a 0109 	add.w	r1, sl, r9
 801f308:	463a      	mov	r2, r7
 801f30a:	4628      	mov	r0, r5
 801f30c:	4441      	add	r1, r8
 801f30e:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801f312:	4649      	mov	r1, r9
 801f314:	f7ff ff52 	bl	801f1bc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801f318:	4658      	mov	r0, fp
 801f31a:	b003      	add	sp, #12
 801f31c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f320:	eb07 010a 	add.w	r1, r7, sl
 801f324:	4449      	add	r1, r9
 801f326:	4441      	add	r1, r8
 801f328:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801f32c:	e7d2      	b.n	801f2d4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801f32e:	f04f 0b00 	mov.w	fp, #0
 801f332:	e7f1      	b.n	801f318 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801f334 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801f334:	b570      	push	{r4, r5, r6, lr}
 801f336:	8810      	ldrh	r0, [r2, #0]
 801f338:	4298      	cmp	r0, r3
 801f33a:	d817      	bhi.n	801f36c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801f33c:	1e48      	subs	r0, r1, #1
 801f33e:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801f342:	4298      	cmp	r0, r3
 801f344:	d312      	bcc.n	801f36c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801f346:	2400      	movs	r4, #0
 801f348:	428c      	cmp	r4, r1
 801f34a:	d20f      	bcs.n	801f36c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801f34c:	1860      	adds	r0, r4, r1
 801f34e:	1040      	asrs	r0, r0, #1
 801f350:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801f354:	0085      	lsls	r5, r0, #2
 801f356:	42b3      	cmp	r3, r6
 801f358:	d902      	bls.n	801f360 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801f35a:	3001      	adds	r0, #1
 801f35c:	b284      	uxth	r4, r0
 801f35e:	e7f3      	b.n	801f348 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801f360:	d201      	bcs.n	801f366 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801f362:	b281      	uxth	r1, r0
 801f364:	e7f0      	b.n	801f348 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801f366:	442a      	add	r2, r5
 801f368:	8850      	ldrh	r0, [r2, #2]
 801f36a:	bd70      	pop	{r4, r5, r6, pc}
 801f36c:	2000      	movs	r0, #0
 801f36e:	e7fc      	b.n	801f36a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801f370 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801f370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f374:	6c45      	ldr	r5, [r0, #68]	; 0x44
 801f376:	4604      	mov	r4, r0
 801f378:	260b      	movs	r6, #11
 801f37a:	886f      	ldrh	r7, [r5, #2]
 801f37c:	087f      	lsrs	r7, r7, #1
 801f37e:	3e01      	subs	r6, #1
 801f380:	d013      	beq.n	801f3aa <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801f382:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801f384:	462a      	mov	r2, r5
 801f386:	4639      	mov	r1, r7
 801f388:	4620      	mov	r0, r4
 801f38a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801f38e:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801f392:	4643      	mov	r3, r8
 801f394:	f7ff ffce 	bl	801f334 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801f398:	b138      	cbz	r0, 801f3aa <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801f39a:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801f39e:	4642      	mov	r2, r8
 801f3a0:	4620      	mov	r0, r4
 801f3a2:	f7ff ff93 	bl	801f2cc <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801f3a6:	2800      	cmp	r0, #0
 801f3a8:	d1e9      	bne.n	801f37e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801f3aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0801f3b0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801f3b0:	b570      	push	{r4, r5, r6, lr}
 801f3b2:	694a      	ldr	r2, [r1, #20]
 801f3b4:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801f3b6:	684b      	ldr	r3, [r1, #4]
 801f3b8:	1b54      	subs	r4, r2, r5
 801f3ba:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 801f3bc:	f000 8106 	beq.w	801f5cc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 801f3c0:	1b9b      	subs	r3, r3, r6
 801f3c2:	d003      	beq.n	801f3cc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801f3c4:	4363      	muls	r3, r4
 801f3c6:	2210      	movs	r2, #16
 801f3c8:	fb93 f3f2 	sdiv	r3, r3, r2
 801f3cc:	680c      	ldr	r4, [r1, #0]
 801f3ce:	698a      	ldr	r2, [r1, #24]
 801f3d0:	1b65      	subs	r5, r4, r5
 801f3d2:	f000 80fd 	beq.w	801f5d0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801f3d6:	1b92      	subs	r2, r2, r6
 801f3d8:	d003      	beq.n	801f3e2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801f3da:	436a      	muls	r2, r5
 801f3dc:	2410      	movs	r4, #16
 801f3de:	fb92 f2f4 	sdiv	r2, r2, r4
 801f3e2:	1a9b      	subs	r3, r3, r2
 801f3e4:	ed9f 4a89 	vldr	s8, [pc, #548]	; 801f60c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 801f3e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f3ec:	460a      	mov	r2, r1
 801f3ee:	ee07 3a90 	vmov	s15, r3
 801f3f2:	f100 040c 	add.w	r4, r0, #12
 801f3f6:	4603      	mov	r3, r0
 801f3f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f3fc:	ee67 7a84 	vmul.f32	s15, s15, s8
 801f400:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801f404:	eeb1 6a43 	vneg.f32	s12, s6
 801f408:	edd2 7a02 	vldr	s15, [r2, #8]
 801f40c:	3214      	adds	r2, #20
 801f40e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801f412:	ece3 6a01 	vstmia	r3!, {s13}
 801f416:	429c      	cmp	r4, r3
 801f418:	ed52 7a02 	vldr	s15, [r2, #-8]
 801f41c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801f420:	edc3 7a02 	vstr	s15, [r3, #8]
 801f424:	ed52 7a01 	vldr	s15, [r2, #-4]
 801f428:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801f42c:	edc3 7a05 	vstr	s15, [r3, #20]
 801f430:	d1ea      	bne.n	801f408 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801f432:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801f434:	698b      	ldr	r3, [r1, #24]
 801f436:	edd0 4a02 	vldr	s9, [r0, #8]
 801f43a:	1a9b      	subs	r3, r3, r2
 801f43c:	edd0 3a00 	vldr	s7, [r0]
 801f440:	edd0 6a01 	vldr	s13, [r0, #4]
 801f444:	ee07 3a90 	vmov	s15, r3
 801f448:	684b      	ldr	r3, [r1, #4]
 801f44a:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801f44e:	ed90 5a05 	vldr	s10, [r0, #20]
 801f452:	1a9b      	subs	r3, r3, r2
 801f454:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f458:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801f45c:	ed90 2a03 	vldr	s4, [r0, #12]
 801f460:	ee07 3a10 	vmov	s14, r3
 801f464:	edd0 5a04 	vldr	s11, [r0, #16]
 801f468:	ee67 7a84 	vmul.f32	s15, s15, s8
 801f46c:	ed90 1a07 	vldr	s2, [r0, #28]
 801f470:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801f474:	edd0 2a06 	vldr	s5, [r0, #24]
 801f478:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801f47c:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801f480:	ee27 7a04 	vmul.f32	s14, s14, s8
 801f484:	ee32 5a45 	vsub.f32	s10, s4, s10
 801f488:	eee6 7a87 	vfma.f32	s15, s13, s14
 801f48c:	ee67 7a83 	vmul.f32	s15, s15, s6
 801f490:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 801f494:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801f496:	694a      	ldr	r2, [r1, #20]
 801f498:	1b13      	subs	r3, r2, r4
 801f49a:	ee07 3a10 	vmov	s14, r3
 801f49e:	680b      	ldr	r3, [r1, #0]
 801f4a0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801f4a4:	1b1b      	subs	r3, r3, r4
 801f4a6:	ee27 7a04 	vmul.f32	s14, s14, s8
 801f4aa:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801f4ae:	ee07 3a10 	vmov	s14, r3
 801f4b2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801f4b6:	ee27 7a04 	vmul.f32	s14, s14, s8
 801f4ba:	eee6 4a87 	vfma.f32	s9, s13, s14
 801f4be:	ee64 4a86 	vmul.f32	s9, s9, s12
 801f4c2:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 801f4c6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801f4c8:	698b      	ldr	r3, [r1, #24]
 801f4ca:	1a9b      	subs	r3, r3, r2
 801f4cc:	ee06 3a90 	vmov	s13, r3
 801f4d0:	684b      	ldr	r3, [r1, #4]
 801f4d2:	1a9b      	subs	r3, r3, r2
 801f4d4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801f4d8:	ee07 3a10 	vmov	s14, r3
 801f4dc:	ee66 6a84 	vmul.f32	s13, s13, s8
 801f4e0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801f4e4:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801f4e8:	ee27 7a04 	vmul.f32	s14, s14, s8
 801f4ec:	eee5 6a87 	vfma.f32	s13, s11, s14
 801f4f0:	ee66 6a83 	vmul.f32	s13, s13, s6
 801f4f4:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 801f4f8:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801f4fa:	694a      	ldr	r2, [r1, #20]
 801f4fc:	1b13      	subs	r3, r2, r4
 801f4fe:	ee07 3a10 	vmov	s14, r3
 801f502:	680b      	ldr	r3, [r1, #0]
 801f504:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801f508:	1b1b      	subs	r3, r3, r4
 801f50a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801f50e:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801f512:	ee07 3a10 	vmov	s14, r3
 801f516:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801f51a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801f51e:	eea5 5a87 	vfma.f32	s10, s11, s14
 801f522:	edd0 5a08 	vldr	s11, [r0, #32]
 801f526:	ee31 1a65 	vsub.f32	s2, s2, s11
 801f52a:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801f52e:	ee25 5a06 	vmul.f32	s10, s10, s12
 801f532:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 801f536:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801f538:	698b      	ldr	r3, [r1, #24]
 801f53a:	1a9b      	subs	r3, r3, r2
 801f53c:	ee07 3a10 	vmov	s14, r3
 801f540:	684b      	ldr	r3, [r1, #4]
 801f542:	1a9b      	subs	r3, r3, r2
 801f544:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801f548:	ee01 3a90 	vmov	s3, r3
 801f54c:	ee27 7a04 	vmul.f32	s14, s14, s8
 801f550:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801f554:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801f558:	ee61 1a84 	vmul.f32	s3, s3, s8
 801f55c:	eea1 7a21 	vfma.f32	s14, s2, s3
 801f560:	ee27 7a03 	vmul.f32	s14, s14, s6
 801f564:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801f568:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801f56a:	694a      	ldr	r2, [r1, #20]
 801f56c:	1b13      	subs	r3, r2, r4
 801f56e:	ee03 3a10 	vmov	s6, r3
 801f572:	680b      	ldr	r3, [r1, #0]
 801f574:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801f578:	1b1b      	subs	r3, r3, r4
 801f57a:	ee23 3a04 	vmul.f32	s6, s6, s8
 801f57e:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801f582:	ee03 3a10 	vmov	s6, r3
 801f586:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801f58a:	ee23 4a04 	vmul.f32	s8, s6, s8
 801f58e:	eee1 5a04 	vfma.f32	s11, s2, s8
 801f592:	ee25 6a86 	vmul.f32	s12, s11, s12
 801f596:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801f59a:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 801f59e:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801f5a2:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801f5a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f5aa:	dd13      	ble.n	801f5d4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 801f5ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801f5b0:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801f5b4:	63c3      	str	r3, [r0, #60]	; 0x3c
 801f5b6:	eee3 7a87 	vfma.f32	s15, s7, s14
 801f5ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801f5be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f5c2:	dd15      	ble.n	801f5f0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 801f5c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801f5c8:	6403      	str	r3, [r0, #64]	; 0x40
 801f5ca:	bd70      	pop	{r4, r5, r6, pc}
 801f5cc:	4623      	mov	r3, r4
 801f5ce:	e6fd      	b.n	801f3cc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801f5d0:	462a      	mov	r2, r5
 801f5d2:	e706      	b.n	801f3e2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801f5d4:	d502      	bpl.n	801f5dc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801f5d6:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801f5da:	e7e9      	b.n	801f5b0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 801f5dc:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801f5e0:	eea3 2a85 	vfma.f32	s4, s7, s10
 801f5e4:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801f5e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f5ec:	dade      	bge.n	801f5ac <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801f5ee:	e7f2      	b.n	801f5d6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801f5f0:	d502      	bpl.n	801f5f8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801f5f2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801f5f6:	e7e7      	b.n	801f5c8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 801f5f8:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801f5fc:	eee3 4a86 	vfma.f32	s9, s7, s12
 801f600:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801f604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f608:	dadc      	bge.n	801f5c4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801f60a:	e7f2      	b.n	801f5f2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801f60c:	3d800000 	.word	0x3d800000

0801f610 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801f610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f614:	2714      	movs	r7, #20
 801f616:	435f      	muls	r7, r3
 801f618:	eb02 0c07 	add.w	ip, r2, r7
 801f61c:	f8dc 5004 	ldr.w	r5, [ip, #4]
 801f620:	f115 0e0f 	adds.w	lr, r5, #15
 801f624:	f100 80a2 	bmi.w	801f76c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801f628:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 801f62c:	9c08      	ldr	r4, [sp, #32]
 801f62e:	2614      	movs	r6, #20
 801f630:	f8c0 e014 	str.w	lr, [r0, #20]
 801f634:	4366      	muls	r6, r4
 801f636:	eb02 0806 	add.w	r8, r2, r6
 801f63a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801f63e:	f115 040f 	adds.w	r4, r5, #15
 801f642:	f100 809f 	bmi.w	801f784 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 801f646:	1124      	asrs	r4, r4, #4
 801f648:	eba4 040e 	sub.w	r4, r4, lr
 801f64c:	6184      	str	r4, [r0, #24]
 801f64e:	2c00      	cmp	r4, #0
 801f650:	f000 808a 	beq.w	801f768 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 801f654:	f8dc 9004 	ldr.w	r9, [ip, #4]
 801f658:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801f65c:	5995      	ldr	r5, [r2, r6]
 801f65e:	eba4 0809 	sub.w	r8, r4, r9
 801f662:	59d4      	ldr	r4, [r2, r7]
 801f664:	eba5 0a04 	sub.w	sl, r5, r4
 801f668:	ea4f 1608 	mov.w	r6, r8, lsl #4
 801f66c:	ea4f 150a 	mov.w	r5, sl, lsl #4
 801f670:	fb0e fe05 	mul.w	lr, lr, r5
 801f674:	fb0a ee19 	mls	lr, sl, r9, lr
 801f678:	fb08 e404 	mla	r4, r8, r4, lr
 801f67c:	3c01      	subs	r4, #1
 801f67e:	19a4      	adds	r4, r4, r6
 801f680:	f100 808c 	bmi.w	801f79c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 801f684:	fb94 fef6 	sdiv	lr, r4, r6
 801f688:	fb06 441e 	mls	r4, r6, lr, r4
 801f68c:	f8c0 e000 	str.w	lr, [r0]
 801f690:	6104      	str	r4, [r0, #16]
 801f692:	2d00      	cmp	r5, #0
 801f694:	f2c0 8095 	blt.w	801f7c2 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 801f698:	fb95 f4f6 	sdiv	r4, r5, r6
 801f69c:	fb06 5514 	mls	r5, r6, r4, r5
 801f6a0:	6044      	str	r4, [r0, #4]
 801f6a2:	6085      	str	r5, [r0, #8]
 801f6a4:	60c6      	str	r6, [r0, #12]
 801f6a6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801f6aa:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801f6ae:	6945      	ldr	r5, [r0, #20]
 801f6b0:	59d2      	ldr	r2, [r2, r7]
 801f6b2:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 801f6b6:	eddf 6a4b 	vldr	s13, [pc, #300]	; 801f7e4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 801f6ba:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 801f6be:	ee07 4a10 	vmov	s14, r4
 801f6c2:	6804      	ldr	r4, [r0, #0]
 801f6c4:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 801f6c8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801f6cc:	ee07 2a90 	vmov	s15, r2
 801f6d0:	ee27 7a26 	vmul.f32	s14, s14, s13
 801f6d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f6d8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801f6dc:	edd3 6a00 	vldr	s13, [r3]
 801f6e0:	eee6 6a07 	vfma.f32	s13, s12, s14
 801f6e4:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 801f6e8:	eee6 6a27 	vfma.f32	s13, s12, s15
 801f6ec:	edc0 6a07 	vstr	s13, [r0, #28]
 801f6f0:	edd0 6a01 	vldr	s13, [r0, #4]
 801f6f4:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 801f6f8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801f6fc:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 801f700:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801f704:	ed80 6a08 	vstr	s12, [r0, #32]
 801f708:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 801f70a:	6242      	str	r2, [r0, #36]	; 0x24
 801f70c:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 801f710:	ed93 6a03 	vldr	s12, [r3, #12]
 801f714:	eea5 6a87 	vfma.f32	s12, s11, s14
 801f718:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 801f71c:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801f720:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 801f724:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 801f728:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 801f72c:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801f730:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 801f734:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801f736:	6302      	str	r2, [r0, #48]	; 0x30
 801f738:	ed93 6a06 	vldr	s12, [r3, #24]
 801f73c:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 801f740:	eea5 6a87 	vfma.f32	s12, s11, s14
 801f744:	eeb0 7a46 	vmov.f32	s14, s12
 801f748:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 801f74c:	eea6 7a27 	vfma.f32	s14, s12, s15
 801f750:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801f754:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 801f758:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 801f75c:	eee6 7a87 	vfma.f32	s15, s13, s14
 801f760:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 801f764:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 801f766:	63c3      	str	r3, [r0, #60]	; 0x3c
 801f768:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f76c:	2410      	movs	r4, #16
 801f76e:	f1c5 0501 	rsb	r5, r5, #1
 801f772:	fb9e fef4 	sdiv	lr, lr, r4
 801f776:	f015 050f 	ands.w	r5, r5, #15
 801f77a:	bf18      	it	ne
 801f77c:	2501      	movne	r5, #1
 801f77e:	ebae 0e05 	sub.w	lr, lr, r5
 801f782:	e753      	b.n	801f62c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 801f784:	f04f 0910 	mov.w	r9, #16
 801f788:	f1c5 0501 	rsb	r5, r5, #1
 801f78c:	fb94 f4f9 	sdiv	r4, r4, r9
 801f790:	f015 050f 	ands.w	r5, r5, #15
 801f794:	bf18      	it	ne
 801f796:	2501      	movne	r5, #1
 801f798:	1b64      	subs	r4, r4, r5
 801f79a:	e755      	b.n	801f648 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 801f79c:	4264      	negs	r4, r4
 801f79e:	fb94 fef6 	sdiv	lr, r4, r6
 801f7a2:	f1ce 0800 	rsb	r8, lr, #0
 801f7a6:	fb06 441e 	mls	r4, r6, lr, r4
 801f7aa:	f8c0 8000 	str.w	r8, [r0]
 801f7ae:	6104      	str	r4, [r0, #16]
 801f7b0:	2c00      	cmp	r4, #0
 801f7b2:	f43f af6e 	beq.w	801f692 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 801f7b6:	ea6f 0e0e 	mvn.w	lr, lr
 801f7ba:	1b34      	subs	r4, r6, r4
 801f7bc:	f8c0 e000 	str.w	lr, [r0]
 801f7c0:	e766      	b.n	801f690 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 801f7c2:	426d      	negs	r5, r5
 801f7c4:	fb95 f4f6 	sdiv	r4, r5, r6
 801f7c8:	f1c4 0e00 	rsb	lr, r4, #0
 801f7cc:	fb06 5514 	mls	r5, r6, r4, r5
 801f7d0:	f8c0 e004 	str.w	lr, [r0, #4]
 801f7d4:	6085      	str	r5, [r0, #8]
 801f7d6:	2d00      	cmp	r5, #0
 801f7d8:	f43f af64 	beq.w	801f6a4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 801f7dc:	43e4      	mvns	r4, r4
 801f7de:	1b75      	subs	r5, r6, r5
 801f7e0:	6044      	str	r4, [r0, #4]
 801f7e2:	e75e      	b.n	801f6a2 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 801f7e4:	3d800000 	.word	0x3d800000

0801f7e8 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801f7e8:	4b01      	ldr	r3, [pc, #4]	; (801f7f0 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801f7ea:	6018      	str	r0, [r3, #0]
 801f7ec:	4770      	bx	lr
 801f7ee:	bf00      	nop
 801f7f0:	2400704c 	.word	0x2400704c

0801f7f4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801f7f4:	4b06      	ldr	r3, [pc, #24]	; (801f810 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801f7f6:	881a      	ldrh	r2, [r3, #0]
 801f7f8:	4282      	cmp	r2, r0
 801f7fa:	d807      	bhi.n	801f80c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801f7fc:	4b05      	ldr	r3, [pc, #20]	; (801f814 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801f7fe:	881b      	ldrh	r3, [r3, #0]
 801f800:	4413      	add	r3, r2
 801f802:	4298      	cmp	r0, r3
 801f804:	bfac      	ite	ge
 801f806:	2000      	movge	r0, #0
 801f808:	2001      	movlt	r0, #1
 801f80a:	4770      	bx	lr
 801f80c:	2000      	movs	r0, #0
 801f80e:	4770      	bx	lr
 801f810:	2400706c 	.word	0x2400706c
 801f814:	24007070 	.word	0x24007070

0801f818 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801f818:	b508      	push	{r3, lr}
 801f81a:	4601      	mov	r1, r0
 801f81c:	f7ff ffea 	bl	801f7f4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801f820:	b118      	cbz	r0, 801f82a <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801f822:	4b02      	ldr	r3, [pc, #8]	; (801f82c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801f824:	681b      	ldr	r3, [r3, #0]
 801f826:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801f82a:	bd08      	pop	{r3, pc}
 801f82c:	24007050 	.word	0x24007050

0801f830 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>:
 801f830:	b538      	push	{r3, r4, r5, lr}
 801f832:	4604      	mov	r4, r0
 801f834:	f7ff ffde 	bl	801f7f4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801f838:	b188      	cbz	r0, 801f85e <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x2e>
 801f83a:	4b09      	ldr	r3, [pc, #36]	; (801f860 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x30>)
 801f83c:	881a      	ldrh	r2, [r3, #0]
 801f83e:	4b09      	ldr	r3, [pc, #36]	; (801f864 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x34>)
 801f840:	1aa4      	subs	r4, r4, r2
 801f842:	220e      	movs	r2, #14
 801f844:	681d      	ldr	r5, [r3, #0]
 801f846:	4362      	muls	r2, r4
 801f848:	18ac      	adds	r4, r5, r2
 801f84a:	7b23      	ldrb	r3, [r4, #12]
 801f84c:	f013 0320 	ands.w	r3, r3, #32
 801f850:	bf17      	itett	ne
 801f852:	680b      	ldrne	r3, [r1, #0]
 801f854:	4618      	moveq	r0, r3
 801f856:	50ab      	strne	r3, [r5, r2]
 801f858:	684b      	ldrne	r3, [r1, #4]
 801f85a:	bf18      	it	ne
 801f85c:	6063      	strne	r3, [r4, #4]
 801f85e:	bd38      	pop	{r3, r4, r5, pc}
 801f860:	2400706c 	.word	0x2400706c
 801f864:	24007054 	.word	0x24007054

0801f868 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>:
 801f868:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801f86c:	4606      	mov	r6, r0
 801f86e:	460c      	mov	r4, r1
 801f870:	f7ff ffc0 	bl	801f7f4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801f874:	b918      	cbnz	r0, 801f87e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x16>
 801f876:	2000      	movs	r0, #0
 801f878:	b002      	add	sp, #8
 801f87a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f87e:	4608      	mov	r0, r1
 801f880:	f7fa fae3 	bl	8019e4a <_ZNK8touchgfx4Rect7isEmptyEv>
 801f884:	2800      	cmp	r0, #0
 801f886:	d1f6      	bne.n	801f876 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801f888:	4b3f      	ldr	r3, [pc, #252]	; (801f988 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x120>)
 801f88a:	f8df 9100 	ldr.w	r9, [pc, #256]	; 801f98c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x124>
 801f88e:	881d      	ldrh	r5, [r3, #0]
 801f890:	f8d9 a000 	ldr.w	sl, [r9]
 801f894:	46c8      	mov	r8, r9
 801f896:	1b73      	subs	r3, r6, r5
 801f898:	250e      	movs	r5, #14
 801f89a:	435d      	muls	r5, r3
 801f89c:	eb0a 0705 	add.w	r7, sl, r5
 801f8a0:	7b3b      	ldrb	r3, [r7, #12]
 801f8a2:	f013 0f20 	tst.w	r3, #32
 801f8a6:	d0e6      	beq.n	801f876 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801f8a8:	4621      	mov	r1, r4
 801f8aa:	4638      	mov	r0, r7
 801f8ac:	f7fd fb00 	bl	801ceb0 <_ZNK8touchgfx4Rect8includesERKS0_>
 801f8b0:	2800      	cmp	r0, #0
 801f8b2:	d1e1      	bne.n	801f878 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 801f8b4:	4639      	mov	r1, r7
 801f8b6:	4620      	mov	r0, r4
 801f8b8:	f7fd fafa 	bl	801ceb0 <_ZNK8touchgfx4Rect8includesERKS0_>
 801f8bc:	b108      	cbz	r0, 801f8c2 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x5a>
 801f8be:	4621      	mov	r1, r4
 801f8c0:	e020      	b.n	801f904 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9c>
 801f8c2:	f9b4 2000 	ldrsh.w	r2, [r4]
 801f8c6:	f93a 3005 	ldrsh.w	r3, [sl, r5]
 801f8ca:	429a      	cmp	r2, r3
 801f8cc:	d11e      	bne.n	801f90c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801f8ce:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801f8d2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801f8d6:	429a      	cmp	r2, r3
 801f8d8:	d118      	bne.n	801f90c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801f8da:	6820      	ldr	r0, [r4, #0]
 801f8dc:	466b      	mov	r3, sp
 801f8de:	6861      	ldr	r1, [r4, #4]
 801f8e0:	c303      	stmia	r3!, {r0, r1}
 801f8e2:	4639      	mov	r1, r7
 801f8e4:	4668      	mov	r0, sp
 801f8e6:	f7fd fb09 	bl	801cefc <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801f8ea:	f8d9 3000 	ldr.w	r3, [r9]
 801f8ee:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801f8f2:	442b      	add	r3, r5
 801f8f4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801f8f8:	4413      	add	r3, r2
 801f8fa:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 801f8fe:	4293      	cmp	r3, r2
 801f900:	dc04      	bgt.n	801f90c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801f902:	4669      	mov	r1, sp
 801f904:	4630      	mov	r0, r6
 801f906:	f7ff ff93 	bl	801f830 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>
 801f90a:	e7b5      	b.n	801f878 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 801f90c:	f8d8 3000 	ldr.w	r3, [r8]
 801f910:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801f914:	442b      	add	r3, r5
 801f916:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801f91a:	4291      	cmp	r1, r2
 801f91c:	d119      	bne.n	801f952 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 801f91e:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801f922:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801f926:	4291      	cmp	r1, r2
 801f928:	d113      	bne.n	801f952 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 801f92a:	6820      	ldr	r0, [r4, #0]
 801f92c:	466a      	mov	r2, sp
 801f92e:	6861      	ldr	r1, [r4, #4]
 801f930:	c203      	stmia	r2!, {r0, r1}
 801f932:	4619      	mov	r1, r3
 801f934:	4668      	mov	r0, sp
 801f936:	f7fd fae1 	bl	801cefc <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801f93a:	f8d8 3000 	ldr.w	r3, [r8]
 801f93e:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801f942:	442b      	add	r3, r5
 801f944:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801f948:	4413      	add	r3, r2
 801f94a:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801f94e:	4293      	cmp	r3, r2
 801f950:	ddd7      	ble.n	801f902 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9a>
 801f952:	4620      	mov	r0, r4
 801f954:	f7fa fa79 	bl	8019e4a <_ZNK8touchgfx4Rect7isEmptyEv>
 801f958:	b990      	cbnz	r0, 801f980 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x118>
 801f95a:	88a7      	ldrh	r7, [r4, #4]
 801f95c:	88e3      	ldrh	r3, [r4, #6]
 801f95e:	fb17 f703 	smulbb	r7, r7, r3
 801f962:	f8d8 3000 	ldr.w	r3, [r8]
 801f966:	441d      	add	r5, r3
 801f968:	4628      	mov	r0, r5
 801f96a:	f7fa fa6e 	bl	8019e4a <_ZNK8touchgfx4Rect7isEmptyEv>
 801f96e:	b948      	cbnz	r0, 801f984 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x11c>
 801f970:	88ab      	ldrh	r3, [r5, #4]
 801f972:	88ea      	ldrh	r2, [r5, #6]
 801f974:	fb13 f302 	smulbb	r3, r3, r2
 801f978:	42bb      	cmp	r3, r7
 801f97a:	f6bf af7c 	bge.w	801f876 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801f97e:	e79e      	b.n	801f8be <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x56>
 801f980:	2700      	movs	r7, #0
 801f982:	e7ee      	b.n	801f962 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xfa>
 801f984:	2300      	movs	r3, #0
 801f986:	e7f7      	b.n	801f978 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x110>
 801f988:	2400706c 	.word	0x2400706c
 801f98c:	24007054 	.word	0x24007054

0801f990 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801f990:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f992:	4c24      	ldr	r4, [pc, #144]	; (801fa24 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 801f994:	6823      	ldr	r3, [r4, #0]
 801f996:	2b00      	cmp	r3, #0
 801f998:	d042      	beq.n	801fa20 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801f99a:	4a23      	ldr	r2, [pc, #140]	; (801fa28 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 801f99c:	4d23      	ldr	r5, [pc, #140]	; (801fa2c <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 801f99e:	8811      	ldrh	r1, [r2, #0]
 801f9a0:	f8b5 c000 	ldrh.w	ip, [r5]
 801f9a4:	4822      	ldr	r0, [pc, #136]	; (801fa30 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801f9a6:	4461      	add	r1, ip
 801f9a8:	1c4a      	adds	r2, r1, #1
 801f9aa:	008f      	lsls	r7, r1, #2
 801f9ac:	f022 0201 	bic.w	r2, r2, #1
 801f9b0:	19de      	adds	r6, r3, r7
 801f9b2:	0412      	lsls	r2, r2, #16
 801f9b4:	6006      	str	r6, [r0, #0]
 801f9b6:	4e1f      	ldr	r6, [pc, #124]	; (801fa34 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801f9b8:	0c12      	lsrs	r2, r2, #16
 801f9ba:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 801f9be:	19da      	adds	r2, r3, r7
 801f9c0:	6032      	str	r2, [r6, #0]
 801f9c2:	220e      	movs	r2, #14
 801f9c4:	fb02 f20c 	mul.w	r2, r2, ip
 801f9c8:	3203      	adds	r2, #3
 801f9ca:	f022 0203 	bic.w	r2, r2, #3
 801f9ce:	443a      	add	r2, r7
 801f9d0:	4f19      	ldr	r7, [pc, #100]	; (801fa38 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801f9d2:	4413      	add	r3, r2
 801f9d4:	603b      	str	r3, [r7, #0]
 801f9d6:	2300      	movs	r3, #0
 801f9d8:	4f18      	ldr	r7, [pc, #96]	; (801fa3c <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801f9da:	469c      	mov	ip, r3
 801f9dc:	803b      	strh	r3, [r7, #0]
 801f9de:	4f18      	ldr	r7, [pc, #96]	; (801fa40 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801f9e0:	683f      	ldr	r7, [r7, #0]
 801f9e2:	1aba      	subs	r2, r7, r2
 801f9e4:	4f17      	ldr	r7, [pc, #92]	; (801fa44 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801f9e6:	603a      	str	r2, [r7, #0]
 801f9e8:	f64f 77ff 	movw	r7, #65535	; 0xffff
 801f9ec:	4a16      	ldr	r2, [pc, #88]	; (801fa48 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801f9ee:	8013      	strh	r3, [r2, #0]
 801f9f0:	428b      	cmp	r3, r1
 801f9f2:	d10d      	bne.n	801fa10 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 801f9f4:	882d      	ldrh	r5, [r5, #0]
 801f9f6:	2300      	movs	r3, #0
 801f9f8:	6830      	ldr	r0, [r6, #0]
 801f9fa:	240e      	movs	r4, #14
 801f9fc:	429d      	cmp	r5, r3
 801f9fe:	d90f      	bls.n	801fa20 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801fa00:	fb04 0203 	mla	r2, r4, r3, r0
 801fa04:	3301      	adds	r3, #1
 801fa06:	7b11      	ldrb	r1, [r2, #12]
 801fa08:	f36f 1145 	bfc	r1, #5, #1
 801fa0c:	7311      	strb	r1, [r2, #12]
 801fa0e:	e7f5      	b.n	801f9fc <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 801fa10:	6822      	ldr	r2, [r4, #0]
 801fa12:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801fa16:	6802      	ldr	r2, [r0, #0]
 801fa18:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 801fa1c:	3301      	adds	r3, #1
 801fa1e:	e7e7      	b.n	801f9f0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 801fa20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fa22:	bf00      	nop
 801fa24:	24007050 	.word	0x24007050
 801fa28:	2400706c 	.word	0x2400706c
 801fa2c:	24007070 	.word	0x24007070
 801fa30:	24007064 	.word	0x24007064
 801fa34:	24007054 	.word	0x24007054
 801fa38:	2400705c 	.word	0x2400705c
 801fa3c:	2400706e 	.word	0x2400706e
 801fa40:	24007058 	.word	0x24007058
 801fa44:	24007068 	.word	0x24007068
 801fa48:	24007060 	.word	0x24007060

0801fa4c <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801fa4c:	4b06      	ldr	r3, [pc, #24]	; (801fa68 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 801fa4e:	681b      	ldr	r3, [r3, #0]
 801fa50:	b943      	cbnz	r3, 801fa64 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801fa52:	b139      	cbz	r1, 801fa64 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801fa54:	4b05      	ldr	r3, [pc, #20]	; (801fa6c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 801fa56:	801a      	strh	r2, [r3, #0]
 801fa58:	4b05      	ldr	r3, [pc, #20]	; (801fa70 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 801fa5a:	6019      	str	r1, [r3, #0]
 801fa5c:	4b05      	ldr	r3, [pc, #20]	; (801fa74 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 801fa5e:	6018      	str	r0, [r3, #0]
 801fa60:	f7ff bf96 	b.w	801f990 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801fa64:	4770      	bx	lr
 801fa66:	bf00      	nop
 801fa68:	2400705c 	.word	0x2400705c
 801fa6c:	24007070 	.word	0x24007070
 801fa70:	24007058 	.word	0x24007058
 801fa74:	24007050 	.word	0x24007050

0801fa78 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801fa78:	b470      	push	{r4, r5, r6}
 801fa7a:	4c07      	ldr	r4, [pc, #28]	; (801fa98 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801fa7c:	4605      	mov	r5, r0
 801fa7e:	4610      	mov	r0, r2
 801fa80:	9a03      	ldr	r2, [sp, #12]
 801fa82:	6826      	ldr	r6, [r4, #0]
 801fa84:	b936      	cbnz	r6, 801fa94 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801fa86:	6025      	str	r5, [r4, #0]
 801fa88:	4c04      	ldr	r4, [pc, #16]	; (801fa9c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801fa8a:	8021      	strh	r1, [r4, #0]
 801fa8c:	4619      	mov	r1, r3
 801fa8e:	bc70      	pop	{r4, r5, r6}
 801fa90:	f7ff bfdc 	b.w	801fa4c <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801fa94:	bc70      	pop	{r4, r5, r6}
 801fa96:	4770      	bx	lr
 801fa98:	24007074 	.word	0x24007074
 801fa9c:	2400706c 	.word	0x2400706c

0801faa0 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801faa0:	4a12      	ldr	r2, [pc, #72]	; (801faec <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 801faa2:	8803      	ldrh	r3, [r0, #0]
 801faa4:	8812      	ldrh	r2, [r2, #0]
 801faa6:	4293      	cmp	r3, r2
 801faa8:	d207      	bcs.n	801faba <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 801faaa:	4a11      	ldr	r2, [pc, #68]	; (801faf0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 801faac:	2114      	movs	r1, #20
 801faae:	6812      	ldr	r2, [r2, #0]
 801fab0:	fb01 2303 	mla	r3, r1, r3, r2
 801fab4:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 801fab8:	4770      	bx	lr
 801faba:	490e      	ldr	r1, [pc, #56]	; (801faf4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801fabc:	8809      	ldrh	r1, [r1, #0]
 801fabe:	4411      	add	r1, r2
 801fac0:	428b      	cmp	r3, r1
 801fac2:	da04      	bge.n	801face <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 801fac4:	1a9b      	subs	r3, r3, r2
 801fac6:	4a0c      	ldr	r2, [pc, #48]	; (801faf8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801fac8:	210e      	movs	r1, #14
 801faca:	6812      	ldr	r2, [r2, #0]
 801facc:	e7f0      	b.n	801fab0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 801face:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801fad2:	4293      	cmp	r3, r2
 801fad4:	d108      	bne.n	801fae8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 801fad6:	4b09      	ldr	r3, [pc, #36]	; (801fafc <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801fad8:	781b      	ldrb	r3, [r3, #0]
 801fada:	b91b      	cbnz	r3, 801fae4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 801fadc:	4b08      	ldr	r3, [pc, #32]	; (801fb00 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801fade:	f9b3 0000 	ldrsh.w	r0, [r3]
 801fae2:	4770      	bx	lr
 801fae4:	4b07      	ldr	r3, [pc, #28]	; (801fb04 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801fae6:	e7fa      	b.n	801fade <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 801fae8:	2000      	movs	r0, #0
 801faea:	4770      	bx	lr
 801faec:	2400706c 	.word	0x2400706c
 801faf0:	24007074 	.word	0x24007074
 801faf4:	24007070 	.word	0x24007070
 801faf8:	24007054 	.word	0x24007054
 801fafc:	24006fe4 	.word	0x24006fe4
 801fb00:	24006fe6 	.word	0x24006fe6
 801fb04:	24006fe8 	.word	0x24006fe8

0801fb08 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801fb08:	4a12      	ldr	r2, [pc, #72]	; (801fb54 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 801fb0a:	8803      	ldrh	r3, [r0, #0]
 801fb0c:	8812      	ldrh	r2, [r2, #0]
 801fb0e:	4293      	cmp	r3, r2
 801fb10:	d207      	bcs.n	801fb22 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 801fb12:	4a11      	ldr	r2, [pc, #68]	; (801fb58 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 801fb14:	2114      	movs	r1, #20
 801fb16:	6812      	ldr	r2, [r2, #0]
 801fb18:	fb01 2303 	mla	r3, r1, r3, r2
 801fb1c:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 801fb20:	4770      	bx	lr
 801fb22:	490e      	ldr	r1, [pc, #56]	; (801fb5c <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801fb24:	8809      	ldrh	r1, [r1, #0]
 801fb26:	4411      	add	r1, r2
 801fb28:	428b      	cmp	r3, r1
 801fb2a:	da04      	bge.n	801fb36 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 801fb2c:	1a9b      	subs	r3, r3, r2
 801fb2e:	4a0c      	ldr	r2, [pc, #48]	; (801fb60 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801fb30:	210e      	movs	r1, #14
 801fb32:	6812      	ldr	r2, [r2, #0]
 801fb34:	e7f0      	b.n	801fb18 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 801fb36:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801fb3a:	4293      	cmp	r3, r2
 801fb3c:	d108      	bne.n	801fb50 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 801fb3e:	4b09      	ldr	r3, [pc, #36]	; (801fb64 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801fb40:	781b      	ldrb	r3, [r3, #0]
 801fb42:	b91b      	cbnz	r3, 801fb4c <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 801fb44:	4b08      	ldr	r3, [pc, #32]	; (801fb68 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801fb46:	f9b3 0000 	ldrsh.w	r0, [r3]
 801fb4a:	4770      	bx	lr
 801fb4c:	4b07      	ldr	r3, [pc, #28]	; (801fb6c <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801fb4e:	e7fa      	b.n	801fb46 <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 801fb50:	2000      	movs	r0, #0
 801fb52:	4770      	bx	lr
 801fb54:	2400706c 	.word	0x2400706c
 801fb58:	24007074 	.word	0x24007074
 801fb5c:	24007070 	.word	0x24007070
 801fb60:	24007054 	.word	0x24007054
 801fb64:	24006fe4 	.word	0x24006fe4
 801fb68:	24006fe8 	.word	0x24006fe8
 801fb6c:	24006fe6 	.word	0x24006fe6

0801fb70 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801fb70:	4a12      	ldr	r2, [pc, #72]	; (801fbbc <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801fb72:	8803      	ldrh	r3, [r0, #0]
 801fb74:	8811      	ldrh	r1, [r2, #0]
 801fb76:	428b      	cmp	r3, r1
 801fb78:	d20b      	bcs.n	801fb92 <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 801fb7a:	4a11      	ldr	r2, [pc, #68]	; (801fbc0 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801fb7c:	6812      	ldr	r2, [r2, #0]
 801fb7e:	b112      	cbz	r2, 801fb86 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801fb80:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801fb84:	b9c0      	cbnz	r0, 801fbb8 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 801fb86:	4a0f      	ldr	r2, [pc, #60]	; (801fbc4 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801fb88:	6811      	ldr	r1, [r2, #0]
 801fb8a:	2214      	movs	r2, #20
 801fb8c:	4353      	muls	r3, r2
 801fb8e:	58c8      	ldr	r0, [r1, r3]
 801fb90:	4770      	bx	lr
 801fb92:	4a0d      	ldr	r2, [pc, #52]	; (801fbc8 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801fb94:	8812      	ldrh	r2, [r2, #0]
 801fb96:	440a      	add	r2, r1
 801fb98:	4293      	cmp	r3, r2
 801fb9a:	da04      	bge.n	801fba6 <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 801fb9c:	4a08      	ldr	r2, [pc, #32]	; (801fbc0 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801fb9e:	6812      	ldr	r2, [r2, #0]
 801fba0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801fba4:	4770      	bx	lr
 801fba6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801fbaa:	4293      	cmp	r3, r2
 801fbac:	d103      	bne.n	801fbb6 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801fbae:	4b07      	ldr	r3, [pc, #28]	; (801fbcc <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801fbb0:	681b      	ldr	r3, [r3, #0]
 801fbb2:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801fbb4:	4770      	bx	lr
 801fbb6:	2000      	movs	r0, #0
 801fbb8:	4770      	bx	lr
 801fbba:	bf00      	nop
 801fbbc:	2400706c 	.word	0x2400706c
 801fbc0:	24007050 	.word	0x24007050
 801fbc4:	24007074 	.word	0x24007074
 801fbc8:	24007070 	.word	0x24007070
 801fbcc:	24006fec 	.word	0x24006fec

0801fbd0 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801fbd0:	4b24      	ldr	r3, [pc, #144]	; (801fc64 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801fbd2:	8802      	ldrh	r2, [r0, #0]
 801fbd4:	8818      	ldrh	r0, [r3, #0]
 801fbd6:	4282      	cmp	r2, r0
 801fbd8:	d221      	bcs.n	801fc1e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 801fbda:	4b23      	ldr	r3, [pc, #140]	; (801fc68 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801fbdc:	6819      	ldr	r1, [r3, #0]
 801fbde:	2314      	movs	r3, #20
 801fbe0:	fb03 1302 	mla	r3, r3, r2, r1
 801fbe4:	6858      	ldr	r0, [r3, #4]
 801fbe6:	2800      	cmp	r0, #0
 801fbe8:	d03a      	beq.n	801fc60 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801fbea:	4920      	ldr	r1, [pc, #128]	; (801fc6c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801fbec:	6809      	ldr	r1, [r1, #0]
 801fbee:	2900      	cmp	r1, #0
 801fbf0:	d036      	beq.n	801fc60 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801fbf2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801fbf6:	2900      	cmp	r1, #0
 801fbf8:	d032      	beq.n	801fc60 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801fbfa:	891a      	ldrh	r2, [r3, #8]
 801fbfc:	8958      	ldrh	r0, [r3, #10]
 801fbfe:	4350      	muls	r0, r2
 801fc00:	7c5a      	ldrb	r2, [r3, #17]
 801fc02:	7cdb      	ldrb	r3, [r3, #19]
 801fc04:	0952      	lsrs	r2, r2, #5
 801fc06:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801fc0a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801fc0e:	2b0b      	cmp	r3, #11
 801fc10:	bf18      	it	ne
 801fc12:	0040      	lslne	r0, r0, #1
 801fc14:	3003      	adds	r0, #3
 801fc16:	f020 0003 	bic.w	r0, r0, #3
 801fc1a:	4408      	add	r0, r1
 801fc1c:	4770      	bx	lr
 801fc1e:	4b14      	ldr	r3, [pc, #80]	; (801fc70 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801fc20:	881b      	ldrh	r3, [r3, #0]
 801fc22:	4403      	add	r3, r0
 801fc24:	429a      	cmp	r2, r3
 801fc26:	da1a      	bge.n	801fc5e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801fc28:	4b12      	ldr	r3, [pc, #72]	; (801fc74 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801fc2a:	1a10      	subs	r0, r2, r0
 801fc2c:	210e      	movs	r1, #14
 801fc2e:	681b      	ldr	r3, [r3, #0]
 801fc30:	fb01 3000 	mla	r0, r1, r0, r3
 801fc34:	7b03      	ldrb	r3, [r0, #12]
 801fc36:	f003 031f 	and.w	r3, r3, #31
 801fc3a:	2b0b      	cmp	r3, #11
 801fc3c:	d10b      	bne.n	801fc56 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 801fc3e:	8903      	ldrh	r3, [r0, #8]
 801fc40:	8940      	ldrh	r0, [r0, #10]
 801fc42:	4358      	muls	r0, r3
 801fc44:	4b09      	ldr	r3, [pc, #36]	; (801fc6c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801fc46:	3003      	adds	r0, #3
 801fc48:	6819      	ldr	r1, [r3, #0]
 801fc4a:	f020 0303 	bic.w	r3, r0, #3
 801fc4e:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801fc52:	4418      	add	r0, r3
 801fc54:	4770      	bx	lr
 801fc56:	2b0d      	cmp	r3, #13
 801fc58:	d101      	bne.n	801fc5e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801fc5a:	300d      	adds	r0, #13
 801fc5c:	4770      	bx	lr
 801fc5e:	2000      	movs	r0, #0
 801fc60:	4770      	bx	lr
 801fc62:	bf00      	nop
 801fc64:	2400706c 	.word	0x2400706c
 801fc68:	24007074 	.word	0x24007074
 801fc6c:	24007050 	.word	0x24007050
 801fc70:	24007070 	.word	0x24007070
 801fc74:	24007054 	.word	0x24007054

0801fc78 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801fc78:	4a17      	ldr	r2, [pc, #92]	; (801fcd8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 801fc7a:	b510      	push	{r4, lr}
 801fc7c:	8803      	ldrh	r3, [r0, #0]
 801fc7e:	8812      	ldrh	r2, [r2, #0]
 801fc80:	4293      	cmp	r3, r2
 801fc82:	d20c      	bcs.n	801fc9e <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801fc84:	4a15      	ldr	r2, [pc, #84]	; (801fcdc <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 801fc86:	2114      	movs	r1, #20
 801fc88:	6812      	ldr	r2, [r2, #0]
 801fc8a:	fb01 2303 	mla	r3, r1, r3, r2
 801fc8e:	7c58      	ldrb	r0, [r3, #17]
 801fc90:	0942      	lsrs	r2, r0, #5
 801fc92:	7cd8      	ldrb	r0, [r3, #19]
 801fc94:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801fc98:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801fc9c:	bd10      	pop	{r4, pc}
 801fc9e:	4910      	ldr	r1, [pc, #64]	; (801fce0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801fca0:	8809      	ldrh	r1, [r1, #0]
 801fca2:	4411      	add	r1, r2
 801fca4:	428b      	cmp	r3, r1
 801fca6:	da09      	bge.n	801fcbc <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801fca8:	1a9b      	subs	r3, r3, r2
 801fcaa:	4a0e      	ldr	r2, [pc, #56]	; (801fce4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801fcac:	210e      	movs	r1, #14
 801fcae:	6812      	ldr	r2, [r2, #0]
 801fcb0:	fb01 2303 	mla	r3, r1, r3, r2
 801fcb4:	7b18      	ldrb	r0, [r3, #12]
 801fcb6:	f000 001f 	and.w	r0, r0, #31
 801fcba:	e7ef      	b.n	801fc9c <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801fcbc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801fcc0:	4293      	cmp	r3, r2
 801fcc2:	d106      	bne.n	801fcd2 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 801fcc4:	f7e4 ff02 	bl	8004acc <_ZN8touchgfx3HAL3lcdEv>
 801fcc8:	6803      	ldr	r3, [r0, #0]
 801fcca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fcce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801fcd0:	4718      	bx	r3
 801fcd2:	2000      	movs	r0, #0
 801fcd4:	e7e2      	b.n	801fc9c <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801fcd6:	bf00      	nop
 801fcd8:	2400706c 	.word	0x2400706c
 801fcdc:	24007074 	.word	0x24007074
 801fce0:	24007070 	.word	0x24007070
 801fce4:	24007054 	.word	0x24007054

0801fce8 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 801fce8:	2018      	movs	r0, #24
 801fcea:	4770      	bx	lr

0801fcec <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 801fcec:	2001      	movs	r0, #1
 801fcee:	4770      	bx	lr

0801fcf0 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 801fcf0:	4b02      	ldr	r3, [pc, #8]	; (801fcfc <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0xc>)
 801fcf2:	8818      	ldrh	r0, [r3, #0]
 801fcf4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801fcf8:	b280      	uxth	r0, r0
 801fcfa:	4770      	bx	lr
 801fcfc:	24006fe6 	.word	0x24006fe6

0801fd00 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801fd00:	2bff      	cmp	r3, #255	; 0xff
 801fd02:	d040      	beq.n	801fd86 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x86>
 801fd04:	2a2c      	cmp	r2, #44	; 0x2c
 801fd06:	d02a      	beq.n	801fd5e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5e>
 801fd08:	d80f      	bhi.n	801fd2a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2a>
 801fd0a:	2a08      	cmp	r2, #8
 801fd0c:	d037      	beq.n	801fd7e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801fd0e:	d805      	bhi.n	801fd1c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1c>
 801fd10:	2a04      	cmp	r2, #4
 801fd12:	d032      	beq.n	801fd7a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7a>
 801fd14:	2a05      	cmp	r2, #5
 801fd16:	d02e      	beq.n	801fd76 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 801fd18:	2000      	movs	r0, #0
 801fd1a:	4770      	bx	lr
 801fd1c:	2a0a      	cmp	r2, #10
 801fd1e:	d02e      	beq.n	801fd7e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801fd20:	d301      	bcc.n	801fd26 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x26>
 801fd22:	2a0b      	cmp	r2, #11
 801fd24:	d1f8      	bne.n	801fd18 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801fd26:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801fd28:	4770      	bx	lr
 801fd2a:	2a30      	cmp	r2, #48	; 0x30
 801fd2c:	d029      	beq.n	801fd82 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 801fd2e:	d808      	bhi.n	801fd42 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x42>
 801fd30:	2a2e      	cmp	r2, #46	; 0x2e
 801fd32:	684b      	ldr	r3, [r1, #4]
 801fd34:	d01a      	beq.n	801fd6c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 801fd36:	d90b      	bls.n	801fd50 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x50>
 801fd38:	781b      	ldrb	r3, [r3, #0]
 801fd3a:	2b00      	cmp	r3, #0
 801fd3c:	d1ec      	bne.n	801fd18 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801fd3e:	6a00      	ldr	r0, [r0, #32]
 801fd40:	4770      	bx	lr
 801fd42:	2a32      	cmp	r2, #50	; 0x32
 801fd44:	d01d      	beq.n	801fd82 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 801fd46:	d301      	bcc.n	801fd4c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4c>
 801fd48:	2a33      	cmp	r2, #51	; 0x33
 801fd4a:	d1e5      	bne.n	801fd18 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801fd4c:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801fd4e:	4770      	bx	lr
 801fd50:	781b      	ldrb	r3, [r3, #0]
 801fd52:	2b00      	cmp	r3, #0
 801fd54:	d0f3      	beq.n	801fd3e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x3e>
 801fd56:	2b01      	cmp	r3, #1
 801fd58:	d1de      	bne.n	801fd18 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801fd5a:	6900      	ldr	r0, [r0, #16]
 801fd5c:	4770      	bx	lr
 801fd5e:	684b      	ldr	r3, [r1, #4]
 801fd60:	781b      	ldrb	r3, [r3, #0]
 801fd62:	b133      	cbz	r3, 801fd72 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 801fd64:	2b01      	cmp	r3, #1
 801fd66:	d1d7      	bne.n	801fd18 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801fd68:	6880      	ldr	r0, [r0, #8]
 801fd6a:	4770      	bx	lr
 801fd6c:	781b      	ldrb	r3, [r3, #0]
 801fd6e:	2b00      	cmp	r3, #0
 801fd70:	d1d2      	bne.n	801fd18 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801fd72:	6980      	ldr	r0, [r0, #24]
 801fd74:	4770      	bx	lr
 801fd76:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801fd78:	4770      	bx	lr
 801fd7a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801fd7c:	4770      	bx	lr
 801fd7e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801fd80:	4770      	bx	lr
 801fd82:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801fd84:	4770      	bx	lr
 801fd86:	2a2c      	cmp	r2, #44	; 0x2c
 801fd88:	d02a      	beq.n	801fde0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 801fd8a:	d80f      	bhi.n	801fdac <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xac>
 801fd8c:	2a08      	cmp	r2, #8
 801fd8e:	d035      	beq.n	801fdfc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfc>
 801fd90:	d805      	bhi.n	801fd9e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801fd92:	2a04      	cmp	r2, #4
 801fd94:	d030      	beq.n	801fdf8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf8>
 801fd96:	2a05      	cmp	r2, #5
 801fd98:	d1be      	bne.n	801fd18 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801fd9a:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801fd9c:	4770      	bx	lr
 801fd9e:	2a0a      	cmp	r2, #10
 801fda0:	d02c      	beq.n	801fdfc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfc>
 801fda2:	d301      	bcc.n	801fda8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa8>
 801fda4:	2a0b      	cmp	r2, #11
 801fda6:	d1b7      	bne.n	801fd18 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801fda8:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801fdaa:	4770      	bx	lr
 801fdac:	2a30      	cmp	r2, #48	; 0x30
 801fdae:	d027      	beq.n	801fe00 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x100>
 801fdb0:	d808      	bhi.n	801fdc4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc4>
 801fdb2:	2a2e      	cmp	r2, #46	; 0x2e
 801fdb4:	684b      	ldr	r3, [r1, #4]
 801fdb6:	d01a      	beq.n	801fdee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 801fdb8:	d90b      	bls.n	801fdd2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xd2>
 801fdba:	781b      	ldrb	r3, [r3, #0]
 801fdbc:	2b00      	cmp	r3, #0
 801fdbe:	d1ab      	bne.n	801fd18 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801fdc0:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801fdc2:	4770      	bx	lr
 801fdc4:	2a32      	cmp	r2, #50	; 0x32
 801fdc6:	d01b      	beq.n	801fe00 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x100>
 801fdc8:	d301      	bcc.n	801fdce <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xce>
 801fdca:	2a33      	cmp	r2, #51	; 0x33
 801fdcc:	d1a4      	bne.n	801fd18 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801fdce:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801fdd0:	4770      	bx	lr
 801fdd2:	781b      	ldrb	r3, [r3, #0]
 801fdd4:	2b00      	cmp	r3, #0
 801fdd6:	d0f3      	beq.n	801fdc0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc0>
 801fdd8:	2b01      	cmp	r3, #1
 801fdda:	d19d      	bne.n	801fd18 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801fddc:	6940      	ldr	r0, [r0, #20]
 801fdde:	4770      	bx	lr
 801fde0:	684b      	ldr	r3, [r1, #4]
 801fde2:	781b      	ldrb	r3, [r3, #0]
 801fde4:	b133      	cbz	r3, 801fdf4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf4>
 801fde6:	2b01      	cmp	r3, #1
 801fde8:	d196      	bne.n	801fd18 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801fdea:	68c0      	ldr	r0, [r0, #12]
 801fdec:	4770      	bx	lr
 801fdee:	781b      	ldrb	r3, [r3, #0]
 801fdf0:	2b00      	cmp	r3, #0
 801fdf2:	d191      	bne.n	801fd18 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801fdf4:	69c0      	ldr	r0, [r0, #28]
 801fdf6:	4770      	bx	lr
 801fdf8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801fdfa:	4770      	bx	lr
 801fdfc:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801fdfe:	4770      	bx	lr
 801fe00:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801fe02:	4770      	bx	lr

0801fe04 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fe04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fe08:	b085      	sub	sp, #20
 801fe0a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801fe0c:	9203      	str	r2, [sp, #12]
 801fe0e:	6870      	ldr	r0, [r6, #4]
 801fe10:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801fe14:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 801fe18:	9101      	str	r1, [sp, #4]
 801fe1a:	fa1f f885 	uxth.w	r8, r5
 801fe1e:	43ed      	mvns	r5, r5
 801fe20:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801fe24:	b2ed      	uxtb	r5, r5
 801fe26:	fb00 2404 	mla	r4, r0, r4, r2
 801fe2a:	6832      	ldr	r2, [r6, #0]
 801fe2c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801fe30:	4414      	add	r4, r2
 801fe32:	f8dc 2000 	ldr.w	r2, [ip]
 801fe36:	9202      	str	r2, [sp, #8]
 801fe38:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801fe3c:	f102 0e04 	add.w	lr, r2, #4
 801fe40:	9a01      	ldr	r2, [sp, #4]
 801fe42:	2a00      	cmp	r2, #0
 801fe44:	dc03      	bgt.n	801fe4e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801fe46:	9a03      	ldr	r2, [sp, #12]
 801fe48:	2a00      	cmp	r2, #0
 801fe4a:	f340 8116 	ble.w	802007a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801fe4e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801fe50:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 801fe54:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801fe58:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801fe5a:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 801fe5e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801fe62:	2b00      	cmp	r3, #0
 801fe64:	dd0e      	ble.n	801fe84 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801fe66:	1406      	asrs	r6, r0, #16
 801fe68:	d405      	bmi.n	801fe76 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801fe6a:	4556      	cmp	r6, sl
 801fe6c:	da03      	bge.n	801fe76 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801fe6e:	1416      	asrs	r6, r2, #16
 801fe70:	d401      	bmi.n	801fe76 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801fe72:	454e      	cmp	r6, r9
 801fe74:	db07      	blt.n	801fe86 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801fe76:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801fe78:	3b01      	subs	r3, #1
 801fe7a:	3403      	adds	r4, #3
 801fe7c:	4430      	add	r0, r6
 801fe7e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801fe80:	4432      	add	r2, r6
 801fe82:	e7ee      	b.n	801fe62 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801fe84:	d063      	beq.n	801ff4e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801fe86:	1e5e      	subs	r6, r3, #1
 801fe88:	9f11      	ldr	r7, [sp, #68]	; 0x44
 801fe8a:	fb07 0706 	mla	r7, r7, r6, r0
 801fe8e:	143f      	asrs	r7, r7, #16
 801fe90:	d454      	bmi.n	801ff3c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801fe92:	4557      	cmp	r7, sl
 801fe94:	da52      	bge.n	801ff3c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801fe96:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801fe98:	fb07 2606 	mla	r6, r7, r6, r2
 801fe9c:	1436      	asrs	r6, r6, #16
 801fe9e:	d44d      	bmi.n	801ff3c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801fea0:	454e      	cmp	r6, r9
 801fea2:	da4b      	bge.n	801ff3c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801fea4:	1ce6      	adds	r6, r4, #3
 801fea6:	4699      	mov	r9, r3
 801fea8:	f1b9 0f00 	cmp.w	r9, #0
 801feac:	f106 0603 	add.w	r6, r6, #3
 801feb0:	dd48      	ble.n	801ff44 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 801feb2:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 801feb6:	1417      	asrs	r7, r2, #16
 801feb8:	9902      	ldr	r1, [sp, #8]
 801feba:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801febe:	f109 39ff 	add.w	r9, r9, #4294967295
 801fec2:	fb0b 1707 	mla	r7, fp, r7, r1
 801fec6:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801feca:	9911      	ldr	r1, [sp, #68]	; 0x44
 801fecc:	f817 700a 	ldrb.w	r7, [r7, sl]
 801fed0:	fb1b fb05 	smulbb	fp, fp, r5
 801fed4:	4408      	add	r0, r1
 801fed6:	9912      	ldr	r1, [sp, #72]	; 0x48
 801fed8:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801fedc:	440a      	add	r2, r1
 801fede:	eb0e 0a07 	add.w	sl, lr, r7
 801fee2:	f81e 7007 	ldrb.w	r7, [lr, r7]
 801fee6:	fb07 b708 	mla	r7, r7, r8, fp
 801feea:	b2bf      	uxth	r7, r7
 801feec:	f107 0b01 	add.w	fp, r7, #1
 801fef0:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801fef4:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801fef8:	fb1b fb05 	smulbb	fp, fp, r5
 801fefc:	123f      	asrs	r7, r7, #8
 801fefe:	f806 7c06 	strb.w	r7, [r6, #-6]
 801ff02:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801ff06:	fb07 b708 	mla	r7, r7, r8, fp
 801ff0a:	b2bf      	uxth	r7, r7
 801ff0c:	f107 0b01 	add.w	fp, r7, #1
 801ff10:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801ff14:	123f      	asrs	r7, r7, #8
 801ff16:	f806 7c05 	strb.w	r7, [r6, #-5]
 801ff1a:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801ff1e:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801ff22:	fb1a fa05 	smulbb	sl, sl, r5
 801ff26:	fb07 a708 	mla	r7, r7, r8, sl
 801ff2a:	b2bf      	uxth	r7, r7
 801ff2c:	f107 0a01 	add.w	sl, r7, #1
 801ff30:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801ff34:	123f      	asrs	r7, r7, #8
 801ff36:	f806 7c04 	strb.w	r7, [r6, #-4]
 801ff3a:	e7b5      	b.n	801fea8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801ff3c:	2700      	movs	r7, #0
 801ff3e:	1bde      	subs	r6, r3, r7
 801ff40:	2e00      	cmp	r6, #0
 801ff42:	dc42      	bgt.n	801ffca <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 801ff44:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ff48:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ff4c:	441c      	add	r4, r3
 801ff4e:	9b01      	ldr	r3, [sp, #4]
 801ff50:	2b00      	cmp	r3, #0
 801ff52:	f340 8092 	ble.w	802007a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801ff56:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ff5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ff5c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ff60:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ff64:	eef0 6a62 	vmov.f32	s13, s5
 801ff68:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801ff6c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ff70:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ff74:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801ff78:	eef0 6a43 	vmov.f32	s13, s6
 801ff7c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ff80:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801ff84:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ff88:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ff8c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ff90:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ff94:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ff98:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ff9c:	ee12 2a90 	vmov	r2, s5
 801ffa0:	eef0 2a47 	vmov.f32	s5, s14
 801ffa4:	fb92 f3f3 	sdiv	r3, r2, r3
 801ffa8:	ee13 2a10 	vmov	r2, s6
 801ffac:	9311      	str	r3, [sp, #68]	; 0x44
 801ffae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ffb0:	eeb0 3a67 	vmov.f32	s6, s15
 801ffb4:	fb92 f3f3 	sdiv	r3, r2, r3
 801ffb8:	9312      	str	r3, [sp, #72]	; 0x48
 801ffba:	9b01      	ldr	r3, [sp, #4]
 801ffbc:	9a03      	ldr	r2, [sp, #12]
 801ffbe:	3b01      	subs	r3, #1
 801ffc0:	9301      	str	r3, [sp, #4]
 801ffc2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ffc4:	bf08      	it	eq
 801ffc6:	4613      	moveq	r3, r2
 801ffc8:	e73a      	b.n	801fe40 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801ffca:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801ffce:	d44e      	bmi.n	802006e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801ffd0:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801ffd4:	4556      	cmp	r6, sl
 801ffd6:	dd4a      	ble.n	802006e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801ffd8:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801ffdc:	d447      	bmi.n	802006e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801ffde:	f8dc 100c 	ldr.w	r1, [ip, #12]
 801ffe2:	4559      	cmp	r1, fp
 801ffe4:	dd43      	ble.n	802006e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801ffe6:	fa0f f986 	sxth.w	r9, r6
 801ffea:	9902      	ldr	r1, [sp, #8]
 801ffec:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801fff0:	fb0b 1909 	mla	r9, fp, r9, r1
 801fff4:	f814 b006 	ldrb.w	fp, [r4, r6]
 801fff8:	f819 900a 	ldrb.w	r9, [r9, sl]
 801fffc:	fb1b fb05 	smulbb	fp, fp, r5
 8020000:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8020004:	eb0e 0a09 	add.w	sl, lr, r9
 8020008:	f81e 9009 	ldrb.w	r9, [lr, r9]
 802000c:	fb09 b908 	mla	r9, r9, r8, fp
 8020010:	fa1f f989 	uxth.w	r9, r9
 8020014:	f109 0b01 	add.w	fp, r9, #1
 8020018:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 802001c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020020:	f804 9006 	strb.w	r9, [r4, r6]
 8020024:	4426      	add	r6, r4
 8020026:	f89a 9001 	ldrb.w	r9, [sl, #1]
 802002a:	f896 b001 	ldrb.w	fp, [r6, #1]
 802002e:	fb1b fb05 	smulbb	fp, fp, r5
 8020032:	fb09 b908 	mla	r9, r9, r8, fp
 8020036:	fa1f f989 	uxth.w	r9, r9
 802003a:	f109 0b01 	add.w	fp, r9, #1
 802003e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8020042:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020046:	f886 9001 	strb.w	r9, [r6, #1]
 802004a:	f89a 9002 	ldrb.w	r9, [sl, #2]
 802004e:	f896 a002 	ldrb.w	sl, [r6, #2]
 8020052:	fb1a fa05 	smulbb	sl, sl, r5
 8020056:	fb09 a908 	mla	r9, r9, r8, sl
 802005a:	fa1f f989 	uxth.w	r9, r9
 802005e:	f109 0a01 	add.w	sl, r9, #1
 8020062:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 8020066:	ea4f 2929 	mov.w	r9, r9, asr #8
 802006a:	f886 9002 	strb.w	r9, [r6, #2]
 802006e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8020070:	3701      	adds	r7, #1
 8020072:	4408      	add	r0, r1
 8020074:	9912      	ldr	r1, [sp, #72]	; 0x48
 8020076:	440a      	add	r2, r1
 8020078:	e761      	b.n	801ff3e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 802007a:	b005      	add	sp, #20
 802007c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020080 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020080:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020084:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8020086:	4693      	mov	fp, r2
 8020088:	9e14      	ldr	r6, [sp, #80]	; 0x50
 802008a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802008e:	6868      	ldr	r0, [r5, #4]
 8020090:	6877      	ldr	r7, [r6, #4]
 8020092:	9100      	str	r1, [sp, #0]
 8020094:	3704      	adds	r7, #4
 8020096:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 802009a:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	; 0x3c
 802009e:	fb00 2404 	mla	r4, r0, r4, r2
 80200a2:	682a      	ldr	r2, [r5, #0]
 80200a4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80200a8:	4414      	add	r4, r2
 80200aa:	6832      	ldr	r2, [r6, #0]
 80200ac:	9201      	str	r2, [sp, #4]
 80200ae:	9a00      	ldr	r2, [sp, #0]
 80200b0:	2a00      	cmp	r2, #0
 80200b2:	dc03      	bgt.n	80200bc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80200b4:	f1bb 0f00 	cmp.w	fp, #0
 80200b8:	f340 80bc 	ble.w	8020234 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 80200bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80200be:	f9b6 a008 	ldrsh.w	sl, [r6, #8]
 80200c2:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80200c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80200c8:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 80200cc:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80200d0:	2b00      	cmp	r3, #0
 80200d2:	dd0c      	ble.n	80200ee <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80200d4:	1405      	asrs	r5, r0, #16
 80200d6:	d405      	bmi.n	80200e4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 80200d8:	4555      	cmp	r5, sl
 80200da:	da03      	bge.n	80200e4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 80200dc:	1415      	asrs	r5, r2, #16
 80200de:	d401      	bmi.n	80200e4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 80200e0:	454d      	cmp	r5, r9
 80200e2:	db05      	blt.n	80200f0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80200e4:	4440      	add	r0, r8
 80200e6:	4472      	add	r2, lr
 80200e8:	3b01      	subs	r3, #1
 80200ea:	3403      	adds	r4, #3
 80200ec:	e7f0      	b.n	80200d0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 80200ee:	d03f      	beq.n	8020170 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 80200f0:	1e5d      	subs	r5, r3, #1
 80200f2:	fb08 0c05 	mla	ip, r8, r5, r0
 80200f6:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 80200fa:	d42e      	bmi.n	802015a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 80200fc:	45d4      	cmp	ip, sl
 80200fe:	da2c      	bge.n	802015a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8020100:	fb0e 2505 	mla	r5, lr, r5, r2
 8020104:	142d      	asrs	r5, r5, #16
 8020106:	d428      	bmi.n	802015a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8020108:	454d      	cmp	r5, r9
 802010a:	da26      	bge.n	802015a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 802010c:	1ce5      	adds	r5, r4, #3
 802010e:	469c      	mov	ip, r3
 8020110:	f1bc 0f00 	cmp.w	ip, #0
 8020114:	f105 0503 	add.w	r5, r5, #3
 8020118:	dd25      	ble.n	8020166 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 802011a:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 802011e:	ea4f 4922 	mov.w	r9, r2, asr #16
 8020122:	f10c 3cff 	add.w	ip, ip, #4294967295
 8020126:	4472      	add	r2, lr
 8020128:	468a      	mov	sl, r1
 802012a:	9901      	ldr	r1, [sp, #4]
 802012c:	fb0a 1909 	mla	r9, sl, r9, r1
 8020130:	1401      	asrs	r1, r0, #16
 8020132:	4440      	add	r0, r8
 8020134:	f819 9001 	ldrb.w	r9, [r9, r1]
 8020138:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 802013c:	eb07 0a09 	add.w	sl, r7, r9
 8020140:	f817 9009 	ldrb.w	r9, [r7, r9]
 8020144:	f805 9c06 	strb.w	r9, [r5, #-6]
 8020148:	f89a 9001 	ldrb.w	r9, [sl, #1]
 802014c:	f805 9c05 	strb.w	r9, [r5, #-5]
 8020150:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8020154:	f805 9c04 	strb.w	r9, [r5, #-4]
 8020158:	e7da      	b.n	8020110 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802015a:	2500      	movs	r5, #0
 802015c:	eba3 0c05 	sub.w	ip, r3, r5
 8020160:	f1bc 0f00 	cmp.w	ip, #0
 8020164:	dc3b      	bgt.n	80201de <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 8020166:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802016a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802016e:	441c      	add	r4, r3
 8020170:	9b00      	ldr	r3, [sp, #0]
 8020172:	2b00      	cmp	r3, #0
 8020174:	dd5e      	ble.n	8020234 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8020176:	ee30 0a04 	vadd.f32	s0, s0, s8
 802017a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802017c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020180:	eeb0 6a62 	vmov.f32	s12, s5
 8020184:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020188:	ee31 1a05 	vadd.f32	s2, s2, s10
 802018c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020190:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 8020194:	eeb0 6a43 	vmov.f32	s12, s6
 8020198:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802019c:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 80201a0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80201a4:	ee61 7a27 	vmul.f32	s15, s2, s15
 80201a8:	ee77 2a62 	vsub.f32	s5, s14, s5
 80201ac:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80201b0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80201b4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80201b8:	ee12 2a90 	vmov	r2, s5
 80201bc:	eef0 2a47 	vmov.f32	s5, s14
 80201c0:	fb92 f8f3 	sdiv	r8, r2, r3
 80201c4:	ee13 2a10 	vmov	r2, s6
 80201c8:	eeb0 3a67 	vmov.f32	s6, s15
 80201cc:	fb92 fef3 	sdiv	lr, r2, r3
 80201d0:	9b00      	ldr	r3, [sp, #0]
 80201d2:	3b01      	subs	r3, #1
 80201d4:	9300      	str	r3, [sp, #0]
 80201d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80201d8:	bf08      	it	eq
 80201da:	465b      	moveq	r3, fp
 80201dc:	e767      	b.n	80200ae <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 80201de:	ea5f 4920 	movs.w	r9, r0, asr #16
 80201e2:	d423      	bmi.n	802022c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 80201e4:	f8d6 c008 	ldr.w	ip, [r6, #8]
 80201e8:	45cc      	cmp	ip, r9
 80201ea:	dd1f      	ble.n	802022c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 80201ec:	ea5f 4a22 	movs.w	sl, r2, asr #16
 80201f0:	d41c      	bmi.n	802022c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 80201f2:	68f1      	ldr	r1, [r6, #12]
 80201f4:	4551      	cmp	r1, sl
 80201f6:	dd19      	ble.n	802022c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 80201f8:	fa0f fc8c 	sxth.w	ip, ip
 80201fc:	9901      	ldr	r1, [sp, #4]
 80201fe:	fb0a 1c0c 	mla	ip, sl, ip, r1
 8020202:	f81c c009 	ldrb.w	ip, [ip, r9]
 8020206:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 802020a:	f817 a00c 	ldrb.w	sl, [r7, ip]
 802020e:	eb07 090c 	add.w	r9, r7, ip
 8020212:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 8020216:	f804 a00c 	strb.w	sl, [r4, ip]
 802021a:	44a4      	add	ip, r4
 802021c:	f899 a001 	ldrb.w	sl, [r9, #1]
 8020220:	f88c a001 	strb.w	sl, [ip, #1]
 8020224:	f899 9002 	ldrb.w	r9, [r9, #2]
 8020228:	f88c 9002 	strb.w	r9, [ip, #2]
 802022c:	4440      	add	r0, r8
 802022e:	4472      	add	r2, lr
 8020230:	3501      	adds	r5, #1
 8020232:	e793      	b.n	802015c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xdc>
 8020234:	b003      	add	sp, #12
 8020236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802023a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802023a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802023e:	b085      	sub	sp, #20
 8020240:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8020244:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020246:	9202      	str	r2, [sp, #8]
 8020248:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 802024c:	6860      	ldr	r0, [r4, #4]
 802024e:	9203      	str	r2, [sp, #12]
 8020250:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8020254:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 8020258:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 802025c:	fb00 2505 	mla	r5, r0, r5, r2
 8020260:	6822      	ldr	r2, [r4, #0]
 8020262:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8020266:	4415      	add	r5, r2
 8020268:	f8dc 2000 	ldr.w	r2, [ip]
 802026c:	9200      	str	r2, [sp, #0]
 802026e:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8020272:	3204      	adds	r2, #4
 8020274:	9201      	str	r2, [sp, #4]
 8020276:	2900      	cmp	r1, #0
 8020278:	dc03      	bgt.n	8020282 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 802027a:	9a02      	ldr	r2, [sp, #8]
 802027c:	2a00      	cmp	r2, #0
 802027e:	f340 8127 	ble.w	80204d0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8020282:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020284:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8020288:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 802028c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802028e:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8020292:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8020296:	2b00      	cmp	r3, #0
 8020298:	dd0d      	ble.n	80202b6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802029a:	1422      	asrs	r2, r4, #16
 802029c:	d405      	bmi.n	80202aa <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802029e:	4542      	cmp	r2, r8
 80202a0:	da03      	bge.n	80202aa <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80202a2:	1402      	asrs	r2, r0, #16
 80202a4:	d401      	bmi.n	80202aa <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80202a6:	42ba      	cmp	r2, r7
 80202a8:	db06      	blt.n	80202b8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80202aa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80202ac:	4474      	add	r4, lr
 80202ae:	3b01      	subs	r3, #1
 80202b0:	3503      	adds	r5, #3
 80202b2:	4410      	add	r0, r2
 80202b4:	e7ef      	b.n	8020296 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80202b6:	d075      	beq.n	80203a4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 80202b8:	1e5a      	subs	r2, r3, #1
 80202ba:	fb0e 4602 	mla	r6, lr, r2, r4
 80202be:	1436      	asrs	r6, r6, #16
 80202c0:	d465      	bmi.n	802038e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80202c2:	4546      	cmp	r6, r8
 80202c4:	da63      	bge.n	802038e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80202c6:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80202c8:	fb06 0202 	mla	r2, r6, r2, r0
 80202cc:	1412      	asrs	r2, r2, #16
 80202ce:	d45e      	bmi.n	802038e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80202d0:	42ba      	cmp	r2, r7
 80202d2:	da5c      	bge.n	802038e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80202d4:	1cef      	adds	r7, r5, #3
 80202d6:	4699      	mov	r9, r3
 80202d8:	f1b9 0f00 	cmp.w	r9, #0
 80202dc:	dd5d      	ble.n	802039a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 80202de:	1402      	asrs	r2, r0, #16
 80202e0:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80202e4:	1426      	asrs	r6, r4, #16
 80202e6:	4692      	mov	sl, r2
 80202e8:	9a00      	ldr	r2, [sp, #0]
 80202ea:	fb08 220a 	mla	r2, r8, sl, r2
 80202ee:	5d92      	ldrb	r2, [r2, r6]
 80202f0:	9e01      	ldr	r6, [sp, #4]
 80202f2:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 80202f6:	ea5f 6816 	movs.w	r8, r6, lsr #24
 80202fa:	d041      	beq.n	8020380 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80202fc:	9a03      	ldr	r2, [sp, #12]
 80202fe:	fa5f fb86 	uxtb.w	fp, r6
 8020302:	fb02 f808 	mul.w	r8, r2, r8
 8020306:	f108 0201 	add.w	r2, r8, #1
 802030a:	eb02 2228 	add.w	r2, r2, r8, asr #8
 802030e:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 8020312:	1212      	asrs	r2, r2, #8
 8020314:	fa1f fa82 	uxth.w	sl, r2
 8020318:	43d2      	mvns	r2, r2
 802031a:	fb1b fb0a 	smulbb	fp, fp, sl
 802031e:	b2d2      	uxtb	r2, r2
 8020320:	fb08 b802 	mla	r8, r8, r2, fp
 8020324:	fa1f f888 	uxth.w	r8, r8
 8020328:	f108 0b01 	add.w	fp, r8, #1
 802032c:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8020330:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 8020334:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8020338:	fb1b fb0a 	smulbb	fp, fp, sl
 802033c:	ea4f 2828 	mov.w	r8, r8, asr #8
 8020340:	fb16 fa0a 	smulbb	sl, r6, sl
 8020344:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 8020348:	f807 8c03 	strb.w	r8, [r7, #-3]
 802034c:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 8020350:	fb06 aa02 	mla	sl, r6, r2, sl
 8020354:	fb08 b802 	mla	r8, r8, r2, fp
 8020358:	fa1f fa8a 	uxth.w	sl, sl
 802035c:	fa1f f888 	uxth.w	r8, r8
 8020360:	f10a 0601 	add.w	r6, sl, #1
 8020364:	f108 0b01 	add.w	fp, r8, #1
 8020368:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 802036c:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8020370:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8020374:	ea4f 2828 	mov.w	r8, r8, asr #8
 8020378:	f807 ac01 	strb.w	sl, [r7, #-1]
 802037c:	f807 8c02 	strb.w	r8, [r7, #-2]
 8020380:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8020382:	4474      	add	r4, lr
 8020384:	3703      	adds	r7, #3
 8020386:	f109 39ff 	add.w	r9, r9, #4294967295
 802038a:	4410      	add	r0, r2
 802038c:	e7a4      	b.n	80202d8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 802038e:	f04f 0800 	mov.w	r8, #0
 8020392:	eba3 0208 	sub.w	r2, r3, r8
 8020396:	2a00      	cmp	r2, #0
 8020398:	dc3b      	bgt.n	8020412 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 802039a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802039e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80203a2:	441d      	add	r5, r3
 80203a4:	2900      	cmp	r1, #0
 80203a6:	f340 8093 	ble.w	80204d0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 80203aa:	ee30 0a04 	vadd.f32	s0, s0, s8
 80203ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80203b0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80203b4:	3901      	subs	r1, #1
 80203b6:	eeb0 6a62 	vmov.f32	s12, s5
 80203ba:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80203be:	ee31 1a05 	vadd.f32	s2, s2, s10
 80203c2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80203c6:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 80203ca:	eeb0 6a43 	vmov.f32	s12, s6
 80203ce:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80203d2:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80203d6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80203da:	ee61 7a27 	vmul.f32	s15, s2, s15
 80203de:	ee77 2a62 	vsub.f32	s5, s14, s5
 80203e2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80203e6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80203ea:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80203ee:	ee12 2a90 	vmov	r2, s5
 80203f2:	eef0 2a47 	vmov.f32	s5, s14
 80203f6:	fb92 fef3 	sdiv	lr, r2, r3
 80203fa:	ee13 2a10 	vmov	r2, s6
 80203fe:	eeb0 3a67 	vmov.f32	s6, s15
 8020402:	fb92 f3f3 	sdiv	r3, r2, r3
 8020406:	9a02      	ldr	r2, [sp, #8]
 8020408:	9312      	str	r3, [sp, #72]	; 0x48
 802040a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802040c:	bf08      	it	eq
 802040e:	4613      	moveq	r3, r2
 8020410:	e731      	b.n	8020276 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8020412:	1427      	asrs	r7, r4, #16
 8020414:	d456      	bmi.n	80204c4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8020416:	f8dc 6008 	ldr.w	r6, [ip, #8]
 802041a:	42be      	cmp	r6, r7
 802041c:	dd52      	ble.n	80204c4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 802041e:	ea5f 4920 	movs.w	r9, r0, asr #16
 8020422:	d44f      	bmi.n	80204c4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8020424:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8020428:	454a      	cmp	r2, r9
 802042a:	dd4b      	ble.n	80204c4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 802042c:	9a00      	ldr	r2, [sp, #0]
 802042e:	b236      	sxth	r6, r6
 8020430:	fb09 2606 	mla	r6, r9, r6, r2
 8020434:	5df2      	ldrb	r2, [r6, r7]
 8020436:	9e01      	ldr	r6, [sp, #4]
 8020438:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 802043c:	0e3a      	lsrs	r2, r7, #24
 802043e:	d041      	beq.n	80204c4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8020440:	9e03      	ldr	r6, [sp, #12]
 8020442:	fa5f fb87 	uxtb.w	fp, r7
 8020446:	4372      	muls	r2, r6
 8020448:	1c56      	adds	r6, r2, #1
 802044a:	eb06 2222 	add.w	r2, r6, r2, asr #8
 802044e:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 8020452:	1212      	asrs	r2, r2, #8
 8020454:	f815 9006 	ldrb.w	r9, [r5, r6]
 8020458:	fa1f fa82 	uxth.w	sl, r2
 802045c:	43d2      	mvns	r2, r2
 802045e:	fb1b fb0a 	smulbb	fp, fp, sl
 8020462:	b2d2      	uxtb	r2, r2
 8020464:	fb09 b902 	mla	r9, r9, r2, fp
 8020468:	fa1f f989 	uxth.w	r9, r9
 802046c:	f109 0b01 	add.w	fp, r9, #1
 8020470:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8020474:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8020478:	f3c7 4707 	ubfx	r7, r7, #16, #8
 802047c:	fb1b fb0a 	smulbb	fp, fp, sl
 8020480:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020484:	fb17 fa0a 	smulbb	sl, r7, sl
 8020488:	f805 9006 	strb.w	r9, [r5, r6]
 802048c:	442e      	add	r6, r5
 802048e:	78b7      	ldrb	r7, [r6, #2]
 8020490:	f896 9001 	ldrb.w	r9, [r6, #1]
 8020494:	fb07 aa02 	mla	sl, r7, r2, sl
 8020498:	fb09 b902 	mla	r9, r9, r2, fp
 802049c:	fa1f fa8a 	uxth.w	sl, sl
 80204a0:	fa1f f989 	uxth.w	r9, r9
 80204a4:	f10a 0701 	add.w	r7, sl, #1
 80204a8:	f109 0b01 	add.w	fp, r9, #1
 80204ac:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80204b0:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80204b4:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80204b8:	ea4f 2929 	mov.w	r9, r9, asr #8
 80204bc:	f886 a002 	strb.w	sl, [r6, #2]
 80204c0:	f886 9001 	strb.w	r9, [r6, #1]
 80204c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80204c6:	4474      	add	r4, lr
 80204c8:	f108 0801 	add.w	r8, r8, #1
 80204cc:	4410      	add	r0, r2
 80204ce:	e760      	b.n	8020392 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x158>
 80204d0:	b005      	add	sp, #20
 80204d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080204d6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80204d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80204da:	b085      	sub	sp, #20
 80204dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80204e0:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80204e2:	9203      	str	r2, [sp, #12]
 80204e4:	6868      	ldr	r0, [r5, #4]
 80204e6:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 80204ea:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 80204ee:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 80204f2:	fb00 2404 	mla	r4, r0, r4, r2
 80204f6:	682a      	ldr	r2, [r5, #0]
 80204f8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80204fc:	4414      	add	r4, r2
 80204fe:	f8dc 2000 	ldr.w	r2, [ip]
 8020502:	9201      	str	r2, [sp, #4]
 8020504:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8020508:	3204      	adds	r2, #4
 802050a:	9202      	str	r2, [sp, #8]
 802050c:	2900      	cmp	r1, #0
 802050e:	dc03      	bgt.n	8020518 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8020510:	9a03      	ldr	r2, [sp, #12]
 8020512:	2a00      	cmp	r2, #0
 8020514:	f340 8137 	ble.w	8020786 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8020518:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802051a:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 802051e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8020522:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020524:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8020528:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 802052c:	2b00      	cmp	r3, #0
 802052e:	dd0d      	ble.n	802054c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8020530:	1405      	asrs	r5, r0, #16
 8020532:	d405      	bmi.n	8020540 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8020534:	4545      	cmp	r5, r8
 8020536:	da03      	bge.n	8020540 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8020538:	1415      	asrs	r5, r2, #16
 802053a:	d401      	bmi.n	8020540 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 802053c:	42bd      	cmp	r5, r7
 802053e:	db06      	blt.n	802054e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8020540:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8020542:	4470      	add	r0, lr
 8020544:	3b01      	subs	r3, #1
 8020546:	3403      	adds	r4, #3
 8020548:	442a      	add	r2, r5
 802054a:	e7ef      	b.n	802052c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 802054c:	d070      	beq.n	8020630 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 802054e:	1e5d      	subs	r5, r3, #1
 8020550:	fb0e 0605 	mla	r6, lr, r5, r0
 8020554:	1436      	asrs	r6, r6, #16
 8020556:	d462      	bmi.n	802061e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8020558:	4546      	cmp	r6, r8
 802055a:	da60      	bge.n	802061e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 802055c:	9e12      	ldr	r6, [sp, #72]	; 0x48
 802055e:	fb06 2505 	mla	r5, r6, r5, r2
 8020562:	142d      	asrs	r5, r5, #16
 8020564:	d45b      	bmi.n	802061e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8020566:	42bd      	cmp	r5, r7
 8020568:	da59      	bge.n	802061e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 802056a:	1ce5      	adds	r5, r4, #3
 802056c:	469a      	mov	sl, r3
 802056e:	f1ba 0f00 	cmp.w	sl, #0
 8020572:	dd58      	ble.n	8020626 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 8020574:	1416      	asrs	r6, r2, #16
 8020576:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 802057a:	1407      	asrs	r7, r0, #16
 802057c:	46b1      	mov	r9, r6
 802057e:	9e01      	ldr	r6, [sp, #4]
 8020580:	fb08 6609 	mla	r6, r8, r9, r6
 8020584:	5df6      	ldrb	r6, [r6, r7]
 8020586:	9f02      	ldr	r7, [sp, #8]
 8020588:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 802058c:	0e37      	lsrs	r7, r6, #24
 802058e:	2fff      	cmp	r7, #255	; 0xff
 8020590:	f000 80f0 	beq.w	8020774 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 8020594:	fa5f f887 	uxtb.w	r8, r7
 8020598:	b3d7      	cbz	r7, 8020610 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 802059a:	fa1f f788 	uxth.w	r7, r8
 802059e:	ea6f 0808 	mvn.w	r8, r8
 80205a2:	fa5f fb86 	uxtb.w	fp, r6
 80205a6:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 80205aa:	fa5f f888 	uxtb.w	r8, r8
 80205ae:	fb1b fb07 	smulbb	fp, fp, r7
 80205b2:	fb09 b908 	mla	r9, r9, r8, fp
 80205b6:	fa1f f989 	uxth.w	r9, r9
 80205ba:	f109 0b01 	add.w	fp, r9, #1
 80205be:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80205c2:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 80205c6:	fb1b fb08 	smulbb	fp, fp, r8
 80205ca:	ea4f 2929 	mov.w	r9, r9, asr #8
 80205ce:	f805 9c03 	strb.w	r9, [r5, #-3]
 80205d2:	f3c6 2907 	ubfx	r9, r6, #8, #8
 80205d6:	f3c6 4607 	ubfx	r6, r6, #16, #8
 80205da:	fb09 b907 	mla	r9, r9, r7, fp
 80205de:	fa1f f989 	uxth.w	r9, r9
 80205e2:	f109 0b01 	add.w	fp, r9, #1
 80205e6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80205ea:	ea4f 2929 	mov.w	r9, r9, asr #8
 80205ee:	f805 9c02 	strb.w	r9, [r5, #-2]
 80205f2:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 80205f6:	fb19 f808 	smulbb	r8, r9, r8
 80205fa:	fb06 8607 	mla	r6, r6, r7, r8
 80205fe:	b2b6      	uxth	r6, r6
 8020600:	f106 0801 	add.w	r8, r6, #1
 8020604:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 8020608:	ea4f 2828 	mov.w	r8, r8, asr #8
 802060c:	f805 8c01 	strb.w	r8, [r5, #-1]
 8020610:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8020612:	4470      	add	r0, lr
 8020614:	3503      	adds	r5, #3
 8020616:	f10a 3aff 	add.w	sl, sl, #4294967295
 802061a:	4432      	add	r2, r6
 802061c:	e7a7      	b.n	802056e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 802061e:	2600      	movs	r6, #0
 8020620:	1b9d      	subs	r5, r3, r6
 8020622:	2d00      	cmp	r5, #0
 8020624:	dc3b      	bgt.n	802069e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8020626:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802062a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802062e:	441c      	add	r4, r3
 8020630:	2900      	cmp	r1, #0
 8020632:	f340 80a8 	ble.w	8020786 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8020636:	ee30 0a04 	vadd.f32	s0, s0, s8
 802063a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802063c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020640:	3901      	subs	r1, #1
 8020642:	eeb0 6a62 	vmov.f32	s12, s5
 8020646:	eec6 7a80 	vdiv.f32	s15, s13, s0
 802064a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802064e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020652:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8020656:	eeb0 6a43 	vmov.f32	s12, s6
 802065a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802065e:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8020662:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020666:	ee61 7a27 	vmul.f32	s15, s2, s15
 802066a:	ee77 2a62 	vsub.f32	s5, s14, s5
 802066e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020672:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020676:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802067a:	ee12 2a90 	vmov	r2, s5
 802067e:	eef0 2a47 	vmov.f32	s5, s14
 8020682:	fb92 fef3 	sdiv	lr, r2, r3
 8020686:	ee13 2a10 	vmov	r2, s6
 802068a:	eeb0 3a67 	vmov.f32	s6, s15
 802068e:	fb92 f3f3 	sdiv	r3, r2, r3
 8020692:	9a03      	ldr	r2, [sp, #12]
 8020694:	9312      	str	r3, [sp, #72]	; 0x48
 8020696:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020698:	bf08      	it	eq
 802069a:	4613      	moveq	r3, r2
 802069c:	e736      	b.n	802050c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 802069e:	ea5f 4820 	movs.w	r8, r0, asr #16
 80206a2:	d457      	bmi.n	8020754 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80206a4:	f8dc 7008 	ldr.w	r7, [ip, #8]
 80206a8:	4547      	cmp	r7, r8
 80206aa:	dd53      	ble.n	8020754 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80206ac:	ea5f 4922 	movs.w	r9, r2, asr #16
 80206b0:	d450      	bmi.n	8020754 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80206b2:	f8dc 500c 	ldr.w	r5, [ip, #12]
 80206b6:	454d      	cmp	r5, r9
 80206b8:	dd4c      	ble.n	8020754 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80206ba:	9d01      	ldr	r5, [sp, #4]
 80206bc:	b23f      	sxth	r7, r7
 80206be:	fb09 5707 	mla	r7, r9, r7, r5
 80206c2:	f817 5008 	ldrb.w	r5, [r7, r8]
 80206c6:	9f02      	ldr	r7, [sp, #8]
 80206c8:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 80206cc:	0e2f      	lsrs	r7, r5, #24
 80206ce:	2fff      	cmp	r7, #255	; 0xff
 80206d0:	d045      	beq.n	802075e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 80206d2:	fa5f f987 	uxtb.w	r9, r7
 80206d6:	b3ef      	cbz	r7, 8020754 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80206d8:	fa1f f889 	uxth.w	r8, r9
 80206dc:	ea6f 0909 	mvn.w	r9, r9
 80206e0:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 80206e4:	fa5f fb85 	uxtb.w	fp, r5
 80206e8:	f814 a007 	ldrb.w	sl, [r4, r7]
 80206ec:	fa5f f989 	uxtb.w	r9, r9
 80206f0:	fb1b fb08 	smulbb	fp, fp, r8
 80206f4:	fb0a ba09 	mla	sl, sl, r9, fp
 80206f8:	fa1f fa8a 	uxth.w	sl, sl
 80206fc:	f10a 0b01 	add.w	fp, sl, #1
 8020700:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 8020704:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8020708:	f804 a007 	strb.w	sl, [r4, r7]
 802070c:	4427      	add	r7, r4
 802070e:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8020712:	f3c5 4507 	ubfx	r5, r5, #16, #8
 8020716:	f897 b001 	ldrb.w	fp, [r7, #1]
 802071a:	fb1b fb09 	smulbb	fp, fp, r9
 802071e:	fb0a ba08 	mla	sl, sl, r8, fp
 8020722:	fa1f fa8a 	uxth.w	sl, sl
 8020726:	f10a 0b01 	add.w	fp, sl, #1
 802072a:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 802072e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8020732:	f887 a001 	strb.w	sl, [r7, #1]
 8020736:	f897 a002 	ldrb.w	sl, [r7, #2]
 802073a:	fb1a f909 	smulbb	r9, sl, r9
 802073e:	fb05 9508 	mla	r5, r5, r8, r9
 8020742:	b2ad      	uxth	r5, r5
 8020744:	f105 0901 	add.w	r9, r5, #1
 8020748:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 802074c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020750:	f887 9002 	strb.w	r9, [r7, #2]
 8020754:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8020756:	4470      	add	r0, lr
 8020758:	3601      	adds	r6, #1
 802075a:	442a      	add	r2, r5
 802075c:	e760      	b.n	8020620 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 802075e:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 8020762:	ea4f 2815 	mov.w	r8, r5, lsr #8
 8020766:	55e5      	strb	r5, [r4, r7]
 8020768:	4427      	add	r7, r4
 802076a:	0c2d      	lsrs	r5, r5, #16
 802076c:	f887 8001 	strb.w	r8, [r7, #1]
 8020770:	70bd      	strb	r5, [r7, #2]
 8020772:	e7ef      	b.n	8020754 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8020774:	0a37      	lsrs	r7, r6, #8
 8020776:	f805 6c03 	strb.w	r6, [r5, #-3]
 802077a:	0c36      	lsrs	r6, r6, #16
 802077c:	f805 7c02 	strb.w	r7, [r5, #-2]
 8020780:	f805 6c01 	strb.w	r6, [r5, #-1]
 8020784:	e744      	b.n	8020610 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8020786:	b005      	add	sp, #20
 8020788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802078c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802078c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020790:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8020792:	9201      	str	r2, [sp, #4]
 8020794:	6870      	ldr	r0, [r6, #4]
 8020796:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 802079a:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 802079e:	fa1f fe85 	uxth.w	lr, r5
 80207a2:	43ed      	mvns	r5, r5
 80207a4:	f8dc 8000 	ldr.w	r8, [ip]
 80207a8:	b2ed      	uxtb	r5, r5
 80207aa:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 80207ae:	fb00 2404 	mla	r4, r0, r4, r2
 80207b2:	6832      	ldr	r2, [r6, #0]
 80207b4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80207b8:	4414      	add	r4, r2
 80207ba:	2900      	cmp	r1, #0
 80207bc:	dc03      	bgt.n	80207c6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80207be:	9a01      	ldr	r2, [sp, #4]
 80207c0:	2a00      	cmp	r2, #0
 80207c2:	f340 810d 	ble.w	80209e0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 80207c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80207c8:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 80207cc:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80207d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80207d2:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 80207d6:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80207da:	2b00      	cmp	r3, #0
 80207dc:	dd0e      	ble.n	80207fc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80207de:	1406      	asrs	r6, r0, #16
 80207e0:	d405      	bmi.n	80207ee <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 80207e2:	4556      	cmp	r6, sl
 80207e4:	da03      	bge.n	80207ee <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 80207e6:	1416      	asrs	r6, r2, #16
 80207e8:	d401      	bmi.n	80207ee <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 80207ea:	454e      	cmp	r6, r9
 80207ec:	db07      	blt.n	80207fe <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80207ee:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80207f0:	3b01      	subs	r3, #1
 80207f2:	3403      	adds	r4, #3
 80207f4:	4430      	add	r0, r6
 80207f6:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80207f8:	4432      	add	r2, r6
 80207fa:	e7ee      	b.n	80207da <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 80207fc:	d060      	beq.n	80208c0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 80207fe:	1e5e      	subs	r6, r3, #1
 8020800:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8020802:	fb07 0706 	mla	r7, r7, r6, r0
 8020806:	143f      	asrs	r7, r7, #16
 8020808:	d451      	bmi.n	80208ae <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 802080a:	4557      	cmp	r7, sl
 802080c:	da4f      	bge.n	80208ae <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 802080e:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8020810:	fb07 2606 	mla	r6, r7, r6, r2
 8020814:	1436      	asrs	r6, r6, #16
 8020816:	d44a      	bmi.n	80208ae <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8020818:	454e      	cmp	r6, r9
 802081a:	da48      	bge.n	80208ae <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 802081c:	1ce6      	adds	r6, r4, #3
 802081e:	4699      	mov	r9, r3
 8020820:	f1b9 0f00 	cmp.w	r9, #0
 8020824:	f106 0603 	add.w	r6, r6, #3
 8020828:	dd45      	ble.n	80208b6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 802082a:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 802082e:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8020832:	1417      	asrs	r7, r2, #16
 8020834:	f109 39ff 	add.w	r9, r9, #4294967295
 8020838:	fb0b a707 	mla	r7, fp, r7, sl
 802083c:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 8020840:	fb1b fb05 	smulbb	fp, fp, r5
 8020844:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8020848:	eb08 0a07 	add.w	sl, r8, r7
 802084c:	f818 7007 	ldrb.w	r7, [r8, r7]
 8020850:	fb07 b70e 	mla	r7, r7, lr, fp
 8020854:	b2bf      	uxth	r7, r7
 8020856:	f107 0b01 	add.w	fp, r7, #1
 802085a:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 802085e:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 8020862:	fb1b fb05 	smulbb	fp, fp, r5
 8020866:	123f      	asrs	r7, r7, #8
 8020868:	f806 7c06 	strb.w	r7, [r6, #-6]
 802086c:	f89a 7001 	ldrb.w	r7, [sl, #1]
 8020870:	fb07 b70e 	mla	r7, r7, lr, fp
 8020874:	b2bf      	uxth	r7, r7
 8020876:	f107 0b01 	add.w	fp, r7, #1
 802087a:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 802087e:	123f      	asrs	r7, r7, #8
 8020880:	f806 7c05 	strb.w	r7, [r6, #-5]
 8020884:	f89a 7002 	ldrb.w	r7, [sl, #2]
 8020888:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 802088c:	fb1a fa05 	smulbb	sl, sl, r5
 8020890:	fb07 a70e 	mla	r7, r7, lr, sl
 8020894:	b2bf      	uxth	r7, r7
 8020896:	f107 0a01 	add.w	sl, r7, #1
 802089a:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 802089e:	123f      	asrs	r7, r7, #8
 80208a0:	f806 7c04 	strb.w	r7, [r6, #-4]
 80208a4:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80208a6:	4438      	add	r0, r7
 80208a8:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80208aa:	443a      	add	r2, r7
 80208ac:	e7b8      	b.n	8020820 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80208ae:	2700      	movs	r7, #0
 80208b0:	1bde      	subs	r6, r3, r7
 80208b2:	2e00      	cmp	r6, #0
 80208b4:	dc3f      	bgt.n	8020936 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 80208b6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80208ba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80208be:	441c      	add	r4, r3
 80208c0:	2900      	cmp	r1, #0
 80208c2:	f340 808d 	ble.w	80209e0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 80208c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80208ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80208cc:	ee30 0a04 	vadd.f32	s0, s0, s8
 80208d0:	3901      	subs	r1, #1
 80208d2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80208d6:	eef0 6a62 	vmov.f32	s13, s5
 80208da:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80208de:	ee31 1a05 	vadd.f32	s2, s2, s10
 80208e2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80208e6:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 80208ea:	eef0 6a43 	vmov.f32	s13, s6
 80208ee:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80208f2:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 80208f6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80208fa:	ee61 7a27 	vmul.f32	s15, s2, s15
 80208fe:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020902:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020906:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802090a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802090e:	ee12 2a90 	vmov	r2, s5
 8020912:	eef0 2a47 	vmov.f32	s5, s14
 8020916:	fb92 f3f3 	sdiv	r3, r2, r3
 802091a:	ee13 2a10 	vmov	r2, s6
 802091e:	930f      	str	r3, [sp, #60]	; 0x3c
 8020920:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020922:	eeb0 3a67 	vmov.f32	s6, s15
 8020926:	fb92 f3f3 	sdiv	r3, r2, r3
 802092a:	9a01      	ldr	r2, [sp, #4]
 802092c:	9310      	str	r3, [sp, #64]	; 0x40
 802092e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020930:	bf08      	it	eq
 8020932:	4613      	moveq	r3, r2
 8020934:	e741      	b.n	80207ba <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8020936:	ea5f 4920 	movs.w	r9, r0, asr #16
 802093a:	d44b      	bmi.n	80209d4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 802093c:	f8dc b008 	ldr.w	fp, [ip, #8]
 8020940:	45cb      	cmp	fp, r9
 8020942:	dd47      	ble.n	80209d4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8020944:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8020948:	d444      	bmi.n	80209d4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 802094a:	f8dc 600c 	ldr.w	r6, [ip, #12]
 802094e:	4556      	cmp	r6, sl
 8020950:	dd40      	ble.n	80209d4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8020952:	fa0f f68b 	sxth.w	r6, fp
 8020956:	fb0a 9906 	mla	r9, sl, r6, r9
 802095a:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 802095e:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8020962:	f814 b006 	ldrb.w	fp, [r4, r6]
 8020966:	fb1b fb05 	smulbb	fp, fp, r5
 802096a:	eb08 0a09 	add.w	sl, r8, r9
 802096e:	f818 9009 	ldrb.w	r9, [r8, r9]
 8020972:	fb09 b90e 	mla	r9, r9, lr, fp
 8020976:	fa1f f989 	uxth.w	r9, r9
 802097a:	f109 0b01 	add.w	fp, r9, #1
 802097e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8020982:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020986:	f804 9006 	strb.w	r9, [r4, r6]
 802098a:	4426      	add	r6, r4
 802098c:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8020990:	f896 b001 	ldrb.w	fp, [r6, #1]
 8020994:	fb1b fb05 	smulbb	fp, fp, r5
 8020998:	fb09 b90e 	mla	r9, r9, lr, fp
 802099c:	fa1f f989 	uxth.w	r9, r9
 80209a0:	f109 0b01 	add.w	fp, r9, #1
 80209a4:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80209a8:	ea4f 2929 	mov.w	r9, r9, asr #8
 80209ac:	f886 9001 	strb.w	r9, [r6, #1]
 80209b0:	f89a 9002 	ldrb.w	r9, [sl, #2]
 80209b4:	f896 a002 	ldrb.w	sl, [r6, #2]
 80209b8:	fb1a fa05 	smulbb	sl, sl, r5
 80209bc:	fb09 a90e 	mla	r9, r9, lr, sl
 80209c0:	fa1f f989 	uxth.w	r9, r9
 80209c4:	f109 0a01 	add.w	sl, r9, #1
 80209c8:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 80209cc:	ea4f 2929 	mov.w	r9, r9, asr #8
 80209d0:	f886 9002 	strb.w	r9, [r6, #2]
 80209d4:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80209d6:	3701      	adds	r7, #1
 80209d8:	4430      	add	r0, r6
 80209da:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80209dc:	4432      	add	r2, r6
 80209de:	e767      	b.n	80208b0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 80209e0:	b003      	add	sp, #12
 80209e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080209e6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80209e6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80209ea:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80209ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80209f0:	9201      	str	r2, [sp, #4]
 80209f2:	6868      	ldr	r0, [r5, #4]
 80209f4:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80209f6:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 80209fa:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	; 0x3c
 80209fe:	fb00 2404 	mla	r4, r0, r4, r2
 8020a02:	682a      	ldr	r2, [r5, #0]
 8020a04:	f8d7 8000 	ldr.w	r8, [r7]
 8020a08:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8020a0c:	4414      	add	r4, r2
 8020a0e:	2900      	cmp	r1, #0
 8020a10:	dc03      	bgt.n	8020a1a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8020a12:	9a01      	ldr	r2, [sp, #4]
 8020a14:	2a00      	cmp	r2, #0
 8020a16:	f340 80af 	ble.w	8020b78 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 8020a1a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8020a1c:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 8020a20:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8020a24:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020a26:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 8020a2a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8020a2e:	2b00      	cmp	r3, #0
 8020a30:	dd0c      	ble.n	8020a4c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8020a32:	1405      	asrs	r5, r0, #16
 8020a34:	d405      	bmi.n	8020a42 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8020a36:	4555      	cmp	r5, sl
 8020a38:	da03      	bge.n	8020a42 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8020a3a:	1415      	asrs	r5, r2, #16
 8020a3c:	d401      	bmi.n	8020a42 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8020a3e:	454d      	cmp	r5, r9
 8020a40:	db05      	blt.n	8020a4e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8020a42:	4470      	add	r0, lr
 8020a44:	4462      	add	r2, ip
 8020a46:	3b01      	subs	r3, #1
 8020a48:	3403      	adds	r4, #3
 8020a4a:	e7f0      	b.n	8020a2e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8020a4c:	d038      	beq.n	8020ac0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8020a4e:	1e5d      	subs	r5, r3, #1
 8020a50:	fb0e 0605 	mla	r6, lr, r5, r0
 8020a54:	1436      	asrs	r6, r6, #16
 8020a56:	d42a      	bmi.n	8020aae <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8020a58:	4556      	cmp	r6, sl
 8020a5a:	da28      	bge.n	8020aae <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8020a5c:	fb0c 2505 	mla	r5, ip, r5, r2
 8020a60:	142d      	asrs	r5, r5, #16
 8020a62:	d424      	bmi.n	8020aae <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8020a64:	454d      	cmp	r5, r9
 8020a66:	da22      	bge.n	8020aae <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8020a68:	1ce6      	adds	r6, r4, #3
 8020a6a:	4699      	mov	r9, r3
 8020a6c:	f1b9 0f00 	cmp.w	r9, #0
 8020a70:	f106 0603 	add.w	r6, r6, #3
 8020a74:	dd1f      	ble.n	8020ab6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 8020a76:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 8020a7a:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8020a7e:	1415      	asrs	r5, r2, #16
 8020a80:	4470      	add	r0, lr
 8020a82:	4462      	add	r2, ip
 8020a84:	f109 39ff 	add.w	r9, r9, #4294967295
 8020a88:	fb0b a505 	mla	r5, fp, r5, sl
 8020a8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8020a90:	eb08 0a05 	add.w	sl, r8, r5
 8020a94:	f818 5005 	ldrb.w	r5, [r8, r5]
 8020a98:	f806 5c06 	strb.w	r5, [r6, #-6]
 8020a9c:	f89a 5001 	ldrb.w	r5, [sl, #1]
 8020aa0:	f806 5c05 	strb.w	r5, [r6, #-5]
 8020aa4:	f89a 5002 	ldrb.w	r5, [sl, #2]
 8020aa8:	f806 5c04 	strb.w	r5, [r6, #-4]
 8020aac:	e7de      	b.n	8020a6c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8020aae:	2600      	movs	r6, #0
 8020ab0:	1b9d      	subs	r5, r3, r6
 8020ab2:	2d00      	cmp	r5, #0
 8020ab4:	dc38      	bgt.n	8020b28 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8020ab6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020aba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020abe:	441c      	add	r4, r3
 8020ac0:	2900      	cmp	r1, #0
 8020ac2:	dd59      	ble.n	8020b78 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 8020ac4:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020ac8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020aca:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020ace:	3901      	subs	r1, #1
 8020ad0:	eeb0 6a62 	vmov.f32	s12, s5
 8020ad4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020ad8:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020adc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020ae0:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 8020ae4:	eeb0 6a43 	vmov.f32	s12, s6
 8020ae8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020aec:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 8020af0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020af4:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020af8:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020afc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020b00:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020b04:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020b08:	ee12 2a90 	vmov	r2, s5
 8020b0c:	eef0 2a47 	vmov.f32	s5, s14
 8020b10:	fb92 fef3 	sdiv	lr, r2, r3
 8020b14:	ee13 2a10 	vmov	r2, s6
 8020b18:	eeb0 3a67 	vmov.f32	s6, s15
 8020b1c:	fb92 fcf3 	sdiv	ip, r2, r3
 8020b20:	9a01      	ldr	r2, [sp, #4]
 8020b22:	bf08      	it	eq
 8020b24:	4613      	moveq	r3, r2
 8020b26:	e772      	b.n	8020a0e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 8020b28:	ea5f 4920 	movs.w	r9, r0, asr #16
 8020b2c:	d420      	bmi.n	8020b70 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8020b2e:	f8d7 b008 	ldr.w	fp, [r7, #8]
 8020b32:	45cb      	cmp	fp, r9
 8020b34:	dd1c      	ble.n	8020b70 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8020b36:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8020b3a:	d419      	bmi.n	8020b70 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8020b3c:	68fd      	ldr	r5, [r7, #12]
 8020b3e:	4555      	cmp	r5, sl
 8020b40:	dd16      	ble.n	8020b70 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8020b42:	fa0f f58b 	sxth.w	r5, fp
 8020b46:	fb0a 9505 	mla	r5, sl, r5, r9
 8020b4a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8020b4e:	f818 9005 	ldrb.w	r9, [r8, r5]
 8020b52:	eb08 0b05 	add.w	fp, r8, r5
 8020b56:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 8020b5a:	f804 9005 	strb.w	r9, [r4, r5]
 8020b5e:	4425      	add	r5, r4
 8020b60:	f89b 9001 	ldrb.w	r9, [fp, #1]
 8020b64:	f885 9001 	strb.w	r9, [r5, #1]
 8020b68:	f89b 9002 	ldrb.w	r9, [fp, #2]
 8020b6c:	f885 9002 	strb.w	r9, [r5, #2]
 8020b70:	4470      	add	r0, lr
 8020b72:	4462      	add	r2, ip
 8020b74:	3601      	adds	r6, #1
 8020b76:	e79b      	b.n	8020ab0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 8020b78:	b003      	add	sp, #12
 8020b7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020b7e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020b7e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020b82:	b085      	sub	sp, #20
 8020b84:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8020b88:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020b8a:	9202      	str	r2, [sp, #8]
 8020b8c:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 8020b90:	6860      	ldr	r0, [r4, #4]
 8020b92:	9203      	str	r2, [sp, #12]
 8020b94:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8020b98:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 8020b9c:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 8020ba0:	fb00 2505 	mla	r5, r0, r5, r2
 8020ba4:	6822      	ldr	r2, [r4, #0]
 8020ba6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8020baa:	4415      	add	r5, r2
 8020bac:	f8dc 2000 	ldr.w	r2, [ip]
 8020bb0:	9201      	str	r2, [sp, #4]
 8020bb2:	2900      	cmp	r1, #0
 8020bb4:	dc03      	bgt.n	8020bbe <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8020bb6:	9a02      	ldr	r2, [sp, #8]
 8020bb8:	2a00      	cmp	r2, #0
 8020bba:	f340 8122 	ble.w	8020e02 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 8020bbe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020bc0:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8020bc4:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8020bc8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020bca:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8020bce:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8020bd2:	2b00      	cmp	r3, #0
 8020bd4:	dd0d      	ble.n	8020bf2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8020bd6:	1422      	asrs	r2, r4, #16
 8020bd8:	d405      	bmi.n	8020be6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8020bda:	4542      	cmp	r2, r8
 8020bdc:	da03      	bge.n	8020be6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8020bde:	1402      	asrs	r2, r0, #16
 8020be0:	d401      	bmi.n	8020be6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8020be2:	42ba      	cmp	r2, r7
 8020be4:	db06      	blt.n	8020bf4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8020be6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8020be8:	4474      	add	r4, lr
 8020bea:	3b01      	subs	r3, #1
 8020bec:	3503      	adds	r5, #3
 8020bee:	4410      	add	r0, r2
 8020bf0:	e7ef      	b.n	8020bd2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8020bf2:	d072      	beq.n	8020cda <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 8020bf4:	1e5a      	subs	r2, r3, #1
 8020bf6:	fb0e 4602 	mla	r6, lr, r2, r4
 8020bfa:	1436      	asrs	r6, r6, #16
 8020bfc:	d462      	bmi.n	8020cc4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8020bfe:	4546      	cmp	r6, r8
 8020c00:	da60      	bge.n	8020cc4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8020c02:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8020c04:	fb06 0202 	mla	r2, r6, r2, r0
 8020c08:	1412      	asrs	r2, r2, #16
 8020c0a:	d45b      	bmi.n	8020cc4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8020c0c:	42ba      	cmp	r2, r7
 8020c0e:	da59      	bge.n	8020cc4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8020c10:	1cef      	adds	r7, r5, #3
 8020c12:	4699      	mov	r9, r3
 8020c14:	f1b9 0f00 	cmp.w	r9, #0
 8020c18:	dd5a      	ble.n	8020cd0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8020c1a:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8020c1e:	1426      	asrs	r6, r4, #16
 8020c20:	1402      	asrs	r2, r0, #16
 8020c22:	fb08 6202 	mla	r2, r8, r2, r6
 8020c26:	9e01      	ldr	r6, [sp, #4]
 8020c28:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 8020c2c:	ea5f 6816 	movs.w	r8, r6, lsr #24
 8020c30:	d041      	beq.n	8020cb6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8020c32:	9a03      	ldr	r2, [sp, #12]
 8020c34:	fa5f fb86 	uxtb.w	fp, r6
 8020c38:	fb02 f808 	mul.w	r8, r2, r8
 8020c3c:	f108 0201 	add.w	r2, r8, #1
 8020c40:	eb02 2228 	add.w	r2, r2, r8, asr #8
 8020c44:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 8020c48:	1212      	asrs	r2, r2, #8
 8020c4a:	fa1f fa82 	uxth.w	sl, r2
 8020c4e:	43d2      	mvns	r2, r2
 8020c50:	fb1b fb0a 	smulbb	fp, fp, sl
 8020c54:	b2d2      	uxtb	r2, r2
 8020c56:	fb08 b802 	mla	r8, r8, r2, fp
 8020c5a:	fa1f f888 	uxth.w	r8, r8
 8020c5e:	f108 0b01 	add.w	fp, r8, #1
 8020c62:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8020c66:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 8020c6a:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8020c6e:	fb1b fb0a 	smulbb	fp, fp, sl
 8020c72:	ea4f 2828 	mov.w	r8, r8, asr #8
 8020c76:	fb16 fa0a 	smulbb	sl, r6, sl
 8020c7a:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 8020c7e:	f807 8c03 	strb.w	r8, [r7, #-3]
 8020c82:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 8020c86:	fb06 aa02 	mla	sl, r6, r2, sl
 8020c8a:	fb08 b802 	mla	r8, r8, r2, fp
 8020c8e:	fa1f fa8a 	uxth.w	sl, sl
 8020c92:	fa1f f888 	uxth.w	r8, r8
 8020c96:	f10a 0601 	add.w	r6, sl, #1
 8020c9a:	f108 0b01 	add.w	fp, r8, #1
 8020c9e:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 8020ca2:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8020ca6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8020caa:	ea4f 2828 	mov.w	r8, r8, asr #8
 8020cae:	f807 ac01 	strb.w	sl, [r7, #-1]
 8020cb2:	f807 8c02 	strb.w	r8, [r7, #-2]
 8020cb6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8020cb8:	4474      	add	r4, lr
 8020cba:	3703      	adds	r7, #3
 8020cbc:	f109 39ff 	add.w	r9, r9, #4294967295
 8020cc0:	4410      	add	r0, r2
 8020cc2:	e7a7      	b.n	8020c14 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8020cc4:	f04f 0800 	mov.w	r8, #0
 8020cc8:	eba3 0208 	sub.w	r2, r3, r8
 8020ccc:	2a00      	cmp	r2, #0
 8020cce:	dc3b      	bgt.n	8020d48 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8020cd0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020cd4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020cd8:	441d      	add	r5, r3
 8020cda:	2900      	cmp	r1, #0
 8020cdc:	f340 8091 	ble.w	8020e02 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 8020ce0:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020ce4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020ce6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020cea:	3901      	subs	r1, #1
 8020cec:	eeb0 6a62 	vmov.f32	s12, s5
 8020cf0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020cf4:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020cf8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020cfc:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8020d00:	eeb0 6a43 	vmov.f32	s12, s6
 8020d04:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020d08:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8020d0c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020d10:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020d14:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020d18:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020d1c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020d20:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020d24:	ee12 2a90 	vmov	r2, s5
 8020d28:	eef0 2a47 	vmov.f32	s5, s14
 8020d2c:	fb92 fef3 	sdiv	lr, r2, r3
 8020d30:	ee13 2a10 	vmov	r2, s6
 8020d34:	eeb0 3a67 	vmov.f32	s6, s15
 8020d38:	fb92 f3f3 	sdiv	r3, r2, r3
 8020d3c:	9a02      	ldr	r2, [sp, #8]
 8020d3e:	9312      	str	r3, [sp, #72]	; 0x48
 8020d40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020d42:	bf08      	it	eq
 8020d44:	4613      	moveq	r3, r2
 8020d46:	e734      	b.n	8020bb2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8020d48:	1427      	asrs	r7, r4, #16
 8020d4a:	d454      	bmi.n	8020df6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8020d4c:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8020d50:	42be      	cmp	r6, r7
 8020d52:	dd50      	ble.n	8020df6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8020d54:	ea5f 4920 	movs.w	r9, r0, asr #16
 8020d58:	d44d      	bmi.n	8020df6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8020d5a:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8020d5e:	454a      	cmp	r2, r9
 8020d60:	dd49      	ble.n	8020df6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8020d62:	b236      	sxth	r6, r6
 8020d64:	9a01      	ldr	r2, [sp, #4]
 8020d66:	fb09 7606 	mla	r6, r9, r6, r7
 8020d6a:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 8020d6e:	0e3a      	lsrs	r2, r7, #24
 8020d70:	d041      	beq.n	8020df6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8020d72:	9e03      	ldr	r6, [sp, #12]
 8020d74:	fa5f fb87 	uxtb.w	fp, r7
 8020d78:	4372      	muls	r2, r6
 8020d7a:	1c56      	adds	r6, r2, #1
 8020d7c:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8020d80:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 8020d84:	1212      	asrs	r2, r2, #8
 8020d86:	f815 9006 	ldrb.w	r9, [r5, r6]
 8020d8a:	fa1f fa82 	uxth.w	sl, r2
 8020d8e:	43d2      	mvns	r2, r2
 8020d90:	fb1b fb0a 	smulbb	fp, fp, sl
 8020d94:	b2d2      	uxtb	r2, r2
 8020d96:	fb09 b902 	mla	r9, r9, r2, fp
 8020d9a:	fa1f f989 	uxth.w	r9, r9
 8020d9e:	f109 0b01 	add.w	fp, r9, #1
 8020da2:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8020da6:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8020daa:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8020dae:	fb1b fb0a 	smulbb	fp, fp, sl
 8020db2:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020db6:	fb17 fa0a 	smulbb	sl, r7, sl
 8020dba:	f805 9006 	strb.w	r9, [r5, r6]
 8020dbe:	442e      	add	r6, r5
 8020dc0:	78b7      	ldrb	r7, [r6, #2]
 8020dc2:	f896 9001 	ldrb.w	r9, [r6, #1]
 8020dc6:	fb07 aa02 	mla	sl, r7, r2, sl
 8020dca:	fb09 b902 	mla	r9, r9, r2, fp
 8020dce:	fa1f fa8a 	uxth.w	sl, sl
 8020dd2:	fa1f f989 	uxth.w	r9, r9
 8020dd6:	f10a 0701 	add.w	r7, sl, #1
 8020dda:	f109 0b01 	add.w	fp, r9, #1
 8020dde:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020de2:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8020de6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8020dea:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020dee:	f886 a002 	strb.w	sl, [r6, #2]
 8020df2:	f886 9001 	strb.w	r9, [r6, #1]
 8020df6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8020df8:	4474      	add	r4, lr
 8020dfa:	f108 0801 	add.w	r8, r8, #1
 8020dfe:	4410      	add	r0, r2
 8020e00:	e762      	b.n	8020cc8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8020e02:	b005      	add	sp, #20
 8020e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020e08 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020e08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020e0c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8020e0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8020e12:	9201      	str	r2, [sp, #4]
 8020e14:	6860      	ldr	r0, [r4, #4]
 8020e16:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 8020e1a:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	; 0x48
 8020e1e:	fb00 2505 	mla	r5, r0, r5, r2
 8020e22:	6822      	ldr	r2, [r4, #0]
 8020e24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8020e28:	4415      	add	r5, r2
 8020e2a:	f8dc 2000 	ldr.w	r2, [ip]
 8020e2e:	9200      	str	r2, [sp, #0]
 8020e30:	2900      	cmp	r1, #0
 8020e32:	dc03      	bgt.n	8020e3c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8020e34:	9a01      	ldr	r2, [sp, #4]
 8020e36:	2a00      	cmp	r2, #0
 8020e38:	f340 812b 	ble.w	8021092 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8020e3c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8020e3e:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8020e42:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8020e46:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020e48:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8020e4c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8020e50:	2b00      	cmp	r3, #0
 8020e52:	dd0e      	ble.n	8020e72 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8020e54:	1422      	asrs	r2, r4, #16
 8020e56:	d405      	bmi.n	8020e64 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8020e58:	4572      	cmp	r2, lr
 8020e5a:	da03      	bge.n	8020e64 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8020e5c:	1402      	asrs	r2, r0, #16
 8020e5e:	d401      	bmi.n	8020e64 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8020e60:	42ba      	cmp	r2, r7
 8020e62:	db07      	blt.n	8020e74 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8020e64:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020e66:	3b01      	subs	r3, #1
 8020e68:	3503      	adds	r5, #3
 8020e6a:	4414      	add	r4, r2
 8020e6c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020e6e:	4410      	add	r0, r2
 8020e70:	e7ee      	b.n	8020e50 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8020e72:	d06f      	beq.n	8020f54 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8020e74:	1e5a      	subs	r2, r3, #1
 8020e76:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8020e78:	fb06 4602 	mla	r6, r6, r2, r4
 8020e7c:	1436      	asrs	r6, r6, #16
 8020e7e:	d45e      	bmi.n	8020f3e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8020e80:	4576      	cmp	r6, lr
 8020e82:	da5c      	bge.n	8020f3e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8020e84:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8020e86:	fb06 0202 	mla	r2, r6, r2, r0
 8020e8a:	1412      	asrs	r2, r2, #16
 8020e8c:	d457      	bmi.n	8020f3e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8020e8e:	42ba      	cmp	r2, r7
 8020e90:	da55      	bge.n	8020f3e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8020e92:	1cee      	adds	r6, r5, #3
 8020e94:	469a      	mov	sl, r3
 8020e96:	f1ba 0f00 	cmp.w	sl, #0
 8020e9a:	dd56      	ble.n	8020f4a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8020e9c:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8020ea0:	1427      	asrs	r7, r4, #16
 8020ea2:	1402      	asrs	r2, r0, #16
 8020ea4:	fb0e 7202 	mla	r2, lr, r2, r7
 8020ea8:	9f00      	ldr	r7, [sp, #0]
 8020eaa:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 8020eae:	ea5f 6e17 	movs.w	lr, r7, lsr #24
 8020eb2:	d03c      	beq.n	8020f2e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8020eb4:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8020eb8:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8020ebc:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8020ec0:	fa5f f28e 	uxtb.w	r2, lr
 8020ec4:	b2ff      	uxtb	r7, r7
 8020ec6:	f000 80dd 	beq.w	8021084 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8020eca:	fa1f f882 	uxth.w	r8, r2
 8020ece:	43d2      	mvns	r2, r2
 8020ed0:	f816 ec03 	ldrb.w	lr, [r6, #-3]
 8020ed4:	fb17 f708 	smulbb	r7, r7, r8
 8020ed8:	b2d2      	uxtb	r2, r2
 8020eda:	fb19 f908 	smulbb	r9, r9, r8
 8020ede:	fb0e 7702 	mla	r7, lr, r2, r7
 8020ee2:	fb1b f808 	smulbb	r8, fp, r8
 8020ee6:	b2bf      	uxth	r7, r7
 8020ee8:	f107 0e01 	add.w	lr, r7, #1
 8020eec:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8020ef0:	123f      	asrs	r7, r7, #8
 8020ef2:	f806 7c03 	strb.w	r7, [r6, #-3]
 8020ef6:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 8020efa:	fb07 9902 	mla	r9, r7, r2, r9
 8020efe:	fa1f f989 	uxth.w	r9, r9
 8020f02:	f109 0701 	add.w	r7, r9, #1
 8020f06:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8020f0a:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 8020f0e:	fb07 8802 	mla	r8, r7, r2, r8
 8020f12:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020f16:	fa1f f888 	uxth.w	r8, r8
 8020f1a:	f806 9c02 	strb.w	r9, [r6, #-2]
 8020f1e:	f108 0201 	add.w	r2, r8, #1
 8020f22:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8020f26:	ea4f 2828 	mov.w	r8, r8, asr #8
 8020f2a:	f806 8c01 	strb.w	r8, [r6, #-1]
 8020f2e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020f30:	3603      	adds	r6, #3
 8020f32:	f10a 3aff 	add.w	sl, sl, #4294967295
 8020f36:	4414      	add	r4, r2
 8020f38:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020f3a:	4410      	add	r0, r2
 8020f3c:	e7ab      	b.n	8020e96 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8020f3e:	f04f 0e00 	mov.w	lr, #0
 8020f42:	eba3 020e 	sub.w	r2, r3, lr
 8020f46:	2a00      	cmp	r2, #0
 8020f48:	dc3d      	bgt.n	8020fc6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8020f4a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020f4e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020f52:	441d      	add	r5, r3
 8020f54:	2900      	cmp	r1, #0
 8020f56:	f340 809c 	ble.w	8021092 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8020f5a:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020f5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020f60:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020f64:	3901      	subs	r1, #1
 8020f66:	eeb0 6a62 	vmov.f32	s12, s5
 8020f6a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020f6e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020f72:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020f76:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 8020f7a:	eeb0 6a43 	vmov.f32	s12, s6
 8020f7e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020f82:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 8020f86:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020f8a:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020f8e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020f92:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020f96:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020f9a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020f9e:	ee12 2a90 	vmov	r2, s5
 8020fa2:	eef0 2a47 	vmov.f32	s5, s14
 8020fa6:	fb92 f3f3 	sdiv	r3, r2, r3
 8020faa:	ee13 2a10 	vmov	r2, s6
 8020fae:	930f      	str	r3, [sp, #60]	; 0x3c
 8020fb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020fb2:	eeb0 3a67 	vmov.f32	s6, s15
 8020fb6:	fb92 f3f3 	sdiv	r3, r2, r3
 8020fba:	9a01      	ldr	r2, [sp, #4]
 8020fbc:	9310      	str	r3, [sp, #64]	; 0x40
 8020fbe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020fc0:	bf08      	it	eq
 8020fc2:	4613      	moveq	r3, r2
 8020fc4:	e734      	b.n	8020e30 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 8020fc6:	1427      	asrs	r7, r4, #16
 8020fc8:	d44d      	bmi.n	8021066 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8020fca:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8020fce:	42be      	cmp	r6, r7
 8020fd0:	dd49      	ble.n	8021066 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8020fd2:	ea5f 4820 	movs.w	r8, r0, asr #16
 8020fd6:	d446      	bmi.n	8021066 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8020fd8:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8020fdc:	4542      	cmp	r2, r8
 8020fde:	dd42      	ble.n	8021066 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8020fe0:	b236      	sxth	r6, r6
 8020fe2:	9a00      	ldr	r2, [sp, #0]
 8020fe4:	fb08 7606 	mla	r6, r8, r6, r7
 8020fe8:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 8020fec:	0e3a      	lsrs	r2, r7, #24
 8020fee:	d03a      	beq.n	8021066 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8020ff0:	2aff      	cmp	r2, #255	; 0xff
 8020ff2:	b2d6      	uxtb	r6, r2
 8020ff4:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8020ff8:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 8020ffc:	ea4f 024e 	mov.w	r2, lr, lsl #1
 8021000:	b2ff      	uxtb	r7, r7
 8021002:	d037      	beq.n	8021074 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8021004:	fa1f f986 	uxth.w	r9, r6
 8021008:	4472      	add	r2, lr
 802100a:	43f6      	mvns	r6, r6
 802100c:	f815 8002 	ldrb.w	r8, [r5, r2]
 8021010:	fb17 f709 	smulbb	r7, r7, r9
 8021014:	fb1a fa09 	smulbb	sl, sl, r9
 8021018:	b2f6      	uxtb	r6, r6
 802101a:	fb1b f909 	smulbb	r9, fp, r9
 802101e:	fb08 7706 	mla	r7, r8, r6, r7
 8021022:	b2bf      	uxth	r7, r7
 8021024:	f107 0801 	add.w	r8, r7, #1
 8021028:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 802102c:	123f      	asrs	r7, r7, #8
 802102e:	54af      	strb	r7, [r5, r2]
 8021030:	442a      	add	r2, r5
 8021032:	7857      	ldrb	r7, [r2, #1]
 8021034:	fb07 aa06 	mla	sl, r7, r6, sl
 8021038:	fa1f fa8a 	uxth.w	sl, sl
 802103c:	f10a 0701 	add.w	r7, sl, #1
 8021040:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021044:	7897      	ldrb	r7, [r2, #2]
 8021046:	fb07 9906 	mla	r9, r7, r6, r9
 802104a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 802104e:	fa1f f989 	uxth.w	r9, r9
 8021052:	f882 a001 	strb.w	sl, [r2, #1]
 8021056:	f109 0601 	add.w	r6, r9, #1
 802105a:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 802105e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8021062:	f882 9002 	strb.w	r9, [r2, #2]
 8021066:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021068:	f10e 0e01 	add.w	lr, lr, #1
 802106c:	4414      	add	r4, r2
 802106e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021070:	4410      	add	r0, r2
 8021072:	e766      	b.n	8020f42 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8021074:	4472      	add	r2, lr
 8021076:	54af      	strb	r7, [r5, r2]
 8021078:	442a      	add	r2, r5
 802107a:	f882 a001 	strb.w	sl, [r2, #1]
 802107e:	f882 b002 	strb.w	fp, [r2, #2]
 8021082:	e7f0      	b.n	8021066 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8021084:	f806 7c03 	strb.w	r7, [r6, #-3]
 8021088:	f806 9c02 	strb.w	r9, [r6, #-2]
 802108c:	f806 bc01 	strb.w	fp, [r6, #-1]
 8021090:	e74d      	b.n	8020f2e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8021092:	b003      	add	sp, #12
 8021094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021098 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802109c:	b087      	sub	sp, #28
 802109e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80210a2:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80210a4:	9204      	str	r2, [sp, #16]
 80210a6:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 80210aa:	6860      	ldr	r0, [r4, #4]
 80210ac:	9205      	str	r2, [sp, #20]
 80210ae:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 80210b2:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
 80210b6:	9101      	str	r1, [sp, #4]
 80210b8:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 80210bc:	fb00 2505 	mla	r5, r0, r5, r2
 80210c0:	6822      	ldr	r2, [r4, #0]
 80210c2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80210c6:	4415      	add	r5, r2
 80210c8:	f8dc 2008 	ldr.w	r2, [ip, #8]
 80210cc:	3201      	adds	r2, #1
 80210ce:	f022 0201 	bic.w	r2, r2, #1
 80210d2:	9202      	str	r2, [sp, #8]
 80210d4:	f8dc 2000 	ldr.w	r2, [ip]
 80210d8:	9203      	str	r2, [sp, #12]
 80210da:	9a01      	ldr	r2, [sp, #4]
 80210dc:	2a00      	cmp	r2, #0
 80210de:	dc03      	bgt.n	80210e8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 80210e0:	9a04      	ldr	r2, [sp, #16]
 80210e2:	2a00      	cmp	r2, #0
 80210e4:	f340 8135 	ble.w	8021352 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 80210e8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80210ea:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80210ee:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 80210f2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80210f4:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 80210f8:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80210fc:	2b00      	cmp	r3, #0
 80210fe:	dd0d      	ble.n	802111c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8021100:	1422      	asrs	r2, r4, #16
 8021102:	d405      	bmi.n	8021110 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8021104:	4542      	cmp	r2, r8
 8021106:	da03      	bge.n	8021110 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8021108:	1402      	asrs	r2, r0, #16
 802110a:	d401      	bmi.n	8021110 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802110c:	42ba      	cmp	r2, r7
 802110e:	db06      	blt.n	802111e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8021110:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021112:	4474      	add	r4, lr
 8021114:	3b01      	subs	r3, #1
 8021116:	3503      	adds	r5, #3
 8021118:	4410      	add	r0, r2
 802111a:	e7ef      	b.n	80210fc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 802111c:	d077      	beq.n	802120e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 802111e:	1e5a      	subs	r2, r3, #1
 8021120:	fb0e 4602 	mla	r6, lr, r2, r4
 8021124:	1436      	asrs	r6, r6, #16
 8021126:	d469      	bmi.n	80211fc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8021128:	4546      	cmp	r6, r8
 802112a:	da67      	bge.n	80211fc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 802112c:	9e14      	ldr	r6, [sp, #80]	; 0x50
 802112e:	fb06 0202 	mla	r2, r6, r2, r0
 8021132:	1412      	asrs	r2, r2, #16
 8021134:	d462      	bmi.n	80211fc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8021136:	42ba      	cmp	r2, r7
 8021138:	da60      	bge.n	80211fc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 802113a:	1cee      	adds	r6, r5, #3
 802113c:	4699      	mov	r9, r3
 802113e:	f1b9 0f00 	cmp.w	r9, #0
 8021142:	dd5f      	ble.n	8021204 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8021144:	1422      	asrs	r2, r4, #16
 8021146:	9902      	ldr	r1, [sp, #8]
 8021148:	1407      	asrs	r7, r0, #16
 802114a:	fb01 2707 	mla	r7, r1, r7, r2
 802114e:	9903      	ldr	r1, [sp, #12]
 8021150:	087a      	lsrs	r2, r7, #1
 8021152:	5c8a      	ldrb	r2, [r1, r2]
 8021154:	07f9      	lsls	r1, r7, #31
 8021156:	bf54      	ite	pl
 8021158:	f002 020f 	andpl.w	r2, r2, #15
 802115c:	1112      	asrmi	r2, r2, #4
 802115e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8021162:	b2d2      	uxtb	r2, r2
 8021164:	2a00      	cmp	r2, #0
 8021166:	d042      	beq.n	80211ee <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8021168:	497b      	ldr	r1, [pc, #492]	; (8021358 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 802116a:	680f      	ldr	r7, [r1, #0]
 802116c:	9905      	ldr	r1, [sp, #20]
 802116e:	fa5f fb87 	uxtb.w	fp, r7
 8021172:	434a      	muls	r2, r1
 8021174:	f102 0801 	add.w	r8, r2, #1
 8021178:	eb08 2222 	add.w	r2, r8, r2, asr #8
 802117c:	f816 8c03 	ldrb.w	r8, [r6, #-3]
 8021180:	1212      	asrs	r2, r2, #8
 8021182:	fa1f fa82 	uxth.w	sl, r2
 8021186:	43d2      	mvns	r2, r2
 8021188:	fb1b fb0a 	smulbb	fp, fp, sl
 802118c:	b2d2      	uxtb	r2, r2
 802118e:	fb08 b802 	mla	r8, r8, r2, fp
 8021192:	fa1f f888 	uxth.w	r8, r8
 8021196:	f108 0b01 	add.w	fp, r8, #1
 802119a:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 802119e:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 80211a2:	f3c7 4707 	ubfx	r7, r7, #16, #8
 80211a6:	fb1b fb0a 	smulbb	fp, fp, sl
 80211aa:	ea4f 2828 	mov.w	r8, r8, asr #8
 80211ae:	fb17 fa0a 	smulbb	sl, r7, sl
 80211b2:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 80211b6:	f806 8c03 	strb.w	r8, [r6, #-3]
 80211ba:	f816 8c02 	ldrb.w	r8, [r6, #-2]
 80211be:	fb07 aa02 	mla	sl, r7, r2, sl
 80211c2:	fb08 b802 	mla	r8, r8, r2, fp
 80211c6:	fa1f fa8a 	uxth.w	sl, sl
 80211ca:	fa1f f888 	uxth.w	r8, r8
 80211ce:	f10a 0701 	add.w	r7, sl, #1
 80211d2:	f108 0b01 	add.w	fp, r8, #1
 80211d6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80211da:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80211de:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80211e2:	ea4f 2828 	mov.w	r8, r8, asr #8
 80211e6:	f806 ac01 	strb.w	sl, [r6, #-1]
 80211ea:	f806 8c02 	strb.w	r8, [r6, #-2]
 80211ee:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80211f0:	4474      	add	r4, lr
 80211f2:	3603      	adds	r6, #3
 80211f4:	f109 39ff 	add.w	r9, r9, #4294967295
 80211f8:	4410      	add	r0, r2
 80211fa:	e7a0      	b.n	802113e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 80211fc:	2700      	movs	r7, #0
 80211fe:	1bda      	subs	r2, r3, r7
 8021200:	2a00      	cmp	r2, #0
 8021202:	dc3e      	bgt.n	8021282 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8021204:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8021208:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802120c:	441d      	add	r5, r3
 802120e:	9b01      	ldr	r3, [sp, #4]
 8021210:	2b00      	cmp	r3, #0
 8021212:	f340 809e 	ble.w	8021352 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8021216:	ee30 0a04 	vadd.f32	s0, s0, s8
 802121a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802121c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021220:	eeb0 6a62 	vmov.f32	s12, s5
 8021224:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8021228:	ee31 1a05 	vadd.f32	s2, s2, s10
 802122c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021230:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8021234:	eeb0 6a43 	vmov.f32	s12, s6
 8021238:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802123c:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8021240:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021244:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021248:	ee77 2a62 	vsub.f32	s5, s14, s5
 802124c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021250:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021254:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021258:	ee12 2a90 	vmov	r2, s5
 802125c:	eef0 2a47 	vmov.f32	s5, s14
 8021260:	fb92 fef3 	sdiv	lr, r2, r3
 8021264:	ee13 2a10 	vmov	r2, s6
 8021268:	eeb0 3a67 	vmov.f32	s6, s15
 802126c:	fb92 f3f3 	sdiv	r3, r2, r3
 8021270:	9314      	str	r3, [sp, #80]	; 0x50
 8021272:	9b01      	ldr	r3, [sp, #4]
 8021274:	9a04      	ldr	r2, [sp, #16]
 8021276:	3b01      	subs	r3, #1
 8021278:	9301      	str	r3, [sp, #4]
 802127a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802127c:	bf08      	it	eq
 802127e:	4613      	moveq	r3, r2
 8021280:	e72b      	b.n	80210da <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8021282:	1426      	asrs	r6, r4, #16
 8021284:	d460      	bmi.n	8021348 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8021286:	f8dc 2008 	ldr.w	r2, [ip, #8]
 802128a:	42b2      	cmp	r2, r6
 802128c:	dd5c      	ble.n	8021348 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 802128e:	ea5f 4820 	movs.w	r8, r0, asr #16
 8021292:	d459      	bmi.n	8021348 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8021294:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8021298:	4542      	cmp	r2, r8
 802129a:	dd55      	ble.n	8021348 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 802129c:	9a02      	ldr	r2, [sp, #8]
 802129e:	9903      	ldr	r1, [sp, #12]
 80212a0:	fb08 6602 	mla	r6, r8, r2, r6
 80212a4:	0872      	lsrs	r2, r6, #1
 80212a6:	07f6      	lsls	r6, r6, #31
 80212a8:	5c8a      	ldrb	r2, [r1, r2]
 80212aa:	bf54      	ite	pl
 80212ac:	f002 020f 	andpl.w	r2, r2, #15
 80212b0:	1112      	asrmi	r2, r2, #4
 80212b2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80212b6:	b2d2      	uxtb	r2, r2
 80212b8:	2a00      	cmp	r2, #0
 80212ba:	d045      	beq.n	8021348 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80212bc:	4926      	ldr	r1, [pc, #152]	; (8021358 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 80212be:	f8d1 8000 	ldr.w	r8, [r1]
 80212c2:	9905      	ldr	r1, [sp, #20]
 80212c4:	fa5f fb88 	uxtb.w	fp, r8
 80212c8:	434a      	muls	r2, r1
 80212ca:	1c56      	adds	r6, r2, #1
 80212cc:	eb06 2222 	add.w	r2, r6, r2, asr #8
 80212d0:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 80212d4:	1212      	asrs	r2, r2, #8
 80212d6:	f815 9006 	ldrb.w	r9, [r5, r6]
 80212da:	fa1f fa82 	uxth.w	sl, r2
 80212de:	43d2      	mvns	r2, r2
 80212e0:	fb1b fb0a 	smulbb	fp, fp, sl
 80212e4:	b2d2      	uxtb	r2, r2
 80212e6:	fb09 b902 	mla	r9, r9, r2, fp
 80212ea:	fa1f f989 	uxth.w	r9, r9
 80212ee:	f109 0b01 	add.w	fp, r9, #1
 80212f2:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80212f6:	f3c8 2b07 	ubfx	fp, r8, #8, #8
 80212fa:	f3c8 4807 	ubfx	r8, r8, #16, #8
 80212fe:	fb1b fb0a 	smulbb	fp, fp, sl
 8021302:	ea4f 2929 	mov.w	r9, r9, asr #8
 8021306:	fb18 fa0a 	smulbb	sl, r8, sl
 802130a:	f805 9006 	strb.w	r9, [r5, r6]
 802130e:	442e      	add	r6, r5
 8021310:	f896 8002 	ldrb.w	r8, [r6, #2]
 8021314:	f896 9001 	ldrb.w	r9, [r6, #1]
 8021318:	fb08 aa02 	mla	sl, r8, r2, sl
 802131c:	fb09 b902 	mla	r9, r9, r2, fp
 8021320:	fa1f fa8a 	uxth.w	sl, sl
 8021324:	fa1f f989 	uxth.w	r9, r9
 8021328:	f10a 0801 	add.w	r8, sl, #1
 802132c:	f109 0b01 	add.w	fp, r9, #1
 8021330:	eb08 2a1a 	add.w	sl, r8, sl, lsr #8
 8021334:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8021338:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 802133c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8021340:	f886 a002 	strb.w	sl, [r6, #2]
 8021344:	f886 9001 	strb.w	r9, [r6, #1]
 8021348:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802134a:	4474      	add	r4, lr
 802134c:	3701      	adds	r7, #1
 802134e:	4410      	add	r0, r2
 8021350:	e755      	b.n	80211fe <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 8021352:	b007      	add	sp, #28
 8021354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021358:	24006ff4 	.word	0x24006ff4

0802135c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802135c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021360:	b085      	sub	sp, #20
 8021362:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8021366:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021368:	9203      	str	r2, [sp, #12]
 802136a:	6860      	ldr	r0, [r4, #4]
 802136c:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8021370:	9100      	str	r1, [sp, #0]
 8021372:	e9dd 2614 	ldrd	r2, r6, [sp, #80]	; 0x50
 8021376:	fb00 2606 	mla	r6, r0, r6, r2
 802137a:	6822      	ldr	r2, [r4, #0]
 802137c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8021380:	4416      	add	r6, r2
 8021382:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8021386:	3201      	adds	r2, #1
 8021388:	f022 0201 	bic.w	r2, r2, #1
 802138c:	9201      	str	r2, [sp, #4]
 802138e:	f8dc 2000 	ldr.w	r2, [ip]
 8021392:	9202      	str	r2, [sp, #8]
 8021394:	9a00      	ldr	r2, [sp, #0]
 8021396:	2a00      	cmp	r2, #0
 8021398:	dc03      	bgt.n	80213a2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 802139a:	9a03      	ldr	r2, [sp, #12]
 802139c:	2a00      	cmp	r2, #0
 802139e:	f340 8140 	ble.w	8021622 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 80213a2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80213a4:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 80213a8:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 80213ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80213ae:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 80213b2:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 80213b6:	2b00      	cmp	r3, #0
 80213b8:	dd0e      	ble.n	80213d8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80213ba:	142a      	asrs	r2, r5, #16
 80213bc:	d405      	bmi.n	80213ca <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80213be:	4572      	cmp	r2, lr
 80213c0:	da03      	bge.n	80213ca <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80213c2:	1422      	asrs	r2, r4, #16
 80213c4:	d401      	bmi.n	80213ca <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80213c6:	42ba      	cmp	r2, r7
 80213c8:	db07      	blt.n	80213da <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80213ca:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80213cc:	3b01      	subs	r3, #1
 80213ce:	3603      	adds	r6, #3
 80213d0:	4415      	add	r5, r2
 80213d2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80213d4:	4414      	add	r4, r2
 80213d6:	e7ee      	b.n	80213b6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 80213d8:	d072      	beq.n	80214c0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80213da:	1e5a      	subs	r2, r3, #1
 80213dc:	9811      	ldr	r0, [sp, #68]	; 0x44
 80213de:	fb00 5002 	mla	r0, r0, r2, r5
 80213e2:	1400      	asrs	r0, r0, #16
 80213e4:	d463      	bmi.n	80214ae <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80213e6:	4570      	cmp	r0, lr
 80213e8:	da61      	bge.n	80214ae <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80213ea:	9812      	ldr	r0, [sp, #72]	; 0x48
 80213ec:	fb00 4202 	mla	r2, r0, r2, r4
 80213f0:	1412      	asrs	r2, r2, #16
 80213f2:	d45c      	bmi.n	80214ae <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80213f4:	42ba      	cmp	r2, r7
 80213f6:	da5a      	bge.n	80214ae <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80213f8:	1cf0      	adds	r0, r6, #3
 80213fa:	469a      	mov	sl, r3
 80213fc:	f1ba 0f00 	cmp.w	sl, #0
 8021400:	dd59      	ble.n	80214b6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 8021402:	142a      	asrs	r2, r5, #16
 8021404:	9901      	ldr	r1, [sp, #4]
 8021406:	1427      	asrs	r7, r4, #16
 8021408:	fb01 2707 	mla	r7, r1, r7, r2
 802140c:	9902      	ldr	r1, [sp, #8]
 802140e:	087a      	lsrs	r2, r7, #1
 8021410:	5c8a      	ldrb	r2, [r1, r2]
 8021412:	07f9      	lsls	r1, r7, #31
 8021414:	bf54      	ite	pl
 8021416:	f002 020f 	andpl.w	r2, r2, #15
 802141a:	1112      	asrmi	r2, r2, #4
 802141c:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8021420:	b2d2      	uxtb	r2, r2
 8021422:	2a00      	cmp	r2, #0
 8021424:	d03b      	beq.n	802149e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8021426:	4980      	ldr	r1, [pc, #512]	; (8021628 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 8021428:	2aff      	cmp	r2, #255	; 0xff
 802142a:	680f      	ldr	r7, [r1, #0]
 802142c:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8021430:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8021434:	b2ff      	uxtb	r7, r7
 8021436:	f000 80ed 	beq.w	8021614 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 802143a:	fa1f f882 	uxth.w	r8, r2
 802143e:	43d2      	mvns	r2, r2
 8021440:	f810 ec03 	ldrb.w	lr, [r0, #-3]
 8021444:	fb17 f708 	smulbb	r7, r7, r8
 8021448:	b2d2      	uxtb	r2, r2
 802144a:	fb19 f908 	smulbb	r9, r9, r8
 802144e:	fb0e 7702 	mla	r7, lr, r2, r7
 8021452:	fb1b f808 	smulbb	r8, fp, r8
 8021456:	b2bf      	uxth	r7, r7
 8021458:	f107 0e01 	add.w	lr, r7, #1
 802145c:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8021460:	123f      	asrs	r7, r7, #8
 8021462:	f800 7c03 	strb.w	r7, [r0, #-3]
 8021466:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 802146a:	fb07 9902 	mla	r9, r7, r2, r9
 802146e:	fa1f f989 	uxth.w	r9, r9
 8021472:	f109 0701 	add.w	r7, r9, #1
 8021476:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 802147a:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 802147e:	fb07 8802 	mla	r8, r7, r2, r8
 8021482:	ea4f 2929 	mov.w	r9, r9, asr #8
 8021486:	fa1f f888 	uxth.w	r8, r8
 802148a:	f800 9c02 	strb.w	r9, [r0, #-2]
 802148e:	f108 0201 	add.w	r2, r8, #1
 8021492:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8021496:	ea4f 2828 	mov.w	r8, r8, asr #8
 802149a:	f800 8c01 	strb.w	r8, [r0, #-1]
 802149e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80214a0:	3003      	adds	r0, #3
 80214a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80214a6:	4415      	add	r5, r2
 80214a8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80214aa:	4414      	add	r4, r2
 80214ac:	e7a6      	b.n	80213fc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80214ae:	2700      	movs	r7, #0
 80214b0:	1bda      	subs	r2, r3, r7
 80214b2:	2a00      	cmp	r2, #0
 80214b4:	dc40      	bgt.n	8021538 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 80214b6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80214ba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80214be:	441e      	add	r6, r3
 80214c0:	9b00      	ldr	r3, [sp, #0]
 80214c2:	2b00      	cmp	r3, #0
 80214c4:	f340 80ad 	ble.w	8021622 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 80214c8:	ee30 0a04 	vadd.f32	s0, s0, s8
 80214cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80214ce:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80214d2:	eeb0 6a62 	vmov.f32	s12, s5
 80214d6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80214da:	ee31 1a05 	vadd.f32	s2, s2, s10
 80214de:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80214e2:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 80214e6:	eeb0 6a43 	vmov.f32	s12, s6
 80214ea:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80214ee:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80214f2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80214f6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80214fa:	ee77 2a62 	vsub.f32	s5, s14, s5
 80214fe:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021502:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021506:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802150a:	ee12 2a90 	vmov	r2, s5
 802150e:	eef0 2a47 	vmov.f32	s5, s14
 8021512:	fb92 f3f3 	sdiv	r3, r2, r3
 8021516:	ee13 2a10 	vmov	r2, s6
 802151a:	9311      	str	r3, [sp, #68]	; 0x44
 802151c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802151e:	eeb0 3a67 	vmov.f32	s6, s15
 8021522:	fb92 f3f3 	sdiv	r3, r2, r3
 8021526:	9312      	str	r3, [sp, #72]	; 0x48
 8021528:	9b00      	ldr	r3, [sp, #0]
 802152a:	9a03      	ldr	r2, [sp, #12]
 802152c:	3b01      	subs	r3, #1
 802152e:	9300      	str	r3, [sp, #0]
 8021530:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021532:	bf08      	it	eq
 8021534:	4613      	moveq	r3, r2
 8021536:	e72d      	b.n	8021394 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8021538:	1428      	asrs	r0, r5, #16
 802153a:	d45c      	bmi.n	80215f6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 802153c:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8021540:	4282      	cmp	r2, r0
 8021542:	dd58      	ble.n	80215f6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8021544:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8021548:	d455      	bmi.n	80215f6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 802154a:	f8dc 200c 	ldr.w	r2, [ip, #12]
 802154e:	4572      	cmp	r2, lr
 8021550:	dd51      	ble.n	80215f6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8021552:	9a01      	ldr	r2, [sp, #4]
 8021554:	9902      	ldr	r1, [sp, #8]
 8021556:	fb0e 0002 	mla	r0, lr, r2, r0
 802155a:	0842      	lsrs	r2, r0, #1
 802155c:	07c0      	lsls	r0, r0, #31
 802155e:	5c8a      	ldrb	r2, [r1, r2]
 8021560:	bf54      	ite	pl
 8021562:	f002 020f 	andpl.w	r2, r2, #15
 8021566:	1112      	asrmi	r2, r2, #4
 8021568:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802156c:	b2d2      	uxtb	r2, r2
 802156e:	2a00      	cmp	r2, #0
 8021570:	d041      	beq.n	80215f6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8021572:	492d      	ldr	r1, [pc, #180]	; (8021628 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 8021574:	2aff      	cmp	r2, #255	; 0xff
 8021576:	6808      	ldr	r0, [r1, #0]
 8021578:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 802157c:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8021580:	fa5f fe80 	uxtb.w	lr, r0
 8021584:	ea4f 0047 	mov.w	r0, r7, lsl #1
 8021588:	d03b      	beq.n	8021602 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 802158a:	fa1f f982 	uxth.w	r9, r2
 802158e:	4438      	add	r0, r7
 8021590:	43d2      	mvns	r2, r2
 8021592:	f816 8000 	ldrb.w	r8, [r6, r0]
 8021596:	fb1e fe09 	smulbb	lr, lr, r9
 802159a:	fb1a fa09 	smulbb	sl, sl, r9
 802159e:	b2d2      	uxtb	r2, r2
 80215a0:	fb1b f909 	smulbb	r9, fp, r9
 80215a4:	fb08 ee02 	mla	lr, r8, r2, lr
 80215a8:	fa1f fe8e 	uxth.w	lr, lr
 80215ac:	f10e 0801 	add.w	r8, lr, #1
 80215b0:	eb08 2e1e 	add.w	lr, r8, lr, lsr #8
 80215b4:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80215b8:	f806 e000 	strb.w	lr, [r6, r0]
 80215bc:	4430      	add	r0, r6
 80215be:	f890 e001 	ldrb.w	lr, [r0, #1]
 80215c2:	fb0e aa02 	mla	sl, lr, r2, sl
 80215c6:	fa1f fa8a 	uxth.w	sl, sl
 80215ca:	f10a 0e01 	add.w	lr, sl, #1
 80215ce:	eb0e 2a1a 	add.w	sl, lr, sl, lsr #8
 80215d2:	f890 e002 	ldrb.w	lr, [r0, #2]
 80215d6:	fb0e 9902 	mla	r9, lr, r2, r9
 80215da:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80215de:	fa1f f989 	uxth.w	r9, r9
 80215e2:	f880 a001 	strb.w	sl, [r0, #1]
 80215e6:	f109 0201 	add.w	r2, r9, #1
 80215ea:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 80215ee:	ea4f 2929 	mov.w	r9, r9, asr #8
 80215f2:	f880 9002 	strb.w	r9, [r0, #2]
 80215f6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80215f8:	3701      	adds	r7, #1
 80215fa:	4415      	add	r5, r2
 80215fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80215fe:	4414      	add	r4, r2
 8021600:	e756      	b.n	80214b0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8021602:	4438      	add	r0, r7
 8021604:	f806 e000 	strb.w	lr, [r6, r0]
 8021608:	4430      	add	r0, r6
 802160a:	f880 a001 	strb.w	sl, [r0, #1]
 802160e:	f880 b002 	strb.w	fp, [r0, #2]
 8021612:	e7f0      	b.n	80215f6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8021614:	f800 7c03 	strb.w	r7, [r0, #-3]
 8021618:	f800 9c02 	strb.w	r9, [r0, #-2]
 802161c:	f800 bc01 	strb.w	fp, [r0, #-1]
 8021620:	e73d      	b.n	802149e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8021622:	b005      	add	sp, #20
 8021624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021628:	24006ff4 	.word	0x24006ff4

0802162c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW9D1Ev>:
 802162c:	4770      	bx	lr

0802162e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLED1Ev>:
 802162e:	4770      	bx	lr

08021630 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L4D1Ev>:
 8021630:	4770      	bx	lr

08021632 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 8021632:	4770      	bx	lr

08021634 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 8021634:	4770      	bx	lr

08021636 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 8021636:	4770      	bx	lr

08021638 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 8021638:	4770      	bx	lr

0802163a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 802163a:	4770      	bx	lr

0802163c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 802163c:	4770      	bx	lr

0802163e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 802163e:	4770      	bx	lr

08021640 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8021640:	4770      	bx	lr

08021642 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8021642:	4770      	bx	lr

08021644 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8021644:	4770      	bx	lr

08021646 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8021646:	4770      	bx	lr

08021648 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8021648:	4770      	bx	lr

0802164a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 802164a:	4770      	bx	lr

0802164c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 802164c:	4770      	bx	lr

0802164e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 802164e:	4770      	bx	lr

08021650 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8021650:	4770      	bx	lr

08021652 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8021652:	4770      	bx	lr

08021654 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8021654:	4770      	bx	lr

08021656 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8021656:	4770      	bx	lr

08021658 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8021658:	4770      	bx	lr
	...

0802165c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 802165c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802165e:	4606      	mov	r6, r0
 8021660:	b087      	sub	sp, #28
 8021662:	4615      	mov	r5, r2
 8021664:	461f      	mov	r7, r3
 8021666:	b353      	cbz	r3, 80216be <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8021668:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 802166c:	2b00      	cmp	r3, #0
 802166e:	dd26      	ble.n	80216be <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8021670:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8021674:	2b00      	cmp	r3, #0
 8021676:	dd22      	ble.n	80216be <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8021678:	6808      	ldr	r0, [r1, #0]
 802167a:	aa04      	add	r2, sp, #16
 802167c:	6849      	ldr	r1, [r1, #4]
 802167e:	4c1b      	ldr	r4, [pc, #108]	; (80216ec <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 8021680:	c203      	stmia	r2!, {r0, r1}
 8021682:	a804      	add	r0, sp, #16
 8021684:	f7fb faf2 	bl	801cc6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021688:	6820      	ldr	r0, [r4, #0]
 802168a:	6803      	ldr	r3, [r0, #0]
 802168c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802168e:	4798      	blx	r3
 8021690:	2fff      	cmp	r7, #255	; 0xff
 8021692:	d016      	beq.n	80216c2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 8021694:	f010 0f08 	tst.w	r0, #8
 8021698:	6820      	ldr	r0, [r4, #0]
 802169a:	d015      	beq.n	80216c8 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 802169c:	2400      	movs	r4, #0
 802169e:	6801      	ldr	r1, [r0, #0]
 80216a0:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80216a4:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80216a8:	e9cd 7402 	strd	r7, r4, [sp, #8]
 80216ac:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 80216b0:	9401      	str	r4, [sp, #4]
 80216b2:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 80216b6:	9400      	str	r4, [sp, #0]
 80216b8:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 80216ba:	4629      	mov	r1, r5
 80216bc:	47a0      	blx	r4
 80216be:	b007      	add	sp, #28
 80216c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80216c2:	f010 0f02 	tst.w	r0, #2
 80216c6:	e7e7      	b.n	8021698 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 80216c8:	6803      	ldr	r3, [r0, #0]
 80216ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80216cc:	4798      	blx	r3
 80216ce:	4b08      	ldr	r3, [pc, #32]	; (80216f0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x94>)
 80216d0:	4601      	mov	r1, r0
 80216d2:	4630      	mov	r0, r6
 80216d4:	881a      	ldrh	r2, [r3, #0]
 80216d6:	6833      	ldr	r3, [r6, #0]
 80216d8:	e9cd 5700 	strd	r5, r7, [sp]
 80216dc:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 80216de:	ab04      	add	r3, sp, #16
 80216e0:	47a8      	blx	r5
 80216e2:	6820      	ldr	r0, [r4, #0]
 80216e4:	6803      	ldr	r3, [r0, #0]
 80216e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80216e8:	4798      	blx	r3
 80216ea:	e7e8      	b.n	80216be <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 80216ec:	24006fec 	.word	0x24006fec
 80216f0:	24006fe6 	.word	0x24006fe6

080216f4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 80216f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80216f8:	b08b      	sub	sp, #44	; 0x2c
 80216fa:	460d      	mov	r5, r1
 80216fc:	4616      	mov	r6, r2
 80216fe:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
 8021702:	f1b8 0f00 	cmp.w	r8, #0
 8021706:	d047      	beq.n	8021798 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 8021708:	6810      	ldr	r0, [r2, #0]
 802170a:	ac06      	add	r4, sp, #24
 802170c:	6851      	ldr	r1, [r2, #4]
 802170e:	4f51      	ldr	r7, [pc, #324]	; (8021854 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>)
 8021710:	c403      	stmia	r4!, {r0, r1}
 8021712:	6818      	ldr	r0, [r3, #0]
 8021714:	ac08      	add	r4, sp, #32
 8021716:	6859      	ldr	r1, [r3, #4]
 8021718:	c403      	stmia	r4!, {r0, r1}
 802171a:	a806      	add	r0, sp, #24
 802171c:	f7fb faa6 	bl	801cc6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021720:	4631      	mov	r1, r6
 8021722:	a808      	add	r0, sp, #32
 8021724:	f7fb faca 	bl	801ccbc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021728:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 802172c:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8021730:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8021734:	6838      	ldr	r0, [r7, #0]
 8021736:	fb11 2103 	smlabb	r1, r1, r3, r2
 802173a:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	; 0x24
 802173e:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	; 0x26
 8021742:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8021746:	440d      	add	r5, r1
 8021748:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 802174c:	440a      	add	r2, r1
 802174e:	f8ad 2020 	strh.w	r2, [sp, #32]
 8021752:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8021756:	4413      	add	r3, r2
 8021758:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 802175c:	6803      	ldr	r3, [r0, #0]
 802175e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021760:	4798      	blx	r3
 8021762:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8021766:	d01a      	beq.n	802179e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xaa>
 8021768:	f010 0f04 	tst.w	r0, #4
 802176c:	6838      	ldr	r0, [r7, #0]
 802176e:	d019      	beq.n	80217a4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb0>
 8021770:	2100      	movs	r1, #0
 8021772:	6807      	ldr	r7, [r0, #0]
 8021774:	b2a4      	uxth	r4, r4
 8021776:	f8cd 800c 	str.w	r8, [sp, #12]
 802177a:	b2b6      	uxth	r6, r6
 802177c:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8021780:	9401      	str	r4, [sp, #4]
 8021782:	9600      	str	r6, [sp, #0]
 8021784:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8021788:	e9cd 1104 	strd	r1, r1, [sp, #16]
 802178c:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8021790:	9102      	str	r1, [sp, #8]
 8021792:	4629      	mov	r1, r5
 8021794:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8021796:	47a0      	blx	r4
 8021798:	b00b      	add	sp, #44	; 0x2c
 802179a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802179e:	f010 0f01 	tst.w	r0, #1
 80217a2:	e7e3      	b.n	802176c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x78>
 80217a4:	6803      	ldr	r3, [r0, #0]
 80217a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80217a8:	4798      	blx	r3
 80217aa:	4a2b      	ldr	r2, [pc, #172]	; (8021858 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x164>)
 80217ac:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 80217b0:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80217b4:	8813      	ldrh	r3, [r2, #0]
 80217b6:	f9bd c020 	ldrsh.w	ip, [sp, #32]
 80217ba:	fb03 f404 	mul.w	r4, r3, r4
 80217be:	fb03 c101 	mla	r1, r3, r1, ip
 80217c2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80217c6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80217ca:	4408      	add	r0, r1
 80217cc:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 80217d0:	4404      	add	r4, r0
 80217d2:	d02e      	beq.n	8021832 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 80217d4:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 80217d8:	1b9b      	subs	r3, r3, r6
 80217da:	f1c8 0cff 	rsb	ip, r8, #255	; 0xff
 80217de:	1b96      	subs	r6, r2, r6
 80217e0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80217e4:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80217e8:	42a0      	cmp	r0, r4
 80217ea:	d22d      	bcs.n	8021848 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 80217ec:	eb00 0e01 	add.w	lr, r0, r1
 80217f0:	4570      	cmp	r0, lr
 80217f2:	d210      	bcs.n	8021816 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x122>
 80217f4:	f890 9000 	ldrb.w	r9, [r0]
 80217f8:	f815 2b01 	ldrb.w	r2, [r5], #1
 80217fc:	fb19 f90c 	smulbb	r9, r9, ip
 8021800:	fb02 9208 	mla	r2, r2, r8, r9
 8021804:	b292      	uxth	r2, r2
 8021806:	f102 0901 	add.w	r9, r2, #1
 802180a:	eb09 2212 	add.w	r2, r9, r2, lsr #8
 802180e:	1212      	asrs	r2, r2, #8
 8021810:	f800 2b01 	strb.w	r2, [r0], #1
 8021814:	e7ec      	b.n	80217f0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 8021816:	4418      	add	r0, r3
 8021818:	4435      	add	r5, r6
 802181a:	e7e5      	b.n	80217e8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 802181c:	8813      	ldrh	r3, [r2, #0]
 802181e:	1b9b      	subs	r3, r3, r6
 8021820:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021824:	4418      	add	r0, r3
 8021826:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 802182a:	1b9b      	subs	r3, r3, r6
 802182c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021830:	441d      	add	r5, r3
 8021832:	42a0      	cmp	r0, r4
 8021834:	d208      	bcs.n	8021848 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 8021836:	eb00 0c01 	add.w	ip, r0, r1
 802183a:	4560      	cmp	r0, ip
 802183c:	d2ee      	bcs.n	802181c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x128>
 802183e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8021842:	f800 3b01 	strb.w	r3, [r0], #1
 8021846:	e7f8      	b.n	802183a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x146>
 8021848:	6838      	ldr	r0, [r7, #0]
 802184a:	6803      	ldr	r3, [r0, #0]
 802184c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802184e:	4798      	blx	r3
 8021850:	e7a2      	b.n	8021798 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 8021852:	bf00      	nop
 8021854:	24006fec 	.word	0x24006fec
 8021858:	24006fe6 	.word	0x24006fe6

0802185c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 802185c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802185e:	2300      	movs	r3, #0
 8021860:	b085      	sub	sp, #20
 8021862:	9300      	str	r3, [sp, #0]
 8021864:	4b41      	ldr	r3, [pc, #260]	; (802196c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x110>)
 8021866:	781b      	ldrb	r3, [r3, #0]
 8021868:	2b00      	cmp	r3, #0
 802186a:	d136      	bne.n	80218da <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7e>
 802186c:	4a40      	ldr	r2, [pc, #256]	; (8021970 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 802186e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8021872:	f8ad 2004 	strh.w	r2, [sp, #4]
 8021876:	2b00      	cmp	r3, #0
 8021878:	d131      	bne.n	80218de <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x82>
 802187a:	4b3e      	ldr	r3, [pc, #248]	; (8021974 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 802187c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8021880:	ac02      	add	r4, sp, #8
 8021882:	6808      	ldr	r0, [r1, #0]
 8021884:	f8ad 3006 	strh.w	r3, [sp, #6]
 8021888:	ab02      	add	r3, sp, #8
 802188a:	6849      	ldr	r1, [r1, #4]
 802188c:	4d3a      	ldr	r5, [pc, #232]	; (8021978 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x11c>)
 802188e:	c303      	stmia	r3!, {r0, r1}
 8021890:	4669      	mov	r1, sp
 8021892:	4620      	mov	r0, r4
 8021894:	f7fb fa12 	bl	801ccbc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021898:	4668      	mov	r0, sp
 802189a:	f7fb f9e7 	bl	801cc6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802189e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80218a2:	f8bd 2000 	ldrh.w	r2, [sp]
 80218a6:	462e      	mov	r6, r5
 80218a8:	6828      	ldr	r0, [r5, #0]
 80218aa:	4413      	add	r3, r2
 80218ac:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80218b0:	f8ad 3008 	strh.w	r3, [sp, #8]
 80218b4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80218b8:	4413      	add	r3, r2
 80218ba:	f8ad 300a 	strh.w	r3, [sp, #10]
 80218be:	6803      	ldr	r3, [r0, #0]
 80218c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80218c2:	4798      	blx	r3
 80218c4:	f010 0f01 	tst.w	r0, #1
 80218c8:	d00b      	beq.n	80218e2 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x86>
 80218ca:	6828      	ldr	r0, [r5, #0]
 80218cc:	6803      	ldr	r3, [r0, #0]
 80218ce:	e894 0006 	ldmia.w	r4, {r1, r2}
 80218d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80218d4:	4798      	blx	r3
 80218d6:	b005      	add	sp, #20
 80218d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80218da:	4a26      	ldr	r2, [pc, #152]	; (8021974 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 80218dc:	e7c7      	b.n	802186e <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 80218de:	4b24      	ldr	r3, [pc, #144]	; (8021970 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 80218e0:	e7cc      	b.n	802187c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 80218e2:	6830      	ldr	r0, [r6, #0]
 80218e4:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 80218e8:	6803      	ldr	r3, [r0, #0]
 80218ea:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 80218ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80218f0:	4798      	blx	r3
 80218f2:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 80218f6:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80218fa:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 80218fe:	fb14 3402 	smlabb	r4, r4, r2, r3
 8021902:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021906:	4404      	add	r4, r0
 8021908:	6830      	ldr	r0, [r6, #0]
 802190a:	6803      	ldr	r3, [r0, #0]
 802190c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802190e:	4798      	blx	r3
 8021910:	4917      	ldr	r1, [pc, #92]	; (8021970 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 8021912:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8021916:	880b      	ldrh	r3, [r1, #0]
 8021918:	f9bd c008 	ldrsh.w	ip, [sp, #8]
 802191c:	fb03 c202 	mla	r2, r3, r2, ip
 8021920:	437b      	muls	r3, r7
 8021922:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 8021926:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802192a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802192e:	4410      	add	r0, r2
 8021930:	18c2      	adds	r2, r0, r3
 8021932:	4290      	cmp	r0, r2
 8021934:	d214      	bcs.n	8021960 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>
 8021936:	eb00 0c07 	add.w	ip, r0, r7
 802193a:	4560      	cmp	r0, ip
 802193c:	d204      	bcs.n	8021948 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xec>
 802193e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8021942:	f800 3b01 	strb.w	r3, [r0], #1
 8021946:	e7f8      	b.n	802193a <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xde>
 8021948:	880b      	ldrh	r3, [r1, #0]
 802194a:	1b5b      	subs	r3, r3, r5
 802194c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021950:	4418      	add	r0, r3
 8021952:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8021956:	1b5b      	subs	r3, r3, r5
 8021958:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802195c:	441c      	add	r4, r3
 802195e:	e7e8      	b.n	8021932 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd6>
 8021960:	6830      	ldr	r0, [r6, #0]
 8021962:	6803      	ldr	r3, [r0, #0]
 8021964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021966:	4798      	blx	r3
 8021968:	e7b5      	b.n	80218d6 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 802196a:	bf00      	nop
 802196c:	24006fe4 	.word	0x24006fe4
 8021970:	24006fe6 	.word	0x24006fe6
 8021974:	24006fe8 	.word	0x24006fe8
 8021978:	24006fec 	.word	0x24006fec

0802197c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 802197c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021980:	b08f      	sub	sp, #60	; 0x3c
 8021982:	461c      	mov	r4, r3
 8021984:	9203      	str	r2, [sp, #12]
 8021986:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 802198a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802198c:	6820      	ldr	r0, [r4, #0]
 802198e:	9100      	str	r1, [sp, #0]
 8021990:	9204      	str	r2, [sp, #16]
 8021992:	aa0a      	add	r2, sp, #40	; 0x28
 8021994:	6861      	ldr	r1, [r4, #4]
 8021996:	c203      	stmia	r2!, {r0, r1}
 8021998:	6818      	ldr	r0, [r3, #0]
 802199a:	aa0c      	add	r2, sp, #48	; 0x30
 802199c:	6859      	ldr	r1, [r3, #4]
 802199e:	c203      	stmia	r2!, {r0, r1}
 80219a0:	a80a      	add	r0, sp, #40	; 0x28
 80219a2:	f7fb f963 	bl	801cc6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80219a6:	4621      	mov	r1, r4
 80219a8:	a80c      	add	r0, sp, #48	; 0x30
 80219aa:	f7fb f987 	bl	801ccbc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80219ae:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 80219b2:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	; 0x2e
 80219b6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80219ba:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
 80219be:	bfdb      	ittet	le
 80219c0:	b2b3      	uxthle	r3, r6
 80219c2:	f44f 6280 	movle.w	r2, #1024	; 0x400
 80219c6:	2301      	movgt	r3, #1
 80219c8:	fb92 f3f3 	sdivle	r3, r2, r3
 80219cc:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 80219d0:	441d      	add	r5, r3
 80219d2:	fb92 f1f3 	sdiv	r1, r2, r3
 80219d6:	fa1f fc81 	uxth.w	ip, r1
 80219da:	3d01      	subs	r5, #1
 80219dc:	fb0c 2413 	mls	r4, ip, r3, r2
 80219e0:	4661      	mov	r1, ip
 80219e2:	fb14 f406 	smulbb	r4, r4, r6
 80219e6:	4404      	add	r4, r0
 80219e8:	fb95 f5f3 	sdiv	r5, r5, r3
 80219ec:	b2a4      	uxth	r4, r4
 80219ee:	b131      	cbz	r1, 80219fe <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x82>
 80219f0:	9b03      	ldr	r3, [sp, #12]
 80219f2:	9900      	ldr	r1, [sp, #0]
 80219f4:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80219f8:	ba1b      	rev	r3, r3
 80219fa:	4419      	add	r1, r3
 80219fc:	9100      	str	r1, [sp, #0]
 80219fe:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8021a02:	b2ad      	uxth	r5, r5
 8021a04:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
 8021a08:	4418      	add	r0, r3
 8021a0a:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8021a0e:	00ad      	lsls	r5, r5, #2
 8021a10:	441a      	add	r2, r3
 8021a12:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8021a16:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
 8021a1a:	9301      	str	r3, [sp, #4]
 8021a1c:	4b79      	ldr	r3, [pc, #484]	; (8021c04 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x288>)
 8021a1e:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 8021a22:	6818      	ldr	r0, [r3, #0]
 8021a24:	6803      	ldr	r3, [r0, #0]
 8021a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021a28:	4798      	blx	r3
 8021a2a:	4a77      	ldr	r2, [pc, #476]	; (8021c08 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x28c>)
 8021a2c:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	; 0x32
 8021a30:	2c00      	cmp	r4, #0
 8021a32:	8813      	ldrh	r3, [r2, #0]
 8021a34:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 8021a38:	9209      	str	r2, [sp, #36]	; 0x24
 8021a3a:	fb03 c101 	mla	r1, r3, r1, ip
 8021a3e:	fb06 f303 	mul.w	r3, r6, r3
 8021a42:	bf18      	it	ne
 8021a44:	2600      	movne	r6, #0
 8021a46:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8021a4a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021a4e:	4408      	add	r0, r1
 8021a50:	4403      	add	r3, r0
 8021a52:	9306      	str	r3, [sp, #24]
 8021a54:	f105 0304 	add.w	r3, r5, #4
 8021a58:	9305      	str	r3, [sp, #20]
 8021a5a:	9b01      	ldr	r3, [sp, #4]
 8021a5c:	bf08      	it	eq
 8021a5e:	461e      	moveq	r6, r3
 8021a60:	2300      	movs	r3, #0
 8021a62:	b2b6      	uxth	r6, r6
 8021a64:	9302      	str	r3, [sp, #8]
 8021a66:	9a06      	ldr	r2, [sp, #24]
 8021a68:	4290      	cmp	r0, r2
 8021a6a:	f080 80c2 	bcs.w	8021bf2 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x276>
 8021a6e:	b963      	cbnz	r3, 8021a8a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10e>
 8021a70:	9b00      	ldr	r3, [sp, #0]
 8021a72:	781a      	ldrb	r2, [r3, #0]
 8021a74:	0993      	lsrs	r3, r2, #6
 8021a76:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8021a7a:	9202      	str	r2, [sp, #8]
 8021a7c:	1e5a      	subs	r2, r3, #1
 8021a7e:	2a02      	cmp	r2, #2
 8021a80:	d815      	bhi.n	8021aae <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x132>
 8021a82:	9a00      	ldr	r2, [sp, #0]
 8021a84:	b29b      	uxth	r3, r3
 8021a86:	3201      	adds	r2, #1
 8021a88:	9200      	str	r2, [sp, #0]
 8021a8a:	b1b4      	cbz	r4, 8021aba <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x13e>
 8021a8c:	429c      	cmp	r4, r3
 8021a8e:	bf91      	iteee	ls
 8021a90:	1b1c      	subls	r4, r3, r4
 8021a92:	1ae4      	subhi	r4, r4, r3
 8021a94:	4635      	movhi	r5, r6
 8021a96:	f04f 0e00 	movhi.w	lr, #0
 8021a9a:	bf9b      	ittet	ls
 8021a9c:	fa1f fe84 	uxthls.w	lr, r4
 8021aa0:	f8bd 5004 	ldrhls.w	r5, [sp, #4]
 8021aa4:	b2a4      	uxthhi	r4, r4
 8021aa6:	2400      	movls	r4, #0
 8021aa8:	4673      	mov	r3, lr
 8021aaa:	462e      	mov	r6, r5
 8021aac:	e7db      	b.n	8021a66 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xea>
 8021aae:	9a00      	ldr	r2, [sp, #0]
 8021ab0:	9b00      	ldr	r3, [sp, #0]
 8021ab2:	3202      	adds	r2, #2
 8021ab4:	785b      	ldrb	r3, [r3, #1]
 8021ab6:	9200      	str	r2, [sp, #0]
 8021ab8:	e7e7      	b.n	8021a8a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10e>
 8021aba:	2204      	movs	r2, #4
 8021abc:	9905      	ldr	r1, [sp, #20]
 8021abe:	429e      	cmp	r6, r3
 8021ac0:	4615      	mov	r5, r2
 8021ac2:	9a02      	ldr	r2, [sp, #8]
 8021ac4:	bf94      	ite	ls
 8021ac6:	eba3 0e06 	subls.w	lr, r3, r6
 8021aca:	46a6      	movhi	lr, r4
 8021acc:	fb15 1202 	smlabb	r2, r5, r2, r1
 8021ad0:	9903      	ldr	r1, [sp, #12]
 8021ad2:	bf8c      	ite	hi
 8021ad4:	1af5      	subhi	r5, r6, r3
 8021ad6:	fa1f fe8e 	uxthls.w	lr, lr
 8021ada:	f851 c002 	ldr.w	ip, [r1, r2]
 8021ade:	bf9a      	itte	ls
 8021ae0:	4625      	movls	r5, r4
 8021ae2:	4632      	movls	r2, r6
 8021ae4:	b2ad      	uxthhi	r5, r5
 8021ae6:	ea4f 611c 	mov.w	r1, ip, lsr #24
 8021aea:	bf88      	it	hi
 8021aec:	461a      	movhi	r2, r3
 8021aee:	b179      	cbz	r1, 8021b10 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x194>
 8021af0:	29ff      	cmp	r1, #255	; 0xff
 8021af2:	fa5f f98c 	uxtb.w	r9, ip
 8021af6:	f3cc 2807 	ubfx	r8, ip, #8, #8
 8021afa:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8021afe:	d126      	bne.n	8021b4e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 8021b00:	9f04      	ldr	r7, [sp, #16]
 8021b02:	2fff      	cmp	r7, #255	; 0xff
 8021b04:	d123      	bne.n	8021b4e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 8021b06:	4682      	mov	sl, r0
 8021b08:	4611      	mov	r1, r2
 8021b0a:	f10a 0a03 	add.w	sl, sl, #3
 8021b0e:	b9a9      	cbnz	r1, 8021b3c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1c0>
 8021b10:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8021b14:	429e      	cmp	r6, r3
 8021b16:	4410      	add	r0, r2
 8021b18:	d8c6      	bhi.n	8021aa8 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12c>
 8021b1a:	f8bd 5004 	ldrh.w	r5, [sp, #4]
 8021b1e:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 8021b22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021b24:	1b64      	subs	r4, r4, r5
 8021b26:	9a01      	ldr	r2, [sp, #4]
 8021b28:	881b      	ldrh	r3, [r3, #0]
 8021b2a:	b2a4      	uxth	r4, r4
 8021b2c:	1a9b      	subs	r3, r3, r2
 8021b2e:	2c00      	cmp	r4, #0
 8021b30:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021b34:	bf18      	it	ne
 8021b36:	2500      	movne	r5, #0
 8021b38:	4418      	add	r0, r3
 8021b3a:	e7b5      	b.n	8021aa8 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12c>
 8021b3c:	3901      	subs	r1, #1
 8021b3e:	f80a 9c03 	strb.w	r9, [sl, #-3]
 8021b42:	f80a 8c02 	strb.w	r8, [sl, #-2]
 8021b46:	f80a cc01 	strb.w	ip, [sl, #-1]
 8021b4a:	b289      	uxth	r1, r1
 8021b4c:	e7dd      	b.n	8021b0a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x18e>
 8021b4e:	9f04      	ldr	r7, [sp, #16]
 8021b50:	fb07 fa01 	mul.w	sl, r7, r1
 8021b54:	f10a 0101 	add.w	r1, sl, #1
 8021b58:	eb01 212a 	add.w	r1, r1, sl, asr #8
 8021b5c:	1209      	asrs	r1, r1, #8
 8021b5e:	ea6f 0a01 	mvn.w	sl, r1
 8021b62:	b289      	uxth	r1, r1
 8021b64:	fb19 f901 	smulbb	r9, r9, r1
 8021b68:	fa5f fa8a 	uxtb.w	sl, sl
 8021b6c:	fb18 f801 	smulbb	r8, r8, r1
 8021b70:	fb1c f101 	smulbb	r1, ip, r1
 8021b74:	fa1f f789 	uxth.w	r7, r9
 8021b78:	4684      	mov	ip, r0
 8021b7a:	4691      	mov	r9, r2
 8021b7c:	9707      	str	r7, [sp, #28]
 8021b7e:	b289      	uxth	r1, r1
 8021b80:	fa1f f788 	uxth.w	r7, r8
 8021b84:	9708      	str	r7, [sp, #32]
 8021b86:	f10c 0c03 	add.w	ip, ip, #3
 8021b8a:	f1b9 0f00 	cmp.w	r9, #0
 8021b8e:	d0bf      	beq.n	8021b10 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x194>
 8021b90:	f81c 8c03 	ldrb.w	r8, [ip, #-3]
 8021b94:	f109 39ff 	add.w	r9, r9, #4294967295
 8021b98:	9f07      	ldr	r7, [sp, #28]
 8021b9a:	fa1f f989 	uxth.w	r9, r9
 8021b9e:	fb08 780a 	mla	r8, r8, sl, r7
 8021ba2:	9f08      	ldr	r7, [sp, #32]
 8021ba4:	fa1f f888 	uxth.w	r8, r8
 8021ba8:	f108 0b01 	add.w	fp, r8, #1
 8021bac:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8021bb0:	ea4f 2828 	mov.w	r8, r8, asr #8
 8021bb4:	f80c 8c03 	strb.w	r8, [ip, #-3]
 8021bb8:	f81c 8c02 	ldrb.w	r8, [ip, #-2]
 8021bbc:	fb08 780a 	mla	r8, r8, sl, r7
 8021bc0:	fa1f f888 	uxth.w	r8, r8
 8021bc4:	f108 0b01 	add.w	fp, r8, #1
 8021bc8:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8021bcc:	ea4f 2828 	mov.w	r8, r8, asr #8
 8021bd0:	f80c 8c02 	strb.w	r8, [ip, #-2]
 8021bd4:	f81c 8c01 	ldrb.w	r8, [ip, #-1]
 8021bd8:	fb08 180a 	mla	r8, r8, sl, r1
 8021bdc:	fa1f f888 	uxth.w	r8, r8
 8021be0:	f108 0b01 	add.w	fp, r8, #1
 8021be4:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8021be8:	ea4f 2828 	mov.w	r8, r8, asr #8
 8021bec:	f80c 8c01 	strb.w	r8, [ip, #-1]
 8021bf0:	e7c9      	b.n	8021b86 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x20a>
 8021bf2:	4b04      	ldr	r3, [pc, #16]	; (8021c04 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x288>)
 8021bf4:	6818      	ldr	r0, [r3, #0]
 8021bf6:	6803      	ldr	r3, [r0, #0]
 8021bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021bfa:	4798      	blx	r3
 8021bfc:	b00f      	add	sp, #60	; 0x3c
 8021bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021c02:	bf00      	nop
 8021c04:	24006fec 	.word	0x24006fec
 8021c08:	24006fe6 	.word	0x24006fe6

08021c0c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 8021c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021c10:	b089      	sub	sp, #36	; 0x24
 8021c12:	4607      	mov	r7, r0
 8021c14:	4689      	mov	r9, r1
 8021c16:	4692      	mov	sl, r2
 8021c18:	ac08      	add	r4, sp, #32
 8021c1a:	461e      	mov	r6, r3
 8021c1c:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 8021c20:	4620      	mov	r0, r4
 8021c22:	f7fd ffa5 	bl	801fb70 <_ZNK8touchgfx6Bitmap7getDataEv>
 8021c26:	683b      	ldr	r3, [r7, #0]
 8021c28:	4605      	mov	r5, r0
 8021c2a:	4620      	mov	r0, r4
 8021c2c:	f8d3 8018 	ldr.w	r8, [r3, #24]
 8021c30:	f7fd ff36 	bl	801faa0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8021c34:	4683      	mov	fp, r0
 8021c36:	4620      	mov	r0, r4
 8021c38:	f7fd ff66 	bl	801fb08 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8021c3c:	4653      	mov	r3, sl
 8021c3e:	464a      	mov	r2, r9
 8021c40:	4639      	mov	r1, r7
 8021c42:	9500      	str	r5, [sp, #0]
 8021c44:	e9cd b001 	strd	fp, r0, [sp, #4]
 8021c48:	a806      	add	r0, sp, #24
 8021c4a:	47c0      	blx	r8
 8021c4c:	a906      	add	r1, sp, #24
 8021c4e:	4630      	mov	r0, r6
 8021c50:	f7fd fe0a 	bl	801f868 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>
 8021c54:	4628      	mov	r0, r5
 8021c56:	b009      	add	sp, #36	; 0x24
 8021c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021c5c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L4D0Ev>:
 8021c5c:	b510      	push	{r4, lr}
 8021c5e:	4604      	mov	r4, r0
 8021c60:	2104      	movs	r1, #4
 8021c62:	f007 f928 	bl	8028eb6 <_ZdlPvj>
 8021c66:	4620      	mov	r0, r4
 8021c68:	bd10      	pop	{r4, pc}

08021c6a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLED0Ev>:
 8021c6a:	b510      	push	{r4, lr}
 8021c6c:	4604      	mov	r4, r0
 8021c6e:	2104      	movs	r1, #4
 8021c70:	f007 f921 	bl	8028eb6 <_ZdlPvj>
 8021c74:	4620      	mov	r0, r4
 8021c76:	bd10      	pop	{r4, pc}

08021c78 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW9D0Ev>:
 8021c78:	b510      	push	{r4, lr}
 8021c7a:	4604      	mov	r4, r0
 8021c7c:	f640 0144 	movw	r1, #2116	; 0x844
 8021c80:	f007 f919 	bl	8028eb6 <_ZdlPvj>
 8021c84:	4620      	mov	r0, r4
 8021c86:	bd10      	pop	{r4, pc}

08021c88 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8021c88:	b510      	push	{r4, lr}
 8021c8a:	4604      	mov	r4, r0
 8021c8c:	2104      	movs	r1, #4
 8021c8e:	f007 f912 	bl	8028eb6 <_ZdlPvj>
 8021c92:	4620      	mov	r0, r4
 8021c94:	bd10      	pop	{r4, pc}

08021c96 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8021c96:	b510      	push	{r4, lr}
 8021c98:	4604      	mov	r4, r0
 8021c9a:	2104      	movs	r1, #4
 8021c9c:	f007 f90b 	bl	8028eb6 <_ZdlPvj>
 8021ca0:	4620      	mov	r0, r4
 8021ca2:	bd10      	pop	{r4, pc}

08021ca4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8021ca4:	b510      	push	{r4, lr}
 8021ca6:	4604      	mov	r4, r0
 8021ca8:	2104      	movs	r1, #4
 8021caa:	f007 f904 	bl	8028eb6 <_ZdlPvj>
 8021cae:	4620      	mov	r0, r4
 8021cb0:	bd10      	pop	{r4, pc}

08021cb2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8021cb2:	b510      	push	{r4, lr}
 8021cb4:	4604      	mov	r4, r0
 8021cb6:	2104      	movs	r1, #4
 8021cb8:	f007 f8fd 	bl	8028eb6 <_ZdlPvj>
 8021cbc:	4620      	mov	r0, r4
 8021cbe:	bd10      	pop	{r4, pc}

08021cc0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8021cc0:	b510      	push	{r4, lr}
 8021cc2:	4604      	mov	r4, r0
 8021cc4:	2104      	movs	r1, #4
 8021cc6:	f007 f8f6 	bl	8028eb6 <_ZdlPvj>
 8021cca:	4620      	mov	r0, r4
 8021ccc:	bd10      	pop	{r4, pc}

08021cce <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8021cce:	b510      	push	{r4, lr}
 8021cd0:	4604      	mov	r4, r0
 8021cd2:	2104      	movs	r1, #4
 8021cd4:	f007 f8ef 	bl	8028eb6 <_ZdlPvj>
 8021cd8:	4620      	mov	r0, r4
 8021cda:	bd10      	pop	{r4, pc}

08021cdc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8021cdc:	b510      	push	{r4, lr}
 8021cde:	4604      	mov	r4, r0
 8021ce0:	2104      	movs	r1, #4
 8021ce2:	f007 f8e8 	bl	8028eb6 <_ZdlPvj>
 8021ce6:	4620      	mov	r0, r4
 8021ce8:	bd10      	pop	{r4, pc}

08021cea <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8021cea:	b510      	push	{r4, lr}
 8021cec:	4604      	mov	r4, r0
 8021cee:	2104      	movs	r1, #4
 8021cf0:	f007 f8e1 	bl	8028eb6 <_ZdlPvj>
 8021cf4:	4620      	mov	r0, r4
 8021cf6:	bd10      	pop	{r4, pc}

08021cf8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8021cf8:	b510      	push	{r4, lr}
 8021cfa:	4604      	mov	r4, r0
 8021cfc:	2104      	movs	r1, #4
 8021cfe:	f007 f8da 	bl	8028eb6 <_ZdlPvj>
 8021d02:	4620      	mov	r0, r4
 8021d04:	bd10      	pop	{r4, pc}

08021d06 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8021d06:	b510      	push	{r4, lr}
 8021d08:	4604      	mov	r4, r0
 8021d0a:	2104      	movs	r1, #4
 8021d0c:	f007 f8d3 	bl	8028eb6 <_ZdlPvj>
 8021d10:	4620      	mov	r0, r4
 8021d12:	bd10      	pop	{r4, pc}

08021d14 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8021d14:	b510      	push	{r4, lr}
 8021d16:	4604      	mov	r4, r0
 8021d18:	2104      	movs	r1, #4
 8021d1a:	f007 f8cc 	bl	8028eb6 <_ZdlPvj>
 8021d1e:	4620      	mov	r0, r4
 8021d20:	bd10      	pop	{r4, pc}

08021d22 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8021d22:	b510      	push	{r4, lr}
 8021d24:	4604      	mov	r4, r0
 8021d26:	2104      	movs	r1, #4
 8021d28:	f007 f8c5 	bl	8028eb6 <_ZdlPvj>
 8021d2c:	4620      	mov	r0, r4
 8021d2e:	bd10      	pop	{r4, pc}

08021d30 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8021d30:	b510      	push	{r4, lr}
 8021d32:	4604      	mov	r4, r0
 8021d34:	2104      	movs	r1, #4
 8021d36:	f007 f8be 	bl	8028eb6 <_ZdlPvj>
 8021d3a:	4620      	mov	r0, r4
 8021d3c:	bd10      	pop	{r4, pc}

08021d3e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8021d3e:	b510      	push	{r4, lr}
 8021d40:	4604      	mov	r4, r0
 8021d42:	2104      	movs	r1, #4
 8021d44:	f007 f8b7 	bl	8028eb6 <_ZdlPvj>
 8021d48:	4620      	mov	r0, r4
 8021d4a:	bd10      	pop	{r4, pc}

08021d4c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8021d4c:	b510      	push	{r4, lr}
 8021d4e:	4604      	mov	r4, r0
 8021d50:	2104      	movs	r1, #4
 8021d52:	f007 f8b0 	bl	8028eb6 <_ZdlPvj>
 8021d56:	4620      	mov	r0, r4
 8021d58:	bd10      	pop	{r4, pc}

08021d5a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8021d5a:	b510      	push	{r4, lr}
 8021d5c:	4604      	mov	r4, r0
 8021d5e:	2104      	movs	r1, #4
 8021d60:	f007 f8a9 	bl	8028eb6 <_ZdlPvj>
 8021d64:	4620      	mov	r0, r4
 8021d66:	bd10      	pop	{r4, pc}

08021d68 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 8021d68:	b510      	push	{r4, lr}
 8021d6a:	4604      	mov	r4, r0
 8021d6c:	2104      	movs	r1, #4
 8021d6e:	f007 f8a2 	bl	8028eb6 <_ZdlPvj>
 8021d72:	4620      	mov	r0, r4
 8021d74:	bd10      	pop	{r4, pc}

08021d76 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 8021d76:	b510      	push	{r4, lr}
 8021d78:	4604      	mov	r4, r0
 8021d7a:	2104      	movs	r1, #4
 8021d7c:	f007 f89b 	bl	8028eb6 <_ZdlPvj>
 8021d80:	4620      	mov	r0, r4
 8021d82:	bd10      	pop	{r4, pc}

08021d84 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 8021d84:	b510      	push	{r4, lr}
 8021d86:	4604      	mov	r4, r0
 8021d88:	2104      	movs	r1, #4
 8021d8a:	f007 f894 	bl	8028eb6 <_ZdlPvj>
 8021d8e:	4620      	mov	r0, r4
 8021d90:	bd10      	pop	{r4, pc}

08021d92 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 8021d92:	b510      	push	{r4, lr}
 8021d94:	4604      	mov	r4, r0
 8021d96:	2104      	movs	r1, #4
 8021d98:	f007 f88d 	bl	8028eb6 <_ZdlPvj>
 8021d9c:	4620      	mov	r0, r4
 8021d9e:	bd10      	pop	{r4, pc}

08021da0 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 8021da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021da4:	b08f      	sub	sp, #60	; 0x3c
 8021da6:	461c      	mov	r4, r3
 8021da8:	460e      	mov	r6, r1
 8021daa:	9206      	str	r2, [sp, #24]
 8021dac:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8021db0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8021db2:	9202      	str	r2, [sp, #8]
 8021db4:	2a00      	cmp	r2, #0
 8021db6:	f000 8128 	beq.w	802200a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x26a>
 8021dba:	6820      	ldr	r0, [r4, #0]
 8021dbc:	aa0a      	add	r2, sp, #40	; 0x28
 8021dbe:	6861      	ldr	r1, [r4, #4]
 8021dc0:	c203      	stmia	r2!, {r0, r1}
 8021dc2:	6818      	ldr	r0, [r3, #0]
 8021dc4:	aa0c      	add	r2, sp, #48	; 0x30
 8021dc6:	6859      	ldr	r1, [r3, #4]
 8021dc8:	c203      	stmia	r2!, {r0, r1}
 8021dca:	a80a      	add	r0, sp, #40	; 0x28
 8021dcc:	f7fa ff4e 	bl	801cc6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021dd0:	4621      	mov	r1, r4
 8021dd2:	a80c      	add	r0, sp, #48	; 0x30
 8021dd4:	f7fa ff72 	bl	801ccbc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021dd8:	f9bd 702c 	ldrsh.w	r7, [sp, #44]	; 0x2c
 8021ddc:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	; 0x2e
 8021de0:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 8021de4:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
 8021de8:	bfdb      	ittet	le
 8021dea:	b2bb      	uxthle	r3, r7
 8021dec:	f44f 6280 	movle.w	r2, #1024	; 0x400
 8021df0:	2301      	movgt	r3, #1
 8021df2:	fb92 f3f3 	sdivle	r3, r2, r3
 8021df6:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 8021dfa:	441d      	add	r5, r3
 8021dfc:	fb92 f1f3 	sdiv	r1, r2, r3
 8021e00:	fa1f fc81 	uxth.w	ip, r1
 8021e04:	3d01      	subs	r5, #1
 8021e06:	fb0c 2413 	mls	r4, ip, r3, r2
 8021e0a:	4661      	mov	r1, ip
 8021e0c:	fb14 f407 	smulbb	r4, r4, r7
 8021e10:	4404      	add	r4, r0
 8021e12:	fb95 f5f3 	sdiv	r5, r5, r3
 8021e16:	b2a4      	uxth	r4, r4
 8021e18:	b121      	cbz	r1, 8021e24 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x84>
 8021e1a:	9b06      	ldr	r3, [sp, #24]
 8021e1c:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8021e20:	ba1b      	rev	r3, r3
 8021e22:	441e      	add	r6, r3
 8021e24:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8021e28:	b2ad      	uxth	r5, r5
 8021e2a:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 8021e2e:	4418      	add	r0, r3
 8021e30:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8021e34:	f9bd 7036 	ldrsh.w	r7, [sp, #54]	; 0x36
 8021e38:	00ad      	lsls	r5, r5, #2
 8021e3a:	441a      	add	r2, r3
 8021e3c:	4b74      	ldr	r3, [pc, #464]	; (8022010 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x270>)
 8021e3e:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
 8021e42:	6818      	ldr	r0, [r3, #0]
 8021e44:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 8021e48:	6803      	ldr	r3, [r0, #0]
 8021e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021e4c:	4798      	blx	r3
 8021e4e:	4a71      	ldr	r2, [pc, #452]	; (8022014 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x274>)
 8021e50:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	; 0x32
 8021e54:	2c00      	cmp	r4, #0
 8021e56:	8813      	ldrh	r3, [r2, #0]
 8021e58:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 8021e5c:	9209      	str	r2, [sp, #36]	; 0x24
 8021e5e:	fb03 c101 	mla	r1, r3, r1, ip
 8021e62:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8021e66:	fb03 f307 	mul.w	r3, r3, r7
 8021e6a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8021e6e:	9204      	str	r2, [sp, #16]
 8021e70:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021e74:	9a02      	ldr	r2, [sp, #8]
 8021e76:	4408      	add	r0, r1
 8021e78:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 8021e7c:	4403      	add	r3, r0
 8021e7e:	b292      	uxth	r2, r2
 8021e80:	9307      	str	r3, [sp, #28]
 8021e82:	f105 0304 	add.w	r3, r5, #4
 8021e86:	bf0c      	ite	eq
 8021e88:	4645      	moveq	r5, r8
 8021e8a:	2500      	movne	r5, #0
 8021e8c:	9308      	str	r3, [sp, #32]
 8021e8e:	2300      	movs	r3, #0
 8021e90:	b2ad      	uxth	r5, r5
 8021e92:	9205      	str	r2, [sp, #20]
 8021e94:	9303      	str	r3, [sp, #12]
 8021e96:	9a07      	ldr	r2, [sp, #28]
 8021e98:	4282      	cmp	r2, r0
 8021e9a:	f240 80b1 	bls.w	8022000 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x260>
 8021e9e:	b95b      	cbnz	r3, 8021eb8 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x118>
 8021ea0:	7832      	ldrb	r2, [r6, #0]
 8021ea2:	0993      	lsrs	r3, r2, #6
 8021ea4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8021ea8:	9203      	str	r2, [sp, #12]
 8021eaa:	1e5a      	subs	r2, r3, #1
 8021eac:	2a02      	cmp	r2, #2
 8021eae:	bf8d      	iteet	hi
 8021eb0:	7873      	ldrbhi	r3, [r6, #1]
 8021eb2:	3601      	addls	r6, #1
 8021eb4:	b29b      	uxthls	r3, r3
 8021eb6:	3602      	addhi	r6, #2
 8021eb8:	b184      	cbz	r4, 8021edc <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x13c>
 8021eba:	429c      	cmp	r4, r3
 8021ebc:	bf91      	iteee	ls
 8021ebe:	1b1c      	subls	r4, r3, r4
 8021ec0:	1ae4      	subhi	r4, r4, r3
 8021ec2:	4629      	movhi	r1, r5
 8021ec4:	f04f 0e00 	movhi.w	lr, #0
 8021ec8:	bf9b      	ittet	ls
 8021eca:	fa1f fe84 	uxthls.w	lr, r4
 8021ece:	2400      	movls	r4, #0
 8021ed0:	b2a4      	uxthhi	r4, r4
 8021ed2:	fa1f f188 	uxthls.w	r1, r8
 8021ed6:	4673      	mov	r3, lr
 8021ed8:	460d      	mov	r5, r1
 8021eda:	e7dc      	b.n	8021e96 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf6>
 8021edc:	2203      	movs	r2, #3
 8021ede:	9908      	ldr	r1, [sp, #32]
 8021ee0:	42ab      	cmp	r3, r5
 8021ee2:	4617      	mov	r7, r2
 8021ee4:	9a03      	ldr	r2, [sp, #12]
 8021ee6:	bf24      	itt	cs
 8021ee8:	eba3 0e05 	subcs.w	lr, r3, r5
 8021eec:	9501      	strcs	r5, [sp, #4]
 8021eee:	fb17 1702 	smlabb	r7, r7, r2, r1
 8021ef2:	9a06      	ldr	r2, [sp, #24]
 8021ef4:	bf34      	ite	cc
 8021ef6:	1ae9      	subcc	r1, r5, r3
 8021ef8:	fa1f fe8e 	uxthcs.w	lr, lr
 8021efc:	4417      	add	r7, r2
 8021efe:	9a02      	ldr	r2, [sp, #8]
 8021f00:	bf2f      	iteee	cs
 8021f02:	4621      	movcs	r1, r4
 8021f04:	b289      	uxthcc	r1, r1
 8021f06:	9301      	strcc	r3, [sp, #4]
 8021f08:	46a6      	movcc	lr, r4
 8021f0a:	2aff      	cmp	r2, #255	; 0xff
 8021f0c:	d11e      	bne.n	8021f4c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ac>
 8021f0e:	4681      	mov	r9, r0
 8021f10:	f8dd c004 	ldr.w	ip, [sp, #4]
 8021f14:	f109 0903 	add.w	r9, r9, #3
 8021f18:	f1bc 0f00 	cmp.w	ip, #0
 8021f1c:	d15f      	bne.n	8021fde <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x23e>
 8021f1e:	9a01      	ldr	r2, [sp, #4]
 8021f20:	42ab      	cmp	r3, r5
 8021f22:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8021f26:	4410      	add	r0, r2
 8021f28:	d3d5      	bcc.n	8021ed6 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x136>
 8021f2a:	fa1f f188 	uxth.w	r1, r8
 8021f2e:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 8021f32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021f34:	1a64      	subs	r4, r4, r1
 8021f36:	881b      	ldrh	r3, [r3, #0]
 8021f38:	b2a4      	uxth	r4, r4
 8021f3a:	eba3 0308 	sub.w	r3, r3, r8
 8021f3e:	2c00      	cmp	r4, #0
 8021f40:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021f44:	bf18      	it	ne
 8021f46:	2100      	movne	r1, #0
 8021f48:	4418      	add	r0, r3
 8021f4a:	e7c4      	b.n	8021ed6 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x136>
 8021f4c:	4684      	mov	ip, r0
 8021f4e:	f8dd a004 	ldr.w	sl, [sp, #4]
 8021f52:	f10c 0c03 	add.w	ip, ip, #3
 8021f56:	f1ba 0f00 	cmp.w	sl, #0
 8021f5a:	d0e0      	beq.n	8021f1e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17e>
 8021f5c:	f81c bc03 	ldrb.w	fp, [ip, #-3]
 8021f60:	f10a 3aff 	add.w	sl, sl, #4294967295
 8021f64:	9a05      	ldr	r2, [sp, #20]
 8021f66:	f897 9000 	ldrb.w	r9, [r7]
 8021f6a:	fa1f fa8a 	uxth.w	sl, sl
 8021f6e:	fb1b fb02 	smulbb	fp, fp, r2
 8021f72:	9a04      	ldr	r2, [sp, #16]
 8021f74:	fb09 b902 	mla	r9, r9, r2, fp
 8021f78:	9a05      	ldr	r2, [sp, #20]
 8021f7a:	fa1f f989 	uxth.w	r9, r9
 8021f7e:	f109 0b01 	add.w	fp, r9, #1
 8021f82:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8021f86:	f81c bc02 	ldrb.w	fp, [ip, #-2]
 8021f8a:	fb1b fb02 	smulbb	fp, fp, r2
 8021f8e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8021f92:	9a04      	ldr	r2, [sp, #16]
 8021f94:	f80c 9c03 	strb.w	r9, [ip, #-3]
 8021f98:	f897 9001 	ldrb.w	r9, [r7, #1]
 8021f9c:	fb09 b902 	mla	r9, r9, r2, fp
 8021fa0:	9a05      	ldr	r2, [sp, #20]
 8021fa2:	fa1f f989 	uxth.w	r9, r9
 8021fa6:	f109 0b01 	add.w	fp, r9, #1
 8021faa:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8021fae:	f81c bc01 	ldrb.w	fp, [ip, #-1]
 8021fb2:	fb1b fb02 	smulbb	fp, fp, r2
 8021fb6:	ea4f 2929 	mov.w	r9, r9, asr #8
 8021fba:	9a04      	ldr	r2, [sp, #16]
 8021fbc:	f80c 9c02 	strb.w	r9, [ip, #-2]
 8021fc0:	f897 9002 	ldrb.w	r9, [r7, #2]
 8021fc4:	fb09 b902 	mla	r9, r9, r2, fp
 8021fc8:	fa1f f989 	uxth.w	r9, r9
 8021fcc:	f109 0b01 	add.w	fp, r9, #1
 8021fd0:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8021fd4:	ea4f 2929 	mov.w	r9, r9, asr #8
 8021fd8:	f80c 9c01 	strb.w	r9, [ip, #-1]
 8021fdc:	e7b9      	b.n	8021f52 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1b2>
 8021fde:	f897 a000 	ldrb.w	sl, [r7]
 8021fe2:	f10c 3cff 	add.w	ip, ip, #4294967295
 8021fe6:	f809 ac03 	strb.w	sl, [r9, #-3]
 8021fea:	fa1f fc8c 	uxth.w	ip, ip
 8021fee:	f897 a001 	ldrb.w	sl, [r7, #1]
 8021ff2:	f809 ac02 	strb.w	sl, [r9, #-2]
 8021ff6:	f897 a002 	ldrb.w	sl, [r7, #2]
 8021ffa:	f809 ac01 	strb.w	sl, [r9, #-1]
 8021ffe:	e789      	b.n	8021f14 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x174>
 8022000:	4b03      	ldr	r3, [pc, #12]	; (8022010 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x270>)
 8022002:	6818      	ldr	r0, [r3, #0]
 8022004:	6803      	ldr	r3, [r0, #0]
 8022006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022008:	4798      	blx	r3
 802200a:	b00f      	add	sp, #60	; 0x3c
 802200c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022010:	24006fec 	.word	0x24006fec
 8022014:	24006fe6 	.word	0x24006fe6

08022018 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 8022018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802201c:	b09b      	sub	sp, #108	; 0x6c
 802201e:	461d      	mov	r5, r3
 8022020:	4604      	mov	r4, r0
 8022022:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022024:	e9cd 1210 	strd	r1, r2, [sp, #64]	; 0x40
 8022028:	f89d 2094 	ldrb.w	r2, [sp, #148]	; 0x94
 802202c:	9208      	str	r2, [sp, #32]
 802202e:	2a00      	cmp	r2, #0
 8022030:	f000 81f3 	beq.w	802241a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x402>
 8022034:	6828      	ldr	r0, [r5, #0]
 8022036:	aa16      	add	r2, sp, #88	; 0x58
 8022038:	6869      	ldr	r1, [r5, #4]
 802203a:	c203      	stmia	r2!, {r0, r1}
 802203c:	6818      	ldr	r0, [r3, #0]
 802203e:	aa18      	add	r2, sp, #96	; 0x60
 8022040:	6859      	ldr	r1, [r3, #4]
 8022042:	c203      	stmia	r2!, {r0, r1}
 8022044:	a816      	add	r0, sp, #88	; 0x58
 8022046:	f7fa fe11 	bl	801cc6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802204a:	4629      	mov	r1, r5
 802204c:	a818      	add	r0, sp, #96	; 0x60
 802204e:	f7fa fe35 	bl	801ccbc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022052:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	; 0x5c
 8022056:	f9bd 605e 	ldrsh.w	r6, [sp, #94]	; 0x5e
 802205a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 802205e:	f9bd 5066 	ldrsh.w	r5, [sp, #102]	; 0x66
 8022062:	bfdb      	ittet	le
 8022064:	b29a      	uxthle	r2, r3
 8022066:	f44f 6180 	movle.w	r1, #1024	; 0x400
 802206a:	f04f 0a01 	movgt.w	sl, #1
 802206e:	fb91 faf2 	sdivle	sl, r1, r2
 8022072:	f9bd 2062 	ldrsh.w	r2, [sp, #98]	; 0x62
 8022076:	4456      	add	r6, sl
 8022078:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
 802207c:	3e01      	subs	r6, #1
 802207e:	fb92 f0fa 	sdiv	r0, r2, sl
 8022082:	b280      	uxth	r0, r0
 8022084:	fb00 281a 	mls	r8, r0, sl, r2
 8022088:	900e      	str	r0, [sp, #56]	; 0x38
 802208a:	fb18 f803 	smulbb	r8, r8, r3
 802208e:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
 8022092:	4488      	add	r8, r1
 8022094:	4419      	add	r1, r3
 8022096:	f8bd 305a 	ldrh.w	r3, [sp, #90]	; 0x5a
 802209a:	f8ad 1060 	strh.w	r1, [sp, #96]	; 0x60
 802209e:	fa1f f888 	uxth.w	r8, r8
 80220a2:	441a      	add	r2, r3
 80220a4:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	; 0x64
 80220a8:	9303      	str	r3, [sp, #12]
 80220aa:	4b9c      	ldr	r3, [pc, #624]	; (802231c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x304>)
 80220ac:	f8ad 2062 	strh.w	r2, [sp, #98]	; 0x62
 80220b0:	6818      	ldr	r0, [r3, #0]
 80220b2:	6803      	ldr	r3, [r0, #0]
 80220b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80220b6:	4798      	blx	r3
 80220b8:	4b99      	ldr	r3, [pc, #612]	; (8022320 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x308>)
 80220ba:	f9bd 1062 	ldrsh.w	r1, [sp, #98]	; 0x62
 80220be:	f1b8 0f00 	cmp.w	r8, #0
 80220c2:	881a      	ldrh	r2, [r3, #0]
 80220c4:	f9bd 7060 	ldrsh.w	r7, [sp, #96]	; 0x60
 80220c8:	fb02 f505 	mul.w	r5, r2, r5
 80220cc:	fb02 7101 	mla	r1, r2, r1, r7
 80220d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80220d4:	9314      	str	r3, [sp, #80]	; 0x50
 80220d6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80220da:	9b08      	ldr	r3, [sp, #32]
 80220dc:	fb96 f6fa 	sdiv	r6, r6, sl
 80220e0:	4408      	add	r0, r1
 80220e2:	f106 0601 	add.w	r6, r6, #1
 80220e6:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80220ea:	f04f 0100 	mov.w	r1, #0
 80220ee:	eb00 0205 	add.w	r2, r0, r5
 80220f2:	b2b6      	uxth	r6, r6
 80220f4:	b29b      	uxth	r3, r3
 80220f6:	910b      	str	r1, [sp, #44]	; 0x2c
 80220f8:	9209      	str	r2, [sp, #36]	; 0x24
 80220fa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80220fc:	930d      	str	r3, [sp, #52]	; 0x34
 80220fe:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8022102:	4b88      	ldr	r3, [pc, #544]	; (8022324 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x30c>)
 8022104:	f106 0204 	add.w	r2, r6, #4
 8022108:	eba3 0304 	sub.w	r3, r3, r4
 802210c:	9205      	str	r2, [sp, #20]
 802210e:	9a03      	ldr	r2, [sp, #12]
 8022110:	bf18      	it	ne
 8022112:	2200      	movne	r2, #0
 8022114:	9315      	str	r3, [sp, #84]	; 0x54
 8022116:	b292      	uxth	r2, r2
 8022118:	990e      	ldr	r1, [sp, #56]	; 0x38
 802211a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802211c:	fa11 f383 	uxtah	r3, r1, r3
 8022120:	9911      	ldr	r1, [sp, #68]	; 0x44
 8022122:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8022126:	3304      	adds	r3, #4
 8022128:	9306      	str	r3, [sp, #24]
 802212a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802212c:	4283      	cmp	r3, r0
 802212e:	f240 816f 	bls.w	8022410 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3f8>
 8022132:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
 8022136:	f04f 0900 	mov.w	r9, #0
 802213a:	9d06      	ldr	r5, [sp, #24]
 802213c:	fbb8 f3f3 	udiv	r3, r8, r3
 8022140:	ebaa 0303 	sub.w	r3, sl, r3
 8022144:	782d      	ldrb	r5, [r5, #0]
 8022146:	b29b      	uxth	r3, r3
 8022148:	950f      	str	r5, [sp, #60]	; 0x3c
 802214a:	3501      	adds	r5, #1
 802214c:	9312      	str	r3, [sp, #72]	; 0x48
 802214e:	9b06      	ldr	r3, [sp, #24]
 8022150:	9504      	str	r5, [sp, #16]
 8022152:	7859      	ldrb	r1, [r3, #1]
 8022154:	789b      	ldrb	r3, [r3, #2]
 8022156:	021b      	lsls	r3, r3, #8
 8022158:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 802215c:	9906      	ldr	r1, [sp, #24]
 802215e:	78c9      	ldrb	r1, [r1, #3]
 8022160:	430b      	orrs	r3, r1
 8022162:	9910      	ldr	r1, [sp, #64]	; 0x40
 8022164:	4419      	add	r1, r3
 8022166:	1c4d      	adds	r5, r1, #1
 8022168:	7849      	ldrb	r1, [r1, #1]
 802216a:	9502      	str	r5, [sp, #8]
 802216c:	0209      	lsls	r1, r1, #8
 802216e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8022170:	f401 71ff 	and.w	r1, r1, #510	; 0x1fe
 8022174:	5ceb      	ldrb	r3, [r5, r3]
 8022176:	4319      	orrs	r1, r3
 8022178:	b28b      	uxth	r3, r1
 802217a:	f884 1804 	strb.w	r1, [r4, #2052]	; 0x804
 802217e:	930a      	str	r3, [sp, #40]	; 0x28
 8022180:	2300      	movs	r3, #0
 8022182:	9307      	str	r3, [sp, #28]
 8022184:	2301      	movs	r3, #1
 8022186:	e9cd 3300 	strd	r3, r3, [sp]
 802218a:	469c      	mov	ip, r3
 802218c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8022190:	930c      	str	r3, [sp, #48]	; 0x30
 8022192:	f1b8 0f00 	cmp.w	r8, #0
 8022196:	f000 8082 	beq.w	802229e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x286>
 802219a:	45c4      	cmp	ip, r8
 802219c:	d270      	bcs.n	8022280 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x268>
 802219e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80221a0:	eba8 080c 	sub.w	r8, r8, ip
 80221a4:	4611      	mov	r1, r2
 80221a6:	4283      	cmp	r3, r0
 80221a8:	fa1f f888 	uxth.w	r8, r8
 80221ac:	d802      	bhi.n	80221b4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x19c>
 80221ae:	e074      	b.n	802229a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x282>
 80221b0:	2b00      	cmp	r3, #0
 80221b2:	d15f      	bne.n	8022274 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x25c>
 80221b4:	9b02      	ldr	r3, [sp, #8]
 80221b6:	9a01      	ldr	r2, [sp, #4]
 80221b8:	785b      	ldrb	r3, [r3, #1]
 80221ba:	f1c2 0207 	rsb	r2, r2, #7
 80221be:	9d01      	ldr	r5, [sp, #4]
 80221c0:	4093      	lsls	r3, r2
 80221c2:	005b      	lsls	r3, r3, #1
 80221c4:	f403 72ff 	and.w	r2, r3, #510	; 0x1fe
 80221c8:	9b02      	ldr	r3, [sp, #8]
 80221ca:	781b      	ldrb	r3, [r3, #0]
 80221cc:	412b      	asrs	r3, r5
 80221ce:	b2db      	uxtb	r3, r3
 80221d0:	4313      	orrs	r3, r2
 80221d2:	462a      	mov	r2, r5
 80221d4:	3201      	adds	r2, #1
 80221d6:	b29e      	uxth	r6, r3
 80221d8:	b2d2      	uxtb	r2, r2
 80221da:	2a08      	cmp	r2, #8
 80221dc:	9201      	str	r2, [sp, #4]
 80221de:	9a02      	ldr	r2, [sp, #8]
 80221e0:	bf09      	itett	eq
 80221e2:	3202      	addeq	r2, #2
 80221e4:	3201      	addne	r2, #1
 80221e6:	9202      	streq	r2, [sp, #8]
 80221e8:	2200      	moveq	r2, #0
 80221ea:	bf14      	ite	ne
 80221ec:	9202      	strne	r2, [sp, #8]
 80221ee:	9201      	streq	r2, [sp, #4]
 80221f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80221f2:	42b2      	cmp	r2, r6
 80221f4:	d309      	bcc.n	802220a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1f2>
 80221f6:	f884 3804 	strb.w	r3, [r4, #2052]	; 0x804
 80221fa:	2301      	movs	r3, #1
 80221fc:	9a04      	ldr	r2, [sp, #16]
 80221fe:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8022202:	d30e      	bcc.n	8022222 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x20a>
 8022204:	9300      	str	r3, [sp, #0]
 8022206:	2500      	movs	r5, #0
 8022208:	e035      	b.n	8022276 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x25e>
 802220a:	9b04      	ldr	r3, [sp, #16]
 802220c:	429e      	cmp	r6, r3
 802220e:	d318      	bcc.n	8022242 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x22a>
 8022210:	9b00      	ldr	r3, [sp, #0]
 8022212:	f894 2804 	ldrb.w	r2, [r4, #2052]	; 0x804
 8022216:	18e3      	adds	r3, r4, r3
 8022218:	f883 2804 	strb.w	r2, [r3, #2052]	; 0x804
 802221c:	9b00      	ldr	r3, [sp, #0]
 802221e:	3301      	adds	r3, #1
 8022220:	b29b      	uxth	r3, r3
 8022222:	9a04      	ldr	r2, [sp, #16]
 8022224:	f894 5804 	ldrb.w	r5, [r4, #2052]	; 0x804
 8022228:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 802222c:	9f00      	ldr	r7, [sp, #0]
 802222e:	7115      	strb	r5, [r2, #4]
 8022230:	3701      	adds	r7, #1
 8022232:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8022234:	7157      	strb	r7, [r2, #5]
 8022236:	80d5      	strh	r5, [r2, #6]
 8022238:	9a04      	ldr	r2, [sp, #16]
 802223a:	3201      	adds	r2, #1
 802223c:	b292      	uxth	r2, r2
 802223e:	9204      	str	r2, [sp, #16]
 8022240:	e7e0      	b.n	8022204 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ec>
 8022242:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8022246:	4632      	mov	r2, r6
 8022248:	795b      	ldrb	r3, [r3, #5]
 802224a:	f603 0504 	addw	r5, r3, #2052	; 0x804
 802224e:	4425      	add	r5, r4
 8022250:	9f15      	ldr	r7, [sp, #84]	; 0x54
 8022252:	eb07 0c05 	add.w	ip, r7, r5
 8022256:	f1bc 0f00 	cmp.w	ip, #0
 802225a:	dd07      	ble.n	802226c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x254>
 802225c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8022260:	f892 c004 	ldrb.w	ip, [r2, #4]
 8022264:	f805 cd01 	strb.w	ip, [r5, #-1]!
 8022268:	88d2      	ldrh	r2, [r2, #6]
 802226a:	e7f1      	b.n	8022250 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>
 802226c:	f884 2804 	strb.w	r2, [r4, #2052]	; 0x804
 8022270:	b29b      	uxth	r3, r3
 8022272:	e7c3      	b.n	80221fc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1e4>
 8022274:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8022276:	460a      	mov	r2, r1
 8022278:	960a      	str	r6, [sp, #40]	; 0x28
 802227a:	46a9      	mov	r9, r5
 802227c:	469c      	mov	ip, r3
 802227e:	e788      	b.n	8022192 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17a>
 8022280:	ebac 0308 	sub.w	r3, ip, r8
 8022284:	eb09 0508 	add.w	r5, r9, r8
 8022288:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 802228c:	b29b      	uxth	r3, r3
 802228e:	b2ad      	uxth	r5, r5
 8022290:	f04f 0800 	mov.w	r8, #0
 8022294:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022296:	4282      	cmp	r2, r0
 8022298:	d88a      	bhi.n	80221b0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x198>
 802229a:	460a      	mov	r2, r1
 802229c:	e745      	b.n	802212a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x112>
 802229e:	4594      	cmp	ip, r2
 80222a0:	9d08      	ldr	r5, [sp, #32]
 80222a2:	4686      	mov	lr, r0
 80222a4:	bf27      	ittee	cs
 80222a6:	ebac 0302 	subcs.w	r3, ip, r2
 80222aa:	4616      	movcs	r6, r2
 80222ac:	eba2 010c 	subcc.w	r1, r2, ip
 80222b0:	4666      	movcc	r6, ip
 80222b2:	bf27      	ittee	cs
 80222b4:	b29b      	uxthcs	r3, r3
 80222b6:	4641      	movcs	r1, r8
 80222b8:	b289      	uxthcc	r1, r1
 80222ba:	4643      	movcc	r3, r8
 80222bc:	2dff      	cmp	r5, #255	; 0xff
 80222be:	eb09 0506 	add.w	r5, r9, r6
 80222c2:	b2ad      	uxth	r5, r5
 80222c4:	d130      	bne.n	8022328 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x310>
 80222c6:	45a9      	cmp	r9, r5
 80222c8:	f10e 0e03 	add.w	lr, lr, #3
 80222cc:	d17a      	bne.n	80223c4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3ac>
 80222ce:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80222d2:	4594      	cmp	ip, r2
 80222d4:	4430      	add	r0, r6
 80222d6:	d3db      	bcc.n	8022290 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x278>
 80222d8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80222da:	9903      	ldr	r1, [sp, #12]
 80222dc:	8812      	ldrh	r2, [r2, #0]
 80222de:	1a52      	subs	r2, r2, r1
 80222e0:	9912      	ldr	r1, [sp, #72]	; 0x48
 80222e2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80222e6:	4410      	add	r0, r2
 80222e8:	9a07      	ldr	r2, [sp, #28]
 80222ea:	3201      	adds	r2, #1
 80222ec:	428a      	cmp	r2, r1
 80222ee:	9207      	str	r2, [sp, #28]
 80222f0:	f040 8081 	bne.w	80223f6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3de>
 80222f4:	f8bd 8060 	ldrh.w	r8, [sp, #96]	; 0x60
 80222f8:	f8bd c058 	ldrh.w	ip, [sp, #88]	; 0x58
 80222fc:	9b03      	ldr	r3, [sp, #12]
 80222fe:	eba8 080c 	sub.w	r8, r8, ip
 8022302:	fa1f f888 	uxth.w	r8, r8
 8022306:	f1b8 0f00 	cmp.w	r8, #0
 802230a:	bf08      	it	eq
 802230c:	461a      	moveq	r2, r3
 802230e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022310:	bf18      	it	ne
 8022312:	2200      	movne	r2, #0
 8022314:	3301      	adds	r3, #1
 8022316:	b292      	uxth	r2, r2
 8022318:	930b      	str	r3, [sp, #44]	; 0x2c
 802231a:	e6fd      	b.n	8022118 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x100>
 802231c:	24006fec 	.word	0x24006fec
 8022320:	24006fe6 	.word	0x24006fe6
 8022324:	fffff7fb 	.word	0xfffff7fb
 8022328:	45a9      	cmp	r9, r5
 802232a:	f10e 0e03 	add.w	lr, lr, #3
 802232e:	d0ce      	beq.n	80222ce <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2b6>
 8022330:	f109 0701 	add.w	r7, r9, #1
 8022334:	44a1      	add	r9, r4
 8022336:	f81e bc03 	ldrb.w	fp, [lr, #-3]
 802233a:	f899 8804 	ldrb.w	r8, [r9, #2052]	; 0x804
 802233e:	9713      	str	r7, [sp, #76]	; 0x4c
 8022340:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8022344:	9f05      	ldr	r7, [sp, #20]
 8022346:	eb07 0908 	add.w	r9, r7, r8
 802234a:	f817 8008 	ldrb.w	r8, [r7, r8]
 802234e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8022350:	fb1b fb07 	smulbb	fp, fp, r7
 8022354:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8022356:	fb08 b807 	mla	r8, r8, r7, fp
 802235a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 802235c:	fa1f f888 	uxth.w	r8, r8
 8022360:	f108 0b01 	add.w	fp, r8, #1
 8022364:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8022368:	f81e bc02 	ldrb.w	fp, [lr, #-2]
 802236c:	fb1b fb07 	smulbb	fp, fp, r7
 8022370:	ea4f 2828 	mov.w	r8, r8, asr #8
 8022374:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8022376:	f80e 8c03 	strb.w	r8, [lr, #-3]
 802237a:	f899 8001 	ldrb.w	r8, [r9, #1]
 802237e:	fb08 b807 	mla	r8, r8, r7, fp
 8022382:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8022384:	fa1f f888 	uxth.w	r8, r8
 8022388:	f108 0b01 	add.w	fp, r8, #1
 802238c:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8022390:	ea4f 2828 	mov.w	r8, r8, asr #8
 8022394:	f80e 8c02 	strb.w	r8, [lr, #-2]
 8022398:	f899 8002 	ldrb.w	r8, [r9, #2]
 802239c:	f81e 9c01 	ldrb.w	r9, [lr, #-1]
 80223a0:	fb19 f907 	smulbb	r9, r9, r7
 80223a4:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80223a6:	fb08 9807 	mla	r8, r8, r7, r9
 80223aa:	fa1f f888 	uxth.w	r8, r8
 80223ae:	f108 0901 	add.w	r9, r8, #1
 80223b2:	eb09 2818 	add.w	r8, r9, r8, lsr #8
 80223b6:	f8bd 904c 	ldrh.w	r9, [sp, #76]	; 0x4c
 80223ba:	ea4f 2828 	mov.w	r8, r8, asr #8
 80223be:	f80e 8c01 	strb.w	r8, [lr, #-1]
 80223c2:	e7b1      	b.n	8022328 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x310>
 80223c4:	f109 0b01 	add.w	fp, r9, #1
 80223c8:	44a1      	add	r9, r4
 80223ca:	9f05      	ldr	r7, [sp, #20]
 80223cc:	f899 8804 	ldrb.w	r8, [r9, #2052]	; 0x804
 80223d0:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80223d4:	eb07 0908 	add.w	r9, r7, r8
 80223d8:	f817 8008 	ldrb.w	r8, [r7, r8]
 80223dc:	f80e 8c03 	strb.w	r8, [lr, #-3]
 80223e0:	f899 8001 	ldrb.w	r8, [r9, #1]
 80223e4:	f80e 8c02 	strb.w	r8, [lr, #-2]
 80223e8:	f899 8002 	ldrb.w	r8, [r9, #2]
 80223ec:	fa1f f98b 	uxth.w	r9, fp
 80223f0:	f80e 8c01 	strb.w	r8, [lr, #-1]
 80223f4:	e767      	b.n	80222c6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2ae>
 80223f6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 80223fa:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 80223fe:	eba8 0801 	sub.w	r8, r8, r1
 8022402:	fa1f f888 	uxth.w	r8, r8
 8022406:	f1b8 0f00 	cmp.w	r8, #0
 802240a:	bf18      	it	ne
 802240c:	2100      	movne	r1, #0
 802240e:	e741      	b.n	8022294 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27c>
 8022410:	4b03      	ldr	r3, [pc, #12]	; (8022420 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x408>)
 8022412:	6818      	ldr	r0, [r3, #0]
 8022414:	6803      	ldr	r3, [r0, #0]
 8022416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022418:	4798      	blx	r3
 802241a:	b01b      	add	sp, #108	; 0x6c
 802241c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022420:	24006fec 	.word	0x24006fec

08022424 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 8022424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022428:	b09d      	sub	sp, #116	; 0x74
 802242a:	461d      	mov	r5, r3
 802242c:	4604      	mov	r4, r0
 802242e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8022430:	e9cd 120f 	strd	r1, r2, [sp, #60]	; 0x3c
 8022434:	f89d 209c 	ldrb.w	r2, [sp, #156]	; 0x9c
 8022438:	920c      	str	r2, [sp, #48]	; 0x30
 802243a:	2a00      	cmp	r2, #0
 802243c:	f000 81de 	beq.w	80227fc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3d8>
 8022440:	6828      	ldr	r0, [r5, #0]
 8022442:	aa18      	add	r2, sp, #96	; 0x60
 8022444:	6869      	ldr	r1, [r5, #4]
 8022446:	c203      	stmia	r2!, {r0, r1}
 8022448:	6818      	ldr	r0, [r3, #0]
 802244a:	aa1a      	add	r2, sp, #104	; 0x68
 802244c:	6859      	ldr	r1, [r3, #4]
 802244e:	c203      	stmia	r2!, {r0, r1}
 8022450:	a818      	add	r0, sp, #96	; 0x60
 8022452:	f7fa fc0b 	bl	801cc6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022456:	4629      	mov	r1, r5
 8022458:	a81a      	add	r0, sp, #104	; 0x68
 802245a:	f7fa fc2f 	bl	801ccbc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802245e:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	; 0x64
 8022462:	f9bd 7066 	ldrsh.w	r7, [sp, #102]	; 0x66
 8022466:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 802246a:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	; 0x6e
 802246e:	bfdb      	ittet	le
 8022470:	b29a      	uxthle	r2, r3
 8022472:	f44f 6180 	movle.w	r1, #1024	; 0x400
 8022476:	2201      	movgt	r2, #1
 8022478:	fb91 f2f2 	sdivle	r2, r1, r2
 802247c:	9201      	str	r2, [sp, #4]
 802247e:	9801      	ldr	r0, [sp, #4]
 8022480:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	; 0x6a
 8022484:	9901      	ldr	r1, [sp, #4]
 8022486:	fb92 f0f0 	sdiv	r0, r2, r0
 802248a:	b280      	uxth	r0, r0
 802248c:	440f      	add	r7, r1
 802248e:	900d      	str	r0, [sp, #52]	; 0x34
 8022490:	3f01      	subs	r7, #1
 8022492:	9801      	ldr	r0, [sp, #4]
 8022494:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8022496:	fb05 2510 	mls	r5, r5, r0, r2
 802249a:	fb97 f7f1 	sdiv	r7, r7, r1
 802249e:	fb15 f503 	smulbb	r5, r5, r3
 80224a2:	f8bd 1068 	ldrh.w	r1, [sp, #104]	; 0x68
 80224a6:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 80224aa:	3701      	adds	r7, #1
 80224ac:	440d      	add	r5, r1
 80224ae:	4419      	add	r1, r3
 80224b0:	f8bd 3062 	ldrh.w	r3, [sp, #98]	; 0x62
 80224b4:	b2bf      	uxth	r7, r7
 80224b6:	441a      	add	r2, r3
 80224b8:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
 80224bc:	f8ad 1068 	strh.w	r1, [sp, #104]	; 0x68
 80224c0:	00bf      	lsls	r7, r7, #2
 80224c2:	9304      	str	r3, [sp, #16]
 80224c4:	b2ad      	uxth	r5, r5
 80224c6:	4bb0      	ldr	r3, [pc, #704]	; (8022788 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x364>)
 80224c8:	f8ad 206a 	strh.w	r2, [sp, #106]	; 0x6a
 80224cc:	6818      	ldr	r0, [r3, #0]
 80224ce:	6803      	ldr	r3, [r0, #0]
 80224d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80224d2:	4798      	blx	r3
 80224d4:	4bad      	ldr	r3, [pc, #692]	; (802278c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x368>)
 80224d6:	f9bd 106a 	ldrsh.w	r1, [sp, #106]	; 0x6a
 80224da:	2d00      	cmp	r5, #0
 80224dc:	881a      	ldrh	r2, [r3, #0]
 80224de:	f9bd c068 	ldrsh.w	ip, [sp, #104]	; 0x68
 80224e2:	fb02 f606 	mul.w	r6, r2, r6
 80224e6:	fb02 c101 	mla	r1, r2, r1, ip
 80224ea:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80224ee:	9316      	str	r3, [sp, #88]	; 0x58
 80224f0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80224f4:	4ba6      	ldr	r3, [pc, #664]	; (8022790 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x36c>)
 80224f6:	eb00 0801 	add.w	r8, r0, r1
 80224fa:	bf18      	it	ne
 80224fc:	2100      	movne	r1, #0
 80224fe:	eba3 0304 	sub.w	r3, r3, r4
 8022502:	eb08 0206 	add.w	r2, r8, r6
 8022506:	9317      	str	r3, [sp, #92]	; 0x5c
 8022508:	9208      	str	r2, [sp, #32]
 802250a:	f107 0204 	add.w	r2, r7, #4
 802250e:	9211      	str	r2, [sp, #68]	; 0x44
 8022510:	9a04      	ldr	r2, [sp, #16]
 8022512:	bf08      	it	eq
 8022514:	4611      	moveq	r1, r2
 8022516:	2200      	movs	r2, #0
 8022518:	b289      	uxth	r1, r1
 802251a:	920b      	str	r2, [sp, #44]	; 0x2c
 802251c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802251e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022520:	fa12 f383 	uxtah	r3, r2, r3
 8022524:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022526:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802252a:	3304      	adds	r3, #4
 802252c:	9306      	str	r3, [sp, #24]
 802252e:	9b08      	ldr	r3, [sp, #32]
 8022530:	4543      	cmp	r3, r8
 8022532:	f240 815e 	bls.w	80227f2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3ce>
 8022536:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 802253a:	f04f 0b01 	mov.w	fp, #1
 802253e:	9a01      	ldr	r2, [sp, #4]
 8022540:	9806      	ldr	r0, [sp, #24]
 8022542:	465e      	mov	r6, fp
 8022544:	f8cd b008 	str.w	fp, [sp, #8]
 8022548:	7800      	ldrb	r0, [r0, #0]
 802254a:	fbb5 f3f3 	udiv	r3, r5, r3
 802254e:	1ad3      	subs	r3, r2, r3
 8022550:	900e      	str	r0, [sp, #56]	; 0x38
 8022552:	3001      	adds	r0, #1
 8022554:	b29b      	uxth	r3, r3
 8022556:	9005      	str	r0, [sp, #20]
 8022558:	9312      	str	r3, [sp, #72]	; 0x48
 802255a:	9b06      	ldr	r3, [sp, #24]
 802255c:	785a      	ldrb	r2, [r3, #1]
 802255e:	789b      	ldrb	r3, [r3, #2]
 8022560:	021b      	lsls	r3, r3, #8
 8022562:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8022566:	9a06      	ldr	r2, [sp, #24]
 8022568:	78d2      	ldrb	r2, [r2, #3]
 802256a:	4313      	orrs	r3, r2
 802256c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802256e:	441a      	add	r2, r3
 8022570:	1c50      	adds	r0, r2, #1
 8022572:	7852      	ldrb	r2, [r2, #1]
 8022574:	9003      	str	r0, [sp, #12]
 8022576:	0212      	lsls	r2, r2, #8
 8022578:	980f      	ldr	r0, [sp, #60]	; 0x3c
 802257a:	f402 72ff 	and.w	r2, r2, #510	; 0x1fe
 802257e:	5cc3      	ldrb	r3, [r0, r3]
 8022580:	431a      	orrs	r2, r3
 8022582:	b293      	uxth	r3, r2
 8022584:	f884 2804 	strb.w	r2, [r4, #2052]	; 0x804
 8022588:	930a      	str	r3, [sp, #40]	; 0x28
 802258a:	2300      	movs	r3, #0
 802258c:	461a      	mov	r2, r3
 802258e:	9307      	str	r3, [sp, #28]
 8022590:	2d00      	cmp	r5, #0
 8022592:	d07c      	beq.n	802268e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x26a>
 8022594:	42ae      	cmp	r6, r5
 8022596:	d26c      	bcs.n	8022672 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x24e>
 8022598:	9b08      	ldr	r3, [sp, #32]
 802259a:	1bad      	subs	r5, r5, r6
 802259c:	4608      	mov	r0, r1
 802259e:	4543      	cmp	r3, r8
 80225a0:	b2ad      	uxth	r5, r5
 80225a2:	d802      	bhi.n	80225aa <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x186>
 80225a4:	e071      	b.n	802268a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x266>
 80225a6:	2b00      	cmp	r3, #0
 80225a8:	d15d      	bne.n	8022666 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x242>
 80225aa:	9b03      	ldr	r3, [sp, #12]
 80225ac:	9a02      	ldr	r2, [sp, #8]
 80225ae:	785b      	ldrb	r3, [r3, #1]
 80225b0:	f1c2 0207 	rsb	r2, r2, #7
 80225b4:	9902      	ldr	r1, [sp, #8]
 80225b6:	4093      	lsls	r3, r2
 80225b8:	005b      	lsls	r3, r3, #1
 80225ba:	f403 72ff 	and.w	r2, r3, #510	; 0x1fe
 80225be:	9b03      	ldr	r3, [sp, #12]
 80225c0:	781b      	ldrb	r3, [r3, #0]
 80225c2:	410b      	asrs	r3, r1
 80225c4:	3101      	adds	r1, #1
 80225c6:	b2c9      	uxtb	r1, r1
 80225c8:	b2db      	uxtb	r3, r3
 80225ca:	2908      	cmp	r1, #8
 80225cc:	9102      	str	r1, [sp, #8]
 80225ce:	9903      	ldr	r1, [sp, #12]
 80225d0:	ea43 0302 	orr.w	r3, r3, r2
 80225d4:	bf0c      	ite	eq
 80225d6:	3102      	addeq	r1, #2
 80225d8:	3101      	addne	r1, #1
 80225da:	b29a      	uxth	r2, r3
 80225dc:	bf05      	ittet	eq
 80225de:	9103      	streq	r1, [sp, #12]
 80225e0:	2100      	moveq	r1, #0
 80225e2:	9103      	strne	r1, [sp, #12]
 80225e4:	9102      	streq	r1, [sp, #8]
 80225e6:	990e      	ldr	r1, [sp, #56]	; 0x38
 80225e8:	4291      	cmp	r1, r2
 80225ea:	d30a      	bcc.n	8022602 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1de>
 80225ec:	f884 3804 	strb.w	r3, [r4, #2052]	; 0x804
 80225f0:	2301      	movs	r3, #1
 80225f2:	9905      	ldr	r1, [sp, #20]
 80225f4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80225f8:	d30f      	bcc.n	802261a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1f6>
 80225fa:	469b      	mov	fp, r3
 80225fc:	f04f 0c00 	mov.w	ip, #0
 8022600:	e032      	b.n	8022668 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x244>
 8022602:	9b05      	ldr	r3, [sp, #20]
 8022604:	429a      	cmp	r2, r3
 8022606:	d318      	bcc.n	802263a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x216>
 8022608:	eb04 030b 	add.w	r3, r4, fp
 802260c:	f894 1804 	ldrb.w	r1, [r4, #2052]	; 0x804
 8022610:	f883 1804 	strb.w	r1, [r3, #2052]	; 0x804
 8022614:	f10b 0301 	add.w	r3, fp, #1
 8022618:	b29b      	uxth	r3, r3
 802261a:	9905      	ldr	r1, [sp, #20]
 802261c:	f894 6804 	ldrb.w	r6, [r4, #2052]	; 0x804
 8022620:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8022624:	710e      	strb	r6, [r1, #4]
 8022626:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8022628:	80ce      	strh	r6, [r1, #6]
 802262a:	f10b 0601 	add.w	r6, fp, #1
 802262e:	714e      	strb	r6, [r1, #5]
 8022630:	9905      	ldr	r1, [sp, #20]
 8022632:	3101      	adds	r1, #1
 8022634:	b289      	uxth	r1, r1
 8022636:	9105      	str	r1, [sp, #20]
 8022638:	e7df      	b.n	80225fa <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d6>
 802263a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 802263e:	4611      	mov	r1, r2
 8022640:	795b      	ldrb	r3, [r3, #5]
 8022642:	f603 0604 	addw	r6, r3, #2052	; 0x804
 8022646:	4426      	add	r6, r4
 8022648:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 802264a:	4437      	add	r7, r6
 802264c:	2f00      	cmp	r7, #0
 802264e:	dd06      	ble.n	802265e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x23a>
 8022650:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8022654:	790f      	ldrb	r7, [r1, #4]
 8022656:	f806 7d01 	strb.w	r7, [r6, #-1]!
 802265a:	88c9      	ldrh	r1, [r1, #6]
 802265c:	e7f4      	b.n	8022648 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x224>
 802265e:	f884 1804 	strb.w	r1, [r4, #2052]	; 0x804
 8022662:	b29b      	uxth	r3, r3
 8022664:	e7c5      	b.n	80225f2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1ce>
 8022666:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022668:	920a      	str	r2, [sp, #40]	; 0x28
 802266a:	4601      	mov	r1, r0
 802266c:	4662      	mov	r2, ip
 802266e:	461e      	mov	r6, r3
 8022670:	e78e      	b.n	8022590 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x16c>
 8022672:	1b73      	subs	r3, r6, r5
 8022674:	eb02 0c05 	add.w	ip, r2, r5
 8022678:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 802267c:	b29b      	uxth	r3, r3
 802267e:	fa1f fc8c 	uxth.w	ip, ip
 8022682:	2500      	movs	r5, #0
 8022684:	9a08      	ldr	r2, [sp, #32]
 8022686:	4542      	cmp	r2, r8
 8022688:	d88d      	bhi.n	80225a6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x182>
 802268a:	4601      	mov	r1, r0
 802268c:	e74f      	b.n	802252e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10a>
 802268e:	428e      	cmp	r6, r1
 8022690:	bf2b      	itete	cs
 8022692:	468e      	movcs	lr, r1
 8022694:	46b6      	movcc	lr, r6
 8022696:	1a73      	subcs	r3, r6, r1
 8022698:	1b88      	subcc	r0, r1, r6
 802269a:	eb02 0c0e 	add.w	ip, r2, lr
 802269e:	bf2b      	itete	cs
 80226a0:	4628      	movcs	r0, r5
 80226a2:	462b      	movcc	r3, r5
 80226a4:	b29b      	uxthcs	r3, r3
 80226a6:	b280      	uxthcc	r0, r0
 80226a8:	f108 0503 	add.w	r5, r8, #3
 80226ac:	fa1f fc8c 	uxth.w	ip, ip
 80226b0:	4562      	cmp	r2, ip
 80226b2:	d06f      	beq.n	8022794 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x370>
 80226b4:	1c57      	adds	r7, r2, #1
 80226b6:	4422      	add	r2, r4
 80226b8:	b2bf      	uxth	r7, r7
 80226ba:	f892 2804 	ldrb.w	r2, [r2, #2052]	; 0x804
 80226be:	9713      	str	r7, [sp, #76]	; 0x4c
 80226c0:	2704      	movs	r7, #4
 80226c2:	46b9      	mov	r9, r7
 80226c4:	9f11      	ldr	r7, [sp, #68]	; 0x44
 80226c6:	fb19 7202 	smlabb	r2, r9, r2, r7
 80226ca:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80226cc:	58bf      	ldr	r7, [r7, r2]
 80226ce:	0e3a      	lsrs	r2, r7, #24
 80226d0:	9209      	str	r2, [sp, #36]	; 0x24
 80226d2:	d016      	beq.n	8022702 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2de>
 80226d4:	f3c7 2907 	ubfx	r9, r7, #8, #8
 80226d8:	fa5f fa87 	uxtb.w	sl, r7
 80226dc:	f3c7 4707 	ubfx	r7, r7, #16, #8
 80226e0:	fa5f f289 	uxtb.w	r2, r9
 80226e4:	9214      	str	r2, [sp, #80]	; 0x50
 80226e6:	b2fa      	uxtb	r2, r7
 80226e8:	9215      	str	r2, [sp, #84]	; 0x54
 80226ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80226ec:	2aff      	cmp	r2, #255	; 0xff
 80226ee:	d10b      	bne.n	8022708 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2e4>
 80226f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80226f2:	2aff      	cmp	r2, #255	; 0xff
 80226f4:	d108      	bne.n	8022708 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2e4>
 80226f6:	f805 ac03 	strb.w	sl, [r5, #-3]
 80226fa:	f805 9c02 	strb.w	r9, [r5, #-2]
 80226fe:	f805 7c01 	strb.w	r7, [r5, #-1]
 8022702:	3503      	adds	r5, #3
 8022704:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8022706:	e7d3      	b.n	80226b0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x28c>
 8022708:	9f09      	ldr	r7, [sp, #36]	; 0x24
 802270a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802270c:	437a      	muls	r2, r7
 802270e:	1c57      	adds	r7, r2, #1
 8022710:	eb07 2222 	add.w	r2, r7, r2, asr #8
 8022714:	f815 7c03 	ldrb.w	r7, [r5, #-3]
 8022718:	1212      	asrs	r2, r2, #8
 802271a:	fa1f f982 	uxth.w	r9, r2
 802271e:	43d2      	mvns	r2, r2
 8022720:	fb1a fa09 	smulbb	sl, sl, r9
 8022724:	b2d2      	uxtb	r2, r2
 8022726:	fb07 a702 	mla	r7, r7, r2, sl
 802272a:	9209      	str	r2, [sp, #36]	; 0x24
 802272c:	b2bf      	uxth	r7, r7
 802272e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8022730:	f107 0a01 	add.w	sl, r7, #1
 8022734:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 8022738:	fb12 fa09 	smulbb	sl, r2, r9
 802273c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802273e:	123f      	asrs	r7, r7, #8
 8022740:	f805 7c03 	strb.w	r7, [r5, #-3]
 8022744:	f815 7c02 	ldrb.w	r7, [r5, #-2]
 8022748:	fb07 aa02 	mla	sl, r7, r2, sl
 802274c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 802274e:	fb12 f909 	smulbb	r9, r2, r9
 8022752:	fa1f fa8a 	uxth.w	sl, sl
 8022756:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022758:	f10a 0701 	add.w	r7, sl, #1
 802275c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8022760:	f815 7c01 	ldrb.w	r7, [r5, #-1]
 8022764:	fb07 9902 	mla	r9, r7, r2, r9
 8022768:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 802276c:	fa1f f989 	uxth.w	r9, r9
 8022770:	f805 ac02 	strb.w	sl, [r5, #-2]
 8022774:	f109 0201 	add.w	r2, r9, #1
 8022778:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 802277c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8022780:	f805 9c01 	strb.w	r9, [r5, #-1]
 8022784:	e7bd      	b.n	8022702 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2de>
 8022786:	bf00      	nop
 8022788:	24006fec 	.word	0x24006fec
 802278c:	24006fe6 	.word	0x24006fe6
 8022790:	fffff7fb 	.word	0xfffff7fb
 8022794:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8022798:	428e      	cmp	r6, r1
 802279a:	44f0      	add	r8, lr
 802279c:	f4ff af71 	bcc.w	8022682 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x25e>
 80227a0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80227a2:	9904      	ldr	r1, [sp, #16]
 80227a4:	8812      	ldrh	r2, [r2, #0]
 80227a6:	1a52      	subs	r2, r2, r1
 80227a8:	9912      	ldr	r1, [sp, #72]	; 0x48
 80227aa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80227ae:	4490      	add	r8, r2
 80227b0:	9a07      	ldr	r2, [sp, #28]
 80227b2:	3201      	adds	r2, #1
 80227b4:	428a      	cmp	r2, r1
 80227b6:	9207      	str	r2, [sp, #28]
 80227b8:	d111      	bne.n	80227de <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3ba>
 80227ba:	f8bd 5068 	ldrh.w	r5, [sp, #104]	; 0x68
 80227be:	f8bd c060 	ldrh.w	ip, [sp, #96]	; 0x60
 80227c2:	9b04      	ldr	r3, [sp, #16]
 80227c4:	eba5 050c 	sub.w	r5, r5, ip
 80227c8:	b2ad      	uxth	r5, r5
 80227ca:	2d00      	cmp	r5, #0
 80227cc:	bf08      	it	eq
 80227ce:	4619      	moveq	r1, r3
 80227d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80227d2:	bf18      	it	ne
 80227d4:	2100      	movne	r1, #0
 80227d6:	3301      	adds	r3, #1
 80227d8:	b289      	uxth	r1, r1
 80227da:	930b      	str	r3, [sp, #44]	; 0x2c
 80227dc:	e69e      	b.n	802251c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xf8>
 80227de:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 80227e2:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 80227e6:	1a2d      	subs	r5, r5, r0
 80227e8:	b2ad      	uxth	r5, r5
 80227ea:	2d00      	cmp	r5, #0
 80227ec:	bf18      	it	ne
 80227ee:	2000      	movne	r0, #0
 80227f0:	e748      	b.n	8022684 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x260>
 80227f2:	4b04      	ldr	r3, [pc, #16]	; (8022804 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3e0>)
 80227f4:	6818      	ldr	r0, [r3, #0]
 80227f6:	6803      	ldr	r3, [r0, #0]
 80227f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80227fa:	4798      	blx	r3
 80227fc:	b01d      	add	sp, #116	; 0x74
 80227fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022802:	bf00      	nop
 8022804:	24006fec 	.word	0x24006fec

08022808 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 8022808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802280c:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8022810:	9c06      	ldr	r4, [sp, #24]
 8022812:	2800      	cmp	r0, #0
 8022814:	d06e      	beq.n	80228f4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8022816:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 802281a:	2d00      	cmp	r5, #0
 802281c:	dd6a      	ble.n	80228f4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 802281e:	f9b3 c006 	ldrsh.w	ip, [r3, #6]
 8022822:	f1bc 0f00 	cmp.w	ip, #0
 8022826:	dd65      	ble.n	80228f4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8022828:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 802282c:	28ff      	cmp	r0, #255	; 0xff
 802282e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8022832:	f3c4 2707 	ubfx	r7, r4, #8, #8
 8022836:	fb02 3306 	mla	r3, r2, r6, r3
 802283a:	f3c4 4607 	ubfx	r6, r4, #16, #8
 802283e:	b2e4      	uxtb	r4, r4
 8022840:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022844:	4419      	add	r1, r3
 8022846:	fb02 f30c 	mul.w	r3, r2, ip
 802284a:	eba2 0205 	sub.w	r2, r2, r5
 802284e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022852:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022856:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802285a:	440b      	add	r3, r1
 802285c:	d03e      	beq.n	80228dc <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd4>
 802285e:	fa1f fc80 	uxth.w	ip, r0
 8022862:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8022866:	fb06 f60c 	mul.w	r6, r6, ip
 802286a:	b280      	uxth	r0, r0
 802286c:	fb07 f70c 	mul.w	r7, r7, ip
 8022870:	fb04 f40c 	mul.w	r4, r4, ip
 8022874:	4299      	cmp	r1, r3
 8022876:	d23d      	bcs.n	80228f4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8022878:	eb01 0c05 	add.w	ip, r1, r5
 802287c:	458c      	cmp	ip, r1
 802287e:	f101 0e03 	add.w	lr, r1, #3
 8022882:	d928      	bls.n	80228d6 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xce>
 8022884:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8022888:	fb11 f100 	smulbb	r1, r1, r0
 802288c:	4421      	add	r1, r4
 802288e:	b289      	uxth	r1, r1
 8022890:	f101 0801 	add.w	r8, r1, #1
 8022894:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8022898:	1209      	asrs	r1, r1, #8
 802289a:	f80e 1c03 	strb.w	r1, [lr, #-3]
 802289e:	f81e 1c02 	ldrb.w	r1, [lr, #-2]
 80228a2:	fb11 f100 	smulbb	r1, r1, r0
 80228a6:	4439      	add	r1, r7
 80228a8:	b289      	uxth	r1, r1
 80228aa:	f101 0801 	add.w	r8, r1, #1
 80228ae:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 80228b2:	1209      	asrs	r1, r1, #8
 80228b4:	f80e 1c02 	strb.w	r1, [lr, #-2]
 80228b8:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 80228bc:	fb11 f100 	smulbb	r1, r1, r0
 80228c0:	4431      	add	r1, r6
 80228c2:	b289      	uxth	r1, r1
 80228c4:	f101 0801 	add.w	r8, r1, #1
 80228c8:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 80228cc:	1209      	asrs	r1, r1, #8
 80228ce:	f80e 1c01 	strb.w	r1, [lr, #-1]
 80228d2:	4671      	mov	r1, lr
 80228d4:	e7d2      	b.n	802287c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x74>
 80228d6:	4411      	add	r1, r2
 80228d8:	e7cc      	b.n	8022874 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6c>
 80228da:	4411      	add	r1, r2
 80228dc:	4299      	cmp	r1, r3
 80228de:	d209      	bcs.n	80228f4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 80228e0:	1948      	adds	r0, r1, r5
 80228e2:	4281      	cmp	r1, r0
 80228e4:	d2f9      	bcs.n	80228da <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd2>
 80228e6:	700c      	strb	r4, [r1, #0]
 80228e8:	3103      	adds	r1, #3
 80228ea:	f801 7c02 	strb.w	r7, [r1, #-2]
 80228ee:	f801 6c01 	strb.w	r6, [r1, #-1]
 80228f2:	e7f6      	b.n	80228e2 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xda>
 80228f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080228f8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 80228f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80228fc:	b093      	sub	sp, #76	; 0x4c
 80228fe:	4699      	mov	r9, r3
 8022900:	4617      	mov	r7, r2
 8022902:	f9b3 2000 	ldrsh.w	r2, [r3]
 8022906:	f9bd 8074 	ldrsh.w	r8, [sp, #116]	; 0x74
 802290a:	4604      	mov	r4, r0
 802290c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8022910:	a80c      	add	r0, sp, #48	; 0x30
 8022912:	f9bd 6078 	ldrsh.w	r6, [sp, #120]	; 0x78
 8022916:	460d      	mov	r5, r1
 8022918:	4649      	mov	r1, r9
 802291a:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 802291e:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8022922:	f8ad 8034 	strh.w	r8, [sp, #52]	; 0x34
 8022926:	f8ad 6036 	strh.w	r6, [sp, #54]	; 0x36
 802292a:	f7f7 fa4b 	bl	8019dc4 <_ZN8touchgfx4RectaNERKS0_>
 802292e:	4639      	mov	r1, r7
 8022930:	a80c      	add	r0, sp, #48	; 0x30
 8022932:	f7f7 fa47 	bl	8019dc4 <_ZN8touchgfx4RectaNERKS0_>
 8022936:	4b78      	ldr	r3, [pc, #480]	; (8022b18 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 8022938:	8818      	ldrh	r0, [r3, #0]
 802293a:	4b78      	ldr	r3, [pc, #480]	; (8022b1c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>)
 802293c:	b202      	sxth	r2, r0
 802293e:	8819      	ldrh	r1, [r3, #0]
 8022940:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8022944:	b20f      	sxth	r7, r1
 8022946:	2b00      	cmp	r3, #0
 8022948:	da07      	bge.n	802295a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x62>
 802294a:	f8bd c034 	ldrh.w	ip, [sp, #52]	; 0x34
 802294e:	4463      	add	r3, ip
 8022950:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8022954:	2300      	movs	r3, #0
 8022956:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 802295a:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 802295e:	f9bd c034 	ldrsh.w	ip, [sp, #52]	; 0x34
 8022962:	1ad2      	subs	r2, r2, r3
 8022964:	4594      	cmp	ip, r2
 8022966:	bfc4      	itt	gt
 8022968:	1ac2      	subgt	r2, r0, r3
 802296a:	f8ad 2034 	strhgt.w	r2, [sp, #52]	; 0x34
 802296e:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 8022972:	2a00      	cmp	r2, #0
 8022974:	da07      	bge.n	8022986 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x8e>
 8022976:	f8bd c036 	ldrh.w	ip, [sp, #54]	; 0x36
 802297a:	4462      	add	r2, ip
 802297c:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
 8022980:	2200      	movs	r2, #0
 8022982:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 8022986:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 802298a:	f9bd c036 	ldrsh.w	ip, [sp, #54]	; 0x36
 802298e:	1abf      	subs	r7, r7, r2
 8022990:	45bc      	cmp	ip, r7
 8022992:	f8df c190 	ldr.w	ip, [pc, #400]	; 8022b24 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x22c>
 8022996:	bfc8      	it	gt
 8022998:	1a8f      	subgt	r7, r1, r2
 802299a:	f89c c000 	ldrb.w	ip, [ip]
 802299e:	bfc8      	it	gt
 80229a0:	f8ad 7036 	strhgt.w	r7, [sp, #54]	; 0x36
 80229a4:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 80229a8:	f1bc 0f00 	cmp.w	ip, #0
 80229ac:	d176      	bne.n	8022a9c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a4>
 80229ae:	4287      	cmp	r7, r0
 80229b0:	bf14      	ite	ne
 80229b2:	2100      	movne	r1, #0
 80229b4:	2101      	moveq	r1, #1
 80229b6:	2f00      	cmp	r7, #0
 80229b8:	9107      	str	r1, [sp, #28]
 80229ba:	dd73      	ble.n	8022aa4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 80229bc:	f9bd 1036 	ldrsh.w	r1, [sp, #54]	; 0x36
 80229c0:	2900      	cmp	r1, #0
 80229c2:	9104      	str	r1, [sp, #16]
 80229c4:	dd6e      	ble.n	8022aa4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 80229c6:	f8b9 1000 	ldrh.w	r1, [r9]
 80229ca:	a80e      	add	r0, sp, #56	; 0x38
 80229cc:	f8ad 8044 	strh.w	r8, [sp, #68]	; 0x44
 80229d0:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 80229d4:	1a5b      	subs	r3, r3, r1
 80229d6:	a910      	add	r1, sp, #64	; 0x40
 80229d8:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 80229dc:	b21b      	sxth	r3, r3
 80229de:	f8ad 703c 	strh.w	r7, [sp, #60]	; 0x3c
 80229e2:	f8df a144 	ldr.w	sl, [pc, #324]	; 8022b28 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 80229e6:	9305      	str	r3, [sp, #20]
 80229e8:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 80229ec:	1ad2      	subs	r2, r2, r3
 80229ee:	b213      	sxth	r3, r2
 80229f0:	9306      	str	r3, [sp, #24]
 80229f2:	9b05      	ldr	r3, [sp, #20]
 80229f4:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 80229f8:	9b06      	ldr	r3, [sp, #24]
 80229fa:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 80229fe:	9b04      	ldr	r3, [sp, #16]
 8022a00:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8022a04:	2300      	movs	r3, #0
 8022a06:	9310      	str	r3, [sp, #64]	; 0x40
 8022a08:	f7fa f958 	bl	801ccbc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022a0c:	4640      	mov	r0, r8
 8022a0e:	f7fa f92d 	bl	801cc6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022a12:	a810      	add	r0, sp, #64	; 0x40
 8022a14:	f7fa f92a 	bl	801cc6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022a18:	4b41      	ldr	r3, [pc, #260]	; (8022b20 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x228>)
 8022a1a:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 8022a1e:	4628      	mov	r0, r5
 8022a20:	881b      	ldrh	r3, [r3, #0]
 8022a22:	9308      	str	r3, [sp, #32]
 8022a24:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 8022a28:	b21b      	sxth	r3, r3
 8022a2a:	9303      	str	r3, [sp, #12]
 8022a2c:	682b      	ldr	r3, [r5, #0]
 8022a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022a30:	4798      	blx	r3
 8022a32:	9a03      	ldr	r2, [sp, #12]
 8022a34:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8022a38:	4681      	mov	r9, r0
 8022a3a:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8022a3e:	fb13 f302 	smulbb	r3, r3, r2
 8022a42:	2203      	movs	r2, #3
 8022a44:	f8da 0000 	ldr.w	r0, [sl]
 8022a48:	fb15 3302 	smlabb	r3, r5, r2, r3
 8022a4c:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8022a4e:	920b      	str	r2, [sp, #44]	; 0x2c
 8022a50:	441d      	add	r5, r3
 8022a52:	6803      	ldr	r3, [r0, #0]
 8022a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022a56:	4798      	blx	r3
 8022a58:	9009      	str	r0, [sp, #36]	; 0x24
 8022a5a:	f8da 0000 	ldr.w	r0, [sl]
 8022a5e:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 8022a62:	6803      	ldr	r3, [r0, #0]
 8022a64:	910a      	str	r1, [sp, #40]	; 0x28
 8022a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022a68:	f9bd 6032 	ldrsh.w	r6, [sp, #50]	; 0x32
 8022a6c:	4798      	blx	r3
 8022a6e:	f010 0f01 	tst.w	r0, #1
 8022a72:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8022a76:	d01e      	beq.n	8022ab6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1be>
 8022a78:	f8da 0000 	ldr.w	r0, [sl]
 8022a7c:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 8022a80:	6803      	ldr	r3, [r0, #0]
 8022a82:	9200      	str	r2, [sp, #0]
 8022a84:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 8022a86:	462b      	mov	r3, r5
 8022a88:	e898 0006 	ldmia.w	r8, {r1, r2}
 8022a8c:	47b0      	blx	r6
 8022a8e:	9b05      	ldr	r3, [sp, #20]
 8022a90:	80a7      	strh	r7, [r4, #4]
 8022a92:	8023      	strh	r3, [r4, #0]
 8022a94:	9b06      	ldr	r3, [sp, #24]
 8022a96:	8063      	strh	r3, [r4, #2]
 8022a98:	9b04      	ldr	r3, [sp, #16]
 8022a9a:	e007      	b.n	8022aac <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b4>
 8022a9c:	f9bd 0036 	ldrsh.w	r0, [sp, #54]	; 0x36
 8022aa0:	4288      	cmp	r0, r1
 8022aa2:	e785      	b.n	80229b0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb8>
 8022aa4:	2300      	movs	r3, #0
 8022aa6:	8023      	strh	r3, [r4, #0]
 8022aa8:	8063      	strh	r3, [r4, #2]
 8022aaa:	80a3      	strh	r3, [r4, #4]
 8022aac:	4620      	mov	r0, r4
 8022aae:	80e3      	strh	r3, [r4, #6]
 8022ab0:	b013      	add	sp, #76	; 0x4c
 8022ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022ab6:	fb09 f606 	mul.w	r6, r9, r6
 8022aba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022abc:	fb11 6602 	smlabb	r6, r1, r2, r6
 8022ac0:	9a07      	ldr	r2, [sp, #28]
 8022ac2:	4433      	add	r3, r6
 8022ac4:	461e      	mov	r6, r3
 8022ac6:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 8022aca:	b16a      	cbz	r2, 8022ae8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 8022acc:	9a08      	ldr	r2, [sp, #32]
 8022ace:	4593      	cmp	fp, r2
 8022ad0:	d10a      	bne.n	8022ae8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 8022ad2:	f8da 0000 	ldr.w	r0, [sl]
 8022ad6:	fb09 f303 	mul.w	r3, r9, r3
 8022ada:	4629      	mov	r1, r5
 8022adc:	6802      	ldr	r2, [r0, #0]
 8022ade:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 8022ae2:	4632      	mov	r2, r6
 8022ae4:	47d0      	blx	sl
 8022ae6:	e7d2      	b.n	8022a8e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 8022ae8:	9a03      	ldr	r2, [sp, #12]
 8022aea:	f8df b03c 	ldr.w	fp, [pc, #60]	; 8022b28 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 8022aee:	fb02 5803 	mla	r8, r2, r3, r5
 8022af2:	4545      	cmp	r5, r8
 8022af4:	d2cb      	bcs.n	8022a8e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 8022af6:	f8db 0000 	ldr.w	r0, [fp]
 8022afa:	4629      	mov	r1, r5
 8022afc:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 8022b00:	6802      	ldr	r2, [r0, #0]
 8022b02:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022b06:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 8022b0a:	4632      	mov	r2, r6
 8022b0c:	47d0      	blx	sl
 8022b0e:	9b03      	ldr	r3, [sp, #12]
 8022b10:	444e      	add	r6, r9
 8022b12:	441d      	add	r5, r3
 8022b14:	e7ed      	b.n	8022af2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1fa>
 8022b16:	bf00      	nop
 8022b18:	24006fe0 	.word	0x24006fe0
 8022b1c:	24006fe2 	.word	0x24006fe2
 8022b20:	24006fe6 	.word	0x24006fe6
 8022b24:	24006fe4 	.word	0x24006fe4
 8022b28:	24006fec 	.word	0x24006fec

08022b2c <_ZN8touchgfx8LCD24bppC1Ev>:
 8022b2c:	2200      	movs	r2, #0
 8022b2e:	490d      	ldr	r1, [pc, #52]	; (8022b64 <_ZN8touchgfx8LCD24bppC1Ev+0x38>)
 8022b30:	6042      	str	r2, [r0, #4]
 8022b32:	6001      	str	r1, [r0, #0]
 8022b34:	6602      	str	r2, [r0, #96]	; 0x60
 8022b36:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8022b3a:	e9c0 2204 	strd	r2, r2, [r0, #16]
 8022b3e:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8022b42:	e9c0 2208 	strd	r2, r2, [r0, #32]
 8022b46:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 8022b4a:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 8022b4e:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 8022b52:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 8022b56:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 8022b5a:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 8022b5e:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 8022b62:	4770      	bx	lr
 8022b64:	0802c0b4 	.word	0x0802c0b4

08022b68 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8022b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022b6c:	b091      	sub	sp, #68	; 0x44
 8022b6e:	4607      	mov	r7, r0
 8022b70:	4688      	mov	r8, r1
 8022b72:	6810      	ldr	r0, [r2, #0]
 8022b74:	6851      	ldr	r1, [r2, #4]
 8022b76:	ac0c      	add	r4, sp, #48	; 0x30
 8022b78:	4616      	mov	r6, r2
 8022b7a:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 8022b7e:	4d64      	ldr	r5, [pc, #400]	; (8022d10 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 8022b80:	f8df a190 	ldr.w	sl, [pc, #400]	; 8022d14 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 8022b84:	c403      	stmia	r4!, {r0, r1}
 8022b86:	6818      	ldr	r0, [r3, #0]
 8022b88:	ac0e      	add	r4, sp, #56	; 0x38
 8022b8a:	6859      	ldr	r1, [r3, #4]
 8022b8c:	c403      	stmia	r4!, {r0, r1}
 8022b8e:	a80c      	add	r0, sp, #48	; 0x30
 8022b90:	f7fa f86c 	bl	801cc6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022b94:	4631      	mov	r1, r6
 8022b96:	a80e      	add	r0, sp, #56	; 0x38
 8022b98:	f7fa f890 	bl	801ccbc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022b9c:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8022ba0:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8022ba4:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8022ba8:	6828      	ldr	r0, [r5, #0]
 8022baa:	fb11 2103 	smlabb	r1, r1, r3, r2
 8022bae:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	; 0x3c
 8022bb2:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	; 0x3e
 8022bb6:	440f      	add	r7, r1
 8022bb8:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8022bbc:	440a      	add	r2, r1
 8022bbe:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8022bc2:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8022bc6:	4413      	add	r3, r2
 8022bc8:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8022bcc:	6803      	ldr	r3, [r0, #0]
 8022bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022bd0:	4798      	blx	r3
 8022bd2:	f010 0f80 	tst.w	r0, #128	; 0x80
 8022bd6:	6828      	ldr	r0, [r5, #0]
 8022bd8:	d01f      	beq.n	8022c1a <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb2>
 8022bda:	2201      	movs	r2, #1
 8022bdc:	2500      	movs	r5, #0
 8022bde:	6801      	ldr	r1, [r0, #0]
 8022be0:	b2a4      	uxth	r4, r4
 8022be2:	b2b6      	uxth	r6, r6
 8022be4:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8022be8:	e9cd 2508 	strd	r2, r5, [sp, #32]
 8022bec:	250b      	movs	r5, #11
 8022bee:	9507      	str	r5, [sp, #28]
 8022bf0:	f8ba 5000 	ldrh.w	r5, [sl]
 8022bf4:	f8cd 9010 	str.w	r9, [sp, #16]
 8022bf8:	9602      	str	r6, [sp, #8]
 8022bfa:	9401      	str	r4, [sp, #4]
 8022bfc:	e9cd 2505 	strd	r2, r5, [sp, #20]
 8022c00:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8022c04:	9203      	str	r2, [sp, #12]
 8022c06:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8022c0a:	9200      	str	r2, [sp, #0]
 8022c0c:	4642      	mov	r2, r8
 8022c0e:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 8022c10:	4639      	mov	r1, r7
 8022c12:	47a0      	blx	r4
 8022c14:	b011      	add	sp, #68	; 0x44
 8022c16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022c1a:	6803      	ldr	r3, [r0, #0]
 8022c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022c1e:	4798      	blx	r3
 8022c20:	f8ba 5000 	ldrh.w	r5, [sl]
 8022c24:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8022c28:	f04f 0e04 	mov.w	lr, #4
 8022c2c:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8022c30:	436e      	muls	r6, r5
 8022c32:	fb05 2303 	mla	r3, r5, r3, r2
 8022c36:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8022c3a:	1b2d      	subs	r5, r5, r4
 8022c3c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022c40:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022c44:	4418      	add	r0, r3
 8022c46:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8022c4a:	1982      	adds	r2, r0, r6
 8022c4c:	1b1b      	subs	r3, r3, r4
 8022c4e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8022c52:	930b      	str	r3, [sp, #44]	; 0x2c
 8022c54:	4290      	cmp	r0, r2
 8022c56:	d254      	bcs.n	8022d02 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x19a>
 8022c58:	eb00 0a04 	add.w	sl, r0, r4
 8022c5c:	4550      	cmp	r0, sl
 8022c5e:	d24c      	bcs.n	8022cfa <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x192>
 8022c60:	f817 1b01 	ldrb.w	r1, [r7], #1
 8022c64:	fb1e e101 	smlabb	r1, lr, r1, lr
 8022c68:	eb08 0c01 	add.w	ip, r8, r1
 8022c6c:	f89c 3003 	ldrb.w	r3, [ip, #3]
 8022c70:	b173      	cbz	r3, 8022c90 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 8022c72:	2bff      	cmp	r3, #255	; 0xff
 8022c74:	f818 b001 	ldrb.w	fp, [r8, r1]
 8022c78:	d10c      	bne.n	8022c94 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8022c7a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8022c7e:	d109      	bne.n	8022c94 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8022c80:	f880 b000 	strb.w	fp, [r0]
 8022c84:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8022c88:	7043      	strb	r3, [r0, #1]
 8022c8a:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8022c8e:	7083      	strb	r3, [r0, #2]
 8022c90:	3003      	adds	r0, #3
 8022c92:	e7e3      	b.n	8022c5c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 8022c94:	fb09 f103 	mul.w	r1, r9, r3
 8022c98:	1c4b      	adds	r3, r1, #1
 8022c9a:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8022c9e:	7801      	ldrb	r1, [r0, #0]
 8022ca0:	121b      	asrs	r3, r3, #8
 8022ca2:	b29e      	uxth	r6, r3
 8022ca4:	43db      	mvns	r3, r3
 8022ca6:	fb1b fb06 	smulbb	fp, fp, r6
 8022caa:	b2db      	uxtb	r3, r3
 8022cac:	fb01 b103 	mla	r1, r1, r3, fp
 8022cb0:	b289      	uxth	r1, r1
 8022cb2:	f101 0b01 	add.w	fp, r1, #1
 8022cb6:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 8022cba:	f890 b001 	ldrb.w	fp, [r0, #1]
 8022cbe:	fb1b fb03 	smulbb	fp, fp, r3
 8022cc2:	1209      	asrs	r1, r1, #8
 8022cc4:	7001      	strb	r1, [r0, #0]
 8022cc6:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8022cca:	fb01 b106 	mla	r1, r1, r6, fp
 8022cce:	b289      	uxth	r1, r1
 8022cd0:	f101 0b01 	add.w	fp, r1, #1
 8022cd4:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 8022cd8:	1209      	asrs	r1, r1, #8
 8022cda:	7041      	strb	r1, [r0, #1]
 8022cdc:	f89c 1002 	ldrb.w	r1, [ip, #2]
 8022ce0:	f890 c002 	ldrb.w	ip, [r0, #2]
 8022ce4:	fb1c f303 	smulbb	r3, ip, r3
 8022ce8:	fb01 3606 	mla	r6, r1, r6, r3
 8022cec:	b2b6      	uxth	r6, r6
 8022cee:	1c73      	adds	r3, r6, #1
 8022cf0:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8022cf4:	1236      	asrs	r6, r6, #8
 8022cf6:	7086      	strb	r6, [r0, #2]
 8022cf8:	e7ca      	b.n	8022c90 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 8022cfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022cfc:	4428      	add	r0, r5
 8022cfe:	441f      	add	r7, r3
 8022d00:	e7a8      	b.n	8022c54 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xec>
 8022d02:	4b03      	ldr	r3, [pc, #12]	; (8022d10 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 8022d04:	6818      	ldr	r0, [r3, #0]
 8022d06:	6803      	ldr	r3, [r0, #0]
 8022d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022d0a:	4798      	blx	r3
 8022d0c:	e782      	b.n	8022c14 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 8022d0e:	bf00      	nop
 8022d10:	24006fec 	.word	0x24006fec
 8022d14:	24006fe6 	.word	0x24006fe6

08022d18 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8022d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022d1c:	b091      	sub	sp, #68	; 0x44
 8022d1e:	4680      	mov	r8, r0
 8022d20:	460e      	mov	r6, r1
 8022d22:	6810      	ldr	r0, [r2, #0]
 8022d24:	6851      	ldr	r1, [r2, #4]
 8022d26:	ad0c      	add	r5, sp, #48	; 0x30
 8022d28:	4614      	mov	r4, r2
 8022d2a:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 8022d2e:	f8df 9198 	ldr.w	r9, [pc, #408]	; 8022ec8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>
 8022d32:	f8df a198 	ldr.w	sl, [pc, #408]	; 8022ecc <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 8022d36:	c503      	stmia	r5!, {r0, r1}
 8022d38:	6818      	ldr	r0, [r3, #0]
 8022d3a:	ad0e      	add	r5, sp, #56	; 0x38
 8022d3c:	6859      	ldr	r1, [r3, #4]
 8022d3e:	c503      	stmia	r5!, {r0, r1}
 8022d40:	a80c      	add	r0, sp, #48	; 0x30
 8022d42:	f7f9 ff93 	bl	801cc6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022d46:	4621      	mov	r1, r4
 8022d48:	a80e      	add	r0, sp, #56	; 0x38
 8022d4a:	f7f9 ffb7 	bl	801ccbc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022d4e:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8022d52:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8022d56:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8022d5a:	f8d9 0000 	ldr.w	r0, [r9]
 8022d5e:	fb11 2103 	smlabb	r1, r1, r3, r2
 8022d62:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	; 0x3e
 8022d66:	eb08 0401 	add.w	r4, r8, r1
 8022d6a:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8022d6e:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8022d72:	440a      	add	r2, r1
 8022d74:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8022d78:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8022d7c:	4413      	add	r3, r2
 8022d7e:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8022d82:	6803      	ldr	r3, [r0, #0]
 8022d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022d86:	4798      	blx	r3
 8022d88:	f010 0f80 	tst.w	r0, #128	; 0x80
 8022d8c:	f8d9 0000 	ldr.w	r0, [r9]
 8022d90:	d022      	beq.n	8022dd8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 8022d92:	2200      	movs	r2, #0
 8022d94:	f04f 0c01 	mov.w	ip, #1
 8022d98:	6801      	ldr	r1, [r0, #0]
 8022d9a:	b2ad      	uxth	r5, r5
 8022d9c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8022da0:	e9cd c208 	strd	ip, r2, [sp, #32]
 8022da4:	f04f 0c0b 	mov.w	ip, #11
 8022da8:	f8cd c01c 	str.w	ip, [sp, #28]
 8022dac:	f8ba c000 	ldrh.w	ip, [sl]
 8022db0:	9704      	str	r7, [sp, #16]
 8022db2:	9502      	str	r5, [sp, #8]
 8022db4:	e9cd 2c05 	strd	r2, ip, [sp, #20]
 8022db8:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8022dbc:	9203      	str	r2, [sp, #12]
 8022dbe:	fa1f f288 	uxth.w	r2, r8
 8022dc2:	9201      	str	r2, [sp, #4]
 8022dc4:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8022dc8:	9200      	str	r2, [sp, #0]
 8022dca:	4632      	mov	r2, r6
 8022dcc:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 8022dce:	4621      	mov	r1, r4
 8022dd0:	47a8      	blx	r5
 8022dd2:	b011      	add	sp, #68	; 0x44
 8022dd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022dd8:	6803      	ldr	r3, [r0, #0]
 8022dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022ddc:	4798      	blx	r3
 8022dde:	f8ba 2000 	ldrh.w	r2, [sl]
 8022de2:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8022de6:	f04f 0e03 	mov.w	lr, #3
 8022dea:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 8022dee:	4355      	muls	r5, r2
 8022df0:	fa1f fc87 	uxth.w	ip, r7
 8022df4:	fb02 1303 	mla	r3, r2, r3, r1
 8022df8:	eba2 0208 	sub.w	r2, r2, r8
 8022dfc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022e00:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022e04:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022e08:	4418      	add	r0, r3
 8022e0a:	920b      	str	r2, [sp, #44]	; 0x2c
 8022e0c:	1943      	adds	r3, r0, r5
 8022e0e:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 8022e12:	f1c7 05ff 	rsb	r5, r7, #255	; 0xff
 8022e16:	eba2 0208 	sub.w	r2, r2, r8
 8022e1a:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8022e1e:	b2ad      	uxth	r5, r5
 8022e20:	4298      	cmp	r0, r3
 8022e22:	d24a      	bcs.n	8022eba <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a2>
 8022e24:	eb00 0908 	add.w	r9, r0, r8
 8022e28:	4621      	mov	r1, r4
 8022e2a:	4548      	cmp	r0, r9
 8022e2c:	460c      	mov	r4, r1
 8022e2e:	d240      	bcs.n	8022eb2 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19a>
 8022e30:	f04f 0a04 	mov.w	sl, #4
 8022e34:	7824      	ldrb	r4, [r4, #0]
 8022e36:	2fff      	cmp	r7, #255	; 0xff
 8022e38:	f101 0101 	add.w	r1, r1, #1
 8022e3c:	fb1e a404 	smlabb	r4, lr, r4, sl
 8022e40:	eb06 0a04 	add.w	sl, r6, r4
 8022e44:	f816 b004 	ldrb.w	fp, [r6, r4]
 8022e48:	d02b      	beq.n	8022ea2 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18a>
 8022e4a:	7804      	ldrb	r4, [r0, #0]
 8022e4c:	fb14 f405 	smulbb	r4, r4, r5
 8022e50:	fb0b 440c 	mla	r4, fp, ip, r4
 8022e54:	b2a4      	uxth	r4, r4
 8022e56:	f104 0b01 	add.w	fp, r4, #1
 8022e5a:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 8022e5e:	f890 b001 	ldrb.w	fp, [r0, #1]
 8022e62:	fb1b fb05 	smulbb	fp, fp, r5
 8022e66:	1224      	asrs	r4, r4, #8
 8022e68:	7004      	strb	r4, [r0, #0]
 8022e6a:	f89a 4001 	ldrb.w	r4, [sl, #1]
 8022e6e:	fb04 b40c 	mla	r4, r4, ip, fp
 8022e72:	b2a4      	uxth	r4, r4
 8022e74:	f104 0b01 	add.w	fp, r4, #1
 8022e78:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 8022e7c:	1224      	asrs	r4, r4, #8
 8022e7e:	7044      	strb	r4, [r0, #1]
 8022e80:	f89a 4002 	ldrb.w	r4, [sl, #2]
 8022e84:	f890 a002 	ldrb.w	sl, [r0, #2]
 8022e88:	fb1a fa05 	smulbb	sl, sl, r5
 8022e8c:	fb04 a40c 	mla	r4, r4, ip, sl
 8022e90:	b2a4      	uxth	r4, r4
 8022e92:	f104 0a01 	add.w	sl, r4, #1
 8022e96:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8022e9a:	1224      	asrs	r4, r4, #8
 8022e9c:	7084      	strb	r4, [r0, #2]
 8022e9e:	3003      	adds	r0, #3
 8022ea0:	e7c3      	b.n	8022e2a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x112>
 8022ea2:	f880 b000 	strb.w	fp, [r0]
 8022ea6:	f89a 4001 	ldrb.w	r4, [sl, #1]
 8022eaa:	7044      	strb	r4, [r0, #1]
 8022eac:	f89a 4002 	ldrb.w	r4, [sl, #2]
 8022eb0:	e7f4      	b.n	8022e9c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x184>
 8022eb2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022eb4:	4420      	add	r0, r4
 8022eb6:	188c      	adds	r4, r1, r2
 8022eb8:	e7b2      	b.n	8022e20 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x108>
 8022eba:	4b03      	ldr	r3, [pc, #12]	; (8022ec8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>)
 8022ebc:	6818      	ldr	r0, [r3, #0]
 8022ebe:	6803      	ldr	r3, [r0, #0]
 8022ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022ec2:	4798      	blx	r3
 8022ec4:	e785      	b.n	8022dd2 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xba>
 8022ec6:	bf00      	nop
 8022ec8:	24006fec 	.word	0x24006fec
 8022ecc:	24006fe6 	.word	0x24006fe6

08022ed0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8022ed0:	b4f0      	push	{r4, r5, r6, r7}
 8022ed2:	460c      	mov	r4, r1
 8022ed4:	4611      	mov	r1, r2
 8022ed6:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8022eda:	461a      	mov	r2, r3
 8022edc:	780f      	ldrb	r7, [r1, #0]
 8022ede:	9b04      	ldr	r3, [sp, #16]
 8022ee0:	784e      	ldrb	r6, [r1, #1]
 8022ee2:	b11f      	cbz	r7, 8022eec <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1c>
 8022ee4:	2f01      	cmp	r7, #1
 8022ee6:	d01d      	beq.n	8022f24 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x54>
 8022ee8:	bcf0      	pop	{r4, r5, r6, r7}
 8022eea:	4770      	bx	lr
 8022eec:	2e03      	cmp	r6, #3
 8022eee:	d8fb      	bhi.n	8022ee8 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 8022ef0:	e8df f006 	tbb	[pc, r6]
 8022ef4:	16140702 	.word	0x16140702
 8022ef8:	9504      	str	r5, [sp, #16]
 8022efa:	4620      	mov	r0, r4
 8022efc:	bcf0      	pop	{r4, r5, r6, r7}
 8022efe:	f7ff be33 	b.w	8022b68 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 8022f02:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8022f04:	2800      	cmp	r0, #0
 8022f06:	d0ef      	beq.n	8022ee8 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 8022f08:	6806      	ldr	r6, [r0, #0]
 8022f0a:	e9cd 3504 	strd	r3, r5, [sp, #16]
 8022f0e:	68f5      	ldr	r5, [r6, #12]
 8022f10:	4613      	mov	r3, r2
 8022f12:	46ac      	mov	ip, r5
 8022f14:	460a      	mov	r2, r1
 8022f16:	4621      	mov	r1, r4
 8022f18:	bcf0      	pop	{r4, r5, r6, r7}
 8022f1a:	4760      	bx	ip
 8022f1c:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8022f1e:	e7f1      	b.n	8022f04 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 8022f20:	6e00      	ldr	r0, [r0, #96]	; 0x60
 8022f22:	e7ef      	b.n	8022f04 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 8022f24:	2e03      	cmp	r6, #3
 8022f26:	d8df      	bhi.n	8022ee8 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 8022f28:	e8df f006 	tbb	[pc, r6]
 8022f2c:	110f0702 	.word	0x110f0702
 8022f30:	9504      	str	r5, [sp, #16]
 8022f32:	4620      	mov	r0, r4
 8022f34:	bcf0      	pop	{r4, r5, r6, r7}
 8022f36:	f7ff beef 	b.w	8022d18 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 8022f3a:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8022f3c:	2800      	cmp	r0, #0
 8022f3e:	d0d3      	beq.n	8022ee8 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 8022f40:	6806      	ldr	r6, [r0, #0]
 8022f42:	e9cd 3504 	strd	r3, r5, [sp, #16]
 8022f46:	68b5      	ldr	r5, [r6, #8]
 8022f48:	e7e2      	b.n	8022f10 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 8022f4a:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8022f4c:	e7f6      	b.n	8022f3c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6c>
 8022f4e:	6e00      	ldr	r0, [r0, #96]	; 0x60
 8022f50:	e7f4      	b.n	8022f3c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6c>
	...

08022f54 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 8022f54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8022f58:	4605      	mov	r5, r0
 8022f5a:	b08f      	sub	sp, #60	; 0x3c
 8022f5c:	460c      	mov	r4, r1
 8022f5e:	461f      	mov	r7, r3
 8022f60:	2b00      	cmp	r3, #0
 8022f62:	d052      	beq.n	802300a <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 8022f64:	6808      	ldr	r0, [r1, #0]
 8022f66:	ab0a      	add	r3, sp, #40	; 0x28
 8022f68:	6849      	ldr	r1, [r1, #4]
 8022f6a:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8023134 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>
 8022f6e:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 8023138 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e4>
 8022f72:	c303      	stmia	r3!, {r0, r1}
 8022f74:	6810      	ldr	r0, [r2, #0]
 8022f76:	ab0c      	add	r3, sp, #48	; 0x30
 8022f78:	6851      	ldr	r1, [r2, #4]
 8022f7a:	c303      	stmia	r3!, {r0, r1}
 8022f7c:	a80a      	add	r0, sp, #40	; 0x28
 8022f7e:	f7f9 fe75 	bl	801cc6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022f82:	4621      	mov	r1, r4
 8022f84:	a80c      	add	r0, sp, #48	; 0x30
 8022f86:	f7f9 fe99 	bl	801ccbc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022f8a:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 8022f8e:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8022f92:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8022f96:	f8d8 0000 	ldr.w	r0, [r8]
 8022f9a:	fb11 2103 	smlabb	r1, r1, r3, r2
 8022f9e:	f9bd 6034 	ldrsh.w	r6, [sp, #52]	; 0x34
 8022fa2:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	; 0x36
 8022fa6:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 8022faa:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8022fae:	440a      	add	r2, r1
 8022fb0:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8022fb4:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 8022fb8:	4413      	add	r3, r2
 8022fba:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8022fbe:	6803      	ldr	r3, [r0, #0]
 8022fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022fc2:	4798      	blx	r3
 8022fc4:	2fff      	cmp	r7, #255	; 0xff
 8022fc6:	d023      	beq.n	8023010 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xbc>
 8022fc8:	f010 0f04 	tst.w	r0, #4
 8022fcc:	f8d8 0000 	ldr.w	r0, [r8]
 8022fd0:	d021      	beq.n	8023016 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xc2>
 8022fd2:	2100      	movs	r1, #0
 8022fd4:	f04f 0e01 	mov.w	lr, #1
 8022fd8:	f8d0 c000 	ldr.w	ip, [r0]
 8022fdc:	b2a4      	uxth	r4, r4
 8022fde:	9106      	str	r1, [sp, #24]
 8022fe0:	b2b6      	uxth	r6, r6
 8022fe2:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8022fe6:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 8022fea:	e9cd e107 	strd	lr, r1, [sp, #28]
 8022fee:	f8b9 e000 	ldrh.w	lr, [r9]
 8022ff2:	9703      	str	r7, [sp, #12]
 8022ff4:	9401      	str	r4, [sp, #4]
 8022ff6:	9600      	str	r6, [sp, #0]
 8022ff8:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 8022ffc:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8023000:	9102      	str	r1, [sp, #8]
 8023002:	4629      	mov	r1, r5
 8023004:	f8dc 4040 	ldr.w	r4, [ip, #64]	; 0x40
 8023008:	47a0      	blx	r4
 802300a:	b00f      	add	sp, #60	; 0x3c
 802300c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8023010:	f010 0f01 	tst.w	r0, #1
 8023014:	e7da      	b.n	8022fcc <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x78>
 8023016:	6803      	ldr	r3, [r0, #0]
 8023018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802301a:	4798      	blx	r3
 802301c:	f8b9 1000 	ldrh.w	r1, [r9]
 8023020:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8023024:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 8023028:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 802302c:	434c      	muls	r4, r1
 802302e:	2fff      	cmp	r7, #255	; 0xff
 8023030:	fb01 2303 	mla	r3, r1, r3, r2
 8023034:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8023038:	eba1 0106 	sub.w	r1, r1, r6
 802303c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023040:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8023044:	4418      	add	r0, r3
 8023046:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 802304a:	eba3 0606 	sub.w	r6, r3, r6
 802304e:	4404      	add	r4, r0
 8023050:	ea4f 0646 	mov.w	r6, r6, lsl #1
 8023054:	d04a      	beq.n	80230ec <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x198>
 8023056:	43fa      	mvns	r2, r7
 8023058:	b2bb      	uxth	r3, r7
 802305a:	b2d7      	uxtb	r7, r2
 802305c:	42a0      	cmp	r0, r4
 802305e:	d263      	bcs.n	8023128 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 8023060:	eb00 0e0c 	add.w	lr, r0, ip
 8023064:	4586      	cmp	lr, r0
 8023066:	f100 0803 	add.w	r8, r0, #3
 802306a:	d93a      	bls.n	80230e2 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x18e>
 802306c:	f835 2b02 	ldrh.w	r2, [r5], #2
 8023070:	f818 9c03 	ldrb.w	r9, [r8, #-3]
 8023074:	00d0      	lsls	r0, r2, #3
 8023076:	fb19 f907 	smulbb	r9, r9, r7
 802307a:	b2c0      	uxtb	r0, r0
 802307c:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 8023080:	fb00 9003 	mla	r0, r0, r3, r9
 8023084:	b280      	uxth	r0, r0
 8023086:	f100 0901 	add.w	r9, r0, #1
 802308a:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 802308e:	f818 9c02 	ldrb.w	r9, [r8, #-2]
 8023092:	fb19 f907 	smulbb	r9, r9, r7
 8023096:	1200      	asrs	r0, r0, #8
 8023098:	f808 0c03 	strb.w	r0, [r8, #-3]
 802309c:	10d0      	asrs	r0, r2, #3
 802309e:	1212      	asrs	r2, r2, #8
 80230a0:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80230a4:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 80230a8:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 80230ac:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 80230b0:	fb00 9003 	mla	r0, r0, r3, r9
 80230b4:	b280      	uxth	r0, r0
 80230b6:	f100 0901 	add.w	r9, r0, #1
 80230ba:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 80230be:	1200      	asrs	r0, r0, #8
 80230c0:	f808 0c02 	strb.w	r0, [r8, #-2]
 80230c4:	f818 0c01 	ldrb.w	r0, [r8, #-1]
 80230c8:	fb10 f007 	smulbb	r0, r0, r7
 80230cc:	fb02 0203 	mla	r2, r2, r3, r0
 80230d0:	b292      	uxth	r2, r2
 80230d2:	1c50      	adds	r0, r2, #1
 80230d4:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 80230d8:	4640      	mov	r0, r8
 80230da:	1212      	asrs	r2, r2, #8
 80230dc:	f808 2c01 	strb.w	r2, [r8, #-1]
 80230e0:	e7c0      	b.n	8023064 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x110>
 80230e2:	4408      	add	r0, r1
 80230e4:	4435      	add	r5, r6
 80230e6:	e7b9      	b.n	802305c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x108>
 80230e8:	4408      	add	r0, r1
 80230ea:	4435      	add	r5, r6
 80230ec:	42a0      	cmp	r0, r4
 80230ee:	d21b      	bcs.n	8023128 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 80230f0:	eb00 070c 	add.w	r7, r0, ip
 80230f4:	42b8      	cmp	r0, r7
 80230f6:	d2f7      	bcs.n	80230e8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x194>
 80230f8:	f835 3b02 	ldrh.w	r3, [r5], #2
 80230fc:	3003      	adds	r0, #3
 80230fe:	00da      	lsls	r2, r3, #3
 8023100:	b2d2      	uxtb	r2, r2
 8023102:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8023106:	f800 2c03 	strb.w	r2, [r0, #-3]
 802310a:	10da      	asrs	r2, r3, #3
 802310c:	121b      	asrs	r3, r3, #8
 802310e:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8023112:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8023116:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 802311a:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 802311e:	f800 2c02 	strb.w	r2, [r0, #-2]
 8023122:	f800 3c01 	strb.w	r3, [r0, #-1]
 8023126:	e7e5      	b.n	80230f4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1a0>
 8023128:	4b02      	ldr	r3, [pc, #8]	; (8023134 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>)
 802312a:	6818      	ldr	r0, [r3, #0]
 802312c:	6803      	ldr	r3, [r0, #0]
 802312e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023130:	4798      	blx	r3
 8023132:	e76a      	b.n	802300a <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 8023134:	24006fec 	.word	0x24006fec
 8023138:	24006fe6 	.word	0x24006fe6

0802313c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 802313c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023140:	b08a      	sub	sp, #40	; 0x28
 8023142:	460d      	mov	r5, r1
 8023144:	4604      	mov	r4, r0
 8023146:	461e      	mov	r6, r3
 8023148:	6808      	ldr	r0, [r1, #0]
 802314a:	ab06      	add	r3, sp, #24
 802314c:	6849      	ldr	r1, [r1, #4]
 802314e:	4f5d      	ldr	r7, [pc, #372]	; (80232c4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 8023150:	c303      	stmia	r3!, {r0, r1}
 8023152:	6810      	ldr	r0, [r2, #0]
 8023154:	ab08      	add	r3, sp, #32
 8023156:	6851      	ldr	r1, [r2, #4]
 8023158:	c303      	stmia	r3!, {r0, r1}
 802315a:	a806      	add	r0, sp, #24
 802315c:	f7f9 fd86 	bl	801cc6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8023160:	4629      	mov	r1, r5
 8023162:	a808      	add	r0, sp, #32
 8023164:	f7f9 fdaa 	bl	801ccbc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8023168:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 802316c:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8023170:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8023174:	6838      	ldr	r0, [r7, #0]
 8023176:	fb11 2103 	smlabb	r1, r1, r3, r2
 802317a:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 802317e:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 8023182:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8023186:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 802318a:	440a      	add	r2, r1
 802318c:	f8ad 2020 	strh.w	r2, [sp, #32]
 8023190:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8023194:	4413      	add	r3, r2
 8023196:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 802319a:	6803      	ldr	r3, [r0, #0]
 802319c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802319e:	4798      	blx	r3
 80231a0:	2eff      	cmp	r6, #255	; 0xff
 80231a2:	d119      	bne.n	80231d8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 80231a4:	f010 0f20 	tst.w	r0, #32
 80231a8:	6838      	ldr	r0, [r7, #0]
 80231aa:	d018      	beq.n	80231de <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 80231ac:	b2ad      	uxth	r5, r5
 80231ae:	2700      	movs	r7, #0
 80231b0:	6801      	ldr	r1, [r0, #0]
 80231b2:	9501      	str	r5, [sp, #4]
 80231b4:	fa1f f588 	uxth.w	r5, r8
 80231b8:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 80231bc:	9500      	str	r5, [sp, #0]
 80231be:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80231c2:	e9cd 6703 	strd	r6, r7, [sp, #12]
 80231c6:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 80231ca:	9602      	str	r6, [sp, #8]
 80231cc:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 80231ce:	4621      	mov	r1, r4
 80231d0:	47a8      	blx	r5
 80231d2:	b00a      	add	sp, #40	; 0x28
 80231d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80231d8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80231dc:	e7e4      	b.n	80231a8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6c>
 80231de:	6803      	ldr	r3, [r0, #0]
 80231e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80231e2:	4798      	blx	r3
 80231e4:	4b38      	ldr	r3, [pc, #224]	; (80232c8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18c>)
 80231e6:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80231ea:	f8b3 c000 	ldrh.w	ip, [r3]
 80231ee:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 80231f2:	fb0c f505 	mul.w	r5, ip, r5
 80231f6:	f9bd e01c 	ldrsh.w	lr, [sp, #28]
 80231fa:	fb0c 2303 	mla	r3, ip, r3, r2
 80231fe:	ebac 0c08 	sub.w	ip, ip, r8
 8023202:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8023206:	ebae 0e08 	sub.w	lr, lr, r8
 802320a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802320e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8023212:	4418      	add	r0, r3
 8023214:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8023218:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 802321c:	4405      	add	r5, r0
 802321e:	42a8      	cmp	r0, r5
 8023220:	d24a      	bcs.n	80232b8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17c>
 8023222:	eb00 0803 	add.w	r8, r0, r3
 8023226:	4540      	cmp	r0, r8
 8023228:	d243      	bcs.n	80232b2 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x176>
 802322a:	78e2      	ldrb	r2, [r4, #3]
 802322c:	b15a      	cbz	r2, 8023246 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 802322e:	2aff      	cmp	r2, #255	; 0xff
 8023230:	f894 9000 	ldrb.w	r9, [r4]
 8023234:	d10a      	bne.n	802324c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 8023236:	2eff      	cmp	r6, #255	; 0xff
 8023238:	d108      	bne.n	802324c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 802323a:	f880 9000 	strb.w	r9, [r0]
 802323e:	7862      	ldrb	r2, [r4, #1]
 8023240:	7042      	strb	r2, [r0, #1]
 8023242:	78a2      	ldrb	r2, [r4, #2]
 8023244:	7082      	strb	r2, [r0, #2]
 8023246:	3003      	adds	r0, #3
 8023248:	3404      	adds	r4, #4
 802324a:	e7ec      	b.n	8023226 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xea>
 802324c:	4372      	muls	r2, r6
 802324e:	1c51      	adds	r1, r2, #1
 8023250:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 8023254:	1209      	asrs	r1, r1, #8
 8023256:	fa1f fa81 	uxth.w	sl, r1
 802325a:	43c9      	mvns	r1, r1
 802325c:	fb19 f90a 	smulbb	r9, r9, sl
 8023260:	b2ca      	uxtb	r2, r1
 8023262:	7801      	ldrb	r1, [r0, #0]
 8023264:	fb01 9902 	mla	r9, r1, r2, r9
 8023268:	fa1f f989 	uxth.w	r9, r9
 802326c:	f109 0101 	add.w	r1, r9, #1
 8023270:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 8023274:	ea4f 2929 	mov.w	r9, r9, asr #8
 8023278:	f880 9000 	strb.w	r9, [r0]
 802327c:	f890 9001 	ldrb.w	r9, [r0, #1]
 8023280:	7861      	ldrb	r1, [r4, #1]
 8023282:	fb19 f902 	smulbb	r9, r9, r2
 8023286:	fb01 910a 	mla	r1, r1, sl, r9
 802328a:	b289      	uxth	r1, r1
 802328c:	f101 0901 	add.w	r9, r1, #1
 8023290:	eb09 2111 	add.w	r1, r9, r1, lsr #8
 8023294:	1209      	asrs	r1, r1, #8
 8023296:	7041      	strb	r1, [r0, #1]
 8023298:	7881      	ldrb	r1, [r0, #2]
 802329a:	f894 9002 	ldrb.w	r9, [r4, #2]
 802329e:	fb11 f202 	smulbb	r2, r1, r2
 80232a2:	fb09 220a 	mla	r2, r9, sl, r2
 80232a6:	b292      	uxth	r2, r2
 80232a8:	1c51      	adds	r1, r2, #1
 80232aa:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80232ae:	1212      	asrs	r2, r2, #8
 80232b0:	e7c8      	b.n	8023244 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x108>
 80232b2:	4460      	add	r0, ip
 80232b4:	4474      	add	r4, lr
 80232b6:	e7b2      	b.n	802321e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xe2>
 80232b8:	6838      	ldr	r0, [r7, #0]
 80232ba:	6803      	ldr	r3, [r0, #0]
 80232bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80232be:	4798      	blx	r3
 80232c0:	e787      	b.n	80231d2 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 80232c2:	bf00      	nop
 80232c4:	24006fec 	.word	0x24006fec
 80232c8:	24006fe6 	.word	0x24006fe6

080232cc <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 80232cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80232d0:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 80232d4:	4607      	mov	r7, r0
 80232d6:	460c      	mov	r4, r1
 80232d8:	4692      	mov	sl, r2
 80232da:	4699      	mov	r9, r3
 80232dc:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80232de:	b31d      	cbz	r5, 8023328 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 80232e0:	4608      	mov	r0, r1
 80232e2:	f7fc fbdd 	bl	801faa0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80232e6:	4680      	mov	r8, r0
 80232e8:	4620      	mov	r0, r4
 80232ea:	f7fc fc0d 	bl	801fb08 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80232ee:	f8ad 000e 	strh.w	r0, [sp, #14]
 80232f2:	4620      	mov	r0, r4
 80232f4:	f8ad a008 	strh.w	sl, [sp, #8]
 80232f8:	f8ad 900a 	strh.w	r9, [sp, #10]
 80232fc:	f8ad 800c 	strh.w	r8, [sp, #12]
 8023300:	f7fc fcba 	bl	801fc78 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8023304:	280b      	cmp	r0, #11
 8023306:	d80f      	bhi.n	8023328 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8023308:	e8df f000 	tbb	[pc, r0]
 802330c:	0e062a21 	.word	0x0e062a21
 8023310:	0e0e0e0e 	.word	0x0e0e0e0e
 8023314:	110e0e0e 	.word	0x110e0e0e
 8023318:	4620      	mov	r0, r4
 802331a:	f7fc fc29 	bl	801fb70 <_ZNK8touchgfx6Bitmap7getDataEv>
 802331e:	462b      	mov	r3, r5
 8023320:	4632      	mov	r2, r6
 8023322:	a902      	add	r1, sp, #8
 8023324:	f7ff ff0a 	bl	802313c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8023328:	b004      	add	sp, #16
 802332a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802332e:	4620      	mov	r0, r4
 8023330:	f7fc fc1e 	bl	801fb70 <_ZNK8touchgfx6Bitmap7getDataEv>
 8023334:	4680      	mov	r8, r0
 8023336:	4620      	mov	r0, r4
 8023338:	f7fc fc4a 	bl	801fbd0 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 802333c:	ab02      	add	r3, sp, #8
 802333e:	4602      	mov	r2, r0
 8023340:	4641      	mov	r1, r8
 8023342:	4638      	mov	r0, r7
 8023344:	e9cd 6500 	strd	r6, r5, [sp]
 8023348:	f7ff fdc2 	bl	8022ed0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 802334c:	e7ec      	b.n	8023328 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 802334e:	4620      	mov	r0, r4
 8023350:	f7fc fc0e 	bl	801fb70 <_ZNK8touchgfx6Bitmap7getDataEv>
 8023354:	462b      	mov	r3, r5
 8023356:	4632      	mov	r2, r6
 8023358:	a902      	add	r1, sp, #8
 802335a:	f7ff fdfb 	bl	8022f54 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 802335e:	e7e3      	b.n	8023328 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8023360:	683b      	ldr	r3, [r7, #0]
 8023362:	4620      	mov	r0, r4
 8023364:	f8d3 800c 	ldr.w	r8, [r3, #12]
 8023368:	f7fc fc02 	bl	801fb70 <_ZNK8touchgfx6Bitmap7getDataEv>
 802336c:	2300      	movs	r3, #0
 802336e:	4601      	mov	r1, r0
 8023370:	aa02      	add	r2, sp, #8
 8023372:	4638      	mov	r0, r7
 8023374:	e9cd 5300 	strd	r5, r3, [sp]
 8023378:	4633      	mov	r3, r6
 802337a:	47c0      	blx	r8
 802337c:	e7d4      	b.n	8023328 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>

0802337e <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 802337e:	b4f0      	push	{r4, r5, r6, r7}
 8023380:	4616      	mov	r6, r2
 8023382:	461c      	mov	r4, r3
 8023384:	460d      	mov	r5, r1
 8023386:	9a04      	ldr	r2, [sp, #16]
 8023388:	2e01      	cmp	r6, #1
 802338a:	f89d 3014 	ldrb.w	r3, [sp, #20]
 802338e:	d00e      	beq.n	80233ae <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x30>
 8023390:	d303      	bcc.n	802339a <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x1c>
 8023392:	2e02      	cmp	r6, #2
 8023394:	d006      	beq.n	80233a4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x26>
 8023396:	bcf0      	pop	{r4, r5, r6, r7}
 8023398:	4770      	bx	lr
 802339a:	4621      	mov	r1, r4
 802339c:	4628      	mov	r0, r5
 802339e:	bcf0      	pop	{r4, r5, r6, r7}
 80233a0:	f7ff bdd8 	b.w	8022f54 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 80233a4:	4621      	mov	r1, r4
 80233a6:	4628      	mov	r0, r5
 80233a8:	bcf0      	pop	{r4, r5, r6, r7}
 80233aa:	f7ff bec7 	b.w	802313c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80233ae:	6805      	ldr	r5, [r0, #0]
 80233b0:	2600      	movs	r6, #0
 80233b2:	e9cd 3604 	strd	r3, r6, [sp, #16]
 80233b6:	68ed      	ldr	r5, [r5, #12]
 80233b8:	4613      	mov	r3, r2
 80233ba:	4622      	mov	r2, r4
 80233bc:	46ac      	mov	ip, r5
 80233be:	bcf0      	pop	{r4, r5, r6, r7}
 80233c0:	4760      	bx	ip
	...

080233c4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 80233c4:	b160      	cbz	r0, 80233e0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1c>
 80233c6:	2903      	cmp	r1, #3
 80233c8:	d818      	bhi.n	80233fc <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 80233ca:	e8df f001 	tbb	[pc, r1]
 80233ce:	1902      	.short	0x1902
 80233d0:	1b06      	.short	0x1b06
 80233d2:	4b0e      	ldr	r3, [pc, #56]	; (802340c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 80233d4:	8818      	ldrh	r0, [r3, #0]
 80233d6:	4240      	negs	r0, r0
 80233d8:	4770      	bx	lr
 80233da:	4b0c      	ldr	r3, [pc, #48]	; (802340c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 80233dc:	8818      	ldrh	r0, [r3, #0]
 80233de:	4770      	bx	lr
 80233e0:	2903      	cmp	r1, #3
 80233e2:	d80b      	bhi.n	80233fc <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 80233e4:	a301      	add	r3, pc, #4	; (adr r3, 80233ec <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x28>)
 80233e6:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 80233ea:	bf00      	nop
 80233ec:	08023401 	.word	0x08023401
 80233f0:	080233db 	.word	0x080233db
 80233f4:	08023405 	.word	0x08023405
 80233f8:	080233d3 	.word	0x080233d3
 80233fc:	2000      	movs	r0, #0
 80233fe:	4770      	bx	lr
 8023400:	2001      	movs	r0, #1
 8023402:	4770      	bx	lr
 8023404:	f04f 30ff 	mov.w	r0, #4294967295
 8023408:	4770      	bx	lr
 802340a:	bf00      	nop
 802340c:	24006fe6 	.word	0x24006fe6

08023410 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 8023410:	b160      	cbz	r0, 802342c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x1c>
 8023412:	2903      	cmp	r1, #3
 8023414:	d818      	bhi.n	8023448 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 8023416:	e8df f001 	tbb	[pc, r1]
 802341a:	0219      	.short	0x0219
 802341c:	051b      	.short	0x051b
 802341e:	4b0e      	ldr	r3, [pc, #56]	; (8023458 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 8023420:	8818      	ldrh	r0, [r3, #0]
 8023422:	4770      	bx	lr
 8023424:	4b0c      	ldr	r3, [pc, #48]	; (8023458 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 8023426:	8818      	ldrh	r0, [r3, #0]
 8023428:	4240      	negs	r0, r0
 802342a:	4770      	bx	lr
 802342c:	2903      	cmp	r1, #3
 802342e:	d80b      	bhi.n	8023448 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 8023430:	a301      	add	r3, pc, #4	; (adr r3, 8023438 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x28>)
 8023432:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8023436:	bf00      	nop
 8023438:	0802341f 	.word	0x0802341f
 802343c:	08023451 	.word	0x08023451
 8023440:	08023425 	.word	0x08023425
 8023444:	0802344d 	.word	0x0802344d
 8023448:	2000      	movs	r0, #0
 802344a:	4770      	bx	lr
 802344c:	2001      	movs	r0, #1
 802344e:	4770      	bx	lr
 8023450:	f04f 30ff 	mov.w	r0, #4294967295
 8023454:	4770      	bx	lr
 8023456:	bf00      	nop
 8023458:	24006fe6 	.word	0x24006fe6

0802345c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 802345c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023460:	b097      	sub	sp, #92	; 0x5c
 8023462:	910b      	str	r1, [sp, #44]	; 0x2c
 8023464:	a912      	add	r1, sp, #72	; 0x48
 8023466:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	; 0x80
 802346a:	f8bd 7088 	ldrh.w	r7, [sp, #136]	; 0x88
 802346e:	f8bd 408c 	ldrh.w	r4, [sp, #140]	; 0x8c
 8023472:	f89d 80a4 	ldrb.w	r8, [sp, #164]	; 0xa4
 8023476:	f89d 90ac 	ldrb.w	r9, [sp, #172]	; 0xac
 802347a:	e881 000c 	stmia.w	r1, {r2, r3}
 802347e:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	; 0x84
 8023482:	930a      	str	r3, [sp, #40]	; 0x28
 8023484:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 8023488:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	; 0x90
 802348c:	9311      	str	r3, [sp, #68]	; 0x44
 802348e:	f89d 30a8 	ldrb.w	r3, [sp, #168]	; 0xa8
 8023492:	798d      	ldrb	r5, [r1, #6]
 8023494:	930c      	str	r3, [sp, #48]	; 0x30
 8023496:	7b4b      	ldrb	r3, [r1, #13]
 8023498:	0158      	lsls	r0, r3, #5
 802349a:	f400 7080 	and.w	r0, r0, #256	; 0x100
 802349e:	4328      	orrs	r0, r5
 80234a0:	9009      	str	r0, [sp, #36]	; 0x24
 80234a2:	f000 817c 	beq.w	802379e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 80234a6:	011b      	lsls	r3, r3, #4
 80234a8:	79c8      	ldrb	r0, [r1, #7]
 80234aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80234ae:	4303      	orrs	r3, r0
 80234b0:	930e      	str	r3, [sp, #56]	; 0x38
 80234b2:	f000 8174 	beq.w	802379e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 80234b6:	f991 3009 	ldrsb.w	r3, [r1, #9]
 80234ba:	b29b      	uxth	r3, r3
 80234bc:	2f00      	cmp	r7, #0
 80234be:	f000 8116 	beq.w	80236ee <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x292>
 80234c2:	1aff      	subs	r7, r7, r3
 80234c4:	b2bf      	uxth	r7, r7
 80234c6:	043b      	lsls	r3, r7, #16
 80234c8:	d502      	bpl.n	80234d0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 80234ca:	1bf6      	subs	r6, r6, r7
 80234cc:	2700      	movs	r7, #0
 80234ce:	b236      	sxth	r6, r6
 80234d0:	f9b2 1000 	ldrsh.w	r1, [r2]
 80234d4:	a812      	add	r0, sp, #72	; 0x48
 80234d6:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 80234da:	428e      	cmp	r6, r1
 80234dc:	b28b      	uxth	r3, r1
 80234de:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 80234e2:	bfbf      	itttt	lt
 80234e4:	18ff      	addlt	r7, r7, r3
 80234e6:	1bbe      	sublt	r6, r7, r6
 80234e8:	b2b7      	uxthlt	r7, r6
 80234ea:	460e      	movlt	r6, r1
 80234ec:	8891      	ldrh	r1, [r2, #4]
 80234ee:	440b      	add	r3, r1
 80234f0:	4631      	mov	r1, r6
 80234f2:	b21b      	sxth	r3, r3
 80234f4:	9310      	str	r3, [sp, #64]	; 0x40
 80234f6:	88d3      	ldrh	r3, [r2, #6]
 80234f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80234fa:	449a      	add	sl, r3
 80234fc:	fa0f f38a 	sxth.w	r3, sl
 8023500:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 8023504:	930f      	str	r3, [sp, #60]	; 0x3c
 8023506:	4bb5      	ldr	r3, [pc, #724]	; (80237dc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 8023508:	f893 b000 	ldrb.w	fp, [r3]
 802350c:	f10b 3cff 	add.w	ip, fp, #4294967295
 8023510:	f1dc 0300 	rsbs	r3, ip, #0
 8023514:	eb43 030c 	adc.w	r3, r3, ip
 8023518:	930d      	str	r3, [sp, #52]	; 0x34
 802351a:	464b      	mov	r3, r9
 802351c:	f7f9 fa1b 	bl	801c956 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8023520:	4631      	mov	r1, r6
 8023522:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 8023526:	464b      	mov	r3, r9
 8023528:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802352a:	a812      	add	r0, sp, #72	; 0x48
 802352c:	f7f9 fa30 	bl	801c990 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8023530:	a916      	add	r1, sp, #88	; 0x58
 8023532:	f821 0d02 	strh.w	r0, [r1, #-2]!
 8023536:	a815      	add	r0, sp, #84	; 0x54
 8023538:	f7f9 fb56 	bl	801cbe8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 802353c:	f1b9 0f00 	cmp.w	r9, #0
 8023540:	f040 80d8 	bne.w	80236f4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x298>
 8023544:	f1bb 0f01 	cmp.w	fp, #1
 8023548:	f040 80dc 	bne.w	8023704 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 802354c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802354e:	b153      	cbz	r3, 8023566 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 8023550:	2508      	movs	r5, #8
 8023552:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023554:	fb95 f3f8 	sdiv	r3, r5, r8
 8023558:	1e5d      	subs	r5, r3, #1
 802355a:	4415      	add	r5, r2
 802355c:	fb95 f5f3 	sdiv	r5, r5, r3
 8023560:	fb15 f503 	smulbb	r5, r5, r3
 8023564:	b2ad      	uxth	r5, r5
 8023566:	b907      	cbnz	r7, 802356a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 8023568:	b16c      	cbz	r4, 8023586 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12a>
 802356a:	fb04 7305 	mla	r3, r4, r5, r7
 802356e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8023570:	ebaa 0a04 	sub.w	sl, sl, r4
 8023574:	fb08 f303 	mul.w	r3, r8, r3
 8023578:	fa1f fa8a 	uxth.w	sl, sl
 802357c:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 8023580:	f003 0407 	and.w	r4, r3, #7
 8023584:	9226      	str	r2, [sp, #152]	; 0x98
 8023586:	4649      	mov	r1, r9
 8023588:	980d      	ldr	r0, [sp, #52]	; 0x34
 802358a:	f7ff ff1b 	bl	80233c4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 802358e:	4683      	mov	fp, r0
 8023590:	980d      	ldr	r0, [sp, #52]	; 0x34
 8023592:	f7ff ff3d 	bl	8023410 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 8023596:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023598:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802359a:	4681      	mov	r9, r0
 802359c:	1a9b      	subs	r3, r3, r2
 802359e:	459a      	cmp	sl, r3
 80235a0:	bfa8      	it	ge
 80235a2:	469a      	movge	sl, r3
 80235a4:	f1ba 0f00 	cmp.w	sl, #0
 80235a8:	f340 80f9 	ble.w	802379e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 80235ac:	1bf6      	subs	r6, r6, r7
 80235ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80235b0:	1b9e      	subs	r6, r3, r6
 80235b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80235b4:	429e      	cmp	r6, r3
 80235b6:	bfd4      	ite	le
 80235b8:	ebc7 0706 	rsble	r7, r7, r6
 80235bc:	ebc7 0703 	rsbgt	r7, r7, r3
 80235c0:	2f00      	cmp	r7, #0
 80235c2:	f340 80ec 	ble.w	802379e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 80235c6:	1bed      	subs	r5, r5, r7
 80235c8:	fb08 f305 	mul.w	r3, r8, r5
 80235cc:	930d      	str	r3, [sp, #52]	; 0x34
 80235ce:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80235d0:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80235d4:	930e      	str	r3, [sp, #56]	; 0x38
 80235d6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80235d8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80235dc:	930f      	str	r3, [sp, #60]	; 0x3c
 80235de:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80235e0:	b2db      	uxtb	r3, r3
 80235e2:	9310      	str	r3, [sp, #64]	; 0x40
 80235e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80235e6:	2b00      	cmp	r3, #0
 80235e8:	f040 80de 	bne.w	80237a8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34c>
 80235ec:	4b7c      	ldr	r3, [pc, #496]	; (80237e0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 80235ee:	6818      	ldr	r0, [r3, #0]
 80235f0:	6803      	ldr	r3, [r0, #0]
 80235f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80235f4:	4798      	blx	r3
 80235f6:	2301      	movs	r3, #1
 80235f8:	4a7a      	ldr	r2, [pc, #488]	; (80237e4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 80235fa:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
 80235fe:	fb07 9b1b 	mls	fp, r7, fp, r9
 8023602:	fa03 f308 	lsl.w	r3, r3, r8
 8023606:	8811      	ldrh	r1, [r2, #0]
 8023608:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 802360c:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 8023610:	3b01      	subs	r3, #1
 8023612:	fb06 bb07 	mla	fp, r6, r7, fp
 8023616:	b2db      	uxtb	r3, r3
 8023618:	930a      	str	r3, [sp, #40]	; 0x28
 802361a:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 802361e:	fb01 2303 	mla	r3, r1, r3, r2
 8023622:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023626:	18c3      	adds	r3, r0, r3
 8023628:	9309      	str	r3, [sp, #36]	; 0x24
 802362a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802362c:	781a      	ldrb	r2, [r3, #0]
 802362e:	4122      	asrs	r2, r4
 8023630:	b2d2      	uxtb	r2, r2
 8023632:	f11a 3aff 	adds.w	sl, sl, #4294967295
 8023636:	f0c0 80d7 	bcc.w	80237e8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>
 802363a:	46be      	mov	lr, r7
 802363c:	9909      	ldr	r1, [sp, #36]	; 0x24
 802363e:	f11e 3eff 	adds.w	lr, lr, #4294967295
 8023642:	f0c0 80ba 	bcc.w	80237ba <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x35e>
 8023646:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023648:	4013      	ands	r3, r2
 802364a:	d041      	beq.n	80236d0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 802364c:	20ff      	movs	r0, #255	; 0xff
 802364e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8023650:	fb90 f5f5 	sdiv	r5, r0, r5
 8023654:	436b      	muls	r3, r5
 8023656:	2bfe      	cmp	r3, #254	; 0xfe
 8023658:	dd03      	ble.n	8023662 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x206>
 802365a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802365c:	4285      	cmp	r5, r0
 802365e:	f000 80a5 	beq.w	80237ac <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x350>
 8023662:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8023664:	9810      	ldr	r0, [sp, #64]	; 0x40
 8023666:	fb15 f303 	smulbb	r3, r5, r3
 802366a:	b29b      	uxth	r3, r3
 802366c:	1c5d      	adds	r5, r3, #1
 802366e:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 8023672:	780d      	ldrb	r5, [r1, #0]
 8023674:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023678:	fa1f fc83 	uxth.w	ip, r3
 802367c:	43db      	mvns	r3, r3
 802367e:	fb10 f90c 	smulbb	r9, r0, ip
 8023682:	b2db      	uxtb	r3, r3
 8023684:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8023686:	fb05 9503 	mla	r5, r5, r3, r9
 802368a:	b2ad      	uxth	r5, r5
 802368c:	f105 0901 	add.w	r9, r5, #1
 8023690:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 8023694:	fb10 f90c 	smulbb	r9, r0, ip
 8023698:	980e      	ldr	r0, [sp, #56]	; 0x38
 802369a:	122d      	asrs	r5, r5, #8
 802369c:	fb10 fc0c 	smulbb	ip, r0, ip
 80236a0:	700d      	strb	r5, [r1, #0]
 80236a2:	784d      	ldrb	r5, [r1, #1]
 80236a4:	fb05 9503 	mla	r5, r5, r3, r9
 80236a8:	b2ad      	uxth	r5, r5
 80236aa:	f105 0901 	add.w	r9, r5, #1
 80236ae:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 80236b2:	122d      	asrs	r5, r5, #8
 80236b4:	704d      	strb	r5, [r1, #1]
 80236b6:	788d      	ldrb	r5, [r1, #2]
 80236b8:	fb05 cc03 	mla	ip, r5, r3, ip
 80236bc:	fa1f fc8c 	uxth.w	ip, ip
 80236c0:	f10c 0301 	add.w	r3, ip, #1
 80236c4:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 80236c8:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80236cc:	f881 c002 	strb.w	ip, [r1, #2]
 80236d0:	4444      	add	r4, r8
 80236d2:	4431      	add	r1, r6
 80236d4:	b2a4      	uxth	r4, r4
 80236d6:	2c07      	cmp	r4, #7
 80236d8:	bf89      	itett	hi
 80236da:	9b26      	ldrhi	r3, [sp, #152]	; 0x98
 80236dc:	fa42 f208 	asrls.w	r2, r2, r8
 80236e0:	2400      	movhi	r4, #0
 80236e2:	785a      	ldrbhi	r2, [r3, #1]
 80236e4:	bf8a      	itet	hi
 80236e6:	3301      	addhi	r3, #1
 80236e8:	b2d2      	uxtbls	r2, r2
 80236ea:	9326      	strhi	r3, [sp, #152]	; 0x98
 80236ec:	e7a7      	b.n	802363e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e2>
 80236ee:	441e      	add	r6, r3
 80236f0:	b236      	sxth	r6, r6
 80236f2:	e6ed      	b.n	80234d0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 80236f4:	f1b9 0f01 	cmp.w	r9, #1
 80236f8:	f47f af28 	bne.w	802354c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80236fc:	f1bb 0f01 	cmp.w	fp, #1
 8023700:	f47f af24 	bne.w	802354c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8023704:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 80237e0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>
 8023708:	f8db 0000 	ldr.w	r0, [fp]
 802370c:	6803      	ldr	r3, [r0, #0]
 802370e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023710:	4798      	blx	r3
 8023712:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 8023716:	465a      	mov	r2, fp
 8023718:	d006      	beq.n	8023728 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 802371a:	f1b8 0f04 	cmp.w	r8, #4
 802371e:	d141      	bne.n	80237a4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x348>
 8023720:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8023722:	3300      	adds	r3, #0
 8023724:	bf18      	it	ne
 8023726:	2301      	movne	r3, #1
 8023728:	0580      	lsls	r0, r0, #22
 802372a:	d566      	bpl.n	80237fa <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 802372c:	f1b8 0f08 	cmp.w	r8, #8
 8023730:	d163      	bne.n	80237fa <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 8023732:	2b00      	cmp	r3, #0
 8023734:	bf0c      	ite	eq
 8023736:	f44f 7100 	moveq.w	r1, #512	; 0x200
 802373a:	f44f 7180 	movne.w	r1, #256	; 0x100
 802373e:	2f00      	cmp	r7, #0
 8023740:	f47f af04 	bne.w	802354c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8023744:	2c00      	cmp	r4, #0
 8023746:	f47f af01 	bne.w	802354c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 802374a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802374c:	9810      	ldr	r0, [sp, #64]	; 0x40
 802374e:	18f3      	adds	r3, r6, r3
 8023750:	4283      	cmp	r3, r0
 8023752:	f73f aefb 	bgt.w	802354c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8023756:	980a      	ldr	r0, [sp, #40]	; 0x28
 8023758:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802375a:	4403      	add	r3, r0
 802375c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 802375e:	4283      	cmp	r3, r0
 8023760:	f73f aef4 	bgt.w	802354c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8023764:	f1b8 0f08 	cmp.w	r8, #8
 8023768:	6810      	ldr	r0, [r2, #0]
 802376a:	f04f 0600 	mov.w	r6, #0
 802376e:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 8023772:	bf18      	it	ne
 8023774:	3501      	addne	r5, #1
 8023776:	6804      	ldr	r4, [r0, #0]
 8023778:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 802377c:	bf18      	it	ne
 802377e:	f025 0501 	bicne.w	r5, r5, #1
 8023782:	e9cd 1605 	strd	r1, r6, [sp, #20]
 8023786:	990c      	ldr	r1, [sp, #48]	; 0x30
 8023788:	bf18      	it	ne
 802378a:	b2ad      	uxthne	r5, r5
 802378c:	9104      	str	r1, [sp, #16]
 802378e:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8023790:	e9cd 5a00 	strd	r5, sl, [sp]
 8023794:	e9cd 5102 	strd	r5, r1, [sp, #8]
 8023798:	9926      	ldr	r1, [sp, #152]	; 0x98
 802379a:	6d64      	ldr	r4, [r4, #84]	; 0x54
 802379c:	47a0      	blx	r4
 802379e:	b017      	add	sp, #92	; 0x5c
 80237a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80237a4:	2300      	movs	r3, #0
 80237a6:	e7bf      	b.n	8023728 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 80237a8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80237aa:	e724      	b.n	80235f6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x19a>
 80237ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80237ae:	700b      	strb	r3, [r1, #0]
 80237b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80237b2:	704b      	strb	r3, [r1, #1]
 80237b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80237b6:	708b      	strb	r3, [r1, #2]
 80237b8:	e78a      	b.n	80236d0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 80237ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80237bc:	b153      	cbz	r3, 80237d4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 80237be:	441c      	add	r4, r3
 80237c0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80237c2:	b2a4      	uxth	r4, r4
 80237c4:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 80237c8:	f004 0407 	and.w	r4, r4, #7
 80237cc:	781a      	ldrb	r2, [r3, #0]
 80237ce:	9326      	str	r3, [sp, #152]	; 0x98
 80237d0:	4122      	asrs	r2, r4
 80237d2:	b2d2      	uxtb	r2, r2
 80237d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80237d6:	445b      	add	r3, fp
 80237d8:	9309      	str	r3, [sp, #36]	; 0x24
 80237da:	e72a      	b.n	8023632 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d6>
 80237dc:	24006fe4 	.word	0x24006fe4
 80237e0:	24006fec 	.word	0x24006fec
 80237e4:	24006fe6 	.word	0x24006fe6
 80237e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80237ea:	2b00      	cmp	r3, #0
 80237ec:	d1d7      	bne.n	802379e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 80237ee:	4b06      	ldr	r3, [pc, #24]	; (8023808 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 80237f0:	6818      	ldr	r0, [r3, #0]
 80237f2:	6803      	ldr	r3, [r0, #0]
 80237f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80237f6:	4798      	blx	r3
 80237f8:	e7d1      	b.n	802379e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 80237fa:	2b00      	cmp	r3, #0
 80237fc:	f43f aea6 	beq.w	802354c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8023800:	f44f 7180 	mov.w	r1, #256	; 0x100
 8023804:	e79b      	b.n	802373e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 8023806:	bf00      	nop
 8023808:	24006fec 	.word	0x24006fec

0802380c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 802380c:	b538      	push	{r3, r4, r5, lr}
 802380e:	4c15      	ldr	r4, [pc, #84]	; (8023864 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 8023810:	4605      	mov	r5, r0
 8023812:	7823      	ldrb	r3, [r4, #0]
 8023814:	f3bf 8f5b 	dmb	ish
 8023818:	07da      	lsls	r2, r3, #31
 802381a:	d40b      	bmi.n	8023834 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 802381c:	4620      	mov	r0, r4
 802381e:	f005 fb4c 	bl	8028eba <__cxa_guard_acquire>
 8023822:	b138      	cbz	r0, 8023834 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8023824:	4620      	mov	r0, r4
 8023826:	f005 fb54 	bl	8028ed2 <__cxa_guard_release>
 802382a:	4a0f      	ldr	r2, [pc, #60]	; (8023868 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 802382c:	490f      	ldr	r1, [pc, #60]	; (802386c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 802382e:	4810      	ldr	r0, [pc, #64]	; (8023870 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8023830:	f005 fb3c 	bl	8028eac <__aeabi_atexit>
 8023834:	4c0f      	ldr	r4, [pc, #60]	; (8023874 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 8023836:	7823      	ldrb	r3, [r4, #0]
 8023838:	f3bf 8f5b 	dmb	ish
 802383c:	07db      	lsls	r3, r3, #31
 802383e:	d40b      	bmi.n	8023858 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8023840:	4620      	mov	r0, r4
 8023842:	f005 fb3a 	bl	8028eba <__cxa_guard_acquire>
 8023846:	b138      	cbz	r0, 8023858 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8023848:	4620      	mov	r0, r4
 802384a:	f005 fb42 	bl	8028ed2 <__cxa_guard_release>
 802384e:	4a06      	ldr	r2, [pc, #24]	; (8023868 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8023850:	4909      	ldr	r1, [pc, #36]	; (8023878 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 8023852:	480a      	ldr	r0, [pc, #40]	; (802387c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8023854:	f005 fb2a 	bl	8028eac <__aeabi_atexit>
 8023858:	4b05      	ldr	r3, [pc, #20]	; (8023870 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 802385a:	612b      	str	r3, [r5, #16]
 802385c:	4b07      	ldr	r3, [pc, #28]	; (802387c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 802385e:	616b      	str	r3, [r5, #20]
 8023860:	bd38      	pop	{r3, r4, r5, pc}
 8023862:	bf00      	nop
 8023864:	240070c4 	.word	0x240070c4
 8023868:	24000000 	.word	0x24000000
 802386c:	08021655 	.word	0x08021655
 8023870:	240000a0 	.word	0x240000a0
 8023874:	240070c8 	.word	0x240070c8
 8023878:	08021653 	.word	0x08021653
 802387c:	240000a4 	.word	0x240000a4

08023880 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 8023880:	b538      	push	{r3, r4, r5, lr}
 8023882:	4c15      	ldr	r4, [pc, #84]	; (80238d8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 8023884:	4605      	mov	r5, r0
 8023886:	7823      	ldrb	r3, [r4, #0]
 8023888:	f3bf 8f5b 	dmb	ish
 802388c:	07da      	lsls	r2, r3, #31
 802388e:	d40b      	bmi.n	80238a8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8023890:	4620      	mov	r0, r4
 8023892:	f005 fb12 	bl	8028eba <__cxa_guard_acquire>
 8023896:	b138      	cbz	r0, 80238a8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8023898:	4620      	mov	r0, r4
 802389a:	f005 fb1a 	bl	8028ed2 <__cxa_guard_release>
 802389e:	4a0f      	ldr	r2, [pc, #60]	; (80238dc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 80238a0:	490f      	ldr	r1, [pc, #60]	; (80238e0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 80238a2:	4810      	ldr	r0, [pc, #64]	; (80238e4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 80238a4:	f005 fb02 	bl	8028eac <__aeabi_atexit>
 80238a8:	4c0f      	ldr	r4, [pc, #60]	; (80238e8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 80238aa:	7823      	ldrb	r3, [r4, #0]
 80238ac:	f3bf 8f5b 	dmb	ish
 80238b0:	07db      	lsls	r3, r3, #31
 80238b2:	d40b      	bmi.n	80238cc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 80238b4:	4620      	mov	r0, r4
 80238b6:	f005 fb00 	bl	8028eba <__cxa_guard_acquire>
 80238ba:	b138      	cbz	r0, 80238cc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 80238bc:	4620      	mov	r0, r4
 80238be:	f005 fb08 	bl	8028ed2 <__cxa_guard_release>
 80238c2:	4a06      	ldr	r2, [pc, #24]	; (80238dc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 80238c4:	4909      	ldr	r1, [pc, #36]	; (80238ec <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 80238c6:	480a      	ldr	r0, [pc, #40]	; (80238f0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 80238c8:	f005 faf0 	bl	8028eac <__aeabi_atexit>
 80238cc:	4b05      	ldr	r3, [pc, #20]	; (80238e4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 80238ce:	60ab      	str	r3, [r5, #8]
 80238d0:	4b07      	ldr	r3, [pc, #28]	; (80238f0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 80238d2:	60eb      	str	r3, [r5, #12]
 80238d4:	bd38      	pop	{r3, r4, r5, pc}
 80238d6:	bf00      	nop
 80238d8:	240070a4 	.word	0x240070a4
 80238dc:	24000000 	.word	0x24000000
 80238e0:	08021659 	.word	0x08021659
 80238e4:	24000080 	.word	0x24000080
 80238e8:	240070a8 	.word	0x240070a8
 80238ec:	08021657 	.word	0x08021657
 80238f0:	24000084 	.word	0x24000084

080238f4 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 80238f4:	b510      	push	{r4, lr}
 80238f6:	4604      	mov	r4, r0
 80238f8:	f7ff ff88 	bl	802380c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 80238fc:	4620      	mov	r0, r4
 80238fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023902:	f7ff bfbd 	b.w	8023880 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

08023908 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 8023908:	b538      	push	{r3, r4, r5, lr}
 802390a:	4c15      	ldr	r4, [pc, #84]	; (8023960 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 802390c:	4605      	mov	r5, r0
 802390e:	7823      	ldrb	r3, [r4, #0]
 8023910:	f3bf 8f5b 	dmb	ish
 8023914:	07da      	lsls	r2, r3, #31
 8023916:	d40b      	bmi.n	8023930 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8023918:	4620      	mov	r0, r4
 802391a:	f005 face 	bl	8028eba <__cxa_guard_acquire>
 802391e:	b138      	cbz	r0, 8023930 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8023920:	4620      	mov	r0, r4
 8023922:	f005 fad6 	bl	8028ed2 <__cxa_guard_release>
 8023926:	4a0f      	ldr	r2, [pc, #60]	; (8023964 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8023928:	490f      	ldr	r1, [pc, #60]	; (8023968 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 802392a:	4810      	ldr	r0, [pc, #64]	; (802396c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 802392c:	f005 fabe 	bl	8028eac <__aeabi_atexit>
 8023930:	4c0f      	ldr	r4, [pc, #60]	; (8023970 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 8023932:	7823      	ldrb	r3, [r4, #0]
 8023934:	f3bf 8f5b 	dmb	ish
 8023938:	07db      	lsls	r3, r3, #31
 802393a:	d40b      	bmi.n	8023954 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 802393c:	4620      	mov	r0, r4
 802393e:	f005 fabc 	bl	8028eba <__cxa_guard_acquire>
 8023942:	b138      	cbz	r0, 8023954 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8023944:	4620      	mov	r0, r4
 8023946:	f005 fac4 	bl	8028ed2 <__cxa_guard_release>
 802394a:	4a06      	ldr	r2, [pc, #24]	; (8023964 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 802394c:	4909      	ldr	r1, [pc, #36]	; (8023974 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 802394e:	480a      	ldr	r0, [pc, #40]	; (8023978 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8023950:	f005 faac 	bl	8028eac <__aeabi_atexit>
 8023954:	4b05      	ldr	r3, [pc, #20]	; (802396c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8023956:	622b      	str	r3, [r5, #32]
 8023958:	4b07      	ldr	r3, [pc, #28]	; (8023978 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 802395a:	626b      	str	r3, [r5, #36]	; 0x24
 802395c:	bd38      	pop	{r3, r4, r5, pc}
 802395e:	bf00      	nop
 8023960:	240070cc 	.word	0x240070cc
 8023964:	24000000 	.word	0x24000000
 8023968:	0802164d 	.word	0x0802164d
 802396c:	240000a8 	.word	0x240000a8
 8023970:	240070d0 	.word	0x240070d0
 8023974:	0802164b 	.word	0x0802164b
 8023978:	240000ac 	.word	0x240000ac

0802397c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 802397c:	b538      	push	{r3, r4, r5, lr}
 802397e:	4c15      	ldr	r4, [pc, #84]	; (80239d4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 8023980:	4605      	mov	r5, r0
 8023982:	7823      	ldrb	r3, [r4, #0]
 8023984:	f3bf 8f5b 	dmb	ish
 8023988:	07da      	lsls	r2, r3, #31
 802398a:	d40b      	bmi.n	80239a4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 802398c:	4620      	mov	r0, r4
 802398e:	f005 fa94 	bl	8028eba <__cxa_guard_acquire>
 8023992:	b138      	cbz	r0, 80239a4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8023994:	4620      	mov	r0, r4
 8023996:	f005 fa9c 	bl	8028ed2 <__cxa_guard_release>
 802399a:	4a0f      	ldr	r2, [pc, #60]	; (80239d8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 802399c:	490f      	ldr	r1, [pc, #60]	; (80239dc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 802399e:	4810      	ldr	r0, [pc, #64]	; (80239e0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 80239a0:	f005 fa84 	bl	8028eac <__aeabi_atexit>
 80239a4:	4c0f      	ldr	r4, [pc, #60]	; (80239e4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 80239a6:	7823      	ldrb	r3, [r4, #0]
 80239a8:	f3bf 8f5b 	dmb	ish
 80239ac:	07db      	lsls	r3, r3, #31
 80239ae:	d40b      	bmi.n	80239c8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 80239b0:	4620      	mov	r0, r4
 80239b2:	f005 fa82 	bl	8028eba <__cxa_guard_acquire>
 80239b6:	b138      	cbz	r0, 80239c8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 80239b8:	4620      	mov	r0, r4
 80239ba:	f005 fa8a 	bl	8028ed2 <__cxa_guard_release>
 80239be:	4a06      	ldr	r2, [pc, #24]	; (80239d8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 80239c0:	4909      	ldr	r1, [pc, #36]	; (80239e8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 80239c2:	480a      	ldr	r0, [pc, #40]	; (80239ec <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 80239c4:	f005 fa72 	bl	8028eac <__aeabi_atexit>
 80239c8:	4b05      	ldr	r3, [pc, #20]	; (80239e0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 80239ca:	61ab      	str	r3, [r5, #24]
 80239cc:	4b07      	ldr	r3, [pc, #28]	; (80239ec <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 80239ce:	61eb      	str	r3, [r5, #28]
 80239d0:	bd38      	pop	{r3, r4, r5, pc}
 80239d2:	bf00      	nop
 80239d4:	240070ac 	.word	0x240070ac
 80239d8:	24000000 	.word	0x24000000
 80239dc:	08021651 	.word	0x08021651
 80239e0:	24000088 	.word	0x24000088
 80239e4:	240070b0 	.word	0x240070b0
 80239e8:	0802164f 	.word	0x0802164f
 80239ec:	2400008c 	.word	0x2400008c

080239f0 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 80239f0:	b510      	push	{r4, lr}
 80239f2:	4604      	mov	r4, r0
 80239f4:	f7ff ff88 	bl	8023908 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 80239f8:	4620      	mov	r0, r4
 80239fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80239fe:	f7ff bfbd 	b.w	802397c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

08023a04 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 8023a04:	b538      	push	{r3, r4, r5, lr}
 8023a06:	4c15      	ldr	r4, [pc, #84]	; (8023a5c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 8023a08:	4605      	mov	r5, r0
 8023a0a:	7823      	ldrb	r3, [r4, #0]
 8023a0c:	f3bf 8f5b 	dmb	ish
 8023a10:	07da      	lsls	r2, r3, #31
 8023a12:	d40b      	bmi.n	8023a2c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 8023a14:	4620      	mov	r0, r4
 8023a16:	f005 fa50 	bl	8028eba <__cxa_guard_acquire>
 8023a1a:	b138      	cbz	r0, 8023a2c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 8023a1c:	4620      	mov	r0, r4
 8023a1e:	f005 fa58 	bl	8028ed2 <__cxa_guard_release>
 8023a22:	4a0f      	ldr	r2, [pc, #60]	; (8023a60 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8023a24:	490f      	ldr	r1, [pc, #60]	; (8023a64 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 8023a26:	4810      	ldr	r0, [pc, #64]	; (8023a68 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8023a28:	f005 fa40 	bl	8028eac <__aeabi_atexit>
 8023a2c:	4c0f      	ldr	r4, [pc, #60]	; (8023a6c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 8023a2e:	7823      	ldrb	r3, [r4, #0]
 8023a30:	f3bf 8f5b 	dmb	ish
 8023a34:	07db      	lsls	r3, r3, #31
 8023a36:	d40b      	bmi.n	8023a50 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8023a38:	4620      	mov	r0, r4
 8023a3a:	f005 fa3e 	bl	8028eba <__cxa_guard_acquire>
 8023a3e:	b138      	cbz	r0, 8023a50 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8023a40:	4620      	mov	r0, r4
 8023a42:	f005 fa46 	bl	8028ed2 <__cxa_guard_release>
 8023a46:	4a06      	ldr	r2, [pc, #24]	; (8023a60 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8023a48:	4909      	ldr	r1, [pc, #36]	; (8023a70 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 8023a4a:	480a      	ldr	r0, [pc, #40]	; (8023a74 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8023a4c:	f005 fa2e 	bl	8028eac <__aeabi_atexit>
 8023a50:	4b05      	ldr	r3, [pc, #20]	; (8023a68 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8023a52:	632b      	str	r3, [r5, #48]	; 0x30
 8023a54:	4b07      	ldr	r3, [pc, #28]	; (8023a74 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8023a56:	636b      	str	r3, [r5, #52]	; 0x34
 8023a58:	bd38      	pop	{r3, r4, r5, pc}
 8023a5a:	bf00      	nop
 8023a5c:	240070b4 	.word	0x240070b4
 8023a60:	24000000 	.word	0x24000000
 8023a64:	08021645 	.word	0x08021645
 8023a68:	24000090 	.word	0x24000090
 8023a6c:	240070b8 	.word	0x240070b8
 8023a70:	08021643 	.word	0x08021643
 8023a74:	24000094 	.word	0x24000094

08023a78 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 8023a78:	b538      	push	{r3, r4, r5, lr}
 8023a7a:	4c15      	ldr	r4, [pc, #84]	; (8023ad0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 8023a7c:	4605      	mov	r5, r0
 8023a7e:	7823      	ldrb	r3, [r4, #0]
 8023a80:	f3bf 8f5b 	dmb	ish
 8023a84:	07da      	lsls	r2, r3, #31
 8023a86:	d40b      	bmi.n	8023aa0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8023a88:	4620      	mov	r0, r4
 8023a8a:	f005 fa16 	bl	8028eba <__cxa_guard_acquire>
 8023a8e:	b138      	cbz	r0, 8023aa0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8023a90:	4620      	mov	r0, r4
 8023a92:	f005 fa1e 	bl	8028ed2 <__cxa_guard_release>
 8023a96:	4a0f      	ldr	r2, [pc, #60]	; (8023ad4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8023a98:	490f      	ldr	r1, [pc, #60]	; (8023ad8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 8023a9a:	4810      	ldr	r0, [pc, #64]	; (8023adc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8023a9c:	f005 fa06 	bl	8028eac <__aeabi_atexit>
 8023aa0:	4c0f      	ldr	r4, [pc, #60]	; (8023ae0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 8023aa2:	7823      	ldrb	r3, [r4, #0]
 8023aa4:	f3bf 8f5b 	dmb	ish
 8023aa8:	07db      	lsls	r3, r3, #31
 8023aaa:	d40b      	bmi.n	8023ac4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8023aac:	4620      	mov	r0, r4
 8023aae:	f005 fa04 	bl	8028eba <__cxa_guard_acquire>
 8023ab2:	b138      	cbz	r0, 8023ac4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8023ab4:	4620      	mov	r0, r4
 8023ab6:	f005 fa0c 	bl	8028ed2 <__cxa_guard_release>
 8023aba:	4a06      	ldr	r2, [pc, #24]	; (8023ad4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8023abc:	4909      	ldr	r1, [pc, #36]	; (8023ae4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 8023abe:	480a      	ldr	r0, [pc, #40]	; (8023ae8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8023ac0:	f005 f9f4 	bl	8028eac <__aeabi_atexit>
 8023ac4:	4b05      	ldr	r3, [pc, #20]	; (8023adc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8023ac6:	62ab      	str	r3, [r5, #40]	; 0x28
 8023ac8:	4b07      	ldr	r3, [pc, #28]	; (8023ae8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8023aca:	62eb      	str	r3, [r5, #44]	; 0x2c
 8023acc:	bd38      	pop	{r3, r4, r5, pc}
 8023ace:	bf00      	nop
 8023ad0:	2400708c 	.word	0x2400708c
 8023ad4:	24000000 	.word	0x24000000
 8023ad8:	08021649 	.word	0x08021649
 8023adc:	24000068 	.word	0x24000068
 8023ae0:	24007090 	.word	0x24007090
 8023ae4:	08021647 	.word	0x08021647
 8023ae8:	2400006c 	.word	0x2400006c

08023aec <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 8023aec:	b510      	push	{r4, lr}
 8023aee:	4604      	mov	r4, r0
 8023af0:	f7ff ff88 	bl	8023a04 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 8023af4:	4620      	mov	r0, r4
 8023af6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023afa:	f7ff bfbd 	b.w	8023a78 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

08023b00 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 8023b00:	b538      	push	{r3, r4, r5, lr}
 8023b02:	4c15      	ldr	r4, [pc, #84]	; (8023b58 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 8023b04:	4605      	mov	r5, r0
 8023b06:	7823      	ldrb	r3, [r4, #0]
 8023b08:	f3bf 8f5b 	dmb	ish
 8023b0c:	07da      	lsls	r2, r3, #31
 8023b0e:	d40b      	bmi.n	8023b28 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8023b10:	4620      	mov	r0, r4
 8023b12:	f005 f9d2 	bl	8028eba <__cxa_guard_acquire>
 8023b16:	b138      	cbz	r0, 8023b28 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8023b18:	4620      	mov	r0, r4
 8023b1a:	f005 f9da 	bl	8028ed2 <__cxa_guard_release>
 8023b1e:	4a0f      	ldr	r2, [pc, #60]	; (8023b5c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8023b20:	490f      	ldr	r1, [pc, #60]	; (8023b60 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 8023b22:	4810      	ldr	r0, [pc, #64]	; (8023b64 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8023b24:	f005 f9c2 	bl	8028eac <__aeabi_atexit>
 8023b28:	4c0f      	ldr	r4, [pc, #60]	; (8023b68 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 8023b2a:	7823      	ldrb	r3, [r4, #0]
 8023b2c:	f3bf 8f5b 	dmb	ish
 8023b30:	07db      	lsls	r3, r3, #31
 8023b32:	d40b      	bmi.n	8023b4c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8023b34:	4620      	mov	r0, r4
 8023b36:	f005 f9c0 	bl	8028eba <__cxa_guard_acquire>
 8023b3a:	b138      	cbz	r0, 8023b4c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8023b3c:	4620      	mov	r0, r4
 8023b3e:	f005 f9c8 	bl	8028ed2 <__cxa_guard_release>
 8023b42:	4a06      	ldr	r2, [pc, #24]	; (8023b5c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8023b44:	4909      	ldr	r1, [pc, #36]	; (8023b6c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 8023b46:	480a      	ldr	r0, [pc, #40]	; (8023b70 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8023b48:	f005 f9b0 	bl	8028eac <__aeabi_atexit>
 8023b4c:	4b05      	ldr	r3, [pc, #20]	; (8023b64 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8023b4e:	642b      	str	r3, [r5, #64]	; 0x40
 8023b50:	4b07      	ldr	r3, [pc, #28]	; (8023b70 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8023b52:	646b      	str	r3, [r5, #68]	; 0x44
 8023b54:	bd38      	pop	{r3, r4, r5, pc}
 8023b56:	bf00      	nop
 8023b58:	240070bc 	.word	0x240070bc
 8023b5c:	24000000 	.word	0x24000000
 8023b60:	0802163d 	.word	0x0802163d
 8023b64:	24000098 	.word	0x24000098
 8023b68:	240070c0 	.word	0x240070c0
 8023b6c:	0802163b 	.word	0x0802163b
 8023b70:	2400009c 	.word	0x2400009c

08023b74 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8023b74:	b538      	push	{r3, r4, r5, lr}
 8023b76:	4c15      	ldr	r4, [pc, #84]	; (8023bcc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 8023b78:	4605      	mov	r5, r0
 8023b7a:	7823      	ldrb	r3, [r4, #0]
 8023b7c:	f3bf 8f5b 	dmb	ish
 8023b80:	07da      	lsls	r2, r3, #31
 8023b82:	d40b      	bmi.n	8023b9c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8023b84:	4620      	mov	r0, r4
 8023b86:	f005 f998 	bl	8028eba <__cxa_guard_acquire>
 8023b8a:	b138      	cbz	r0, 8023b9c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8023b8c:	4620      	mov	r0, r4
 8023b8e:	f005 f9a0 	bl	8028ed2 <__cxa_guard_release>
 8023b92:	4a0f      	ldr	r2, [pc, #60]	; (8023bd0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8023b94:	490f      	ldr	r1, [pc, #60]	; (8023bd4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 8023b96:	4810      	ldr	r0, [pc, #64]	; (8023bd8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8023b98:	f005 f988 	bl	8028eac <__aeabi_atexit>
 8023b9c:	4c0f      	ldr	r4, [pc, #60]	; (8023bdc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 8023b9e:	7823      	ldrb	r3, [r4, #0]
 8023ba0:	f3bf 8f5b 	dmb	ish
 8023ba4:	07db      	lsls	r3, r3, #31
 8023ba6:	d40b      	bmi.n	8023bc0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8023ba8:	4620      	mov	r0, r4
 8023baa:	f005 f986 	bl	8028eba <__cxa_guard_acquire>
 8023bae:	b138      	cbz	r0, 8023bc0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8023bb0:	4620      	mov	r0, r4
 8023bb2:	f005 f98e 	bl	8028ed2 <__cxa_guard_release>
 8023bb6:	4a06      	ldr	r2, [pc, #24]	; (8023bd0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8023bb8:	4909      	ldr	r1, [pc, #36]	; (8023be0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 8023bba:	480a      	ldr	r0, [pc, #40]	; (8023be4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8023bbc:	f005 f976 	bl	8028eac <__aeabi_atexit>
 8023bc0:	4b05      	ldr	r3, [pc, #20]	; (8023bd8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8023bc2:	63ab      	str	r3, [r5, #56]	; 0x38
 8023bc4:	4b07      	ldr	r3, [pc, #28]	; (8023be4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8023bc6:	63eb      	str	r3, [r5, #60]	; 0x3c
 8023bc8:	bd38      	pop	{r3, r4, r5, pc}
 8023bca:	bf00      	nop
 8023bcc:	2400709c 	.word	0x2400709c
 8023bd0:	24000000 	.word	0x24000000
 8023bd4:	08021641 	.word	0x08021641
 8023bd8:	24000078 	.word	0x24000078
 8023bdc:	240070a0 	.word	0x240070a0
 8023be0:	0802163f 	.word	0x0802163f
 8023be4:	2400007c 	.word	0x2400007c

08023be8 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 8023be8:	b510      	push	{r4, lr}
 8023bea:	4604      	mov	r4, r0
 8023bec:	f7ff ff88 	bl	8023b00 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 8023bf0:	4620      	mov	r0, r4
 8023bf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023bf6:	f7ff bfbd 	b.w	8023b74 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

08023bfc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 8023bfc:	b538      	push	{r3, r4, r5, lr}
 8023bfe:	4c15      	ldr	r4, [pc, #84]	; (8023c54 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8023c00:	4605      	mov	r5, r0
 8023c02:	7823      	ldrb	r3, [r4, #0]
 8023c04:	f3bf 8f5b 	dmb	ish
 8023c08:	07da      	lsls	r2, r3, #31
 8023c0a:	d40b      	bmi.n	8023c24 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8023c0c:	4620      	mov	r0, r4
 8023c0e:	f005 f954 	bl	8028eba <__cxa_guard_acquire>
 8023c12:	b138      	cbz	r0, 8023c24 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8023c14:	4620      	mov	r0, r4
 8023c16:	f005 f95c 	bl	8028ed2 <__cxa_guard_release>
 8023c1a:	4a0f      	ldr	r2, [pc, #60]	; (8023c58 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8023c1c:	490f      	ldr	r1, [pc, #60]	; (8023c5c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 8023c1e:	4810      	ldr	r0, [pc, #64]	; (8023c60 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8023c20:	f005 f944 	bl	8028eac <__aeabi_atexit>
 8023c24:	4c0f      	ldr	r4, [pc, #60]	; (8023c64 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 8023c26:	7823      	ldrb	r3, [r4, #0]
 8023c28:	f3bf 8f5b 	dmb	ish
 8023c2c:	07db      	lsls	r3, r3, #31
 8023c2e:	d40b      	bmi.n	8023c48 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8023c30:	4620      	mov	r0, r4
 8023c32:	f005 f942 	bl	8028eba <__cxa_guard_acquire>
 8023c36:	b138      	cbz	r0, 8023c48 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8023c38:	4620      	mov	r0, r4
 8023c3a:	f005 f94a 	bl	8028ed2 <__cxa_guard_release>
 8023c3e:	4a06      	ldr	r2, [pc, #24]	; (8023c58 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8023c40:	4909      	ldr	r1, [pc, #36]	; (8023c68 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 8023c42:	480a      	ldr	r0, [pc, #40]	; (8023c6c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8023c44:	f005 f932 	bl	8028eac <__aeabi_atexit>
 8023c48:	4b05      	ldr	r3, [pc, #20]	; (8023c60 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8023c4a:	652b      	str	r3, [r5, #80]	; 0x50
 8023c4c:	4b07      	ldr	r3, [pc, #28]	; (8023c6c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8023c4e:	656b      	str	r3, [r5, #84]	; 0x54
 8023c50:	bd38      	pop	{r3, r4, r5, pc}
 8023c52:	bf00      	nop
 8023c54:	24007094 	.word	0x24007094
 8023c58:	24000000 	.word	0x24000000
 8023c5c:	08021635 	.word	0x08021635
 8023c60:	24000070 	.word	0x24000070
 8023c64:	24007098 	.word	0x24007098
 8023c68:	08021633 	.word	0x08021633
 8023c6c:	24000074 	.word	0x24000074

08023c70 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 8023c70:	b538      	push	{r3, r4, r5, lr}
 8023c72:	4c15      	ldr	r4, [pc, #84]	; (8023cc8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8023c74:	4605      	mov	r5, r0
 8023c76:	7823      	ldrb	r3, [r4, #0]
 8023c78:	f3bf 8f5b 	dmb	ish
 8023c7c:	07da      	lsls	r2, r3, #31
 8023c7e:	d40b      	bmi.n	8023c98 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8023c80:	4620      	mov	r0, r4
 8023c82:	f005 f91a 	bl	8028eba <__cxa_guard_acquire>
 8023c86:	b138      	cbz	r0, 8023c98 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8023c88:	4620      	mov	r0, r4
 8023c8a:	f005 f922 	bl	8028ed2 <__cxa_guard_release>
 8023c8e:	4a0f      	ldr	r2, [pc, #60]	; (8023ccc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8023c90:	490f      	ldr	r1, [pc, #60]	; (8023cd0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 8023c92:	4810      	ldr	r0, [pc, #64]	; (8023cd4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8023c94:	f005 f90a 	bl	8028eac <__aeabi_atexit>
 8023c98:	4c0f      	ldr	r4, [pc, #60]	; (8023cd8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 8023c9a:	7823      	ldrb	r3, [r4, #0]
 8023c9c:	f3bf 8f5b 	dmb	ish
 8023ca0:	07db      	lsls	r3, r3, #31
 8023ca2:	d40b      	bmi.n	8023cbc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8023ca4:	4620      	mov	r0, r4
 8023ca6:	f005 f908 	bl	8028eba <__cxa_guard_acquire>
 8023caa:	b138      	cbz	r0, 8023cbc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8023cac:	4620      	mov	r0, r4
 8023cae:	f005 f910 	bl	8028ed2 <__cxa_guard_release>
 8023cb2:	4a06      	ldr	r2, [pc, #24]	; (8023ccc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8023cb4:	4909      	ldr	r1, [pc, #36]	; (8023cdc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 8023cb6:	480a      	ldr	r0, [pc, #40]	; (8023ce0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8023cb8:	f005 f8f8 	bl	8028eac <__aeabi_atexit>
 8023cbc:	4b05      	ldr	r3, [pc, #20]	; (8023cd4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8023cbe:	64ab      	str	r3, [r5, #72]	; 0x48
 8023cc0:	4b07      	ldr	r3, [pc, #28]	; (8023ce0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8023cc2:	64eb      	str	r3, [r5, #76]	; 0x4c
 8023cc4:	bd38      	pop	{r3, r4, r5, pc}
 8023cc6:	bf00      	nop
 8023cc8:	24007084 	.word	0x24007084
 8023ccc:	24000000 	.word	0x24000000
 8023cd0:	08021639 	.word	0x08021639
 8023cd4:	24000060 	.word	0x24000060
 8023cd8:	24007088 	.word	0x24007088
 8023cdc:	08021637 	.word	0x08021637
 8023ce0:	24000064 	.word	0x24000064

08023ce4 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 8023ce4:	b510      	push	{r4, lr}
 8023ce6:	4604      	mov	r4, r0
 8023ce8:	f7ff ff88 	bl	8023bfc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 8023cec:	4620      	mov	r0, r4
 8023cee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023cf2:	f7ff bfbd 	b.w	8023c70 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

08023cf6 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 8023cf6:	b510      	push	{r4, lr}
 8023cf8:	4604      	mov	r4, r0
 8023cfa:	f7ff fff3 	bl	8023ce4 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 8023cfe:	4620      	mov	r0, r4
 8023d00:	f7ff ff72 	bl	8023be8 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 8023d04:	4620      	mov	r0, r4
 8023d06:	f7ff fe73 	bl	80239f0 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 8023d0a:	4620      	mov	r0, r4
 8023d0c:	f7ff fdf2 	bl	80238f4 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 8023d10:	4620      	mov	r0, r4
 8023d12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023d16:	f7ff bee9 	b.w	8023aec <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

08023d1c <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev>:
 8023d1c:	b538      	push	{r3, r4, r5, lr}
 8023d1e:	4c0b      	ldr	r4, [pc, #44]	; (8023d4c <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x30>)
 8023d20:	4605      	mov	r5, r0
 8023d22:	7823      	ldrb	r3, [r4, #0]
 8023d24:	f3bf 8f5b 	dmb	ish
 8023d28:	07db      	lsls	r3, r3, #31
 8023d2a:	d40b      	bmi.n	8023d44 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x28>
 8023d2c:	4620      	mov	r0, r4
 8023d2e:	f005 f8c4 	bl	8028eba <__cxa_guard_acquire>
 8023d32:	b138      	cbz	r0, 8023d44 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x28>
 8023d34:	4620      	mov	r0, r4
 8023d36:	f005 f8cc 	bl	8028ed2 <__cxa_guard_release>
 8023d3a:	4a05      	ldr	r2, [pc, #20]	; (8023d50 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x34>)
 8023d3c:	4905      	ldr	r1, [pc, #20]	; (8023d54 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x38>)
 8023d3e:	4806      	ldr	r0, [pc, #24]	; (8023d58 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x3c>)
 8023d40:	f005 f8b4 	bl	8028eac <__aeabi_atexit>
 8023d44:	4b04      	ldr	r3, [pc, #16]	; (8023d58 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x3c>)
 8023d46:	65ab      	str	r3, [r5, #88]	; 0x58
 8023d48:	bd38      	pop	{r3, r4, r5, pc}
 8023d4a:	bf00      	nop
 8023d4c:	24007078 	.word	0x24007078
 8023d50:	24000000 	.word	0x24000000
 8023d54:	08021631 	.word	0x08021631
 8023d58:	24000058 	.word	0x24000058

08023d5c <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv>:
 8023d5c:	b538      	push	{r3, r4, r5, lr}
 8023d5e:	4c0b      	ldr	r4, [pc, #44]	; (8023d8c <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x30>)
 8023d60:	4605      	mov	r5, r0
 8023d62:	7823      	ldrb	r3, [r4, #0]
 8023d64:	f3bf 8f5b 	dmb	ish
 8023d68:	07db      	lsls	r3, r3, #31
 8023d6a:	d40b      	bmi.n	8023d84 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x28>
 8023d6c:	4620      	mov	r0, r4
 8023d6e:	f005 f8a4 	bl	8028eba <__cxa_guard_acquire>
 8023d72:	b138      	cbz	r0, 8023d84 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x28>
 8023d74:	4620      	mov	r0, r4
 8023d76:	f005 f8ac 	bl	8028ed2 <__cxa_guard_release>
 8023d7a:	4a05      	ldr	r2, [pc, #20]	; (8023d90 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x34>)
 8023d7c:	4905      	ldr	r1, [pc, #20]	; (8023d94 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x38>)
 8023d7e:	4806      	ldr	r0, [pc, #24]	; (8023d98 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x3c>)
 8023d80:	f005 f894 	bl	8028eac <__aeabi_atexit>
 8023d84:	4b04      	ldr	r3, [pc, #16]	; (8023d98 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x3c>)
 8023d86:	65eb      	str	r3, [r5, #92]	; 0x5c
 8023d88:	bd38      	pop	{r3, r4, r5, pc}
 8023d8a:	bf00      	nop
 8023d8c:	2400707c 	.word	0x2400707c
 8023d90:	24000000 	.word	0x24000000
 8023d94:	0802162f 	.word	0x0802162f
 8023d98:	2400005c 	.word	0x2400005c

08023d9c <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev>:
 8023d9c:	b570      	push	{r4, r5, r6, lr}
 8023d9e:	4d0c      	ldr	r5, [pc, #48]	; (8023dd0 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x34>)
 8023da0:	4606      	mov	r6, r0
 8023da2:	4c0c      	ldr	r4, [pc, #48]	; (8023dd4 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x38>)
 8023da4:	782b      	ldrb	r3, [r5, #0]
 8023da6:	f3bf 8f5b 	dmb	ish
 8023daa:	f013 0f01 	tst.w	r3, #1
 8023dae:	d10d      	bne.n	8023dcc <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x30>
 8023db0:	4628      	mov	r0, r5
 8023db2:	f005 f882 	bl	8028eba <__cxa_guard_acquire>
 8023db6:	b148      	cbz	r0, 8023dcc <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x30>
 8023db8:	4b07      	ldr	r3, [pc, #28]	; (8023dd8 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x3c>)
 8023dba:	4628      	mov	r0, r5
 8023dbc:	6023      	str	r3, [r4, #0]
 8023dbe:	f005 f888 	bl	8028ed2 <__cxa_guard_release>
 8023dc2:	4a06      	ldr	r2, [pc, #24]	; (8023ddc <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x40>)
 8023dc4:	4620      	mov	r0, r4
 8023dc6:	4906      	ldr	r1, [pc, #24]	; (8023de0 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x44>)
 8023dc8:	f005 f870 	bl	8028eac <__aeabi_atexit>
 8023dcc:	6634      	str	r4, [r6, #96]	; 0x60
 8023dce:	bd70      	pop	{r4, r5, r6, pc}
 8023dd0:	24007080 	.word	0x24007080
 8023dd4:	240070d4 	.word	0x240070d4
 8023dd8:	0802bf0c 	.word	0x0802bf0c
 8023ddc:	24000000 	.word	0x24000000
 8023de0:	0802162d 	.word	0x0802162d

08023de4 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_AllEv>:
 8023de4:	b510      	push	{r4, lr}
 8023de6:	4604      	mov	r4, r0
 8023de8:	f7ff ff98 	bl	8023d1c <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev>
 8023dec:	4620      	mov	r0, r4
 8023dee:	f7ff ffb5 	bl	8023d5c <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv>
 8023df2:	4620      	mov	r0, r4
 8023df4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023df8:	f7ff bfd0 	b.w	8023d9c <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev>

08023dfc <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 8023dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023e00:	b087      	sub	sp, #28
 8023e02:	788d      	ldrb	r5, [r1, #2]
 8023e04:	f891 9000 	ldrb.w	r9, [r1]
 8023e08:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 8023e0c:	9501      	str	r5, [sp, #4]
 8023e0e:	784d      	ldrb	r5, [r1, #1]
 8023e10:	9203      	str	r2, [sp, #12]
 8023e12:	9502      	str	r5, [sp, #8]
 8023e14:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 8023e18:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
 8023e1c:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 8023e20:	f89d e058 	ldrb.w	lr, [sp, #88]	; 0x58
 8023e24:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	; 0x48
 8023e28:	fb06 0708 	mla	r7, r6, r8, r0
 8023e2c:	2e00      	cmp	r6, #0
 8023e2e:	eb02 0a07 	add.w	sl, r2, r7
 8023e32:	ea4f 2205 	mov.w	r2, r5, lsl #8
 8023e36:	9d01      	ldr	r5, [sp, #4]
 8023e38:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8023e3c:	ea45 0509 	orr.w	r5, r5, r9
 8023e40:	9505      	str	r5, [sp, #20]
 8023e42:	f2c0 80b2 	blt.w	8023faa <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 8023e46:	45b3      	cmp	fp, r6
 8023e48:	f340 80af 	ble.w	8023faa <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 8023e4c:	2800      	cmp	r0, #0
 8023e4e:	f2c0 80aa 	blt.w	8023fa6 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 8023e52:	4580      	cmp	r8, r0
 8023e54:	f340 80a7 	ble.w	8023fa6 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 8023e58:	9a03      	ldr	r2, [sp, #12]
 8023e5a:	5dd7      	ldrb	r7, [r2, r7]
 8023e5c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8023e60:	441f      	add	r7, r3
 8023e62:	1c42      	adds	r2, r0, #1
 8023e64:	f100 80a4 	bmi.w	8023fb0 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 8023e68:	4590      	cmp	r8, r2
 8023e6a:	f340 80a1 	ble.w	8023fb0 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 8023e6e:	2c00      	cmp	r4, #0
 8023e70:	f000 809e 	beq.w	8023fb0 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 8023e74:	f89a 5001 	ldrb.w	r5, [sl, #1]
 8023e78:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8023e7c:	441d      	add	r5, r3
 8023e7e:	3601      	adds	r6, #1
 8023e80:	f100 809a 	bmi.w	8023fb8 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 8023e84:	45b3      	cmp	fp, r6
 8023e86:	f340 8097 	ble.w	8023fb8 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 8023e8a:	f1bc 0f00 	cmp.w	ip, #0
 8023e8e:	f000 8093 	beq.w	8023fb8 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 8023e92:	2800      	cmp	r0, #0
 8023e94:	f2c0 808e 	blt.w	8023fb4 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 8023e98:	4580      	cmp	r8, r0
 8023e9a:	f340 808b 	ble.w	8023fb4 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 8023e9e:	f81a 6008 	ldrb.w	r6, [sl, r8]
 8023ea2:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8023ea6:	441e      	add	r6, r3
 8023ea8:	3001      	adds	r0, #1
 8023eaa:	f100 8088 	bmi.w	8023fbe <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 8023eae:	4580      	cmp	r8, r0
 8023eb0:	f340 8085 	ble.w	8023fbe <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 8023eb4:	2c00      	cmp	r4, #0
 8023eb6:	f000 8082 	beq.w	8023fbe <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 8023eba:	44d0      	add	r8, sl
 8023ebc:	f898 2001 	ldrb.w	r2, [r8, #1]
 8023ec0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023ec4:	4413      	add	r3, r2
 8023ec6:	b2a4      	uxth	r4, r4
 8023ec8:	f895 a000 	ldrb.w	sl, [r5]
 8023ecc:	fa1f fc8c 	uxth.w	ip, ip
 8023ed0:	fb04 fb0c 	mul.w	fp, r4, ip
 8023ed4:	0124      	lsls	r4, r4, #4
 8023ed6:	ebcb 1c0c 	rsb	ip, fp, ip, lsl #4
 8023eda:	f5c4 7880 	rsb	r8, r4, #256	; 0x100
 8023ede:	eba4 040b 	sub.w	r4, r4, fp
 8023ee2:	fa1f f08c 	uxth.w	r0, ip
 8023ee6:	b2a2      	uxth	r2, r4
 8023ee8:	783c      	ldrb	r4, [r7, #0]
 8023eea:	eba8 0800 	sub.w	r8, r8, r0
 8023eee:	fa1f fc8e 	uxth.w	ip, lr
 8023ef2:	fb02 fa0a 	mul.w	sl, r2, sl
 8023ef6:	ea6f 0e0e 	mvn.w	lr, lr
 8023efa:	fa1f f888 	uxth.w	r8, r8
 8023efe:	fa5f fe8e 	uxtb.w	lr, lr
 8023f02:	fb08 aa04 	mla	sl, r8, r4, sl
 8023f06:	7834      	ldrb	r4, [r6, #0]
 8023f08:	fb19 f90e 	smulbb	r9, r9, lr
 8023f0c:	fb00 aa04 	mla	sl, r0, r4, sl
 8023f10:	781c      	ldrb	r4, [r3, #0]
 8023f12:	fb0b a404 	mla	r4, fp, r4, sl
 8023f16:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8023f1a:	fb04 990c 	mla	r9, r4, ip, r9
 8023f1e:	fa1f f989 	uxth.w	r9, r9
 8023f22:	f109 0401 	add.w	r4, r9, #1
 8023f26:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8023f2a:	ea4f 2929 	mov.w	r9, r9, asr #8
 8023f2e:	f881 9000 	strb.w	r9, [r1]
 8023f32:	f895 9001 	ldrb.w	r9, [r5, #1]
 8023f36:	787c      	ldrb	r4, [r7, #1]
 8023f38:	fb02 f909 	mul.w	r9, r2, r9
 8023f3c:	fb08 9904 	mla	r9, r8, r4, r9
 8023f40:	7874      	ldrb	r4, [r6, #1]
 8023f42:	fb00 9904 	mla	r9, r0, r4, r9
 8023f46:	785c      	ldrb	r4, [r3, #1]
 8023f48:	fb0b 9404 	mla	r4, fp, r4, r9
 8023f4c:	f3c4 2a07 	ubfx	sl, r4, #8, #8
 8023f50:	9c02      	ldr	r4, [sp, #8]
 8023f52:	fb14 f90e 	smulbb	r9, r4, lr
 8023f56:	fb0a 940c 	mla	r4, sl, ip, r9
 8023f5a:	b2a4      	uxth	r4, r4
 8023f5c:	f104 0901 	add.w	r9, r4, #1
 8023f60:	eb09 2414 	add.w	r4, r9, r4, lsr #8
 8023f64:	1224      	asrs	r4, r4, #8
 8023f66:	704c      	strb	r4, [r1, #1]
 8023f68:	78ad      	ldrb	r5, [r5, #2]
 8023f6a:	78bc      	ldrb	r4, [r7, #2]
 8023f6c:	436a      	muls	r2, r5
 8023f6e:	789b      	ldrb	r3, [r3, #2]
 8023f70:	fb08 2204 	mla	r2, r8, r4, r2
 8023f74:	78b4      	ldrb	r4, [r6, #2]
 8023f76:	fb00 2004 	mla	r0, r0, r4, r2
 8023f7a:	fb0b 0b03 	mla	fp, fp, r3, r0
 8023f7e:	9b01      	ldr	r3, [sp, #4]
 8023f80:	fb13 fe0e 	smulbb	lr, r3, lr
 8023f84:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 8023f88:	fb0b ec0c 	mla	ip, fp, ip, lr
 8023f8c:	fa1f fc8c 	uxth.w	ip, ip
 8023f90:	f10c 0e01 	add.w	lr, ip, #1
 8023f94:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 8023f98:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8023f9c:	f881 c002 	strb.w	ip, [r1, #2]
 8023fa0:	b007      	add	sp, #28
 8023fa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023fa6:	af05      	add	r7, sp, #20
 8023fa8:	e75b      	b.n	8023e62 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x66>
 8023faa:	ad05      	add	r5, sp, #20
 8023fac:	462f      	mov	r7, r5
 8023fae:	e766      	b.n	8023e7e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 8023fb0:	ad05      	add	r5, sp, #20
 8023fb2:	e764      	b.n	8023e7e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 8023fb4:	ae05      	add	r6, sp, #20
 8023fb6:	e777      	b.n	8023ea8 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xac>
 8023fb8:	ab05      	add	r3, sp, #20
 8023fba:	461e      	mov	r6, r3
 8023fbc:	e783      	b.n	8023ec6 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>
 8023fbe:	ab05      	add	r3, sp, #20
 8023fc0:	e781      	b.n	8023ec6 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>

08023fc2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023fc2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023fc6:	b093      	sub	sp, #76	; 0x4c
 8023fc8:	9210      	str	r2, [sp, #64]	; 0x40
 8023fca:	9309      	str	r3, [sp, #36]	; 0x24
 8023fcc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8023fce:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 8023fd2:	9011      	str	r0, [sp, #68]	; 0x44
 8023fd4:	930e      	str	r3, [sp, #56]	; 0x38
 8023fd6:	6850      	ldr	r0, [r2, #4]
 8023fd8:	910d      	str	r1, [sp, #52]	; 0x34
 8023fda:	6812      	ldr	r2, [r2, #0]
 8023fdc:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 8023fe0:	fb00 1303 	mla	r3, r0, r3, r1
 8023fe4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023fe8:	18d3      	adds	r3, r2, r3
 8023fea:	930a      	str	r3, [sp, #40]	; 0x28
 8023fec:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023fee:	681b      	ldr	r3, [r3, #0]
 8023ff0:	930c      	str	r3, [sp, #48]	; 0x30
 8023ff2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023ff4:	685c      	ldr	r4, [r3, #4]
 8023ff6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023ff8:	3404      	adds	r4, #4
 8023ffa:	43db      	mvns	r3, r3
 8023ffc:	b2db      	uxtb	r3, r3
 8023ffe:	930b      	str	r3, [sp, #44]	; 0x2c
 8024000:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024002:	2b00      	cmp	r3, #0
 8024004:	dc03      	bgt.n	802400e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8024006:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8024008:	2b00      	cmp	r3, #0
 802400a:	f340 8250 	ble.w	80244ae <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 802400e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024010:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024014:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024018:	1e48      	subs	r0, r1, #1
 802401a:	1e55      	subs	r5, r2, #1
 802401c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802401e:	2b00      	cmp	r3, #0
 8024020:	f340 80ee 	ble.w	8024200 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 8024024:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8024026:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8024028:	1436      	asrs	r6, r6, #16
 802402a:	ea4f 4323 	mov.w	r3, r3, asr #16
 802402e:	d406      	bmi.n	802403e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8024030:	4286      	cmp	r6, r0
 8024032:	da04      	bge.n	802403e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8024034:	2b00      	cmp	r3, #0
 8024036:	db02      	blt.n	802403e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8024038:	42ab      	cmp	r3, r5
 802403a:	f2c0 80e2 	blt.w	8024202 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 802403e:	3601      	adds	r6, #1
 8024040:	f100 80cf 	bmi.w	80241e2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8024044:	42b1      	cmp	r1, r6
 8024046:	f2c0 80cc 	blt.w	80241e2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 802404a:	3301      	adds	r3, #1
 802404c:	f100 80c9 	bmi.w	80241e2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8024050:	429a      	cmp	r2, r3
 8024052:	f2c0 80c6 	blt.w	80241e2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8024056:	e9dd b609 	ldrd	fp, r6, [sp, #36]	; 0x24
 802405a:	f1bb 0f00 	cmp.w	fp, #0
 802405e:	f340 80f1 	ble.w	8024244 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 8024062:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8024064:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8024066:	9824      	ldr	r0, [sp, #144]	; 0x90
 8024068:	141d      	asrs	r5, r3, #16
 802406a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802406c:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8024070:	68c7      	ldr	r7, [r0, #12]
 8024072:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8024074:	1418      	asrs	r0, r3, #16
 8024076:	f3c3 3803 	ubfx	r8, r3, #12, #4
 802407a:	6892      	ldr	r2, [r2, #8]
 802407c:	f100 8137 	bmi.w	80242ee <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8024080:	f102 3cff 	add.w	ip, r2, #4294967295
 8024084:	4560      	cmp	r0, ip
 8024086:	f280 8132 	bge.w	80242ee <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 802408a:	2d00      	cmp	r5, #0
 802408c:	f2c0 812f 	blt.w	80242ee <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8024090:	f107 3cff 	add.w	ip, r7, #4294967295
 8024094:	4565      	cmp	r5, ip
 8024096:	f280 812a 	bge.w	80242ee <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 802409a:	b212      	sxth	r2, r2
 802409c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 802409e:	fb05 0002 	mla	r0, r5, r2, r0
 80240a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80240a4:	f817 c000 	ldrb.w	ip, [r7, r0]
 80240a8:	4405      	add	r5, r0
 80240aa:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80240ae:	eb04 0e0c 	add.w	lr, r4, ip
 80240b2:	f1b8 0f00 	cmp.w	r8, #0
 80240b6:	f000 810c 	beq.w	80242d2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 80240ba:	786f      	ldrb	r7, [r5, #1]
 80240bc:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80240c0:	4427      	add	r7, r4
 80240c2:	2900      	cmp	r1, #0
 80240c4:	f000 810d 	beq.w	80242e2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 80240c8:	18a8      	adds	r0, r5, r2
 80240ca:	5caa      	ldrb	r2, [r5, r2]
 80240cc:	7840      	ldrb	r0, [r0, #1]
 80240ce:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80240d2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80240d6:	4422      	add	r2, r4
 80240d8:	4420      	add	r0, r4
 80240da:	fa1f f388 	uxth.w	r3, r8
 80240de:	f814 a00c 	ldrb.w	sl, [r4, ip]
 80240e2:	b289      	uxth	r1, r1
 80240e4:	f897 c000 	ldrb.w	ip, [r7]
 80240e8:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 80240ec:	fb03 f901 	mul.w	r9, r3, r1
 80240f0:	011b      	lsls	r3, r3, #4
 80240f2:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80240f6:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 80240fa:	eba3 0309 	sub.w	r3, r3, r9
 80240fe:	b289      	uxth	r1, r1
 8024100:	b29b      	uxth	r3, r3
 8024102:	eba8 0801 	sub.w	r8, r8, r1
 8024106:	fb03 fc0c 	mul.w	ip, r3, ip
 802410a:	fa1f f888 	uxth.w	r8, r8
 802410e:	930f      	str	r3, [sp, #60]	; 0x3c
 8024110:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024112:	fb08 cc0a 	mla	ip, r8, sl, ip
 8024116:	f892 a000 	ldrb.w	sl, [r2]
 802411a:	fb01 cc0a 	mla	ip, r1, sl, ip
 802411e:	f890 a000 	ldrb.w	sl, [r0]
 8024122:	fb09 cc0a 	mla	ip, r9, sl, ip
 8024126:	f896 a000 	ldrb.w	sl, [r6]
 802412a:	fb1a fa03 	smulbb	sl, sl, r3
 802412e:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8024132:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8024134:	fb0c ac05 	mla	ip, ip, r5, sl
 8024138:	fa1f fc8c 	uxth.w	ip, ip
 802413c:	f10c 0a01 	add.w	sl, ip, #1
 8024140:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 8024144:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8024148:	f886 a000 	strb.w	sl, [r6]
 802414c:	f897 c001 	ldrb.w	ip, [r7, #1]
 8024150:	f89e a001 	ldrb.w	sl, [lr, #1]
 8024154:	fb03 fc0c 	mul.w	ip, r3, ip
 8024158:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802415a:	fb08 cc0a 	mla	ip, r8, sl, ip
 802415e:	f892 a001 	ldrb.w	sl, [r2, #1]
 8024162:	fb01 cc0a 	mla	ip, r1, sl, ip
 8024166:	f890 a001 	ldrb.w	sl, [r0, #1]
 802416a:	fb09 cc0a 	mla	ip, r9, sl, ip
 802416e:	f896 a001 	ldrb.w	sl, [r6, #1]
 8024172:	fb1a fa03 	smulbb	sl, sl, r3
 8024176:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 802417a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802417c:	fb0c ac05 	mla	ip, ip, r5, sl
 8024180:	fa1f fc8c 	uxth.w	ip, ip
 8024184:	f10c 0a01 	add.w	sl, ip, #1
 8024188:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 802418c:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8024190:	f886 c001 	strb.w	ip, [r6, #1]
 8024194:	78bf      	ldrb	r7, [r7, #2]
 8024196:	f89e c002 	ldrb.w	ip, [lr, #2]
 802419a:	437b      	muls	r3, r7
 802419c:	fb08 330c 	mla	r3, r8, ip, r3
 80241a0:	f892 c002 	ldrb.w	ip, [r2, #2]
 80241a4:	7882      	ldrb	r2, [r0, #2]
 80241a6:	fb01 310c 	mla	r1, r1, ip, r3
 80241aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80241ac:	fb09 1902 	mla	r9, r9, r2, r1
 80241b0:	78b1      	ldrb	r1, [r6, #2]
 80241b2:	fb11 f103 	smulbb	r1, r1, r3
 80241b6:	f3c9 2907 	ubfx	r9, r9, #8, #8
 80241ba:	fb09 1505 	mla	r5, r9, r5, r1
 80241be:	b2ad      	uxth	r5, r5
 80241c0:	1c6b      	adds	r3, r5, #1
 80241c2:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80241c6:	122d      	asrs	r5, r5, #8
 80241c8:	70b5      	strb	r5, [r6, #2]
 80241ca:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80241cc:	3603      	adds	r6, #3
 80241ce:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80241d0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80241d4:	4413      	add	r3, r2
 80241d6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80241d8:	931d      	str	r3, [sp, #116]	; 0x74
 80241da:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80241dc:	4413      	add	r3, r2
 80241de:	931e      	str	r3, [sp, #120]	; 0x78
 80241e0:	e73b      	b.n	802405a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80241e2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80241e4:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 80241e6:	4433      	add	r3, r6
 80241e8:	9e20      	ldr	r6, [sp, #128]	; 0x80
 80241ea:	931d      	str	r3, [sp, #116]	; 0x74
 80241ec:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80241ee:	4433      	add	r3, r6
 80241f0:	931e      	str	r3, [sp, #120]	; 0x78
 80241f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80241f4:	3b01      	subs	r3, #1
 80241f6:	9309      	str	r3, [sp, #36]	; 0x24
 80241f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80241fa:	3303      	adds	r3, #3
 80241fc:	930a      	str	r3, [sp, #40]	; 0x28
 80241fe:	e70d      	b.n	802401c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8024200:	d028      	beq.n	8024254 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 8024202:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024204:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8024206:	3b01      	subs	r3, #1
 8024208:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 802420a:	fb00 5003 	mla	r0, r0, r3, r5
 802420e:	1400      	asrs	r0, r0, #16
 8024210:	f53f af21 	bmi.w	8024056 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8024214:	3901      	subs	r1, #1
 8024216:	4288      	cmp	r0, r1
 8024218:	f6bf af1d 	bge.w	8024056 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802421c:	9920      	ldr	r1, [sp, #128]	; 0x80
 802421e:	981e      	ldr	r0, [sp, #120]	; 0x78
 8024220:	fb01 0303 	mla	r3, r1, r3, r0
 8024224:	141b      	asrs	r3, r3, #16
 8024226:	f53f af16 	bmi.w	8024056 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802422a:	3a01      	subs	r2, #1
 802422c:	4293      	cmp	r3, r2
 802422e:	f6bf af12 	bge.w	8024056 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8024232:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024234:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8024238:	1cdf      	adds	r7, r3, #3
 802423a:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 802423e:	f1b9 0f00 	cmp.w	r9, #0
 8024242:	dc73      	bgt.n	802432c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 8024244:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024246:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024248:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802424c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024250:	441a      	add	r2, r3
 8024252:	920a      	str	r2, [sp, #40]	; 0x28
 8024254:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024256:	2b00      	cmp	r3, #0
 8024258:	f340 8129 	ble.w	80244ae <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 802425c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024260:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8024262:	ee30 0a04 	vadd.f32	s0, s0, s8
 8024266:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802426a:	eef0 6a62 	vmov.f32	s13, s5
 802426e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8024272:	ee31 1a05 	vadd.f32	s2, s2, s10
 8024276:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802427a:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
 802427e:	eef0 6a43 	vmov.f32	s13, s6
 8024282:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024286:	edcd 6a1e 	vstr	s13, [sp, #120]	; 0x78
 802428a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802428e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8024292:	ee77 2a62 	vsub.f32	s5, s14, s5
 8024296:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802429a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802429e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80242a2:	ee12 2a90 	vmov	r2, s5
 80242a6:	eef0 2a47 	vmov.f32	s5, s14
 80242aa:	fb92 f3f3 	sdiv	r3, r2, r3
 80242ae:	ee13 2a10 	vmov	r2, s6
 80242b2:	931f      	str	r3, [sp, #124]	; 0x7c
 80242b4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80242b6:	eeb0 3a67 	vmov.f32	s6, s15
 80242ba:	fb92 f3f3 	sdiv	r3, r2, r3
 80242be:	9320      	str	r3, [sp, #128]	; 0x80
 80242c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80242c2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80242c4:	3b01      	subs	r3, #1
 80242c6:	930d      	str	r3, [sp, #52]	; 0x34
 80242c8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80242ca:	bf08      	it	eq
 80242cc:	4613      	moveq	r3, r2
 80242ce:	9309      	str	r3, [sp, #36]	; 0x24
 80242d0:	e696      	b.n	8024000 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 80242d2:	b149      	cbz	r1, 80242e8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 80242d4:	5caa      	ldrb	r2, [r5, r2]
 80242d6:	4670      	mov	r0, lr
 80242d8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80242dc:	4422      	add	r2, r4
 80242de:	4677      	mov	r7, lr
 80242e0:	e6fb      	b.n	80240da <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 80242e2:	4670      	mov	r0, lr
 80242e4:	4672      	mov	r2, lr
 80242e6:	e6f8      	b.n	80240da <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 80242e8:	4670      	mov	r0, lr
 80242ea:	4672      	mov	r2, lr
 80242ec:	e7f7      	b.n	80242de <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 80242ee:	f110 0c01 	adds.w	ip, r0, #1
 80242f2:	f53f af6a 	bmi.w	80241ca <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 80242f6:	4562      	cmp	r2, ip
 80242f8:	f6ff af67 	blt.w	80241ca <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 80242fc:	f115 0c01 	adds.w	ip, r5, #1
 8024300:	f53f af63 	bmi.w	80241ca <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8024304:	4567      	cmp	r7, ip
 8024306:	f6ff af60 	blt.w	80241ca <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 802430a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802430c:	b23f      	sxth	r7, r7
 802430e:	b212      	sxth	r2, r2
 8024310:	9002      	str	r0, [sp, #8]
 8024312:	9701      	str	r7, [sp, #4]
 8024314:	9200      	str	r2, [sp, #0]
 8024316:	9811      	ldr	r0, [sp, #68]	; 0x44
 8024318:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802431a:	e9cd 1305 	strd	r1, r3, [sp, #20]
 802431e:	e9cd 5803 	strd	r5, r8, [sp, #12]
 8024322:	4623      	mov	r3, r4
 8024324:	4631      	mov	r1, r6
 8024326:	f7ff fd69 	bl	8023dfc <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 802432a:	e74e      	b.n	80241ca <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 802432c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 802432e:	981e      	ldr	r0, [sp, #120]	; 0x78
 8024330:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8024334:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8024336:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8024338:	1400      	asrs	r0, r0, #16
 802433a:	142d      	asrs	r5, r5, #16
 802433c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802433e:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8024342:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8024346:	fb02 5000 	mla	r0, r2, r0, r5
 802434a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802434c:	f815 e000 	ldrb.w	lr, [r5, r0]
 8024350:	eb05 0c00 	add.w	ip, r5, r0
 8024354:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8024358:	eb04 060e 	add.w	r6, r4, lr
 802435c:	2b00      	cmp	r3, #0
 802435e:	f000 8097 	beq.w	8024490 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 8024362:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8024366:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802436a:	4425      	add	r5, r4
 802436c:	2900      	cmp	r1, #0
 802436e:	f000 8098 	beq.w	80244a2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e0>
 8024372:	eb0c 0002 	add.w	r0, ip, r2
 8024376:	f81c 2002 	ldrb.w	r2, [ip, r2]
 802437a:	7840      	ldrb	r0, [r0, #1]
 802437c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024380:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8024384:	4422      	add	r2, r4
 8024386:	4420      	add	r0, r4
 8024388:	b29b      	uxth	r3, r3
 802438a:	f814 b00e 	ldrb.w	fp, [r4, lr]
 802438e:	b289      	uxth	r1, r1
 8024390:	f895 e000 	ldrb.w	lr, [r5]
 8024394:	3703      	adds	r7, #3
 8024396:	f109 39ff 	add.w	r9, r9, #4294967295
 802439a:	fb03 f801 	mul.w	r8, r3, r1
 802439e:	011b      	lsls	r3, r3, #4
 80243a0:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 80243a4:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 80243a8:	eba3 0308 	sub.w	r3, r3, r8
 80243ac:	b289      	uxth	r1, r1
 80243ae:	b29b      	uxth	r3, r3
 80243b0:	ebac 0c01 	sub.w	ip, ip, r1
 80243b4:	fb03 fe0e 	mul.w	lr, r3, lr
 80243b8:	fa1f fc8c 	uxth.w	ip, ip
 80243bc:	930f      	str	r3, [sp, #60]	; 0x3c
 80243be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80243c0:	fb0c ee0b 	mla	lr, ip, fp, lr
 80243c4:	f892 b000 	ldrb.w	fp, [r2]
 80243c8:	fb01 ee0b 	mla	lr, r1, fp, lr
 80243cc:	f890 b000 	ldrb.w	fp, [r0]
 80243d0:	fb08 ee0b 	mla	lr, r8, fp, lr
 80243d4:	f817 bc06 	ldrb.w	fp, [r7, #-6]
 80243d8:	fb1b fb03 	smulbb	fp, fp, r3
 80243dc:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 80243e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80243e2:	fb0e be0a 	mla	lr, lr, sl, fp
 80243e6:	fa1f fe8e 	uxth.w	lr, lr
 80243ea:	f10e 0b01 	add.w	fp, lr, #1
 80243ee:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 80243f2:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80243f6:	f807 ec06 	strb.w	lr, [r7, #-6]
 80243fa:	f895 e001 	ldrb.w	lr, [r5, #1]
 80243fe:	f896 b001 	ldrb.w	fp, [r6, #1]
 8024402:	fb03 fe0e 	mul.w	lr, r3, lr
 8024406:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024408:	fb0c ee0b 	mla	lr, ip, fp, lr
 802440c:	f892 b001 	ldrb.w	fp, [r2, #1]
 8024410:	fb01 ee0b 	mla	lr, r1, fp, lr
 8024414:	f890 b001 	ldrb.w	fp, [r0, #1]
 8024418:	fb08 ee0b 	mla	lr, r8, fp, lr
 802441c:	f817 bc05 	ldrb.w	fp, [r7, #-5]
 8024420:	fb1b fb03 	smulbb	fp, fp, r3
 8024424:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 8024428:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802442a:	fb0e be0a 	mla	lr, lr, sl, fp
 802442e:	fa1f fe8e 	uxth.w	lr, lr
 8024432:	f10e 0b01 	add.w	fp, lr, #1
 8024436:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 802443a:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 802443e:	f807 ec05 	strb.w	lr, [r7, #-5]
 8024442:	78ad      	ldrb	r5, [r5, #2]
 8024444:	78b6      	ldrb	r6, [r6, #2]
 8024446:	436b      	muls	r3, r5
 8024448:	7895      	ldrb	r5, [r2, #2]
 802444a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802444c:	fb0c 3306 	mla	r3, ip, r6, r3
 8024450:	fb01 3305 	mla	r3, r1, r5, r3
 8024454:	7885      	ldrb	r5, [r0, #2]
 8024456:	fb08 3805 	mla	r8, r8, r5, r3
 802445a:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 802445e:	fb13 f302 	smulbb	r3, r3, r2
 8024462:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8024466:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8024468:	fb08 380a 	mla	r8, r8, sl, r3
 802446c:	fa1f f888 	uxth.w	r8, r8
 8024470:	f108 0301 	add.w	r3, r8, #1
 8024474:	eb03 2818 	add.w	r8, r3, r8, lsr #8
 8024478:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802447a:	4413      	add	r3, r2
 802447c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 802447e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8024482:	931d      	str	r3, [sp, #116]	; 0x74
 8024484:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8024486:	f807 8c04 	strb.w	r8, [r7, #-4]
 802448a:	4413      	add	r3, r2
 802448c:	931e      	str	r3, [sp, #120]	; 0x78
 802448e:	e6d6      	b.n	802423e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8024490:	b151      	cbz	r1, 80244a8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 8024492:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8024496:	4630      	mov	r0, r6
 8024498:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802449c:	4422      	add	r2, r4
 802449e:	4635      	mov	r5, r6
 80244a0:	e772      	b.n	8024388 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 80244a2:	4630      	mov	r0, r6
 80244a4:	4632      	mov	r2, r6
 80244a6:	e76f      	b.n	8024388 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 80244a8:	4630      	mov	r0, r6
 80244aa:	4632      	mov	r2, r6
 80244ac:	e7f7      	b.n	802449e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 80244ae:	b013      	add	sp, #76	; 0x4c
 80244b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080244b4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 80244b4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80244b8:	784c      	ldrb	r4, [r1, #1]
 80244ba:	f891 a002 	ldrb.w	sl, [r1, #2]
 80244be:	0224      	lsls	r4, r4, #8
 80244c0:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 80244c4:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 80244c8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80244cc:	f891 a000 	ldrb.w	sl, [r1]
 80244d0:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
 80244d4:	ea44 040a 	orr.w	r4, r4, sl
 80244d8:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
 80244dc:	e9dd c50c 	ldrd	ip, r5, [sp, #48]	; 0x30
 80244e0:	9401      	str	r4, [sp, #4]
 80244e2:	fb05 c70e 	mla	r7, r5, lr, ip
 80244e6:	2d00      	cmp	r5, #0
 80244e8:	eb02 0807 	add.w	r8, r2, r7
 80244ec:	db72      	blt.n	80245d4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 80244ee:	45a9      	cmp	r9, r5
 80244f0:	dd70      	ble.n	80245d4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 80244f2:	f1bc 0f00 	cmp.w	ip, #0
 80244f6:	db6b      	blt.n	80245d0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 80244f8:	45e6      	cmp	lr, ip
 80244fa:	dd69      	ble.n	80245d0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 80244fc:	5dd7      	ldrb	r7, [r2, r7]
 80244fe:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8024502:	441f      	add	r7, r3
 8024504:	f11c 0201 	adds.w	r2, ip, #1
 8024508:	d467      	bmi.n	80245da <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 802450a:	4596      	cmp	lr, r2
 802450c:	dd65      	ble.n	80245da <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 802450e:	2800      	cmp	r0, #0
 8024510:	d063      	beq.n	80245da <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 8024512:	f898 4001 	ldrb.w	r4, [r8, #1]
 8024516:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802451a:	441c      	add	r4, r3
 802451c:	3501      	adds	r5, #1
 802451e:	d460      	bmi.n	80245e2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 8024520:	45a9      	cmp	r9, r5
 8024522:	dd5e      	ble.n	80245e2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 8024524:	2e00      	cmp	r6, #0
 8024526:	d05c      	beq.n	80245e2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 8024528:	f1bc 0f00 	cmp.w	ip, #0
 802452c:	db57      	blt.n	80245de <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 802452e:	45e6      	cmp	lr, ip
 8024530:	dd55      	ble.n	80245de <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 8024532:	f818 500e 	ldrb.w	r5, [r8, lr]
 8024536:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802453a:	441d      	add	r5, r3
 802453c:	f11c 0201 	adds.w	r2, ip, #1
 8024540:	d452      	bmi.n	80245e8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 8024542:	4596      	cmp	lr, r2
 8024544:	dd50      	ble.n	80245e8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 8024546:	2800      	cmp	r0, #0
 8024548:	d04e      	beq.n	80245e8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 802454a:	44c6      	add	lr, r8
 802454c:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8024550:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024554:	4413      	add	r3, r2
 8024556:	b280      	uxth	r0, r0
 8024558:	f897 8000 	ldrb.w	r8, [r7]
 802455c:	b2b2      	uxth	r2, r6
 802455e:	fb00 f602 	mul.w	r6, r0, r2
 8024562:	0100      	lsls	r0, r0, #4
 8024564:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 8024568:	f5c0 7e80 	rsb	lr, r0, #256	; 0x100
 802456c:	1b80      	subs	r0, r0, r6
 802456e:	fa1f fc82 	uxth.w	ip, r2
 8024572:	b282      	uxth	r2, r0
 8024574:	7820      	ldrb	r0, [r4, #0]
 8024576:	ebae 0e0c 	sub.w	lr, lr, ip
 802457a:	4350      	muls	r0, r2
 802457c:	fa1f fe8e 	uxth.w	lr, lr
 8024580:	fb0e 0808 	mla	r8, lr, r8, r0
 8024584:	7828      	ldrb	r0, [r5, #0]
 8024586:	fb0c 8800 	mla	r8, ip, r0, r8
 802458a:	7818      	ldrb	r0, [r3, #0]
 802458c:	fb06 8000 	mla	r0, r6, r0, r8
 8024590:	1200      	asrs	r0, r0, #8
 8024592:	7008      	strb	r0, [r1, #0]
 8024594:	7860      	ldrb	r0, [r4, #1]
 8024596:	f897 8001 	ldrb.w	r8, [r7, #1]
 802459a:	4350      	muls	r0, r2
 802459c:	fb0e 0808 	mla	r8, lr, r8, r0
 80245a0:	7868      	ldrb	r0, [r5, #1]
 80245a2:	fb0c 8800 	mla	r8, ip, r0, r8
 80245a6:	7858      	ldrb	r0, [r3, #1]
 80245a8:	fb06 8000 	mla	r0, r6, r0, r8
 80245ac:	1200      	asrs	r0, r0, #8
 80245ae:	7048      	strb	r0, [r1, #1]
 80245b0:	78a0      	ldrb	r0, [r4, #2]
 80245b2:	78bf      	ldrb	r7, [r7, #2]
 80245b4:	4350      	muls	r0, r2
 80245b6:	78aa      	ldrb	r2, [r5, #2]
 80245b8:	fb0e 0007 	mla	r0, lr, r7, r0
 80245bc:	fb0c 0c02 	mla	ip, ip, r2, r0
 80245c0:	789a      	ldrb	r2, [r3, #2]
 80245c2:	fb06 c202 	mla	r2, r6, r2, ip
 80245c6:	1212      	asrs	r2, r2, #8
 80245c8:	708a      	strb	r2, [r1, #2]
 80245ca:	b002      	add	sp, #8
 80245cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80245d0:	af01      	add	r7, sp, #4
 80245d2:	e797      	b.n	8024504 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 80245d4:	ac01      	add	r4, sp, #4
 80245d6:	4627      	mov	r7, r4
 80245d8:	e7a0      	b.n	802451c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 80245da:	ac01      	add	r4, sp, #4
 80245dc:	e79e      	b.n	802451c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 80245de:	ad01      	add	r5, sp, #4
 80245e0:	e7ac      	b.n	802453c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x88>
 80245e2:	ab01      	add	r3, sp, #4
 80245e4:	461d      	mov	r5, r3
 80245e6:	e7b6      	b.n	8024556 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>
 80245e8:	ab01      	add	r3, sp, #4
 80245ea:	e7b4      	b.n	8024556 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>

080245ec <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80245ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80245f0:	b08d      	sub	sp, #52	; 0x34
 80245f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80245f6:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
 80245fa:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80245fc:	900b      	str	r0, [sp, #44]	; 0x2c
 80245fe:	9306      	str	r3, [sp, #24]
 8024600:	6850      	ldr	r0, [r2, #4]
 8024602:	6812      	ldr	r2, [r2, #0]
 8024604:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8024606:	e9dd 131c 	ldrd	r1, r3, [sp, #112]	; 0x70
 802460a:	fb00 1303 	mla	r3, r0, r3, r1
 802460e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024612:	18d3      	adds	r3, r2, r3
 8024614:	9307      	str	r3, [sp, #28]
 8024616:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8024618:	681b      	ldr	r3, [r3, #0]
 802461a:	9308      	str	r3, [sp, #32]
 802461c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 802461e:	685d      	ldr	r5, [r3, #4]
 8024620:	3504      	adds	r5, #4
 8024622:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024624:	2b00      	cmp	r3, #0
 8024626:	dc03      	bgt.n	8024630 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 8024628:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802462a:	2b00      	cmp	r3, #0
 802462c:	f340 81e6 	ble.w	80249fc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 8024630:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8024632:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024636:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802463a:	1e48      	subs	r0, r1, #1
 802463c:	1e56      	subs	r6, r2, #1
 802463e:	9b06      	ldr	r3, [sp, #24]
 8024640:	2b00      	cmp	r3, #0
 8024642:	f340 80bd 	ble.w	80247c0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8024646:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8024648:	1427      	asrs	r7, r4, #16
 802464a:	ea4f 4323 	mov.w	r3, r3, asr #16
 802464e:	d406      	bmi.n	802465e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8024650:	4287      	cmp	r7, r0
 8024652:	da04      	bge.n	802465e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8024654:	2b00      	cmp	r3, #0
 8024656:	db02      	blt.n	802465e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8024658:	42b3      	cmp	r3, r6
 802465a:	f2c0 80b2 	blt.w	80247c2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 802465e:	3701      	adds	r7, #1
 8024660:	f100 80a1 	bmi.w	80247a6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8024664:	42b9      	cmp	r1, r7
 8024666:	f2c0 809e 	blt.w	80247a6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 802466a:	3301      	adds	r3, #1
 802466c:	f100 809b 	bmi.w	80247a6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8024670:	429a      	cmp	r2, r3
 8024672:	f2c0 8098 	blt.w	80247a6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8024676:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 802467a:	f1bb 0f00 	cmp.w	fp, #0
 802467e:	f340 80bf 	ble.w	8024800 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8024682:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8024684:	981e      	ldr	r0, [sp, #120]	; 0x78
 8024686:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8024688:	f3c2 3103 	ubfx	r1, r2, #12, #4
 802468c:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 8024690:	1420      	asrs	r0, r4, #16
 8024692:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8024694:	ea4f 4723 	mov.w	r7, r3, asr #16
 8024698:	f3c4 3303 	ubfx	r3, r4, #12, #4
 802469c:	6892      	ldr	r2, [r2, #8]
 802469e:	f100 8103 	bmi.w	80248a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 80246a2:	f102 3eff 	add.w	lr, r2, #4294967295
 80246a6:	4570      	cmp	r0, lr
 80246a8:	f280 80fe 	bge.w	80248a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 80246ac:	2f00      	cmp	r7, #0
 80246ae:	f2c0 80fb 	blt.w	80248a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 80246b2:	f10c 3eff 	add.w	lr, ip, #4294967295
 80246b6:	4577      	cmp	r7, lr
 80246b8:	f280 80f6 	bge.w	80248a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 80246bc:	b212      	sxth	r2, r2
 80246be:	fb07 0002 	mla	r0, r7, r2, r0
 80246c2:	9f08      	ldr	r7, [sp, #32]
 80246c4:	f817 8000 	ldrb.w	r8, [r7, r0]
 80246c8:	eb07 0e00 	add.w	lr, r7, r0
 80246cc:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80246d0:	eb05 0c08 	add.w	ip, r5, r8
 80246d4:	2b00      	cmp	r3, #0
 80246d6:	f000 80d8 	beq.w	802488a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 80246da:	f89e 7001 	ldrb.w	r7, [lr, #1]
 80246de:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80246e2:	442f      	add	r7, r5
 80246e4:	2900      	cmp	r1, #0
 80246e6:	f000 80d9 	beq.w	802489c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80246ea:	eb0e 0002 	add.w	r0, lr, r2
 80246ee:	f81e 2002 	ldrb.w	r2, [lr, r2]
 80246f2:	7840      	ldrb	r0, [r0, #1]
 80246f4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80246f8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80246fc:	442a      	add	r2, r5
 80246fe:	4428      	add	r0, r5
 8024700:	b29b      	uxth	r3, r3
 8024702:	f815 a008 	ldrb.w	sl, [r5, r8]
 8024706:	b289      	uxth	r1, r1
 8024708:	f897 8000 	ldrb.w	r8, [r7]
 802470c:	fb03 f901 	mul.w	r9, r3, r1
 8024710:	011b      	lsls	r3, r3, #4
 8024712:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8024716:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 802471a:	eba3 0309 	sub.w	r3, r3, r9
 802471e:	b289      	uxth	r1, r1
 8024720:	b29b      	uxth	r3, r3
 8024722:	ebae 0e01 	sub.w	lr, lr, r1
 8024726:	fb03 f808 	mul.w	r8, r3, r8
 802472a:	fa1f fe8e 	uxth.w	lr, lr
 802472e:	fb0e 880a 	mla	r8, lr, sl, r8
 8024732:	f892 a000 	ldrb.w	sl, [r2]
 8024736:	fb01 880a 	mla	r8, r1, sl, r8
 802473a:	f890 a000 	ldrb.w	sl, [r0]
 802473e:	fb09 880a 	mla	r8, r9, sl, r8
 8024742:	ea4f 2828 	mov.w	r8, r8, asr #8
 8024746:	f886 8000 	strb.w	r8, [r6]
 802474a:	f897 8001 	ldrb.w	r8, [r7, #1]
 802474e:	f89c a001 	ldrb.w	sl, [ip, #1]
 8024752:	fb03 f808 	mul.w	r8, r3, r8
 8024756:	fb0e 880a 	mla	r8, lr, sl, r8
 802475a:	f892 a001 	ldrb.w	sl, [r2, #1]
 802475e:	fb01 880a 	mla	r8, r1, sl, r8
 8024762:	f890 a001 	ldrb.w	sl, [r0, #1]
 8024766:	fb09 880a 	mla	r8, r9, sl, r8
 802476a:	ea4f 2828 	mov.w	r8, r8, asr #8
 802476e:	f886 8001 	strb.w	r8, [r6, #1]
 8024772:	78bf      	ldrb	r7, [r7, #2]
 8024774:	f89c c002 	ldrb.w	ip, [ip, #2]
 8024778:	437b      	muls	r3, r7
 802477a:	7892      	ldrb	r2, [r2, #2]
 802477c:	fb0e 330c 	mla	r3, lr, ip, r3
 8024780:	fb01 3102 	mla	r1, r1, r2, r3
 8024784:	7882      	ldrb	r2, [r0, #2]
 8024786:	fb09 1902 	mla	r9, r9, r2, r1
 802478a:	ea4f 2929 	mov.w	r9, r9, asr #8
 802478e:	f886 9002 	strb.w	r9, [r6, #2]
 8024792:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8024794:	3603      	adds	r6, #3
 8024796:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8024798:	f10b 3bff 	add.w	fp, fp, #4294967295
 802479c:	441c      	add	r4, r3
 802479e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80247a0:	4413      	add	r3, r2
 80247a2:	9318      	str	r3, [sp, #96]	; 0x60
 80247a4:	e769      	b.n	802467a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80247a6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80247a8:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80247aa:	441c      	add	r4, r3
 80247ac:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80247ae:	443b      	add	r3, r7
 80247b0:	9318      	str	r3, [sp, #96]	; 0x60
 80247b2:	9b06      	ldr	r3, [sp, #24]
 80247b4:	3b01      	subs	r3, #1
 80247b6:	9306      	str	r3, [sp, #24]
 80247b8:	9b07      	ldr	r3, [sp, #28]
 80247ba:	3303      	adds	r3, #3
 80247bc:	9307      	str	r3, [sp, #28]
 80247be:	e73e      	b.n	802463e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 80247c0:	d026      	beq.n	8024810 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 80247c2:	9b06      	ldr	r3, [sp, #24]
 80247c4:	9819      	ldr	r0, [sp, #100]	; 0x64
 80247c6:	3b01      	subs	r3, #1
 80247c8:	fb00 4003 	mla	r0, r0, r3, r4
 80247cc:	1400      	asrs	r0, r0, #16
 80247ce:	f53f af52 	bmi.w	8024676 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80247d2:	3901      	subs	r1, #1
 80247d4:	4288      	cmp	r0, r1
 80247d6:	f6bf af4e 	bge.w	8024676 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80247da:	991a      	ldr	r1, [sp, #104]	; 0x68
 80247dc:	9818      	ldr	r0, [sp, #96]	; 0x60
 80247de:	fb01 0303 	mla	r3, r1, r3, r0
 80247e2:	141b      	asrs	r3, r3, #16
 80247e4:	f53f af47 	bmi.w	8024676 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80247e8:	3a01      	subs	r2, #1
 80247ea:	4293      	cmp	r3, r2
 80247ec:	f6bf af43 	bge.w	8024676 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80247f0:	9b07      	ldr	r3, [sp, #28]
 80247f2:	f8dd a018 	ldr.w	sl, [sp, #24]
 80247f6:	f103 0803 	add.w	r8, r3, #3
 80247fa:	f1ba 0f00 	cmp.w	sl, #0
 80247fe:	dc71      	bgt.n	80248e4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 8024800:	9b06      	ldr	r3, [sp, #24]
 8024802:	9a07      	ldr	r2, [sp, #28]
 8024804:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8024808:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802480c:	441a      	add	r2, r3
 802480e:	9207      	str	r2, [sp, #28]
 8024810:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024812:	2b00      	cmp	r3, #0
 8024814:	f340 80f2 	ble.w	80249fc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 8024818:	ee30 0a04 	vadd.f32	s0, s0, s8
 802481c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802481e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8024822:	eeb0 6a62 	vmov.f32	s12, s5
 8024826:	eec6 7a80 	vdiv.f32	s15, s13, s0
 802482a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802482e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8024832:	ee16 4a10 	vmov	r4, s12
 8024836:	eeb0 6a43 	vmov.f32	s12, s6
 802483a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802483e:	ed8d 6a18 	vstr	s12, [sp, #96]	; 0x60
 8024842:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8024846:	ee61 7a27 	vmul.f32	s15, s2, s15
 802484a:	ee77 2a62 	vsub.f32	s5, s14, s5
 802484e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8024852:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8024856:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802485a:	ee12 2a90 	vmov	r2, s5
 802485e:	eef0 2a47 	vmov.f32	s5, s14
 8024862:	fb92 f3f3 	sdiv	r3, r2, r3
 8024866:	ee13 2a10 	vmov	r2, s6
 802486a:	9319      	str	r3, [sp, #100]	; 0x64
 802486c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802486e:	eeb0 3a67 	vmov.f32	s6, s15
 8024872:	fb92 f3f3 	sdiv	r3, r2, r3
 8024876:	931a      	str	r3, [sp, #104]	; 0x68
 8024878:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802487a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802487c:	3b01      	subs	r3, #1
 802487e:	9309      	str	r3, [sp, #36]	; 0x24
 8024880:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8024882:	bf08      	it	eq
 8024884:	4613      	moveq	r3, r2
 8024886:	9306      	str	r3, [sp, #24]
 8024888:	e6cb      	b.n	8024622 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 802488a:	b151      	cbz	r1, 80248a2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 802488c:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8024890:	4660      	mov	r0, ip
 8024892:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024896:	442a      	add	r2, r5
 8024898:	4667      	mov	r7, ip
 802489a:	e731      	b.n	8024700 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 802489c:	4660      	mov	r0, ip
 802489e:	4662      	mov	r2, ip
 80248a0:	e72e      	b.n	8024700 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 80248a2:	4660      	mov	r0, ip
 80248a4:	4662      	mov	r2, ip
 80248a6:	e7f7      	b.n	8024898 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 80248a8:	f110 0e01 	adds.w	lr, r0, #1
 80248ac:	f53f af71 	bmi.w	8024792 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 80248b0:	4572      	cmp	r2, lr
 80248b2:	f6ff af6e 	blt.w	8024792 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 80248b6:	f117 0e01 	adds.w	lr, r7, #1
 80248ba:	f53f af6a 	bmi.w	8024792 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 80248be:	45f4      	cmp	ip, lr
 80248c0:	f6ff af67 	blt.w	8024792 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 80248c4:	b212      	sxth	r2, r2
 80248c6:	e9cd 3104 	strd	r3, r1, [sp, #16]
 80248ca:	fa0f f38c 	sxth.w	r3, ip
 80248ce:	9200      	str	r2, [sp, #0]
 80248d0:	4631      	mov	r1, r6
 80248d2:	9a08      	ldr	r2, [sp, #32]
 80248d4:	9301      	str	r3, [sp, #4]
 80248d6:	462b      	mov	r3, r5
 80248d8:	e9cd 0702 	strd	r0, r7, [sp, #8]
 80248dc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80248de:	f7ff fde9 	bl	80244b4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 80248e2:	e756      	b.n	8024792 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 80248e4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80248e6:	1426      	asrs	r6, r4, #16
 80248e8:	9818      	ldr	r0, [sp, #96]	; 0x60
 80248ea:	f3c4 3303 	ubfx	r3, r4, #12, #4
 80248ee:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80248f2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80248f4:	1400      	asrs	r0, r0, #16
 80248f6:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80248fa:	fb02 6000 	mla	r0, r2, r0, r6
 80248fe:	9e08      	ldr	r6, [sp, #32]
 8024900:	f816 e000 	ldrb.w	lr, [r6, r0]
 8024904:	eb06 0c00 	add.w	ip, r6, r0
 8024908:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 802490c:	eb05 070e 	add.w	r7, r5, lr
 8024910:	2b00      	cmp	r3, #0
 8024912:	d064      	beq.n	80249de <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 8024914:	f89c 6001 	ldrb.w	r6, [ip, #1]
 8024918:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 802491c:	442e      	add	r6, r5
 802491e:	2900      	cmp	r1, #0
 8024920:	d066      	beq.n	80249f0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x404>
 8024922:	eb0c 0002 	add.w	r0, ip, r2
 8024926:	f81c 2002 	ldrb.w	r2, [ip, r2]
 802492a:	7840      	ldrb	r0, [r0, #1]
 802492c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024930:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8024934:	442a      	add	r2, r5
 8024936:	4428      	add	r0, r5
 8024938:	b29b      	uxth	r3, r3
 802493a:	f815 b00e 	ldrb.w	fp, [r5, lr]
 802493e:	b289      	uxth	r1, r1
 8024940:	f896 e000 	ldrb.w	lr, [r6]
 8024944:	f108 0803 	add.w	r8, r8, #3
 8024948:	f10a 3aff 	add.w	sl, sl, #4294967295
 802494c:	fb03 f901 	mul.w	r9, r3, r1
 8024950:	011b      	lsls	r3, r3, #4
 8024952:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8024956:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 802495a:	eba3 0309 	sub.w	r3, r3, r9
 802495e:	b289      	uxth	r1, r1
 8024960:	b29b      	uxth	r3, r3
 8024962:	ebac 0c01 	sub.w	ip, ip, r1
 8024966:	fb03 fe0e 	mul.w	lr, r3, lr
 802496a:	fa1f fc8c 	uxth.w	ip, ip
 802496e:	fb0c ee0b 	mla	lr, ip, fp, lr
 8024972:	f892 b000 	ldrb.w	fp, [r2]
 8024976:	fb01 ee0b 	mla	lr, r1, fp, lr
 802497a:	f890 b000 	ldrb.w	fp, [r0]
 802497e:	fb09 ee0b 	mla	lr, r9, fp, lr
 8024982:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8024986:	f808 ec06 	strb.w	lr, [r8, #-6]
 802498a:	f896 e001 	ldrb.w	lr, [r6, #1]
 802498e:	f897 b001 	ldrb.w	fp, [r7, #1]
 8024992:	fb03 fe0e 	mul.w	lr, r3, lr
 8024996:	fb0c ee0b 	mla	lr, ip, fp, lr
 802499a:	f892 b001 	ldrb.w	fp, [r2, #1]
 802499e:	fb01 ee0b 	mla	lr, r1, fp, lr
 80249a2:	f890 b001 	ldrb.w	fp, [r0, #1]
 80249a6:	fb09 ee0b 	mla	lr, r9, fp, lr
 80249aa:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80249ae:	f808 ec05 	strb.w	lr, [r8, #-5]
 80249b2:	78b6      	ldrb	r6, [r6, #2]
 80249b4:	78bf      	ldrb	r7, [r7, #2]
 80249b6:	4373      	muls	r3, r6
 80249b8:	7896      	ldrb	r6, [r2, #2]
 80249ba:	7882      	ldrb	r2, [r0, #2]
 80249bc:	fb0c 3307 	mla	r3, ip, r7, r3
 80249c0:	fb01 3306 	mla	r3, r1, r6, r3
 80249c4:	fb09 3902 	mla	r9, r9, r2, r3
 80249c8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80249ca:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80249cc:	441c      	add	r4, r3
 80249ce:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80249d0:	ea4f 2929 	mov.w	r9, r9, asr #8
 80249d4:	4413      	add	r3, r2
 80249d6:	f808 9c04 	strb.w	r9, [r8, #-4]
 80249da:	9318      	str	r3, [sp, #96]	; 0x60
 80249dc:	e70d      	b.n	80247fa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 80249de:	b151      	cbz	r1, 80249f6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 80249e0:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80249e4:	4638      	mov	r0, r7
 80249e6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80249ea:	442a      	add	r2, r5
 80249ec:	463e      	mov	r6, r7
 80249ee:	e7a3      	b.n	8024938 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 80249f0:	4638      	mov	r0, r7
 80249f2:	463a      	mov	r2, r7
 80249f4:	e7a0      	b.n	8024938 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 80249f6:	4638      	mov	r0, r7
 80249f8:	463a      	mov	r2, r7
 80249fa:	e7f7      	b.n	80249ec <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x400>
 80249fc:	b00d      	add	sp, #52	; 0x34
 80249fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024a02 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 8024a02:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024a06:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	; 0x38
 8024a0a:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 8024a0e:	2d00      	cmp	r5, #0
 8024a10:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 8024a14:	fb05 700c 	mla	r0, r5, ip, r7
 8024a18:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 8024a1c:	f89d e044 	ldrb.w	lr, [sp, #68]	; 0x44
 8024a20:	eb02 0800 	add.w	r8, r2, r0
 8024a24:	f2c0 8118 	blt.w	8024c58 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 8024a28:	45a9      	cmp	r9, r5
 8024a2a:	f340 8115 	ble.w	8024c58 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 8024a2e:	2f00      	cmp	r7, #0
 8024a30:	f2c0 8110 	blt.w	8024c54 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 8024a34:	45bc      	cmp	ip, r7
 8024a36:	f340 810d 	ble.w	8024c54 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 8024a3a:	5c12      	ldrb	r2, [r2, r0]
 8024a3c:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8024a40:	1c7a      	adds	r2, r7, #1
 8024a42:	f100 810c 	bmi.w	8024c5e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 8024a46:	4594      	cmp	ip, r2
 8024a48:	f340 8109 	ble.w	8024c5e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 8024a4c:	2c00      	cmp	r4, #0
 8024a4e:	f000 8108 	beq.w	8024c62 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x260>
 8024a52:	f898 2001 	ldrb.w	r2, [r8, #1]
 8024a56:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8024a5a:	3501      	adds	r5, #1
 8024a5c:	f100 8105 	bmi.w	8024c6a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 8024a60:	45a9      	cmp	r9, r5
 8024a62:	f340 8102 	ble.w	8024c6a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 8024a66:	f1be 0f00 	cmp.w	lr, #0
 8024a6a:	f000 8101 	beq.w	8024c70 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x26e>
 8024a6e:	2f00      	cmp	r7, #0
 8024a70:	f2c0 80f9 	blt.w	8024c66 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 8024a74:	45bc      	cmp	ip, r7
 8024a76:	f340 80f6 	ble.w	8024c66 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 8024a7a:	f818 200c 	ldrb.w	r2, [r8, ip]
 8024a7e:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8024a82:	3701      	adds	r7, #1
 8024a84:	f100 80f7 	bmi.w	8024c76 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 8024a88:	45bc      	cmp	ip, r7
 8024a8a:	f340 80f4 	ble.w	8024c76 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 8024a8e:	2c00      	cmp	r4, #0
 8024a90:	f000 80f3 	beq.w	8024c7a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x278>
 8024a94:	44c4      	add	ip, r8
 8024a96:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8024a9a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8024a9e:	fa1f fc84 	uxth.w	ip, r4
 8024aa2:	fa1f f48e 	uxth.w	r4, lr
 8024aa6:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 8024aaa:	fb04 fe0c 	mul.w	lr, r4, ip
 8024aae:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8024ab2:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8024ab6:	ebce 1404 	rsb	r4, lr, r4, lsl #4
 8024aba:	ebac 070e 	sub.w	r7, ip, lr
 8024abe:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 8024ac2:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8024ac6:	b2a4      	uxth	r4, r4
 8024ac8:	b2bf      	uxth	r7, r7
 8024aca:	1b1b      	subs	r3, r3, r4
 8024acc:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8024ad0:	fb07 fc0a 	mul.w	ip, r7, sl
 8024ad4:	b29b      	uxth	r3, r3
 8024ad6:	fb03 cc0b 	mla	ip, r3, fp, ip
 8024ada:	9300      	str	r3, [sp, #0]
 8024adc:	fb04 cc09 	mla	ip, r4, r9, ip
 8024ae0:	fb0e cc08 	mla	ip, lr, r8, ip
 8024ae4:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8024ae8:	9301      	str	r3, [sp, #4]
 8024aea:	2b00      	cmp	r3, #0
 8024aec:	f000 80af 	beq.w	8024c4e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x24c>
 8024af0:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8024af4:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8024af8:	fb0b fc0c 	mul.w	ip, fp, ip
 8024afc:	fb0b f606 	mul.w	r6, fp, r6
 8024b00:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8024b04:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8024b08:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8024b0c:	44dc      	add	ip, fp
 8024b0e:	f000 1bff 	and.w	fp, r0, #16711935	; 0xff00ff
 8024b12:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8024b16:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024b1a:	fb0a fb0b 	mul.w	fp, sl, fp
 8024b1e:	fb0a fa00 	mul.w	sl, sl, r0
 8024b22:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 8024b26:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8024b2a:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8024b2e:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8024b32:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8024b36:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8024b3a:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8024b3e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024b42:	0a36      	lsrs	r6, r6, #8
 8024b44:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024b48:	44dc      	add	ip, fp
 8024b4a:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8024b4e:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8024b52:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8024b56:	fb09 fb0b 	mul.w	fp, r9, fp
 8024b5a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024b5e:	fb09 f905 	mul.w	r9, r9, r5
 8024b62:	ea4f 201b 	mov.w	r0, fp, lsr #8
 8024b66:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024b6a:	f509 7580 	add.w	r5, r9, #256	; 0x100
 8024b6e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8024b72:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8024b76:	fb0c fc07 	mul.w	ip, ip, r7
 8024b7a:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 8024b7e:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 8024b82:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8024b86:	4458      	add	r0, fp
 8024b88:	fb08 f505 	mul.w	r5, r8, r5
 8024b8c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8024b90:	fb08 f802 	mul.w	r8, r8, r2
 8024b94:	0a00      	lsrs	r0, r0, #8
 8024b96:	0a2a      	lsrs	r2, r5, #8
 8024b98:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 8024b9c:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8024ba0:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8024ba4:	4415      	add	r5, r2
 8024ba6:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8024baa:	0a2d      	lsrs	r5, r5, #8
 8024bac:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8024bb0:	9a00      	ldr	r2, [sp, #0]
 8024bb2:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8024bb6:	fb03 cc02 	mla	ip, r3, r2, ip
 8024bba:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8024bbe:	9b01      	ldr	r3, [sp, #4]
 8024bc0:	fb05 c50e 	mla	r5, r5, lr, ip
 8024bc4:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8024bc8:	fb00 5004 	mla	r0, r0, r4, r5
 8024bcc:	0a00      	lsrs	r0, r0, #8
 8024bce:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 8024bd2:	f40a 407f 	and.w	r0, sl, #65280	; 0xff00
 8024bd6:	4378      	muls	r0, r7
 8024bd8:	fb02 0006 	mla	r0, r2, r6, r0
 8024bdc:	fb0e 0e08 	mla	lr, lr, r8, r0
 8024be0:	f409 407f 	and.w	r0, r9, #65280	; 0xff00
 8024be4:	fb04 e000 	mla	r0, r4, r0, lr
 8024be8:	0a00      	lsrs	r0, r0, #8
 8024bea:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8024bee:	4328      	orrs	r0, r5
 8024bf0:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 8024bf4:	b2ad      	uxth	r5, r5
 8024bf6:	b2c4      	uxtb	r4, r0
 8024bf8:	436b      	muls	r3, r5
 8024bfa:	fb14 f405 	smulbb	r4, r4, r5
 8024bfe:	1c5a      	adds	r2, r3, #1
 8024c00:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8024c04:	780b      	ldrb	r3, [r1, #0]
 8024c06:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 8024c0a:	b2d2      	uxtb	r2, r2
 8024c0c:	fb03 4302 	mla	r3, r3, r2, r4
 8024c10:	b29b      	uxth	r3, r3
 8024c12:	1c5c      	adds	r4, r3, #1
 8024c14:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8024c18:	784c      	ldrb	r4, [r1, #1]
 8024c1a:	fb14 f402 	smulbb	r4, r4, r2
 8024c1e:	121b      	asrs	r3, r3, #8
 8024c20:	700b      	strb	r3, [r1, #0]
 8024c22:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8024c26:	fb03 4305 	mla	r3, r3, r5, r4
 8024c2a:	b29b      	uxth	r3, r3
 8024c2c:	1c5c      	adds	r4, r3, #1
 8024c2e:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8024c32:	0c04      	lsrs	r4, r0, #16
 8024c34:	7888      	ldrb	r0, [r1, #2]
 8024c36:	121b      	asrs	r3, r3, #8
 8024c38:	fb10 f002 	smulbb	r0, r0, r2
 8024c3c:	704b      	strb	r3, [r1, #1]
 8024c3e:	fb04 0005 	mla	r0, r4, r5, r0
 8024c42:	b280      	uxth	r0, r0
 8024c44:	1c43      	adds	r3, r0, #1
 8024c46:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8024c4a:	1200      	asrs	r0, r0, #8
 8024c4c:	7088      	strb	r0, [r1, #2]
 8024c4e:	b003      	add	sp, #12
 8024c50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024c54:	2600      	movs	r6, #0
 8024c56:	e6f3      	b.n	8024a40 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x3e>
 8024c58:	2000      	movs	r0, #0
 8024c5a:	4606      	mov	r6, r0
 8024c5c:	e6fd      	b.n	8024a5a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 8024c5e:	2000      	movs	r0, #0
 8024c60:	e6fb      	b.n	8024a5a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 8024c62:	4620      	mov	r0, r4
 8024c64:	e6f9      	b.n	8024a5a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 8024c66:	2500      	movs	r5, #0
 8024c68:	e70b      	b.n	8024a82 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x80>
 8024c6a:	2200      	movs	r2, #0
 8024c6c:	4615      	mov	r5, r2
 8024c6e:	e716      	b.n	8024a9e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 8024c70:	4672      	mov	r2, lr
 8024c72:	4675      	mov	r5, lr
 8024c74:	e713      	b.n	8024a9e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 8024c76:	2200      	movs	r2, #0
 8024c78:	e711      	b.n	8024a9e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 8024c7a:	4622      	mov	r2, r4
 8024c7c:	e70f      	b.n	8024a9e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>

08024c7e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024c7e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024c82:	b09f      	sub	sp, #124	; 0x7c
 8024c84:	921b      	str	r2, [sp, #108]	; 0x6c
 8024c86:	9309      	str	r3, [sp, #36]	; 0x24
 8024c88:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8024c8a:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8024c8e:	901d      	str	r0, [sp, #116]	; 0x74
 8024c90:	931c      	str	r3, [sp, #112]	; 0x70
 8024c92:	6850      	ldr	r0, [r2, #4]
 8024c94:	9119      	str	r1, [sp, #100]	; 0x64
 8024c96:	6812      	ldr	r2, [r2, #0]
 8024c98:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8024c9a:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8024c9e:	fb00 1303 	mla	r3, r0, r3, r1
 8024ca2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024ca6:	18d3      	adds	r3, r2, r3
 8024ca8:	930c      	str	r3, [sp, #48]	; 0x30
 8024caa:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8024cac:	681b      	ldr	r3, [r3, #0]
 8024cae:	9312      	str	r3, [sp, #72]	; 0x48
 8024cb0:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8024cb2:	685e      	ldr	r6, [r3, #4]
 8024cb4:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8024cb8:	3604      	adds	r6, #4
 8024cba:	930d      	str	r3, [sp, #52]	; 0x34
 8024cbc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8024cbe:	2b00      	cmp	r3, #0
 8024cc0:	dc03      	bgt.n	8024cca <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8024cc2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8024cc4:	2b00      	cmp	r3, #0
 8024cc6:	f340 8378 	ble.w	80253ba <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 8024cca:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8024ccc:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024cd0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024cd4:	1e48      	subs	r0, r1, #1
 8024cd6:	1e57      	subs	r7, r2, #1
 8024cd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024cda:	2b00      	cmp	r3, #0
 8024cdc:	f340 818c 	ble.w	8024ff8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8024ce0:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8024ce2:	142b      	asrs	r3, r5, #16
 8024ce4:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8024ce8:	d406      	bmi.n	8024cf8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8024cea:	4584      	cmp	ip, r0
 8024cec:	da04      	bge.n	8024cf8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8024cee:	2b00      	cmp	r3, #0
 8024cf0:	db02      	blt.n	8024cf8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8024cf2:	42bb      	cmp	r3, r7
 8024cf4:	f2c0 8181 	blt.w	8024ffa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8024cf8:	f11c 0c01 	adds.w	ip, ip, #1
 8024cfc:	f100 816f 	bmi.w	8024fde <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8024d00:	4561      	cmp	r1, ip
 8024d02:	f2c0 816c 	blt.w	8024fde <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8024d06:	3301      	adds	r3, #1
 8024d08:	f100 8169 	bmi.w	8024fde <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8024d0c:	429a      	cmp	r2, r3
 8024d0e:	f2c0 8166 	blt.w	8024fde <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8024d12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024d14:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8024d16:	931a      	str	r3, [sp, #104]	; 0x68
 8024d18:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8024d1a:	2b00      	cmp	r3, #0
 8024d1c:	f340 818c 	ble.w	8025038 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 8024d20:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8024d22:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8024d26:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8024d2a:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8024d2e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8024d30:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 8024d34:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8024d36:	141b      	asrs	r3, r3, #16
 8024d38:	f100 81d0 	bmi.w	80250dc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8024d3c:	f100 38ff 	add.w	r8, r0, #4294967295
 8024d40:	4543      	cmp	r3, r8
 8024d42:	f280 81cb 	bge.w	80250dc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8024d46:	f1bc 0f00 	cmp.w	ip, #0
 8024d4a:	f2c0 81c7 	blt.w	80250dc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8024d4e:	f10e 38ff 	add.w	r8, lr, #4294967295
 8024d52:	45c4      	cmp	ip, r8
 8024d54:	f280 81c2 	bge.w	80250dc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8024d58:	b200      	sxth	r0, r0
 8024d5a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8024d5c:	fb0c 3300 	mla	r3, ip, r0, r3
 8024d60:	eb04 0803 	add.w	r8, r4, r3
 8024d64:	5ce3      	ldrb	r3, [r4, r3]
 8024d66:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8024d6a:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8024d6e:	2a00      	cmp	r2, #0
 8024d70:	f000 81a9 	beq.w	80250c6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 8024d74:	f898 c001 	ldrb.w	ip, [r8, #1]
 8024d78:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8024d7c:	940e      	str	r4, [sp, #56]	; 0x38
 8024d7e:	0e24      	lsrs	r4, r4, #24
 8024d80:	9415      	str	r4, [sp, #84]	; 0x54
 8024d82:	b179      	cbz	r1, 8024da4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8024d84:	eb08 0c00 	add.w	ip, r8, r0
 8024d88:	f818 0000 	ldrb.w	r0, [r8, r0]
 8024d8c:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8024d90:	900a      	str	r0, [sp, #40]	; 0x28
 8024d92:	0e00      	lsrs	r0, r0, #24
 8024d94:	9013      	str	r0, [sp, #76]	; 0x4c
 8024d96:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8024d9a:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8024d9e:	900f      	str	r0, [sp, #60]	; 0x3c
 8024da0:	0e00      	lsrs	r0, r0, #24
 8024da2:	9016      	str	r0, [sp, #88]	; 0x58
 8024da4:	b292      	uxth	r2, r2
 8024da6:	9815      	ldr	r0, [sp, #84]	; 0x54
 8024da8:	b289      	uxth	r1, r1
 8024daa:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8024dac:	fb02 f901 	mul.w	r9, r2, r1
 8024db0:	0112      	lsls	r2, r2, #4
 8024db2:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8024db6:	eba2 0809 	sub.w	r8, r2, r9
 8024dba:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8024dbe:	b289      	uxth	r1, r1
 8024dc0:	fa1f f888 	uxth.w	r8, r8
 8024dc4:	1a52      	subs	r2, r2, r1
 8024dc6:	fb08 f000 	mul.w	r0, r8, r0
 8024dca:	b292      	uxth	r2, r2
 8024dcc:	fb02 000e 	mla	r0, r2, lr, r0
 8024dd0:	fb01 0004 	mla	r0, r1, r4, r0
 8024dd4:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8024dd6:	fb09 0004 	mla	r0, r9, r4, r0
 8024dda:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8024dde:	2800      	cmp	r0, #0
 8024de0:	f000 80f2 	beq.w	8024fc8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8024de4:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8024de8:	d01b      	beq.n	8024e22 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 8024dea:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8024dee:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024df2:	fb0e fa0a 	mul.w	sl, lr, sl
 8024df6:	fb0e fe03 	mul.w	lr, lr, r3
 8024dfa:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8024dfe:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8024e02:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8024e06:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024e0a:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8024e0e:	4453      	add	r3, sl
 8024e10:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024e14:	0a1b      	lsrs	r3, r3, #8
 8024e16:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8024e1a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024e1e:	ea43 030c 	orr.w	r3, r3, ip
 8024e22:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8024e24:	2cff      	cmp	r4, #255	; 0xff
 8024e26:	d021      	beq.n	8024e6c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8024e28:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8024e2a:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8024e2e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8024e30:	fb04 fb0b 	mul.w	fp, r4, fp
 8024e34:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8024e36:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8024e3a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8024e3c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8024e40:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8024e44:	fb04 fa0a 	mul.w	sl, r4, sl
 8024e48:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024e4c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8024e50:	44de      	add	lr, fp
 8024e52:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8024e56:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024e5a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024e5e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024e62:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024e66:	ea4e 040a 	orr.w	r4, lr, sl
 8024e6a:	940e      	str	r4, [sp, #56]	; 0x38
 8024e6c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8024e6e:	2cff      	cmp	r4, #255	; 0xff
 8024e70:	d021      	beq.n	8024eb6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8024e72:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8024e74:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8024e78:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8024e7a:	fb04 fb0b 	mul.w	fp, r4, fp
 8024e7e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8024e80:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8024e84:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8024e86:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8024e8a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8024e8e:	fb04 fa0a 	mul.w	sl, r4, sl
 8024e92:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024e96:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8024e9a:	44de      	add	lr, fp
 8024e9c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8024ea0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024ea4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024ea8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024eac:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024eb0:	ea4e 040a 	orr.w	r4, lr, sl
 8024eb4:	940a      	str	r4, [sp, #40]	; 0x28
 8024eb6:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8024eb8:	2cff      	cmp	r4, #255	; 0xff
 8024eba:	d021      	beq.n	8024f00 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 8024ebc:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8024ebe:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8024ec2:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8024ec4:	fb04 fb0b 	mul.w	fp, r4, fp
 8024ec8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8024eca:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8024ece:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8024ed0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8024ed4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8024ed8:	fb04 fa0a 	mul.w	sl, r4, sl
 8024edc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024ee0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8024ee4:	44de      	add	lr, fp
 8024ee6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8024eea:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024eee:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024ef2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024ef6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024efa:	ea4e 040a 	orr.w	r4, lr, sl
 8024efe:	940f      	str	r4, [sp, #60]	; 0x3c
 8024f00:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8024f02:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8024f06:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024f0a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8024f0e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8024f10:	fb08 fc0c 	mul.w	ip, r8, ip
 8024f14:	fb02 cc0e 	mla	ip, r2, lr, ip
 8024f18:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8024f1c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8024f1e:	fb01 cc0e 	mla	ip, r1, lr, ip
 8024f22:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8024f26:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8024f28:	fb09 cc0e 	mla	ip, r9, lr, ip
 8024f2c:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8024f30:	fb08 f80e 	mul.w	r8, r8, lr
 8024f34:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024f38:	fb02 8303 	mla	r3, r2, r3, r8
 8024f3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024f3e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024f42:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8024f46:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8024f48:	fb01 330a 	mla	r3, r1, sl, r3
 8024f4c:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 8024f50:	fb09 3901 	mla	r9, r9, r1, r3
 8024f54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024f56:	990d      	ldr	r1, [sp, #52]	; 0x34
 8024f58:	4343      	muls	r3, r0
 8024f5a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8024f5e:	1c58      	adds	r0, r3, #1
 8024f60:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8024f64:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8024f68:	ea4c 0c09 	orr.w	ip, ip, r9
 8024f6c:	783b      	ldrb	r3, [r7, #0]
 8024f6e:	fa5f f28c 	uxtb.w	r2, ip
 8024f72:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8024f76:	fb12 f201 	smulbb	r2, r2, r1
 8024f7a:	b2c0      	uxtb	r0, r0
 8024f7c:	fb03 2300 	mla	r3, r3, r0, r2
 8024f80:	b29b      	uxth	r3, r3
 8024f82:	1c5a      	adds	r2, r3, #1
 8024f84:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8024f88:	787a      	ldrb	r2, [r7, #1]
 8024f8a:	fb12 f200 	smulbb	r2, r2, r0
 8024f8e:	121b      	asrs	r3, r3, #8
 8024f90:	703b      	strb	r3, [r7, #0]
 8024f92:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8024f96:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8024f9a:	fb03 2301 	mla	r3, r3, r1, r2
 8024f9e:	b29b      	uxth	r3, r3
 8024fa0:	1c5a      	adds	r2, r3, #1
 8024fa2:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8024fa6:	121b      	asrs	r3, r3, #8
 8024fa8:	707b      	strb	r3, [r7, #1]
 8024faa:	78bb      	ldrb	r3, [r7, #2]
 8024fac:	fb13 f000 	smulbb	r0, r3, r0
 8024fb0:	fb0c 0c01 	mla	ip, ip, r1, r0
 8024fb4:	fa1f fc8c 	uxth.w	ip, ip
 8024fb8:	f10c 0301 	add.w	r3, ip, #1
 8024fbc:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8024fc0:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8024fc4:	f887 c002 	strb.w	ip, [r7, #2]
 8024fc8:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8024fca:	3703      	adds	r7, #3
 8024fcc:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8024fce:	441a      	add	r2, r3
 8024fd0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024fd2:	441d      	add	r5, r3
 8024fd4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8024fd6:	9229      	str	r2, [sp, #164]	; 0xa4
 8024fd8:	3b01      	subs	r3, #1
 8024fda:	931a      	str	r3, [sp, #104]	; 0x68
 8024fdc:	e69c      	b.n	8024d18 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8024fde:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8024fe0:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8024fe2:	441c      	add	r4, r3
 8024fe4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024fe6:	441d      	add	r5, r3
 8024fe8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024fea:	9429      	str	r4, [sp, #164]	; 0xa4
 8024fec:	3b01      	subs	r3, #1
 8024fee:	9309      	str	r3, [sp, #36]	; 0x24
 8024ff0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024ff2:	3303      	adds	r3, #3
 8024ff4:	930c      	str	r3, [sp, #48]	; 0x30
 8024ff6:	e66f      	b.n	8024cd8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8024ff8:	d026      	beq.n	8025048 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 8024ffa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024ffc:	982b      	ldr	r0, [sp, #172]	; 0xac
 8024ffe:	3b01      	subs	r3, #1
 8025000:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8025002:	fb00 4003 	mla	r0, r0, r3, r4
 8025006:	1400      	asrs	r0, r0, #16
 8025008:	f53f ae83 	bmi.w	8024d12 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802500c:	3901      	subs	r1, #1
 802500e:	4288      	cmp	r0, r1
 8025010:	f6bf ae7f 	bge.w	8024d12 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8025014:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8025016:	fb01 5303 	mla	r3, r1, r3, r5
 802501a:	141b      	asrs	r3, r3, #16
 802501c:	f53f ae79 	bmi.w	8024d12 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8025020:	3a01      	subs	r2, #1
 8025022:	4293      	cmp	r3, r2
 8025024:	f6bf ae75 	bge.w	8024d12 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8025028:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802502a:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 802502e:	f103 0e03 	add.w	lr, r3, #3
 8025032:	f1bb 0f00 	cmp.w	fp, #0
 8025036:	dc71      	bgt.n	802511c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8025038:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802503a:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802503e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025040:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8025044:	4423      	add	r3, r4
 8025046:	930c      	str	r3, [sp, #48]	; 0x30
 8025048:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802504a:	2b00      	cmp	r3, #0
 802504c:	f340 81b5 	ble.w	80253ba <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 8025050:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025054:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025056:	ee30 0a04 	vadd.f32	s0, s0, s8
 802505a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802505e:	eef0 6a62 	vmov.f32	s13, s5
 8025062:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8025066:	ee31 1a05 	vadd.f32	s2, s2, s10
 802506a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802506e:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8025072:	eef0 6a43 	vmov.f32	s13, s6
 8025076:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802507a:	ee16 5a90 	vmov	r5, s13
 802507e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8025082:	ee61 7a27 	vmul.f32	s15, s2, s15
 8025086:	ee77 2a62 	vsub.f32	s5, s14, s5
 802508a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802508e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8025092:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8025096:	ee12 2a90 	vmov	r2, s5
 802509a:	eef0 2a47 	vmov.f32	s5, s14
 802509e:	fb92 f3f3 	sdiv	r3, r2, r3
 80250a2:	ee13 2a10 	vmov	r2, s6
 80250a6:	932b      	str	r3, [sp, #172]	; 0xac
 80250a8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80250aa:	eeb0 3a67 	vmov.f32	s6, s15
 80250ae:	fb92 f3f3 	sdiv	r3, r2, r3
 80250b2:	932c      	str	r3, [sp, #176]	; 0xb0
 80250b4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80250b6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80250b8:	3b01      	subs	r3, #1
 80250ba:	9319      	str	r3, [sp, #100]	; 0x64
 80250bc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80250be:	bf08      	it	eq
 80250c0:	4613      	moveq	r3, r2
 80250c2:	9309      	str	r3, [sp, #36]	; 0x24
 80250c4:	e5fa      	b.n	8024cbc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 80250c6:	2900      	cmp	r1, #0
 80250c8:	f43f ae6c 	beq.w	8024da4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 80250cc:	f818 0000 	ldrb.w	r0, [r8, r0]
 80250d0:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80250d4:	900a      	str	r0, [sp, #40]	; 0x28
 80250d6:	0e00      	lsrs	r0, r0, #24
 80250d8:	9013      	str	r0, [sp, #76]	; 0x4c
 80250da:	e663      	b.n	8024da4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 80250dc:	f113 0801 	adds.w	r8, r3, #1
 80250e0:	f53f af72 	bmi.w	8024fc8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 80250e4:	4540      	cmp	r0, r8
 80250e6:	f6ff af6f 	blt.w	8024fc8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 80250ea:	f11c 0801 	adds.w	r8, ip, #1
 80250ee:	f53f af6b 	bmi.w	8024fc8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 80250f2:	45c6      	cmp	lr, r8
 80250f4:	f6ff af68 	blt.w	8024fc8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 80250f8:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80250fa:	b200      	sxth	r0, r0
 80250fc:	9302      	str	r3, [sp, #8]
 80250fe:	fa0f f38e 	sxth.w	r3, lr
 8025102:	9000      	str	r0, [sp, #0]
 8025104:	9301      	str	r3, [sp, #4]
 8025106:	4633      	mov	r3, r6
 8025108:	981d      	ldr	r0, [sp, #116]	; 0x74
 802510a:	e9cd 1405 	strd	r1, r4, [sp, #20]
 802510e:	e9cd c203 	strd	ip, r2, [sp, #12]
 8025112:	4639      	mov	r1, r7
 8025114:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8025116:	f7ff fc74 	bl	8024a02 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 802511a:	e755      	b.n	8024fc8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 802511c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802511e:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8025122:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8025124:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8025128:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802512a:	1427      	asrs	r7, r4, #16
 802512c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802512e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025132:	142b      	asrs	r3, r5, #16
 8025134:	fb01 7303 	mla	r3, r1, r3, r7
 8025138:	18e7      	adds	r7, r4, r3
 802513a:	5ce3      	ldrb	r3, [r4, r3]
 802513c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8025140:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8025144:	2a00      	cmp	r2, #0
 8025146:	f000 812e 	beq.w	80253a6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x728>
 802514a:	f897 8001 	ldrb.w	r8, [r7, #1]
 802514e:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 8025152:	9410      	str	r4, [sp, #64]	; 0x40
 8025154:	0e24      	lsrs	r4, r4, #24
 8025156:	9417      	str	r4, [sp, #92]	; 0x5c
 8025158:	b170      	cbz	r0, 8025178 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 802515a:	eb07 0801 	add.w	r8, r7, r1
 802515e:	5c79      	ldrb	r1, [r7, r1]
 8025160:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025164:	910b      	str	r1, [sp, #44]	; 0x2c
 8025166:	0e09      	lsrs	r1, r1, #24
 8025168:	9114      	str	r1, [sp, #80]	; 0x50
 802516a:	f898 1001 	ldrb.w	r1, [r8, #1]
 802516e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025172:	9111      	str	r1, [sp, #68]	; 0x44
 8025174:	0e09      	lsrs	r1, r1, #24
 8025176:	9118      	str	r1, [sp, #96]	; 0x60
 8025178:	b292      	uxth	r2, r2
 802517a:	9917      	ldr	r1, [sp, #92]	; 0x5c
 802517c:	b280      	uxth	r0, r0
 802517e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8025180:	fb02 f900 	mul.w	r9, r2, r0
 8025184:	0112      	lsls	r2, r2, #4
 8025186:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 802518a:	eba2 0809 	sub.w	r8, r2, r9
 802518e:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8025192:	b280      	uxth	r0, r0
 8025194:	fa1f f888 	uxth.w	r8, r8
 8025198:	1a12      	subs	r2, r2, r0
 802519a:	fb08 f101 	mul.w	r1, r8, r1
 802519e:	b292      	uxth	r2, r2
 80251a0:	fb02 110c 	mla	r1, r2, ip, r1
 80251a4:	fb00 1104 	mla	r1, r0, r4, r1
 80251a8:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80251aa:	fb09 1104 	mla	r1, r9, r4, r1
 80251ae:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80251b2:	2900      	cmp	r1, #0
 80251b4:	f000 80ec 	beq.w	8025390 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 80251b8:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80251bc:	d019      	beq.n	80251f2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x574>
 80251be:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80251c2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80251c6:	fb0c fa0a 	mul.w	sl, ip, sl
 80251ca:	fb0c fc03 	mul.w	ip, ip, r3
 80251ce:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80251d2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80251d6:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 80251da:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80251de:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80251e2:	4453      	add	r3, sl
 80251e4:	0a3f      	lsrs	r7, r7, #8
 80251e6:	0a1b      	lsrs	r3, r3, #8
 80251e8:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80251ec:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80251f0:	433b      	orrs	r3, r7
 80251f2:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80251f4:	2cff      	cmp	r4, #255	; 0xff
 80251f6:	d020      	beq.n	802523a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5bc>
 80251f8:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80251fa:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80251fe:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8025200:	4367      	muls	r7, r4
 8025202:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8025204:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025208:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802520c:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 802520e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8025212:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025216:	fb04 fa0a 	mul.w	sl, r4, sl
 802521a:	44bc      	add	ip, r7
 802521c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8025220:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025224:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025228:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802522c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025230:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025234:	ea4c 040a 	orr.w	r4, ip, sl
 8025238:	9410      	str	r4, [sp, #64]	; 0x40
 802523a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802523c:	2cff      	cmp	r4, #255	; 0xff
 802523e:	d020      	beq.n	8025282 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x604>
 8025240:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8025242:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8025246:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8025248:	4367      	muls	r7, r4
 802524a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802524c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025250:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8025254:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8025256:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802525a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802525e:	fb04 fa0a 	mul.w	sl, r4, sl
 8025262:	44bc      	add	ip, r7
 8025264:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8025268:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802526c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025270:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025274:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025278:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802527c:	ea4c 040a 	orr.w	r4, ip, sl
 8025280:	940b      	str	r4, [sp, #44]	; 0x2c
 8025282:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8025284:	2cff      	cmp	r4, #255	; 0xff
 8025286:	d020      	beq.n	80252ca <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 8025288:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802528a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802528e:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8025290:	4367      	muls	r7, r4
 8025292:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8025294:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025298:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802529c:	9c18      	ldr	r4, [sp, #96]	; 0x60
 802529e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80252a2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80252a6:	fb04 fa0a 	mul.w	sl, r4, sl
 80252aa:	44bc      	add	ip, r7
 80252ac:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80252b0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80252b4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80252b8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80252bc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80252c0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80252c4:	ea4c 040a 	orr.w	r4, ip, sl
 80252c8:	9411      	str	r4, [sp, #68]	; 0x44
 80252ca:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80252cc:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80252d0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80252d4:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80252d8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80252da:	fb08 f707 	mul.w	r7, r8, r7
 80252de:	fb02 770c 	mla	r7, r2, ip, r7
 80252e2:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80252e6:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80252e8:	fb00 770c 	mla	r7, r0, ip, r7
 80252ec:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80252f0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80252f2:	fb09 770c 	mla	r7, r9, ip, r7
 80252f6:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 80252fa:	fb08 f80c 	mul.w	r8, r8, ip
 80252fe:	0a3f      	lsrs	r7, r7, #8
 8025300:	fb02 8303 	mla	r3, r2, r3, r8
 8025304:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8025306:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802530a:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 802530e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8025310:	fb00 330a 	mla	r3, r0, sl, r3
 8025314:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8025318:	980d      	ldr	r0, [sp, #52]	; 0x34
 802531a:	fb09 3c0c 	mla	ip, r9, ip, r3
 802531e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8025320:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025324:	434b      	muls	r3, r1
 8025326:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802532a:	1c59      	adds	r1, r3, #1
 802532c:	ea47 070c 	orr.w	r7, r7, ip
 8025330:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8025334:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8025338:	b2fa      	uxtb	r2, r7
 802533a:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 802533e:	fb12 f200 	smulbb	r2, r2, r0
 8025342:	b2c9      	uxtb	r1, r1
 8025344:	fb03 2301 	mla	r3, r3, r1, r2
 8025348:	b29b      	uxth	r3, r3
 802534a:	1c5a      	adds	r2, r3, #1
 802534c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8025350:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8025354:	fb12 f201 	smulbb	r2, r2, r1
 8025358:	121b      	asrs	r3, r3, #8
 802535a:	f80e 3c03 	strb.w	r3, [lr, #-3]
 802535e:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8025362:	0c3f      	lsrs	r7, r7, #16
 8025364:	fb03 2300 	mla	r3, r3, r0, r2
 8025368:	b29b      	uxth	r3, r3
 802536a:	1c5a      	adds	r2, r3, #1
 802536c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8025370:	121b      	asrs	r3, r3, #8
 8025372:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8025376:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 802537a:	fb13 f101 	smulbb	r1, r3, r1
 802537e:	fb07 1700 	mla	r7, r7, r0, r1
 8025382:	b2bf      	uxth	r7, r7
 8025384:	1c7b      	adds	r3, r7, #1
 8025386:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 802538a:	123f      	asrs	r7, r7, #8
 802538c:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8025390:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8025392:	f10e 0e03 	add.w	lr, lr, #3
 8025396:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8025398:	f10b 3bff 	add.w	fp, fp, #4294967295
 802539c:	441a      	add	r2, r3
 802539e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80253a0:	9229      	str	r2, [sp, #164]	; 0xa4
 80253a2:	441d      	add	r5, r3
 80253a4:	e645      	b.n	8025032 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 80253a6:	2800      	cmp	r0, #0
 80253a8:	f43f aee6 	beq.w	8025178 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 80253ac:	5c79      	ldrb	r1, [r7, r1]
 80253ae:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80253b2:	910b      	str	r1, [sp, #44]	; 0x2c
 80253b4:	0e09      	lsrs	r1, r1, #24
 80253b6:	9114      	str	r1, [sp, #80]	; 0x50
 80253b8:	e6de      	b.n	8025178 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 80253ba:	b01f      	add	sp, #124	; 0x7c
 80253bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080253c0 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 80253c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80253c4:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	; 0x38
 80253c8:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 80253cc:	2d00      	cmp	r5, #0
 80253ce:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 80253d2:	fb05 700e 	mla	r0, r5, lr, r7
 80253d6:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 80253da:	f89d c044 	ldrb.w	ip, [sp, #68]	; 0x44
 80253de:	eb02 0800 	add.w	r8, r2, r0
 80253e2:	f2c0 8105 	blt.w	80255f0 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 80253e6:	45a9      	cmp	r9, r5
 80253e8:	f340 8102 	ble.w	80255f0 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 80253ec:	2f00      	cmp	r7, #0
 80253ee:	f2c0 80fd 	blt.w	80255ec <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 80253f2:	45be      	cmp	lr, r7
 80253f4:	f340 80fa 	ble.w	80255ec <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 80253f8:	5c12      	ldrb	r2, [r2, r0]
 80253fa:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 80253fe:	1c7a      	adds	r2, r7, #1
 8025400:	f100 80f9 	bmi.w	80255f6 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 8025404:	4596      	cmp	lr, r2
 8025406:	f340 80f6 	ble.w	80255f6 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 802540a:	2c00      	cmp	r4, #0
 802540c:	f000 80f5 	beq.w	80255fa <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23a>
 8025410:	f898 2001 	ldrb.w	r2, [r8, #1]
 8025414:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8025418:	3501      	adds	r5, #1
 802541a:	f100 80f2 	bmi.w	8025602 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 802541e:	45a9      	cmp	r9, r5
 8025420:	f340 80ef 	ble.w	8025602 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 8025424:	f1bc 0f00 	cmp.w	ip, #0
 8025428:	f000 80ee 	beq.w	8025608 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x248>
 802542c:	2f00      	cmp	r7, #0
 802542e:	f2c0 80e6 	blt.w	80255fe <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 8025432:	45be      	cmp	lr, r7
 8025434:	f340 80e3 	ble.w	80255fe <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 8025438:	f818 200e 	ldrb.w	r2, [r8, lr]
 802543c:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8025440:	3701      	adds	r7, #1
 8025442:	f100 80e4 	bmi.w	802560e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 8025446:	45be      	cmp	lr, r7
 8025448:	f340 80e1 	ble.w	802560e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 802544c:	2c00      	cmp	r4, #0
 802544e:	f000 80e0 	beq.w	8025612 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x252>
 8025452:	44c6      	add	lr, r8
 8025454:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8025458:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 802545c:	b2a3      	uxth	r3, r4
 802545e:	fa1f fc8c 	uxth.w	ip, ip
 8025462:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 8025466:	fb0c fe03 	mul.w	lr, ip, r3
 802546a:	011b      	lsls	r3, r3, #4
 802546c:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8025470:	ebce 1c0c 	rsb	ip, lr, ip, lsl #4
 8025474:	eba3 070e 	sub.w	r7, r3, lr
 8025478:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 802547c:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8025480:	fa1f f48c 	uxth.w	r4, ip
 8025484:	b2bf      	uxth	r7, r7
 8025486:	1b1b      	subs	r3, r3, r4
 8025488:	ea4f 6812 	mov.w	r8, r2, lsr #24
 802548c:	fb07 fc0a 	mul.w	ip, r7, sl
 8025490:	b29b      	uxth	r3, r3
 8025492:	fb03 cc0b 	mla	ip, r3, fp, ip
 8025496:	9300      	str	r3, [sp, #0]
 8025498:	fb04 cc09 	mla	ip, r4, r9, ip
 802549c:	fb0e cc08 	mla	ip, lr, r8, ip
 80254a0:	f3cc 2307 	ubfx	r3, ip, #8, #8
 80254a4:	9301      	str	r3, [sp, #4]
 80254a6:	2b00      	cmp	r3, #0
 80254a8:	f000 809d 	beq.w	80255e6 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x226>
 80254ac:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 80254b0:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80254b4:	fb0b fc0c 	mul.w	ip, fp, ip
 80254b8:	fb0b f606 	mul.w	r6, fp, r6
 80254bc:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 80254c0:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80254c4:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 80254c8:	44dc      	add	ip, fp
 80254ca:	f000 1bff 	and.w	fp, r0, #16711935	; 0xff00ff
 80254ce:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80254d2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80254d6:	fb0a fb0b 	mul.w	fp, sl, fp
 80254da:	fb0a fa00 	mul.w	sl, sl, r0
 80254de:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 80254e2:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 80254e6:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 80254ea:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 80254ee:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 80254f2:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80254f6:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 80254fa:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80254fe:	0a36      	lsrs	r6, r6, #8
 8025500:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025504:	44dc      	add	ip, fp
 8025506:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 802550a:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 802550e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8025512:	fb09 fb0b 	mul.w	fp, r9, fp
 8025516:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802551a:	fb09 f905 	mul.w	r9, r9, r5
 802551e:	ea4f 201b 	mov.w	r0, fp, lsr #8
 8025522:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025526:	f509 7580 	add.w	r5, r9, #256	; 0x100
 802552a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802552e:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8025532:	fb0c fc07 	mul.w	ip, ip, r7
 8025536:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 802553a:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 802553e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8025542:	4458      	add	r0, fp
 8025544:	fb08 f505 	mul.w	r5, r8, r5
 8025548:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802554c:	fb08 f802 	mul.w	r8, r8, r2
 8025550:	0a00      	lsrs	r0, r0, #8
 8025552:	0a2a      	lsrs	r2, r5, #8
 8025554:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 8025558:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802555c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8025560:	4415      	add	r5, r2
 8025562:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8025566:	0a2d      	lsrs	r5, r5, #8
 8025568:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 802556c:	9a00      	ldr	r2, [sp, #0]
 802556e:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8025572:	fb03 cc02 	mla	ip, r3, r2, ip
 8025576:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802557a:	9b01      	ldr	r3, [sp, #4]
 802557c:	fb05 c50e 	mla	r5, r5, lr, ip
 8025580:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8025584:	43db      	mvns	r3, r3
 8025586:	fb00 5004 	mla	r0, r0, r4, r5
 802558a:	b2db      	uxtb	r3, r3
 802558c:	0a00      	lsrs	r0, r0, #8
 802558e:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 8025592:	f40a 407f 	and.w	r0, sl, #65280	; 0xff00
 8025596:	4378      	muls	r0, r7
 8025598:	fb02 0006 	mla	r0, r2, r6, r0
 802559c:	780a      	ldrb	r2, [r1, #0]
 802559e:	fb0e 0e08 	mla	lr, lr, r8, r0
 80255a2:	f409 407f 	and.w	r0, r9, #65280	; 0xff00
 80255a6:	fb04 e000 	mla	r0, r4, r0, lr
 80255aa:	fb02 f403 	mul.w	r4, r2, r3
 80255ae:	0a00      	lsrs	r0, r0, #8
 80255b0:	1c62      	adds	r2, r4, #1
 80255b2:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80255b6:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 80255ba:	4328      	orrs	r0, r5
 80255bc:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 80255c0:	700a      	strb	r2, [r1, #0]
 80255c2:	784a      	ldrb	r2, [r1, #1]
 80255c4:	435a      	muls	r2, r3
 80255c6:	1c54      	adds	r4, r2, #1
 80255c8:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 80255cc:	0a02      	lsrs	r2, r0, #8
 80255ce:	0c00      	lsrs	r0, r0, #16
 80255d0:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 80255d4:	704a      	strb	r2, [r1, #1]
 80255d6:	788a      	ldrb	r2, [r1, #2]
 80255d8:	4353      	muls	r3, r2
 80255da:	1c5a      	adds	r2, r3, #1
 80255dc:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80255e0:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80255e4:	7088      	strb	r0, [r1, #2]
 80255e6:	b003      	add	sp, #12
 80255e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80255ec:	2600      	movs	r6, #0
 80255ee:	e706      	b.n	80253fe <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x3e>
 80255f0:	2000      	movs	r0, #0
 80255f2:	4606      	mov	r6, r0
 80255f4:	e710      	b.n	8025418 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 80255f6:	2000      	movs	r0, #0
 80255f8:	e70e      	b.n	8025418 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 80255fa:	4620      	mov	r0, r4
 80255fc:	e70c      	b.n	8025418 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 80255fe:	2500      	movs	r5, #0
 8025600:	e71e      	b.n	8025440 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x80>
 8025602:	2200      	movs	r2, #0
 8025604:	4615      	mov	r5, r2
 8025606:	e729      	b.n	802545c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 8025608:	4662      	mov	r2, ip
 802560a:	4665      	mov	r5, ip
 802560c:	e726      	b.n	802545c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 802560e:	2200      	movs	r2, #0
 8025610:	e724      	b.n	802545c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 8025612:	4622      	mov	r2, r4
 8025614:	e722      	b.n	802545c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>

08025616 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025616:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802561a:	b09b      	sub	sp, #108	; 0x6c
 802561c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8025620:	9218      	str	r2, [sp, #96]	; 0x60
 8025622:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8025624:	9019      	str	r0, [sp, #100]	; 0x64
 8025626:	9116      	str	r1, [sp, #88]	; 0x58
 8025628:	6850      	ldr	r0, [r2, #4]
 802562a:	9307      	str	r3, [sp, #28]
 802562c:	6812      	ldr	r2, [r2, #0]
 802562e:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8025630:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8025634:	fb00 1303 	mla	r3, r0, r3, r1
 8025638:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802563c:	18d3      	adds	r3, r2, r3
 802563e:	930a      	str	r3, [sp, #40]	; 0x28
 8025640:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025642:	681b      	ldr	r3, [r3, #0]
 8025644:	930f      	str	r3, [sp, #60]	; 0x3c
 8025646:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025648:	685e      	ldr	r6, [r3, #4]
 802564a:	3604      	adds	r6, #4
 802564c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802564e:	2b00      	cmp	r3, #0
 8025650:	dc03      	bgt.n	802565a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 8025652:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8025654:	2b00      	cmp	r3, #0
 8025656:	f340 834f 	ble.w	8025cf8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 802565a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802565c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025660:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8025664:	1e48      	subs	r0, r1, #1
 8025666:	1e57      	subs	r7, r2, #1
 8025668:	9b07      	ldr	r3, [sp, #28]
 802566a:	2b00      	cmp	r3, #0
 802566c:	f340 8178 	ble.w	8025960 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8025670:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8025672:	142b      	asrs	r3, r5, #16
 8025674:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8025678:	d406      	bmi.n	8025688 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 802567a:	4584      	cmp	ip, r0
 802567c:	da04      	bge.n	8025688 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 802567e:	2b00      	cmp	r3, #0
 8025680:	db02      	blt.n	8025688 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8025682:	42bb      	cmp	r3, r7
 8025684:	f2c0 816d 	blt.w	8025962 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 8025688:	f11c 0c01 	adds.w	ip, ip, #1
 802568c:	f100 815b 	bmi.w	8025946 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8025690:	4561      	cmp	r1, ip
 8025692:	f2c0 8158 	blt.w	8025946 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8025696:	3301      	adds	r3, #1
 8025698:	f100 8155 	bmi.w	8025946 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 802569c:	429a      	cmp	r2, r3
 802569e:	f2c0 8152 	blt.w	8025946 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 80256a2:	9b07      	ldr	r3, [sp, #28]
 80256a4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80256a6:	9317      	str	r3, [sp, #92]	; 0x5c
 80256a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80256aa:	2b00      	cmp	r3, #0
 80256ac:	f340 8178 	ble.w	80259a0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 80256b0:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80256b2:	ea4f 4c25 	mov.w	ip, r5, asr #16
 80256b6:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80256ba:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80256be:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80256c0:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 80256c4:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80256c6:	141b      	asrs	r3, r3, #16
 80256c8:	f100 81ba 	bmi.w	8025a40 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80256cc:	f101 38ff 	add.w	r8, r1, #4294967295
 80256d0:	4543      	cmp	r3, r8
 80256d2:	f280 81b5 	bge.w	8025a40 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80256d6:	f1bc 0f00 	cmp.w	ip, #0
 80256da:	f2c0 81b1 	blt.w	8025a40 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80256de:	f10e 38ff 	add.w	r8, lr, #4294967295
 80256e2:	45c4      	cmp	ip, r8
 80256e4:	f280 81ac 	bge.w	8025a40 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80256e8:	b209      	sxth	r1, r1
 80256ea:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80256ec:	fb0c 3301 	mla	r3, ip, r1, r3
 80256f0:	eb04 0803 	add.w	r8, r4, r3
 80256f4:	5ce3      	ldrb	r3, [r4, r3]
 80256f6:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80256fa:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 80256fe:	2a00      	cmp	r2, #0
 8025700:	f000 8193 	beq.w	8025a2a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x414>
 8025704:	f898 c001 	ldrb.w	ip, [r8, #1]
 8025708:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 802570c:	940b      	str	r4, [sp, #44]	; 0x2c
 802570e:	0e24      	lsrs	r4, r4, #24
 8025710:	9412      	str	r4, [sp, #72]	; 0x48
 8025712:	b178      	cbz	r0, 8025734 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8025714:	eb08 0c01 	add.w	ip, r8, r1
 8025718:	f818 1001 	ldrb.w	r1, [r8, r1]
 802571c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025720:	9108      	str	r1, [sp, #32]
 8025722:	0e09      	lsrs	r1, r1, #24
 8025724:	9110      	str	r1, [sp, #64]	; 0x40
 8025726:	f89c 1001 	ldrb.w	r1, [ip, #1]
 802572a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802572e:	910c      	str	r1, [sp, #48]	; 0x30
 8025730:	0e09      	lsrs	r1, r1, #24
 8025732:	9113      	str	r1, [sp, #76]	; 0x4c
 8025734:	b292      	uxth	r2, r2
 8025736:	9912      	ldr	r1, [sp, #72]	; 0x48
 8025738:	b280      	uxth	r0, r0
 802573a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802573c:	fb02 f900 	mul.w	r9, r2, r0
 8025740:	0112      	lsls	r2, r2, #4
 8025742:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8025746:	eba2 0809 	sub.w	r8, r2, r9
 802574a:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 802574e:	b280      	uxth	r0, r0
 8025750:	fa1f f888 	uxth.w	r8, r8
 8025754:	1a12      	subs	r2, r2, r0
 8025756:	fb08 f101 	mul.w	r1, r8, r1
 802575a:	b292      	uxth	r2, r2
 802575c:	fb02 110e 	mla	r1, r2, lr, r1
 8025760:	fb00 1104 	mla	r1, r0, r4, r1
 8025764:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8025766:	fb09 1104 	mla	r1, r9, r4, r1
 802576a:	f3c1 2107 	ubfx	r1, r1, #8, #8
 802576e:	2900      	cmp	r1, #0
 8025770:	f000 80de 	beq.w	8025930 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8025774:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8025778:	d01b      	beq.n	80257b2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 802577a:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 802577e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025782:	fb0e fa0a 	mul.w	sl, lr, sl
 8025786:	fb0e fe03 	mul.w	lr, lr, r3
 802578a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802578e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8025792:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8025796:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802579a:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802579e:	4453      	add	r3, sl
 80257a0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80257a4:	0a1b      	lsrs	r3, r3, #8
 80257a6:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80257aa:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80257ae:	ea43 030c 	orr.w	r3, r3, ip
 80257b2:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80257b4:	2cff      	cmp	r4, #255	; 0xff
 80257b6:	d021      	beq.n	80257fc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 80257b8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80257ba:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80257be:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80257c0:	fb04 fb0b 	mul.w	fp, r4, fp
 80257c4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80257c6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80257ca:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80257cc:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80257d0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80257d4:	fb04 fa0a 	mul.w	sl, r4, sl
 80257d8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80257dc:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80257e0:	44de      	add	lr, fp
 80257e2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80257e6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80257ea:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80257ee:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80257f2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80257f6:	ea4e 040a 	orr.w	r4, lr, sl
 80257fa:	940b      	str	r4, [sp, #44]	; 0x2c
 80257fc:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80257fe:	2cff      	cmp	r4, #255	; 0xff
 8025800:	d021      	beq.n	8025846 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8025802:	9c08      	ldr	r4, [sp, #32]
 8025804:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8025808:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802580a:	fb04 fb0b 	mul.w	fp, r4, fp
 802580e:	9c08      	ldr	r4, [sp, #32]
 8025810:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8025814:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8025816:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802581a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802581e:	fb04 fa0a 	mul.w	sl, r4, sl
 8025822:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025826:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802582a:	44de      	add	lr, fp
 802582c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8025830:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025834:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025838:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802583c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025840:	ea4e 040a 	orr.w	r4, lr, sl
 8025844:	9408      	str	r4, [sp, #32]
 8025846:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8025848:	2cff      	cmp	r4, #255	; 0xff
 802584a:	d021      	beq.n	8025890 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 802584c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802584e:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8025852:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8025854:	fb04 fb0b 	mul.w	fp, r4, fp
 8025858:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802585a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802585e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8025860:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8025864:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8025868:	fb04 fa0a 	mul.w	sl, r4, sl
 802586c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025870:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8025874:	44de      	add	lr, fp
 8025876:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802587a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802587e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025882:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025886:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802588a:	ea4e 040a 	orr.w	r4, lr, sl
 802588e:	940c      	str	r4, [sp, #48]	; 0x30
 8025890:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8025892:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8025896:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802589a:	43c9      	mvns	r1, r1
 802589c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80258a0:	9c08      	ldr	r4, [sp, #32]
 80258a2:	b2c9      	uxtb	r1, r1
 80258a4:	fb08 fc0c 	mul.w	ip, r8, ip
 80258a8:	fb02 cc0e 	mla	ip, r2, lr, ip
 80258ac:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80258b0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80258b2:	fb00 cc0e 	mla	ip, r0, lr, ip
 80258b6:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80258ba:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80258bc:	fb09 cc0e 	mla	ip, r9, lr, ip
 80258c0:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 80258c4:	fb08 f80e 	mul.w	r8, r8, lr
 80258c8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80258cc:	fb02 8303 	mla	r3, r2, r3, r8
 80258d0:	9a08      	ldr	r2, [sp, #32]
 80258d2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80258d6:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 80258da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80258dc:	fb00 330a 	mla	r3, r0, sl, r3
 80258e0:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 80258e4:	fb09 3900 	mla	r9, r9, r0, r3
 80258e8:	783b      	ldrb	r3, [r7, #0]
 80258ea:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80258ee:	fb03 f201 	mul.w	r2, r3, r1
 80258f2:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80258f6:	1c53      	adds	r3, r2, #1
 80258f8:	ea4c 0c09 	orr.w	ip, ip, r9
 80258fc:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8025900:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8025904:	703b      	strb	r3, [r7, #0]
 8025906:	787b      	ldrb	r3, [r7, #1]
 8025908:	434b      	muls	r3, r1
 802590a:	1c5a      	adds	r2, r3, #1
 802590c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8025910:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8025914:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8025918:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802591c:	707b      	strb	r3, [r7, #1]
 802591e:	78bb      	ldrb	r3, [r7, #2]
 8025920:	4359      	muls	r1, r3
 8025922:	1c4b      	adds	r3, r1, #1
 8025924:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8025928:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 802592c:	f887 c002 	strb.w	ip, [r7, #2]
 8025930:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8025932:	3703      	adds	r7, #3
 8025934:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8025936:	441a      	add	r2, r3
 8025938:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802593a:	441d      	add	r5, r3
 802593c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802593e:	9225      	str	r2, [sp, #148]	; 0x94
 8025940:	3b01      	subs	r3, #1
 8025942:	9317      	str	r3, [sp, #92]	; 0x5c
 8025944:	e6b0      	b.n	80256a8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8025946:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8025948:	9c25      	ldr	r4, [sp, #148]	; 0x94
 802594a:	441c      	add	r4, r3
 802594c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802594e:	441d      	add	r5, r3
 8025950:	9b07      	ldr	r3, [sp, #28]
 8025952:	9425      	str	r4, [sp, #148]	; 0x94
 8025954:	3b01      	subs	r3, #1
 8025956:	9307      	str	r3, [sp, #28]
 8025958:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802595a:	3303      	adds	r3, #3
 802595c:	930a      	str	r3, [sp, #40]	; 0x28
 802595e:	e683      	b.n	8025668 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8025960:	d026      	beq.n	80259b0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 8025962:	9b07      	ldr	r3, [sp, #28]
 8025964:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8025966:	3b01      	subs	r3, #1
 8025968:	9c25      	ldr	r4, [sp, #148]	; 0x94
 802596a:	fb00 4003 	mla	r0, r0, r3, r4
 802596e:	1400      	asrs	r0, r0, #16
 8025970:	f53f ae97 	bmi.w	80256a2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8025974:	3901      	subs	r1, #1
 8025976:	4288      	cmp	r0, r1
 8025978:	f6bf ae93 	bge.w	80256a2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 802597c:	9928      	ldr	r1, [sp, #160]	; 0xa0
 802597e:	fb01 5303 	mla	r3, r1, r3, r5
 8025982:	141b      	asrs	r3, r3, #16
 8025984:	f53f ae8d 	bmi.w	80256a2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8025988:	3a01      	subs	r2, #1
 802598a:	4293      	cmp	r3, r2
 802598c:	f6bf ae89 	bge.w	80256a2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8025990:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025992:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8025996:	f103 0e03 	add.w	lr, r3, #3
 802599a:	f1bb 0f00 	cmp.w	fp, #0
 802599e:	dc6d      	bgt.n	8025a7c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x466>
 80259a0:	9b07      	ldr	r3, [sp, #28]
 80259a2:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80259a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80259a8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80259ac:	4423      	add	r3, r4
 80259ae:	930a      	str	r3, [sp, #40]	; 0x28
 80259b0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80259b2:	2b00      	cmp	r3, #0
 80259b4:	f340 81a0 	ble.w	8025cf8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 80259b8:	ee30 0a04 	vadd.f32	s0, s0, s8
 80259bc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80259be:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80259c2:	eeb0 6a62 	vmov.f32	s12, s5
 80259c6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80259ca:	ee31 1a05 	vadd.f32	s2, s2, s10
 80259ce:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80259d2:	ed8d 6a25 	vstr	s12, [sp, #148]	; 0x94
 80259d6:	eeb0 6a43 	vmov.f32	s12, s6
 80259da:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80259de:	ee16 5a10 	vmov	r5, s12
 80259e2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80259e6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80259ea:	ee77 2a62 	vsub.f32	s5, s14, s5
 80259ee:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80259f2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80259f6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80259fa:	ee12 2a90 	vmov	r2, s5
 80259fe:	eef0 2a47 	vmov.f32	s5, s14
 8025a02:	fb92 f3f3 	sdiv	r3, r2, r3
 8025a06:	ee13 2a10 	vmov	r2, s6
 8025a0a:	9327      	str	r3, [sp, #156]	; 0x9c
 8025a0c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025a0e:	eeb0 3a67 	vmov.f32	s6, s15
 8025a12:	fb92 f3f3 	sdiv	r3, r2, r3
 8025a16:	9328      	str	r3, [sp, #160]	; 0xa0
 8025a18:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8025a1a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8025a1c:	3b01      	subs	r3, #1
 8025a1e:	9316      	str	r3, [sp, #88]	; 0x58
 8025a20:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025a22:	bf08      	it	eq
 8025a24:	4613      	moveq	r3, r2
 8025a26:	9307      	str	r3, [sp, #28]
 8025a28:	e610      	b.n	802564c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8025a2a:	2800      	cmp	r0, #0
 8025a2c:	f43f ae82 	beq.w	8025734 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8025a30:	f818 1001 	ldrb.w	r1, [r8, r1]
 8025a34:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025a38:	9108      	str	r1, [sp, #32]
 8025a3a:	0e09      	lsrs	r1, r1, #24
 8025a3c:	9110      	str	r1, [sp, #64]	; 0x40
 8025a3e:	e679      	b.n	8025734 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8025a40:	f113 0801 	adds.w	r8, r3, #1
 8025a44:	f53f af74 	bmi.w	8025930 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8025a48:	4541      	cmp	r1, r8
 8025a4a:	f6ff af71 	blt.w	8025930 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8025a4e:	f11c 0801 	adds.w	r8, ip, #1
 8025a52:	f53f af6d 	bmi.w	8025930 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8025a56:	45c6      	cmp	lr, r8
 8025a58:	f6ff af6a 	blt.w	8025930 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8025a5c:	b209      	sxth	r1, r1
 8025a5e:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8025a62:	fa0f f38e 	sxth.w	r3, lr
 8025a66:	9100      	str	r1, [sp, #0]
 8025a68:	4639      	mov	r1, r7
 8025a6a:	9301      	str	r3, [sp, #4]
 8025a6c:	4633      	mov	r3, r6
 8025a6e:	e9cd 2004 	strd	r2, r0, [sp, #16]
 8025a72:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8025a74:	9819      	ldr	r0, [sp, #100]	; 0x64
 8025a76:	f7ff fca3 	bl	80253c0 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 8025a7a:	e759      	b.n	8025930 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8025a7c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8025a7e:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8025a82:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8025a84:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8025a88:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025a8a:	1427      	asrs	r7, r4, #16
 8025a8c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8025a8e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025a92:	142b      	asrs	r3, r5, #16
 8025a94:	fb01 7303 	mla	r3, r1, r3, r7
 8025a98:	18e7      	adds	r7, r4, r3
 8025a9a:	5ce3      	ldrb	r3, [r4, r3]
 8025a9c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8025aa0:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8025aa4:	2a00      	cmp	r2, #0
 8025aa6:	f000 811d 	beq.w	8025ce4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ce>
 8025aaa:	f897 8001 	ldrb.w	r8, [r7, #1]
 8025aae:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 8025ab2:	940d      	str	r4, [sp, #52]	; 0x34
 8025ab4:	0e24      	lsrs	r4, r4, #24
 8025ab6:	9414      	str	r4, [sp, #80]	; 0x50
 8025ab8:	b170      	cbz	r0, 8025ad8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8025aba:	eb07 0801 	add.w	r8, r7, r1
 8025abe:	5c79      	ldrb	r1, [r7, r1]
 8025ac0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025ac4:	9109      	str	r1, [sp, #36]	; 0x24
 8025ac6:	0e09      	lsrs	r1, r1, #24
 8025ac8:	9111      	str	r1, [sp, #68]	; 0x44
 8025aca:	f898 1001 	ldrb.w	r1, [r8, #1]
 8025ace:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025ad2:	910e      	str	r1, [sp, #56]	; 0x38
 8025ad4:	0e09      	lsrs	r1, r1, #24
 8025ad6:	9115      	str	r1, [sp, #84]	; 0x54
 8025ad8:	b292      	uxth	r2, r2
 8025ada:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8025adc:	b280      	uxth	r0, r0
 8025ade:	fb02 f900 	mul.w	r9, r2, r0
 8025ae2:	0112      	lsls	r2, r2, #4
 8025ae4:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8025ae8:	eba2 0809 	sub.w	r8, r2, r9
 8025aec:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8025af0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8025af2:	b280      	uxth	r0, r0
 8025af4:	fa1f f888 	uxth.w	r8, r8
 8025af8:	1a09      	subs	r1, r1, r0
 8025afa:	fb08 f202 	mul.w	r2, r8, r2
 8025afe:	b289      	uxth	r1, r1
 8025b00:	fb01 220c 	mla	r2, r1, ip, r2
 8025b04:	fb00 2204 	mla	r2, r0, r4, r2
 8025b08:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8025b0a:	fb09 2204 	mla	r2, r9, r4, r2
 8025b0e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8025b12:	2a00      	cmp	r2, #0
 8025b14:	f000 80db 	beq.w	8025cce <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 8025b18:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8025b1c:	d019      	beq.n	8025b52 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53c>
 8025b1e:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8025b22:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025b26:	fb0c fa0a 	mul.w	sl, ip, sl
 8025b2a:	fb0c fc03 	mul.w	ip, ip, r3
 8025b2e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8025b32:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8025b36:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8025b3a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025b3e:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8025b42:	4453      	add	r3, sl
 8025b44:	0a3f      	lsrs	r7, r7, #8
 8025b46:	0a1b      	lsrs	r3, r3, #8
 8025b48:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8025b4c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025b50:	433b      	orrs	r3, r7
 8025b52:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8025b54:	2cff      	cmp	r4, #255	; 0xff
 8025b56:	d020      	beq.n	8025b9a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x584>
 8025b58:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8025b5a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8025b5e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8025b60:	4367      	muls	r7, r4
 8025b62:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8025b64:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025b68:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8025b6c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8025b6e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8025b72:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025b76:	fb04 fa0a 	mul.w	sl, r4, sl
 8025b7a:	44bc      	add	ip, r7
 8025b7c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8025b80:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025b84:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025b88:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025b8c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025b90:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025b94:	ea4c 040a 	orr.w	r4, ip, sl
 8025b98:	940d      	str	r4, [sp, #52]	; 0x34
 8025b9a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8025b9c:	2cff      	cmp	r4, #255	; 0xff
 8025b9e:	d020      	beq.n	8025be2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5cc>
 8025ba0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8025ba2:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8025ba6:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8025ba8:	4367      	muls	r7, r4
 8025baa:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8025bac:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025bb0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8025bb4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8025bb6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8025bba:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025bbe:	fb04 fa0a 	mul.w	sl, r4, sl
 8025bc2:	44bc      	add	ip, r7
 8025bc4:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8025bc8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025bcc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025bd0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025bd4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025bd8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025bdc:	ea4c 040a 	orr.w	r4, ip, sl
 8025be0:	9409      	str	r4, [sp, #36]	; 0x24
 8025be2:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8025be4:	2cff      	cmp	r4, #255	; 0xff
 8025be6:	d020      	beq.n	8025c2a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x614>
 8025be8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8025bea:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8025bee:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8025bf0:	4367      	muls	r7, r4
 8025bf2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8025bf4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025bf8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8025bfc:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8025bfe:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8025c02:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025c06:	fb04 fa0a 	mul.w	sl, r4, sl
 8025c0a:	44bc      	add	ip, r7
 8025c0c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8025c10:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025c14:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025c18:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025c1c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025c20:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025c24:	ea4c 040a 	orr.w	r4, ip, sl
 8025c28:	940e      	str	r4, [sp, #56]	; 0x38
 8025c2a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8025c2c:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8025c30:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025c34:	43d2      	mvns	r2, r2
 8025c36:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8025c3a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8025c3c:	b2d2      	uxtb	r2, r2
 8025c3e:	fb08 f707 	mul.w	r7, r8, r7
 8025c42:	fb01 770c 	mla	r7, r1, ip, r7
 8025c46:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8025c4a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8025c4c:	fb00 770c 	mla	r7, r0, ip, r7
 8025c50:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8025c54:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8025c56:	fb09 770c 	mla	r7, r9, ip, r7
 8025c5a:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8025c5e:	fb08 f80c 	mul.w	r8, r8, ip
 8025c62:	0a3f      	lsrs	r7, r7, #8
 8025c64:	fb01 8303 	mla	r3, r1, r3, r8
 8025c68:	9909      	ldr	r1, [sp, #36]	; 0x24
 8025c6a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8025c6e:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8025c72:	990e      	ldr	r1, [sp, #56]	; 0x38
 8025c74:	fb00 330a 	mla	r3, r0, sl, r3
 8025c78:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8025c7c:	fb09 3c0c 	mla	ip, r9, ip, r3
 8025c80:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8025c84:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025c88:	fb03 f102 	mul.w	r1, r3, r2
 8025c8c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8025c90:	1c4b      	adds	r3, r1, #1
 8025c92:	ea47 070c 	orr.w	r7, r7, ip
 8025c96:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8025c9a:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 8025c9e:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8025ca2:	f81e 3c02 	ldrb.w	r3, [lr, #-2]
 8025ca6:	4353      	muls	r3, r2
 8025ca8:	1c59      	adds	r1, r3, #1
 8025caa:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8025cae:	0a3b      	lsrs	r3, r7, #8
 8025cb0:	0c3f      	lsrs	r7, r7, #16
 8025cb2:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8025cb6:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8025cba:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8025cbe:	435a      	muls	r2, r3
 8025cc0:	1c53      	adds	r3, r2, #1
 8025cc2:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8025cc6:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8025cca:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8025cce:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8025cd0:	f10e 0e03 	add.w	lr, lr, #3
 8025cd4:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8025cd6:	f10b 3bff 	add.w	fp, fp, #4294967295
 8025cda:	441a      	add	r2, r3
 8025cdc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025cde:	9225      	str	r2, [sp, #148]	; 0x94
 8025ce0:	441d      	add	r5, r3
 8025ce2:	e65a      	b.n	802599a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8025ce4:	2800      	cmp	r0, #0
 8025ce6:	f43f aef7 	beq.w	8025ad8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8025cea:	5c79      	ldrb	r1, [r7, r1]
 8025cec:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025cf0:	9109      	str	r1, [sp, #36]	; 0x24
 8025cf2:	0e09      	lsrs	r1, r1, #24
 8025cf4:	9111      	str	r1, [sp, #68]	; 0x44
 8025cf6:	e6ef      	b.n	8025ad8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8025cf8:	b01b      	add	sp, #108	; 0x6c
 8025cfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08025cfe <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 8025cfe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025d02:	b08d      	sub	sp, #52	; 0x34
 8025d04:	468b      	mov	fp, r1
 8025d06:	e9dd 5c17 	ldrd	r5, ip, [sp, #92]	; 0x5c
 8025d0a:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 8025d0e:	fb0c 5703 	mla	r7, ip, r3, r5
 8025d12:	f1bc 0f00 	cmp.w	ip, #0
 8025d16:	910b      	str	r1, [sp, #44]	; 0x2c
 8025d18:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8025d1c:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 8025d20:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 8025d24:	f89d a068 	ldrb.w	sl, [sp, #104]	; 0x68
 8025d28:	eb02 0607 	add.w	r6, r2, r7
 8025d2c:	f89b 4000 	ldrb.w	r4, [fp]
 8025d30:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8025d34:	f89b 1002 	ldrb.w	r1, [fp, #2]
 8025d38:	f2c0 80c1 	blt.w	8025ebe <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 8025d3c:	45e6      	cmp	lr, ip
 8025d3e:	f340 80be 	ble.w	8025ebe <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 8025d42:	2d00      	cmp	r5, #0
 8025d44:	f2c0 80b7 	blt.w	8025eb6 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 8025d48:	42ab      	cmp	r3, r5
 8025d4a:	f340 80b4 	ble.w	8025eb6 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 8025d4e:	5dd2      	ldrb	r2, [r2, r7]
 8025d50:	9205      	str	r2, [sp, #20]
 8025d52:	7872      	ldrb	r2, [r6, #1]
 8025d54:	9206      	str	r2, [sp, #24]
 8025d56:	78b2      	ldrb	r2, [r6, #2]
 8025d58:	9207      	str	r2, [sp, #28]
 8025d5a:	1c6a      	adds	r2, r5, #1
 8025d5c:	f100 80b6 	bmi.w	8025ecc <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 8025d60:	4293      	cmp	r3, r2
 8025d62:	f340 80b3 	ble.w	8025ecc <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 8025d66:	f1b8 0f00 	cmp.w	r8, #0
 8025d6a:	f000 80af 	beq.w	8025ecc <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 8025d6e:	78f2      	ldrb	r2, [r6, #3]
 8025d70:	9201      	str	r2, [sp, #4]
 8025d72:	7932      	ldrb	r2, [r6, #4]
 8025d74:	9202      	str	r2, [sp, #8]
 8025d76:	7972      	ldrb	r2, [r6, #5]
 8025d78:	9203      	str	r2, [sp, #12]
 8025d7a:	f11c 0c01 	adds.w	ip, ip, #1
 8025d7e:	f100 80ad 	bmi.w	8025edc <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 8025d82:	45e6      	cmp	lr, ip
 8025d84:	f340 80aa 	ble.w	8025edc <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 8025d88:	f1ba 0f00 	cmp.w	sl, #0
 8025d8c:	f000 80a6 	beq.w	8025edc <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 8025d90:	2d00      	cmp	r5, #0
 8025d92:	f2c0 809f 	blt.w	8025ed4 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 8025d96:	42ab      	cmp	r3, r5
 8025d98:	f340 809c 	ble.w	8025ed4 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 8025d9c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8025da0:	f816 9002 	ldrb.w	r9, [r6, r2]
 8025da4:	2203      	movs	r2, #3
 8025da6:	fb03 6c02 	mla	ip, r3, r2, r6
 8025daa:	f89c 7001 	ldrb.w	r7, [ip, #1]
 8025dae:	f89c e002 	ldrb.w	lr, [ip, #2]
 8025db2:	9704      	str	r7, [sp, #16]
 8025db4:	3501      	adds	r5, #1
 8025db6:	f100 8098 	bmi.w	8025eea <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 8025dba:	42ab      	cmp	r3, r5
 8025dbc:	f340 8095 	ble.w	8025eea <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 8025dc0:	f1b8 0f00 	cmp.w	r8, #0
 8025dc4:	f000 8091 	beq.w	8025eea <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 8025dc8:	f04f 0c03 	mov.w	ip, #3
 8025dcc:	fb13 c20c 	smlabb	r2, r3, ip, ip
 8025dd0:	5cb5      	ldrb	r5, [r6, r2]
 8025dd2:	fb03 620c 	mla	r2, r3, ip, r6
 8025dd6:	fb03 630c 	mla	r3, r3, ip, r6
 8025dda:	7912      	ldrb	r2, [r2, #4]
 8025ddc:	795e      	ldrb	r6, [r3, #5]
 8025dde:	fa1f f388 	uxth.w	r3, r8
 8025de2:	fa1f fc8a 	uxth.w	ip, sl
 8025de6:	fb03 f70c 	mul.w	r7, r3, ip
 8025dea:	011b      	lsls	r3, r3, #4
 8025dec:	9708      	str	r7, [sp, #32]
 8025dee:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 8025df2:	f5c3 7a80 	rsb	sl, r3, #256	; 0x100
 8025df6:	1bdb      	subs	r3, r3, r7
 8025df8:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 8025dfc:	fa1f fc8c 	uxth.w	ip, ip
 8025e00:	b29b      	uxth	r3, r3
 8025e02:	9709      	str	r7, [sp, #36]	; 0x24
 8025e04:	ebaa 0a0c 	sub.w	sl, sl, ip
 8025e08:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8025e0a:	930a      	str	r3, [sp, #40]	; 0x28
 8025e0c:	fa1f fa8a 	uxth.w	sl, sl
 8025e10:	ea6f 0807 	mvn.w	r8, r7
 8025e14:	9f01      	ldr	r7, [sp, #4]
 8025e16:	435f      	muls	r7, r3
 8025e18:	9b05      	ldr	r3, [sp, #20]
 8025e1a:	fa5f f888 	uxtb.w	r8, r8
 8025e1e:	fb0a 7703 	mla	r7, sl, r3, r7
 8025e22:	9b08      	ldr	r3, [sp, #32]
 8025e24:	fb14 f408 	smulbb	r4, r4, r8
 8025e28:	fb0c 7709 	mla	r7, ip, r9, r7
 8025e2c:	fb10 f008 	smulbb	r0, r0, r8
 8025e30:	fb11 f108 	smulbb	r1, r1, r8
 8025e34:	fb03 7705 	mla	r7, r3, r5, r7
 8025e38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025e3a:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8025e3e:	fb07 4703 	mla	r7, r7, r3, r4
 8025e42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025e44:	b2bf      	uxth	r7, r7
 8025e46:	1c7c      	adds	r4, r7, #1
 8025e48:	eb04 2417 	add.w	r4, r4, r7, lsr #8
 8025e4c:	1224      	asrs	r4, r4, #8
 8025e4e:	f88b 4000 	strb.w	r4, [fp]
 8025e52:	9c02      	ldr	r4, [sp, #8]
 8025e54:	435c      	muls	r4, r3
 8025e56:	9b06      	ldr	r3, [sp, #24]
 8025e58:	fb0a 4403 	mla	r4, sl, r3, r4
 8025e5c:	9b04      	ldr	r3, [sp, #16]
 8025e5e:	fb0c 4403 	mla	r4, ip, r3, r4
 8025e62:	9b08      	ldr	r3, [sp, #32]
 8025e64:	fb03 4402 	mla	r4, r3, r2, r4
 8025e68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025e6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8025e6c:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8025e70:	fb04 0403 	mla	r4, r4, r3, r0
 8025e74:	9b03      	ldr	r3, [sp, #12]
 8025e76:	435a      	muls	r2, r3
 8025e78:	b2a4      	uxth	r4, r4
 8025e7a:	4613      	mov	r3, r2
 8025e7c:	9a07      	ldr	r2, [sp, #28]
 8025e7e:	1c60      	adds	r0, r4, #1
 8025e80:	fb0a 3a02 	mla	sl, sl, r2, r3
 8025e84:	9b08      	ldr	r3, [sp, #32]
 8025e86:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 8025e8a:	fb0c ac0e 	mla	ip, ip, lr, sl
 8025e8e:	1224      	asrs	r4, r4, #8
 8025e90:	fb03 c606 	mla	r6, r3, r6, ip
 8025e94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025e96:	f88b 4001 	strb.w	r4, [fp, #1]
 8025e9a:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8025e9e:	fb06 1103 	mla	r1, r6, r3, r1
 8025ea2:	b289      	uxth	r1, r1
 8025ea4:	1c4e      	adds	r6, r1, #1
 8025ea6:	eb06 2111 	add.w	r1, r6, r1, lsr #8
 8025eaa:	1209      	asrs	r1, r1, #8
 8025eac:	f88b 1002 	strb.w	r1, [fp, #2]
 8025eb0:	b00d      	add	sp, #52	; 0x34
 8025eb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025eb6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8025eba:	9405      	str	r4, [sp, #20]
 8025ebc:	e74d      	b.n	8025d5a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x5c>
 8025ebe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8025ec2:	9401      	str	r4, [sp, #4]
 8025ec4:	9405      	str	r4, [sp, #20]
 8025ec6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8025eca:	e756      	b.n	8025d7a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 8025ecc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8025ed0:	9401      	str	r4, [sp, #4]
 8025ed2:	e752      	b.n	8025d7a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 8025ed4:	468e      	mov	lr, r1
 8025ed6:	9004      	str	r0, [sp, #16]
 8025ed8:	46a1      	mov	r9, r4
 8025eda:	e76b      	b.n	8025db4 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xb6>
 8025edc:	460e      	mov	r6, r1
 8025ede:	4602      	mov	r2, r0
 8025ee0:	4625      	mov	r5, r4
 8025ee2:	468e      	mov	lr, r1
 8025ee4:	9004      	str	r0, [sp, #16]
 8025ee6:	46a1      	mov	r9, r4
 8025ee8:	e779      	b.n	8025dde <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>
 8025eea:	460e      	mov	r6, r1
 8025eec:	4602      	mov	r2, r0
 8025eee:	4625      	mov	r5, r4
 8025ef0:	e775      	b.n	8025dde <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>

08025ef2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025ef2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025ef6:	b09f      	sub	sp, #124	; 0x7c
 8025ef8:	920e      	str	r2, [sp, #56]	; 0x38
 8025efa:	9307      	str	r3, [sp, #28]
 8025efc:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8025efe:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8025f02:	901d      	str	r0, [sp, #116]	; 0x74
 8025f04:	930c      	str	r3, [sp, #48]	; 0x30
 8025f06:	6850      	ldr	r0, [r2, #4]
 8025f08:	910b      	str	r1, [sp, #44]	; 0x2c
 8025f0a:	6812      	ldr	r2, [r2, #0]
 8025f0c:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8025f10:	e9dd a829 	ldrd	sl, r8, [sp, #164]	; 0xa4
 8025f14:	fb00 1303 	mla	r3, r0, r3, r1
 8025f18:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8025f1c:	18d3      	adds	r3, r2, r3
 8025f1e:	9308      	str	r3, [sp, #32]
 8025f20:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8025f22:	681b      	ldr	r3, [r3, #0]
 8025f24:	930a      	str	r3, [sp, #40]	; 0x28
 8025f26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025f28:	43db      	mvns	r3, r3
 8025f2a:	b2db      	uxtb	r3, r3
 8025f2c:	9309      	str	r3, [sp, #36]	; 0x24
 8025f2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025f30:	2b00      	cmp	r3, #0
 8025f32:	dc03      	bgt.n	8025f3c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8025f34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8025f36:	2b00      	cmp	r3, #0
 8025f38:	f340 81f5 	ble.w	8026326 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 8025f3c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8025f3e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025f42:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8025f46:	1e48      	subs	r0, r1, #1
 8025f48:	1e54      	subs	r4, r2, #1
 8025f4a:	9b07      	ldr	r3, [sp, #28]
 8025f4c:	2b00      	cmp	r3, #0
 8025f4e:	f340 80d5 	ble.w	80260fc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 8025f52:	ea5f 452a 	movs.w	r5, sl, asr #16
 8025f56:	ea4f 4328 	mov.w	r3, r8, asr #16
 8025f5a:	d406      	bmi.n	8025f6a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8025f5c:	4285      	cmp	r5, r0
 8025f5e:	da04      	bge.n	8025f6a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8025f60:	2b00      	cmp	r3, #0
 8025f62:	db02      	blt.n	8025f6a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8025f64:	42a3      	cmp	r3, r4
 8025f66:	f2c0 80ca 	blt.w	80260fe <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8025f6a:	3501      	adds	r5, #1
 8025f6c:	f100 80bb 	bmi.w	80260e6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 8025f70:	42a9      	cmp	r1, r5
 8025f72:	f2c0 80b8 	blt.w	80260e6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 8025f76:	3301      	adds	r3, #1
 8025f78:	f100 80b5 	bmi.w	80260e6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 8025f7c:	429a      	cmp	r2, r3
 8025f7e:	f2c0 80b2 	blt.w	80260e6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 8025f82:	9b07      	ldr	r3, [sp, #28]
 8025f84:	9d08      	ldr	r5, [sp, #32]
 8025f86:	930d      	str	r3, [sp, #52]	; 0x34
 8025f88:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8025f8a:	2b00      	cmp	r3, #0
 8025f8c:	f340 80d6 	ble.w	802613c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24a>
 8025f90:	9830      	ldr	r0, [sp, #192]	; 0xc0
 8025f92:	ea4f 4428 	mov.w	r4, r8, asr #16
 8025f96:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8025f98:	f3ca 3203 	ubfx	r2, sl, #12, #4
 8025f9c:	68c6      	ldr	r6, [r0, #12]
 8025f9e:	ea5f 402a 	movs.w	r0, sl, asr #16
 8025fa2:	f3c8 3103 	ubfx	r1, r8, #12, #4
 8025fa6:	689b      	ldr	r3, [r3, #8]
 8025fa8:	f100 810f 	bmi.w	80261ca <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8025fac:	1e5f      	subs	r7, r3, #1
 8025fae:	42b8      	cmp	r0, r7
 8025fb0:	f280 810b 	bge.w	80261ca <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8025fb4:	2c00      	cmp	r4, #0
 8025fb6:	f2c0 8108 	blt.w	80261ca <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8025fba:	1e77      	subs	r7, r6, #1
 8025fbc:	42bc      	cmp	r4, r7
 8025fbe:	f280 8104 	bge.w	80261ca <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8025fc2:	b21b      	sxth	r3, r3
 8025fc4:	fb04 0003 	mla	r0, r4, r3, r0
 8025fc8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8025fca:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8025fce:	1826      	adds	r6, r4, r0
 8025fd0:	5c24      	ldrb	r4, [r4, r0]
 8025fd2:	78b7      	ldrb	r7, [r6, #2]
 8025fd4:	7870      	ldrb	r0, [r6, #1]
 8025fd6:	970f      	str	r7, [sp, #60]	; 0x3c
 8025fd8:	7977      	ldrb	r7, [r6, #5]
 8025fda:	f896 e003 	ldrb.w	lr, [r6, #3]
 8025fde:	f896 c004 	ldrb.w	ip, [r6, #4]
 8025fe2:	9710      	str	r7, [sp, #64]	; 0x40
 8025fe4:	b1c9      	cbz	r1, 802601a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8025fe6:	f04f 0b03 	mov.w	fp, #3
 8025fea:	f06f 0904 	mvn.w	r9, #4
 8025fee:	3605      	adds	r6, #5
 8025ff0:	fb13 930b 	smlabb	r3, r3, fp, r9
 8025ff4:	eb06 0b03 	add.w	fp, r6, r3
 8025ff8:	5cf3      	ldrb	r3, [r6, r3]
 8025ffa:	9311      	str	r3, [sp, #68]	; 0x44
 8025ffc:	f89b 3001 	ldrb.w	r3, [fp, #1]
 8026000:	9313      	str	r3, [sp, #76]	; 0x4c
 8026002:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8026006:	9315      	str	r3, [sp, #84]	; 0x54
 8026008:	f89b 3003 	ldrb.w	r3, [fp, #3]
 802600c:	9312      	str	r3, [sp, #72]	; 0x48
 802600e:	f89b 3004 	ldrb.w	r3, [fp, #4]
 8026012:	9314      	str	r3, [sp, #80]	; 0x50
 8026014:	f89b 3005 	ldrb.w	r3, [fp, #5]
 8026018:	9316      	str	r3, [sp, #88]	; 0x58
 802601a:	b292      	uxth	r2, r2
 802601c:	9f11      	ldr	r7, [sp, #68]	; 0x44
 802601e:	b289      	uxth	r1, r1
 8026020:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 8026024:	fb02 f601 	mul.w	r6, r2, r1
 8026028:	0112      	lsls	r2, r2, #4
 802602a:	ebc6 1101 	rsb	r1, r6, r1, lsl #4
 802602e:	f5c2 7980 	rsb	r9, r2, #256	; 0x100
 8026032:	1b92      	subs	r2, r2, r6
 8026034:	b289      	uxth	r1, r1
 8026036:	b292      	uxth	r2, r2
 8026038:	eba9 0901 	sub.w	r9, r9, r1
 802603c:	fb02 fe0e 	mul.w	lr, r2, lr
 8026040:	fa1f f989 	uxth.w	r9, r9
 8026044:	fb02 fc0c 	mul.w	ip, r2, ip
 8026048:	fb09 e404 	mla	r4, r9, r4, lr
 802604c:	f895 e000 	ldrb.w	lr, [r5]
 8026050:	fb09 c000 	mla	r0, r9, r0, ip
 8026054:	fb01 4407 	mla	r4, r1, r7, r4
 8026058:	9f12      	ldr	r7, [sp, #72]	; 0x48
 802605a:	fb06 4407 	mla	r4, r6, r7, r4
 802605e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8026060:	fb1e fe07 	smulbb	lr, lr, r7
 8026064:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8026068:	fb04 e403 	mla	r4, r4, r3, lr
 802606c:	b2a4      	uxth	r4, r4
 802606e:	f104 0e01 	add.w	lr, r4, #1
 8026072:	eb0e 2e14 	add.w	lr, lr, r4, lsr #8
 8026076:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8026078:	fb01 0004 	mla	r0, r1, r4, r0
 802607c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802607e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8026082:	fb06 0004 	mla	r0, r6, r4, r0
 8026086:	786c      	ldrb	r4, [r5, #1]
 8026088:	f885 e000 	strb.w	lr, [r5]
 802608c:	fb14 f407 	smulbb	r4, r4, r7
 8026090:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8026094:	fb00 4003 	mla	r0, r0, r3, r4
 8026098:	b280      	uxth	r0, r0
 802609a:	1c44      	adds	r4, r0, #1
 802609c:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 80260a0:	1200      	asrs	r0, r0, #8
 80260a2:	7068      	strb	r0, [r5, #1]
 80260a4:	9810      	ldr	r0, [sp, #64]	; 0x40
 80260a6:	4342      	muls	r2, r0
 80260a8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80260aa:	fb09 2200 	mla	r2, r9, r0, r2
 80260ae:	9815      	ldr	r0, [sp, #84]	; 0x54
 80260b0:	fb01 2100 	mla	r1, r1, r0, r2
 80260b4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80260b6:	fb06 1602 	mla	r6, r6, r2, r1
 80260ba:	78a9      	ldrb	r1, [r5, #2]
 80260bc:	fb11 f107 	smulbb	r1, r1, r7
 80260c0:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80260c4:	fb06 1303 	mla	r3, r6, r3, r1
 80260c8:	b29b      	uxth	r3, r3
 80260ca:	1c5e      	adds	r6, r3, #1
 80260cc:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 80260d0:	121b      	asrs	r3, r3, #8
 80260d2:	70ab      	strb	r3, [r5, #2]
 80260d4:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80260d6:	3503      	adds	r5, #3
 80260d8:	449a      	add	sl, r3
 80260da:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80260dc:	4498      	add	r8, r3
 80260de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80260e0:	3b01      	subs	r3, #1
 80260e2:	930d      	str	r3, [sp, #52]	; 0x34
 80260e4:	e750      	b.n	8025f88 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80260e6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80260e8:	449a      	add	sl, r3
 80260ea:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80260ec:	4498      	add	r8, r3
 80260ee:	9b07      	ldr	r3, [sp, #28]
 80260f0:	3b01      	subs	r3, #1
 80260f2:	9307      	str	r3, [sp, #28]
 80260f4:	9b08      	ldr	r3, [sp, #32]
 80260f6:	3303      	adds	r3, #3
 80260f8:	9308      	str	r3, [sp, #32]
 80260fa:	e726      	b.n	8025f4a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 80260fc:	d026      	beq.n	802614c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 80260fe:	9b07      	ldr	r3, [sp, #28]
 8026100:	982b      	ldr	r0, [sp, #172]	; 0xac
 8026102:	3b01      	subs	r3, #1
 8026104:	fb00 a003 	mla	r0, r0, r3, sl
 8026108:	1400      	asrs	r0, r0, #16
 802610a:	f53f af3a 	bmi.w	8025f82 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802610e:	3901      	subs	r1, #1
 8026110:	4288      	cmp	r0, r1
 8026112:	f6bf af36 	bge.w	8025f82 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8026116:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8026118:	fb01 8303 	mla	r3, r1, r3, r8
 802611c:	141b      	asrs	r3, r3, #16
 802611e:	f53f af30 	bmi.w	8025f82 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8026122:	3a01      	subs	r2, #1
 8026124:	4293      	cmp	r3, r2
 8026126:	f6bf af2c 	bge.w	8025f82 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802612a:	9b08      	ldr	r3, [sp, #32]
 802612c:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8026130:	1cdd      	adds	r5, r3, #3
 8026132:	f8bd e030 	ldrh.w	lr, [sp, #48]	; 0x30
 8026136:	f1bc 0f00 	cmp.w	ip, #0
 802613a:	dc5f      	bgt.n	80261fc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30a>
 802613c:	9b07      	ldr	r3, [sp, #28]
 802613e:	9a08      	ldr	r2, [sp, #32]
 8026140:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8026144:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8026148:	441a      	add	r2, r3
 802614a:	9208      	str	r2, [sp, #32]
 802614c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802614e:	2b00      	cmp	r3, #0
 8026150:	f340 80e9 	ble.w	8026326 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 8026154:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8026158:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802615a:	ee30 0a04 	vadd.f32	s0, s0, s8
 802615e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8026162:	eef0 6a62 	vmov.f32	s13, s5
 8026166:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802616a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802616e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026172:	ee16 aa90 	vmov	sl, s13
 8026176:	eef0 6a43 	vmov.f32	s13, s6
 802617a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802617e:	ee16 8a90 	vmov	r8, s13
 8026182:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8026186:	ee61 7a27 	vmul.f32	s15, s2, s15
 802618a:	ee77 2a62 	vsub.f32	s5, s14, s5
 802618e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8026192:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8026196:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802619a:	ee12 2a90 	vmov	r2, s5
 802619e:	eef0 2a47 	vmov.f32	s5, s14
 80261a2:	fb92 f3f3 	sdiv	r3, r2, r3
 80261a6:	ee13 2a10 	vmov	r2, s6
 80261aa:	932b      	str	r3, [sp, #172]	; 0xac
 80261ac:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80261ae:	eeb0 3a67 	vmov.f32	s6, s15
 80261b2:	fb92 f3f3 	sdiv	r3, r2, r3
 80261b6:	932c      	str	r3, [sp, #176]	; 0xb0
 80261b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80261ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80261bc:	3b01      	subs	r3, #1
 80261be:	930b      	str	r3, [sp, #44]	; 0x2c
 80261c0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80261c2:	bf08      	it	eq
 80261c4:	4613      	moveq	r3, r2
 80261c6:	9307      	str	r3, [sp, #28]
 80261c8:	e6b1      	b.n	8025f2e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80261ca:	1c47      	adds	r7, r0, #1
 80261cc:	d482      	bmi.n	80260d4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 80261ce:	42bb      	cmp	r3, r7
 80261d0:	db80      	blt.n	80260d4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 80261d2:	1c67      	adds	r7, r4, #1
 80261d4:	f53f af7e 	bmi.w	80260d4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 80261d8:	42be      	cmp	r6, r7
 80261da:	f6ff af7b 	blt.w	80260d4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 80261de:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80261e0:	b236      	sxth	r6, r6
 80261e2:	9001      	str	r0, [sp, #4]
 80261e4:	b21b      	sxth	r3, r3
 80261e6:	9600      	str	r6, [sp, #0]
 80261e8:	981d      	ldr	r0, [sp, #116]	; 0x74
 80261ea:	e9cd 1704 	strd	r1, r7, [sp, #16]
 80261ee:	e9cd 4202 	strd	r4, r2, [sp, #8]
 80261f2:	4629      	mov	r1, r5
 80261f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80261f6:	f7ff fd82 	bl	8025cfe <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 80261fa:	e76b      	b.n	80260d4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 80261fc:	9930      	ldr	r1, [sp, #192]	; 0xc0
 80261fe:	ea4f 402a 	mov.w	r0, sl, asr #16
 8026202:	f3c8 3203 	ubfx	r2, r8, #12, #4
 8026206:	f3ca 3303 	ubfx	r3, sl, #12, #4
 802620a:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 802620e:	ea4f 4128 	mov.w	r1, r8, asr #16
 8026212:	fb07 0101 	mla	r1, r7, r1, r0
 8026216:	980a      	ldr	r0, [sp, #40]	; 0x28
 8026218:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802621c:	1844      	adds	r4, r0, r1
 802621e:	5c40      	ldrb	r0, [r0, r1]
 8026220:	78a6      	ldrb	r6, [r4, #2]
 8026222:	7861      	ldrb	r1, [r4, #1]
 8026224:	960f      	str	r6, [sp, #60]	; 0x3c
 8026226:	78e6      	ldrb	r6, [r4, #3]
 8026228:	910d      	str	r1, [sp, #52]	; 0x34
 802622a:	9610      	str	r6, [sp, #64]	; 0x40
 802622c:	f894 9004 	ldrb.w	r9, [r4, #4]
 8026230:	f894 b005 	ldrb.w	fp, [r4, #5]
 8026234:	b192      	cbz	r2, 802625c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 8026236:	f06f 0604 	mvn.w	r6, #4
 802623a:	2103      	movs	r1, #3
 802623c:	3405      	adds	r4, #5
 802623e:	fb17 6701 	smlabb	r7, r7, r1, r6
 8026242:	19e6      	adds	r6, r4, r7
 8026244:	5de4      	ldrb	r4, [r4, r7]
 8026246:	9417      	str	r4, [sp, #92]	; 0x5c
 8026248:	7874      	ldrb	r4, [r6, #1]
 802624a:	9419      	str	r4, [sp, #100]	; 0x64
 802624c:	78b4      	ldrb	r4, [r6, #2]
 802624e:	941b      	str	r4, [sp, #108]	; 0x6c
 8026250:	78f4      	ldrb	r4, [r6, #3]
 8026252:	9418      	str	r4, [sp, #96]	; 0x60
 8026254:	7934      	ldrb	r4, [r6, #4]
 8026256:	941a      	str	r4, [sp, #104]	; 0x68
 8026258:	7974      	ldrb	r4, [r6, #5]
 802625a:	941c      	str	r4, [sp, #112]	; 0x70
 802625c:	b29b      	uxth	r3, r3
 802625e:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8026260:	b292      	uxth	r2, r2
 8026262:	9909      	ldr	r1, [sp, #36]	; 0x24
 8026264:	3503      	adds	r5, #3
 8026266:	f10c 3cff 	add.w	ip, ip, #4294967295
 802626a:	fb03 f402 	mul.w	r4, r3, r2
 802626e:	011b      	lsls	r3, r3, #4
 8026270:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 8026274:	f5c3 7680 	rsb	r6, r3, #256	; 0x100
 8026278:	1b1b      	subs	r3, r3, r4
 802627a:	b292      	uxth	r2, r2
 802627c:	b29b      	uxth	r3, r3
 802627e:	1ab6      	subs	r6, r6, r2
 8026280:	435f      	muls	r7, r3
 8026282:	b2b6      	uxth	r6, r6
 8026284:	fb03 f909 	mul.w	r9, r3, r9
 8026288:	fb03 fb0b 	mul.w	fp, r3, fp
 802628c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802628e:	fb06 7000 	mla	r0, r6, r0, r7
 8026292:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8026294:	fb06 bb03 	mla	fp, r6, r3, fp
 8026298:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 802629a:	fb02 0007 	mla	r0, r2, r7, r0
 802629e:	9f18      	ldr	r7, [sp, #96]	; 0x60
 80262a0:	fb02 bb03 	mla	fp, r2, r3, fp
 80262a4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80262a6:	fb04 0007 	mla	r0, r4, r7, r0
 80262aa:	f815 7c06 	ldrb.w	r7, [r5, #-6]
 80262ae:	fb17 f701 	smulbb	r7, r7, r1
 80262b2:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80262b6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80262b8:	fb00 700e 	mla	r0, r0, lr, r7
 80262bc:	fb06 9101 	mla	r1, r6, r1, r9
 80262c0:	b280      	uxth	r0, r0
 80262c2:	1c47      	adds	r7, r0, #1
 80262c4:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 80262c8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80262ca:	1200      	asrs	r0, r0, #8
 80262cc:	f805 0c06 	strb.w	r0, [r5, #-6]
 80262d0:	9819      	ldr	r0, [sp, #100]	; 0x64
 80262d2:	fb02 1100 	mla	r1, r2, r0, r1
 80262d6:	981a      	ldr	r0, [sp, #104]	; 0x68
 80262d8:	fb04 1100 	mla	r1, r4, r0, r1
 80262dc:	f815 0c05 	ldrb.w	r0, [r5, #-5]
 80262e0:	fb04 b403 	mla	r4, r4, r3, fp
 80262e4:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 80262e8:	fb10 f007 	smulbb	r0, r0, r7
 80262ec:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80262f0:	fb13 f307 	smulbb	r3, r3, r7
 80262f4:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80262f8:	fb01 010e 	mla	r1, r1, lr, r0
 80262fc:	fb04 340e 	mla	r4, r4, lr, r3
 8026300:	b289      	uxth	r1, r1
 8026302:	b2a4      	uxth	r4, r4
 8026304:	1c48      	adds	r0, r1, #1
 8026306:	1c63      	adds	r3, r4, #1
 8026308:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 802630c:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8026310:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8026312:	1209      	asrs	r1, r1, #8
 8026314:	1224      	asrs	r4, r4, #8
 8026316:	449a      	add	sl, r3
 8026318:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802631a:	f805 1c05 	strb.w	r1, [r5, #-5]
 802631e:	f805 4c04 	strb.w	r4, [r5, #-4]
 8026322:	4498      	add	r8, r3
 8026324:	e707      	b.n	8026136 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 8026326:	b01f      	add	sp, #124	; 0x7c
 8026328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802632c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 802632c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026330:	b087      	sub	sp, #28
 8026332:	780d      	ldrb	r5, [r1, #0]
 8026334:	784c      	ldrb	r4, [r1, #1]
 8026336:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 802633a:	f9bd 7040 	ldrsh.w	r7, [sp, #64]	; 0x40
 802633e:	9004      	str	r0, [sp, #16]
 8026340:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 8026344:	e9dd b611 	ldrd	fp, r6, [sp, #68]	; 0x44
 8026348:	9005      	str	r0, [sp, #20]
 802634a:	fb06 bc03 	mla	ip, r6, r3, fp
 802634e:	2e00      	cmp	r6, #0
 8026350:	7888      	ldrb	r0, [r1, #2]
 8026352:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8026356:	eb02 090c 	add.w	r9, r2, ip
 802635a:	f2c0 8084 	blt.w	8026466 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 802635e:	42b7      	cmp	r7, r6
 8026360:	f340 8081 	ble.w	8026466 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 8026364:	f1bb 0f00 	cmp.w	fp, #0
 8026368:	db79      	blt.n	802645e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 802636a:	455b      	cmp	r3, fp
 802636c:	dd77      	ble.n	802645e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 802636e:	f812 200c 	ldrb.w	r2, [r2, ip]
 8026372:	9201      	str	r2, [sp, #4]
 8026374:	f899 2001 	ldrb.w	r2, [r9, #1]
 8026378:	9202      	str	r2, [sp, #8]
 802637a:	f899 2002 	ldrb.w	r2, [r9, #2]
 802637e:	9203      	str	r2, [sp, #12]
 8026380:	f11b 0201 	adds.w	r2, fp, #1
 8026384:	d476      	bmi.n	8026474 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 8026386:	4293      	cmp	r3, r2
 8026388:	dd74      	ble.n	8026474 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 802638a:	9a04      	ldr	r2, [sp, #16]
 802638c:	2a00      	cmp	r2, #0
 802638e:	d071      	beq.n	8026474 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 8026390:	f899 8003 	ldrb.w	r8, [r9, #3]
 8026394:	f899 c004 	ldrb.w	ip, [r9, #4]
 8026398:	f899 a005 	ldrb.w	sl, [r9, #5]
 802639c:	3601      	adds	r6, #1
 802639e:	d471      	bmi.n	8026484 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 80263a0:	42b7      	cmp	r7, r6
 80263a2:	dd6f      	ble.n	8026484 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 80263a4:	9a05      	ldr	r2, [sp, #20]
 80263a6:	2a00      	cmp	r2, #0
 80263a8:	d06c      	beq.n	8026484 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 80263aa:	f1bb 0f00 	cmp.w	fp, #0
 80263ae:	db65      	blt.n	802647c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 80263b0:	455b      	cmp	r3, fp
 80263b2:	dd63      	ble.n	802647c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 80263b4:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80263b8:	f819 e002 	ldrb.w	lr, [r9, r2]
 80263bc:	2203      	movs	r2, #3
 80263be:	fb03 9602 	mla	r6, r3, r2, r9
 80263c2:	7877      	ldrb	r7, [r6, #1]
 80263c4:	78b6      	ldrb	r6, [r6, #2]
 80263c6:	f11b 0b01 	adds.w	fp, fp, #1
 80263ca:	d40c      	bmi.n	80263e6 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 80263cc:	455b      	cmp	r3, fp
 80263ce:	dd0a      	ble.n	80263e6 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 80263d0:	9a04      	ldr	r2, [sp, #16]
 80263d2:	b142      	cbz	r2, 80263e6 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 80263d4:	2203      	movs	r2, #3
 80263d6:	fb13 2002 	smlabb	r0, r3, r2, r2
 80263da:	f819 5000 	ldrb.w	r5, [r9, r0]
 80263de:	fb03 9002 	mla	r0, r3, r2, r9
 80263e2:	7904      	ldrb	r4, [r0, #4]
 80263e4:	7940      	ldrb	r0, [r0, #5]
 80263e6:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80263ea:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80263ee:	fb03 fb02 	mul.w	fp, r3, r2
 80263f2:	011b      	lsls	r3, r3, #4
 80263f4:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 80263f8:	f5c3 7980 	rsb	r9, r3, #256	; 0x100
 80263fc:	eba3 030b 	sub.w	r3, r3, fp
 8026400:	b292      	uxth	r2, r2
 8026402:	b29b      	uxth	r3, r3
 8026404:	eba9 0902 	sub.w	r9, r9, r2
 8026408:	9304      	str	r3, [sp, #16]
 802640a:	fa1f f989 	uxth.w	r9, r9
 802640e:	fb03 f808 	mul.w	r8, r3, r8
 8026412:	9b01      	ldr	r3, [sp, #4]
 8026414:	fb09 8803 	mla	r8, r9, r3, r8
 8026418:	9b04      	ldr	r3, [sp, #16]
 802641a:	fb03 fc0c 	mul.w	ip, r3, ip
 802641e:	9b02      	ldr	r3, [sp, #8]
 8026420:	fb02 880e 	mla	r8, r2, lr, r8
 8026424:	fb09 cc03 	mla	ip, r9, r3, ip
 8026428:	9b04      	ldr	r3, [sp, #16]
 802642a:	fb0b 8805 	mla	r8, fp, r5, r8
 802642e:	fb02 c707 	mla	r7, r2, r7, ip
 8026432:	fb03 f30a 	mul.w	r3, r3, sl
 8026436:	ea4f 2828 	mov.w	r8, r8, asr #8
 802643a:	fb0b 7404 	mla	r4, fp, r4, r7
 802643e:	f881 8000 	strb.w	r8, [r1]
 8026442:	1224      	asrs	r4, r4, #8
 8026444:	704c      	strb	r4, [r1, #1]
 8026446:	9c03      	ldr	r4, [sp, #12]
 8026448:	fb09 3904 	mla	r9, r9, r4, r3
 802644c:	fb02 9206 	mla	r2, r2, r6, r9
 8026450:	fb0b 2000 	mla	r0, fp, r0, r2
 8026454:	1200      	asrs	r0, r0, #8
 8026456:	7088      	strb	r0, [r1, #2]
 8026458:	b007      	add	sp, #28
 802645a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802645e:	e9cd 4002 	strd	r4, r0, [sp, #8]
 8026462:	9501      	str	r5, [sp, #4]
 8026464:	e78c      	b.n	8026380 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x54>
 8026466:	4682      	mov	sl, r0
 8026468:	46a4      	mov	ip, r4
 802646a:	46a8      	mov	r8, r5
 802646c:	9501      	str	r5, [sp, #4]
 802646e:	e9cd 4002 	strd	r4, r0, [sp, #8]
 8026472:	e793      	b.n	802639c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 8026474:	4682      	mov	sl, r0
 8026476:	46a4      	mov	ip, r4
 8026478:	46a8      	mov	r8, r5
 802647a:	e78f      	b.n	802639c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 802647c:	4606      	mov	r6, r0
 802647e:	4627      	mov	r7, r4
 8026480:	46ae      	mov	lr, r5
 8026482:	e7a0      	b.n	80263c6 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 8026484:	4606      	mov	r6, r0
 8026486:	4627      	mov	r7, r4
 8026488:	46ae      	mov	lr, r5
 802648a:	e7ac      	b.n	80263e6 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>

0802648c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802648c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026490:	b09b      	sub	sp, #108	; 0x6c
 8026492:	920b      	str	r2, [sp, #44]	; 0x2c
 8026494:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8026496:	9019      	str	r0, [sp, #100]	; 0x64
 8026498:	9109      	str	r1, [sp, #36]	; 0x24
 802649a:	6850      	ldr	r0, [r2, #4]
 802649c:	9306      	str	r3, [sp, #24]
 802649e:	6812      	ldr	r2, [r2, #0]
 80264a0:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 80264a4:	e9dd b425 	ldrd	fp, r4, [sp, #148]	; 0x94
 80264a8:	fb00 1303 	mla	r3, r0, r3, r1
 80264ac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80264b0:	18d3      	adds	r3, r2, r3
 80264b2:	9307      	str	r3, [sp, #28]
 80264b4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80264b6:	681b      	ldr	r3, [r3, #0]
 80264b8:	9308      	str	r3, [sp, #32]
 80264ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80264bc:	2b00      	cmp	r3, #0
 80264be:	dc03      	bgt.n	80264c8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80264c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80264c2:	2b00      	cmp	r3, #0
 80264c4:	f340 81ab 	ble.w	802681e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 80264c8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80264ca:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80264ce:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80264d2:	1e48      	subs	r0, r1, #1
 80264d4:	1e55      	subs	r5, r2, #1
 80264d6:	9b06      	ldr	r3, [sp, #24]
 80264d8:	2b00      	cmp	r3, #0
 80264da:	f340 80b1 	ble.w	8026640 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 80264de:	ea5f 462b 	movs.w	r6, fp, asr #16
 80264e2:	ea4f 4324 	mov.w	r3, r4, asr #16
 80264e6:	d406      	bmi.n	80264f6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80264e8:	4286      	cmp	r6, r0
 80264ea:	da04      	bge.n	80264f6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80264ec:	2b00      	cmp	r3, #0
 80264ee:	db02      	blt.n	80264f6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80264f0:	42ab      	cmp	r3, r5
 80264f2:	f2c0 80a6 	blt.w	8026642 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 80264f6:	3601      	adds	r6, #1
 80264f8:	f100 8097 	bmi.w	802662a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 80264fc:	42b1      	cmp	r1, r6
 80264fe:	f2c0 8094 	blt.w	802662a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8026502:	3301      	adds	r3, #1
 8026504:	f100 8091 	bmi.w	802662a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8026508:	429a      	cmp	r2, r3
 802650a:	f2c0 808e 	blt.w	802662a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 802650e:	9b06      	ldr	r3, [sp, #24]
 8026510:	9e07      	ldr	r6, [sp, #28]
 8026512:	930a      	str	r3, [sp, #40]	; 0x28
 8026514:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026516:	2b00      	cmp	r3, #0
 8026518:	f340 80b0 	ble.w	802667c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 802651c:	982c      	ldr	r0, [sp, #176]	; 0xb0
 802651e:	1425      	asrs	r5, r4, #16
 8026520:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026522:	f3cb 3203 	ubfx	r2, fp, #12, #4
 8026526:	68c7      	ldr	r7, [r0, #12]
 8026528:	ea5f 402b 	movs.w	r0, fp, asr #16
 802652c:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8026530:	689b      	ldr	r3, [r3, #8]
 8026532:	f100 80ea 	bmi.w	802670a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8026536:	f103 3cff 	add.w	ip, r3, #4294967295
 802653a:	4560      	cmp	r0, ip
 802653c:	f280 80e5 	bge.w	802670a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8026540:	2d00      	cmp	r5, #0
 8026542:	f2c0 80e2 	blt.w	802670a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8026546:	f107 3cff 	add.w	ip, r7, #4294967295
 802654a:	4565      	cmp	r5, ip
 802654c:	f280 80dd 	bge.w	802670a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8026550:	b21b      	sxth	r3, r3
 8026552:	fb05 0003 	mla	r0, r5, r3, r0
 8026556:	9d08      	ldr	r5, [sp, #32]
 8026558:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802655c:	182f      	adds	r7, r5, r0
 802655e:	5c2d      	ldrb	r5, [r5, r0]
 8026560:	7878      	ldrb	r0, [r7, #1]
 8026562:	f897 e002 	ldrb.w	lr, [r7, #2]
 8026566:	900c      	str	r0, [sp, #48]	; 0x30
 8026568:	f897 9003 	ldrb.w	r9, [r7, #3]
 802656c:	f897 8004 	ldrb.w	r8, [r7, #4]
 8026570:	f897 a005 	ldrb.w	sl, [r7, #5]
 8026574:	b1c9      	cbz	r1, 80265aa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8026576:	f04f 0c03 	mov.w	ip, #3
 802657a:	f06f 0004 	mvn.w	r0, #4
 802657e:	3705      	adds	r7, #5
 8026580:	fb13 030c 	smlabb	r3, r3, ip, r0
 8026584:	eb07 0c03 	add.w	ip, r7, r3
 8026588:	5cfb      	ldrb	r3, [r7, r3]
 802658a:	930d      	str	r3, [sp, #52]	; 0x34
 802658c:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8026590:	930f      	str	r3, [sp, #60]	; 0x3c
 8026592:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8026596:	9311      	str	r3, [sp, #68]	; 0x44
 8026598:	f89c 3003 	ldrb.w	r3, [ip, #3]
 802659c:	930e      	str	r3, [sp, #56]	; 0x38
 802659e:	f89c 3004 	ldrb.w	r3, [ip, #4]
 80265a2:	9310      	str	r3, [sp, #64]	; 0x40
 80265a4:	f89c 3005 	ldrb.w	r3, [ip, #5]
 80265a8:	9312      	str	r3, [sp, #72]	; 0x48
 80265aa:	b292      	uxth	r2, r2
 80265ac:	980c      	ldr	r0, [sp, #48]	; 0x30
 80265ae:	b289      	uxth	r1, r1
 80265b0:	fb02 f301 	mul.w	r3, r2, r1
 80265b4:	0112      	lsls	r2, r2, #4
 80265b6:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 80265ba:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 80265be:	1ad2      	subs	r2, r2, r3
 80265c0:	b289      	uxth	r1, r1
 80265c2:	b292      	uxth	r2, r2
 80265c4:	1a7f      	subs	r7, r7, r1
 80265c6:	fb02 f909 	mul.w	r9, r2, r9
 80265ca:	b2bf      	uxth	r7, r7
 80265cc:	fb02 f808 	mul.w	r8, r2, r8
 80265d0:	fb02 fa0a 	mul.w	sl, r2, sl
 80265d4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80265d6:	fb07 9905 	mla	r9, r7, r5, r9
 80265da:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80265dc:	fb07 8800 	mla	r8, r7, r0, r8
 80265e0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80265e2:	fb07 aa0e 	mla	sl, r7, lr, sl
 80265e6:	fb01 9905 	mla	r9, r1, r5, r9
 80265ea:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80265ec:	fb01 8800 	mla	r8, r1, r0, r8
 80265f0:	9810      	ldr	r0, [sp, #64]	; 0x40
 80265f2:	fb01 a102 	mla	r1, r1, r2, sl
 80265f6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80265f8:	fb03 9905 	mla	r9, r3, r5, r9
 80265fc:	fb03 8800 	mla	r8, r3, r0, r8
 8026600:	fb03 1302 	mla	r3, r3, r2, r1
 8026604:	ea4f 2929 	mov.w	r9, r9, asr #8
 8026608:	ea4f 2828 	mov.w	r8, r8, asr #8
 802660c:	121b      	asrs	r3, r3, #8
 802660e:	f886 9000 	strb.w	r9, [r6]
 8026612:	f886 8001 	strb.w	r8, [r6, #1]
 8026616:	70b3      	strb	r3, [r6, #2]
 8026618:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802661a:	3603      	adds	r6, #3
 802661c:	449b      	add	fp, r3
 802661e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026620:	441c      	add	r4, r3
 8026622:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026624:	3b01      	subs	r3, #1
 8026626:	930a      	str	r3, [sp, #40]	; 0x28
 8026628:	e774      	b.n	8026514 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 802662a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802662c:	449b      	add	fp, r3
 802662e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026630:	441c      	add	r4, r3
 8026632:	9b06      	ldr	r3, [sp, #24]
 8026634:	3b01      	subs	r3, #1
 8026636:	9306      	str	r3, [sp, #24]
 8026638:	9b07      	ldr	r3, [sp, #28]
 802663a:	3303      	adds	r3, #3
 802663c:	9307      	str	r3, [sp, #28]
 802663e:	e74a      	b.n	80264d6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8026640:	d024      	beq.n	802668c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8026642:	9b06      	ldr	r3, [sp, #24]
 8026644:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8026646:	3b01      	subs	r3, #1
 8026648:	fb00 b003 	mla	r0, r0, r3, fp
 802664c:	1400      	asrs	r0, r0, #16
 802664e:	f53f af5e 	bmi.w	802650e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8026652:	3901      	subs	r1, #1
 8026654:	4288      	cmp	r0, r1
 8026656:	f6bf af5a 	bge.w	802650e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802665a:	9928      	ldr	r1, [sp, #160]	; 0xa0
 802665c:	fb01 4303 	mla	r3, r1, r3, r4
 8026660:	141b      	asrs	r3, r3, #16
 8026662:	f53f af54 	bmi.w	802650e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8026666:	3a01      	subs	r2, #1
 8026668:	4293      	cmp	r3, r2
 802666a:	f6bf af50 	bge.w	802650e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802666e:	9b07      	ldr	r3, [sp, #28]
 8026670:	f8dd e018 	ldr.w	lr, [sp, #24]
 8026674:	1cde      	adds	r6, r3, #3
 8026676:	f1be 0f00 	cmp.w	lr, #0
 802667a:	dc5f      	bgt.n	802673c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 802667c:	9b06      	ldr	r3, [sp, #24]
 802667e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8026682:	9b07      	ldr	r3, [sp, #28]
 8026684:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8026688:	4423      	add	r3, r4
 802668a:	9307      	str	r3, [sp, #28]
 802668c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802668e:	2b00      	cmp	r3, #0
 8026690:	f340 80c5 	ble.w	802681e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8026694:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8026698:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802669a:	ee30 0a04 	vadd.f32	s0, s0, s8
 802669e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80266a2:	eef0 6a62 	vmov.f32	s13, s5
 80266a6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80266aa:	ee31 1a05 	vadd.f32	s2, s2, s10
 80266ae:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80266b2:	ee16 ba90 	vmov	fp, s13
 80266b6:	eef0 6a43 	vmov.f32	s13, s6
 80266ba:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80266be:	ee16 4a90 	vmov	r4, s13
 80266c2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80266c6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80266ca:	ee77 2a62 	vsub.f32	s5, s14, s5
 80266ce:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80266d2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80266d6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80266da:	ee12 2a90 	vmov	r2, s5
 80266de:	eef0 2a47 	vmov.f32	s5, s14
 80266e2:	fb92 f3f3 	sdiv	r3, r2, r3
 80266e6:	ee13 2a10 	vmov	r2, s6
 80266ea:	9327      	str	r3, [sp, #156]	; 0x9c
 80266ec:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80266ee:	eeb0 3a67 	vmov.f32	s6, s15
 80266f2:	fb92 f3f3 	sdiv	r3, r2, r3
 80266f6:	9328      	str	r3, [sp, #160]	; 0xa0
 80266f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80266fa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80266fc:	3b01      	subs	r3, #1
 80266fe:	9309      	str	r3, [sp, #36]	; 0x24
 8026700:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026702:	bf08      	it	eq
 8026704:	4613      	moveq	r3, r2
 8026706:	9306      	str	r3, [sp, #24]
 8026708:	e6d7      	b.n	80264ba <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 802670a:	f110 0c01 	adds.w	ip, r0, #1
 802670e:	d483      	bmi.n	8026618 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8026710:	4563      	cmp	r3, ip
 8026712:	db81      	blt.n	8026618 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8026714:	f115 0c01 	adds.w	ip, r5, #1
 8026718:	f53f af7e 	bmi.w	8026618 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 802671c:	4567      	cmp	r7, ip
 802671e:	f6ff af7b 	blt.w	8026618 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8026722:	b23f      	sxth	r7, r7
 8026724:	b21b      	sxth	r3, r3
 8026726:	9700      	str	r7, [sp, #0]
 8026728:	e9cd 2103 	strd	r2, r1, [sp, #12]
 802672c:	e9cd 0501 	strd	r0, r5, [sp, #4]
 8026730:	9a08      	ldr	r2, [sp, #32]
 8026732:	4631      	mov	r1, r6
 8026734:	9819      	ldr	r0, [sp, #100]	; 0x64
 8026736:	f7ff fdf9 	bl	802632c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 802673a:	e76d      	b.n	8026618 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 802673c:	992c      	ldr	r1, [sp, #176]	; 0xb0
 802673e:	ea4f 402b 	mov.w	r0, fp, asr #16
 8026742:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8026746:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802674a:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 802674e:	1421      	asrs	r1, r4, #16
 8026750:	930a      	str	r3, [sp, #40]	; 0x28
 8026752:	fb0c 0101 	mla	r1, ip, r1, r0
 8026756:	9808      	ldr	r0, [sp, #32]
 8026758:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802675c:	1845      	adds	r5, r0, r1
 802675e:	5c40      	ldrb	r0, [r0, r1]
 8026760:	796f      	ldrb	r7, [r5, #5]
 8026762:	7869      	ldrb	r1, [r5, #1]
 8026764:	f895 8002 	ldrb.w	r8, [r5, #2]
 8026768:	f895 a003 	ldrb.w	sl, [r5, #3]
 802676c:	f895 9004 	ldrb.w	r9, [r5, #4]
 8026770:	970c      	str	r7, [sp, #48]	; 0x30
 8026772:	b1a2      	cbz	r2, 802679e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 8026774:	2703      	movs	r7, #3
 8026776:	f06f 0304 	mvn.w	r3, #4
 802677a:	3505      	adds	r5, #5
 802677c:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 8026780:	eb05 070c 	add.w	r7, r5, ip
 8026784:	f815 500c 	ldrb.w	r5, [r5, ip]
 8026788:	9513      	str	r5, [sp, #76]	; 0x4c
 802678a:	787d      	ldrb	r5, [r7, #1]
 802678c:	9515      	str	r5, [sp, #84]	; 0x54
 802678e:	78bd      	ldrb	r5, [r7, #2]
 8026790:	9517      	str	r5, [sp, #92]	; 0x5c
 8026792:	78fd      	ldrb	r5, [r7, #3]
 8026794:	9514      	str	r5, [sp, #80]	; 0x50
 8026796:	793d      	ldrb	r5, [r7, #4]
 8026798:	9516      	str	r5, [sp, #88]	; 0x58
 802679a:	797d      	ldrb	r5, [r7, #5]
 802679c:	9518      	str	r5, [sp, #96]	; 0x60
 802679e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 80267a2:	b292      	uxth	r2, r2
 80267a4:	3603      	adds	r6, #3
 80267a6:	f10e 3eff 	add.w	lr, lr, #4294967295
 80267aa:	fb03 f502 	mul.w	r5, r3, r2
 80267ae:	011b      	lsls	r3, r3, #4
 80267b0:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 80267b4:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 80267b8:	1b5b      	subs	r3, r3, r5
 80267ba:	b292      	uxth	r2, r2
 80267bc:	b29b      	uxth	r3, r3
 80267be:	1abf      	subs	r7, r7, r2
 80267c0:	fb03 f909 	mul.w	r9, r3, r9
 80267c4:	b2bf      	uxth	r7, r7
 80267c6:	fb03 fa0a 	mul.w	sl, r3, sl
 80267ca:	fb07 9901 	mla	r9, r7, r1, r9
 80267ce:	9915      	ldr	r1, [sp, #84]	; 0x54
 80267d0:	fb07 aa00 	mla	sl, r7, r0, sl
 80267d4:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80267d6:	fb02 9901 	mla	r9, r2, r1, r9
 80267da:	9916      	ldr	r1, [sp, #88]	; 0x58
 80267dc:	fb02 aa00 	mla	sl, r2, r0, sl
 80267e0:	9814      	ldr	r0, [sp, #80]	; 0x50
 80267e2:	fb05 9901 	mla	r9, r5, r1, r9
 80267e6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80267e8:	fb05 aa00 	mla	sl, r5, r0, sl
 80267ec:	434b      	muls	r3, r1
 80267ee:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80267f0:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80267f4:	fb07 3308 	mla	r3, r7, r8, r3
 80267f8:	ea4f 2929 	mov.w	r9, r9, asr #8
 80267fc:	f806 ac06 	strb.w	sl, [r6, #-6]
 8026800:	fb02 3201 	mla	r2, r2, r1, r3
 8026804:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8026806:	f806 9c05 	strb.w	r9, [r6, #-5]
 802680a:	fb05 2503 	mla	r5, r5, r3, r2
 802680e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8026810:	122d      	asrs	r5, r5, #8
 8026812:	449b      	add	fp, r3
 8026814:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026816:	f806 5c04 	strb.w	r5, [r6, #-4]
 802681a:	441c      	add	r4, r3
 802681c:	e72b      	b.n	8026676 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 802681e:	b01b      	add	sp, #108	; 0x6c
 8026820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08026824 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 8026824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026828:	b087      	sub	sp, #28
 802682a:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	; 0x44
 802682e:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 8026832:	fb05 7003 	mla	r0, r5, r3, r7
 8026836:	2d00      	cmp	r5, #0
 8026838:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 802683c:	f89d e050 	ldrb.w	lr, [sp, #80]	; 0x50
 8026840:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 8026844:	f2c0 811f 	blt.w	8026a86 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 8026848:	45a8      	cmp	r8, r5
 802684a:	f340 811c 	ble.w	8026a86 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 802684e:	2f00      	cmp	r7, #0
 8026850:	f2c0 8117 	blt.w	8026a82 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 8026854:	42bb      	cmp	r3, r7
 8026856:	f340 8114 	ble.w	8026a82 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 802685a:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 802685e:	1c7a      	adds	r2, r7, #1
 8026860:	f100 8114 	bmi.w	8026a8c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 8026864:	4293      	cmp	r3, r2
 8026866:	f340 8111 	ble.w	8026a8c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 802686a:	2c00      	cmp	r4, #0
 802686c:	f000 8110 	beq.w	8026a90 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x26c>
 8026870:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8026874:	3501      	adds	r5, #1
 8026876:	f100 810f 	bmi.w	8026a98 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 802687a:	45a8      	cmp	r8, r5
 802687c:	f340 810c 	ble.w	8026a98 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 8026880:	f1be 0f00 	cmp.w	lr, #0
 8026884:	f000 810b 	beq.w	8026a9e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x27a>
 8026888:	2f00      	cmp	r7, #0
 802688a:	f2c0 8103 	blt.w	8026a94 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 802688e:	42bb      	cmp	r3, r7
 8026890:	f340 8100 	ble.w	8026a94 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 8026894:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 8026898:	3701      	adds	r7, #1
 802689a:	f100 8103 	bmi.w	8026aa4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 802689e:	42bb      	cmp	r3, r7
 80268a0:	f340 8100 	ble.w	8026aa4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 80268a4:	2c00      	cmp	r4, #0
 80268a6:	f000 80ff 	beq.w	8026aa8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x284>
 80268aa:	3301      	adds	r3, #1
 80268ac:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80268b0:	fa1f fc84 	uxth.w	ip, r4
 80268b4:	fa1f fe8e 	uxth.w	lr, lr
 80268b8:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80268bc:	fb0c f90e 	mul.w	r9, ip, lr
 80268c0:	0e13      	lsrs	r3, r2, #24
 80268c2:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 80268c6:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 80268ca:	9302      	str	r3, [sp, #8]
 80268cc:	ebac 0709 	sub.w	r7, ip, r9
 80268d0:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 80268d4:	fa1f f48e 	uxth.w	r4, lr
 80268d8:	f006 1eff 	and.w	lr, r6, #16711935	; 0xff00ff
 80268dc:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80268e0:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 80268e4:	fb0a fe0e 	mul.w	lr, sl, lr
 80268e8:	1b1b      	subs	r3, r3, r4
 80268ea:	fb0a f606 	mul.w	r6, sl, r6
 80268ee:	ea4f 6815 	mov.w	r8, r5, lsr #24
 80268f2:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 80268f6:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80268fa:	b29b      	uxth	r3, r3
 80268fc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026900:	b2bf      	uxth	r7, r7
 8026902:	9301      	str	r3, [sp, #4]
 8026904:	44e6      	add	lr, ip
 8026906:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 802690a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802690e:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8026912:	f00e 13ff 	and.w	r3, lr, #16711935	; 0xff00ff
 8026916:	9303      	str	r3, [sp, #12]
 8026918:	0a33      	lsrs	r3, r6, #8
 802691a:	f000 16ff 	and.w	r6, r0, #16711935	; 0xff00ff
 802691e:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8026922:	9304      	str	r3, [sp, #16]
 8026924:	fb0b f606 	mul.w	r6, fp, r6
 8026928:	fb0b f000 	mul.w	r0, fp, r0
 802692c:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 8026930:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8026934:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026938:	44b6      	add	lr, r6
 802693a:	f500 7680 	add.w	r6, r0, #256	; 0x100
 802693e:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 8026942:	f005 16ff 	and.w	r6, r5, #16711935	; 0xff00ff
 8026946:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 802694a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802694e:	fb08 f606 	mul.w	r6, r8, r6
 8026952:	0a03      	lsrs	r3, r0, #8
 8026954:	fb08 f505 	mul.w	r5, r8, r5
 8026958:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802695c:	0a30      	lsrs	r0, r6, #8
 802695e:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8026962:	9305      	str	r3, [sp, #20]
 8026964:	0e13      	lsrs	r3, r2, #24
 8026966:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802696a:	fb0e fe07 	mul.w	lr, lr, r7
 802696e:	4430      	add	r0, r6
 8026970:	f505 7680 	add.w	r6, r5, #256	; 0x100
 8026974:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8026978:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 802697c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8026980:	0a00      	lsrs	r0, r0, #8
 8026982:	435e      	muls	r6, r3
 8026984:	0a2d      	lsrs	r5, r5, #8
 8026986:	435a      	muls	r2, r3
 8026988:	9b03      	ldr	r3, [sp, #12]
 802698a:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 802698e:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8026992:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8026996:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802699a:	44b4      	add	ip, r6
 802699c:	f502 7680 	add.w	r6, r2, #256	; 0x100
 80269a0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80269a4:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 80269a8:	9e01      	ldr	r6, [sp, #4]
 80269aa:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80269ae:	fb03 ee06 	mla	lr, r3, r6, lr
 80269b2:	9b04      	ldr	r3, [sp, #16]
 80269b4:	0a12      	lsrs	r2, r2, #8
 80269b6:	fb0c ee09 	mla	lr, ip, r9, lr
 80269ba:	f403 467f 	and.w	r6, r3, #65280	; 0xff00
 80269be:	9b05      	ldr	r3, [sp, #20]
 80269c0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80269c4:	fb00 ee04 	mla	lr, r0, r4, lr
 80269c8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80269cc:	f00e 10ff 	and.w	r0, lr, #16711935	; 0xff00ff
 80269d0:	f403 4e7f 	and.w	lr, r3, #65280	; 0xff00
 80269d4:	9b01      	ldr	r3, [sp, #4]
 80269d6:	fb07 fe0e 	mul.w	lr, r7, lr
 80269da:	fb07 f70b 	mul.w	r7, r7, fp
 80269de:	fb03 ee06 	mla	lr, r3, r6, lr
 80269e2:	fb03 730a 	mla	r3, r3, sl, r7
 80269e6:	fb09 e202 	mla	r2, r9, r2, lr
 80269ea:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 80269ee:	fb04 2e0e 	mla	lr, r4, lr, r2
 80269f2:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 80269f6:	fb04 3408 	mla	r4, r4, r8, r3
 80269fa:	9b02      	ldr	r3, [sp, #8]
 80269fc:	b292      	uxth	r2, r2
 80269fe:	fb09 4903 	mla	r9, r9, r3, r4
 8026a02:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026a06:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8026a0a:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8026a0e:	fb09 f902 	mul.w	r9, r9, r2
 8026a12:	ea40 0e0e 	orr.w	lr, r0, lr
 8026a16:	f109 0301 	add.w	r3, r9, #1
 8026a1a:	fa5f f08e 	uxtb.w	r0, lr
 8026a1e:	fb10 f002 	smulbb	r0, r0, r2
 8026a22:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 8026a26:	780b      	ldrb	r3, [r1, #0]
 8026a28:	ea6f 2919 	mvn.w	r9, r9, lsr #8
 8026a2c:	fa5f f989 	uxtb.w	r9, r9
 8026a30:	fb03 0309 	mla	r3, r3, r9, r0
 8026a34:	b29b      	uxth	r3, r3
 8026a36:	1c58      	adds	r0, r3, #1
 8026a38:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8026a3c:	7848      	ldrb	r0, [r1, #1]
 8026a3e:	fb10 f009 	smulbb	r0, r0, r9
 8026a42:	121b      	asrs	r3, r3, #8
 8026a44:	700b      	strb	r3, [r1, #0]
 8026a46:	f3ce 2307 	ubfx	r3, lr, #8, #8
 8026a4a:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8026a4e:	fb03 0302 	mla	r3, r3, r2, r0
 8026a52:	b29b      	uxth	r3, r3
 8026a54:	1c58      	adds	r0, r3, #1
 8026a56:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8026a5a:	121b      	asrs	r3, r3, #8
 8026a5c:	704b      	strb	r3, [r1, #1]
 8026a5e:	788b      	ldrb	r3, [r1, #2]
 8026a60:	fb13 f909 	smulbb	r9, r3, r9
 8026a64:	fb0e 9e02 	mla	lr, lr, r2, r9
 8026a68:	fa1f fe8e 	uxth.w	lr, lr
 8026a6c:	f10e 0301 	add.w	r3, lr, #1
 8026a70:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 8026a74:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8026a78:	f881 e002 	strb.w	lr, [r1, #2]
 8026a7c:	b007      	add	sp, #28
 8026a7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026a82:	2600      	movs	r6, #0
 8026a84:	e6eb      	b.n	802685e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3a>
 8026a86:	2000      	movs	r0, #0
 8026a88:	4606      	mov	r6, r0
 8026a8a:	e6f3      	b.n	8026874 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 8026a8c:	2000      	movs	r0, #0
 8026a8e:	e6f1      	b.n	8026874 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 8026a90:	4620      	mov	r0, r4
 8026a92:	e6ef      	b.n	8026874 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 8026a94:	2500      	movs	r5, #0
 8026a96:	e6ff      	b.n	8026898 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x74>
 8026a98:	2200      	movs	r2, #0
 8026a9a:	4615      	mov	r5, r2
 8026a9c:	e708      	b.n	80268b0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8026a9e:	4672      	mov	r2, lr
 8026aa0:	4675      	mov	r5, lr
 8026aa2:	e705      	b.n	80268b0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8026aa4:	2200      	movs	r2, #0
 8026aa6:	e703      	b.n	80268b0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8026aa8:	4622      	mov	r2, r4
 8026aaa:	e701      	b.n	80268b0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>

08026aac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026ab0:	b09d      	sub	sp, #116	; 0x74
 8026ab2:	9219      	str	r2, [sp, #100]	; 0x64
 8026ab4:	9307      	str	r3, [sp, #28]
 8026ab6:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8026ab8:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 8026abc:	901b      	str	r0, [sp, #108]	; 0x6c
 8026abe:	931a      	str	r3, [sp, #104]	; 0x68
 8026ac0:	6850      	ldr	r0, [r2, #4]
 8026ac2:	9117      	str	r1, [sp, #92]	; 0x5c
 8026ac4:	6812      	ldr	r2, [r2, #0]
 8026ac6:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8026aca:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	; 0x9c
 8026ace:	fb00 1303 	mla	r3, r0, r3, r1
 8026ad2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8026ad6:	18d3      	adds	r3, r2, r3
 8026ad8:	930a      	str	r3, [sp, #40]	; 0x28
 8026ada:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8026adc:	681b      	ldr	r3, [r3, #0]
 8026ade:	9310      	str	r3, [sp, #64]	; 0x40
 8026ae0:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 8026ae4:	930b      	str	r3, [sp, #44]	; 0x2c
 8026ae6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8026ae8:	2b00      	cmp	r3, #0
 8026aea:	dc03      	bgt.n	8026af4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8026aec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8026aee:	2b00      	cmp	r3, #0
 8026af0:	f340 8368 	ble.w	80271c4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 8026af4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8026af6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026afa:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8026afe:	1e48      	subs	r0, r1, #1
 8026b00:	1e57      	subs	r7, r2, #1
 8026b02:	9b07      	ldr	r3, [sp, #28]
 8026b04:	2b00      	cmp	r3, #0
 8026b06:	f340 8187 	ble.w	8026e18 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8026b0a:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8026b0e:	ea4f 4326 	mov.w	r3, r6, asr #16
 8026b12:	d406      	bmi.n	8026b22 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8026b14:	4584      	cmp	ip, r0
 8026b16:	da04      	bge.n	8026b22 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8026b18:	2b00      	cmp	r3, #0
 8026b1a:	db02      	blt.n	8026b22 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8026b1c:	42bb      	cmp	r3, r7
 8026b1e:	f2c0 817c 	blt.w	8026e1a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8026b22:	f11c 0c01 	adds.w	ip, ip, #1
 8026b26:	f100 816c 	bmi.w	8026e02 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8026b2a:	4561      	cmp	r1, ip
 8026b2c:	f2c0 8169 	blt.w	8026e02 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8026b30:	3301      	adds	r3, #1
 8026b32:	f100 8166 	bmi.w	8026e02 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8026b36:	429a      	cmp	r2, r3
 8026b38:	f2c0 8163 	blt.w	8026e02 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8026b3c:	9b07      	ldr	r3, [sp, #28]
 8026b3e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8026b40:	9318      	str	r3, [sp, #96]	; 0x60
 8026b42:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8026b44:	2b00      	cmp	r3, #0
 8026b46:	f340 8186 	ble.w	8026e56 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8026b4a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8026b4c:	142a      	asrs	r2, r5, #16
 8026b4e:	ea4f 4026 	mov.w	r0, r6, asr #16
 8026b52:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8026b56:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8026b5a:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8026b5e:	f100 81cb 	bmi.w	8026ef8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8026b62:	f10e 38ff 	add.w	r8, lr, #4294967295
 8026b66:	4542      	cmp	r2, r8
 8026b68:	f280 81c6 	bge.w	8026ef8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8026b6c:	2800      	cmp	r0, #0
 8026b6e:	f2c0 81c3 	blt.w	8026ef8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8026b72:	f103 38ff 	add.w	r8, r3, #4294967295
 8026b76:	4540      	cmp	r0, r8
 8026b78:	f280 81be 	bge.w	8026ef8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8026b7c:	fa0f f38e 	sxth.w	r3, lr
 8026b80:	fb00 2203 	mla	r2, r0, r3, r2
 8026b84:	9810      	ldr	r0, [sp, #64]	; 0x40
 8026b86:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 8026b8a:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8026b8e:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8026b92:	2900      	cmp	r1, #0
 8026b94:	f000 81a6 	beq.w	8026ee4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 8026b98:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8026b9c:	900c      	str	r0, [sp, #48]	; 0x30
 8026b9e:	0e00      	lsrs	r0, r0, #24
 8026ba0:	9013      	str	r0, [sp, #76]	; 0x4c
 8026ba2:	f1bc 0f00 	cmp.w	ip, #0
 8026ba6:	d00f      	beq.n	8026bc8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8026ba8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8026bac:	3b01      	subs	r3, #1
 8026bae:	009b      	lsls	r3, r3, #2
 8026bb0:	3304      	adds	r3, #4
 8026bb2:	eb08 0003 	add.w	r0, r8, r3
 8026bb6:	f858 3003 	ldr.w	r3, [r8, r3]
 8026bba:	9308      	str	r3, [sp, #32]
 8026bbc:	0e1b      	lsrs	r3, r3, #24
 8026bbe:	9311      	str	r3, [sp, #68]	; 0x44
 8026bc0:	6843      	ldr	r3, [r0, #4]
 8026bc2:	930d      	str	r3, [sp, #52]	; 0x34
 8026bc4:	0e1b      	lsrs	r3, r3, #24
 8026bc6:	9314      	str	r3, [sp, #80]	; 0x50
 8026bc8:	b289      	uxth	r1, r1
 8026bca:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8026bcc:	fa1f fc8c 	uxth.w	ip, ip
 8026bd0:	0108      	lsls	r0, r1, #4
 8026bd2:	fb01 f90c 	mul.w	r9, r1, ip
 8026bd6:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8026bda:	ebc9 1c0c 	rsb	ip, r9, ip, lsl #4
 8026bde:	eba0 0809 	sub.w	r8, r0, r9
 8026be2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8026be4:	fa1f f18c 	uxth.w	r1, ip
 8026be8:	fa1f f888 	uxth.w	r8, r8
 8026bec:	1a5b      	subs	r3, r3, r1
 8026bee:	fb08 f000 	mul.w	r0, r8, r0
 8026bf2:	b29b      	uxth	r3, r3
 8026bf4:	fb03 000e 	mla	r0, r3, lr, r0
 8026bf8:	fb01 0004 	mla	r0, r1, r4, r0
 8026bfc:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8026bfe:	fb09 0004 	mla	r0, r9, r4, r0
 8026c02:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8026c06:	2800      	cmp	r0, #0
 8026c08:	f000 80f2 	beq.w	8026df0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8026c0c:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8026c10:	d01b      	beq.n	8026c4a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8026c12:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8026c16:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8026c1a:	fb0e fa0a 	mul.w	sl, lr, sl
 8026c1e:	fb0e fe02 	mul.w	lr, lr, r2
 8026c22:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8026c26:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8026c2a:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8026c2e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8026c32:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8026c36:	4452      	add	r2, sl
 8026c38:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026c3c:	0a12      	lsrs	r2, r2, #8
 8026c3e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8026c42:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8026c46:	ea42 020c 	orr.w	r2, r2, ip
 8026c4a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8026c4c:	2cff      	cmp	r4, #255	; 0xff
 8026c4e:	d021      	beq.n	8026c94 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8026c50:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8026c52:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8026c56:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8026c58:	fb04 fb0b 	mul.w	fp, r4, fp
 8026c5c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8026c5e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8026c62:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8026c64:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8026c68:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8026c6c:	fb04 fa0a 	mul.w	sl, r4, sl
 8026c70:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026c74:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8026c78:	44de      	add	lr, fp
 8026c7a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8026c7e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026c82:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026c86:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026c8a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026c8e:	ea4e 040a 	orr.w	r4, lr, sl
 8026c92:	940c      	str	r4, [sp, #48]	; 0x30
 8026c94:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8026c96:	2cff      	cmp	r4, #255	; 0xff
 8026c98:	d021      	beq.n	8026cde <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 8026c9a:	9c08      	ldr	r4, [sp, #32]
 8026c9c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8026ca0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8026ca2:	fb04 fb0b 	mul.w	fp, r4, fp
 8026ca6:	9c08      	ldr	r4, [sp, #32]
 8026ca8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8026cac:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8026cae:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8026cb2:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8026cb6:	fb04 fa0a 	mul.w	sl, r4, sl
 8026cba:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026cbe:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8026cc2:	44de      	add	lr, fp
 8026cc4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8026cc8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026ccc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026cd0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026cd4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026cd8:	ea4e 040a 	orr.w	r4, lr, sl
 8026cdc:	9408      	str	r4, [sp, #32]
 8026cde:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8026ce0:	2cff      	cmp	r4, #255	; 0xff
 8026ce2:	d021      	beq.n	8026d28 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8026ce4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8026ce6:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8026cea:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8026cec:	fb04 fb0b 	mul.w	fp, r4, fp
 8026cf0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8026cf2:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8026cf6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8026cf8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8026cfc:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8026d00:	fb04 fa0a 	mul.w	sl, r4, sl
 8026d04:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026d08:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8026d0c:	44de      	add	lr, fp
 8026d0e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8026d12:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026d16:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026d1a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026d1e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026d22:	ea4e 040a 	orr.w	r4, lr, sl
 8026d26:	940d      	str	r4, [sp, #52]	; 0x34
 8026d28:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8026d2a:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8026d2e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8026d32:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8026d36:	9c08      	ldr	r4, [sp, #32]
 8026d38:	fb08 fc0c 	mul.w	ip, r8, ip
 8026d3c:	fb03 cc0e 	mla	ip, r3, lr, ip
 8026d40:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8026d44:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8026d46:	fb01 cc0e 	mla	ip, r1, lr, ip
 8026d4a:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8026d4e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8026d50:	fb09 cc0e 	mla	ip, r9, lr, ip
 8026d54:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8026d58:	fb08 f80e 	mul.w	r8, r8, lr
 8026d5c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026d60:	fb03 8202 	mla	r2, r3, r2, r8
 8026d64:	9b08      	ldr	r3, [sp, #32]
 8026d66:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026d6a:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 8026d6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8026d70:	fb01 220a 	mla	r2, r1, sl, r2
 8026d74:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 8026d78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8026d7a:	fb09 2901 	mla	r9, r9, r1, r2
 8026d7e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8026d80:	4343      	muls	r3, r0
 8026d82:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8026d86:	1c58      	adds	r0, r3, #1
 8026d88:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8026d8c:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8026d90:	783b      	ldrb	r3, [r7, #0]
 8026d92:	ea4c 0c09 	orr.w	ip, ip, r9
 8026d96:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8026d9a:	fa5f f28c 	uxtb.w	r2, ip
 8026d9e:	b2c0      	uxtb	r0, r0
 8026da0:	fb12 f201 	smulbb	r2, r2, r1
 8026da4:	fb03 2300 	mla	r3, r3, r0, r2
 8026da8:	b29b      	uxth	r3, r3
 8026daa:	1c5a      	adds	r2, r3, #1
 8026dac:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8026db0:	787a      	ldrb	r2, [r7, #1]
 8026db2:	fb12 f200 	smulbb	r2, r2, r0
 8026db6:	121b      	asrs	r3, r3, #8
 8026db8:	703b      	strb	r3, [r7, #0]
 8026dba:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8026dbe:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8026dc2:	fb03 2301 	mla	r3, r3, r1, r2
 8026dc6:	b29b      	uxth	r3, r3
 8026dc8:	1c5a      	adds	r2, r3, #1
 8026dca:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8026dce:	121b      	asrs	r3, r3, #8
 8026dd0:	707b      	strb	r3, [r7, #1]
 8026dd2:	78bb      	ldrb	r3, [r7, #2]
 8026dd4:	fb13 f000 	smulbb	r0, r3, r0
 8026dd8:	fb0c 0c01 	mla	ip, ip, r1, r0
 8026ddc:	fa1f fc8c 	uxth.w	ip, ip
 8026de0:	f10c 0301 	add.w	r3, ip, #1
 8026de4:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8026de8:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8026dec:	f887 c002 	strb.w	ip, [r7, #2]
 8026df0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8026df2:	3703      	adds	r7, #3
 8026df4:	441d      	add	r5, r3
 8026df6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8026df8:	441e      	add	r6, r3
 8026dfa:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8026dfc:	3b01      	subs	r3, #1
 8026dfe:	9318      	str	r3, [sp, #96]	; 0x60
 8026e00:	e69f      	b.n	8026b42 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8026e02:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8026e04:	441d      	add	r5, r3
 8026e06:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8026e08:	441e      	add	r6, r3
 8026e0a:	9b07      	ldr	r3, [sp, #28]
 8026e0c:	3b01      	subs	r3, #1
 8026e0e:	9307      	str	r3, [sp, #28]
 8026e10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026e12:	3303      	adds	r3, #3
 8026e14:	930a      	str	r3, [sp, #40]	; 0x28
 8026e16:	e674      	b.n	8026b02 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8026e18:	d025      	beq.n	8026e66 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 8026e1a:	9b07      	ldr	r3, [sp, #28]
 8026e1c:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8026e1e:	3b01      	subs	r3, #1
 8026e20:	fb00 5003 	mla	r0, r0, r3, r5
 8026e24:	1400      	asrs	r0, r0, #16
 8026e26:	f53f ae89 	bmi.w	8026b3c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8026e2a:	3901      	subs	r1, #1
 8026e2c:	4288      	cmp	r0, r1
 8026e2e:	f6bf ae85 	bge.w	8026b3c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8026e32:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8026e34:	fb01 6303 	mla	r3, r1, r3, r6
 8026e38:	141b      	asrs	r3, r3, #16
 8026e3a:	f53f ae7f 	bmi.w	8026b3c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8026e3e:	3a01      	subs	r2, #1
 8026e40:	4293      	cmp	r3, r2
 8026e42:	f6bf ae7b 	bge.w	8026b3c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8026e46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026e48:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8026e4c:	f103 0e03 	add.w	lr, r3, #3
 8026e50:	f1bb 0f00 	cmp.w	fp, #0
 8026e54:	dc6e      	bgt.n	8026f34 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 8026e56:	9b07      	ldr	r3, [sp, #28]
 8026e58:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8026e5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026e5e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8026e62:	4423      	add	r3, r4
 8026e64:	930a      	str	r3, [sp, #40]	; 0x28
 8026e66:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8026e68:	2b00      	cmp	r3, #0
 8026e6a:	f340 81ab 	ble.w	80271c4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 8026e6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8026e72:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8026e74:	ee30 0a04 	vadd.f32	s0, s0, s8
 8026e78:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8026e7c:	eef0 6a62 	vmov.f32	s13, s5
 8026e80:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8026e84:	ee31 1a05 	vadd.f32	s2, s2, s10
 8026e88:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026e8c:	ee16 5a90 	vmov	r5, s13
 8026e90:	eef0 6a43 	vmov.f32	s13, s6
 8026e94:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026e98:	ee16 6a90 	vmov	r6, s13
 8026e9c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8026ea0:	ee61 7a27 	vmul.f32	s15, s2, s15
 8026ea4:	ee77 2a62 	vsub.f32	s5, s14, s5
 8026ea8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8026eac:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8026eb0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8026eb4:	ee12 2a90 	vmov	r2, s5
 8026eb8:	eef0 2a47 	vmov.f32	s5, s14
 8026ebc:	fb92 f3f3 	sdiv	r3, r2, r3
 8026ec0:	ee13 2a10 	vmov	r2, s6
 8026ec4:	9329      	str	r3, [sp, #164]	; 0xa4
 8026ec6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8026ec8:	eeb0 3a67 	vmov.f32	s6, s15
 8026ecc:	fb92 f3f3 	sdiv	r3, r2, r3
 8026ed0:	932a      	str	r3, [sp, #168]	; 0xa8
 8026ed2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8026ed4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8026ed6:	3b01      	subs	r3, #1
 8026ed8:	9317      	str	r3, [sp, #92]	; 0x5c
 8026eda:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8026edc:	bf08      	it	eq
 8026ede:	4613      	moveq	r3, r2
 8026ee0:	9307      	str	r3, [sp, #28]
 8026ee2:	e600      	b.n	8026ae6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8026ee4:	f1bc 0f00 	cmp.w	ip, #0
 8026ee8:	f43f ae6e 	beq.w	8026bc8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8026eec:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8026ef0:	9308      	str	r3, [sp, #32]
 8026ef2:	0e1b      	lsrs	r3, r3, #24
 8026ef4:	9311      	str	r3, [sp, #68]	; 0x44
 8026ef6:	e667      	b.n	8026bc8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8026ef8:	f112 0801 	adds.w	r8, r2, #1
 8026efc:	f53f af78 	bmi.w	8026df0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8026f00:	45c6      	cmp	lr, r8
 8026f02:	f6ff af75 	blt.w	8026df0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8026f06:	f110 0801 	adds.w	r8, r0, #1
 8026f0a:	f53f af71 	bmi.w	8026df0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8026f0e:	4543      	cmp	r3, r8
 8026f10:	f6ff af6e 	blt.w	8026df0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8026f14:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8026f16:	b21b      	sxth	r3, r3
 8026f18:	9201      	str	r2, [sp, #4]
 8026f1a:	9300      	str	r3, [sp, #0]
 8026f1c:	fa0f f38e 	sxth.w	r3, lr
 8026f20:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8026f22:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8026f26:	e9cd c404 	strd	ip, r4, [sp, #16]
 8026f2a:	4639      	mov	r1, r7
 8026f2c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8026f2e:	f7ff fc79 	bl	8026824 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 8026f32:	e75d      	b.n	8026df0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8026f34:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8026f36:	142f      	asrs	r7, r5, #16
 8026f38:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8026f3a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8026f3e:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8026f42:	1433      	asrs	r3, r6, #16
 8026f44:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8026f48:	fb02 7303 	mla	r3, r2, r3, r7
 8026f4c:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 8026f50:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8026f54:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8026f58:	2900      	cmp	r1, #0
 8026f5a:	f000 812a 	beq.w	80271b2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 8026f5e:	687c      	ldr	r4, [r7, #4]
 8026f60:	940e      	str	r4, [sp, #56]	; 0x38
 8026f62:	0e24      	lsrs	r4, r4, #24
 8026f64:	9415      	str	r4, [sp, #84]	; 0x54
 8026f66:	b178      	cbz	r0, 8026f88 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8026f68:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8026f6c:	3a01      	subs	r2, #1
 8026f6e:	0092      	lsls	r2, r2, #2
 8026f70:	3204      	adds	r2, #4
 8026f72:	eb07 0802 	add.w	r8, r7, r2
 8026f76:	58ba      	ldr	r2, [r7, r2]
 8026f78:	9209      	str	r2, [sp, #36]	; 0x24
 8026f7a:	0e12      	lsrs	r2, r2, #24
 8026f7c:	9212      	str	r2, [sp, #72]	; 0x48
 8026f7e:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8026f82:	920f      	str	r2, [sp, #60]	; 0x3c
 8026f84:	0e12      	lsrs	r2, r2, #24
 8026f86:	9216      	str	r2, [sp, #88]	; 0x58
 8026f88:	b289      	uxth	r1, r1
 8026f8a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8026f8c:	b280      	uxth	r0, r0
 8026f8e:	fb01 f900 	mul.w	r9, r1, r0
 8026f92:	0109      	lsls	r1, r1, #4
 8026f94:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8026f98:	eba1 0809 	sub.w	r8, r1, r9
 8026f9c:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 8026fa0:	9915      	ldr	r1, [sp, #84]	; 0x54
 8026fa2:	b280      	uxth	r0, r0
 8026fa4:	fa1f f888 	uxth.w	r8, r8
 8026fa8:	1a12      	subs	r2, r2, r0
 8026faa:	fb08 f101 	mul.w	r1, r8, r1
 8026fae:	b292      	uxth	r2, r2
 8026fb0:	fb02 110c 	mla	r1, r2, ip, r1
 8026fb4:	fb00 1104 	mla	r1, r0, r4, r1
 8026fb8:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8026fba:	fb09 1104 	mla	r1, r9, r4, r1
 8026fbe:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8026fc2:	2900      	cmp	r1, #0
 8026fc4:	f000 80ec 	beq.w	80271a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f4>
 8026fc8:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8026fcc:	d019      	beq.n	8027002 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 8026fce:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8026fd2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026fd6:	fb0c fa0a 	mul.w	sl, ip, sl
 8026fda:	fb0c fc03 	mul.w	ip, ip, r3
 8026fde:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8026fe2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8026fe6:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8026fea:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8026fee:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8026ff2:	4453      	add	r3, sl
 8026ff4:	0a3f      	lsrs	r7, r7, #8
 8026ff6:	0a1b      	lsrs	r3, r3, #8
 8026ff8:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8026ffc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8027000:	433b      	orrs	r3, r7
 8027002:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8027004:	2cff      	cmp	r4, #255	; 0xff
 8027006:	d020      	beq.n	802704a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x59e>
 8027008:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802700a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802700e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8027010:	4367      	muls	r7, r4
 8027012:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8027014:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8027018:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802701c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802701e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8027022:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027026:	fb04 fa0a 	mul.w	sl, r4, sl
 802702a:	44bc      	add	ip, r7
 802702c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8027030:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027034:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8027038:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802703c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027040:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027044:	ea4c 040a 	orr.w	r4, ip, sl
 8027048:	940e      	str	r4, [sp, #56]	; 0x38
 802704a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802704c:	2cff      	cmp	r4, #255	; 0xff
 802704e:	d020      	beq.n	8027092 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e6>
 8027050:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8027052:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8027056:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8027058:	4367      	muls	r7, r4
 802705a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 802705c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8027060:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8027064:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8027066:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802706a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802706e:	fb04 fa0a 	mul.w	sl, r4, sl
 8027072:	44bc      	add	ip, r7
 8027074:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8027078:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802707c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8027080:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027084:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027088:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802708c:	ea4c 040a 	orr.w	r4, ip, sl
 8027090:	9409      	str	r4, [sp, #36]	; 0x24
 8027092:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8027094:	2cff      	cmp	r4, #255	; 0xff
 8027096:	d020      	beq.n	80270da <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62e>
 8027098:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802709a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802709e:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80270a0:	4367      	muls	r7, r4
 80270a2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80270a4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80270a8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80270ac:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80270ae:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80270b2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80270b6:	fb04 fa0a 	mul.w	sl, r4, sl
 80270ba:	44bc      	add	ip, r7
 80270bc:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80270c0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80270c4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80270c8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80270cc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80270d0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80270d4:	ea4c 040a 	orr.w	r4, ip, sl
 80270d8:	940f      	str	r4, [sp, #60]	; 0x3c
 80270da:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80270dc:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80270e0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80270e4:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80270e8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80270ea:	fb08 f707 	mul.w	r7, r8, r7
 80270ee:	fb02 770c 	mla	r7, r2, ip, r7
 80270f2:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80270f6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80270f8:	fb00 770c 	mla	r7, r0, ip, r7
 80270fc:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8027100:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8027102:	fb09 770c 	mla	r7, r9, ip, r7
 8027106:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 802710a:	fb08 f80c 	mul.w	r8, r8, ip
 802710e:	0a3f      	lsrs	r7, r7, #8
 8027110:	fb02 8303 	mla	r3, r2, r3, r8
 8027114:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8027116:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802711a:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 802711e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8027120:	fb00 330a 	mla	r3, r0, sl, r3
 8027124:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8027128:	980b      	ldr	r0, [sp, #44]	; 0x2c
 802712a:	fb09 3c0c 	mla	ip, r9, ip, r3
 802712e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8027130:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027134:	434b      	muls	r3, r1
 8027136:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802713a:	1c59      	adds	r1, r3, #1
 802713c:	ea47 070c 	orr.w	r7, r7, ip
 8027140:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8027144:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8027148:	b2fa      	uxtb	r2, r7
 802714a:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 802714e:	fb12 f200 	smulbb	r2, r2, r0
 8027152:	b2c9      	uxtb	r1, r1
 8027154:	fb03 2301 	mla	r3, r3, r1, r2
 8027158:	b29b      	uxth	r3, r3
 802715a:	1c5a      	adds	r2, r3, #1
 802715c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8027160:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8027164:	fb12 f201 	smulbb	r2, r2, r1
 8027168:	121b      	asrs	r3, r3, #8
 802716a:	f80e 3c03 	strb.w	r3, [lr, #-3]
 802716e:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8027172:	0c3f      	lsrs	r7, r7, #16
 8027174:	fb03 2300 	mla	r3, r3, r0, r2
 8027178:	b29b      	uxth	r3, r3
 802717a:	1c5a      	adds	r2, r3, #1
 802717c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8027180:	121b      	asrs	r3, r3, #8
 8027182:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8027186:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 802718a:	fb13 f101 	smulbb	r1, r3, r1
 802718e:	fb07 1700 	mla	r7, r7, r0, r1
 8027192:	b2bf      	uxth	r7, r7
 8027194:	1c79      	adds	r1, r7, #1
 8027196:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 802719a:	123f      	asrs	r7, r7, #8
 802719c:	f80e 7c01 	strb.w	r7, [lr, #-1]
 80271a0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80271a2:	f10e 0e03 	add.w	lr, lr, #3
 80271a6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80271aa:	441d      	add	r5, r3
 80271ac:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80271ae:	441e      	add	r6, r3
 80271b0:	e64e      	b.n	8026e50 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a4>
 80271b2:	2800      	cmp	r0, #0
 80271b4:	f43f aee8 	beq.w	8026f88 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 80271b8:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 80271bc:	9209      	str	r2, [sp, #36]	; 0x24
 80271be:	0e12      	lsrs	r2, r2, #24
 80271c0:	9212      	str	r2, [sp, #72]	; 0x48
 80271c2:	e6e1      	b.n	8026f88 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 80271c4:	b01d      	add	sp, #116	; 0x74
 80271c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080271ca <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 80271ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80271ce:	b087      	sub	sp, #28
 80271d0:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	; 0x44
 80271d4:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 80271d8:	fb05 7003 	mla	r0, r5, r3, r7
 80271dc:	2d00      	cmp	r5, #0
 80271de:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 80271e2:	f89d e050 	ldrb.w	lr, [sp, #80]	; 0x50
 80271e6:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 80271ea:	f2c0 810a 	blt.w	8027402 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 80271ee:	45a8      	cmp	r8, r5
 80271f0:	f340 8107 	ble.w	8027402 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 80271f4:	2f00      	cmp	r7, #0
 80271f6:	f2c0 8102 	blt.w	80273fe <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 80271fa:	42bb      	cmp	r3, r7
 80271fc:	f340 80ff 	ble.w	80273fe <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 8027200:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8027204:	1c7a      	adds	r2, r7, #1
 8027206:	f100 80ff 	bmi.w	8027408 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 802720a:	4293      	cmp	r3, r2
 802720c:	f340 80fc 	ble.w	8027408 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 8027210:	2c00      	cmp	r4, #0
 8027212:	f000 80fb 	beq.w	802740c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x242>
 8027216:	f8dc 0004 	ldr.w	r0, [ip, #4]
 802721a:	3501      	adds	r5, #1
 802721c:	f100 80fa 	bmi.w	8027414 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 8027220:	45a8      	cmp	r8, r5
 8027222:	f340 80f7 	ble.w	8027414 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 8027226:	f1be 0f00 	cmp.w	lr, #0
 802722a:	f000 80f6 	beq.w	802741a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x250>
 802722e:	2f00      	cmp	r7, #0
 8027230:	f2c0 80ee 	blt.w	8027410 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 8027234:	42bb      	cmp	r3, r7
 8027236:	f340 80eb 	ble.w	8027410 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 802723a:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 802723e:	3701      	adds	r7, #1
 8027240:	f100 80ee 	bmi.w	8027420 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 8027244:	42bb      	cmp	r3, r7
 8027246:	f340 80eb 	ble.w	8027420 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 802724a:	2c00      	cmp	r4, #0
 802724c:	f000 80ea 	beq.w	8027424 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x25a>
 8027250:	3301      	adds	r3, #1
 8027252:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8027256:	fa1f fc84 	uxth.w	ip, r4
 802725a:	fa1f fe8e 	uxth.w	lr, lr
 802725e:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8027262:	fb0c f90e 	mul.w	r9, ip, lr
 8027266:	0e13      	lsrs	r3, r2, #24
 8027268:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 802726c:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 8027270:	9302      	str	r3, [sp, #8]
 8027272:	ebac 0709 	sub.w	r7, ip, r9
 8027276:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 802727a:	fa1f f48e 	uxth.w	r4, lr
 802727e:	f006 1eff 	and.w	lr, r6, #16711935	; 0xff00ff
 8027282:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8027286:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 802728a:	fb0a fe0e 	mul.w	lr, sl, lr
 802728e:	1b1b      	subs	r3, r3, r4
 8027290:	fb0a f606 	mul.w	r6, sl, r6
 8027294:	ea4f 6815 	mov.w	r8, r5, lsr #24
 8027298:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 802729c:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80272a0:	b29b      	uxth	r3, r3
 80272a2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80272a6:	b2bf      	uxth	r7, r7
 80272a8:	9301      	str	r3, [sp, #4]
 80272aa:	44e6      	add	lr, ip
 80272ac:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 80272b0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80272b4:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 80272b8:	f00e 13ff 	and.w	r3, lr, #16711935	; 0xff00ff
 80272bc:	9303      	str	r3, [sp, #12]
 80272be:	0a33      	lsrs	r3, r6, #8
 80272c0:	f000 16ff 	and.w	r6, r0, #16711935	; 0xff00ff
 80272c4:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80272c8:	9304      	str	r3, [sp, #16]
 80272ca:	fb0b f606 	mul.w	r6, fp, r6
 80272ce:	fb0b f000 	mul.w	r0, fp, r0
 80272d2:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 80272d6:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 80272da:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80272de:	44b6      	add	lr, r6
 80272e0:	f500 7680 	add.w	r6, r0, #256	; 0x100
 80272e4:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 80272e8:	f005 16ff 	and.w	r6, r5, #16711935	; 0xff00ff
 80272ec:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80272f0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80272f4:	fb08 f606 	mul.w	r6, r8, r6
 80272f8:	0a03      	lsrs	r3, r0, #8
 80272fa:	fb08 f505 	mul.w	r5, r8, r5
 80272fe:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027302:	0a30      	lsrs	r0, r6, #8
 8027304:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8027308:	9305      	str	r3, [sp, #20]
 802730a:	0e13      	lsrs	r3, r2, #24
 802730c:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8027310:	fb0e fe07 	mul.w	lr, lr, r7
 8027314:	4430      	add	r0, r6
 8027316:	f505 7680 	add.w	r6, r5, #256	; 0x100
 802731a:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 802731e:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 8027322:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8027326:	0a00      	lsrs	r0, r0, #8
 8027328:	435e      	muls	r6, r3
 802732a:	0a2d      	lsrs	r5, r5, #8
 802732c:	435a      	muls	r2, r3
 802732e:	9b03      	ldr	r3, [sp, #12]
 8027330:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 8027334:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8027338:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802733c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027340:	44b4      	add	ip, r6
 8027342:	f502 7680 	add.w	r6, r2, #256	; 0x100
 8027346:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802734a:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 802734e:	9e01      	ldr	r6, [sp, #4]
 8027350:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027354:	fb03 ee06 	mla	lr, r3, r6, lr
 8027358:	9b04      	ldr	r3, [sp, #16]
 802735a:	0a12      	lsrs	r2, r2, #8
 802735c:	fb0c ee09 	mla	lr, ip, r9, lr
 8027360:	f403 467f 	and.w	r6, r3, #65280	; 0xff00
 8027364:	9b05      	ldr	r3, [sp, #20]
 8027366:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802736a:	fb00 ee04 	mla	lr, r0, r4, lr
 802736e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027372:	f00e 10ff 	and.w	r0, lr, #16711935	; 0xff00ff
 8027376:	f403 4e7f 	and.w	lr, r3, #65280	; 0xff00
 802737a:	9b01      	ldr	r3, [sp, #4]
 802737c:	fb07 fe0e 	mul.w	lr, r7, lr
 8027380:	fb07 f70b 	mul.w	r7, r7, fp
 8027384:	fb03 ee06 	mla	lr, r3, r6, lr
 8027388:	fb03 730a 	mla	r3, r3, sl, r7
 802738c:	fb09 e202 	mla	r2, r9, r2, lr
 8027390:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8027394:	fb04 2e0e 	mla	lr, r4, lr, r2
 8027398:	fb04 3408 	mla	r4, r4, r8, r3
 802739c:	9b02      	ldr	r3, [sp, #8]
 802739e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80273a2:	fb09 4903 	mla	r9, r9, r3, r4
 80273a6:	780b      	ldrb	r3, [r1, #0]
 80273a8:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80273ac:	ea6f 2929 	mvn.w	r9, r9, asr #8
 80273b0:	ea40 0e0e 	orr.w	lr, r0, lr
 80273b4:	fa5f f989 	uxtb.w	r9, r9
 80273b8:	fb03 f209 	mul.w	r2, r3, r9
 80273bc:	1c53      	adds	r3, r2, #1
 80273be:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80273c2:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 80273c6:	700b      	strb	r3, [r1, #0]
 80273c8:	784b      	ldrb	r3, [r1, #1]
 80273ca:	fb03 f309 	mul.w	r3, r3, r9
 80273ce:	1c5a      	adds	r2, r3, #1
 80273d0:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80273d4:	ea4f 231e 	mov.w	r3, lr, lsr #8
 80273d8:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 80273dc:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80273e0:	704b      	strb	r3, [r1, #1]
 80273e2:	788b      	ldrb	r3, [r1, #2]
 80273e4:	fb03 f909 	mul.w	r9, r3, r9
 80273e8:	f109 0301 	add.w	r3, r9, #1
 80273ec:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 80273f0:	eb0e 2e19 	add.w	lr, lr, r9, lsr #8
 80273f4:	f881 e002 	strb.w	lr, [r1, #2]
 80273f8:	b007      	add	sp, #28
 80273fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80273fe:	2600      	movs	r6, #0
 8027400:	e700      	b.n	8027204 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3a>
 8027402:	2000      	movs	r0, #0
 8027404:	4606      	mov	r6, r0
 8027406:	e708      	b.n	802721a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 8027408:	2000      	movs	r0, #0
 802740a:	e706      	b.n	802721a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 802740c:	4620      	mov	r0, r4
 802740e:	e704      	b.n	802721a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 8027410:	2500      	movs	r5, #0
 8027412:	e714      	b.n	802723e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x74>
 8027414:	2200      	movs	r2, #0
 8027416:	4615      	mov	r5, r2
 8027418:	e71d      	b.n	8027256 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 802741a:	4672      	mov	r2, lr
 802741c:	4675      	mov	r5, lr
 802741e:	e71a      	b.n	8027256 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8027420:	2200      	movs	r2, #0
 8027422:	e718      	b.n	8027256 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8027424:	4622      	mov	r2, r4
 8027426:	e716      	b.n	8027256 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>

08027428 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8027428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802742c:	b099      	sub	sp, #100	; 0x64
 802742e:	e9cd 1215 	strd	r1, r2, [sp, #84]	; 0x54
 8027432:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8027434:	9017      	str	r0, [sp, #92]	; 0x5c
 8027436:	9306      	str	r3, [sp, #24]
 8027438:	6850      	ldr	r0, [r2, #4]
 802743a:	6812      	ldr	r2, [r2, #0]
 802743c:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 8027440:	e9dd 5623 	ldrd	r5, r6, [sp, #140]	; 0x8c
 8027444:	fb00 1303 	mla	r3, r0, r3, r1
 8027448:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802744c:	18d3      	adds	r3, r2, r3
 802744e:	9309      	str	r3, [sp, #36]	; 0x24
 8027450:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8027452:	681b      	ldr	r3, [r3, #0]
 8027454:	930e      	str	r3, [sp, #56]	; 0x38
 8027456:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8027458:	2b00      	cmp	r3, #0
 802745a:	dc03      	bgt.n	8027464 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 802745c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802745e:	2b00      	cmp	r3, #0
 8027460:	f340 8360 	ble.w	8027b24 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 8027464:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8027466:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802746a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802746e:	1e48      	subs	r0, r1, #1
 8027470:	1e57      	subs	r7, r2, #1
 8027472:	9b06      	ldr	r3, [sp, #24]
 8027474:	2b00      	cmp	r3, #0
 8027476:	f340 817b 	ble.w	8027770 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x348>
 802747a:	ea5f 4c25 	movs.w	ip, r5, asr #16
 802747e:	ea4f 4326 	mov.w	r3, r6, asr #16
 8027482:	d406      	bmi.n	8027492 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8027484:	4584      	cmp	ip, r0
 8027486:	da04      	bge.n	8027492 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8027488:	2b00      	cmp	r3, #0
 802748a:	db02      	blt.n	8027492 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 802748c:	42bb      	cmp	r3, r7
 802748e:	f2c0 8170 	blt.w	8027772 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8027492:	f11c 0c01 	adds.w	ip, ip, #1
 8027496:	f100 8160 	bmi.w	802775a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 802749a:	4561      	cmp	r1, ip
 802749c:	f2c0 815d 	blt.w	802775a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 80274a0:	3301      	adds	r3, #1
 80274a2:	f100 815a 	bmi.w	802775a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 80274a6:	429a      	cmp	r2, r3
 80274a8:	f2c0 8157 	blt.w	802775a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 80274ac:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80274b0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80274b2:	f1b8 0f00 	cmp.w	r8, #0
 80274b6:	f340 8179 	ble.w	80277ac <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 80274ba:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80274bc:	ea4f 4c26 	mov.w	ip, r6, asr #16
 80274c0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80274c2:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80274c6:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80274ca:	142a      	asrs	r2, r5, #16
 80274cc:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80274d0:	689b      	ldr	r3, [r3, #8]
 80274d2:	f100 81be 	bmi.w	8027852 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80274d6:	f103 39ff 	add.w	r9, r3, #4294967295
 80274da:	454a      	cmp	r2, r9
 80274dc:	f280 81b9 	bge.w	8027852 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80274e0:	f1bc 0f00 	cmp.w	ip, #0
 80274e4:	f2c0 81b5 	blt.w	8027852 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80274e8:	f10e 39ff 	add.w	r9, lr, #4294967295
 80274ec:	45cc      	cmp	ip, r9
 80274ee:	f280 81b0 	bge.w	8027852 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80274f2:	b21b      	sxth	r3, r3
 80274f4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80274f6:	fb0c 2203 	mla	r2, ip, r3, r2
 80274fa:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 80274fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8027502:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8027506:	2900      	cmp	r1, #0
 8027508:	f000 8197 	beq.w	802783a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 802750c:	f8d9 4004 	ldr.w	r4, [r9, #4]
 8027510:	940a      	str	r4, [sp, #40]	; 0x28
 8027512:	0e24      	lsrs	r4, r4, #24
 8027514:	9411      	str	r4, [sp, #68]	; 0x44
 8027516:	b180      	cbz	r0, 802753a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 8027518:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 802751c:	3b01      	subs	r3, #1
 802751e:	009b      	lsls	r3, r3, #2
 8027520:	3304      	adds	r3, #4
 8027522:	eb09 0c03 	add.w	ip, r9, r3
 8027526:	f859 3003 	ldr.w	r3, [r9, r3]
 802752a:	9307      	str	r3, [sp, #28]
 802752c:	0e1b      	lsrs	r3, r3, #24
 802752e:	930f      	str	r3, [sp, #60]	; 0x3c
 8027530:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8027534:	930b      	str	r3, [sp, #44]	; 0x2c
 8027536:	0e1b      	lsrs	r3, r3, #24
 8027538:	9312      	str	r3, [sp, #72]	; 0x48
 802753a:	b289      	uxth	r1, r1
 802753c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802753e:	b280      	uxth	r0, r0
 8027540:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8027542:	fb01 fa00 	mul.w	sl, r1, r0
 8027546:	0109      	lsls	r1, r1, #4
 8027548:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 802754c:	eba1 090a 	sub.w	r9, r1, sl
 8027550:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8027554:	b280      	uxth	r0, r0
 8027556:	fa1f f989 	uxth.w	r9, r9
 802755a:	1a09      	subs	r1, r1, r0
 802755c:	fb09 f303 	mul.w	r3, r9, r3
 8027560:	b289      	uxth	r1, r1
 8027562:	fb01 330e 	mla	r3, r1, lr, r3
 8027566:	fb00 3304 	mla	r3, r0, r4, r3
 802756a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802756c:	fb0a 3304 	mla	r3, sl, r4, r3
 8027570:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027574:	2b00      	cmp	r3, #0
 8027576:	f000 80e8 	beq.w	802774a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 802757a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802757e:	d01b      	beq.n	80275b8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 8027580:	f002 1bff 	and.w	fp, r2, #16711935	; 0xff00ff
 8027584:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8027588:	fb0e fb0b 	mul.w	fp, lr, fp
 802758c:	fb0e fe02 	mul.w	lr, lr, r2
 8027590:	ea4f 221b 	mov.w	r2, fp, lsr #8
 8027594:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8027598:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 802759c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80275a0:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80275a4:	445a      	add	r2, fp
 80275a6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80275aa:	0a12      	lsrs	r2, r2, #8
 80275ac:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80275b0:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80275b4:	ea42 020c 	orr.w	r2, r2, ip
 80275b8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80275ba:	2cff      	cmp	r4, #255	; 0xff
 80275bc:	d021      	beq.n	8027602 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 80275be:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80275c0:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80275c4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80275c6:	fb04 fc0c 	mul.w	ip, r4, ip
 80275ca:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80275cc:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80275d0:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 80275d4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80275d6:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80275da:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80275de:	fb04 fb0b 	mul.w	fp, r4, fp
 80275e2:	44e6      	add	lr, ip
 80275e4:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 80275e8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80275ec:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 80275f0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80275f4:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80275f8:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 80275fc:	ea4e 040b 	orr.w	r4, lr, fp
 8027600:	940a      	str	r4, [sp, #40]	; 0x28
 8027602:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8027604:	2cff      	cmp	r4, #255	; 0xff
 8027606:	d021      	beq.n	802764c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8027608:	9c07      	ldr	r4, [sp, #28]
 802760a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802760e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8027610:	fb04 fc0c 	mul.w	ip, r4, ip
 8027614:	9c07      	ldr	r4, [sp, #28]
 8027616:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 802761a:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 802761e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8027620:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8027624:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027628:	fb04 fb0b 	mul.w	fp, r4, fp
 802762c:	44e6      	add	lr, ip
 802762e:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 8027632:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027636:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 802763a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802763e:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8027642:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8027646:	ea4e 040b 	orr.w	r4, lr, fp
 802764a:	9407      	str	r4, [sp, #28]
 802764c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802764e:	2cff      	cmp	r4, #255	; 0xff
 8027650:	d021      	beq.n	8027696 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 8027652:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8027654:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8027658:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802765a:	fb04 fc0c 	mul.w	ip, r4, ip
 802765e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8027660:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8027664:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 8027668:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802766a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802766e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027672:	fb04 fb0b 	mul.w	fp, r4, fp
 8027676:	44e6      	add	lr, ip
 8027678:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 802767c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027680:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8027684:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027688:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 802768c:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8027690:	ea4e 040b 	orr.w	r4, lr, fp
 8027694:	940b      	str	r4, [sp, #44]	; 0x2c
 8027696:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8027698:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 802769c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80276a0:	2bff      	cmp	r3, #255	; 0xff
 80276a2:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80276a6:	9c07      	ldr	r4, [sp, #28]
 80276a8:	fb09 fc0c 	mul.w	ip, r9, ip
 80276ac:	fb01 cc0e 	mla	ip, r1, lr, ip
 80276b0:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80276b4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80276b6:	fb00 cc0e 	mla	ip, r0, lr, ip
 80276ba:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80276be:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80276c0:	fb0a cc0e 	mla	ip, sl, lr, ip
 80276c4:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 80276c8:	fb09 f90e 	mul.w	r9, r9, lr
 80276cc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80276d0:	fb01 9202 	mla	r2, r1, r2, r9
 80276d4:	9907      	ldr	r1, [sp, #28]
 80276d6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80276da:	f401 4b7f 	and.w	fp, r1, #65280	; 0xff00
 80276de:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80276e0:	fb00 220b 	mla	r2, r0, fp, r2
 80276e4:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 80276e8:	fb0a 2a00 	mla	sl, sl, r0, r2
 80276ec:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80276f0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80276f4:	ea4c 0c0a 	orr.w	ip, ip, sl
 80276f8:	fa5f f08c 	uxtb.w	r0, ip
 80276fc:	f3cc 2107 	ubfx	r1, ip, #8, #8
 8027700:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8027704:	f000 80a2 	beq.w	802784c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 8027708:	43db      	mvns	r3, r3
 802770a:	783a      	ldrb	r2, [r7, #0]
 802770c:	f897 a002 	ldrb.w	sl, [r7, #2]
 8027710:	b2db      	uxtb	r3, r3
 8027712:	fb02 fe03 	mul.w	lr, r2, r3
 8027716:	fb0a fa03 	mul.w	sl, sl, r3
 802771a:	f10e 0201 	add.w	r2, lr, #1
 802771e:	eb02 221e 	add.w	r2, r2, lr, lsr #8
 8027722:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8027726:	703a      	strb	r2, [r7, #0]
 8027728:	787a      	ldrb	r2, [r7, #1]
 802772a:	fb02 f003 	mul.w	r0, r2, r3
 802772e:	f10a 0301 	add.w	r3, sl, #1
 8027732:	1c42      	adds	r2, r0, #1
 8027734:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8027738:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 802773c:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8027740:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8027744:	707a      	strb	r2, [r7, #1]
 8027746:	f887 c002 	strb.w	ip, [r7, #2]
 802774a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802774c:	3703      	adds	r7, #3
 802774e:	f108 38ff 	add.w	r8, r8, #4294967295
 8027752:	441d      	add	r5, r3
 8027754:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8027756:	441e      	add	r6, r3
 8027758:	e6ab      	b.n	80274b2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802775a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802775c:	441d      	add	r5, r3
 802775e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8027760:	441e      	add	r6, r3
 8027762:	9b06      	ldr	r3, [sp, #24]
 8027764:	3b01      	subs	r3, #1
 8027766:	9306      	str	r3, [sp, #24]
 8027768:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802776a:	3303      	adds	r3, #3
 802776c:	9309      	str	r3, [sp, #36]	; 0x24
 802776e:	e680      	b.n	8027472 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8027770:	d024      	beq.n	80277bc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8027772:	9b06      	ldr	r3, [sp, #24]
 8027774:	9825      	ldr	r0, [sp, #148]	; 0x94
 8027776:	3b01      	subs	r3, #1
 8027778:	fb00 5003 	mla	r0, r0, r3, r5
 802777c:	1400      	asrs	r0, r0, #16
 802777e:	f53f ae95 	bmi.w	80274ac <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8027782:	3901      	subs	r1, #1
 8027784:	4288      	cmp	r0, r1
 8027786:	f6bf ae91 	bge.w	80274ac <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 802778a:	9926      	ldr	r1, [sp, #152]	; 0x98
 802778c:	fb01 6303 	mla	r3, r1, r3, r6
 8027790:	141b      	asrs	r3, r3, #16
 8027792:	f53f ae8b 	bmi.w	80274ac <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8027796:	3a01      	subs	r2, #1
 8027798:	4293      	cmp	r3, r2
 802779a:	f6bf ae87 	bge.w	80274ac <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 802779e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80277a0:	f8dd b018 	ldr.w	fp, [sp, #24]
 80277a4:	1cdf      	adds	r7, r3, #3
 80277a6:	f1bb 0f00 	cmp.w	fp, #0
 80277aa:	dc6e      	bgt.n	802788a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 80277ac:	9b06      	ldr	r3, [sp, #24]
 80277ae:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80277b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80277b4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80277b8:	4423      	add	r3, r4
 80277ba:	9309      	str	r3, [sp, #36]	; 0x24
 80277bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80277be:	2b00      	cmp	r3, #0
 80277c0:	f340 81b0 	ble.w	8027b24 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 80277c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80277c8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80277ca:	ee30 0a04 	vadd.f32	s0, s0, s8
 80277ce:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80277d2:	eef0 6a62 	vmov.f32	s13, s5
 80277d6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80277da:	ee31 1a05 	vadd.f32	s2, s2, s10
 80277de:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80277e2:	ee16 5a90 	vmov	r5, s13
 80277e6:	eef0 6a43 	vmov.f32	s13, s6
 80277ea:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80277ee:	ee16 6a90 	vmov	r6, s13
 80277f2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80277f6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80277fa:	ee77 2a62 	vsub.f32	s5, s14, s5
 80277fe:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8027802:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8027806:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802780a:	ee12 2a90 	vmov	r2, s5
 802780e:	eef0 2a47 	vmov.f32	s5, s14
 8027812:	fb92 f3f3 	sdiv	r3, r2, r3
 8027816:	ee13 2a10 	vmov	r2, s6
 802781a:	9325      	str	r3, [sp, #148]	; 0x94
 802781c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 802781e:	eeb0 3a67 	vmov.f32	s6, s15
 8027822:	fb92 f3f3 	sdiv	r3, r2, r3
 8027826:	9326      	str	r3, [sp, #152]	; 0x98
 8027828:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802782a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 802782c:	3b01      	subs	r3, #1
 802782e:	9315      	str	r3, [sp, #84]	; 0x54
 8027830:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8027832:	bf08      	it	eq
 8027834:	4613      	moveq	r3, r2
 8027836:	9306      	str	r3, [sp, #24]
 8027838:	e60d      	b.n	8027456 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 802783a:	2800      	cmp	r0, #0
 802783c:	f43f ae7d 	beq.w	802753a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 8027840:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8027844:	9307      	str	r3, [sp, #28]
 8027846:	0e1b      	lsrs	r3, r3, #24
 8027848:	930f      	str	r3, [sp, #60]	; 0x3c
 802784a:	e676      	b.n	802753a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 802784c:	7038      	strb	r0, [r7, #0]
 802784e:	7079      	strb	r1, [r7, #1]
 8027850:	e779      	b.n	8027746 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8027852:	f112 0901 	adds.w	r9, r2, #1
 8027856:	f53f af78 	bmi.w	802774a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 802785a:	454b      	cmp	r3, r9
 802785c:	f6ff af75 	blt.w	802774a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8027860:	f11c 0901 	adds.w	r9, ip, #1
 8027864:	f53f af71 	bmi.w	802774a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8027868:	45ce      	cmp	lr, r9
 802786a:	f6ff af6e 	blt.w	802774a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 802786e:	b21b      	sxth	r3, r3
 8027870:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 8027874:	fa0f f28e 	sxth.w	r2, lr
 8027878:	e9cd 1003 	strd	r1, r0, [sp, #12]
 802787c:	9200      	str	r2, [sp, #0]
 802787e:	4639      	mov	r1, r7
 8027880:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8027882:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8027884:	f7ff fca1 	bl	80271ca <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 8027888:	e75f      	b.n	802774a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 802788a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802788c:	1429      	asrs	r1, r5, #16
 802788e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8027890:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8027894:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 8027898:	1433      	asrs	r3, r6, #16
 802789a:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802789e:	fb0c 1303 	mla	r3, ip, r3, r1
 80278a2:	990e      	ldr	r1, [sp, #56]	; 0x38
 80278a4:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80278a8:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80278ac:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 80278b0:	2a00      	cmp	r2, #0
 80278b2:	f000 8129 	beq.w	8027b08 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 80278b6:	684c      	ldr	r4, [r1, #4]
 80278b8:	940c      	str	r4, [sp, #48]	; 0x30
 80278ba:	0e24      	lsrs	r4, r4, #24
 80278bc:	9413      	str	r4, [sp, #76]	; 0x4c
 80278be:	b198      	cbz	r0, 80278e8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 80278c0:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
 80278c4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80278c8:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80278cc:	f10c 0c04 	add.w	ip, ip, #4
 80278d0:	eb01 080c 	add.w	r8, r1, ip
 80278d4:	f851 100c 	ldr.w	r1, [r1, ip]
 80278d8:	9108      	str	r1, [sp, #32]
 80278da:	0e09      	lsrs	r1, r1, #24
 80278dc:	9110      	str	r1, [sp, #64]	; 0x40
 80278de:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80278e2:	910d      	str	r1, [sp, #52]	; 0x34
 80278e4:	0e09      	lsrs	r1, r1, #24
 80278e6:	9114      	str	r1, [sp, #80]	; 0x50
 80278e8:	b292      	uxth	r2, r2
 80278ea:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80278ec:	b280      	uxth	r0, r0
 80278ee:	fb02 f900 	mul.w	r9, r2, r0
 80278f2:	0112      	lsls	r2, r2, #4
 80278f4:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80278f8:	eba2 0809 	sub.w	r8, r2, r9
 80278fc:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8027900:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8027902:	b280      	uxth	r0, r0
 8027904:	fa1f f888 	uxth.w	r8, r8
 8027908:	1a09      	subs	r1, r1, r0
 802790a:	fb08 f202 	mul.w	r2, r8, r2
 802790e:	b289      	uxth	r1, r1
 8027910:	fb01 220e 	mla	r2, r1, lr, r2
 8027914:	fb00 2204 	mla	r2, r0, r4, r2
 8027918:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802791a:	fb09 2204 	mla	r2, r9, r4, r2
 802791e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8027922:	2a00      	cmp	r2, #0
 8027924:	f000 80e8 	beq.w	8027af8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d0>
 8027928:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802792c:	d01b      	beq.n	8027966 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53e>
 802792e:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8027932:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027936:	fb0e fa0a 	mul.w	sl, lr, sl
 802793a:	fb0e fe03 	mul.w	lr, lr, r3
 802793e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8027942:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8027946:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 802794a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802794e:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8027952:	4453      	add	r3, sl
 8027954:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027958:	0a1b      	lsrs	r3, r3, #8
 802795a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802795e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8027962:	ea43 030c 	orr.w	r3, r3, ip
 8027966:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8027968:	2cff      	cmp	r4, #255	; 0xff
 802796a:	d021      	beq.n	80279b0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x588>
 802796c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802796e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8027972:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8027974:	fb04 fc0c 	mul.w	ip, r4, ip
 8027978:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802797a:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 802797e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8027982:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8027984:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8027988:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802798c:	fb04 fa0a 	mul.w	sl, r4, sl
 8027990:	44e6      	add	lr, ip
 8027992:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8027996:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802799a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802799e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80279a2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80279a6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80279aa:	ea4e 040a 	orr.w	r4, lr, sl
 80279ae:	940c      	str	r4, [sp, #48]	; 0x30
 80279b0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80279b2:	2cff      	cmp	r4, #255	; 0xff
 80279b4:	d021      	beq.n	80279fa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d2>
 80279b6:	9c08      	ldr	r4, [sp, #32]
 80279b8:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80279bc:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80279be:	fb04 fc0c 	mul.w	ip, r4, ip
 80279c2:	9c08      	ldr	r4, [sp, #32]
 80279c4:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 80279c8:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80279ca:	fb04 fa0e 	mul.w	sl, r4, lr
 80279ce:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80279d2:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80279d6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80279da:	44e6      	add	lr, ip
 80279dc:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80279e0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80279e4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80279e8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80279ec:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80279f0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80279f4:	ea4e 040a 	orr.w	r4, lr, sl
 80279f8:	9408      	str	r4, [sp, #32]
 80279fa:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80279fc:	2cff      	cmp	r4, #255	; 0xff
 80279fe:	d021      	beq.n	8027a44 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
 8027a00:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8027a02:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8027a06:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8027a08:	fb04 fc0c 	mul.w	ip, r4, ip
 8027a0c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8027a0e:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8027a12:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8027a16:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8027a18:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8027a1c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027a20:	fb04 fa0a 	mul.w	sl, r4, sl
 8027a24:	44e6      	add	lr, ip
 8027a26:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8027a2a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027a2e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8027a32:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027a36:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027a3a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027a3e:	ea4e 040a 	orr.w	r4, lr, sl
 8027a42:	940d      	str	r4, [sp, #52]	; 0x34
 8027a44:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8027a46:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8027a4a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027a4e:	2aff      	cmp	r2, #255	; 0xff
 8027a50:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8027a54:	9c08      	ldr	r4, [sp, #32]
 8027a56:	fb08 fc0c 	mul.w	ip, r8, ip
 8027a5a:	fb01 cc0e 	mla	ip, r1, lr, ip
 8027a5e:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8027a62:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8027a64:	fb00 cc0e 	mla	ip, r0, lr, ip
 8027a68:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8027a6c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8027a6e:	fb09 cc0e 	mla	ip, r9, lr, ip
 8027a72:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8027a76:	fb08 f80e 	mul.w	r8, r8, lr
 8027a7a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027a7e:	fb01 8303 	mla	r3, r1, r3, r8
 8027a82:	9908      	ldr	r1, [sp, #32]
 8027a84:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027a88:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8027a8c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8027a8e:	fb00 330a 	mla	r3, r0, sl, r3
 8027a92:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 8027a96:	fb09 3e0e 	mla	lr, r9, lr, r3
 8027a9a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027a9e:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8027aa2:	ea4c 0c0e 	orr.w	ip, ip, lr
 8027aa6:	fa5f f08c 	uxtb.w	r0, ip
 8027aaa:	f3cc 2107 	ubfx	r1, ip, #8, #8
 8027aae:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8027ab2:	d032      	beq.n	8027b1a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 8027ab4:	43d2      	mvns	r2, r2
 8027ab6:	f817 ec03 	ldrb.w	lr, [r7, #-3]
 8027aba:	b2d2      	uxtb	r2, r2
 8027abc:	fb0e fe02 	mul.w	lr, lr, r2
 8027ac0:	f10e 0301 	add.w	r3, lr, #1
 8027ac4:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 8027ac8:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8027acc:	f817 0c02 	ldrb.w	r0, [r7, #-2]
 8027ad0:	4350      	muls	r0, r2
 8027ad2:	f807 3c03 	strb.w	r3, [r7, #-3]
 8027ad6:	1c43      	adds	r3, r0, #1
 8027ad8:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8027adc:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8027ae0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8027ae4:	4353      	muls	r3, r2
 8027ae6:	f807 1c02 	strb.w	r1, [r7, #-2]
 8027aea:	1c5a      	adds	r2, r3, #1
 8027aec:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8027af0:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 8027af4:	f807 cc01 	strb.w	ip, [r7, #-1]
 8027af8:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8027afa:	3703      	adds	r7, #3
 8027afc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8027b00:	441d      	add	r5, r3
 8027b02:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8027b04:	441e      	add	r6, r3
 8027b06:	e64e      	b.n	80277a6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 8027b08:	2800      	cmp	r0, #0
 8027b0a:	f43f aeed 	beq.w	80278e8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 8027b0e:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8027b12:	9108      	str	r1, [sp, #32]
 8027b14:	0e09      	lsrs	r1, r1, #24
 8027b16:	9110      	str	r1, [sp, #64]	; 0x40
 8027b18:	e6e6      	b.n	80278e8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 8027b1a:	f807 0c03 	strb.w	r0, [r7, #-3]
 8027b1e:	f807 1c02 	strb.w	r1, [r7, #-2]
 8027b22:	e7e7      	b.n	8027af4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6cc>
 8027b24:	b019      	add	sp, #100	; 0x64
 8027b26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08027b2c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 8027b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027b30:	e9dd 400b 	ldrd	r4, r0, [sp, #44]	; 0x2c
 8027b34:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8027b38:	2c00      	cmp	r4, #0
 8027b3a:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8027b3e:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 8027b42:	fb00 4e03 	mla	lr, r0, r3, r4
 8027b46:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
 8027b4a:	f2c0 80b8 	blt.w	8027cbe <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8027b4e:	45a1      	cmp	r9, r4
 8027b50:	f340 80b5 	ble.w	8027cbe <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8027b54:	2800      	cmp	r0, #0
 8027b56:	f2c0 80b2 	blt.w	8027cbe <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8027b5a:	4580      	cmp	r8, r0
 8027b5c:	f340 80af 	ble.w	8027cbe <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8027b60:	ea4f 055e 	mov.w	r5, lr, lsr #1
 8027b64:	f01e 0f01 	tst.w	lr, #1
 8027b68:	5d56      	ldrb	r6, [r2, r5]
 8027b6a:	bf0c      	ite	eq
 8027b6c:	f006 060f 	andeq.w	r6, r6, #15
 8027b70:	1136      	asrne	r6, r6, #4
 8027b72:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8027b76:	b2f6      	uxtb	r6, r6
 8027b78:	f114 0a01 	adds.w	sl, r4, #1
 8027b7c:	f100 80a1 	bmi.w	8027cc2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8027b80:	45d1      	cmp	r9, sl
 8027b82:	f340 809e 	ble.w	8027cc2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8027b86:	2800      	cmp	r0, #0
 8027b88:	f2c0 809b 	blt.w	8027cc2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8027b8c:	4580      	cmp	r8, r0
 8027b8e:	f340 8098 	ble.w	8027cc2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8027b92:	2f00      	cmp	r7, #0
 8027b94:	f000 8097 	beq.w	8027cc6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19a>
 8027b98:	f10e 0b01 	add.w	fp, lr, #1
 8027b9c:	ea4f 055b 	mov.w	r5, fp, lsr #1
 8027ba0:	f01b 0f01 	tst.w	fp, #1
 8027ba4:	5d55      	ldrb	r5, [r2, r5]
 8027ba6:	bf0c      	ite	eq
 8027ba8:	f005 050f 	andeq.w	r5, r5, #15
 8027bac:	112d      	asrne	r5, r5, #4
 8027bae:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8027bb2:	b2ed      	uxtb	r5, r5
 8027bb4:	f1bc 0f00 	cmp.w	ip, #0
 8027bb8:	f000 8089 	beq.w	8027cce <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a2>
 8027bbc:	2c00      	cmp	r4, #0
 8027bbe:	f100 0001 	add.w	r0, r0, #1
 8027bc2:	f2c0 8082 	blt.w	8027cca <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8027bc6:	45a1      	cmp	r9, r4
 8027bc8:	dd7f      	ble.n	8027cca <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8027bca:	2800      	cmp	r0, #0
 8027bcc:	db7d      	blt.n	8027cca <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8027bce:	4580      	cmp	r8, r0
 8027bd0:	dd7b      	ble.n	8027cca <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8027bd2:	eb03 0b0e 	add.w	fp, r3, lr
 8027bd6:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8027bda:	f01b 0f01 	tst.w	fp, #1
 8027bde:	5d14      	ldrb	r4, [r2, r4]
 8027be0:	bf0c      	ite	eq
 8027be2:	f004 040f 	andeq.w	r4, r4, #15
 8027be6:	1124      	asrne	r4, r4, #4
 8027be8:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8027bec:	b2e4      	uxtb	r4, r4
 8027bee:	f1ba 0f00 	cmp.w	sl, #0
 8027bf2:	db6f      	blt.n	8027cd4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8027bf4:	45d1      	cmp	r9, sl
 8027bf6:	dd6d      	ble.n	8027cd4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8027bf8:	2800      	cmp	r0, #0
 8027bfa:	db6b      	blt.n	8027cd4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8027bfc:	4580      	cmp	r8, r0
 8027bfe:	dd69      	ble.n	8027cd4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8027c00:	2f00      	cmp	r7, #0
 8027c02:	d069      	beq.n	8027cd8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ac>
 8027c04:	3301      	adds	r3, #1
 8027c06:	449e      	add	lr, r3
 8027c08:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8027c0c:	f01e 0f01 	tst.w	lr, #1
 8027c10:	5cd0      	ldrb	r0, [r2, r3]
 8027c12:	bf0c      	ite	eq
 8027c14:	f000 000f 	andeq.w	r0, r0, #15
 8027c18:	1100      	asrne	r0, r0, #4
 8027c1a:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8027c1e:	b2c3      	uxtb	r3, r0
 8027c20:	b2ba      	uxth	r2, r7
 8027c22:	fa1f fc8c 	uxth.w	ip, ip
 8027c26:	fb02 f00c 	mul.w	r0, r2, ip
 8027c2a:	0112      	lsls	r2, r2, #4
 8027c2c:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 8027c30:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 8027c34:	1a12      	subs	r2, r2, r0
 8027c36:	fa1f fc8c 	uxth.w	ip, ip
 8027c3a:	b292      	uxth	r2, r2
 8027c3c:	eba7 070c 	sub.w	r7, r7, ip
 8027c40:	436a      	muls	r2, r5
 8027c42:	b2bf      	uxth	r7, r7
 8027c44:	fb06 2207 	mla	r2, r6, r7, r2
 8027c48:	fb0c 2404 	mla	r4, ip, r4, r2
 8027c4c:	fb00 4303 	mla	r3, r0, r3, r4
 8027c50:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027c54:	b38b      	cbz	r3, 8027cba <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x18e>
 8027c56:	4a21      	ldr	r2, [pc, #132]	; (8027cdc <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b0>)
 8027c58:	6814      	ldr	r4, [r2, #0]
 8027c5a:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 8027c5e:	b2e5      	uxtb	r5, r4
 8027c60:	4353      	muls	r3, r2
 8027c62:	1c5a      	adds	r2, r3, #1
 8027c64:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8027c68:	1212      	asrs	r2, r2, #8
 8027c6a:	b290      	uxth	r0, r2
 8027c6c:	43d2      	mvns	r2, r2
 8027c6e:	fb15 f500 	smulbb	r5, r5, r0
 8027c72:	b2d3      	uxtb	r3, r2
 8027c74:	780a      	ldrb	r2, [r1, #0]
 8027c76:	fb02 5203 	mla	r2, r2, r3, r5
 8027c7a:	b292      	uxth	r2, r2
 8027c7c:	1c55      	adds	r5, r2, #1
 8027c7e:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8027c82:	784d      	ldrb	r5, [r1, #1]
 8027c84:	fb15 f503 	smulbb	r5, r5, r3
 8027c88:	1212      	asrs	r2, r2, #8
 8027c8a:	700a      	strb	r2, [r1, #0]
 8027c8c:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8027c90:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8027c94:	fb02 5200 	mla	r2, r2, r0, r5
 8027c98:	b292      	uxth	r2, r2
 8027c9a:	1c55      	adds	r5, r2, #1
 8027c9c:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8027ca0:	1212      	asrs	r2, r2, #8
 8027ca2:	704a      	strb	r2, [r1, #1]
 8027ca4:	788a      	ldrb	r2, [r1, #2]
 8027ca6:	fb12 f303 	smulbb	r3, r2, r3
 8027caa:	fb04 3300 	mla	r3, r4, r0, r3
 8027cae:	b29b      	uxth	r3, r3
 8027cb0:	1c5a      	adds	r2, r3, #1
 8027cb2:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8027cb6:	121b      	asrs	r3, r3, #8
 8027cb8:	708b      	strb	r3, [r1, #2]
 8027cba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027cbe:	2600      	movs	r6, #0
 8027cc0:	e75a      	b.n	8027b78 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x4c>
 8027cc2:	2500      	movs	r5, #0
 8027cc4:	e776      	b.n	8027bb4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 8027cc6:	463d      	mov	r5, r7
 8027cc8:	e774      	b.n	8027bb4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 8027cca:	2400      	movs	r4, #0
 8027ccc:	e78f      	b.n	8027bee <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xc2>
 8027cce:	4663      	mov	r3, ip
 8027cd0:	4664      	mov	r4, ip
 8027cd2:	e7a5      	b.n	8027c20 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 8027cd4:	2300      	movs	r3, #0
 8027cd6:	e7a3      	b.n	8027c20 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 8027cd8:	463b      	mov	r3, r7
 8027cda:	e7a1      	b.n	8027c20 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 8027cdc:	24006ff4 	.word	0x24006ff4

08027ce0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8027ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027ce4:	b097      	sub	sp, #92	; 0x5c
 8027ce6:	9214      	str	r2, [sp, #80]	; 0x50
 8027ce8:	9309      	str	r3, [sp, #36]	; 0x24
 8027cea:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8027cec:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8027cf0:	9015      	str	r0, [sp, #84]	; 0x54
 8027cf2:	910c      	str	r1, [sp, #48]	; 0x30
 8027cf4:	6850      	ldr	r0, [r2, #4]
 8027cf6:	930e      	str	r3, [sp, #56]	; 0x38
 8027cf8:	6812      	ldr	r2, [r2, #0]
 8027cfa:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 8027cfe:	e9dd 5621 	ldrd	r5, r6, [sp, #132]	; 0x84
 8027d02:	fb00 1303 	mla	r3, r0, r3, r1
 8027d06:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8027d0a:	eb02 0a03 	add.w	sl, r2, r3
 8027d0e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027d10:	689b      	ldr	r3, [r3, #8]
 8027d12:	3301      	adds	r3, #1
 8027d14:	f023 0301 	bic.w	r3, r3, #1
 8027d18:	930f      	str	r3, [sp, #60]	; 0x3c
 8027d1a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027d1c:	681f      	ldr	r7, [r3, #0]
 8027d1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8027d20:	2b00      	cmp	r3, #0
 8027d22:	dc03      	bgt.n	8027d2c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8027d24:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8027d26:	2b00      	cmp	r3, #0
 8027d28:	f340 8247 	ble.w	80281ba <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 8027d2c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027d2e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027d32:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8027d36:	1e48      	subs	r0, r1, #1
 8027d38:	f102 3cff 	add.w	ip, r2, #4294967295
 8027d3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027d3e:	2b00      	cmp	r3, #0
 8027d40:	f340 80e5 	ble.w	8027f0e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8027d44:	ea5f 4e25 	movs.w	lr, r5, asr #16
 8027d48:	ea4f 4326 	mov.w	r3, r6, asr #16
 8027d4c:	d406      	bmi.n	8027d5c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8027d4e:	4586      	cmp	lr, r0
 8027d50:	da04      	bge.n	8027d5c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8027d52:	2b00      	cmp	r3, #0
 8027d54:	db02      	blt.n	8027d5c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8027d56:	4563      	cmp	r3, ip
 8027d58:	f2c0 80da 	blt.w	8027f10 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8027d5c:	f11e 0e01 	adds.w	lr, lr, #1
 8027d60:	f100 80cb 	bmi.w	8027efa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8027d64:	4571      	cmp	r1, lr
 8027d66:	f2c0 80c8 	blt.w	8027efa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8027d6a:	3301      	adds	r3, #1
 8027d6c:	f100 80c5 	bmi.w	8027efa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8027d70:	429a      	cmp	r2, r3
 8027d72:	f2c0 80c2 	blt.w	8027efa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8027d76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027d78:	46d0      	mov	r8, sl
 8027d7a:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 8027d7e:	930d      	str	r3, [sp, #52]	; 0x34
 8027d80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8027d82:	2b00      	cmp	r3, #0
 8027d84:	f340 80e3 	ble.w	8027f4e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 8027d88:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027d8a:	1430      	asrs	r0, r6, #16
 8027d8c:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8027d90:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8027d94:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8027d98:	142b      	asrs	r3, r5, #16
 8027d9a:	f100 812e 	bmi.w	8027ffa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8027d9e:	f10c 3bff 	add.w	fp, ip, #4294967295
 8027da2:	455b      	cmp	r3, fp
 8027da4:	f280 8129 	bge.w	8027ffa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8027da8:	2800      	cmp	r0, #0
 8027daa:	f2c0 8126 	blt.w	8027ffa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8027dae:	f10e 3bff 	add.w	fp, lr, #4294967295
 8027db2:	4558      	cmp	r0, fp
 8027db4:	f280 8121 	bge.w	8027ffa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8027db8:	fb00 3309 	mla	r3, r0, r9, r3
 8027dbc:	0858      	lsrs	r0, r3, #1
 8027dbe:	07dc      	lsls	r4, r3, #31
 8027dc0:	f817 c000 	ldrb.w	ip, [r7, r0]
 8027dc4:	bf54      	ite	pl
 8027dc6:	f00c 0c0f 	andpl.w	ip, ip, #15
 8027dca:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8027dce:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8027dd2:	fa5f fc8c 	uxtb.w	ip, ip
 8027dd6:	2a00      	cmp	r2, #0
 8027dd8:	f000 80fe 	beq.w	8027fd8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 8027ddc:	1c58      	adds	r0, r3, #1
 8027dde:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8027de2:	07c0      	lsls	r0, r0, #31
 8027de4:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8027de8:	bf54      	ite	pl
 8027dea:	f00e 0e0f 	andpl.w	lr, lr, #15
 8027dee:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8027df2:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8027df6:	fa5f f08e 	uxtb.w	r0, lr
 8027dfa:	9010      	str	r0, [sp, #64]	; 0x40
 8027dfc:	b1d9      	cbz	r1, 8027e36 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8027dfe:	444b      	add	r3, r9
 8027e00:	0858      	lsrs	r0, r3, #1
 8027e02:	07dc      	lsls	r4, r3, #31
 8027e04:	f103 0301 	add.w	r3, r3, #1
 8027e08:	5c38      	ldrb	r0, [r7, r0]
 8027e0a:	bf54      	ite	pl
 8027e0c:	f000 000f 	andpl.w	r0, r0, #15
 8027e10:	1100      	asrmi	r0, r0, #4
 8027e12:	07dc      	lsls	r4, r3, #31
 8027e14:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8027e18:	b2c0      	uxtb	r0, r0
 8027e1a:	900a      	str	r0, [sp, #40]	; 0x28
 8027e1c:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8027e20:	f817 e000 	ldrb.w	lr, [r7, r0]
 8027e24:	bf54      	ite	pl
 8027e26:	f00e 030f 	andpl.w	r3, lr, #15
 8027e2a:	ea4f 132e 	movmi.w	r3, lr, asr #4
 8027e2e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8027e32:	b2db      	uxtb	r3, r3
 8027e34:	9311      	str	r3, [sp, #68]	; 0x44
 8027e36:	b292      	uxth	r2, r2
 8027e38:	b289      	uxth	r1, r1
 8027e3a:	0113      	lsls	r3, r2, #4
 8027e3c:	fb02 f001 	mul.w	r0, r2, r1
 8027e40:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8027e42:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8027e46:	ebc0 1101 	rsb	r1, r0, r1, lsl #4
 8027e4a:	1a1b      	subs	r3, r3, r0
 8027e4c:	b289      	uxth	r1, r1
 8027e4e:	b29b      	uxth	r3, r3
 8027e50:	ebae 0e01 	sub.w	lr, lr, r1
 8027e54:	4353      	muls	r3, r2
 8027e56:	fa1f fe8e 	uxth.w	lr, lr
 8027e5a:	fb0c 320e 	mla	r2, ip, lr, r3
 8027e5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027e60:	fb01 2203 	mla	r2, r1, r3, r2
 8027e64:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8027e66:	fb00 2203 	mla	r2, r0, r3, r2
 8027e6a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8027e6e:	2a00      	cmp	r2, #0
 8027e70:	d039      	beq.n	8027ee6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8027e72:	4bc7      	ldr	r3, [pc, #796]	; (8028190 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8027e74:	6819      	ldr	r1, [r3, #0]
 8027e76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8027e78:	fa5f fc81 	uxtb.w	ip, r1
 8027e7c:	435a      	muls	r2, r3
 8027e7e:	1c53      	adds	r3, r2, #1
 8027e80:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8027e84:	1212      	asrs	r2, r2, #8
 8027e86:	b290      	uxth	r0, r2
 8027e88:	43d2      	mvns	r2, r2
 8027e8a:	fb1c fc00 	smulbb	ip, ip, r0
 8027e8e:	b2d3      	uxtb	r3, r2
 8027e90:	f898 2000 	ldrb.w	r2, [r8]
 8027e94:	fb02 c203 	mla	r2, r2, r3, ip
 8027e98:	b292      	uxth	r2, r2
 8027e9a:	f102 0c01 	add.w	ip, r2, #1
 8027e9e:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8027ea2:	f898 c001 	ldrb.w	ip, [r8, #1]
 8027ea6:	fb1c fc03 	smulbb	ip, ip, r3
 8027eaa:	1212      	asrs	r2, r2, #8
 8027eac:	f888 2000 	strb.w	r2, [r8]
 8027eb0:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8027eb4:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8027eb8:	fb02 c200 	mla	r2, r2, r0, ip
 8027ebc:	b292      	uxth	r2, r2
 8027ebe:	f102 0c01 	add.w	ip, r2, #1
 8027ec2:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8027ec6:	1212      	asrs	r2, r2, #8
 8027ec8:	f888 2001 	strb.w	r2, [r8, #1]
 8027ecc:	f898 2002 	ldrb.w	r2, [r8, #2]
 8027ed0:	fb12 f303 	smulbb	r3, r2, r3
 8027ed4:	fb01 3300 	mla	r3, r1, r0, r3
 8027ed8:	b29b      	uxth	r3, r3
 8027eda:	1c5a      	adds	r2, r3, #1
 8027edc:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8027ee0:	121b      	asrs	r3, r3, #8
 8027ee2:	f888 3002 	strb.w	r3, [r8, #2]
 8027ee6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8027ee8:	f108 0803 	add.w	r8, r8, #3
 8027eec:	441d      	add	r5, r3
 8027eee:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027ef0:	441e      	add	r6, r3
 8027ef2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8027ef4:	3b01      	subs	r3, #1
 8027ef6:	930d      	str	r3, [sp, #52]	; 0x34
 8027ef8:	e742      	b.n	8027d80 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8027efa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8027efc:	f10a 0a03 	add.w	sl, sl, #3
 8027f00:	441d      	add	r5, r3
 8027f02:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027f04:	441e      	add	r6, r3
 8027f06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027f08:	3b01      	subs	r3, #1
 8027f0a:	9309      	str	r3, [sp, #36]	; 0x24
 8027f0c:	e716      	b.n	8027d3c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8027f0e:	d024      	beq.n	8027f5a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8027f10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027f12:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8027f14:	3b01      	subs	r3, #1
 8027f16:	fb00 5003 	mla	r0, r0, r3, r5
 8027f1a:	1400      	asrs	r0, r0, #16
 8027f1c:	f53f af2b 	bmi.w	8027d76 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8027f20:	3901      	subs	r1, #1
 8027f22:	4288      	cmp	r0, r1
 8027f24:	f6bf af27 	bge.w	8027d76 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8027f28:	9924      	ldr	r1, [sp, #144]	; 0x90
 8027f2a:	fb01 6303 	mla	r3, r1, r3, r6
 8027f2e:	141b      	asrs	r3, r3, #16
 8027f30:	f53f af21 	bmi.w	8027d76 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8027f34:	3a01      	subs	r2, #1
 8027f36:	4293      	cmp	r3, r2
 8027f38:	f6bf af1d 	bge.w	8027d76 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8027f3c:	f10a 0e03 	add.w	lr, sl, #3
 8027f40:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8027f44:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 8027f48:	f1b8 0f00 	cmp.w	r8, #0
 8027f4c:	dc76      	bgt.n	802803c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 8027f4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027f50:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8027f54:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8027f58:	44a2      	add	sl, r4
 8027f5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8027f5c:	2b00      	cmp	r3, #0
 8027f5e:	f340 812c 	ble.w	80281ba <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 8027f62:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8027f66:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8027f68:	ee30 0a04 	vadd.f32	s0, s0, s8
 8027f6c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8027f70:	eef0 6a62 	vmov.f32	s13, s5
 8027f74:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8027f78:	ee31 1a05 	vadd.f32	s2, s2, s10
 8027f7c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027f80:	ee16 5a90 	vmov	r5, s13
 8027f84:	eef0 6a43 	vmov.f32	s13, s6
 8027f88:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027f8c:	ee16 6a90 	vmov	r6, s13
 8027f90:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8027f94:	ee61 7a27 	vmul.f32	s15, s2, s15
 8027f98:	ee77 2a62 	vsub.f32	s5, s14, s5
 8027f9c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8027fa0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8027fa4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8027fa8:	ee12 2a90 	vmov	r2, s5
 8027fac:	eef0 2a47 	vmov.f32	s5, s14
 8027fb0:	fb92 f3f3 	sdiv	r3, r2, r3
 8027fb4:	ee13 2a10 	vmov	r2, s6
 8027fb8:	9323      	str	r3, [sp, #140]	; 0x8c
 8027fba:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8027fbc:	eeb0 3a67 	vmov.f32	s6, s15
 8027fc0:	fb92 f3f3 	sdiv	r3, r2, r3
 8027fc4:	9324      	str	r3, [sp, #144]	; 0x90
 8027fc6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8027fc8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8027fca:	3b01      	subs	r3, #1
 8027fcc:	930c      	str	r3, [sp, #48]	; 0x30
 8027fce:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8027fd0:	bf08      	it	eq
 8027fd2:	4613      	moveq	r3, r2
 8027fd4:	9309      	str	r3, [sp, #36]	; 0x24
 8027fd6:	e6a2      	b.n	8027d1e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8027fd8:	2900      	cmp	r1, #0
 8027fda:	f43f af2c 	beq.w	8027e36 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8027fde:	eb09 0003 	add.w	r0, r9, r3
 8027fe2:	0843      	lsrs	r3, r0, #1
 8027fe4:	07c0      	lsls	r0, r0, #31
 8027fe6:	5cfb      	ldrb	r3, [r7, r3]
 8027fe8:	bf54      	ite	pl
 8027fea:	f003 030f 	andpl.w	r3, r3, #15
 8027fee:	111b      	asrmi	r3, r3, #4
 8027ff0:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8027ff4:	b2db      	uxtb	r3, r3
 8027ff6:	930a      	str	r3, [sp, #40]	; 0x28
 8027ff8:	e71d      	b.n	8027e36 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8027ffa:	f113 0b01 	adds.w	fp, r3, #1
 8027ffe:	f53f af72 	bmi.w	8027ee6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8028002:	45dc      	cmp	ip, fp
 8028004:	f6ff af6f 	blt.w	8027ee6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8028008:	f110 0b01 	adds.w	fp, r0, #1
 802800c:	f53f af6b 	bmi.w	8027ee6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8028010:	45de      	cmp	lr, fp
 8028012:	f6ff af68 	blt.w	8027ee6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8028016:	9302      	str	r3, [sp, #8]
 8028018:	fa0f f38e 	sxth.w	r3, lr
 802801c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802801e:	9301      	str	r3, [sp, #4]
 8028020:	fa0f f38c 	sxth.w	r3, ip
 8028024:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8028028:	e9cd 1405 	strd	r1, r4, [sp, #20]
 802802c:	9300      	str	r3, [sp, #0]
 802802e:	463a      	mov	r2, r7
 8028030:	464b      	mov	r3, r9
 8028032:	4641      	mov	r1, r8
 8028034:	9815      	ldr	r0, [sp, #84]	; 0x54
 8028036:	f7ff fd79 	bl	8027b2c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 802803a:	e754      	b.n	8027ee6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 802803c:	142a      	asrs	r2, r5, #16
 802803e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8028042:	1433      	asrs	r3, r6, #16
 8028044:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8028048:	fb09 2303 	mla	r3, r9, r3, r2
 802804c:	085a      	lsrs	r2, r3, #1
 802804e:	07dc      	lsls	r4, r3, #31
 8028050:	5cba      	ldrb	r2, [r7, r2]
 8028052:	bf54      	ite	pl
 8028054:	f002 020f 	andpl.w	r2, r2, #15
 8028058:	1112      	asrmi	r2, r2, #4
 802805a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802805e:	b2d2      	uxtb	r2, r2
 8028060:	2900      	cmp	r1, #0
 8028062:	f000 8097 	beq.w	8028194 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8028066:	f103 0b01 	add.w	fp, r3, #1
 802806a:	ea4f 0c5b 	mov.w	ip, fp, lsr #1
 802806e:	f01b 0f01 	tst.w	fp, #1
 8028072:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8028076:	bf0c      	ite	eq
 8028078:	f00c 0c0f 	andeq.w	ip, ip, #15
 802807c:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8028080:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8028084:	fa5f f48c 	uxtb.w	r4, ip
 8028088:	9412      	str	r4, [sp, #72]	; 0x48
 802808a:	b300      	cbz	r0, 80280ce <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 802808c:	444b      	add	r3, r9
 802808e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8028092:	07dc      	lsls	r4, r3, #31
 8028094:	f103 0301 	add.w	r3, r3, #1
 8028098:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802809c:	bf54      	ite	pl
 802809e:	f00c 0c0f 	andpl.w	ip, ip, #15
 80280a2:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80280a6:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80280aa:	fa5f f48c 	uxtb.w	r4, ip
 80280ae:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80280b2:	940b      	str	r4, [sp, #44]	; 0x2c
 80280b4:	07dc      	lsls	r4, r3, #31
 80280b6:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80280ba:	bf54      	ite	pl
 80280bc:	f00c 0c0f 	andpl.w	ip, ip, #15
 80280c0:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80280c4:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80280c8:	fa5f f38c 	uxtb.w	r3, ip
 80280cc:	9313      	str	r3, [sp, #76]	; 0x4c
 80280ce:	b289      	uxth	r1, r1
 80280d0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80280d2:	b280      	uxth	r0, r0
 80280d4:	fb01 f300 	mul.w	r3, r1, r0
 80280d8:	0109      	lsls	r1, r1, #4
 80280da:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 80280de:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 80280e2:	1ac9      	subs	r1, r1, r3
 80280e4:	b280      	uxth	r0, r0
 80280e6:	b289      	uxth	r1, r1
 80280e8:	ebac 0c00 	sub.w	ip, ip, r0
 80280ec:	4361      	muls	r1, r4
 80280ee:	fa1f fc8c 	uxth.w	ip, ip
 80280f2:	fb02 120c 	mla	r2, r2, ip, r1
 80280f6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80280f8:	fb00 2001 	mla	r0, r0, r1, r2
 80280fc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80280fe:	fb03 0302 	mla	r3, r3, r2, r0
 8028102:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8028106:	2b00      	cmp	r3, #0
 8028108:	d039      	beq.n	802817e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 802810a:	4a21      	ldr	r2, [pc, #132]	; (8028190 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 802810c:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8028110:	6810      	ldr	r0, [r2, #0]
 8028112:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8028114:	fa5f fc80 	uxtb.w	ip, r0
 8028118:	4353      	muls	r3, r2
 802811a:	1c5a      	adds	r2, r3, #1
 802811c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8028120:	121b      	asrs	r3, r3, #8
 8028122:	b29a      	uxth	r2, r3
 8028124:	43db      	mvns	r3, r3
 8028126:	fb1c fc02 	smulbb	ip, ip, r2
 802812a:	b2db      	uxtb	r3, r3
 802812c:	fb01 c103 	mla	r1, r1, r3, ip
 8028130:	b289      	uxth	r1, r1
 8028132:	f101 0c01 	add.w	ip, r1, #1
 8028136:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 802813a:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 802813e:	fb1c fc03 	smulbb	ip, ip, r3
 8028142:	1209      	asrs	r1, r1, #8
 8028144:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8028148:	f3c0 2107 	ubfx	r1, r0, #8, #8
 802814c:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8028150:	fb01 c102 	mla	r1, r1, r2, ip
 8028154:	b289      	uxth	r1, r1
 8028156:	f101 0c01 	add.w	ip, r1, #1
 802815a:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 802815e:	1209      	asrs	r1, r1, #8
 8028160:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8028164:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 8028168:	fb11 f303 	smulbb	r3, r1, r3
 802816c:	fb00 3002 	mla	r0, r0, r2, r3
 8028170:	b280      	uxth	r0, r0
 8028172:	1c42      	adds	r2, r0, #1
 8028174:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8028178:	1200      	asrs	r0, r0, #8
 802817a:	f80e 0c01 	strb.w	r0, [lr, #-1]
 802817e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8028180:	f10e 0e03 	add.w	lr, lr, #3
 8028184:	f108 38ff 	add.w	r8, r8, #4294967295
 8028188:	441d      	add	r5, r3
 802818a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802818c:	441e      	add	r6, r3
 802818e:	e6db      	b.n	8027f48 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 8028190:	24006ff4 	.word	0x24006ff4
 8028194:	2800      	cmp	r0, #0
 8028196:	d09a      	beq.n	80280ce <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8028198:	444b      	add	r3, r9
 802819a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802819e:	07db      	lsls	r3, r3, #31
 80281a0:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80281a4:	bf54      	ite	pl
 80281a6:	f00c 0c0f 	andpl.w	ip, ip, #15
 80281aa:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80281ae:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80281b2:	fa5f f38c 	uxtb.w	r3, ip
 80281b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80281b8:	e789      	b.n	80280ce <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 80281ba:	b017      	add	sp, #92	; 0x5c
 80281bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080281c0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 80281c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80281c4:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
 80281c8:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 80281cc:	2d00      	cmp	r5, #0
 80281ce:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 80281d2:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 80281d6:	fb04 5e03 	mla	lr, r4, r3, r5
 80281da:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
 80281de:	f2c0 80b1 	blt.w	8028344 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 80281e2:	45a9      	cmp	r9, r5
 80281e4:	f340 80ae 	ble.w	8028344 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 80281e8:	2c00      	cmp	r4, #0
 80281ea:	f2c0 80ab 	blt.w	8028344 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 80281ee:	45a0      	cmp	r8, r4
 80281f0:	f340 80a8 	ble.w	8028344 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 80281f4:	ea4f 065e 	mov.w	r6, lr, lsr #1
 80281f8:	f01e 0f01 	tst.w	lr, #1
 80281fc:	5d97      	ldrb	r7, [r2, r6]
 80281fe:	bf0c      	ite	eq
 8028200:	f007 070f 	andeq.w	r7, r7, #15
 8028204:	113f      	asrne	r7, r7, #4
 8028206:	eb07 1707 	add.w	r7, r7, r7, lsl #4
 802820a:	b2ff      	uxtb	r7, r7
 802820c:	f115 0a01 	adds.w	sl, r5, #1
 8028210:	f100 809a 	bmi.w	8028348 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8028214:	45d1      	cmp	r9, sl
 8028216:	f340 8097 	ble.w	8028348 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 802821a:	2c00      	cmp	r4, #0
 802821c:	f2c0 8094 	blt.w	8028348 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8028220:	45a0      	cmp	r8, r4
 8028222:	f340 8091 	ble.w	8028348 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8028226:	2800      	cmp	r0, #0
 8028228:	f000 8090 	beq.w	802834c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x18c>
 802822c:	f10e 0b01 	add.w	fp, lr, #1
 8028230:	ea4f 065b 	mov.w	r6, fp, lsr #1
 8028234:	f01b 0f01 	tst.w	fp, #1
 8028238:	5d96      	ldrb	r6, [r2, r6]
 802823a:	bf0c      	ite	eq
 802823c:	f006 060f 	andeq.w	r6, r6, #15
 8028240:	1136      	asrne	r6, r6, #4
 8028242:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8028246:	b2f6      	uxtb	r6, r6
 8028248:	f1bc 0f00 	cmp.w	ip, #0
 802824c:	f000 8082 	beq.w	8028354 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x194>
 8028250:	2d00      	cmp	r5, #0
 8028252:	f104 0401 	add.w	r4, r4, #1
 8028256:	db7b      	blt.n	8028350 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8028258:	45a9      	cmp	r9, r5
 802825a:	dd79      	ble.n	8028350 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 802825c:	2c00      	cmp	r4, #0
 802825e:	db77      	blt.n	8028350 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8028260:	45a0      	cmp	r8, r4
 8028262:	dd75      	ble.n	8028350 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8028264:	eb03 0b0e 	add.w	fp, r3, lr
 8028268:	ea4f 055b 	mov.w	r5, fp, lsr #1
 802826c:	f01b 0f01 	tst.w	fp, #1
 8028270:	5d55      	ldrb	r5, [r2, r5]
 8028272:	bf0c      	ite	eq
 8028274:	f005 050f 	andeq.w	r5, r5, #15
 8028278:	112d      	asrne	r5, r5, #4
 802827a:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 802827e:	b2ed      	uxtb	r5, r5
 8028280:	f1ba 0f00 	cmp.w	sl, #0
 8028284:	db69      	blt.n	802835a <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8028286:	45d1      	cmp	r9, sl
 8028288:	dd67      	ble.n	802835a <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 802828a:	2c00      	cmp	r4, #0
 802828c:	db65      	blt.n	802835a <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 802828e:	45a0      	cmp	r8, r4
 8028290:	dd63      	ble.n	802835a <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8028292:	2800      	cmp	r0, #0
 8028294:	d063      	beq.n	802835e <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19e>
 8028296:	3301      	adds	r3, #1
 8028298:	449e      	add	lr, r3
 802829a:	ea4f 035e 	mov.w	r3, lr, lsr #1
 802829e:	f01e 0f01 	tst.w	lr, #1
 80282a2:	5cd4      	ldrb	r4, [r2, r3]
 80282a4:	bf0c      	ite	eq
 80282a6:	f004 040f 	andeq.w	r4, r4, #15
 80282aa:	1124      	asrne	r4, r4, #4
 80282ac:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80282b0:	b2e3      	uxtb	r3, r4
 80282b2:	b282      	uxth	r2, r0
 80282b4:	fa1f fc8c 	uxth.w	ip, ip
 80282b8:	fb02 f40c 	mul.w	r4, r2, ip
 80282bc:	0112      	lsls	r2, r2, #4
 80282be:	ebc4 1c0c 	rsb	ip, r4, ip, lsl #4
 80282c2:	fa1f f08c 	uxth.w	r0, ip
 80282c6:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 80282ca:	1b12      	subs	r2, r2, r4
 80282cc:	ebac 0c00 	sub.w	ip, ip, r0
 80282d0:	b292      	uxth	r2, r2
 80282d2:	fa1f fc8c 	uxth.w	ip, ip
 80282d6:	4372      	muls	r2, r6
 80282d8:	fb07 220c 	mla	r2, r7, ip, r2
 80282dc:	fb00 2005 	mla	r0, r0, r5, r2
 80282e0:	fb04 0303 	mla	r3, r4, r3, r0
 80282e4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80282e8:	b353      	cbz	r3, 8028340 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x180>
 80282ea:	4a1e      	ldr	r2, [pc, #120]	; (8028364 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>)
 80282ec:	7808      	ldrb	r0, [r1, #0]
 80282ee:	6814      	ldr	r4, [r2, #0]
 80282f0:	b29a      	uxth	r2, r3
 80282f2:	43db      	mvns	r3, r3
 80282f4:	b2e5      	uxtb	r5, r4
 80282f6:	b2db      	uxtb	r3, r3
 80282f8:	fb15 f502 	smulbb	r5, r5, r2
 80282fc:	fb00 5003 	mla	r0, r0, r3, r5
 8028300:	b280      	uxth	r0, r0
 8028302:	1c45      	adds	r5, r0, #1
 8028304:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8028308:	784d      	ldrb	r5, [r1, #1]
 802830a:	fb15 f503 	smulbb	r5, r5, r3
 802830e:	1200      	asrs	r0, r0, #8
 8028310:	7008      	strb	r0, [r1, #0]
 8028312:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8028316:	f3c4 4407 	ubfx	r4, r4, #16, #8
 802831a:	fb00 5002 	mla	r0, r0, r2, r5
 802831e:	b280      	uxth	r0, r0
 8028320:	1c45      	adds	r5, r0, #1
 8028322:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8028326:	1200      	asrs	r0, r0, #8
 8028328:	7048      	strb	r0, [r1, #1]
 802832a:	7888      	ldrb	r0, [r1, #2]
 802832c:	fb10 f303 	smulbb	r3, r0, r3
 8028330:	fb04 3202 	mla	r2, r4, r2, r3
 8028334:	b292      	uxth	r2, r2
 8028336:	1c53      	adds	r3, r2, #1
 8028338:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 802833c:	1212      	asrs	r2, r2, #8
 802833e:	708a      	strb	r2, [r1, #2]
 8028340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028344:	2700      	movs	r7, #0
 8028346:	e761      	b.n	802820c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x4c>
 8028348:	2600      	movs	r6, #0
 802834a:	e77d      	b.n	8028248 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 802834c:	4606      	mov	r6, r0
 802834e:	e77b      	b.n	8028248 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 8028350:	2500      	movs	r5, #0
 8028352:	e795      	b.n	8028280 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xc0>
 8028354:	4663      	mov	r3, ip
 8028356:	4665      	mov	r5, ip
 8028358:	e7ab      	b.n	80282b2 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 802835a:	2300      	movs	r3, #0
 802835c:	e7a9      	b.n	80282b2 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 802835e:	4603      	mov	r3, r0
 8028360:	e7a7      	b.n	80282b2 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 8028362:	bf00      	nop
 8028364:	24006ff4 	.word	0x24006ff4

08028368 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8028368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802836c:	b093      	sub	sp, #76	; 0x4c
 802836e:	461c      	mov	r4, r3
 8028370:	920c      	str	r2, [sp, #48]	; 0x30
 8028372:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8028374:	9011      	str	r0, [sp, #68]	; 0x44
 8028376:	9107      	str	r1, [sp, #28]
 8028378:	6850      	ldr	r0, [r2, #4]
 802837a:	6812      	ldr	r2, [r2, #0]
 802837c:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 8028380:	e9dd 561d 	ldrd	r5, r6, [sp, #116]	; 0x74
 8028384:	fb00 1303 	mla	r3, r0, r3, r1
 8028388:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802838c:	eb02 0b03 	add.w	fp, r2, r3
 8028390:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8028392:	689b      	ldr	r3, [r3, #8]
 8028394:	3301      	adds	r3, #1
 8028396:	f023 0301 	bic.w	r3, r3, #1
 802839a:	9309      	str	r3, [sp, #36]	; 0x24
 802839c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802839e:	f8d3 8000 	ldr.w	r8, [r3]
 80283a2:	9b07      	ldr	r3, [sp, #28]
 80283a4:	2b00      	cmp	r3, #0
 80283a6:	dc03      	bgt.n	80283b0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80283a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80283aa:	2b00      	cmp	r3, #0
 80283ac:	f340 822b 	ble.w	8028806 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 80283b0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80283b2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80283b6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80283ba:	1e48      	subs	r0, r1, #1
 80283bc:	1e57      	subs	r7, r2, #1
 80283be:	2c00      	cmp	r4, #0
 80283c0:	f340 80d7 	ble.w	8028572 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 80283c4:	ea5f 4c25 	movs.w	ip, r5, asr #16
 80283c8:	ea4f 4326 	mov.w	r3, r6, asr #16
 80283cc:	d406      	bmi.n	80283dc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80283ce:	4584      	cmp	ip, r0
 80283d0:	da04      	bge.n	80283dc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80283d2:	2b00      	cmp	r3, #0
 80283d4:	db02      	blt.n	80283dc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80283d6:	42bb      	cmp	r3, r7
 80283d8:	f2c0 80cc 	blt.w	8028574 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 80283dc:	f11c 0c01 	adds.w	ip, ip, #1
 80283e0:	f100 80bf 	bmi.w	8028562 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 80283e4:	4561      	cmp	r1, ip
 80283e6:	f2c0 80bc 	blt.w	8028562 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 80283ea:	3301      	adds	r3, #1
 80283ec:	f100 80b9 	bmi.w	8028562 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 80283f0:	429a      	cmp	r2, r3
 80283f2:	f2c0 80b6 	blt.w	8028562 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 80283f6:	46a2      	mov	sl, r4
 80283f8:	465f      	mov	r7, fp
 80283fa:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 80283fe:	f1ba 0f00 	cmp.w	sl, #0
 8028402:	f340 80d4 	ble.w	80285ae <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 8028406:	f3c5 3303 	ubfx	r3, r5, #12, #4
 802840a:	1430      	asrs	r0, r6, #16
 802840c:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8028410:	9308      	str	r3, [sp, #32]
 8028412:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8028414:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8028418:	142b      	asrs	r3, r5, #16
 802841a:	f100 8124 	bmi.w	8028666 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 802841e:	f10c 32ff 	add.w	r2, ip, #4294967295
 8028422:	4293      	cmp	r3, r2
 8028424:	f280 811f 	bge.w	8028666 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8028428:	2800      	cmp	r0, #0
 802842a:	f2c0 811c 	blt.w	8028666 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 802842e:	f10e 32ff 	add.w	r2, lr, #4294967295
 8028432:	4290      	cmp	r0, r2
 8028434:	f280 8117 	bge.w	8028666 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8028438:	fb00 3309 	mla	r3, r0, r9, r3
 802843c:	0858      	lsrs	r0, r3, #1
 802843e:	07da      	lsls	r2, r3, #31
 8028440:	9a08      	ldr	r2, [sp, #32]
 8028442:	f818 c000 	ldrb.w	ip, [r8, r0]
 8028446:	bf54      	ite	pl
 8028448:	f00c 0c0f 	andpl.w	ip, ip, #15
 802844c:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8028450:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8028454:	fa5f fc8c 	uxtb.w	ip, ip
 8028458:	2a00      	cmp	r2, #0
 802845a:	f000 80ed 	beq.w	8028638 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d0>
 802845e:	1c58      	adds	r0, r3, #1
 8028460:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8028464:	07c0      	lsls	r0, r0, #31
 8028466:	f818 e00e 	ldrb.w	lr, [r8, lr]
 802846a:	bf54      	ite	pl
 802846c:	f00e 0e0f 	andpl.w	lr, lr, #15
 8028470:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8028474:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8028478:	fa5f fe8e 	uxtb.w	lr, lr
 802847c:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 8028480:	b1c9      	cbz	r1, 80284b6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8028482:	444b      	add	r3, r9
 8028484:	0858      	lsrs	r0, r3, #1
 8028486:	07da      	lsls	r2, r3, #31
 8028488:	f818 0000 	ldrb.w	r0, [r8, r0]
 802848c:	bf54      	ite	pl
 802848e:	f000 000f 	andpl.w	r0, r0, #15
 8028492:	1100      	asrmi	r0, r0, #4
 8028494:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8028498:	b2c0      	uxtb	r0, r0
 802849a:	900a      	str	r0, [sp, #40]	; 0x28
 802849c:	1c58      	adds	r0, r3, #1
 802849e:	0843      	lsrs	r3, r0, #1
 80284a0:	07c2      	lsls	r2, r0, #31
 80284a2:	f818 3003 	ldrb.w	r3, [r8, r3]
 80284a6:	bf54      	ite	pl
 80284a8:	f003 030f 	andpl.w	r3, r3, #15
 80284ac:	111b      	asrmi	r3, r3, #4
 80284ae:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80284b2:	b2db      	uxtb	r3, r3
 80284b4:	930e      	str	r3, [sp, #56]	; 0x38
 80284b6:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80284ba:	b289      	uxth	r1, r1
 80284bc:	fb02 f301 	mul.w	r3, r2, r1
 80284c0:	0112      	lsls	r2, r2, #4
 80284c2:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 80284c6:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 80284ca:	1ad2      	subs	r2, r2, r3
 80284cc:	b289      	uxth	r1, r1
 80284ce:	b292      	uxth	r2, r2
 80284d0:	1a40      	subs	r0, r0, r1
 80284d2:	fa1f fe80 	uxth.w	lr, r0
 80284d6:	980d      	ldr	r0, [sp, #52]	; 0x34
 80284d8:	4342      	muls	r2, r0
 80284da:	fb0c 2c0e 	mla	ip, ip, lr, r2
 80284de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80284e0:	fb01 c102 	mla	r1, r1, r2, ip
 80284e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80284e6:	fb03 1302 	mla	r3, r3, r2, r1
 80284ea:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80284ee:	b383      	cbz	r3, 8028552 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80284f0:	4ac6      	ldr	r2, [pc, #792]	; (802880c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 80284f2:	2bff      	cmp	r3, #255	; 0xff
 80284f4:	6812      	ldr	r2, [r2, #0]
 80284f6:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 80284fa:	f3c2 2007 	ubfx	r0, r2, #8, #8
 80284fe:	b2d2      	uxtb	r2, r2
 8028500:	f000 80ac 	beq.w	802865c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8028504:	b299      	uxth	r1, r3
 8028506:	43db      	mvns	r3, r3
 8028508:	f897 c000 	ldrb.w	ip, [r7]
 802850c:	fb12 f201 	smulbb	r2, r2, r1
 8028510:	b2db      	uxtb	r3, r3
 8028512:	fb10 f001 	smulbb	r0, r0, r1
 8028516:	fb0c 2203 	mla	r2, ip, r3, r2
 802851a:	fb1e f101 	smulbb	r1, lr, r1
 802851e:	b292      	uxth	r2, r2
 8028520:	f102 0c01 	add.w	ip, r2, #1
 8028524:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8028528:	1212      	asrs	r2, r2, #8
 802852a:	703a      	strb	r2, [r7, #0]
 802852c:	787a      	ldrb	r2, [r7, #1]
 802852e:	fb02 0003 	mla	r0, r2, r3, r0
 8028532:	b280      	uxth	r0, r0
 8028534:	1c42      	adds	r2, r0, #1
 8028536:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802853a:	78ba      	ldrb	r2, [r7, #2]
 802853c:	fb02 1303 	mla	r3, r2, r3, r1
 8028540:	1200      	asrs	r0, r0, #8
 8028542:	b29b      	uxth	r3, r3
 8028544:	7078      	strb	r0, [r7, #1]
 8028546:	f103 0e01 	add.w	lr, r3, #1
 802854a:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 802854e:	121b      	asrs	r3, r3, #8
 8028550:	70bb      	strb	r3, [r7, #2]
 8028552:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8028554:	3703      	adds	r7, #3
 8028556:	f10a 3aff 	add.w	sl, sl, #4294967295
 802855a:	441d      	add	r5, r3
 802855c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802855e:	441e      	add	r6, r3
 8028560:	e74d      	b.n	80283fe <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8028562:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8028564:	3c01      	subs	r4, #1
 8028566:	f10b 0b03 	add.w	fp, fp, #3
 802856a:	441d      	add	r5, r3
 802856c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802856e:	441e      	add	r6, r3
 8028570:	e725      	b.n	80283be <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8028572:	d021      	beq.n	80285b8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 8028574:	1e63      	subs	r3, r4, #1
 8028576:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8028578:	fb00 5003 	mla	r0, r0, r3, r5
 802857c:	1400      	asrs	r0, r0, #16
 802857e:	f53f af3a 	bmi.w	80283f6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8028582:	3901      	subs	r1, #1
 8028584:	4288      	cmp	r0, r1
 8028586:	f6bf af36 	bge.w	80283f6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802858a:	9920      	ldr	r1, [sp, #128]	; 0x80
 802858c:	fb01 6303 	mla	r3, r1, r3, r6
 8028590:	141b      	asrs	r3, r3, #16
 8028592:	f53f af30 	bmi.w	80283f6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8028596:	3a01      	subs	r2, #1
 8028598:	4293      	cmp	r3, r2
 802859a:	f6bf af2c 	bge.w	80283f6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802859e:	f10b 0c03 	add.w	ip, fp, #3
 80285a2:	46a6      	mov	lr, r4
 80285a4:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 80285a8:	f1be 0f00 	cmp.w	lr, #0
 80285ac:	dc79      	bgt.n	80286a2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 80285ae:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80285b2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80285b6:	44a3      	add	fp, r4
 80285b8:	9b07      	ldr	r3, [sp, #28]
 80285ba:	2b00      	cmp	r3, #0
 80285bc:	f340 8123 	ble.w	8028806 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 80285c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80285c4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80285c6:	ee30 0a04 	vadd.f32	s0, s0, s8
 80285ca:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80285ce:	eef0 6a62 	vmov.f32	s13, s5
 80285d2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80285d6:	ee31 1a05 	vadd.f32	s2, s2, s10
 80285da:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80285de:	ee16 5a90 	vmov	r5, s13
 80285e2:	eef0 6a43 	vmov.f32	s13, s6
 80285e6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80285ea:	ee16 6a90 	vmov	r6, s13
 80285ee:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80285f2:	ee61 7a27 	vmul.f32	s15, s2, s15
 80285f6:	ee77 2a62 	vsub.f32	s5, s14, s5
 80285fa:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80285fe:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8028602:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8028606:	ee12 2a90 	vmov	r2, s5
 802860a:	eef0 2a47 	vmov.f32	s5, s14
 802860e:	fb92 f3f3 	sdiv	r3, r2, r3
 8028612:	ee13 2a10 	vmov	r2, s6
 8028616:	931f      	str	r3, [sp, #124]	; 0x7c
 8028618:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802861a:	eeb0 3a67 	vmov.f32	s6, s15
 802861e:	fb92 f3f3 	sdiv	r3, r2, r3
 8028622:	9320      	str	r3, [sp, #128]	; 0x80
 8028624:	9b07      	ldr	r3, [sp, #28]
 8028626:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8028628:	3b01      	subs	r3, #1
 802862a:	9307      	str	r3, [sp, #28]
 802862c:	bf08      	it	eq
 802862e:	4614      	moveq	r4, r2
 8028630:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8028632:	bf18      	it	ne
 8028634:	461c      	movne	r4, r3
 8028636:	e6b4      	b.n	80283a2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8028638:	2900      	cmp	r1, #0
 802863a:	f43f af3c 	beq.w	80284b6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 802863e:	eb09 0003 	add.w	r0, r9, r3
 8028642:	0843      	lsrs	r3, r0, #1
 8028644:	07c0      	lsls	r0, r0, #31
 8028646:	f818 3003 	ldrb.w	r3, [r8, r3]
 802864a:	bf54      	ite	pl
 802864c:	f003 030f 	andpl.w	r3, r3, #15
 8028650:	111b      	asrmi	r3, r3, #4
 8028652:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8028656:	b2db      	uxtb	r3, r3
 8028658:	930a      	str	r3, [sp, #40]	; 0x28
 802865a:	e72c      	b.n	80284b6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 802865c:	703a      	strb	r2, [r7, #0]
 802865e:	7078      	strb	r0, [r7, #1]
 8028660:	f887 e002 	strb.w	lr, [r7, #2]
 8028664:	e775      	b.n	8028552 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8028666:	1c5a      	adds	r2, r3, #1
 8028668:	f53f af73 	bmi.w	8028552 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 802866c:	4594      	cmp	ip, r2
 802866e:	f6ff af70 	blt.w	8028552 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8028672:	1c42      	adds	r2, r0, #1
 8028674:	f53f af6d 	bmi.w	8028552 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8028678:	4596      	cmp	lr, r2
 802867a:	f6ff af6a 	blt.w	8028552 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 802867e:	9302      	str	r3, [sp, #8]
 8028680:	fa0f f38e 	sxth.w	r3, lr
 8028684:	9a08      	ldr	r2, [sp, #32]
 8028686:	9301      	str	r3, [sp, #4]
 8028688:	fa0f f38c 	sxth.w	r3, ip
 802868c:	9105      	str	r1, [sp, #20]
 802868e:	4639      	mov	r1, r7
 8028690:	9300      	str	r3, [sp, #0]
 8028692:	464b      	mov	r3, r9
 8028694:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8028698:	4642      	mov	r2, r8
 802869a:	9811      	ldr	r0, [sp, #68]	; 0x44
 802869c:	f7ff fd90 	bl	80281c0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 80286a0:	e757      	b.n	8028552 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80286a2:	142a      	asrs	r2, r5, #16
 80286a4:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80286a8:	1433      	asrs	r3, r6, #16
 80286aa:	f3c6 3703 	ubfx	r7, r6, #12, #4
 80286ae:	fb09 2303 	mla	r3, r9, r3, r2
 80286b2:	085a      	lsrs	r2, r3, #1
 80286b4:	07d9      	lsls	r1, r3, #31
 80286b6:	f818 2002 	ldrb.w	r2, [r8, r2]
 80286ba:	bf54      	ite	pl
 80286bc:	f002 020f 	andpl.w	r2, r2, #15
 80286c0:	1112      	asrmi	r2, r2, #4
 80286c2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80286c6:	b2d2      	uxtb	r2, r2
 80286c8:	2800      	cmp	r0, #0
 80286ca:	f000 8085 	beq.w	80287d8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 80286ce:	f103 0a01 	add.w	sl, r3, #1
 80286d2:	ea4f 015a 	mov.w	r1, sl, lsr #1
 80286d6:	f01a 0f01 	tst.w	sl, #1
 80286da:	f818 1001 	ldrb.w	r1, [r8, r1]
 80286de:	bf0c      	ite	eq
 80286e0:	f001 010f 	andeq.w	r1, r1, #15
 80286e4:	1109      	asrne	r1, r1, #4
 80286e6:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80286ea:	b2c9      	uxtb	r1, r1
 80286ec:	910f      	str	r1, [sp, #60]	; 0x3c
 80286ee:	b1df      	cbz	r7, 8028728 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 80286f0:	444b      	add	r3, r9
 80286f2:	0859      	lsrs	r1, r3, #1
 80286f4:	f013 0f01 	tst.w	r3, #1
 80286f8:	f103 0301 	add.w	r3, r3, #1
 80286fc:	f818 1001 	ldrb.w	r1, [r8, r1]
 8028700:	bf0c      	ite	eq
 8028702:	f001 010f 	andeq.w	r1, r1, #15
 8028706:	1109      	asrne	r1, r1, #4
 8028708:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802870c:	b2c9      	uxtb	r1, r1
 802870e:	910b      	str	r1, [sp, #44]	; 0x2c
 8028710:	0859      	lsrs	r1, r3, #1
 8028712:	07db      	lsls	r3, r3, #31
 8028714:	f818 1001 	ldrb.w	r1, [r8, r1]
 8028718:	bf54      	ite	pl
 802871a:	f001 010f 	andpl.w	r1, r1, #15
 802871e:	1109      	asrmi	r1, r1, #4
 8028720:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8028724:	b2c9      	uxtb	r1, r1
 8028726:	9110      	str	r1, [sp, #64]	; 0x40
 8028728:	b280      	uxth	r0, r0
 802872a:	b2bf      	uxth	r7, r7
 802872c:	fb00 f307 	mul.w	r3, r0, r7
 8028730:	0100      	lsls	r0, r0, #4
 8028732:	ebc3 1707 	rsb	r7, r3, r7, lsl #4
 8028736:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 802873a:	1ac0      	subs	r0, r0, r3
 802873c:	b2bf      	uxth	r7, r7
 802873e:	b280      	uxth	r0, r0
 8028740:	1bc9      	subs	r1, r1, r7
 8028742:	fa1f fa81 	uxth.w	sl, r1
 8028746:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8028748:	4348      	muls	r0, r1
 802874a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 802874c:	fb02 020a 	mla	r2, r2, sl, r0
 8028750:	fb07 2701 	mla	r7, r7, r1, r2
 8028754:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8028756:	fb03 7302 	mla	r3, r3, r2, r7
 802875a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802875e:	b393      	cbz	r3, 80287c6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8028760:	4a2a      	ldr	r2, [pc, #168]	; (802880c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 8028762:	2bff      	cmp	r3, #255	; 0xff
 8028764:	6811      	ldr	r1, [r2, #0]
 8028766:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 802876a:	f3c1 2707 	ubfx	r7, r1, #8, #8
 802876e:	b2c9      	uxtb	r1, r1
 8028770:	d042      	beq.n	80287f8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 8028772:	b298      	uxth	r0, r3
 8028774:	43db      	mvns	r3, r3
 8028776:	f81c 2c03 	ldrb.w	r2, [ip, #-3]
 802877a:	fb11 f100 	smulbb	r1, r1, r0
 802877e:	b2db      	uxtb	r3, r3
 8028780:	fb17 f700 	smulbb	r7, r7, r0
 8028784:	fb02 1103 	mla	r1, r2, r3, r1
 8028788:	fb1a f000 	smulbb	r0, sl, r0
 802878c:	b289      	uxth	r1, r1
 802878e:	1c4a      	adds	r2, r1, #1
 8028790:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8028794:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 8028798:	fb02 7703 	mla	r7, r2, r3, r7
 802879c:	1209      	asrs	r1, r1, #8
 802879e:	b2bf      	uxth	r7, r7
 80287a0:	f80c 1c03 	strb.w	r1, [ip, #-3]
 80287a4:	1c7a      	adds	r2, r7, #1
 80287a6:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 80287aa:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
 80287ae:	fb02 0303 	mla	r3, r2, r3, r0
 80287b2:	123f      	asrs	r7, r7, #8
 80287b4:	b29b      	uxth	r3, r3
 80287b6:	f80c 7c02 	strb.w	r7, [ip, #-2]
 80287ba:	1c5a      	adds	r2, r3, #1
 80287bc:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80287c0:	121b      	asrs	r3, r3, #8
 80287c2:	f80c 3c01 	strb.w	r3, [ip, #-1]
 80287c6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80287c8:	f10c 0c03 	add.w	ip, ip, #3
 80287cc:	f10e 3eff 	add.w	lr, lr, #4294967295
 80287d0:	441d      	add	r5, r3
 80287d2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80287d4:	441e      	add	r6, r3
 80287d6:	e6e7      	b.n	80285a8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 80287d8:	2f00      	cmp	r7, #0
 80287da:	d0a5      	beq.n	8028728 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 80287dc:	444b      	add	r3, r9
 80287de:	0859      	lsrs	r1, r3, #1
 80287e0:	07db      	lsls	r3, r3, #31
 80287e2:	f818 1001 	ldrb.w	r1, [r8, r1]
 80287e6:	bf54      	ite	pl
 80287e8:	f001 010f 	andpl.w	r1, r1, #15
 80287ec:	1109      	asrmi	r1, r1, #4
 80287ee:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80287f2:	b2c9      	uxtb	r1, r1
 80287f4:	910b      	str	r1, [sp, #44]	; 0x2c
 80287f6:	e797      	b.n	8028728 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 80287f8:	f80c 1c03 	strb.w	r1, [ip, #-3]
 80287fc:	f80c 7c02 	strb.w	r7, [ip, #-2]
 8028800:	f80c ac01 	strb.w	sl, [ip, #-1]
 8028804:	e7df      	b.n	80287c6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8028806:	b013      	add	sp, #76	; 0x4c
 8028808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802880c:	24006ff4 	.word	0x24006ff4

08028810 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>:
 8028810:	b530      	push	{r4, r5, lr}
 8028812:	b29d      	uxth	r5, r3
 8028814:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8028818:	780c      	ldrb	r4, [r1, #0]
 802881a:	b298      	uxth	r0, r3
 802881c:	7813      	ldrb	r3, [r2, #0]
 802881e:	fb14 f405 	smulbb	r4, r4, r5
 8028822:	fb13 f300 	smulbb	r3, r3, r0
 8028826:	441c      	add	r4, r3
 8028828:	b2a4      	uxth	r4, r4
 802882a:	1c63      	adds	r3, r4, #1
 802882c:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8028830:	7853      	ldrb	r3, [r2, #1]
 8028832:	fb13 f300 	smulbb	r3, r3, r0
 8028836:	1224      	asrs	r4, r4, #8
 8028838:	7014      	strb	r4, [r2, #0]
 802883a:	784c      	ldrb	r4, [r1, #1]
 802883c:	fb14 f405 	smulbb	r4, r4, r5
 8028840:	441c      	add	r4, r3
 8028842:	b2a4      	uxth	r4, r4
 8028844:	1c63      	adds	r3, r4, #1
 8028846:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 802884a:	1224      	asrs	r4, r4, #8
 802884c:	7054      	strb	r4, [r2, #1]
 802884e:	788b      	ldrb	r3, [r1, #2]
 8028850:	7891      	ldrb	r1, [r2, #2]
 8028852:	fb13 f305 	smulbb	r3, r3, r5
 8028856:	fb11 f000 	smulbb	r0, r1, r0
 802885a:	4403      	add	r3, r0
 802885c:	b29b      	uxth	r3, r3
 802885e:	1c59      	adds	r1, r3, #1
 8028860:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8028864:	121b      	asrs	r3, r3, #8
 8028866:	7093      	strb	r3, [r2, #2]
 8028868:	bd30      	pop	{r4, r5, pc}
	...

0802886c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 802886c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028870:	461c      	mov	r4, r3
 8028872:	b08b      	sub	sp, #44	; 0x2c
 8028874:	460e      	mov	r6, r1
 8028876:	4615      	mov	r5, r2
 8028878:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802887a:	4682      	mov	sl, r0
 802887c:	6861      	ldr	r1, [r4, #4]
 802887e:	aa06      	add	r2, sp, #24
 8028880:	6820      	ldr	r0, [r4, #0]
 8028882:	2702      	movs	r7, #2
 8028884:	f89d 9054 	ldrb.w	r9, [sp, #84]	; 0x54
 8028888:	3504      	adds	r5, #4
 802888a:	c203      	stmia	r2!, {r0, r1}
 802888c:	6818      	ldr	r0, [r3, #0]
 802888e:	aa08      	add	r2, sp, #32
 8028890:	6859      	ldr	r1, [r3, #4]
 8028892:	c203      	stmia	r2!, {r0, r1}
 8028894:	a806      	add	r0, sp, #24
 8028896:	f7f4 f9e9 	bl	801cc6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802889a:	4621      	mov	r1, r4
 802889c:	a808      	add	r0, sp, #32
 802889e:	f7f4 fa0d 	bl	801ccbc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80288a2:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80288a6:	f9bd b026 	ldrsh.w	fp, [sp, #38]	; 0x26
 80288aa:	f002 0301 	and.w	r3, r2, #1
 80288ae:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 80288b2:	9302      	str	r3, [sp, #8]
 80288b4:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80288b8:	f003 0101 	and.w	r1, r3, #1
 80288bc:	9101      	str	r1, [sp, #4]
 80288be:	9801      	ldr	r0, [sp, #4]
 80288c0:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 80288c4:	4403      	add	r3, r0
 80288c6:	fb01 2303 	mla	r3, r1, r3, r2
 80288ca:	fb93 f3f7 	sdiv	r3, r3, r7
 80288ce:	441e      	add	r6, r3
 80288d0:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 80288d4:	441a      	add	r2, r3
 80288d6:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 80288da:	4419      	add	r1, r3
 80288dc:	4b70      	ldr	r3, [pc, #448]	; (8028aa0 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x234>)
 80288de:	f8ad 2020 	strh.w	r2, [sp, #32]
 80288e2:	6818      	ldr	r0, [r3, #0]
 80288e4:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
 80288e8:	6803      	ldr	r3, [r0, #0]
 80288ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80288ec:	4798      	blx	r3
 80288ee:	4a6d      	ldr	r2, [pc, #436]	; (8028aa4 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>)
 80288f0:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 80288f4:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80288f8:	8813      	ldrh	r3, [r2, #0]
 80288fa:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 80288fe:	fb03 1404 	mla	r4, r3, r4, r1
 8028902:	4611      	mov	r1, r2
 8028904:	fb0b f303 	mul.w	r3, fp, r3
 8028908:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802890c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8028910:	4404      	add	r4, r0
 8028912:	4423      	add	r3, r4
 8028914:	d073      	beq.n	80289fe <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x192>
 8028916:	9705      	str	r7, [sp, #20]
 8028918:	e9cd 3203 	strd	r3, r2, [sp, #12]
 802891c:	9b03      	ldr	r3, [sp, #12]
 802891e:	429c      	cmp	r4, r3
 8028920:	f080 80b5 	bcs.w	8028a8e <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x222>
 8028924:	9b02      	ldr	r3, [sp, #8]
 8028926:	b35b      	cbz	r3, 8028980 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x114>
 8028928:	7831      	ldrb	r1, [r6, #0]
 802892a:	4622      	mov	r2, r4
 802892c:	1c77      	adds	r7, r6, #1
 802892e:	3403      	adds	r4, #3
 8028930:	f001 010f 	and.w	r1, r1, #15
 8028934:	f108 3bff 	add.w	fp, r8, #4294967295
 8028938:	464b      	mov	r3, r9
 802893a:	4650      	mov	r0, sl
 802893c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8028940:	4429      	add	r1, r5
 8028942:	f7ff ff65 	bl	8028810 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 8028946:	f1bb 0f01 	cmp.w	fp, #1
 802894a:	dd1c      	ble.n	8028986 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11a>
 802894c:	7839      	ldrb	r1, [r7, #0]
 802894e:	4622      	mov	r2, r4
 8028950:	464b      	mov	r3, r9
 8028952:	4650      	mov	r0, sl
 8028954:	0909      	lsrs	r1, r1, #4
 8028956:	f1ab 0b02 	sub.w	fp, fp, #2
 802895a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802895e:	4429      	add	r1, r5
 8028960:	f7ff ff56 	bl	8028810 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 8028964:	f817 1b01 	ldrb.w	r1, [r7], #1
 8028968:	1ce2      	adds	r2, r4, #3
 802896a:	464b      	mov	r3, r9
 802896c:	f001 010f 	and.w	r1, r1, #15
 8028970:	4650      	mov	r0, sl
 8028972:	3406      	adds	r4, #6
 8028974:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8028978:	4429      	add	r1, r5
 802897a:	f7ff ff49 	bl	8028810 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 802897e:	e7e2      	b.n	8028946 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xda>
 8028980:	4637      	mov	r7, r6
 8028982:	46c3      	mov	fp, r8
 8028984:	e7df      	b.n	8028946 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xda>
 8028986:	d10a      	bne.n	802899e <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x132>
 8028988:	7839      	ldrb	r1, [r7, #0]
 802898a:	4622      	mov	r2, r4
 802898c:	3403      	adds	r4, #3
 802898e:	464b      	mov	r3, r9
 8028990:	0909      	lsrs	r1, r1, #4
 8028992:	4650      	mov	r0, sl
 8028994:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8028998:	4429      	add	r1, r5
 802899a:	f7ff ff39 	bl	8028810 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 802899e:	9b04      	ldr	r3, [sp, #16]
 80289a0:	9a01      	ldr	r2, [sp, #4]
 80289a2:	881b      	ldrh	r3, [r3, #0]
 80289a4:	eba3 0308 	sub.w	r3, r3, r8
 80289a8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80289ac:	441c      	add	r4, r3
 80289ae:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80289b2:	4413      	add	r3, r2
 80289b4:	9a05      	ldr	r2, [sp, #20]
 80289b6:	fb93 f3f2 	sdiv	r3, r3, r2
 80289ba:	441e      	add	r6, r3
 80289bc:	e7ae      	b.n	802891c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xb0>
 80289be:	4632      	mov	r2, r6
 80289c0:	46c4      	mov	ip, r8
 80289c2:	e037      	b.n	8028a34 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1c8>
 80289c4:	d10e      	bne.n	80289e4 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x178>
 80289c6:	7812      	ldrb	r2, [r2, #0]
 80289c8:	3003      	adds	r0, #3
 80289ca:	0912      	lsrs	r2, r2, #4
 80289cc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80289d0:	18ac      	adds	r4, r5, r2
 80289d2:	5caa      	ldrb	r2, [r5, r2]
 80289d4:	f800 2c03 	strb.w	r2, [r0, #-3]
 80289d8:	7862      	ldrb	r2, [r4, #1]
 80289da:	f800 2c02 	strb.w	r2, [r0, #-2]
 80289de:	78a2      	ldrb	r2, [r4, #2]
 80289e0:	f800 2c01 	strb.w	r2, [r0, #-1]
 80289e4:	880c      	ldrh	r4, [r1, #0]
 80289e6:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 80289ea:	eba4 0408 	sub.w	r4, r4, r8
 80289ee:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80289f2:	4404      	add	r4, r0
 80289f4:	9801      	ldr	r0, [sp, #4]
 80289f6:	4402      	add	r2, r0
 80289f8:	fb92 f2f7 	sdiv	r2, r2, r7
 80289fc:	4416      	add	r6, r2
 80289fe:	429c      	cmp	r4, r3
 8028a00:	d245      	bcs.n	8028a8e <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x222>
 8028a02:	9a02      	ldr	r2, [sp, #8]
 8028a04:	2a00      	cmp	r2, #0
 8028a06:	d0da      	beq.n	80289be <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x152>
 8028a08:	7830      	ldrb	r0, [r6, #0]
 8028a0a:	1c72      	adds	r2, r6, #1
 8028a0c:	3403      	adds	r4, #3
 8028a0e:	f000 000f 	and.w	r0, r0, #15
 8028a12:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8028a16:	eb05 0c00 	add.w	ip, r5, r0
 8028a1a:	5c28      	ldrb	r0, [r5, r0]
 8028a1c:	f804 0c03 	strb.w	r0, [r4, #-3]
 8028a20:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8028a24:	f804 0c02 	strb.w	r0, [r4, #-2]
 8028a28:	f89c 0002 	ldrb.w	r0, [ip, #2]
 8028a2c:	f108 3cff 	add.w	ip, r8, #4294967295
 8028a30:	f804 0c01 	strb.w	r0, [r4, #-1]
 8028a34:	f1bc 0f01 	cmp.w	ip, #1
 8028a38:	4620      	mov	r0, r4
 8028a3a:	f104 0406 	add.w	r4, r4, #6
 8028a3e:	ddc1      	ble.n	80289c4 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x158>
 8028a40:	7810      	ldrb	r0, [r2, #0]
 8028a42:	f1ac 0c02 	sub.w	ip, ip, #2
 8028a46:	0900      	lsrs	r0, r0, #4
 8028a48:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8028a4c:	eb05 0e00 	add.w	lr, r5, r0
 8028a50:	5c28      	ldrb	r0, [r5, r0]
 8028a52:	f804 0c06 	strb.w	r0, [r4, #-6]
 8028a56:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8028a5a:	f804 0c05 	strb.w	r0, [r4, #-5]
 8028a5e:	f89e 0002 	ldrb.w	r0, [lr, #2]
 8028a62:	f804 0c04 	strb.w	r0, [r4, #-4]
 8028a66:	f812 0b01 	ldrb.w	r0, [r2], #1
 8028a6a:	f000 000f 	and.w	r0, r0, #15
 8028a6e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8028a72:	eb05 0e00 	add.w	lr, r5, r0
 8028a76:	5c28      	ldrb	r0, [r5, r0]
 8028a78:	f804 0c03 	strb.w	r0, [r4, #-3]
 8028a7c:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8028a80:	f804 0c02 	strb.w	r0, [r4, #-2]
 8028a84:	f89e 0002 	ldrb.w	r0, [lr, #2]
 8028a88:	f804 0c01 	strb.w	r0, [r4, #-1]
 8028a8c:	e7d2      	b.n	8028a34 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1c8>
 8028a8e:	4b04      	ldr	r3, [pc, #16]	; (8028aa0 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x234>)
 8028a90:	6818      	ldr	r0, [r3, #0]
 8028a92:	6803      	ldr	r3, [r0, #0]
 8028a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028a96:	4798      	blx	r3
 8028a98:	b00b      	add	sp, #44	; 0x2c
 8028a9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028a9e:	bf00      	nop
 8028aa0:	24006fec 	.word	0x24006fec
 8028aa4:	24006fe6 	.word	0x24006fe6

08028aa8 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>:
 8028aa8:	b530      	push	{r4, r5, lr}
 8028aaa:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8028aae:	780d      	ldrb	r5, [r1, #0]
 8028ab0:	28ff      	cmp	r0, #255	; 0xff
 8028ab2:	d107      	bne.n	8028ac4 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x1c>
 8028ab4:	2bff      	cmp	r3, #255	; 0xff
 8028ab6:	d105      	bne.n	8028ac4 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x1c>
 8028ab8:	7015      	strb	r5, [r2, #0]
 8028aba:	784b      	ldrb	r3, [r1, #1]
 8028abc:	7053      	strb	r3, [r2, #1]
 8028abe:	788b      	ldrb	r3, [r1, #2]
 8028ac0:	7093      	strb	r3, [r2, #2]
 8028ac2:	bd30      	pop	{r4, r5, pc}
 8028ac4:	fb10 f003 	smulbb	r0, r0, r3
 8028ac8:	b283      	uxth	r3, r0
 8028aca:	1c58      	adds	r0, r3, #1
 8028acc:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8028ad0:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8028ad4:	b284      	uxth	r4, r0
 8028ad6:	43c0      	mvns	r0, r0
 8028ad8:	fb15 f504 	smulbb	r5, r5, r4
 8028adc:	b2c3      	uxtb	r3, r0
 8028ade:	7810      	ldrb	r0, [r2, #0]
 8028ae0:	fb00 5003 	mla	r0, r0, r3, r5
 8028ae4:	b280      	uxth	r0, r0
 8028ae6:	1c45      	adds	r5, r0, #1
 8028ae8:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8028aec:	7855      	ldrb	r5, [r2, #1]
 8028aee:	fb15 f503 	smulbb	r5, r5, r3
 8028af2:	1200      	asrs	r0, r0, #8
 8028af4:	7010      	strb	r0, [r2, #0]
 8028af6:	7848      	ldrb	r0, [r1, #1]
 8028af8:	fb00 5004 	mla	r0, r0, r4, r5
 8028afc:	b280      	uxth	r0, r0
 8028afe:	1c45      	adds	r5, r0, #1
 8028b00:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8028b04:	1200      	asrs	r0, r0, #8
 8028b06:	7050      	strb	r0, [r2, #1]
 8028b08:	7888      	ldrb	r0, [r1, #2]
 8028b0a:	7891      	ldrb	r1, [r2, #2]
 8028b0c:	fb11 f303 	smulbb	r3, r1, r3
 8028b10:	fb00 3304 	mla	r3, r0, r4, r3
 8028b14:	b29b      	uxth	r3, r3
 8028b16:	1c59      	adds	r1, r3, #1
 8028b18:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8028b1c:	121b      	asrs	r3, r3, #8
 8028b1e:	e7cf      	b.n	8028ac0 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x18>

08028b20 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 8028b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028b24:	461d      	mov	r5, r3
 8028b26:	b08f      	sub	sp, #60	; 0x3c
 8028b28:	460c      	mov	r4, r1
 8028b2a:	4616      	mov	r6, r2
 8028b2c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8028b2e:	4680      	mov	r8, r0
 8028b30:	6869      	ldr	r1, [r5, #4]
 8028b32:	aa0a      	add	r2, sp, #40	; 0x28
 8028b34:	6828      	ldr	r0, [r5, #0]
 8028b36:	3604      	adds	r6, #4
 8028b38:	f89d 9064 	ldrb.w	r9, [sp, #100]	; 0x64
 8028b3c:	4f57      	ldr	r7, [pc, #348]	; (8028c9c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x17c>)
 8028b3e:	c203      	stmia	r2!, {r0, r1}
 8028b40:	6818      	ldr	r0, [r3, #0]
 8028b42:	aa0c      	add	r2, sp, #48	; 0x30
 8028b44:	6859      	ldr	r1, [r3, #4]
 8028b46:	c203      	stmia	r2!, {r0, r1}
 8028b48:	a80a      	add	r0, sp, #40	; 0x28
 8028b4a:	f7f4 f88f 	bl	801cc6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8028b4e:	4629      	mov	r1, r5
 8028b50:	a80c      	add	r0, sp, #48	; 0x30
 8028b52:	2502      	movs	r5, #2
 8028b54:	f7f4 f8b2 	bl	801ccbc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8028b58:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 8028b5c:	f9bd a036 	ldrsh.w	sl, [sp, #54]	; 0x36
 8028b60:	f002 0301 	and.w	r3, r2, #1
 8028b64:	f9bd b034 	ldrsh.w	fp, [sp, #52]	; 0x34
 8028b68:	9304      	str	r3, [sp, #16]
 8028b6a:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 8028b6e:	f003 0101 	and.w	r1, r3, #1
 8028b72:	9103      	str	r1, [sp, #12]
 8028b74:	9803      	ldr	r0, [sp, #12]
 8028b76:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	; 0x32
 8028b7a:	4403      	add	r3, r0
 8028b7c:	6838      	ldr	r0, [r7, #0]
 8028b7e:	fb01 2303 	mla	r3, r1, r3, r2
 8028b82:	fb93 f3f5 	sdiv	r3, r3, r5
 8028b86:	18e5      	adds	r5, r4, r3
 8028b88:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8028b8c:	441a      	add	r2, r3
 8028b8e:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8028b92:	4419      	add	r1, r3
 8028b94:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8028b98:	f8ad 1032 	strh.w	r1, [sp, #50]	; 0x32
 8028b9c:	6803      	ldr	r3, [r0, #0]
 8028b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8028ba0:	4798      	blx	r3
 8028ba2:	4a3f      	ldr	r2, [pc, #252]	; (8028ca0 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x180>)
 8028ba4:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	; 0x32
 8028ba8:	8813      	ldrh	r3, [r2, #0]
 8028baa:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 8028bae:	9207      	str	r2, [sp, #28]
 8028bb0:	fb03 1404 	mla	r4, r3, r4, r1
 8028bb4:	fb0a f303 	mul.w	r3, sl, r3
 8028bb8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8028bbc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8028bc0:	4404      	add	r4, r0
 8028bc2:	18e3      	adds	r3, r4, r3
 8028bc4:	e9cd 3705 	strd	r3, r7, [sp, #20]
 8028bc8:	9b05      	ldr	r3, [sp, #20]
 8028bca:	429c      	cmp	r4, r3
 8028bcc:	d25d      	bcs.n	8028c8a <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x16a>
 8028bce:	9b04      	ldr	r3, [sp, #16]
 8028bd0:	2b00      	cmp	r3, #0
 8028bd2:	d037      	beq.n	8028c44 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x124>
 8028bd4:	782b      	ldrb	r3, [r5, #0]
 8028bd6:	1c6f      	adds	r7, r5, #1
 8028bd8:	f003 030f 	and.w	r3, r3, #15
 8028bdc:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8028be0:	9309      	str	r3, [sp, #36]	; 0x24
 8028be2:	0e1b      	lsrs	r3, r3, #24
 8028be4:	d006      	beq.n	8028bf4 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd4>
 8028be6:	9300      	str	r3, [sp, #0]
 8028be8:	4622      	mov	r2, r4
 8028bea:	464b      	mov	r3, r9
 8028bec:	a909      	add	r1, sp, #36	; 0x24
 8028bee:	4640      	mov	r0, r8
 8028bf0:	f7ff ff5a 	bl	8028aa8 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 8028bf4:	3403      	adds	r4, #3
 8028bf6:	f10b 3aff 	add.w	sl, fp, #4294967295
 8028bfa:	f1ba 0f01 	cmp.w	sl, #1
 8028bfe:	dd24      	ble.n	8028c4a <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12a>
 8028c00:	783b      	ldrb	r3, [r7, #0]
 8028c02:	091b      	lsrs	r3, r3, #4
 8028c04:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8028c08:	9308      	str	r3, [sp, #32]
 8028c0a:	0e1b      	lsrs	r3, r3, #24
 8028c0c:	d006      	beq.n	8028c1c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xfc>
 8028c0e:	9300      	str	r3, [sp, #0]
 8028c10:	4622      	mov	r2, r4
 8028c12:	464b      	mov	r3, r9
 8028c14:	a908      	add	r1, sp, #32
 8028c16:	4640      	mov	r0, r8
 8028c18:	f7ff ff46 	bl	8028aa8 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 8028c1c:	f817 3b01 	ldrb.w	r3, [r7], #1
 8028c20:	f003 030f 	and.w	r3, r3, #15
 8028c24:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8028c28:	9309      	str	r3, [sp, #36]	; 0x24
 8028c2a:	0e1b      	lsrs	r3, r3, #24
 8028c2c:	d006      	beq.n	8028c3c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x11c>
 8028c2e:	9300      	str	r3, [sp, #0]
 8028c30:	1ce2      	adds	r2, r4, #3
 8028c32:	464b      	mov	r3, r9
 8028c34:	a909      	add	r1, sp, #36	; 0x24
 8028c36:	4640      	mov	r0, r8
 8028c38:	f7ff ff36 	bl	8028aa8 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 8028c3c:	3406      	adds	r4, #6
 8028c3e:	f1aa 0a02 	sub.w	sl, sl, #2
 8028c42:	e7da      	b.n	8028bfa <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xda>
 8028c44:	462f      	mov	r7, r5
 8028c46:	46da      	mov	sl, fp
 8028c48:	e7d7      	b.n	8028bfa <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xda>
 8028c4a:	d10e      	bne.n	8028c6a <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x14a>
 8028c4c:	783b      	ldrb	r3, [r7, #0]
 8028c4e:	091b      	lsrs	r3, r3, #4
 8028c50:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8028c54:	9309      	str	r3, [sp, #36]	; 0x24
 8028c56:	0e1b      	lsrs	r3, r3, #24
 8028c58:	d006      	beq.n	8028c68 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x148>
 8028c5a:	9300      	str	r3, [sp, #0]
 8028c5c:	4622      	mov	r2, r4
 8028c5e:	464b      	mov	r3, r9
 8028c60:	a909      	add	r1, sp, #36	; 0x24
 8028c62:	4640      	mov	r0, r8
 8028c64:	f7ff ff20 	bl	8028aa8 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 8028c68:	3403      	adds	r4, #3
 8028c6a:	9b07      	ldr	r3, [sp, #28]
 8028c6c:	9a03      	ldr	r2, [sp, #12]
 8028c6e:	881b      	ldrh	r3, [r3, #0]
 8028c70:	eba3 030b 	sub.w	r3, r3, fp
 8028c74:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8028c78:	441c      	add	r4, r3
 8028c7a:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 8028c7e:	4413      	add	r3, r2
 8028c80:	2202      	movs	r2, #2
 8028c82:	fb93 f3f2 	sdiv	r3, r3, r2
 8028c86:	441d      	add	r5, r3
 8028c88:	e79e      	b.n	8028bc8 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xa8>
 8028c8a:	9b06      	ldr	r3, [sp, #24]
 8028c8c:	6818      	ldr	r0, [r3, #0]
 8028c8e:	6803      	ldr	r3, [r0, #0]
 8028c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028c92:	4798      	blx	r3
 8028c94:	b00f      	add	sp, #60	; 0x3c
 8028c96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028c9a:	bf00      	nop
 8028c9c:	24006fec 	.word	0x24006fec
 8028ca0:	24006fe6 	.word	0x24006fe6

08028ca4 <CRC_Lock>:
 8028ca4:	4a20      	ldr	r2, [pc, #128]	; (8028d28 <CRC_Lock+0x84>)
 8028ca6:	b530      	push	{r4, r5, lr}
 8028ca8:	6813      	ldr	r3, [r2, #0]
 8028caa:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8028cae:	f24c 2540 	movw	r5, #49728	; 0xc240
 8028cb2:	f023 0301 	bic.w	r3, r3, #1
 8028cb6:	6013      	str	r3, [r2, #0]
 8028cb8:	4b1c      	ldr	r3, [pc, #112]	; (8028d2c <CRC_Lock+0x88>)
 8028cba:	681a      	ldr	r2, [r3, #0]
 8028cbc:	4022      	ands	r2, r4
 8028cbe:	42aa      	cmp	r2, r5
 8028cc0:	d005      	beq.n	8028cce <CRC_Lock+0x2a>
 8028cc2:	681b      	ldr	r3, [r3, #0]
 8028cc4:	f24c 2270 	movw	r2, #49776	; 0xc270
 8028cc8:	4023      	ands	r3, r4
 8028cca:	4293      	cmp	r3, r2
 8028ccc:	d124      	bne.n	8028d18 <CRC_Lock+0x74>
 8028cce:	4b18      	ldr	r3, [pc, #96]	; (8028d30 <CRC_Lock+0x8c>)
 8028cd0:	681b      	ldr	r3, [r3, #0]
 8028cd2:	bb0b      	cbnz	r3, 8028d18 <CRC_Lock+0x74>
 8028cd4:	4b17      	ldr	r3, [pc, #92]	; (8028d34 <CRC_Lock+0x90>)
 8028cd6:	681a      	ldr	r2, [r3, #0]
 8028cd8:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8028cdc:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8028ce0:	d00d      	beq.n	8028cfe <CRC_Lock+0x5a>
 8028ce2:	681a      	ldr	r2, [r3, #0]
 8028ce4:	f240 4483 	movw	r4, #1155	; 0x483
 8028ce8:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8028cec:	42a2      	cmp	r2, r4
 8028cee:	d006      	beq.n	8028cfe <CRC_Lock+0x5a>
 8028cf0:	681b      	ldr	r3, [r3, #0]
 8028cf2:	f240 4285 	movw	r2, #1157	; 0x485
 8028cf6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8028cfa:	4293      	cmp	r3, r2
 8028cfc:	d10c      	bne.n	8028d18 <CRC_Lock+0x74>
 8028cfe:	4b0e      	ldr	r3, [pc, #56]	; (8028d38 <CRC_Lock+0x94>)
 8028d00:	2201      	movs	r2, #1
 8028d02:	601a      	str	r2, [r3, #0]
 8028d04:	681a      	ldr	r2, [r3, #0]
 8028d06:	2a00      	cmp	r2, #0
 8028d08:	d1fc      	bne.n	8028d04 <CRC_Lock+0x60>
 8028d0a:	4b0c      	ldr	r3, [pc, #48]	; (8028d3c <CRC_Lock+0x98>)
 8028d0c:	6018      	str	r0, [r3, #0]
 8028d0e:	6818      	ldr	r0, [r3, #0]
 8028d10:	1a43      	subs	r3, r0, r1
 8028d12:	4258      	negs	r0, r3
 8028d14:	4158      	adcs	r0, r3
 8028d16:	bd30      	pop	{r4, r5, pc}
 8028d18:	4b09      	ldr	r3, [pc, #36]	; (8028d40 <CRC_Lock+0x9c>)
 8028d1a:	2201      	movs	r2, #1
 8028d1c:	601a      	str	r2, [r3, #0]
 8028d1e:	681a      	ldr	r2, [r3, #0]
 8028d20:	2a00      	cmp	r2, #0
 8028d22:	d1fc      	bne.n	8028d1e <CRC_Lock+0x7a>
 8028d24:	4b07      	ldr	r3, [pc, #28]	; (8028d44 <CRC_Lock+0xa0>)
 8028d26:	e7f1      	b.n	8028d0c <CRC_Lock+0x68>
 8028d28:	e0002000 	.word	0xe0002000
 8028d2c:	e000ed00 	.word	0xe000ed00
 8028d30:	e0042000 	.word	0xe0042000
 8028d34:	5c001000 	.word	0x5c001000
 8028d38:	58024c08 	.word	0x58024c08
 8028d3c:	58024c00 	.word	0x58024c00
 8028d40:	40023008 	.word	0x40023008
 8028d44:	40023000 	.word	0x40023000

08028d48 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8028d48:	6101      	str	r1, [r0, #16]
 8028d4a:	4770      	bx	lr

08028d4c <_ZN8touchgfx8Gestures4tickEv>:
 8028d4c:	7b83      	ldrb	r3, [r0, #14]
 8028d4e:	b14b      	cbz	r3, 8028d64 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8028d50:	8903      	ldrh	r3, [r0, #8]
 8028d52:	3301      	adds	r3, #1
 8028d54:	b29b      	uxth	r3, r3
 8028d56:	2b07      	cmp	r3, #7
 8028d58:	8103      	strh	r3, [r0, #8]
 8028d5a:	bf81      	itttt	hi
 8028d5c:	2300      	movhi	r3, #0
 8028d5e:	8143      	strhhi	r3, [r0, #10]
 8028d60:	8183      	strhhi	r3, [r0, #12]
 8028d62:	7383      	strbhi	r3, [r0, #14]
 8028d64:	4770      	bx	lr
	...

08028d68 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8028d68:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8028d6c:	4698      	mov	r8, r3
 8028d6e:	8883      	ldrh	r3, [r0, #4]
 8028d70:	4604      	mov	r4, r0
 8028d72:	4617      	mov	r7, r2
 8028d74:	f8ad 3006 	strh.w	r3, [sp, #6]
 8028d78:	eba8 0303 	sub.w	r3, r8, r3
 8028d7c:	4a19      	ldr	r2, [pc, #100]	; (8028de4 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 8028d7e:	460e      	mov	r6, r1
 8028d80:	b21b      	sxth	r3, r3
 8028d82:	88c1      	ldrh	r1, [r0, #6]
 8028d84:	9200      	str	r2, [sp, #0]
 8028d86:	2000      	movs	r0, #0
 8028d88:	2b00      	cmp	r3, #0
 8028d8a:	8aa2      	ldrh	r2, [r4, #20]
 8028d8c:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 8028d90:	bfb8      	it	lt
 8028d92:	425b      	neglt	r3, r3
 8028d94:	f88d 0004 	strb.w	r0, [sp, #4]
 8028d98:	f8ad 1008 	strh.w	r1, [sp, #8]
 8028d9c:	b21b      	sxth	r3, r3
 8028d9e:	f8ad 800a 	strh.w	r8, [sp, #10]
 8028da2:	f8ad 500c 	strh.w	r5, [sp, #12]
 8028da6:	4293      	cmp	r3, r2
 8028da8:	dc07      	bgt.n	8028dba <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 8028daa:	1a69      	subs	r1, r5, r1
 8028dac:	b209      	sxth	r1, r1
 8028dae:	2900      	cmp	r1, #0
 8028db0:	bfb8      	it	lt
 8028db2:	4249      	neglt	r1, r1
 8028db4:	b209      	sxth	r1, r1
 8028db6:	428a      	cmp	r2, r1
 8028db8:	da10      	bge.n	8028ddc <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 8028dba:	6920      	ldr	r0, [r4, #16]
 8028dbc:	4669      	mov	r1, sp
 8028dbe:	eba8 0606 	sub.w	r6, r8, r6
 8028dc2:	1bef      	subs	r7, r5, r7
 8028dc4:	6803      	ldr	r3, [r0, #0]
 8028dc6:	685b      	ldr	r3, [r3, #4]
 8028dc8:	4798      	blx	r3
 8028dca:	2300      	movs	r3, #0
 8028dcc:	2001      	movs	r0, #1
 8028dce:	8166      	strh	r6, [r4, #10]
 8028dd0:	8123      	strh	r3, [r4, #8]
 8028dd2:	81a7      	strh	r7, [r4, #12]
 8028dd4:	f8a4 8004 	strh.w	r8, [r4, #4]
 8028dd8:	80e5      	strh	r5, [r4, #6]
 8028dda:	73a0      	strb	r0, [r4, #14]
 8028ddc:	b004      	add	sp, #16
 8028dde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028de2:	bf00      	nop
 8028de4:	0802be80 	.word	0x0802be80

08028de8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8028de8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028dea:	461e      	mov	r6, r3
 8028dec:	1e4b      	subs	r3, r1, #1
 8028dee:	b085      	sub	sp, #20
 8028df0:	4604      	mov	r4, r0
 8028df2:	2b01      	cmp	r3, #1
 8028df4:	460d      	mov	r5, r1
 8028df6:	4617      	mov	r7, r2
 8028df8:	d84b      	bhi.n	8028e92 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8028dfa:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8028dfe:	1cd3      	adds	r3, r2, #3
 8028e00:	b29b      	uxth	r3, r3
 8028e02:	2b06      	cmp	r3, #6
 8028e04:	d916      	bls.n	8028e34 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8028e06:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 8028ea8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8028e0a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8028e0e:	f8cd c004 	str.w	ip, [sp, #4]
 8028e12:	f04f 0c00 	mov.w	ip, #0
 8028e16:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8028e1a:	6900      	ldr	r0, [r0, #16]
 8028e1c:	f8ad 100c 	strh.w	r1, [sp, #12]
 8028e20:	a901      	add	r1, sp, #4
 8028e22:	f88d c008 	strb.w	ip, [sp, #8]
 8028e26:	f8ad 200a 	strh.w	r2, [sp, #10]
 8028e2a:	f8ad 300e 	strh.w	r3, [sp, #14]
 8028e2e:	6803      	ldr	r3, [r0, #0]
 8028e30:	689b      	ldr	r3, [r3, #8]
 8028e32:	4798      	blx	r3
 8028e34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8028e38:	1cd3      	adds	r3, r2, #3
 8028e3a:	b29b      	uxth	r3, r3
 8028e3c:	2b06      	cmp	r3, #6
 8028e3e:	d916      	bls.n	8028e6e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8028e40:	f8df c064 	ldr.w	ip, [pc, #100]	; 8028ea8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8028e44:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8028e48:	f8cd c004 	str.w	ip, [sp, #4]
 8028e4c:	f04f 0c01 	mov.w	ip, #1
 8028e50:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8028e54:	6920      	ldr	r0, [r4, #16]
 8028e56:	f8ad 100c 	strh.w	r1, [sp, #12]
 8028e5a:	a901      	add	r1, sp, #4
 8028e5c:	f88d c008 	strb.w	ip, [sp, #8]
 8028e60:	f8ad 200a 	strh.w	r2, [sp, #10]
 8028e64:	f8ad 300e 	strh.w	r3, [sp, #14]
 8028e68:	6803      	ldr	r3, [r0, #0]
 8028e6a:	689b      	ldr	r3, [r3, #8]
 8028e6c:	4798      	blx	r3
 8028e6e:	4b0d      	ldr	r3, [pc, #52]	; (8028ea4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 8028e70:	a901      	add	r1, sp, #4
 8028e72:	6920      	ldr	r0, [r4, #16]
 8028e74:	9301      	str	r3, [sp, #4]
 8028e76:	2300      	movs	r3, #0
 8028e78:	f88d 5008 	strb.w	r5, [sp, #8]
 8028e7c:	f8ad 700a 	strh.w	r7, [sp, #10]
 8028e80:	f8ad 600c 	strh.w	r6, [sp, #12]
 8028e84:	f8ad 300e 	strh.w	r3, [sp, #14]
 8028e88:	6803      	ldr	r3, [r0, #0]
 8028e8a:	681b      	ldr	r3, [r3, #0]
 8028e8c:	4798      	blx	r3
 8028e8e:	b005      	add	sp, #20
 8028e90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028e92:	2900      	cmp	r1, #0
 8028e94:	d1eb      	bne.n	8028e6e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8028e96:	80a2      	strh	r2, [r4, #4]
 8028e98:	80c6      	strh	r6, [r0, #6]
 8028e9a:	60a1      	str	r1, [r4, #8]
 8028e9c:	81a1      	strh	r1, [r4, #12]
 8028e9e:	73a1      	strb	r1, [r4, #14]
 8028ea0:	e7e5      	b.n	8028e6e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8028ea2:	bf00      	nop
 8028ea4:	0802be6c 	.word	0x0802be6c
 8028ea8:	0802be94 	.word	0x0802be94

08028eac <__aeabi_atexit>:
 8028eac:	460b      	mov	r3, r1
 8028eae:	4601      	mov	r1, r0
 8028eb0:	4618      	mov	r0, r3
 8028eb2:	f000 b90f 	b.w	80290d4 <__cxa_atexit>

08028eb6 <_ZdlPvj>:
 8028eb6:	f000 b812 	b.w	8028ede <_ZdlPv>

08028eba <__cxa_guard_acquire>:
 8028eba:	6803      	ldr	r3, [r0, #0]
 8028ebc:	07db      	lsls	r3, r3, #31
 8028ebe:	d406      	bmi.n	8028ece <__cxa_guard_acquire+0x14>
 8028ec0:	7843      	ldrb	r3, [r0, #1]
 8028ec2:	b103      	cbz	r3, 8028ec6 <__cxa_guard_acquire+0xc>
 8028ec4:	deff      	udf	#255	; 0xff
 8028ec6:	2301      	movs	r3, #1
 8028ec8:	7043      	strb	r3, [r0, #1]
 8028eca:	4618      	mov	r0, r3
 8028ecc:	4770      	bx	lr
 8028ece:	2000      	movs	r0, #0
 8028ed0:	4770      	bx	lr

08028ed2 <__cxa_guard_release>:
 8028ed2:	2301      	movs	r3, #1
 8028ed4:	6003      	str	r3, [r0, #0]
 8028ed6:	4770      	bx	lr

08028ed8 <__cxa_pure_virtual>:
 8028ed8:	b508      	push	{r3, lr}
 8028eda:	f000 f80f 	bl	8028efc <_ZSt9terminatev>

08028ede <_ZdlPv>:
 8028ede:	f000 b845 	b.w	8028f6c <free>

08028ee2 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8028ee2:	b508      	push	{r3, lr}
 8028ee4:	4780      	blx	r0
 8028ee6:	f000 f80e 	bl	8028f06 <abort>
	...

08028eec <_ZSt13get_terminatev>:
 8028eec:	4b02      	ldr	r3, [pc, #8]	; (8028ef8 <_ZSt13get_terminatev+0xc>)
 8028eee:	6818      	ldr	r0, [r3, #0]
 8028ef0:	f3bf 8f5b 	dmb	ish
 8028ef4:	4770      	bx	lr
 8028ef6:	bf00      	nop
 8028ef8:	240000b0 	.word	0x240000b0

08028efc <_ZSt9terminatev>:
 8028efc:	b508      	push	{r3, lr}
 8028efe:	f7ff fff5 	bl	8028eec <_ZSt13get_terminatev>
 8028f02:	f7ff ffee 	bl	8028ee2 <_ZN10__cxxabiv111__terminateEPFvvE>

08028f06 <abort>:
 8028f06:	b508      	push	{r3, lr}
 8028f08:	2006      	movs	r0, #6
 8028f0a:	f000 fa59 	bl	80293c0 <raise>
 8028f0e:	2001      	movs	r0, #1
 8028f10:	f7d8 ff88 	bl	8001e24 <_exit>

08028f14 <__assert_func>:
 8028f14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8028f16:	4614      	mov	r4, r2
 8028f18:	461a      	mov	r2, r3
 8028f1a:	4b09      	ldr	r3, [pc, #36]	; (8028f40 <__assert_func+0x2c>)
 8028f1c:	681b      	ldr	r3, [r3, #0]
 8028f1e:	4605      	mov	r5, r0
 8028f20:	68d8      	ldr	r0, [r3, #12]
 8028f22:	b14c      	cbz	r4, 8028f38 <__assert_func+0x24>
 8028f24:	4b07      	ldr	r3, [pc, #28]	; (8028f44 <__assert_func+0x30>)
 8028f26:	9100      	str	r1, [sp, #0]
 8028f28:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8028f2c:	4906      	ldr	r1, [pc, #24]	; (8028f48 <__assert_func+0x34>)
 8028f2e:	462b      	mov	r3, r5
 8028f30:	f000 f982 	bl	8029238 <fiprintf>
 8028f34:	f7ff ffe7 	bl	8028f06 <abort>
 8028f38:	4b04      	ldr	r3, [pc, #16]	; (8028f4c <__assert_func+0x38>)
 8028f3a:	461c      	mov	r4, r3
 8028f3c:	e7f3      	b.n	8028f26 <__assert_func+0x12>
 8028f3e:	bf00      	nop
 8028f40:	2400010c 	.word	0x2400010c
 8028f44:	0802c104 	.word	0x0802c104
 8028f48:	0802c111 	.word	0x0802c111
 8028f4c:	0802c13f 	.word	0x0802c13f

08028f50 <atexit>:
 8028f50:	2300      	movs	r3, #0
 8028f52:	4601      	mov	r1, r0
 8028f54:	461a      	mov	r2, r3
 8028f56:	4618      	mov	r0, r3
 8028f58:	f000 bae0 	b.w	802951c <__register_exitproc>

08028f5c <malloc>:
 8028f5c:	4b02      	ldr	r3, [pc, #8]	; (8028f68 <malloc+0xc>)
 8028f5e:	4601      	mov	r1, r0
 8028f60:	6818      	ldr	r0, [r3, #0]
 8028f62:	f000 b82b 	b.w	8028fbc <_malloc_r>
 8028f66:	bf00      	nop
 8028f68:	2400010c 	.word	0x2400010c

08028f6c <free>:
 8028f6c:	4b02      	ldr	r3, [pc, #8]	; (8028f78 <free+0xc>)
 8028f6e:	4601      	mov	r1, r0
 8028f70:	6818      	ldr	r0, [r3, #0]
 8028f72:	f000 bb31 	b.w	80295d8 <_free_r>
 8028f76:	bf00      	nop
 8028f78:	2400010c 	.word	0x2400010c

08028f7c <sbrk_aligned>:
 8028f7c:	b570      	push	{r4, r5, r6, lr}
 8028f7e:	4e0e      	ldr	r6, [pc, #56]	; (8028fb8 <sbrk_aligned+0x3c>)
 8028f80:	460c      	mov	r4, r1
 8028f82:	6831      	ldr	r1, [r6, #0]
 8028f84:	4605      	mov	r5, r0
 8028f86:	b911      	cbnz	r1, 8028f8e <sbrk_aligned+0x12>
 8028f88:	f000 fa6a 	bl	8029460 <_sbrk_r>
 8028f8c:	6030      	str	r0, [r6, #0]
 8028f8e:	4621      	mov	r1, r4
 8028f90:	4628      	mov	r0, r5
 8028f92:	f000 fa65 	bl	8029460 <_sbrk_r>
 8028f96:	1c43      	adds	r3, r0, #1
 8028f98:	d00a      	beq.n	8028fb0 <sbrk_aligned+0x34>
 8028f9a:	1cc4      	adds	r4, r0, #3
 8028f9c:	f024 0403 	bic.w	r4, r4, #3
 8028fa0:	42a0      	cmp	r0, r4
 8028fa2:	d007      	beq.n	8028fb4 <sbrk_aligned+0x38>
 8028fa4:	1a21      	subs	r1, r4, r0
 8028fa6:	4628      	mov	r0, r5
 8028fa8:	f000 fa5a 	bl	8029460 <_sbrk_r>
 8028fac:	3001      	adds	r0, #1
 8028fae:	d101      	bne.n	8028fb4 <sbrk_aligned+0x38>
 8028fb0:	f04f 34ff 	mov.w	r4, #4294967295
 8028fb4:	4620      	mov	r0, r4
 8028fb6:	bd70      	pop	{r4, r5, r6, pc}
 8028fb8:	2400791c 	.word	0x2400791c

08028fbc <_malloc_r>:
 8028fbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8028fc0:	1ccd      	adds	r5, r1, #3
 8028fc2:	f025 0503 	bic.w	r5, r5, #3
 8028fc6:	3508      	adds	r5, #8
 8028fc8:	2d0c      	cmp	r5, #12
 8028fca:	bf38      	it	cc
 8028fcc:	250c      	movcc	r5, #12
 8028fce:	2d00      	cmp	r5, #0
 8028fd0:	4607      	mov	r7, r0
 8028fd2:	db01      	blt.n	8028fd8 <_malloc_r+0x1c>
 8028fd4:	42a9      	cmp	r1, r5
 8028fd6:	d905      	bls.n	8028fe4 <_malloc_r+0x28>
 8028fd8:	230c      	movs	r3, #12
 8028fda:	603b      	str	r3, [r7, #0]
 8028fdc:	2600      	movs	r6, #0
 8028fde:	4630      	mov	r0, r6
 8028fe0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8028fe4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80290b8 <_malloc_r+0xfc>
 8028fe8:	f000 f868 	bl	80290bc <__malloc_lock>
 8028fec:	f8d8 3000 	ldr.w	r3, [r8]
 8028ff0:	461c      	mov	r4, r3
 8028ff2:	bb5c      	cbnz	r4, 802904c <_malloc_r+0x90>
 8028ff4:	4629      	mov	r1, r5
 8028ff6:	4638      	mov	r0, r7
 8028ff8:	f7ff ffc0 	bl	8028f7c <sbrk_aligned>
 8028ffc:	1c43      	adds	r3, r0, #1
 8028ffe:	4604      	mov	r4, r0
 8029000:	d155      	bne.n	80290ae <_malloc_r+0xf2>
 8029002:	f8d8 4000 	ldr.w	r4, [r8]
 8029006:	4626      	mov	r6, r4
 8029008:	2e00      	cmp	r6, #0
 802900a:	d145      	bne.n	8029098 <_malloc_r+0xdc>
 802900c:	2c00      	cmp	r4, #0
 802900e:	d048      	beq.n	80290a2 <_malloc_r+0xe6>
 8029010:	6823      	ldr	r3, [r4, #0]
 8029012:	4631      	mov	r1, r6
 8029014:	4638      	mov	r0, r7
 8029016:	eb04 0903 	add.w	r9, r4, r3
 802901a:	f000 fa21 	bl	8029460 <_sbrk_r>
 802901e:	4581      	cmp	r9, r0
 8029020:	d13f      	bne.n	80290a2 <_malloc_r+0xe6>
 8029022:	6821      	ldr	r1, [r4, #0]
 8029024:	1a6d      	subs	r5, r5, r1
 8029026:	4629      	mov	r1, r5
 8029028:	4638      	mov	r0, r7
 802902a:	f7ff ffa7 	bl	8028f7c <sbrk_aligned>
 802902e:	3001      	adds	r0, #1
 8029030:	d037      	beq.n	80290a2 <_malloc_r+0xe6>
 8029032:	6823      	ldr	r3, [r4, #0]
 8029034:	442b      	add	r3, r5
 8029036:	6023      	str	r3, [r4, #0]
 8029038:	f8d8 3000 	ldr.w	r3, [r8]
 802903c:	2b00      	cmp	r3, #0
 802903e:	d038      	beq.n	80290b2 <_malloc_r+0xf6>
 8029040:	685a      	ldr	r2, [r3, #4]
 8029042:	42a2      	cmp	r2, r4
 8029044:	d12b      	bne.n	802909e <_malloc_r+0xe2>
 8029046:	2200      	movs	r2, #0
 8029048:	605a      	str	r2, [r3, #4]
 802904a:	e00f      	b.n	802906c <_malloc_r+0xb0>
 802904c:	6822      	ldr	r2, [r4, #0]
 802904e:	1b52      	subs	r2, r2, r5
 8029050:	d41f      	bmi.n	8029092 <_malloc_r+0xd6>
 8029052:	2a0b      	cmp	r2, #11
 8029054:	d917      	bls.n	8029086 <_malloc_r+0xca>
 8029056:	1961      	adds	r1, r4, r5
 8029058:	42a3      	cmp	r3, r4
 802905a:	6025      	str	r5, [r4, #0]
 802905c:	bf18      	it	ne
 802905e:	6059      	strne	r1, [r3, #4]
 8029060:	6863      	ldr	r3, [r4, #4]
 8029062:	bf08      	it	eq
 8029064:	f8c8 1000 	streq.w	r1, [r8]
 8029068:	5162      	str	r2, [r4, r5]
 802906a:	604b      	str	r3, [r1, #4]
 802906c:	4638      	mov	r0, r7
 802906e:	f104 060b 	add.w	r6, r4, #11
 8029072:	f000 f829 	bl	80290c8 <__malloc_unlock>
 8029076:	f026 0607 	bic.w	r6, r6, #7
 802907a:	1d23      	adds	r3, r4, #4
 802907c:	1af2      	subs	r2, r6, r3
 802907e:	d0ae      	beq.n	8028fde <_malloc_r+0x22>
 8029080:	1b9b      	subs	r3, r3, r6
 8029082:	50a3      	str	r3, [r4, r2]
 8029084:	e7ab      	b.n	8028fde <_malloc_r+0x22>
 8029086:	42a3      	cmp	r3, r4
 8029088:	6862      	ldr	r2, [r4, #4]
 802908a:	d1dd      	bne.n	8029048 <_malloc_r+0x8c>
 802908c:	f8c8 2000 	str.w	r2, [r8]
 8029090:	e7ec      	b.n	802906c <_malloc_r+0xb0>
 8029092:	4623      	mov	r3, r4
 8029094:	6864      	ldr	r4, [r4, #4]
 8029096:	e7ac      	b.n	8028ff2 <_malloc_r+0x36>
 8029098:	4634      	mov	r4, r6
 802909a:	6876      	ldr	r6, [r6, #4]
 802909c:	e7b4      	b.n	8029008 <_malloc_r+0x4c>
 802909e:	4613      	mov	r3, r2
 80290a0:	e7cc      	b.n	802903c <_malloc_r+0x80>
 80290a2:	230c      	movs	r3, #12
 80290a4:	603b      	str	r3, [r7, #0]
 80290a6:	4638      	mov	r0, r7
 80290a8:	f000 f80e 	bl	80290c8 <__malloc_unlock>
 80290ac:	e797      	b.n	8028fde <_malloc_r+0x22>
 80290ae:	6025      	str	r5, [r4, #0]
 80290b0:	e7dc      	b.n	802906c <_malloc_r+0xb0>
 80290b2:	605b      	str	r3, [r3, #4]
 80290b4:	deff      	udf	#255	; 0xff
 80290b6:	bf00      	nop
 80290b8:	24007918 	.word	0x24007918

080290bc <__malloc_lock>:
 80290bc:	4801      	ldr	r0, [pc, #4]	; (80290c4 <__malloc_lock+0x8>)
 80290be:	f000 ba1c 	b.w	80294fa <__retarget_lock_acquire_recursive>
 80290c2:	bf00      	nop
 80290c4:	24007a61 	.word	0x24007a61

080290c8 <__malloc_unlock>:
 80290c8:	4801      	ldr	r0, [pc, #4]	; (80290d0 <__malloc_unlock+0x8>)
 80290ca:	f000 ba17 	b.w	80294fc <__retarget_lock_release_recursive>
 80290ce:	bf00      	nop
 80290d0:	24007a61 	.word	0x24007a61

080290d4 <__cxa_atexit>:
 80290d4:	b510      	push	{r4, lr}
 80290d6:	4c05      	ldr	r4, [pc, #20]	; (80290ec <__cxa_atexit+0x18>)
 80290d8:	4613      	mov	r3, r2
 80290da:	b12c      	cbz	r4, 80290e8 <__cxa_atexit+0x14>
 80290dc:	460a      	mov	r2, r1
 80290de:	4601      	mov	r1, r0
 80290e0:	2002      	movs	r0, #2
 80290e2:	f000 fa1b 	bl	802951c <__register_exitproc>
 80290e6:	bd10      	pop	{r4, pc}
 80290e8:	4620      	mov	r0, r4
 80290ea:	e7fc      	b.n	80290e6 <__cxa_atexit+0x12>
 80290ec:	0802951d 	.word	0x0802951d

080290f0 <std>:
 80290f0:	2300      	movs	r3, #0
 80290f2:	b510      	push	{r4, lr}
 80290f4:	4604      	mov	r4, r0
 80290f6:	e9c0 3300 	strd	r3, r3, [r0]
 80290fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80290fe:	6083      	str	r3, [r0, #8]
 8029100:	8181      	strh	r1, [r0, #12]
 8029102:	6643      	str	r3, [r0, #100]	; 0x64
 8029104:	81c2      	strh	r2, [r0, #14]
 8029106:	6183      	str	r3, [r0, #24]
 8029108:	4619      	mov	r1, r3
 802910a:	2208      	movs	r2, #8
 802910c:	305c      	adds	r0, #92	; 0x5c
 802910e:	f000 f926 	bl	802935e <memset>
 8029112:	4b0d      	ldr	r3, [pc, #52]	; (8029148 <std+0x58>)
 8029114:	6263      	str	r3, [r4, #36]	; 0x24
 8029116:	4b0d      	ldr	r3, [pc, #52]	; (802914c <std+0x5c>)
 8029118:	62a3      	str	r3, [r4, #40]	; 0x28
 802911a:	4b0d      	ldr	r3, [pc, #52]	; (8029150 <std+0x60>)
 802911c:	62e3      	str	r3, [r4, #44]	; 0x2c
 802911e:	4b0d      	ldr	r3, [pc, #52]	; (8029154 <std+0x64>)
 8029120:	6323      	str	r3, [r4, #48]	; 0x30
 8029122:	4b0d      	ldr	r3, [pc, #52]	; (8029158 <std+0x68>)
 8029124:	6224      	str	r4, [r4, #32]
 8029126:	429c      	cmp	r4, r3
 8029128:	d006      	beq.n	8029138 <std+0x48>
 802912a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 802912e:	4294      	cmp	r4, r2
 8029130:	d002      	beq.n	8029138 <std+0x48>
 8029132:	33d0      	adds	r3, #208	; 0xd0
 8029134:	429c      	cmp	r4, r3
 8029136:	d105      	bne.n	8029144 <std+0x54>
 8029138:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802913c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8029140:	f000 b9da 	b.w	80294f8 <__retarget_lock_init_recursive>
 8029144:	bd10      	pop	{r4, pc}
 8029146:	bf00      	nop
 8029148:	080292d9 	.word	0x080292d9
 802914c:	080292fb 	.word	0x080292fb
 8029150:	08029333 	.word	0x08029333
 8029154:	08029357 	.word	0x08029357
 8029158:	24007920 	.word	0x24007920

0802915c <stdio_exit_handler>:
 802915c:	4a02      	ldr	r2, [pc, #8]	; (8029168 <stdio_exit_handler+0xc>)
 802915e:	4903      	ldr	r1, [pc, #12]	; (802916c <stdio_exit_handler+0x10>)
 8029160:	4803      	ldr	r0, [pc, #12]	; (8029170 <stdio_exit_handler+0x14>)
 8029162:	f000 b87b 	b.w	802925c <_fwalk_sglue>
 8029166:	bf00      	nop
 8029168:	240000b4 	.word	0x240000b4
 802916c:	08029fd5 	.word	0x08029fd5
 8029170:	240000c0 	.word	0x240000c0

08029174 <cleanup_stdio>:
 8029174:	6841      	ldr	r1, [r0, #4]
 8029176:	4b0c      	ldr	r3, [pc, #48]	; (80291a8 <cleanup_stdio+0x34>)
 8029178:	4299      	cmp	r1, r3
 802917a:	b510      	push	{r4, lr}
 802917c:	4604      	mov	r4, r0
 802917e:	d001      	beq.n	8029184 <cleanup_stdio+0x10>
 8029180:	f000 ff28 	bl	8029fd4 <_fflush_r>
 8029184:	68a1      	ldr	r1, [r4, #8]
 8029186:	4b09      	ldr	r3, [pc, #36]	; (80291ac <cleanup_stdio+0x38>)
 8029188:	4299      	cmp	r1, r3
 802918a:	d002      	beq.n	8029192 <cleanup_stdio+0x1e>
 802918c:	4620      	mov	r0, r4
 802918e:	f000 ff21 	bl	8029fd4 <_fflush_r>
 8029192:	68e1      	ldr	r1, [r4, #12]
 8029194:	4b06      	ldr	r3, [pc, #24]	; (80291b0 <cleanup_stdio+0x3c>)
 8029196:	4299      	cmp	r1, r3
 8029198:	d004      	beq.n	80291a4 <cleanup_stdio+0x30>
 802919a:	4620      	mov	r0, r4
 802919c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80291a0:	f000 bf18 	b.w	8029fd4 <_fflush_r>
 80291a4:	bd10      	pop	{r4, pc}
 80291a6:	bf00      	nop
 80291a8:	24007920 	.word	0x24007920
 80291ac:	24007988 	.word	0x24007988
 80291b0:	240079f0 	.word	0x240079f0

080291b4 <global_stdio_init.part.0>:
 80291b4:	b510      	push	{r4, lr}
 80291b6:	4b0b      	ldr	r3, [pc, #44]	; (80291e4 <global_stdio_init.part.0+0x30>)
 80291b8:	4c0b      	ldr	r4, [pc, #44]	; (80291e8 <global_stdio_init.part.0+0x34>)
 80291ba:	4a0c      	ldr	r2, [pc, #48]	; (80291ec <global_stdio_init.part.0+0x38>)
 80291bc:	601a      	str	r2, [r3, #0]
 80291be:	4620      	mov	r0, r4
 80291c0:	2200      	movs	r2, #0
 80291c2:	2104      	movs	r1, #4
 80291c4:	f7ff ff94 	bl	80290f0 <std>
 80291c8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80291cc:	2201      	movs	r2, #1
 80291ce:	2109      	movs	r1, #9
 80291d0:	f7ff ff8e 	bl	80290f0 <std>
 80291d4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80291d8:	2202      	movs	r2, #2
 80291da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80291de:	2112      	movs	r1, #18
 80291e0:	f7ff bf86 	b.w	80290f0 <std>
 80291e4:	24007a58 	.word	0x24007a58
 80291e8:	24007920 	.word	0x24007920
 80291ec:	0802915d 	.word	0x0802915d

080291f0 <__sfp_lock_acquire>:
 80291f0:	4801      	ldr	r0, [pc, #4]	; (80291f8 <__sfp_lock_acquire+0x8>)
 80291f2:	f000 b982 	b.w	80294fa <__retarget_lock_acquire_recursive>
 80291f6:	bf00      	nop
 80291f8:	24007a62 	.word	0x24007a62

080291fc <__sfp_lock_release>:
 80291fc:	4801      	ldr	r0, [pc, #4]	; (8029204 <__sfp_lock_release+0x8>)
 80291fe:	f000 b97d 	b.w	80294fc <__retarget_lock_release_recursive>
 8029202:	bf00      	nop
 8029204:	24007a62 	.word	0x24007a62

08029208 <__sinit>:
 8029208:	b510      	push	{r4, lr}
 802920a:	4604      	mov	r4, r0
 802920c:	f7ff fff0 	bl	80291f0 <__sfp_lock_acquire>
 8029210:	6a23      	ldr	r3, [r4, #32]
 8029212:	b11b      	cbz	r3, 802921c <__sinit+0x14>
 8029214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8029218:	f7ff bff0 	b.w	80291fc <__sfp_lock_release>
 802921c:	4b04      	ldr	r3, [pc, #16]	; (8029230 <__sinit+0x28>)
 802921e:	6223      	str	r3, [r4, #32]
 8029220:	4b04      	ldr	r3, [pc, #16]	; (8029234 <__sinit+0x2c>)
 8029222:	681b      	ldr	r3, [r3, #0]
 8029224:	2b00      	cmp	r3, #0
 8029226:	d1f5      	bne.n	8029214 <__sinit+0xc>
 8029228:	f7ff ffc4 	bl	80291b4 <global_stdio_init.part.0>
 802922c:	e7f2      	b.n	8029214 <__sinit+0xc>
 802922e:	bf00      	nop
 8029230:	08029175 	.word	0x08029175
 8029234:	24007a58 	.word	0x24007a58

08029238 <fiprintf>:
 8029238:	b40e      	push	{r1, r2, r3}
 802923a:	b503      	push	{r0, r1, lr}
 802923c:	4601      	mov	r1, r0
 802923e:	ab03      	add	r3, sp, #12
 8029240:	4805      	ldr	r0, [pc, #20]	; (8029258 <fiprintf+0x20>)
 8029242:	f853 2b04 	ldr.w	r2, [r3], #4
 8029246:	6800      	ldr	r0, [r0, #0]
 8029248:	9301      	str	r3, [sp, #4]
 802924a:	f000 fb93 	bl	8029974 <_vfiprintf_r>
 802924e:	b002      	add	sp, #8
 8029250:	f85d eb04 	ldr.w	lr, [sp], #4
 8029254:	b003      	add	sp, #12
 8029256:	4770      	bx	lr
 8029258:	2400010c 	.word	0x2400010c

0802925c <_fwalk_sglue>:
 802925c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8029260:	4607      	mov	r7, r0
 8029262:	4688      	mov	r8, r1
 8029264:	4614      	mov	r4, r2
 8029266:	2600      	movs	r6, #0
 8029268:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802926c:	f1b9 0901 	subs.w	r9, r9, #1
 8029270:	d505      	bpl.n	802927e <_fwalk_sglue+0x22>
 8029272:	6824      	ldr	r4, [r4, #0]
 8029274:	2c00      	cmp	r4, #0
 8029276:	d1f7      	bne.n	8029268 <_fwalk_sglue+0xc>
 8029278:	4630      	mov	r0, r6
 802927a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802927e:	89ab      	ldrh	r3, [r5, #12]
 8029280:	2b01      	cmp	r3, #1
 8029282:	d907      	bls.n	8029294 <_fwalk_sglue+0x38>
 8029284:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8029288:	3301      	adds	r3, #1
 802928a:	d003      	beq.n	8029294 <_fwalk_sglue+0x38>
 802928c:	4629      	mov	r1, r5
 802928e:	4638      	mov	r0, r7
 8029290:	47c0      	blx	r8
 8029292:	4306      	orrs	r6, r0
 8029294:	3568      	adds	r5, #104	; 0x68
 8029296:	e7e9      	b.n	802926c <_fwalk_sglue+0x10>

08029298 <siprintf>:
 8029298:	b40e      	push	{r1, r2, r3}
 802929a:	b500      	push	{lr}
 802929c:	b09c      	sub	sp, #112	; 0x70
 802929e:	ab1d      	add	r3, sp, #116	; 0x74
 80292a0:	9002      	str	r0, [sp, #8]
 80292a2:	9006      	str	r0, [sp, #24]
 80292a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80292a8:	4809      	ldr	r0, [pc, #36]	; (80292d0 <siprintf+0x38>)
 80292aa:	9107      	str	r1, [sp, #28]
 80292ac:	9104      	str	r1, [sp, #16]
 80292ae:	4909      	ldr	r1, [pc, #36]	; (80292d4 <siprintf+0x3c>)
 80292b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80292b4:	9105      	str	r1, [sp, #20]
 80292b6:	6800      	ldr	r0, [r0, #0]
 80292b8:	9301      	str	r3, [sp, #4]
 80292ba:	a902      	add	r1, sp, #8
 80292bc:	f000 fa32 	bl	8029724 <_svfiprintf_r>
 80292c0:	9b02      	ldr	r3, [sp, #8]
 80292c2:	2200      	movs	r2, #0
 80292c4:	701a      	strb	r2, [r3, #0]
 80292c6:	b01c      	add	sp, #112	; 0x70
 80292c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80292cc:	b003      	add	sp, #12
 80292ce:	4770      	bx	lr
 80292d0:	2400010c 	.word	0x2400010c
 80292d4:	ffff0208 	.word	0xffff0208

080292d8 <__sread>:
 80292d8:	b510      	push	{r4, lr}
 80292da:	460c      	mov	r4, r1
 80292dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80292e0:	f000 f898 	bl	8029414 <_read_r>
 80292e4:	2800      	cmp	r0, #0
 80292e6:	bfab      	itete	ge
 80292e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80292ea:	89a3      	ldrhlt	r3, [r4, #12]
 80292ec:	181b      	addge	r3, r3, r0
 80292ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80292f2:	bfac      	ite	ge
 80292f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80292f6:	81a3      	strhlt	r3, [r4, #12]
 80292f8:	bd10      	pop	{r4, pc}

080292fa <__swrite>:
 80292fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80292fe:	461f      	mov	r7, r3
 8029300:	898b      	ldrh	r3, [r1, #12]
 8029302:	05db      	lsls	r3, r3, #23
 8029304:	4605      	mov	r5, r0
 8029306:	460c      	mov	r4, r1
 8029308:	4616      	mov	r6, r2
 802930a:	d505      	bpl.n	8029318 <__swrite+0x1e>
 802930c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8029310:	2302      	movs	r3, #2
 8029312:	2200      	movs	r2, #0
 8029314:	f000 f86c 	bl	80293f0 <_lseek_r>
 8029318:	89a3      	ldrh	r3, [r4, #12]
 802931a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802931e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8029322:	81a3      	strh	r3, [r4, #12]
 8029324:	4632      	mov	r2, r6
 8029326:	463b      	mov	r3, r7
 8029328:	4628      	mov	r0, r5
 802932a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802932e:	f000 b8a7 	b.w	8029480 <_write_r>

08029332 <__sseek>:
 8029332:	b510      	push	{r4, lr}
 8029334:	460c      	mov	r4, r1
 8029336:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802933a:	f000 f859 	bl	80293f0 <_lseek_r>
 802933e:	1c43      	adds	r3, r0, #1
 8029340:	89a3      	ldrh	r3, [r4, #12]
 8029342:	bf15      	itete	ne
 8029344:	6560      	strne	r0, [r4, #84]	; 0x54
 8029346:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802934a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802934e:	81a3      	strheq	r3, [r4, #12]
 8029350:	bf18      	it	ne
 8029352:	81a3      	strhne	r3, [r4, #12]
 8029354:	bd10      	pop	{r4, pc}

08029356 <__sclose>:
 8029356:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802935a:	f000 b839 	b.w	80293d0 <_close_r>

0802935e <memset>:
 802935e:	4402      	add	r2, r0
 8029360:	4603      	mov	r3, r0
 8029362:	4293      	cmp	r3, r2
 8029364:	d100      	bne.n	8029368 <memset+0xa>
 8029366:	4770      	bx	lr
 8029368:	f803 1b01 	strb.w	r1, [r3], #1
 802936c:	e7f9      	b.n	8029362 <memset+0x4>

0802936e <_raise_r>:
 802936e:	291f      	cmp	r1, #31
 8029370:	b538      	push	{r3, r4, r5, lr}
 8029372:	4604      	mov	r4, r0
 8029374:	460d      	mov	r5, r1
 8029376:	d904      	bls.n	8029382 <_raise_r+0x14>
 8029378:	2316      	movs	r3, #22
 802937a:	6003      	str	r3, [r0, #0]
 802937c:	f04f 30ff 	mov.w	r0, #4294967295
 8029380:	bd38      	pop	{r3, r4, r5, pc}
 8029382:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8029384:	b112      	cbz	r2, 802938c <_raise_r+0x1e>
 8029386:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802938a:	b94b      	cbnz	r3, 80293a0 <_raise_r+0x32>
 802938c:	4620      	mov	r0, r4
 802938e:	f000 f865 	bl	802945c <_getpid_r>
 8029392:	462a      	mov	r2, r5
 8029394:	4601      	mov	r1, r0
 8029396:	4620      	mov	r0, r4
 8029398:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802939c:	f000 b84c 	b.w	8029438 <_kill_r>
 80293a0:	2b01      	cmp	r3, #1
 80293a2:	d00a      	beq.n	80293ba <_raise_r+0x4c>
 80293a4:	1c59      	adds	r1, r3, #1
 80293a6:	d103      	bne.n	80293b0 <_raise_r+0x42>
 80293a8:	2316      	movs	r3, #22
 80293aa:	6003      	str	r3, [r0, #0]
 80293ac:	2001      	movs	r0, #1
 80293ae:	e7e7      	b.n	8029380 <_raise_r+0x12>
 80293b0:	2400      	movs	r4, #0
 80293b2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80293b6:	4628      	mov	r0, r5
 80293b8:	4798      	blx	r3
 80293ba:	2000      	movs	r0, #0
 80293bc:	e7e0      	b.n	8029380 <_raise_r+0x12>
	...

080293c0 <raise>:
 80293c0:	4b02      	ldr	r3, [pc, #8]	; (80293cc <raise+0xc>)
 80293c2:	4601      	mov	r1, r0
 80293c4:	6818      	ldr	r0, [r3, #0]
 80293c6:	f7ff bfd2 	b.w	802936e <_raise_r>
 80293ca:	bf00      	nop
 80293cc:	2400010c 	.word	0x2400010c

080293d0 <_close_r>:
 80293d0:	b538      	push	{r3, r4, r5, lr}
 80293d2:	4d06      	ldr	r5, [pc, #24]	; (80293ec <_close_r+0x1c>)
 80293d4:	2300      	movs	r3, #0
 80293d6:	4604      	mov	r4, r0
 80293d8:	4608      	mov	r0, r1
 80293da:	602b      	str	r3, [r5, #0]
 80293dc:	f7d8 fd65 	bl	8001eaa <_close>
 80293e0:	1c43      	adds	r3, r0, #1
 80293e2:	d102      	bne.n	80293ea <_close_r+0x1a>
 80293e4:	682b      	ldr	r3, [r5, #0]
 80293e6:	b103      	cbz	r3, 80293ea <_close_r+0x1a>
 80293e8:	6023      	str	r3, [r4, #0]
 80293ea:	bd38      	pop	{r3, r4, r5, pc}
 80293ec:	24007a5c 	.word	0x24007a5c

080293f0 <_lseek_r>:
 80293f0:	b538      	push	{r3, r4, r5, lr}
 80293f2:	4d07      	ldr	r5, [pc, #28]	; (8029410 <_lseek_r+0x20>)
 80293f4:	4604      	mov	r4, r0
 80293f6:	4608      	mov	r0, r1
 80293f8:	4611      	mov	r1, r2
 80293fa:	2200      	movs	r2, #0
 80293fc:	602a      	str	r2, [r5, #0]
 80293fe:	461a      	mov	r2, r3
 8029400:	f7d8 fd7a 	bl	8001ef8 <_lseek>
 8029404:	1c43      	adds	r3, r0, #1
 8029406:	d102      	bne.n	802940e <_lseek_r+0x1e>
 8029408:	682b      	ldr	r3, [r5, #0]
 802940a:	b103      	cbz	r3, 802940e <_lseek_r+0x1e>
 802940c:	6023      	str	r3, [r4, #0]
 802940e:	bd38      	pop	{r3, r4, r5, pc}
 8029410:	24007a5c 	.word	0x24007a5c

08029414 <_read_r>:
 8029414:	b538      	push	{r3, r4, r5, lr}
 8029416:	4d07      	ldr	r5, [pc, #28]	; (8029434 <_read_r+0x20>)
 8029418:	4604      	mov	r4, r0
 802941a:	4608      	mov	r0, r1
 802941c:	4611      	mov	r1, r2
 802941e:	2200      	movs	r2, #0
 8029420:	602a      	str	r2, [r5, #0]
 8029422:	461a      	mov	r2, r3
 8029424:	f7d8 fd08 	bl	8001e38 <_read>
 8029428:	1c43      	adds	r3, r0, #1
 802942a:	d102      	bne.n	8029432 <_read_r+0x1e>
 802942c:	682b      	ldr	r3, [r5, #0]
 802942e:	b103      	cbz	r3, 8029432 <_read_r+0x1e>
 8029430:	6023      	str	r3, [r4, #0]
 8029432:	bd38      	pop	{r3, r4, r5, pc}
 8029434:	24007a5c 	.word	0x24007a5c

08029438 <_kill_r>:
 8029438:	b538      	push	{r3, r4, r5, lr}
 802943a:	4d07      	ldr	r5, [pc, #28]	; (8029458 <_kill_r+0x20>)
 802943c:	2300      	movs	r3, #0
 802943e:	4604      	mov	r4, r0
 8029440:	4608      	mov	r0, r1
 8029442:	4611      	mov	r1, r2
 8029444:	602b      	str	r3, [r5, #0]
 8029446:	f7d8 fcdd 	bl	8001e04 <_kill>
 802944a:	1c43      	adds	r3, r0, #1
 802944c:	d102      	bne.n	8029454 <_kill_r+0x1c>
 802944e:	682b      	ldr	r3, [r5, #0]
 8029450:	b103      	cbz	r3, 8029454 <_kill_r+0x1c>
 8029452:	6023      	str	r3, [r4, #0]
 8029454:	bd38      	pop	{r3, r4, r5, pc}
 8029456:	bf00      	nop
 8029458:	24007a5c 	.word	0x24007a5c

0802945c <_getpid_r>:
 802945c:	f7d8 bcca 	b.w	8001df4 <_getpid>

08029460 <_sbrk_r>:
 8029460:	b538      	push	{r3, r4, r5, lr}
 8029462:	4d06      	ldr	r5, [pc, #24]	; (802947c <_sbrk_r+0x1c>)
 8029464:	2300      	movs	r3, #0
 8029466:	4604      	mov	r4, r0
 8029468:	4608      	mov	r0, r1
 802946a:	602b      	str	r3, [r5, #0]
 802946c:	f7d8 fd52 	bl	8001f14 <_sbrk>
 8029470:	1c43      	adds	r3, r0, #1
 8029472:	d102      	bne.n	802947a <_sbrk_r+0x1a>
 8029474:	682b      	ldr	r3, [r5, #0]
 8029476:	b103      	cbz	r3, 802947a <_sbrk_r+0x1a>
 8029478:	6023      	str	r3, [r4, #0]
 802947a:	bd38      	pop	{r3, r4, r5, pc}
 802947c:	24007a5c 	.word	0x24007a5c

08029480 <_write_r>:
 8029480:	b538      	push	{r3, r4, r5, lr}
 8029482:	4d07      	ldr	r5, [pc, #28]	; (80294a0 <_write_r+0x20>)
 8029484:	4604      	mov	r4, r0
 8029486:	4608      	mov	r0, r1
 8029488:	4611      	mov	r1, r2
 802948a:	2200      	movs	r2, #0
 802948c:	602a      	str	r2, [r5, #0]
 802948e:	461a      	mov	r2, r3
 8029490:	f7d8 fcef 	bl	8001e72 <_write>
 8029494:	1c43      	adds	r3, r0, #1
 8029496:	d102      	bne.n	802949e <_write_r+0x1e>
 8029498:	682b      	ldr	r3, [r5, #0]
 802949a:	b103      	cbz	r3, 802949e <_write_r+0x1e>
 802949c:	6023      	str	r3, [r4, #0]
 802949e:	bd38      	pop	{r3, r4, r5, pc}
 80294a0:	24007a5c 	.word	0x24007a5c

080294a4 <__errno>:
 80294a4:	4b01      	ldr	r3, [pc, #4]	; (80294ac <__errno+0x8>)
 80294a6:	6818      	ldr	r0, [r3, #0]
 80294a8:	4770      	bx	lr
 80294aa:	bf00      	nop
 80294ac:	2400010c 	.word	0x2400010c

080294b0 <__libc_init_array>:
 80294b0:	b570      	push	{r4, r5, r6, lr}
 80294b2:	4d0d      	ldr	r5, [pc, #52]	; (80294e8 <__libc_init_array+0x38>)
 80294b4:	4c0d      	ldr	r4, [pc, #52]	; (80294ec <__libc_init_array+0x3c>)
 80294b6:	1b64      	subs	r4, r4, r5
 80294b8:	10a4      	asrs	r4, r4, #2
 80294ba:	2600      	movs	r6, #0
 80294bc:	42a6      	cmp	r6, r4
 80294be:	d109      	bne.n	80294d4 <__libc_init_array+0x24>
 80294c0:	4d0b      	ldr	r5, [pc, #44]	; (80294f0 <__libc_init_array+0x40>)
 80294c2:	4c0c      	ldr	r4, [pc, #48]	; (80294f4 <__libc_init_array+0x44>)
 80294c4:	f000 ff1a 	bl	802a2fc <_init>
 80294c8:	1b64      	subs	r4, r4, r5
 80294ca:	10a4      	asrs	r4, r4, #2
 80294cc:	2600      	movs	r6, #0
 80294ce:	42a6      	cmp	r6, r4
 80294d0:	d105      	bne.n	80294de <__libc_init_array+0x2e>
 80294d2:	bd70      	pop	{r4, r5, r6, pc}
 80294d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80294d8:	4798      	blx	r3
 80294da:	3601      	adds	r6, #1
 80294dc:	e7ee      	b.n	80294bc <__libc_init_array+0xc>
 80294de:	f855 3b04 	ldr.w	r3, [r5], #4
 80294e2:	4798      	blx	r3
 80294e4:	3601      	adds	r6, #1
 80294e6:	e7f2      	b.n	80294ce <__libc_init_array+0x1e>
 80294e8:	0802c19c 	.word	0x0802c19c
 80294ec:	0802c19c 	.word	0x0802c19c
 80294f0:	0802c19c 	.word	0x0802c19c
 80294f4:	0802c1b0 	.word	0x0802c1b0

080294f8 <__retarget_lock_init_recursive>:
 80294f8:	4770      	bx	lr

080294fa <__retarget_lock_acquire_recursive>:
 80294fa:	4770      	bx	lr

080294fc <__retarget_lock_release_recursive>:
 80294fc:	4770      	bx	lr

080294fe <memcpy>:
 80294fe:	440a      	add	r2, r1
 8029500:	4291      	cmp	r1, r2
 8029502:	f100 33ff 	add.w	r3, r0, #4294967295
 8029506:	d100      	bne.n	802950a <memcpy+0xc>
 8029508:	4770      	bx	lr
 802950a:	b510      	push	{r4, lr}
 802950c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8029510:	f803 4f01 	strb.w	r4, [r3, #1]!
 8029514:	4291      	cmp	r1, r2
 8029516:	d1f9      	bne.n	802950c <memcpy+0xe>
 8029518:	bd10      	pop	{r4, pc}
	...

0802951c <__register_exitproc>:
 802951c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8029520:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 80295d4 <__register_exitproc+0xb8>
 8029524:	4606      	mov	r6, r0
 8029526:	f8d8 0000 	ldr.w	r0, [r8]
 802952a:	461f      	mov	r7, r3
 802952c:	460d      	mov	r5, r1
 802952e:	4691      	mov	r9, r2
 8029530:	f7ff ffe3 	bl	80294fa <__retarget_lock_acquire_recursive>
 8029534:	4b23      	ldr	r3, [pc, #140]	; (80295c4 <__register_exitproc+0xa8>)
 8029536:	681c      	ldr	r4, [r3, #0]
 8029538:	b934      	cbnz	r4, 8029548 <__register_exitproc+0x2c>
 802953a:	4c23      	ldr	r4, [pc, #140]	; (80295c8 <__register_exitproc+0xac>)
 802953c:	601c      	str	r4, [r3, #0]
 802953e:	4b23      	ldr	r3, [pc, #140]	; (80295cc <__register_exitproc+0xb0>)
 8029540:	b113      	cbz	r3, 8029548 <__register_exitproc+0x2c>
 8029542:	681b      	ldr	r3, [r3, #0]
 8029544:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8029548:	6863      	ldr	r3, [r4, #4]
 802954a:	2b1f      	cmp	r3, #31
 802954c:	dd07      	ble.n	802955e <__register_exitproc+0x42>
 802954e:	f8d8 0000 	ldr.w	r0, [r8]
 8029552:	f7ff ffd3 	bl	80294fc <__retarget_lock_release_recursive>
 8029556:	f04f 30ff 	mov.w	r0, #4294967295
 802955a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802955e:	b32e      	cbz	r6, 80295ac <__register_exitproc+0x90>
 8029560:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8029564:	b968      	cbnz	r0, 8029582 <__register_exitproc+0x66>
 8029566:	4b1a      	ldr	r3, [pc, #104]	; (80295d0 <__register_exitproc+0xb4>)
 8029568:	2b00      	cmp	r3, #0
 802956a:	d0f0      	beq.n	802954e <__register_exitproc+0x32>
 802956c:	f44f 7084 	mov.w	r0, #264	; 0x108
 8029570:	f7ff fcf4 	bl	8028f5c <malloc>
 8029574:	2800      	cmp	r0, #0
 8029576:	d0ea      	beq.n	802954e <__register_exitproc+0x32>
 8029578:	2300      	movs	r3, #0
 802957a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 802957e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8029582:	6863      	ldr	r3, [r4, #4]
 8029584:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8029588:	2201      	movs	r2, #1
 802958a:	409a      	lsls	r2, r3
 802958c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8029590:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8029594:	4313      	orrs	r3, r2
 8029596:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 802959a:	2e02      	cmp	r6, #2
 802959c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 80295a0:	bf02      	ittt	eq
 80295a2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 80295a6:	4313      	orreq	r3, r2
 80295a8:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 80295ac:	6863      	ldr	r3, [r4, #4]
 80295ae:	f8d8 0000 	ldr.w	r0, [r8]
 80295b2:	1c5a      	adds	r2, r3, #1
 80295b4:	3302      	adds	r3, #2
 80295b6:	6062      	str	r2, [r4, #4]
 80295b8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80295bc:	f7ff ff9e 	bl	80294fc <__retarget_lock_release_recursive>
 80295c0:	2000      	movs	r0, #0
 80295c2:	e7ca      	b.n	802955a <__register_exitproc+0x3e>
 80295c4:	24007af0 	.word	0x24007af0
 80295c8:	24007a64 	.word	0x24007a64
 80295cc:	0802c140 	.word	0x0802c140
 80295d0:	08028f5d 	.word	0x08028f5d
 80295d4:	24000110 	.word	0x24000110

080295d8 <_free_r>:
 80295d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80295da:	2900      	cmp	r1, #0
 80295dc:	d044      	beq.n	8029668 <_free_r+0x90>
 80295de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80295e2:	9001      	str	r0, [sp, #4]
 80295e4:	2b00      	cmp	r3, #0
 80295e6:	f1a1 0404 	sub.w	r4, r1, #4
 80295ea:	bfb8      	it	lt
 80295ec:	18e4      	addlt	r4, r4, r3
 80295ee:	f7ff fd65 	bl	80290bc <__malloc_lock>
 80295f2:	4a1e      	ldr	r2, [pc, #120]	; (802966c <_free_r+0x94>)
 80295f4:	9801      	ldr	r0, [sp, #4]
 80295f6:	6813      	ldr	r3, [r2, #0]
 80295f8:	b933      	cbnz	r3, 8029608 <_free_r+0x30>
 80295fa:	6063      	str	r3, [r4, #4]
 80295fc:	6014      	str	r4, [r2, #0]
 80295fe:	b003      	add	sp, #12
 8029600:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8029604:	f7ff bd60 	b.w	80290c8 <__malloc_unlock>
 8029608:	42a3      	cmp	r3, r4
 802960a:	d908      	bls.n	802961e <_free_r+0x46>
 802960c:	6825      	ldr	r5, [r4, #0]
 802960e:	1961      	adds	r1, r4, r5
 8029610:	428b      	cmp	r3, r1
 8029612:	bf01      	itttt	eq
 8029614:	6819      	ldreq	r1, [r3, #0]
 8029616:	685b      	ldreq	r3, [r3, #4]
 8029618:	1949      	addeq	r1, r1, r5
 802961a:	6021      	streq	r1, [r4, #0]
 802961c:	e7ed      	b.n	80295fa <_free_r+0x22>
 802961e:	461a      	mov	r2, r3
 8029620:	685b      	ldr	r3, [r3, #4]
 8029622:	b10b      	cbz	r3, 8029628 <_free_r+0x50>
 8029624:	42a3      	cmp	r3, r4
 8029626:	d9fa      	bls.n	802961e <_free_r+0x46>
 8029628:	6811      	ldr	r1, [r2, #0]
 802962a:	1855      	adds	r5, r2, r1
 802962c:	42a5      	cmp	r5, r4
 802962e:	d10b      	bne.n	8029648 <_free_r+0x70>
 8029630:	6824      	ldr	r4, [r4, #0]
 8029632:	4421      	add	r1, r4
 8029634:	1854      	adds	r4, r2, r1
 8029636:	42a3      	cmp	r3, r4
 8029638:	6011      	str	r1, [r2, #0]
 802963a:	d1e0      	bne.n	80295fe <_free_r+0x26>
 802963c:	681c      	ldr	r4, [r3, #0]
 802963e:	685b      	ldr	r3, [r3, #4]
 8029640:	6053      	str	r3, [r2, #4]
 8029642:	440c      	add	r4, r1
 8029644:	6014      	str	r4, [r2, #0]
 8029646:	e7da      	b.n	80295fe <_free_r+0x26>
 8029648:	d902      	bls.n	8029650 <_free_r+0x78>
 802964a:	230c      	movs	r3, #12
 802964c:	6003      	str	r3, [r0, #0]
 802964e:	e7d6      	b.n	80295fe <_free_r+0x26>
 8029650:	6825      	ldr	r5, [r4, #0]
 8029652:	1961      	adds	r1, r4, r5
 8029654:	428b      	cmp	r3, r1
 8029656:	bf04      	itt	eq
 8029658:	6819      	ldreq	r1, [r3, #0]
 802965a:	685b      	ldreq	r3, [r3, #4]
 802965c:	6063      	str	r3, [r4, #4]
 802965e:	bf04      	itt	eq
 8029660:	1949      	addeq	r1, r1, r5
 8029662:	6021      	streq	r1, [r4, #0]
 8029664:	6054      	str	r4, [r2, #4]
 8029666:	e7ca      	b.n	80295fe <_free_r+0x26>
 8029668:	b003      	add	sp, #12
 802966a:	bd30      	pop	{r4, r5, pc}
 802966c:	24007918 	.word	0x24007918

08029670 <__ssputs_r>:
 8029670:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8029674:	688e      	ldr	r6, [r1, #8]
 8029676:	461f      	mov	r7, r3
 8029678:	42be      	cmp	r6, r7
 802967a:	680b      	ldr	r3, [r1, #0]
 802967c:	4682      	mov	sl, r0
 802967e:	460c      	mov	r4, r1
 8029680:	4690      	mov	r8, r2
 8029682:	d82c      	bhi.n	80296de <__ssputs_r+0x6e>
 8029684:	898a      	ldrh	r2, [r1, #12]
 8029686:	f412 6f90 	tst.w	r2, #1152	; 0x480
 802968a:	d026      	beq.n	80296da <__ssputs_r+0x6a>
 802968c:	6965      	ldr	r5, [r4, #20]
 802968e:	6909      	ldr	r1, [r1, #16]
 8029690:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8029694:	eba3 0901 	sub.w	r9, r3, r1
 8029698:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802969c:	1c7b      	adds	r3, r7, #1
 802969e:	444b      	add	r3, r9
 80296a0:	106d      	asrs	r5, r5, #1
 80296a2:	429d      	cmp	r5, r3
 80296a4:	bf38      	it	cc
 80296a6:	461d      	movcc	r5, r3
 80296a8:	0553      	lsls	r3, r2, #21
 80296aa:	d527      	bpl.n	80296fc <__ssputs_r+0x8c>
 80296ac:	4629      	mov	r1, r5
 80296ae:	f7ff fc85 	bl	8028fbc <_malloc_r>
 80296b2:	4606      	mov	r6, r0
 80296b4:	b360      	cbz	r0, 8029710 <__ssputs_r+0xa0>
 80296b6:	6921      	ldr	r1, [r4, #16]
 80296b8:	464a      	mov	r2, r9
 80296ba:	f7ff ff20 	bl	80294fe <memcpy>
 80296be:	89a3      	ldrh	r3, [r4, #12]
 80296c0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80296c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80296c8:	81a3      	strh	r3, [r4, #12]
 80296ca:	6126      	str	r6, [r4, #16]
 80296cc:	6165      	str	r5, [r4, #20]
 80296ce:	444e      	add	r6, r9
 80296d0:	eba5 0509 	sub.w	r5, r5, r9
 80296d4:	6026      	str	r6, [r4, #0]
 80296d6:	60a5      	str	r5, [r4, #8]
 80296d8:	463e      	mov	r6, r7
 80296da:	42be      	cmp	r6, r7
 80296dc:	d900      	bls.n	80296e0 <__ssputs_r+0x70>
 80296de:	463e      	mov	r6, r7
 80296e0:	6820      	ldr	r0, [r4, #0]
 80296e2:	4632      	mov	r2, r6
 80296e4:	4641      	mov	r1, r8
 80296e6:	f000 fd33 	bl	802a150 <memmove>
 80296ea:	68a3      	ldr	r3, [r4, #8]
 80296ec:	1b9b      	subs	r3, r3, r6
 80296ee:	60a3      	str	r3, [r4, #8]
 80296f0:	6823      	ldr	r3, [r4, #0]
 80296f2:	4433      	add	r3, r6
 80296f4:	6023      	str	r3, [r4, #0]
 80296f6:	2000      	movs	r0, #0
 80296f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80296fc:	462a      	mov	r2, r5
 80296fe:	f000 fd41 	bl	802a184 <_realloc_r>
 8029702:	4606      	mov	r6, r0
 8029704:	2800      	cmp	r0, #0
 8029706:	d1e0      	bne.n	80296ca <__ssputs_r+0x5a>
 8029708:	6921      	ldr	r1, [r4, #16]
 802970a:	4650      	mov	r0, sl
 802970c:	f7ff ff64 	bl	80295d8 <_free_r>
 8029710:	230c      	movs	r3, #12
 8029712:	f8ca 3000 	str.w	r3, [sl]
 8029716:	89a3      	ldrh	r3, [r4, #12]
 8029718:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802971c:	81a3      	strh	r3, [r4, #12]
 802971e:	f04f 30ff 	mov.w	r0, #4294967295
 8029722:	e7e9      	b.n	80296f8 <__ssputs_r+0x88>

08029724 <_svfiprintf_r>:
 8029724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029728:	4698      	mov	r8, r3
 802972a:	898b      	ldrh	r3, [r1, #12]
 802972c:	061b      	lsls	r3, r3, #24
 802972e:	b09d      	sub	sp, #116	; 0x74
 8029730:	4607      	mov	r7, r0
 8029732:	460d      	mov	r5, r1
 8029734:	4614      	mov	r4, r2
 8029736:	d50e      	bpl.n	8029756 <_svfiprintf_r+0x32>
 8029738:	690b      	ldr	r3, [r1, #16]
 802973a:	b963      	cbnz	r3, 8029756 <_svfiprintf_r+0x32>
 802973c:	2140      	movs	r1, #64	; 0x40
 802973e:	f7ff fc3d 	bl	8028fbc <_malloc_r>
 8029742:	6028      	str	r0, [r5, #0]
 8029744:	6128      	str	r0, [r5, #16]
 8029746:	b920      	cbnz	r0, 8029752 <_svfiprintf_r+0x2e>
 8029748:	230c      	movs	r3, #12
 802974a:	603b      	str	r3, [r7, #0]
 802974c:	f04f 30ff 	mov.w	r0, #4294967295
 8029750:	e0d0      	b.n	80298f4 <_svfiprintf_r+0x1d0>
 8029752:	2340      	movs	r3, #64	; 0x40
 8029754:	616b      	str	r3, [r5, #20]
 8029756:	2300      	movs	r3, #0
 8029758:	9309      	str	r3, [sp, #36]	; 0x24
 802975a:	2320      	movs	r3, #32
 802975c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8029760:	f8cd 800c 	str.w	r8, [sp, #12]
 8029764:	2330      	movs	r3, #48	; 0x30
 8029766:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 802990c <_svfiprintf_r+0x1e8>
 802976a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802976e:	f04f 0901 	mov.w	r9, #1
 8029772:	4623      	mov	r3, r4
 8029774:	469a      	mov	sl, r3
 8029776:	f813 2b01 	ldrb.w	r2, [r3], #1
 802977a:	b10a      	cbz	r2, 8029780 <_svfiprintf_r+0x5c>
 802977c:	2a25      	cmp	r2, #37	; 0x25
 802977e:	d1f9      	bne.n	8029774 <_svfiprintf_r+0x50>
 8029780:	ebba 0b04 	subs.w	fp, sl, r4
 8029784:	d00b      	beq.n	802979e <_svfiprintf_r+0x7a>
 8029786:	465b      	mov	r3, fp
 8029788:	4622      	mov	r2, r4
 802978a:	4629      	mov	r1, r5
 802978c:	4638      	mov	r0, r7
 802978e:	f7ff ff6f 	bl	8029670 <__ssputs_r>
 8029792:	3001      	adds	r0, #1
 8029794:	f000 80a9 	beq.w	80298ea <_svfiprintf_r+0x1c6>
 8029798:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802979a:	445a      	add	r2, fp
 802979c:	9209      	str	r2, [sp, #36]	; 0x24
 802979e:	f89a 3000 	ldrb.w	r3, [sl]
 80297a2:	2b00      	cmp	r3, #0
 80297a4:	f000 80a1 	beq.w	80298ea <_svfiprintf_r+0x1c6>
 80297a8:	2300      	movs	r3, #0
 80297aa:	f04f 32ff 	mov.w	r2, #4294967295
 80297ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80297b2:	f10a 0a01 	add.w	sl, sl, #1
 80297b6:	9304      	str	r3, [sp, #16]
 80297b8:	9307      	str	r3, [sp, #28]
 80297ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80297be:	931a      	str	r3, [sp, #104]	; 0x68
 80297c0:	4654      	mov	r4, sl
 80297c2:	2205      	movs	r2, #5
 80297c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80297c8:	4850      	ldr	r0, [pc, #320]	; (802990c <_svfiprintf_r+0x1e8>)
 80297ca:	f7d6 fda9 	bl	8000320 <memchr>
 80297ce:	9a04      	ldr	r2, [sp, #16]
 80297d0:	b9d8      	cbnz	r0, 802980a <_svfiprintf_r+0xe6>
 80297d2:	06d0      	lsls	r0, r2, #27
 80297d4:	bf44      	itt	mi
 80297d6:	2320      	movmi	r3, #32
 80297d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80297dc:	0711      	lsls	r1, r2, #28
 80297de:	bf44      	itt	mi
 80297e0:	232b      	movmi	r3, #43	; 0x2b
 80297e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80297e6:	f89a 3000 	ldrb.w	r3, [sl]
 80297ea:	2b2a      	cmp	r3, #42	; 0x2a
 80297ec:	d015      	beq.n	802981a <_svfiprintf_r+0xf6>
 80297ee:	9a07      	ldr	r2, [sp, #28]
 80297f0:	4654      	mov	r4, sl
 80297f2:	2000      	movs	r0, #0
 80297f4:	f04f 0c0a 	mov.w	ip, #10
 80297f8:	4621      	mov	r1, r4
 80297fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80297fe:	3b30      	subs	r3, #48	; 0x30
 8029800:	2b09      	cmp	r3, #9
 8029802:	d94d      	bls.n	80298a0 <_svfiprintf_r+0x17c>
 8029804:	b1b0      	cbz	r0, 8029834 <_svfiprintf_r+0x110>
 8029806:	9207      	str	r2, [sp, #28]
 8029808:	e014      	b.n	8029834 <_svfiprintf_r+0x110>
 802980a:	eba0 0308 	sub.w	r3, r0, r8
 802980e:	fa09 f303 	lsl.w	r3, r9, r3
 8029812:	4313      	orrs	r3, r2
 8029814:	9304      	str	r3, [sp, #16]
 8029816:	46a2      	mov	sl, r4
 8029818:	e7d2      	b.n	80297c0 <_svfiprintf_r+0x9c>
 802981a:	9b03      	ldr	r3, [sp, #12]
 802981c:	1d19      	adds	r1, r3, #4
 802981e:	681b      	ldr	r3, [r3, #0]
 8029820:	9103      	str	r1, [sp, #12]
 8029822:	2b00      	cmp	r3, #0
 8029824:	bfbb      	ittet	lt
 8029826:	425b      	neglt	r3, r3
 8029828:	f042 0202 	orrlt.w	r2, r2, #2
 802982c:	9307      	strge	r3, [sp, #28]
 802982e:	9307      	strlt	r3, [sp, #28]
 8029830:	bfb8      	it	lt
 8029832:	9204      	strlt	r2, [sp, #16]
 8029834:	7823      	ldrb	r3, [r4, #0]
 8029836:	2b2e      	cmp	r3, #46	; 0x2e
 8029838:	d10c      	bne.n	8029854 <_svfiprintf_r+0x130>
 802983a:	7863      	ldrb	r3, [r4, #1]
 802983c:	2b2a      	cmp	r3, #42	; 0x2a
 802983e:	d134      	bne.n	80298aa <_svfiprintf_r+0x186>
 8029840:	9b03      	ldr	r3, [sp, #12]
 8029842:	1d1a      	adds	r2, r3, #4
 8029844:	681b      	ldr	r3, [r3, #0]
 8029846:	9203      	str	r2, [sp, #12]
 8029848:	2b00      	cmp	r3, #0
 802984a:	bfb8      	it	lt
 802984c:	f04f 33ff 	movlt.w	r3, #4294967295
 8029850:	3402      	adds	r4, #2
 8029852:	9305      	str	r3, [sp, #20]
 8029854:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 802991c <_svfiprintf_r+0x1f8>
 8029858:	7821      	ldrb	r1, [r4, #0]
 802985a:	2203      	movs	r2, #3
 802985c:	4650      	mov	r0, sl
 802985e:	f7d6 fd5f 	bl	8000320 <memchr>
 8029862:	b138      	cbz	r0, 8029874 <_svfiprintf_r+0x150>
 8029864:	9b04      	ldr	r3, [sp, #16]
 8029866:	eba0 000a 	sub.w	r0, r0, sl
 802986a:	2240      	movs	r2, #64	; 0x40
 802986c:	4082      	lsls	r2, r0
 802986e:	4313      	orrs	r3, r2
 8029870:	3401      	adds	r4, #1
 8029872:	9304      	str	r3, [sp, #16]
 8029874:	f814 1b01 	ldrb.w	r1, [r4], #1
 8029878:	4825      	ldr	r0, [pc, #148]	; (8029910 <_svfiprintf_r+0x1ec>)
 802987a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802987e:	2206      	movs	r2, #6
 8029880:	f7d6 fd4e 	bl	8000320 <memchr>
 8029884:	2800      	cmp	r0, #0
 8029886:	d038      	beq.n	80298fa <_svfiprintf_r+0x1d6>
 8029888:	4b22      	ldr	r3, [pc, #136]	; (8029914 <_svfiprintf_r+0x1f0>)
 802988a:	bb1b      	cbnz	r3, 80298d4 <_svfiprintf_r+0x1b0>
 802988c:	9b03      	ldr	r3, [sp, #12]
 802988e:	3307      	adds	r3, #7
 8029890:	f023 0307 	bic.w	r3, r3, #7
 8029894:	3308      	adds	r3, #8
 8029896:	9303      	str	r3, [sp, #12]
 8029898:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802989a:	4433      	add	r3, r6
 802989c:	9309      	str	r3, [sp, #36]	; 0x24
 802989e:	e768      	b.n	8029772 <_svfiprintf_r+0x4e>
 80298a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80298a4:	460c      	mov	r4, r1
 80298a6:	2001      	movs	r0, #1
 80298a8:	e7a6      	b.n	80297f8 <_svfiprintf_r+0xd4>
 80298aa:	2300      	movs	r3, #0
 80298ac:	3401      	adds	r4, #1
 80298ae:	9305      	str	r3, [sp, #20]
 80298b0:	4619      	mov	r1, r3
 80298b2:	f04f 0c0a 	mov.w	ip, #10
 80298b6:	4620      	mov	r0, r4
 80298b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80298bc:	3a30      	subs	r2, #48	; 0x30
 80298be:	2a09      	cmp	r2, #9
 80298c0:	d903      	bls.n	80298ca <_svfiprintf_r+0x1a6>
 80298c2:	2b00      	cmp	r3, #0
 80298c4:	d0c6      	beq.n	8029854 <_svfiprintf_r+0x130>
 80298c6:	9105      	str	r1, [sp, #20]
 80298c8:	e7c4      	b.n	8029854 <_svfiprintf_r+0x130>
 80298ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80298ce:	4604      	mov	r4, r0
 80298d0:	2301      	movs	r3, #1
 80298d2:	e7f0      	b.n	80298b6 <_svfiprintf_r+0x192>
 80298d4:	ab03      	add	r3, sp, #12
 80298d6:	9300      	str	r3, [sp, #0]
 80298d8:	462a      	mov	r2, r5
 80298da:	4b0f      	ldr	r3, [pc, #60]	; (8029918 <_svfiprintf_r+0x1f4>)
 80298dc:	a904      	add	r1, sp, #16
 80298de:	4638      	mov	r0, r7
 80298e0:	f3af 8000 	nop.w
 80298e4:	1c42      	adds	r2, r0, #1
 80298e6:	4606      	mov	r6, r0
 80298e8:	d1d6      	bne.n	8029898 <_svfiprintf_r+0x174>
 80298ea:	89ab      	ldrh	r3, [r5, #12]
 80298ec:	065b      	lsls	r3, r3, #25
 80298ee:	f53f af2d 	bmi.w	802974c <_svfiprintf_r+0x28>
 80298f2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80298f4:	b01d      	add	sp, #116	; 0x74
 80298f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80298fa:	ab03      	add	r3, sp, #12
 80298fc:	9300      	str	r3, [sp, #0]
 80298fe:	462a      	mov	r2, r5
 8029900:	4b05      	ldr	r3, [pc, #20]	; (8029918 <_svfiprintf_r+0x1f4>)
 8029902:	a904      	add	r1, sp, #16
 8029904:	4638      	mov	r0, r7
 8029906:	f000 f9bd 	bl	8029c84 <_printf_i>
 802990a:	e7eb      	b.n	80298e4 <_svfiprintf_r+0x1c0>
 802990c:	0802c144 	.word	0x0802c144
 8029910:	0802c14e 	.word	0x0802c14e
 8029914:	00000000 	.word	0x00000000
 8029918:	08029671 	.word	0x08029671
 802991c:	0802c14a 	.word	0x0802c14a

08029920 <__sfputc_r>:
 8029920:	6893      	ldr	r3, [r2, #8]
 8029922:	3b01      	subs	r3, #1
 8029924:	2b00      	cmp	r3, #0
 8029926:	b410      	push	{r4}
 8029928:	6093      	str	r3, [r2, #8]
 802992a:	da08      	bge.n	802993e <__sfputc_r+0x1e>
 802992c:	6994      	ldr	r4, [r2, #24]
 802992e:	42a3      	cmp	r3, r4
 8029930:	db01      	blt.n	8029936 <__sfputc_r+0x16>
 8029932:	290a      	cmp	r1, #10
 8029934:	d103      	bne.n	802993e <__sfputc_r+0x1e>
 8029936:	f85d 4b04 	ldr.w	r4, [sp], #4
 802993a:	f000 bb73 	b.w	802a024 <__swbuf_r>
 802993e:	6813      	ldr	r3, [r2, #0]
 8029940:	1c58      	adds	r0, r3, #1
 8029942:	6010      	str	r0, [r2, #0]
 8029944:	7019      	strb	r1, [r3, #0]
 8029946:	4608      	mov	r0, r1
 8029948:	f85d 4b04 	ldr.w	r4, [sp], #4
 802994c:	4770      	bx	lr

0802994e <__sfputs_r>:
 802994e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029950:	4606      	mov	r6, r0
 8029952:	460f      	mov	r7, r1
 8029954:	4614      	mov	r4, r2
 8029956:	18d5      	adds	r5, r2, r3
 8029958:	42ac      	cmp	r4, r5
 802995a:	d101      	bne.n	8029960 <__sfputs_r+0x12>
 802995c:	2000      	movs	r0, #0
 802995e:	e007      	b.n	8029970 <__sfputs_r+0x22>
 8029960:	f814 1b01 	ldrb.w	r1, [r4], #1
 8029964:	463a      	mov	r2, r7
 8029966:	4630      	mov	r0, r6
 8029968:	f7ff ffda 	bl	8029920 <__sfputc_r>
 802996c:	1c43      	adds	r3, r0, #1
 802996e:	d1f3      	bne.n	8029958 <__sfputs_r+0xa>
 8029970:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08029974 <_vfiprintf_r>:
 8029974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029978:	460d      	mov	r5, r1
 802997a:	b09d      	sub	sp, #116	; 0x74
 802997c:	4614      	mov	r4, r2
 802997e:	4698      	mov	r8, r3
 8029980:	4606      	mov	r6, r0
 8029982:	b118      	cbz	r0, 802998c <_vfiprintf_r+0x18>
 8029984:	6a03      	ldr	r3, [r0, #32]
 8029986:	b90b      	cbnz	r3, 802998c <_vfiprintf_r+0x18>
 8029988:	f7ff fc3e 	bl	8029208 <__sinit>
 802998c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802998e:	07d9      	lsls	r1, r3, #31
 8029990:	d405      	bmi.n	802999e <_vfiprintf_r+0x2a>
 8029992:	89ab      	ldrh	r3, [r5, #12]
 8029994:	059a      	lsls	r2, r3, #22
 8029996:	d402      	bmi.n	802999e <_vfiprintf_r+0x2a>
 8029998:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802999a:	f7ff fdae 	bl	80294fa <__retarget_lock_acquire_recursive>
 802999e:	89ab      	ldrh	r3, [r5, #12]
 80299a0:	071b      	lsls	r3, r3, #28
 80299a2:	d501      	bpl.n	80299a8 <_vfiprintf_r+0x34>
 80299a4:	692b      	ldr	r3, [r5, #16]
 80299a6:	b99b      	cbnz	r3, 80299d0 <_vfiprintf_r+0x5c>
 80299a8:	4629      	mov	r1, r5
 80299aa:	4630      	mov	r0, r6
 80299ac:	f000 fb78 	bl	802a0a0 <__swsetup_r>
 80299b0:	b170      	cbz	r0, 80299d0 <_vfiprintf_r+0x5c>
 80299b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80299b4:	07dc      	lsls	r4, r3, #31
 80299b6:	d504      	bpl.n	80299c2 <_vfiprintf_r+0x4e>
 80299b8:	f04f 30ff 	mov.w	r0, #4294967295
 80299bc:	b01d      	add	sp, #116	; 0x74
 80299be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80299c2:	89ab      	ldrh	r3, [r5, #12]
 80299c4:	0598      	lsls	r0, r3, #22
 80299c6:	d4f7      	bmi.n	80299b8 <_vfiprintf_r+0x44>
 80299c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80299ca:	f7ff fd97 	bl	80294fc <__retarget_lock_release_recursive>
 80299ce:	e7f3      	b.n	80299b8 <_vfiprintf_r+0x44>
 80299d0:	2300      	movs	r3, #0
 80299d2:	9309      	str	r3, [sp, #36]	; 0x24
 80299d4:	2320      	movs	r3, #32
 80299d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80299da:	f8cd 800c 	str.w	r8, [sp, #12]
 80299de:	2330      	movs	r3, #48	; 0x30
 80299e0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8029b94 <_vfiprintf_r+0x220>
 80299e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80299e8:	f04f 0901 	mov.w	r9, #1
 80299ec:	4623      	mov	r3, r4
 80299ee:	469a      	mov	sl, r3
 80299f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80299f4:	b10a      	cbz	r2, 80299fa <_vfiprintf_r+0x86>
 80299f6:	2a25      	cmp	r2, #37	; 0x25
 80299f8:	d1f9      	bne.n	80299ee <_vfiprintf_r+0x7a>
 80299fa:	ebba 0b04 	subs.w	fp, sl, r4
 80299fe:	d00b      	beq.n	8029a18 <_vfiprintf_r+0xa4>
 8029a00:	465b      	mov	r3, fp
 8029a02:	4622      	mov	r2, r4
 8029a04:	4629      	mov	r1, r5
 8029a06:	4630      	mov	r0, r6
 8029a08:	f7ff ffa1 	bl	802994e <__sfputs_r>
 8029a0c:	3001      	adds	r0, #1
 8029a0e:	f000 80a9 	beq.w	8029b64 <_vfiprintf_r+0x1f0>
 8029a12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8029a14:	445a      	add	r2, fp
 8029a16:	9209      	str	r2, [sp, #36]	; 0x24
 8029a18:	f89a 3000 	ldrb.w	r3, [sl]
 8029a1c:	2b00      	cmp	r3, #0
 8029a1e:	f000 80a1 	beq.w	8029b64 <_vfiprintf_r+0x1f0>
 8029a22:	2300      	movs	r3, #0
 8029a24:	f04f 32ff 	mov.w	r2, #4294967295
 8029a28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8029a2c:	f10a 0a01 	add.w	sl, sl, #1
 8029a30:	9304      	str	r3, [sp, #16]
 8029a32:	9307      	str	r3, [sp, #28]
 8029a34:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8029a38:	931a      	str	r3, [sp, #104]	; 0x68
 8029a3a:	4654      	mov	r4, sl
 8029a3c:	2205      	movs	r2, #5
 8029a3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8029a42:	4854      	ldr	r0, [pc, #336]	; (8029b94 <_vfiprintf_r+0x220>)
 8029a44:	f7d6 fc6c 	bl	8000320 <memchr>
 8029a48:	9a04      	ldr	r2, [sp, #16]
 8029a4a:	b9d8      	cbnz	r0, 8029a84 <_vfiprintf_r+0x110>
 8029a4c:	06d1      	lsls	r1, r2, #27
 8029a4e:	bf44      	itt	mi
 8029a50:	2320      	movmi	r3, #32
 8029a52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8029a56:	0713      	lsls	r3, r2, #28
 8029a58:	bf44      	itt	mi
 8029a5a:	232b      	movmi	r3, #43	; 0x2b
 8029a5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8029a60:	f89a 3000 	ldrb.w	r3, [sl]
 8029a64:	2b2a      	cmp	r3, #42	; 0x2a
 8029a66:	d015      	beq.n	8029a94 <_vfiprintf_r+0x120>
 8029a68:	9a07      	ldr	r2, [sp, #28]
 8029a6a:	4654      	mov	r4, sl
 8029a6c:	2000      	movs	r0, #0
 8029a6e:	f04f 0c0a 	mov.w	ip, #10
 8029a72:	4621      	mov	r1, r4
 8029a74:	f811 3b01 	ldrb.w	r3, [r1], #1
 8029a78:	3b30      	subs	r3, #48	; 0x30
 8029a7a:	2b09      	cmp	r3, #9
 8029a7c:	d94d      	bls.n	8029b1a <_vfiprintf_r+0x1a6>
 8029a7e:	b1b0      	cbz	r0, 8029aae <_vfiprintf_r+0x13a>
 8029a80:	9207      	str	r2, [sp, #28]
 8029a82:	e014      	b.n	8029aae <_vfiprintf_r+0x13a>
 8029a84:	eba0 0308 	sub.w	r3, r0, r8
 8029a88:	fa09 f303 	lsl.w	r3, r9, r3
 8029a8c:	4313      	orrs	r3, r2
 8029a8e:	9304      	str	r3, [sp, #16]
 8029a90:	46a2      	mov	sl, r4
 8029a92:	e7d2      	b.n	8029a3a <_vfiprintf_r+0xc6>
 8029a94:	9b03      	ldr	r3, [sp, #12]
 8029a96:	1d19      	adds	r1, r3, #4
 8029a98:	681b      	ldr	r3, [r3, #0]
 8029a9a:	9103      	str	r1, [sp, #12]
 8029a9c:	2b00      	cmp	r3, #0
 8029a9e:	bfbb      	ittet	lt
 8029aa0:	425b      	neglt	r3, r3
 8029aa2:	f042 0202 	orrlt.w	r2, r2, #2
 8029aa6:	9307      	strge	r3, [sp, #28]
 8029aa8:	9307      	strlt	r3, [sp, #28]
 8029aaa:	bfb8      	it	lt
 8029aac:	9204      	strlt	r2, [sp, #16]
 8029aae:	7823      	ldrb	r3, [r4, #0]
 8029ab0:	2b2e      	cmp	r3, #46	; 0x2e
 8029ab2:	d10c      	bne.n	8029ace <_vfiprintf_r+0x15a>
 8029ab4:	7863      	ldrb	r3, [r4, #1]
 8029ab6:	2b2a      	cmp	r3, #42	; 0x2a
 8029ab8:	d134      	bne.n	8029b24 <_vfiprintf_r+0x1b0>
 8029aba:	9b03      	ldr	r3, [sp, #12]
 8029abc:	1d1a      	adds	r2, r3, #4
 8029abe:	681b      	ldr	r3, [r3, #0]
 8029ac0:	9203      	str	r2, [sp, #12]
 8029ac2:	2b00      	cmp	r3, #0
 8029ac4:	bfb8      	it	lt
 8029ac6:	f04f 33ff 	movlt.w	r3, #4294967295
 8029aca:	3402      	adds	r4, #2
 8029acc:	9305      	str	r3, [sp, #20]
 8029ace:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8029ba4 <_vfiprintf_r+0x230>
 8029ad2:	7821      	ldrb	r1, [r4, #0]
 8029ad4:	2203      	movs	r2, #3
 8029ad6:	4650      	mov	r0, sl
 8029ad8:	f7d6 fc22 	bl	8000320 <memchr>
 8029adc:	b138      	cbz	r0, 8029aee <_vfiprintf_r+0x17a>
 8029ade:	9b04      	ldr	r3, [sp, #16]
 8029ae0:	eba0 000a 	sub.w	r0, r0, sl
 8029ae4:	2240      	movs	r2, #64	; 0x40
 8029ae6:	4082      	lsls	r2, r0
 8029ae8:	4313      	orrs	r3, r2
 8029aea:	3401      	adds	r4, #1
 8029aec:	9304      	str	r3, [sp, #16]
 8029aee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8029af2:	4829      	ldr	r0, [pc, #164]	; (8029b98 <_vfiprintf_r+0x224>)
 8029af4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8029af8:	2206      	movs	r2, #6
 8029afa:	f7d6 fc11 	bl	8000320 <memchr>
 8029afe:	2800      	cmp	r0, #0
 8029b00:	d03f      	beq.n	8029b82 <_vfiprintf_r+0x20e>
 8029b02:	4b26      	ldr	r3, [pc, #152]	; (8029b9c <_vfiprintf_r+0x228>)
 8029b04:	bb1b      	cbnz	r3, 8029b4e <_vfiprintf_r+0x1da>
 8029b06:	9b03      	ldr	r3, [sp, #12]
 8029b08:	3307      	adds	r3, #7
 8029b0a:	f023 0307 	bic.w	r3, r3, #7
 8029b0e:	3308      	adds	r3, #8
 8029b10:	9303      	str	r3, [sp, #12]
 8029b12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8029b14:	443b      	add	r3, r7
 8029b16:	9309      	str	r3, [sp, #36]	; 0x24
 8029b18:	e768      	b.n	80299ec <_vfiprintf_r+0x78>
 8029b1a:	fb0c 3202 	mla	r2, ip, r2, r3
 8029b1e:	460c      	mov	r4, r1
 8029b20:	2001      	movs	r0, #1
 8029b22:	e7a6      	b.n	8029a72 <_vfiprintf_r+0xfe>
 8029b24:	2300      	movs	r3, #0
 8029b26:	3401      	adds	r4, #1
 8029b28:	9305      	str	r3, [sp, #20]
 8029b2a:	4619      	mov	r1, r3
 8029b2c:	f04f 0c0a 	mov.w	ip, #10
 8029b30:	4620      	mov	r0, r4
 8029b32:	f810 2b01 	ldrb.w	r2, [r0], #1
 8029b36:	3a30      	subs	r2, #48	; 0x30
 8029b38:	2a09      	cmp	r2, #9
 8029b3a:	d903      	bls.n	8029b44 <_vfiprintf_r+0x1d0>
 8029b3c:	2b00      	cmp	r3, #0
 8029b3e:	d0c6      	beq.n	8029ace <_vfiprintf_r+0x15a>
 8029b40:	9105      	str	r1, [sp, #20]
 8029b42:	e7c4      	b.n	8029ace <_vfiprintf_r+0x15a>
 8029b44:	fb0c 2101 	mla	r1, ip, r1, r2
 8029b48:	4604      	mov	r4, r0
 8029b4a:	2301      	movs	r3, #1
 8029b4c:	e7f0      	b.n	8029b30 <_vfiprintf_r+0x1bc>
 8029b4e:	ab03      	add	r3, sp, #12
 8029b50:	9300      	str	r3, [sp, #0]
 8029b52:	462a      	mov	r2, r5
 8029b54:	4b12      	ldr	r3, [pc, #72]	; (8029ba0 <_vfiprintf_r+0x22c>)
 8029b56:	a904      	add	r1, sp, #16
 8029b58:	4630      	mov	r0, r6
 8029b5a:	f3af 8000 	nop.w
 8029b5e:	4607      	mov	r7, r0
 8029b60:	1c78      	adds	r0, r7, #1
 8029b62:	d1d6      	bne.n	8029b12 <_vfiprintf_r+0x19e>
 8029b64:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8029b66:	07d9      	lsls	r1, r3, #31
 8029b68:	d405      	bmi.n	8029b76 <_vfiprintf_r+0x202>
 8029b6a:	89ab      	ldrh	r3, [r5, #12]
 8029b6c:	059a      	lsls	r2, r3, #22
 8029b6e:	d402      	bmi.n	8029b76 <_vfiprintf_r+0x202>
 8029b70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8029b72:	f7ff fcc3 	bl	80294fc <__retarget_lock_release_recursive>
 8029b76:	89ab      	ldrh	r3, [r5, #12]
 8029b78:	065b      	lsls	r3, r3, #25
 8029b7a:	f53f af1d 	bmi.w	80299b8 <_vfiprintf_r+0x44>
 8029b7e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8029b80:	e71c      	b.n	80299bc <_vfiprintf_r+0x48>
 8029b82:	ab03      	add	r3, sp, #12
 8029b84:	9300      	str	r3, [sp, #0]
 8029b86:	462a      	mov	r2, r5
 8029b88:	4b05      	ldr	r3, [pc, #20]	; (8029ba0 <_vfiprintf_r+0x22c>)
 8029b8a:	a904      	add	r1, sp, #16
 8029b8c:	4630      	mov	r0, r6
 8029b8e:	f000 f879 	bl	8029c84 <_printf_i>
 8029b92:	e7e4      	b.n	8029b5e <_vfiprintf_r+0x1ea>
 8029b94:	0802c144 	.word	0x0802c144
 8029b98:	0802c14e 	.word	0x0802c14e
 8029b9c:	00000000 	.word	0x00000000
 8029ba0:	0802994f 	.word	0x0802994f
 8029ba4:	0802c14a 	.word	0x0802c14a

08029ba8 <_printf_common>:
 8029ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8029bac:	4616      	mov	r6, r2
 8029bae:	4699      	mov	r9, r3
 8029bb0:	688a      	ldr	r2, [r1, #8]
 8029bb2:	690b      	ldr	r3, [r1, #16]
 8029bb4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8029bb8:	4293      	cmp	r3, r2
 8029bba:	bfb8      	it	lt
 8029bbc:	4613      	movlt	r3, r2
 8029bbe:	6033      	str	r3, [r6, #0]
 8029bc0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8029bc4:	4607      	mov	r7, r0
 8029bc6:	460c      	mov	r4, r1
 8029bc8:	b10a      	cbz	r2, 8029bce <_printf_common+0x26>
 8029bca:	3301      	adds	r3, #1
 8029bcc:	6033      	str	r3, [r6, #0]
 8029bce:	6823      	ldr	r3, [r4, #0]
 8029bd0:	0699      	lsls	r1, r3, #26
 8029bd2:	bf42      	ittt	mi
 8029bd4:	6833      	ldrmi	r3, [r6, #0]
 8029bd6:	3302      	addmi	r3, #2
 8029bd8:	6033      	strmi	r3, [r6, #0]
 8029bda:	6825      	ldr	r5, [r4, #0]
 8029bdc:	f015 0506 	ands.w	r5, r5, #6
 8029be0:	d106      	bne.n	8029bf0 <_printf_common+0x48>
 8029be2:	f104 0a19 	add.w	sl, r4, #25
 8029be6:	68e3      	ldr	r3, [r4, #12]
 8029be8:	6832      	ldr	r2, [r6, #0]
 8029bea:	1a9b      	subs	r3, r3, r2
 8029bec:	42ab      	cmp	r3, r5
 8029bee:	dc26      	bgt.n	8029c3e <_printf_common+0x96>
 8029bf0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8029bf4:	1e13      	subs	r3, r2, #0
 8029bf6:	6822      	ldr	r2, [r4, #0]
 8029bf8:	bf18      	it	ne
 8029bfa:	2301      	movne	r3, #1
 8029bfc:	0692      	lsls	r2, r2, #26
 8029bfe:	d42b      	bmi.n	8029c58 <_printf_common+0xb0>
 8029c00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8029c04:	4649      	mov	r1, r9
 8029c06:	4638      	mov	r0, r7
 8029c08:	47c0      	blx	r8
 8029c0a:	3001      	adds	r0, #1
 8029c0c:	d01e      	beq.n	8029c4c <_printf_common+0xa4>
 8029c0e:	6823      	ldr	r3, [r4, #0]
 8029c10:	6922      	ldr	r2, [r4, #16]
 8029c12:	f003 0306 	and.w	r3, r3, #6
 8029c16:	2b04      	cmp	r3, #4
 8029c18:	bf02      	ittt	eq
 8029c1a:	68e5      	ldreq	r5, [r4, #12]
 8029c1c:	6833      	ldreq	r3, [r6, #0]
 8029c1e:	1aed      	subeq	r5, r5, r3
 8029c20:	68a3      	ldr	r3, [r4, #8]
 8029c22:	bf0c      	ite	eq
 8029c24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8029c28:	2500      	movne	r5, #0
 8029c2a:	4293      	cmp	r3, r2
 8029c2c:	bfc4      	itt	gt
 8029c2e:	1a9b      	subgt	r3, r3, r2
 8029c30:	18ed      	addgt	r5, r5, r3
 8029c32:	2600      	movs	r6, #0
 8029c34:	341a      	adds	r4, #26
 8029c36:	42b5      	cmp	r5, r6
 8029c38:	d11a      	bne.n	8029c70 <_printf_common+0xc8>
 8029c3a:	2000      	movs	r0, #0
 8029c3c:	e008      	b.n	8029c50 <_printf_common+0xa8>
 8029c3e:	2301      	movs	r3, #1
 8029c40:	4652      	mov	r2, sl
 8029c42:	4649      	mov	r1, r9
 8029c44:	4638      	mov	r0, r7
 8029c46:	47c0      	blx	r8
 8029c48:	3001      	adds	r0, #1
 8029c4a:	d103      	bne.n	8029c54 <_printf_common+0xac>
 8029c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8029c50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8029c54:	3501      	adds	r5, #1
 8029c56:	e7c6      	b.n	8029be6 <_printf_common+0x3e>
 8029c58:	18e1      	adds	r1, r4, r3
 8029c5a:	1c5a      	adds	r2, r3, #1
 8029c5c:	2030      	movs	r0, #48	; 0x30
 8029c5e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8029c62:	4422      	add	r2, r4
 8029c64:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8029c68:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8029c6c:	3302      	adds	r3, #2
 8029c6e:	e7c7      	b.n	8029c00 <_printf_common+0x58>
 8029c70:	2301      	movs	r3, #1
 8029c72:	4622      	mov	r2, r4
 8029c74:	4649      	mov	r1, r9
 8029c76:	4638      	mov	r0, r7
 8029c78:	47c0      	blx	r8
 8029c7a:	3001      	adds	r0, #1
 8029c7c:	d0e6      	beq.n	8029c4c <_printf_common+0xa4>
 8029c7e:	3601      	adds	r6, #1
 8029c80:	e7d9      	b.n	8029c36 <_printf_common+0x8e>
	...

08029c84 <_printf_i>:
 8029c84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8029c88:	7e0f      	ldrb	r7, [r1, #24]
 8029c8a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8029c8c:	2f78      	cmp	r7, #120	; 0x78
 8029c8e:	4691      	mov	r9, r2
 8029c90:	4680      	mov	r8, r0
 8029c92:	460c      	mov	r4, r1
 8029c94:	469a      	mov	sl, r3
 8029c96:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8029c9a:	d807      	bhi.n	8029cac <_printf_i+0x28>
 8029c9c:	2f62      	cmp	r7, #98	; 0x62
 8029c9e:	d80a      	bhi.n	8029cb6 <_printf_i+0x32>
 8029ca0:	2f00      	cmp	r7, #0
 8029ca2:	f000 80d4 	beq.w	8029e4e <_printf_i+0x1ca>
 8029ca6:	2f58      	cmp	r7, #88	; 0x58
 8029ca8:	f000 80c0 	beq.w	8029e2c <_printf_i+0x1a8>
 8029cac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8029cb0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8029cb4:	e03a      	b.n	8029d2c <_printf_i+0xa8>
 8029cb6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8029cba:	2b15      	cmp	r3, #21
 8029cbc:	d8f6      	bhi.n	8029cac <_printf_i+0x28>
 8029cbe:	a101      	add	r1, pc, #4	; (adr r1, 8029cc4 <_printf_i+0x40>)
 8029cc0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8029cc4:	08029d1d 	.word	0x08029d1d
 8029cc8:	08029d31 	.word	0x08029d31
 8029ccc:	08029cad 	.word	0x08029cad
 8029cd0:	08029cad 	.word	0x08029cad
 8029cd4:	08029cad 	.word	0x08029cad
 8029cd8:	08029cad 	.word	0x08029cad
 8029cdc:	08029d31 	.word	0x08029d31
 8029ce0:	08029cad 	.word	0x08029cad
 8029ce4:	08029cad 	.word	0x08029cad
 8029ce8:	08029cad 	.word	0x08029cad
 8029cec:	08029cad 	.word	0x08029cad
 8029cf0:	08029e35 	.word	0x08029e35
 8029cf4:	08029d5d 	.word	0x08029d5d
 8029cf8:	08029def 	.word	0x08029def
 8029cfc:	08029cad 	.word	0x08029cad
 8029d00:	08029cad 	.word	0x08029cad
 8029d04:	08029e57 	.word	0x08029e57
 8029d08:	08029cad 	.word	0x08029cad
 8029d0c:	08029d5d 	.word	0x08029d5d
 8029d10:	08029cad 	.word	0x08029cad
 8029d14:	08029cad 	.word	0x08029cad
 8029d18:	08029df7 	.word	0x08029df7
 8029d1c:	682b      	ldr	r3, [r5, #0]
 8029d1e:	1d1a      	adds	r2, r3, #4
 8029d20:	681b      	ldr	r3, [r3, #0]
 8029d22:	602a      	str	r2, [r5, #0]
 8029d24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8029d28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8029d2c:	2301      	movs	r3, #1
 8029d2e:	e09f      	b.n	8029e70 <_printf_i+0x1ec>
 8029d30:	6820      	ldr	r0, [r4, #0]
 8029d32:	682b      	ldr	r3, [r5, #0]
 8029d34:	0607      	lsls	r7, r0, #24
 8029d36:	f103 0104 	add.w	r1, r3, #4
 8029d3a:	6029      	str	r1, [r5, #0]
 8029d3c:	d501      	bpl.n	8029d42 <_printf_i+0xbe>
 8029d3e:	681e      	ldr	r6, [r3, #0]
 8029d40:	e003      	b.n	8029d4a <_printf_i+0xc6>
 8029d42:	0646      	lsls	r6, r0, #25
 8029d44:	d5fb      	bpl.n	8029d3e <_printf_i+0xba>
 8029d46:	f9b3 6000 	ldrsh.w	r6, [r3]
 8029d4a:	2e00      	cmp	r6, #0
 8029d4c:	da03      	bge.n	8029d56 <_printf_i+0xd2>
 8029d4e:	232d      	movs	r3, #45	; 0x2d
 8029d50:	4276      	negs	r6, r6
 8029d52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8029d56:	485a      	ldr	r0, [pc, #360]	; (8029ec0 <_printf_i+0x23c>)
 8029d58:	230a      	movs	r3, #10
 8029d5a:	e012      	b.n	8029d82 <_printf_i+0xfe>
 8029d5c:	682b      	ldr	r3, [r5, #0]
 8029d5e:	6820      	ldr	r0, [r4, #0]
 8029d60:	1d19      	adds	r1, r3, #4
 8029d62:	6029      	str	r1, [r5, #0]
 8029d64:	0605      	lsls	r5, r0, #24
 8029d66:	d501      	bpl.n	8029d6c <_printf_i+0xe8>
 8029d68:	681e      	ldr	r6, [r3, #0]
 8029d6a:	e002      	b.n	8029d72 <_printf_i+0xee>
 8029d6c:	0641      	lsls	r1, r0, #25
 8029d6e:	d5fb      	bpl.n	8029d68 <_printf_i+0xe4>
 8029d70:	881e      	ldrh	r6, [r3, #0]
 8029d72:	4853      	ldr	r0, [pc, #332]	; (8029ec0 <_printf_i+0x23c>)
 8029d74:	2f6f      	cmp	r7, #111	; 0x6f
 8029d76:	bf0c      	ite	eq
 8029d78:	2308      	moveq	r3, #8
 8029d7a:	230a      	movne	r3, #10
 8029d7c:	2100      	movs	r1, #0
 8029d7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8029d82:	6865      	ldr	r5, [r4, #4]
 8029d84:	60a5      	str	r5, [r4, #8]
 8029d86:	2d00      	cmp	r5, #0
 8029d88:	bfa2      	ittt	ge
 8029d8a:	6821      	ldrge	r1, [r4, #0]
 8029d8c:	f021 0104 	bicge.w	r1, r1, #4
 8029d90:	6021      	strge	r1, [r4, #0]
 8029d92:	b90e      	cbnz	r6, 8029d98 <_printf_i+0x114>
 8029d94:	2d00      	cmp	r5, #0
 8029d96:	d04b      	beq.n	8029e30 <_printf_i+0x1ac>
 8029d98:	4615      	mov	r5, r2
 8029d9a:	fbb6 f1f3 	udiv	r1, r6, r3
 8029d9e:	fb03 6711 	mls	r7, r3, r1, r6
 8029da2:	5dc7      	ldrb	r7, [r0, r7]
 8029da4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8029da8:	4637      	mov	r7, r6
 8029daa:	42bb      	cmp	r3, r7
 8029dac:	460e      	mov	r6, r1
 8029dae:	d9f4      	bls.n	8029d9a <_printf_i+0x116>
 8029db0:	2b08      	cmp	r3, #8
 8029db2:	d10b      	bne.n	8029dcc <_printf_i+0x148>
 8029db4:	6823      	ldr	r3, [r4, #0]
 8029db6:	07de      	lsls	r6, r3, #31
 8029db8:	d508      	bpl.n	8029dcc <_printf_i+0x148>
 8029dba:	6923      	ldr	r3, [r4, #16]
 8029dbc:	6861      	ldr	r1, [r4, #4]
 8029dbe:	4299      	cmp	r1, r3
 8029dc0:	bfde      	ittt	le
 8029dc2:	2330      	movle	r3, #48	; 0x30
 8029dc4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8029dc8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8029dcc:	1b52      	subs	r2, r2, r5
 8029dce:	6122      	str	r2, [r4, #16]
 8029dd0:	f8cd a000 	str.w	sl, [sp]
 8029dd4:	464b      	mov	r3, r9
 8029dd6:	aa03      	add	r2, sp, #12
 8029dd8:	4621      	mov	r1, r4
 8029dda:	4640      	mov	r0, r8
 8029ddc:	f7ff fee4 	bl	8029ba8 <_printf_common>
 8029de0:	3001      	adds	r0, #1
 8029de2:	d14a      	bne.n	8029e7a <_printf_i+0x1f6>
 8029de4:	f04f 30ff 	mov.w	r0, #4294967295
 8029de8:	b004      	add	sp, #16
 8029dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8029dee:	6823      	ldr	r3, [r4, #0]
 8029df0:	f043 0320 	orr.w	r3, r3, #32
 8029df4:	6023      	str	r3, [r4, #0]
 8029df6:	4833      	ldr	r0, [pc, #204]	; (8029ec4 <_printf_i+0x240>)
 8029df8:	2778      	movs	r7, #120	; 0x78
 8029dfa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8029dfe:	6823      	ldr	r3, [r4, #0]
 8029e00:	6829      	ldr	r1, [r5, #0]
 8029e02:	061f      	lsls	r7, r3, #24
 8029e04:	f851 6b04 	ldr.w	r6, [r1], #4
 8029e08:	d402      	bmi.n	8029e10 <_printf_i+0x18c>
 8029e0a:	065f      	lsls	r7, r3, #25
 8029e0c:	bf48      	it	mi
 8029e0e:	b2b6      	uxthmi	r6, r6
 8029e10:	07df      	lsls	r7, r3, #31
 8029e12:	bf48      	it	mi
 8029e14:	f043 0320 	orrmi.w	r3, r3, #32
 8029e18:	6029      	str	r1, [r5, #0]
 8029e1a:	bf48      	it	mi
 8029e1c:	6023      	strmi	r3, [r4, #0]
 8029e1e:	b91e      	cbnz	r6, 8029e28 <_printf_i+0x1a4>
 8029e20:	6823      	ldr	r3, [r4, #0]
 8029e22:	f023 0320 	bic.w	r3, r3, #32
 8029e26:	6023      	str	r3, [r4, #0]
 8029e28:	2310      	movs	r3, #16
 8029e2a:	e7a7      	b.n	8029d7c <_printf_i+0xf8>
 8029e2c:	4824      	ldr	r0, [pc, #144]	; (8029ec0 <_printf_i+0x23c>)
 8029e2e:	e7e4      	b.n	8029dfa <_printf_i+0x176>
 8029e30:	4615      	mov	r5, r2
 8029e32:	e7bd      	b.n	8029db0 <_printf_i+0x12c>
 8029e34:	682b      	ldr	r3, [r5, #0]
 8029e36:	6826      	ldr	r6, [r4, #0]
 8029e38:	6961      	ldr	r1, [r4, #20]
 8029e3a:	1d18      	adds	r0, r3, #4
 8029e3c:	6028      	str	r0, [r5, #0]
 8029e3e:	0635      	lsls	r5, r6, #24
 8029e40:	681b      	ldr	r3, [r3, #0]
 8029e42:	d501      	bpl.n	8029e48 <_printf_i+0x1c4>
 8029e44:	6019      	str	r1, [r3, #0]
 8029e46:	e002      	b.n	8029e4e <_printf_i+0x1ca>
 8029e48:	0670      	lsls	r0, r6, #25
 8029e4a:	d5fb      	bpl.n	8029e44 <_printf_i+0x1c0>
 8029e4c:	8019      	strh	r1, [r3, #0]
 8029e4e:	2300      	movs	r3, #0
 8029e50:	6123      	str	r3, [r4, #16]
 8029e52:	4615      	mov	r5, r2
 8029e54:	e7bc      	b.n	8029dd0 <_printf_i+0x14c>
 8029e56:	682b      	ldr	r3, [r5, #0]
 8029e58:	1d1a      	adds	r2, r3, #4
 8029e5a:	602a      	str	r2, [r5, #0]
 8029e5c:	681d      	ldr	r5, [r3, #0]
 8029e5e:	6862      	ldr	r2, [r4, #4]
 8029e60:	2100      	movs	r1, #0
 8029e62:	4628      	mov	r0, r5
 8029e64:	f7d6 fa5c 	bl	8000320 <memchr>
 8029e68:	b108      	cbz	r0, 8029e6e <_printf_i+0x1ea>
 8029e6a:	1b40      	subs	r0, r0, r5
 8029e6c:	6060      	str	r0, [r4, #4]
 8029e6e:	6863      	ldr	r3, [r4, #4]
 8029e70:	6123      	str	r3, [r4, #16]
 8029e72:	2300      	movs	r3, #0
 8029e74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8029e78:	e7aa      	b.n	8029dd0 <_printf_i+0x14c>
 8029e7a:	6923      	ldr	r3, [r4, #16]
 8029e7c:	462a      	mov	r2, r5
 8029e7e:	4649      	mov	r1, r9
 8029e80:	4640      	mov	r0, r8
 8029e82:	47d0      	blx	sl
 8029e84:	3001      	adds	r0, #1
 8029e86:	d0ad      	beq.n	8029de4 <_printf_i+0x160>
 8029e88:	6823      	ldr	r3, [r4, #0]
 8029e8a:	079b      	lsls	r3, r3, #30
 8029e8c:	d413      	bmi.n	8029eb6 <_printf_i+0x232>
 8029e8e:	68e0      	ldr	r0, [r4, #12]
 8029e90:	9b03      	ldr	r3, [sp, #12]
 8029e92:	4298      	cmp	r0, r3
 8029e94:	bfb8      	it	lt
 8029e96:	4618      	movlt	r0, r3
 8029e98:	e7a6      	b.n	8029de8 <_printf_i+0x164>
 8029e9a:	2301      	movs	r3, #1
 8029e9c:	4632      	mov	r2, r6
 8029e9e:	4649      	mov	r1, r9
 8029ea0:	4640      	mov	r0, r8
 8029ea2:	47d0      	blx	sl
 8029ea4:	3001      	adds	r0, #1
 8029ea6:	d09d      	beq.n	8029de4 <_printf_i+0x160>
 8029ea8:	3501      	adds	r5, #1
 8029eaa:	68e3      	ldr	r3, [r4, #12]
 8029eac:	9903      	ldr	r1, [sp, #12]
 8029eae:	1a5b      	subs	r3, r3, r1
 8029eb0:	42ab      	cmp	r3, r5
 8029eb2:	dcf2      	bgt.n	8029e9a <_printf_i+0x216>
 8029eb4:	e7eb      	b.n	8029e8e <_printf_i+0x20a>
 8029eb6:	2500      	movs	r5, #0
 8029eb8:	f104 0619 	add.w	r6, r4, #25
 8029ebc:	e7f5      	b.n	8029eaa <_printf_i+0x226>
 8029ebe:	bf00      	nop
 8029ec0:	0802c155 	.word	0x0802c155
 8029ec4:	0802c166 	.word	0x0802c166

08029ec8 <__sflush_r>:
 8029ec8:	898a      	ldrh	r2, [r1, #12]
 8029eca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8029ece:	4605      	mov	r5, r0
 8029ed0:	0710      	lsls	r0, r2, #28
 8029ed2:	460c      	mov	r4, r1
 8029ed4:	d458      	bmi.n	8029f88 <__sflush_r+0xc0>
 8029ed6:	684b      	ldr	r3, [r1, #4]
 8029ed8:	2b00      	cmp	r3, #0
 8029eda:	dc05      	bgt.n	8029ee8 <__sflush_r+0x20>
 8029edc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8029ede:	2b00      	cmp	r3, #0
 8029ee0:	dc02      	bgt.n	8029ee8 <__sflush_r+0x20>
 8029ee2:	2000      	movs	r0, #0
 8029ee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8029ee8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8029eea:	2e00      	cmp	r6, #0
 8029eec:	d0f9      	beq.n	8029ee2 <__sflush_r+0x1a>
 8029eee:	2300      	movs	r3, #0
 8029ef0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8029ef4:	682f      	ldr	r7, [r5, #0]
 8029ef6:	6a21      	ldr	r1, [r4, #32]
 8029ef8:	602b      	str	r3, [r5, #0]
 8029efa:	d032      	beq.n	8029f62 <__sflush_r+0x9a>
 8029efc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8029efe:	89a3      	ldrh	r3, [r4, #12]
 8029f00:	075a      	lsls	r2, r3, #29
 8029f02:	d505      	bpl.n	8029f10 <__sflush_r+0x48>
 8029f04:	6863      	ldr	r3, [r4, #4]
 8029f06:	1ac0      	subs	r0, r0, r3
 8029f08:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8029f0a:	b10b      	cbz	r3, 8029f10 <__sflush_r+0x48>
 8029f0c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8029f0e:	1ac0      	subs	r0, r0, r3
 8029f10:	2300      	movs	r3, #0
 8029f12:	4602      	mov	r2, r0
 8029f14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8029f16:	6a21      	ldr	r1, [r4, #32]
 8029f18:	4628      	mov	r0, r5
 8029f1a:	47b0      	blx	r6
 8029f1c:	1c43      	adds	r3, r0, #1
 8029f1e:	89a3      	ldrh	r3, [r4, #12]
 8029f20:	d106      	bne.n	8029f30 <__sflush_r+0x68>
 8029f22:	6829      	ldr	r1, [r5, #0]
 8029f24:	291d      	cmp	r1, #29
 8029f26:	d82b      	bhi.n	8029f80 <__sflush_r+0xb8>
 8029f28:	4a29      	ldr	r2, [pc, #164]	; (8029fd0 <__sflush_r+0x108>)
 8029f2a:	410a      	asrs	r2, r1
 8029f2c:	07d6      	lsls	r6, r2, #31
 8029f2e:	d427      	bmi.n	8029f80 <__sflush_r+0xb8>
 8029f30:	2200      	movs	r2, #0
 8029f32:	6062      	str	r2, [r4, #4]
 8029f34:	04d9      	lsls	r1, r3, #19
 8029f36:	6922      	ldr	r2, [r4, #16]
 8029f38:	6022      	str	r2, [r4, #0]
 8029f3a:	d504      	bpl.n	8029f46 <__sflush_r+0x7e>
 8029f3c:	1c42      	adds	r2, r0, #1
 8029f3e:	d101      	bne.n	8029f44 <__sflush_r+0x7c>
 8029f40:	682b      	ldr	r3, [r5, #0]
 8029f42:	b903      	cbnz	r3, 8029f46 <__sflush_r+0x7e>
 8029f44:	6560      	str	r0, [r4, #84]	; 0x54
 8029f46:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8029f48:	602f      	str	r7, [r5, #0]
 8029f4a:	2900      	cmp	r1, #0
 8029f4c:	d0c9      	beq.n	8029ee2 <__sflush_r+0x1a>
 8029f4e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8029f52:	4299      	cmp	r1, r3
 8029f54:	d002      	beq.n	8029f5c <__sflush_r+0x94>
 8029f56:	4628      	mov	r0, r5
 8029f58:	f7ff fb3e 	bl	80295d8 <_free_r>
 8029f5c:	2000      	movs	r0, #0
 8029f5e:	6360      	str	r0, [r4, #52]	; 0x34
 8029f60:	e7c0      	b.n	8029ee4 <__sflush_r+0x1c>
 8029f62:	2301      	movs	r3, #1
 8029f64:	4628      	mov	r0, r5
 8029f66:	47b0      	blx	r6
 8029f68:	1c41      	adds	r1, r0, #1
 8029f6a:	d1c8      	bne.n	8029efe <__sflush_r+0x36>
 8029f6c:	682b      	ldr	r3, [r5, #0]
 8029f6e:	2b00      	cmp	r3, #0
 8029f70:	d0c5      	beq.n	8029efe <__sflush_r+0x36>
 8029f72:	2b1d      	cmp	r3, #29
 8029f74:	d001      	beq.n	8029f7a <__sflush_r+0xb2>
 8029f76:	2b16      	cmp	r3, #22
 8029f78:	d101      	bne.n	8029f7e <__sflush_r+0xb6>
 8029f7a:	602f      	str	r7, [r5, #0]
 8029f7c:	e7b1      	b.n	8029ee2 <__sflush_r+0x1a>
 8029f7e:	89a3      	ldrh	r3, [r4, #12]
 8029f80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8029f84:	81a3      	strh	r3, [r4, #12]
 8029f86:	e7ad      	b.n	8029ee4 <__sflush_r+0x1c>
 8029f88:	690f      	ldr	r7, [r1, #16]
 8029f8a:	2f00      	cmp	r7, #0
 8029f8c:	d0a9      	beq.n	8029ee2 <__sflush_r+0x1a>
 8029f8e:	0793      	lsls	r3, r2, #30
 8029f90:	680e      	ldr	r6, [r1, #0]
 8029f92:	bf08      	it	eq
 8029f94:	694b      	ldreq	r3, [r1, #20]
 8029f96:	600f      	str	r7, [r1, #0]
 8029f98:	bf18      	it	ne
 8029f9a:	2300      	movne	r3, #0
 8029f9c:	eba6 0807 	sub.w	r8, r6, r7
 8029fa0:	608b      	str	r3, [r1, #8]
 8029fa2:	f1b8 0f00 	cmp.w	r8, #0
 8029fa6:	dd9c      	ble.n	8029ee2 <__sflush_r+0x1a>
 8029fa8:	6a21      	ldr	r1, [r4, #32]
 8029faa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8029fac:	4643      	mov	r3, r8
 8029fae:	463a      	mov	r2, r7
 8029fb0:	4628      	mov	r0, r5
 8029fb2:	47b0      	blx	r6
 8029fb4:	2800      	cmp	r0, #0
 8029fb6:	dc06      	bgt.n	8029fc6 <__sflush_r+0xfe>
 8029fb8:	89a3      	ldrh	r3, [r4, #12]
 8029fba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8029fbe:	81a3      	strh	r3, [r4, #12]
 8029fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8029fc4:	e78e      	b.n	8029ee4 <__sflush_r+0x1c>
 8029fc6:	4407      	add	r7, r0
 8029fc8:	eba8 0800 	sub.w	r8, r8, r0
 8029fcc:	e7e9      	b.n	8029fa2 <__sflush_r+0xda>
 8029fce:	bf00      	nop
 8029fd0:	dfbffffe 	.word	0xdfbffffe

08029fd4 <_fflush_r>:
 8029fd4:	b538      	push	{r3, r4, r5, lr}
 8029fd6:	690b      	ldr	r3, [r1, #16]
 8029fd8:	4605      	mov	r5, r0
 8029fda:	460c      	mov	r4, r1
 8029fdc:	b913      	cbnz	r3, 8029fe4 <_fflush_r+0x10>
 8029fde:	2500      	movs	r5, #0
 8029fe0:	4628      	mov	r0, r5
 8029fe2:	bd38      	pop	{r3, r4, r5, pc}
 8029fe4:	b118      	cbz	r0, 8029fee <_fflush_r+0x1a>
 8029fe6:	6a03      	ldr	r3, [r0, #32]
 8029fe8:	b90b      	cbnz	r3, 8029fee <_fflush_r+0x1a>
 8029fea:	f7ff f90d 	bl	8029208 <__sinit>
 8029fee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8029ff2:	2b00      	cmp	r3, #0
 8029ff4:	d0f3      	beq.n	8029fde <_fflush_r+0xa>
 8029ff6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8029ff8:	07d0      	lsls	r0, r2, #31
 8029ffa:	d404      	bmi.n	802a006 <_fflush_r+0x32>
 8029ffc:	0599      	lsls	r1, r3, #22
 8029ffe:	d402      	bmi.n	802a006 <_fflush_r+0x32>
 802a000:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802a002:	f7ff fa7a 	bl	80294fa <__retarget_lock_acquire_recursive>
 802a006:	4628      	mov	r0, r5
 802a008:	4621      	mov	r1, r4
 802a00a:	f7ff ff5d 	bl	8029ec8 <__sflush_r>
 802a00e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802a010:	07da      	lsls	r2, r3, #31
 802a012:	4605      	mov	r5, r0
 802a014:	d4e4      	bmi.n	8029fe0 <_fflush_r+0xc>
 802a016:	89a3      	ldrh	r3, [r4, #12]
 802a018:	059b      	lsls	r3, r3, #22
 802a01a:	d4e1      	bmi.n	8029fe0 <_fflush_r+0xc>
 802a01c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802a01e:	f7ff fa6d 	bl	80294fc <__retarget_lock_release_recursive>
 802a022:	e7dd      	b.n	8029fe0 <_fflush_r+0xc>

0802a024 <__swbuf_r>:
 802a024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a026:	460e      	mov	r6, r1
 802a028:	4614      	mov	r4, r2
 802a02a:	4605      	mov	r5, r0
 802a02c:	b118      	cbz	r0, 802a036 <__swbuf_r+0x12>
 802a02e:	6a03      	ldr	r3, [r0, #32]
 802a030:	b90b      	cbnz	r3, 802a036 <__swbuf_r+0x12>
 802a032:	f7ff f8e9 	bl	8029208 <__sinit>
 802a036:	69a3      	ldr	r3, [r4, #24]
 802a038:	60a3      	str	r3, [r4, #8]
 802a03a:	89a3      	ldrh	r3, [r4, #12]
 802a03c:	071a      	lsls	r2, r3, #28
 802a03e:	d525      	bpl.n	802a08c <__swbuf_r+0x68>
 802a040:	6923      	ldr	r3, [r4, #16]
 802a042:	b31b      	cbz	r3, 802a08c <__swbuf_r+0x68>
 802a044:	6823      	ldr	r3, [r4, #0]
 802a046:	6922      	ldr	r2, [r4, #16]
 802a048:	1a98      	subs	r0, r3, r2
 802a04a:	6963      	ldr	r3, [r4, #20]
 802a04c:	b2f6      	uxtb	r6, r6
 802a04e:	4283      	cmp	r3, r0
 802a050:	4637      	mov	r7, r6
 802a052:	dc04      	bgt.n	802a05e <__swbuf_r+0x3a>
 802a054:	4621      	mov	r1, r4
 802a056:	4628      	mov	r0, r5
 802a058:	f7ff ffbc 	bl	8029fd4 <_fflush_r>
 802a05c:	b9e0      	cbnz	r0, 802a098 <__swbuf_r+0x74>
 802a05e:	68a3      	ldr	r3, [r4, #8]
 802a060:	3b01      	subs	r3, #1
 802a062:	60a3      	str	r3, [r4, #8]
 802a064:	6823      	ldr	r3, [r4, #0]
 802a066:	1c5a      	adds	r2, r3, #1
 802a068:	6022      	str	r2, [r4, #0]
 802a06a:	701e      	strb	r6, [r3, #0]
 802a06c:	6962      	ldr	r2, [r4, #20]
 802a06e:	1c43      	adds	r3, r0, #1
 802a070:	429a      	cmp	r2, r3
 802a072:	d004      	beq.n	802a07e <__swbuf_r+0x5a>
 802a074:	89a3      	ldrh	r3, [r4, #12]
 802a076:	07db      	lsls	r3, r3, #31
 802a078:	d506      	bpl.n	802a088 <__swbuf_r+0x64>
 802a07a:	2e0a      	cmp	r6, #10
 802a07c:	d104      	bne.n	802a088 <__swbuf_r+0x64>
 802a07e:	4621      	mov	r1, r4
 802a080:	4628      	mov	r0, r5
 802a082:	f7ff ffa7 	bl	8029fd4 <_fflush_r>
 802a086:	b938      	cbnz	r0, 802a098 <__swbuf_r+0x74>
 802a088:	4638      	mov	r0, r7
 802a08a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802a08c:	4621      	mov	r1, r4
 802a08e:	4628      	mov	r0, r5
 802a090:	f000 f806 	bl	802a0a0 <__swsetup_r>
 802a094:	2800      	cmp	r0, #0
 802a096:	d0d5      	beq.n	802a044 <__swbuf_r+0x20>
 802a098:	f04f 37ff 	mov.w	r7, #4294967295
 802a09c:	e7f4      	b.n	802a088 <__swbuf_r+0x64>
	...

0802a0a0 <__swsetup_r>:
 802a0a0:	b538      	push	{r3, r4, r5, lr}
 802a0a2:	4b2a      	ldr	r3, [pc, #168]	; (802a14c <__swsetup_r+0xac>)
 802a0a4:	4605      	mov	r5, r0
 802a0a6:	6818      	ldr	r0, [r3, #0]
 802a0a8:	460c      	mov	r4, r1
 802a0aa:	b118      	cbz	r0, 802a0b4 <__swsetup_r+0x14>
 802a0ac:	6a03      	ldr	r3, [r0, #32]
 802a0ae:	b90b      	cbnz	r3, 802a0b4 <__swsetup_r+0x14>
 802a0b0:	f7ff f8aa 	bl	8029208 <__sinit>
 802a0b4:	89a3      	ldrh	r3, [r4, #12]
 802a0b6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802a0ba:	0718      	lsls	r0, r3, #28
 802a0bc:	d422      	bmi.n	802a104 <__swsetup_r+0x64>
 802a0be:	06d9      	lsls	r1, r3, #27
 802a0c0:	d407      	bmi.n	802a0d2 <__swsetup_r+0x32>
 802a0c2:	2309      	movs	r3, #9
 802a0c4:	602b      	str	r3, [r5, #0]
 802a0c6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 802a0ca:	81a3      	strh	r3, [r4, #12]
 802a0cc:	f04f 30ff 	mov.w	r0, #4294967295
 802a0d0:	e034      	b.n	802a13c <__swsetup_r+0x9c>
 802a0d2:	0758      	lsls	r0, r3, #29
 802a0d4:	d512      	bpl.n	802a0fc <__swsetup_r+0x5c>
 802a0d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802a0d8:	b141      	cbz	r1, 802a0ec <__swsetup_r+0x4c>
 802a0da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802a0de:	4299      	cmp	r1, r3
 802a0e0:	d002      	beq.n	802a0e8 <__swsetup_r+0x48>
 802a0e2:	4628      	mov	r0, r5
 802a0e4:	f7ff fa78 	bl	80295d8 <_free_r>
 802a0e8:	2300      	movs	r3, #0
 802a0ea:	6363      	str	r3, [r4, #52]	; 0x34
 802a0ec:	89a3      	ldrh	r3, [r4, #12]
 802a0ee:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802a0f2:	81a3      	strh	r3, [r4, #12]
 802a0f4:	2300      	movs	r3, #0
 802a0f6:	6063      	str	r3, [r4, #4]
 802a0f8:	6923      	ldr	r3, [r4, #16]
 802a0fa:	6023      	str	r3, [r4, #0]
 802a0fc:	89a3      	ldrh	r3, [r4, #12]
 802a0fe:	f043 0308 	orr.w	r3, r3, #8
 802a102:	81a3      	strh	r3, [r4, #12]
 802a104:	6923      	ldr	r3, [r4, #16]
 802a106:	b94b      	cbnz	r3, 802a11c <__swsetup_r+0x7c>
 802a108:	89a3      	ldrh	r3, [r4, #12]
 802a10a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802a10e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802a112:	d003      	beq.n	802a11c <__swsetup_r+0x7c>
 802a114:	4621      	mov	r1, r4
 802a116:	4628      	mov	r0, r5
 802a118:	f000 f889 	bl	802a22e <__smakebuf_r>
 802a11c:	89a0      	ldrh	r0, [r4, #12]
 802a11e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802a122:	f010 0301 	ands.w	r3, r0, #1
 802a126:	d00a      	beq.n	802a13e <__swsetup_r+0x9e>
 802a128:	2300      	movs	r3, #0
 802a12a:	60a3      	str	r3, [r4, #8]
 802a12c:	6963      	ldr	r3, [r4, #20]
 802a12e:	425b      	negs	r3, r3
 802a130:	61a3      	str	r3, [r4, #24]
 802a132:	6923      	ldr	r3, [r4, #16]
 802a134:	b943      	cbnz	r3, 802a148 <__swsetup_r+0xa8>
 802a136:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 802a13a:	d1c4      	bne.n	802a0c6 <__swsetup_r+0x26>
 802a13c:	bd38      	pop	{r3, r4, r5, pc}
 802a13e:	0781      	lsls	r1, r0, #30
 802a140:	bf58      	it	pl
 802a142:	6963      	ldrpl	r3, [r4, #20]
 802a144:	60a3      	str	r3, [r4, #8]
 802a146:	e7f4      	b.n	802a132 <__swsetup_r+0x92>
 802a148:	2000      	movs	r0, #0
 802a14a:	e7f7      	b.n	802a13c <__swsetup_r+0x9c>
 802a14c:	2400010c 	.word	0x2400010c

0802a150 <memmove>:
 802a150:	4288      	cmp	r0, r1
 802a152:	b510      	push	{r4, lr}
 802a154:	eb01 0402 	add.w	r4, r1, r2
 802a158:	d902      	bls.n	802a160 <memmove+0x10>
 802a15a:	4284      	cmp	r4, r0
 802a15c:	4623      	mov	r3, r4
 802a15e:	d807      	bhi.n	802a170 <memmove+0x20>
 802a160:	1e43      	subs	r3, r0, #1
 802a162:	42a1      	cmp	r1, r4
 802a164:	d008      	beq.n	802a178 <memmove+0x28>
 802a166:	f811 2b01 	ldrb.w	r2, [r1], #1
 802a16a:	f803 2f01 	strb.w	r2, [r3, #1]!
 802a16e:	e7f8      	b.n	802a162 <memmove+0x12>
 802a170:	4402      	add	r2, r0
 802a172:	4601      	mov	r1, r0
 802a174:	428a      	cmp	r2, r1
 802a176:	d100      	bne.n	802a17a <memmove+0x2a>
 802a178:	bd10      	pop	{r4, pc}
 802a17a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802a17e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802a182:	e7f7      	b.n	802a174 <memmove+0x24>

0802a184 <_realloc_r>:
 802a184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802a188:	4680      	mov	r8, r0
 802a18a:	4614      	mov	r4, r2
 802a18c:	460e      	mov	r6, r1
 802a18e:	b921      	cbnz	r1, 802a19a <_realloc_r+0x16>
 802a190:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802a194:	4611      	mov	r1, r2
 802a196:	f7fe bf11 	b.w	8028fbc <_malloc_r>
 802a19a:	b92a      	cbnz	r2, 802a1a8 <_realloc_r+0x24>
 802a19c:	f7ff fa1c 	bl	80295d8 <_free_r>
 802a1a0:	4625      	mov	r5, r4
 802a1a2:	4628      	mov	r0, r5
 802a1a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802a1a8:	f000 f8a0 	bl	802a2ec <_malloc_usable_size_r>
 802a1ac:	4284      	cmp	r4, r0
 802a1ae:	4607      	mov	r7, r0
 802a1b0:	d802      	bhi.n	802a1b8 <_realloc_r+0x34>
 802a1b2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 802a1b6:	d812      	bhi.n	802a1de <_realloc_r+0x5a>
 802a1b8:	4621      	mov	r1, r4
 802a1ba:	4640      	mov	r0, r8
 802a1bc:	f7fe fefe 	bl	8028fbc <_malloc_r>
 802a1c0:	4605      	mov	r5, r0
 802a1c2:	2800      	cmp	r0, #0
 802a1c4:	d0ed      	beq.n	802a1a2 <_realloc_r+0x1e>
 802a1c6:	42bc      	cmp	r4, r7
 802a1c8:	4622      	mov	r2, r4
 802a1ca:	4631      	mov	r1, r6
 802a1cc:	bf28      	it	cs
 802a1ce:	463a      	movcs	r2, r7
 802a1d0:	f7ff f995 	bl	80294fe <memcpy>
 802a1d4:	4631      	mov	r1, r6
 802a1d6:	4640      	mov	r0, r8
 802a1d8:	f7ff f9fe 	bl	80295d8 <_free_r>
 802a1dc:	e7e1      	b.n	802a1a2 <_realloc_r+0x1e>
 802a1de:	4635      	mov	r5, r6
 802a1e0:	e7df      	b.n	802a1a2 <_realloc_r+0x1e>

0802a1e2 <__swhatbuf_r>:
 802a1e2:	b570      	push	{r4, r5, r6, lr}
 802a1e4:	460c      	mov	r4, r1
 802a1e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802a1ea:	2900      	cmp	r1, #0
 802a1ec:	b096      	sub	sp, #88	; 0x58
 802a1ee:	4615      	mov	r5, r2
 802a1f0:	461e      	mov	r6, r3
 802a1f2:	da0d      	bge.n	802a210 <__swhatbuf_r+0x2e>
 802a1f4:	89a3      	ldrh	r3, [r4, #12]
 802a1f6:	f013 0f80 	tst.w	r3, #128	; 0x80
 802a1fa:	f04f 0100 	mov.w	r1, #0
 802a1fe:	bf0c      	ite	eq
 802a200:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 802a204:	2340      	movne	r3, #64	; 0x40
 802a206:	2000      	movs	r0, #0
 802a208:	6031      	str	r1, [r6, #0]
 802a20a:	602b      	str	r3, [r5, #0]
 802a20c:	b016      	add	sp, #88	; 0x58
 802a20e:	bd70      	pop	{r4, r5, r6, pc}
 802a210:	466a      	mov	r2, sp
 802a212:	f000 f849 	bl	802a2a8 <_fstat_r>
 802a216:	2800      	cmp	r0, #0
 802a218:	dbec      	blt.n	802a1f4 <__swhatbuf_r+0x12>
 802a21a:	9901      	ldr	r1, [sp, #4]
 802a21c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 802a220:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 802a224:	4259      	negs	r1, r3
 802a226:	4159      	adcs	r1, r3
 802a228:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802a22c:	e7eb      	b.n	802a206 <__swhatbuf_r+0x24>

0802a22e <__smakebuf_r>:
 802a22e:	898b      	ldrh	r3, [r1, #12]
 802a230:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802a232:	079d      	lsls	r5, r3, #30
 802a234:	4606      	mov	r6, r0
 802a236:	460c      	mov	r4, r1
 802a238:	d507      	bpl.n	802a24a <__smakebuf_r+0x1c>
 802a23a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802a23e:	6023      	str	r3, [r4, #0]
 802a240:	6123      	str	r3, [r4, #16]
 802a242:	2301      	movs	r3, #1
 802a244:	6163      	str	r3, [r4, #20]
 802a246:	b002      	add	sp, #8
 802a248:	bd70      	pop	{r4, r5, r6, pc}
 802a24a:	ab01      	add	r3, sp, #4
 802a24c:	466a      	mov	r2, sp
 802a24e:	f7ff ffc8 	bl	802a1e2 <__swhatbuf_r>
 802a252:	9900      	ldr	r1, [sp, #0]
 802a254:	4605      	mov	r5, r0
 802a256:	4630      	mov	r0, r6
 802a258:	f7fe feb0 	bl	8028fbc <_malloc_r>
 802a25c:	b948      	cbnz	r0, 802a272 <__smakebuf_r+0x44>
 802a25e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802a262:	059a      	lsls	r2, r3, #22
 802a264:	d4ef      	bmi.n	802a246 <__smakebuf_r+0x18>
 802a266:	f023 0303 	bic.w	r3, r3, #3
 802a26a:	f043 0302 	orr.w	r3, r3, #2
 802a26e:	81a3      	strh	r3, [r4, #12]
 802a270:	e7e3      	b.n	802a23a <__smakebuf_r+0xc>
 802a272:	89a3      	ldrh	r3, [r4, #12]
 802a274:	6020      	str	r0, [r4, #0]
 802a276:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802a27a:	81a3      	strh	r3, [r4, #12]
 802a27c:	9b00      	ldr	r3, [sp, #0]
 802a27e:	6163      	str	r3, [r4, #20]
 802a280:	9b01      	ldr	r3, [sp, #4]
 802a282:	6120      	str	r0, [r4, #16]
 802a284:	b15b      	cbz	r3, 802a29e <__smakebuf_r+0x70>
 802a286:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802a28a:	4630      	mov	r0, r6
 802a28c:	f000 f81e 	bl	802a2cc <_isatty_r>
 802a290:	b128      	cbz	r0, 802a29e <__smakebuf_r+0x70>
 802a292:	89a3      	ldrh	r3, [r4, #12]
 802a294:	f023 0303 	bic.w	r3, r3, #3
 802a298:	f043 0301 	orr.w	r3, r3, #1
 802a29c:	81a3      	strh	r3, [r4, #12]
 802a29e:	89a3      	ldrh	r3, [r4, #12]
 802a2a0:	431d      	orrs	r5, r3
 802a2a2:	81a5      	strh	r5, [r4, #12]
 802a2a4:	e7cf      	b.n	802a246 <__smakebuf_r+0x18>
	...

0802a2a8 <_fstat_r>:
 802a2a8:	b538      	push	{r3, r4, r5, lr}
 802a2aa:	4d07      	ldr	r5, [pc, #28]	; (802a2c8 <_fstat_r+0x20>)
 802a2ac:	2300      	movs	r3, #0
 802a2ae:	4604      	mov	r4, r0
 802a2b0:	4608      	mov	r0, r1
 802a2b2:	4611      	mov	r1, r2
 802a2b4:	602b      	str	r3, [r5, #0]
 802a2b6:	f7d7 fe04 	bl	8001ec2 <_fstat>
 802a2ba:	1c43      	adds	r3, r0, #1
 802a2bc:	d102      	bne.n	802a2c4 <_fstat_r+0x1c>
 802a2be:	682b      	ldr	r3, [r5, #0]
 802a2c0:	b103      	cbz	r3, 802a2c4 <_fstat_r+0x1c>
 802a2c2:	6023      	str	r3, [r4, #0]
 802a2c4:	bd38      	pop	{r3, r4, r5, pc}
 802a2c6:	bf00      	nop
 802a2c8:	24007a5c 	.word	0x24007a5c

0802a2cc <_isatty_r>:
 802a2cc:	b538      	push	{r3, r4, r5, lr}
 802a2ce:	4d06      	ldr	r5, [pc, #24]	; (802a2e8 <_isatty_r+0x1c>)
 802a2d0:	2300      	movs	r3, #0
 802a2d2:	4604      	mov	r4, r0
 802a2d4:	4608      	mov	r0, r1
 802a2d6:	602b      	str	r3, [r5, #0]
 802a2d8:	f7d7 fe03 	bl	8001ee2 <_isatty>
 802a2dc:	1c43      	adds	r3, r0, #1
 802a2de:	d102      	bne.n	802a2e6 <_isatty_r+0x1a>
 802a2e0:	682b      	ldr	r3, [r5, #0]
 802a2e2:	b103      	cbz	r3, 802a2e6 <_isatty_r+0x1a>
 802a2e4:	6023      	str	r3, [r4, #0]
 802a2e6:	bd38      	pop	{r3, r4, r5, pc}
 802a2e8:	24007a5c 	.word	0x24007a5c

0802a2ec <_malloc_usable_size_r>:
 802a2ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802a2f0:	1f18      	subs	r0, r3, #4
 802a2f2:	2b00      	cmp	r3, #0
 802a2f4:	bfbc      	itt	lt
 802a2f6:	580b      	ldrlt	r3, [r1, r0]
 802a2f8:	18c0      	addlt	r0, r0, r3
 802a2fa:	4770      	bx	lr

0802a2fc <_init>:
 802a2fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a2fe:	bf00      	nop
 802a300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802a302:	bc08      	pop	{r3}
 802a304:	469e      	mov	lr, r3
 802a306:	4770      	bx	lr

0802a308 <_fini>:
 802a308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a30a:	bf00      	nop
 802a30c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802a30e:	bc08      	pop	{r3}
 802a310:	469e      	mov	lr, r3
 802a312:	4770      	bx	lr
