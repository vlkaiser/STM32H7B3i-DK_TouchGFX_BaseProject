
STM32HB3i-DK_TouchGFX_BaseProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00021b84  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001a10  08021e34  08021e34  00031e34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontSearchFlashSection 0000001c  08023844  08023844  00033844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000014  08023860  08023860  00033860  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  08023874  08023874  00033874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000110  24000000  0802387c  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000074a4  24000110  0802398c  00040110  2**2
                  ALLOC
  8 ._user_heap_stack 00002004  240075b4  0802398c  000475b4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00110428  2**0
                  CONTENTS, READONLY
 10 FramebufferSection 000bf400  24040000  24040000  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 FontFlashSection 00000404  90000000  90000000  00110000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 12 TextFlashSection 00000024  90000404  90000404  00110404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 ExtFlashSection 00000000  90000428  90000428  00110456  2**0
                  CONTENTS
 14 .comment      000000c2  00000000  00000000  00110456  2**0
                  CONTENTS, READONLY
 15 .debug_info   0008bced  00000000  00000000  00110518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0001071e  00000000  00000000  0019c205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00003768  00000000  00000000  001ac928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000029e1  00000000  00000000  001b0090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00010293  00000000  00000000  001b2a71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00045b78  00000000  00000000  001c2d04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0016f2e3  00000000  00000000  0020887c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  0000f2cc  00000000  00000000  00377b60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 000000b1  00000000  00000000  00386e2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000110 	.word	0x24000110
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08021e1c 	.word	0x08021e1c

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000114 	.word	0x24000114
 80002ec:	08021e1c 	.word	0x08021e1c

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b084      	sub	sp, #16
 8000394:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000396:	4b43      	ldr	r3, [pc, #268]	; (80004a4 <main+0x114>)
 8000398:	695b      	ldr	r3, [r3, #20]
 800039a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d11b      	bne.n	80003da <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80003a2:	f3bf 8f4f 	dsb	sy
}
 80003a6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003a8:	f3bf 8f6f 	isb	sy
}
 80003ac:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80003ae:	4b3d      	ldr	r3, [pc, #244]	; (80004a4 <main+0x114>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80003b6:	f3bf 8f4f 	dsb	sy
}
 80003ba:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003bc:	f3bf 8f6f 	isb	sy
}
 80003c0:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80003c2:	4b38      	ldr	r3, [pc, #224]	; (80004a4 <main+0x114>)
 80003c4:	695b      	ldr	r3, [r3, #20]
 80003c6:	4a37      	ldr	r2, [pc, #220]	; (80004a4 <main+0x114>)
 80003c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003cc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80003ce:	f3bf 8f4f 	dsb	sy
}
 80003d2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003d4:	f3bf 8f6f 	isb	sy
}
 80003d8:	e000      	b.n	80003dc <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80003da:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80003dc:	4b31      	ldr	r3, [pc, #196]	; (80004a4 <main+0x114>)
 80003de:	695b      	ldr	r3, [r3, #20]
 80003e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d138      	bne.n	800045a <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80003e8:	4b2e      	ldr	r3, [pc, #184]	; (80004a4 <main+0x114>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80003f0:	f3bf 8f4f 	dsb	sy
}
 80003f4:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80003f6:	4b2b      	ldr	r3, [pc, #172]	; (80004a4 <main+0x114>)
 80003f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80003fc:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80003fe:	68fb      	ldr	r3, [r7, #12]
 8000400:	0b5b      	lsrs	r3, r3, #13
 8000402:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000406:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	08db      	lsrs	r3, r3, #3
 800040c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000410:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000412:	68bb      	ldr	r3, [r7, #8]
 8000414:	015a      	lsls	r2, r3, #5
 8000416:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800041a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800041c:	687a      	ldr	r2, [r7, #4]
 800041e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000420:	4920      	ldr	r1, [pc, #128]	; (80004a4 <main+0x114>)
 8000422:	4313      	orrs	r3, r2
 8000424:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	1e5a      	subs	r2, r3, #1
 800042c:	607a      	str	r2, [r7, #4]
 800042e:	2b00      	cmp	r3, #0
 8000430:	d1ef      	bne.n	8000412 <main+0x82>
    } while(sets-- != 0U);
 8000432:	68bb      	ldr	r3, [r7, #8]
 8000434:	1e5a      	subs	r2, r3, #1
 8000436:	60ba      	str	r2, [r7, #8]
 8000438:	2b00      	cmp	r3, #0
 800043a:	d1e5      	bne.n	8000408 <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 800043c:	f3bf 8f4f 	dsb	sy
}
 8000440:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000442:	4b18      	ldr	r3, [pc, #96]	; (80004a4 <main+0x114>)
 8000444:	695b      	ldr	r3, [r3, #20]
 8000446:	4a17      	ldr	r2, [pc, #92]	; (80004a4 <main+0x114>)
 8000448:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800044c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800044e:	f3bf 8f4f 	dsb	sy
}
 8000452:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000454:	f3bf 8f6f 	isb	sy
}
 8000458:	e000      	b.n	800045c <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800045a:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800045c:	f007 fe4c 	bl	80080f8 <HAL_Init>

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000460:	f000 fb72 	bl	8000b48 <MPU_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000464:	f000 f826 	bl	80004b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000468:	f000 fa2a 	bl	80008c0 <MX_GPIO_Init>
  MX_CRC_Init();
 800046c:	f000 f898 	bl	80005a0 <MX_CRC_Init>
  MX_DMA2D_Init();
 8000470:	f000 f8b8 	bl	80005e4 <MX_DMA2D_Init>
  MX_I2C4_Init();
 8000474:	f000 f8f0 	bl	8000658 <MX_I2C4_Init>
  MX_LTDC_Init();
 8000478:	f000 f92e 	bl	80006d8 <MX_LTDC_Init>
  MX_OCTOSPI1_Init();
 800047c:	f000 f9ae 	bl	80007dc <MX_OCTOSPI1_Init>
  MX_TouchGFX_Init();
 8000480:	f000 ffd6 	bl	8001430 <MX_TouchGFX_Init>
  /* Call PreOsInit function */
  MX_TouchGFX_PreOSInit();
 8000484:	f000 ffcd 	bl	8001422 <MX_TouchGFX_PreOSInit>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000488:	f00d fecc 	bl	800e224 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of GUI_Task */
  GUI_TaskHandle = osThreadNew(TouchGFX_Task, NULL, &GUI_Task_attributes);
 800048c:	4a06      	ldr	r2, [pc, #24]	; (80004a8 <main+0x118>)
 800048e:	2100      	movs	r1, #0
 8000490:	4806      	ldr	r0, [pc, #24]	; (80004ac <main+0x11c>)
 8000492:	f00d ff11 	bl	800e2b8 <osThreadNew>
 8000496:	4603      	mov	r3, r0
 8000498:	4a05      	ldr	r2, [pc, #20]	; (80004b0 <main+0x120>)
 800049a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800049c:	f00d fee6 	bl	800e26c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004a0:	e7fe      	b.n	80004a0 <main+0x110>
 80004a2:	bf00      	nop
 80004a4:	e000ed00 	.word	0xe000ed00
 80004a8:	080228d0 	.word	0x080228d0
 80004ac:	08001441 	.word	0x08001441
 80004b0:	24000310 	.word	0x24000310

080004b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b09c      	sub	sp, #112	; 0x70
 80004b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004be:	224c      	movs	r2, #76	; 0x4c
 80004c0:	2100      	movs	r1, #0
 80004c2:	4618      	mov	r0, r3
 80004c4:	f020 fe85 	bl	80211d2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004c8:	1d3b      	adds	r3, r7, #4
 80004ca:	2220      	movs	r2, #32
 80004cc:	2100      	movs	r1, #0
 80004ce:	4618      	mov	r0, r3
 80004d0:	f020 fe7f 	bl	80211d2 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80004d4:	4b30      	ldr	r3, [pc, #192]	; (8000598 <SystemClock_Config+0xe4>)
 80004d6:	f04f 32ff 	mov.w	r2, #4294967295
 80004da:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80004de:	2004      	movs	r0, #4
 80004e0:	f00b f806 	bl	800b4f0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80004e4:	2300      	movs	r3, #0
 80004e6:	603b      	str	r3, [r7, #0]
 80004e8:	4b2c      	ldr	r3, [pc, #176]	; (800059c <SystemClock_Config+0xe8>)
 80004ea:	699b      	ldr	r3, [r3, #24]
 80004ec:	4a2b      	ldr	r2, [pc, #172]	; (800059c <SystemClock_Config+0xe8>)
 80004ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80004f2:	6193      	str	r3, [r2, #24]
 80004f4:	4b29      	ldr	r3, [pc, #164]	; (800059c <SystemClock_Config+0xe8>)
 80004f6:	699b      	ldr	r3, [r3, #24]
 80004f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80004fc:	603b      	str	r3, [r7, #0]
 80004fe:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000500:	bf00      	nop
 8000502:	4b26      	ldr	r3, [pc, #152]	; (800059c <SystemClock_Config+0xe8>)
 8000504:	699b      	ldr	r3, [r3, #24]
 8000506:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800050a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800050e:	d1f8      	bne.n	8000502 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000510:	2301      	movs	r3, #1
 8000512:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000514:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000518:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800051a:	2302      	movs	r3, #2
 800051c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800051e:	2302      	movs	r3, #2
 8000520:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000522:	230c      	movs	r3, #12
 8000524:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 280;
 8000526:	f44f 738c 	mov.w	r3, #280	; 0x118
 800052a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800052c:	2302      	movs	r3, #2
 800052e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000530:	2302      	movs	r3, #2
 8000532:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 4;
 8000534:	2304      	movs	r3, #4
 8000536:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000538:	2304      	movs	r3, #4
 800053a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800053c:	2300      	movs	r3, #0
 800053e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000540:	2300      	movs	r3, #0
 8000542:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000544:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000548:	4618      	mov	r0, r3
 800054a:	f00b f82b 	bl	800b5a4 <HAL_RCC_OscConfig>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d001      	beq.n	8000558 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000554:	f000 fb5c 	bl	8000c10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000558:	233f      	movs	r3, #63	; 0x3f
 800055a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800055c:	2303      	movs	r3, #3
 800055e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000560:	2300      	movs	r3, #0
 8000562:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000564:	2308      	movs	r3, #8
 8000566:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000568:	2340      	movs	r3, #64	; 0x40
 800056a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800056c:	2340      	movs	r3, #64	; 0x40
 800056e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000570:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000574:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000576:	2340      	movs	r3, #64	; 0x40
 8000578:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800057a:	1d3b      	adds	r3, r7, #4
 800057c:	2103      	movs	r1, #3
 800057e:	4618      	mov	r0, r3
 8000580:	f00b fc42 	bl	800be08 <HAL_RCC_ClockConfig>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <SystemClock_Config+0xda>
  {
    Error_Handler();
 800058a:	f000 fb41 	bl	8000c10 <Error_Handler>
  }
}
 800058e:	bf00      	nop
 8000590:	3770      	adds	r7, #112	; 0x70
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	58024400 	.word	0x58024400
 800059c:	58024800 	.word	0x58024800

080005a0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80005a4:	4b0d      	ldr	r3, [pc, #52]	; (80005dc <MX_CRC_Init+0x3c>)
 80005a6:	4a0e      	ldr	r2, [pc, #56]	; (80005e0 <MX_CRC_Init+0x40>)
 80005a8:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80005aa:	4b0c      	ldr	r3, [pc, #48]	; (80005dc <MX_CRC_Init+0x3c>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80005b0:	4b0a      	ldr	r3, [pc, #40]	; (80005dc <MX_CRC_Init+0x3c>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80005b6:	4b09      	ldr	r3, [pc, #36]	; (80005dc <MX_CRC_Init+0x3c>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80005bc:	4b07      	ldr	r3, [pc, #28]	; (80005dc <MX_CRC_Init+0x3c>)
 80005be:	2200      	movs	r2, #0
 80005c0:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80005c2:	4b06      	ldr	r3, [pc, #24]	; (80005dc <MX_CRC_Init+0x3c>)
 80005c4:	2201      	movs	r2, #1
 80005c6:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80005c8:	4804      	ldr	r0, [pc, #16]	; (80005dc <MX_CRC_Init+0x3c>)
 80005ca:	f007 ffa3 	bl	8008514 <HAL_CRC_Init>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80005d4:	f000 fb1c 	bl	8000c10 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80005d8:	bf00      	nop
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	2400012c 	.word	0x2400012c
 80005e0:	40023000 	.word	0x40023000

080005e4 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80005e8:	4b19      	ldr	r3, [pc, #100]	; (8000650 <MX_DMA2D_Init+0x6c>)
 80005ea:	4a1a      	ldr	r2, [pc, #104]	; (8000654 <MX_DMA2D_Init+0x70>)
 80005ec:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80005ee:	4b18      	ldr	r3, [pc, #96]	; (8000650 <MX_DMA2D_Init+0x6c>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 80005f4:	4b16      	ldr	r3, [pc, #88]	; (8000650 <MX_DMA2D_Init+0x6c>)
 80005f6:	2202      	movs	r2, #2
 80005f8:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80005fa:	4b15      	ldr	r3, [pc, #84]	; (8000650 <MX_DMA2D_Init+0x6c>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000600:	4b13      	ldr	r3, [pc, #76]	; (8000650 <MX_DMA2D_Init+0x6c>)
 8000602:	2200      	movs	r2, #0
 8000604:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 8000606:	4b12      	ldr	r3, [pc, #72]	; (8000650 <MX_DMA2D_Init+0x6c>)
 8000608:	2202      	movs	r2, #2
 800060a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800060c:	4b10      	ldr	r3, [pc, #64]	; (8000650 <MX_DMA2D_Init+0x6c>)
 800060e:	2200      	movs	r2, #0
 8000610:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000612:	4b0f      	ldr	r3, [pc, #60]	; (8000650 <MX_DMA2D_Init+0x6c>)
 8000614:	2200      	movs	r2, #0
 8000616:	651a      	str	r2, [r3, #80]	; 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8000618:	4b0d      	ldr	r3, [pc, #52]	; (8000650 <MX_DMA2D_Init+0x6c>)
 800061a:	2200      	movs	r2, #0
 800061c:	655a      	str	r2, [r3, #84]	; 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 800061e:	4b0c      	ldr	r3, [pc, #48]	; (8000650 <MX_DMA2D_Init+0x6c>)
 8000620:	2200      	movs	r2, #0
 8000622:	659a      	str	r2, [r3, #88]	; 0x58
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 8000624:	4b0a      	ldr	r3, [pc, #40]	; (8000650 <MX_DMA2D_Init+0x6c>)
 8000626:	2200      	movs	r2, #0
 8000628:	65da      	str	r2, [r3, #92]	; 0x5c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800062a:	4809      	ldr	r0, [pc, #36]	; (8000650 <MX_DMA2D_Init+0x6c>)
 800062c:	f008 f864 	bl	80086f8 <HAL_DMA2D_Init>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000636:	f000 faeb 	bl	8000c10 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800063a:	2101      	movs	r1, #1
 800063c:	4804      	ldr	r0, [pc, #16]	; (8000650 <MX_DMA2D_Init+0x6c>)
 800063e:	f008 f9cf 	bl	80089e0 <HAL_DMA2D_ConfigLayer>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_DMA2D_Init+0x68>
  {
    Error_Handler();
 8000648:	f000 fae2 	bl	8000c10 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800064c:	bf00      	nop
 800064e:	bd80      	pop	{r7, pc}
 8000650:	24000150 	.word	0x24000150
 8000654:	52001000 	.word	0x52001000

08000658 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 800065c:	4b1b      	ldr	r3, [pc, #108]	; (80006cc <MX_I2C4_Init+0x74>)
 800065e:	4a1c      	ldr	r2, [pc, #112]	; (80006d0 <MX_I2C4_Init+0x78>)
 8000660:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x10808AD0;
 8000662:	4b1a      	ldr	r3, [pc, #104]	; (80006cc <MX_I2C4_Init+0x74>)
 8000664:	4a1b      	ldr	r2, [pc, #108]	; (80006d4 <MX_I2C4_Init+0x7c>)
 8000666:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000668:	4b18      	ldr	r3, [pc, #96]	; (80006cc <MX_I2C4_Init+0x74>)
 800066a:	2200      	movs	r2, #0
 800066c:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800066e:	4b17      	ldr	r3, [pc, #92]	; (80006cc <MX_I2C4_Init+0x74>)
 8000670:	2201      	movs	r2, #1
 8000672:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000674:	4b15      	ldr	r3, [pc, #84]	; (80006cc <MX_I2C4_Init+0x74>)
 8000676:	2200      	movs	r2, #0
 8000678:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 800067a:	4b14      	ldr	r3, [pc, #80]	; (80006cc <MX_I2C4_Init+0x74>)
 800067c:	2200      	movs	r2, #0
 800067e:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000680:	4b12      	ldr	r3, [pc, #72]	; (80006cc <MX_I2C4_Init+0x74>)
 8000682:	2200      	movs	r2, #0
 8000684:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000686:	4b11      	ldr	r3, [pc, #68]	; (80006cc <MX_I2C4_Init+0x74>)
 8000688:	2200      	movs	r2, #0
 800068a:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800068c:	4b0f      	ldr	r3, [pc, #60]	; (80006cc <MX_I2C4_Init+0x74>)
 800068e:	2200      	movs	r2, #0
 8000690:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000692:	480e      	ldr	r0, [pc, #56]	; (80006cc <MX_I2C4_Init+0x74>)
 8000694:	f008 fd5a 	bl	800914c <HAL_I2C_Init>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 800069e:	f000 fab7 	bl	8000c10 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 80006a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006a6:	4809      	ldr	r0, [pc, #36]	; (80006cc <MX_I2C4_Init+0x74>)
 80006a8:	f009 fb10 	bl	8009ccc <HAL_I2CEx_ConfigAnalogFilter>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <MX_I2C4_Init+0x5e>
  {
    Error_Handler();
 80006b2:	f000 faad 	bl	8000c10 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80006b6:	2100      	movs	r1, #0
 80006b8:	4804      	ldr	r0, [pc, #16]	; (80006cc <MX_I2C4_Init+0x74>)
 80006ba:	f009 fb52 	bl	8009d62 <HAL_I2CEx_ConfigDigitalFilter>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <MX_I2C4_Init+0x70>
  {
    Error_Handler();
 80006c4:	f000 faa4 	bl	8000c10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 80006c8:	bf00      	nop
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	240001b8 	.word	0x240001b8
 80006d0:	58001c00 	.word	0x58001c00
 80006d4:	10808ad0 	.word	0x10808ad0

080006d8 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b08e      	sub	sp, #56	; 0x38
 80006dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80006de:	1d3b      	adds	r3, r7, #4
 80006e0:	2234      	movs	r2, #52	; 0x34
 80006e2:	2100      	movs	r1, #0
 80006e4:	4618      	mov	r0, r3
 80006e6:	f020 fd74 	bl	80211d2 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80006ea:	4b3a      	ldr	r3, [pc, #232]	; (80007d4 <MX_LTDC_Init+0xfc>)
 80006ec:	4a3a      	ldr	r2, [pc, #232]	; (80007d8 <MX_LTDC_Init+0x100>)
 80006ee:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80006f0:	4b38      	ldr	r3, [pc, #224]	; (80007d4 <MX_LTDC_Init+0xfc>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80006f6:	4b37      	ldr	r3, [pc, #220]	; (80007d4 <MX_LTDC_Init+0xfc>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80006fc:	4b35      	ldr	r3, [pc, #212]	; (80007d4 <MX_LTDC_Init+0xfc>)
 80006fe:	2200      	movs	r2, #0
 8000700:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000702:	4b34      	ldr	r3, [pc, #208]	; (80007d4 <MX_LTDC_Init+0xfc>)
 8000704:	2200      	movs	r2, #0
 8000706:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8000708:	4b32      	ldr	r3, [pc, #200]	; (80007d4 <MX_LTDC_Init+0xfc>)
 800070a:	2228      	movs	r2, #40	; 0x28
 800070c:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 800070e:	4b31      	ldr	r3, [pc, #196]	; (80007d4 <MX_LTDC_Init+0xfc>)
 8000710:	2209      	movs	r2, #9
 8000712:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 42;
 8000714:	4b2f      	ldr	r3, [pc, #188]	; (80007d4 <MX_LTDC_Init+0xfc>)
 8000716:	222a      	movs	r2, #42	; 0x2a
 8000718:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 800071a:	4b2e      	ldr	r3, [pc, #184]	; (80007d4 <MX_LTDC_Init+0xfc>)
 800071c:	220b      	movs	r2, #11
 800071e:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 522;
 8000720:	4b2c      	ldr	r3, [pc, #176]	; (80007d4 <MX_LTDC_Init+0xfc>)
 8000722:	f240 220a 	movw	r2, #522	; 0x20a
 8000726:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8000728:	4b2a      	ldr	r3, [pc, #168]	; (80007d4 <MX_LTDC_Init+0xfc>)
 800072a:	f240 121b 	movw	r2, #283	; 0x11b
 800072e:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 554;
 8000730:	4b28      	ldr	r3, [pc, #160]	; (80007d4 <MX_LTDC_Init+0xfc>)
 8000732:	f240 222a 	movw	r2, #554	; 0x22a
 8000736:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8000738:	4b26      	ldr	r3, [pc, #152]	; (80007d4 <MX_LTDC_Init+0xfc>)
 800073a:	f240 121d 	movw	r2, #285	; 0x11d
 800073e:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000740:	4b24      	ldr	r3, [pc, #144]	; (80007d4 <MX_LTDC_Init+0xfc>)
 8000742:	2200      	movs	r2, #0
 8000744:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000748:	4b22      	ldr	r3, [pc, #136]	; (80007d4 <MX_LTDC_Init+0xfc>)
 800074a:	2200      	movs	r2, #0
 800074c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000750:	4b20      	ldr	r3, [pc, #128]	; (80007d4 <MX_LTDC_Init+0xfc>)
 8000752:	2200      	movs	r2, #0
 8000754:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000758:	481e      	ldr	r0, [pc, #120]	; (80007d4 <MX_LTDC_Init+0xfc>)
 800075a:	f009 fb4f 	bl	8009dfc <HAL_LTDC_Init>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000764:	f000 fa54 	bl	8000c10 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000768:	2300      	movs	r3, #0
 800076a:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 800076c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000770:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000772:	2300      	movs	r3, #0
 8000774:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8000776:	f44f 7388 	mov.w	r3, #272	; 0x110
 800077a:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 800077c:	2301      	movs	r3, #1
 800077e:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000780:	23ff      	movs	r3, #255	; 0xff
 8000782:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000784:	2300      	movs	r3, #0
 8000786:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000788:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800078c:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800078e:	2305      	movs	r3, #5
 8000790:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0;
 8000792:	2300      	movs	r3, #0
 8000794:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8000796:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800079a:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 800079c:	f44f 7388 	mov.w	r3, #272	; 0x110
 80007a0:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 255;
 80007a2:	23ff      	movs	r3, #255	; 0xff
 80007a4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80007a8:	2300      	movs	r3, #0
 80007aa:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80007ae:	2300      	movs	r3, #0
 80007b0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80007b4:	1d3b      	adds	r3, r7, #4
 80007b6:	2200      	movs	r2, #0
 80007b8:	4619      	mov	r1, r3
 80007ba:	4806      	ldr	r0, [pc, #24]	; (80007d4 <MX_LTDC_Init+0xfc>)
 80007bc:	f009 fca6 	bl	800a10c <HAL_LTDC_ConfigLayer>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_LTDC_Init+0xf2>
  {
    Error_Handler();
 80007c6:	f000 fa23 	bl	8000c10 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80007ca:	bf00      	nop
 80007cc:	3738      	adds	r7, #56	; 0x38
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	2400020c 	.word	0x2400020c
 80007d8:	50001000 	.word	0x50001000

080007dc <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */
  OSPI_MemoryMappedTypeDef sMemMappedCfg = {0};
 80007e2:	1d3b      	adds	r3, r7, #4
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
 80007e8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 80007ea:	4b33      	ldr	r3, [pc, #204]	; (80008b8 <MX_OCTOSPI1_Init+0xdc>)
 80007ec:	4a33      	ldr	r2, [pc, #204]	; (80008bc <MX_OCTOSPI1_Init+0xe0>)
 80007ee:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 32;
 80007f0:	4b31      	ldr	r3, [pc, #196]	; (80008b8 <MX_OCTOSPI1_Init+0xdc>)
 80007f2:	2220      	movs	r2, #32
 80007f4:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 80007f6:	4b30      	ldr	r3, [pc, #192]	; (80008b8 <MX_OCTOSPI1_Init+0xdc>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 80007fc:	4b2e      	ldr	r3, [pc, #184]	; (80008b8 <MX_OCTOSPI1_Init+0xdc>)
 80007fe:	2200      	movs	r2, #0
 8000800:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 26;
 8000802:	4b2d      	ldr	r3, [pc, #180]	; (80008b8 <MX_OCTOSPI1_Init+0xdc>)
 8000804:	221a      	movs	r2, #26
 8000806:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 2;
 8000808:	4b2b      	ldr	r3, [pc, #172]	; (80008b8 <MX_OCTOSPI1_Init+0xdc>)
 800080a:	2202      	movs	r2, #2
 800080c:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 800080e:	4b2a      	ldr	r3, [pc, #168]	; (80008b8 <MX_OCTOSPI1_Init+0xdc>)
 8000810:	2200      	movs	r2, #0
 8000812:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8000814:	4b28      	ldr	r3, [pc, #160]	; (80008b8 <MX_OCTOSPI1_Init+0xdc>)
 8000816:	2200      	movs	r2, #0
 8000818:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 800081a:	4b27      	ldr	r3, [pc, #156]	; (80008b8 <MX_OCTOSPI1_Init+0xdc>)
 800081c:	2200      	movs	r2, #0
 800081e:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 3;
 8000820:	4b25      	ldr	r3, [pc, #148]	; (80008b8 <MX_OCTOSPI1_Init+0xdc>)
 8000822:	2203      	movs	r2, #3
 8000824:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000826:	4b24      	ldr	r3, [pc, #144]	; (80008b8 <MX_OCTOSPI1_Init+0xdc>)
 8000828:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800082c:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 800082e:	4b22      	ldr	r3, [pc, #136]	; (80008b8 <MX_OCTOSPI1_Init+0xdc>)
 8000830:	2200      	movs	r2, #0
 8000832:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 8000834:	4b20      	ldr	r3, [pc, #128]	; (80008b8 <MX_OCTOSPI1_Init+0xdc>)
 8000836:	2200      	movs	r2, #0
 8000838:	631a      	str	r2, [r3, #48]	; 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 800083a:	4b1f      	ldr	r3, [pc, #124]	; (80008b8 <MX_OCTOSPI1_Init+0xdc>)
 800083c:	2208      	movs	r2, #8
 800083e:	635a      	str	r2, [r3, #52]	; 0x34
  hospi1.Init.MaxTran = 0;
 8000840:	4b1d      	ldr	r3, [pc, #116]	; (80008b8 <MX_OCTOSPI1_Init+0xdc>)
 8000842:	2200      	movs	r2, #0
 8000844:	639a      	str	r2, [r3, #56]	; 0x38
  hospi1.Init.Refresh = 0;
 8000846:	4b1c      	ldr	r3, [pc, #112]	; (80008b8 <MX_OCTOSPI1_Init+0xdc>)
 8000848:	2200      	movs	r2, #0
 800084a:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 800084c:	481a      	ldr	r0, [pc, #104]	; (80008b8 <MX_OCTOSPI1_Init+0xdc>)
 800084e:	f009 feef 	bl	800a630 <HAL_OSPI_Init>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_OCTOSPI1_Init+0x80>
  {
    Error_Handler();
 8000858:	f000 f9da 	bl	8000c10 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */
  sMemMappedCfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 800085c:	2300      	movs	r3, #0
 800085e:	607b      	str	r3, [r7, #4]
  sMemMappedCfg.TimeOutPeriod = 1;
 8000860:	2301      	movs	r3, #1
 8000862:	60bb      	str	r3, [r7, #8]

  if (HAL_OSPI_MemoryMapped(&hospi1, &sMemMappedCfg) != HAL_OK)
 8000864:	1d3b      	adds	r3, r7, #4
 8000866:	4619      	mov	r1, r3
 8000868:	4813      	ldr	r0, [pc, #76]	; (80008b8 <MX_OCTOSPI1_Init+0xdc>)
 800086a:	f00a fb31 	bl	800aed0 <HAL_OSPI_MemoryMapped>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_OCTOSPI1_Init+0x9c>
  {
    Error_Handler();
 8000874:	f000 f9cc 	bl	8000c10 <Error_Handler>
  }
  BSP_OSPI_NOR_Init_t Flash;
  Flash.InterfaceMode = BSP_OSPI_NOR_OPI_MODE;
 8000878:	2301      	movs	r3, #1
 800087a:	703b      	strb	r3, [r7, #0]
  Flash.TransferRate  = BSP_OSPI_NOR_DTR_TRANSFER;
 800087c:	2301      	movs	r3, #1
 800087e:	707b      	strb	r3, [r7, #1]
  BSP_OSPI_NOR_DeInit(0);
 8000880:	2000      	movs	r0, #0
 8000882:	f006 fbaf 	bl	8006fe4 <BSP_OSPI_NOR_DeInit>
  int32_t RetVal = BSP_OSPI_NOR_Init(0, &Flash);
 8000886:	463b      	mov	r3, r7
 8000888:	4619      	mov	r1, r3
 800088a:	2000      	movs	r0, #0
 800088c:	f006 fb20 	bl	8006ed0 <BSP_OSPI_NOR_Init>
 8000890:	60f8      	str	r0, [r7, #12]
  if(RetVal != BSP_ERROR_NONE)
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_OCTOSPI1_Init+0xc0>
  {
    Error_Handler();
 8000898:	f000 f9ba 	bl	8000c10 <Error_Handler>
  }
  RetVal = BSP_OSPI_NOR_EnableMemoryMappedMode(0);
 800089c:	2000      	movs	r0, #0
 800089e:	f006 fc3d 	bl	800711c <BSP_OSPI_NOR_EnableMemoryMappedMode>
 80008a2:	60f8      	str	r0, [r7, #12]
  if(RetVal != BSP_ERROR_NONE)
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_OCTOSPI1_Init+0xd2>
  {
    Error_Handler();
 80008aa:	f000 f9b1 	bl	8000c10 <Error_Handler>
  }
  /* USER CODE END OCTOSPI1_Init 2 */

}
 80008ae:	bf00      	nop
 80008b0:	3710      	adds	r7, #16
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	240002b4 	.word	0x240002b4
 80008bc:	52005000 	.word	0x52005000

080008c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b08e      	sub	sp, #56	; 0x38
 80008c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ca:	2200      	movs	r2, #0
 80008cc:	601a      	str	r2, [r3, #0]
 80008ce:	605a      	str	r2, [r3, #4]
 80008d0:	609a      	str	r2, [r3, #8]
 80008d2:	60da      	str	r2, [r3, #12]
 80008d4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80008d6:	4b8b      	ldr	r3, [pc, #556]	; (8000b04 <MX_GPIO_Init+0x244>)
 80008d8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008dc:	4a89      	ldr	r2, [pc, #548]	; (8000b04 <MX_GPIO_Init+0x244>)
 80008de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008e2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008e6:	4b87      	ldr	r3, [pc, #540]	; (8000b04 <MX_GPIO_Init+0x244>)
 80008e8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80008f0:	623b      	str	r3, [r7, #32]
 80008f2:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008f4:	4b83      	ldr	r3, [pc, #524]	; (8000b04 <MX_GPIO_Init+0x244>)
 80008f6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008fa:	4a82      	ldr	r2, [pc, #520]	; (8000b04 <MX_GPIO_Init+0x244>)
 80008fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000900:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000904:	4b7f      	ldr	r3, [pc, #508]	; (8000b04 <MX_GPIO_Init+0x244>)
 8000906:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800090a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800090e:	61fb      	str	r3, [r7, #28]
 8000910:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000912:	4b7c      	ldr	r3, [pc, #496]	; (8000b04 <MX_GPIO_Init+0x244>)
 8000914:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000918:	4a7a      	ldr	r2, [pc, #488]	; (8000b04 <MX_GPIO_Init+0x244>)
 800091a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800091e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000922:	4b78      	ldr	r3, [pc, #480]	; (8000b04 <MX_GPIO_Init+0x244>)
 8000924:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000928:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800092c:	61bb      	str	r3, [r7, #24]
 800092e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000930:	4b74      	ldr	r3, [pc, #464]	; (8000b04 <MX_GPIO_Init+0x244>)
 8000932:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000936:	4a73      	ldr	r2, [pc, #460]	; (8000b04 <MX_GPIO_Init+0x244>)
 8000938:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800093c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000940:	4b70      	ldr	r3, [pc, #448]	; (8000b04 <MX_GPIO_Init+0x244>)
 8000942:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000946:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800094a:	617b      	str	r3, [r7, #20]
 800094c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800094e:	4b6d      	ldr	r3, [pc, #436]	; (8000b04 <MX_GPIO_Init+0x244>)
 8000950:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000954:	4a6b      	ldr	r2, [pc, #428]	; (8000b04 <MX_GPIO_Init+0x244>)
 8000956:	f043 0301 	orr.w	r3, r3, #1
 800095a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800095e:	4b69      	ldr	r3, [pc, #420]	; (8000b04 <MX_GPIO_Init+0x244>)
 8000960:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000964:	f003 0301 	and.w	r3, r3, #1
 8000968:	613b      	str	r3, [r7, #16]
 800096a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800096c:	4b65      	ldr	r3, [pc, #404]	; (8000b04 <MX_GPIO_Init+0x244>)
 800096e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000972:	4a64      	ldr	r2, [pc, #400]	; (8000b04 <MX_GPIO_Init+0x244>)
 8000974:	f043 0304 	orr.w	r3, r3, #4
 8000978:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800097c:	4b61      	ldr	r3, [pc, #388]	; (8000b04 <MX_GPIO_Init+0x244>)
 800097e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000982:	f003 0304 	and.w	r3, r3, #4
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800098a:	4b5e      	ldr	r3, [pc, #376]	; (8000b04 <MX_GPIO_Init+0x244>)
 800098c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000990:	4a5c      	ldr	r2, [pc, #368]	; (8000b04 <MX_GPIO_Init+0x244>)
 8000992:	f043 0308 	orr.w	r3, r3, #8
 8000996:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800099a:	4b5a      	ldr	r3, [pc, #360]	; (8000b04 <MX_GPIO_Init+0x244>)
 800099c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009a0:	f003 0308 	and.w	r3, r3, #8
 80009a4:	60bb      	str	r3, [r7, #8]
 80009a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009a8:	4b56      	ldr	r3, [pc, #344]	; (8000b04 <MX_GPIO_Init+0x244>)
 80009aa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009ae:	4a55      	ldr	r2, [pc, #340]	; (8000b04 <MX_GPIO_Init+0x244>)
 80009b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009b4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80009b8:	4b52      	ldr	r3, [pc, #328]	; (8000b04 <MX_GPIO_Init+0x244>)
 80009ba:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009c2:	607b      	str	r3, [r7, #4]
 80009c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009c6:	4b4f      	ldr	r3, [pc, #316]	; (8000b04 <MX_GPIO_Init+0x244>)
 80009c8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009cc:	4a4d      	ldr	r2, [pc, #308]	; (8000b04 <MX_GPIO_Init+0x244>)
 80009ce:	f043 0302 	orr.w	r3, r3, #2
 80009d2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80009d6:	4b4b      	ldr	r3, [pc, #300]	; (8000b04 <MX_GPIO_Init+0x244>)
 80009d8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009dc:	f003 0302 	and.w	r3, r3, #2
 80009e0:	603b      	str	r3, [r7, #0]
 80009e2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 80009e4:	2200      	movs	r2, #0
 80009e6:	f640 0104 	movw	r1, #2052	; 0x804
 80009ea:	4847      	ldr	r0, [pc, #284]	; (8000b08 <MX_GPIO_Init+0x248>)
 80009ec:	f008 fb60 	bl	80090b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 80009f0:	2200      	movs	r2, #0
 80009f2:	2101      	movs	r1, #1
 80009f4:	4845      	ldr	r0, [pc, #276]	; (8000b0c <MX_GPIO_Init+0x24c>)
 80009f6:	f008 fb5b 	bl	80090b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, VSYNC_FREQ_Pin|LCD_BL_CTRL_Pin|LCD_ON_OFF_Pin, GPIO_PIN_RESET);
 80009fa:	2200      	movs	r2, #0
 80009fc:	f241 0106 	movw	r1, #4102	; 0x1006
 8000a00:	4843      	ldr	r0, [pc, #268]	; (8000b10 <MX_GPIO_Init+0x250>)
 8000a02:	f008 fb55 	bl	80090b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RENDER_TIME_Pin|FRAME_RATE_Pin, GPIO_PIN_RESET);
 8000a06:	2200      	movs	r2, #0
 8000a08:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000a0c:	4841      	ldr	r0, [pc, #260]	; (8000b14 <MX_GPIO_Init+0x254>)
 8000a0e:	f008 fb4f 	bl	80090b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED3_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 8000a12:	f640 0304 	movw	r3, #2052	; 0x804
 8000a16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a20:	2300      	movs	r3, #0
 8000a22:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4837      	ldr	r0, [pc, #220]	; (8000b08 <MX_GPIO_Init+0x248>)
 8000a2c:	f008 f886 	bl	8008b3c <HAL_GPIO_Init>

  /*Configure GPIO pin : MCU_ACTIVE_Pin */
  GPIO_InitStruct.Pin = MCU_ACTIVE_Pin;
 8000a30:	2301      	movs	r3, #1
 8000a32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a34:	2301      	movs	r3, #1
 8000a36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 8000a40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a44:	4619      	mov	r1, r3
 8000a46:	4831      	ldr	r0, [pc, #196]	; (8000b0c <MX_GPIO_Init+0x24c>)
 8000a48:	f008 f878 	bl	8008b3c <HAL_GPIO_Init>

  /*Configure GPIO pins : VSYNC_FREQ_Pin LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = VSYNC_FREQ_Pin|LCD_BL_CTRL_Pin;
 8000a4c:	f241 0302 	movw	r3, #4098	; 0x1002
 8000a50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a52:	2301      	movs	r3, #1
 8000a54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a56:	2300      	movs	r3, #0
 8000a58:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a62:	4619      	mov	r1, r3
 8000a64:	482a      	ldr	r0, [pc, #168]	; (8000b10 <MX_GPIO_Init+0x250>)
 8000a66:	f008 f869 	bl	8008b3c <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BTN_Pin */
  GPIO_InitStruct.Pin = USER_BTN_Pin;
 8000a6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a70:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_BTN_GPIO_Port, &GPIO_InitStruct);
 8000a7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4825      	ldr	r0, [pc, #148]	; (8000b18 <MX_GPIO_Init+0x258>)
 8000a82:	f008 f85b 	bl	8008b3c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000a86:	2304      	movs	r3, #4
 8000a88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a8a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a8e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a90:	2301      	movs	r3, #1
 8000a92:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000a94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4820      	ldr	r0, [pc, #128]	; (8000b1c <MX_GPIO_Init+0x25c>)
 8000a9c:	f008 f84e 	bl	8008b3c <HAL_GPIO_Init>

  /*Configure GPIO pins : RENDER_TIME_Pin FRAME_RATE_Pin */
  GPIO_InitStruct.Pin = RENDER_TIME_Pin|FRAME_RATE_Pin;
 8000aa0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000aa4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4816      	ldr	r0, [pc, #88]	; (8000b14 <MX_GPIO_Init+0x254>)
 8000aba:	f008 f83f 	bl	8008b3c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_ON_OFF_Pin */
  GPIO_InitStruct.Pin = LCD_ON_OFF_Pin;
 8000abe:	2304      	movs	r3, #4
 8000ac0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aca:	2300      	movs	r3, #0
 8000acc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_ON_OFF_GPIO_Port, &GPIO_InitStruct);
 8000ace:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	480e      	ldr	r0, [pc, #56]	; (8000b10 <MX_GPIO_Init+0x250>)
 8000ad6:	f008 f831 	bl	8008b3c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8000ada:	2200      	movs	r2, #0
 8000adc:	2105      	movs	r1, #5
 8000ade:	2008      	movs	r0, #8
 8000ae0:	f007 fc66 	bl	80083b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000ae4:	2008      	movs	r0, #8
 8000ae6:	f007 fc7d 	bl	80083e4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000aea:	2200      	movs	r2, #0
 8000aec:	2105      	movs	r1, #5
 8000aee:	2028      	movs	r0, #40	; 0x28
 8000af0:	f007 fc5e 	bl	80083b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000af4:	2028      	movs	r0, #40	; 0x28
 8000af6:	f007 fc75 	bl	80083e4 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000afa:	bf00      	nop
 8000afc:	3738      	adds	r7, #56	; 0x38
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	58024400 	.word	0x58024400
 8000b08:	58021800 	.word	0x58021800
 8000b0c:	58022000 	.word	0x58022000
 8000b10:	58020000 	.word	0x58020000
 8000b14:	58020400 	.word	0x58020400
 8000b18:	58020800 	.word	0x58020800
 8000b1c:	58021c00 	.word	0x58021c00

08000b20 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
volatile uint32_t userButtonPressed = 0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	4603      	mov	r3, r0
 8000b28:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == USER_BTN_Pin)
 8000b2a:	88fb      	ldrh	r3, [r7, #6]
 8000b2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b30:	d102      	bne.n	8000b38 <HAL_GPIO_EXTI_Callback+0x18>
	{
		userButtonPressed = 1;
 8000b32:	4b04      	ldr	r3, [pc, #16]	; (8000b44 <HAL_GPIO_EXTI_Callback+0x24>)
 8000b34:	2201      	movs	r2, #1
 8000b36:	601a      	str	r2, [r3, #0]
	}
}
 8000b38:	bf00      	nop
 8000b3a:	370c      	adds	r7, #12
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr
 8000b44:	24000314 	.word	0x24000314

08000b48 <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000b4e:	463b      	mov	r3, r7
 8000b50:	2200      	movs	r2, #0
 8000b52:	601a      	str	r2, [r3, #0]
 8000b54:	605a      	str	r2, [r3, #4]
 8000b56:	609a      	str	r2, [r3, #8]
 8000b58:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000b5a:	f007 fc5f 	bl	800841c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000b62:	2300      	movs	r3, #0
 8000b64:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000b66:	2300      	movs	r3, #0
 8000b68:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000b6a:	231f      	movs	r3, #31
 8000b6c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000b6e:	2387      	movs	r3, #135	; 0x87
 8000b70:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000b72:	2300      	movs	r3, #0
 8000b74:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000b76:	2300      	movs	r3, #0
 8000b78:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000b82:	2300      	movs	r3, #0
 8000b84:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000b86:	2300      	movs	r3, #0
 8000b88:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b8a:	463b      	mov	r3, r7
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f007 fc7d 	bl	800848c <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000b92:	2301      	movs	r3, #1
 8000b94:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x90000000;
 8000b96:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 8000b9a:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 8000b9c:	2319      	movs	r3, #25
 8000b9e:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000ba4:	2303      	movs	r3, #3
 8000ba6:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	73bb      	strb	r3, [r7, #14]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000bac:	463b      	mov	r3, r7
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f007 fc6c 	bl	800848c <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 8000bb8:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
 8000bbc:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_1MB;
 8000bbe:	2313      	movs	r3, #19
 8000bc0:	723b      	strb	r3, [r7, #8]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000bc2:	463b      	mov	r3, r7
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f007 fc61 	bl	800848c <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8000bca:	2303      	movs	r3, #3
 8000bcc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 8000bce:	2311      	movs	r3, #17
 8000bd0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000bd6:	463b      	mov	r3, r7
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f007 fc57 	bl	800848c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000bde:	2004      	movs	r0, #4
 8000be0:	f007 fc34 	bl	800844c <HAL_MPU_Enable>

}
 8000be4:	bf00      	nop
 8000be6:	3710      	adds	r7, #16
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}

08000bec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a04      	ldr	r2, [pc, #16]	; (8000c0c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d101      	bne.n	8000c02 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bfe:	f007 fab7 	bl	8008170 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c02:	bf00      	nop
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40001000 	.word	0x40001000

08000c10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c14:	bf00      	nop
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
	...

08000c20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c26:	4b0c      	ldr	r3, [pc, #48]	; (8000c58 <HAL_MspInit+0x38>)
 8000c28:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000c2c:	4a0a      	ldr	r2, [pc, #40]	; (8000c58 <HAL_MspInit+0x38>)
 8000c2e:	f043 0302 	orr.w	r3, r3, #2
 8000c32:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000c36:	4b08      	ldr	r3, [pc, #32]	; (8000c58 <HAL_MspInit+0x38>)
 8000c38:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000c3c:	f003 0302 	and.w	r3, r3, #2
 8000c40:	607b      	str	r3, [r7, #4]
 8000c42:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c44:	2200      	movs	r2, #0
 8000c46:	210f      	movs	r1, #15
 8000c48:	f06f 0001 	mvn.w	r0, #1
 8000c4c:	f007 fbb0 	bl	80083b0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c50:	bf00      	nop
 8000c52:	3708      	adds	r7, #8
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	58024400 	.word	0x58024400

08000c5c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b085      	sub	sp, #20
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a0b      	ldr	r2, [pc, #44]	; (8000c98 <HAL_CRC_MspInit+0x3c>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d10e      	bne.n	8000c8c <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000c6e:	4b0b      	ldr	r3, [pc, #44]	; (8000c9c <HAL_CRC_MspInit+0x40>)
 8000c70:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000c74:	4a09      	ldr	r2, [pc, #36]	; (8000c9c <HAL_CRC_MspInit+0x40>)
 8000c76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c7a:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000c7e:	4b07      	ldr	r3, [pc, #28]	; (8000c9c <HAL_CRC_MspInit+0x40>)
 8000c80:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000c84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c88:	60fb      	str	r3, [r7, #12]
 8000c8a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000c8c:	bf00      	nop
 8000c8e:	3714      	adds	r7, #20
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr
 8000c98:	40023000 	.word	0x40023000
 8000c9c:	58024400 	.word	0x58024400

08000ca0 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b084      	sub	sp, #16
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a0e      	ldr	r2, [pc, #56]	; (8000ce8 <HAL_DMA2D_MspInit+0x48>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d116      	bne.n	8000ce0 <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000cb2:	4b0e      	ldr	r3, [pc, #56]	; (8000cec <HAL_DMA2D_MspInit+0x4c>)
 8000cb4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8000cb8:	4a0c      	ldr	r2, [pc, #48]	; (8000cec <HAL_DMA2D_MspInit+0x4c>)
 8000cba:	f043 0310 	orr.w	r3, r3, #16
 8000cbe:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8000cc2:	4b0a      	ldr	r3, [pc, #40]	; (8000cec <HAL_DMA2D_MspInit+0x4c>)
 8000cc4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8000cc8:	f003 0310 	and.w	r3, r3, #16
 8000ccc:	60fb      	str	r3, [r7, #12]
 8000cce:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	2105      	movs	r1, #5
 8000cd4:	205a      	movs	r0, #90	; 0x5a
 8000cd6:	f007 fb6b 	bl	80083b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000cda:	205a      	movs	r0, #90	; 0x5a
 8000cdc:	f007 fb82 	bl	80083e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8000ce0:	bf00      	nop
 8000ce2:	3710      	adds	r7, #16
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	52001000 	.word	0x52001000
 8000cec:	58024400 	.word	0x58024400

08000cf0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b0ba      	sub	sp, #232	; 0xe8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]
 8000d04:	60da      	str	r2, [r3, #12]
 8000d06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d08:	f107 0310 	add.w	r3, r7, #16
 8000d0c:	22c0      	movs	r2, #192	; 0xc0
 8000d0e:	2100      	movs	r1, #0
 8000d10:	4618      	mov	r0, r3
 8000d12:	f020 fa5e 	bl	80211d2 <memset>
  if(hi2c->Instance==I2C4)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4a27      	ldr	r2, [pc, #156]	; (8000db8 <HAL_I2C_MspInit+0xc8>)
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d146      	bne.n	8000dae <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8000d20:	f04f 0210 	mov.w	r2, #16
 8000d24:	f04f 0300 	mov.w	r3, #0
 8000d28:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d32:	f107 0310 	add.w	r3, r7, #16
 8000d36:	4618      	mov	r0, r3
 8000d38:	f00b fc34 	bl	800c5a4 <HAL_RCCEx_PeriphCLKConfig>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000d42:	f7ff ff65 	bl	8000c10 <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d46:	4b1d      	ldr	r3, [pc, #116]	; (8000dbc <HAL_I2C_MspInit+0xcc>)
 8000d48:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d4c:	4a1b      	ldr	r2, [pc, #108]	; (8000dbc <HAL_I2C_MspInit+0xcc>)
 8000d4e:	f043 0308 	orr.w	r3, r3, #8
 8000d52:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d56:	4b19      	ldr	r3, [pc, #100]	; (8000dbc <HAL_I2C_MspInit+0xcc>)
 8000d58:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d5c:	f003 0308 	and.w	r3, r3, #8
 8000d60:	60fb      	str	r3, [r7, #12]
 8000d62:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PD13     ------> I2C4_SDA
    PD12     ------> I2C4_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12;
 8000d64:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000d68:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d6c:	2312      	movs	r3, #18
 8000d6e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	2300      	movs	r3, #0
 8000d74:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d78:	2302      	movs	r3, #2
 8000d7a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000d7e:	2304      	movs	r3, #4
 8000d80:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d84:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000d88:	4619      	mov	r1, r3
 8000d8a:	480d      	ldr	r0, [pc, #52]	; (8000dc0 <HAL_I2C_MspInit+0xd0>)
 8000d8c:	f007 fed6 	bl	8008b3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8000d90:	4b0a      	ldr	r3, [pc, #40]	; (8000dbc <HAL_I2C_MspInit+0xcc>)
 8000d92:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000d96:	4a09      	ldr	r2, [pc, #36]	; (8000dbc <HAL_I2C_MspInit+0xcc>)
 8000d98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d9c:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000da0:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <HAL_I2C_MspInit+0xcc>)
 8000da2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000daa:	60bb      	str	r3, [r7, #8]
 8000dac:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8000dae:	bf00      	nop
 8000db0:	37e8      	adds	r7, #232	; 0xe8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	58001c00 	.word	0x58001c00
 8000dbc:	58024400 	.word	0x58024400
 8000dc0:	58020c00 	.word	0x58020c00

08000dc4 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C4)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a0c      	ldr	r2, [pc, #48]	; (8000e04 <HAL_I2C_MspDeInit+0x40>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d111      	bne.n	8000dfa <HAL_I2C_MspDeInit+0x36>
  {
  /* USER CODE BEGIN I2C4_MspDeInit 0 */

  /* USER CODE END I2C4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C4_CLK_DISABLE();
 8000dd6:	4b0c      	ldr	r3, [pc, #48]	; (8000e08 <HAL_I2C_MspDeInit+0x44>)
 8000dd8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000ddc:	4a0a      	ldr	r2, [pc, #40]	; (8000e08 <HAL_I2C_MspDeInit+0x44>)
 8000dde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000de2:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154

    /**I2C4 GPIO Configuration
    PD13     ------> I2C4_SDA
    PD12     ------> I2C4_SCL
    */
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_13);
 8000de6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dea:	4808      	ldr	r0, [pc, #32]	; (8000e0c <HAL_I2C_MspDeInit+0x48>)
 8000dec:	f008 f856 	bl	8008e9c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_12);
 8000df0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000df4:	4805      	ldr	r0, [pc, #20]	; (8000e0c <HAL_I2C_MspDeInit+0x48>)
 8000df6:	f008 f851 	bl	8008e9c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C4_MspDeInit 1 */

  /* USER CODE END I2C4_MspDeInit 1 */
  }

}
 8000dfa:	bf00      	nop
 8000dfc:	3708      	adds	r7, #8
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	58001c00 	.word	0x58001c00
 8000e08:	58024400 	.word	0x58024400
 8000e0c:	58020c00 	.word	0x58020c00

08000e10 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b0bc      	sub	sp, #240	; 0xf0
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e18:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	605a      	str	r2, [r3, #4]
 8000e22:	609a      	str	r2, [r3, #8]
 8000e24:	60da      	str	r2, [r3, #12]
 8000e26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e28:	f107 0318 	add.w	r3, r7, #24
 8000e2c:	22c0      	movs	r2, #192	; 0xc0
 8000e2e:	2100      	movs	r1, #0
 8000e30:	4618      	mov	r0, r3
 8000e32:	f020 f9ce 	bl	80211d2 <memset>
  if(hltdc->Instance==LTDC)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a57      	ldr	r2, [pc, #348]	; (8000f98 <HAL_LTDC_MspInit+0x188>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	f040 80a6 	bne.w	8000f8e <HAL_LTDC_MspInit+0x17e>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000e42:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000e46:	f04f 0300 	mov.w	r3, #0
 8000e4a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL3.PLL3M = 24;
 8000e4e:	2318      	movs	r3, #24
 8000e50:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3N = 288;
 8000e52:	f44f 7390 	mov.w	r3, #288	; 0x120
 8000e56:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3P = 17;
 8000e58:	2311      	movs	r3, #17
 8000e5a:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3R = 30;
 8000e60:	231e      	movs	r3, #30
 8000e62:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 8000e64:	2300      	movs	r3, #0
 8000e66:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e70:	f107 0318 	add.w	r3, r7, #24
 8000e74:	4618      	mov	r0, r3
 8000e76:	f00b fb95 	bl	800c5a4 <HAL_RCCEx_PeriphCLKConfig>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <HAL_LTDC_MspInit+0x74>
    {
      Error_Handler();
 8000e80:	f7ff fec6 	bl	8000c10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000e84:	4b45      	ldr	r3, [pc, #276]	; (8000f9c <HAL_LTDC_MspInit+0x18c>)
 8000e86:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8000e8a:	4a44      	ldr	r2, [pc, #272]	; (8000f9c <HAL_LTDC_MspInit+0x18c>)
 8000e8c:	f043 0308 	orr.w	r3, r3, #8
 8000e90:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144
 8000e94:	4b41      	ldr	r3, [pc, #260]	; (8000f9c <HAL_LTDC_MspInit+0x18c>)
 8000e96:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8000e9a:	f003 0308 	and.w	r3, r3, #8
 8000e9e:	617b      	str	r3, [r7, #20]
 8000ea0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 8000ea2:	4b3e      	ldr	r3, [pc, #248]	; (8000f9c <HAL_LTDC_MspInit+0x18c>)
 8000ea4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ea8:	4a3c      	ldr	r2, [pc, #240]	; (8000f9c <HAL_LTDC_MspInit+0x18c>)
 8000eaa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000eae:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000eb2:	4b3a      	ldr	r3, [pc, #232]	; (8000f9c <HAL_LTDC_MspInit+0x18c>)
 8000eb4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000eb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ebc:	613b      	str	r3, [r7, #16]
 8000ebe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000ec0:	4b36      	ldr	r3, [pc, #216]	; (8000f9c <HAL_LTDC_MspInit+0x18c>)
 8000ec2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ec6:	4a35      	ldr	r2, [pc, #212]	; (8000f9c <HAL_LTDC_MspInit+0x18c>)
 8000ec8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ecc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ed0:	4b32      	ldr	r3, [pc, #200]	; (8000f9c <HAL_LTDC_MspInit+0x18c>)
 8000ed2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ed6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8000ede:	4b2f      	ldr	r3, [pc, #188]	; (8000f9c <HAL_LTDC_MspInit+0x18c>)
 8000ee0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ee4:	4a2d      	ldr	r2, [pc, #180]	; (8000f9c <HAL_LTDC_MspInit+0x18c>)
 8000ee6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eea:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000eee:	4b2b      	ldr	r3, [pc, #172]	; (8000f9c <HAL_LTDC_MspInit+0x18c>)
 8000ef0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ef4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ef8:	60bb      	str	r3, [r7, #8]
 8000efa:	68bb      	ldr	r3, [r7, #8]
    PJ1     ------> LTDC_R2
    PJ4     ------> LTDC_R5
    PJ2     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_3|GPIO_PIN_4
 8000efc:	23ff      	movs	r3, #255	; 0xff
 8000efe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_7|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f02:	2302      	movs	r3, #2
 8000f04:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f14:	230e      	movs	r3, #14
 8000f16:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000f1a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000f1e:	4619      	mov	r1, r3
 8000f20:	481f      	ldr	r0, [pc, #124]	; (8000fa0 <HAL_LTDC_MspInit+0x190>)
 8000f22:	f007 fe0b 	bl	8008b3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12
 8000f26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f2a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_0|GPIO_PIN_5
                          |GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f34:	2300      	movs	r3, #0
 8000f36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f40:	230e      	movs	r3, #14
 8000f42:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000f46:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4815      	ldr	r0, [pc, #84]	; (8000fa4 <HAL_LTDC_MspInit+0x194>)
 8000f4e:	f007 fdf5 	bl	8008b3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_15;
 8000f52:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000f56:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f60:	2300      	movs	r3, #0
 8000f62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f66:	2300      	movs	r3, #0
 8000f68:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f6c:	230e      	movs	r3, #14
 8000f6e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000f72:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000f76:	4619      	mov	r1, r3
 8000f78:	480b      	ldr	r0, [pc, #44]	; (8000fa8 <HAL_LTDC_MspInit+0x198>)
 8000f7a:	f007 fddf 	bl	8008b3c <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	2105      	movs	r1, #5
 8000f82:	2058      	movs	r0, #88	; 0x58
 8000f84:	f007 fa14 	bl	80083b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8000f88:	2058      	movs	r0, #88	; 0x58
 8000f8a:	f007 fa2b 	bl	80083e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8000f8e:	bf00      	nop
 8000f90:	37f0      	adds	r7, #240	; 0xf0
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	50001000 	.word	0x50001000
 8000f9c:	58024400 	.word	0x58024400
 8000fa0:	58022800 	.word	0x58022800
 8000fa4:	58022400 	.word	0x58022400
 8000fa8:	58022000 	.word	0x58022000

08000fac <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b0b4      	sub	sp, #208	; 0xd0
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fb4:	f107 0310 	add.w	r3, r7, #16
 8000fb8:	22c0      	movs	r2, #192	; 0xc0
 8000fba:	2100      	movs	r1, #0
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f020 f908 	bl	80211d2 <memset>
  if(hospi->Instance==OCTOSPI1)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a2e      	ldr	r2, [pc, #184]	; (8001080 <HAL_OSPI_MspInit+0xd4>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d154      	bne.n	8001076 <HAL_OSPI_MspInit+0xca>
  {
  /* USER CODE BEGIN OCTOSPI1_MspInit 0 */
	__HAL_RCC_OSPI1_FORCE_RESET();
 8000fcc:	4b2d      	ldr	r3, [pc, #180]	; (8001084 <HAL_OSPI_MspInit+0xd8>)
 8000fce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000fd0:	4a2c      	ldr	r2, [pc, #176]	; (8001084 <HAL_OSPI_MspInit+0xd8>)
 8000fd2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fd6:	67d3      	str	r3, [r2, #124]	; 0x7c
	__HAL_RCC_OSPI1_RELEASE_RESET();
 8000fd8:	4b2a      	ldr	r3, [pc, #168]	; (8001084 <HAL_OSPI_MspInit+0xd8>)
 8000fda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000fdc:	4a29      	ldr	r2, [pc, #164]	; (8001084 <HAL_OSPI_MspInit+0xd8>)
 8000fde:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000fe2:	67d3      	str	r3, [r2, #124]	; 0x7c
  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8000fe4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000fe8:	f04f 0300 	mov.w	r3, #0
 8000fec:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 10;
 8000ff4:	230a      	movs	r3, #10
 8000ff6:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 1;
 8001000:	2301      	movs	r3, #1
 8001002:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001004:	23c0      	movs	r3, #192	; 0xc0
 8001006:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001008:	2300      	movs	r3, #0
 800100a:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 5462;
 800100c:	f241 5356 	movw	r3, #5462	; 0x1556
 8001010:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_PLL2;
 8001012:	2320      	movs	r3, #32
 8001014:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001016:	f107 0310 	add.w	r3, r7, #16
 800101a:	4618      	mov	r0, r3
 800101c:	f00b fac2 	bl	800c5a4 <HAL_RCCEx_PeriphCLKConfig>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <HAL_OSPI_MspInit+0x7e>
    {
      Error_Handler();
 8001026:	f7ff fdf3 	bl	8000c10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 800102a:	4b16      	ldr	r3, [pc, #88]	; (8001084 <HAL_OSPI_MspInit+0xd8>)
 800102c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001030:	4a14      	ldr	r2, [pc, #80]	; (8001084 <HAL_OSPI_MspInit+0xd8>)
 8001032:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001036:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 800103a:	4b12      	ldr	r3, [pc, #72]	; (8001084 <HAL_OSPI_MspInit+0xd8>)
 800103c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001040:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001044:	60fb      	str	r3, [r7, #12]
 8001046:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8001048:	4b0e      	ldr	r3, [pc, #56]	; (8001084 <HAL_OSPI_MspInit+0xd8>)
 800104a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800104e:	4a0d      	ldr	r2, [pc, #52]	; (8001084 <HAL_OSPI_MspInit+0xd8>)
 8001050:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001054:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8001058:	4b0a      	ldr	r3, [pc, #40]	; (8001084 <HAL_OSPI_MspInit+0xd8>)
 800105a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800105e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001062:	60bb      	str	r3, [r7, #8]
 8001064:	68bb      	ldr	r3, [r7, #8]
    /* OCTOSPI1 interrupt Init */
    HAL_NVIC_SetPriority(OCTOSPI1_IRQn, 5, 0);
 8001066:	2200      	movs	r2, #0
 8001068:	2105      	movs	r1, #5
 800106a:	205c      	movs	r0, #92	; 0x5c
 800106c:	f007 f9a0 	bl	80083b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OCTOSPI1_IRQn);
 8001070:	205c      	movs	r0, #92	; 0x5c
 8001072:	f007 f9b7 	bl	80083e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 8001076:	bf00      	nop
 8001078:	37d0      	adds	r7, #208	; 0xd0
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	52005000 	.word	0x52005000
 8001084:	58024400 	.word	0x58024400

08001088 <HAL_OSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspDeInit(OSPI_HandleTypeDef* hospi)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  if(hospi->Instance==OCTOSPI1)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a0c      	ldr	r2, [pc, #48]	; (80010c8 <HAL_OSPI_MspDeInit+0x40>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d112      	bne.n	80010c0 <HAL_OSPI_MspDeInit+0x38>
  {
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 0 */

  /* USER CODE END OCTOSPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_OCTOSPIM_CLK_DISABLE();
 800109a:	4b0c      	ldr	r3, [pc, #48]	; (80010cc <HAL_OSPI_MspDeInit+0x44>)
 800109c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80010a0:	4a0a      	ldr	r2, [pc, #40]	; (80010cc <HAL_OSPI_MspDeInit+0x44>)
 80010a2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80010a6:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
    __HAL_RCC_OSPI1_CLK_DISABLE();
 80010aa:	4b08      	ldr	r3, [pc, #32]	; (80010cc <HAL_OSPI_MspDeInit+0x44>)
 80010ac:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80010b0:	4a06      	ldr	r2, [pc, #24]	; (80010cc <HAL_OSPI_MspDeInit+0x44>)
 80010b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80010b6:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134

    /* OCTOSPI1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(OCTOSPI1_IRQn);
 80010ba:	205c      	movs	r0, #92	; 0x5c
 80010bc:	f007 f9a0 	bl	8008400 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 1 */

  /* USER CODE END OCTOSPI1_MspDeInit 1 */
  }

}
 80010c0:	bf00      	nop
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	52005000 	.word	0x52005000
 80010cc:	58024400 	.word	0x58024400

080010d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b090      	sub	sp, #64	; 0x40
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2b0f      	cmp	r3, #15
 80010dc:	d827      	bhi.n	800112e <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80010de:	2200      	movs	r2, #0
 80010e0:	6879      	ldr	r1, [r7, #4]
 80010e2:	2036      	movs	r0, #54	; 0x36
 80010e4:	f007 f964 	bl	80083b0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80010e8:	2036      	movs	r0, #54	; 0x36
 80010ea:	f007 f97b 	bl	80083e4 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80010ee:	4a29      	ldr	r2, [pc, #164]	; (8001194 <HAL_InitTick+0xc4>)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80010f4:	4b28      	ldr	r3, [pc, #160]	; (8001198 <HAL_InitTick+0xc8>)
 80010f6:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80010fa:	4a27      	ldr	r2, [pc, #156]	; (8001198 <HAL_InitTick+0xc8>)
 80010fc:	f043 0310 	orr.w	r3, r3, #16
 8001100:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001104:	4b24      	ldr	r3, [pc, #144]	; (8001198 <HAL_InitTick+0xc8>)
 8001106:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800110a:	f003 0310 	and.w	r3, r3, #16
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001112:	f107 0210 	add.w	r2, r7, #16
 8001116:	f107 0314 	add.w	r3, r7, #20
 800111a:	4611      	mov	r1, r2
 800111c:	4618      	mov	r0, r3
 800111e:	f00b f9ff 	bl	800c520 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001124:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001128:	2b00      	cmp	r3, #0
 800112a:	d106      	bne.n	800113a <HAL_InitTick+0x6a>
 800112c:	e001      	b.n	8001132 <HAL_InitTick+0x62>
    return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	e02b      	b.n	800118a <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001132:	f00b f9c9 	bl	800c4c8 <HAL_RCC_GetPCLK1Freq>
 8001136:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001138:	e004      	b.n	8001144 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800113a:	f00b f9c5 	bl	800c4c8 <HAL_RCC_GetPCLK1Freq>
 800113e:	4603      	mov	r3, r0
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001144:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001146:	4a15      	ldr	r2, [pc, #84]	; (800119c <HAL_InitTick+0xcc>)
 8001148:	fba2 2303 	umull	r2, r3, r2, r3
 800114c:	0c9b      	lsrs	r3, r3, #18
 800114e:	3b01      	subs	r3, #1
 8001150:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001152:	4b13      	ldr	r3, [pc, #76]	; (80011a0 <HAL_InitTick+0xd0>)
 8001154:	4a13      	ldr	r2, [pc, #76]	; (80011a4 <HAL_InitTick+0xd4>)
 8001156:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001158:	4b11      	ldr	r3, [pc, #68]	; (80011a0 <HAL_InitTick+0xd0>)
 800115a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800115e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001160:	4a0f      	ldr	r2, [pc, #60]	; (80011a0 <HAL_InitTick+0xd0>)
 8001162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001164:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001166:	4b0e      	ldr	r3, [pc, #56]	; (80011a0 <HAL_InitTick+0xd0>)
 8001168:	2200      	movs	r2, #0
 800116a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800116c:	4b0c      	ldr	r3, [pc, #48]	; (80011a0 <HAL_InitTick+0xd0>)
 800116e:	2200      	movs	r2, #0
 8001170:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001172:	480b      	ldr	r0, [pc, #44]	; (80011a0 <HAL_InitTick+0xd0>)
 8001174:	f00c fd38 	bl	800dbe8 <HAL_TIM_Base_Init>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d104      	bne.n	8001188 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800117e:	4808      	ldr	r0, [pc, #32]	; (80011a0 <HAL_InitTick+0xd0>)
 8001180:	f00c fd94 	bl	800dcac <HAL_TIM_Base_Start_IT>
 8001184:	4603      	mov	r3, r0
 8001186:	e000      	b.n	800118a <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001188:	2301      	movs	r3, #1
}
 800118a:	4618      	mov	r0, r3
 800118c:	3740      	adds	r7, #64	; 0x40
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	24000044 	.word	0x24000044
 8001198:	58024400 	.word	0x58024400
 800119c:	431bde83 	.word	0x431bde83
 80011a0:	24000318 	.word	0x24000318
 80011a4:	40001000 	.word	0x40001000

080011a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011ac:	e7fe      	b.n	80011ac <NMI_Handler+0x4>

080011ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011ae:	b480      	push	{r7}
 80011b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011b2:	e7fe      	b.n	80011b2 <HardFault_Handler+0x4>

080011b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011b8:	e7fe      	b.n	80011b8 <MemManage_Handler+0x4>

080011ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011ba:	b480      	push	{r7}
 80011bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011be:	e7fe      	b.n	80011be <BusFault_Handler+0x4>

080011c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011c4:	e7fe      	b.n	80011c4 <UsageFault_Handler+0x4>

080011c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011c6:	b480      	push	{r7}
 80011c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011ca:	bf00      	nop
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr

080011d4 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LCD_INT_Pin);
 80011d8:	2004      	movs	r0, #4
 80011da:	f007 ff9c 	bl	8009116 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BTN_Pin);
 80011e6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80011ea:	f007 ff94 	bl	8009116 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}
	...

080011f4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80011f8:	4802      	ldr	r0, [pc, #8]	; (8001204 <TIM6_DAC_IRQHandler+0x10>)
 80011fa:	f00c fdcf 	bl	800dd9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80011fe:	bf00      	nop
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	24000318 	.word	0x24000318

08001208 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800120c:	4802      	ldr	r0, [pc, #8]	; (8001218 <LTDC_IRQHandler+0x10>)
 800120e:	f008 fec5 	bl	8009f9c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001212:	bf00      	nop
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	2400020c 	.word	0x2400020c

0800121c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001220:	4802      	ldr	r0, [pc, #8]	; (800122c <DMA2D_IRQHandler+0x10>)
 8001222:	f007 facd 	bl	80087c0 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001226:	bf00      	nop
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	24000150 	.word	0x24000150

08001230 <OCTOSPI1_IRQHandler>:

/**
  * @brief This function handles OCTOSPI1 global interrupt.
  */
void OCTOSPI1_IRQHandler(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OCTOSPI1_IRQn 0 */

  /* USER CODE END OCTOSPI1_IRQn 0 */
  HAL_OSPI_IRQHandler(&hospi1);
 8001234:	4802      	ldr	r0, [pc, #8]	; (8001240 <OCTOSPI1_IRQHandler+0x10>)
 8001236:	f009 fadf 	bl	800a7f8 <HAL_OSPI_IRQHandler>
  /* USER CODE BEGIN OCTOSPI1_IRQn 1 */

  /* USER CODE END OCTOSPI1_IRQn 1 */
}
 800123a:	bf00      	nop
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	240002b4 	.word	0x240002b4

08001244 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  return 1;
 8001248:	2301      	movs	r3, #1
}
 800124a:	4618      	mov	r0, r3
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr

08001254 <_kill>:

int _kill(int pid, int sig)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800125e:	f020 f85b 	bl	8021318 <__errno>
 8001262:	4603      	mov	r3, r0
 8001264:	2216      	movs	r2, #22
 8001266:	601a      	str	r2, [r3, #0]
  return -1;
 8001268:	f04f 33ff 	mov.w	r3, #4294967295
}
 800126c:	4618      	mov	r0, r3
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}

08001274 <_exit>:

void _exit (int status)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800127c:	f04f 31ff 	mov.w	r1, #4294967295
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	f7ff ffe7 	bl	8001254 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001286:	e7fe      	b.n	8001286 <_exit+0x12>

08001288 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af00      	add	r7, sp, #0
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	60b9      	str	r1, [r7, #8]
 8001292:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001294:	2300      	movs	r3, #0
 8001296:	617b      	str	r3, [r7, #20]
 8001298:	e00a      	b.n	80012b0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800129a:	f3af 8000 	nop.w
 800129e:	4601      	mov	r1, r0
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	1c5a      	adds	r2, r3, #1
 80012a4:	60ba      	str	r2, [r7, #8]
 80012a6:	b2ca      	uxtb	r2, r1
 80012a8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	3301      	adds	r3, #1
 80012ae:	617b      	str	r3, [r7, #20]
 80012b0:	697a      	ldr	r2, [r7, #20]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	429a      	cmp	r2, r3
 80012b6:	dbf0      	blt.n	800129a <_read+0x12>
  }

  return len;
 80012b8:	687b      	ldr	r3, [r7, #4]
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3718      	adds	r7, #24
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b086      	sub	sp, #24
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	60f8      	str	r0, [r7, #12]
 80012ca:	60b9      	str	r1, [r7, #8]
 80012cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ce:	2300      	movs	r3, #0
 80012d0:	617b      	str	r3, [r7, #20]
 80012d2:	e009      	b.n	80012e8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	1c5a      	adds	r2, r3, #1
 80012d8:	60ba      	str	r2, [r7, #8]
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	4618      	mov	r0, r3
 80012de:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	3301      	adds	r3, #1
 80012e6:	617b      	str	r3, [r7, #20]
 80012e8:	697a      	ldr	r2, [r7, #20]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	dbf1      	blt.n	80012d4 <_write+0x12>
  }
  return len;
 80012f0:	687b      	ldr	r3, [r7, #4]
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3718      	adds	r7, #24
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <_close>:

int _close(int file)
{
 80012fa:	b480      	push	{r7}
 80012fc:	b083      	sub	sp, #12
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001302:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001306:	4618      	mov	r0, r3
 8001308:	370c      	adds	r7, #12
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr

08001312 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001312:	b480      	push	{r7}
 8001314:	b083      	sub	sp, #12
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
 800131a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001322:	605a      	str	r2, [r3, #4]
  return 0;
 8001324:	2300      	movs	r3, #0
}
 8001326:	4618      	mov	r0, r3
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr

08001332 <_isatty>:

int _isatty(int file)
{
 8001332:	b480      	push	{r7}
 8001334:	b083      	sub	sp, #12
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800133a:	2301      	movs	r3, #1
}
 800133c:	4618      	mov	r0, r3
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr

08001348 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001348:	b480      	push	{r7}
 800134a:	b085      	sub	sp, #20
 800134c:	af00      	add	r7, sp, #0
 800134e:	60f8      	str	r0, [r7, #12]
 8001350:	60b9      	str	r1, [r7, #8]
 8001352:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001354:	2300      	movs	r3, #0
}
 8001356:	4618      	mov	r0, r3
 8001358:	3714      	adds	r7, #20
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
	...

08001364 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b086      	sub	sp, #24
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800136c:	4a14      	ldr	r2, [pc, #80]	; (80013c0 <_sbrk+0x5c>)
 800136e:	4b15      	ldr	r3, [pc, #84]	; (80013c4 <_sbrk+0x60>)
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001378:	4b13      	ldr	r3, [pc, #76]	; (80013c8 <_sbrk+0x64>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d102      	bne.n	8001386 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001380:	4b11      	ldr	r3, [pc, #68]	; (80013c8 <_sbrk+0x64>)
 8001382:	4a12      	ldr	r2, [pc, #72]	; (80013cc <_sbrk+0x68>)
 8001384:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001386:	4b10      	ldr	r3, [pc, #64]	; (80013c8 <_sbrk+0x64>)
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4413      	add	r3, r2
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	429a      	cmp	r2, r3
 8001392:	d207      	bcs.n	80013a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001394:	f01f ffc0 	bl	8021318 <__errno>
 8001398:	4603      	mov	r3, r0
 800139a:	220c      	movs	r2, #12
 800139c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800139e:	f04f 33ff 	mov.w	r3, #4294967295
 80013a2:	e009      	b.n	80013b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013a4:	4b08      	ldr	r3, [pc, #32]	; (80013c8 <_sbrk+0x64>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013aa:	4b07      	ldr	r3, [pc, #28]	; (80013c8 <_sbrk+0x64>)
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4413      	add	r3, r2
 80013b2:	4a05      	ldr	r2, [pc, #20]	; (80013c8 <_sbrk+0x64>)
 80013b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013b6:	68fb      	ldr	r3, [r7, #12]
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3718      	adds	r7, #24
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	24040000 	.word	0x24040000
 80013c4:	00001000 	.word	0x00001000
 80013c8:	24000364 	.word	0x24000364
 80013cc:	240075b8 	.word	0x240075b8

080013d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80013d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001408 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80013d4:	f006 fe18 	bl	8008008 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013d8:	480c      	ldr	r0, [pc, #48]	; (800140c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013da:	490d      	ldr	r1, [pc, #52]	; (8001410 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013dc:	4a0d      	ldr	r2, [pc, #52]	; (8001414 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013e0:	e002      	b.n	80013e8 <LoopCopyDataInit>

080013e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013e6:	3304      	adds	r3, #4

080013e8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 80013e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013ec:	d3f9      	bcc.n	80013e2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ee:	4a0a      	ldr	r2, [pc, #40]	; (8001418 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013f0:	4c0a      	ldr	r4, [pc, #40]	; (800141c <LoopFillZerobss+0x22>)
  movs r3, #0
 80013f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013f4:	e001      	b.n	80013fa <LoopFillZerobss>

080013f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013f8:	3204      	adds	r2, #4

080013fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013fc:	d3fb      	bcc.n	80013f6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80013fe:	f01f ff91 	bl	8021324 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001402:	f7fe ffc5 	bl	8000390 <main>
  bx  lr
 8001406:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001408:	24040000 	.word	0x24040000
  ldr r0, =_sdata
 800140c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001410:	24000110 	.word	0x24000110
  ldr r2, =_sidata
 8001414:	0802387c 	.word	0x0802387c
  ldr r2, =_sbss
 8001418:	24000110 	.word	0x24000110
  ldr r4, =_ebss
 800141c:	240075b4 	.word	0x240075b4

08001420 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001420:	e7fe      	b.n	8001420 <ADC_IRQHandler>

08001422 <MX_TouchGFX_PreOSInit>:

/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
 8001422:	b480      	push	{r7}
 8001424:	af00      	add	r7, sp, #0
}
 8001426:	bf00      	nop
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_components_init();
 8001434:	f001 fd8c 	bl	8002f50 <touchgfx_components_init>
  touchgfx_init();
 8001438:	f001 fd60 	bl	8002efc <touchgfx_init>
}
 800143c:	bf00      	nop
 800143e:	bd80      	pop	{r7, pc}

08001440 <TouchGFX_Task>:

/**
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 8001448:	f001 fd8a 	bl	8002f60 <touchgfx_taskEntry>
}
 800144c:	bf00      	nop
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}

08001454 <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
    {
 800145c:	4a04      	ldr	r2, [pc, #16]	; (8001470 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	601a      	str	r2, [r3, #0]
    }
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4618      	mov	r0, r3
 8001466:	370c      	adds	r7, #12
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr
 8001470:	08022914 	.word	0x08022914

08001474 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
    }
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f7ff ffe9 	bl	8001454 <_ZN8touchgfx15TouchControllerD1Ev>
 8001482:	2104      	movs	r1, #4
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f01f fc70 	bl	8020d6a <_ZdlPvj>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4618      	mov	r0, r3
 800148e:	3708      	adds	r7, #8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}

08001494 <_ZN20STM32TouchController4initEv>:
#include <stm32h7b3i_discovery_ts.h>
#include <TouchGFXHAL.hpp>
#include <cmsis_os.h>

void STM32TouchController::init()
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b086      	sub	sp, #24
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
    TS_Init_t hTS;

    hTS.Orientation = TS_SWAP_XY;
 800149c:	2308      	movs	r3, #8
 800149e:	613b      	str	r3, [r7, #16]
    hTS.Accuracy = 0;
 80014a0:	2300      	movs	r3, #0
 80014a2:	617b      	str	r3, [r7, #20]
    hTS.Width = touchgfx::HAL::FRAME_BUFFER_WIDTH;
 80014a4:	4b07      	ldr	r3, [pc, #28]	; (80014c4 <_ZN20STM32TouchController4initEv+0x30>)
 80014a6:	881b      	ldrh	r3, [r3, #0]
 80014a8:	60bb      	str	r3, [r7, #8]
    hTS.Height = touchgfx::HAL::FRAME_BUFFER_HEIGHT;
 80014aa:	4b07      	ldr	r3, [pc, #28]	; (80014c8 <_ZN20STM32TouchController4initEv+0x34>)
 80014ac:	881b      	ldrh	r3, [r3, #0]
 80014ae:	60fb      	str	r3, [r7, #12]
    BSP_TS_Init(0, &hTS);
 80014b0:	f107 0308 	add.w	r3, r7, #8
 80014b4:	4619      	mov	r1, r3
 80014b6:	2000      	movs	r0, #0
 80014b8:	f006 fb88 	bl	8007bcc <BSP_TS_Init>
}
 80014bc:	bf00      	nop
 80014be:	3718      	adds	r7, #24
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	2400699e 	.word	0x2400699e
 80014c8:	240069a0 	.word	0x240069a0

080014cc <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b088      	sub	sp, #32
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	60f8      	str	r0, [r7, #12]
 80014d4:	60b9      	str	r1, [r7, #8]
 80014d6:	607a      	str	r2, [r7, #4]
    TS_State_t TS_State = { 0 };
 80014d8:	f107 0310 	add.w	r3, r7, #16
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	605a      	str	r2, [r3, #4]
 80014e2:	609a      	str	r2, [r3, #8]

    /* This should never fail !! */
    if (BSP_TS_GetState(0, &TS_State) != BSP_ERROR_NONE)
 80014e4:	f107 0310 	add.w	r3, r7, #16
 80014e8:	4619      	mov	r1, r3
 80014ea:	2000      	movs	r0, #0
 80014ec:	f006 fc14 	bl	8007d18 <BSP_TS_GetState>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	bf14      	ite	ne
 80014f6:	2301      	movne	r3, #1
 80014f8:	2300      	moveq	r3, #0
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d00a      	beq.n	8001516 <_ZN20STM32TouchController11sampleTouchERlS0_+0x4a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001504:	f383 8811 	msr	BASEPRI, r3
 8001508:	f3bf 8f6f 	isb	sy
 800150c:	f3bf 8f4f 	dsb	sy
 8001510:	61fb      	str	r3, [r7, #28]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001512:	bf00      	nop
    {
        configASSERT(0);
 8001514:	e7fe      	b.n	8001514 <_ZN20STM32TouchController11sampleTouchERlS0_+0x48>
    }

    if (TS_State.TouchDetected)
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d009      	beq.n	8001530 <_ZN20STM32TouchController11sampleTouchERlS0_+0x64>
    {
        x = TS_State.TouchX;
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	461a      	mov	r2, r3
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	601a      	str	r2, [r3, #0]
        y = TS_State.TouchY;
 8001524:	69bb      	ldr	r3, [r7, #24]
 8001526:	461a      	mov	r2, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	601a      	str	r2, [r3, #0]

        return true;
 800152c:	2301      	movs	r3, #1
 800152e:	e000      	b.n	8001532 <_ZN20STM32TouchController11sampleTouchERlS0_+0x66>
    }

    return false;
 8001530:	2300      	movs	r3, #0
}
 8001532:	4618      	mov	r0, r3
 8001534:	3720      	adds	r7, #32
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
	...

0800153c <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	4a05      	ldr	r2, [pc, #20]	; (800155c <_ZN20STM32TouchControllerD1Ev+0x20>)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff ff81 	bl	8001454 <_ZN8touchgfx15TouchControllerD1Ev>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4618      	mov	r0, r3
 8001556:	3708      	adds	r7, #8
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	080228fc 	.word	0x080228fc

08001560 <_ZN20STM32TouchControllerD0Ev>:
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f7ff ffe7 	bl	800153c <_ZN20STM32TouchControllerD1Ev>
 800156e:	2104      	movs	r1, #4
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f01f fbfa 	bl	8020d6a <_ZdlPvj>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4618      	mov	r0, r3
 800157a:	3708      	adds	r7, #8
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}

08001580 <_ZN8touchgfx4GPIO4initEv>:

/*
 * Perform configuration of IO pins.
 */
void GPIO::init()
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0

}
 8001584:	bf00      	nop
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
	...

08001590 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	4603      	mov	r3, r0
 8001598:	71fb      	strb	r3, [r7, #7]
    switch (id)
 800159a:	79fb      	ldrb	r3, [r7, #7]
 800159c:	2b03      	cmp	r3, #3
 800159e:	d826      	bhi.n	80015ee <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x5e>
 80015a0:	a201      	add	r2, pc, #4	; (adr r2, 80015a8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>)
 80015a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015a6:	bf00      	nop
 80015a8:	080015b9 	.word	0x080015b9
 80015ac:	080015c7 	.word	0x080015c7
 80015b0:	080015d5 	.word	0x080015d5
 80015b4:	080015e3 	.word	0x080015e3
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_SET);
 80015b8:	2201      	movs	r2, #1
 80015ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015be:	480e      	ldr	r0, [pc, #56]	; (80015f8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x68>)
 80015c0:	f007 fd76 	bl	80090b0 <HAL_GPIO_WritePin>
#endif
        break;
 80015c4:	e013      	b.n	80015ee <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x5e>
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, GPIO_PIN_SET);
 80015c6:	2201      	movs	r2, #1
 80015c8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015cc:	480b      	ldr	r0, [pc, #44]	; (80015fc <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x6c>)
 80015ce:	f007 fd6f 	bl	80090b0 <HAL_GPIO_WritePin>
#endif
        break;
 80015d2:	e00c      	b.n	80015ee <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x5e>
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, GPIO_PIN_SET);
 80015d4:	2201      	movs	r2, #1
 80015d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015da:	4808      	ldr	r0, [pc, #32]	; (80015fc <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x6c>)
 80015dc:	f007 fd68 	bl	80090b0 <HAL_GPIO_WritePin>
#endif
        break;
 80015e0:	e005      	b.n	80015ee <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x5e>
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_SET);
 80015e2:	2201      	movs	r2, #1
 80015e4:	2101      	movs	r1, #1
 80015e6:	4806      	ldr	r0, [pc, #24]	; (8001600 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x70>)
 80015e8:	f007 fd62 	bl	80090b0 <HAL_GPIO_WritePin>
#endif
        break;
 80015ec:	bf00      	nop
    }
}
 80015ee:	bf00      	nop
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	58020000 	.word	0x58020000
 80015fc:	58020400 	.word	0x58020400
 8001600:	58022000 	.word	0x58022000

08001604 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	4603      	mov	r3, r0
 800160c:	71fb      	strb	r3, [r7, #7]
    switch (id)
 800160e:	79fb      	ldrb	r3, [r7, #7]
 8001610:	2b03      	cmp	r3, #3
 8001612:	d826      	bhi.n	8001662 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x5e>
 8001614:	a201      	add	r2, pc, #4	; (adr r2, 800161c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>)
 8001616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800161a:	bf00      	nop
 800161c:	0800162d 	.word	0x0800162d
 8001620:	0800163b 	.word	0x0800163b
 8001624:	08001649 	.word	0x08001649
 8001628:	08001657 	.word	0x08001657
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 800162c:	2200      	movs	r2, #0
 800162e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001632:	480e      	ldr	r0, [pc, #56]	; (800166c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x68>)
 8001634:	f007 fd3c 	bl	80090b0 <HAL_GPIO_WritePin>
#endif
        break;
 8001638:	e013      	b.n	8001662 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x5e>
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, GPIO_PIN_RESET);
 800163a:	2200      	movs	r2, #0
 800163c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001640:	480b      	ldr	r0, [pc, #44]	; (8001670 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x6c>)
 8001642:	f007 fd35 	bl	80090b0 <HAL_GPIO_WritePin>
#endif
        break;
 8001646:	e00c      	b.n	8001662 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x5e>
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, GPIO_PIN_RESET);
 8001648:	2200      	movs	r2, #0
 800164a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800164e:	4808      	ldr	r0, [pc, #32]	; (8001670 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x6c>)
 8001650:	f007 fd2e 	bl	80090b0 <HAL_GPIO_WritePin>
#endif
        break;
 8001654:	e005      	b.n	8001662 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x5e>
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 8001656:	2200      	movs	r2, #0
 8001658:	2101      	movs	r1, #1
 800165a:	4806      	ldr	r0, [pc, #24]	; (8001674 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x70>)
 800165c:	f007 fd28 	bl	80090b0 <HAL_GPIO_WritePin>
#endif
        break;
 8001660:	bf00      	nop
    }
}
 8001662:	bf00      	nop
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	58020000 	.word	0x58020000
 8001670:	58020400 	.word	0x58020400
 8001674:	58022000 	.word	0x58022000

08001678 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	4603      	mov	r3, r0
 8001680:	71fb      	strb	r3, [r7, #7]
    switch (id)
 8001682:	79fb      	ldrb	r3, [r7, #7]
 8001684:	2b03      	cmp	r3, #3
 8001686:	d822      	bhi.n	80016ce <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x56>
 8001688:	a201      	add	r2, pc, #4	; (adr r2, 8001690 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>)
 800168a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800168e:	bf00      	nop
 8001690:	080016a1 	.word	0x080016a1
 8001694:	080016ad 	.word	0x080016ad
 8001698:	080016b9 	.word	0x080016b9
 800169c:	080016c5 	.word	0x080016c5
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 80016a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016a4:	480c      	ldr	r0, [pc, #48]	; (80016d8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x60>)
 80016a6:	f007 fd1c 	bl	80090e2 <HAL_GPIO_TogglePin>
#endif
        break;
 80016aa:	e010      	b.n	80016ce <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x56>
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 80016ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016b0:	480a      	ldr	r0, [pc, #40]	; (80016dc <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x64>)
 80016b2:	f007 fd16 	bl	80090e2 <HAL_GPIO_TogglePin>
#endif
        break;
 80016b6:	e00a      	b.n	80016ce <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x56>
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 80016b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016bc:	4807      	ldr	r0, [pc, #28]	; (80016dc <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x64>)
 80016be:	f007 fd10 	bl	80090e2 <HAL_GPIO_TogglePin>
#endif
        break;
 80016c2:	e004      	b.n	80016ce <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x56>
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 80016c4:	2101      	movs	r1, #1
 80016c6:	4806      	ldr	r0, [pc, #24]	; (80016e0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x68>)
 80016c8:	f007 fd0b 	bl	80090e2 <HAL_GPIO_TogglePin>
#endif
        break;
 80016cc:	bf00      	nop
    }
}
 80016ce:	bf00      	nop
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	58020000 	.word	0x58020000
 80016dc:	58020400 	.word	0x58020400
 80016e0:	58022000 	.word	0x58022000

080016e4 <_ZN8touchgfx3HALD1Ev>:
        DISPLAY_ROTATION = rotate0;
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
    }

    /** Finalizes an instance of the HAL class. */
    virtual ~HAL()
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
    {
 80016ec:	4a04      	ldr	r2, [pc, #16]	; (8001700 <_ZN8touchgfx3HALD1Ev+0x1c>)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	601a      	str	r2, [r3, #0]
    }
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4618      	mov	r0, r3
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr
 8001700:	08023180 	.word	0x08023180

08001704 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
    }
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f7ff ffe9 	bl	80016e4 <_ZN8touchgfx3HALD1Ev>
 8001712:	217c      	movs	r1, #124	; 0x7c
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f01f fb28 	bl	8020d6a <_ZdlPvj>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4618      	mov	r0, r3
 800171e:	3708      	adds	r7, #8
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}

08001724 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     *
     * @param  orientation The desired display orientation.
     *
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	460b      	mov	r3, r1
 800172e:	70fb      	strb	r3, [r7, #3]
    {
        requestedOrientation = orientation;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	78fa      	ldrb	r2, [r7, #3]
 8001734:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        displayOrientationChangeRequested = true;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2201      	movs	r2, #1
 800173c:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
    }
 8001740:	bf00      	nop
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
     * @param   width   The width of the framebuffer.
     * @param   height  The height of the framebuffer.
     *
     * @see touchgfx_generic_init
     */
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	460b      	mov	r3, r1
 8001756:	807b      	strh	r3, [r7, #2]
 8001758:	4613      	mov	r3, r2
 800175a:	803b      	strh	r3, [r7, #0]
    {
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 800175c:	4b0c      	ldr	r3, [pc, #48]	; (8001790 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x44>)
 800175e:	881b      	ldrh	r3, [r3, #0]
 8001760:	887a      	ldrh	r2, [r7, #2]
 8001762:	429a      	cmp	r2, r3
 8001764:	d304      	bcc.n	8001770 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x24>
 8001766:	4b0b      	ldr	r3, [pc, #44]	; (8001794 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x48>)
 8001768:	881b      	ldrh	r3, [r3, #0]
 800176a:	883a      	ldrh	r2, [r7, #0]
 800176c:	429a      	cmp	r2, r3
 800176e:	d205      	bcs.n	800177c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>
 8001770:	4b09      	ldr	r3, [pc, #36]	; (8001798 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x4c>)
 8001772:	4a0a      	ldr	r2, [pc, #40]	; (800179c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x50>)
 8001774:	219e      	movs	r1, #158	; 0x9e
 8001776:	480a      	ldr	r0, [pc, #40]	; (80017a0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x54>)
 8001778:	f01f fb26 	bl	8020dc8 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 800177c:	4a09      	ldr	r2, [pc, #36]	; (80017a4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x58>)
 800177e:	887b      	ldrh	r3, [r7, #2]
 8001780:	8013      	strh	r3, [r2, #0]
        FRAME_BUFFER_HEIGHT = height;
 8001782:	4a09      	ldr	r2, [pc, #36]	; (80017a8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x5c>)
 8001784:	883b      	ldrh	r3, [r7, #0]
 8001786:	8013      	strh	r3, [r2, #0]
    }
 8001788:	bf00      	nop
 800178a:	3708      	adds	r7, #8
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	24006998 	.word	0x24006998
 8001794:	2400699a 	.word	0x2400699a
 8001798:	08021e40 	.word	0x08021e40
 800179c:	08021ea4 	.word	0x08021ea4
 80017a0:	08021ee8 	.word	0x08021ee8
 80017a4:	2400699e 	.word	0x2400699e
 80017a8:	240069a0 	.word	0x240069a0

080017ac <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d009      	beq.n	80017d2 <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685a      	ldr	r2, [r3, #4]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4610      	mov	r0, r2
 80017cc:	4798      	blx	r3
 80017ce:	4603      	mov	r3, r0
 80017d0:	e000      	b.n	80017d4 <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        return static_cast<BlitOperations>(0);
 80017d2:	2300      	movs	r3, #0
    }
 80017d4:	4618      	mov	r0, r3
 80017d6:	3708      	adds	r7, #8
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}

080017dc <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f011 f8fb 	bl	80129e0 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	33ac      	adds	r3, #172	; 0xac
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	4798      	blx	r3
    }
 80017f6:	bf00      	nop
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}

080017fe <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 80017fe:	b480      	push	{r7}
 8001800:	b083      	sub	sp, #12
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
 8001806:	6039      	str	r1, [r7, #0]
    {
        (void)key; // Unused variable
        return false;
 8001808:	2300      	movs	r3, #0
    }
 800180a:	4618      	mov	r0, r3
 800180c:	370c      	adds	r7, #12
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
	...

08001818 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setAnimationStorage
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	60f8      	str	r0, [r7, #12]
 8001820:	60b9      	str	r1, [r7, #8]
 8001822:	607a      	str	r2, [r7, #4]
 8001824:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d106      	bne.n	800183a <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 800182c:	4b0f      	ldr	r3, [pc, #60]	; (800186c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x54>)
 800182e:	4a10      	ldr	r2, [pc, #64]	; (8001870 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x58>)
 8001830:	f240 21d2 	movw	r1, #722	; 0x2d2
 8001834:	480f      	ldr	r0, [pc, #60]	; (8001874 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 8001836:	f01f fac7 	bl	8020dc8 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	68ba      	ldr	r2, [r7, #8]
 800183e:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	641a      	str	r2, [r3, #64]	; 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2b00      	cmp	r3, #0
 800184a:	bf14      	ite	ne
 800184c:	2301      	movne	r3, #1
 800184e:	2300      	moveq	r3, #0
 8001850:	b2da      	uxtb	r2, r3
 8001852:	4b09      	ldr	r3, [pc, #36]	; (8001878 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8001854:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	338c      	adds	r3, #140	; 0x8c
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	6839      	ldr	r1, [r7, #0]
 8001860:	68f8      	ldr	r0, [r7, #12]
 8001862:	4798      	blx	r3
    }
 8001864:	bf00      	nop
 8001866:	3710      	adds	r7, #16
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	08021f30 	.word	0x08021f30
 8001870:	08021f68 	.word	0x08021f68
 8001874:	08021ee8 	.word	0x08021ee8
 8001878:	240069a2 	.word	0x240069a2

0800187c <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	6039      	str	r1, [r7, #0]
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	683a      	ldr	r2, [r7, #0]
 800188a:	645a      	str	r2, [r3, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	2b00      	cmp	r3, #0
 8001890:	bf14      	ite	ne
 8001892:	2301      	movne	r3, #1
 8001894:	2300      	moveq	r3, #0
 8001896:	b2da      	uxtb	r2, r3
 8001898:	4b03      	ldr	r3, [pc, #12]	; (80018a8 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x2c>)
 800189a:	701a      	strb	r2, [r3, #0]
    }
 800189c:	bf00      	nop
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	240069a3 	.word	0x240069a3

080018ac <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
    {
        return 0;
 80018b4:	2300      	movs	r3, #0
    }
 80018b6:	4618      	mov	r0, r3
 80018b8:	370c      	adds	r7, #12
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr

080018c2 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b082      	sub	sp, #8
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]
 80018ca:	460b      	mov	r3, r1
 80018cc:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d004      	beq.n	80018e0 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018da:	887a      	ldrh	r2, [r7, #2]
 80018dc:	4610      	mov	r0, r2
 80018de:	4798      	blx	r3
        }
    }
 80018e0:	bf00      	nop
 80018e2:	3708      	adds	r7, #8
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     * getTFTCurrentLine function is never called and can be disregarded.
     *
     * @return In this default implementation, 0xFFFF is returned to signify "not
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
    {
        return 0xFFFFu;
 80018f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    }
 80018f4:	4618      	mov	r0, r3
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	685a      	ldr	r2, [r3, #4]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	3318      	adds	r3, #24
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4610      	mov	r0, r2
 8001918:	4798      	blx	r3
 800191a:	4603      	mov	r3, r0
    }
 800191c:	4618      	mov	r0, r3
 800191e:	3708      	adds	r7, #8
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 8001924:	b480      	push	{r7}
 8001926:	b085      	sub	sp, #20
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001938:	429a      	cmp	r2, r3
 800193a:	d011      	beq.n	8001960 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>
        {
            if (DISPLAY_ROTATION == rotate0)
 800193c:	4b14      	ldr	r3, [pc, #80]	; (8001990 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d11e      	bne.n	8001982 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001944:	4b13      	ldr	r3, [pc, #76]	; (8001994 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8001946:	881b      	ldrh	r3, [r3, #0]
 8001948:	81bb      	strh	r3, [r7, #12]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800194a:	4b13      	ldr	r3, [pc, #76]	; (8001998 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 800194c:	881a      	ldrh	r2, [r3, #0]
 800194e:	4b11      	ldr	r3, [pc, #68]	; (8001994 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8001950:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = tmp;
 8001952:	4a11      	ldr	r2, [pc, #68]	; (8001998 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8001954:	89bb      	ldrh	r3, [r7, #12]
 8001956:	8013      	strh	r3, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8001958:	4b0d      	ldr	r3, [pc, #52]	; (8001990 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 800195a:	2201      	movs	r2, #1
 800195c:	701a      	strb	r2, [r3, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
        }
    }
 800195e:	e010      	b.n	8001982 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
        else if (DISPLAY_ROTATION != rotate0)
 8001960:	4b0b      	ldr	r3, [pc, #44]	; (8001990 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d00c      	beq.n	8001982 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001968:	4b0a      	ldr	r3, [pc, #40]	; (8001994 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 800196a:	881b      	ldrh	r3, [r3, #0]
 800196c:	81fb      	strh	r3, [r7, #14]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800196e:	4b0a      	ldr	r3, [pc, #40]	; (8001998 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8001970:	881a      	ldrh	r2, [r3, #0]
 8001972:	4b08      	ldr	r3, [pc, #32]	; (8001994 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8001974:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = tmp;
 8001976:	4a08      	ldr	r2, [pc, #32]	; (8001998 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8001978:	89fb      	ldrh	r3, [r7, #14]
 800197a:	8013      	strh	r3, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 800197c:	4b04      	ldr	r3, [pc, #16]	; (8001990 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 800197e:	2200      	movs	r2, #0
 8001980:	701a      	strb	r2, [r3, #0]
    }
 8001982:	bf00      	nop
 8001984:	3714      	adds	r7, #20
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	2400699c 	.word	0x2400699c
 8001994:	2400699a 	.word	0x2400699a
 8001998:	24006998 	.word	0x24006998

0800199c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f010 fa78 	bl	8011e9c <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 80019ac:	bf00      	nop
 80019ae:	3708      	adds	r7, #8
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	4a05      	ldr	r2, [pc, #20]	; (80019d4 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	601a      	str	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff fe8d 	bl	80016e4 <_ZN8touchgfx3HALD1Ev>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4618      	mov	r0, r3
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	08022cb4 	.word	0x08022cb4

080019d8 <_ZN20TouchGFXGeneratedHALD0Ev>:
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f7ff ffe7 	bl	80019b4 <_ZN20TouchGFXGeneratedHALD1Ev>
 80019e6:	217c      	movs	r1, #124	; 0x7c
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f01f f9be 	bl	8020d6a <_ZdlPvj>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4618      	mov	r0, r3
 80019f2:	3708      	adds	r7, #8
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7ff ffca 	bl	800199c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 8001a08:	bf00      	nop
 8001a0a:	3708      	adds	r7, #8
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <_ZN11TouchGFXHAL10initializeEv>:
#include "stm32h7xx.h"

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f001 fd8c 	bl	8003538 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 8001a20:	bf00      	nop
 8001a22:	3708      	adds	r7, #8
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <_ZN11TouchGFXHAL9taskEntryEv>:

void TouchGFXHAL::taskEntry()
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
    enableLCDControllerInterrupt();
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	3380      	adds	r3, #128	; 0x80
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	4798      	blx	r3
    enableInterrupts();
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	3378      	adds	r3, #120	; 0x78
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	4798      	blx	r3

    OSWrappers::waitForVSync();
 8001a48:	f000 f954 	bl	8001cf4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	3370      	adds	r3, #112	; 0x70
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4610      	mov	r0, r2
 8001a58:	4798      	blx	r3

    // Turning on display after first frame is rendered
    HAL_GPIO_WritePin(GPIOK, GPIO_PIN_7, GPIO_PIN_RESET);
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	2180      	movs	r1, #128	; 0x80
 8001a5e:	480b      	ldr	r0, [pc, #44]	; (8001a8c <_ZN11TouchGFXHAL9taskEntryEv+0x64>)
 8001a60:	f007 fb26 	bl	80090b0 <HAL_GPIO_WritePin>
    /* Assert display enable LCD_DISP_CTRL pin */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8001a64:	2201      	movs	r2, #1
 8001a66:	2104      	movs	r1, #4
 8001a68:	4809      	ldr	r0, [pc, #36]	; (8001a90 <_ZN11TouchGFXHAL9taskEntryEv+0x68>)
 8001a6a:	f007 fb21 	bl	80090b0 <HAL_GPIO_WritePin>
    /* Assert back light LCD_BL_CTRL pin */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8001a6e:	2201      	movs	r2, #1
 8001a70:	2102      	movs	r1, #2
 8001a72:	4807      	ldr	r0, [pc, #28]	; (8001a90 <_ZN11TouchGFXHAL9taskEntryEv+0x68>)
 8001a74:	f007 fb1c 	bl	80090b0 <HAL_GPIO_WritePin>

    for (;;)
    {
        OSWrappers::waitForVSync();
 8001a78:	f000 f93c 	bl	8001cf4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	3370      	adds	r3, #112	; 0x70
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4610      	mov	r0, r2
 8001a88:	4798      	blx	r3
        OSWrappers::waitForVSync();
 8001a8a:	e7f5      	b.n	8001a78 <_ZN11TouchGFXHAL9taskEntryEv+0x50>
 8001a8c:	58022800 	.word	0x58022800
 8001a90:	58020000 	.word	0x58020000

08001a94 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f001 fde2 	bl	8003668 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8001aa4:	4603      	mov	r3, r0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b082      	sub	sp, #8
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
 8001ab6:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6839      	ldr	r1, [r7, #0]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f001 fde1 	bl	8003684 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8001ac2:	bf00      	nop
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
	...

08001acc <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b086      	sub	sp, #24
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	6039      	str	r1, [r7, #0]
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6839      	ldr	r1, [r7, #0]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f001 fde8 	bl	80036b0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001ae0:	4b1f      	ldr	r3, [pc, #124]	; (8001b60 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x94>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001ae8:	f3bf 8f4f 	dsb	sy
}
 8001aec:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001aee:	4b1c      	ldr	r3, [pc, #112]	; (8001b60 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x94>)
 8001af0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001af4:	617b      	str	r3, [r7, #20]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	0b5b      	lsrs	r3, r3, #13
 8001afa:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001afe:	613b      	str	r3, [r7, #16]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	08db      	lsrs	r3, r3, #3
 8001b04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b08:	60fb      	str	r3, [r7, #12]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	015a      	lsls	r2, r3, #5
 8001b0e:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001b12:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8001b14:	68fa      	ldr	r2, [r7, #12]
 8001b16:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001b18:	4911      	ldr	r1, [pc, #68]	; (8001b60 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x94>)
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	1e5a      	subs	r2, r3, #1
 8001b24:	60fa      	str	r2, [r7, #12]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	bf14      	ite	ne
 8001b2a:	2301      	movne	r3, #1
 8001b2c:	2300      	moveq	r3, #0
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d1ea      	bne.n	8001b0a <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x3e>
    } while(sets-- != 0U);
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	1e5a      	subs	r2, r3, #1
 8001b38:	613a      	str	r2, [r7, #16]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	bf14      	ite	ne
 8001b3e:	2301      	movne	r3, #1
 8001b40:	2300      	moveq	r3, #0
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d1db      	bne.n	8001b00 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x34>
  __ASM volatile ("dsb 0xF":::"memory");
 8001b48:	f3bf 8f4f 	dsb	sy
}
 8001b4c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b4e:	f3bf 8f6f 	isb	sy
}
 8001b52:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8001b54:	bf00      	nop
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    SCB_CleanInvalidateDCache();
}
 8001b56:	bf00      	nop
 8001b58:	3718      	adds	r7, #24
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	e000ed00 	.word	0xe000ed00

08001b64 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f001 fd06 	bl	8003580 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 8001b74:	bf00      	nop
 8001b76:	3708      	adds	r7, #8
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f001 fd0a 	bl	80035a0 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 8001b8c:	bf00      	nop
 8001b8e:	3708      	adds	r7, #8
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f001 fd0c 	bl	80035bc <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 8001ba4:	bf00      	nop
 8001ba6:	3708      	adds	r7, #8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}

08001bac <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f001 fd0e 	bl	80035d8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 8001bbc:	bf00      	nop
 8001bbe:	3708      	adds	r7, #8
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	4a05      	ldr	r2, [pc, #20]	; (8001be4 <_ZN11TouchGFXHALD1Ev+0x20>)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	601a      	str	r2, [r3, #0]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7ff feed 	bl	80019b4 <_ZN20TouchGFXGeneratedHALD1Ev>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3708      	adds	r7, #8
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	0802292c 	.word	0x0802292c

08001be8 <_ZN11TouchGFXHALD0Ev>:
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f7ff ffe7 	bl	8001bc4 <_ZN11TouchGFXHALD1Ev>
 8001bf6:	217c      	movs	r1, #124	; 0x7c
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f01f f8b6 	bl	8020d6a <_ZdlPvj>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4618      	mov	r0, r3
 8001c02:	3708      	adds	r7, #8
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	2101      	movs	r1, #1
 8001c10:	2001      	movs	r0, #1
 8001c12:	f00c fbe3 	bl	800e3dc <osSemaphoreNew>
 8001c16:	4603      	mov	r3, r0
 8001c18:	4a0f      	ldr	r2, [pc, #60]	; (8001c58 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8001c1a:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8001c1c:	4b0e      	ldr	r3, [pc, #56]	; (8001c58 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d105      	bne.n	8001c30 <_ZN8touchgfx10OSWrappers10initializeEv+0x28>
 8001c24:	4b0d      	ldr	r3, [pc, #52]	; (8001c5c <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 8001c26:	4a0e      	ldr	r2, [pc, #56]	; (8001c60 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8001c28:	2128      	movs	r1, #40	; 0x28
 8001c2a:	480e      	ldr	r0, [pc, #56]	; (8001c64 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8001c2c:	f01f f8cc 	bl	8020dc8 <__assert_func>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8001c30:	2200      	movs	r2, #0
 8001c32:	2104      	movs	r1, #4
 8001c34:	2001      	movs	r0, #1
 8001c36:	f00c fcf1 	bl	800e61c <osMessageQueueNew>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	4a0a      	ldr	r2, [pc, #40]	; (8001c68 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8001c3e:	6013      	str	r3, [r2, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8001c40:	4b09      	ldr	r3, [pc, #36]	; (8001c68 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d105      	bne.n	8001c54 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>
 8001c48:	4b08      	ldr	r3, [pc, #32]	; (8001c6c <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 8001c4a:	4a05      	ldr	r2, [pc, #20]	; (8001c60 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8001c4c:	212c      	movs	r1, #44	; 0x2c
 8001c4e:	4805      	ldr	r0, [pc, #20]	; (8001c64 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8001c50:	f01f f8ba 	bl	8020dc8 <__assert_func>
}
 8001c54:	bf00      	nop
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	24000368 	.word	0x24000368
 8001c5c:	08021fb8 	.word	0x08021fb8
 8001c60:	08022004 	.word	0x08022004
 8001c64:	08022034 	.word	0x08022034
 8001c68:	2400036c 	.word	0x2400036c
 8001c6c:	080220c8 	.word	0x080220c8

08001c70 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8001c74:	4b04      	ldr	r3, [pc, #16]	; (8001c88 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f04f 31ff 	mov.w	r1, #4294967295
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f00c fc37 	bl	800e4f0 <osSemaphoreAcquire>
}
 8001c82:	bf00      	nop
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	24000368 	.word	0x24000368

08001c8c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8001c90:	4b03      	ldr	r3, [pc, #12]	; (8001ca0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4618      	mov	r0, r3
 8001c96:	f00c fc7d 	bl	800e594 <osSemaphoreRelease>
}
 8001c9a:	bf00      	nop
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	24000368 	.word	0x24000368

08001ca4 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8001ca8:	4b03      	ldr	r3, [pc, #12]	; (8001cb8 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2100      	movs	r1, #0
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f00c fc1e 	bl	800e4f0 <osSemaphoreAcquire>
}
 8001cb4:	bf00      	nop
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	24000368 	.word	0x24000368

08001cbc <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8001cc0:	4b03      	ldr	r3, [pc, #12]	; (8001cd0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f00c fc65 	bl	800e594 <osSemaphoreRelease>
}
 8001cca:	bf00      	nop
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	24000368 	.word	0x24000368

08001cd4 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8001cd8:	4b04      	ldr	r3, [pc, #16]	; (8001cec <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 8001cda:	6818      	ldr	r0, [r3, #0]
 8001cdc:	2300      	movs	r3, #0
 8001cde:	2200      	movs	r2, #0
 8001ce0:	4903      	ldr	r1, [pc, #12]	; (8001cf0 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>)
 8001ce2:	f00c fd0f 	bl	800e704 <osMessageQueuePut>
}
 8001ce6:	bf00      	nop
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	2400036c 	.word	0x2400036c
 8001cf0:	24000004 	.word	0x24000004

08001cf4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8001cfa:	4b09      	ldr	r3, [pc, #36]	; (8001d20 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8001cfc:	6818      	ldr	r0, [r3, #0]
 8001cfe:	1d39      	adds	r1, r7, #4
 8001d00:	2300      	movs	r3, #0
 8001d02:	2200      	movs	r2, #0
 8001d04:	f00c fd5e 	bl	800e7c4 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8001d08:	4b05      	ldr	r3, [pc, #20]	; (8001d20 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8001d0a:	6818      	ldr	r0, [r3, #0]
 8001d0c:	1d39      	adds	r1, r7, #4
 8001d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d12:	2200      	movs	r2, #0
 8001d14:	f00c fd56 	bl	800e7c4 <osMessageQueueGet>
}
 8001d18:	bf00      	nop
 8001d1a:	3708      	adds	r7, #8
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	2400036c 	.word	0x2400036c

08001d24 <__NVIC_EnableIRQ>:
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	db0b      	blt.n	8001d4e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d36:	88fb      	ldrh	r3, [r7, #6]
 8001d38:	f003 021f 	and.w	r2, r3, #31
 8001d3c:	4907      	ldr	r1, [pc, #28]	; (8001d5c <__NVIC_EnableIRQ+0x38>)
 8001d3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d42:	095b      	lsrs	r3, r3, #5
 8001d44:	2001      	movs	r0, #1
 8001d46:	fa00 f202 	lsl.w	r2, r0, r2
 8001d4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001d4e:	bf00      	nop
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	e000e100 	.word	0xe000e100

08001d60 <__NVIC_DisableIRQ>:
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	4603      	mov	r3, r0
 8001d68:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	db12      	blt.n	8001d98 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d72:	88fb      	ldrh	r3, [r7, #6]
 8001d74:	f003 021f 	and.w	r2, r3, #31
 8001d78:	490a      	ldr	r1, [pc, #40]	; (8001da4 <__NVIC_DisableIRQ+0x44>)
 8001d7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d7e:	095b      	lsrs	r3, r3, #5
 8001d80:	2001      	movs	r0, #1
 8001d82:	fa00 f202 	lsl.w	r2, r0, r2
 8001d86:	3320      	adds	r3, #32
 8001d88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001d8c:	f3bf 8f4f 	dsb	sy
}
 8001d90:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d92:	f3bf 8f6f 	isb	sy
}
 8001d96:	bf00      	nop
}
 8001d98:	bf00      	nop
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr
 8001da4:	e000e100 	.word	0xe000e100

08001da8 <_ZN8touchgfx9colortypeC1Ev>:
 * extract a 24/32-bit color from this type, use the getColor32 function.
 */
struct colortype
{
    /** Default constructor. Creates a black (0) color. */
    colortype()
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
        : color(0)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2200      	movs	r2, #0
 8001db4:	601a      	str	r2, [r3, #0]
    {
    }
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4618      	mov	r0, r3
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <_ZNK8touchgfx9colortypecvmEv>:
    /**
     * Cast that converts the given colortype to an uint32_t.
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
    {
        return color;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
    }
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
    {
 8001de4:	4a04      	ldr	r2, [pc, #16]	; (8001df8 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	601a      	str	r2, [r3, #0]
    }
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4618      	mov	r0, r3
 8001dee:	370c      	adds	r7, #12
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr
 8001df8:	08022a54 	.word	0x08022a54

08001dfc <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
    }
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f7ff ffe9 	bl	8001ddc <_ZN8touchgfx9DMA_QueueD1Ev>
 8001e0a:	2104      	movs	r1, #4
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f01e ffac 	bl	8020d6a <_ZdlPvj>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4618      	mov	r0, r3
 8001e16:	3708      	adds	r7, #8
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	3344      	adds	r3, #68	; 0x44
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	4798      	blx	r3
    }
 8001e30:	bf00      	nop
 8001e32:	3708      	adds	r7, #8
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
    {
 8001e40:	4a04      	ldr	r2, [pc, #16]	; (8001e54 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	601a      	str	r2, [r3, #0]
    }
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4618      	mov	r0, r3
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr
 8001e54:	08023258 	.word	0x08023258

08001e58 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
    }
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f7ff ffe9 	bl	8001e38 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8001e66:	210c      	movs	r1, #12
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f01e ff7e 	bl	8020d6a <_ZdlPvj>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4618      	mov	r0, r3
 8001e72:	3708      	adds	r7, #8
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8001e82:	4a09      	ldr	r2, [pc, #36]	; (8001ea8 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	601a      	str	r2, [r3, #0]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	683a      	ldr	r2, [r7, #0]
 8001e8c:	605a      	str	r2, [r3, #4]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	721a      	strb	r2, [r3, #8]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2200      	movs	r2, #0
 8001e98:	725a      	strb	r2, [r3, #9]
    {
    }
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr
 8001ea8:	08023258 	.word	0x08023258

08001eac <_ZN8STM32DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 8001eb4:	2301      	movs	r3, #1
    }
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	370c      	adds	r7, #12
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr

08001ec2 <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b082      	sub	sp, #8
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	3328      	adds	r3, #40	; 0x28
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4610      	mov	r0, r2
 8001ed6:	4798      	blx	r3
    }
 8001ed8:	bf00      	nop
 8001eda:	3708      	adds	r7, #8
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <_ZN8touchgfx3HAL11getInstanceEv>:
    static HAL* getInstance()
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
        return instance;
 8001ee4:	4b03      	ldr	r3, [pc, #12]	; (8001ef4 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
    }
 8001ee8:	4618      	mov	r0, r3
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	240069a4 	.word	0x240069a4

08001ef8 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685a      	ldr	r2, [r3, #4]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	3314      	adds	r3, #20
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4610      	mov	r0, r2
 8001f10:	4798      	blx	r3
    }
 8001f12:	bf00      	nop
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
	...

08001f1c <DMA2D_XferCpltCallback>:

extern "C" DMA2D_HandleTypeDef hdma2d;

extern "C" {
    static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
    {
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b086      	sub	sp, #24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001f24:	4b22      	ldr	r3, [pc, #136]	; (8001fb0 <DMA2D_XferCpltCallback+0x94>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001f2c:	f3bf 8f4f 	dsb	sy
}
 8001f30:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8001f32:	4b1f      	ldr	r3, [pc, #124]	; (8001fb0 <DMA2D_XferCpltCallback+0x94>)
 8001f34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f38:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	0b5b      	lsrs	r3, r3, #13
 8001f3e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001f42:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	08db      	lsrs	r3, r3, #3
 8001f48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f4c:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	015a      	lsls	r2, r3, #5
 8001f52:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001f56:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8001f58:	68fa      	ldr	r2, [r7, #12]
 8001f5a:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001f5c:	4914      	ldr	r1, [pc, #80]	; (8001fb0 <DMA2D_XferCpltCallback+0x94>)
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	1e5a      	subs	r2, r3, #1
 8001f68:	60fa      	str	r2, [r7, #12]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	bf14      	ite	ne
 8001f6e:	2301      	movne	r3, #1
 8001f70:	2300      	moveq	r3, #0
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d1ea      	bne.n	8001f4e <DMA2D_XferCpltCallback+0x32>
    } while(sets-- != 0U);
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	1e5a      	subs	r2, r3, #1
 8001f7c:	613a      	str	r2, [r7, #16]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	bf14      	ite	ne
 8001f82:	2301      	movne	r3, #1
 8001f84:	2300      	moveq	r3, #0
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d1db      	bne.n	8001f44 <DMA2D_XferCpltCallback+0x28>
  __ASM volatile ("dsb 0xF":::"memory");
 8001f8c:	f3bf 8f4f 	dsb	sy
}
 8001f90:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001f92:	f3bf 8f6f 	isb	sy
}
 8001f96:	bf00      	nop
}
 8001f98:	bf00      	nop
        (void)handle; // Unused argument
        SCB_CleanInvalidateDCache();
        HAL::getInstance()->signalDMAInterrupt();
 8001f9a:	f7ff ffa1 	bl	8001ee0 <_ZN8touchgfx3HAL11getInstanceEv>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7ff ffa9 	bl	8001ef8 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
    }
 8001fa6:	bf00      	nop
 8001fa8:	3718      	adds	r7, #24
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	e000ed00 	.word	0xe000ed00

08001fb4 <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	330c      	adds	r3, #12
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7ff fef1 	bl	8001da8 <_ZN8touchgfx9colortypeC1Ev>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3708      	adds	r7, #8
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <_ZN8STM32DMAC1Ev>:
}

STM32DMA::STM32DMA()
 8001fd0:	b5b0      	push	{r4, r5, r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	330c      	adds	r3, #12
 8001fde:	4619      	mov	r1, r3
 8001fe0:	4610      	mov	r0, r2
 8001fe2:	f7ff ff49 	bl	8001e78 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 8001fe6:	4a0e      	ldr	r2, [pc, #56]	; (8002020 <_ZN8STM32DMAC1Ev+0x50>)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	601a      	str	r2, [r3, #0]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f103 000c 	add.w	r0, r3, #12
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	3320      	adds	r3, #32
 8001ff6:	2260      	movs	r2, #96	; 0x60
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	f010 fe2b 	bl	8012c54 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	3320      	adds	r3, #32
 8002002:	245f      	movs	r4, #95	; 0x5f
 8002004:	461d      	mov	r5, r3
 8002006:	e004      	b.n	8002012 <_ZN8STM32DMAC1Ev+0x42>
 8002008:	4628      	mov	r0, r5
 800200a:	f7ff ffd3 	bl	8001fb4 <_ZN8touchgfx6BlitOpC1Ev>
 800200e:	3524      	adds	r5, #36	; 0x24
 8002010:	3c01      	subs	r4, #1
 8002012:	2c00      	cmp	r4, #0
 8002014:	daf8      	bge.n	8002008 <_ZN8STM32DMAC1Ev+0x38>
{
}
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4618      	mov	r0, r3
 800201a:	3708      	adds	r7, #8
 800201c:	46bd      	mov	sp, r7
 800201e:	bdb0      	pop	{r4, r5, r7, pc}
 8002020:	08022a04 	.word	0x08022a04

08002024 <_ZN8STM32DMAD1Ev>:

STM32DMA::~STM32DMA()
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	4a09      	ldr	r2, [pc, #36]	; (8002054 <_ZN8STM32DMAD1Ev+0x30>)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 8002032:	205a      	movs	r0, #90	; 0x5a
 8002034:	f7ff fe94 	bl	8001d60 <__NVIC_DisableIRQ>
STM32DMA::~STM32DMA()
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	330c      	adds	r3, #12
 800203c:	4618      	mov	r0, r3
 800203e:	f000 fab3 	bl	80025a8 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4618      	mov	r0, r3
 8002046:	f7ff fef7 	bl	8001e38 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4618      	mov	r0, r3
 800204e:	3708      	adds	r7, #8
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	08022a04 	.word	0x08022a04

08002058 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
}
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f7ff ffdf 	bl	8002024 <_ZN8STM32DMAD1Ev>
 8002066:	f44f 615a 	mov.w	r1, #3488	; 0xda0
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f01e fe7d 	bl	8020d6a <_ZdlPvj>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	4618      	mov	r0, r3
 8002074:	3708      	adds	r7, #8
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
	...

0800207c <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002084:	4b12      	ldr	r3, [pc, #72]	; (80020d0 <_ZN8STM32DMA10initializeEv+0x54>)
 8002086:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800208a:	4a11      	ldr	r2, [pc, #68]	; (80020d0 <_ZN8STM32DMA10initializeEv+0x54>)
 800208c:	f043 0310 	orr.w	r3, r3, #16
 8002090:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8002094:	4b0e      	ldr	r3, [pc, #56]	; (80020d0 <_ZN8STM32DMA10initializeEv+0x54>)
 8002096:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800209a:	f003 0310 	and.w	r3, r3, #16
 800209e:	60fb      	str	r3, [r7, #12]
 80020a0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 80020a2:	4b0b      	ldr	r3, [pc, #44]	; (80020d0 <_ZN8STM32DMA10initializeEv+0x54>)
 80020a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80020a6:	4a0a      	ldr	r2, [pc, #40]	; (80020d0 <_ZN8STM32DMA10initializeEv+0x54>)
 80020a8:	f043 0310 	orr.w	r3, r3, #16
 80020ac:	67d3      	str	r3, [r2, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 80020ae:	4b08      	ldr	r3, [pc, #32]	; (80020d0 <_ZN8STM32DMA10initializeEv+0x54>)
 80020b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80020b2:	4a07      	ldr	r2, [pc, #28]	; (80020d0 <_ZN8STM32DMA10initializeEv+0x54>)
 80020b4:	f023 0310 	bic.w	r3, r3, #16
 80020b8:	67d3      	str	r3, [r2, #124]	; 0x7c

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 80020ba:	4b06      	ldr	r3, [pc, #24]	; (80020d4 <_ZN8STM32DMA10initializeEv+0x58>)
 80020bc:	4a06      	ldr	r2, [pc, #24]	; (80020d8 <_ZN8STM32DMA10initializeEv+0x5c>)
 80020be:	621a      	str	r2, [r3, #32]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
 80020c0:	205a      	movs	r0, #90	; 0x5a
 80020c2:	f7ff fe2f 	bl	8001d24 <__NVIC_EnableIRQ>
}
 80020c6:	bf00      	nop
 80020c8:	3710      	adds	r7, #16
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	58024400 	.word	0x58024400
 80020d4:	24000150 	.word	0x24000150
 80020d8:	08001f1d 	.word	0x08001f1d

080020dc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	460b      	mov	r3, r1
 80020e6:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 80020e8:	2300      	movs	r3, #0
 80020ea:	60fb      	str	r3, [r7, #12]

    switch (format)
 80020ec:	78fb      	ldrb	r3, [r7, #3]
 80020ee:	2b0b      	cmp	r3, #11
 80020f0:	d826      	bhi.n	8002140 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 80020f2:	a201      	add	r2, pc, #4	; (adr r2, 80020f8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 80020f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020f8:	08002135 	.word	0x08002135
 80020fc:	0800212f 	.word	0x0800212f
 8002100:	08002129 	.word	0x08002129
 8002104:	08002141 	.word	0x08002141
 8002108:	08002141 	.word	0x08002141
 800210c:	08002141 	.word	0x08002141
 8002110:	08002141 	.word	0x08002141
 8002114:	0800213b 	.word	0x0800213b
 8002118:	0800213b 	.word	0x0800213b
 800211c:	0800213b 	.word	0x0800213b
 8002120:	0800213b 	.word	0x0800213b
 8002124:	0800213b 	.word	0x0800213b
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8002128:	2300      	movs	r3, #0
 800212a:	60fb      	str	r3, [r7, #12]
        break;
 800212c:	e00e      	b.n	800214c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 800212e:	2301      	movs	r3, #1
 8002130:	60fb      	str	r3, [r7, #12]
        break;
 8002132:	e00b      	b.n	800214c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8002134:	2302      	movs	r3, #2
 8002136:	60fb      	str	r3, [r7, #12]
        break;
 8002138:	e008      	b.n	800214c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 800213a:	2305      	movs	r3, #5
 800213c:	60fb      	str	r3, [r7, #12]
        break;
 800213e:	e005      	b.n	800214c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 8002140:	4b05      	ldr	r3, [pc, #20]	; (8002158 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 8002142:	4a06      	ldr	r2, [pc, #24]	; (800215c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 8002144:	2166      	movs	r1, #102	; 0x66
 8002146:	4806      	ldr	r0, [pc, #24]	; (8002160 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 8002148:	f01e fe3e 	bl	8020dc8 <__assert_func>
        break;
    }

    return dma2dColorMode;
 800214c:	68fb      	ldr	r3, [r7, #12]
}
 800214e:	4618      	mov	r0, r3
 8002150:	3710      	adds	r7, #16
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	0802210c 	.word	0x0802210c
 800215c:	08022128 	.word	0x08022128
 8002160:	08022174 	.word	0x08022174

08002164 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	460b      	mov	r3, r1
 800216e:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8002170:	2300      	movs	r3, #0
 8002172:	60fb      	str	r3, [r7, #12]

    switch (format)
 8002174:	78fb      	ldrb	r3, [r7, #3]
 8002176:	2b0a      	cmp	r3, #10
 8002178:	d821      	bhi.n	80021be <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 800217a:	a201      	add	r2, pc, #4	; (adr r2, 8002180 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 800217c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002180:	080021b9 	.word	0x080021b9
 8002184:	080021b3 	.word	0x080021b3
 8002188:	080021ad 	.word	0x080021ad
 800218c:	080021bf 	.word	0x080021bf
 8002190:	080021bf 	.word	0x080021bf
 8002194:	080021bf 	.word	0x080021bf
 8002198:	080021bf 	.word	0x080021bf
 800219c:	080021b3 	.word	0x080021b3
 80021a0:	080021b3 	.word	0x080021b3
 80021a4:	080021b3 	.word	0x080021b3
 80021a8:	080021b3 	.word	0x080021b3
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 80021ac:	2300      	movs	r3, #0
 80021ae:	60fb      	str	r3, [r7, #12]
        break;
 80021b0:	e00b      	b.n	80021ca <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 80021b2:	2301      	movs	r3, #1
 80021b4:	60fb      	str	r3, [r7, #12]
        break;
 80021b6:	e008      	b.n	80021ca <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 80021b8:	2302      	movs	r3, #2
 80021ba:	60fb      	str	r3, [r7, #12]
        break;
 80021bc:	e005      	b.n	80021ca <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 80021be:	4b05      	ldr	r3, [pc, #20]	; (80021d4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 80021c0:	4a05      	ldr	r2, [pc, #20]	; (80021d8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 80021c2:	2187      	movs	r1, #135	; 0x87
 80021c4:	4805      	ldr	r0, [pc, #20]	; (80021dc <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 80021c6:	f01e fdff 	bl	8020dc8 <__assert_func>
        break;
    }

    return dma2dColorMode;
 80021ca:	68fb      	ldr	r3, [r7, #12]
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3710      	adds	r7, #16
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	0802210c 	.word	0x0802210c
 80021d8:	08022204 	.word	0x08022204
 80021dc:	08022174 	.word	0x08022174

080021e0 <_ZN8STM32DMA11getBlitCapsEv>:

BlitOperations STM32DMA::getBlitCaps()
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY_L8
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 80021e8:	f240 33ef 	movw	r3, #1007	; 0x3ef
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 80021f8:	b590      	push	{r4, r7, lr}
 80021fa:	b089      	sub	sp, #36	; 0x24
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	7f5b      	ldrb	r3, [r3, #29]
 8002206:	4619      	mov	r1, r3
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f7ff ff67 	bl	80020dc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 800220e:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	7f9b      	ldrb	r3, [r3, #30]
 8002214:	4619      	mov	r1, r3
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f7ff ff60 	bl	80020dc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 800221c:	6178      	str	r0, [r7, #20]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	7f9b      	ldrb	r3, [r3, #30]
 8002222:	4619      	mov	r1, r3
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f7ff ff9d 	bl	8002164 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 800222a:	6138      	str	r0, [r7, #16]

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	8b5b      	ldrh	r3, [r3, #26]
 8002230:	461a      	mov	r2, r3
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	8a9b      	ldrh	r3, [r3, #20]
 8002236:	1ad2      	subs	r2, r2, r3
 8002238:	4b92      	ldr	r3, [pc, #584]	; (8002484 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800223a:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration */
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	8b5b      	ldrh	r3, [r3, #26]
 8002240:	461a      	mov	r2, r3
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	8a9b      	ldrh	r3, [r3, #20]
 8002246:	1ad2      	subs	r2, r2, r3
 8002248:	4b8e      	ldr	r3, [pc, #568]	; (8002484 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800224a:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	8b1b      	ldrh	r3, [r3, #24]
 8002250:	461a      	mov	r2, r3
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	8a9b      	ldrh	r3, [r3, #20]
 8002256:	1ad2      	subs	r2, r2, r3
 8002258:	4b8a      	ldr	r3, [pc, #552]	; (8002484 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800225a:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 800225c:	4a89      	ldr	r2, [pc, #548]	; (8002484 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	8adb      	ldrh	r3, [r3, #22]
 8002266:	461a      	mov	r2, r3
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	8a9b      	ldrh	r3, [r3, #20]
 800226c:	041b      	lsls	r3, r3, #16
 800226e:	431a      	orrs	r2, r3
 8002270:	4b84      	ldr	r3, [pc, #528]	; (8002484 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002272:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	691a      	ldr	r2, [r3, #16]
 8002278:	4b82      	ldr	r3, [pc, #520]	; (8002484 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800227a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685a      	ldr	r2, [r3, #4]
 8002280:	4b80      	ldr	r3, [pc, #512]	; (8002484 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002282:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800228c:	d037      	beq.n	80022fe <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
 800228e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002292:	f200 80e3 	bhi.w	800245c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>
 8002296:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800229a:	d015      	beq.n	80022c8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 800229c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022a0:	f200 80dc 	bhi.w	800245c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>
 80022a4:	2b80      	cmp	r3, #128	; 0x80
 80022a6:	d045      	beq.n	8002334 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13c>
 80022a8:	2b80      	cmp	r3, #128	; 0x80
 80022aa:	f200 80d7 	bhi.w	800245c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>
 80022ae:	2b40      	cmp	r3, #64	; 0x40
 80022b0:	f000 80bf 	beq.w	8002432 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23a>
 80022b4:	2b40      	cmp	r3, #64	; 0x40
 80022b6:	f200 80d1 	bhi.w	800245c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>
 80022ba:	2b04      	cmp	r3, #4
 80022bc:	f000 80a4 	beq.w	8002408 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x210>
 80022c0:	2b20      	cmp	r3, #32
 80022c2:	f000 80b6 	beq.w	8002432 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23a>
 80022c6:	e0c9      	b.n	800245c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	7f1b      	ldrb	r3, [r3, #28]
 80022cc:	061b      	lsls	r3, r3, #24
 80022ce:	4619      	mov	r1, r3
 80022d0:	4a6c      	ldr	r2, [pc, #432]	; (8002484 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80022d2:	4b6d      	ldr	r3, [pc, #436]	; (8002488 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 80022d4:	430b      	orrs	r3, r1
 80022d6:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	330c      	adds	r3, #12
 80022dc:	4c69      	ldr	r4, [pc, #420]	; (8002484 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80022de:	4618      	mov	r0, r3
 80022e0:	f7ff fd70 	bl	8001dc4 <_ZNK8touchgfx9colortypecvmEv>
 80022e4:	4603      	mov	r3, r0
 80022e6:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80022e8:	4a66      	ldr	r2, [pc, #408]	; (8002484 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	691a      	ldr	r2, [r3, #16]
 80022f2:	4b64      	ldr	r3, [pc, #400]	; (8002484 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80022f4:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80022f6:	4b63      	ldr	r3, [pc, #396]	; (8002484 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80022f8:	4a64      	ldr	r2, [pc, #400]	; (800248c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 80022fa:	601a      	str	r2, [r3, #0]
        break;
 80022fc:	e0d9      	b.n	80024b2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	7f1b      	ldrb	r3, [r3, #28]
 8002302:	061b      	lsls	r3, r3, #24
 8002304:	4619      	mov	r1, r3
 8002306:	4a5f      	ldr	r2, [pc, #380]	; (8002484 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002308:	4b61      	ldr	r3, [pc, #388]	; (8002490 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 800230a:	430b      	orrs	r3, r1
 800230c:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	330c      	adds	r3, #12
 8002312:	4c5c      	ldr	r4, [pc, #368]	; (8002484 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002314:	4618      	mov	r0, r3
 8002316:	f7ff fd55 	bl	8001dc4 <_ZNK8touchgfx9colortypecvmEv>
 800231a:	4603      	mov	r3, r0
 800231c:	6223      	str	r3, [r4, #32]
        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800231e:	4a59      	ldr	r2, [pc, #356]	; (8002484 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	691a      	ldr	r2, [r3, #16]
 8002328:	4b56      	ldr	r3, [pc, #344]	; (8002484 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800232a:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 800232c:	4b55      	ldr	r3, [pc, #340]	; (8002484 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800232e:	4a57      	ldr	r2, [pc, #348]	; (800248c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8002330:	601a      	str	r2, [r3, #0]
        break;
 8002332:	e0be      	b.n	80024b2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_L8:
        {
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	60fb      	str	r3, [r7, #12]
            bool blend = true;
 800233a:	2301      	movs	r3, #1
 800233c:	77fb      	strb	r3, [r7, #31]

            /* Set DMA2D color mode and alpha mode */
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	7f1b      	ldrb	r3, [r3, #28]
 8002342:	061b      	lsls	r3, r3, #24
 8002344:	461a      	mov	r2, r3
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	4313      	orrs	r3, r2
 800234a:	4a4e      	ldr	r2, [pc, #312]	; (8002484 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800234c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002350:	61d3      	str	r3, [r2, #28]

            /* Write DMA2D BGPFCCR register */
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002352:	4a4c      	ldr	r2, [pc, #304]	; (8002484 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	6253      	str	r3, [r2, #36]	; 0x24

            /* Configure DMA2D Stream source2 address */
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	691a      	ldr	r2, [r3, #16]
 800235c:	4b49      	ldr	r3, [pc, #292]	; (8002484 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800235e:	615a      	str	r2, [r3, #20]

            /* Write foreground CLUT memory address */
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	1d1a      	adds	r2, r3, #4
 8002364:	4b47      	ldr	r3, [pc, #284]	; (8002484 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002366:	62da      	str	r2, [r3, #44]	; 0x2c

            switch ((Bitmap::ClutFormat)palette->format)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	881b      	ldrh	r3, [r3, #0]
 800236c:	b2db      	uxtb	r3, r3
 800236e:	2b00      	cmp	r3, #0
 8002370:	d002      	beq.n	8002378 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x180>
 8002372:	2b01      	cmp	r3, #1
 8002374:	d00d      	beq.n	8002392 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x19a>
 8002376:	e020      	b.n	80023ba <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c2>
            {
            case Bitmap::CLUT_FORMAT_L8_ARGB8888:
                /* Write foreground CLUT size and CLUT color mode */
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002378:	4b42      	ldr	r3, [pc, #264]	; (8002484 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800237a:	69da      	ldr	r2, [r3, #28]
 800237c:	4b45      	ldr	r3, [pc, #276]	; (8002494 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800237e:	4013      	ands	r3, r2
 8002380:	68fa      	ldr	r2, [r7, #12]
 8002382:	8852      	ldrh	r2, [r2, #2]
 8002384:	3a01      	subs	r2, #1
 8002386:	0212      	lsls	r2, r2, #8
 8002388:	4611      	mov	r1, r2
 800238a:	4a3e      	ldr	r2, [pc, #248]	; (8002484 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800238c:	430b      	orrs	r3, r1
 800238e:	61d3      	str	r3, [r2, #28]
                break;
 8002390:	e01a      	b.n	80023c8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d0>
            case Bitmap::CLUT_FORMAT_L8_RGB888:
                if (blitOp.alpha == 255)
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	7f1b      	ldrb	r3, [r3, #28]
 8002396:	2bff      	cmp	r3, #255	; 0xff
 8002398:	d101      	bne.n	800239e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a6>
                {
                    blend = false;
 800239a:	2300      	movs	r3, #0
 800239c:	77fb      	strb	r3, [r7, #31]
                }
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 800239e:	4b39      	ldr	r3, [pc, #228]	; (8002484 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80023a0:	69da      	ldr	r2, [r3, #28]
 80023a2:	4b3c      	ldr	r3, [pc, #240]	; (8002494 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80023a4:	4013      	ands	r3, r2
 80023a6:	68fa      	ldr	r2, [r7, #12]
 80023a8:	8852      	ldrh	r2, [r2, #2]
 80023aa:	3a01      	subs	r2, #1
 80023ac:	0212      	lsls	r2, r2, #8
 80023ae:	4313      	orrs	r3, r2
 80023b0:	4a34      	ldr	r2, [pc, #208]	; (8002484 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80023b2:	f043 0310 	orr.w	r3, r3, #16
 80023b6:	61d3      	str	r3, [r2, #28]
                break;
 80023b8:	e006      	b.n	80023c8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d0>
            case Bitmap::CLUT_FORMAT_L8_RGB565:
            default:
                assert(0 && "Unsupported format");
 80023ba:	4b37      	ldr	r3, [pc, #220]	; (8002498 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80023bc:	4a37      	ldr	r2, [pc, #220]	; (800249c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 80023be:	f240 1101 	movw	r1, #257	; 0x101
 80023c2:	4837      	ldr	r0, [pc, #220]	; (80024a0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 80023c4:	f01e fd00 	bl	8020dc8 <__assert_func>
                break;
            }

            /* Enable the CLUT loading for the foreground */
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 80023c8:	4b2e      	ldr	r3, [pc, #184]	; (8002484 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80023ca:	69db      	ldr	r3, [r3, #28]
 80023cc:	4a2d      	ldr	r2, [pc, #180]	; (8002484 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80023ce:	f043 0320 	orr.w	r3, r3, #32
 80023d2:	61d3      	str	r3, [r2, #28]

            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 80023d4:	bf00      	nop
 80023d6:	4b2b      	ldr	r3, [pc, #172]	; (8002484 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80023d8:	69db      	ldr	r3, [r3, #28]
 80023da:	f003 0320 	and.w	r3, r3, #32
 80023de:	2b00      	cmp	r3, #0
 80023e0:	bf14      	ite	ne
 80023e2:	2301      	movne	r3, #1
 80023e4:	2300      	moveq	r3, #0
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d1f4      	bne.n	80023d6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1de>
            {
            }
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 80023ec:	4b25      	ldr	r3, [pc, #148]	; (8002484 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80023ee:	2210      	movs	r2, #16
 80023f0:	609a      	str	r2, [r3, #8]

            /* Set DMA2D mode */
            if (blend)
 80023f2:	7ffb      	ldrb	r3, [r7, #31]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d003      	beq.n	8002400 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x208>
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80023f8:	4b22      	ldr	r3, [pc, #136]	; (8002484 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80023fa:	4a24      	ldr	r2, [pc, #144]	; (800248c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 80023fc:	601a      	str	r2, [r3, #0]
            else
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
            }
        }
        break;
 80023fe:	e058      	b.n	80024b2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8002400:	4b20      	ldr	r3, [pc, #128]	; (8002484 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002402:	4a28      	ldr	r2, [pc, #160]	; (80024a4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 8002404:	601a      	str	r2, [r3, #0]
        break;
 8002406:	e054      	b.n	80024b2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	7f1b      	ldrb	r3, [r3, #28]
 800240c:	061b      	lsls	r3, r3, #24
 800240e:	461a      	mov	r2, r3
 8002410:	69bb      	ldr	r3, [r7, #24]
 8002412:	4313      	orrs	r3, r2
 8002414:	4a1b      	ldr	r2, [pc, #108]	; (8002484 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002416:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800241a:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800241c:	4a19      	ldr	r2, [pc, #100]	; (8002484 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	691a      	ldr	r2, [r3, #16]
 8002426:	4b17      	ldr	r3, [pc, #92]	; (8002484 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002428:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 800242a:	4b16      	ldr	r3, [pc, #88]	; (8002484 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800242c:	4a17      	ldr	r2, [pc, #92]	; (800248c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 800242e:	601a      	str	r2, [r3, #0]
        break;
 8002430:	e03f      	b.n	80024b2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	7f1b      	ldrb	r3, [r3, #28]
 8002436:	061b      	lsls	r3, r3, #24
 8002438:	461a      	mov	r2, r3
 800243a:	69bb      	ldr	r3, [r7, #24]
 800243c:	4313      	orrs	r3, r2
 800243e:	4a11      	ldr	r2, [pc, #68]	; (8002484 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002440:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002444:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002446:	4a0f      	ldr	r2, [pc, #60]	; (8002484 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	691a      	ldr	r2, [r3, #16]
 8002450:	4b0c      	ldr	r3, [pc, #48]	; (8002484 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002452:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002454:	4b0b      	ldr	r3, [pc, #44]	; (8002484 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002456:	4a0d      	ldr	r2, [pc, #52]	; (800248c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8002458:	601a      	str	r2, [r3, #0]
        break;
 800245a:	e02a      	b.n	80024b2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	7f1b      	ldrb	r3, [r3, #28]
 8002460:	061b      	lsls	r3, r3, #24
 8002462:	461a      	mov	r2, r3
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	4313      	orrs	r3, r2
 8002468:	4a06      	ldr	r2, [pc, #24]	; (8002484 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800246a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800246e:	61d3      	str	r3, [r2, #28]

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	7f5a      	ldrb	r2, [r3, #29]
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	7f9b      	ldrb	r3, [r3, #30]
 8002478:	429a      	cmp	r2, r3
 800247a:	d015      	beq.n	80024a8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 800247c:	4b01      	ldr	r3, [pc, #4]	; (8002484 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800247e:	4a09      	ldr	r2, [pc, #36]	; (80024a4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 8002480:	601a      	str	r2, [r3, #0]
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
        }

        break;
 8002482:	e015      	b.n	80024b0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b8>
 8002484:	52001000 	.word	0x52001000
 8002488:	0002000a 	.word	0x0002000a
 800248c:	00020201 	.word	0x00020201
 8002490:	00020009 	.word	0x00020009
 8002494:	ffff00ef 	.word	0xffff00ef
 8002498:	08022250 	.word	0x08022250
 800249c:	0802226c 	.word	0x0802226c
 80024a0:	08022174 	.word	0x08022174
 80024a4:	00010201 	.word	0x00010201
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 80024a8:	4b04      	ldr	r3, [pc, #16]	; (80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c4>)
 80024aa:	f240 2201 	movw	r2, #513	; 0x201
 80024ae:	601a      	str	r2, [r3, #0]
        break;
 80024b0:	bf00      	nop
    }
}
 80024b2:	bf00      	nop
 80024b4:	3724      	adds	r7, #36	; 0x24
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd90      	pop	{r4, r7, pc}
 80024ba:	bf00      	nop
 80024bc:	52001000 	.word	0x52001000

080024c0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 80024c0:	b590      	push	{r4, r7, lr}
 80024c2:	b085      	sub	sp, #20
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	7f9b      	ldrb	r3, [r3, #30]
 80024ce:	4619      	mov	r1, r3
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f7ff fe47 	bl	8002164 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80024d6:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80024d8:	4a2f      	ldr	r2, [pc, #188]	; (8002598 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	8adb      	ldrh	r3, [r3, #22]
 80024e2:	461a      	mov	r2, r3
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	8a9b      	ldrh	r3, [r3, #20]
 80024e8:	041b      	lsls	r3, r3, #16
 80024ea:	431a      	orrs	r2, r3
 80024ec:	4b2a      	ldr	r3, [pc, #168]	; (8002598 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80024ee:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	691a      	ldr	r2, [r3, #16]
 80024f4:	4b28      	ldr	r3, [pc, #160]	; (8002598 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80024f6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	8b5b      	ldrh	r3, [r3, #26]
 80024fc:	461a      	mov	r2, r3
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	8a9b      	ldrh	r3, [r3, #20]
 8002502:	1ad2      	subs	r2, r2, r3
 8002504:	4b24      	ldr	r3, [pc, #144]	; (8002598 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002506:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2b08      	cmp	r3, #8
 800250e:	d12e      	bne.n	800256e <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xae>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	8b5b      	ldrh	r3, [r3, #26]
 8002514:	461a      	mov	r2, r3
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	8a9b      	ldrh	r3, [r3, #20]
 800251a:	1ad2      	subs	r2, r2, r3
 800251c:	4b1e      	ldr	r3, [pc, #120]	; (8002598 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800251e:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	8b5b      	ldrh	r3, [r3, #26]
 8002524:	461a      	mov	r2, r3
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	8a9b      	ldrh	r3, [r3, #20]
 800252a:	1ad2      	subs	r2, r2, r3
 800252c:	4b1a      	ldr	r3, [pc, #104]	; (8002598 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800252e:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002530:	4a19      	ldr	r2, [pc, #100]	; (8002598 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	6253      	str	r3, [r2, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	7f1b      	ldrb	r3, [r3, #28]
 800253a:	061b      	lsls	r3, r3, #24
 800253c:	4619      	mov	r1, r3
 800253e:	4a16      	ldr	r2, [pc, #88]	; (8002598 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002540:	4b16      	ldr	r3, [pc, #88]	; (800259c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xdc>)
 8002542:	430b      	orrs	r3, r1
 8002544:	61d3      	str	r3, [r2, #28]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	330c      	adds	r3, #12
 800254a:	4c13      	ldr	r4, [pc, #76]	; (8002598 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800254c:	4618      	mov	r0, r3
 800254e:	f7ff fc39 	bl	8001dc4 <_ZNK8touchgfx9colortypecvmEv>
 8002552:	4603      	mov	r3, r0
 8002554:	6223      	str	r3, [r4, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	691a      	ldr	r2, [r3, #16]
 800255a:	4b0f      	ldr	r3, [pc, #60]	; (8002598 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800255c:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	691a      	ldr	r2, [r3, #16]
 8002562:	4b0d      	ldr	r3, [pc, #52]	; (8002598 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002564:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8002566:	4b0c      	ldr	r3, [pc, #48]	; (8002598 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002568:	4a0d      	ldr	r2, [pc, #52]	; (80025a0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe0>)
 800256a:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
    }
}
 800256c:	e010      	b.n	8002590 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd0>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 800256e:	4a0a      	ldr	r2, [pc, #40]	; (8002598 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8002574:	4b08      	ldr	r3, [pc, #32]	; (8002598 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002576:	2200      	movs	r2, #0
 8002578:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	330c      	adds	r3, #12
 800257e:	4c06      	ldr	r4, [pc, #24]	; (8002598 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002580:	4618      	mov	r0, r3
 8002582:	f7ff fc1f 	bl	8001dc4 <_ZNK8touchgfx9colortypecvmEv>
 8002586:	4603      	mov	r3, r0
 8002588:	63a3      	str	r3, [r4, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 800258a:	4b03      	ldr	r3, [pc, #12]	; (8002598 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800258c:	4a05      	ldr	r2, [pc, #20]	; (80025a4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe4>)
 800258e:	601a      	str	r2, [r3, #0]
}
 8002590:	bf00      	nop
 8002592:	3714      	adds	r7, #20
 8002594:	46bd      	mov	sp, r7
 8002596:	bd90      	pop	{r4, r7, pc}
 8002598:	52001000 	.word	0x52001000
 800259c:	00010009 	.word	0x00010009
 80025a0:	00020201 	.word	0x00020201
 80025a4:	00030201 	.word	0x00030201

080025a8 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	4a05      	ldr	r2, [pc, #20]	; (80025c8 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	601a      	str	r2, [r3, #0]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7ff fc0f 	bl	8001ddc <_ZN8touchgfx9DMA_QueueD1Ev>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4618      	mov	r0, r3
 80025c2:	3708      	adds	r7, #8
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	080232a8 	.word	0x080232a8

080025cc <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f7ff ffe7 	bl	80025a8 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 80025da:	2114      	movs	r1, #20
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f01e fbc4 	bl	8020d6a <_ZdlPvj>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4618      	mov	r0, r3
 80025e6:	3708      	adds	r7, #8
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}

080025ec <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	801a      	strh	r2, [r3, #0]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	805a      	strh	r2, [r3, #2]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2200      	movs	r2, #0
 8002604:	809a      	strh	r2, [r3, #4]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2200      	movs	r2, #0
 800260a:	80da      	strh	r2, [r3, #6]
    {
    }
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	4618      	mov	r0, r3
 8002610:	370c      	adds	r7, #12
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
	...

0800261c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 8002624:	4a04      	ldr	r2, [pc, #16]	; (8002638 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6013      	str	r3, [r2, #0]
    }
 800262a:	bf00      	nop
 800262c:	370c      	adds	r7, #12
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	24006a00 	.word	0x24006a00

0800263c <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
    {
 8002644:	4a04      	ldr	r2, [pc, #16]	; (8002658 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	601a      	str	r2, [r3, #0]
    }
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4618      	mov	r0, r3
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr
 8002658:	08022ca0 	.word	0x08022ca0

0800265c <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
    }
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f7ff ffe9 	bl	800263c <_ZN8touchgfx12FontProviderD1Ev>
 800266a:	2104      	movs	r1, #4
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f01e fb7c 	bl	8020d6a <_ZdlPvj>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4618      	mov	r0, r3
 8002676:	3708      	adds	r7, #8
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 800267c:	b480      	push	{r7}
 800267e:	b085      	sub	sp, #20
 8002680:	af00      	add	r7, sp, #0
 8002682:	60f8      	str	r0, [r7, #12]
 8002684:	60b9      	str	r1, [r7, #8]
 8002686:	607a      	str	r2, [r7, #4]
 8002688:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 800268a:	4a0b      	ldr	r2, [pc, #44]	; (80026b8 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	601a      	str	r2, [r3, #0]
        : presenterStorage(pres),
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	68ba      	ldr	r2, [r7, #8]
 8002694:	605a      	str	r2, [r3, #4]
          screenStorage(scr),
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	609a      	str	r2, [r3, #8]
          transitionStorage(tra),
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	683a      	ldr	r2, [r7, #0]
 80026a0:	60da      	str	r2, [r3, #12]
          frontendApplication(app)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	611a      	str	r2, [r3, #16]
    {
    }
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	4618      	mov	r0, r3
 80026ac:	3714      	adds	r7, #20
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	08022c90 	.word	0x08022c90

080026bc <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
    {
 80026c4:	4a04      	ldr	r2, [pc, #16]	; (80026d8 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	601a      	str	r2, [r3, #0]
    }
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4618      	mov	r0, r3
 80026ce:	370c      	adds	r7, #12
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr
 80026d8:	08022c90 	.word	0x08022c90

080026dc <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
    }
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f7ff ffe9 	bl	80026bc <_ZN8touchgfx7MVPHeapD1Ev>
 80026ea:	2114      	movs	r1, #20
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f01e fb3c 	bl	8020d6a <_ZdlPvj>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4618      	mov	r0, r3
 80026f6:	3708      	adds	r7, #8
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}

080026fc <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8002706:	bf00      	nop
 8002708:	370c      	adds	r7, #12
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr

08002712 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 8002712:	b480      	push	{r7}
 8002714:	b083      	sub	sp, #12
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
 800271a:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800271c:	bf00      	nop
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8002732:	bf00      	nop
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr

0800273e <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 800273e:	b480      	push	{r7}
 8002740:	b083      	sub	sp, #12
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
 8002746:	460b      	mov	r3, r1
 8002748:	70fb      	strb	r3, [r7, #3]
    {
        (void)c; // Unused variable
    }
 800274a:	bf00      	nop
 800274c:	370c      	adds	r7, #12
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr

08002756 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 8002756:	b480      	push	{r7}
 8002758:	b083      	sub	sp, #12
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
    {
    }
 800275e:	bf00      	nop
 8002760:	370c      	adds	r7, #12
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr

0800276a <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 800276a:	b480      	push	{r7}
 800276c:	b083      	sub	sp, #12
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
    {
    }
 8002772:	bf00      	nop
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
	...

08002780 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
    {
 8002788:	4a04      	ldr	r2, [pc, #16]	; (800279c <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	601a      	str	r2, [r3, #0]
    }
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4618      	mov	r0, r3
 8002792:	370c      	adds	r7, #12
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr
 800279c:	08022c68 	.word	0x08022c68

080027a0 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
    }
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f7ff ffe9 	bl	8002780 <_ZN8touchgfx15UIEventListenerD1Ev>
 80027ae:	2104      	movs	r1, #4
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f01e fada 	bl	8020d6a <_ZdlPvj>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4618      	mov	r0, r3
 80027ba:	3708      	adds	r7, #8
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}

080027c0 <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
    {
 80027c8:	4a04      	ldr	r2, [pc, #16]	; (80027dc <_ZN8touchgfx3LCDD1Ev+0x1c>)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	601a      	str	r2, [r3, #0]
    }
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4618      	mov	r0, r3
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr
 80027dc:	080233c4 	.word	0x080233c4

080027e0 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
    }
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f7ff ffe9 	bl	80027c0 <_ZN8touchgfx3LCDD1Ev>
 80027ee:	2108      	movs	r1, #8
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f01e faba 	bl	8020d6a <_ZdlPvj>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4618      	mov	r0, r3
 80027fa:	3708      	adds	r7, #8
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     * @note The application will not make a complete restart - if
     *       your Model contains data, this will not be reset, unless
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
    {
    }
 8002808:	bf00      	nop
 800280a:	370c      	adds	r7, #12
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr

08002814 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	460b      	mov	r3, r1
 800281e:	70fb      	strb	r3, [r7, #3]
    {
        (void)screenId; // Unused variable
    }
 8002820:	bf00      	nop
 8002822:	370c      	adds	r7, #12
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	683a      	ldr	r2, [r7, #0]
 800283a:	f503 7398 	add.w	r3, r3, #304	; 0x130
 800283e:	6810      	ldr	r0, [r2, #0]
 8002840:	6851      	ldr	r1, [r2, #4]
 8002842:	c303      	stmia	r3!, {r0, r1}
    }
 8002844:	bf00      	nop
 8002846:	370c      	adds	r7, #12
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr

08002850 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
    {
 8002858:	4a04      	ldr	r2, [pc, #16]	; (800286c <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	601a      	str	r2, [r3, #0]
    }
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4618      	mov	r0, r3
 8002862:	370c      	adds	r7, #12
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr
 800286c:	08022c50 	.word	0x08022c50

08002870 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
    }
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f7ff ffe9 	bl	8002850 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800287e:	2104      	movs	r1, #4
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f01e fa72 	bl	8020d6a <_ZdlPvj>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4618      	mov	r0, r3
 800288a:	3708      	adds	r7, #8
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
            : startX(0),
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	801a      	strh	r2, [r3, #0]
              startY(0),
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2200      	movs	r2, #0
 80028a2:	805a      	strh	r2, [r3, #2]
              downX(0),
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	809a      	strh	r2, [r3, #4]
              downY(0),
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	80da      	strh	r2, [r3, #6]
              tickCount(0),
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2200      	movs	r2, #0
 80028b4:	811a      	strh	r2, [r3, #8]
              velocityX(0),
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	815a      	strh	r2, [r3, #10]
              velocityY(0),
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	819a      	strh	r2, [r3, #12]
              inProgress(false)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	739a      	strb	r2, [r3, #14]
        {
        }
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	4618      	mov	r0, r3
 80028cc:	370c      	adds	r7, #12
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr

080028d6 <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 80028d6:	b580      	push	{r7, lr}
 80028d8:	b082      	sub	sp, #8
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7ff ffd5 	bl	8002890 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	611a      	str	r2, [r3, #16]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2200      	movs	r2, #0
 80028f0:	829a      	strh	r2, [r3, #20]
    {
    }
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4618      	mov	r0, r3
 80028f6:	3708      	adds	r7, #8
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}

080028fc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	60b9      	str	r1, [r7, #8]
 8002906:	607a      	str	r2, [r7, #4]
 8002908:	603b      	str	r3, [r7, #0]
          lastRenderMethod(HARDWARE)
 800290a:	4a55      	ldr	r2, [pc, #340]	; (8002a60 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x164>)
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	601a      	str	r2, [r3, #0]
        : dma(dmaInterface),
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	68ba      	ldr	r2, [r7, #8]
 8002914:	605a      	str	r2, [r3, #4]
          lcdRef(display),
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	609a      	str	r2, [r3, #8]
          touchController(touchCtrl),
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	683a      	ldr	r2, [r7, #0]
 8002920:	60da      	str	r2, [r3, #12]
          mcuInstrumentation(0),
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2200      	movs	r2, #0
 8002926:	611a      	str	r2, [r3, #16]
          buttonController(0),
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2200      	movs	r2, #0
 800292c:	615a      	str	r2, [r3, #20]
          frameBufferAllocator(0),
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2200      	movs	r2, #0
 8002932:	619a      	str	r2, [r3, #24]
          gestures(),
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	331c      	adds	r3, #28
 8002938:	4618      	mov	r0, r3
 800293a:	f7ff ffcc 	bl	80028d6 <_ZN8touchgfx8GesturesC1Ev>
          nativeDisplayOrientation(ORIENTATION_LANDSCAPE),
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2200      	movs	r2, #0
 8002942:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          taskDelayFunc(0),
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2200      	movs	r2, #0
 800294a:	639a      	str	r2, [r3, #56]	; 0x38
          frameBuffer0(0),
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2200      	movs	r2, #0
 8002950:	63da      	str	r2, [r3, #60]	; 0x3c
          frameBuffer1(0),
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2200      	movs	r2, #0
 8002956:	641a      	str	r2, [r3, #64]	; 0x40
          frameBuffer2(0),
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2200      	movs	r2, #0
 800295c:	645a      	str	r2, [r3, #68]	; 0x44
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2200      	movs	r2, #0
 8002962:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
          fingerSize(1),
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2201      	movs	r2, #1
 800296a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
          lockDMAToPorch(false),
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
          frameBufferUpdatedThisFrame(false),
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2200      	movs	r2, #0
 800297a:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
          auxiliaryLCD(0),
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2200      	movs	r2, #0
 8002982:	64da      	str	r2, [r3, #76]	; 0x4c
          partialFrameBufferRect(),
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	3350      	adds	r3, #80	; 0x50
 8002988:	4618      	mov	r0, r3
 800298a:	f7ff fe2f 	bl	80025ec <_ZN8touchgfx4RectC1Ev>
          useAuxiliaryLCD(false),
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2200      	movs	r2, #0
 8002992:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
          listener(0),
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2200      	movs	r2, #0
 800299a:	65da      	str	r2, [r3, #92]	; 0x5c
          lastX(0),
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2200      	movs	r2, #0
 80029a0:	661a      	str	r2, [r3, #96]	; 0x60
          lastY(0),
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2200      	movs	r2, #0
 80029a6:	665a      	str	r2, [r3, #100]	; 0x64
          touchSampleRate(1),
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
          mcuLoadPct(0),
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2200      	movs	r2, #0
 80029b4:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
          vSyncCnt(0),
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2200      	movs	r2, #0
 80029bc:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
          vSyncForFrame(1),
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
          vSyncCompensationEnabled(false),
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2200      	movs	r2, #0
 80029cc:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
          clientDirty(false),
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2200      	movs	r2, #0
 80029d4:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
          swapRequested(false),
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2200      	movs	r2, #0
 80029dc:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
          lastTouched(false),
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2200      	movs	r2, #0
 80029e4:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
          updateMCULoad(0),
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          cc_begin(0),
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2200      	movs	r2, #0
 80029f4:	675a      	str	r2, [r3, #116]	; 0x74
          requestedOrientation(ORIENTATION_LANDSCAPE),
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2200      	movs	r2, #0
 80029fa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
          displayOrientationChangeRequested(false),
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
          useDMAAcceleration(true),
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
          lastRenderMethod(HARDWARE)
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2201      	movs	r2, #1
 8002a12:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
        instance = this;
 8002a16:	4a13      	ldr	r2, [pc, #76]	; (8002a64 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x168>)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6013      	str	r3, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8002a1c:	4a12      	ldr	r2, [pc, #72]	; (8002a68 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8002a1e:	8b3b      	ldrh	r3, [r7, #24]
 8002a20:	8013      	strh	r3, [r2, #0]
 8002a22:	4b11      	ldr	r3, [pc, #68]	; (8002a68 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8002a24:	881a      	ldrh	r2, [r3, #0]
 8002a26:	4b11      	ldr	r3, [pc, #68]	; (8002a6c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 8002a28:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8002a2a:	4a11      	ldr	r2, [pc, #68]	; (8002a70 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 8002a2c:	8bbb      	ldrh	r3, [r7, #28]
 8002a2e:	8013      	strh	r3, [r2, #0]
 8002a30:	4b0f      	ldr	r3, [pc, #60]	; (8002a70 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 8002a32:	881a      	ldrh	r2, [r3, #0]
 8002a34:	4b0f      	ldr	r3, [pc, #60]	; (8002a74 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x178>)
 8002a36:	801a      	strh	r2, [r3, #0]
        DISPLAY_ROTATION = rotate0;
 8002a38:	4b0f      	ldr	r3, [pc, #60]	; (8002a78 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x17c>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	701a      	strb	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8002a3e:	8b3a      	ldrh	r2, [r7, #24]
 8002a40:	8bbb      	ldrh	r3, [r7, #28]
 8002a42:	429a      	cmp	r2, r3
 8002a44:	bf34      	ite	cc
 8002a46:	2301      	movcc	r3, #1
 8002a48:	2300      	movcs	r3, #0
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	4618      	mov	r0, r3
 8002a58:	3710      	adds	r7, #16
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	08023180 	.word	0x08023180
 8002a64:	240069a4 	.word	0x240069a4
 8002a68:	24006998 	.word	0x24006998
 8002a6c:	2400699e 	.word	0x2400699e
 8002a70:	2400699a 	.word	0x2400699a
 8002a74:	240069a0 	.word	0x240069a0
 8002a78:	2400699c 	.word	0x2400699c

08002a7c <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	4a05      	ldr	r2, [pc, #20]	; (8002a9c <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	601a      	str	r2, [r3, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7ff fe77 	bl	8002780 <_ZN8touchgfx15UIEventListenerD1Ev>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4618      	mov	r0, r3
 8002a96:	3708      	adds	r7, #8
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	0802341c 	.word	0x0802341c

08002aa0 <_ZN8touchgfx11ApplicationD0Ev>:
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f7ff ffe7 	bl	8002a7c <_ZN8touchgfx11ApplicationD1Ev>
 8002aae:	f44f 719e 	mov.w	r1, #316	; 0x13c
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f01e f959 	bl	8020d6a <_ZdlPvj>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	4618      	mov	r0, r3
 8002abc:	3708      	adds	r7, #8
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	b082      	sub	sp, #8
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f000 f804 	bl	8002ad8 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 8002ad0:	bf00      	nop
 8002ad2:	3708      	adds	r7, #8
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d00f      	beq.n	8002b0a <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	330c      	adds	r3, #12
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4610      	mov	r0, r2
 8002afe:	4798      	blx	r3
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d001      	beq.n	8002b0a <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8002b06:	2301      	movs	r3, #1
 8002b08:	e000      	b.n	8002b0c <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d00e      	beq.n	8002b2e <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	3308      	adds	r3, #8
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4610      	mov	r0, r2
 8002b24:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
        }
    }
 8002b2e:	bf00      	nop
 8002b30:	3708      	adds	r7, #8
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
	...

08002b38 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	4a05      	ldr	r2, [pc, #20]	; (8002b58 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	601a      	str	r2, [r3, #0]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f7ff ff97 	bl	8002a7c <_ZN8touchgfx11ApplicationD1Ev>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4618      	mov	r0, r3
 8002b52:	3708      	adds	r7, #8
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	08022bfc 	.word	0x08022bfc

08002b5c <_ZN8touchgfx14MVPApplicationD0Ev>:
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f7ff ffe7 	bl	8002b38 <_ZN8touchgfx14MVPApplicationD1Ev>
 8002b6a:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f01e f8fb 	bl	8020d6a <_ZdlPvj>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	4618      	mov	r0, r3
 8002b78:	3708      	adds	r7, #8
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
	...

08002b80 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	4a08      	ldr	r2, [pc, #32]	; (8002bac <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	601a      	str	r2, [r3, #0]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8002b94:	4618      	mov	r0, r3
 8002b96:	f000 fb19 	bl	80031cc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7ff ffcb 	bl	8002b38 <_ZN8touchgfx14MVPApplicationD1Ev>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3708      	adds	r7, #8
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	08022b90 	.word	0x08022b90

08002bb0 <_ZN23FrontendApplicationBaseD0Ev>:
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f7ff ffe1 	bl	8002b80 <_ZN23FrontendApplicationBaseD1Ev>
 8002bbe:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f01e f8d1 	bl	8020d6a <_ZdlPvj>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3708      	adds	r7, #8
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}

08002bd2 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:

    virtual void changeToStartScreen()
 8002bd2:	b580      	push	{r7, lr}
 8002bd4:	b082      	sub	sp, #8
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
    {
        gotoScreen1ScreenNoTransition();
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f001 f8f4 	bl	8003dc8 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 8002be0:	bf00      	nop
 8002be2:	3708      	adds	r7, #8
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	4a05      	ldr	r2, [pc, #20]	; (8002c08 <_ZN19FrontendApplicationD1Ev+0x20>)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	601a      	str	r2, [r3, #0]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7ff ffc1 	bl	8002b80 <_ZN23FrontendApplicationBaseD1Ev>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4618      	mov	r0, r3
 8002c02:	3708      	adds	r7, #8
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	08022b3c 	.word	0x08022b3c

08002c0c <_ZN19FrontendApplicationD0Ev>:
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f7ff ffe7 	bl	8002be8 <_ZN19FrontendApplicationD1Ev>
 8002c1a:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f01e f8a3 	bl	8020d6a <_ZdlPvj>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	4618      	mov	r0, r3
 8002c28:	3708      	adds	r7, #8
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8002c2e:	b580      	push	{r7, lr}
 8002c30:	b082      	sub	sp, #8
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f002 fbbb 	bl	80053b8 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4618      	mov	r0, r3
 8002c46:	f012 f97b 	bl	8014f40 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 8002c4a:	bf00      	nop
 8002c4c:	3708      	adds	r7, #8
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}

08002c52 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8002c52:	b580      	push	{r7, lr}
 8002c54:	b082      	sub	sp, #8
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
 8002c5a:	6039      	str	r1, [r7, #0]
    {
        app.gotoScreen1ScreenNoTransition();
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f001 f8b2 	bl	8003dc8 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 8002c64:	bf00      	nop
 8002c66:	3708      	adds	r7, #8
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b086      	sub	sp, #24
 8002c70:	af02      	add	r7, sp, #8
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	60b9      	str	r1, [r7, #8]
 8002c76:	607a      	str	r2, [r7, #4]
 8002c78:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 8002c7a:	68f8      	ldr	r0, [r7, #12]
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	9300      	str	r3, [sp, #0]
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	68b9      	ldr	r1, [r7, #8]
 8002c86:	f7ff fcf9 	bl	800267c <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 8002c8a:	4a04      	ldr	r2, [pc, #16]	; (8002c9c <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	601a      	str	r2, [r3, #0]
    {

    }
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	4618      	mov	r0, r3
 8002c94:	3710      	adds	r7, #16
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	08022b28 	.word	0x08022b28

08002ca0 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	4801      	ldr	r0, [pc, #4]	; (8002cac <__tcf_0+0xc>)
 8002ca6:	f000 f965 	bl	8002f74 <_ZN12FrontendHeapD1Ev>
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	24000370 	.word	0x24000370

08002cb0 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 8002cb4:	4b11      	ldr	r3, [pc, #68]	; (8002cfc <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f3bf 8f5b 	dmb	ish
 8002cbc:	f003 0301 	and.w	r3, r3, #1
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	bf0c      	ite	eq
 8002cc4:	2301      	moveq	r3, #1
 8002cc6:	2300      	movne	r3, #0
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d013      	beq.n	8002cf6 <_ZN12FrontendHeap11getInstanceEv+0x46>
 8002cce:	480b      	ldr	r0, [pc, #44]	; (8002cfc <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 8002cd0:	f01e f84d 	bl	8020d6e <__cxa_guard_acquire>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	bf14      	ite	ne
 8002cda:	2301      	movne	r3, #1
 8002cdc:	2300      	moveq	r3, #0
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d008      	beq.n	8002cf6 <_ZN12FrontendHeap11getInstanceEv+0x46>
 8002ce4:	4806      	ldr	r0, [pc, #24]	; (8002d00 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8002ce6:	f000 f867 	bl	8002db8 <_ZN12FrontendHeapC1Ev>
 8002cea:	4806      	ldr	r0, [pc, #24]	; (8002d04 <_ZN12FrontendHeap11getInstanceEv+0x54>)
 8002cec:	f01e f88a 	bl	8020e04 <atexit>
 8002cf0:	4802      	ldr	r0, [pc, #8]	; (8002cfc <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 8002cf2:	f01e f848 	bl	8020d86 <__cxa_guard_release>
        return instance;
 8002cf6:	4b02      	ldr	r3, [pc, #8]	; (8002d00 <_ZN12FrontendHeap11getInstanceEv+0x50>)
    }
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	240005f8 	.word	0x240005f8
 8002d00:	24000370 	.word	0x24000370
 8002d04:	08002ca1 	.word	0x08002ca1

08002d08 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	4a05      	ldr	r2, [pc, #20]	; (8002d28 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	601a      	str	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7ff fccf 	bl	80026bc <_ZN8touchgfx7MVPHeapD1Ev>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4618      	mov	r0, r3
 8002d22:	3708      	adds	r7, #8
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	08022b28 	.word	0x08022b28

08002d2c <_ZN16FrontendHeapBaseD0Ev>:
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f7ff ffe7 	bl	8002d08 <_ZN16FrontendHeapBaseD1Ev>
 8002d3a:	2114      	movs	r1, #20
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f01e f814 	bl	8020d6a <_ZdlPvj>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4618      	mov	r0, r3
 8002d46:	3708      	adds	r7, #8
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	4618      	mov	r0, r3
 8002d58:	f00e fdfe 	bl	8011958 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002d5c:	4a03      	ldr	r2, [pc, #12]	; (8002d6c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	601a      	str	r2, [r3, #0]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4618      	mov	r0, r3
 8002d66:	3708      	adds	r7, #8
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	08022af4 	.word	0x08022af4

08002d70 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f00e fdec 	bl	8011958 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002d80:	4a03      	ldr	r2, [pc, #12]	; (8002d90 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	601a      	str	r2, [r3, #0]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3708      	adds	r7, #8
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	08022ac0 	.word	0x08022ac0

08002d94 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f00e fdda 	bl	8011958 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002da4:	4a03      	ldr	r2, [pc, #12]	; (8002db4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	601a      	str	r2, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4618      	mov	r0, r3
 8002dae:	3708      	adds	r7, #8
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	08022a8c 	.word	0x08022a8c

08002db8 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8002db8:	b590      	push	{r4, r7, lr}
 8002dba:	b085      	sub	sp, #20
 8002dbc:	af02      	add	r7, sp, #8
 8002dbe:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f103 0114 	add.w	r1, r3, #20
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f503 748a 	add.w	r4, r3, #276	; 0x114
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f503 7396 	add.w	r3, r3, #300	; 0x12c
                     app(model, *this)
 8002dda:	9300      	str	r3, [sp, #0]
 8002ddc:	4623      	mov	r3, r4
 8002dde:	f7ff ff45 	bl	8002c6c <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 8002de2:	4a18      	ldr	r2, [pc, #96]	; (8002e44 <_ZN12FrontendHeapC1Ev+0x8c>)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	601a      	str	r2, [r3, #0]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	3314      	adds	r3, #20
 8002dec:	4618      	mov	r0, r3
 8002dee:	f7ff ffad 	bl	8002d4c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	332c      	adds	r3, #44	; 0x2c
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7ff ffba 	bl	8002d70 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8002e02:	4618      	mov	r0, r3
 8002e04:	f7ff ffc6 	bl	8002d94 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f002 fac4 	bl	800539c <_ZN5ModelC1Ev>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f503 7096 	add.w	r0, r3, #300	; 0x12c
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	4619      	mov	r1, r3
 8002e24:	f002 faa4 	bl	8005370 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8002e30:	4619      	mov	r1, r3
 8002e32:	4610      	mov	r0, r2
 8002e34:	f7ff ff0d 	bl	8002c52 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	370c      	adds	r7, #12
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd90      	pop	{r4, r7, pc}
 8002e42:	bf00      	nop
 8002e44:	08022a78 	.word	0x08022a78

08002e48 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b086      	sub	sp, #24
 8002e4c:	af02      	add	r7, sp, #8
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	607a      	str	r2, [r7, #4]
 8002e54:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 8002e56:	68f8      	ldr	r0, [r7, #12]
 8002e58:	8bbb      	ldrh	r3, [r7, #28]
 8002e5a:	9301      	str	r3, [sp, #4]
 8002e5c:	8b3b      	ldrh	r3, [r7, #24]
 8002e5e:	9300      	str	r3, [sp, #0]
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	68b9      	ldr	r1, [r7, #8]
 8002e66:	f7ff fd49 	bl	80028fc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 8002e6a:	4a04      	ldr	r2, [pc, #16]	; (8002e7c <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	601a      	str	r2, [r3, #0]
    }
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	4618      	mov	r0, r3
 8002e74:	3710      	adds	r7, #16
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	08022cb4 	.word	0x08022cb4

08002e80 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b086      	sub	sp, #24
 8002e84:	af02      	add	r7, sp, #8
 8002e86:	60f8      	str	r0, [r7, #12]
 8002e88:	60b9      	str	r1, [r7, #8]
 8002e8a:	607a      	str	r2, [r7, #4]
 8002e8c:	603b      	str	r3, [r7, #0]
 8002e8e:	68f8      	ldr	r0, [r7, #12]
 8002e90:	8bbb      	ldrh	r3, [r7, #28]
 8002e92:	9301      	str	r3, [sp, #4]
 8002e94:	8b3b      	ldrh	r3, [r7, #24]
 8002e96:	9300      	str	r3, [sp, #0]
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	68b9      	ldr	r1, [r7, #8]
 8002e9e:	f7ff ffd3 	bl	8002e48 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8002ea2:	4a04      	ldr	r2, [pc, #16]	; (8002eb4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	601a      	str	r2, [r3, #0]
    }
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3710      	adds	r7, #16
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	0802292c 	.word	0x0802292c

08002eb8 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	4a04      	ldr	r2, [pc, #16]	; (8002ed4 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	601a      	str	r2, [r3, #0]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4618      	mov	r0, r3
 8002eca:	370c      	adds	r7, #12
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr
 8002ed4:	08022914 	.word	0x08022914

08002ed8 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f7ff ffe8 	bl	8002eb8 <_ZN8touchgfx15TouchControllerC1Ev>
 8002ee8:	4a03      	ldr	r2, [pc, #12]	; (8002ef8 <_ZN20STM32TouchControllerC1Ev+0x20>)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	601a      	str	r2, [r3, #0]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3708      	adds	r7, #8
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	080228fc 	.word	0x080228fc

08002efc <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 8002efc:	b590      	push	{r4, r7, lr}
 8002efe:	b085      	sub	sp, #20
 8002f00:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8002f02:	f000 fd09 	bl	8003918 <_ZN14BitmapDatabase11getInstanceEv>
 8002f06:	4604      	mov	r4, r0
 8002f08:	f000 fd10 	bl	800392c <_ZN14BitmapDatabase15getInstanceSizeEv>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	4619      	mov	r1, r3
 8002f10:	2300      	movs	r3, #0
 8002f12:	9300      	str	r3, [sp, #0]
 8002f14:	2300      	movs	r3, #0
 8002f16:	2200      	movs	r2, #0
 8002f18:	4620      	mov	r0, r4
 8002f1a:	f014 fd07 	bl	801792c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 8002f1e:	4809      	ldr	r0, [pc, #36]	; (8002f44 <touchgfx_init+0x48>)
 8002f20:	f7ff fb7c 	bl	800261c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 8002f24:	2000      	movs	r0, #0
 8002f26:	f002 f977 	bl	8005218 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 8002f2a:	4807      	ldr	r0, [pc, #28]	; (8002f48 <touchgfx_init+0x4c>)
 8002f2c:	f014 fbb6 	bl	801769c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 8002f30:	f7ff febe 	bl	8002cb0 <_ZN12FrontendHeap11getInstanceEv>
 8002f34:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8002f36:	4805      	ldr	r0, [pc, #20]	; (8002f4c <touchgfx_init+0x50>)
 8002f38:	f7fe fd6a 	bl	8001a10 <_ZN11TouchGFXHAL10initializeEv>
}
 8002f3c:	bf00      	nop
 8002f3e:	370c      	adds	r7, #12
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd90      	pop	{r4, r7, pc}
 8002f44:	24001404 	.word	0x24001404
 8002f48:	24000008 	.word	0x24000008
 8002f4c:	24001408 	.word	0x24001408

08002f50 <touchgfx_components_init>:

void touchgfx_components_init()
{
 8002f50:	b480      	push	{r7}
 8002f52:	af00      	add	r7, sp, #0
}
 8002f54:	bf00      	nop
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
	...

08002f60 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	af00      	add	r7, sp, #0
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 8002f64:	4802      	ldr	r0, [pc, #8]	; (8002f70 <touchgfx_taskEntry+0x10>)
 8002f66:	f7fe fd5f 	bl	8001a28 <_ZN11TouchGFXHAL9taskEntryEv>
}
 8002f6a:	bf00      	nop
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	24001408 	.word	0x24001408

08002f74 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b082      	sub	sp, #8
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	4a10      	ldr	r2, [pc, #64]	; (8002fc0 <_ZN12FrontendHeapD1Ev+0x4c>)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	601a      	str	r2, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7ff fe2d 	bl	8002be8 <_ZN19FrontendApplicationD1Ev>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8002f94:	4618      	mov	r0, r3
 8002f96:	f000 f827 	bl	8002fe8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	332c      	adds	r3, #44	; 0x2c
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f000 f844 	bl	800302c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	3314      	adds	r3, #20
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f000 f861 	bl	8003070 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f7ff fea9 	bl	8002d08 <_ZN16FrontendHeapBaseD1Ev>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3708      	adds	r7, #8
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	08022a78 	.word	0x08022a78

08002fc4 <_ZN12FrontendHeapD0Ev>:
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	f7ff ffd1 	bl	8002f74 <_ZN12FrontendHeapD1Ev>
 8002fd2:	f44f 7122 	mov.w	r1, #648	; 0x288
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f01d fec7 	bl	8020d6a <_ZdlPvj>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3708      	adds	r7, #8
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
	...

08002fe8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	4a05      	ldr	r2, [pc, #20]	; (8003008 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	601a      	str	r2, [r3, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f00e fcac 	bl	8011956 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4618      	mov	r0, r3
 8003002:	3708      	adds	r7, #8
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}
 8003008:	08022a8c 	.word	0x08022a8c

0800300c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f7ff ffe7 	bl	8002fe8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 800301a:	2114      	movs	r1, #20
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f01d fea4 	bl	8020d6a <_ZdlPvj>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4618      	mov	r0, r3
 8003026:	3708      	adds	r7, #8
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	4a05      	ldr	r2, [pc, #20]	; (800304c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	601a      	str	r2, [r3, #0]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4618      	mov	r0, r3
 800303e:	f00e fc8a 	bl	8011956 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4618      	mov	r0, r3
 8003046:	3708      	adds	r7, #8
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	08022ac0 	.word	0x08022ac0

08003050 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f7ff ffe7 	bl	800302c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800305e:	21e8      	movs	r1, #232	; 0xe8
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f01d fe82 	bl	8020d6a <_ZdlPvj>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4618      	mov	r0, r3
 800306a:	3708      	adds	r7, #8
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}

08003070 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	4a05      	ldr	r2, [pc, #20]	; (8003090 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	601a      	str	r2, [r3, #0]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4618      	mov	r0, r3
 8003082:	f00e fc68 	bl	8011956 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4618      	mov	r0, r3
 800308a:	3708      	adds	r7, #8
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}
 8003090:	08022af4 	.word	0x08022af4

08003094 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8003094:	b580      	push	{r7, lr}
 8003096:	b082      	sub	sp, #8
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f7ff ffe7 	bl	8003070 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80030a2:	2118      	movs	r1, #24
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f01d fe60 	bl	8020d6a <_ZdlPvj>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4618      	mov	r0, r3
 80030ae:	3708      	adds	r7, #8
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b082      	sub	sp, #8
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	4a05      	ldr	r2, [pc, #20]	; (80030d4 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	601a      	str	r2, [r3, #0]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4618      	mov	r0, r3
 80030c6:	f7ff fab9 	bl	800263c <_ZN8touchgfx12FontProviderD1Ev>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4618      	mov	r0, r3
 80030ce:	3708      	adds	r7, #8
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	08022d8c 	.word	0x08022d8c

080030d8 <_ZN23ApplicationFontProviderD0Ev>:
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f7ff ffe7 	bl	80030b4 <_ZN23ApplicationFontProviderD1Ev>
 80030e6:	2104      	movs	r1, #4
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f01d fe3e 	bl	8020d6a <_ZdlPvj>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4618      	mov	r0, r3
 80030f2:	3708      	adds	r7, #8
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <_ZN8touchgfx8LCD24bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD24bpp : public LCD
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	4a05      	ldr	r2, [pc, #20]	; (8003118 <_ZN8touchgfx8LCD24bppD1Ev+0x20>)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	601a      	str	r2, [r3, #0]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4618      	mov	r0, r3
 800310a:	f7ff fb59 	bl	80027c0 <_ZN8touchgfx3LCDD1Ev>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4618      	mov	r0, r3
 8003112:	3708      	adds	r7, #8
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	08023780 	.word	0x08023780

0800311c <_ZN8touchgfx8LCD24bppD0Ev>:
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f7ff ffe7 	bl	80030f8 <_ZN8touchgfx8LCD24bppD1Ev>
 800312a:	2164      	movs	r1, #100	; 0x64
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f01d fe1c 	bl	8020d6a <_ZdlPvj>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4618      	mov	r0, r3
 8003136:	3708      	adds	r7, #8
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <_Z41__static_initialization_and_destruction_0ii>:
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af02      	add	r7, sp, #8
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2b01      	cmp	r3, #1
 800314a:	d119      	bne.n	8003180 <_Z41__static_initialization_and_destruction_0ii+0x44>
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003152:	4293      	cmp	r3, r2
 8003154:	d114      	bne.n	8003180 <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 8003156:	4818      	ldr	r0, [pc, #96]	; (80031b8 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8003158:	f7ff febe 	bl	8002ed8 <_ZN20STM32TouchControllerC1Ev>
static STM32DMA dma;
 800315c:	4817      	ldr	r0, [pc, #92]	; (80031bc <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800315e:	f7fe ff37 	bl	8001fd0 <_ZN8STM32DMAC1Ev>
static LCD24bpp display;
 8003162:	4817      	ldr	r0, [pc, #92]	; (80031c0 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8003164:	f017 fc3c 	bl	801a9e0 <_ZN8touchgfx8LCD24bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 8003168:	f44f 7388 	mov.w	r3, #272	; 0x110
 800316c:	9301      	str	r3, [sp, #4]
 800316e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003172:	9300      	str	r3, [sp, #0]
 8003174:	4b10      	ldr	r3, [pc, #64]	; (80031b8 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8003176:	4a12      	ldr	r2, [pc, #72]	; (80031c0 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8003178:	4910      	ldr	r1, [pc, #64]	; (80031bc <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800317a:	4812      	ldr	r0, [pc, #72]	; (80031c4 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800317c:	f7ff fe80 	bl	8002e80 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d113      	bne.n	80031ae <_Z41__static_initialization_and_destruction_0ii+0x72>
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800318c:	4293      	cmp	r3, r2
 800318e:	d10e      	bne.n	80031ae <_Z41__static_initialization_and_destruction_0ii+0x72>
 8003190:	480c      	ldr	r0, [pc, #48]	; (80031c4 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8003192:	f7fe fd17 	bl	8001bc4 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 8003196:	480c      	ldr	r0, [pc, #48]	; (80031c8 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8003198:	f7ff ff8c 	bl	80030b4 <_ZN23ApplicationFontProviderD1Ev>
static LCD24bpp display;
 800319c:	4808      	ldr	r0, [pc, #32]	; (80031c0 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800319e:	f7ff ffab 	bl	80030f8 <_ZN8touchgfx8LCD24bppD1Ev>
static STM32DMA dma;
 80031a2:	4806      	ldr	r0, [pc, #24]	; (80031bc <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80031a4:	f7fe ff3e 	bl	8002024 <_ZN8STM32DMAD1Ev>
static STM32TouchController tc;
 80031a8:	4803      	ldr	r0, [pc, #12]	; (80031b8 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80031aa:	f7fe f9c7 	bl	800153c <_ZN20STM32TouchControllerD1Ev>
}
 80031ae:	bf00      	nop
 80031b0:	3708      	adds	r7, #8
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	240005fc 	.word	0x240005fc
 80031bc:	24000600 	.word	0x24000600
 80031c0:	240013a0 	.word	0x240013a0
 80031c4:	24001408 	.word	0x24001408
 80031c8:	24000008 	.word	0x24000008

080031cc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	4a05      	ldr	r2, [pc, #20]	; (80031ec <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	601a      	str	r2, [r3, #0]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4618      	mov	r0, r3
 80031de:	f7ff fb37 	bl	8002850 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4618      	mov	r0, r3
 80031e6:	3708      	adds	r7, #8
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	08022be4 	.word	0x08022be4

080031f0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b082      	sub	sp, #8
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f7ff ffe7 	bl	80031cc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 80031fe:	2110      	movs	r1, #16
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f01d fdb2 	bl	8020d6a <_ZdlPvj>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4618      	mov	r0, r3
 800320a:	3708      	adds	r7, #8
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}

08003210 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8003218:	2301      	movs	r3, #1
    }
 800321a:	4618      	mov	r0, r3
 800321c:	370c      	adds	r7, #12
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr

08003226 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 8003226:	b480      	push	{r7}
 8003228:	b083      	sub	sp, #12
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 800322e:	230c      	movs	r3, #12
    }
 8003230:	4618      	mov	r0, r3
 8003232:	370c      	adds	r7, #12
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr

0800323c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	460b      	mov	r3, r1
 8003246:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8003248:	887a      	ldrh	r2, [r7, #2]
 800324a:	4613      	mov	r3, r2
 800324c:	005b      	lsls	r3, r3, #1
 800324e:	4413      	add	r3, r2
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	3308      	adds	r3, #8
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	4413      	add	r3, r2
    }
 8003258:	4618      	mov	r0, r3
 800325a:	370c      	adds	r7, #12
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr

08003264 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 8003264:	b480      	push	{r7}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	460b      	mov	r3, r1
 800326e:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8003270:	887a      	ldrh	r2, [r7, #2]
 8003272:	4613      	mov	r3, r2
 8003274:	005b      	lsls	r3, r3, #1
 8003276:	4413      	add	r3, r2
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	3308      	adds	r3, #8
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	4413      	add	r3, r2
    }
 8003280:	4618      	mov	r0, r3
 8003282:	370c      	adds	r7, #12
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr

0800328c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8003294:	2301      	movs	r3, #1
    }
 8003296:	4618      	mov	r0, r3
 8003298:	370c      	adds	r7, #12
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr

080032a2 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 80032a2:	b480      	push	{r7}
 80032a4:	b083      	sub	sp, #12
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 80032aa:	23e0      	movs	r3, #224	; 0xe0
    }
 80032ac:	4618      	mov	r0, r3
 80032ae:	370c      	adds	r7, #12
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr

080032b8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	460b      	mov	r3, r1
 80032c2:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80032c4:	887a      	ldrh	r2, [r7, #2]
 80032c6:	4613      	mov	r3, r2
 80032c8:	00db      	lsls	r3, r3, #3
 80032ca:	1a9b      	subs	r3, r3, r2
 80032cc:	015b      	lsls	r3, r3, #5
 80032ce:	3308      	adds	r3, #8
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	4413      	add	r3, r2
    }
 80032d4:	4618      	mov	r0, r3
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr

080032e0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	460b      	mov	r3, r1
 80032ea:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80032ec:	887a      	ldrh	r2, [r7, #2]
 80032ee:	4613      	mov	r3, r2
 80032f0:	00db      	lsls	r3, r3, #3
 80032f2:	1a9b      	subs	r3, r3, r2
 80032f4:	015b      	lsls	r3, r3, #5
 80032f6:	3308      	adds	r3, #8
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	4413      	add	r3, r2
    }
 80032fc:	4618      	mov	r0, r3
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr

08003308 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8003310:	2301      	movs	r3, #1
    }
 8003312:	4618      	mov	r0, r3
 8003314:	370c      	adds	r7, #12
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr

0800331e <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 800331e:	b480      	push	{r7}
 8003320:	b083      	sub	sp, #12
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8003326:	2310      	movs	r3, #16
    }
 8003328:	4618      	mov	r0, r3
 800332a:	370c      	adds	r7, #12
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr

08003334 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	460b      	mov	r3, r1
 800333e:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8003340:	887b      	ldrh	r3, [r7, #2]
 8003342:	011b      	lsls	r3, r3, #4
 8003344:	3308      	adds	r3, #8
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	4413      	add	r3, r2
    }
 800334a:	4618      	mov	r0, r3
 800334c:	370c      	adds	r7, #12
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr

08003356 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8003356:	b480      	push	{r7}
 8003358:	b083      	sub	sp, #12
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
 800335e:	460b      	mov	r3, r1
 8003360:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8003362:	887b      	ldrh	r3, [r7, #2]
 8003364:	011b      	lsls	r3, r3, #4
 8003366:	3308      	adds	r3, #8
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	4413      	add	r3, r2
    }
 800336c:	4618      	mov	r0, r3
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun)();
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	68d2      	ldr	r2, [r2, #12]
 8003388:	1052      	asrs	r2, r2, #1
 800338a:	1899      	adds	r1, r3, r2
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	f003 0301 	and.w	r3, r3, #1
 8003394:	2b00      	cmp	r3, #0
 8003396:	d102      	bne.n	800339e <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	e00a      	b.n	80033b4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	68d2      	ldr	r2, [r2, #12]
 80033a6:	1052      	asrs	r2, r2, #1
 80033a8:	4413      	add	r3, r2
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	6892      	ldr	r2, [r2, #8]
 80033b0:	4413      	add	r3, r2
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4608      	mov	r0, r1
 80033b6:	4798      	blx	r3
    }
 80033b8:	bf00      	nop
 80033ba:	3708      	adds	r7, #8
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}

080033c0 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun != 0);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d010      	beq.n	80033f2 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d107      	bne.n	80033e8 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	f003 0301 	and.w	r3, r3, #1
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d101      	bne.n	80033e8 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 80033e4:	2301      	movs	r3, #1
 80033e6:	e000      	b.n	80033ea <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 80033e8:	2300      	movs	r3, #0
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d001      	beq.n	80033f2 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 80033ee:	2301      	movs	r3, #1
 80033f0:	e000      	b.n	80033f4 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 80033f2:	2300      	movs	r3, #0
    }
 80033f4:	4618      	mov	r0, r3
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr

08003400 <_GLOBAL__sub_I_touchgfx_init>:
 8003400:	b580      	push	{r7, lr}
 8003402:	af00      	add	r7, sp, #0
 8003404:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003408:	2001      	movs	r0, #1
 800340a:	f7ff fe97 	bl	800313c <_Z41__static_initialization_and_destruction_0ii>
 800340e:	bd80      	pop	{r7, pc}

08003410 <_GLOBAL__sub_D_touchgfx_init>:
 8003410:	b580      	push	{r7, lr}
 8003412:	af00      	add	r7, sp, #0
 8003414:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003418:	2000      	movs	r0, #0
 800341a:	f7ff fe8f 	bl	800313c <_Z41__static_initialization_and_destruction_0ii>
 800341e:	bd80      	pop	{r7, pc}

08003420 <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	3320      	adds	r3, #32
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	4798      	blx	r3
    }
 8003434:	bf00      	nop
 8003436:	3708      	adds	r7, #8
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}

0800343c <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 800344a:	3301      	adds	r3, #1
 800344c:	b2da      	uxtb	r2, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
    }
 8003454:	bf00      	nop
 8003456:	370c      	adds	r7, #12
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr

08003460 <__NVIC_EnableIRQ>:
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	4603      	mov	r3, r0
 8003468:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800346a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800346e:	2b00      	cmp	r3, #0
 8003470:	db0b      	blt.n	800348a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003472:	88fb      	ldrh	r3, [r7, #6]
 8003474:	f003 021f 	and.w	r2, r3, #31
 8003478:	4907      	ldr	r1, [pc, #28]	; (8003498 <__NVIC_EnableIRQ+0x38>)
 800347a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800347e:	095b      	lsrs	r3, r3, #5
 8003480:	2001      	movs	r0, #1
 8003482:	fa00 f202 	lsl.w	r2, r0, r2
 8003486:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800348a:	bf00      	nop
 800348c:	370c      	adds	r7, #12
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr
 8003496:	bf00      	nop
 8003498:	e000e100 	.word	0xe000e100

0800349c <__NVIC_DisableIRQ>:
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	4603      	mov	r3, r0
 80034a4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80034a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	db12      	blt.n	80034d4 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034ae:	88fb      	ldrh	r3, [r7, #6]
 80034b0:	f003 021f 	and.w	r2, r3, #31
 80034b4:	490a      	ldr	r1, [pc, #40]	; (80034e0 <__NVIC_DisableIRQ+0x44>)
 80034b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034ba:	095b      	lsrs	r3, r3, #5
 80034bc:	2001      	movs	r0, #1
 80034be:	fa00 f202 	lsl.w	r2, r0, r2
 80034c2:	3320      	adds	r3, #32
 80034c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80034c8:	f3bf 8f4f 	dsb	sy
}
 80034cc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80034ce:	f3bf 8f6f 	isb	sy
}
 80034d2:	bf00      	nop
}
 80034d4:	bf00      	nop
 80034d6:	370c      	adds	r7, #12
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr
 80034e0:	e000e100 	.word	0xe000e100

080034e4 <__NVIC_SetPriority>:
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	4603      	mov	r3, r0
 80034ec:	6039      	str	r1, [r7, #0]
 80034ee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80034f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	db0a      	blt.n	800350e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	b2da      	uxtb	r2, r3
 80034fc:	490c      	ldr	r1, [pc, #48]	; (8003530 <__NVIC_SetPriority+0x4c>)
 80034fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003502:	0112      	lsls	r2, r2, #4
 8003504:	b2d2      	uxtb	r2, r2
 8003506:	440b      	add	r3, r1
 8003508:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800350c:	e00a      	b.n	8003524 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	b2da      	uxtb	r2, r3
 8003512:	4908      	ldr	r1, [pc, #32]	; (8003534 <__NVIC_SetPriority+0x50>)
 8003514:	88fb      	ldrh	r3, [r7, #6]
 8003516:	f003 030f 	and.w	r3, r3, #15
 800351a:	3b04      	subs	r3, #4
 800351c:	0112      	lsls	r2, r2, #4
 800351e:	b2d2      	uxtb	r2, r2
 8003520:	440b      	add	r3, r1
 8003522:	761a      	strb	r2, [r3, #24]
}
 8003524:	bf00      	nop
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr
 8003530:	e000e100 	.word	0xe000e100
 8003534:	e000ed00 	.word	0xe000ed00

08003538 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
static uint16_t lcd_int_active_line;
static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 8003538:	b5b0      	push	{r4, r5, r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	4618      	mov	r0, r3
 8003544:	f00e fcff 	bl	8011f46 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8003548:	687d      	ldr	r5, [r7, #4]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	3364      	adds	r3, #100	; 0x64
 8003550:	681c      	ldr	r4, [r3, #0]
 8003552:	f011 fc73 	bl	8014e3c <_ZN8touchgfx11Application11getInstanceEv>
 8003556:	4603      	mov	r3, r0
 8003558:	4619      	mov	r1, r3
 800355a:	4628      	mov	r0, r5
 800355c:	47a0      	blx	r4
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	3388      	adds	r3, #136	; 0x88
 8003566:	681c      	ldr	r4, [r3, #0]
 8003568:	4a03      	ldr	r2, [pc, #12]	; (8003578 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x40>)
 800356a:	2300      	movs	r3, #0
 800356c:	4903      	ldr	r1, [pc, #12]	; (800357c <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 800356e:	47a0      	blx	r4
}
 8003570:	bf00      	nop
 8003572:	3708      	adds	r7, #8
 8003574:	46bd      	mov	sp, r7
 8003576:	bdb0      	pop	{r4, r5, r7, pc}
 8003578:	2409fa00 	.word	0x2409fa00
 800357c:	24040000 	.word	0x24040000

08003580 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 8003588:	2109      	movs	r1, #9
 800358a:	205a      	movs	r0, #90	; 0x5a
 800358c:	f7ff ffaa 	bl	80034e4 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 8003590:	2109      	movs	r1, #9
 8003592:	2058      	movs	r0, #88	; 0x58
 8003594:	f7ff ffa6 	bl	80034e4 <__NVIC_SetPriority>
}
 8003598:	bf00      	nop
 800359a:	3708      	adds	r7, #8
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}

080035a0 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b082      	sub	sp, #8
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 80035a8:	205a      	movs	r0, #90	; 0x5a
 80035aa:	f7ff ff59 	bl	8003460 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 80035ae:	2058      	movs	r0, #88	; 0x58
 80035b0:	f7ff ff56 	bl	8003460 <__NVIC_EnableIRQ>
}
 80035b4:	bf00      	nop
 80035b6:	3708      	adds	r7, #8
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}

080035bc <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 80035c4:	205a      	movs	r0, #90	; 0x5a
 80035c6:	f7ff ff69 	bl	800349c <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 80035ca:	2058      	movs	r0, #88	; 0x58
 80035cc:	f7ff ff66 	bl	800349c <__NVIC_DisableIRQ>
}
 80035d0:	bf00      	nop
 80035d2:	3708      	adds	r7, #8
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}

080035d8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 80035e0:	4b11      	ldr	r3, [pc, #68]	; (8003628 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	3b01      	subs	r3, #1
 80035ee:	b29a      	uxth	r2, r3
 80035f0:	4b0e      	ldr	r3, [pc, #56]	; (800362c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 80035f2:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 80035f4:	4b0c      	ldr	r3, [pc, #48]	; (8003628 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80035f6:	691b      	ldr	r3, [r3, #16]
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80035fe:	b29b      	uxth	r3, r3
 8003600:	3b01      	subs	r3, #1
 8003602:	b29a      	uxth	r2, r3
 8003604:	4b0a      	ldr	r3, [pc, #40]	; (8003630 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 8003606:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8003608:	4b08      	ldr	r3, [pc, #32]	; (800362c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 800360a:	881a      	ldrh	r2, [r3, #0]
 800360c:	4b06      	ldr	r3, [pc, #24]	; (8003628 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800360e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8003610:	4b05      	ldr	r3, [pc, #20]	; (8003628 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8003612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003614:	4a04      	ldr	r2, [pc, #16]	; (8003628 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8003616:	f043 0301 	orr.w	r3, r3, #1
 800361a:	6353      	str	r3, [r2, #52]	; 0x34
}
 800361c:	bf00      	nop
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr
 8003628:	50001000 	.word	0x50001000
 800362c:	24001484 	.word	0x24001484
 8003630:	24001486 	.word	0x24001486

08003634 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	4618      	mov	r0, r3
 8003640:	f00e fc68 	bl	8011f14 <_ZN8touchgfx3HAL10beginFrameEv>
 8003644:	4603      	mov	r3, r0
}
 8003646:	4618      	mov	r0, r3
 8003648:	3708      	adds	r7, #8
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}

0800364e <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 800364e:	b580      	push	{r7, lr}
 8003650:	b082      	sub	sp, #8
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
    HAL::endFrame();
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4618      	mov	r0, r3
 800365a:	f00e fc67 	bl	8011f2c <_ZN8touchgfx3HAL8endFrameEv>
}
 800365e:	bf00      	nop
 8003660:	3708      	adds	r7, #8
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
	...

08003668 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8003670:	4b03      	ldr	r3, [pc, #12]	; (8003680 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 8003672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8003674:	4618      	mov	r0, r3
 8003676:	370c      	adds	r7, #12
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr
 8003680:	50001084 	.word	0x50001084

08003684 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 800368e:	4a06      	ldr	r2, [pc, #24]	; (80036a8 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8003694:	4b05      	ldr	r3, [pc, #20]	; (80036ac <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 8003696:	2201      	movs	r2, #1
 8003698:	625a      	str	r2, [r3, #36]	; 0x24
}
 800369a:	bf00      	nop
 800369c:	370c      	adds	r7, #12
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr
 80036a6:	bf00      	nop
 80036a8:	50001084 	.word	0x50001084
 80036ac:	50001000 	.word	0x50001000

080036b0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b082      	sub	sp, #8
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6839      	ldr	r1, [r7, #0]
 80036be:	4618      	mov	r0, r3
 80036c0:	f00e fbf2 	bl	8011ea8 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 80036c4:	bf00      	nop
 80036c6:	3708      	adds	r7, #8
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	60b9      	str	r1, [r7, #8]
 80036d6:	607a      	str	r2, [r7, #4]
 80036d8:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 80036da:	68f8      	ldr	r0, [r7, #12]
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	68b9      	ldr	r1, [r7, #8]
 80036e2:	f00e fd52 	bl	801218a <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 80036e6:	4603      	mov	r3, r0
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3710      	adds	r7, #16
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:

void TouchGFXGeneratedHAL::InvalidateCache()
{
 80036f0:	b480      	push	{r7}
 80036f2:	b087      	sub	sp, #28
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80036f8:	4b25      	ldr	r3, [pc, #148]	; (8003790 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa0>)
 80036fa:	695b      	ldr	r3, [r3, #20]
 80036fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003700:	2b00      	cmp	r3, #0
 8003702:	bf14      	ite	ne
 8003704:	2301      	movne	r3, #1
 8003706:	2300      	moveq	r3, #0
 8003708:	b2db      	uxtb	r3, r3
 800370a:	2b00      	cmp	r3, #0
 800370c:	d03a      	beq.n	8003784 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x94>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800370e:	4b20      	ldr	r3, [pc, #128]	; (8003790 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa0>)
 8003710:	2200      	movs	r2, #0
 8003712:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8003716:	f3bf 8f4f 	dsb	sy
}
 800371a:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 800371c:	4b1c      	ldr	r3, [pc, #112]	; (8003790 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa0>)
 800371e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003722:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	0b5b      	lsrs	r3, r3, #13
 8003728:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800372c:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	08db      	lsrs	r3, r3, #3
 8003732:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003736:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	015a      	lsls	r2, r3, #5
 800373c:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8003740:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8003742:	68fa      	ldr	r2, [r7, #12]
 8003744:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003746:	4912      	ldr	r1, [pc, #72]	; (8003790 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa0>)
 8003748:	4313      	orrs	r3, r2
 800374a:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	1e5a      	subs	r2, r3, #1
 8003752:	60fa      	str	r2, [r7, #12]
 8003754:	2b00      	cmp	r3, #0
 8003756:	bf14      	ite	ne
 8003758:	2301      	movne	r3, #1
 800375a:	2300      	moveq	r3, #0
 800375c:	b2db      	uxtb	r3, r3
 800375e:	2b00      	cmp	r3, #0
 8003760:	d1ea      	bne.n	8003738 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x48>
    } while(sets-- != 0U);
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	1e5a      	subs	r2, r3, #1
 8003766:	613a      	str	r2, [r7, #16]
 8003768:	2b00      	cmp	r3, #0
 800376a:	bf14      	ite	ne
 800376c:	2301      	movne	r3, #1
 800376e:	2300      	moveq	r3, #0
 8003770:	b2db      	uxtb	r3, r3
 8003772:	2b00      	cmp	r3, #0
 8003774:	d1db      	bne.n	800372e <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x3e>
  __ASM volatile ("dsb 0xF":::"memory");
 8003776:	f3bf 8f4f 	dsb	sy
}
 800377a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800377c:	f3bf 8f6f 	isb	sy
}
 8003780:	bf00      	nop
}
 8003782:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 8003784:	bf00      	nop
 8003786:	371c      	adds	r7, #28
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr
 8003790:	e000ed00 	.word	0xe000ed00

08003794 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:

void TouchGFXGeneratedHAL::FlushCache()
{
 8003794:	b480      	push	{r7}
 8003796:	b087      	sub	sp, #28
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 800379c:	4b25      	ldr	r3, [pc, #148]	; (8003834 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa0>)
 800379e:	695b      	ldr	r3, [r3, #20]
 80037a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	bf14      	ite	ne
 80037a8:	2301      	movne	r3, #1
 80037aa:	2300      	moveq	r3, #0
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d03a      	beq.n	8003828 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x94>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80037b2:	4b20      	ldr	r3, [pc, #128]	; (8003834 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa0>)
 80037b4:	2200      	movs	r2, #0
 80037b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80037ba:	f3bf 8f4f 	dsb	sy
}
 80037be:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 80037c0:	4b1c      	ldr	r3, [pc, #112]	; (8003834 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa0>)
 80037c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037c6:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	0b5b      	lsrs	r3, r3, #13
 80037cc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80037d0:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	08db      	lsrs	r3, r3, #3
 80037d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037da:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	015a      	lsls	r2, r3, #5
 80037e0:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80037e4:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 80037e6:	68fa      	ldr	r2, [r7, #12]
 80037e8:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80037ea:	4912      	ldr	r1, [pc, #72]	; (8003834 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa0>)
 80037ec:	4313      	orrs	r3, r2
 80037ee:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	1e5a      	subs	r2, r3, #1
 80037f6:	60fa      	str	r2, [r7, #12]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	bf14      	ite	ne
 80037fc:	2301      	movne	r3, #1
 80037fe:	2300      	moveq	r3, #0
 8003800:	b2db      	uxtb	r3, r3
 8003802:	2b00      	cmp	r3, #0
 8003804:	d1ea      	bne.n	80037dc <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x48>
    } while(sets-- != 0U);
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	1e5a      	subs	r2, r3, #1
 800380a:	613a      	str	r2, [r7, #16]
 800380c:	2b00      	cmp	r3, #0
 800380e:	bf14      	ite	ne
 8003810:	2301      	movne	r3, #1
 8003812:	2300      	moveq	r3, #0
 8003814:	b2db      	uxtb	r3, r3
 8003816:	2b00      	cmp	r3, #0
 8003818:	d1db      	bne.n	80037d2 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x3e>
  __ASM volatile ("dsb 0xF":::"memory");
 800381a:	f3bf 8f4f 	dsb	sy
}
 800381e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003820:	f3bf 8f6f 	isb	sy
}
 8003824:	bf00      	nop
}
 8003826:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 8003828:	bf00      	nop
 800382a:	371c      	adds	r7, #28
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr
 8003834:	e000ed00 	.word	0xe000ed00

08003838 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
        if (!HAL::getInstance())
 8003840:	f7fe fb4e 	bl	8001ee0 <_ZN8touchgfx3HAL11getInstanceEv>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	bf0c      	ite	eq
 800384a:	2301      	moveq	r3, #1
 800384c:	2300      	movne	r3, #0
 800384e:	b2db      	uxtb	r3, r3
 8003850:	2b00      	cmp	r3, #0
 8003852:	d132      	bne.n	80038ba <HAL_LTDC_LineEventCallback+0x82>
        {
            return;
        }

        if (LTDC->LIPCR == lcd_int_active_line)
 8003854:	4b1b      	ldr	r3, [pc, #108]	; (80038c4 <HAL_LTDC_LineEventCallback+0x8c>)
 8003856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003858:	4a1b      	ldr	r2, [pc, #108]	; (80038c8 <HAL_LTDC_LineEventCallback+0x90>)
 800385a:	8812      	ldrh	r2, [r2, #0]
 800385c:	4293      	cmp	r3, r2
 800385e:	bf0c      	ite	eq
 8003860:	2301      	moveq	r3, #1
 8003862:	2300      	movne	r3, #0
 8003864:	b2db      	uxtb	r3, r3
 8003866:	2b00      	cmp	r3, #0
 8003868:	d017      	beq.n	800389a <HAL_LTDC_LineEventCallback+0x62>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 800386a:	4b18      	ldr	r3, [pc, #96]	; (80038cc <HAL_LTDC_LineEventCallback+0x94>)
 800386c:	881b      	ldrh	r3, [r3, #0]
 800386e:	4619      	mov	r1, r3
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f006 fc89 	bl	800a188 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 8003876:	f7fe fb33 	bl	8001ee0 <_ZN8touchgfx3HAL11getInstanceEv>
 800387a:	4603      	mov	r3, r0
 800387c:	4618      	mov	r0, r3
 800387e:	f7ff fddd 	bl	800343c <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 8003882:	f7fe fa27 	bl	8001cd4 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8003886:	f7fe fb2b 	bl	8001ee0 <_ZN8touchgfx3HAL11getInstanceEv>
 800388a:	4603      	mov	r3, r0
 800388c:	4618      	mov	r0, r3
 800388e:	f00f f8a7 	bl	80129e0 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 8003892:	2000      	movs	r0, #0
 8003894:	f7fd fe7c 	bl	8001590 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8003898:	e010      	b.n	80038bc <HAL_LTDC_LineEventCallback+0x84>
        }
        else
        {
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 800389a:	4b0b      	ldr	r3, [pc, #44]	; (80038c8 <HAL_LTDC_LineEventCallback+0x90>)
 800389c:	881b      	ldrh	r3, [r3, #0]
 800389e:	4619      	mov	r1, r3
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f006 fc71 	bl	800a188 <HAL_LTDC_ProgramLineEvent>

            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
 80038a6:	f7fe fb1b 	bl	8001ee0 <_ZN8touchgfx3HAL11getInstanceEv>
 80038aa:	4603      	mov	r3, r0
 80038ac:	4618      	mov	r0, r3
 80038ae:	f7ff fdb7 	bl	8003420 <_ZN8touchgfx3HAL17frontPorchEnteredEv>
            GPIO::clear(GPIO::VSYNC_FREQ);
 80038b2:	2000      	movs	r0, #0
 80038b4:	f7fd fea6 	bl	8001604 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 80038b8:	e000      	b.n	80038bc <HAL_LTDC_LineEventCallback+0x84>
            return;
 80038ba:	bf00      	nop
        }
    }
 80038bc:	3708      	adds	r7, #8
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	50001000 	.word	0x50001000
 80038c8:	24001484 	.word	0x24001484
 80038cc:	24001486 	.word	0x24001486

080038d0 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b082      	sub	sp, #8
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	460b      	mov	r3, r1
 80038da:	807b      	strh	r3, [r7, #2]
    switch (typography)
 80038dc:	887b      	ldrh	r3, [r7, #2]
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d010      	beq.n	8003904 <_ZN23ApplicationFontProvider7getFontEt+0x34>
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	dc13      	bgt.n	800390e <_ZN23ApplicationFontProvider7getFontEt+0x3e>
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d002      	beq.n	80038f0 <_ZN23ApplicationFontProvider7getFontEt+0x20>
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d005      	beq.n	80038fa <_ZN23ApplicationFontProvider7getFontEt+0x2a>
 80038ee:	e00e      	b.n	800390e <_ZN23ApplicationFontProvider7getFontEt+0x3e>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 80038f0:	f001 fd0a 	bl	8005308 <_ZN17TypedTextDatabase8getFontsEv>
 80038f4:	4603      	mov	r3, r0
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	e00a      	b.n	8003910 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 80038fa:	f001 fd05 	bl	8005308 <_ZN17TypedTextDatabase8getFontsEv>
 80038fe:	4603      	mov	r3, r0
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	e005      	b.n	8003910 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8003904:	f001 fd00 	bl	8005308 <_ZN17TypedTextDatabase8getFontsEv>
 8003908:	4603      	mov	r3, r0
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	e000      	b.n	8003910 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    default:
        return 0;
 800390e:	2300      	movs	r3, #0
    }
}
 8003910:	4618      	mov	r0, r3
 8003912:	3708      	adds	r7, #8
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}

08003918 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 8003918:	b480      	push	{r7}
 800391a:	af00      	add	r7, sp, #0
    return bitmap_database;
 800391c:	4b02      	ldr	r3, [pc, #8]	; (8003928 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 800391e:	4618      	mov	r0, r3
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr
 8003928:	08022d98 	.word	0x08022d98

0800392c <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 800392c:	b480      	push	{r7}
 800392e:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 8003930:	2301      	movs	r3, #1
}
 8003932:	4618      	mov	r0, r3
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr

0800393c <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
    {
 8003944:	4a04      	ldr	r2, [pc, #16]	; (8003958 <_ZN8touchgfx4FontD1Ev+0x1c>)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	601a      	str	r2, [r3, #0]
    }
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4618      	mov	r0, r3
 800394e:	370c      	adds	r7, #12
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr
 8003958:	08022f3c 	.word	0x08022f3c

0800395c <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
    }
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f7ff ffe9 	bl	800393c <_ZN8touchgfx4FontD1Ev>
 800396a:	2114      	movs	r1, #20
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f01d f9fc 	bl	8020d6a <_ZdlPvj>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4618      	mov	r0, r3
 8003976:	3708      	adds	r7, #8
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800397c:	b590      	push	{r4, r7, lr}
 800397e:	b087      	sub	sp, #28
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	460b      	mov	r3, r1
 8003986:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 8003988:	887b      	ldrh	r3, [r7, #2]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d101      	bne.n	8003992 <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 800398e:	2300      	movs	r3, #0
 8003990:	e010      	b.n	80039b4 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 8003992:	2300      	movs	r3, #0
 8003994:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 8003996:	2300      	movs	r3, #0
 8003998:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	3308      	adds	r3, #8
 80039a0:	681c      	ldr	r4, [r3, #0]
 80039a2:	f107 030f 	add.w	r3, r7, #15
 80039a6:	f107 0210 	add.w	r2, r7, #16
 80039aa:	8879      	ldrh	r1, [r7, #2]
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	47a0      	blx	r4
 80039b0:	6178      	str	r0, [r7, #20]
        return glyph;
 80039b2:	697b      	ldr	r3, [r7, #20]
    }
 80039b4:	4618      	mov	r0, r3
 80039b6:	371c      	adds	r7, #28
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd90      	pop	{r4, r7, pc}

080039bc <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	89db      	ldrh	r3, [r3, #14]
    }
 80039c8:	4618      	mov	r0, r3
 80039ca:	370c      	adds	r7, #12
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	8a1b      	ldrh	r3, [r3, #16]
    }
 80039e0:	4618      	mov	r0, r3
 80039e2:	370c      	adds	r7, #12
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr

080039ec <_ZNK8touchgfx4Font11getBaselineEv>:
     * @return The baseline position.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
    {
        return baselineHeight;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	88db      	ldrh	r3, [r3, #6]
    }
 80039f8:	4618      	mov	r0, r3
 80039fa:	370c      	adds	r7, #12
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <_ZNK8touchgfx4Font9getHeightEv>:
     * Returns the height of a font. The font may exceed the top by getPixelsAboveTop() or the
     * bottom by getPixelsBelowBottom.
     *
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	889b      	ldrh	r3, [r3, #4]
    }
 8003a10:	4618      	mov	r0, r3
 8003a12:	370c      	adds	r7, #12
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr

08003a1c <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	7a9b      	ldrb	r3, [r3, #10]
 8003a28:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8003a2c:	b2db      	uxtb	r3, r3
    }
 8003a2e:	4618      	mov	r0, r3
 8003a30:	370c      	adds	r7, #12
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr

08003a3a <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 8003a3a:	b480      	push	{r7}
 8003a3c:	b083      	sub	sp, #12
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	7a9b      	ldrb	r3, [r3, #10]
 8003a46:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003a4a:	b2db      	uxtb	r3, r3
    }
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b082      	sub	sp, #8
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	4a05      	ldr	r2, [pc, #20]	; (8003a78 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	601a      	str	r2, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f7ff ff67 	bl	800393c <_ZN8touchgfx4FontD1Ev>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4618      	mov	r0, r3
 8003a72:	3708      	adds	r7, #8
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	080234d8 	.word	0x080234d8

08003a7c <_ZN8touchgfx9ConstFontD0Ev>:
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b082      	sub	sp, #8
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f7ff ffe7 	bl	8003a58 <_ZN8touchgfx9ConstFontD1Ev>
 8003a8a:	211c      	movs	r1, #28
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f01d f96c 	bl	8020d6a <_ZdlPvj>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4618      	mov	r0, r3
 8003a96:	3708      	adds	r7, #8
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <_ZN8touchgfx13GeneratedFontD1Ev>:

#include <touchgfx/ConstFont.hpp>

namespace touchgfx
{
class GeneratedFont : public ConstFont
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b082      	sub	sp, #8
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	4a05      	ldr	r2, [pc, #20]	; (8003abc <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	601a      	str	r2, [r3, #0]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4618      	mov	r0, r3
 8003aae:	f7ff ffd3 	bl	8003a58 <_ZN8touchgfx9ConstFontD1Ev>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3708      	adds	r7, #8
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	08022e0c 	.word	0x08022e0c

08003ac0 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b082      	sub	sp, #8
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f7ff ffe7 	bl	8003a9c <_ZN8touchgfx13GeneratedFontD1Ev>
 8003ace:	212c      	movs	r1, #44	; 0x2c
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f01d f94a 	bl	8020d6a <_ZdlPvj>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3708      	adds	r7, #8
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}

08003ae0 <_ZN8touchgfx9TypedTextD1Ev>:
    virtual ~TypedText()
 8003ae0:	b480      	push	{r7}
 8003ae2:	b083      	sub	sp, #12
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
    {
 8003ae8:	4a04      	ldr	r2, [pc, #16]	; (8003afc <_ZN8touchgfx9TypedTextD1Ev+0x1c>)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	601a      	str	r2, [r3, #0]
    }
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4618      	mov	r0, r3
 8003af2:	370c      	adds	r7, #12
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr
 8003afc:	08022db4 	.word	0x08022db4

08003b00 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b082      	sub	sp, #8
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
    }
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f7ff ffe9 	bl	8003ae0 <_ZN8touchgfx9TypedTextD1Ev>
 8003b0e:	2108      	movs	r1, #8
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f01d f92a 	bl	8020d6a <_ZdlPvj>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3708      	adds	r7, #8
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	6039      	str	r1, [r7, #0]
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	370c      	adds	r7, #12
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
        timerWidgets.add(w);
    }

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b082      	sub	sp, #8
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
    {
        timerWidgets.clear();
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	3304      	adds	r3, #4
 8003b44:	4618      	mov	r0, r3
 8003b46:	f011 f99e 	bl	8014e86 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    }
 8003b4a:	bf00      	nop
 8003b4c:	3708      	adds	r7, #8
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
	...

08003b54 <_ZN8touchgfx3HAL3lcdEv>:
    static LCD& lcd()
 8003b54:	b480      	push	{r7}
 8003b56:	af00      	add	r7, sp, #0
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8003b58:	4b0b      	ldr	r3, [pc, #44]	; (8003b88 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d008      	beq.n	8003b76 <_ZN8touchgfx3HAL3lcdEv+0x22>
 8003b64:	4b08      	ldr	r3, [pc, #32]	; (8003b88 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d003      	beq.n	8003b76 <_ZN8touchgfx3HAL3lcdEv+0x22>
            return *instance->auxiliaryLCD;
 8003b6e:	4b06      	ldr	r3, [pc, #24]	; (8003b88 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b74:	e002      	b.n	8003b7c <_ZN8touchgfx3HAL3lcdEv+0x28>
        return instance->lcdRef;
 8003b76:	4b04      	ldr	r3, [pc, #16]	; (8003b88 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	689b      	ldr	r3, [r3, #8]
    }
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr
 8003b86:	bf00      	nop
 8003b88:	240069a4 	.word	0x240069a4

08003b8c <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 8003b94:	4a07      	ldr	r2, [pc, #28]	; (8003bb4 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	601a      	str	r2, [r3, #0]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	605a      	str	r2, [r3, #4]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	721a      	strb	r2, [r3, #8]
    {
    }
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4618      	mov	r0, r3
 8003baa:	370c      	adds	r7, #12
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr
 8003bb4:	08022de8 	.word	0x08022de8

08003bb8 <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
    {
 8003bc0:	4a04      	ldr	r2, [pc, #16]	; (8003bd4 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	601a      	str	r2, [r3, #0]
    }
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4618      	mov	r0, r3
 8003bca:	370c      	adds	r7, #12
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr
 8003bd4:	08022de8 	.word	0x08022de8

08003bd8 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
    }
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f7ff ffe9 	bl	8003bb8 <_ZN8touchgfx10TransitionD1Ev>
 8003be6:	210c      	movs	r1, #12
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f01d f8be 	bl	8020d6a <_ZdlPvj>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3708      	adds	r7, #8
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 8003bf8:	b480      	push	{r7}
 8003bfa:	b083      	sub	sp, #12
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
    {
    }
 8003c00:	bf00      	nop
 8003c02:	370c      	adds	r7, #12
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr

08003c0c <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
    {
    }
 8003c14:	bf00      	nop
 8003c16:	370c      	adds	r7, #12
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr

08003c20 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
    {
    }
 8003c28:	bf00      	nop
 8003c2a:	370c      	adds	r7, #12
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b082      	sub	sp, #8
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->invalidate();
 8003c3c:	f011 f8fe 	bl	8014e3c <_ZN8touchgfx11Application11getInstanceEv>
 8003c40:	4603      	mov	r3, r0
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	323c      	adds	r2, #60	; 0x3c
 8003c46:	6812      	ldr	r2, [r2, #0]
 8003c48:	4618      	mov	r0, r3
 8003c4a:	4790      	blx	r2
    }
 8003c4c:	bf00      	nop
 8003c4e:	3708      	adds	r7, #8
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	683a      	ldr	r2, [r7, #0]
 8003c62:	605a      	str	r2, [r3, #4]
    }
 8003c64:	bf00      	nop
 8003c66:	370c      	adds	r7, #12
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr

08003c70 <_ZN8touchgfx14MVPApplicationC1Ev>:
    MVPApplication()
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b082      	sub	sp, #8
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
          pendingScreenTransitionCallback(0)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f011 f9a4 	bl	8014fc8 <_ZN8touchgfx11ApplicationC1Ev>
 8003c80:	4a09      	ldr	r2, [pc, #36]	; (8003ca8 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	601a      	str	r2, [r3, #0]
        : currentPresenter(0),
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
          pendingScreenTransitionCallback(0)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
        instance = this;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a04      	ldr	r2, [pc, #16]	; (8003cac <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 8003c9a:	6013      	str	r3, [r2, #0]
    }
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3708      	adds	r7, #8
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	08022bfc 	.word	0x08022bfc
 8003cac:	240069f0 	.word	0x240069f0

08003cb0 <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 8003cb0:	b480      	push	{r7}
 8003cb2:	b083      	sub	sp, #12
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	683a      	ldr	r2, [r7, #0]
 8003cbe:	601a      	str	r2, [r3, #0]
    }
 8003cc0:	bf00      	nop
 8003cc2:	370c      	adds	r7, #12
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr

08003ccc <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
    {
        done = true;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	721a      	strb	r2, [r3, #8]
    }
 8003cda:	bf00      	nop
 8003cdc:	370c      	adds	r7, #12
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr

08003ce6 <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 8003ce6:	b480      	push	{r7}
 8003ce8:	b083      	sub	sp, #12
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	6078      	str	r0, [r7, #4]
 8003cee:	6039      	str	r1, [r7, #0]
    {
        model = m;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	683a      	ldr	r2, [r7, #0]
 8003cf4:	605a      	str	r2, [r3, #4]
    }
 8003cf6:	bf00      	nop
 8003cf8:	370c      	adds	r7, #12
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr
	...

08003d04 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b084      	sub	sp, #16
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	60b9      	str	r1, [r7, #8]
 8003d0e:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	4618      	mov	r0, r3
 8003d14:	f7ff ffac 	bl	8003c70 <_ZN8touchgfx14MVPApplicationC1Ev>
 8003d18:	4a16      	ldr	r2, [pc, #88]	; (8003d74 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x70>)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	601a      	str	r2, [r3, #0]
      transitionCallback(),
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8003d24:	4618      	mov	r0, r3
 8003d26:	f000 f8a5 	bl	8003e74 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
      frontendHeap(heap),
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
      model(m)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	68ba      	ldr	r2, [r7, #8]
 8003d36:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8003d3a:	f7fe f8d1 	bl	8001ee0 <_ZN8touchgfx3HAL11getInstanceEv>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	3208      	adds	r2, #8
 8003d44:	6812      	ldr	r2, [r2, #0]
 8003d46:	2100      	movs	r1, #0
 8003d48:	4618      	mov	r0, r3
 8003d4a:	4790      	blx	r2
    touchgfx::Texts::setLanguage(GB);
 8003d4c:	2000      	movs	r0, #0
 8003d4e:	f001 fa63 	bl	8005218 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 8003d52:	f7ff feff 	bl	8003b54 <_ZN8touchgfx3HAL3lcdEv>
 8003d56:	4603      	mov	r3, r0
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f017 ff26 	bl	801bbaa <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableDecompressorL8_All();
 8003d5e:	f7ff fef9 	bl	8003b54 <_ZN8touchgfx3HAL3lcdEv>
 8003d62:	4603      	mov	r3, r0
 8003d64:	4618      	mov	r0, r3
 8003d66:	f017 ff97 	bl	801bc98 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_AllEv>
}
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3710      	adds	r7, #16
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	08022b90 	.word	0x08022b90

08003d78 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 8003d78:	b480      	push	{r7}
 8003d7a:	b083      	sub	sp, #12
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	6039      	str	r1, [r7, #0]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4618      	mov	r0, r3
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	6039      	str	r1, [r7, #0]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	683a      	ldr	r2, [r7, #0]
 8003d9e:	4611      	mov	r1, r2
 8003da0:	4618      	mov	r0, r3
 8003da2:	f7ff ffe9 	bl	8003d78 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	685a      	ldr	r2, [r3, #4]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	605a      	str	r2, [r3, #4]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	683a      	ldr	r2, [r7, #0]
 8003db2:	3308      	adds	r3, #8
 8003db4:	3208      	adds	r2, #8
 8003db6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003dba:	e883 0003 	stmia.w	r3, {r0, r1}
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3708      	adds	r7, #8
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
 */

// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
 8003dc8:	b590      	push	{r4, r7, lr}
 8003dca:	b089      	sub	sp, #36	; 0x24
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f503 74a2 	add.w	r4, r3, #324	; 0x144
 8003dd6:	4b10      	ldr	r3, [pc, #64]	; (8003e18 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x50>)
 8003dd8:	61bb      	str	r3, [r7, #24]
 8003dda:	2300      	movs	r3, #0
 8003ddc:	61fb      	str	r3, [r7, #28]
 8003dde:	f107 0008 	add.w	r0, r7, #8
 8003de2:	f107 0318 	add.w	r3, r7, #24
 8003de6:	cb0c      	ldmia	r3, {r2, r3}
 8003de8:	6879      	ldr	r1, [r7, #4]
 8003dea:	f000 f85f 	bl	8003eac <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 8003dee:	f107 0308 	add.w	r3, r7, #8
 8003df2:	4619      	mov	r1, r3
 8003df4:	4620      	mov	r0, r4
 8003df6:	f7ff ffcb 	bl	8003d90 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8003dfa:	f107 0308 	add.w	r3, r7, #8
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f7ff f9e4 	bl	80031cc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f503 72a2 	add.w	r2, r3, #324	; 0x144
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
}
 8003e10:	bf00      	nop
 8003e12:	3724      	adds	r7, #36	; 0x24
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd90      	pop	{r4, r7, pc}
 8003e18:	08003e1d 	.word	0x08003e1d

08003e1c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af02      	add	r7, sp, #8
 8003e22:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f503 719e 	add.w	r1, r3, #316	; 0x13c
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003e30:	461a      	mov	r2, r3
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8003e38:	9300      	str	r3, [sp, #0]
 8003e3a:	4b04      	ldr	r3, [pc, #16]	; (8003e4c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x30>)
 8003e3c:	4804      	ldr	r0, [pc, #16]	; (8003e50 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x34>)
 8003e3e:	f000 f867 	bl	8003f10 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8003e42:	bf00      	nop
 8003e44:	3708      	adds	r7, #8
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	240069e4 	.word	0x240069e4
 8003e50:	240069e0 	.word	0x240069e0

08003e54 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	4a04      	ldr	r2, [pc, #16]	; (8003e70 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	601a      	str	r2, [r3, #0]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4618      	mov	r0, r3
 8003e66:	370c      	adds	r7, #12
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr
 8003e70:	08022c50 	.word	0x08022c50

08003e74 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
    Callback()
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b082      	sub	sp, #8
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun(0)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f7ff ffe8 	bl	8003e54 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8003e84:	4a08      	ldr	r2, [pc, #32]	; (8003ea8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	601a      	str	r2, [r3, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	605a      	str	r2, [r3, #4]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2200      	movs	r2, #0
 8003e94:	609a      	str	r2, [r3, #8]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	60da      	str	r2, [r3, #12]
    }
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3708      	adds	r7, #8
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	08022be4 	.word	0x08022be4

08003eac <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
    Callback(dest_type* pObject, void (dest_type::*pmemfun_0)())
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b084      	sub	sp, #16
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	60f8      	str	r0, [r7, #12]
 8003eb4:	60b9      	str	r1, [r7, #8]
 8003eb6:	4639      	mov	r1, r7
 8003eb8:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_0)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f7ff ffc8 	bl	8003e54 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8003ec4:	4a08      	ldr	r2, [pc, #32]	; (8003ee8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	601a      	str	r2, [r3, #0]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	68ba      	ldr	r2, [r7, #8]
 8003ece:	605a      	str	r2, [r3, #4]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	3308      	adds	r3, #8
 8003ed4:	463a      	mov	r2, r7
 8003ed6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003eda:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3710      	adds	r7, #16
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	08022be4 	.word	0x08022be4

08003eec <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b082      	sub	sp, #8
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f7ff fe48 	bl	8003b8c <_ZN8touchgfx10TransitionC1Ev>
 8003efc:	4a03      	ldr	r2, [pc, #12]	; (8003f0c <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	601a      	str	r2, [r3, #0]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4618      	mov	r0, r3
 8003f06:	3708      	adds	r7, #8
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	08022dc4 	.word	0x08022dc4

08003f10 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8003f10:	b590      	push	{r4, r7, lr}
 8003f12:	b08f      	sub	sp, #60	; 0x3c
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	60b9      	str	r1, [r7, #8]
 8003f1a:	607a      	str	r2, [r7, #4]
 8003f1c:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	689a      	ldr	r2, [r3, #8]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	3320      	adds	r3, #32
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4610      	mov	r0, r2
 8003f2e:	4798      	blx	r3
 8003f30:	4603      	mov	r3, r0
 8003f32:	2bdf      	cmp	r3, #223	; 0xdf
 8003f34:	d805      	bhi.n	8003f42 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x32>
 8003f36:	4b7d      	ldr	r3, [pc, #500]	; (800412c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x21c>)
 8003f38:	4a7d      	ldr	r2, [pc, #500]	; (8004130 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 8003f3a:	21a3      	movs	r1, #163	; 0xa3
 8003f3c:	487d      	ldr	r0, [pc, #500]	; (8004134 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8003f3e:	f01c ff43 	bl	8020dc8 <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	685a      	ldr	r2, [r3, #4]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	3320      	adds	r3, #32
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4610      	mov	r0, r2
 8003f52:	4798      	blx	r3
 8003f54:	4603      	mov	r3, r0
 8003f56:	2b0f      	cmp	r3, #15
 8003f58:	d805      	bhi.n	8003f66 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x56>
 8003f5a:	4b77      	ldr	r3, [pc, #476]	; (8004138 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8003f5c:	4a74      	ldr	r2, [pc, #464]	; (8004130 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 8003f5e:	21a4      	movs	r1, #164	; 0xa4
 8003f60:	4874      	ldr	r0, [pc, #464]	; (8004134 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8003f62:	f01c ff31 	bl	8020dc8 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	68da      	ldr	r2, [r3, #12]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	3320      	adds	r3, #32
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4610      	mov	r0, r2
 8003f76:	4798      	blx	r3
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b0b      	cmp	r3, #11
 8003f7c:	d805      	bhi.n	8003f8a <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7a>
 8003f7e:	4b6f      	ldr	r3, [pc, #444]	; (800413c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8003f80:	4a6b      	ldr	r2, [pc, #428]	; (8004130 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 8003f82:	21a5      	movs	r1, #165	; 0xa5
 8003f84:	486b      	ldr	r0, [pc, #428]	; (8004134 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8003f86:	f01c ff1f 	bl	8020dc8 <__assert_func>
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	627b      	str	r3, [r7, #36]	; 0x24
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 8003f96:	f010 ff51 	bl	8014e3c <_ZN8touchgfx11Application11getInstanceEv>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f7ff fdcb 	bl	8003b38 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8003fa2:	6a3b      	ldr	r3, [r7, #32]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d008      	beq.n	8003fbc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xac>
        (*currentTrans)->tearDown();
 8003faa:	6a3b      	ldr	r3, [r7, #32]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	6a3b      	ldr	r3, [r7, #32]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	330c      	adds	r3, #12
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4610      	mov	r0, r2
 8003fba:	4798      	blx	r3
    if (*currentTrans)
 8003fbc:	6a3b      	ldr	r3, [r7, #32]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d007      	beq.n	8003fd4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xc4>
        (*currentTrans)->~Transition();
 8003fc4:	6a3b      	ldr	r3, [r7, #32]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	6a3b      	ldr	r3, [r7, #32]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4610      	mov	r0, r2
 8003fd2:	4798      	blx	r3
    if (*currentScreen)
 8003fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d008      	beq.n	8003fee <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xde>
        (*currentScreen)->tearDownScreen();
 8003fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	3314      	adds	r3, #20
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4610      	mov	r0, r2
 8003fec:	4798      	blx	r3
    if (*currentPresenter)
 8003fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d008      	beq.n	8004008 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xf8>
        (*currentPresenter)->deactivate();
 8003ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	3304      	adds	r3, #4
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4610      	mov	r0, r2
 8004006:	4798      	blx	r3
    if (*currentScreen)
 8004008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d007      	beq.n	8004020 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x110>
        (*currentScreen)->~Screen();
 8004010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4610      	mov	r0, r2
 800401e:	4798      	blx	r3
    if (*currentPresenter)
 8004020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d008      	beq.n	800403a <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12a>
        (*currentPresenter)->~Presenter();
 8004028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	3308      	adds	r3, #8
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4610      	mov	r0, r2
 8004038:	4798      	blx	r3
}
 800403a:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	2100      	movs	r1, #0
 8004042:	4618      	mov	r0, r3
 8004044:	f000 f87c 	bl	8004140 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 8004048:	4603      	mov	r3, r0
 800404a:	4619      	mov	r1, r3
 800404c:	200c      	movs	r0, #12
 800404e:	f7ff fd67 	bl	8003b20 <_ZnwjPv>
 8004052:	4604      	mov	r4, r0
 8004054:	4620      	mov	r0, r4
 8004056:	f7ff ff49 	bl	8003eec <_ZN8touchgfx12NoTransitionC1Ev>
 800405a:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	2100      	movs	r1, #0
 8004062:	4618      	mov	r0, r3
 8004064:	f000 f87f 	bl	8004166 <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 8004068:	4603      	mov	r3, r0
 800406a:	4619      	mov	r1, r3
 800406c:	20e0      	movs	r0, #224	; 0xe0
 800406e:	f7ff fd57 	bl	8003b20 <_ZnwjPv>
 8004072:	4604      	mov	r4, r0
 8004074:	4620      	mov	r0, r4
 8004076:	f001 faab 	bl	80055d0 <_ZN11Screen1ViewC1Ev>
 800407a:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	2100      	movs	r1, #0
 8004082:	4618      	mov	r0, r3
 8004084:	f000 f882 	bl	800418c <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 8004088:	4603      	mov	r3, r0
 800408a:	4619      	mov	r1, r3
 800408c:	2010      	movs	r0, #16
 800408e:	f7ff fd47 	bl	8003b20 <_ZnwjPv>
 8004092:	4604      	mov	r4, r0
 8004094:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004096:	4620      	mov	r0, r4
 8004098:	f001 fa44 	bl	8005524 <_ZN16Screen1PresenterC1ER11Screen1View>
 800409c:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040a2:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040a8:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040ae:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 80040b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d002      	beq.n	80040bc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1ac>
 80040b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040b8:	3304      	adds	r3, #4
 80040ba:	e000      	b.n	80040be <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1ae>
 80040bc:	2300      	movs	r3, #0
 80040be:	4619      	mov	r1, r3
 80040c0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80040c2:	f7ff fdf5 	bl	8003cb0 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 80040c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040c8:	3304      	adds	r3, #4
 80040ca:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80040cc:	4618      	mov	r0, r3
 80040ce:	f7ff fe0a 	bl	8003ce6 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 80040d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80040d6:	4618      	mov	r0, r3
 80040d8:	f000 f86b 	bl	80041b2 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>
 80040dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040de:	61fb      	str	r3, [r7, #28]
 80040e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040e2:	61bb      	str	r3, [r7, #24]
 80040e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040e6:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	330c      	adds	r3, #12
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	69f8      	ldr	r0, [r7, #28]
 80040f2:	4798      	blx	r3
    newPresenter->activate();
 80040f4:	69bb      	ldr	r3, [r7, #24]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	69b8      	ldr	r0, [r7, #24]
 80040fc:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 80040fe:	6979      	ldr	r1, [r7, #20]
 8004100:	69f8      	ldr	r0, [r7, #28]
 8004102:	f012 fb5f 	bl	80167c4 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	3310      	adds	r3, #16
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	6978      	ldr	r0, [r7, #20]
 8004110:	4798      	blx	r3
    newTransition->invalidate();
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	3314      	adds	r3, #20
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	6978      	ldr	r0, [r7, #20]
 800411c:	4798      	blx	r3
}
 800411e:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 8004120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004122:	4618      	mov	r0, r3
 8004124:	373c      	adds	r7, #60	; 0x3c
 8004126:	46bd      	mov	sp, r7
 8004128:	bd90      	pop	{r4, r7, pc}
 800412a:	bf00      	nop
 800412c:	080222ac 	.word	0x080222ac
 8004130:	0802233c 	.word	0x0802233c
 8004134:	08022440 	.word	0x08022440
 8004138:	08022488 	.word	0x08022488
 800413c:	0802252c 	.word	0x0802252c

08004140 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 8004140:	b580      	push	{r7, lr}
 8004142:	b082      	sub	sp, #8
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	460b      	mov	r3, r1
 800414a:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	3324      	adds	r3, #36	; 0x24
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	887a      	ldrh	r2, [r7, #2]
 8004156:	4611      	mov	r1, r2
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	4798      	blx	r3
 800415c:	4603      	mov	r3, r0
    }
 800415e:	4618      	mov	r0, r3
 8004160:	3708      	adds	r7, #8
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}

08004166 <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>:
    T& at(const uint16_t index)
 8004166:	b580      	push	{r7, lr}
 8004168:	b082      	sub	sp, #8
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
 800416e:	460b      	mov	r3, r1
 8004170:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	3324      	adds	r3, #36	; 0x24
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	887a      	ldrh	r2, [r7, #2]
 800417c:	4611      	mov	r1, r2
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	4798      	blx	r3
 8004182:	4603      	mov	r3, r0
    }
 8004184:	4618      	mov	r0, r3
 8004186:	3708      	adds	r7, #8
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}

0800418c <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>:
    T& at(const uint16_t index)
 800418c:	b580      	push	{r7, lr}
 800418e:	b082      	sub	sp, #8
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	460b      	mov	r3, r1
 8004196:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	3324      	adds	r3, #36	; 0x24
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	887a      	ldrh	r2, [r7, #2]
 80041a2:	4611      	mov	r1, r2
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	4798      	blx	r3
 80041a8:	4603      	mov	r3, r0
    }
 80041aa:	4618      	mov	r0, r3
 80041ac:	3708      	adds	r7, #8
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}

080041b2 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This function
     * is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
 80041b2:	b480      	push	{r7}
 80041b4:	b083      	sub	sp, #12
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	6078      	str	r0, [r7, #4]
 80041ba:	6039      	str	r1, [r7, #0]
    {
        presenter = &newPresenter;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	683a      	ldr	r2, [r7, #0]
 80041c0:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 80041c2:	bf00      	nop
 80041c4:	370c      	adds	r7, #12
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr
	...

080041d0 <_ZN8touchgfx12NoTransitionD1Ev>:
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b082      	sub	sp, #8
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	4a05      	ldr	r2, [pc, #20]	; (80041f0 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	601a      	str	r2, [r3, #0]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4618      	mov	r0, r3
 80041e2:	f7ff fce9 	bl	8003bb8 <_ZN8touchgfx10TransitionD1Ev>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4618      	mov	r0, r3
 80041ea:	3708      	adds	r7, #8
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}
 80041f0:	08022dc4 	.word	0x08022dc4

080041f4 <_ZN8touchgfx12NoTransitionD0Ev>:
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b082      	sub	sp, #8
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	f7ff ffe7 	bl	80041d0 <_ZN8touchgfx12NoTransitionD1Ev>
 8004202:	210c      	movs	r1, #12
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f01c fdb0 	bl	8020d6a <_ZdlPvj>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4618      	mov	r0, r3
 800420e:	3708      	adds	r7, #8
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}

08004214 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:

    virtual const uint8_t* getPixelData(const GlyphNode* glyph) const;

    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    }
 8004220:	4618      	mov	r0, r3
 8004222:	370c      	adds	r7, #12
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr

0800422c <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
 800422c:	b480      	push	{r7}
 800422e:	b083      	sub	sp, #12
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    }
 8004238:	4618      	mov	r0, r3
 800423a:	370c      	adds	r7, #12
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr

08004244 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8004244:	b580      	push	{r7, lr}
 8004246:	b08e      	sub	sp, #56	; 0x38
 8004248:	af0a      	add	r7, sp, #40	; 0x28
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	60b9      	str	r1, [r7, #8]
 800424e:	4611      	mov	r1, r2
 8004250:	461a      	mov	r2, r3
 8004252:	460b      	mov	r3, r1
 8004254:	80fb      	strh	r3, [r7, #6]
 8004256:	4613      	mov	r3, r2
 8004258:	80bb      	strh	r3, [r7, #4]
    : ConstFont(glyphs, numGlyphs, height, baseline, pixAboveTop, pixBelowBottom, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 800425a:	68f8      	ldr	r0, [r7, #12]
 800425c:	88b9      	ldrh	r1, [r7, #4]
 800425e:	88fa      	ldrh	r2, [r7, #6]
 8004260:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004264:	9308      	str	r3, [sp, #32]
 8004266:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004268:	9307      	str	r3, [sp, #28]
 800426a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800426e:	9306      	str	r3, [sp, #24]
 8004270:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004274:	9305      	str	r3, [sp, #20]
 8004276:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800427a:	9304      	str	r3, [sp, #16]
 800427c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004280:	9303      	str	r3, [sp, #12]
 8004282:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004286:	9302      	str	r3, [sp, #8]
 8004288:	7f3b      	ldrb	r3, [r7, #28]
 800428a:	9301      	str	r3, [sp, #4]
 800428c:	8b3b      	ldrh	r3, [r7, #24]
 800428e:	9300      	str	r3, [sp, #0]
 8004290:	460b      	mov	r3, r1
 8004292:	68b9      	ldr	r1, [r7, #8]
 8004294:	f011 fef8 	bl	8016088 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 8004298:	4a09      	ldr	r2, [pc, #36]	; (80042c0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x7c>)
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	601a      	str	r2, [r3, #0]
      glyphData(glyphDataInternalFlash),
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80042a2:	61da      	str	r2, [r3, #28]
      kerningData(kerningList),
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80042a8:	621a      	str	r2, [r3, #32]
      gsubTable(gsubData),
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80042ae:	625a      	str	r2, [r3, #36]	; 0x24
      arabicTable(formsTable)
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042b4:	629a      	str	r2, [r3, #40]	; 0x28
{
}
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	4618      	mov	r0, r3
 80042ba:	3710      	adds	r7, #16
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	08022e0c 	.word	0x08022e0c

080042c4 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 80042c4:	b480      	push	{r7}
 80042c6:	b085      	sub	sp, #20
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	69db      	ldr	r3, [r3, #28]
 80042d2:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	889b      	ldrh	r3, [r3, #4]
 80042d8:	0adb      	lsrs	r3, r3, #11
 80042da:	b29b      	uxth	r3, r3
 80042dc:	009b      	lsls	r3, r3, #2
 80042de:	68fa      	ldr	r2, [r7, #12]
 80042e0:	4413      	add	r3, r2
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4413      	add	r3, r2
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3714      	adds	r7, #20
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr

080042f6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 80042f6:	b480      	push	{r7}
 80042f8:	b089      	sub	sp, #36	; 0x24
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	60f8      	str	r0, [r7, #12]
 80042fe:	460b      	mov	r3, r1
 8004300:	607a      	str	r2, [r7, #4]
 8004302:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d003      	beq.n	8004312 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	7b1b      	ldrb	r3, [r3, #12]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d101      	bne.n	8004316 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 8004312:	2300      	movs	r3, #0
 8004314:	e031      	b.n	800437a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x84>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	6a1a      	ldr	r2, [r3, #32]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	7b5b      	ldrb	r3, [r3, #13]
 8004322:	021b      	lsls	r3, r3, #8
 8004324:	b21b      	sxth	r3, r3
 8004326:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800432a:	b219      	sxth	r1, r3
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	7adb      	ldrb	r3, [r3, #11]
 8004330:	b21b      	sxth	r3, r3
 8004332:	430b      	orrs	r3, r1
 8004334:	b21b      	sxth	r3, r3
 8004336:	b29b      	uxth	r3, r3
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	4413      	add	r3, r2
 800433c:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	7b1b      	ldrb	r3, [r3, #12]
 8004342:	837b      	strh	r3, [r7, #26]
 8004344:	e013      	b.n	800436e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x78>
    {
        if (prevChar == kerndata->unicodePrevChar)
 8004346:	69fb      	ldr	r3, [r7, #28]
 8004348:	881b      	ldrh	r3, [r3, #0]
 800434a:	897a      	ldrh	r2, [r7, #10]
 800434c:	429a      	cmp	r2, r3
 800434e:	d103      	bne.n	8004358 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x62>
        {
            return kerndata->distance;
 8004350:	69fb      	ldr	r3, [r7, #28]
 8004352:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8004356:	e010      	b.n	800437a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x84>
        }
        if (prevChar < kerndata->unicodePrevChar)
 8004358:	69fb      	ldr	r3, [r7, #28]
 800435a:	881b      	ldrh	r3, [r3, #0]
 800435c:	897a      	ldrh	r2, [r7, #10]
 800435e:	429a      	cmp	r2, r3
 8004360:	d309      	bcc.n	8004376 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8004362:	8b7b      	ldrh	r3, [r7, #26]
 8004364:	3b01      	subs	r3, #1
 8004366:	837b      	strh	r3, [r7, #26]
 8004368:	69fb      	ldr	r3, [r7, #28]
 800436a:	3304      	adds	r3, #4
 800436c:	61fb      	str	r3, [r7, #28]
 800436e:	8b7b      	ldrh	r3, [r7, #26]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d1e8      	bne.n	8004346 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x50>
 8004374:	e000      	b.n	8004378 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        {
            break;
 8004376:	bf00      	nop
        }
    }
    return 0;
 8004378:	2300      	movs	r3, #0
}
 800437a:	4618      	mov	r0, r3
 800437c:	3724      	adds	r7, #36	; 0x24
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr

08004386 <_ZN8touchgfx9colortypeC1Em>:
    colortype(uint32_t col)
 8004386:	b480      	push	{r7}
 8004388:	b083      	sub	sp, #12
 800438a:	af00      	add	r7, sp, #0
 800438c:	6078      	str	r0, [r7, #4]
 800438e:	6039      	str	r1, [r7, #0]
        : color(col)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	683a      	ldr	r2, [r7, #0]
 8004394:	601a      	str	r2, [r3, #0]
    }
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4618      	mov	r0, r3
 800439a:	370c      	adds	r7, #12
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr

080043a4 <_ZN8touchgfx4RectC1Essss>:
     * @param  rectX      The x coordinate.
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
 80043a4:	b480      	push	{r7}
 80043a6:	b085      	sub	sp, #20
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	4608      	mov	r0, r1
 80043ae:	4611      	mov	r1, r2
 80043b0:	461a      	mov	r2, r3
 80043b2:	4603      	mov	r3, r0
 80043b4:	817b      	strh	r3, [r7, #10]
 80043b6:	460b      	mov	r3, r1
 80043b8:	813b      	strh	r3, [r7, #8]
 80043ba:	4613      	mov	r3, r2
 80043bc:	80fb      	strh	r3, [r7, #6]
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	897a      	ldrh	r2, [r7, #10]
 80043c2:	801a      	strh	r2, [r3, #0]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	893a      	ldrh	r2, [r7, #8]
 80043c8:	805a      	strh	r2, [r3, #2]
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	88fa      	ldrh	r2, [r7, #6]
 80043ce:	809a      	strh	r2, [r3, #4]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	8b3a      	ldrh	r2, [r7, #24]
 80043d4:	80da      	strh	r2, [r3, #6]
    {
    }
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	4618      	mov	r0, r3
 80043da:	3714      	adds	r7, #20
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr

080043e4 <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b082      	sub	sp, #8
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
          nextSibling(0),
          nextDrawChainElement(0),
          cachedAbsX(0),
          cachedAbsY(0),
          touchable(false),
          visible(true)
 80043ec:	4a14      	ldr	r2, [pc, #80]	; (8004440 <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	601a      	str	r2, [r3, #0]
        : rect(),
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	3304      	adds	r3, #4
 80043f6:	4618      	mov	r0, r3
 80043f8:	f7fe f8f8 	bl	80025ec <_ZN8touchgfx4RectC1Ev>
          cachedVisibleRect(),
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	330c      	adds	r3, #12
 8004400:	4618      	mov	r0, r3
 8004402:	f7fe f8f3 	bl	80025ec <_ZN8touchgfx4RectC1Ev>
          parent(0),
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	615a      	str	r2, [r3, #20]
          nextSibling(0),
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	619a      	str	r2, [r3, #24]
          nextDrawChainElement(0),
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	61da      	str	r2, [r3, #28]
          cachedAbsX(0),
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	841a      	strh	r2, [r3, #32]
          cachedAbsY(0),
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	845a      	strh	r2, [r3, #34]	; 0x22
          touchable(false),
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          visible(true)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	4618      	mov	r0, r3
 8004438:	3708      	adds	r7, #8
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	08023470 	.word	0x08023470

08004444 <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
    {
 800444c:	4a04      	ldr	r2, [pc, #16]	; (8004460 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	601a      	str	r2, [r3, #0]
    }
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4618      	mov	r0, r3
 8004456:	370c      	adds	r7, #12
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr
 8004460:	08023470 	.word	0x08023470

08004464 <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 8004464:	b580      	push	{r7, lr}
 8004466:	b082      	sub	sp, #8
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
    }
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f7ff ffe9 	bl	8004444 <_ZN8touchgfx8DrawableD1Ev>
 8004472:	2128      	movs	r1, #40	; 0x28
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f01c fc78 	bl	8020d6a <_ZdlPvj>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4618      	mov	r0, r3
 800447e:	3708      	adds	r7, #8
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}

08004484 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
     * Tell the framework that the contents of the Drawable needs to be redrawn. If the Drawable is
     * invisible, nothing happens. Subclasses of Drawable are encouraged to implement this function
     * and invalidate as little as possible, i.e. the smallest rectangle covering the visual element(s)
     * drawn by the widget.
     */
    virtual void invalidateContent() const
 8004484:	b580      	push	{r7, lr}
 8004486:	b082      	sub	sp, #8
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
    {
        // Consider checking if *this is in the draw chain
        if (visible)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004492:	2b00      	cmp	r3, #0
 8004494:	d005      	beq.n	80044a2 <_ZNK8touchgfx8Drawable17invalidateContentEv+0x1e>
        {
            invalidate();
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	3314      	adds	r3, #20
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	4798      	blx	r3
        }
    }
 80044a2:	bf00      	nop
 80044a4:	3708      	adds	r7, #8
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}

080044aa <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 80044aa:	b480      	push	{r7}
 80044ac:	b083      	sub	sp, #12
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	6078      	str	r0, [r7, #4]
    {
        return 0;
 80044b2:	2300      	movs	r3, #0
    }
 80044b4:	4618      	mov	r0, r3
 80044b6:	370c      	adds	r7, #12
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr

080044c0 <_ZN8touchgfx8Drawable11setPositionEssss>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     *
     * @see setXY,setWidthHeight,setPosition(const Drawable&)
     */
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b084      	sub	sp, #16
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	60f8      	str	r0, [r7, #12]
 80044c8:	4608      	mov	r0, r1
 80044ca:	4611      	mov	r1, r2
 80044cc:	461a      	mov	r2, r3
 80044ce:	4603      	mov	r3, r0
 80044d0:	817b      	strh	r3, [r7, #10]
 80044d2:	460b      	mov	r3, r1
 80044d4:	813b      	strh	r3, [r7, #8]
 80044d6:	4613      	mov	r3, r2
 80044d8:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 80044da:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80044de:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80044e2:	4619      	mov	r1, r3
 80044e4:	68f8      	ldr	r0, [r7, #12]
 80044e6:	f000 f82a 	bl	800453e <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 80044ea:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80044ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80044f2:	4619      	mov	r1, r3
 80044f4:	68f8      	ldr	r0, [r7, #12]
 80044f6:	f000 f87e 	bl	80045f6 <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 80044fa:	bf00      	nop
 80044fc:	3710      	adds	r7, #16
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}

08004502 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 8004502:	b480      	push	{r7}
 8004504:	b083      	sub	sp, #12
 8004506:	af00      	add	r7, sp, #0
 8004508:	6078      	str	r0, [r7, #4]
 800450a:	460b      	mov	r3, r1
 800450c:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	887a      	ldrh	r2, [r7, #2]
 8004512:	809a      	strh	r2, [r3, #4]
    }
 8004514:	bf00      	nop
 8004516:	370c      	adds	r7, #12
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr

08004520 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 8004520:	b480      	push	{r7}
 8004522:	b083      	sub	sp, #12
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	460b      	mov	r3, r1
 800452a:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	887a      	ldrh	r2, [r7, #2]
 8004530:	80da      	strh	r2, [r3, #6]
    }
 8004532:	bf00      	nop
 8004534:	370c      	adds	r7, #12
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr

0800453e <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 800453e:	b580      	push	{r7, lr}
 8004540:	b082      	sub	sp, #8
 8004542:	af00      	add	r7, sp, #0
 8004544:	6078      	str	r0, [r7, #4]
 8004546:	460b      	mov	r3, r1
 8004548:	807b      	strh	r3, [r7, #2]
 800454a:	4613      	mov	r3, r2
 800454c:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	3330      	adds	r3, #48	; 0x30
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800455a:	4611      	mov	r1, r2
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	4798      	blx	r3
        setY(y);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	3334      	adds	r3, #52	; 0x34
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f9b7 2000 	ldrsh.w	r2, [r7]
 800456c:	4611      	mov	r1, r2
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	4798      	blx	r3
    }
 8004572:	bf00      	nop
 8004574:	3708      	adds	r7, #8
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}

0800457a <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 800457a:	b480      	push	{r7}
 800457c:	b083      	sub	sp, #12
 800457e:	af00      	add	r7, sp, #0
 8004580:	6078      	str	r0, [r7, #4]
 8004582:	460b      	mov	r3, r1
 8004584:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	887a      	ldrh	r2, [r7, #2]
 800458a:	811a      	strh	r2, [r3, #8]
    }
 800458c:	bf00      	nop
 800458e:	370c      	adds	r7, #12
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr

08004598 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 8004598:	b480      	push	{r7}
 800459a:	b083      	sub	sp, #12
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	460b      	mov	r3, r1
 80045a2:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	887a      	ldrh	r2, [r7, #2]
 80045a8:	815a      	strh	r2, [r3, #10]
    }
 80045aa:	bf00      	nop
 80045ac:	370c      	adds	r7, #12
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr

080045b6 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 80045b6:	b480      	push	{r7}
 80045b8:	b083      	sub	sp, #12
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	6078      	str	r0, [r7, #4]
    {
    }
 80045be:	bf00      	nop
 80045c0:	370c      	adds	r7, #12
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr

080045ca <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 80045ca:	b480      	push	{r7}
 80045cc:	b083      	sub	sp, #12
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	6078      	str	r0, [r7, #4]
 80045d2:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 80045d4:	bf00      	nop
 80045d6:	370c      	adds	r7, #12
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr

080045e0 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 80045e0:	b480      	push	{r7}
 80045e2:	b083      	sub	sp, #12
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 80045ea:	bf00      	nop
 80045ec:	370c      	adds	r7, #12
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr

080045f6 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
     * coordinates).
     *
     * @param  width  The width.
     * @param  height The height.
     */
    void setWidthHeight(int16_t width, int16_t height)
 80045f6:	b580      	push	{r7, lr}
 80045f8:	b082      	sub	sp, #8
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	6078      	str	r0, [r7, #4]
 80045fe:	460b      	mov	r3, r1
 8004600:	807b      	strh	r3, [r7, #2]
 8004602:	4613      	mov	r3, r2
 8004604:	803b      	strh	r3, [r7, #0]
    {
        setWidth(width);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	3338      	adds	r3, #56	; 0x38
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004612:	4611      	mov	r1, r2
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	4798      	blx	r3
        setHeight(height);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	333c      	adds	r3, #60	; 0x3c
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f9b7 2000 	ldrsh.w	r2, [r7]
 8004624:	4611      	mov	r1, r2
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	4798      	blx	r3
    }
 800462a:	bf00      	nop
 800462c:	3708      	adds	r7, #8
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}

08004632 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 8004632:	b480      	push	{r7}
 8004634:	b083      	sub	sp, #12
 8004636:	af00      	add	r7, sp, #0
 8004638:	6078      	str	r0, [r7, #4]
 800463a:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800463c:	bf00      	nop
 800463e:	370c      	adds	r7, #12
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr

08004648 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 8004648:	b480      	push	{r7}
 800464a:	b083      	sub	sp, #12
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
    {
    }
 8004650:	bf00      	nop
 8004652:	370c      	adds	r7, #12
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr

0800465c <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 800465c:	b480      	push	{r7}
 800465e:	b083      	sub	sp, #12
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
    {
        return visible;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 800466a:	4618      	mov	r0, r3
 800466c:	370c      	adds	r7, #12
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr

08004676 <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 8004676:	b480      	push	{r7}
 8004678:	b083      	sub	sp, #12
 800467a:	af00      	add	r7, sp, #0
 800467c:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 8004684:	4618      	mov	r0, r3
 8004686:	370c      	adds	r7, #12
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr

08004690 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8004690:	b580      	push	{r7, lr}
 8004692:	b082      	sub	sp, #8
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	460b      	mov	r3, r1
 800469a:	807b      	strh	r3, [r7, #2]
 800469c:	4613      	mov	r3, r2
 800469e:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	3354      	adds	r3, #84	; 0x54
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	8879      	ldrh	r1, [r7, #2]
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80046b0:	b292      	uxth	r2, r2
 80046b2:	1a8a      	subs	r2, r1, r2
 80046b4:	b292      	uxth	r2, r2
 80046b6:	b210      	sxth	r0, r2
 80046b8:	8839      	ldrh	r1, [r7, #0]
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80046c0:	b292      	uxth	r2, r2
 80046c2:	1a8a      	subs	r2, r1, r2
 80046c4:	b292      	uxth	r2, r2
 80046c6:	b212      	sxth	r2, r2
 80046c8:	4601      	mov	r1, r0
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	4798      	blx	r3
    }
 80046ce:	bf00      	nop
 80046d0:	3708      	adds	r7, #8
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}

080046d6 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 80046d6:	b480      	push	{r7}
 80046d8:	b083      	sub	sp, #12
 80046da:	af00      	add	r7, sp, #0
 80046dc:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80046e4:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80046ec:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80046f4:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 80046f6:	bf00      	nop
 80046f8:	370c      	adds	r7, #12
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr

08004702 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 8004702:	b580      	push	{r7, lr}
 8004704:	b084      	sub	sp, #16
 8004706:	af00      	add	r7, sp, #0
 8004708:	60f8      	str	r0, [r7, #12]
 800470a:	60b9      	str	r1, [r7, #8]
 800470c:	607a      	str	r2, [r7, #4]
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
 800470e:	68f8      	ldr	r0, [r7, #12]
 8004710:	f7ff ffe1 	bl	80046d6 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	68fa      	ldr	r2, [r7, #12]
 8004720:	601a      	str	r2, [r3, #0]
    }
 8004722:	bf00      	nop
 8004724:	3710      	adds	r7, #16
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
	...

0800472c <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 800472c:	b580      	push	{r7, lr}
 800472e:	b082      	sub	sp, #8
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
    {
 8004734:	4a06      	ldr	r2, [pc, #24]	; (8004750 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	601a      	str	r2, [r3, #0]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	3304      	adds	r3, #4
 800473e:	4618      	mov	r0, r3
 8004740:	f000 fab4 	bl	8004cac <_ZN8touchgfx9ContainerD1Ev>
    }
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	4618      	mov	r0, r3
 8004748:	3708      	adds	r7, #8
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
 800474e:	bf00      	nop
 8004750:	08023574 	.word	0x08023574

08004754 <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 8004754:	b580      	push	{r7, lr}
 8004756:	b082      	sub	sp, #8
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
    }
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	f7ff ffe5 	bl	800472c <_ZN8touchgfx6ScreenD1Ev>
 8004762:	213c      	movs	r1, #60	; 0x3c
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	f01c fb00 	bl	8020d6a <_ZdlPvj>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4618      	mov	r0, r3
 800476e:	3708      	adds	r7, #8
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}

08004774 <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 8004774:	b480      	push	{r7}
 8004776:	b083      	sub	sp, #12
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
    {
    }
 800477c:	bf00      	nop
 800477e:	370c      	adds	r7, #12
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr

08004788 <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 8004788:	b480      	push	{r7}
 800478a:	b083      	sub	sp, #12
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
    {
    }
 8004790:	bf00      	nop
 8004792:	370c      	adds	r7, #12
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr

0800479c <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 800479c:	b480      	push	{r7}
 800479e:	b083      	sub	sp, #12
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
    {
    }
 80047a4:	bf00      	nop
 80047a6:	370c      	adds	r7, #12
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr

080047b0 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
    {
    }
 80047b8:	bf00      	nop
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	460b      	mov	r3, r1
 80047ce:	70fb      	strb	r3, [r7, #3]
    {
        (void)key; // Unused variable
    }
 80047d0:	bf00      	nop
 80047d2:	370c      	adds	r7, #12
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr

080047dc <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 80047dc:	b580      	push	{r7, lr}
 80047de:	b082      	sub	sp, #8
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	3304      	adds	r3, #4
 80047ea:	6839      	ldr	r1, [r7, #0]
 80047ec:	4618      	mov	r0, r3
 80047ee:	f00d f8c7 	bl	8011980 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 80047f2:	bf00      	nop
 80047f4:	3708      	adds	r7, #8
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}

080047fa <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     * Since a Widget is only one Drawable, Widget::getLastChild simply yields itself as
     * result, but only if the Widget isVisible and isTouchable.
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
 80047fa:	b580      	push	{r7, lr}
 80047fc:	b084      	sub	sp, #16
 80047fe:	af00      	add	r7, sp, #0
 8004800:	60f8      	str	r0, [r7, #12]
 8004802:	607b      	str	r3, [r7, #4]
 8004804:	460b      	mov	r3, r1
 8004806:	817b      	strh	r3, [r7, #10]
 8004808:	4613      	mov	r3, r2
 800480a:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	4618      	mov	r0, r3
 8004810:	f7ff ff24 	bl	800465c <_ZNK8touchgfx8Drawable9isVisibleEv>
 8004814:	4603      	mov	r3, r0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d008      	beq.n	800482c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	4618      	mov	r0, r3
 800481e:	f7ff ff2a 	bl	8004676 <_ZNK8touchgfx8Drawable11isTouchableEv>
 8004822:	4603      	mov	r3, r0
 8004824:	2b00      	cmp	r3, #0
 8004826:	d001      	beq.n	800482c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8004828:	2301      	movs	r3, #1
 800482a:	e000      	b.n	800482e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 800482c:	2300      	movs	r3, #0
 800482e:	2b00      	cmp	r3, #0
 8004830:	d002      	beq.n	8004838 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 8004832:	68fa      	ldr	r2, [r7, #12]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	601a      	str	r2, [r3, #0]
        }
    }
 8004838:	bf00      	nop
 800483a:	3710      	adds	r7, #16
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}

08004840 <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 8004840:	b580      	push	{r7, lr}
 8004842:	b082      	sub	sp, #8
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	4618      	mov	r0, r3
 800484c:	f7ff fdca 	bl	80043e4 <_ZN8touchgfx8DrawableC1Ev>
 8004850:	4a03      	ldr	r2, [pc, #12]	; (8004860 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	601a      	str	r2, [r3, #0]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4618      	mov	r0, r3
 800485a:	3708      	adds	r7, #8
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}
 8004860:	08022ed4 	.word	0x08022ed4

08004864 <_ZN8touchgfx6WidgetD1Ev>:
 8004864:	b580      	push	{r7, lr}
 8004866:	b082      	sub	sp, #8
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	4a05      	ldr	r2, [pc, #20]	; (8004884 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	601a      	str	r2, [r3, #0]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4618      	mov	r0, r3
 8004876:	f7ff fde5 	bl	8004444 <_ZN8touchgfx8DrawableD1Ev>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4618      	mov	r0, r3
 800487e:	3708      	adds	r7, #8
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}
 8004884:	08022ed4 	.word	0x08022ed4

08004888 <_ZN8touchgfx6WidgetD0Ev>:
 8004888:	b580      	push	{r7, lr}
 800488a:	b082      	sub	sp, #8
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f7ff ffe7 	bl	8004864 <_ZN8touchgfx6WidgetD1Ev>
 8004896:	2128      	movs	r1, #40	; 0x28
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	f01c fa66 	bl	8020d6a <_ZdlPvj>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4618      	mov	r0, r3
 80048a2:	3708      	adds	r7, #8
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}

080048a8 <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b082      	sub	sp, #8
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	4618      	mov	r0, r3
 80048b4:	2326      	movs	r3, #38	; 0x26
 80048b6:	461a      	mov	r2, r3
 80048b8:	2100      	movs	r1, #0
 80048ba:	f01c fc8a 	bl	80211d2 <memset>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4618      	mov	r0, r3
 80048c2:	f7ff ffbd 	bl	8004840 <_ZN8touchgfx6WidgetC1Ev>
 80048c6:	4a09      	ldr	r2, [pc, #36]	; (80048ec <_ZN8touchgfx3BoxC1Ev+0x44>)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	601a      	str	r2, [r3, #0]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	22ff      	movs	r2, #255	; 0xff
 80048d0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	3328      	adds	r3, #40	; 0x28
 80048d8:	2100      	movs	r1, #0
 80048da:	4618      	mov	r0, r3
 80048dc:	f7ff fd53 	bl	8004386 <_ZN8touchgfx9colortypeC1Em>
    {
    }
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	4618      	mov	r0, r3
 80048e4:	3708      	adds	r7, #8
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}
 80048ea:	bf00      	nop
 80048ec:	0802335c 	.word	0x0802335c

080048f0 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  newColor The color of the box.
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
 80048f0:	b480      	push	{r7}
 80048f2:	b083      	sub	sp, #12
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	6039      	str	r1, [r7, #0]
    {
        color = newColor;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	683a      	ldr	r2, [r7, #0]
 80048fe:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8004900:	bf00      	nop
 8004902:	370c      	adds	r7, #12
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr

0800490c <_ZN8touchgfx9TypedTextC1Et>:
    TypedText(const TypedTextId id = TYPED_TEXT_INVALID)
 800490c:	b480      	push	{r7}
 800490e:	b083      	sub	sp, #12
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	460b      	mov	r3, r1
 8004916:	807b      	strh	r3, [r7, #2]
        : typedTextId(id)
 8004918:	4a06      	ldr	r2, [pc, #24]	; (8004934 <_ZN8touchgfx9TypedTextC1Et+0x28>)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	601a      	str	r2, [r3, #0]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	887a      	ldrh	r2, [r7, #2]
 8004922:	809a      	strh	r2, [r3, #4]
    }
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	4618      	mov	r0, r3
 8004928:	370c      	adds	r7, #12
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr
 8004932:	bf00      	nop
 8004934:	08022db4 	.word	0x08022db4

08004938 <_ZN8touchgfx8TextAreaC1Ev>:
 *       the pointer remains valid when drawing.
 */
class TextArea : public Widget
{
public:
    TextArea()
 8004938:	b580      	push	{r7, lr}
 800493a:	b082      	sub	sp, #8
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	4618      	mov	r0, r3
 8004944:	2326      	movs	r3, #38	; 0x26
 8004946:	461a      	mov	r2, r3
 8004948:	2100      	movs	r1, #0
 800494a:	f01c fc42 	bl	80211d2 <memset>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4618      	mov	r0, r3
 8004952:	f7ff ff75 	bl	8004840 <_ZN8touchgfx6WidgetC1Ev>
 8004956:	4a16      	ldr	r2, [pc, #88]	; (80049b0 <_ZN8touchgfx8TextAreaC1Ev+0x78>)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	601a      	str	r2, [r3, #0]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	3328      	adds	r3, #40	; 0x28
 8004960:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004964:	4618      	mov	r0, r3
 8004966:	f7ff ffd1 	bl	800490c <_ZN8touchgfx9TypedTextC1Et>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	3330      	adds	r3, #48	; 0x30
 800496e:	2100      	movs	r1, #0
 8004970:	4618      	mov	r0, r3
 8004972:	f7ff fd08 	bl	8004386 <_ZN8touchgfx9colortypeC1Em>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	869a      	strh	r2, [r3, #52]	; 0x34
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	22ff      	movs	r2, #255	; 0xff
 8004980:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	333c      	adds	r3, #60	; 0x3c
 80049a0:	4618      	mov	r0, r3
 80049a2:	f000 f807 	bl	80049b4 <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>
    {
    }
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4618      	mov	r0, r3
 80049aa:	3708      	adds	r7, #8
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}
 80049b0:	080232cc 	.word	0x080232cc

080049b4 <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>:
        }

        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b084      	sub	sp, #16
 80049b8:	af02      	add	r7, sp, #8
 80049ba:	6078      	str	r0, [r7, #4]
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f04f 33ff 	mov.w	r3, #4294967295
 80049c2:	9300      	str	r3, [sp, #0]
 80049c4:	f04f 33ff 	mov.w	r3, #4294967295
 80049c8:	2200      	movs	r2, #0
 80049ca:	2100      	movs	r1, #0
 80049cc:	f7ff fcea 	bl	80043a4 <_ZN8touchgfx4RectC1Essss>
              text(0)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	609a      	str	r2, [r3, #8]
        {
        }
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4618      	mov	r0, r3
 80049da:	3708      	adds	r7, #8
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}

080049e0 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>:
class View : public Screen
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b082      	sub	sp, #8
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	4a05      	ldr	r2, [pc, #20]	; (8004a00 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev+0x20>)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	601a      	str	r2, [r3, #0]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	4618      	mov	r0, r3
 80049f2:	f7ff fe9b 	bl	800472c <_ZN8touchgfx6ScreenD1Ev>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4618      	mov	r0, r3
 80049fa:	3708      	adds	r7, #8
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	08022ea0 	.word	0x08022ea0

08004a04 <_ZN8touchgfx4ViewI16Screen1PresenterED0Ev>:
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b082      	sub	sp, #8
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f7ff ffe7 	bl	80049e0 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 8004a12:	2140      	movs	r1, #64	; 0x40
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f01c f9a8 	bl	8020d6a <_ZdlPvj>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3708      	adds	r7, #8
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}

08004a24 <_ZN15Screen1ViewBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/screen1_screen/Screen1ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>

Screen1ViewBase::Screen1ViewBase()
 8004a24:	b590      	push	{r4, r7, lr}
 8004a26:	b095      	sub	sp, #84	; 0x54
 8004a28:	af02      	add	r7, sp, #8
 8004a2a:	6178      	str	r0, [r7, #20]
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f000 f926 	bl	8004c80 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>
 8004a34:	4a73      	ldr	r2, [pc, #460]	; (8004c04 <_ZN15Screen1ViewBaseC1Ev+0x1e0>)
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	601a      	str	r2, [r3, #0]
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	3340      	adds	r3, #64	; 0x40
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f7ff ff32 	bl	80048a8 <_ZN8touchgfx3BoxC1Ev>
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	336c      	adds	r3, #108	; 0x6c
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f7ff ff2d 	bl	80048a8 <_ZN8touchgfx3BoxC1Ev>
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	3398      	adds	r3, #152	; 0x98
 8004a52:	4618      	mov	r0, r3
 8004a54:	f7ff ff70 	bl	8004938 <_ZN8touchgfx8TextAreaC1Ev>
{
    __background.setPosition(0, 0, 480, 272);
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8004a5e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8004a62:	9300      	str	r3, [sp, #0]
 8004a64:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8004a68:	2200      	movs	r2, #0
 8004a6a:	2100      	movs	r1, #0
 8004a6c:	f7ff fd28 	bl	80044c0 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8004a76:	2300      	movs	r3, #0
 8004a78:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8004a82:	2300      	movs	r3, #0
 8004a84:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8004a88:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004a8c:	041b      	lsls	r3, r3, #16
 8004a8e:	461a      	mov	r2, r3
 8004a90:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004a94:	021b      	lsls	r3, r3, #8
 8004a96:	431a      	orrs	r2, r3
 8004a98:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8004aa2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004aa6:	4611      	mov	r1, r2
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f7ff fc6c 	bl	8004386 <_ZN8touchgfx9colortypeC1Em>
 8004aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ab0:	4619      	mov	r1, r3
 8004ab2:	4620      	mov	r0, r4
 8004ab4:	f7ff ff1c 	bl	80048f0 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(__background);
 8004ab8:	697a      	ldr	r2, [r7, #20]
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	3340      	adds	r3, #64	; 0x40
 8004abe:	4619      	mov	r1, r3
 8004ac0:	4610      	mov	r0, r2
 8004ac2:	f7ff fe8b 	bl	80047dc <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    background.setPosition(0, 0, 480, 272);
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 8004acc:	f44f 7388 	mov.w	r3, #272	; 0x110
 8004ad0:	9300      	str	r3, [sp, #0]
 8004ad2:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	2100      	movs	r1, #0
 8004ada:	f7ff fcf1 	bl	80044c0 <_ZN8touchgfx8Drawable11setPositionEssss>
    background.setColor(touchgfx::Color::getColorFromRGB(16, 8, 94));
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8004ae4:	2310      	movs	r3, #16
 8004ae6:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8004aea:	2308      	movs	r3, #8
 8004aec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8004af0:	235e      	movs	r3, #94	; 0x5e
 8004af2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8004af6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8004afa:	041b      	lsls	r3, r3, #16
 8004afc:	461a      	mov	r2, r3
 8004afe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004b02:	021b      	lsls	r3, r3, #8
 8004b04:	431a      	orrs	r2, r3
 8004b06:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8004b10:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004b14:	4611      	mov	r1, r2
 8004b16:	4618      	mov	r0, r3
 8004b18:	f7ff fc35 	bl	8004386 <_ZN8touchgfx9colortypeC1Em>
 8004b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b1e:	4619      	mov	r1, r3
 8004b20:	4620      	mov	r0, r4
 8004b22:	f7ff fee5 	bl	80048f0 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(background);
 8004b26:	697a      	ldr	r2, [r7, #20]
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	336c      	adds	r3, #108	; 0x6c
 8004b2c:	4619      	mov	r1, r3
 8004b2e:	4610      	mov	r0, r2
 8004b30:	f7ff fe54 	bl	80047dc <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    textHello.setXY(184, 116);
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	3398      	adds	r3, #152	; 0x98
 8004b38:	2274      	movs	r2, #116	; 0x74
 8004b3a:	21b8      	movs	r1, #184	; 0xb8
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f7ff fcfe 	bl	800453e <_ZN8touchgfx8Drawable5setXYEss>
    textHello.setColor(touchgfx::Color::getColorFromRGB(250, 247, 247));
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	f103 0498 	add.w	r4, r3, #152	; 0x98
 8004b48:	23fa      	movs	r3, #250	; 0xfa
 8004b4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004b4e:	23f7      	movs	r3, #247	; 0xf7
 8004b50:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8004b54:	23f7      	movs	r3, #247	; 0xf7
 8004b56:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8004b5a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8004b5e:	041b      	lsls	r3, r3, #16
 8004b60:	461a      	mov	r2, r3
 8004b62:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8004b66:	021b      	lsls	r3, r3, #8
 8004b68:	431a      	orrs	r2, r3
 8004b6a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8004b74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b78:	4611      	mov	r1, r2
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f7ff fc03 	bl	8004386 <_ZN8touchgfx9colortypeC1Em>
 8004b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b82:	63fc      	str	r4, [r7, #60]	; 0x3c
 8004b84:	61bb      	str	r3, [r7, #24]
        color = newColor;
 8004b86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b88:	69ba      	ldr	r2, [r7, #24]
 8004b8a:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8004b8c:	bf00      	nop
    textHello.setLinespacing(0);
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	3398      	adds	r3, #152	; 0x98
 8004b92:	647b      	str	r3, [r7, #68]	; 0x44
 8004b94:	2300      	movs	r3, #0
 8004b96:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        linespace = space;
 8004b9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b9c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8004ba0:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 8004ba2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	3384      	adds	r3, #132	; 0x84
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8004bac:	463a      	mov	r2, r7
 8004bae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004bb0:	4610      	mov	r0, r2
 8004bb2:	4798      	blx	r3
 8004bb4:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8004bb8:	463a      	mov	r2, r7
 8004bba:	ca07      	ldmia	r2, {r0, r1, r2}
 8004bbc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 8004bc0:	bf00      	nop
    textHello.setTypedText(touchgfx::TypedText(T___SINGLEUSE_GJT6));
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	f103 0498 	add.w	r4, r3, #152	; 0x98
 8004bc8:	f107 031c 	add.w	r3, r7, #28
 8004bcc:	2100      	movs	r1, #0
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f7ff fe9c 	bl	800490c <_ZN8touchgfx9TypedTextC1Et>
 8004bd4:	f107 031c 	add.w	r3, r7, #28
 8004bd8:	4619      	mov	r1, r3
 8004bda:	4620      	mov	r0, r4
 8004bdc:	f00e fc16 	bl	801340c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8004be0:	f107 031c 	add.w	r3, r7, #28
 8004be4:	4618      	mov	r0, r3
 8004be6:	f7fe ff7b 	bl	8003ae0 <_ZN8touchgfx9TypedTextD1Ev>
    add(textHello);
 8004bea:	697a      	ldr	r2, [r7, #20]
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	3398      	adds	r3, #152	; 0x98
 8004bf0:	4619      	mov	r1, r3
 8004bf2:	4610      	mov	r0, r2
 8004bf4:	f7ff fdf2 	bl	80047dc <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	374c      	adds	r7, #76	; 0x4c
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd90      	pop	{r4, r7, pc}
 8004c02:	bf00      	nop
 8004c04:	08022e6c 	.word	0x08022e6c

08004c08 <_ZN15Screen1ViewBaseD1Ev>:

Screen1ViewBase::~Screen1ViewBase()
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b082      	sub	sp, #8
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	4a0d      	ldr	r2, [pc, #52]	; (8004c48 <_ZN15Screen1ViewBaseD1Ev+0x40>)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	601a      	str	r2, [r3, #0]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	3398      	adds	r3, #152	; 0x98
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f000 f88a 	bl	8004d34 <_ZN8touchgfx8TextAreaD1Ev>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	336c      	adds	r3, #108	; 0x6c
 8004c24:	4618      	mov	r0, r3
 8004c26:	f000 f863 	bl	8004cf0 <_ZN8touchgfx3BoxD1Ev>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	3340      	adds	r3, #64	; 0x40
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f000 f85e 	bl	8004cf0 <_ZN8touchgfx3BoxD1Ev>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	4618      	mov	r0, r3
 8004c38:	f7ff fed2 	bl	80049e0 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
{

}
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3708      	adds	r7, #8
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}
 8004c46:	bf00      	nop
 8004c48:	08022e6c 	.word	0x08022e6c

08004c4c <_ZN15Screen1ViewBaseD0Ev>:
Screen1ViewBase::~Screen1ViewBase()
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b082      	sub	sp, #8
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
}
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f7ff ffd7 	bl	8004c08 <_ZN15Screen1ViewBaseD1Ev>
 8004c5a:	21e0      	movs	r1, #224	; 0xe0
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f01c f884 	bl	8020d6a <_ZdlPvj>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4618      	mov	r0, r3
 8004c66:	3708      	adds	r7, #8
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}

08004c6c <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b083      	sub	sp, #12
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]

}
 8004c74:	bf00      	nop
 8004c76:	370c      	adds	r7, #12
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr

08004c80 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>:
    View()
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b082      	sub	sp, #8
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f011 fbee 	bl	801646c <_ZN8touchgfx6ScreenC1Ev>
 8004c90:	4a05      	ldr	r2, [pc, #20]	; (8004ca8 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev+0x28>)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	601a      	str	r2, [r3, #0]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3708      	adds	r7, #8
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	bf00      	nop
 8004ca8:	08022ea0 	.word	0x08022ea0

08004cac <_ZN8touchgfx9ContainerD1Ev>:
 * intersect with the geometry of the container will be visible (e.g. setting a
 * container's width to 0 will render all children invisible).
 *
 * @see Drawable
 */
class Container : public Drawable
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b082      	sub	sp, #8
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	4a05      	ldr	r2, [pc, #20]	; (8004ccc <_ZN8touchgfx9ContainerD1Ev+0x20>)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	601a      	str	r2, [r3, #0]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f7ff fbc1 	bl	8004444 <_ZN8touchgfx8DrawableD1Ev>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3708      	adds	r7, #8
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}
 8004ccc:	080230e4 	.word	0x080230e4

08004cd0 <_ZN8touchgfx9ContainerD0Ev>:
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b082      	sub	sp, #8
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f7ff ffe7 	bl	8004cac <_ZN8touchgfx9ContainerD1Ev>
 8004cde:	212c      	movs	r1, #44	; 0x2c
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f01c f842 	bl	8020d6a <_ZdlPvj>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3708      	adds	r7, #8
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}

08004cf0 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b082      	sub	sp, #8
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	4a05      	ldr	r2, [pc, #20]	; (8004d10 <_ZN8touchgfx3BoxD1Ev+0x20>)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	601a      	str	r2, [r3, #0]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4618      	mov	r0, r3
 8004d02:	f7ff fdaf 	bl	8004864 <_ZN8touchgfx6WidgetD1Ev>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3708      	adds	r7, #8
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}
 8004d10:	0802335c 	.word	0x0802335c

08004d14 <_ZN8touchgfx3BoxD0Ev>:
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b082      	sub	sp, #8
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f7ff ffe7 	bl	8004cf0 <_ZN8touchgfx3BoxD1Ev>
 8004d22:	212c      	movs	r1, #44	; 0x2c
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	f01c f820 	bl	8020d6a <_ZdlPvj>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	3708      	adds	r7, #8
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}

08004d34 <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b082      	sub	sp, #8
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	4a08      	ldr	r2, [pc, #32]	; (8004d60 <_ZN8touchgfx8TextAreaD1Ev+0x2c>)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	601a      	str	r2, [r3, #0]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	3328      	adds	r3, #40	; 0x28
 8004d46:	4618      	mov	r0, r3
 8004d48:	f7fe feca 	bl	8003ae0 <_ZN8touchgfx9TypedTextD1Ev>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f7ff fd88 	bl	8004864 <_ZN8touchgfx6WidgetD1Ev>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	4618      	mov	r0, r3
 8004d58:	3708      	adds	r7, #8
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}
 8004d5e:	bf00      	nop
 8004d60:	080232cc 	.word	0x080232cc

08004d64 <_ZN8touchgfx8TextAreaD0Ev>:
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b082      	sub	sp, #8
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f7ff ffe1 	bl	8004d34 <_ZN8touchgfx8TextAreaD1Ev>
 8004d72:	2148      	movs	r1, #72	; 0x48
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f01b fff8 	bl	8020d6a <_ZdlPvj>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3708      	adds	r7, #8
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}

08004d84 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8004d84:	b580      	push	{r7, lr}
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	4801      	ldr	r0, [pc, #4]	; (8004d90 <__tcf_0+0xc>)
 8004d8a:	f7fe fe87 	bl	8003a9c <_ZN8touchgfx13GeneratedFontD1Ev>
 8004d8e:	bd80      	pop	{r7, pc}
 8004d90:	24001488 	.word	0x24001488

08004d94 <_Z23getFont_verdana_10_4bppv>:
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b08e      	sub	sp, #56	; 0x38
 8004d98:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8004d9a:	4b21      	ldr	r3, [pc, #132]	; (8004e20 <_Z23getFont_verdana_10_4bppv+0x8c>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f3bf 8f5b 	dmb	ish
 8004da2:	f003 0301 	and.w	r3, r3, #1
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	bf0c      	ite	eq
 8004daa:	2301      	moveq	r3, #1
 8004dac:	2300      	movne	r3, #0
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d030      	beq.n	8004e16 <_Z23getFont_verdana_10_4bppv+0x82>
 8004db4:	481a      	ldr	r0, [pc, #104]	; (8004e20 <_Z23getFont_verdana_10_4bppv+0x8c>)
 8004db6:	f01b ffda 	bl	8020d6e <__cxa_guard_acquire>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	bf14      	ite	ne
 8004dc0:	2301      	movne	r3, #1
 8004dc2:	2300      	moveq	r3, #0
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d025      	beq.n	8004e16 <_Z23getFont_verdana_10_4bppv+0x82>
 8004dca:	2300      	movs	r3, #0
 8004dcc:	930c      	str	r3, [sp, #48]	; 0x30
 8004dce:	2300      	movs	r3, #0
 8004dd0:	930b      	str	r3, [sp, #44]	; 0x2c
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	930a      	str	r3, [sp, #40]	; 0x28
 8004dd6:	233f      	movs	r3, #63	; 0x3f
 8004dd8:	9309      	str	r3, [sp, #36]	; 0x24
 8004dda:	4b12      	ldr	r3, [pc, #72]	; (8004e24 <_Z23getFont_verdana_10_4bppv+0x90>)
 8004ddc:	9308      	str	r3, [sp, #32]
 8004dde:	4b12      	ldr	r3, [pc, #72]	; (8004e28 <_Z23getFont_verdana_10_4bppv+0x94>)
 8004de0:	9307      	str	r3, [sp, #28]
 8004de2:	2300      	movs	r3, #0
 8004de4:	9306      	str	r3, [sp, #24]
 8004de6:	2300      	movs	r3, #0
 8004de8:	9305      	str	r3, [sp, #20]
 8004dea:	2301      	movs	r3, #1
 8004dec:	9304      	str	r3, [sp, #16]
 8004dee:	2304      	movs	r3, #4
 8004df0:	9303      	str	r3, [sp, #12]
 8004df2:	2300      	movs	r3, #0
 8004df4:	9302      	str	r3, [sp, #8]
 8004df6:	2300      	movs	r3, #0
 8004df8:	9301      	str	r3, [sp, #4]
 8004dfa:	230a      	movs	r3, #10
 8004dfc:	9300      	str	r3, [sp, #0]
 8004dfe:	230a      	movs	r3, #10
 8004e00:	2201      	movs	r2, #1
 8004e02:	490a      	ldr	r1, [pc, #40]	; (8004e2c <_Z23getFont_verdana_10_4bppv+0x98>)
 8004e04:	480a      	ldr	r0, [pc, #40]	; (8004e30 <_Z23getFont_verdana_10_4bppv+0x9c>)
 8004e06:	f7ff fa1d 	bl	8004244 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8004e0a:	480a      	ldr	r0, [pc, #40]	; (8004e34 <_Z23getFont_verdana_10_4bppv+0xa0>)
 8004e0c:	f01b fffa 	bl	8020e04 <atexit>
 8004e10:	4803      	ldr	r0, [pc, #12]	; (8004e20 <_Z23getFont_verdana_10_4bppv+0x8c>)
 8004e12:	f01b ffb8 	bl	8020d86 <__cxa_guard_release>
    return verdana_10_4bpp;
 8004e16:	4b06      	ldr	r3, [pc, #24]	; (8004e30 <_Z23getFont_verdana_10_4bppv+0x9c>)
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	bf00      	nop
 8004e20:	240014b4 	.word	0x240014b4
 8004e24:	08023844 	.word	0x08023844
 8004e28:	08023854 	.word	0x08023854
 8004e2c:	90000364 	.word	0x90000364
 8004e30:	24001488 	.word	0x24001488
 8004e34:	08004d85 	.word	0x08004d85

08004e38 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 9, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	4801      	ldr	r0, [pc, #4]	; (8004e44 <__tcf_0+0xc>)
 8004e3e:	f7fe fe2d 	bl	8003a9c <_ZN8touchgfx13GeneratedFontD1Ev>
 8004e42:	bd80      	pop	{r7, pc}
 8004e44:	240014b8 	.word	0x240014b8

08004e48 <_Z23getFont_verdana_20_4bppv>:
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b08e      	sub	sp, #56	; 0x38
 8004e4c:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 9, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8004e4e:	4b21      	ldr	r3, [pc, #132]	; (8004ed4 <_Z23getFont_verdana_20_4bppv+0x8c>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f3bf 8f5b 	dmb	ish
 8004e56:	f003 0301 	and.w	r3, r3, #1
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	bf0c      	ite	eq
 8004e5e:	2301      	moveq	r3, #1
 8004e60:	2300      	movne	r3, #0
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d030      	beq.n	8004eca <_Z23getFont_verdana_20_4bppv+0x82>
 8004e68:	481a      	ldr	r0, [pc, #104]	; (8004ed4 <_Z23getFont_verdana_20_4bppv+0x8c>)
 8004e6a:	f01b ff80 	bl	8020d6e <__cxa_guard_acquire>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	bf14      	ite	ne
 8004e74:	2301      	movne	r3, #1
 8004e76:	2300      	moveq	r3, #0
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d025      	beq.n	8004eca <_Z23getFont_verdana_20_4bppv+0x82>
 8004e7e:	2300      	movs	r3, #0
 8004e80:	930c      	str	r3, [sp, #48]	; 0x30
 8004e82:	2300      	movs	r3, #0
 8004e84:	930b      	str	r3, [sp, #44]	; 0x2c
 8004e86:	2300      	movs	r3, #0
 8004e88:	930a      	str	r3, [sp, #40]	; 0x28
 8004e8a:	233f      	movs	r3, #63	; 0x3f
 8004e8c:	9309      	str	r3, [sp, #36]	; 0x24
 8004e8e:	4b12      	ldr	r3, [pc, #72]	; (8004ed8 <_Z23getFont_verdana_20_4bppv+0x90>)
 8004e90:	9308      	str	r3, [sp, #32]
 8004e92:	4b12      	ldr	r3, [pc, #72]	; (8004edc <_Z23getFont_verdana_20_4bppv+0x94>)
 8004e94:	9307      	str	r3, [sp, #28]
 8004e96:	2300      	movs	r3, #0
 8004e98:	9306      	str	r3, [sp, #24]
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	9305      	str	r3, [sp, #20]
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	9304      	str	r3, [sp, #16]
 8004ea2:	2304      	movs	r3, #4
 8004ea4:	9303      	str	r3, [sp, #12]
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	9302      	str	r3, [sp, #8]
 8004eaa:	2300      	movs	r3, #0
 8004eac:	9301      	str	r3, [sp, #4]
 8004eae:	2314      	movs	r3, #20
 8004eb0:	9300      	str	r3, [sp, #0]
 8004eb2:	2314      	movs	r3, #20
 8004eb4:	2209      	movs	r2, #9
 8004eb6:	490a      	ldr	r1, [pc, #40]	; (8004ee0 <_Z23getFont_verdana_20_4bppv+0x98>)
 8004eb8:	480a      	ldr	r0, [pc, #40]	; (8004ee4 <_Z23getFont_verdana_20_4bppv+0x9c>)
 8004eba:	f7ff f9c3 	bl	8004244 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8004ebe:	480a      	ldr	r0, [pc, #40]	; (8004ee8 <_Z23getFont_verdana_20_4bppv+0xa0>)
 8004ec0:	f01b ffa0 	bl	8020e04 <atexit>
 8004ec4:	4803      	ldr	r0, [pc, #12]	; (8004ed4 <_Z23getFont_verdana_20_4bppv+0x8c>)
 8004ec6:	f01b ff5e 	bl	8020d86 <__cxa_guard_release>
    return verdana_20_4bpp;
 8004eca:	4b06      	ldr	r3, [pc, #24]	; (8004ee4 <_Z23getFont_verdana_20_4bppv+0x9c>)
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	bf00      	nop
 8004ed4:	240014e4 	.word	0x240014e4
 8004ed8:	08023848 	.word	0x08023848
 8004edc:	08023858 	.word	0x08023858
 8004ee0:	90000374 	.word	0x90000374
 8004ee4:	240014b8 	.word	0x240014b8
 8004ee8:	08004e39 	.word	0x08004e39

08004eec <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8004eec:	b580      	push	{r7, lr}
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	4801      	ldr	r0, [pc, #4]	; (8004ef8 <__tcf_0+0xc>)
 8004ef2:	f7fe fdd3 	bl	8003a9c <_ZN8touchgfx13GeneratedFontD1Ev>
 8004ef6:	bd80      	pop	{r7, pc}
 8004ef8:	240014e8 	.word	0x240014e8

08004efc <_Z23getFont_verdana_40_4bppv>:
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b08e      	sub	sp, #56	; 0x38
 8004f00:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8004f02:	4b21      	ldr	r3, [pc, #132]	; (8004f88 <_Z23getFont_verdana_40_4bppv+0x8c>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f3bf 8f5b 	dmb	ish
 8004f0a:	f003 0301 	and.w	r3, r3, #1
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	bf0c      	ite	eq
 8004f12:	2301      	moveq	r3, #1
 8004f14:	2300      	movne	r3, #0
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d030      	beq.n	8004f7e <_Z23getFont_verdana_40_4bppv+0x82>
 8004f1c:	481a      	ldr	r0, [pc, #104]	; (8004f88 <_Z23getFont_verdana_40_4bppv+0x8c>)
 8004f1e:	f01b ff26 	bl	8020d6e <__cxa_guard_acquire>
 8004f22:	4603      	mov	r3, r0
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	bf14      	ite	ne
 8004f28:	2301      	movne	r3, #1
 8004f2a:	2300      	moveq	r3, #0
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d025      	beq.n	8004f7e <_Z23getFont_verdana_40_4bppv+0x82>
 8004f32:	2300      	movs	r3, #0
 8004f34:	930c      	str	r3, [sp, #48]	; 0x30
 8004f36:	2300      	movs	r3, #0
 8004f38:	930b      	str	r3, [sp, #44]	; 0x2c
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	930a      	str	r3, [sp, #40]	; 0x28
 8004f3e:	233f      	movs	r3, #63	; 0x3f
 8004f40:	9309      	str	r3, [sp, #36]	; 0x24
 8004f42:	4b12      	ldr	r3, [pc, #72]	; (8004f8c <_Z23getFont_verdana_40_4bppv+0x90>)
 8004f44:	9308      	str	r3, [sp, #32]
 8004f46:	4b12      	ldr	r3, [pc, #72]	; (8004f90 <_Z23getFont_verdana_40_4bppv+0x94>)
 8004f48:	9307      	str	r3, [sp, #28]
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	9306      	str	r3, [sp, #24]
 8004f4e:	2300      	movs	r3, #0
 8004f50:	9305      	str	r3, [sp, #20]
 8004f52:	2301      	movs	r3, #1
 8004f54:	9304      	str	r3, [sp, #16]
 8004f56:	2304      	movs	r3, #4
 8004f58:	9303      	str	r3, [sp, #12]
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	9302      	str	r3, [sp, #8]
 8004f5e:	2300      	movs	r3, #0
 8004f60:	9301      	str	r3, [sp, #4]
 8004f62:	2328      	movs	r3, #40	; 0x28
 8004f64:	9300      	str	r3, [sp, #0]
 8004f66:	2328      	movs	r3, #40	; 0x28
 8004f68:	2201      	movs	r2, #1
 8004f6a:	490a      	ldr	r1, [pc, #40]	; (8004f94 <_Z23getFont_verdana_40_4bppv+0x98>)
 8004f6c:	480a      	ldr	r0, [pc, #40]	; (8004f98 <_Z23getFont_verdana_40_4bppv+0x9c>)
 8004f6e:	f7ff f969 	bl	8004244 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8004f72:	480a      	ldr	r0, [pc, #40]	; (8004f9c <_Z23getFont_verdana_40_4bppv+0xa0>)
 8004f74:	f01b ff46 	bl	8020e04 <atexit>
 8004f78:	4803      	ldr	r0, [pc, #12]	; (8004f88 <_Z23getFont_verdana_40_4bppv+0x8c>)
 8004f7a:	f01b ff04 	bl	8020d86 <__cxa_guard_release>
    return verdana_40_4bpp;
 8004f7e:	4b06      	ldr	r3, [pc, #24]	; (8004f98 <_Z23getFont_verdana_40_4bppv+0x9c>)
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}
 8004f86:	bf00      	nop
 8004f88:	24001514 	.word	0x24001514
 8004f8c:	08023850 	.word	0x08023850
 8004f90:	0802385c 	.word	0x0802385c
 8004f94:	900003f4 	.word	0x900003f4
 8004f98:	240014e8 	.word	0x240014e8
 8004f9c:	08004eed 	.word	0x08004eed

08004fa0 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 8004fa0:	b480      	push	{r7}
 8004fa2:	b085      	sub	sp, #20
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	60f8      	str	r0, [r7, #12]
 8004fa8:	460b      	mov	r3, r1
 8004faa:	607a      	str	r2, [r7, #4]
 8004fac:	817b      	strh	r3, [r7, #10]
    {
        (void)prevChar; // Unused variable
        (void)glyph;    // Unused variable
        return 0;
 8004fae:	2300      	movs	r3, #0
    }
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3714      	adds	r7, #20
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr

08004fbc <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 8004fbc:	b480      	push	{r7}
 8004fbe:	b083      	sub	sp, #12
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8004fc4:	2300      	movs	r3, #0
    }
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	370c      	adds	r7, #12
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr

08004fd2 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 8004fd2:	b480      	push	{r7}
 8004fd4:	b083      	sub	sp, #12
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8004fda:	2300      	movs	r3, #0
    }
 8004fdc:	4618      	mov	r0, r3
 8004fde:	370c      	adds	r7, #12
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr

08004fe8 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 8004fe8:	b480      	push	{r7}
 8004fea:	b085      	sub	sp, #20
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	60f8      	str	r0, [r7, #12]
 8004ff0:	60b9      	str	r1, [r7, #8]
 8004ff2:	4613      	mov	r3, r2
 8004ff4:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 8004ff6:	4a07      	ldr	r2, [pc, #28]	; (8005014 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6013      	str	r3, [r2, #0]
        fonts = f;
 8004ffc:	4a06      	ldr	r2, [pc, #24]	; (8005018 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 8005002:	4a06      	ldr	r2, [pc, #24]	; (800501c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 8005004:	88fb      	ldrh	r3, [r7, #6]
 8005006:	8013      	strh	r3, [r2, #0]
    }
 8005008:	bf00      	nop
 800500a:	3714      	adds	r7, #20
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr
 8005014:	240069f4 	.word	0x240069f4
 8005018:	240069fc 	.word	0x240069fc
 800501c:	240069f8 	.word	0x240069f8

08005020 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8005020:	b40e      	push	{r1, r2, r3}
 8005022:	b580      	push	{r7, lr}
 8005024:	b085      	sub	sp, #20
 8005026:	af00      	add	r7, sp, #0
 8005028:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 800502a:	f107 0320 	add.w	r3, r7, #32
 800502e:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	69fa      	ldr	r2, [r7, #28]
 8005034:	2100      	movs	r1, #0
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f010 fe4e 	bl	8015cd8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 800503c:	4603      	mov	r3, r0
 800503e:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8005040:	89fb      	ldrh	r3, [r7, #14]
}
 8005042:	4618      	mov	r0, r3
 8005044:	3714      	adds	r7, #20
 8005046:	46bd      	mov	sp, r7
 8005048:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800504c:	b003      	add	sp, #12
 800504e:	4770      	bx	lr

08005050 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8005050:	b40c      	push	{r2, r3}
 8005052:	b580      	push	{r7, lr}
 8005054:	b084      	sub	sp, #16
 8005056:	af00      	add	r7, sp, #0
 8005058:	6078      	str	r0, [r7, #4]
 800505a:	460b      	mov	r3, r1
 800505c:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 800505e:	f107 031c 	add.w	r3, r7, #28
 8005062:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8005064:	78f9      	ldrb	r1, [r7, #3]
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	69ba      	ldr	r2, [r7, #24]
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f010 fe34 	bl	8015cd8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8005070:	4603      	mov	r3, r0
 8005072:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8005074:	89fb      	ldrh	r3, [r7, #14]
}
 8005076:	4618      	mov	r0, r3
 8005078:	3710      	adds	r7, #16
 800507a:	46bd      	mov	sp, r7
 800507c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005080:	b002      	add	sp, #8
 8005082:	4770      	bx	lr

08005084 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b08a      	sub	sp, #40	; 0x28
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	460b      	mov	r3, r1
 800508e:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005094:	2b00      	cmp	r3, #0
 8005096:	d016      	beq.n	80050c6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	3322      	adds	r3, #34	; 0x22
 800509c:	627b      	str	r3, [r7, #36]	; 0x24
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 800509e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a0:	8adb      	ldrh	r3, [r3, #22]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d105      	bne.n	80050b2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 80050a6:	4b43      	ldr	r3, [pc, #268]	; (80051b4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 80050a8:	4a43      	ldr	r2, [pc, #268]	; (80051b8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 80050aa:	21c5      	movs	r1, #197	; 0xc5
 80050ac:	4843      	ldr	r0, [pc, #268]	; (80051bc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 80050ae:	f01b fe8b 	bl	8020dc8 <__assert_func>
            return buffer[pos];
 80050b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b4:	8a9b      	ldrh	r3, [r3, #20]
 80050b6:	461a      	mov	r2, r3
 80050b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ba:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d001      	beq.n	80050c6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 80050c2:	2301      	movs	r3, #1
 80050c4:	e000      	b.n	80050c8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 80050c6:	2300      	movs	r3, #0
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d06a      	beq.n	80051a2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f012 f8a9 	bl	8017224 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	3322      	adds	r3, #34	; 0x22
 80050d6:	623b      	str	r3, [r7, #32]
 80050d8:	2301      	movs	r3, #1
 80050da:	83fb      	strh	r3, [r7, #30]
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 80050dc:	6a3b      	ldr	r3, [r7, #32]
 80050de:	8adb      	ldrh	r3, [r3, #22]
 80050e0:	8bfa      	ldrh	r2, [r7, #30]
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d305      	bcc.n	80050f2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 80050e6:	4b36      	ldr	r3, [pc, #216]	; (80051c0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 80050e8:	4a36      	ldr	r2, [pc, #216]	; (80051c4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 80050ea:	21cb      	movs	r1, #203	; 0xcb
 80050ec:	4833      	ldr	r0, [pc, #204]	; (80051bc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 80050ee:	f01b fe6b 	bl	8020dc8 <__assert_func>
            const uint16_t index = pos + offset;
 80050f2:	6a3b      	ldr	r3, [r7, #32]
 80050f4:	8a9a      	ldrh	r2, [r3, #20]
 80050f6:	8bfb      	ldrh	r3, [r7, #30]
 80050f8:	4413      	add	r3, r2
 80050fa:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 80050fc:	8bbb      	ldrh	r3, [r7, #28]
 80050fe:	2b09      	cmp	r3, #9
 8005100:	d801      	bhi.n	8005106 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 8005102:	8bbb      	ldrh	r3, [r7, #28]
 8005104:	e001      	b.n	800510a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 8005106:	8bbb      	ldrh	r3, [r7, #28]
 8005108:	3b0a      	subs	r3, #10
 800510a:	6a3a      	ldr	r2, [r7, #32]
 800510c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005110:	f640 123f 	movw	r2, #2367	; 0x93f
 8005114:	4293      	cmp	r3, r2
 8005116:	bf0c      	ite	eq
 8005118:	2301      	moveq	r3, #1
 800511a:	2300      	movne	r3, #0
 800511c:	b2db      	uxtb	r3, r3
 800511e:	2b00      	cmp	r3, #0
 8005120:	d03f      	beq.n	80051a2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	3322      	adds	r3, #34	; 0x22
 8005126:	687a      	ldr	r2, [r7, #4]
 8005128:	3222      	adds	r2, #34	; 0x22
 800512a:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 800512c:	68ba      	ldr	r2, [r7, #8]
 800512e:	8ad2      	ldrh	r2, [r2, #22]
 8005130:	2a00      	cmp	r2, #0
 8005132:	d105      	bne.n	8005140 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 8005134:	4b1f      	ldr	r3, [pc, #124]	; (80051b4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8005136:	4a20      	ldr	r2, [pc, #128]	; (80051b8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8005138:	21c5      	movs	r1, #197	; 0xc5
 800513a:	4820      	ldr	r0, [pc, #128]	; (80051bc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800513c:	f01b fe44 	bl	8020dc8 <__assert_func>
            return buffer[pos];
 8005140:	68ba      	ldr	r2, [r7, #8]
 8005142:	8a92      	ldrh	r2, [r2, #20]
 8005144:	4611      	mov	r1, r2
 8005146:	68ba      	ldr	r2, [r7, #8]
 8005148:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800514c:	613b      	str	r3, [r7, #16]
 800514e:	4613      	mov	r3, r2
 8005150:	81fb      	strh	r3, [r7, #14]
            buffer[pos] = newChar;
        }

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	8adb      	ldrh	r3, [r3, #22]
 8005156:	2b01      	cmp	r3, #1
 8005158:	d806      	bhi.n	8005168 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 800515a:	4b1b      	ldr	r3, [pc, #108]	; (80051c8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 800515c:	4a1b      	ldr	r2, [pc, #108]	; (80051cc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 800515e:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8005162:	4816      	ldr	r0, [pc, #88]	; (80051bc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8005164:	f01b fe30 	bl	8020dc8 <__assert_func>
            const uint16_t index = pos + 1;
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	8a9b      	ldrh	r3, [r3, #20]
 800516c:	3301      	adds	r3, #1
 800516e:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 8005170:	89bb      	ldrh	r3, [r7, #12]
 8005172:	2b09      	cmp	r3, #9
 8005174:	d801      	bhi.n	800517a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 8005176:	89bb      	ldrh	r3, [r7, #12]
 8005178:	e000      	b.n	800517c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 800517a:	2300      	movs	r3, #0
 800517c:	693a      	ldr	r2, [r7, #16]
 800517e:	89f9      	ldrh	r1, [r7, #14]
 8005180:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 8005184:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	3322      	adds	r3, #34	; 0x22
 800518a:	61bb      	str	r3, [r7, #24]
 800518c:	f640 133f 	movw	r3, #2367	; 0x93f
 8005190:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 8005192:	69bb      	ldr	r3, [r7, #24]
 8005194:	8a9b      	ldrh	r3, [r3, #20]
 8005196:	4619      	mov	r1, r3
 8005198:	69bb      	ldr	r3, [r7, #24]
 800519a:	8afa      	ldrh	r2, [r7, #22]
 800519c:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 80051a0:	bf00      	nop
        }
    }
    return getNextChar();
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f011 ff40 	bl	8017028 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80051a8:	4603      	mov	r3, r0
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3728      	adds	r7, #40	; 0x28
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop
 80051b4:	080225d0 	.word	0x080225d0
 80051b8:	080225dc 	.word	0x080225dc
 80051bc:	08022688 	.word	0x08022688
 80051c0:	080226d4 	.word	0x080226d4
 80051c4:	080226e4 	.word	0x080226e4
 80051c8:	080227b8 	.word	0x080227b8
 80051cc:	080227c4 	.word	0x080227c4

080051d0 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b082      	sub	sp, #8
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f011 feee 	bl	8016fba <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 80051de:	bf00      	nop
 80051e0:	3708      	adds	r7, #8
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}

080051e6 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 80051e6:	b580      	push	{r7, lr}
 80051e8:	b088      	sub	sp, #32
 80051ea:	af02      	add	r7, sp, #8
 80051ec:	60f8      	str	r0, [r7, #12]
 80051ee:	1d38      	adds	r0, r7, #4
 80051f0:	e880 0006 	stmia.w	r0, {r1, r2}
 80051f4:	603b      	str	r3, [r7, #0]
    va_list pArg;
    va_start(pArg, format);
 80051f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80051fa:	617b      	str	r3, [r7, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 80051fc:	1d39      	adds	r1, r7, #4
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	9301      	str	r3, [sp, #4]
 8005202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005204:	9300      	str	r3, [sp, #0]
 8005206:	6a3b      	ldr	r3, [r7, #32]
 8005208:	683a      	ldr	r2, [r7, #0]
 800520a:	68f8      	ldr	r0, [r7, #12]
 800520c:	f00f f9be 	bl	801458c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 8005210:	bf00      	nop
 8005212:	3718      	adds	r7, #24
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}

08005218 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8005218:	b590      	push	{r4, r7, lr}
 800521a:	b085      	sub	sp, #20
 800521c:	af00      	add	r7, sp, #0
 800521e:	4603      	mov	r3, r0
 8005220:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 8005222:	2300      	movs	r3, #0
 8005224:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 8005226:	88fb      	ldrh	r3, [r7, #6]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d127      	bne.n	800527c <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 800522c:	88fb      	ldrh	r3, [r7, #6]
 800522e:	4a1e      	ldr	r2, [pc, #120]	; (80052a8 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8005230:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d016      	beq.n	8005266 <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 8005238:	88fb      	ldrh	r3, [r7, #6]
 800523a:	4a1b      	ldr	r2, [pc, #108]	; (80052a8 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 800523c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005240:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	68ba      	ldr	r2, [r7, #8]
 8005248:	4413      	add	r3, r2
 800524a:	4a18      	ldr	r2, [pc, #96]	; (80052ac <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 800524c:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	68ba      	ldr	r2, [r7, #8]
 8005254:	4413      	add	r3, r2
 8005256:	4a16      	ldr	r2, [pc, #88]	; (80052b0 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8005258:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	68ba      	ldr	r2, [r7, #8]
 8005260:	4413      	add	r3, r2
 8005262:	60fb      	str	r3, [r7, #12]
 8005264:	e00a      	b.n	800527c <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 8005266:	4b11      	ldr	r3, [pc, #68]	; (80052ac <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8005268:	4a12      	ldr	r2, [pc, #72]	; (80052b4 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 800526a:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 800526c:	4a12      	ldr	r2, [pc, #72]	; (80052b8 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 800526e:	4b10      	ldr	r3, [pc, #64]	; (80052b0 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8005270:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8005272:	88fb      	ldrh	r3, [r7, #6]
 8005274:	4a11      	ldr	r2, [pc, #68]	; (80052bc <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 8005276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800527a:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d00d      	beq.n	800529e <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 8005282:	4a0f      	ldr	r2, [pc, #60]	; (80052c0 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 8005284:	88fb      	ldrh	r3, [r7, #6]
 8005286:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8005288:	f000 f83e 	bl	8005308 <_ZN17TypedTextDatabase8getFontsEv>
 800528c:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 800528e:	f000 f833 	bl	80052f8 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 8005292:	4603      	mov	r3, r0
 8005294:	461a      	mov	r2, r3
 8005296:	4621      	mov	r1, r4
 8005298:	68f8      	ldr	r0, [r7, #12]
 800529a:	f7ff fea5 	bl	8004fe8 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 800529e:	bf00      	nop
 80052a0:	3714      	adds	r7, #20
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd90      	pop	{r4, r7, pc}
 80052a6:	bf00      	nop
 80052a8:	24001518 	.word	0x24001518
 80052ac:	24001520 	.word	0x24001520
 80052b0:	24001524 	.word	0x24001524
 80052b4:	90000408 	.word	0x90000408
 80052b8:	90000404 	.word	0x90000404
 80052bc:	90000424 	.word	0x90000424
 80052c0:	2400151c 	.word	0x2400151c

080052c4 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 80052c4:	b480      	push	{r7}
 80052c6:	b083      	sub	sp, #12
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	460b      	mov	r3, r1
 80052ce:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 80052d0:	4b07      	ldr	r3, [pc, #28]	; (80052f0 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	4b07      	ldr	r3, [pc, #28]	; (80052f4 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 80052d6:	6819      	ldr	r1, [r3, #0]
 80052d8:	887b      	ldrh	r3, [r7, #2]
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	440b      	add	r3, r1
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	005b      	lsls	r3, r3, #1
 80052e2:	4413      	add	r3, r2
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	370c      	adds	r7, #12
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr
 80052f0:	24001520 	.word	0x24001520
 80052f4:	24001524 	.word	0x24001524

080052f8 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 80052f8:	b480      	push	{r7}
 80052fa:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 80052fc:	2301      	movs	r3, #1
}
 80052fe:	4618      	mov	r0, r3
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr

08005308 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 8005308:	b480      	push	{r7}
 800530a:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 800530c:	4b02      	ldr	r3, [pc, #8]	; (8005318 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 800530e:	4618      	mov	r0, r3
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr
 8005318:	24001528 	.word	0x24001528

0800531c <_Z41__static_initialization_and_destruction_0ii>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 800531c:	b580      	push	{r7, lr}
 800531e:	b082      	sub	sp, #8
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	6039      	str	r1, [r7, #0]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2b01      	cmp	r3, #1
 800532a:	d113      	bne.n	8005354 <_Z41__static_initialization_and_destruction_0ii+0x38>
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005332:	4293      	cmp	r3, r2
 8005334:	d10e      	bne.n	8005354 <_Z41__static_initialization_and_destruction_0ii+0x38>
    &(getFont_verdana_20_4bpp()),
 8005336:	f7ff fd87 	bl	8004e48 <_Z23getFont_verdana_20_4bppv>
 800533a:	4603      	mov	r3, r0
};
 800533c:	4a07      	ldr	r2, [pc, #28]	; (800535c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800533e:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 8005340:	f7ff fddc 	bl	8004efc <_Z23getFont_verdana_40_4bppv>
 8005344:	4603      	mov	r3, r0
};
 8005346:	4a05      	ldr	r2, [pc, #20]	; (800535c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8005348:	6053      	str	r3, [r2, #4]
    &(getFont_verdana_10_4bpp())
 800534a:	f7ff fd23 	bl	8004d94 <_Z23getFont_verdana_10_4bppv>
 800534e:	4603      	mov	r3, r0
};
 8005350:	4a02      	ldr	r2, [pc, #8]	; (800535c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8005352:	6093      	str	r3, [r2, #8]
} // namespace TypedTextDatabase
 8005354:	bf00      	nop
 8005356:	3708      	adds	r7, #8
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}
 800535c:	24001528 	.word	0x24001528

08005360 <_GLOBAL__sub_I_touchgfx_fonts>:
 8005360:	b580      	push	{r7, lr}
 8005362:	af00      	add	r7, sp, #0
 8005364:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005368:	2001      	movs	r0, #1
 800536a:	f7ff ffd7 	bl	800531c <_Z41__static_initialization_and_destruction_0ii>
 800536e:	bd80      	pop	{r7, pc}

08005370 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8005370:	b580      	push	{r7, lr}
 8005372:	b084      	sub	sp, #16
 8005374:	af00      	add	r7, sp, #0
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	60b9      	str	r1, [r7, #8]
 800537a:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	687a      	ldr	r2, [r7, #4]
 8005380:	68b9      	ldr	r1, [r7, #8]
 8005382:	4618      	mov	r0, r3
 8005384:	f7fe fcbe 	bl	8003d04 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8005388:	4a03      	ldr	r2, [pc, #12]	; (8005398 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	601a      	str	r2, [r3, #0]
{

}
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	4618      	mov	r0, r3
 8005392:	3710      	adds	r7, #16
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}
 8005398:	08022b3c 	.word	0x08022b3c

0800539c <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2200      	movs	r2, #0
 80053a8:	601a      	str	r2, [r3, #0]
{

}
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4618      	mov	r0, r3
 80053ae:	370c      	adds	r7, #12
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr

080053b8 <_ZN5Model4tickEv>:

void Model::tick()
{
 80053b8:	b480      	push	{r7}
 80053ba:	b083      	sub	sp, #12
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]

}
 80053c0:	bf00      	nop
 80053c2:	370c      	adds	r7, #12
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr

080053cc <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 80053cc:	b480      	push	{r7}
 80053ce:	b083      	sub	sp, #12
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
    {
    }
 80053d4:	bf00      	nop
 80053d6:	370c      	adds	r7, #12
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr

080053e0 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 80053e0:	b480      	push	{r7}
 80053e2:	b083      	sub	sp, #12
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
    {
    }
 80053e8:	bf00      	nop
 80053ea:	370c      	adds	r7, #12
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr

080053f4 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 80053f4:	b480      	push	{r7}
 80053f6:	b083      	sub	sp, #12
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
    {
 80053fc:	4a04      	ldr	r2, [pc, #16]	; (8005410 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	601a      	str	r2, [r3, #0]
    }
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	4618      	mov	r0, r3
 8005406:	370c      	adds	r7, #12
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr
 8005410:	08022fd0 	.word	0x08022fd0

08005414 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 8005414:	b580      	push	{r7, lr}
 8005416:	b082      	sub	sp, #8
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
    }
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f7ff ffe9 	bl	80053f4 <_ZN8touchgfx9PresenterD1Ev>
 8005422:	2104      	movs	r1, #4
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f01b fca0 	bl	8020d6a <_ZdlPvj>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	4618      	mov	r0, r3
 800542e:	3708      	adds	r7, #8
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}

08005434 <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 8005434:	b480      	push	{r7}
 8005436:	b083      	sub	sp, #12
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
    {
 800543c:	4a04      	ldr	r2, [pc, #16]	; (8005450 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	601a      	str	r2, [r3, #0]
    }
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4618      	mov	r0, r3
 8005446:	370c      	adds	r7, #12
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr
 8005450:	08022fd0 	.word	0x08022fd0

08005454 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 8005454:	b480      	push	{r7}
 8005456:	b083      	sub	sp, #12
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	4a06      	ldr	r2, [pc, #24]	; (8005478 <_ZN13ModelListenerC1Ev+0x24>)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	601a      	str	r2, [r3, #0]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2200      	movs	r2, #0
 8005466:	605a      	str	r2, [r3, #4]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	4618      	mov	r0, r3
 800546c:	370c      	adds	r7, #12
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr
 8005476:	bf00      	nop
 8005478:	08022fc0 	.word	0x08022fc0

0800547c <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 800547c:	b480      	push	{r7}
 800547e:	b083      	sub	sp, #12
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	4a04      	ldr	r2, [pc, #16]	; (8005498 <_ZN13ModelListenerD1Ev+0x1c>)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	601a      	str	r2, [r3, #0]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	4618      	mov	r0, r3
 800548e:	370c      	adds	r7, #12
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr
 8005498:	08022fc0 	.word	0x08022fc0

0800549c <_ZN13ModelListenerD0Ev>:
 800549c:	b580      	push	{r7, lr}
 800549e:	b082      	sub	sp, #8
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f7ff ffe9 	bl	800547c <_ZN13ModelListenerD1Ev>
 80054aa:	2108      	movs	r1, #8
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f01b fc5c 	bl	8020d6a <_ZdlPvj>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4618      	mov	r0, r3
 80054b6:	3708      	adds	r7, #8
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}

080054bc <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {}
 80054bc:	b580      	push	{r7, lr}
 80054be:	b082      	sub	sp, #8
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
 80054c4:	4a09      	ldr	r2, [pc, #36]	; (80054ec <_ZN16Screen1PresenterD1Ev+0x30>)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	601a      	str	r2, [r3, #0]
 80054ca:	4a09      	ldr	r2, [pc, #36]	; (80054f0 <_ZN16Screen1PresenterD1Ev+0x34>)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	605a      	str	r2, [r3, #4]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	3304      	adds	r3, #4
 80054d4:	4618      	mov	r0, r3
 80054d6:	f7ff ffd1 	bl	800547c <_ZN13ModelListenerD1Ev>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4618      	mov	r0, r3
 80054de:	f7ff ff89 	bl	80053f4 <_ZN8touchgfx9PresenterD1Ev>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	4618      	mov	r0, r3
 80054e6:	3708      	adds	r7, #8
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}
 80054ec:	08022f98 	.word	0x08022f98
 80054f0:	08022fb0 	.word	0x08022fb0

080054f4 <_ZThn4_N16Screen1PresenterD1Ev>:
 80054f4:	f1a0 0004 	sub.w	r0, r0, #4
 80054f8:	e7e0      	b.n	80054bc <_ZN16Screen1PresenterD1Ev>
 80054fa:	bf00      	nop

080054fc <_ZN16Screen1PresenterD0Ev>:
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b082      	sub	sp, #8
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f7ff ffd9 	bl	80054bc <_ZN16Screen1PresenterD1Ev>
 800550a:	2110      	movs	r1, #16
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f01b fc2c 	bl	8020d6a <_ZdlPvj>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	4618      	mov	r0, r3
 8005516:	3708      	adds	r7, #8
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}

0800551c <_ZThn4_N16Screen1PresenterD0Ev>:
 800551c:	f1a0 0004 	sub.w	r0, r0, #4
 8005520:	e7ec      	b.n	80054fc <_ZN16Screen1PresenterD0Ev>
	...

08005524 <_ZN16Screen1PresenterC1ER11Screen1View>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

Screen1Presenter::Screen1Presenter(Screen1View& v)
 8005524:	b580      	push	{r7, lr}
 8005526:	b082      	sub	sp, #8
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	6039      	str	r1, [r7, #0]
    : view(v)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	4618      	mov	r0, r3
 8005532:	f7ff ff7f 	bl	8005434 <_ZN8touchgfx9PresenterC1Ev>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	3304      	adds	r3, #4
 800553a:	4618      	mov	r0, r3
 800553c:	f7ff ff8a 	bl	8005454 <_ZN13ModelListenerC1Ev>
 8005540:	4a06      	ldr	r2, [pc, #24]	; (800555c <_ZN16Screen1PresenterC1ER11Screen1View+0x38>)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	601a      	str	r2, [r3, #0]
 8005546:	4a06      	ldr	r2, [pc, #24]	; (8005560 <_ZN16Screen1PresenterC1ER11Screen1View+0x3c>)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	605a      	str	r2, [r3, #4]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	683a      	ldr	r2, [r7, #0]
 8005550:	60da      	str	r2, [r3, #12]
{

}
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	4618      	mov	r0, r3
 8005556:	3708      	adds	r7, #8
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}
 800555c:	08022f98 	.word	0x08022f98
 8005560:	08022fb0 	.word	0x08022fb0

08005564 <_ZN16Screen1Presenter8activateEv>:

void Screen1Presenter::activate()
{
 8005564:	b480      	push	{r7}
 8005566:	b083      	sub	sp, #12
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]

}
 800556c:	bf00      	nop
 800556e:	370c      	adds	r7, #12
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr

08005578 <_ZN16Screen1Presenter10deactivateEv>:

void Screen1Presenter::deactivate()
{
 8005578:	b480      	push	{r7}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]

}
 8005580:	bf00      	nop
 8005582:	370c      	adds	r7, #12
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr

0800558c <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 800558c:	b580      	push	{r7, lr}
 800558e:	b082      	sub	sp, #8
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	4a05      	ldr	r2, [pc, #20]	; (80055ac <_ZN11Screen1ViewD1Ev+0x20>)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	601a      	str	r2, [r3, #0]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	4618      	mov	r0, r3
 800559e:	f7ff fb33 	bl	8004c08 <_ZN15Screen1ViewBaseD1Ev>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4618      	mov	r0, r3
 80055a6:	3708      	adds	r7, #8
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}
 80055ac:	08022fe8 	.word	0x08022fe8

080055b0 <_ZN11Screen1ViewD0Ev>:
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b082      	sub	sp, #8
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f7ff ffe7 	bl	800558c <_ZN11Screen1ViewD1Ev>
 80055be:	21e0      	movs	r1, #224	; 0xe0
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f01b fbd2 	bl	8020d6a <_ZdlPvj>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	4618      	mov	r0, r3
 80055ca:	3708      	adds	r7, #8
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}

080055d0 <_ZN11Screen1ViewC1Ev>:
#include <gui/screen1_screen/Screen1View.hpp>

Screen1View::Screen1View()
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b082      	sub	sp, #8
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	4618      	mov	r0, r3
 80055dc:	f7ff fa22 	bl	8004a24 <_ZN15Screen1ViewBaseC1Ev>
 80055e0:	4a03      	ldr	r2, [pc, #12]	; (80055f0 <_ZN11Screen1ViewC1Ev+0x20>)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	601a      	str	r2, [r3, #0]
{

}
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4618      	mov	r0, r3
 80055ea:	3708      	adds	r7, #8
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}
 80055f0:	08022fe8 	.word	0x08022fe8

080055f4 <_ZN11Screen1View11setupScreenEv>:

void Screen1View::setupScreen()
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b082      	sub	sp, #8
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::setupScreen();
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	4618      	mov	r0, r3
 8005600:	f7ff fb34 	bl	8004c6c <_ZN15Screen1ViewBase11setupScreenEv>
}
 8005604:	bf00      	nop
 8005606:	3708      	adds	r7, #8
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}

0800560c <_ZN11Screen1View14tearDownScreenEv>:

void Screen1View::tearDownScreen()
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b082      	sub	sp, #8
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::tearDownScreen();
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	4618      	mov	r0, r3
 8005618:	f7ff f8c0 	bl	800479c <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 800561c:	bf00      	nop
 800561e:	3708      	adds	r7, #8
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}

08005624 <FT5336_RegisterBusIO>:
  * @brief  Register IO bus to component object
  * @param  Component object pointer
  * @retval error status
  */
int32_t FT5336_RegisterBusIO (FT5336_Object_t *pObj, FT5336_IO_t *pIO)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b084      	sub	sp, #16
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d103      	bne.n	800563c <FT5336_RegisterBusIO+0x18>
  {
    ret = FT5336_ERROR;
 8005634:	f04f 33ff 	mov.w	r3, #4294967295
 8005638:	60fb      	str	r3, [r7, #12]
 800563a:	e02c      	b.n	8005696 <FT5336_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	685a      	ldr	r2, [r3, #4]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	891a      	ldrh	r2, [r3, #8]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	68da      	ldr	r2, [r3, #12]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	691a      	ldr	r2, [r3, #16]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	695a      	ldr	r2, [r3, #20]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = ReadRegWrap;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	4a0c      	ldr	r2, [pc, #48]	; (80056a0 <FT5336_RegisterBusIO+0x7c>)
 8005670:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	4a0b      	ldr	r2, [pc, #44]	; (80056a4 <FT5336_RegisterBusIO+0x80>)
 8005676:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	687a      	ldr	r2, [r7, #4]
 800567c:	621a      	str	r2, [r3, #32]

    if(pObj->IO.Init != NULL)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d004      	beq.n	8005690 <FT5336_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4798      	blx	r3
 800568c:	60f8      	str	r0, [r7, #12]
 800568e:	e002      	b.n	8005696 <FT5336_RegisterBusIO+0x72>
    }
    else
    {
      ret = FT5336_ERROR;
 8005690:	f04f 33ff 	mov.w	r3, #4294967295
 8005694:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8005696:	68fb      	ldr	r3, [r7, #12]
}
 8005698:	4618      	mov	r0, r3
 800569a:	3710      	adds	r7, #16
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}
 80056a0:	08005a9d 	.word	0x08005a9d
 80056a4:	08005ad1 	.word	0x08005ad1

080056a8 <FT5336_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to FT5336 sensor capabilities
  * @retval Component status
  */
int32_t FT5336_GetCapabilities(FT5336_Object_t *pObj, FT5336_Capabilities_t *Capabilities)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b083      	sub	sp, #12
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	2201      	movs	r2, #1
 80056b6:	701a      	strb	r2, [r3, #0]
  Capabilities->Gesture    = 1;
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	2201      	movs	r2, #1
 80056bc:	705a      	strb	r2, [r3, #1]
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	2205      	movs	r2, #5
 80056c2:	709a      	strb	r2, [r3, #2]
  Capabilities->MaxXl      = FT5336_MAX_X_LENGTH;
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80056ca:	605a      	str	r2, [r3, #4]
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	f44f 7288 	mov.w	r2, #272	; 0x110
 80056d2:	609a      	str	r2, [r3, #8]

  return FT5336_OK;
 80056d4:	2300      	movs	r3, #0
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	370c      	adds	r7, #12
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr

080056e2 <FT5336_Init>:
  * @param  pObj Component object pointer
  * @param  GestureInit: Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_Init(FT5336_Object_t *pObj)
{
 80056e2:	b580      	push	{r7, lr}
 80056e4:	b084      	sub	sp, #16
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
 80056ea:	2300      	movs	r3, #0
 80056ec:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 0U)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d10d      	bne.n	8005714 <FT5336_Init+0x32>
  {
    /* Initialize IO BUS layer */
    pObj->IO.Init();
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4798      	blx	r3
    /* This is called internal calibration of the touch screen                 */
    ret += FT5336_TS_Calibration(pObj);
#endif /* (FT5336_AUTO_CALIBRATION_ENABLED == 1) */
    /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
    /* Note TS_INT is active low                                                                      */
    ret += FT5336_DisableIT(pObj);
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f000 f987 	bl	8005a12 <FT5336_DisableIT>
 8005704:	4602      	mov	r2, r0
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	4413      	add	r3, r2
 800570a:	60fb      	str	r3, [r7, #12]

    pObj->IsInitialized = 1;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2201      	movs	r2, #1
 8005710:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  if(ret != FT5336_OK)
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d002      	beq.n	8005720 <FT5336_Init+0x3e>
  {
    ret = FT5336_ERROR;
 800571a:	f04f 33ff 	mov.w	r3, #4294967295
 800571e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8005720:	68fb      	ldr	r3, [r7, #12]
}
 8005722:	4618      	mov	r0, r3
 8005724:	3710      	adds	r7, #16
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}

0800572a <FT5336_DeInit>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  pObj Component object pointer
  * @retval FT5336_OK
  */
int32_t FT5336_DeInit(FT5336_Object_t *pObj)
{
 800572a:	b480      	push	{r7}
 800572c:	b085      	sub	sp, #20
 800572e:	af00      	add	r7, sp, #0
 8005730:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
 8005732:	2300      	movs	r3, #0
 8005734:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 1U)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800573c:	2b01      	cmp	r3, #1
 800573e:	d103      	bne.n	8005748 <FT5336_DeInit+0x1e>
  {
    pObj->IsInitialized = 0;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2200      	movs	r2, #0
 8005744:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return ret;
 8005748:	68fb      	ldr	r3, [r7, #12]
}
 800574a:	4618      	mov	r0, r3
 800574c:	3714      	adds	r7, #20
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr

08005756 <FT5336_GestureConfig>:
  * @param  pObj  Component object pointer
  * @param  GestureInit Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_GestureConfig(FT5336_Object_t *pObj, FT5336_Gesture_Init_t *GestureInit)
{
 8005756:	b580      	push	{r7, lr}
 8005758:	b084      	sub	sp, #16
 800575a:	af00      	add	r7, sp, #0
 800575c:	6078      	str	r0, [r7, #4]
 800575e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f103 0218 	add.w	r2, r3, #24
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	b2db      	uxtb	r3, r3
 800576c:	4619      	mov	r1, r3
 800576e:	4610      	mov	r0, r2
 8005770:	f000 fa25 	bl	8005bbe <ft5336_radian_value>
 8005774:	60f8      	str	r0, [r7, #12]
  ret += ft5336_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f103 0218 	add.w	r2, r3, #24
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	b2db      	uxtb	r3, r3
 8005782:	4619      	mov	r1, r3
 8005784:	4610      	mov	r0, r2
 8005786:	f000 fa2b 	bl	8005be0 <ft5336_offset_left_right>
 800578a:	4602      	mov	r2, r0
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	4413      	add	r3, r2
 8005790:	60fb      	str	r3, [r7, #12]
  ret += ft5336_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f103 0218 	add.w	r2, r3, #24
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	b2db      	uxtb	r3, r3
 800579e:	4619      	mov	r1, r3
 80057a0:	4610      	mov	r0, r2
 80057a2:	f000 fa2e 	bl	8005c02 <ft5336_offset_up_down>
 80057a6:	4602      	mov	r2, r0
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	4413      	add	r3, r2
 80057ac:	60fb      	str	r3, [r7, #12]
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f103 0218 	add.w	r2, r3, #24
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	68db      	ldr	r3, [r3, #12]
 80057b8:	b2db      	uxtb	r3, r3
 80057ba:	4619      	mov	r1, r3
 80057bc:	4610      	mov	r0, r2
 80057be:	f000 fa31 	bl	8005c24 <ft5336_disatnce_left_right>
 80057c2:	4602      	mov	r2, r0
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	4413      	add	r3, r2
 80057c8:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f103 0218 	add.w	r2, r3, #24
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	691b      	ldr	r3, [r3, #16]
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	4619      	mov	r1, r3
 80057d8:	4610      	mov	r0, r2
 80057da:	f000 fa34 	bl	8005c46 <ft5336_distance_up_down>
 80057de:	4602      	mov	r2, r0
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	4413      	add	r3, r2
 80057e4:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f103 0218 	add.w	r2, r3, #24
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	695b      	ldr	r3, [r3, #20]
 80057f0:	b2db      	uxtb	r3, r3
 80057f2:	4619      	mov	r1, r3
 80057f4:	4610      	mov	r0, r2
 80057f6:	f000 fa37 	bl	8005c68 <ft5336_distance_zoom>
 80057fa:	4602      	mov	r2, r0
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	4413      	add	r3, r2
 8005800:	60fb      	str	r3, [r7, #12]

  if(ret != FT5336_OK)
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d002      	beq.n	800580e <FT5336_GestureConfig+0xb8>
  {
    ret = FT5336_ERROR;
 8005808:	f04f 33ff 	mov.w	r3, #4294967295
 800580c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800580e:	68fb      	ldr	r3, [r7, #12]
}
 8005810:	4618      	mov	r0, r3
 8005812:	3710      	adds	r7, #16
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}

08005818 <FT5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  pObj Component object pointer
  * @retval The Device ID (two bytes).
  */
int32_t FT5336_ReadID(FT5336_Object_t *pObj, uint32_t *Id)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b082      	sub	sp, #8
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
 8005820:	6039      	str	r1, [r7, #0]
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	3318      	adds	r3, #24
 8005826:	6839      	ldr	r1, [r7, #0]
 8005828:	4618      	mov	r0, r3
 800582a:	f000 fa3f 	bl	8005cac <ft5336_chip_id>
 800582e:	4603      	mov	r3, r0
}
 8005830:	4618      	mov	r0, r3
 8005832:	3708      	adds	r7, #8
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}

08005838 <FT5336_GetState>:
  * @param  pObj Component object pointer
  * @param  State: Single Touch stucture pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetState(FT5336_Object_t *pObj, FT5336_State_t *State)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b084      	sub	sp, #16
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
 8005842:	2300      	movs	r3, #0
 8005844:	60fb      	str	r3, [r7, #12]
  uint8_t  data[4];

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f000 f908 	bl	8005a5c <FT5336_DetectTouch>
 800584c:	4603      	mov	r3, r0
 800584e:	461a      	mov	r2, r3
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	601a      	str	r2, [r3, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f103 0018 	add.w	r0, r3, #24
 800585a:	f107 0208 	add.w	r2, r7, #8
 800585e:	2304      	movs	r3, #4
 8005860:	2103      	movs	r1, #3
 8005862:	f000 f94f 	bl	8005b04 <ft5336_read_reg>
 8005866:	4603      	mov	r3, r0
 8005868:	2b00      	cmp	r3, #0
 800586a:	d003      	beq.n	8005874 <FT5336_GetState+0x3c>
  {
    ret = FT5336_ERROR;
 800586c:	f04f 33ff 	mov.w	r3, #4294967295
 8005870:	60fb      	str	r3, [r7, #12]
 8005872:	e00f      	b.n	8005894 <FT5336_GetState+0x5c>
  }
  else
  {
    /* Send back first ready X position to caller */
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
 8005874:	7a3b      	ldrb	r3, [r7, #8]
 8005876:	021b      	lsls	r3, r3, #8
 8005878:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800587c:	7a7a      	ldrb	r2, [r7, #9]
 800587e:	431a      	orrs	r2, r3
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
 8005884:	7abb      	ldrb	r3, [r7, #10]
 8005886:	021b      	lsls	r3, r3, #8
 8005888:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800588c:	7afa      	ldrb	r2, [r7, #11]
 800588e:	431a      	orrs	r2, r3
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005894:	68fb      	ldr	r3, [r7, #12]
}
 8005896:	4618      	mov	r0, r3
 8005898:	3710      	adds	r7, #16
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}

0800589e <FT5336_GetMultiTouchState>:
  * @param  pObj Component object pointer
  * @param  State Multi Touch structure pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetMultiTouchState(FT5336_Object_t *pObj, FT5336_MultiTouch_State_t *State)
{
 800589e:	b580      	push	{r7, lr}
 80058a0:	b08c      	sub	sp, #48	; 0x30
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	6078      	str	r0, [r7, #4]
 80058a6:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
 80058a8:	2300      	movs	r3, #0
 80058aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint8_t  data[30];
  uint32_t i;

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f000 f8d5 	bl	8005a5c <FT5336_DetectTouch>
 80058b2:	4603      	mov	r3, r0
 80058b4:	461a      	mov	r2, r3
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	601a      	str	r2, [r3, #0]

  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f103 0018 	add.w	r0, r3, #24
 80058c0:	f107 0208 	add.w	r2, r7, #8
 80058c4:	231e      	movs	r3, #30
 80058c6:	2103      	movs	r1, #3
 80058c8:	f000 f91c 	bl	8005b04 <ft5336_read_reg>
 80058cc:	4603      	mov	r3, r0
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d003      	beq.n	80058da <FT5336_GetMultiTouchState+0x3c>
  {
    ret = FT5336_ERROR;
 80058d2:	f04f 33ff 	mov.w	r3, #4294967295
 80058d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058d8:	e077      	b.n	80059ca <FT5336_GetMultiTouchState+0x12c>
  }
  else
  {
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 80058da:	2300      	movs	r3, #0
 80058dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80058de:	e071      	b.n	80059c4 <FT5336_GetMultiTouchState+0x126>
    {
    /* Send back first ready X position to caller */
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 80058e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058e2:	4613      	mov	r3, r2
 80058e4:	005b      	lsls	r3, r3, #1
 80058e6:	4413      	add	r3, r2
 80058e8:	005b      	lsls	r3, r3, #1
 80058ea:	3330      	adds	r3, #48	; 0x30
 80058ec:	443b      	add	r3, r7
 80058ee:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80058f2:	021b      	lsls	r3, r3, #8
 80058f4:	f403 6170 	and.w	r1, r3, #3840	; 0xf00
 80058f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058fa:	4613      	mov	r3, r2
 80058fc:	005b      	lsls	r3, r3, #1
 80058fe:	4413      	add	r3, r2
 8005900:	005b      	lsls	r3, r3, #1
 8005902:	3301      	adds	r3, #1
 8005904:	3330      	adds	r3, #48	; 0x30
 8005906:	443b      	add	r3, r7
 8005908:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800590c:	ea41 0203 	orr.w	r2, r1, r3
 8005910:	6839      	ldr	r1, [r7, #0]
 8005912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005914:	009b      	lsls	r3, r3, #2
 8005916:	440b      	add	r3, r1
 8005918:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 800591a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800591c:	4613      	mov	r3, r2
 800591e:	005b      	lsls	r3, r3, #1
 8005920:	4413      	add	r3, r2
 8005922:	005b      	lsls	r3, r3, #1
 8005924:	3302      	adds	r3, #2
 8005926:	3330      	adds	r3, #48	; 0x30
 8005928:	443b      	add	r3, r7
 800592a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800592e:	021b      	lsls	r3, r3, #8
 8005930:	f403 6170 	and.w	r1, r3, #3840	; 0xf00
 8005934:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005936:	4613      	mov	r3, r2
 8005938:	005b      	lsls	r3, r3, #1
 800593a:	4413      	add	r3, r2
 800593c:	005b      	lsls	r3, r3, #1
 800593e:	3303      	adds	r3, #3
 8005940:	3330      	adds	r3, #48	; 0x30
 8005942:	443b      	add	r3, r7
 8005944:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005948:	4319      	orrs	r1, r3
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800594e:	3206      	adds	r2, #6
 8005950:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Event to caller */
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
 8005954:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005956:	4613      	mov	r3, r2
 8005958:	005b      	lsls	r3, r3, #1
 800595a:	4413      	add	r3, r2
 800595c:	005b      	lsls	r3, r3, #1
 800595e:	3330      	adds	r3, #48	; 0x30
 8005960:	443b      	add	r3, r7
 8005962:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005966:	099b      	lsrs	r3, r3, #6
 8005968:	b2db      	uxtb	r3, r3
 800596a:	4619      	mov	r1, r3
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005970:	3210      	adds	r2, #16
 8005972:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Weight to caller */
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
 8005976:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005978:	4613      	mov	r3, r2
 800597a:	005b      	lsls	r3, r3, #1
 800597c:	4413      	add	r3, r2
 800597e:	005b      	lsls	r3, r3, #1
 8005980:	3304      	adds	r3, #4
 8005982:	3330      	adds	r3, #48	; 0x30
 8005984:	443b      	add	r3, r7
 8005986:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800598a:	4619      	mov	r1, r3
 800598c:	683a      	ldr	r2, [r7, #0]
 800598e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005990:	330a      	adds	r3, #10
 8005992:	009b      	lsls	r3, r3, #2
 8005994:	4413      	add	r3, r2
 8005996:	6059      	str	r1, [r3, #4]
    /* Send back first ready Area to caller */
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
 8005998:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800599a:	4613      	mov	r3, r2
 800599c:	005b      	lsls	r3, r3, #1
 800599e:	4413      	add	r3, r2
 80059a0:	005b      	lsls	r3, r3, #1
 80059a2:	3305      	adds	r3, #5
 80059a4:	3330      	adds	r3, #48	; 0x30
 80059a6:	443b      	add	r3, r7
 80059a8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80059ac:	091b      	lsrs	r3, r3, #4
 80059ae:	b2db      	uxtb	r3, r3
 80059b0:	4619      	mov	r1, r3
 80059b2:	683a      	ldr	r2, [r7, #0]
 80059b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b6:	3314      	adds	r3, #20
 80059b8:	009b      	lsls	r3, r3, #2
 80059ba:	4413      	add	r3, r2
 80059bc:	6059      	str	r1, [r3, #4]
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 80059be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059c0:	3301      	adds	r3, #1
 80059c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80059c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059c6:	2b04      	cmp	r3, #4
 80059c8:	d98a      	bls.n	80058e0 <FT5336_GetMultiTouchState+0x42>
    }
  }

  return ret;
 80059ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3730      	adds	r7, #48	; 0x30
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}

080059d4 <FT5336_GetGesture>:
  * @param  pObj Component object pointer
  * @param  GestureId: gesture ID
  * @retval Gesture ID.
  */
int32_t FT5336_GetGesture(FT5336_Object_t *pObj, uint8_t *GestureId)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b082      	sub	sp, #8
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	6039      	str	r1, [r7, #0]
  return ft5336_gest_id(&pObj->Ctx, GestureId);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	3318      	adds	r3, #24
 80059e2:	6839      	ldr	r1, [r7, #0]
 80059e4:	4618      	mov	r0, r3
 80059e6:	f000 f8bb 	bl	8005b60 <ft5336_gest_id>
 80059ea:	4603      	mov	r3, r0
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3708      	adds	r7, #8
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}

080059f4 <FT5336_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_EnableIT(FT5336_Object_t *pObj)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b082      	sub	sp, #8
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_TRIGGER);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	3318      	adds	r3, #24
 8005a00:	2101      	movs	r1, #1
 8005a02:	4618      	mov	r0, r3
 8005a04:	f000 f941 	bl	8005c8a <ft5336_g_mode>
 8005a08:	4603      	mov	r3, r0
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3708      	adds	r7, #8
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}

08005a12 <FT5336_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_DisableIT(FT5336_Object_t *pObj)
{
 8005a12:	b580      	push	{r7, lr}
 8005a14:	b082      	sub	sp, #8
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	3318      	adds	r3, #24
 8005a1e:	2100      	movs	r1, #0
 8005a20:	4618      	mov	r0, r3
 8005a22:	f000 f932 	bl	8005c8a <ft5336_g_mode>
 8005a26:	4603      	mov	r3, r0
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3708      	adds	r7, #8
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}

08005a30 <FT5336_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval TS interrupts status : always return 0 here
  */
int32_t FT5336_ITStatus(FT5336_Object_t *pObj)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b083      	sub	sp, #12
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
 8005a38:	2300      	movs	r3, #0
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	370c      	adds	r7, #12
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a44:	4770      	bx	lr

08005a46 <FT5336_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_ClearIT(FT5336_Object_t *pObj)
{
 8005a46:	b480      	push	{r7}
 8005a48:	b083      	sub	sp, #12
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
 8005a4e:	2300      	movs	r3, #0
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	370c      	adds	r7, #12
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr

08005a5c <FT5336_DetectTouch>:
  * @param  pObj Component object pointer
  * @retval Number of active touches detected (can be 0, 1 or 2) or FT5336_ERROR
  *         in case of error
  */
static int32_t FT5336_DetectTouch(FT5336_Object_t *pObj)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b084      	sub	sp, #16
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t nb_touch;

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	3318      	adds	r3, #24
 8005a68:	f107 020b 	add.w	r2, r7, #11
 8005a6c:	4611      	mov	r1, r2
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f000 f886 	bl	8005b80 <ft5336_td_status>
 8005a74:	4603      	mov	r3, r0
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d003      	beq.n	8005a82 <FT5336_DetectTouch+0x26>
  {
    ret = FT5336_ERROR;
 8005a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8005a7e:	60fb      	str	r3, [r7, #12]
 8005a80:	e007      	b.n	8005a92 <FT5336_DetectTouch+0x36>
  }
  else
  {
    if(nb_touch > FT5336_MAX_NB_TOUCH)
 8005a82:	7afb      	ldrb	r3, [r7, #11]
 8005a84:	2b05      	cmp	r3, #5
 8005a86:	d902      	bls.n	8005a8e <FT5336_DetectTouch+0x32>
    {
      /* If invalid number of touch detected, set it to zero */
      ret = 0;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	60fb      	str	r3, [r7, #12]
 8005a8c:	e001      	b.n	8005a92 <FT5336_DetectTouch+0x36>
    }
    else
    {
      ret = (int32_t)nb_touch;
 8005a8e:	7afb      	ldrb	r3, [r7, #11]
 8005a90:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 8005a92:	68fb      	ldr	r3, [r7, #12]
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	3710      	adds	r7, #16
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}

08005a9c <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8005a9c:	b590      	push	{r4, r7, lr}
 8005a9e:	b087      	sub	sp, #28
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	60f8      	str	r0, [r7, #12]
 8005aa4:	607a      	str	r2, [r7, #4]
 8005aa6:	461a      	mov	r2, r3
 8005aa8:	460b      	mov	r3, r1
 8005aaa:	72fb      	strb	r3, [r7, #11]
 8005aac:	4613      	mov	r3, r2
 8005aae:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	691c      	ldr	r4, [r3, #16]
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	8918      	ldrh	r0, [r3, #8]
 8005abc:	7afb      	ldrb	r3, [r7, #11]
 8005abe:	b299      	uxth	r1, r3
 8005ac0:	893b      	ldrh	r3, [r7, #8]
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	47a0      	blx	r4
 8005ac6:	4603      	mov	r3, r0
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	371c      	adds	r7, #28
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd90      	pop	{r4, r7, pc}

08005ad0 <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8005ad0:	b590      	push	{r4, r7, lr}
 8005ad2:	b087      	sub	sp, #28
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	60f8      	str	r0, [r7, #12]
 8005ad8:	607a      	str	r2, [r7, #4]
 8005ada:	461a      	mov	r2, r3
 8005adc:	460b      	mov	r3, r1
 8005ade:	72fb      	strb	r3, [r7, #11]
 8005ae0:	4613      	mov	r3, r2
 8005ae2:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	68dc      	ldr	r4, [r3, #12]
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	8918      	ldrh	r0, [r3, #8]
 8005af0:	7afb      	ldrb	r3, [r7, #11]
 8005af2:	b299      	uxth	r1, r3
 8005af4:	893b      	ldrh	r3, [r7, #8]
 8005af6:	687a      	ldr	r2, [r7, #4]
 8005af8:	47a0      	blx	r4
 8005afa:	4603      	mov	r3, r0
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	371c      	adds	r7, #28
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd90      	pop	{r4, r7, pc}

08005b04 <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 8005b04:	b590      	push	{r4, r7, lr}
 8005b06:	b085      	sub	sp, #20
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	60f8      	str	r0, [r7, #12]
 8005b0c:	607a      	str	r2, [r7, #4]
 8005b0e:	461a      	mov	r2, r3
 8005b10:	460b      	mov	r3, r1
 8005b12:	72fb      	strb	r3, [r7, #11]
 8005b14:	4613      	mov	r3, r2
 8005b16:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	685c      	ldr	r4, [r3, #4]
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	6898      	ldr	r0, [r3, #8]
 8005b20:	893b      	ldrh	r3, [r7, #8]
 8005b22:	7af9      	ldrb	r1, [r7, #11]
 8005b24:	687a      	ldr	r2, [r7, #4]
 8005b26:	47a0      	blx	r4
 8005b28:	4603      	mov	r3, r0
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3714      	adds	r7, #20
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd90      	pop	{r4, r7, pc}

08005b32 <ft5336_write_reg>:
  * @param  pdata pointer to data to be written
  * @param  length Length of data to write   
  * @retval Component status
  */
int32_t ft5336_write_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 8005b32:	b590      	push	{r4, r7, lr}
 8005b34:	b085      	sub	sp, #20
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	60f8      	str	r0, [r7, #12]
 8005b3a:	607a      	str	r2, [r7, #4]
 8005b3c:	461a      	mov	r2, r3
 8005b3e:	460b      	mov	r3, r1
 8005b40:	72fb      	strb	r3, [r7, #11]
 8005b42:	4613      	mov	r3, r2
 8005b44:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681c      	ldr	r4, [r3, #0]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	6898      	ldr	r0, [r3, #8]
 8005b4e:	893b      	ldrh	r3, [r7, #8]
 8005b50:	7af9      	ldrb	r1, [r7, #11]
 8005b52:	687a      	ldr	r2, [r7, #4]
 8005b54:	47a0      	blx	r4
 8005b56:	4603      	mov	r3, r0
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	3714      	adds	r7, #20
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd90      	pop	{r4, r7, pc}

08005b60 <ft5336_gest_id>:
  * @param  ctx Component context 
  * @param  value pointer to the value of FT5336_GEST_ID_REG register
  * @retval Component status
  */
int32_t  ft5336_gest_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b082      	sub	sp, #8
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	6039      	str	r1, [r7, #0]
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	683a      	ldr	r2, [r7, #0]
 8005b6e:	2101      	movs	r1, #1
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f7ff ffc7 	bl	8005b04 <ft5336_read_reg>
 8005b76:	4603      	mov	r3, r0
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3708      	adds	r7, #8
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}

08005b80 <ft5336_td_status>:
  * @param  ctx Component context 
  * @param  value pointer to the value of Touch Data Status register
  * @retval Component status
  */
int32_t  ft5336_td_status(ft5336_ctx_t *ctx, uint8_t *value)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b084      	sub	sp, #16
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	683a      	ldr	r2, [r7, #0]
 8005b8e:	2102      	movs	r1, #2
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f7ff ffb7 	bl	8005b04 <ft5336_read_reg>
 8005b96:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d10a      	bne.n	8005bb4 <ft5336_td_status+0x34>
  {
    *value &= FT5336_TD_STATUS_BIT_MASK; 
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	781b      	ldrb	r3, [r3, #0]
 8005ba2:	f003 030f 	and.w	r3, r3, #15
 8005ba6:	b2da      	uxtb	r2, r3
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_TD_STATUS_BIT_POSITION; 
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	781a      	ldrb	r2, [r3, #0]
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3710      	adds	r7, #16
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}

08005bbe <ft5336_radian_value>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_RADIAN_VALUE_REG register
  * @retval Component status
  */
int32_t  ft5336_radian_value(ft5336_ctx_t *ctx, uint8_t value)
{
 8005bbe:	b580      	push	{r7, lr}
 8005bc0:	b082      	sub	sp, #8
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	6078      	str	r0, [r7, #4]
 8005bc6:	460b      	mov	r3, r1
 8005bc8:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
 8005bca:	1cfa      	adds	r2, r7, #3
 8005bcc:	2301      	movs	r3, #1
 8005bce:	2191      	movs	r1, #145	; 0x91
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f7ff ffae 	bl	8005b32 <ft5336_write_reg>
 8005bd6:	4603      	mov	r3, r0
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3708      	adds	r7, #8
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}

08005be0 <ft5336_offset_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b082      	sub	sp, #8
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	460b      	mov	r3, r1
 8005bea:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
 8005bec:	1cfa      	adds	r2, r7, #3
 8005bee:	2301      	movs	r3, #1
 8005bf0:	2192      	movs	r1, #146	; 0x92
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f7ff ff9d 	bl	8005b32 <ft5336_write_reg>
 8005bf8:	4603      	mov	r3, r0
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3708      	adds	r7, #8
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}

08005c02 <ft5336_offset_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 8005c02:	b580      	push	{r7, lr}
 8005c04:	b082      	sub	sp, #8
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	6078      	str	r0, [r7, #4]
 8005c0a:	460b      	mov	r3, r1
 8005c0c:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
 8005c0e:	1cfa      	adds	r2, r7, #3
 8005c10:	2301      	movs	r3, #1
 8005c12:	2193      	movs	r1, #147	; 0x93
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f7ff ff8c 	bl	8005b32 <ft5336_write_reg>
 8005c1a:	4603      	mov	r3, r0
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3708      	adds	r7, #8
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}

08005c24 <ft5336_disatnce_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_disatnce_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b082      	sub	sp, #8
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
 8005c2c:	460b      	mov	r3, r1
 8005c2e:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
 8005c30:	1cfa      	adds	r2, r7, #3
 8005c32:	2301      	movs	r3, #1
 8005c34:	2194      	movs	r1, #148	; 0x94
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f7ff ff7b 	bl	8005b32 <ft5336_write_reg>
 8005c3c:	4603      	mov	r3, r0
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3708      	adds	r7, #8
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}

08005c46 <ft5336_distance_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 8005c46:	b580      	push	{r7, lr}
 8005c48:	b082      	sub	sp, #8
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	6078      	str	r0, [r7, #4]
 8005c4e:	460b      	mov	r3, r1
 8005c50:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
 8005c52:	1cfa      	adds	r2, r7, #3
 8005c54:	2301      	movs	r3, #1
 8005c56:	2195      	movs	r1, #149	; 0x95
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f7ff ff6a 	bl	8005b32 <ft5336_write_reg>
 8005c5e:	4603      	mov	r3, r0
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3708      	adds	r7, #8
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}

08005c68 <ft5336_distance_zoom>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_ZOOM_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_zoom(ft5336_ctx_t *ctx, uint8_t value)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b082      	sub	sp, #8
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	460b      	mov	r3, r1
 8005c72:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
 8005c74:	1cfa      	adds	r2, r7, #3
 8005c76:	2301      	movs	r3, #1
 8005c78:	2196      	movs	r1, #150	; 0x96
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f7ff ff59 	bl	8005b32 <ft5336_write_reg>
 8005c80:	4603      	mov	r3, r0
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3708      	adds	r7, #8
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}

08005c8a <ft5336_g_mode>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_GMODE_REG register
  * @retval Component status
  */
int32_t  ft5336_g_mode(ft5336_ctx_t *ctx, uint8_t value)
{
 8005c8a:	b580      	push	{r7, lr}
 8005c8c:	b082      	sub	sp, #8
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	6078      	str	r0, [r7, #4]
 8005c92:	460b      	mov	r3, r1
 8005c94:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
 8005c96:	1cfa      	adds	r2, r7, #3
 8005c98:	2301      	movs	r3, #1
 8005c9a:	21a4      	movs	r1, #164	; 0xa4
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f7ff ff48 	bl	8005b32 <ft5336_write_reg>
 8005ca2:	4603      	mov	r3, r0
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3708      	adds	r7, #8
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}

08005cac <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b084      	sub	sp, #16
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_CHIP_ID_REG, (uint8_t *)value, 1);
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	683a      	ldr	r2, [r7, #0]
 8005cba:	21a8      	movs	r1, #168	; 0xa8
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f7ff ff21 	bl	8005b04 <ft5336_read_reg>
 8005cc2:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d107      	bne.n	8005cda <ft5336_chip_id+0x2e>
  {
    *value &= FT5336_CHIP_ID_BIT_MASK; 
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	781a      	ldrb	r2, [r3, #0]
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_CHIP_ID_BIT_POSITION; 
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	781a      	ldrb	r2, [r3, #0]
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 8005cda:	68fb      	ldr	r3, [r7, #12]
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3710      	adds	r7, #16
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}

08005ce4 <MX25LM51245G_GetFlashInfo>:
  * @brief  Get Flash information
  * @param  pInfo pointer to information structure
  * @retval error status
  */
int32_t MX25LM51245G_GetFlashInfo(MX25LM51245G_Info_t *pInfo)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b083      	sub	sp, #12
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  /* Configure the structure with the memory configuration */
  pInfo->FlashSize              = MX25LM51245G_FLASH_SIZE;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005cf2:	601a      	str	r2, [r3, #0]
  pInfo->EraseSectorSize        = MX25LM51245G_SECTOR_64K;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005cfa:	605a      	str	r2, [r3, #4]
  pInfo->EraseSectorsNumber     = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SECTOR_64K);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005d02:	609a      	str	r2, [r3, #8]
  pInfo->EraseSubSectorSize     = MX25LM51245G_SUBSECTOR_4K;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005d0a:	60da      	str	r2, [r3, #12]
  pInfo->EraseSubSectorNumber   = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005d12:	611a      	str	r2, [r3, #16]
  pInfo->EraseSubSector1Size    = MX25LM51245G_SUBSECTOR_4K;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005d1a:	615a      	str	r2, [r3, #20]
  pInfo->EraseSubSector1Number  = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005d22:	619a      	str	r2, [r3, #24]
  pInfo->ProgPageSize           = MX25LM51245G_PAGE_SIZE;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d2a:	61da      	str	r2, [r3, #28]
  pInfo->ProgPagesNumber        = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_PAGE_SIZE);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8005d32:	621a      	str	r2, [r3, #32]

  return MX25LM51245G_OK;
 8005d34:	2300      	movs	r3, #0
};
 8005d36:	4618      	mov	r0, r3
 8005d38:	370c      	adds	r7, #12
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr

08005d42 <MX25LM51245G_AutoPollingMemReady>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate
  * @retval error status
  */
int32_t MX25LM51245G_AutoPollingMemReady(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 8005d42:	b580      	push	{r7, lr}
 8005d44:	b09c      	sub	sp, #112	; 0x70
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
 8005d4a:	460b      	mov	r3, r1
 8005d4c:	70fb      	strb	r3, [r7, #3]
 8005d4e:	4613      	mov	r3, r2
 8005d50:	70bb      	strb	r3, [r7, #2]
  OSPI_RegularCmdTypeDef  s_command = {0};
 8005d52:	f107 0320 	add.w	r3, r7, #32
 8005d56:	2250      	movs	r2, #80	; 0x50
 8005d58:	2100      	movs	r1, #0
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f01b fa39 	bl	80211d2 <memset>
  OSPI_AutoPollingTypeDef s_config = {0};
 8005d60:	f107 030c 	add.w	r3, r7, #12
 8005d64:	2200      	movs	r2, #0
 8005d66:	601a      	str	r2, [r3, #0]
 8005d68:	605a      	str	r2, [r3, #4]
 8005d6a:	609a      	str	r2, [r3, #8]
 8005d6c:	60da      	str	r2, [r3, #12]
 8005d6e:	611a      	str	r2, [r3, #16]

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8005d70:	78fb      	ldrb	r3, [r7, #3]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d105      	bne.n	8005d82 <MX25LM51245G_AutoPollingMemReady+0x40>
 8005d76:	78bb      	ldrb	r3, [r7, #2]
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d102      	bne.n	8005d82 <MX25LM51245G_AutoPollingMemReady+0x40>
  {
    return MX25LM51245G_ERROR;
 8005d7c:	f04f 33ff 	mov.w	r3, #4294967295
 8005d80:	e088      	b.n	8005e94 <MX25LM51245G_AutoPollingMemReady+0x152>
  }

  /* Configure automatic polling mode to wait for memory ready */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8005d82:	2300      	movs	r3, #0
 8005d84:	623b      	str	r3, [r7, #32]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8005d86:	2300      	movs	r3, #0
 8005d88:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8005d8a:	78fb      	ldrb	r3, [r7, #3]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d101      	bne.n	8005d94 <MX25LM51245G_AutoPollingMemReady+0x52>
 8005d90:	2301      	movs	r3, #1
 8005d92:	e000      	b.n	8005d96 <MX25LM51245G_AutoPollingMemReady+0x54>
 8005d94:	2304      	movs	r3, #4
 8005d96:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8005d98:	78bb      	ldrb	r3, [r7, #2]
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d101      	bne.n	8005da2 <MX25LM51245G_AutoPollingMemReady+0x60>
 8005d9e:	2308      	movs	r3, #8
 8005da0:	e000      	b.n	8005da4 <MX25LM51245G_AutoPollingMemReady+0x62>
 8005da2:	2300      	movs	r3, #0
 8005da4:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8005da6:	78fb      	ldrb	r3, [r7, #3]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d101      	bne.n	8005db0 <MX25LM51245G_AutoPollingMemReady+0x6e>
 8005dac:	2300      	movs	r3, #0
 8005dae:	e000      	b.n	8005db2 <MX25LM51245G_AutoPollingMemReady+0x70>
 8005db0:	2310      	movs	r3, #16
 8005db2:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 8005db4:	78fb      	ldrb	r3, [r7, #3]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d101      	bne.n	8005dbe <MX25LM51245G_AutoPollingMemReady+0x7c>
 8005dba:	2305      	movs	r3, #5
 8005dbc:	e001      	b.n	8005dc2 <MX25LM51245G_AutoPollingMemReady+0x80>
 8005dbe:	f240 53fa 	movw	r3, #1530	; 0x5fa
 8005dc2:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 8005dc4:	78fb      	ldrb	r3, [r7, #3]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d101      	bne.n	8005dce <MX25LM51245G_AutoPollingMemReady+0x8c>
 8005dca:	2300      	movs	r3, #0
 8005dcc:	e001      	b.n	8005dd2 <MX25LM51245G_AutoPollingMemReady+0x90>
 8005dce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8005dd4:	78bb      	ldrb	r3, [r7, #2]
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d102      	bne.n	8005de0 <MX25LM51245G_AutoPollingMemReady+0x9e>
 8005dda:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005dde:	e000      	b.n	8005de2 <MX25LM51245G_AutoPollingMemReady+0xa0>
 8005de0:	2300      	movs	r3, #0
 8005de2:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8005de4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005de8:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Address            = 0U;
 8005dea:	2300      	movs	r3, #0
 8005dec:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8005dee:	2300      	movs	r3, #0
 8005df0:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8005df2:	78fb      	ldrb	r3, [r7, #3]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d102      	bne.n	8005dfe <MX25LM51245G_AutoPollingMemReady+0xbc>
 8005df8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005dfc:	e001      	b.n	8005e02 <MX25LM51245G_AutoPollingMemReady+0xc0>
 8005dfe:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005e02:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8005e04:	78bb      	ldrb	r3, [r7, #2]
 8005e06:	2b01      	cmp	r3, #1
 8005e08:	d102      	bne.n	8005e10 <MX25LM51245G_AutoPollingMemReady+0xce>
 8005e0a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005e0e:	e000      	b.n	8005e12 <MX25LM51245G_AutoPollingMemReady+0xd0>
 8005e10:	2300      	movs	r3, #0
 8005e12:	663b      	str	r3, [r7, #96]	; 0x60
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8005e14:	78fb      	ldrb	r3, [r7, #3]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d101      	bne.n	8005e1e <MX25LM51245G_AutoPollingMemReady+0xdc>
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	e000      	b.n	8005e20 <MX25LM51245G_AutoPollingMemReady+0xde>
 8005e1e:	2305      	movs	r3, #5
 8005e20:	667b      	str	r3, [r7, #100]	; 0x64
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8005e22:	78bb      	ldrb	r3, [r7, #2]
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d101      	bne.n	8005e2c <MX25LM51245G_AutoPollingMemReady+0xea>
 8005e28:	2302      	movs	r3, #2
 8005e2a:	e000      	b.n	8005e2e <MX25LM51245G_AutoPollingMemReady+0xec>
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	65fb      	str	r3, [r7, #92]	; 0x5c
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 8005e30:	78bb      	ldrb	r3, [r7, #2]
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	d102      	bne.n	8005e3c <MX25LM51245G_AutoPollingMemReady+0xfa>
 8005e36:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8005e3a:	e000      	b.n	8005e3e <MX25LM51245G_AutoPollingMemReady+0xfc>
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	66bb      	str	r3, [r7, #104]	; 0x68
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8005e40:	2300      	movs	r3, #0
 8005e42:	66fb      	str	r3, [r7, #108]	; 0x6c

  s_config.Match         = 0U;
 8005e44:	2300      	movs	r3, #0
 8005e46:	60fb      	str	r3, [r7, #12]
  s_config.Mask          = MX25LM51245G_SR_WIP;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	613b      	str	r3, [r7, #16]
  s_config.MatchMode     = HAL_OSPI_MATCH_MODE_AND;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	617b      	str	r3, [r7, #20]
  s_config.Interval      = MX25LM51245G_AUTOPOLLING_INTERVAL_TIME;
 8005e50:	2310      	movs	r3, #16
 8005e52:	61fb      	str	r3, [r7, #28]
  s_config.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 8005e54:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005e58:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005e5a:	f107 0320 	add.w	r3, r7, #32
 8005e5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e62:	4619      	mov	r1, r3
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f004 fe09 	bl	800aa7c <HAL_OSPI_Command>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d002      	beq.n	8005e76 <MX25LM51245G_AutoPollingMemReady+0x134>
  {
    return MX25LM51245G_ERROR;
 8005e70:	f04f 33ff 	mov.w	r3, #4294967295
 8005e74:	e00e      	b.n	8005e94 <MX25LM51245G_AutoPollingMemReady+0x152>
  }

  if (HAL_OSPI_AutoPolling(Ctx, &s_config, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005e76:	f107 030c 	add.w	r3, r7, #12
 8005e7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e7e:	4619      	mov	r1, r3
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f004 ff9e 	bl	800adc2 <HAL_OSPI_AutoPolling>
 8005e86:	4603      	mov	r3, r0
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d002      	beq.n	8005e92 <MX25LM51245G_AutoPollingMemReady+0x150>
  {
    return MX25LM51245G_ERROR;
 8005e8c:	f04f 33ff 	mov.w	r3, #4294967295
 8005e90:	e000      	b.n	8005e94 <MX25LM51245G_AutoPollingMemReady+0x152>
  }

  return MX25LM51245G_OK;
 8005e92:	2300      	movs	r3, #0
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3770      	adds	r7, #112	; 0x70
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}

08005e9c <MX25LM51245G_EnableMemoryMappedModeSTR>:
  * @param  Mode Interface mode
  * @param  AddressSize Address size
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_EnableMemoryMappedModeSTR(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_AddressSize_t AddressSize)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b098      	sub	sp, #96	; 0x60
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	460b      	mov	r3, r1
 8005ea6:	70fb      	strb	r3, [r7, #3]
 8005ea8:	4613      	mov	r3, r2
 8005eaa:	70bb      	strb	r3, [r7, #2]
  OSPI_RegularCmdTypeDef      s_command = {0};
 8005eac:	f107 0310 	add.w	r3, r7, #16
 8005eb0:	2250      	movs	r2, #80	; 0x50
 8005eb2:	2100      	movs	r1, #0
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f01b f98c 	bl	80211d2 <memset>
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 8005eba:	f107 0308 	add.w	r3, r7, #8
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	601a      	str	r2, [r3, #0]
 8005ec2:	605a      	str	r2, [r3, #4]

  /* OPI mode and 3-bytes address size not supported by memory */
  if ((Mode == MX25LM51245G_OPI_MODE) && (AddressSize == MX25LM51245G_3BYTES_SIZE))
 8005ec4:	78fb      	ldrb	r3, [r7, #3]
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	d105      	bne.n	8005ed6 <MX25LM51245G_EnableMemoryMappedModeSTR+0x3a>
 8005eca:	78bb      	ldrb	r3, [r7, #2]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d102      	bne.n	8005ed6 <MX25LM51245G_EnableMemoryMappedModeSTR+0x3a>
  {
    return MX25LM51245G_ERROR;
 8005ed0:	f04f 33ff 	mov.w	r3, #4294967295
 8005ed4:	e088      	b.n	8005fe8 <MX25LM51245G_EnableMemoryMappedModeSTR+0x14c>
  }

  /* Initialize the read command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_READ_CFG;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	613b      	str	r3, [r7, #16]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8005eda:	2300      	movs	r3, #0
 8005edc:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8005ede:	78fb      	ldrb	r3, [r7, #3]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d101      	bne.n	8005ee8 <MX25LM51245G_EnableMemoryMappedModeSTR+0x4c>
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	e000      	b.n	8005eea <MX25LM51245G_EnableMemoryMappedModeSTR+0x4e>
 8005ee8:	2304      	movs	r3, #4
 8005eea:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8005eec:	2300      	movs	r3, #0
 8005eee:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8005ef0:	78fb      	ldrb	r3, [r7, #3]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d101      	bne.n	8005efa <MX25LM51245G_EnableMemoryMappedModeSTR+0x5e>
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	e000      	b.n	8005efc <MX25LM51245G_EnableMemoryMappedModeSTR+0x60>
 8005efa:	2310      	movs	r3, #16
 8005efc:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_FAST_READ_CMD : MX25LM51245G_4_BYTE_ADDR_FAST_READ_CMD) : MX25LM51245G_OCTA_READ_CMD;
 8005efe:	78fb      	ldrb	r3, [r7, #3]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d106      	bne.n	8005f12 <MX25LM51245G_EnableMemoryMappedModeSTR+0x76>
 8005f04:	78bb      	ldrb	r3, [r7, #2]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d101      	bne.n	8005f0e <MX25LM51245G_EnableMemoryMappedModeSTR+0x72>
 8005f0a:	230b      	movs	r3, #11
 8005f0c:	e003      	b.n	8005f16 <MX25LM51245G_EnableMemoryMappedModeSTR+0x7a>
 8005f0e:	230c      	movs	r3, #12
 8005f10:	e001      	b.n	8005f16 <MX25LM51245G_EnableMemoryMappedModeSTR+0x7a>
 8005f12:	f64e 4313 	movw	r3, #60435	; 0xec13
 8005f16:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8005f18:	78fb      	ldrb	r3, [r7, #3]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d102      	bne.n	8005f24 <MX25LM51245G_EnableMemoryMappedModeSTR+0x88>
 8005f1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005f22:	e001      	b.n	8005f28 <MX25LM51245G_EnableMemoryMappedModeSTR+0x8c>
 8005f24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f28:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AddressSize        = (AddressSize == MX25LM51245G_3BYTES_SIZE) ? HAL_OSPI_ADDRESS_24_BITS : HAL_OSPI_ADDRESS_32_BITS;
 8005f2e:	78bb      	ldrb	r3, [r7, #2]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d102      	bne.n	8005f3a <MX25LM51245G_EnableMemoryMappedModeSTR+0x9e>
 8005f34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005f38:	e001      	b.n	8005f3e <MX25LM51245G_EnableMemoryMappedModeSTR+0xa2>
 8005f3a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005f3e:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8005f40:	2300      	movs	r3, #0
 8005f42:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8005f44:	78fb      	ldrb	r3, [r7, #3]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d102      	bne.n	8005f50 <MX25LM51245G_EnableMemoryMappedModeSTR+0xb4>
 8005f4a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005f4e:	e001      	b.n	8005f54 <MX25LM51245G_EnableMemoryMappedModeSTR+0xb8>
 8005f50:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005f54:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 8005f56:	2300      	movs	r3, #0
 8005f58:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? DUMMY_CYCLES_READ : DUMMY_CYCLES_READ_OCTAL;
 8005f5a:	78fb      	ldrb	r3, [r7, #3]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d101      	bne.n	8005f64 <MX25LM51245G_EnableMemoryMappedModeSTR+0xc8>
 8005f60:	2308      	movs	r3, #8
 8005f62:	e000      	b.n	8005f66 <MX25LM51245G_EnableMemoryMappedModeSTR+0xca>
 8005f64:	2306      	movs	r3, #6
 8005f66:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Send the read command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005f70:	f107 0310 	add.w	r3, r7, #16
 8005f74:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f78:	4619      	mov	r1, r3
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f004 fd7e 	bl	800aa7c <HAL_OSPI_Command>
 8005f80:	4603      	mov	r3, r0
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d002      	beq.n	8005f8c <MX25LM51245G_EnableMemoryMappedModeSTR+0xf0>
  {
    return MX25LM51245G_ERROR;
 8005f86:	f04f 33ff 	mov.w	r3, #4294967295
 8005f8a:	e02d      	b.n	8005fe8 <MX25LM51245G_EnableMemoryMappedModeSTR+0x14c>
  }

  /* Initialize the program command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_WRITE_CFG;
 8005f8c:	2302      	movs	r3, #2
 8005f8e:	613b      	str	r3, [r7, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_PAGE_PROG_CMD : MX25LM51245G_4_BYTE_PAGE_PROG_CMD) : MX25LM51245G_OCTA_PAGE_PROG_CMD;
 8005f90:	78fb      	ldrb	r3, [r7, #3]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d106      	bne.n	8005fa4 <MX25LM51245G_EnableMemoryMappedModeSTR+0x108>
 8005f96:	78bb      	ldrb	r3, [r7, #2]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d101      	bne.n	8005fa0 <MX25LM51245G_EnableMemoryMappedModeSTR+0x104>
 8005f9c:	2302      	movs	r3, #2
 8005f9e:	e003      	b.n	8005fa8 <MX25LM51245G_EnableMemoryMappedModeSTR+0x10c>
 8005fa0:	2312      	movs	r3, #18
 8005fa2:	e001      	b.n	8005fa8 <MX25LM51245G_EnableMemoryMappedModeSTR+0x10c>
 8005fa4:	f241 23ed 	movw	r3, #4845	; 0x12ed
 8005fa8:	61bb      	str	r3, [r7, #24]
  s_command.DummyCycles        = 0U;
 8005faa:	2300      	movs	r3, #0
 8005fac:	657b      	str	r3, [r7, #84]	; 0x54

  /* Send the write command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005fae:	f107 0310 	add.w	r3, r7, #16
 8005fb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fb6:	4619      	mov	r1, r3
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f004 fd5f 	bl	800aa7c <HAL_OSPI_Command>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d002      	beq.n	8005fca <MX25LM51245G_EnableMemoryMappedModeSTR+0x12e>
  {
    return MX25LM51245G_ERROR;
 8005fc4:	f04f 33ff 	mov.w	r3, #4294967295
 8005fc8:	e00e      	b.n	8005fe8 <MX25LM51245G_EnableMemoryMappedModeSTR+0x14c>
  }

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	60bb      	str	r3, [r7, #8]

  if (HAL_OSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
 8005fce:	f107 0308 	add.w	r3, r7, #8
 8005fd2:	4619      	mov	r1, r3
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f004 ff7b 	bl	800aed0 <HAL_OSPI_MemoryMapped>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d002      	beq.n	8005fe6 <MX25LM51245G_EnableMemoryMappedModeSTR+0x14a>
  {
    return MX25LM51245G_ERROR;
 8005fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8005fe4:	e000      	b.n	8005fe8 <MX25LM51245G_EnableMemoryMappedModeSTR+0x14c>
  }

  return MX25LM51245G_OK;
 8005fe6:	2300      	movs	r3, #0
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3760      	adds	r7, #96	; 0x60
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}

08005ff0 <MX25LM51245G_EnableMemoryMappedModeDTR>:
  * @param  AddressSize Address size
  * @note   Only OPI mode support DTR transfer rate
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_EnableMemoryMappedModeDTR(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b098      	sub	sp, #96	; 0x60
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	460b      	mov	r3, r1
 8005ffa:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Mode);

  OSPI_RegularCmdTypeDef      s_command = {0};
 8005ffc:	f107 0310 	add.w	r3, r7, #16
 8006000:	2250      	movs	r2, #80	; 0x50
 8006002:	2100      	movs	r1, #0
 8006004:	4618      	mov	r0, r3
 8006006:	f01b f8e4 	bl	80211d2 <memset>
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 800600a:	f107 0308 	add.w	r3, r7, #8
 800600e:	2200      	movs	r2, #0
 8006010:	601a      	str	r2, [r3, #0]
 8006012:	605a      	str	r2, [r3, #4]

  /* Initialize the read command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_READ_CFG;
 8006014:	2301      	movs	r3, #1
 8006016:	613b      	str	r3, [r7, #16]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8006018:	2300      	movs	r3, #0
 800601a:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = HAL_OSPI_INSTRUCTION_8_LINES;
 800601c:	2304      	movs	r3, #4
 800601e:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_ENABLE;
 8006020:	2308      	movs	r3, #8
 8006022:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionSize    = HAL_OSPI_INSTRUCTION_16_BITS;
 8006024:	2310      	movs	r3, #16
 8006026:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = MX25LM51245G_OCTA_READ_DTR_CMD;
 8006028:	f64e 6311 	movw	r3, #60945	; 0xee11
 800602c:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = HAL_OSPI_ADDRESS_8_LINES;
 800602e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006032:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_ENABLE;
 8006034:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006038:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 800603a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800603e:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8006040:	2300      	movs	r3, #0
 8006042:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DataMode           = HAL_OSPI_DATA_8_LINES;
 8006044:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006048:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataDtrMode        = HAL_OSPI_DATA_DTR_ENABLE;
 800604a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800604e:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DummyCycles        = DUMMY_CYCLES_READ_OCTAL_DTR;
 8006050:	2306      	movs	r3, #6
 8006052:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DQSMode            = HAL_OSPI_DQS_ENABLE;
 8006054:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8006058:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800605a:	2300      	movs	r3, #0
 800605c:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800605e:	f107 0310 	add.w	r3, r7, #16
 8006062:	f241 3288 	movw	r2, #5000	; 0x1388
 8006066:	4619      	mov	r1, r3
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f004 fd07 	bl	800aa7c <HAL_OSPI_Command>
 800606e:	4603      	mov	r3, r0
 8006070:	2b00      	cmp	r3, #0
 8006072:	d002      	beq.n	800607a <MX25LM51245G_EnableMemoryMappedModeDTR+0x8a>
  {
    return MX25LM51245G_ERROR;
 8006074:	f04f 33ff 	mov.w	r3, #4294967295
 8006078:	e025      	b.n	80060c6 <MX25LM51245G_EnableMemoryMappedModeDTR+0xd6>
  }

  /* Initialize the program command */
  s_command.OperationType = HAL_OSPI_OPTYPE_WRITE_CFG;
 800607a:	2302      	movs	r3, #2
 800607c:	613b      	str	r3, [r7, #16]
  s_command.Instruction   = MX25LM51245G_OCTA_PAGE_PROG_CMD;
 800607e:	f241 23ed 	movw	r3, #4845	; 0x12ed
 8006082:	61bb      	str	r3, [r7, #24]
  s_command.DummyCycles   = 0U;
 8006084:	2300      	movs	r3, #0
 8006086:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DQSMode       = HAL_OSPI_DQS_DISABLE;
 8006088:	2300      	movs	r3, #0
 800608a:	65bb      	str	r3, [r7, #88]	; 0x58

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800608c:	f107 0310 	add.w	r3, r7, #16
 8006090:	f241 3288 	movw	r2, #5000	; 0x1388
 8006094:	4619      	mov	r1, r3
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f004 fcf0 	bl	800aa7c <HAL_OSPI_Command>
 800609c:	4603      	mov	r3, r0
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d002      	beq.n	80060a8 <MX25LM51245G_EnableMemoryMappedModeDTR+0xb8>
  {
    return MX25LM51245G_ERROR;
 80060a2:	f04f 33ff 	mov.w	r3, #4294967295
 80060a6:	e00e      	b.n	80060c6 <MX25LM51245G_EnableMemoryMappedModeDTR+0xd6>
  }
  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 80060a8:	2300      	movs	r3, #0
 80060aa:	60bb      	str	r3, [r7, #8]

  if (HAL_OSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
 80060ac:	f107 0308 	add.w	r3, r7, #8
 80060b0:	4619      	mov	r1, r3
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f004 ff0c 	bl	800aed0 <HAL_OSPI_MemoryMapped>
 80060b8:	4603      	mov	r3, r0
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d002      	beq.n	80060c4 <MX25LM51245G_EnableMemoryMappedModeDTR+0xd4>
  {
    return MX25LM51245G_ERROR;
 80060be:	f04f 33ff 	mov.w	r3, #4294967295
 80060c2:	e000      	b.n	80060c6 <MX25LM51245G_EnableMemoryMappedModeDTR+0xd6>
  }

  return MX25LM51245G_OK;
 80060c4:	2300      	movs	r3, #0
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	3760      	adds	r7, #96	; 0x60
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}

080060ce <MX25LM51245G_WriteEnable>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_WriteEnable(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 80060ce:	b580      	push	{r7, lr}
 80060d0:	b09c      	sub	sp, #112	; 0x70
 80060d2:	af00      	add	r7, sp, #0
 80060d4:	6078      	str	r0, [r7, #4]
 80060d6:	460b      	mov	r3, r1
 80060d8:	70fb      	strb	r3, [r7, #3]
 80060da:	4613      	mov	r3, r2
 80060dc:	70bb      	strb	r3, [r7, #2]
  OSPI_RegularCmdTypeDef     s_command = {0};
 80060de:	f107 0320 	add.w	r3, r7, #32
 80060e2:	2250      	movs	r2, #80	; 0x50
 80060e4:	2100      	movs	r1, #0
 80060e6:	4618      	mov	r0, r3
 80060e8:	f01b f873 	bl	80211d2 <memset>
  OSPI_AutoPollingTypeDef s_config = {0};
 80060ec:	f107 030c 	add.w	r3, r7, #12
 80060f0:	2200      	movs	r2, #0
 80060f2:	601a      	str	r2, [r3, #0]
 80060f4:	605a      	str	r2, [r3, #4]
 80060f6:	609a      	str	r2, [r3, #8]
 80060f8:	60da      	str	r2, [r3, #12]
 80060fa:	611a      	str	r2, [r3, #16]

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 80060fc:	78fb      	ldrb	r3, [r7, #3]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d105      	bne.n	800610e <MX25LM51245G_WriteEnable+0x40>
 8006102:	78bb      	ldrb	r3, [r7, #2]
 8006104:	2b01      	cmp	r3, #1
 8006106:	d102      	bne.n	800610e <MX25LM51245G_WriteEnable+0x40>
  {
    return MX25LM51245G_ERROR;
 8006108:	f04f 33ff 	mov.w	r3, #4294967295
 800610c:	e0a6      	b.n	800625c <MX25LM51245G_WriteEnable+0x18e>
  }

  /* Initialize the write enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800610e:	2300      	movs	r3, #0
 8006110:	623b      	str	r3, [r7, #32]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8006112:	2300      	movs	r3, #0
 8006114:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8006116:	78fb      	ldrb	r3, [r7, #3]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d101      	bne.n	8006120 <MX25LM51245G_WriteEnable+0x52>
 800611c:	2301      	movs	r3, #1
 800611e:	e000      	b.n	8006122 <MX25LM51245G_WriteEnable+0x54>
 8006120:	2304      	movs	r3, #4
 8006122:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8006124:	78bb      	ldrb	r3, [r7, #2]
 8006126:	2b01      	cmp	r3, #1
 8006128:	d101      	bne.n	800612e <MX25LM51245G_WriteEnable+0x60>
 800612a:	2308      	movs	r3, #8
 800612c:	e000      	b.n	8006130 <MX25LM51245G_WriteEnable+0x62>
 800612e:	2300      	movs	r3, #0
 8006130:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8006132:	78fb      	ldrb	r3, [r7, #3]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d101      	bne.n	800613c <MX25LM51245G_WriteEnable+0x6e>
 8006138:	2300      	movs	r3, #0
 800613a:	e000      	b.n	800613e <MX25LM51245G_WriteEnable+0x70>
 800613c:	2310      	movs	r3, #16
 800613e:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_ENABLE_CMD : MX25LM51245G_OCTA_WRITE_ENABLE_CMD;
 8006140:	78fb      	ldrb	r3, [r7, #3]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d101      	bne.n	800614a <MX25LM51245G_WriteEnable+0x7c>
 8006146:	2306      	movs	r3, #6
 8006148:	e001      	b.n	800614e <MX25LM51245G_WriteEnable+0x80>
 800614a:	f240 63f9 	movw	r3, #1785	; 0x6f9
 800614e:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8006150:	2300      	movs	r3, #0
 8006152:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8006154:	2300      	movs	r3, #0
 8006156:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DataMode           = HAL_OSPI_DATA_NONE;
 8006158:	2300      	movs	r3, #0
 800615a:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.DummyCycles        = 0U;
 800615c:	2300      	movs	r3, #0
 800615e:	667b      	str	r3, [r7, #100]	; 0x64
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8006160:	2300      	movs	r3, #0
 8006162:	66bb      	str	r3, [r7, #104]	; 0x68
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8006164:	2300      	movs	r3, #0
 8006166:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006168:	f107 0320 	add.w	r3, r7, #32
 800616c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006170:	4619      	mov	r1, r3
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f004 fc82 	bl	800aa7c <HAL_OSPI_Command>
 8006178:	4603      	mov	r3, r0
 800617a:	2b00      	cmp	r3, #0
 800617c:	d002      	beq.n	8006184 <MX25LM51245G_WriteEnable+0xb6>
  {
    return MX25LM51245G_ERROR;
 800617e:	f04f 33ff 	mov.w	r3, #4294967295
 8006182:	e06b      	b.n	800625c <MX25LM51245G_WriteEnable+0x18e>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_command.Instruction    = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 8006184:	78fb      	ldrb	r3, [r7, #3]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d101      	bne.n	800618e <MX25LM51245G_WriteEnable+0xc0>
 800618a:	2305      	movs	r3, #5
 800618c:	e001      	b.n	8006192 <MX25LM51245G_WriteEnable+0xc4>
 800618e:	f240 53fa 	movw	r3, #1530	; 0x5fa
 8006192:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 8006194:	78fb      	ldrb	r3, [r7, #3]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d101      	bne.n	800619e <MX25LM51245G_WriteEnable+0xd0>
 800619a:	2300      	movs	r3, #0
 800619c:	e001      	b.n	80061a2 <MX25LM51245G_WriteEnable+0xd4>
 800619e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80061a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AddressDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 80061a4:	78bb      	ldrb	r3, [r7, #2]
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d102      	bne.n	80061b0 <MX25LM51245G_WriteEnable+0xe2>
 80061aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80061ae:	e000      	b.n	80061b2 <MX25LM51245G_WriteEnable+0xe4>
 80061b0:	2300      	movs	r3, #0
 80061b2:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AddressSize    = HAL_OSPI_ADDRESS_32_BITS;
 80061b4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80061b8:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Address        = 0U;
 80061ba:	2300      	movs	r3, #0
 80061bc:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DataMode       = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 80061be:	78fb      	ldrb	r3, [r7, #3]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d102      	bne.n	80061ca <MX25LM51245G_WriteEnable+0xfc>
 80061c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80061c8:	e001      	b.n	80061ce <MX25LM51245G_WriteEnable+0x100>
 80061ca:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80061ce:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.DataDtrMode    = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 80061d0:	78bb      	ldrb	r3, [r7, #2]
 80061d2:	2b01      	cmp	r3, #1
 80061d4:	d102      	bne.n	80061dc <MX25LM51245G_WriteEnable+0x10e>
 80061d6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80061da:	e000      	b.n	80061de <MX25LM51245G_WriteEnable+0x110>
 80061dc:	2300      	movs	r3, #0
 80061de:	663b      	str	r3, [r7, #96]	; 0x60
  s_command.DummyCycles    = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 80061e0:	78fb      	ldrb	r3, [r7, #3]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d101      	bne.n	80061ea <MX25LM51245G_WriteEnable+0x11c>
 80061e6:	2300      	movs	r3, #0
 80061e8:	e000      	b.n	80061ec <MX25LM51245G_WriteEnable+0x11e>
 80061ea:	2305      	movs	r3, #5
 80061ec:	667b      	str	r3, [r7, #100]	; 0x64
  s_command.NbData         = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 80061ee:	78bb      	ldrb	r3, [r7, #2]
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	d101      	bne.n	80061f8 <MX25LM51245G_WriteEnable+0x12a>
 80061f4:	2302      	movs	r3, #2
 80061f6:	e000      	b.n	80061fa <MX25LM51245G_WriteEnable+0x12c>
 80061f8:	2301      	movs	r3, #1
 80061fa:	65fb      	str	r3, [r7, #92]	; 0x5c
  s_command.DQSMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 80061fc:	78bb      	ldrb	r3, [r7, #2]
 80061fe:	2b01      	cmp	r3, #1
 8006200:	d102      	bne.n	8006208 <MX25LM51245G_WriteEnable+0x13a>
 8006202:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8006206:	e000      	b.n	800620a <MX25LM51245G_WriteEnable+0x13c>
 8006208:	2300      	movs	r3, #0
 800620a:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800620c:	f107 0320 	add.w	r3, r7, #32
 8006210:	f241 3288 	movw	r2, #5000	; 0x1388
 8006214:	4619      	mov	r1, r3
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f004 fc30 	bl	800aa7c <HAL_OSPI_Command>
 800621c:	4603      	mov	r3, r0
 800621e:	2b00      	cmp	r3, #0
 8006220:	d002      	beq.n	8006228 <MX25LM51245G_WriteEnable+0x15a>
  {
    return MX25LM51245G_ERROR;
 8006222:	f04f 33ff 	mov.w	r3, #4294967295
 8006226:	e019      	b.n	800625c <MX25LM51245G_WriteEnable+0x18e>
  }

  s_config.Match           = 2U;
 8006228:	2302      	movs	r3, #2
 800622a:	60fb      	str	r3, [r7, #12]
  s_config.Mask            = 2U;
 800622c:	2302      	movs	r3, #2
 800622e:	613b      	str	r3, [r7, #16]
  s_config.MatchMode       = HAL_OSPI_MATCH_MODE_AND;
 8006230:	2300      	movs	r3, #0
 8006232:	617b      	str	r3, [r7, #20]
  s_config.Interval        = MX25LM51245G_AUTOPOLLING_INTERVAL_TIME;
 8006234:	2310      	movs	r3, #16
 8006236:	61fb      	str	r3, [r7, #28]
  s_config.AutomaticStop   = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 8006238:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800623c:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_AutoPolling(Ctx, &s_config, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800623e:	f107 030c 	add.w	r3, r7, #12
 8006242:	f241 3288 	movw	r2, #5000	; 0x1388
 8006246:	4619      	mov	r1, r3
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f004 fdba 	bl	800adc2 <HAL_OSPI_AutoPolling>
 800624e:	4603      	mov	r3, r0
 8006250:	2b00      	cmp	r3, #0
 8006252:	d002      	beq.n	800625a <MX25LM51245G_WriteEnable+0x18c>
  {
    return MX25LM51245G_ERROR;
 8006254:	f04f 33ff 	mov.w	r3, #4294967295
 8006258:	e000      	b.n	800625c <MX25LM51245G_WriteEnable+0x18e>
  }

  return MX25LM51245G_OK;
 800625a:	2300      	movs	r3, #0
}
 800625c:	4618      	mov	r0, r3
 800625e:	3770      	adds	r7, #112	; 0x70
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}

08006264 <MX25LM51245G_WriteCfg2Register>:
  * @param  Rate Transfer rate STR or DTR
  * @param  Value Value to write to configuration register
  * @retval error status
  */
int32_t MX25LM51245G_WriteCfg2Register(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate, uint32_t WriteAddr, uint8_t Value)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b098      	sub	sp, #96	; 0x60
 8006268:	af00      	add	r7, sp, #0
 800626a:	60f8      	str	r0, [r7, #12]
 800626c:	607b      	str	r3, [r7, #4]
 800626e:	460b      	mov	r3, r1
 8006270:	72fb      	strb	r3, [r7, #11]
 8006272:	4613      	mov	r3, r2
 8006274:	72bb      	strb	r3, [r7, #10]
  OSPI_RegularCmdTypeDef s_command = {0};
 8006276:	f107 0310 	add.w	r3, r7, #16
 800627a:	2250      	movs	r2, #80	; 0x50
 800627c:	2100      	movs	r1, #0
 800627e:	4618      	mov	r0, r3
 8006280:	f01a ffa7 	bl	80211d2 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8006284:	7afb      	ldrb	r3, [r7, #11]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d105      	bne.n	8006296 <MX25LM51245G_WriteCfg2Register+0x32>
 800628a:	7abb      	ldrb	r3, [r7, #10]
 800628c:	2b01      	cmp	r3, #1
 800628e:	d102      	bne.n	8006296 <MX25LM51245G_WriteCfg2Register+0x32>
  {
    return MX25LM51245G_ERROR;
 8006290:	f04f 33ff 	mov.w	r3, #4294967295
 8006294:	e077      	b.n	8006386 <MX25LM51245G_WriteCfg2Register+0x122>
  }

  /* Initialize the writing of configuration register 2 */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8006296:	2300      	movs	r3, #0
 8006298:	613b      	str	r3, [r7, #16]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 800629a:	2300      	movs	r3, #0
 800629c:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800629e:	7afb      	ldrb	r3, [r7, #11]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d101      	bne.n	80062a8 <MX25LM51245G_WriteCfg2Register+0x44>
 80062a4:	2301      	movs	r3, #1
 80062a6:	e000      	b.n	80062aa <MX25LM51245G_WriteCfg2Register+0x46>
 80062a8:	2304      	movs	r3, #4
 80062aa:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80062ac:	7abb      	ldrb	r3, [r7, #10]
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d101      	bne.n	80062b6 <MX25LM51245G_WriteCfg2Register+0x52>
 80062b2:	2308      	movs	r3, #8
 80062b4:	e000      	b.n	80062b8 <MX25LM51245G_WriteCfg2Register+0x54>
 80062b6:	2300      	movs	r3, #0
 80062b8:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80062ba:	7afb      	ldrb	r3, [r7, #11]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d101      	bne.n	80062c4 <MX25LM51245G_WriteCfg2Register+0x60>
 80062c0:	2300      	movs	r3, #0
 80062c2:	e000      	b.n	80062c6 <MX25LM51245G_WriteCfg2Register+0x62>
 80062c4:	2310      	movs	r3, #16
 80062c6:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_CFG_REG2_CMD : MX25LM51245G_OCTA_WRITE_CFG_REG2_CMD;
 80062c8:	7afb      	ldrb	r3, [r7, #11]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d101      	bne.n	80062d2 <MX25LM51245G_WriteCfg2Register+0x6e>
 80062ce:	2372      	movs	r3, #114	; 0x72
 80062d0:	e001      	b.n	80062d6 <MX25LM51245G_WriteCfg2Register+0x72>
 80062d2:	f247 238d 	movw	r3, #29325	; 0x728d
 80062d6:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 80062d8:	7afb      	ldrb	r3, [r7, #11]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d102      	bne.n	80062e4 <MX25LM51245G_WriteCfg2Register+0x80>
 80062de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80062e2:	e001      	b.n	80062e8 <MX25LM51245G_WriteCfg2Register+0x84>
 80062e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80062e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 80062ea:	7abb      	ldrb	r3, [r7, #10]
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d102      	bne.n	80062f6 <MX25LM51245G_WriteCfg2Register+0x92>
 80062f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80062f4:	e000      	b.n	80062f8 <MX25LM51245G_WriteCfg2Register+0x94>
 80062f6:	2300      	movs	r3, #0
 80062f8:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 80062fa:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80062fe:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.Address            = WriteAddr;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8006304:	2300      	movs	r3, #0
 8006306:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8006308:	7afb      	ldrb	r3, [r7, #11]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d102      	bne.n	8006314 <MX25LM51245G_WriteCfg2Register+0xb0>
 800630e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006312:	e001      	b.n	8006318 <MX25LM51245G_WriteCfg2Register+0xb4>
 8006314:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006318:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 800631a:	7abb      	ldrb	r3, [r7, #10]
 800631c:	2b01      	cmp	r3, #1
 800631e:	d102      	bne.n	8006326 <MX25LM51245G_WriteCfg2Register+0xc2>
 8006320:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006324:	e000      	b.n	8006328 <MX25LM51245G_WriteCfg2Register+0xc4>
 8006326:	2300      	movs	r3, #0
 8006328:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DummyCycles        = 0U;
 800632a:	2300      	movs	r3, #0
 800632c:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.NbData             = (Mode == MX25LM51245G_SPI_MODE) ? 1U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U);
 800632e:	7afb      	ldrb	r3, [r7, #11]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d006      	beq.n	8006342 <MX25LM51245G_WriteCfg2Register+0xde>
 8006334:	7abb      	ldrb	r3, [r7, #10]
 8006336:	2b01      	cmp	r3, #1
 8006338:	d101      	bne.n	800633e <MX25LM51245G_WriteCfg2Register+0xda>
 800633a:	2302      	movs	r3, #2
 800633c:	e002      	b.n	8006344 <MX25LM51245G_WriteCfg2Register+0xe0>
 800633e:	2301      	movs	r3, #1
 8006340:	e000      	b.n	8006344 <MX25LM51245G_WriteCfg2Register+0xe0>
 8006342:	2301      	movs	r3, #1
 8006344:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8006346:	2300      	movs	r3, #0
 8006348:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800634a:	2300      	movs	r3, #0
 800634c:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800634e:	f107 0310 	add.w	r3, r7, #16
 8006352:	f241 3288 	movw	r2, #5000	; 0x1388
 8006356:	4619      	mov	r1, r3
 8006358:	68f8      	ldr	r0, [r7, #12]
 800635a:	f004 fb8f 	bl	800aa7c <HAL_OSPI_Command>
 800635e:	4603      	mov	r3, r0
 8006360:	2b00      	cmp	r3, #0
 8006362:	d002      	beq.n	800636a <MX25LM51245G_WriteCfg2Register+0x106>
  {
    return MX25LM51245G_ERROR;
 8006364:	f04f 33ff 	mov.w	r3, #4294967295
 8006368:	e00d      	b.n	8006386 <MX25LM51245G_WriteCfg2Register+0x122>
  }

  if (HAL_OSPI_Transmit(Ctx, &Value, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800636a:	f241 3288 	movw	r2, #5000	; 0x1388
 800636e:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8006372:	68f8      	ldr	r0, [r7, #12]
 8006374:	f004 fc0f 	bl	800ab96 <HAL_OSPI_Transmit>
 8006378:	4603      	mov	r3, r0
 800637a:	2b00      	cmp	r3, #0
 800637c:	d002      	beq.n	8006384 <MX25LM51245G_WriteCfg2Register+0x120>
  {
    return MX25LM51245G_ERROR;
 800637e:	f04f 33ff 	mov.w	r3, #4294967295
 8006382:	e000      	b.n	8006386 <MX25LM51245G_WriteCfg2Register+0x122>
  }

  return MX25LM51245G_OK;
 8006384:	2300      	movs	r3, #0
}
 8006386:	4618      	mov	r0, r3
 8006388:	3760      	adds	r7, #96	; 0x60
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}

0800638e <MX25LM51245G_ReadCfg2Register>:
  * @param  Rate Transfer rate STR or DTR
  * @param  Value configuration register 2 value pointer
  * @retval error status
  */
int32_t MX25LM51245G_ReadCfg2Register(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate, uint32_t ReadAddr, uint8_t *Value)
{
 800638e:	b580      	push	{r7, lr}
 8006390:	b098      	sub	sp, #96	; 0x60
 8006392:	af00      	add	r7, sp, #0
 8006394:	60f8      	str	r0, [r7, #12]
 8006396:	607b      	str	r3, [r7, #4]
 8006398:	460b      	mov	r3, r1
 800639a:	72fb      	strb	r3, [r7, #11]
 800639c:	4613      	mov	r3, r2
 800639e:	72bb      	strb	r3, [r7, #10]
  OSPI_RegularCmdTypeDef s_command = {0};
 80063a0:	f107 0310 	add.w	r3, r7, #16
 80063a4:	2250      	movs	r2, #80	; 0x50
 80063a6:	2100      	movs	r1, #0
 80063a8:	4618      	mov	r0, r3
 80063aa:	f01a ff12 	bl	80211d2 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 80063ae:	7afb      	ldrb	r3, [r7, #11]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d105      	bne.n	80063c0 <MX25LM51245G_ReadCfg2Register+0x32>
 80063b4:	7abb      	ldrb	r3, [r7, #10]
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d102      	bne.n	80063c0 <MX25LM51245G_ReadCfg2Register+0x32>
  {
    return MX25LM51245G_ERROR;
 80063ba:	f04f 33ff 	mov.w	r3, #4294967295
 80063be:	e07c      	b.n	80064ba <MX25LM51245G_ReadCfg2Register+0x12c>
  }

  /* Initialize the reading of status register */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 80063c0:	2300      	movs	r3, #0
 80063c2:	613b      	str	r3, [r7, #16]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 80063c4:	2300      	movs	r3, #0
 80063c6:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80063c8:	7afb      	ldrb	r3, [r7, #11]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d101      	bne.n	80063d2 <MX25LM51245G_ReadCfg2Register+0x44>
 80063ce:	2301      	movs	r3, #1
 80063d0:	e000      	b.n	80063d4 <MX25LM51245G_ReadCfg2Register+0x46>
 80063d2:	2304      	movs	r3, #4
 80063d4:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80063d6:	7abb      	ldrb	r3, [r7, #10]
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d101      	bne.n	80063e0 <MX25LM51245G_ReadCfg2Register+0x52>
 80063dc:	2308      	movs	r3, #8
 80063de:	e000      	b.n	80063e2 <MX25LM51245G_ReadCfg2Register+0x54>
 80063e0:	2300      	movs	r3, #0
 80063e2:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80063e4:	7afb      	ldrb	r3, [r7, #11]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d101      	bne.n	80063ee <MX25LM51245G_ReadCfg2Register+0x60>
 80063ea:	2300      	movs	r3, #0
 80063ec:	e000      	b.n	80063f0 <MX25LM51245G_ReadCfg2Register+0x62>
 80063ee:	2310      	movs	r3, #16
 80063f0:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_CFG_REG2_CMD : MX25LM51245G_OCTA_READ_CFG_REG2_CMD;
 80063f2:	7afb      	ldrb	r3, [r7, #11]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d101      	bne.n	80063fc <MX25LM51245G_ReadCfg2Register+0x6e>
 80063f8:	2371      	movs	r3, #113	; 0x71
 80063fa:	e001      	b.n	8006400 <MX25LM51245G_ReadCfg2Register+0x72>
 80063fc:	f247 138e 	movw	r3, #29070	; 0x718e
 8006400:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8006402:	7afb      	ldrb	r3, [r7, #11]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d102      	bne.n	800640e <MX25LM51245G_ReadCfg2Register+0x80>
 8006408:	f44f 7380 	mov.w	r3, #256	; 0x100
 800640c:	e001      	b.n	8006412 <MX25LM51245G_ReadCfg2Register+0x84>
 800640e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006412:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8006414:	7abb      	ldrb	r3, [r7, #10]
 8006416:	2b01      	cmp	r3, #1
 8006418:	d102      	bne.n	8006420 <MX25LM51245G_ReadCfg2Register+0x92>
 800641a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800641e:	e000      	b.n	8006422 <MX25LM51245G_ReadCfg2Register+0x94>
 8006420:	2300      	movs	r3, #0
 8006422:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8006424:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8006428:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.Address            = ReadAddr;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800642e:	2300      	movs	r3, #0
 8006430:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8006432:	7afb      	ldrb	r3, [r7, #11]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d102      	bne.n	800643e <MX25LM51245G_ReadCfg2Register+0xb0>
 8006438:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800643c:	e001      	b.n	8006442 <MX25LM51245G_ReadCfg2Register+0xb4>
 800643e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006442:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8006444:	7abb      	ldrb	r3, [r7, #10]
 8006446:	2b01      	cmp	r3, #1
 8006448:	d102      	bne.n	8006450 <MX25LM51245G_ReadCfg2Register+0xc2>
 800644a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800644e:	e000      	b.n	8006452 <MX25LM51245G_ReadCfg2Register+0xc4>
 8006450:	2300      	movs	r3, #0
 8006452:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8006454:	7afb      	ldrb	r3, [r7, #11]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d101      	bne.n	800645e <MX25LM51245G_ReadCfg2Register+0xd0>
 800645a:	2300      	movs	r3, #0
 800645c:	e000      	b.n	8006460 <MX25LM51245G_ReadCfg2Register+0xd2>
 800645e:	2305      	movs	r3, #5
 8006460:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8006462:	7abb      	ldrb	r3, [r7, #10]
 8006464:	2b01      	cmp	r3, #1
 8006466:	d101      	bne.n	800646c <MX25LM51245G_ReadCfg2Register+0xde>
 8006468:	2302      	movs	r3, #2
 800646a:	e000      	b.n	800646e <MX25LM51245G_ReadCfg2Register+0xe0>
 800646c:	2301      	movs	r3, #1
 800646e:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 8006470:	7abb      	ldrb	r3, [r7, #10]
 8006472:	2b01      	cmp	r3, #1
 8006474:	d102      	bne.n	800647c <MX25LM51245G_ReadCfg2Register+0xee>
 8006476:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800647a:	e000      	b.n	800647e <MX25LM51245G_ReadCfg2Register+0xf0>
 800647c:	2300      	movs	r3, #0
 800647e:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8006480:	2300      	movs	r3, #0
 8006482:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006484:	f107 0310 	add.w	r3, r7, #16
 8006488:	f241 3288 	movw	r2, #5000	; 0x1388
 800648c:	4619      	mov	r1, r3
 800648e:	68f8      	ldr	r0, [r7, #12]
 8006490:	f004 faf4 	bl	800aa7c <HAL_OSPI_Command>
 8006494:	4603      	mov	r3, r0
 8006496:	2b00      	cmp	r3, #0
 8006498:	d002      	beq.n	80064a0 <MX25LM51245G_ReadCfg2Register+0x112>
  {
    return MX25LM51245G_ERROR;
 800649a:	f04f 33ff 	mov.w	r3, #4294967295
 800649e:	e00c      	b.n	80064ba <MX25LM51245G_ReadCfg2Register+0x12c>
  }

  /* Reception of the data */
  if (HAL_OSPI_Receive(Ctx, Value, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80064a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80064a4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80064a6:	68f8      	ldr	r0, [r7, #12]
 80064a8:	f004 fbe8 	bl	800ac7c <HAL_OSPI_Receive>
 80064ac:	4603      	mov	r3, r0
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d002      	beq.n	80064b8 <MX25LM51245G_ReadCfg2Register+0x12a>
  {
    return MX25LM51245G_ERROR;
 80064b2:	f04f 33ff 	mov.w	r3, #4294967295
 80064b6:	e000      	b.n	80064ba <MX25LM51245G_ReadCfg2Register+0x12c>
  }

  return MX25LM51245G_OK;
 80064b8:	2300      	movs	r3, #0
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3760      	adds	r7, #96	; 0x60
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}

080064c2 <MX25LM51245G_ResetEnable>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_ResetEnable(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 80064c2:	b580      	push	{r7, lr}
 80064c4:	b096      	sub	sp, #88	; 0x58
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	6078      	str	r0, [r7, #4]
 80064ca:	460b      	mov	r3, r1
 80064cc:	70fb      	strb	r3, [r7, #3]
 80064ce:	4613      	mov	r3, r2
 80064d0:	70bb      	strb	r3, [r7, #2]
  OSPI_RegularCmdTypeDef s_command = {0};
 80064d2:	f107 0308 	add.w	r3, r7, #8
 80064d6:	2250      	movs	r2, #80	; 0x50
 80064d8:	2100      	movs	r1, #0
 80064da:	4618      	mov	r0, r3
 80064dc:	f01a fe79 	bl	80211d2 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 80064e0:	78fb      	ldrb	r3, [r7, #3]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d105      	bne.n	80064f2 <MX25LM51245G_ResetEnable+0x30>
 80064e6:	78bb      	ldrb	r3, [r7, #2]
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	d102      	bne.n	80064f2 <MX25LM51245G_ResetEnable+0x30>
  {
    return MX25LM51245G_ERROR;
 80064ec:	f04f 33ff 	mov.w	r3, #4294967295
 80064f0:	e03b      	b.n	800656a <MX25LM51245G_ResetEnable+0xa8>
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 80064f2:	2300      	movs	r3, #0
 80064f4:	60bb      	str	r3, [r7, #8]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 80064f6:	2300      	movs	r3, #0
 80064f8:	60fb      	str	r3, [r7, #12]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80064fa:	78fb      	ldrb	r3, [r7, #3]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d101      	bne.n	8006504 <MX25LM51245G_ResetEnable+0x42>
 8006500:	2301      	movs	r3, #1
 8006502:	e000      	b.n	8006506 <MX25LM51245G_ResetEnable+0x44>
 8006504:	2304      	movs	r3, #4
 8006506:	617b      	str	r3, [r7, #20]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8006508:	78bb      	ldrb	r3, [r7, #2]
 800650a:	2b01      	cmp	r3, #1
 800650c:	d101      	bne.n	8006512 <MX25LM51245G_ResetEnable+0x50>
 800650e:	2308      	movs	r3, #8
 8006510:	e000      	b.n	8006514 <MX25LM51245G_ResetEnable+0x52>
 8006512:	2300      	movs	r3, #0
 8006514:	61fb      	str	r3, [r7, #28]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8006516:	78fb      	ldrb	r3, [r7, #3]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d101      	bne.n	8006520 <MX25LM51245G_ResetEnable+0x5e>
 800651c:	2300      	movs	r3, #0
 800651e:	e000      	b.n	8006522 <MX25LM51245G_ResetEnable+0x60>
 8006520:	2310      	movs	r3, #16
 8006522:	61bb      	str	r3, [r7, #24]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_ENABLE_CMD : MX25LM51245G_OCTA_RESET_ENABLE_CMD;
 8006524:	78fb      	ldrb	r3, [r7, #3]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d101      	bne.n	800652e <MX25LM51245G_ResetEnable+0x6c>
 800652a:	2366      	movs	r3, #102	; 0x66
 800652c:	e001      	b.n	8006532 <MX25LM51245G_ResetEnable+0x70>
 800652e:	f246 6399 	movw	r3, #26265	; 0x6699
 8006532:	613b      	str	r3, [r7, #16]
  s_command.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8006534:	2300      	movs	r3, #0
 8006536:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8006538:	2300      	movs	r3, #0
 800653a:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DataMode           = HAL_OSPI_DATA_NONE;
 800653c:	2300      	movs	r3, #0
 800653e:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DummyCycles        = 0U;
 8006540:	2300      	movs	r3, #0
 8006542:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8006544:	2300      	movs	r3, #0
 8006546:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8006548:	2300      	movs	r3, #0
 800654a:	657b      	str	r3, [r7, #84]	; 0x54

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800654c:	f107 0308 	add.w	r3, r7, #8
 8006550:	f241 3288 	movw	r2, #5000	; 0x1388
 8006554:	4619      	mov	r1, r3
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f004 fa90 	bl	800aa7c <HAL_OSPI_Command>
 800655c:	4603      	mov	r3, r0
 800655e:	2b00      	cmp	r3, #0
 8006560:	d002      	beq.n	8006568 <MX25LM51245G_ResetEnable+0xa6>
  {
    return MX25LM51245G_ERROR;
 8006562:	f04f 33ff 	mov.w	r3, #4294967295
 8006566:	e000      	b.n	800656a <MX25LM51245G_ResetEnable+0xa8>
  }

  return MX25LM51245G_OK;
 8006568:	2300      	movs	r3, #0
}
 800656a:	4618      	mov	r0, r3
 800656c:	3758      	adds	r7, #88	; 0x58
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}

08006572 <MX25LM51245G_ResetMemory>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_ResetMemory(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 8006572:	b580      	push	{r7, lr}
 8006574:	b096      	sub	sp, #88	; 0x58
 8006576:	af00      	add	r7, sp, #0
 8006578:	6078      	str	r0, [r7, #4]
 800657a:	460b      	mov	r3, r1
 800657c:	70fb      	strb	r3, [r7, #3]
 800657e:	4613      	mov	r3, r2
 8006580:	70bb      	strb	r3, [r7, #2]
  OSPI_RegularCmdTypeDef s_command = {0};
 8006582:	f107 0308 	add.w	r3, r7, #8
 8006586:	2250      	movs	r2, #80	; 0x50
 8006588:	2100      	movs	r1, #0
 800658a:	4618      	mov	r0, r3
 800658c:	f01a fe21 	bl	80211d2 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8006590:	78fb      	ldrb	r3, [r7, #3]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d105      	bne.n	80065a2 <MX25LM51245G_ResetMemory+0x30>
 8006596:	78bb      	ldrb	r3, [r7, #2]
 8006598:	2b01      	cmp	r3, #1
 800659a:	d102      	bne.n	80065a2 <MX25LM51245G_ResetMemory+0x30>
  {
    return MX25LM51245G_ERROR;
 800659c:	f04f 33ff 	mov.w	r3, #4294967295
 80065a0:	e03b      	b.n	800661a <MX25LM51245G_ResetMemory+0xa8>
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 80065a2:	2300      	movs	r3, #0
 80065a4:	60bb      	str	r3, [r7, #8]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 80065a6:	2300      	movs	r3, #0
 80065a8:	60fb      	str	r3, [r7, #12]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80065aa:	78fb      	ldrb	r3, [r7, #3]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d101      	bne.n	80065b4 <MX25LM51245G_ResetMemory+0x42>
 80065b0:	2301      	movs	r3, #1
 80065b2:	e000      	b.n	80065b6 <MX25LM51245G_ResetMemory+0x44>
 80065b4:	2304      	movs	r3, #4
 80065b6:	617b      	str	r3, [r7, #20]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80065b8:	78bb      	ldrb	r3, [r7, #2]
 80065ba:	2b01      	cmp	r3, #1
 80065bc:	d101      	bne.n	80065c2 <MX25LM51245G_ResetMemory+0x50>
 80065be:	2308      	movs	r3, #8
 80065c0:	e000      	b.n	80065c4 <MX25LM51245G_ResetMemory+0x52>
 80065c2:	2300      	movs	r3, #0
 80065c4:	61fb      	str	r3, [r7, #28]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80065c6:	78fb      	ldrb	r3, [r7, #3]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d101      	bne.n	80065d0 <MX25LM51245G_ResetMemory+0x5e>
 80065cc:	2300      	movs	r3, #0
 80065ce:	e000      	b.n	80065d2 <MX25LM51245G_ResetMemory+0x60>
 80065d0:	2310      	movs	r3, #16
 80065d2:	61bb      	str	r3, [r7, #24]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_MEMORY_CMD : MX25LM51245G_OCTA_RESET_MEMORY_CMD;
 80065d4:	78fb      	ldrb	r3, [r7, #3]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d101      	bne.n	80065de <MX25LM51245G_ResetMemory+0x6c>
 80065da:	2399      	movs	r3, #153	; 0x99
 80065dc:	e001      	b.n	80065e2 <MX25LM51245G_ResetMemory+0x70>
 80065de:	f649 1366 	movw	r3, #39270	; 0x9966
 80065e2:	613b      	str	r3, [r7, #16]
  s_command.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 80065e4:	2300      	movs	r3, #0
 80065e6:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80065e8:	2300      	movs	r3, #0
 80065ea:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DataMode           = HAL_OSPI_DATA_NONE;
 80065ec:	2300      	movs	r3, #0
 80065ee:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DummyCycles        = 0U;
 80065f0:	2300      	movs	r3, #0
 80065f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 80065f4:	2300      	movs	r3, #0
 80065f6:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80065f8:	2300      	movs	r3, #0
 80065fa:	657b      	str	r3, [r7, #84]	; 0x54

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80065fc:	f107 0308 	add.w	r3, r7, #8
 8006600:	f241 3288 	movw	r2, #5000	; 0x1388
 8006604:	4619      	mov	r1, r3
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f004 fa38 	bl	800aa7c <HAL_OSPI_Command>
 800660c:	4603      	mov	r3, r0
 800660e:	2b00      	cmp	r3, #0
 8006610:	d002      	beq.n	8006618 <MX25LM51245G_ResetMemory+0xa6>
  {
    return MX25LM51245G_ERROR;
 8006612:	f04f 33ff 	mov.w	r3, #4294967295
 8006616:	e000      	b.n	800661a <MX25LM51245G_ResetMemory+0xa8>
  }

  return MX25LM51245G_OK;
 8006618:	2300      	movs	r3, #0
}
 800661a:	4618      	mov	r0, r3
 800661c:	3758      	adds	r7, #88	; 0x58
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}
	...

08006624 <BSP_I2C4_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b082      	sub	sp, #8
 8006628:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800662a:	2300      	movs	r3, #0
 800662c:	607b      	str	r3, [r7, #4]

  hbus_i2c4.Instance = BUS_I2C4;
 800662e:	4b16      	ldr	r3, [pc, #88]	; (8006688 <BSP_I2C4_Init+0x64>)
 8006630:	4a16      	ldr	r2, [pc, #88]	; (800668c <BSP_I2C4_Init+0x68>)
 8006632:	601a      	str	r2, [r3, #0]

  if (I2c4InitCounter == 0U)
 8006634:	4b16      	ldr	r3, [pc, #88]	; (8006690 <BSP_I2C4_Init+0x6c>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d11f      	bne.n	800667c <BSP_I2C4_Init+0x58>
  {
    I2c4InitCounter++;
 800663c:	4b14      	ldr	r3, [pc, #80]	; (8006690 <BSP_I2C4_Init+0x6c>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	3301      	adds	r3, #1
 8006642:	4a13      	ldr	r2, [pc, #76]	; (8006690 <BSP_I2C4_Init+0x6c>)
 8006644:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 8006646:	4810      	ldr	r0, [pc, #64]	; (8006688 <BSP_I2C4_Init+0x64>)
 8006648:	f003 f86e 	bl	8009728 <HAL_I2C_GetState>
 800664c:	4603      	mov	r3, r0
 800664e:	2b00      	cmp	r3, #0
 8006650:	d114      	bne.n	800667c <BSP_I2C4_Init+0x58>
    {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C4 Msp */
      I2C4_MspInit(&hbus_i2c4);
 8006652:	480d      	ldr	r0, [pc, #52]	; (8006688 <BSP_I2C4_Init+0x64>)
 8006654:	f000 fb60 	bl	8006d18 <I2C4_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8006658:	f005 ff4c 	bl	800c4f4 <HAL_RCC_GetPCLK2Freq>
 800665c:	4603      	mov	r3, r0
 800665e:	490d      	ldr	r1, [pc, #52]	; (8006694 <BSP_I2C4_Init+0x70>)
 8006660:	4618      	mov	r0, r3
 8006662:	f000 f8e3 	bl	800682c <I2C_GetTiming>
 8006666:	4603      	mov	r3, r0
 8006668:	4619      	mov	r1, r3
 800666a:	4807      	ldr	r0, [pc, #28]	; (8006688 <BSP_I2C4_Init+0x64>)
 800666c:	f000 f838 	bl	80066e0 <MX_I2C4_Init>
 8006670:	4603      	mov	r3, r0
 8006672:	2b00      	cmp	r3, #0
 8006674:	d002      	beq.n	800667c <BSP_I2C4_Init+0x58>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8006676:	f06f 0307 	mvn.w	r3, #7
 800667a:	607b      	str	r3, [r7, #4]
      }
#endif
    }
  }

  return ret;
 800667c:	687b      	ldr	r3, [r7, #4]
}
 800667e:	4618      	mov	r0, r3
 8006680:	3708      	adds	r7, #8
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
 8006686:	bf00      	nop
 8006688:	24001f3c 	.word	0x24001f3c
 800668c:	58001c00 	.word	0x58001c00
 8006690:	24001534 	.word	0x24001534
 8006694:	000186a0 	.word	0x000186a0

08006698 <BSP_I2C4_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_DeInit(void)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b082      	sub	sp, #8
 800669c:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 800669e:	2300      	movs	r3, #0
 80066a0:	607b      	str	r3, [r7, #4]

  I2c4InitCounter--;
 80066a2:	4b0d      	ldr	r3, [pc, #52]	; (80066d8 <BSP_I2C4_DeInit+0x40>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	3b01      	subs	r3, #1
 80066a8:	4a0b      	ldr	r2, [pc, #44]	; (80066d8 <BSP_I2C4_DeInit+0x40>)
 80066aa:	6013      	str	r3, [r2, #0]

  if (I2c4InitCounter == 0U)
 80066ac:	4b0a      	ldr	r3, [pc, #40]	; (80066d8 <BSP_I2C4_DeInit+0x40>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d10b      	bne.n	80066cc <BSP_I2C4_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C4_MspDeInit(&hbus_i2c4);
 80066b4:	4809      	ldr	r0, [pc, #36]	; (80066dc <BSP_I2C4_DeInit+0x44>)
 80066b6:	f000 fb9b 	bl	8006df0 <I2C4_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 80066ba:	4808      	ldr	r0, [pc, #32]	; (80066dc <BSP_I2C4_DeInit+0x44>)
 80066bc:	f002 fdd6 	bl	800926c <HAL_I2C_DeInit>
 80066c0:	4603      	mov	r3, r0
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d002      	beq.n	80066cc <BSP_I2C4_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 80066c6:	f06f 0307 	mvn.w	r3, #7
 80066ca:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 80066cc:	687b      	ldr	r3, [r7, #4]
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3708      	adds	r7, #8
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}
 80066d6:	bf00      	nop
 80066d8:	24001534 	.word	0x24001534
 80066dc:	24001f3c 	.word	0x24001f3c

080066e0 <MX_I2C4_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b084      	sub	sp, #16
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
 80066e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80066ea:	2300      	movs	r3, #0
 80066ec:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	683a      	ldr	r2, [r7, #0]
 80066f2:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2200      	movs	r2, #0
 80066f8:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2201      	movs	r2, #1
 80066fe:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2200      	movs	r2, #0
 8006704:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2200      	movs	r2, #0
 800670a:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2200      	movs	r2, #0
 8006710:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2200      	movs	r2, #0
 8006716:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2200      	movs	r2, #0
 800671c:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f002 fd14 	bl	800914c <HAL_I2C_Init>
 8006724:	4603      	mov	r3, r0
 8006726:	2b00      	cmp	r3, #0
 8006728:	d002      	beq.n	8006730 <MX_I2C4_Init+0x50>
  {
    status = HAL_ERROR;
 800672a:	2301      	movs	r3, #1
 800672c:	73fb      	strb	r3, [r7, #15]
 800672e:	e014      	b.n	800675a <MX_I2C4_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
 8006730:	2300      	movs	r3, #0
 8006732:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 8006734:	68b9      	ldr	r1, [r7, #8]
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f003 fac8 	bl	8009ccc <HAL_I2CEx_ConfigAnalogFilter>
 800673c:	4603      	mov	r3, r0
 800673e:	2b00      	cmp	r3, #0
 8006740:	d002      	beq.n	8006748 <MX_I2C4_Init+0x68>
    {
      status = HAL_ERROR;
 8006742:	2301      	movs	r3, #1
 8006744:	73fb      	strb	r3, [r7, #15]
 8006746:	e008      	b.n	800675a <MX_I2C4_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8006748:	2100      	movs	r1, #0
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f003 fb09 	bl	8009d62 <HAL_I2CEx_ConfigDigitalFilter>
 8006750:	4603      	mov	r3, r0
 8006752:	2b00      	cmp	r3, #0
 8006754:	d001      	beq.n	800675a <MX_I2C4_Init+0x7a>
      {
        status = HAL_ERROR;
 8006756:	2301      	movs	r3, #1
 8006758:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 800675a:	7bfb      	ldrb	r3, [r7, #15]
}
 800675c:	4618      	mov	r0, r3
 800675e:	3710      	adds	r7, #16
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}

08006764 <BSP_I2C4_WriteReg>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b088      	sub	sp, #32
 8006768:	af02      	add	r7, sp, #8
 800676a:	60ba      	str	r2, [r7, #8]
 800676c:	461a      	mov	r2, r3
 800676e:	4603      	mov	r3, r0
 8006770:	81fb      	strh	r3, [r7, #14]
 8006772:	460b      	mov	r3, r1
 8006774:	81bb      	strh	r3, [r7, #12]
 8006776:	4613      	mov	r3, r2
 8006778:	80fb      	strh	r3, [r7, #6]
  int32_t ret;

  if(I2C4_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 800677a:	89b9      	ldrh	r1, [r7, #12]
 800677c:	89f8      	ldrh	r0, [r7, #14]
 800677e:	88fb      	ldrh	r3, [r7, #6]
 8006780:	9300      	str	r3, [sp, #0]
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	2201      	movs	r2, #1
 8006786:	f000 fb57 	bl	8006e38 <I2C4_WriteReg>
 800678a:	4603      	mov	r3, r0
 800678c:	2b00      	cmp	r3, #0
 800678e:	d102      	bne.n	8006796 <BSP_I2C4_WriteReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 8006790:	2300      	movs	r3, #0
 8006792:	617b      	str	r3, [r7, #20]
 8006794:	e00c      	b.n	80067b0 <BSP_I2C4_WriteReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8006796:	4809      	ldr	r0, [pc, #36]	; (80067bc <BSP_I2C4_WriteReg+0x58>)
 8006798:	f002 ffd4 	bl	8009744 <HAL_I2C_GetError>
 800679c:	4603      	mov	r3, r0
 800679e:	2b04      	cmp	r3, #4
 80067a0:	d103      	bne.n	80067aa <BSP_I2C4_WriteReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80067a2:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80067a6:	617b      	str	r3, [r7, #20]
 80067a8:	e002      	b.n	80067b0 <BSP_I2C4_WriteReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80067aa:	f06f 0303 	mvn.w	r3, #3
 80067ae:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 80067b0:	697b      	ldr	r3, [r7, #20]
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	3718      	adds	r7, #24
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}
 80067ba:	bf00      	nop
 80067bc:	24001f3c 	.word	0x24001f3c

080067c0 <BSP_I2C4_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b088      	sub	sp, #32
 80067c4:	af02      	add	r7, sp, #8
 80067c6:	60ba      	str	r2, [r7, #8]
 80067c8:	461a      	mov	r2, r3
 80067ca:	4603      	mov	r3, r0
 80067cc:	81fb      	strh	r3, [r7, #14]
 80067ce:	460b      	mov	r3, r1
 80067d0:	81bb      	strh	r3, [r7, #12]
 80067d2:	4613      	mov	r3, r2
 80067d4:	80fb      	strh	r3, [r7, #6]
  int32_t ret;

  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 80067d6:	89b9      	ldrh	r1, [r7, #12]
 80067d8:	89f8      	ldrh	r0, [r7, #14]
 80067da:	88fb      	ldrh	r3, [r7, #6]
 80067dc:	9300      	str	r3, [sp, #0]
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	2201      	movs	r2, #1
 80067e2:	f000 fb4f 	bl	8006e84 <I2C4_ReadReg>
 80067e6:	4603      	mov	r3, r0
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d102      	bne.n	80067f2 <BSP_I2C4_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 80067ec:	2300      	movs	r3, #0
 80067ee:	617b      	str	r3, [r7, #20]
 80067f0:	e00c      	b.n	800680c <BSP_I2C4_ReadReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 80067f2:	4809      	ldr	r0, [pc, #36]	; (8006818 <BSP_I2C4_ReadReg+0x58>)
 80067f4:	f002 ffa6 	bl	8009744 <HAL_I2C_GetError>
 80067f8:	4603      	mov	r3, r0
 80067fa:	2b04      	cmp	r3, #4
 80067fc:	d103      	bne.n	8006806 <BSP_I2C4_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80067fe:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8006802:	617b      	str	r3, [r7, #20]
 8006804:	e002      	b.n	800680c <BSP_I2C4_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8006806:	f06f 0303 	mvn.w	r3, #3
 800680a:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800680c:	697b      	ldr	r3, [r7, #20]
}
 800680e:	4618      	mov	r0, r3
 8006810:	3718      	adds	r7, #24
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}
 8006816:	bf00      	nop
 8006818:	24001f3c 	.word	0x24001f3c

0800681c <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 8006820:	f001 fcba 	bl	8008198 <HAL_GetTick>
 8006824:	4603      	mov	r3, r0
}
 8006826:	4618      	mov	r0, r3
 8006828:	bd80      	pop	{r7, pc}
	...

0800682c <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b086      	sub	sp, #24
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 8006836:	2300      	movs	r3, #0
 8006838:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d06b      	beq.n	8006918 <I2C_GetTiming+0xec>
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d068      	beq.n	8006918 <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8006846:	2300      	movs	r3, #0
 8006848:	613b      	str	r3, [r7, #16]
 800684a:	e060      	b.n	800690e <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 800684c:	4a35      	ldr	r2, [pc, #212]	; (8006924 <I2C_GetTiming+0xf8>)
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	212c      	movs	r1, #44	; 0x2c
 8006852:	fb01 f303 	mul.w	r3, r1, r3
 8006856:	4413      	add	r3, r2
 8006858:	3304      	adds	r3, #4
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	683a      	ldr	r2, [r7, #0]
 800685e:	429a      	cmp	r2, r3
 8006860:	d352      	bcc.n	8006908 <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 8006862:	4a30      	ldr	r2, [pc, #192]	; (8006924 <I2C_GetTiming+0xf8>)
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	212c      	movs	r1, #44	; 0x2c
 8006868:	fb01 f303 	mul.w	r3, r1, r3
 800686c:	4413      	add	r3, r2
 800686e:	3308      	adds	r3, #8
 8006870:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8006872:	683a      	ldr	r2, [r7, #0]
 8006874:	429a      	cmp	r2, r3
 8006876:	d847      	bhi.n	8006908 <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 8006878:	6939      	ldr	r1, [r7, #16]
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f000 f856 	bl	800692c <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 8006880:	6939      	ldr	r1, [r7, #16]
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f000 f940 	bl	8006b08 <I2C_Compute_SCLL_SCLH>
 8006888:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	2b7f      	cmp	r3, #127	; 0x7f
 800688e:	d842      	bhi.n	8006916 <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8006890:	4925      	ldr	r1, [pc, #148]	; (8006928 <I2C_GetTiming+0xfc>)
 8006892:	68fa      	ldr	r2, [r7, #12]
 8006894:	4613      	mov	r3, r2
 8006896:	009b      	lsls	r3, r3, #2
 8006898:	4413      	add	r3, r2
 800689a:	009b      	lsls	r3, r3, #2
 800689c:	440b      	add	r3, r1
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 80068a2:	4821      	ldr	r0, [pc, #132]	; (8006928 <I2C_GetTiming+0xfc>)
 80068a4:	68fa      	ldr	r2, [r7, #12]
 80068a6:	4613      	mov	r3, r2
 80068a8:	009b      	lsls	r3, r3, #2
 80068aa:	4413      	add	r3, r2
 80068ac:	009b      	lsls	r3, r3, #2
 80068ae:	4403      	add	r3, r0
 80068b0:	3304      	adds	r3, #4
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	051b      	lsls	r3, r3, #20
 80068b6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80068ba:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 80068bc:	481a      	ldr	r0, [pc, #104]	; (8006928 <I2C_GetTiming+0xfc>)
 80068be:	68fa      	ldr	r2, [r7, #12]
 80068c0:	4613      	mov	r3, r2
 80068c2:	009b      	lsls	r3, r3, #2
 80068c4:	4413      	add	r3, r2
 80068c6:	009b      	lsls	r3, r3, #2
 80068c8:	4403      	add	r3, r0
 80068ca:	3308      	adds	r3, #8
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	041b      	lsls	r3, r3, #16
 80068d0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 80068d4:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 80068d6:	4814      	ldr	r0, [pc, #80]	; (8006928 <I2C_GetTiming+0xfc>)
 80068d8:	68fa      	ldr	r2, [r7, #12]
 80068da:	4613      	mov	r3, r2
 80068dc:	009b      	lsls	r3, r3, #2
 80068de:	4413      	add	r3, r2
 80068e0:	009b      	lsls	r3, r3, #2
 80068e2:	4403      	add	r3, r0
 80068e4:	330c      	adds	r3, #12
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	021b      	lsls	r3, r3, #8
 80068ea:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 80068ec:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 80068ee:	480e      	ldr	r0, [pc, #56]	; (8006928 <I2C_GetTiming+0xfc>)
 80068f0:	68fa      	ldr	r2, [r7, #12]
 80068f2:	4613      	mov	r3, r2
 80068f4:	009b      	lsls	r3, r3, #2
 80068f6:	4413      	add	r3, r2
 80068f8:	009b      	lsls	r3, r3, #2
 80068fa:	4403      	add	r3, r0
 80068fc:	3310      	adds	r3, #16
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8006902:	430b      	orrs	r3, r1
 8006904:	617b      	str	r3, [r7, #20]
        }
        break;
 8006906:	e006      	b.n	8006916 <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	3301      	adds	r3, #1
 800690c:	613b      	str	r3, [r7, #16]
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	2b02      	cmp	r3, #2
 8006912:	d99b      	bls.n	800684c <I2C_GetTiming+0x20>
 8006914:	e000      	b.n	8006918 <I2C_GetTiming+0xec>
        break;
 8006916:	bf00      	nop
      }
    }
  }

  return ret;
 8006918:	697b      	ldr	r3, [r7, #20]
}
 800691a:	4618      	mov	r0, r3
 800691c:	3718      	adds	r7, #24
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}
 8006922:	bf00      	nop
 8006924:	08023014 	.word	0x08023014
 8006928:	24001538 	.word	0x24001538

0800692c <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 800692c:	b480      	push	{r7}
 800692e:	b08f      	sub	sp, #60	; 0x3c
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
 8006934:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 8006936:	2310      	movs	r3, #16
 8006938:	637b      	str	r3, [r7, #52]	; 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	085a      	lsrs	r2, r3, #1
 800693e:	4b6e      	ldr	r3, [pc, #440]	; (8006af8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 8006940:	4413      	add	r3, r2
 8006942:	687a      	ldr	r2, [r7, #4]
 8006944:	fbb3 f3f2 	udiv	r3, r3, r2
 8006948:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 800694a:	2332      	movs	r3, #50	; 0x32
 800694c:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
 800694e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006952:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8006954:	4a69      	ldr	r2, [pc, #420]	; (8006afc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	212c      	movs	r1, #44	; 0x2c
 800695a:	fb01 f303 	mul.w	r3, r1, r3
 800695e:	4413      	add	r3, r2
 8006960:	3324      	adds	r3, #36	; 0x24
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4618      	mov	r0, r3
 8006966:	4a65      	ldr	r2, [pc, #404]	; (8006afc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	212c      	movs	r1, #44	; 0x2c
 800696c:	fb01 f303 	mul.w	r3, r1, r3
 8006970:	4413      	add	r3, r2
 8006972:	330c      	adds	r3, #12
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8006978:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800697a:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800697c:	495f      	ldr	r1, [pc, #380]	; (8006afc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	202c      	movs	r0, #44	; 0x2c
 8006982:	fb00 f303 	mul.w	r3, r0, r3
 8006986:	440b      	add	r3, r1
 8006988:	3328      	adds	r3, #40	; 0x28
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	3303      	adds	r3, #3
 800698e:	69f9      	ldr	r1, [r7, #28]
 8006990:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8006994:	1ad3      	subs	r3, r2, r3
 8006996:	633b      	str	r3, [r7, #48]	; 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8006998:	4a58      	ldr	r2, [pc, #352]	; (8006afc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	212c      	movs	r1, #44	; 0x2c
 800699e:	fb01 f303 	mul.w	r3, r1, r3
 80069a2:	4413      	add	r3, r2
 80069a4:	3310      	adds	r3, #16
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4618      	mov	r0, r3
 80069aa:	4a54      	ldr	r2, [pc, #336]	; (8006afc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	212c      	movs	r1, #44	; 0x2c
 80069b0:	fb01 f303 	mul.w	r3, r1, r3
 80069b4:	4413      	add	r3, r2
 80069b6:	3320      	adds	r3, #32
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 80069bc:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80069be:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 80069c0:	494e      	ldr	r1, [pc, #312]	; (8006afc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	202c      	movs	r0, #44	; 0x2c
 80069c6:	fb00 f303 	mul.w	r3, r0, r3
 80069ca:	440b      	add	r3, r1
 80069cc:	3328      	adds	r3, #40	; 0x28
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	3304      	adds	r3, #4
 80069d2:	69f9      	ldr	r1, [r7, #28]
 80069d4:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80069d8:	1ad3      	subs	r3, r2, r3
 80069da:	62fb      	str	r3, [r7, #44]	; 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 80069dc:	4a47      	ldr	r2, [pc, #284]	; (8006afc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	212c      	movs	r1, #44	; 0x2c
 80069e2:	fb01 f303 	mul.w	r3, r1, r3
 80069e6:	4413      	add	r3, r2
 80069e8:	3320      	adds	r3, #32
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4618      	mov	r0, r3
 80069ee:	4a43      	ldr	r2, [pc, #268]	; (8006afc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	212c      	movs	r1, #44	; 0x2c
 80069f4:	fb01 f303 	mul.w	r3, r1, r3
 80069f8:	4413      	add	r3, r2
 80069fa:	3314      	adds	r3, #20
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4403      	add	r3, r0
 8006a00:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 8006a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	dc01      	bgt.n	8006a0c <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	633b      	str	r3, [r7, #48]	; 0x30
  }

  if (tsdadel_max <= 0)
 8006a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	dc01      	bgt.n	8006a16 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 8006a12:	2300      	movs	r3, #0
 8006a14:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8006a16:	2300      	movs	r3, #0
 8006a18:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a1a:	e062      	b.n	8006ae2 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	627b      	str	r3, [r7, #36]	; 0x24
 8006a20:	e059      	b.n	8006ad6 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 8006a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a24:	3301      	adds	r3, #1
 8006a26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a28:	3201      	adds	r2, #1
 8006a2a:	fb03 f202 	mul.w	r2, r3, r2
 8006a2e:	69fb      	ldr	r3, [r7, #28]
 8006a30:	fb02 f303 	mul.w	r3, r2, r3
 8006a34:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	68fa      	ldr	r2, [r7, #12]
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	d348      	bcc.n	8006ad0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8006a3e:	2300      	movs	r3, #0
 8006a40:	623b      	str	r3, [r7, #32]
 8006a42:	e042      	b.n	8006aca <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 8006a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a46:	3301      	adds	r3, #1
 8006a48:	6a3a      	ldr	r2, [r7, #32]
 8006a4a:	fb03 f202 	mul.w	r2, r3, r2
 8006a4e:	69fb      	ldr	r3, [r7, #28]
 8006a50:	fb02 f303 	mul.w	r3, r2, r3
 8006a54:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 8006a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a58:	68ba      	ldr	r2, [r7, #8]
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	d332      	bcc.n	8006ac4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 8006a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a60:	68ba      	ldr	r2, [r7, #8]
 8006a62:	429a      	cmp	r2, r3
 8006a64:	d82e      	bhi.n	8006ac4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
 8006a66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a6a:	429a      	cmp	r2, r3
 8006a6c:	d02a      	beq.n	8006ac4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8006a6e:	4b24      	ldr	r3, [pc, #144]	; (8006b00 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8006a70:	681a      	ldr	r2, [r3, #0]
 8006a72:	4924      	ldr	r1, [pc, #144]	; (8006b04 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8006a74:	4613      	mov	r3, r2
 8006a76:	009b      	lsls	r3, r3, #2
 8006a78:	4413      	add	r3, r2
 8006a7a:	009b      	lsls	r3, r3, #2
 8006a7c:	440b      	add	r3, r1
 8006a7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a80:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8006a82:	4b1f      	ldr	r3, [pc, #124]	; (8006b00 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8006a84:	681a      	ldr	r2, [r3, #0]
 8006a86:	491f      	ldr	r1, [pc, #124]	; (8006b04 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8006a88:	4613      	mov	r3, r2
 8006a8a:	009b      	lsls	r3, r3, #2
 8006a8c:	4413      	add	r3, r2
 8006a8e:	009b      	lsls	r3, r3, #2
 8006a90:	440b      	add	r3, r1
 8006a92:	3304      	adds	r3, #4
 8006a94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a96:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8006a98:	4b19      	ldr	r3, [pc, #100]	; (8006b00 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8006a9a:	681a      	ldr	r2, [r3, #0]
 8006a9c:	4919      	ldr	r1, [pc, #100]	; (8006b04 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8006a9e:	4613      	mov	r3, r2
 8006aa0:	009b      	lsls	r3, r3, #2
 8006aa2:	4413      	add	r3, r2
 8006aa4:	009b      	lsls	r3, r3, #2
 8006aa6:	440b      	add	r3, r1
 8006aa8:	3308      	adds	r3, #8
 8006aaa:	6a3a      	ldr	r2, [r7, #32]
 8006aac:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 8006aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ab0:	637b      	str	r3, [r7, #52]	; 0x34
              I2c_valid_timing_nbr ++;
 8006ab2:	4b13      	ldr	r3, [pc, #76]	; (8006b00 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	3301      	adds	r3, #1
 8006ab8:	4a11      	ldr	r2, [pc, #68]	; (8006b00 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8006aba:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8006abc:	4b10      	ldr	r3, [pc, #64]	; (8006b00 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	2b7f      	cmp	r3, #127	; 0x7f
 8006ac2:	d812      	bhi.n	8006aea <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8006ac4:	6a3b      	ldr	r3, [r7, #32]
 8006ac6:	3301      	adds	r3, #1
 8006ac8:	623b      	str	r3, [r7, #32]
 8006aca:	6a3b      	ldr	r3, [r7, #32]
 8006acc:	2b0f      	cmp	r3, #15
 8006ace:	d9b9      	bls.n	8006a44 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8006ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad2:	3301      	adds	r3, #1
 8006ad4:	627b      	str	r3, [r7, #36]	; 0x24
 8006ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad8:	2b0f      	cmp	r3, #15
 8006ada:	d9a2      	bls.n	8006a22 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8006adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ade:	3301      	adds	r3, #1
 8006ae0:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae4:	2b0f      	cmp	r3, #15
 8006ae6:	d999      	bls.n	8006a1c <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 8006ae8:	e000      	b.n	8006aec <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 8006aea:	bf00      	nop
          }
        }
      }
    }
  }
}
 8006aec:	373c      	adds	r7, #60	; 0x3c
 8006aee:	46bd      	mov	sp, r7
 8006af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af4:	4770      	bx	lr
 8006af6:	bf00      	nop
 8006af8:	3b9aca00 	.word	0x3b9aca00
 8006afc:	08023014 	.word	0x08023014
 8006b00:	24001f38 	.word	0x24001f38
 8006b04:	24001538 	.word	0x24001538

08006b08 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b093      	sub	sp, #76	; 0x4c
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
 8006b12:	f04f 33ff 	mov.w	r3, #4294967295
 8006b16:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	085a      	lsrs	r2, r3, #1
 8006b1c:	4b7a      	ldr	r3, [pc, #488]	; (8006d08 <I2C_Compute_SCLL_SCLH+0x200>)
 8006b1e:	4413      	add	r3, r2
 8006b20:	687a      	ldr	r2, [r7, #4]
 8006b22:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b26:	62fb      	str	r3, [r7, #44]	; 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 8006b28:	4a78      	ldr	r2, [pc, #480]	; (8006d0c <I2C_Compute_SCLL_SCLH+0x204>)
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	212c      	movs	r1, #44	; 0x2c
 8006b2e:	fb01 f303 	mul.w	r3, r1, r3
 8006b32:	4413      	add	r3, r2
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	085a      	lsrs	r2, r3, #1
 8006b38:	4b73      	ldr	r3, [pc, #460]	; (8006d08 <I2C_Compute_SCLL_SCLH+0x200>)
 8006b3a:	4413      	add	r3, r2
 8006b3c:	4973      	ldr	r1, [pc, #460]	; (8006d0c <I2C_Compute_SCLL_SCLH+0x204>)
 8006b3e:	683a      	ldr	r2, [r7, #0]
 8006b40:	202c      	movs	r0, #44	; 0x2c
 8006b42:	fb00 f202 	mul.w	r2, r0, r2
 8006b46:	440a      	add	r2, r1
 8006b48:	6812      	ldr	r2, [r2, #0]
 8006b4a:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b4e:	62bb      	str	r3, [r7, #40]	; 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 8006b50:	2332      	movs	r3, #50	; 0x32
 8006b52:	627b      	str	r3, [r7, #36]	; 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 8006b54:	4a6d      	ldr	r2, [pc, #436]	; (8006d0c <I2C_Compute_SCLL_SCLH+0x204>)
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	212c      	movs	r1, #44	; 0x2c
 8006b5a:	fb01 f303 	mul.w	r3, r1, r3
 8006b5e:	4413      	add	r3, r2
 8006b60:	3328      	adds	r3, #40	; 0x28
 8006b62:	681a      	ldr	r2, [r3, #0]
 8006b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b66:	fb02 f303 	mul.w	r3, r2, r3
 8006b6a:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 8006b6c:	4a67      	ldr	r2, [pc, #412]	; (8006d0c <I2C_Compute_SCLL_SCLH+0x204>)
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	212c      	movs	r1, #44	; 0x2c
 8006b72:	fb01 f303 	mul.w	r3, r1, r3
 8006b76:	4413      	add	r3, r2
 8006b78:	3304      	adds	r3, #4
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a62      	ldr	r2, [pc, #392]	; (8006d08 <I2C_Compute_SCLL_SCLH+0x200>)
 8006b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b82:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 8006b84:	4a61      	ldr	r2, [pc, #388]	; (8006d0c <I2C_Compute_SCLL_SCLH+0x204>)
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	212c      	movs	r1, #44	; 0x2c
 8006b8a:	fb01 f303 	mul.w	r3, r1, r3
 8006b8e:	4413      	add	r3, r2
 8006b90:	3308      	adds	r3, #8
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a5c      	ldr	r2, [pc, #368]	; (8006d08 <I2C_Compute_SCLL_SCLH+0x200>)
 8006b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b9a:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 8006b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b9e:	643b      	str	r3, [r7, #64]	; 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	637b      	str	r3, [r7, #52]	; 0x34
 8006ba4:	e0a3      	b.n	8006cee <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8006ba6:	495a      	ldr	r1, [pc, #360]	; (8006d10 <I2C_Compute_SCLL_SCLH+0x208>)
 8006ba8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006baa:	4613      	mov	r3, r2
 8006bac:	009b      	lsls	r3, r3, #2
 8006bae:	4413      	add	r3, r2
 8006bb0:	009b      	lsls	r3, r3, #2
 8006bb2:	440b      	add	r3, r1
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	1c5a      	adds	r2, r3, #1
 8006bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bba:	fb02 f303 	mul.w	r3, r2, r3
 8006bbe:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bc4:	e08c      	b.n	8006ce0 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8006bc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bc8:	6a3b      	ldr	r3, [r7, #32]
 8006bca:	441a      	add	r2, r3
 8006bcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bce:	3301      	adds	r3, #1
 8006bd0:	6979      	ldr	r1, [r7, #20]
 8006bd2:	fb03 f101 	mul.w	r1, r3, r1
 8006bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bd8:	005b      	lsls	r3, r3, #1
 8006bda:	440b      	add	r3, r1
 8006bdc:	4413      	add	r3, r2
 8006bde:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8006be0:	4a4a      	ldr	r2, [pc, #296]	; (8006d0c <I2C_Compute_SCLL_SCLH+0x204>)
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	212c      	movs	r1, #44	; 0x2c
 8006be6:	fb01 f303 	mul.w	r3, r1, r3
 8006bea:	4413      	add	r3, r2
 8006bec:	3318      	adds	r3, #24
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	693a      	ldr	r2, [r7, #16]
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	d971      	bls.n	8006cda <I2C_Compute_SCLL_SCLH+0x1d2>
 8006bf6:	693a      	ldr	r2, [r7, #16]
 8006bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bfa:	1ad2      	subs	r2, r2, r3
 8006bfc:	6a3b      	ldr	r3, [r7, #32]
 8006bfe:	1ad3      	subs	r3, r2, r3
 8006c00:	089b      	lsrs	r3, r3, #2
 8006c02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c04:	429a      	cmp	r2, r3
 8006c06:	d268      	bcs.n	8006cda <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8006c08:	2300      	movs	r3, #0
 8006c0a:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c0c:	e062      	b.n	8006cd4 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 8006c0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c10:	6a3b      	ldr	r3, [r7, #32]
 8006c12:	441a      	add	r2, r3
 8006c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c16:	3301      	adds	r3, #1
 8006c18:	6979      	ldr	r1, [r7, #20]
 8006c1a:	fb03 f101 	mul.w	r1, r3, r1
 8006c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c20:	005b      	lsls	r3, r3, #1
 8006c22:	440b      	add	r3, r1
 8006c24:	4413      	add	r3, r2
 8006c26:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 8006c28:	693a      	ldr	r2, [r7, #16]
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	441a      	add	r2, r3
 8006c2e:	4937      	ldr	r1, [pc, #220]	; (8006d0c <I2C_Compute_SCLL_SCLH+0x204>)
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	202c      	movs	r0, #44	; 0x2c
 8006c34:	fb00 f303 	mul.w	r3, r0, r3
 8006c38:	440b      	add	r3, r1
 8006c3a:	3320      	adds	r3, #32
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	441a      	add	r2, r3
 8006c40:	4932      	ldr	r1, [pc, #200]	; (8006d0c <I2C_Compute_SCLL_SCLH+0x204>)
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	202c      	movs	r0, #44	; 0x2c
 8006c46:	fb00 f303 	mul.w	r3, r0, r3
 8006c4a:	440b      	add	r3, r1
 8006c4c:	3324      	adds	r3, #36	; 0x24
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4413      	add	r3, r2
 8006c52:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8006c54:	68ba      	ldr	r2, [r7, #8]
 8006c56:	69bb      	ldr	r3, [r7, #24]
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	d338      	bcc.n	8006cce <I2C_Compute_SCLL_SCLH+0x1c6>
 8006c5c:	68ba      	ldr	r2, [r7, #8]
 8006c5e:	69fb      	ldr	r3, [r7, #28]
 8006c60:	429a      	cmp	r2, r3
 8006c62:	d834      	bhi.n	8006cce <I2C_Compute_SCLL_SCLH+0x1c6>
 8006c64:	4a29      	ldr	r2, [pc, #164]	; (8006d0c <I2C_Compute_SCLL_SCLH+0x204>)
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	212c      	movs	r1, #44	; 0x2c
 8006c6a:	fb01 f303 	mul.w	r3, r1, r3
 8006c6e:	4413      	add	r3, r2
 8006c70:	331c      	adds	r3, #28
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	68fa      	ldr	r2, [r7, #12]
 8006c76:	429a      	cmp	r2, r3
 8006c78:	d329      	bcc.n	8006cce <I2C_Compute_SCLL_SCLH+0x1c6>
 8006c7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	429a      	cmp	r2, r3
 8006c80:	d225      	bcs.n	8006cce <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 8006c82:	68ba      	ldr	r2, [r7, #8]
 8006c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c86:	1ad3      	subs	r3, r2, r3
 8006c88:	633b      	str	r3, [r7, #48]	; 0x30

            if (error < 0)
 8006c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	da02      	bge.n	8006c96 <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 8006c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c92:	425b      	negs	r3, r3
 8006c94:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 8006c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c98:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006c9a:	429a      	cmp	r2, r3
 8006c9c:	d917      	bls.n	8006cce <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 8006c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ca0:	643b      	str	r3, [r7, #64]	; 0x40
              I2c_valid_timing[count].scll = scll;
 8006ca2:	491b      	ldr	r1, [pc, #108]	; (8006d10 <I2C_Compute_SCLL_SCLH+0x208>)
 8006ca4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ca6:	4613      	mov	r3, r2
 8006ca8:	009b      	lsls	r3, r3, #2
 8006caa:	4413      	add	r3, r2
 8006cac:	009b      	lsls	r3, r3, #2
 8006cae:	440b      	add	r3, r1
 8006cb0:	3310      	adds	r3, #16
 8006cb2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006cb4:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 8006cb6:	4916      	ldr	r1, [pc, #88]	; (8006d10 <I2C_Compute_SCLL_SCLH+0x208>)
 8006cb8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006cba:	4613      	mov	r3, r2
 8006cbc:	009b      	lsls	r3, r3, #2
 8006cbe:	4413      	add	r3, r2
 8006cc0:	009b      	lsls	r3, r3, #2
 8006cc2:	440b      	add	r3, r1
 8006cc4:	330c      	adds	r3, #12
 8006cc6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006cc8:	601a      	str	r2, [r3, #0]
              ret = count;
 8006cca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ccc:	647b      	str	r3, [r7, #68]	; 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8006cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cd0:	3301      	adds	r3, #1
 8006cd2:	63bb      	str	r3, [r7, #56]	; 0x38
 8006cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cd6:	2bff      	cmp	r3, #255	; 0xff
 8006cd8:	d999      	bls.n	8006c0e <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8006cda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cdc:	3301      	adds	r3, #1
 8006cde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ce0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ce2:	2bff      	cmp	r3, #255	; 0xff
 8006ce4:	f67f af6f 	bls.w	8006bc6 <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8006ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cea:	3301      	adds	r3, #1
 8006cec:	637b      	str	r3, [r7, #52]	; 0x34
 8006cee:	4b09      	ldr	r3, [pc, #36]	; (8006d14 <I2C_Compute_SCLL_SCLH+0x20c>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	f4ff af56 	bcc.w	8006ba6 <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 8006cfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	374c      	adds	r7, #76	; 0x4c
 8006d00:	46bd      	mov	sp, r7
 8006d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d06:	4770      	bx	lr
 8006d08:	3b9aca00 	.word	0x3b9aca00
 8006d0c:	08023014 	.word	0x08023014
 8006d10:	24001538 	.word	0x24001538
 8006d14:	24001f38 	.word	0x24001f38

08006d18 <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b08a      	sub	sp, #40	; 0x28
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8006d20:	4b31      	ldr	r3, [pc, #196]	; (8006de8 <I2C4_MspInit+0xd0>)
 8006d22:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006d26:	4a30      	ldr	r2, [pc, #192]	; (8006de8 <I2C4_MspInit+0xd0>)
 8006d28:	f043 0308 	orr.w	r3, r3, #8
 8006d2c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8006d30:	4b2d      	ldr	r3, [pc, #180]	; (8006de8 <I2C4_MspInit+0xd0>)
 8006d32:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006d36:	f003 0308 	and.w	r3, r3, #8
 8006d3a:	613b      	str	r3, [r7, #16]
 8006d3c:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 8006d3e:	4b2a      	ldr	r3, [pc, #168]	; (8006de8 <I2C4_MspInit+0xd0>)
 8006d40:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006d44:	4a28      	ldr	r2, [pc, #160]	; (8006de8 <I2C4_MspInit+0xd0>)
 8006d46:	f043 0308 	orr.w	r3, r3, #8
 8006d4a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8006d4e:	4b26      	ldr	r3, [pc, #152]	; (8006de8 <I2C4_MspInit+0xd0>)
 8006d50:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006d54:	f003 0308 	and.w	r3, r3, #8
 8006d58:	60fb      	str	r3, [r7, #12]
 8006d5a:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 8006d5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006d60:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8006d62:	2312      	movs	r3, #18
 8006d64:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8006d66:	2300      	movs	r3, #0
 8006d68:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 8006d6a:	2302      	movs	r3, #2
 8006d6c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 8006d6e:	2304      	movs	r3, #4
 8006d70:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 8006d72:	f107 0314 	add.w	r3, r7, #20
 8006d76:	4619      	mov	r1, r3
 8006d78:	481c      	ldr	r0, [pc, #112]	; (8006dec <I2C4_MspInit+0xd4>)
 8006d7a:	f001 fedf 	bl	8008b3c <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 8006d7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006d82:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8006d84:	2312      	movs	r3, #18
 8006d86:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 8006d8c:	2302      	movs	r3, #2
 8006d8e:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 8006d90:	2304      	movs	r3, #4
 8006d92:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8006d94:	f107 0314 	add.w	r3, r7, #20
 8006d98:	4619      	mov	r1, r3
 8006d9a:	4814      	ldr	r0, [pc, #80]	; (8006dec <I2C4_MspInit+0xd4>)
 8006d9c:	f001 fece 	bl	8008b3c <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
 8006da0:	4b11      	ldr	r3, [pc, #68]	; (8006de8 <I2C4_MspInit+0xd0>)
 8006da2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8006da6:	4a10      	ldr	r2, [pc, #64]	; (8006de8 <I2C4_MspInit+0xd0>)
 8006da8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dac:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8006db0:	4b0d      	ldr	r3, [pc, #52]	; (8006de8 <I2C4_MspInit+0xd0>)
 8006db2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8006db6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dba:	60bb      	str	r3, [r7, #8]
 8006dbc:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
 8006dbe:	4b0a      	ldr	r3, [pc, #40]	; (8006de8 <I2C4_MspInit+0xd0>)
 8006dc0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006dc4:	4a08      	ldr	r2, [pc, #32]	; (8006de8 <I2C4_MspInit+0xd0>)
 8006dc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dca:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
 8006dce:	4b06      	ldr	r3, [pc, #24]	; (8006de8 <I2C4_MspInit+0xd0>)
 8006dd0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006dd4:	4a04      	ldr	r2, [pc, #16]	; (8006de8 <I2C4_MspInit+0xd0>)
 8006dd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006dda:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
}
 8006dde:	bf00      	nop
 8006de0:	3728      	adds	r7, #40	; 0x28
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}
 8006de6:	bf00      	nop
 8006de8:	58024400 	.word	0x58024400
 8006dec:	58020c00 	.word	0x58020c00

08006df0 <I2C4_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspDeInit(I2C_HandleTypeDef *phi2c)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b088      	sub	sp, #32
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
 8006df8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006dfc:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	4619      	mov	r1, r3
 8006e02:	480b      	ldr	r0, [pc, #44]	; (8006e30 <I2C4_MspDeInit+0x40>)
 8006e04:	f002 f84a 	bl	8008e9c <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
 8006e08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006e0c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	4619      	mov	r1, r3
 8006e12:	4807      	ldr	r0, [pc, #28]	; (8006e30 <I2C4_MspDeInit+0x40>)
 8006e14:	f002 f842 	bl	8008e9c <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 8006e18:	4b06      	ldr	r3, [pc, #24]	; (8006e34 <I2C4_MspDeInit+0x44>)
 8006e1a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8006e1e:	4a05      	ldr	r2, [pc, #20]	; (8006e34 <I2C4_MspDeInit+0x44>)
 8006e20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e24:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
}
 8006e28:	bf00      	nop
 8006e2a:	3720      	adds	r7, #32
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}
 8006e30:	58020c00 	.word	0x58020c00
 8006e34:	58024400 	.word	0x58024400

08006e38 <I2C4_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b088      	sub	sp, #32
 8006e3c:	af04      	add	r7, sp, #16
 8006e3e:	607b      	str	r3, [r7, #4]
 8006e40:	4603      	mov	r3, r0
 8006e42:	81fb      	strh	r3, [r7, #14]
 8006e44:	460b      	mov	r3, r1
 8006e46:	81bb      	strh	r3, [r7, #12]
 8006e48:	4613      	mov	r3, r2
 8006e4a:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8006e4c:	8978      	ldrh	r0, [r7, #10]
 8006e4e:	89ba      	ldrh	r2, [r7, #12]
 8006e50:	89f9      	ldrh	r1, [r7, #14]
 8006e52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006e56:	9302      	str	r3, [sp, #8]
 8006e58:	8b3b      	ldrh	r3, [r7, #24]
 8006e5a:	9301      	str	r3, [sp, #4]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	9300      	str	r3, [sp, #0]
 8006e60:	4603      	mov	r3, r0
 8006e62:	4807      	ldr	r0, [pc, #28]	; (8006e80 <I2C4_WriteReg+0x48>)
 8006e64:	f002 fa32 	bl	80092cc <HAL_I2C_Mem_Write>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d101      	bne.n	8006e72 <I2C4_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 8006e6e:	2300      	movs	r3, #0
 8006e70:	e001      	b.n	8006e76 <I2C4_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 8006e72:	f06f 0307 	mvn.w	r3, #7
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	3710      	adds	r7, #16
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}
 8006e7e:	bf00      	nop
 8006e80:	24001f3c 	.word	0x24001f3c

08006e84 <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b088      	sub	sp, #32
 8006e88:	af04      	add	r7, sp, #16
 8006e8a:	607b      	str	r3, [r7, #4]
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	81fb      	strh	r3, [r7, #14]
 8006e90:	460b      	mov	r3, r1
 8006e92:	81bb      	strh	r3, [r7, #12]
 8006e94:	4613      	mov	r3, r2
 8006e96:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8006e98:	8978      	ldrh	r0, [r7, #10]
 8006e9a:	89ba      	ldrh	r2, [r7, #12]
 8006e9c:	89f9      	ldrh	r1, [r7, #14]
 8006e9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006ea2:	9302      	str	r3, [sp, #8]
 8006ea4:	8b3b      	ldrh	r3, [r7, #24]
 8006ea6:	9301      	str	r3, [sp, #4]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	9300      	str	r3, [sp, #0]
 8006eac:	4603      	mov	r3, r0
 8006eae:	4807      	ldr	r0, [pc, #28]	; (8006ecc <I2C4_ReadReg+0x48>)
 8006eb0:	f002 fb20 	bl	80094f4 <HAL_I2C_Mem_Read>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d101      	bne.n	8006ebe <I2C4_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	e001      	b.n	8006ec2 <I2C4_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 8006ebe:	f06f 0307 	mvn.w	r3, #7
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3710      	adds	r7, #16
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}
 8006eca:	bf00      	nop
 8006ecc:	24001f3c 	.word	0x24001f3c

08006ed0 <BSP_OSPI_NOR_Init>:
  * @param  Instance   OSPI Instance
  * @param  Init       OSPI Init structure
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_Init(uint32_t Instance, BSP_OSPI_NOR_Init_t *Init)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b094      	sub	sp, #80	; 0x50
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
 8006ed8:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8006eda:	2300      	movs	r3, #0
 8006edc:	64fb      	str	r3, [r7, #76]	; 0x4c
  BSP_OSPI_NOR_Info_t pInfo;
  MX_OSPI_Config ospi_config;

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d003      	beq.n	8006eec <BSP_OSPI_NOR_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006ee4:	f06f 0301 	mvn.w	r3, #1
 8006ee8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006eea:	e071      	b.n	8006fd0 <BSP_OSPI_NOR_Init+0x100>
  }
  else
  {
    /* Check if the instance is already initialized */
    if (Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_NONE)
 8006eec:	4a3b      	ldr	r2, [pc, #236]	; (8006fdc <BSP_OSPI_NOR_Init+0x10c>)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d16b      	bne.n	8006fd0 <BSP_OSPI_NOR_Init+0x100>
    {
#if (USE_HAL_OSPI_REGISTER_CALLBACKS == 0)
      /* Msp OSPI initialization */
      OSPI_NOR_MspInit(&hospi_nor[Instance]);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	225c      	movs	r2, #92	; 0x5c
 8006efc:	fb02 f303 	mul.w	r3, r2, r3
 8006f00:	4a37      	ldr	r2, [pc, #220]	; (8006fe0 <BSP_OSPI_NOR_Init+0x110>)
 8006f02:	4413      	add	r3, r2
 8006f04:	4618      	mov	r0, r3
 8006f06:	f000 fa09 	bl	800731c <OSPI_NOR_MspInit>
      if(ret == BSP_ERROR_NONE)
      {
#endif /* USE_HAL_OSPI_REGISTER_CALLBACKS */

        /* Get Flash informations of one memory */
        (void)MX25LM51245G_GetFlashInfo(&pInfo);
 8006f0a:	f107 031c 	add.w	r3, r7, #28
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f7fe fee8 	bl	8005ce4 <MX25LM51245G_GetFlashInfo>

        /* Fill config structure */
        ospi_config.ClockPrescaler = 3U;
 8006f14:	2303      	movs	r3, #3
 8006f16:	613b      	str	r3, [r7, #16]
        ospi_config.MemorySize     = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize);
 8006f18:	69fb      	ldr	r3, [r7, #28]
 8006f1a:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f1e:	fa93 f3a3 	rbit	r3, r3
 8006f22:	643b      	str	r3, [r7, #64]	; 0x40
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006f24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f26:	64bb      	str	r3, [r7, #72]	; 0x48
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006f28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d101      	bne.n	8006f32 <BSP_OSPI_NOR_Init+0x62>
  {
    return 32U;
 8006f2e:	2320      	movs	r3, #32
 8006f30:	e003      	b.n	8006f3a <BSP_OSPI_NOR_Init+0x6a>
  }
  return __builtin_clz(value);
 8006f32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f34:	fab3 f383 	clz	r3, r3
 8006f38:	b2db      	uxtb	r3, r3
 8006f3a:	60fb      	str	r3, [r7, #12]
        ospi_config.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	617b      	str	r3, [r7, #20]
        ospi_config.TransferRate   = (uint32_t)Init->TransferRate;
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	785b      	ldrb	r3, [r3, #1]
 8006f44:	61bb      	str	r3, [r7, #24]

        /* STM32 OSPI interface initialization */
        if (MX_OSPI_NOR_Init(&hospi_nor[Instance], &ospi_config) != HAL_OK)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	225c      	movs	r2, #92	; 0x5c
 8006f4a:	fb02 f303 	mul.w	r3, r2, r3
 8006f4e:	4a24      	ldr	r2, [pc, #144]	; (8006fe0 <BSP_OSPI_NOR_Init+0x110>)
 8006f50:	4413      	add	r3, r2
 8006f52:	f107 020c 	add.w	r2, r7, #12
 8006f56:	4611      	mov	r1, r2
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f000 f895 	bl	8007088 <MX_OSPI_NOR_Init>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d003      	beq.n	8006f6c <BSP_OSPI_NOR_Init+0x9c>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 8006f64:	f06f 0303 	mvn.w	r3, #3
 8006f68:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f6a:	e031      	b.n	8006fd0 <BSP_OSPI_NOR_Init+0x100>
        }
        /* OSPI memory reset */
        else if (OSPI_NOR_ResetMemory(Instance) != BSP_ERROR_NONE)
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f000 fb7f 	bl	8007670 <OSPI_NOR_ResetMemory>
 8006f72:	4603      	mov	r3, r0
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d003      	beq.n	8006f80 <BSP_OSPI_NOR_Init+0xb0>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8006f78:	f06f 0304 	mvn.w	r3, #4
 8006f7c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f7e:	e027      	b.n	8006fd0 <BSP_OSPI_NOR_Init+0x100>
        }
        /* Check if memory is ready */
        else if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	225c      	movs	r2, #92	; 0x5c
 8006f84:	fb02 f303 	mul.w	r3, r2, r3
 8006f88:	4a15      	ldr	r2, [pc, #84]	; (8006fe0 <BSP_OSPI_NOR_Init+0x110>)
 8006f8a:	1898      	adds	r0, r3, r2
 8006f8c:	4a13      	ldr	r2, [pc, #76]	; (8006fdc <BSP_OSPI_NOR_Init+0x10c>)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	00db      	lsls	r3, r3, #3
 8006f92:	4413      	add	r3, r2
 8006f94:	7859      	ldrb	r1, [r3, #1]
 8006f96:	4a11      	ldr	r2, [pc, #68]	; (8006fdc <BSP_OSPI_NOR_Init+0x10c>)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	00db      	lsls	r3, r3, #3
 8006f9c:	4413      	add	r3, r2
 8006f9e:	789b      	ldrb	r3, [r3, #2]
 8006fa0:	461a      	mov	r2, r3
 8006fa2:	f7fe fece 	bl	8005d42 <MX25LM51245G_AutoPollingMemReady>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d003      	beq.n	8006fb4 <BSP_OSPI_NOR_Init+0xe4>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8006fac:	f06f 0304 	mvn.w	r3, #4
 8006fb0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006fb2:	e00d      	b.n	8006fd0 <BSP_OSPI_NOR_Init+0x100>
        }
        else
        {
          /* Configure the memory */
          if (BSP_OSPI_NOR_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	7819      	ldrb	r1, [r3, #0]
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	785b      	ldrb	r3, [r3, #1]
 8006fbc:	461a      	mov	r2, r3
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f000 f936 	bl	8007230 <BSP_OSPI_NOR_ConfigFlash>
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d002      	beq.n	8006fd0 <BSP_OSPI_NOR_Init+0x100>
          {
            ret = BSP_ERROR_COMPONENT_FAILURE;
 8006fca:	f06f 0304 	mvn.w	r3, #4
 8006fce:	64fb      	str	r3, [r7, #76]	; 0x4c
#endif
    }
  }

  /* Return BSP status */
  return ret;
 8006fd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3750      	adds	r7, #80	; 0x50
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}
 8006fda:	bf00      	nop
 8006fdc:	24001fec 	.word	0x24001fec
 8006fe0:	24001f90 	.word	0x24001f90

08006fe4 <BSP_OSPI_NOR_DeInit>:
  * @brief  De-Initializes the OSPI interface.
  * @param  Instance   OSPI Instance
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_DeInit(uint32_t Instance)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b084      	sub	sp, #16
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8006fec:	2300      	movs	r3, #0
 8006fee:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d003      	beq.n	8006ffe <BSP_OSPI_NOR_DeInit+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006ff6:	f06f 0301 	mvn.w	r3, #1
 8006ffa:	60fb      	str	r3, [r7, #12]
 8006ffc:	e03a      	b.n	8007074 <BSP_OSPI_NOR_DeInit+0x90>
  }
  else
  {
    /* Disable Memory mapped mode */
    if(Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_MMP)
 8006ffe:	4a20      	ldr	r2, [pc, #128]	; (8007080 <BSP_OSPI_NOR_DeInit+0x9c>)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8007006:	2b02      	cmp	r3, #2
 8007008:	d108      	bne.n	800701c <BSP_OSPI_NOR_DeInit+0x38>
    {
      if(BSP_OSPI_NOR_DisableMemoryMappedMode(Instance) != BSP_ERROR_NONE)
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f000 f8da 	bl	80071c4 <BSP_OSPI_NOR_DisableMemoryMappedMode>
 8007010:	4603      	mov	r3, r0
 8007012:	2b00      	cmp	r3, #0
 8007014:	d002      	beq.n	800701c <BSP_OSPI_NOR_DeInit+0x38>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007016:	f06f 0304 	mvn.w	r3, #4
 800701a:	60fb      	str	r3, [r7, #12]
      }
    }

    if(ret == BSP_ERROR_NONE)
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d128      	bne.n	8007074 <BSP_OSPI_NOR_DeInit+0x90>
    {
      /* Set default Ospi_Nor_Ctx values */
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_NONE;
 8007022:	4a17      	ldr	r2, [pc, #92]	; (8007080 <BSP_OSPI_NOR_DeInit+0x9c>)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2100      	movs	r1, #0
 8007028:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
      Ospi_Nor_Ctx[Instance].InterfaceMode = BSP_OSPI_NOR_SPI_MODE;
 800702c:	4a14      	ldr	r2, [pc, #80]	; (8007080 <BSP_OSPI_NOR_DeInit+0x9c>)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	00db      	lsls	r3, r3, #3
 8007032:	4413      	add	r3, r2
 8007034:	2200      	movs	r2, #0
 8007036:	705a      	strb	r2, [r3, #1]
      Ospi_Nor_Ctx[Instance].TransferRate  = BSP_OSPI_NOR_STR_TRANSFER;
 8007038:	4a11      	ldr	r2, [pc, #68]	; (8007080 <BSP_OSPI_NOR_DeInit+0x9c>)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	00db      	lsls	r3, r3, #3
 800703e:	4413      	add	r3, r2
 8007040:	2200      	movs	r2, #0
 8007042:	709a      	strb	r2, [r3, #2]

#if (USE_HAL_OSPI_REGISTER_CALLBACKS == 0)
      OSPI_NOR_MspDeInit(&hospi_nor[Instance]);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	225c      	movs	r2, #92	; 0x5c
 8007048:	fb02 f303 	mul.w	r3, r2, r3
 800704c:	4a0d      	ldr	r2, [pc, #52]	; (8007084 <BSP_OSPI_NOR_DeInit+0xa0>)
 800704e:	4413      	add	r3, r2
 8007050:	4618      	mov	r0, r3
 8007052:	f000 fab3 	bl	80075bc <OSPI_NOR_MspDeInit>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS == 0) */

      /* Call the DeInit function to reset the driver */
      if (HAL_OSPI_DeInit(&hospi_nor[Instance]) != HAL_OK)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	225c      	movs	r2, #92	; 0x5c
 800705a:	fb02 f303 	mul.w	r3, r2, r3
 800705e:	4a09      	ldr	r2, [pc, #36]	; (8007084 <BSP_OSPI_NOR_DeInit+0xa0>)
 8007060:	4413      	add	r3, r2
 8007062:	4618      	mov	r0, r3
 8007064:	f003 fba0 	bl	800a7a8 <HAL_OSPI_DeInit>
 8007068:	4603      	mov	r3, r0
 800706a:	2b00      	cmp	r3, #0
 800706c:	d002      	beq.n	8007074 <BSP_OSPI_NOR_DeInit+0x90>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 800706e:	f06f 0303 	mvn.w	r3, #3
 8007072:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Return BSP status */
  return ret;
 8007074:	68fb      	ldr	r3, [r7, #12]
}
 8007076:	4618      	mov	r0, r3
 8007078:	3710      	adds	r7, #16
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}
 800707e:	bf00      	nop
 8007080:	24001fec 	.word	0x24001fec
 8007084:	24001f90 	.word	0x24001f90

08007088 <MX_OSPI_NOR_Init>:
  * @param  hospi          OSPI handle
  * @param  Config         OSPI config structure
  * @retval BSP status
  */
__weak HAL_StatusTypeDef MX_OSPI_NOR_Init(OSPI_HandleTypeDef *hospi, MX_OSPI_Config *Config)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b082      	sub	sp, #8
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
 8007090:	6039      	str	r1, [r7, #0]
    /* OctoSPI initialization */
  hospi->Instance = OCTOSPI1;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	4a20      	ldr	r2, [pc, #128]	; (8007118 <MX_OSPI_NOR_Init+0x90>)
 8007096:	601a      	str	r2, [r3, #0]

  hospi->Init.FifoThreshold      = 32;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2220      	movs	r2, #32
 800709c:	605a      	str	r2, [r3, #4]
  hospi->Init.DualQuad           = HAL_OSPI_DUALQUAD_DISABLE;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2200      	movs	r2, #0
 80070a2:	609a      	str	r2, [r3, #8]
  hospi->Init.DeviceSize         = Config->MemorySize; /* 512 MBits */
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	681a      	ldr	r2, [r3, #0]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	611a      	str	r2, [r3, #16]
  hospi->Init.ChipSelectHighTime = 2;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2202      	movs	r2, #2
 80070b0:	615a      	str	r2, [r3, #20]
  hospi->Init.FreeRunningClock   = HAL_OSPI_FREERUNCLK_DISABLE;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2200      	movs	r2, #0
 80070b6:	619a      	str	r2, [r3, #24]
  hospi->Init.ClockMode          = HAL_OSPI_CLOCK_MODE_0;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2200      	movs	r2, #0
 80070bc:	61da      	str	r2, [r3, #28]
  hospi->Init.WrapSize           = HAL_OSPI_WRAP_NOT_SUPPORTED;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2200      	movs	r2, #0
 80070c2:	621a      	str	r2, [r3, #32]
  hospi->Init.ClockPrescaler     = Config->ClockPrescaler;
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	685a      	ldr	r2, [r3, #4]
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	625a      	str	r2, [r3, #36]	; 0x24
  hospi->Init.SampleShifting     = Config->SampleShifting;
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	689a      	ldr	r2, [r3, #8]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	629a      	str	r2, [r3, #40]	; 0x28
  hospi->Init.ChipSelectBoundary = 0;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2200      	movs	r2, #0
 80070d8:	631a      	str	r2, [r3, #48]	; 0x30
  hospi->Init.DelayBlockBypass   = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2208      	movs	r2, #8
 80070de:	635a      	str	r2, [r3, #52]	; 0x34

  if (Config->TransferRate == (uint32_t)BSP_OSPI_NOR_DTR_TRANSFER)
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	68db      	ldr	r3, [r3, #12]
 80070e4:	2b01      	cmp	r3, #1
 80070e6:	d108      	bne.n	80070fa <MX_OSPI_NOR_Init+0x72>
  {
    hospi->Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80070ee:	60da      	str	r2, [r3, #12]
    hospi->Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070f6:	62da      	str	r2, [r3, #44]	; 0x2c
 80070f8:	e005      	b.n	8007106 <MX_OSPI_NOR_Init+0x7e>
  }
  else
  {
    hospi->Init.MemoryType            = HAL_OSPI_MEMTYPE_MICRON;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2200      	movs	r2, #0
 80070fe:	60da      	str	r2, [r3, #12]
    hospi->Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2200      	movs	r2, #0
 8007104:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  return HAL_OSPI_Init(hospi);
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f003 fa92 	bl	800a630 <HAL_OSPI_Init>
 800710c:	4603      	mov	r3, r0
}
 800710e:	4618      	mov	r0, r3
 8007110:	3708      	adds	r7, #8
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}
 8007116:	bf00      	nop
 8007118:	52005000 	.word	0x52005000

0800711c <BSP_OSPI_NOR_EnableMemoryMappedMode>:
  * @brief  Configure the OSPI in memory-mapped mode
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_EnableMemoryMappedMode(uint32_t Instance)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b084      	sub	sp, #16
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8007124:	2300      	movs	r3, #0
 8007126:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d003      	beq.n	8007136 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800712e:	f06f 0301 	mvn.w	r3, #1
 8007132:	60fb      	str	r3, [r7, #12]
 8007134:	e03d      	b.n	80071b2 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x96>
  }
  else if(Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 8007136:	4a21      	ldr	r2, [pc, #132]	; (80071bc <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa0>)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	00db      	lsls	r3, r3, #3
 800713c:	4413      	add	r3, r2
 800713e:	789b      	ldrb	r3, [r3, #2]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d11b      	bne.n	800717c <BSP_OSPI_NOR_EnableMemoryMappedMode+0x60>
  {
    if(MX25LM51245G_EnableMemoryMappedModeSTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, MX25LM51245G_4BYTES_SIZE) != MX25LM51245G_OK)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	225c      	movs	r2, #92	; 0x5c
 8007148:	fb02 f303 	mul.w	r3, r2, r3
 800714c:	4a1c      	ldr	r2, [pc, #112]	; (80071c0 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa4>)
 800714e:	1898      	adds	r0, r3, r2
 8007150:	4a1a      	ldr	r2, [pc, #104]	; (80071bc <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa0>)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	00db      	lsls	r3, r3, #3
 8007156:	4413      	add	r3, r2
 8007158:	785b      	ldrb	r3, [r3, #1]
 800715a:	2201      	movs	r2, #1
 800715c:	4619      	mov	r1, r3
 800715e:	f7fe fe9d 	bl	8005e9c <MX25LM51245G_EnableMemoryMappedModeSTR>
 8007162:	4603      	mov	r3, r0
 8007164:	2b00      	cmp	r3, #0
 8007166:	d003      	beq.n	8007170 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x54>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8007168:	f06f 0304 	mvn.w	r3, #4
 800716c:	60fb      	str	r3, [r7, #12]
 800716e:	e020      	b.n	80071b2 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x96>
    }
    else /* Update OSPI context if all operations are well done */
    {
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_MMP;
 8007170:	4a12      	ldr	r2, [pc, #72]	; (80071bc <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa0>)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2102      	movs	r1, #2
 8007176:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
 800717a:	e01a      	b.n	80071b2 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x96>
    }
  }
  else
  {
    if(MX25LM51245G_EnableMemoryMappedModeDTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode) != MX25LM51245G_OK)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	225c      	movs	r2, #92	; 0x5c
 8007180:	fb02 f303 	mul.w	r3, r2, r3
 8007184:	4a0e      	ldr	r2, [pc, #56]	; (80071c0 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa4>)
 8007186:	441a      	add	r2, r3
 8007188:	490c      	ldr	r1, [pc, #48]	; (80071bc <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa0>)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	00db      	lsls	r3, r3, #3
 800718e:	440b      	add	r3, r1
 8007190:	785b      	ldrb	r3, [r3, #1]
 8007192:	4619      	mov	r1, r3
 8007194:	4610      	mov	r0, r2
 8007196:	f7fe ff2b 	bl	8005ff0 <MX25LM51245G_EnableMemoryMappedModeDTR>
 800719a:	4603      	mov	r3, r0
 800719c:	2b00      	cmp	r3, #0
 800719e:	d003      	beq.n	80071a8 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x8c>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80071a0:	f06f 0304 	mvn.w	r3, #4
 80071a4:	60fb      	str	r3, [r7, #12]
 80071a6:	e004      	b.n	80071b2 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x96>
    }
    else /* Update OSPI context if all operations are well done */
    {
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_MMP;
 80071a8:	4a04      	ldr	r2, [pc, #16]	; (80071bc <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa0>)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2102      	movs	r1, #2
 80071ae:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
    }
  }

  /* Return BSP status */
  return ret;
 80071b2:	68fb      	ldr	r3, [r7, #12]
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	3710      	adds	r7, #16
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}
 80071bc:	24001fec 	.word	0x24001fec
 80071c0:	24001f90 	.word	0x24001f90

080071c4 <BSP_OSPI_NOR_DisableMemoryMappedMode>:
  *         Only 1 Instance can running MMP mode. And it will lock system at this mode.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_DisableMemoryMappedMode(uint32_t Instance)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b084      	sub	sp, #16
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80071cc:	2300      	movs	r3, #0
 80071ce:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d003      	beq.n	80071de <BSP_OSPI_NOR_DisableMemoryMappedMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80071d6:	f06f 0301 	mvn.w	r3, #1
 80071da:	60fb      	str	r3, [r7, #12]
 80071dc:	e01e      	b.n	800721c <BSP_OSPI_NOR_DisableMemoryMappedMode+0x58>
  }
  else if(Ospi_Nor_Ctx[Instance].IsInitialized != OSPI_ACCESS_MMP)
 80071de:	4a12      	ldr	r2, [pc, #72]	; (8007228 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x64>)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80071e6:	2b02      	cmp	r3, #2
 80071e8:	d003      	beq.n	80071f2 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x2e>
  {
    ret = BSP_ERROR_OSPI_MMP_UNLOCK_FAILURE;
 80071ea:	f06f 031a 	mvn.w	r3, #26
 80071ee:	60fb      	str	r3, [r7, #12]
 80071f0:	e014      	b.n	800721c <BSP_OSPI_NOR_DisableMemoryMappedMode+0x58>
  }/* Abort MMP back to indirect mode */
  else if(HAL_OSPI_Abort(&hospi_nor[Instance]) != HAL_OK)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	225c      	movs	r2, #92	; 0x5c
 80071f6:	fb02 f303 	mul.w	r3, r2, r3
 80071fa:	4a0c      	ldr	r2, [pc, #48]	; (800722c <BSP_OSPI_NOR_DisableMemoryMappedMode+0x68>)
 80071fc:	4413      	add	r3, r2
 80071fe:	4618      	mov	r0, r3
 8007200:	f003 ff04 	bl	800b00c <HAL_OSPI_Abort>
 8007204:	4603      	mov	r3, r0
 8007206:	2b00      	cmp	r3, #0
 8007208:	d003      	beq.n	8007212 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x4e>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 800720a:	f06f 0303 	mvn.w	r3, #3
 800720e:	60fb      	str	r3, [r7, #12]
 8007210:	e004      	b.n	800721c <BSP_OSPI_NOR_DisableMemoryMappedMode+0x58>
  }
  else
  {
    /* Update OSPI context if all operations are well done */
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 8007212:	4a05      	ldr	r2, [pc, #20]	; (8007228 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x64>)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2101      	movs	r1, #1
 8007218:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
  }

  /* Return BSP status */
  return ret;
 800721c:	68fb      	ldr	r3, [r7, #12]
}
 800721e:	4618      	mov	r0, r3
 8007220:	3710      	adds	r7, #16
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}
 8007226:	bf00      	nop
 8007228:	24001fec 	.word	0x24001fec
 800722c:	24001f90 	.word	0x24001f90

08007230 <BSP_OSPI_NOR_ConfigFlash>:
  * @param  Mode      OSPI mode
  * @param  Rate      OSPI transfer rate
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_ConfigFlash(uint32_t Instance, BSP_OSPI_NOR_Interface_t Mode, BSP_OSPI_NOR_Transfer_t Rate)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b084      	sub	sp, #16
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
 8007238:	460b      	mov	r3, r1
 800723a:	70fb      	strb	r3, [r7, #3]
 800723c:	4613      	mov	r3, r2
 800723e:	70bb      	strb	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 8007240:	2300      	movs	r3, #0
 8007242:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d003      	beq.n	8007252 <BSP_OSPI_NOR_ConfigFlash+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800724a:	f06f 0301 	mvn.w	r3, #1
 800724e:	60fb      	str	r3, [r7, #12]
 8007250:	e05d      	b.n	800730e <BSP_OSPI_NOR_ConfigFlash+0xde>
  }/* Check if MMP mode locked ************************************************/
  else if(Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_MMP)
 8007252:	4a31      	ldr	r2, [pc, #196]	; (8007318 <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800725a:	2b02      	cmp	r3, #2
 800725c:	d103      	bne.n	8007266 <BSP_OSPI_NOR_ConfigFlash+0x36>
  {
    ret = BSP_ERROR_OSPI_MMP_LOCK_FAILURE;
 800725e:	f06f 0319 	mvn.w	r3, #25
 8007262:	60fb      	str	r3, [r7, #12]
 8007264:	e053      	b.n	800730e <BSP_OSPI_NOR_ConfigFlash+0xde>
  }
  else
  {
    /* Setup Flash interface ***************************************************/
    switch(Ospi_Nor_Ctx[Instance].InterfaceMode)
 8007266:	4a2c      	ldr	r2, [pc, #176]	; (8007318 <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	00db      	lsls	r3, r3, #3
 800726c:	4413      	add	r3, r2
 800726e:	785b      	ldrb	r3, [r3, #1]
 8007270:	2b01      	cmp	r3, #1
 8007272:	d125      	bne.n	80072c0 <BSP_OSPI_NOR_ConfigFlash+0x90>
    {
    case BSP_OSPI_NOR_OPI_MODE :  /* 8-8-8 commands */
      if((Mode != BSP_OSPI_NOR_OPI_MODE) || (Rate != Ospi_Nor_Ctx[Instance].TransferRate))
 8007274:	78fb      	ldrb	r3, [r7, #3]
 8007276:	2b01      	cmp	r3, #1
 8007278:	d107      	bne.n	800728a <BSP_OSPI_NOR_ConfigFlash+0x5a>
 800727a:	4a27      	ldr	r2, [pc, #156]	; (8007318 <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	00db      	lsls	r3, r3, #3
 8007280:	4413      	add	r3, r2
 8007282:	789b      	ldrb	r3, [r3, #2]
 8007284:	78ba      	ldrb	r2, [r7, #2]
 8007286:	429a      	cmp	r2, r3
 8007288:	d02a      	beq.n	80072e0 <BSP_OSPI_NOR_ConfigFlash+0xb0>
      {
        /* Exit OPI mode */
        ret = OSPI_NOR_ExitOPIMode(Instance);
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f000 fbfc 	bl	8007a88 <OSPI_NOR_ExitOPIMode>
 8007290:	60f8      	str	r0, [r7, #12]

        if ((ret == BSP_ERROR_NONE) && (Mode == BSP_OSPI_NOR_OPI_MODE))
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d123      	bne.n	80072e0 <BSP_OSPI_NOR_ConfigFlash+0xb0>
 8007298:	78fb      	ldrb	r3, [r7, #3]
 800729a:	2b01      	cmp	r3, #1
 800729c:	d120      	bne.n	80072e0 <BSP_OSPI_NOR_ConfigFlash+0xb0>
        {

          if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 800729e:	4a1e      	ldr	r2, [pc, #120]	; (8007318 <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	00db      	lsls	r3, r3, #3
 80072a4:	4413      	add	r3, r2
 80072a6:	789b      	ldrb	r3, [r3, #2]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d104      	bne.n	80072b6 <BSP_OSPI_NOR_ConfigFlash+0x86>
          {
            /* Enter DTR OPI mode */
            ret = OSPI_NOR_EnterDOPIMode(Instance);
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f000 fa6f 	bl	8007790 <OSPI_NOR_EnterDOPIMode>
 80072b2:	60f8      	str	r0, [r7, #12]
            /* Enter STR OPI mode */
            ret = OSPI_NOR_EnterSOPIMode(Instance);
          }
        }
      }
      break;
 80072b4:	e014      	b.n	80072e0 <BSP_OSPI_NOR_ConfigFlash+0xb0>
            ret = OSPI_NOR_EnterSOPIMode(Instance);
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f000 fb3a 	bl	8007930 <OSPI_NOR_EnterSOPIMode>
 80072bc:	60f8      	str	r0, [r7, #12]
      break;
 80072be:	e00f      	b.n	80072e0 <BSP_OSPI_NOR_ConfigFlash+0xb0>

    case BSP_OSPI_NOR_SPI_MODE :  /* 1-1-1 commands, Power on H/W default setting */
    default :
      if(Mode == BSP_OSPI_NOR_OPI_MODE)
 80072c0:	78fb      	ldrb	r3, [r7, #3]
 80072c2:	2b01      	cmp	r3, #1
 80072c4:	d10e      	bne.n	80072e4 <BSP_OSPI_NOR_ConfigFlash+0xb4>
      {
        if(Rate == BSP_OSPI_NOR_STR_TRANSFER)
 80072c6:	78bb      	ldrb	r3, [r7, #2]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d104      	bne.n	80072d6 <BSP_OSPI_NOR_ConfigFlash+0xa6>
        {
          /* Enter STR OPI mode */
          ret = OSPI_NOR_EnterSOPIMode(Instance);
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f000 fb2f 	bl	8007930 <OSPI_NOR_EnterSOPIMode>
 80072d2:	60f8      	str	r0, [r7, #12]
        {
          /* Enter DTR OPI mode */
          ret = OSPI_NOR_EnterDOPIMode(Instance);
        }
      }
      break;
 80072d4:	e006      	b.n	80072e4 <BSP_OSPI_NOR_ConfigFlash+0xb4>
          ret = OSPI_NOR_EnterDOPIMode(Instance);
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f000 fa5a 	bl	8007790 <OSPI_NOR_EnterDOPIMode>
 80072dc:	60f8      	str	r0, [r7, #12]
      break;
 80072de:	e001      	b.n	80072e4 <BSP_OSPI_NOR_ConfigFlash+0xb4>
      break;
 80072e0:	bf00      	nop
 80072e2:	e000      	b.n	80072e6 <BSP_OSPI_NOR_ConfigFlash+0xb6>
      break;
 80072e4:	bf00      	nop
    }

    /* Update OSPI context if all operations are well done */
    if(ret == BSP_ERROR_NONE)
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d110      	bne.n	800730e <BSP_OSPI_NOR_ConfigFlash+0xde>
    {
      /* Update current status parameter *****************************************/
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 80072ec:	4a0a      	ldr	r2, [pc, #40]	; (8007318 <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2101      	movs	r1, #1
 80072f2:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
      Ospi_Nor_Ctx[Instance].InterfaceMode = Mode;
 80072f6:	4a08      	ldr	r2, [pc, #32]	; (8007318 <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	00db      	lsls	r3, r3, #3
 80072fc:	4413      	add	r3, r2
 80072fe:	78fa      	ldrb	r2, [r7, #3]
 8007300:	705a      	strb	r2, [r3, #1]
      Ospi_Nor_Ctx[Instance].TransferRate  = Rate;
 8007302:	4a05      	ldr	r2, [pc, #20]	; (8007318 <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	00db      	lsls	r3, r3, #3
 8007308:	4413      	add	r3, r2
 800730a:	78ba      	ldrb	r2, [r7, #2]
 800730c:	709a      	strb	r2, [r3, #2]
    }
  }

  /* Return BSP status */
  return ret;
 800730e:	68fb      	ldr	r3, [r7, #12]
}
 8007310:	4618      	mov	r0, r3
 8007312:	3710      	adds	r7, #16
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}
 8007318:	24001fec 	.word	0x24001fec

0800731c <OSPI_NOR_MspInit>:
  * @brief  Initializes the OSPI MSP.
  * @param  hospi OSPI handle
  * @retval None
  */
static void OSPI_NOR_MspInit(OSPI_HandleTypeDef *hospi)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b094      	sub	sp, #80	; 0x50
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]

  /* hospi unused argument(s) compilation warning */
  UNUSED(hospi);

  /* Enable the OctoSPI memory interface clock */
  OSPI_CLK_ENABLE();
 8007324:	4b9e      	ldr	r3, [pc, #632]	; (80075a0 <OSPI_NOR_MspInit+0x284>)
 8007326:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800732a:	4a9d      	ldr	r2, [pc, #628]	; (80075a0 <OSPI_NOR_MspInit+0x284>)
 800732c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007330:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8007334:	4b9a      	ldr	r3, [pc, #616]	; (80075a0 <OSPI_NOR_MspInit+0x284>)
 8007336:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800733a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800733e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007340:	6bbb      	ldr	r3, [r7, #56]	; 0x38

  /* Reset the OctoSPI memory interface */
  OSPI_FORCE_RESET();
 8007342:	4b97      	ldr	r3, [pc, #604]	; (80075a0 <OSPI_NOR_MspInit+0x284>)
 8007344:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007346:	4a96      	ldr	r2, [pc, #600]	; (80075a0 <OSPI_NOR_MspInit+0x284>)
 8007348:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800734c:	67d3      	str	r3, [r2, #124]	; 0x7c
  OSPI_RELEASE_RESET();
 800734e:	4b94      	ldr	r3, [pc, #592]	; (80075a0 <OSPI_NOR_MspInit+0x284>)
 8007350:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007352:	4a93      	ldr	r2, [pc, #588]	; (80075a0 <OSPI_NOR_MspInit+0x284>)
 8007354:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007358:	67d3      	str	r3, [r2, #124]	; 0x7c

  /* Enable GPIO clocks */
  OSPI_CLK_GPIO_CLK_ENABLE();
 800735a:	4b91      	ldr	r3, [pc, #580]	; (80075a0 <OSPI_NOR_MspInit+0x284>)
 800735c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8007360:	4a8f      	ldr	r2, [pc, #572]	; (80075a0 <OSPI_NOR_MspInit+0x284>)
 8007362:	f043 0302 	orr.w	r3, r3, #2
 8007366:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800736a:	4b8d      	ldr	r3, [pc, #564]	; (80075a0 <OSPI_NOR_MspInit+0x284>)
 800736c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8007370:	f003 0302 	and.w	r3, r3, #2
 8007374:	637b      	str	r3, [r7, #52]	; 0x34
 8007376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  OSPI_DQS_GPIO_CLK_ENABLE();
 8007378:	4b89      	ldr	r3, [pc, #548]	; (80075a0 <OSPI_NOR_MspInit+0x284>)
 800737a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800737e:	4a88      	ldr	r2, [pc, #544]	; (80075a0 <OSPI_NOR_MspInit+0x284>)
 8007380:	f043 0304 	orr.w	r3, r3, #4
 8007384:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8007388:	4b85      	ldr	r3, [pc, #532]	; (80075a0 <OSPI_NOR_MspInit+0x284>)
 800738a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800738e:	f003 0304 	and.w	r3, r3, #4
 8007392:	633b      	str	r3, [r7, #48]	; 0x30
 8007394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  OSPI_CS_GPIO_CLK_ENABLE();
 8007396:	4b82      	ldr	r3, [pc, #520]	; (80075a0 <OSPI_NOR_MspInit+0x284>)
 8007398:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800739c:	4a80      	ldr	r2, [pc, #512]	; (80075a0 <OSPI_NOR_MspInit+0x284>)
 800739e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073a2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80073a6:	4b7e      	ldr	r3, [pc, #504]	; (80075a0 <OSPI_NOR_MspInit+0x284>)
 80073a8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80073ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  OSPI_D0_GPIO_CLK_ENABLE();
 80073b4:	4b7a      	ldr	r3, [pc, #488]	; (80075a0 <OSPI_NOR_MspInit+0x284>)
 80073b6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80073ba:	4a79      	ldr	r2, [pc, #484]	; (80075a0 <OSPI_NOR_MspInit+0x284>)
 80073bc:	f043 0308 	orr.w	r3, r3, #8
 80073c0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80073c4:	4b76      	ldr	r3, [pc, #472]	; (80075a0 <OSPI_NOR_MspInit+0x284>)
 80073c6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80073ca:	f003 0308 	and.w	r3, r3, #8
 80073ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80073d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  OSPI_D1_GPIO_CLK_ENABLE();
 80073d2:	4b73      	ldr	r3, [pc, #460]	; (80075a0 <OSPI_NOR_MspInit+0x284>)
 80073d4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80073d8:	4a71      	ldr	r2, [pc, #452]	; (80075a0 <OSPI_NOR_MspInit+0x284>)
 80073da:	f043 0320 	orr.w	r3, r3, #32
 80073de:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80073e2:	4b6f      	ldr	r3, [pc, #444]	; (80075a0 <OSPI_NOR_MspInit+0x284>)
 80073e4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80073e8:	f003 0320 	and.w	r3, r3, #32
 80073ec:	627b      	str	r3, [r7, #36]	; 0x24
 80073ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  OSPI_D2_GPIO_CLK_ENABLE();
 80073f0:	4b6b      	ldr	r3, [pc, #428]	; (80075a0 <OSPI_NOR_MspInit+0x284>)
 80073f2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80073f6:	4a6a      	ldr	r2, [pc, #424]	; (80075a0 <OSPI_NOR_MspInit+0x284>)
 80073f8:	f043 0320 	orr.w	r3, r3, #32
 80073fc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8007400:	4b67      	ldr	r3, [pc, #412]	; (80075a0 <OSPI_NOR_MspInit+0x284>)
 8007402:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8007406:	f003 0320 	and.w	r3, r3, #32
 800740a:	623b      	str	r3, [r7, #32]
 800740c:	6a3b      	ldr	r3, [r7, #32]
  OSPI_D3_GPIO_CLK_ENABLE();
 800740e:	4b64      	ldr	r3, [pc, #400]	; (80075a0 <OSPI_NOR_MspInit+0x284>)
 8007410:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8007414:	4a62      	ldr	r2, [pc, #392]	; (80075a0 <OSPI_NOR_MspInit+0x284>)
 8007416:	f043 0320 	orr.w	r3, r3, #32
 800741a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800741e:	4b60      	ldr	r3, [pc, #384]	; (80075a0 <OSPI_NOR_MspInit+0x284>)
 8007420:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8007424:	f003 0320 	and.w	r3, r3, #32
 8007428:	61fb      	str	r3, [r7, #28]
 800742a:	69fb      	ldr	r3, [r7, #28]
  OSPI_D4_GPIO_CLK_ENABLE();
 800742c:	4b5c      	ldr	r3, [pc, #368]	; (80075a0 <OSPI_NOR_MspInit+0x284>)
 800742e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8007432:	4a5b      	ldr	r2, [pc, #364]	; (80075a0 <OSPI_NOR_MspInit+0x284>)
 8007434:	f043 0304 	orr.w	r3, r3, #4
 8007438:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800743c:	4b58      	ldr	r3, [pc, #352]	; (80075a0 <OSPI_NOR_MspInit+0x284>)
 800743e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8007442:	f003 0304 	and.w	r3, r3, #4
 8007446:	61bb      	str	r3, [r7, #24]
 8007448:	69bb      	ldr	r3, [r7, #24]
  OSPI_D5_GPIO_CLK_ENABLE();
 800744a:	4b55      	ldr	r3, [pc, #340]	; (80075a0 <OSPI_NOR_MspInit+0x284>)
 800744c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8007450:	4a53      	ldr	r2, [pc, #332]	; (80075a0 <OSPI_NOR_MspInit+0x284>)
 8007452:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007456:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800745a:	4b51      	ldr	r3, [pc, #324]	; (80075a0 <OSPI_NOR_MspInit+0x284>)
 800745c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8007460:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007464:	617b      	str	r3, [r7, #20]
 8007466:	697b      	ldr	r3, [r7, #20]
  OSPI_D6_GPIO_CLK_ENABLE();
 8007468:	4b4d      	ldr	r3, [pc, #308]	; (80075a0 <OSPI_NOR_MspInit+0x284>)
 800746a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800746e:	4a4c      	ldr	r2, [pc, #304]	; (80075a0 <OSPI_NOR_MspInit+0x284>)
 8007470:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007474:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8007478:	4b49      	ldr	r3, [pc, #292]	; (80075a0 <OSPI_NOR_MspInit+0x284>)
 800747a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800747e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007482:	613b      	str	r3, [r7, #16]
 8007484:	693b      	ldr	r3, [r7, #16]
  OSPI_D7_GPIO_CLK_ENABLE();
 8007486:	4b46      	ldr	r3, [pc, #280]	; (80075a0 <OSPI_NOR_MspInit+0x284>)
 8007488:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800748c:	4a44      	ldr	r2, [pc, #272]	; (80075a0 <OSPI_NOR_MspInit+0x284>)
 800748e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007492:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8007496:	4b42      	ldr	r3, [pc, #264]	; (80075a0 <OSPI_NOR_MspInit+0x284>)
 8007498:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800749c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074a0:	60fb      	str	r3, [r7, #12]
 80074a2:	68fb      	ldr	r3, [r7, #12]

  /* OctoSPI CS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_CS_PIN;
 80074a4:	2340      	movs	r3, #64	; 0x40
 80074a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80074a8:	2302      	movs	r3, #2
 80074aa:	643b      	str	r3, [r7, #64]	; 0x40
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 80074ac:	2301      	movs	r3, #1
 80074ae:	647b      	str	r3, [r7, #68]	; 0x44
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80074b0:	2303      	movs	r3, #3
 80074b2:	64bb      	str	r3, [r7, #72]	; 0x48
  GPIO_InitStruct.Alternate = OSPI_CS_PIN_AF;
 80074b4:	230a      	movs	r3, #10
 80074b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_CS_GPIO_PORT, &GPIO_InitStruct);
 80074b8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80074bc:	4619      	mov	r1, r3
 80074be:	4839      	ldr	r0, [pc, #228]	; (80075a4 <OSPI_NOR_MspInit+0x288>)
 80074c0:	f001 fb3c 	bl	8008b3c <HAL_GPIO_Init>

  /* OctoSPI DQS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_DQS_PIN;
 80074c4:	2320      	movs	r3, #32
 80074c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_DQS_PIN_AF;
 80074c8:	230a      	movs	r3, #10
 80074ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_DQS_GPIO_PORT, &GPIO_InitStruct);
 80074cc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80074d0:	4619      	mov	r1, r3
 80074d2:	4835      	ldr	r0, [pc, #212]	; (80075a8 <OSPI_NOR_MspInit+0x28c>)
 80074d4:	f001 fb32 	bl	8008b3c <HAL_GPIO_Init>

  /* OctoSPI CLK GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_CLK_PIN;
 80074d8:	2304      	movs	r3, #4
 80074da:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 80074dc:	2300      	movs	r3, #0
 80074de:	647b      	str	r3, [r7, #68]	; 0x44
  GPIO_InitStruct.Alternate = OSPI_CLK_PIN_AF;
 80074e0:	2309      	movs	r3, #9
 80074e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_CLK_GPIO_PORT, &GPIO_InitStruct);
 80074e4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80074e8:	4619      	mov	r1, r3
 80074ea:	4830      	ldr	r0, [pc, #192]	; (80075ac <OSPI_NOR_MspInit+0x290>)
 80074ec:	f001 fb26 	bl	8008b3c <HAL_GPIO_Init>

  /* OctoSPI D0 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D0_PIN;
 80074f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80074f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D0_PIN_AF;
 80074f6:	2309      	movs	r3, #9
 80074f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D0_GPIO_PORT, &GPIO_InitStruct);
 80074fa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80074fe:	4619      	mov	r1, r3
 8007500:	482b      	ldr	r0, [pc, #172]	; (80075b0 <OSPI_NOR_MspInit+0x294>)
 8007502:	f001 fb1b 	bl	8008b3c <HAL_GPIO_Init>

  /* OctoSPI D1 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D1_PIN;
 8007506:	f44f 7300 	mov.w	r3, #512	; 0x200
 800750a:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D1_PIN_AF;
 800750c:	230a      	movs	r3, #10
 800750e:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D1_GPIO_PORT, &GPIO_InitStruct);
 8007510:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007514:	4619      	mov	r1, r3
 8007516:	4827      	ldr	r0, [pc, #156]	; (80075b4 <OSPI_NOR_MspInit+0x298>)
 8007518:	f001 fb10 	bl	8008b3c <HAL_GPIO_Init>

  /* OctoSPI D2 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D2_PIN;
 800751c:	2380      	movs	r3, #128	; 0x80
 800751e:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D2_PIN_AF;
 8007520:	230a      	movs	r3, #10
 8007522:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D2_GPIO_PORT, &GPIO_InitStruct);
 8007524:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007528:	4619      	mov	r1, r3
 800752a:	4822      	ldr	r0, [pc, #136]	; (80075b4 <OSPI_NOR_MspInit+0x298>)
 800752c:	f001 fb06 	bl	8008b3c <HAL_GPIO_Init>

  /* OctoSPI D3 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D3_PIN;
 8007530:	2340      	movs	r3, #64	; 0x40
 8007532:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D3_PIN_AF;
 8007534:	230a      	movs	r3, #10
 8007536:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D3_GPIO_PORT, &GPIO_InitStruct);
 8007538:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800753c:	4619      	mov	r1, r3
 800753e:	481d      	ldr	r0, [pc, #116]	; (80075b4 <OSPI_NOR_MspInit+0x298>)
 8007540:	f001 fafc 	bl	8008b3c <HAL_GPIO_Init>

  /* OctoSPI D4 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D4_PIN;
 8007544:	2302      	movs	r3, #2
 8007546:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D4_PIN_AF;
 8007548:	230a      	movs	r3, #10
 800754a:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D4_GPIO_PORT, &GPIO_InitStruct);
 800754c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007550:	4619      	mov	r1, r3
 8007552:	4815      	ldr	r0, [pc, #84]	; (80075a8 <OSPI_NOR_MspInit+0x28c>)
 8007554:	f001 faf2 	bl	8008b3c <HAL_GPIO_Init>

  /* OctoSPI D5 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D5_PIN;
 8007558:	2308      	movs	r3, #8
 800755a:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D5_PIN_AF;
 800755c:	2309      	movs	r3, #9
 800755e:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D5_GPIO_PORT, &GPIO_InitStruct);
 8007560:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007564:	4619      	mov	r1, r3
 8007566:	4814      	ldr	r0, [pc, #80]	; (80075b8 <OSPI_NOR_MspInit+0x29c>)
 8007568:	f001 fae8 	bl	8008b3c <HAL_GPIO_Init>

  /* OctoSPI D6 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D6_PIN;
 800756c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007570:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D6_PIN_AF;
 8007572:	2309      	movs	r3, #9
 8007574:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D6_GPIO_PORT, &GPIO_InitStruct);
 8007576:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800757a:	4619      	mov	r1, r3
 800757c:	4809      	ldr	r0, [pc, #36]	; (80075a4 <OSPI_NOR_MspInit+0x288>)
 800757e:	f001 fadd 	bl	8008b3c <HAL_GPIO_Init>

  /* OctoSPI D7 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D7_PIN;
 8007582:	2380      	movs	r3, #128	; 0x80
 8007584:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D7_PIN_AF;
 8007586:	230a      	movs	r3, #10
 8007588:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D7_GPIO_PORT, &GPIO_InitStruct);
 800758a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800758e:	4619      	mov	r1, r3
 8007590:	4807      	ldr	r0, [pc, #28]	; (80075b0 <OSPI_NOR_MspInit+0x294>)
 8007592:	f001 fad3 	bl	8008b3c <HAL_GPIO_Init>
}
 8007596:	bf00      	nop
 8007598:	3750      	adds	r7, #80	; 0x50
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}
 800759e:	bf00      	nop
 80075a0:	58024400 	.word	0x58024400
 80075a4:	58021800 	.word	0x58021800
 80075a8:	58020800 	.word	0x58020800
 80075ac:	58020400 	.word	0x58020400
 80075b0:	58020c00 	.word	0x58020c00
 80075b4:	58021400 	.word	0x58021400
 80075b8:	58021c00 	.word	0x58021c00

080075bc <OSPI_NOR_MspDeInit>:
  * @brief  De-Initializes the OSPI MSP.
  * @param  hospi OSPI handle
  * @retval None
  */
static void OSPI_NOR_MspDeInit(OSPI_HandleTypeDef *hospi)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b082      	sub	sp, #8
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
  /* hospi unused argument(s) compilation warning */
  UNUSED(hospi);

  /* OctoSPI GPIO pins de-configuration  */
  HAL_GPIO_DeInit(OSPI_CLK_GPIO_PORT, OSPI_CLK_PIN);
 80075c4:	2104      	movs	r1, #4
 80075c6:	4823      	ldr	r0, [pc, #140]	; (8007654 <OSPI_NOR_MspDeInit+0x98>)
 80075c8:	f001 fc68 	bl	8008e9c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_DQS_GPIO_PORT, OSPI_DQS_PIN);
 80075cc:	2120      	movs	r1, #32
 80075ce:	4822      	ldr	r0, [pc, #136]	; (8007658 <OSPI_NOR_MspDeInit+0x9c>)
 80075d0:	f001 fc64 	bl	8008e9c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_CS_GPIO_PORT, OSPI_CS_PIN);
 80075d4:	2140      	movs	r1, #64	; 0x40
 80075d6:	4821      	ldr	r0, [pc, #132]	; (800765c <OSPI_NOR_MspDeInit+0xa0>)
 80075d8:	f001 fc60 	bl	8008e9c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D0_GPIO_PORT, OSPI_D0_PIN);
 80075dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80075e0:	481f      	ldr	r0, [pc, #124]	; (8007660 <OSPI_NOR_MspDeInit+0xa4>)
 80075e2:	f001 fc5b 	bl	8008e9c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D1_GPIO_PORT, OSPI_D1_PIN);
 80075e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80075ea:	481e      	ldr	r0, [pc, #120]	; (8007664 <OSPI_NOR_MspDeInit+0xa8>)
 80075ec:	f001 fc56 	bl	8008e9c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D2_GPIO_PORT, OSPI_D2_PIN);
 80075f0:	2180      	movs	r1, #128	; 0x80
 80075f2:	481c      	ldr	r0, [pc, #112]	; (8007664 <OSPI_NOR_MspDeInit+0xa8>)
 80075f4:	f001 fc52 	bl	8008e9c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D3_GPIO_PORT, OSPI_D3_PIN);
 80075f8:	2140      	movs	r1, #64	; 0x40
 80075fa:	481a      	ldr	r0, [pc, #104]	; (8007664 <OSPI_NOR_MspDeInit+0xa8>)
 80075fc:	f001 fc4e 	bl	8008e9c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D4_GPIO_PORT, OSPI_D4_PIN);
 8007600:	2102      	movs	r1, #2
 8007602:	4815      	ldr	r0, [pc, #84]	; (8007658 <OSPI_NOR_MspDeInit+0x9c>)
 8007604:	f001 fc4a 	bl	8008e9c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D5_GPIO_PORT, OSPI_D5_PIN);
 8007608:	2108      	movs	r1, #8
 800760a:	4817      	ldr	r0, [pc, #92]	; (8007668 <OSPI_NOR_MspDeInit+0xac>)
 800760c:	f001 fc46 	bl	8008e9c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D6_GPIO_PORT, OSPI_D6_PIN);
 8007610:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007614:	4811      	ldr	r0, [pc, #68]	; (800765c <OSPI_NOR_MspDeInit+0xa0>)
 8007616:	f001 fc41 	bl	8008e9c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D7_GPIO_PORT, OSPI_D7_PIN);
 800761a:	2180      	movs	r1, #128	; 0x80
 800761c:	4810      	ldr	r0, [pc, #64]	; (8007660 <OSPI_NOR_MspDeInit+0xa4>)
 800761e:	f001 fc3d 	bl	8008e9c <HAL_GPIO_DeInit>

  /* Reset the OctoSPI memory interface */
  OSPI_FORCE_RESET();
 8007622:	4b12      	ldr	r3, [pc, #72]	; (800766c <OSPI_NOR_MspDeInit+0xb0>)
 8007624:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007626:	4a11      	ldr	r2, [pc, #68]	; (800766c <OSPI_NOR_MspDeInit+0xb0>)
 8007628:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800762c:	67d3      	str	r3, [r2, #124]	; 0x7c
  OSPI_RELEASE_RESET();
 800762e:	4b0f      	ldr	r3, [pc, #60]	; (800766c <OSPI_NOR_MspDeInit+0xb0>)
 8007630:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007632:	4a0e      	ldr	r2, [pc, #56]	; (800766c <OSPI_NOR_MspDeInit+0xb0>)
 8007634:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007638:	67d3      	str	r3, [r2, #124]	; 0x7c

  /* Disable the OctoSPI memory interface clock */
  OSPI_CLK_DISABLE();
 800763a:	4b0c      	ldr	r3, [pc, #48]	; (800766c <OSPI_NOR_MspDeInit+0xb0>)
 800763c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8007640:	4a0a      	ldr	r2, [pc, #40]	; (800766c <OSPI_NOR_MspDeInit+0xb0>)
 8007642:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007646:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
}
 800764a:	bf00      	nop
 800764c:	3708      	adds	r7, #8
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}
 8007652:	bf00      	nop
 8007654:	58020400 	.word	0x58020400
 8007658:	58020800 	.word	0x58020800
 800765c:	58021800 	.word	0x58021800
 8007660:	58020c00 	.word	0x58020c00
 8007664:	58021400 	.word	0x58021400
 8007668:	58021c00 	.word	0x58021c00
 800766c:	58024400 	.word	0x58024400

08007670 <OSPI_NOR_ResetMemory>:
  * @brief  This function reset the OSPI memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_ResetMemory (uint32_t Instance)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b084      	sub	sp, #16
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8007678:	2300      	movs	r3, #0
 800767a:	60fb      	str	r3, [r7, #12]

  /* Enable write operations */
  if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	225c      	movs	r2, #92	; 0x5c
 8007680:	fb02 f303 	mul.w	r3, r2, r3
 8007684:	4a40      	ldr	r2, [pc, #256]	; (8007788 <OSPI_NOR_ResetMemory+0x118>)
 8007686:	4413      	add	r3, r2
 8007688:	2200      	movs	r2, #0
 800768a:	2100      	movs	r1, #0
 800768c:	4618      	mov	r0, r3
 800768e:	f7fe ff18 	bl	80064c2 <MX25LM51245G_ResetEnable>
 8007692:	4603      	mov	r3, r0
 8007694:	2b00      	cmp	r3, #0
 8007696:	d003      	beq.n	80076a0 <OSPI_NOR_ResetMemory+0x30>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8007698:	f06f 0304 	mvn.w	r3, #4
 800769c:	60fb      	str	r3, [r7, #12]
 800769e:	e06d      	b.n	800777c <OSPI_NOR_ResetMemory+0x10c>
  }
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	225c      	movs	r2, #92	; 0x5c
 80076a4:	fb02 f303 	mul.w	r3, r2, r3
 80076a8:	4a37      	ldr	r2, [pc, #220]	; (8007788 <OSPI_NOR_ResetMemory+0x118>)
 80076aa:	4413      	add	r3, r2
 80076ac:	2200      	movs	r2, #0
 80076ae:	2100      	movs	r1, #0
 80076b0:	4618      	mov	r0, r3
 80076b2:	f7fe ff5e 	bl	8006572 <MX25LM51245G_ResetMemory>
 80076b6:	4603      	mov	r3, r0
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d003      	beq.n	80076c4 <OSPI_NOR_ResetMemory+0x54>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80076bc:	f06f 0304 	mvn.w	r3, #4
 80076c0:	60fb      	str	r3, [r7, #12]
 80076c2:	e05b      	b.n	800777c <OSPI_NOR_ResetMemory+0x10c>
  }
  else if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	225c      	movs	r2, #92	; 0x5c
 80076c8:	fb02 f303 	mul.w	r3, r2, r3
 80076cc:	4a2e      	ldr	r2, [pc, #184]	; (8007788 <OSPI_NOR_ResetMemory+0x118>)
 80076ce:	4413      	add	r3, r2
 80076d0:	2200      	movs	r2, #0
 80076d2:	2101      	movs	r1, #1
 80076d4:	4618      	mov	r0, r3
 80076d6:	f7fe fef4 	bl	80064c2 <MX25LM51245G_ResetEnable>
 80076da:	4603      	mov	r3, r0
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d003      	beq.n	80076e8 <OSPI_NOR_ResetMemory+0x78>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80076e0:	f06f 0304 	mvn.w	r3, #4
 80076e4:	60fb      	str	r3, [r7, #12]
 80076e6:	e049      	b.n	800777c <OSPI_NOR_ResetMemory+0x10c>
  }
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	225c      	movs	r2, #92	; 0x5c
 80076ec:	fb02 f303 	mul.w	r3, r2, r3
 80076f0:	4a25      	ldr	r2, [pc, #148]	; (8007788 <OSPI_NOR_ResetMemory+0x118>)
 80076f2:	4413      	add	r3, r2
 80076f4:	2200      	movs	r2, #0
 80076f6:	2101      	movs	r1, #1
 80076f8:	4618      	mov	r0, r3
 80076fa:	f7fe ff3a 	bl	8006572 <MX25LM51245G_ResetMemory>
 80076fe:	4603      	mov	r3, r0
 8007700:	2b00      	cmp	r3, #0
 8007702:	d003      	beq.n	800770c <OSPI_NOR_ResetMemory+0x9c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8007704:	f06f 0304 	mvn.w	r3, #4
 8007708:	60fb      	str	r3, [r7, #12]
 800770a:	e037      	b.n	800777c <OSPI_NOR_ResetMemory+0x10c>
  }
  else if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	225c      	movs	r2, #92	; 0x5c
 8007710:	fb02 f303 	mul.w	r3, r2, r3
 8007714:	4a1c      	ldr	r2, [pc, #112]	; (8007788 <OSPI_NOR_ResetMemory+0x118>)
 8007716:	4413      	add	r3, r2
 8007718:	2201      	movs	r2, #1
 800771a:	2101      	movs	r1, #1
 800771c:	4618      	mov	r0, r3
 800771e:	f7fe fed0 	bl	80064c2 <MX25LM51245G_ResetEnable>
 8007722:	4603      	mov	r3, r0
 8007724:	2b00      	cmp	r3, #0
 8007726:	d003      	beq.n	8007730 <OSPI_NOR_ResetMemory+0xc0>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8007728:	f06f 0304 	mvn.w	r3, #4
 800772c:	60fb      	str	r3, [r7, #12]
 800772e:	e025      	b.n	800777c <OSPI_NOR_ResetMemory+0x10c>
  }
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	225c      	movs	r2, #92	; 0x5c
 8007734:	fb02 f303 	mul.w	r3, r2, r3
 8007738:	4a13      	ldr	r2, [pc, #76]	; (8007788 <OSPI_NOR_ResetMemory+0x118>)
 800773a:	4413      	add	r3, r2
 800773c:	2201      	movs	r2, #1
 800773e:	2101      	movs	r1, #1
 8007740:	4618      	mov	r0, r3
 8007742:	f7fe ff16 	bl	8006572 <MX25LM51245G_ResetMemory>
 8007746:	4603      	mov	r3, r0
 8007748:	2b00      	cmp	r3, #0
 800774a:	d003      	beq.n	8007754 <OSPI_NOR_ResetMemory+0xe4>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800774c:	f06f 0304 	mvn.w	r3, #4
 8007750:	60fb      	str	r3, [r7, #12]
 8007752:	e013      	b.n	800777c <OSPI_NOR_ResetMemory+0x10c>
  }
  else
  {
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;      /* After reset S/W setting to indirect access   */
 8007754:	4a0d      	ldr	r2, [pc, #52]	; (800778c <OSPI_NOR_ResetMemory+0x11c>)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2101      	movs	r1, #1
 800775a:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
    Ospi_Nor_Ctx[Instance].InterfaceMode = BSP_OSPI_NOR_SPI_MODE;         /* After reset H/W back to SPI mode by default  */
 800775e:	4a0b      	ldr	r2, [pc, #44]	; (800778c <OSPI_NOR_ResetMemory+0x11c>)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	00db      	lsls	r3, r3, #3
 8007764:	4413      	add	r3, r2
 8007766:	2200      	movs	r2, #0
 8007768:	705a      	strb	r2, [r3, #1]
    Ospi_Nor_Ctx[Instance].TransferRate  = BSP_OSPI_NOR_STR_TRANSFER;     /* After reset S/W setting to STR mode          */
 800776a:	4a08      	ldr	r2, [pc, #32]	; (800778c <OSPI_NOR_ResetMemory+0x11c>)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	00db      	lsls	r3, r3, #3
 8007770:	4413      	add	r3, r2
 8007772:	2200      	movs	r2, #0
 8007774:	709a      	strb	r2, [r3, #2]

    /* After SWreset CMD, wait in case SWReset occurred during erase operation */
    HAL_Delay(MX25LM51245G_RESET_MAX_TIME);
 8007776:	2064      	movs	r0, #100	; 0x64
 8007778:	f000 fd1a 	bl	80081b0 <HAL_Delay>
  }

  /* Return BSP status */
  return ret;
 800777c:	68fb      	ldr	r3, [r7, #12]
}
 800777e:	4618      	mov	r0, r3
 8007780:	3710      	adds	r7, #16
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}
 8007786:	bf00      	nop
 8007788:	24001f90 	.word	0x24001f90
 800778c:	24001fec 	.word	0x24001fec

08007790 <OSPI_NOR_EnterDOPIMode>:
  * @brief  This function enables the octal DTR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_EnterDOPIMode(uint32_t Instance)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b086      	sub	sp, #24
 8007794:	af02      	add	r7, sp, #8
 8007796:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8007798:	2300      	movs	r3, #0
 800779a:	60fb      	str	r3, [r7, #12]
  uint8_t reg[2];

  /* Enable write operations */
  if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	225c      	movs	r2, #92	; 0x5c
 80077a0:	fb02 f303 	mul.w	r3, r2, r3
 80077a4:	4a60      	ldr	r2, [pc, #384]	; (8007928 <OSPI_NOR_EnterDOPIMode+0x198>)
 80077a6:	1898      	adds	r0, r3, r2
 80077a8:	4a60      	ldr	r2, [pc, #384]	; (800792c <OSPI_NOR_EnterDOPIMode+0x19c>)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	00db      	lsls	r3, r3, #3
 80077ae:	4413      	add	r3, r2
 80077b0:	7859      	ldrb	r1, [r3, #1]
 80077b2:	4a5e      	ldr	r2, [pc, #376]	; (800792c <OSPI_NOR_EnterDOPIMode+0x19c>)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	00db      	lsls	r3, r3, #3
 80077b8:	4413      	add	r3, r2
 80077ba:	789b      	ldrb	r3, [r3, #2]
 80077bc:	461a      	mov	r2, r3
 80077be:	f7fe fc86 	bl	80060ce <MX25LM51245G_WriteEnable>
 80077c2:	4603      	mov	r3, r0
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d003      	beq.n	80077d0 <OSPI_NOR_EnterDOPIMode+0x40>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80077c8:	f06f 0304 	mvn.w	r3, #4
 80077cc:	60fb      	str	r3, [r7, #12]
 80077ce:	e0a6      	b.n	800791e <OSPI_NOR_EnterDOPIMode+0x18e>
  }
  /* Write Configuration register 2 (with new dummy cycles) */
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG3_ADDR, MX25LM51245G_CR2_DC_6_CYCLES) != MX25LM51245G_OK)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	225c      	movs	r2, #92	; 0x5c
 80077d4:	fb02 f303 	mul.w	r3, r2, r3
 80077d8:	4a53      	ldr	r2, [pc, #332]	; (8007928 <OSPI_NOR_EnterDOPIMode+0x198>)
 80077da:	1898      	adds	r0, r3, r2
 80077dc:	4a53      	ldr	r2, [pc, #332]	; (800792c <OSPI_NOR_EnterDOPIMode+0x19c>)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	00db      	lsls	r3, r3, #3
 80077e2:	4413      	add	r3, r2
 80077e4:	7859      	ldrb	r1, [r3, #1]
 80077e6:	4a51      	ldr	r2, [pc, #324]	; (800792c <OSPI_NOR_EnterDOPIMode+0x19c>)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	00db      	lsls	r3, r3, #3
 80077ec:	4413      	add	r3, r2
 80077ee:	789a      	ldrb	r2, [r3, #2]
 80077f0:	2307      	movs	r3, #7
 80077f2:	9300      	str	r3, [sp, #0]
 80077f4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80077f8:	f7fe fd34 	bl	8006264 <MX25LM51245G_WriteCfg2Register>
 80077fc:	4603      	mov	r3, r0
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d003      	beq.n	800780a <OSPI_NOR_EnterDOPIMode+0x7a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8007802:	f06f 0304 	mvn.w	r3, #4
 8007806:	60fb      	str	r3, [r7, #12]
 8007808:	e089      	b.n	800791e <OSPI_NOR_EnterDOPIMode+0x18e>
  }
  /* Enable write operations */
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	225c      	movs	r2, #92	; 0x5c
 800780e:	fb02 f303 	mul.w	r3, r2, r3
 8007812:	4a45      	ldr	r2, [pc, #276]	; (8007928 <OSPI_NOR_EnterDOPIMode+0x198>)
 8007814:	1898      	adds	r0, r3, r2
 8007816:	4a45      	ldr	r2, [pc, #276]	; (800792c <OSPI_NOR_EnterDOPIMode+0x19c>)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	00db      	lsls	r3, r3, #3
 800781c:	4413      	add	r3, r2
 800781e:	7859      	ldrb	r1, [r3, #1]
 8007820:	4a42      	ldr	r2, [pc, #264]	; (800792c <OSPI_NOR_EnterDOPIMode+0x19c>)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	00db      	lsls	r3, r3, #3
 8007826:	4413      	add	r3, r2
 8007828:	789b      	ldrb	r3, [r3, #2]
 800782a:	461a      	mov	r2, r3
 800782c:	f7fe fc4f 	bl	80060ce <MX25LM51245G_WriteEnable>
 8007830:	4603      	mov	r3, r0
 8007832:	2b00      	cmp	r3, #0
 8007834:	d003      	beq.n	800783e <OSPI_NOR_EnterDOPIMode+0xae>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8007836:	f06f 0304 	mvn.w	r3, #4
 800783a:	60fb      	str	r3, [r7, #12]
 800783c:	e06f      	b.n	800791e <OSPI_NOR_EnterDOPIMode+0x18e>
  }
  /* Write Configuration register 2 (with Octal I/O SPI protocol) */
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, MX25LM51245G_CR2_DOPI) != MX25LM51245G_OK)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	225c      	movs	r2, #92	; 0x5c
 8007842:	fb02 f303 	mul.w	r3, r2, r3
 8007846:	4a38      	ldr	r2, [pc, #224]	; (8007928 <OSPI_NOR_EnterDOPIMode+0x198>)
 8007848:	1898      	adds	r0, r3, r2
 800784a:	4a38      	ldr	r2, [pc, #224]	; (800792c <OSPI_NOR_EnterDOPIMode+0x19c>)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	00db      	lsls	r3, r3, #3
 8007850:	4413      	add	r3, r2
 8007852:	7859      	ldrb	r1, [r3, #1]
 8007854:	4a35      	ldr	r2, [pc, #212]	; (800792c <OSPI_NOR_EnterDOPIMode+0x19c>)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	00db      	lsls	r3, r3, #3
 800785a:	4413      	add	r3, r2
 800785c:	789a      	ldrb	r2, [r3, #2]
 800785e:	2302      	movs	r3, #2
 8007860:	9300      	str	r3, [sp, #0]
 8007862:	2300      	movs	r3, #0
 8007864:	f7fe fcfe 	bl	8006264 <MX25LM51245G_WriteCfg2Register>
 8007868:	4603      	mov	r3, r0
 800786a:	2b00      	cmp	r3, #0
 800786c:	d003      	beq.n	8007876 <OSPI_NOR_EnterDOPIMode+0xe6>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800786e:	f06f 0304 	mvn.w	r3, #4
 8007872:	60fb      	str	r3, [r7, #12]
 8007874:	e053      	b.n	800791e <OSPI_NOR_EnterDOPIMode+0x18e>
  }
  else
  {
    /* Wait that the configuration is effective and check that memory is ready */
    HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 8007876:	2028      	movs	r0, #40	; 0x28
 8007878:	f000 fc9a 	bl	80081b0 <HAL_Delay>

    /* Reconfigure the memory type of the peripheral */
    hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 800787c:	4a2a      	ldr	r2, [pc, #168]	; (8007928 <OSPI_NOR_EnterDOPIMode+0x198>)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	215c      	movs	r1, #92	; 0x5c
 8007882:	fb01 f303 	mul.w	r3, r1, r3
 8007886:	4413      	add	r3, r2
 8007888:	330c      	adds	r3, #12
 800788a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800788e:	601a      	str	r2, [r3, #0]
    hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 8007890:	4a25      	ldr	r2, [pc, #148]	; (8007928 <OSPI_NOR_EnterDOPIMode+0x198>)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	215c      	movs	r1, #92	; 0x5c
 8007896:	fb01 f303 	mul.w	r3, r1, r3
 800789a:	4413      	add	r3, r2
 800789c:	332c      	adds	r3, #44	; 0x2c
 800789e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078a2:	601a      	str	r2, [r3, #0]
    if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	225c      	movs	r2, #92	; 0x5c
 80078a8:	fb02 f303 	mul.w	r3, r2, r3
 80078ac:	4a1e      	ldr	r2, [pc, #120]	; (8007928 <OSPI_NOR_EnterDOPIMode+0x198>)
 80078ae:	4413      	add	r3, r2
 80078b0:	4618      	mov	r0, r3
 80078b2:	f002 febd 	bl	800a630 <HAL_OSPI_Init>
 80078b6:	4603      	mov	r3, r0
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d003      	beq.n	80078c4 <OSPI_NOR_EnterDOPIMode+0x134>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80078bc:	f06f 0303 	mvn.w	r3, #3
 80078c0:	60fb      	str	r3, [r7, #12]
 80078c2:	e02c      	b.n	800791e <OSPI_NOR_EnterDOPIMode+0x18e>
    }
    /* Check Flash busy ? */
    else if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	225c      	movs	r2, #92	; 0x5c
 80078c8:	fb02 f303 	mul.w	r3, r2, r3
 80078cc:	4a16      	ldr	r2, [pc, #88]	; (8007928 <OSPI_NOR_EnterDOPIMode+0x198>)
 80078ce:	4413      	add	r3, r2
 80078d0:	2201      	movs	r2, #1
 80078d2:	2101      	movs	r1, #1
 80078d4:	4618      	mov	r0, r3
 80078d6:	f7fe fa34 	bl	8005d42 <MX25LM51245G_AutoPollingMemReady>
 80078da:	4603      	mov	r3, r0
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d003      	beq.n	80078e8 <OSPI_NOR_EnterDOPIMode+0x158>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80078e0:	f06f 0304 	mvn.w	r3, #4
 80078e4:	60fb      	str	r3, [r7, #12]
 80078e6:	e01a      	b.n	800791e <OSPI_NOR_EnterDOPIMode+0x18e>
    }
    /* Check the configuration has been correctly done */
    else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	225c      	movs	r2, #92	; 0x5c
 80078ec:	fb02 f303 	mul.w	r3, r2, r3
 80078f0:	4a0d      	ldr	r2, [pc, #52]	; (8007928 <OSPI_NOR_EnterDOPIMode+0x198>)
 80078f2:	1898      	adds	r0, r3, r2
 80078f4:	f107 0308 	add.w	r3, r7, #8
 80078f8:	9300      	str	r3, [sp, #0]
 80078fa:	2300      	movs	r3, #0
 80078fc:	2201      	movs	r2, #1
 80078fe:	2101      	movs	r1, #1
 8007900:	f7fe fd45 	bl	800638e <MX25LM51245G_ReadCfg2Register>
 8007904:	4603      	mov	r3, r0
 8007906:	2b00      	cmp	r3, #0
 8007908:	d003      	beq.n	8007912 <OSPI_NOR_EnterDOPIMode+0x182>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800790a:	f06f 0304 	mvn.w	r3, #4
 800790e:	60fb      	str	r3, [r7, #12]
 8007910:	e005      	b.n	800791e <OSPI_NOR_EnterDOPIMode+0x18e>
    }
    else
    {
      if (reg[0] != MX25LM51245G_CR2_DOPI)
 8007912:	7a3b      	ldrb	r3, [r7, #8]
 8007914:	2b02      	cmp	r3, #2
 8007916:	d002      	beq.n	800791e <OSPI_NOR_EnterDOPIMode+0x18e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007918:	f06f 0304 	mvn.w	r3, #4
 800791c:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Return BSP status */
  return ret;
 800791e:	68fb      	ldr	r3, [r7, #12]
}
 8007920:	4618      	mov	r0, r3
 8007922:	3710      	adds	r7, #16
 8007924:	46bd      	mov	sp, r7
 8007926:	bd80      	pop	{r7, pc}
 8007928:	24001f90 	.word	0x24001f90
 800792c:	24001fec 	.word	0x24001fec

08007930 <OSPI_NOR_EnterSOPIMode>:
  * @brief  This function enables the octal STR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_EnterSOPIMode(uint32_t Instance)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b086      	sub	sp, #24
 8007934:	af02      	add	r7, sp, #8
 8007936:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8007938:	2300      	movs	r3, #0
 800793a:	60fb      	str	r3, [r7, #12]
  uint8_t reg[2];

  /* Enable write operations */
  if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	225c      	movs	r2, #92	; 0x5c
 8007940:	fb02 f303 	mul.w	r3, r2, r3
 8007944:	4a4e      	ldr	r2, [pc, #312]	; (8007a80 <OSPI_NOR_EnterSOPIMode+0x150>)
 8007946:	1898      	adds	r0, r3, r2
 8007948:	4a4e      	ldr	r2, [pc, #312]	; (8007a84 <OSPI_NOR_EnterSOPIMode+0x154>)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	00db      	lsls	r3, r3, #3
 800794e:	4413      	add	r3, r2
 8007950:	7859      	ldrb	r1, [r3, #1]
 8007952:	4a4c      	ldr	r2, [pc, #304]	; (8007a84 <OSPI_NOR_EnterSOPIMode+0x154>)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	00db      	lsls	r3, r3, #3
 8007958:	4413      	add	r3, r2
 800795a:	789b      	ldrb	r3, [r3, #2]
 800795c:	461a      	mov	r2, r3
 800795e:	f7fe fbb6 	bl	80060ce <MX25LM51245G_WriteEnable>
 8007962:	4603      	mov	r3, r0
 8007964:	2b00      	cmp	r3, #0
 8007966:	d003      	beq.n	8007970 <OSPI_NOR_EnterSOPIMode+0x40>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8007968:	f06f 0304 	mvn.w	r3, #4
 800796c:	60fb      	str	r3, [r7, #12]
 800796e:	e082      	b.n	8007a76 <OSPI_NOR_EnterSOPIMode+0x146>
  }
  /* Write Configuration register 2 (with new dummy cycles) */
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG3_ADDR, MX25LM51245G_CR2_DC_6_CYCLES) != MX25LM51245G_OK)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	225c      	movs	r2, #92	; 0x5c
 8007974:	fb02 f303 	mul.w	r3, r2, r3
 8007978:	4a41      	ldr	r2, [pc, #260]	; (8007a80 <OSPI_NOR_EnterSOPIMode+0x150>)
 800797a:	1898      	adds	r0, r3, r2
 800797c:	4a41      	ldr	r2, [pc, #260]	; (8007a84 <OSPI_NOR_EnterSOPIMode+0x154>)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	00db      	lsls	r3, r3, #3
 8007982:	4413      	add	r3, r2
 8007984:	7859      	ldrb	r1, [r3, #1]
 8007986:	4a3f      	ldr	r2, [pc, #252]	; (8007a84 <OSPI_NOR_EnterSOPIMode+0x154>)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	00db      	lsls	r3, r3, #3
 800798c:	4413      	add	r3, r2
 800798e:	789a      	ldrb	r2, [r3, #2]
 8007990:	2307      	movs	r3, #7
 8007992:	9300      	str	r3, [sp, #0]
 8007994:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007998:	f7fe fc64 	bl	8006264 <MX25LM51245G_WriteCfg2Register>
 800799c:	4603      	mov	r3, r0
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d003      	beq.n	80079aa <OSPI_NOR_EnterSOPIMode+0x7a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80079a2:	f06f 0304 	mvn.w	r3, #4
 80079a6:	60fb      	str	r3, [r7, #12]
 80079a8:	e065      	b.n	8007a76 <OSPI_NOR_EnterSOPIMode+0x146>
  }
  /* Enable write operations */
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	225c      	movs	r2, #92	; 0x5c
 80079ae:	fb02 f303 	mul.w	r3, r2, r3
 80079b2:	4a33      	ldr	r2, [pc, #204]	; (8007a80 <OSPI_NOR_EnterSOPIMode+0x150>)
 80079b4:	1898      	adds	r0, r3, r2
 80079b6:	4a33      	ldr	r2, [pc, #204]	; (8007a84 <OSPI_NOR_EnterSOPIMode+0x154>)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	00db      	lsls	r3, r3, #3
 80079bc:	4413      	add	r3, r2
 80079be:	7859      	ldrb	r1, [r3, #1]
 80079c0:	4a30      	ldr	r2, [pc, #192]	; (8007a84 <OSPI_NOR_EnterSOPIMode+0x154>)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	00db      	lsls	r3, r3, #3
 80079c6:	4413      	add	r3, r2
 80079c8:	789b      	ldrb	r3, [r3, #2]
 80079ca:	461a      	mov	r2, r3
 80079cc:	f7fe fb7f 	bl	80060ce <MX25LM51245G_WriteEnable>
 80079d0:	4603      	mov	r3, r0
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d003      	beq.n	80079de <OSPI_NOR_EnterSOPIMode+0xae>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80079d6:	f06f 0304 	mvn.w	r3, #4
 80079da:	60fb      	str	r3, [r7, #12]
 80079dc:	e04b      	b.n	8007a76 <OSPI_NOR_EnterSOPIMode+0x146>
  }
  /* Write Configuration register 2 (with Octal I/O SPI protocol) */
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, MX25LM51245G_CR2_SOPI) != MX25LM51245G_OK)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	225c      	movs	r2, #92	; 0x5c
 80079e2:	fb02 f303 	mul.w	r3, r2, r3
 80079e6:	4a26      	ldr	r2, [pc, #152]	; (8007a80 <OSPI_NOR_EnterSOPIMode+0x150>)
 80079e8:	1898      	adds	r0, r3, r2
 80079ea:	4a26      	ldr	r2, [pc, #152]	; (8007a84 <OSPI_NOR_EnterSOPIMode+0x154>)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	00db      	lsls	r3, r3, #3
 80079f0:	4413      	add	r3, r2
 80079f2:	7859      	ldrb	r1, [r3, #1]
 80079f4:	4a23      	ldr	r2, [pc, #140]	; (8007a84 <OSPI_NOR_EnterSOPIMode+0x154>)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	00db      	lsls	r3, r3, #3
 80079fa:	4413      	add	r3, r2
 80079fc:	789a      	ldrb	r2, [r3, #2]
 80079fe:	2301      	movs	r3, #1
 8007a00:	9300      	str	r3, [sp, #0]
 8007a02:	2300      	movs	r3, #0
 8007a04:	f7fe fc2e 	bl	8006264 <MX25LM51245G_WriteCfg2Register>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d003      	beq.n	8007a16 <OSPI_NOR_EnterSOPIMode+0xe6>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8007a0e:	f06f 0304 	mvn.w	r3, #4
 8007a12:	60fb      	str	r3, [r7, #12]
 8007a14:	e02f      	b.n	8007a76 <OSPI_NOR_EnterSOPIMode+0x146>
  }
  else
  {
    /* Wait that the configuration is effective and check that memory is ready */
    HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 8007a16:	2028      	movs	r0, #40	; 0x28
 8007a18:	f000 fbca 	bl	80081b0 <HAL_Delay>

    /* Check Flash busy ? */
    if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	225c      	movs	r2, #92	; 0x5c
 8007a20:	fb02 f303 	mul.w	r3, r2, r3
 8007a24:	4a16      	ldr	r2, [pc, #88]	; (8007a80 <OSPI_NOR_EnterSOPIMode+0x150>)
 8007a26:	4413      	add	r3, r2
 8007a28:	2200      	movs	r2, #0
 8007a2a:	2101      	movs	r1, #1
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	f7fe f988 	bl	8005d42 <MX25LM51245G_AutoPollingMemReady>
 8007a32:	4603      	mov	r3, r0
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d003      	beq.n	8007a40 <OSPI_NOR_EnterSOPIMode+0x110>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8007a38:	f06f 0304 	mvn.w	r3, #4
 8007a3c:	60fb      	str	r3, [r7, #12]
 8007a3e:	e01a      	b.n	8007a76 <OSPI_NOR_EnterSOPIMode+0x146>
    }
    /* Check the configuration has been correctly done */
    else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	225c      	movs	r2, #92	; 0x5c
 8007a44:	fb02 f303 	mul.w	r3, r2, r3
 8007a48:	4a0d      	ldr	r2, [pc, #52]	; (8007a80 <OSPI_NOR_EnterSOPIMode+0x150>)
 8007a4a:	1898      	adds	r0, r3, r2
 8007a4c:	f107 0308 	add.w	r3, r7, #8
 8007a50:	9300      	str	r3, [sp, #0]
 8007a52:	2300      	movs	r3, #0
 8007a54:	2200      	movs	r2, #0
 8007a56:	2101      	movs	r1, #1
 8007a58:	f7fe fc99 	bl	800638e <MX25LM51245G_ReadCfg2Register>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d003      	beq.n	8007a6a <OSPI_NOR_EnterSOPIMode+0x13a>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8007a62:	f06f 0304 	mvn.w	r3, #4
 8007a66:	60fb      	str	r3, [r7, #12]
 8007a68:	e005      	b.n	8007a76 <OSPI_NOR_EnterSOPIMode+0x146>
    }
    else
    {
      if (reg[0] != MX25LM51245G_CR2_SOPI)
 8007a6a:	7a3b      	ldrb	r3, [r7, #8]
 8007a6c:	2b01      	cmp	r3, #1
 8007a6e:	d002      	beq.n	8007a76 <OSPI_NOR_EnterSOPIMode+0x146>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007a70:	f06f 0304 	mvn.w	r3, #4
 8007a74:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Return BSP status */
  return ret;
 8007a76:	68fb      	ldr	r3, [r7, #12]
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	3710      	adds	r7, #16
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd80      	pop	{r7, pc}
 8007a80:	24001f90 	.word	0x24001f90
 8007a84:	24001fec 	.word	0x24001fec

08007a88 <OSPI_NOR_ExitOPIMode>:
  * @brief  This function disables the octal DTR or STR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_ExitOPIMode (uint32_t Instance)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b086      	sub	sp, #24
 8007a8c:	af02      	add	r7, sp, #8
 8007a8e:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8007a90:	2300      	movs	r3, #0
 8007a92:	60fb      	str	r3, [r7, #12]
  uint8_t reg[2];

  /* Enable write operations */
  if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	225c      	movs	r2, #92	; 0x5c
 8007a98:	fb02 f303 	mul.w	r3, r2, r3
 8007a9c:	4a49      	ldr	r2, [pc, #292]	; (8007bc4 <OSPI_NOR_ExitOPIMode+0x13c>)
 8007a9e:	1898      	adds	r0, r3, r2
 8007aa0:	4a49      	ldr	r2, [pc, #292]	; (8007bc8 <OSPI_NOR_ExitOPIMode+0x140>)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	00db      	lsls	r3, r3, #3
 8007aa6:	4413      	add	r3, r2
 8007aa8:	7859      	ldrb	r1, [r3, #1]
 8007aaa:	4a47      	ldr	r2, [pc, #284]	; (8007bc8 <OSPI_NOR_ExitOPIMode+0x140>)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	00db      	lsls	r3, r3, #3
 8007ab0:	4413      	add	r3, r2
 8007ab2:	789b      	ldrb	r3, [r3, #2]
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	f7fe fb0a 	bl	80060ce <MX25LM51245G_WriteEnable>
 8007aba:	4603      	mov	r3, r0
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d003      	beq.n	8007ac8 <OSPI_NOR_ExitOPIMode+0x40>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8007ac0:	f06f 0304 	mvn.w	r3, #4
 8007ac4:	60fb      	str	r3, [r7, #12]
 8007ac6:	e077      	b.n	8007bb8 <OSPI_NOR_ExitOPIMode+0x130>
  }
  else
  {
    /* Write Configuration register 2 (with SPI protocol) */
    reg[0] = 0;
 8007ac8:	2300      	movs	r3, #0
 8007aca:	723b      	strb	r3, [r7, #8]
    reg[1] = 0;
 8007acc:	2300      	movs	r3, #0
 8007ace:	727b      	strb	r3, [r7, #9]
    if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, reg[0]) != MX25LM51245G_OK)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	225c      	movs	r2, #92	; 0x5c
 8007ad4:	fb02 f303 	mul.w	r3, r2, r3
 8007ad8:	4a3a      	ldr	r2, [pc, #232]	; (8007bc4 <OSPI_NOR_ExitOPIMode+0x13c>)
 8007ada:	1898      	adds	r0, r3, r2
 8007adc:	4a3a      	ldr	r2, [pc, #232]	; (8007bc8 <OSPI_NOR_ExitOPIMode+0x140>)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	00db      	lsls	r3, r3, #3
 8007ae2:	4413      	add	r3, r2
 8007ae4:	7859      	ldrb	r1, [r3, #1]
 8007ae6:	4a38      	ldr	r2, [pc, #224]	; (8007bc8 <OSPI_NOR_ExitOPIMode+0x140>)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	00db      	lsls	r3, r3, #3
 8007aec:	4413      	add	r3, r2
 8007aee:	789a      	ldrb	r2, [r3, #2]
 8007af0:	7a3b      	ldrb	r3, [r7, #8]
 8007af2:	9300      	str	r3, [sp, #0]
 8007af4:	2300      	movs	r3, #0
 8007af6:	f7fe fbb5 	bl	8006264 <MX25LM51245G_WriteCfg2Register>
 8007afa:	4603      	mov	r3, r0
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d003      	beq.n	8007b08 <OSPI_NOR_ExitOPIMode+0x80>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8007b00:	f06f 0304 	mvn.w	r3, #4
 8007b04:	60fb      	str	r3, [r7, #12]
 8007b06:	e057      	b.n	8007bb8 <OSPI_NOR_ExitOPIMode+0x130>
    }
    else
    {
      /* Wait that the configuration is effective and check that memory is ready */
      HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 8007b08:	2028      	movs	r0, #40	; 0x28
 8007b0a:	f000 fb51 	bl	80081b0 <HAL_Delay>

      if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_DTR_TRANSFER)
 8007b0e:	4a2e      	ldr	r2, [pc, #184]	; (8007bc8 <OSPI_NOR_ExitOPIMode+0x140>)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	00db      	lsls	r3, r3, #3
 8007b14:	4413      	add	r3, r2
 8007b16:	789b      	ldrb	r3, [r3, #2]
 8007b18:	2b01      	cmp	r3, #1
 8007b1a:	d120      	bne.n	8007b5e <OSPI_NOR_ExitOPIMode+0xd6>
      {
        /* Reconfigure the memory type of the peripheral */
        hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MICRON;
 8007b1c:	4a29      	ldr	r2, [pc, #164]	; (8007bc4 <OSPI_NOR_ExitOPIMode+0x13c>)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	215c      	movs	r1, #92	; 0x5c
 8007b22:	fb01 f303 	mul.w	r3, r1, r3
 8007b26:	4413      	add	r3, r2
 8007b28:	330c      	adds	r3, #12
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	601a      	str	r2, [r3, #0]
        hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8007b2e:	4a25      	ldr	r2, [pc, #148]	; (8007bc4 <OSPI_NOR_ExitOPIMode+0x13c>)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	215c      	movs	r1, #92	; 0x5c
 8007b34:	fb01 f303 	mul.w	r3, r1, r3
 8007b38:	4413      	add	r3, r2
 8007b3a:	332c      	adds	r3, #44	; 0x2c
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	601a      	str	r2, [r3, #0]
        if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	225c      	movs	r2, #92	; 0x5c
 8007b44:	fb02 f303 	mul.w	r3, r2, r3
 8007b48:	4a1e      	ldr	r2, [pc, #120]	; (8007bc4 <OSPI_NOR_ExitOPIMode+0x13c>)
 8007b4a:	4413      	add	r3, r2
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	f002 fd6f 	bl	800a630 <HAL_OSPI_Init>
 8007b52:	4603      	mov	r3, r0
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d002      	beq.n	8007b5e <OSPI_NOR_ExitOPIMode+0xd6>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 8007b58:	f06f 0303 	mvn.w	r3, #3
 8007b5c:	60fb      	str	r3, [r7, #12]
        }
      }

      /* Check Flash busy ? */
      if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	225c      	movs	r2, #92	; 0x5c
 8007b62:	fb02 f303 	mul.w	r3, r2, r3
 8007b66:	4a17      	ldr	r2, [pc, #92]	; (8007bc4 <OSPI_NOR_ExitOPIMode+0x13c>)
 8007b68:	4413      	add	r3, r2
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	2100      	movs	r1, #0
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f7fe f8e7 	bl	8005d42 <MX25LM51245G_AutoPollingMemReady>
 8007b74:	4603      	mov	r3, r0
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d003      	beq.n	8007b82 <OSPI_NOR_ExitOPIMode+0xfa>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007b7a:	f06f 0304 	mvn.w	r3, #4
 8007b7e:	60fb      	str	r3, [r7, #12]
 8007b80:	e01a      	b.n	8007bb8 <OSPI_NOR_ExitOPIMode+0x130>
      }
      /* Check the configuration has been correctly done */
      else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	225c      	movs	r2, #92	; 0x5c
 8007b86:	fb02 f303 	mul.w	r3, r2, r3
 8007b8a:	4a0e      	ldr	r2, [pc, #56]	; (8007bc4 <OSPI_NOR_ExitOPIMode+0x13c>)
 8007b8c:	1898      	adds	r0, r3, r2
 8007b8e:	f107 0308 	add.w	r3, r7, #8
 8007b92:	9300      	str	r3, [sp, #0]
 8007b94:	2300      	movs	r3, #0
 8007b96:	2200      	movs	r2, #0
 8007b98:	2100      	movs	r1, #0
 8007b9a:	f7fe fbf8 	bl	800638e <MX25LM51245G_ReadCfg2Register>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d003      	beq.n	8007bac <OSPI_NOR_ExitOPIMode+0x124>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007ba4:	f06f 0304 	mvn.w	r3, #4
 8007ba8:	60fb      	str	r3, [r7, #12]
 8007baa:	e005      	b.n	8007bb8 <OSPI_NOR_ExitOPIMode+0x130>
      }
      else
      {
        if (reg[0] != 0U)
 8007bac:	7a3b      	ldrb	r3, [r7, #8]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d002      	beq.n	8007bb8 <OSPI_NOR_ExitOPIMode+0x130>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8007bb2:	f06f 0304 	mvn.w	r3, #4
 8007bb6:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Return BSP status */
  return ret;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	3710      	adds	r7, #16
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}
 8007bc2:	bf00      	nop
 8007bc4:	24001f90 	.word	0x24001f90
 8007bc8:	24001fec 	.word	0x24001fec

08007bcc <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b088      	sub	sp, #32
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
 8007bd4:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	61fb      	str	r3, [r7, #28]

  if((Instance >= TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d11c      	bne.n	8007c1a <BSP_TS_Init+0x4e>
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d018      	beq.n	8007c1a <BSP_TS_Init+0x4e>
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8007bf0:	d813      	bhi.n	8007c1a <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	685b      	ldr	r3, [r3, #4]
  if((Instance >= TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d00f      	beq.n	8007c1a <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	685b      	ldr	r3, [r3, #4]
 8007bfe:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8007c02:	d80a      	bhi.n	8007c1a <BSP_TS_Init+0x4e>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	68da      	ldr	r2, [r3, #12]
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	6819      	ldr	r1, [r3, #0]
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	685b      	ldr	r3, [r3, #4]
 8007c10:	428b      	cmp	r3, r1
 8007c12:	bf28      	it	cs
 8007c14:	460b      	movcs	r3, r1
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8007c16:	429a      	cmp	r2, r3
 8007c18:	d903      	bls.n	8007c22 <BSP_TS_Init+0x56>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8007c1a:	f06f 0301 	mvn.w	r3, #1
 8007c1e:	61fb      	str	r3, [r7, #28]
 8007c20:	e06e      	b.n	8007d00 <BSP_TS_Init+0x134>
  }
  else
  {
    if(FT5336_Probe(Instance) != BSP_ERROR_NONE)
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f000 f98c 	bl	8007f40 <FT5336_Probe>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d003      	beq.n	8007c36 <BSP_TS_Init+0x6a>
    {
      ret = BSP_ERROR_NO_INIT;
 8007c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8007c32:	61fb      	str	r3, [r7, #28]
 8007c34:	e064      	b.n	8007d00 <BSP_TS_Init+0x134>
    else
    {
      TS_Capabilities_t Capabilities;
      uint32_t i;
      /* Store parameters on TS context */
      Ts_Ctx[Instance].Width       = TS_Init->Width;
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	681a      	ldr	r2, [r3, #0]
 8007c3a:	4934      	ldr	r1, [pc, #208]	; (8007d0c <BSP_TS_Init+0x140>)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	015b      	lsls	r3, r3, #5
 8007c40:	440b      	add	r3, r1
 8007c42:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Height      = TS_Init->Height;
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	685a      	ldr	r2, [r3, #4]
 8007c48:	4930      	ldr	r1, [pc, #192]	; (8007d0c <BSP_TS_Init+0x140>)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	015b      	lsls	r3, r3, #5
 8007c4e:	440b      	add	r3, r1
 8007c50:	3304      	adds	r3, #4
 8007c52:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Orientation = TS_Init->Orientation;
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	689a      	ldr	r2, [r3, #8]
 8007c58:	492c      	ldr	r1, [pc, #176]	; (8007d0c <BSP_TS_Init+0x140>)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	015b      	lsls	r3, r3, #5
 8007c5e:	440b      	add	r3, r1
 8007c60:	3308      	adds	r3, #8
 8007c62:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Accuracy    = TS_Init->Accuracy;
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	68da      	ldr	r2, [r3, #12]
 8007c68:	4928      	ldr	r1, [pc, #160]	; (8007d0c <BSP_TS_Init+0x140>)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	015b      	lsls	r3, r3, #5
 8007c6e:	440b      	add	r3, r1
 8007c70:	330c      	adds	r3, #12
 8007c72:	601a      	str	r2, [r3, #0]
      /* Get capabilities to retrieve maximum values of X and Y */
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8007c74:	4b26      	ldr	r3, [pc, #152]	; (8007d10 <BSP_TS_Init+0x144>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	69db      	ldr	r3, [r3, #28]
 8007c7a:	4926      	ldr	r1, [pc, #152]	; (8007d14 <BSP_TS_Init+0x148>)
 8007c7c:	687a      	ldr	r2, [r7, #4]
 8007c7e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007c82:	f107 010c 	add.w	r1, r7, #12
 8007c86:	4610      	mov	r0, r2
 8007c88:	4798      	blx	r3
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	da03      	bge.n	8007c98 <BSP_TS_Init+0xcc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007c90:	f06f 0304 	mvn.w	r3, #4
 8007c94:	61fb      	str	r3, [r7, #28]
 8007c96:	e033      	b.n	8007d00 <BSP_TS_Init+0x134>
      }
      else
      {
        /* Store maximum X and Y on context */
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 8007c98:	693a      	ldr	r2, [r7, #16]
 8007c9a:	491c      	ldr	r1, [pc, #112]	; (8007d0c <BSP_TS_Init+0x140>)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	015b      	lsls	r3, r3, #5
 8007ca0:	440b      	add	r3, r1
 8007ca2:	3310      	adds	r3, #16
 8007ca4:	601a      	str	r2, [r3, #0]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 8007ca6:	697a      	ldr	r2, [r7, #20]
 8007ca8:	4918      	ldr	r1, [pc, #96]	; (8007d0c <BSP_TS_Init+0x140>)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	015b      	lsls	r3, r3, #5
 8007cae:	440b      	add	r3, r1
 8007cb0:	3314      	adds	r3, #20
 8007cb2:	601a      	str	r2, [r3, #0]
        /* Initialize previous position in order to always detect first touch */
        for(i = 0; i < TS_TOUCH_NBR; i++)
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	61bb      	str	r3, [r7, #24]
 8007cb8:	e01f      	b.n	8007cfa <BSP_TS_Init+0x12e>
        {
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	681a      	ldr	r2, [r3, #0]
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	68db      	ldr	r3, [r3, #12]
 8007cc2:	4413      	add	r3, r2
 8007cc4:	1c5a      	adds	r2, r3, #1
 8007cc6:	4811      	ldr	r0, [pc, #68]	; (8007d0c <BSP_TS_Init+0x140>)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	00d9      	lsls	r1, r3, #3
 8007ccc:	69bb      	ldr	r3, [r7, #24]
 8007cce:	440b      	add	r3, r1
 8007cd0:	3306      	adds	r3, #6
 8007cd2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	685a      	ldr	r2, [r3, #4]
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	68db      	ldr	r3, [r3, #12]
 8007cde:	4413      	add	r3, r2
 8007ce0:	1c5a      	adds	r2, r3, #1
 8007ce2:	480a      	ldr	r0, [pc, #40]	; (8007d0c <BSP_TS_Init+0x140>)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	00d9      	lsls	r1, r3, #3
 8007ce8:	69bb      	ldr	r3, [r7, #24]
 8007cea:	440b      	add	r3, r1
 8007cec:	3306      	adds	r3, #6
 8007cee:	009b      	lsls	r3, r3, #2
 8007cf0:	4403      	add	r3, r0
 8007cf2:	605a      	str	r2, [r3, #4]
        for(i = 0; i < TS_TOUCH_NBR; i++)
 8007cf4:	69bb      	ldr	r3, [r7, #24]
 8007cf6:	3301      	adds	r3, #1
 8007cf8:	61bb      	str	r3, [r7, #24]
 8007cfa:	69bb      	ldr	r3, [r7, #24]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d0dc      	beq.n	8007cba <BSP_TS_Init+0xee>
        }
      }
    }
  }

  return ret;
 8007d00:	69fb      	ldr	r3, [r7, #28]
}
 8007d02:	4618      	mov	r0, r3
 8007d04:	3720      	adds	r7, #32
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd80      	pop	{r7, pc}
 8007d0a:	bf00      	nop
 8007d0c:	24001ffc 	.word	0x24001ffc
 8007d10:	24001ff4 	.word	0x24001ff4
 8007d14:	24001ff8 	.word	0x24001ff8

08007d18 <BSP_TS_GetState>:
  * @param  Instance  TS instance. Could be only 0.
  * @param  TS_State  Pointer to touch screen current state structure
  * @retval BSP status
  */
int32_t BSP_TS_GetState(uint32_t Instance, TS_State_t *TS_State)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b08a      	sub	sp, #40	; 0x28
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
 8007d20:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8007d22:	2300      	movs	r3, #0
 8007d24:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t x_oriented, y_oriented;
  uint32_t x_diff, y_diff;

  if(Instance >= TS_INSTANCES_NBR)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d003      	beq.n	8007d34 <BSP_TS_GetState+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8007d2c:	f06f 0301 	mvn.w	r3, #1
 8007d30:	627b      	str	r3, [r7, #36]	; 0x24
 8007d32:	e0f9      	b.n	8007f28 <BSP_TS_GetState+0x210>
  else
  {
    FT5336_State_t state;

    /* Get each touch coordinates */
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 8007d34:	4b7f      	ldr	r3, [pc, #508]	; (8007f34 <BSP_TS_GetState+0x21c>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	691b      	ldr	r3, [r3, #16]
 8007d3a:	497f      	ldr	r1, [pc, #508]	; (8007f38 <BSP_TS_GetState+0x220>)
 8007d3c:	687a      	ldr	r2, [r7, #4]
 8007d3e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007d42:	f107 0108 	add.w	r1, r7, #8
 8007d46:	4610      	mov	r0, r2
 8007d48:	4798      	blx	r3
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	da03      	bge.n	8007d58 <BSP_TS_GetState+0x40>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8007d50:	f06f 0304 	mvn.w	r3, #4
 8007d54:	627b      	str	r3, [r7, #36]	; 0x24
 8007d56:	e0e7      	b.n	8007f28 <BSP_TS_GetState+0x210>
    }/* Check and update the number of touches active detected */
    else if(state.TouchDetected != 0U)
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	f000 80d1 	beq.w	8007f02 <BSP_TS_GetState+0x1ea>
    {
      x_oriented = state.TouchX;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	623b      	str	r3, [r7, #32]
      y_oriented = state.TouchY;
 8007d64:	693b      	ldr	r3, [r7, #16]
 8007d66:	61fb      	str	r3, [r7, #28]

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 8007d68:	4a74      	ldr	r2, [pc, #464]	; (8007f3c <BSP_TS_GetState+0x224>)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	015b      	lsls	r3, r3, #5
 8007d6e:	4413      	add	r3, r2
 8007d70:	3308      	adds	r3, #8
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f003 0308 	and.w	r3, r3, #8
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d003      	beq.n	8007d84 <BSP_TS_GetState+0x6c>
      {
        x_oriented = state.TouchY;
 8007d7c:	693b      	ldr	r3, [r7, #16]
 8007d7e:	623b      	str	r3, [r7, #32]
        y_oriented = state.TouchX;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	61fb      	str	r3, [r7, #28]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 8007d84:	4a6d      	ldr	r2, [pc, #436]	; (8007f3c <BSP_TS_GetState+0x224>)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	015b      	lsls	r3, r3, #5
 8007d8a:	4413      	add	r3, r2
 8007d8c:	3308      	adds	r3, #8
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f003 0302 	and.w	r3, r3, #2
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d009      	beq.n	8007dac <BSP_TS_GetState+0x94>
      {
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
 8007d98:	4a68      	ldr	r2, [pc, #416]	; (8007f3c <BSP_TS_GetState+0x224>)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	015b      	lsls	r3, r3, #5
 8007d9e:	4413      	add	r3, r2
 8007da0:	3310      	adds	r3, #16
 8007da2:	681a      	ldr	r2, [r3, #0]
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	1ad3      	subs	r3, r2, r3
 8007da8:	3b01      	subs	r3, #1
 8007daa:	623b      	str	r3, [r7, #32]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 8007dac:	4a63      	ldr	r2, [pc, #396]	; (8007f3c <BSP_TS_GetState+0x224>)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	015b      	lsls	r3, r3, #5
 8007db2:	4413      	add	r3, r2
 8007db4:	3308      	adds	r3, #8
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f003 0304 	and.w	r3, r3, #4
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d008      	beq.n	8007dd2 <BSP_TS_GetState+0xba>
      {
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
 8007dc0:	4a5e      	ldr	r2, [pc, #376]	; (8007f3c <BSP_TS_GetState+0x224>)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	015b      	lsls	r3, r3, #5
 8007dc6:	4413      	add	r3, r2
 8007dc8:	3314      	adds	r3, #20
 8007dca:	681a      	ldr	r2, [r3, #0]
 8007dcc:	693b      	ldr	r3, [r7, #16]
 8007dce:	1ad3      	subs	r3, r2, r3
 8007dd0:	61fb      	str	r3, [r7, #28]
      }

      /* Apply boundary */
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8007dd2:	4a5a      	ldr	r2, [pc, #360]	; (8007f3c <BSP_TS_GetState+0x224>)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	015b      	lsls	r3, r3, #5
 8007dd8:	4413      	add	r3, r2
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	6a3a      	ldr	r2, [r7, #32]
 8007dde:	fb03 f202 	mul.w	r2, r3, r2
 8007de2:	4956      	ldr	r1, [pc, #344]	; (8007f3c <BSP_TS_GetState+0x224>)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	015b      	lsls	r3, r3, #5
 8007de8:	440b      	add	r3, r1
 8007dea:	3310      	adds	r3, #16
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	fbb2 f2f3 	udiv	r2, r2, r3
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8007df6:	4a51      	ldr	r2, [pc, #324]	; (8007f3c <BSP_TS_GetState+0x224>)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	015b      	lsls	r3, r3, #5
 8007dfc:	4413      	add	r3, r2
 8007dfe:	3304      	adds	r3, #4
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	69fa      	ldr	r2, [r7, #28]
 8007e04:	fb03 f202 	mul.w	r2, r3, r2
 8007e08:	494c      	ldr	r1, [pc, #304]	; (8007f3c <BSP_TS_GetState+0x224>)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	015b      	lsls	r3, r3, #5
 8007e0e:	440b      	add	r3, r1
 8007e10:	3314      	adds	r3, #20
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	fbb2 f2f3 	udiv	r2, r2, r3
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	609a      	str	r2, [r3, #8]
      /* Store Current TS state */
      TS_State->TouchDetected = state.TouchDetected;
 8007e1c:	68ba      	ldr	r2, [r7, #8]
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	601a      	str	r2, [r3, #0]

      /* Check accuracy */
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	685a      	ldr	r2, [r3, #4]
 8007e26:	4945      	ldr	r1, [pc, #276]	; (8007f3c <BSP_TS_GetState+0x224>)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	015b      	lsls	r3, r3, #5
 8007e2c:	440b      	add	r3, r1
 8007e2e:	3318      	adds	r3, #24
 8007e30:	681b      	ldr	r3, [r3, #0]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 8007e32:	429a      	cmp	r2, r3
 8007e34:	d909      	bls.n	8007e4a <BSP_TS_GetState+0x132>
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	685a      	ldr	r2, [r3, #4]
 8007e3a:	4940      	ldr	r1, [pc, #256]	; (8007f3c <BSP_TS_GetState+0x224>)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	015b      	lsls	r3, r3, #5
 8007e40:	440b      	add	r3, r1
 8007e42:	3318      	adds	r3, #24
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	1ad3      	subs	r3, r2, r3
 8007e48:	e008      	b.n	8007e5c <BSP_TS_GetState+0x144>
        (Ts_Ctx[Instance].PreviousX[0] - TS_State->TouchX);
 8007e4a:	4a3c      	ldr	r2, [pc, #240]	; (8007f3c <BSP_TS_GetState+0x224>)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	015b      	lsls	r3, r3, #5
 8007e50:	4413      	add	r3, r2
 8007e52:	3318      	adds	r3, #24
 8007e54:	681a      	ldr	r2, [r3, #0]
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	685b      	ldr	r3, [r3, #4]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 8007e5a:	1ad3      	subs	r3, r2, r3
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 8007e5c:	61bb      	str	r3, [r7, #24]

        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	689a      	ldr	r2, [r3, #8]
 8007e62:	4936      	ldr	r1, [pc, #216]	; (8007f3c <BSP_TS_GetState+0x224>)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	015b      	lsls	r3, r3, #5
 8007e68:	440b      	add	r3, r1
 8007e6a:	331c      	adds	r3, #28
 8007e6c:	681b      	ldr	r3, [r3, #0]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 8007e6e:	429a      	cmp	r2, r3
 8007e70:	d909      	bls.n	8007e86 <BSP_TS_GetState+0x16e>
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	689a      	ldr	r2, [r3, #8]
 8007e76:	4931      	ldr	r1, [pc, #196]	; (8007f3c <BSP_TS_GetState+0x224>)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	015b      	lsls	r3, r3, #5
 8007e7c:	440b      	add	r3, r1
 8007e7e:	331c      	adds	r3, #28
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	1ad3      	subs	r3, r2, r3
 8007e84:	e008      	b.n	8007e98 <BSP_TS_GetState+0x180>
          (Ts_Ctx[Instance].PreviousY[0] - TS_State->TouchY);
 8007e86:	4a2d      	ldr	r2, [pc, #180]	; (8007f3c <BSP_TS_GetState+0x224>)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	015b      	lsls	r3, r3, #5
 8007e8c:	4413      	add	r3, r2
 8007e8e:	331c      	adds	r3, #28
 8007e90:	681a      	ldr	r2, [r3, #0]
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	689b      	ldr	r3, [r3, #8]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 8007e96:	1ad3      	subs	r3, r2, r3
        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 8007e98:	617b      	str	r3, [r7, #20]


          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 8007e9a:	4a28      	ldr	r2, [pc, #160]	; (8007f3c <BSP_TS_GetState+0x224>)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	015b      	lsls	r3, r3, #5
 8007ea0:	4413      	add	r3, r2
 8007ea2:	330c      	adds	r3, #12
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	69ba      	ldr	r2, [r7, #24]
 8007ea8:	429a      	cmp	r2, r3
 8007eaa:	d808      	bhi.n	8007ebe <BSP_TS_GetState+0x1a6>
 8007eac:	4a23      	ldr	r2, [pc, #140]	; (8007f3c <BSP_TS_GetState+0x224>)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	015b      	lsls	r3, r3, #5
 8007eb2:	4413      	add	r3, r2
 8007eb4:	330c      	adds	r3, #12
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	697a      	ldr	r2, [r7, #20]
 8007eba:	429a      	cmp	r2, r3
 8007ebc:	d910      	bls.n	8007ee0 <BSP_TS_GetState+0x1c8>
          {
            /* New touch detected */
            Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	685a      	ldr	r2, [r3, #4]
 8007ec2:	491e      	ldr	r1, [pc, #120]	; (8007f3c <BSP_TS_GetState+0x224>)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	015b      	lsls	r3, r3, #5
 8007ec8:	440b      	add	r3, r1
 8007eca:	3318      	adds	r3, #24
 8007ecc:	601a      	str	r2, [r3, #0]
            Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	689a      	ldr	r2, [r3, #8]
 8007ed2:	491a      	ldr	r1, [pc, #104]	; (8007f3c <BSP_TS_GetState+0x224>)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	015b      	lsls	r3, r3, #5
 8007ed8:	440b      	add	r3, r1
 8007eda:	331c      	adds	r3, #28
 8007edc:	601a      	str	r2, [r3, #0]
 8007ede:	e023      	b.n	8007f28 <BSP_TS_GetState+0x210>
          }
          else
          {
            TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 8007ee0:	4a16      	ldr	r2, [pc, #88]	; (8007f3c <BSP_TS_GetState+0x224>)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	015b      	lsls	r3, r3, #5
 8007ee6:	4413      	add	r3, r2
 8007ee8:	3318      	adds	r3, #24
 8007eea:	681a      	ldr	r2, [r3, #0]
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	605a      	str	r2, [r3, #4]
            TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 8007ef0:	4a12      	ldr	r2, [pc, #72]	; (8007f3c <BSP_TS_GetState+0x224>)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	015b      	lsls	r3, r3, #5
 8007ef6:	4413      	add	r3, r2
 8007ef8:	331c      	adds	r3, #28
 8007efa:	681a      	ldr	r2, [r3, #0]
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	609a      	str	r2, [r3, #8]
 8007f00:	e012      	b.n	8007f28 <BSP_TS_GetState+0x210>
          }
    }
    else
    {
      TS_State->TouchDetected = 0U;
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	2200      	movs	r2, #0
 8007f06:	601a      	str	r2, [r3, #0]
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 8007f08:	4a0c      	ldr	r2, [pc, #48]	; (8007f3c <BSP_TS_GetState+0x224>)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	015b      	lsls	r3, r3, #5
 8007f0e:	4413      	add	r3, r2
 8007f10:	3318      	adds	r3, #24
 8007f12:	681a      	ldr	r2, [r3, #0]
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 8007f18:	4a08      	ldr	r2, [pc, #32]	; (8007f3c <BSP_TS_GetState+0x224>)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	015b      	lsls	r3, r3, #5
 8007f1e:	4413      	add	r3, r2
 8007f20:	331c      	adds	r3, #28
 8007f22:	681a      	ldr	r2, [r3, #0]
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	609a      	str	r2, [r3, #8]
    }
  }

  return ret;
 8007f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	3728      	adds	r7, #40	; 0x28
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}
 8007f32:	bf00      	nop
 8007f34:	24001ff4 	.word	0x24001ff4
 8007f38:	24001ff8 	.word	0x24001ff8
 8007f3c:	24001ffc 	.word	0x24001ffc

08007f40 <FT5336_Probe>:
  * @brief  Register Bus IOs if component ID is OK
  * @param  Instance TS instance. Could be only 0.
  * @retval BSP status
  */
static int32_t FT5336_Probe(uint32_t Instance)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b08a      	sub	sp, #40	; 0x28
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
  int32_t ret              = BSP_ERROR_NONE;
 8007f48:	2300      	movs	r3, #0
 8007f4a:	627b      	str	r3, [r7, #36]	; 0x24
  FT5336_IO_t              IOCtx;
  static FT5336_Object_t   FT5336Obj;
  uint32_t ft5336_id       = 0;
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	60bb      	str	r3, [r7, #8]

  /* Configure the touch screen driver */
  IOCtx.Address     = TS_I2C_ADDRESS;
 8007f50:	2370      	movs	r3, #112	; 0x70
 8007f52:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = BSP_I2C4_Init;
 8007f54:	4b23      	ldr	r3, [pc, #140]	; (8007fe4 <FT5336_Probe+0xa4>)
 8007f56:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 8007f58:	4b23      	ldr	r3, [pc, #140]	; (8007fe8 <FT5336_Probe+0xa8>)
 8007f5a:	613b      	str	r3, [r7, #16]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 8007f5c:	4b23      	ldr	r3, [pc, #140]	; (8007fec <FT5336_Probe+0xac>)
 8007f5e:	61fb      	str	r3, [r7, #28]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 8007f60:	4b23      	ldr	r3, [pc, #140]	; (8007ff0 <FT5336_Probe+0xb0>)
 8007f62:	61bb      	str	r3, [r7, #24]
  IOCtx.GetTick     = BSP_GetTick;
 8007f64:	4b23      	ldr	r3, [pc, #140]	; (8007ff4 <FT5336_Probe+0xb4>)
 8007f66:	623b      	str	r3, [r7, #32]

  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 8007f68:	f107 030c 	add.w	r3, r7, #12
 8007f6c:	4619      	mov	r1, r3
 8007f6e:	4822      	ldr	r0, [pc, #136]	; (8007ff8 <FT5336_Probe+0xb8>)
 8007f70:	f7fd fb58 	bl	8005624 <FT5336_RegisterBusIO>
 8007f74:	4603      	mov	r3, r0
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d003      	beq.n	8007f82 <FT5336_Probe+0x42>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 8007f7a:	f06f 0307 	mvn.w	r3, #7
 8007f7e:	627b      	str	r3, [r7, #36]	; 0x24
 8007f80:	e02a      	b.n	8007fd8 <FT5336_Probe+0x98>
  }
  else if(FT5336_ReadID(&FT5336Obj, &ft5336_id) != FT5336_OK)
 8007f82:	f107 0308 	add.w	r3, r7, #8
 8007f86:	4619      	mov	r1, r3
 8007f88:	481b      	ldr	r0, [pc, #108]	; (8007ff8 <FT5336_Probe+0xb8>)
 8007f8a:	f7fd fc45 	bl	8005818 <FT5336_ReadID>
 8007f8e:	4603      	mov	r3, r0
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d003      	beq.n	8007f9c <FT5336_Probe+0x5c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8007f94:	f06f 0304 	mvn.w	r3, #4
 8007f98:	627b      	str	r3, [r7, #36]	; 0x24
 8007f9a:	e01d      	b.n	8007fd8 <FT5336_Probe+0x98>
  }
  else if(ft5336_id != FT5336_ID)
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	2b51      	cmp	r3, #81	; 0x51
 8007fa0:	d003      	beq.n	8007faa <FT5336_Probe+0x6a>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8007fa2:	f06f 0306 	mvn.w	r3, #6
 8007fa6:	627b      	str	r3, [r7, #36]	; 0x24
 8007fa8:	e016      	b.n	8007fd8 <FT5336_Probe+0x98>
  }
  else
  {
    Ts_CompObj[Instance] = &FT5336Obj;
 8007faa:	4a14      	ldr	r2, [pc, #80]	; (8007ffc <FT5336_Probe+0xbc>)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	4912      	ldr	r1, [pc, #72]	; (8007ff8 <FT5336_Probe+0xb8>)
 8007fb0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
 8007fb4:	4b12      	ldr	r3, [pc, #72]	; (8008000 <FT5336_Probe+0xc0>)
 8007fb6:	4a13      	ldr	r2, [pc, #76]	; (8008004 <FT5336_Probe+0xc4>)
 8007fb8:	601a      	str	r2, [r3, #0]

    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
 8007fba:	4b11      	ldr	r3, [pc, #68]	; (8008000 <FT5336_Probe+0xc0>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	490e      	ldr	r1, [pc, #56]	; (8007ffc <FT5336_Probe+0xbc>)
 8007fc2:	687a      	ldr	r2, [r7, #4]
 8007fc4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007fc8:	4610      	mov	r0, r2
 8007fca:	4798      	blx	r3
 8007fcc:	4603      	mov	r3, r0
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d002      	beq.n	8007fd8 <FT5336_Probe+0x98>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8007fd2:	f06f 0304 	mvn.w	r3, #4
 8007fd6:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  return ret;
 8007fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3728      	adds	r7, #40	; 0x28
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}
 8007fe2:	bf00      	nop
 8007fe4:	08006625 	.word	0x08006625
 8007fe8:	08006699 	.word	0x08006699
 8007fec:	080067c1 	.word	0x080067c1
 8007ff0:	08006765 	.word	0x08006765
 8007ff4:	0800681d 	.word	0x0800681d
 8007ff8:	2400201c 	.word	0x2400201c
 8007ffc:	24001ff8 	.word	0x24001ff8
 8008000:	24001ff4 	.word	0x24001ff4
 8008004:	2400000c 	.word	0x2400000c

08008008 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008008:	b480      	push	{r7}
 800800a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800800c:	4b32      	ldr	r3, [pc, #200]	; (80080d8 <SystemInit+0xd0>)
 800800e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008012:	4a31      	ldr	r2, [pc, #196]	; (80080d8 <SystemInit+0xd0>)
 8008014:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008018:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800801c:	4b2f      	ldr	r3, [pc, #188]	; (80080dc <SystemInit+0xd4>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f003 030f 	and.w	r3, r3, #15
 8008024:	2b02      	cmp	r3, #2
 8008026:	d807      	bhi.n	8008038 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8008028:	4b2c      	ldr	r3, [pc, #176]	; (80080dc <SystemInit+0xd4>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f023 030f 	bic.w	r3, r3, #15
 8008030:	4a2a      	ldr	r2, [pc, #168]	; (80080dc <SystemInit+0xd4>)
 8008032:	f043 0303 	orr.w	r3, r3, #3
 8008036:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8008038:	4b29      	ldr	r3, [pc, #164]	; (80080e0 <SystemInit+0xd8>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	4a28      	ldr	r2, [pc, #160]	; (80080e0 <SystemInit+0xd8>)
 800803e:	f043 0301 	orr.w	r3, r3, #1
 8008042:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8008044:	4b26      	ldr	r3, [pc, #152]	; (80080e0 <SystemInit+0xd8>)
 8008046:	2200      	movs	r2, #0
 8008048:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800804a:	4b25      	ldr	r3, [pc, #148]	; (80080e0 <SystemInit+0xd8>)
 800804c:	681a      	ldr	r2, [r3, #0]
 800804e:	4924      	ldr	r1, [pc, #144]	; (80080e0 <SystemInit+0xd8>)
 8008050:	4b24      	ldr	r3, [pc, #144]	; (80080e4 <SystemInit+0xdc>)
 8008052:	4013      	ands	r3, r2
 8008054:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8008056:	4b21      	ldr	r3, [pc, #132]	; (80080dc <SystemInit+0xd4>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f003 030c 	and.w	r3, r3, #12
 800805e:	2b00      	cmp	r3, #0
 8008060:	d007      	beq.n	8008072 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8008062:	4b1e      	ldr	r3, [pc, #120]	; (80080dc <SystemInit+0xd4>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f023 030f 	bic.w	r3, r3, #15
 800806a:	4a1c      	ldr	r2, [pc, #112]	; (80080dc <SystemInit+0xd4>)
 800806c:	f043 0303 	orr.w	r3, r3, #3
 8008070:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8008072:	4b1b      	ldr	r3, [pc, #108]	; (80080e0 <SystemInit+0xd8>)
 8008074:	2200      	movs	r2, #0
 8008076:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8008078:	4b19      	ldr	r3, [pc, #100]	; (80080e0 <SystemInit+0xd8>)
 800807a:	2200      	movs	r2, #0
 800807c:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 800807e:	4b18      	ldr	r3, [pc, #96]	; (80080e0 <SystemInit+0xd8>)
 8008080:	2200      	movs	r2, #0
 8008082:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8008084:	4b16      	ldr	r3, [pc, #88]	; (80080e0 <SystemInit+0xd8>)
 8008086:	4a18      	ldr	r2, [pc, #96]	; (80080e8 <SystemInit+0xe0>)
 8008088:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800808a:	4b15      	ldr	r3, [pc, #84]	; (80080e0 <SystemInit+0xd8>)
 800808c:	4a17      	ldr	r2, [pc, #92]	; (80080ec <SystemInit+0xe4>)
 800808e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8008090:	4b13      	ldr	r3, [pc, #76]	; (80080e0 <SystemInit+0xd8>)
 8008092:	4a17      	ldr	r2, [pc, #92]	; (80080f0 <SystemInit+0xe8>)
 8008094:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8008096:	4b12      	ldr	r3, [pc, #72]	; (80080e0 <SystemInit+0xd8>)
 8008098:	2200      	movs	r2, #0
 800809a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800809c:	4b10      	ldr	r3, [pc, #64]	; (80080e0 <SystemInit+0xd8>)
 800809e:	4a14      	ldr	r2, [pc, #80]	; (80080f0 <SystemInit+0xe8>)
 80080a0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80080a2:	4b0f      	ldr	r3, [pc, #60]	; (80080e0 <SystemInit+0xd8>)
 80080a4:	2200      	movs	r2, #0
 80080a6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80080a8:	4b0d      	ldr	r3, [pc, #52]	; (80080e0 <SystemInit+0xd8>)
 80080aa:	4a11      	ldr	r2, [pc, #68]	; (80080f0 <SystemInit+0xe8>)
 80080ac:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80080ae:	4b0c      	ldr	r3, [pc, #48]	; (80080e0 <SystemInit+0xd8>)
 80080b0:	2200      	movs	r2, #0
 80080b2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80080b4:	4b0a      	ldr	r3, [pc, #40]	; (80080e0 <SystemInit+0xd8>)
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	4a09      	ldr	r2, [pc, #36]	; (80080e0 <SystemInit+0xd8>)
 80080ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80080be:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80080c0:	4b07      	ldr	r3, [pc, #28]	; (80080e0 <SystemInit+0xd8>)
 80080c2:	2200      	movs	r2, #0
 80080c4:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80080c6:	4b0b      	ldr	r3, [pc, #44]	; (80080f4 <SystemInit+0xec>)
 80080c8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80080cc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80080ce:	bf00      	nop
 80080d0:	46bd      	mov	sp, r7
 80080d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d6:	4770      	bx	lr
 80080d8:	e000ed00 	.word	0xe000ed00
 80080dc:	52002000 	.word	0x52002000
 80080e0:	58024400 	.word	0x58024400
 80080e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80080e8:	02020200 	.word	0x02020200
 80080ec:	01ff0000 	.word	0x01ff0000
 80080f0:	01010280 	.word	0x01010280
 80080f4:	52004000 	.word	0x52004000

080080f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b082      	sub	sp, #8
 80080fc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80080fe:	2003      	movs	r0, #3
 8008100:	f000 f94b 	bl	800839a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8008104:	f004 f836 	bl	800c174 <HAL_RCC_GetSysClockFreq>
 8008108:	4602      	mov	r2, r0
 800810a:	4b15      	ldr	r3, [pc, #84]	; (8008160 <HAL_Init+0x68>)
 800810c:	699b      	ldr	r3, [r3, #24]
 800810e:	0a1b      	lsrs	r3, r3, #8
 8008110:	f003 030f 	and.w	r3, r3, #15
 8008114:	4913      	ldr	r1, [pc, #76]	; (8008164 <HAL_Init+0x6c>)
 8008116:	5ccb      	ldrb	r3, [r1, r3]
 8008118:	f003 031f 	and.w	r3, r3, #31
 800811c:	fa22 f303 	lsr.w	r3, r2, r3
 8008120:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8008122:	4b0f      	ldr	r3, [pc, #60]	; (8008160 <HAL_Init+0x68>)
 8008124:	699b      	ldr	r3, [r3, #24]
 8008126:	f003 030f 	and.w	r3, r3, #15
 800812a:	4a0e      	ldr	r2, [pc, #56]	; (8008164 <HAL_Init+0x6c>)
 800812c:	5cd3      	ldrb	r3, [r2, r3]
 800812e:	f003 031f 	and.w	r3, r3, #31
 8008132:	687a      	ldr	r2, [r7, #4]
 8008134:	fa22 f303 	lsr.w	r3, r2, r3
 8008138:	4a0b      	ldr	r2, [pc, #44]	; (8008168 <HAL_Init+0x70>)
 800813a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800813c:	4a0b      	ldr	r2, [pc, #44]	; (800816c <HAL_Init+0x74>)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008142:	200f      	movs	r0, #15
 8008144:	f7f8 ffc4 	bl	80010d0 <HAL_InitTick>
 8008148:	4603      	mov	r3, r0
 800814a:	2b00      	cmp	r3, #0
 800814c:	d001      	beq.n	8008152 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800814e:	2301      	movs	r3, #1
 8008150:	e002      	b.n	8008158 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8008152:	f7f8 fd65 	bl	8000c20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008156:	2300      	movs	r3, #0
}
 8008158:	4618      	mov	r0, r3
 800815a:	3708      	adds	r7, #8
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}
 8008160:	58024400 	.word	0x58024400
 8008164:	08023098 	.word	0x08023098
 8008168:	24000040 	.word	0x24000040
 800816c:	2400003c 	.word	0x2400003c

08008170 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008170:	b480      	push	{r7}
 8008172:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8008174:	4b06      	ldr	r3, [pc, #24]	; (8008190 <HAL_IncTick+0x20>)
 8008176:	781b      	ldrb	r3, [r3, #0]
 8008178:	461a      	mov	r2, r3
 800817a:	4b06      	ldr	r3, [pc, #24]	; (8008194 <HAL_IncTick+0x24>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	4413      	add	r3, r2
 8008180:	4a04      	ldr	r2, [pc, #16]	; (8008194 <HAL_IncTick+0x24>)
 8008182:	6013      	str	r3, [r2, #0]
}
 8008184:	bf00      	nop
 8008186:	46bd      	mov	sp, r7
 8008188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818c:	4770      	bx	lr
 800818e:	bf00      	nop
 8008190:	24000048 	.word	0x24000048
 8008194:	24002044 	.word	0x24002044

08008198 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008198:	b480      	push	{r7}
 800819a:	af00      	add	r7, sp, #0
  return uwTick;
 800819c:	4b03      	ldr	r3, [pc, #12]	; (80081ac <HAL_GetTick+0x14>)
 800819e:	681b      	ldr	r3, [r3, #0]
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	46bd      	mov	sp, r7
 80081a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a8:	4770      	bx	lr
 80081aa:	bf00      	nop
 80081ac:	24002044 	.word	0x24002044

080081b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b084      	sub	sp, #16
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80081b8:	f7ff ffee 	bl	8008198 <HAL_GetTick>
 80081bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081c8:	d005      	beq.n	80081d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80081ca:	4b0a      	ldr	r3, [pc, #40]	; (80081f4 <HAL_Delay+0x44>)
 80081cc:	781b      	ldrb	r3, [r3, #0]
 80081ce:	461a      	mov	r2, r3
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	4413      	add	r3, r2
 80081d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80081d6:	bf00      	nop
 80081d8:	f7ff ffde 	bl	8008198 <HAL_GetTick>
 80081dc:	4602      	mov	r2, r0
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	1ad3      	subs	r3, r2, r3
 80081e2:	68fa      	ldr	r2, [r7, #12]
 80081e4:	429a      	cmp	r2, r3
 80081e6:	d8f7      	bhi.n	80081d8 <HAL_Delay+0x28>
  {
  }
}
 80081e8:	bf00      	nop
 80081ea:	bf00      	nop
 80081ec:	3710      	adds	r7, #16
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}
 80081f2:	bf00      	nop
 80081f4:	24000048 	.word	0x24000048

080081f8 <__NVIC_SetPriorityGrouping>:
{
 80081f8:	b480      	push	{r7}
 80081fa:	b085      	sub	sp, #20
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f003 0307 	and.w	r3, r3, #7
 8008206:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008208:	4b0b      	ldr	r3, [pc, #44]	; (8008238 <__NVIC_SetPriorityGrouping+0x40>)
 800820a:	68db      	ldr	r3, [r3, #12]
 800820c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800820e:	68ba      	ldr	r2, [r7, #8]
 8008210:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008214:	4013      	ands	r3, r2
 8008216:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8008220:	4b06      	ldr	r3, [pc, #24]	; (800823c <__NVIC_SetPriorityGrouping+0x44>)
 8008222:	4313      	orrs	r3, r2
 8008224:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008226:	4a04      	ldr	r2, [pc, #16]	; (8008238 <__NVIC_SetPriorityGrouping+0x40>)
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	60d3      	str	r3, [r2, #12]
}
 800822c:	bf00      	nop
 800822e:	3714      	adds	r7, #20
 8008230:	46bd      	mov	sp, r7
 8008232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008236:	4770      	bx	lr
 8008238:	e000ed00 	.word	0xe000ed00
 800823c:	05fa0000 	.word	0x05fa0000

08008240 <__NVIC_GetPriorityGrouping>:
{
 8008240:	b480      	push	{r7}
 8008242:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008244:	4b04      	ldr	r3, [pc, #16]	; (8008258 <__NVIC_GetPriorityGrouping+0x18>)
 8008246:	68db      	ldr	r3, [r3, #12]
 8008248:	0a1b      	lsrs	r3, r3, #8
 800824a:	f003 0307 	and.w	r3, r3, #7
}
 800824e:	4618      	mov	r0, r3
 8008250:	46bd      	mov	sp, r7
 8008252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008256:	4770      	bx	lr
 8008258:	e000ed00 	.word	0xe000ed00

0800825c <__NVIC_EnableIRQ>:
{
 800825c:	b480      	push	{r7}
 800825e:	b083      	sub	sp, #12
 8008260:	af00      	add	r7, sp, #0
 8008262:	4603      	mov	r3, r0
 8008264:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8008266:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800826a:	2b00      	cmp	r3, #0
 800826c:	db0b      	blt.n	8008286 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800826e:	88fb      	ldrh	r3, [r7, #6]
 8008270:	f003 021f 	and.w	r2, r3, #31
 8008274:	4907      	ldr	r1, [pc, #28]	; (8008294 <__NVIC_EnableIRQ+0x38>)
 8008276:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800827a:	095b      	lsrs	r3, r3, #5
 800827c:	2001      	movs	r0, #1
 800827e:	fa00 f202 	lsl.w	r2, r0, r2
 8008282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008286:	bf00      	nop
 8008288:	370c      	adds	r7, #12
 800828a:	46bd      	mov	sp, r7
 800828c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008290:	4770      	bx	lr
 8008292:	bf00      	nop
 8008294:	e000e100 	.word	0xe000e100

08008298 <__NVIC_DisableIRQ>:
{
 8008298:	b480      	push	{r7}
 800829a:	b083      	sub	sp, #12
 800829c:	af00      	add	r7, sp, #0
 800829e:	4603      	mov	r3, r0
 80082a0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80082a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	db12      	blt.n	80082d0 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80082aa:	88fb      	ldrh	r3, [r7, #6]
 80082ac:	f003 021f 	and.w	r2, r3, #31
 80082b0:	490a      	ldr	r1, [pc, #40]	; (80082dc <__NVIC_DisableIRQ+0x44>)
 80082b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80082b6:	095b      	lsrs	r3, r3, #5
 80082b8:	2001      	movs	r0, #1
 80082ba:	fa00 f202 	lsl.w	r2, r0, r2
 80082be:	3320      	adds	r3, #32
 80082c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80082c4:	f3bf 8f4f 	dsb	sy
}
 80082c8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80082ca:	f3bf 8f6f 	isb	sy
}
 80082ce:	bf00      	nop
}
 80082d0:	bf00      	nop
 80082d2:	370c      	adds	r7, #12
 80082d4:	46bd      	mov	sp, r7
 80082d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082da:	4770      	bx	lr
 80082dc:	e000e100 	.word	0xe000e100

080082e0 <__NVIC_SetPriority>:
{
 80082e0:	b480      	push	{r7}
 80082e2:	b083      	sub	sp, #12
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	4603      	mov	r3, r0
 80082e8:	6039      	str	r1, [r7, #0]
 80082ea:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80082ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	db0a      	blt.n	800830a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	b2da      	uxtb	r2, r3
 80082f8:	490c      	ldr	r1, [pc, #48]	; (800832c <__NVIC_SetPriority+0x4c>)
 80082fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80082fe:	0112      	lsls	r2, r2, #4
 8008300:	b2d2      	uxtb	r2, r2
 8008302:	440b      	add	r3, r1
 8008304:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008308:	e00a      	b.n	8008320 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	b2da      	uxtb	r2, r3
 800830e:	4908      	ldr	r1, [pc, #32]	; (8008330 <__NVIC_SetPriority+0x50>)
 8008310:	88fb      	ldrh	r3, [r7, #6]
 8008312:	f003 030f 	and.w	r3, r3, #15
 8008316:	3b04      	subs	r3, #4
 8008318:	0112      	lsls	r2, r2, #4
 800831a:	b2d2      	uxtb	r2, r2
 800831c:	440b      	add	r3, r1
 800831e:	761a      	strb	r2, [r3, #24]
}
 8008320:	bf00      	nop
 8008322:	370c      	adds	r7, #12
 8008324:	46bd      	mov	sp, r7
 8008326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832a:	4770      	bx	lr
 800832c:	e000e100 	.word	0xe000e100
 8008330:	e000ed00 	.word	0xe000ed00

08008334 <NVIC_EncodePriority>:
{
 8008334:	b480      	push	{r7}
 8008336:	b089      	sub	sp, #36	; 0x24
 8008338:	af00      	add	r7, sp, #0
 800833a:	60f8      	str	r0, [r7, #12]
 800833c:	60b9      	str	r1, [r7, #8]
 800833e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	f003 0307 	and.w	r3, r3, #7
 8008346:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008348:	69fb      	ldr	r3, [r7, #28]
 800834a:	f1c3 0307 	rsb	r3, r3, #7
 800834e:	2b04      	cmp	r3, #4
 8008350:	bf28      	it	cs
 8008352:	2304      	movcs	r3, #4
 8008354:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008356:	69fb      	ldr	r3, [r7, #28]
 8008358:	3304      	adds	r3, #4
 800835a:	2b06      	cmp	r3, #6
 800835c:	d902      	bls.n	8008364 <NVIC_EncodePriority+0x30>
 800835e:	69fb      	ldr	r3, [r7, #28]
 8008360:	3b03      	subs	r3, #3
 8008362:	e000      	b.n	8008366 <NVIC_EncodePriority+0x32>
 8008364:	2300      	movs	r3, #0
 8008366:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008368:	f04f 32ff 	mov.w	r2, #4294967295
 800836c:	69bb      	ldr	r3, [r7, #24]
 800836e:	fa02 f303 	lsl.w	r3, r2, r3
 8008372:	43da      	mvns	r2, r3
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	401a      	ands	r2, r3
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800837c:	f04f 31ff 	mov.w	r1, #4294967295
 8008380:	697b      	ldr	r3, [r7, #20]
 8008382:	fa01 f303 	lsl.w	r3, r1, r3
 8008386:	43d9      	mvns	r1, r3
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800838c:	4313      	orrs	r3, r2
}
 800838e:	4618      	mov	r0, r3
 8008390:	3724      	adds	r7, #36	; 0x24
 8008392:	46bd      	mov	sp, r7
 8008394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008398:	4770      	bx	lr

0800839a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800839a:	b580      	push	{r7, lr}
 800839c:	b082      	sub	sp, #8
 800839e:	af00      	add	r7, sp, #0
 80083a0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f7ff ff28 	bl	80081f8 <__NVIC_SetPriorityGrouping>
}
 80083a8:	bf00      	nop
 80083aa:	3708      	adds	r7, #8
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}

080083b0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b086      	sub	sp, #24
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	4603      	mov	r3, r0
 80083b8:	60b9      	str	r1, [r7, #8]
 80083ba:	607a      	str	r2, [r7, #4]
 80083bc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80083be:	f7ff ff3f 	bl	8008240 <__NVIC_GetPriorityGrouping>
 80083c2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80083c4:	687a      	ldr	r2, [r7, #4]
 80083c6:	68b9      	ldr	r1, [r7, #8]
 80083c8:	6978      	ldr	r0, [r7, #20]
 80083ca:	f7ff ffb3 	bl	8008334 <NVIC_EncodePriority>
 80083ce:	4602      	mov	r2, r0
 80083d0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80083d4:	4611      	mov	r1, r2
 80083d6:	4618      	mov	r0, r3
 80083d8:	f7ff ff82 	bl	80082e0 <__NVIC_SetPriority>
}
 80083dc:	bf00      	nop
 80083de:	3718      	adds	r7, #24
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}

080083e4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b082      	sub	sp, #8
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	4603      	mov	r3, r0
 80083ec:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80083ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80083f2:	4618      	mov	r0, r3
 80083f4:	f7ff ff32 	bl	800825c <__NVIC_EnableIRQ>
}
 80083f8:	bf00      	nop
 80083fa:	3708      	adds	r7, #8
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd80      	pop	{r7, pc}

08008400 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b082      	sub	sp, #8
 8008404:	af00      	add	r7, sp, #0
 8008406:	4603      	mov	r3, r0
 8008408:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800840a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800840e:	4618      	mov	r0, r3
 8008410:	f7ff ff42 	bl	8008298 <__NVIC_DisableIRQ>
}
 8008414:	bf00      	nop
 8008416:	3708      	adds	r7, #8
 8008418:	46bd      	mov	sp, r7
 800841a:	bd80      	pop	{r7, pc}

0800841c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800841c:	b480      	push	{r7}
 800841e:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8008420:	f3bf 8f5f 	dmb	sy
}
 8008424:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8008426:	4b07      	ldr	r3, [pc, #28]	; (8008444 <HAL_MPU_Disable+0x28>)
 8008428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800842a:	4a06      	ldr	r2, [pc, #24]	; (8008444 <HAL_MPU_Disable+0x28>)
 800842c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008430:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8008432:	4b05      	ldr	r3, [pc, #20]	; (8008448 <HAL_MPU_Disable+0x2c>)
 8008434:	2200      	movs	r2, #0
 8008436:	605a      	str	r2, [r3, #4]
}
 8008438:	bf00      	nop
 800843a:	46bd      	mov	sp, r7
 800843c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008440:	4770      	bx	lr
 8008442:	bf00      	nop
 8008444:	e000ed00 	.word	0xe000ed00
 8008448:	e000ed90 	.word	0xe000ed90

0800844c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800844c:	b480      	push	{r7}
 800844e:	b083      	sub	sp, #12
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8008454:	4a0b      	ldr	r2, [pc, #44]	; (8008484 <HAL_MPU_Enable+0x38>)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	f043 0301 	orr.w	r3, r3, #1
 800845c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800845e:	4b0a      	ldr	r3, [pc, #40]	; (8008488 <HAL_MPU_Enable+0x3c>)
 8008460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008462:	4a09      	ldr	r2, [pc, #36]	; (8008488 <HAL_MPU_Enable+0x3c>)
 8008464:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008468:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800846a:	f3bf 8f4f 	dsb	sy
}
 800846e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008470:	f3bf 8f6f 	isb	sy
}
 8008474:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8008476:	bf00      	nop
 8008478:	370c      	adds	r7, #12
 800847a:	46bd      	mov	sp, r7
 800847c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008480:	4770      	bx	lr
 8008482:	bf00      	nop
 8008484:	e000ed90 	.word	0xe000ed90
 8008488:	e000ed00 	.word	0xe000ed00

0800848c <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800848c:	b480      	push	{r7}
 800848e:	b083      	sub	sp, #12
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	785a      	ldrb	r2, [r3, #1]
 8008498:	4b1d      	ldr	r3, [pc, #116]	; (8008510 <HAL_MPU_ConfigRegion+0x84>)
 800849a:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	781b      	ldrb	r3, [r3, #0]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d029      	beq.n	80084f8 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 80084a4:	4a1a      	ldr	r2, [pc, #104]	; (8008510 <HAL_MPU_ConfigRegion+0x84>)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	685b      	ldr	r3, [r3, #4]
 80084aa:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	7b1b      	ldrb	r3, [r3, #12]
 80084b0:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	7adb      	ldrb	r3, [r3, #11]
 80084b6:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80084b8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	7a9b      	ldrb	r3, [r3, #10]
 80084be:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80084c0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	7b5b      	ldrb	r3, [r3, #13]
 80084c6:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80084c8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	7b9b      	ldrb	r3, [r3, #14]
 80084ce:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80084d0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	7bdb      	ldrb	r3, [r3, #15]
 80084d6:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80084d8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	7a5b      	ldrb	r3, [r3, #9]
 80084de:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80084e0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	7a1b      	ldrb	r3, [r3, #8]
 80084e6:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80084e8:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80084ea:	687a      	ldr	r2, [r7, #4]
 80084ec:	7812      	ldrb	r2, [r2, #0]
 80084ee:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80084f0:	4a07      	ldr	r2, [pc, #28]	; (8008510 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80084f2:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80084f4:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80084f6:	e005      	b.n	8008504 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80084f8:	4b05      	ldr	r3, [pc, #20]	; (8008510 <HAL_MPU_ConfigRegion+0x84>)
 80084fa:	2200      	movs	r2, #0
 80084fc:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80084fe:	4b04      	ldr	r3, [pc, #16]	; (8008510 <HAL_MPU_ConfigRegion+0x84>)
 8008500:	2200      	movs	r2, #0
 8008502:	611a      	str	r2, [r3, #16]
}
 8008504:	bf00      	nop
 8008506:	370c      	adds	r7, #12
 8008508:	46bd      	mov	sp, r7
 800850a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850e:	4770      	bx	lr
 8008510:	e000ed90 	.word	0xe000ed90

08008514 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b082      	sub	sp, #8
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d101      	bne.n	8008526 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8008522:	2301      	movs	r3, #1
 8008524:	e054      	b.n	80085d0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	7f5b      	ldrb	r3, [r3, #29]
 800852a:	b2db      	uxtb	r3, r3
 800852c:	2b00      	cmp	r3, #0
 800852e:	d105      	bne.n	800853c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2200      	movs	r2, #0
 8008534:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f7f8 fb90 	bl	8000c5c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2202      	movs	r2, #2
 8008540:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	791b      	ldrb	r3, [r3, #4]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d10c      	bne.n	8008564 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	4a22      	ldr	r2, [pc, #136]	; (80085d8 <HAL_CRC_Init+0xc4>)
 8008550:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	689a      	ldr	r2, [r3, #8]
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f022 0218 	bic.w	r2, r2, #24
 8008560:	609a      	str	r2, [r3, #8]
 8008562:	e00c      	b.n	800857e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6899      	ldr	r1, [r3, #8]
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	68db      	ldr	r3, [r3, #12]
 800856c:	461a      	mov	r2, r3
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f000 f834 	bl	80085dc <HAL_CRCEx_Polynomial_Set>
 8008574:	4603      	mov	r3, r0
 8008576:	2b00      	cmp	r3, #0
 8008578:	d001      	beq.n	800857e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800857a:	2301      	movs	r3, #1
 800857c:	e028      	b.n	80085d0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	795b      	ldrb	r3, [r3, #5]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d105      	bne.n	8008592 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f04f 32ff 	mov.w	r2, #4294967295
 800858e:	611a      	str	r2, [r3, #16]
 8008590:	e004      	b.n	800859c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	687a      	ldr	r2, [r7, #4]
 8008598:	6912      	ldr	r2, [r2, #16]
 800859a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	689b      	ldr	r3, [r3, #8]
 80085a2:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	695a      	ldr	r2, [r3, #20]
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	430a      	orrs	r2, r1
 80085b0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	689b      	ldr	r3, [r3, #8]
 80085b8:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	699a      	ldr	r2, [r3, #24]
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	430a      	orrs	r2, r1
 80085c6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2201      	movs	r2, #1
 80085cc:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80085ce:	2300      	movs	r3, #0
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	3708      	adds	r7, #8
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd80      	pop	{r7, pc}
 80085d8:	04c11db7 	.word	0x04c11db7

080085dc <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80085dc:	b480      	push	{r7}
 80085de:	b087      	sub	sp, #28
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	60f8      	str	r0, [r7, #12]
 80085e4:	60b9      	str	r1, [r7, #8]
 80085e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80085e8:	2300      	movs	r3, #0
 80085ea:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80085ec:	231f      	movs	r3, #31
 80085ee:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */ 
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	f003 0301 	and.w	r3, r3, #1
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d102      	bne.n	8008600 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80085fa:	2301      	movs	r3, #1
 80085fc:	75fb      	strb	r3, [r7, #23]
 80085fe:	e063      	b.n	80086c8 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8008600:	bf00      	nop
 8008602:	693b      	ldr	r3, [r7, #16]
 8008604:	1e5a      	subs	r2, r3, #1
 8008606:	613a      	str	r2, [r7, #16]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d009      	beq.n	8008620 <HAL_CRCEx_Polynomial_Set+0x44>
 800860c:	693b      	ldr	r3, [r7, #16]
 800860e:	f003 031f 	and.w	r3, r3, #31
 8008612:	68ba      	ldr	r2, [r7, #8]
 8008614:	fa22 f303 	lsr.w	r3, r2, r3
 8008618:	f003 0301 	and.w	r3, r3, #1
 800861c:	2b00      	cmp	r3, #0
 800861e:	d0f0      	beq.n	8008602 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2b18      	cmp	r3, #24
 8008624:	d846      	bhi.n	80086b4 <HAL_CRCEx_Polynomial_Set+0xd8>
 8008626:	a201      	add	r2, pc, #4	; (adr r2, 800862c <HAL_CRCEx_Polynomial_Set+0x50>)
 8008628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800862c:	080086bb 	.word	0x080086bb
 8008630:	080086b5 	.word	0x080086b5
 8008634:	080086b5 	.word	0x080086b5
 8008638:	080086b5 	.word	0x080086b5
 800863c:	080086b5 	.word	0x080086b5
 8008640:	080086b5 	.word	0x080086b5
 8008644:	080086b5 	.word	0x080086b5
 8008648:	080086b5 	.word	0x080086b5
 800864c:	080086a9 	.word	0x080086a9
 8008650:	080086b5 	.word	0x080086b5
 8008654:	080086b5 	.word	0x080086b5
 8008658:	080086b5 	.word	0x080086b5
 800865c:	080086b5 	.word	0x080086b5
 8008660:	080086b5 	.word	0x080086b5
 8008664:	080086b5 	.word	0x080086b5
 8008668:	080086b5 	.word	0x080086b5
 800866c:	0800869d 	.word	0x0800869d
 8008670:	080086b5 	.word	0x080086b5
 8008674:	080086b5 	.word	0x080086b5
 8008678:	080086b5 	.word	0x080086b5
 800867c:	080086b5 	.word	0x080086b5
 8008680:	080086b5 	.word	0x080086b5
 8008684:	080086b5 	.word	0x080086b5
 8008688:	080086b5 	.word	0x080086b5
 800868c:	08008691 	.word	0x08008691
    {
          
      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8008690:	693b      	ldr	r3, [r7, #16]
 8008692:	2b06      	cmp	r3, #6
 8008694:	d913      	bls.n	80086be <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8008696:	2301      	movs	r3, #1
 8008698:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800869a:	e010      	b.n	80086be <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 800869c:	693b      	ldr	r3, [r7, #16]
 800869e:	2b07      	cmp	r3, #7
 80086a0:	d90f      	bls.n	80086c2 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 80086a2:	2301      	movs	r3, #1
 80086a4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80086a6:	e00c      	b.n	80086c2 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80086a8:	693b      	ldr	r3, [r7, #16]
 80086aa:	2b0f      	cmp	r3, #15
 80086ac:	d90b      	bls.n	80086c6 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 80086ae:	2301      	movs	r3, #1
 80086b0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80086b2:	e008      	b.n	80086c6 <HAL_CRCEx_Polynomial_Set+0xea>
 
      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80086b4:	2301      	movs	r3, #1
 80086b6:	75fb      	strb	r3, [r7, #23]
        break;
 80086b8:	e006      	b.n	80086c8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80086ba:	bf00      	nop
 80086bc:	e004      	b.n	80086c8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80086be:	bf00      	nop
 80086c0:	e002      	b.n	80086c8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80086c2:	bf00      	nop
 80086c4:	e000      	b.n	80086c8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80086c6:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 80086c8:	7dfb      	ldrb	r3, [r7, #23]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d10d      	bne.n	80086ea <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	68ba      	ldr	r2, [r7, #8]
 80086d4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	689b      	ldr	r3, [r3, #8]
 80086dc:	f023 0118 	bic.w	r1, r3, #24
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	687a      	ldr	r2, [r7, #4]
 80086e6:	430a      	orrs	r2, r1
 80086e8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80086ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	371c      	adds	r7, #28
 80086f0:	46bd      	mov	sp, r7
 80086f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f6:	4770      	bx	lr

080086f8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b082      	sub	sp, #8
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d101      	bne.n	800870a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8008706:	2301      	movs	r3, #1
 8008708:	e04f      	b.n	80087aa <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8008710:	b2db      	uxtb	r3, r3
 8008712:	2b00      	cmp	r3, #0
 8008714:	d106      	bne.n	8008724 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2200      	movs	r2, #0
 800871a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f7f8 fabe 	bl	8000ca0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2202      	movs	r2, #2
 8008728:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	681a      	ldr	r2, [r3, #0]
 8008732:	4b20      	ldr	r3, [pc, #128]	; (80087b4 <HAL_DMA2D_Init+0xbc>)
 8008734:	4013      	ands	r3, r2
 8008736:	687a      	ldr	r2, [r7, #4]
 8008738:	6851      	ldr	r1, [r2, #4]
 800873a:	687a      	ldr	r2, [r7, #4]
 800873c:	69d2      	ldr	r2, [r2, #28]
 800873e:	4311      	orrs	r1, r2
 8008740:	687a      	ldr	r2, [r7, #4]
 8008742:	6812      	ldr	r2, [r2, #0]
 8008744:	430b      	orrs	r3, r1
 8008746:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800874e:	4b1a      	ldr	r3, [pc, #104]	; (80087b8 <HAL_DMA2D_Init+0xc0>)
 8008750:	4013      	ands	r3, r2
 8008752:	687a      	ldr	r2, [r7, #4]
 8008754:	6891      	ldr	r1, [r2, #8]
 8008756:	687a      	ldr	r2, [r7, #4]
 8008758:	6992      	ldr	r2, [r2, #24]
 800875a:	4311      	orrs	r1, r2
 800875c:	687a      	ldr	r2, [r7, #4]
 800875e:	6812      	ldr	r2, [r2, #0]
 8008760:	430b      	orrs	r3, r1
 8008762:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800876a:	4b14      	ldr	r3, [pc, #80]	; (80087bc <HAL_DMA2D_Init+0xc4>)
 800876c:	4013      	ands	r3, r2
 800876e:	687a      	ldr	r2, [r7, #4]
 8008770:	68d1      	ldr	r1, [r2, #12]
 8008772:	687a      	ldr	r2, [r7, #4]
 8008774:	6812      	ldr	r2, [r2, #0]
 8008776:	430b      	orrs	r3, r1
 8008778:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008780:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	691b      	ldr	r3, [r3, #16]
 8008788:	051a      	lsls	r2, r3, #20
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	695b      	ldr	r3, [r3, #20]
 800878e:	055b      	lsls	r3, r3, #21
 8008790:	431a      	orrs	r2, r3
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	430a      	orrs	r2, r1
 8008798:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	2200      	movs	r2, #0
 800879e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2201      	movs	r2, #1
 80087a4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 80087a8:	2300      	movs	r3, #0
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	3708      	adds	r7, #8
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}
 80087b2:	bf00      	nop
 80087b4:	fff8ffbf 	.word	0xfff8ffbf
 80087b8:	fffffef8 	.word	0xfffffef8
 80087bc:	ffff0000 	.word	0xffff0000

080087c0 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b084      	sub	sp, #16
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	685b      	ldr	r3, [r3, #4]
 80087ce:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	f003 0301 	and.w	r3, r3, #1
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d026      	beq.n	8008830 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80087e2:	68bb      	ldr	r3, [r7, #8]
 80087e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d021      	beq.n	8008830 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	681a      	ldr	r2, [r3, #0]
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80087fa:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008800:	f043 0201 	orr.w	r2, r3, #1
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	2201      	movs	r2, #1
 800880e:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2204      	movs	r2, #4
 8008814:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2200      	movs	r2, #0
 800881c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008824:	2b00      	cmp	r3, #0
 8008826:	d003      	beq.n	8008830 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	f003 0320 	and.w	r3, r3, #32
 8008836:	2b00      	cmp	r3, #0
 8008838:	d026      	beq.n	8008888 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008840:	2b00      	cmp	r3, #0
 8008842:	d021      	beq.n	8008888 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	681a      	ldr	r2, [r3, #0]
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008852:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	2220      	movs	r2, #32
 800885a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008860:	f043 0202 	orr.w	r2, r3, #2
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2204      	movs	r2, #4
 800886c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2200      	movs	r2, #0
 8008874:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800887c:	2b00      	cmp	r3, #0
 800887e:	d003      	beq.n	8008888 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	f003 0308 	and.w	r3, r3, #8
 800888e:	2b00      	cmp	r3, #0
 8008890:	d026      	beq.n	80088e0 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8008892:	68bb      	ldr	r3, [r7, #8]
 8008894:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008898:	2b00      	cmp	r3, #0
 800889a:	d021      	beq.n	80088e0 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	681a      	ldr	r2, [r3, #0]
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80088aa:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	2208      	movs	r2, #8
 80088b2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088b8:	f043 0204 	orr.w	r2, r3, #4
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2204      	movs	r2, #4
 80088c4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2200      	movs	r2, #0
 80088cc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d003      	beq.n	80088e0 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	f003 0304 	and.w	r3, r3, #4
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d013      	beq.n	8008912 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d00e      	beq.n	8008912 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	681a      	ldr	r2, [r3, #0]
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008902:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	2204      	movs	r2, #4
 800890a:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	f000 f853 	bl	80089b8 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	f003 0302 	and.w	r3, r3, #2
 8008918:	2b00      	cmp	r3, #0
 800891a:	d024      	beq.n	8008966 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008922:	2b00      	cmp	r3, #0
 8008924:	d01f      	beq.n	8008966 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	681a      	ldr	r2, [r3, #0]
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008934:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	2202      	movs	r2, #2
 800893c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2201      	movs	r2, #1
 800894a:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2200      	movs	r2, #0
 8008952:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferCpltCallback != NULL)
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6a1b      	ldr	r3, [r3, #32]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d003      	beq.n	8008966 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6a1b      	ldr	r3, [r3, #32]
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	f003 0310 	and.w	r3, r3, #16
 800896c:	2b00      	cmp	r3, #0
 800896e:	d01f      	beq.n	80089b0 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008976:	2b00      	cmp	r3, #0
 8008978:	d01a      	beq.n	80089b0 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	681a      	ldr	r2, [r3, #0]
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008988:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	2210      	movs	r2, #16
 8008990:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2201      	movs	r2, #1
 800899e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2200      	movs	r2, #0
 80089a6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f000 f80e 	bl	80089cc <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80089b0:	bf00      	nop
 80089b2:	3710      	adds	r7, #16
 80089b4:	46bd      	mov	sp, r7
 80089b6:	bd80      	pop	{r7, pc}

080089b8 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80089b8:	b480      	push	{r7}
 80089ba:	b083      	sub	sp, #12
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80089c0:	bf00      	nop
 80089c2:	370c      	adds	r7, #12
 80089c4:	46bd      	mov	sp, r7
 80089c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ca:	4770      	bx	lr

080089cc <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80089cc:	b480      	push	{r7}
 80089ce:	b083      	sub	sp, #12
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80089d4:	bf00      	nop
 80089d6:	370c      	adds	r7, #12
 80089d8:	46bd      	mov	sp, r7
 80089da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089de:	4770      	bx	lr

080089e0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80089e0:	b480      	push	{r7}
 80089e2:	b087      	sub	sp, #28
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
 80089e8:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	685b      	ldr	r3, [r3, #4]
 80089ee:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80089fc:	2b01      	cmp	r3, #1
 80089fe:	d101      	bne.n	8008a04 <HAL_DMA2D_ConfigLayer+0x24>
 8008a00:	2302      	movs	r3, #2
 8008a02:	e092      	b.n	8008b2a <HAL_DMA2D_ConfigLayer+0x14a>
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2201      	movs	r2, #1
 8008a08:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2202      	movs	r2, #2
 8008a10:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8008a14:	683a      	ldr	r2, [r7, #0]
 8008a16:	4613      	mov	r3, r2
 8008a18:	00db      	lsls	r3, r3, #3
 8008a1a:	1a9b      	subs	r3, r3, r2
 8008a1c:	009b      	lsls	r3, r3, #2
 8008a1e:	3328      	adds	r3, #40	; 0x28
 8008a20:	687a      	ldr	r2, [r7, #4]
 8008a22:	4413      	add	r3, r2
 8008a24:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	685a      	ldr	r2, [r3, #4]
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	689b      	ldr	r3, [r3, #8]
 8008a2e:	041b      	lsls	r3, r3, #16
 8008a30:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	691b      	ldr	r3, [r3, #16]
 8008a36:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8008a38:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	695b      	ldr	r3, [r3, #20]
 8008a3e:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8008a40:	4313      	orrs	r3, r2
 8008a42:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8008a44:	4b3c      	ldr	r3, [pc, #240]	; (8008b38 <HAL_DMA2D_ConfigLayer+0x158>)
 8008a46:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	685b      	ldr	r3, [r3, #4]
 8008a4c:	2b0a      	cmp	r3, #10
 8008a4e:	d003      	beq.n	8008a58 <HAL_DMA2D_ConfigLayer+0x78>
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	685b      	ldr	r3, [r3, #4]
 8008a54:	2b09      	cmp	r3, #9
 8008a56:	d107      	bne.n	8008a68 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	68db      	ldr	r3, [r3, #12]
 8008a5c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8008a60:	693a      	ldr	r2, [r7, #16]
 8008a62:	4313      	orrs	r3, r2
 8008a64:	613b      	str	r3, [r7, #16]
 8008a66:	e005      	b.n	8008a74 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	68db      	ldr	r3, [r3, #12]
 8008a6c:	061b      	lsls	r3, r3, #24
 8008a6e:	693a      	ldr	r2, [r7, #16]
 8008a70:	4313      	orrs	r3, r2
 8008a72:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d120      	bne.n	8008abc <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008a80:	697b      	ldr	r3, [r7, #20]
 8008a82:	43db      	mvns	r3, r3
 8008a84:	ea02 0103 	and.w	r1, r2, r3
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	693a      	ldr	r2, [r7, #16]
 8008a8e:	430a      	orrs	r2, r1
 8008a90:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	68fa      	ldr	r2, [r7, #12]
 8008a98:	6812      	ldr	r2, [r2, #0]
 8008a9a:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	685b      	ldr	r3, [r3, #4]
 8008aa0:	2b0a      	cmp	r3, #10
 8008aa2:	d003      	beq.n	8008aac <HAL_DMA2D_ConfigLayer+0xcc>
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	685b      	ldr	r3, [r3, #4]
 8008aa8:	2b09      	cmp	r3, #9
 8008aaa:	d135      	bne.n	8008b18 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	68da      	ldr	r2, [r3, #12]
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8008ab8:	629a      	str	r2, [r3, #40]	; 0x28
 8008aba:	e02d      	b.n	8008b18 <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	685b      	ldr	r3, [r3, #4]
 8008ac0:	2b0b      	cmp	r3, #11
 8008ac2:	d109      	bne.n	8008ad8 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	699b      	ldr	r3, [r3, #24]
 8008ac8:	049b      	lsls	r3, r3, #18
 8008aca:	693a      	ldr	r2, [r7, #16]
 8008acc:	4313      	orrs	r3, r2
 8008ace:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8008ad0:	697b      	ldr	r3, [r7, #20]
 8008ad2:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8008ad6:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	69da      	ldr	r2, [r3, #28]
 8008ade:	697b      	ldr	r3, [r7, #20]
 8008ae0:	43db      	mvns	r3, r3
 8008ae2:	ea02 0103 	and.w	r1, r2, r3
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	693a      	ldr	r2, [r7, #16]
 8008aec:	430a      	orrs	r2, r1
 8008aee:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	68fa      	ldr	r2, [r7, #12]
 8008af6:	6812      	ldr	r2, [r2, #0]
 8008af8:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	685b      	ldr	r3, [r3, #4]
 8008afe:	2b0a      	cmp	r3, #10
 8008b00:	d003      	beq.n	8008b0a <HAL_DMA2D_ConfigLayer+0x12a>
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	685b      	ldr	r3, [r3, #4]
 8008b06:	2b09      	cmp	r3, #9
 8008b08:	d106      	bne.n	8008b18 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	68da      	ldr	r2, [r3, #12]
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8008b16:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2201      	movs	r2, #1
 8008b1c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2200      	movs	r2, #0
 8008b24:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8008b28:	2300      	movs	r3, #0
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	371c      	adds	r7, #28
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b34:	4770      	bx	lr
 8008b36:	bf00      	nop
 8008b38:	ff33000f 	.word	0xff33000f

08008b3c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	b089      	sub	sp, #36	; 0x24
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
 8008b44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008b46:	2300      	movs	r3, #0
 8008b48:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008b4a:	4b89      	ldr	r3, [pc, #548]	; (8008d70 <HAL_GPIO_Init+0x234>)
 8008b4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008b4e:	e194      	b.n	8008e7a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	681a      	ldr	r2, [r3, #0]
 8008b54:	2101      	movs	r1, #1
 8008b56:	69fb      	ldr	r3, [r7, #28]
 8008b58:	fa01 f303 	lsl.w	r3, r1, r3
 8008b5c:	4013      	ands	r3, r2
 8008b5e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008b60:	693b      	ldr	r3, [r7, #16]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	f000 8186 	beq.w	8008e74 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	685b      	ldr	r3, [r3, #4]
 8008b6c:	f003 0303 	and.w	r3, r3, #3
 8008b70:	2b01      	cmp	r3, #1
 8008b72:	d005      	beq.n	8008b80 <HAL_GPIO_Init+0x44>
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	685b      	ldr	r3, [r3, #4]
 8008b78:	f003 0303 	and.w	r3, r3, #3
 8008b7c:	2b02      	cmp	r3, #2
 8008b7e:	d130      	bne.n	8008be2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	689b      	ldr	r3, [r3, #8]
 8008b84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008b86:	69fb      	ldr	r3, [r7, #28]
 8008b88:	005b      	lsls	r3, r3, #1
 8008b8a:	2203      	movs	r2, #3
 8008b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8008b90:	43db      	mvns	r3, r3
 8008b92:	69ba      	ldr	r2, [r7, #24]
 8008b94:	4013      	ands	r3, r2
 8008b96:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	68da      	ldr	r2, [r3, #12]
 8008b9c:	69fb      	ldr	r3, [r7, #28]
 8008b9e:	005b      	lsls	r3, r3, #1
 8008ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ba4:	69ba      	ldr	r2, [r7, #24]
 8008ba6:	4313      	orrs	r3, r2
 8008ba8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	69ba      	ldr	r2, [r7, #24]
 8008bae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	685b      	ldr	r3, [r3, #4]
 8008bb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008bb6:	2201      	movs	r2, #1
 8008bb8:	69fb      	ldr	r3, [r7, #28]
 8008bba:	fa02 f303 	lsl.w	r3, r2, r3
 8008bbe:	43db      	mvns	r3, r3
 8008bc0:	69ba      	ldr	r2, [r7, #24]
 8008bc2:	4013      	ands	r3, r2
 8008bc4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	685b      	ldr	r3, [r3, #4]
 8008bca:	091b      	lsrs	r3, r3, #4
 8008bcc:	f003 0201 	and.w	r2, r3, #1
 8008bd0:	69fb      	ldr	r3, [r7, #28]
 8008bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8008bd6:	69ba      	ldr	r2, [r7, #24]
 8008bd8:	4313      	orrs	r3, r2
 8008bda:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	69ba      	ldr	r2, [r7, #24]
 8008be0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	685b      	ldr	r3, [r3, #4]
 8008be6:	f003 0303 	and.w	r3, r3, #3
 8008bea:	2b03      	cmp	r3, #3
 8008bec:	d017      	beq.n	8008c1e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	68db      	ldr	r3, [r3, #12]
 8008bf2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008bf4:	69fb      	ldr	r3, [r7, #28]
 8008bf6:	005b      	lsls	r3, r3, #1
 8008bf8:	2203      	movs	r2, #3
 8008bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8008bfe:	43db      	mvns	r3, r3
 8008c00:	69ba      	ldr	r2, [r7, #24]
 8008c02:	4013      	ands	r3, r2
 8008c04:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	689a      	ldr	r2, [r3, #8]
 8008c0a:	69fb      	ldr	r3, [r7, #28]
 8008c0c:	005b      	lsls	r3, r3, #1
 8008c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8008c12:	69ba      	ldr	r2, [r7, #24]
 8008c14:	4313      	orrs	r3, r2
 8008c16:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	69ba      	ldr	r2, [r7, #24]
 8008c1c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	685b      	ldr	r3, [r3, #4]
 8008c22:	f003 0303 	and.w	r3, r3, #3
 8008c26:	2b02      	cmp	r3, #2
 8008c28:	d123      	bne.n	8008c72 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008c2a:	69fb      	ldr	r3, [r7, #28]
 8008c2c:	08da      	lsrs	r2, r3, #3
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	3208      	adds	r2, #8
 8008c32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008c38:	69fb      	ldr	r3, [r7, #28]
 8008c3a:	f003 0307 	and.w	r3, r3, #7
 8008c3e:	009b      	lsls	r3, r3, #2
 8008c40:	220f      	movs	r2, #15
 8008c42:	fa02 f303 	lsl.w	r3, r2, r3
 8008c46:	43db      	mvns	r3, r3
 8008c48:	69ba      	ldr	r2, [r7, #24]
 8008c4a:	4013      	ands	r3, r2
 8008c4c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	691a      	ldr	r2, [r3, #16]
 8008c52:	69fb      	ldr	r3, [r7, #28]
 8008c54:	f003 0307 	and.w	r3, r3, #7
 8008c58:	009b      	lsls	r3, r3, #2
 8008c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8008c5e:	69ba      	ldr	r2, [r7, #24]
 8008c60:	4313      	orrs	r3, r2
 8008c62:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008c64:	69fb      	ldr	r3, [r7, #28]
 8008c66:	08da      	lsrs	r2, r3, #3
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	3208      	adds	r2, #8
 8008c6c:	69b9      	ldr	r1, [r7, #24]
 8008c6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008c78:	69fb      	ldr	r3, [r7, #28]
 8008c7a:	005b      	lsls	r3, r3, #1
 8008c7c:	2203      	movs	r2, #3
 8008c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8008c82:	43db      	mvns	r3, r3
 8008c84:	69ba      	ldr	r2, [r7, #24]
 8008c86:	4013      	ands	r3, r2
 8008c88:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	685b      	ldr	r3, [r3, #4]
 8008c8e:	f003 0203 	and.w	r2, r3, #3
 8008c92:	69fb      	ldr	r3, [r7, #28]
 8008c94:	005b      	lsls	r3, r3, #1
 8008c96:	fa02 f303 	lsl.w	r3, r2, r3
 8008c9a:	69ba      	ldr	r2, [r7, #24]
 8008c9c:	4313      	orrs	r3, r2
 8008c9e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	69ba      	ldr	r2, [r7, #24]
 8008ca4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	685b      	ldr	r3, [r3, #4]
 8008caa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	f000 80e0 	beq.w	8008e74 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008cb4:	4b2f      	ldr	r3, [pc, #188]	; (8008d74 <HAL_GPIO_Init+0x238>)
 8008cb6:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8008cba:	4a2e      	ldr	r2, [pc, #184]	; (8008d74 <HAL_GPIO_Init+0x238>)
 8008cbc:	f043 0302 	orr.w	r3, r3, #2
 8008cc0:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8008cc4:	4b2b      	ldr	r3, [pc, #172]	; (8008d74 <HAL_GPIO_Init+0x238>)
 8008cc6:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8008cca:	f003 0302 	and.w	r3, r3, #2
 8008cce:	60fb      	str	r3, [r7, #12]
 8008cd0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008cd2:	4a29      	ldr	r2, [pc, #164]	; (8008d78 <HAL_GPIO_Init+0x23c>)
 8008cd4:	69fb      	ldr	r3, [r7, #28]
 8008cd6:	089b      	lsrs	r3, r3, #2
 8008cd8:	3302      	adds	r3, #2
 8008cda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008cde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008ce0:	69fb      	ldr	r3, [r7, #28]
 8008ce2:	f003 0303 	and.w	r3, r3, #3
 8008ce6:	009b      	lsls	r3, r3, #2
 8008ce8:	220f      	movs	r2, #15
 8008cea:	fa02 f303 	lsl.w	r3, r2, r3
 8008cee:	43db      	mvns	r3, r3
 8008cf0:	69ba      	ldr	r2, [r7, #24]
 8008cf2:	4013      	ands	r3, r2
 8008cf4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	4a20      	ldr	r2, [pc, #128]	; (8008d7c <HAL_GPIO_Init+0x240>)
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	d052      	beq.n	8008da4 <HAL_GPIO_Init+0x268>
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	4a1f      	ldr	r2, [pc, #124]	; (8008d80 <HAL_GPIO_Init+0x244>)
 8008d02:	4293      	cmp	r3, r2
 8008d04:	d031      	beq.n	8008d6a <HAL_GPIO_Init+0x22e>
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	4a1e      	ldr	r2, [pc, #120]	; (8008d84 <HAL_GPIO_Init+0x248>)
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	d02b      	beq.n	8008d66 <HAL_GPIO_Init+0x22a>
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	4a1d      	ldr	r2, [pc, #116]	; (8008d88 <HAL_GPIO_Init+0x24c>)
 8008d12:	4293      	cmp	r3, r2
 8008d14:	d025      	beq.n	8008d62 <HAL_GPIO_Init+0x226>
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	4a1c      	ldr	r2, [pc, #112]	; (8008d8c <HAL_GPIO_Init+0x250>)
 8008d1a:	4293      	cmp	r3, r2
 8008d1c:	d01f      	beq.n	8008d5e <HAL_GPIO_Init+0x222>
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	4a1b      	ldr	r2, [pc, #108]	; (8008d90 <HAL_GPIO_Init+0x254>)
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d019      	beq.n	8008d5a <HAL_GPIO_Init+0x21e>
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	4a1a      	ldr	r2, [pc, #104]	; (8008d94 <HAL_GPIO_Init+0x258>)
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	d013      	beq.n	8008d56 <HAL_GPIO_Init+0x21a>
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	4a19      	ldr	r2, [pc, #100]	; (8008d98 <HAL_GPIO_Init+0x25c>)
 8008d32:	4293      	cmp	r3, r2
 8008d34:	d00d      	beq.n	8008d52 <HAL_GPIO_Init+0x216>
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	4a18      	ldr	r2, [pc, #96]	; (8008d9c <HAL_GPIO_Init+0x260>)
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	d007      	beq.n	8008d4e <HAL_GPIO_Init+0x212>
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	4a17      	ldr	r2, [pc, #92]	; (8008da0 <HAL_GPIO_Init+0x264>)
 8008d42:	4293      	cmp	r3, r2
 8008d44:	d101      	bne.n	8008d4a <HAL_GPIO_Init+0x20e>
 8008d46:	2309      	movs	r3, #9
 8008d48:	e02d      	b.n	8008da6 <HAL_GPIO_Init+0x26a>
 8008d4a:	230a      	movs	r3, #10
 8008d4c:	e02b      	b.n	8008da6 <HAL_GPIO_Init+0x26a>
 8008d4e:	2308      	movs	r3, #8
 8008d50:	e029      	b.n	8008da6 <HAL_GPIO_Init+0x26a>
 8008d52:	2307      	movs	r3, #7
 8008d54:	e027      	b.n	8008da6 <HAL_GPIO_Init+0x26a>
 8008d56:	2306      	movs	r3, #6
 8008d58:	e025      	b.n	8008da6 <HAL_GPIO_Init+0x26a>
 8008d5a:	2305      	movs	r3, #5
 8008d5c:	e023      	b.n	8008da6 <HAL_GPIO_Init+0x26a>
 8008d5e:	2304      	movs	r3, #4
 8008d60:	e021      	b.n	8008da6 <HAL_GPIO_Init+0x26a>
 8008d62:	2303      	movs	r3, #3
 8008d64:	e01f      	b.n	8008da6 <HAL_GPIO_Init+0x26a>
 8008d66:	2302      	movs	r3, #2
 8008d68:	e01d      	b.n	8008da6 <HAL_GPIO_Init+0x26a>
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	e01b      	b.n	8008da6 <HAL_GPIO_Init+0x26a>
 8008d6e:	bf00      	nop
 8008d70:	58000080 	.word	0x58000080
 8008d74:	58024400 	.word	0x58024400
 8008d78:	58000400 	.word	0x58000400
 8008d7c:	58020000 	.word	0x58020000
 8008d80:	58020400 	.word	0x58020400
 8008d84:	58020800 	.word	0x58020800
 8008d88:	58020c00 	.word	0x58020c00
 8008d8c:	58021000 	.word	0x58021000
 8008d90:	58021400 	.word	0x58021400
 8008d94:	58021800 	.word	0x58021800
 8008d98:	58021c00 	.word	0x58021c00
 8008d9c:	58022000 	.word	0x58022000
 8008da0:	58022400 	.word	0x58022400
 8008da4:	2300      	movs	r3, #0
 8008da6:	69fa      	ldr	r2, [r7, #28]
 8008da8:	f002 0203 	and.w	r2, r2, #3
 8008dac:	0092      	lsls	r2, r2, #2
 8008dae:	4093      	lsls	r3, r2
 8008db0:	69ba      	ldr	r2, [r7, #24]
 8008db2:	4313      	orrs	r3, r2
 8008db4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008db6:	4938      	ldr	r1, [pc, #224]	; (8008e98 <HAL_GPIO_Init+0x35c>)
 8008db8:	69fb      	ldr	r3, [r7, #28]
 8008dba:	089b      	lsrs	r3, r3, #2
 8008dbc:	3302      	adds	r3, #2
 8008dbe:	69ba      	ldr	r2, [r7, #24]
 8008dc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008dc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008dcc:	693b      	ldr	r3, [r7, #16]
 8008dce:	43db      	mvns	r3, r3
 8008dd0:	69ba      	ldr	r2, [r7, #24]
 8008dd2:	4013      	ands	r3, r2
 8008dd4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	685b      	ldr	r3, [r3, #4]
 8008dda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d003      	beq.n	8008dea <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8008de2:	69ba      	ldr	r2, [r7, #24]
 8008de4:	693b      	ldr	r3, [r7, #16]
 8008de6:	4313      	orrs	r3, r2
 8008de8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008dea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008dee:	69bb      	ldr	r3, [r7, #24]
 8008df0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008df2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008df6:	685b      	ldr	r3, [r3, #4]
 8008df8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008dfa:	693b      	ldr	r3, [r7, #16]
 8008dfc:	43db      	mvns	r3, r3
 8008dfe:	69ba      	ldr	r2, [r7, #24]
 8008e00:	4013      	ands	r3, r2
 8008e02:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	685b      	ldr	r3, [r3, #4]
 8008e08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d003      	beq.n	8008e18 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008e10:	69ba      	ldr	r2, [r7, #24]
 8008e12:	693b      	ldr	r3, [r7, #16]
 8008e14:	4313      	orrs	r3, r2
 8008e16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008e18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008e1c:	69bb      	ldr	r3, [r7, #24]
 8008e1e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008e20:	697b      	ldr	r3, [r7, #20]
 8008e22:	685b      	ldr	r3, [r3, #4]
 8008e24:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008e26:	693b      	ldr	r3, [r7, #16]
 8008e28:	43db      	mvns	r3, r3
 8008e2a:	69ba      	ldr	r2, [r7, #24]
 8008e2c:	4013      	ands	r3, r2
 8008e2e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	685b      	ldr	r3, [r3, #4]
 8008e34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d003      	beq.n	8008e44 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8008e3c:	69ba      	ldr	r2, [r7, #24]
 8008e3e:	693b      	ldr	r3, [r7, #16]
 8008e40:	4313      	orrs	r3, r2
 8008e42:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008e44:	697b      	ldr	r3, [r7, #20]
 8008e46:	69ba      	ldr	r2, [r7, #24]
 8008e48:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008e50:	693b      	ldr	r3, [r7, #16]
 8008e52:	43db      	mvns	r3, r3
 8008e54:	69ba      	ldr	r2, [r7, #24]
 8008e56:	4013      	ands	r3, r2
 8008e58:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	685b      	ldr	r3, [r3, #4]
 8008e5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d003      	beq.n	8008e6e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8008e66:	69ba      	ldr	r2, [r7, #24]
 8008e68:	693b      	ldr	r3, [r7, #16]
 8008e6a:	4313      	orrs	r3, r2
 8008e6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008e6e:	697b      	ldr	r3, [r7, #20]
 8008e70:	69ba      	ldr	r2, [r7, #24]
 8008e72:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008e74:	69fb      	ldr	r3, [r7, #28]
 8008e76:	3301      	adds	r3, #1
 8008e78:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	681a      	ldr	r2, [r3, #0]
 8008e7e:	69fb      	ldr	r3, [r7, #28]
 8008e80:	fa22 f303 	lsr.w	r3, r2, r3
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	f47f ae63 	bne.w	8008b50 <HAL_GPIO_Init+0x14>
  }
}
 8008e8a:	bf00      	nop
 8008e8c:	bf00      	nop
 8008e8e:	3724      	adds	r7, #36	; 0x24
 8008e90:	46bd      	mov	sp, r7
 8008e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e96:	4770      	bx	lr
 8008e98:	58000400 	.word	0x58000400

08008e9c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008e9c:	b480      	push	{r7}
 8008e9e:	b087      	sub	sp, #28
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
 8008ea4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008eaa:	4b75      	ldr	r3, [pc, #468]	; (8009080 <HAL_GPIO_DeInit+0x1e4>)
 8008eac:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8008eae:	e0d9      	b.n	8009064 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8008eb0:	2201      	movs	r2, #1
 8008eb2:	697b      	ldr	r3, [r7, #20]
 8008eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8008eb8:	683a      	ldr	r2, [r7, #0]
 8008eba:	4013      	ands	r3, r2
 8008ebc:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	f000 80cc 	beq.w	800905e <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8008ec6:	4a6f      	ldr	r2, [pc, #444]	; (8009084 <HAL_GPIO_DeInit+0x1e8>)
 8008ec8:	697b      	ldr	r3, [r7, #20]
 8008eca:	089b      	lsrs	r3, r3, #2
 8008ecc:	3302      	adds	r3, #2
 8008ece:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ed2:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8008ed4:	697b      	ldr	r3, [r7, #20]
 8008ed6:	f003 0303 	and.w	r3, r3, #3
 8008eda:	009b      	lsls	r3, r3, #2
 8008edc:	220f      	movs	r2, #15
 8008ede:	fa02 f303 	lsl.w	r3, r2, r3
 8008ee2:	68ba      	ldr	r2, [r7, #8]
 8008ee4:	4013      	ands	r3, r2
 8008ee6:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	4a67      	ldr	r2, [pc, #412]	; (8009088 <HAL_GPIO_DeInit+0x1ec>)
 8008eec:	4293      	cmp	r3, r2
 8008eee:	d037      	beq.n	8008f60 <HAL_GPIO_DeInit+0xc4>
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	4a66      	ldr	r2, [pc, #408]	; (800908c <HAL_GPIO_DeInit+0x1f0>)
 8008ef4:	4293      	cmp	r3, r2
 8008ef6:	d031      	beq.n	8008f5c <HAL_GPIO_DeInit+0xc0>
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	4a65      	ldr	r2, [pc, #404]	; (8009090 <HAL_GPIO_DeInit+0x1f4>)
 8008efc:	4293      	cmp	r3, r2
 8008efe:	d02b      	beq.n	8008f58 <HAL_GPIO_DeInit+0xbc>
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	4a64      	ldr	r2, [pc, #400]	; (8009094 <HAL_GPIO_DeInit+0x1f8>)
 8008f04:	4293      	cmp	r3, r2
 8008f06:	d025      	beq.n	8008f54 <HAL_GPIO_DeInit+0xb8>
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	4a63      	ldr	r2, [pc, #396]	; (8009098 <HAL_GPIO_DeInit+0x1fc>)
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	d01f      	beq.n	8008f50 <HAL_GPIO_DeInit+0xb4>
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	4a62      	ldr	r2, [pc, #392]	; (800909c <HAL_GPIO_DeInit+0x200>)
 8008f14:	4293      	cmp	r3, r2
 8008f16:	d019      	beq.n	8008f4c <HAL_GPIO_DeInit+0xb0>
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	4a61      	ldr	r2, [pc, #388]	; (80090a0 <HAL_GPIO_DeInit+0x204>)
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	d013      	beq.n	8008f48 <HAL_GPIO_DeInit+0xac>
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	4a60      	ldr	r2, [pc, #384]	; (80090a4 <HAL_GPIO_DeInit+0x208>)
 8008f24:	4293      	cmp	r3, r2
 8008f26:	d00d      	beq.n	8008f44 <HAL_GPIO_DeInit+0xa8>
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	4a5f      	ldr	r2, [pc, #380]	; (80090a8 <HAL_GPIO_DeInit+0x20c>)
 8008f2c:	4293      	cmp	r3, r2
 8008f2e:	d007      	beq.n	8008f40 <HAL_GPIO_DeInit+0xa4>
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	4a5e      	ldr	r2, [pc, #376]	; (80090ac <HAL_GPIO_DeInit+0x210>)
 8008f34:	4293      	cmp	r3, r2
 8008f36:	d101      	bne.n	8008f3c <HAL_GPIO_DeInit+0xa0>
 8008f38:	2309      	movs	r3, #9
 8008f3a:	e012      	b.n	8008f62 <HAL_GPIO_DeInit+0xc6>
 8008f3c:	230a      	movs	r3, #10
 8008f3e:	e010      	b.n	8008f62 <HAL_GPIO_DeInit+0xc6>
 8008f40:	2308      	movs	r3, #8
 8008f42:	e00e      	b.n	8008f62 <HAL_GPIO_DeInit+0xc6>
 8008f44:	2307      	movs	r3, #7
 8008f46:	e00c      	b.n	8008f62 <HAL_GPIO_DeInit+0xc6>
 8008f48:	2306      	movs	r3, #6
 8008f4a:	e00a      	b.n	8008f62 <HAL_GPIO_DeInit+0xc6>
 8008f4c:	2305      	movs	r3, #5
 8008f4e:	e008      	b.n	8008f62 <HAL_GPIO_DeInit+0xc6>
 8008f50:	2304      	movs	r3, #4
 8008f52:	e006      	b.n	8008f62 <HAL_GPIO_DeInit+0xc6>
 8008f54:	2303      	movs	r3, #3
 8008f56:	e004      	b.n	8008f62 <HAL_GPIO_DeInit+0xc6>
 8008f58:	2302      	movs	r3, #2
 8008f5a:	e002      	b.n	8008f62 <HAL_GPIO_DeInit+0xc6>
 8008f5c:	2301      	movs	r3, #1
 8008f5e:	e000      	b.n	8008f62 <HAL_GPIO_DeInit+0xc6>
 8008f60:	2300      	movs	r3, #0
 8008f62:	697a      	ldr	r2, [r7, #20]
 8008f64:	f002 0203 	and.w	r2, r2, #3
 8008f68:	0092      	lsls	r2, r2, #2
 8008f6a:	4093      	lsls	r3, r2
 8008f6c:	68ba      	ldr	r2, [r7, #8]
 8008f6e:	429a      	cmp	r2, r3
 8008f70:	d136      	bne.n	8008fe0 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8008f72:	693b      	ldr	r3, [r7, #16]
 8008f74:	681a      	ldr	r2, [r3, #0]
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	43db      	mvns	r3, r3
 8008f7a:	401a      	ands	r2, r3
 8008f7c:	693b      	ldr	r3, [r7, #16]
 8008f7e:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8008f80:	693b      	ldr	r3, [r7, #16]
 8008f82:	685a      	ldr	r2, [r3, #4]
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	43db      	mvns	r3, r3
 8008f88:	401a      	ands	r2, r3
 8008f8a:	693b      	ldr	r3, [r7, #16]
 8008f8c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8008f8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f92:	685a      	ldr	r2, [r3, #4]
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	43db      	mvns	r3, r3
 8008f98:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008f9c:	4013      	ands	r3, r2
 8008f9e:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8008fa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008fa4:	681a      	ldr	r2, [r3, #0]
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	43db      	mvns	r3, r3
 8008faa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008fae:	4013      	ands	r3, r2
 8008fb0:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8008fb2:	697b      	ldr	r3, [r7, #20]
 8008fb4:	f003 0303 	and.w	r3, r3, #3
 8008fb8:	009b      	lsls	r3, r3, #2
 8008fba:	220f      	movs	r2, #15
 8008fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8008fc0:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8008fc2:	4a30      	ldr	r2, [pc, #192]	; (8009084 <HAL_GPIO_DeInit+0x1e8>)
 8008fc4:	697b      	ldr	r3, [r7, #20]
 8008fc6:	089b      	lsrs	r3, r3, #2
 8008fc8:	3302      	adds	r3, #2
 8008fca:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008fce:	68bb      	ldr	r3, [r7, #8]
 8008fd0:	43da      	mvns	r2, r3
 8008fd2:	482c      	ldr	r0, [pc, #176]	; (8009084 <HAL_GPIO_DeInit+0x1e8>)
 8008fd4:	697b      	ldr	r3, [r7, #20]
 8008fd6:	089b      	lsrs	r3, r3, #2
 8008fd8:	400a      	ands	r2, r1
 8008fda:	3302      	adds	r3, #2
 8008fdc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681a      	ldr	r2, [r3, #0]
 8008fe4:	697b      	ldr	r3, [r7, #20]
 8008fe6:	005b      	lsls	r3, r3, #1
 8008fe8:	2103      	movs	r1, #3
 8008fea:	fa01 f303 	lsl.w	r3, r1, r3
 8008fee:	431a      	orrs	r2, r3
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8008ff4:	697b      	ldr	r3, [r7, #20]
 8008ff6:	08da      	lsrs	r2, r3, #3
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	3208      	adds	r2, #8
 8008ffc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009000:	697b      	ldr	r3, [r7, #20]
 8009002:	f003 0307 	and.w	r3, r3, #7
 8009006:	009b      	lsls	r3, r3, #2
 8009008:	220f      	movs	r2, #15
 800900a:	fa02 f303 	lsl.w	r3, r2, r3
 800900e:	43db      	mvns	r3, r3
 8009010:	697a      	ldr	r2, [r7, #20]
 8009012:	08d2      	lsrs	r2, r2, #3
 8009014:	4019      	ands	r1, r3
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	3208      	adds	r2, #8
 800901a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	68da      	ldr	r2, [r3, #12]
 8009022:	697b      	ldr	r3, [r7, #20]
 8009024:	005b      	lsls	r3, r3, #1
 8009026:	2103      	movs	r1, #3
 8009028:	fa01 f303 	lsl.w	r3, r1, r3
 800902c:	43db      	mvns	r3, r3
 800902e:	401a      	ands	r2, r3
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	685a      	ldr	r2, [r3, #4]
 8009038:	2101      	movs	r1, #1
 800903a:	697b      	ldr	r3, [r7, #20]
 800903c:	fa01 f303 	lsl.w	r3, r1, r3
 8009040:	43db      	mvns	r3, r3
 8009042:	401a      	ands	r2, r3
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	689a      	ldr	r2, [r3, #8]
 800904c:	697b      	ldr	r3, [r7, #20]
 800904e:	005b      	lsls	r3, r3, #1
 8009050:	2103      	movs	r1, #3
 8009052:	fa01 f303 	lsl.w	r3, r1, r3
 8009056:	43db      	mvns	r3, r3
 8009058:	401a      	ands	r2, r3
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	609a      	str	r2, [r3, #8]
    }

    position++;
 800905e:	697b      	ldr	r3, [r7, #20]
 8009060:	3301      	adds	r3, #1
 8009062:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8009064:	683a      	ldr	r2, [r7, #0]
 8009066:	697b      	ldr	r3, [r7, #20]
 8009068:	fa22 f303 	lsr.w	r3, r2, r3
 800906c:	2b00      	cmp	r3, #0
 800906e:	f47f af1f 	bne.w	8008eb0 <HAL_GPIO_DeInit+0x14>
  }
}
 8009072:	bf00      	nop
 8009074:	bf00      	nop
 8009076:	371c      	adds	r7, #28
 8009078:	46bd      	mov	sp, r7
 800907a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907e:	4770      	bx	lr
 8009080:	58000080 	.word	0x58000080
 8009084:	58000400 	.word	0x58000400
 8009088:	58020000 	.word	0x58020000
 800908c:	58020400 	.word	0x58020400
 8009090:	58020800 	.word	0x58020800
 8009094:	58020c00 	.word	0x58020c00
 8009098:	58021000 	.word	0x58021000
 800909c:	58021400 	.word	0x58021400
 80090a0:	58021800 	.word	0x58021800
 80090a4:	58021c00 	.word	0x58021c00
 80090a8:	58022000 	.word	0x58022000
 80090ac:	58022400 	.word	0x58022400

080090b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80090b0:	b480      	push	{r7}
 80090b2:	b083      	sub	sp, #12
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
 80090b8:	460b      	mov	r3, r1
 80090ba:	807b      	strh	r3, [r7, #2]
 80090bc:	4613      	mov	r3, r2
 80090be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80090c0:	787b      	ldrb	r3, [r7, #1]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d003      	beq.n	80090ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80090c6:	887a      	ldrh	r2, [r7, #2]
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80090cc:	e003      	b.n	80090d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80090ce:	887b      	ldrh	r3, [r7, #2]
 80090d0:	041a      	lsls	r2, r3, #16
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	619a      	str	r2, [r3, #24]
}
 80090d6:	bf00      	nop
 80090d8:	370c      	adds	r7, #12
 80090da:	46bd      	mov	sp, r7
 80090dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e0:	4770      	bx	lr

080090e2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80090e2:	b480      	push	{r7}
 80090e4:	b085      	sub	sp, #20
 80090e6:	af00      	add	r7, sp, #0
 80090e8:	6078      	str	r0, [r7, #4]
 80090ea:	460b      	mov	r3, r1
 80090ec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	695b      	ldr	r3, [r3, #20]
 80090f2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80090f4:	887a      	ldrh	r2, [r7, #2]
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	4013      	ands	r3, r2
 80090fa:	041a      	lsls	r2, r3, #16
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	43d9      	mvns	r1, r3
 8009100:	887b      	ldrh	r3, [r7, #2]
 8009102:	400b      	ands	r3, r1
 8009104:	431a      	orrs	r2, r3
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	619a      	str	r2, [r3, #24]
}
 800910a:	bf00      	nop
 800910c:	3714      	adds	r7, #20
 800910e:	46bd      	mov	sp, r7
 8009110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009114:	4770      	bx	lr

08009116 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009116:	b580      	push	{r7, lr}
 8009118:	b082      	sub	sp, #8
 800911a:	af00      	add	r7, sp, #0
 800911c:	4603      	mov	r3, r0
 800911e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8009120:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009124:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8009128:	88fb      	ldrh	r3, [r7, #6]
 800912a:	4013      	ands	r3, r2
 800912c:	2b00      	cmp	r3, #0
 800912e:	d008      	beq.n	8009142 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8009130:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009134:	88fb      	ldrh	r3, [r7, #6]
 8009136:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800913a:	88fb      	ldrh	r3, [r7, #6]
 800913c:	4618      	mov	r0, r3
 800913e:	f7f7 fcef 	bl	8000b20 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8009142:	bf00      	nop
 8009144:	3708      	adds	r7, #8
 8009146:	46bd      	mov	sp, r7
 8009148:	bd80      	pop	{r7, pc}
	...

0800914c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b082      	sub	sp, #8
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d101      	bne.n	800915e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800915a:	2301      	movs	r3, #1
 800915c:	e07f      	b.n	800925e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009164:	b2db      	uxtb	r3, r3
 8009166:	2b00      	cmp	r3, #0
 8009168:	d106      	bne.n	8009178 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2200      	movs	r2, #0
 800916e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	f7f7 fdbc 	bl	8000cf0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2224      	movs	r2, #36	; 0x24
 800917c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	681a      	ldr	r2, [r3, #0]
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f022 0201 	bic.w	r2, r2, #1
 800918e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	685a      	ldr	r2, [r3, #4]
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800919c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	689a      	ldr	r2, [r3, #8]
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80091ac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	68db      	ldr	r3, [r3, #12]
 80091b2:	2b01      	cmp	r3, #1
 80091b4:	d107      	bne.n	80091c6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	689a      	ldr	r2, [r3, #8]
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80091c2:	609a      	str	r2, [r3, #8]
 80091c4:	e006      	b.n	80091d4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	689a      	ldr	r2, [r3, #8]
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80091d2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	68db      	ldr	r3, [r3, #12]
 80091d8:	2b02      	cmp	r3, #2
 80091da:	d104      	bne.n	80091e6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80091e4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	6859      	ldr	r1, [r3, #4]
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681a      	ldr	r2, [r3, #0]
 80091f0:	4b1d      	ldr	r3, [pc, #116]	; (8009268 <HAL_I2C_Init+0x11c>)
 80091f2:	430b      	orrs	r3, r1
 80091f4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	68da      	ldr	r2, [r3, #12]
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009204:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	691a      	ldr	r2, [r3, #16]
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	695b      	ldr	r3, [r3, #20]
 800920e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	699b      	ldr	r3, [r3, #24]
 8009216:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	430a      	orrs	r2, r1
 800921e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	69d9      	ldr	r1, [r3, #28]
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	6a1a      	ldr	r2, [r3, #32]
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	430a      	orrs	r2, r1
 800922e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	681a      	ldr	r2, [r3, #0]
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	f042 0201 	orr.w	r2, r2, #1
 800923e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2200      	movs	r2, #0
 8009244:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	2220      	movs	r2, #32
 800924a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2200      	movs	r2, #0
 8009252:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2200      	movs	r2, #0
 8009258:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800925c:	2300      	movs	r3, #0
}
 800925e:	4618      	mov	r0, r3
 8009260:	3708      	adds	r7, #8
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}
 8009266:	bf00      	nop
 8009268:	02008000 	.word	0x02008000

0800926c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b082      	sub	sp, #8
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d101      	bne.n	800927e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800927a:	2301      	movs	r3, #1
 800927c:	e021      	b.n	80092c2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2224      	movs	r2, #36	; 0x24
 8009282:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	681a      	ldr	r2, [r3, #0]
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f022 0201 	bic.w	r2, r2, #1
 8009294:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	f7f7 fd94 	bl	8000dc4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2200      	movs	r2, #0
 80092a0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2200      	movs	r2, #0
 80092a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2200      	movs	r2, #0
 80092ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2200      	movs	r2, #0
 80092b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2200      	movs	r2, #0
 80092bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80092c0:	2300      	movs	r3, #0
}
 80092c2:	4618      	mov	r0, r3
 80092c4:	3708      	adds	r7, #8
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bd80      	pop	{r7, pc}
	...

080092cc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b088      	sub	sp, #32
 80092d0:	af02      	add	r7, sp, #8
 80092d2:	60f8      	str	r0, [r7, #12]
 80092d4:	4608      	mov	r0, r1
 80092d6:	4611      	mov	r1, r2
 80092d8:	461a      	mov	r2, r3
 80092da:	4603      	mov	r3, r0
 80092dc:	817b      	strh	r3, [r7, #10]
 80092de:	460b      	mov	r3, r1
 80092e0:	813b      	strh	r3, [r7, #8]
 80092e2:	4613      	mov	r3, r2
 80092e4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80092ec:	b2db      	uxtb	r3, r3
 80092ee:	2b20      	cmp	r3, #32
 80092f0:	f040 80f9 	bne.w	80094e6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80092f4:	6a3b      	ldr	r3, [r7, #32]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d002      	beq.n	8009300 <HAL_I2C_Mem_Write+0x34>
 80092fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d105      	bne.n	800930c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009306:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8009308:	2301      	movs	r3, #1
 800930a:	e0ed      	b.n	80094e8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009312:	2b01      	cmp	r3, #1
 8009314:	d101      	bne.n	800931a <HAL_I2C_Mem_Write+0x4e>
 8009316:	2302      	movs	r3, #2
 8009318:	e0e6      	b.n	80094e8 <HAL_I2C_Mem_Write+0x21c>
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	2201      	movs	r2, #1
 800931e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009322:	f7fe ff39 	bl	8008198 <HAL_GetTick>
 8009326:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009328:	697b      	ldr	r3, [r7, #20]
 800932a:	9300      	str	r3, [sp, #0]
 800932c:	2319      	movs	r3, #25
 800932e:	2201      	movs	r2, #1
 8009330:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009334:	68f8      	ldr	r0, [r7, #12]
 8009336:	f000 fadd 	bl	80098f4 <I2C_WaitOnFlagUntilTimeout>
 800933a:	4603      	mov	r3, r0
 800933c:	2b00      	cmp	r3, #0
 800933e:	d001      	beq.n	8009344 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8009340:	2301      	movs	r3, #1
 8009342:	e0d1      	b.n	80094e8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	2221      	movs	r2, #33	; 0x21
 8009348:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	2240      	movs	r2, #64	; 0x40
 8009350:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	2200      	movs	r2, #0
 8009358:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	6a3a      	ldr	r2, [r7, #32]
 800935e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009364:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	2200      	movs	r2, #0
 800936a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800936c:	88f8      	ldrh	r0, [r7, #6]
 800936e:	893a      	ldrh	r2, [r7, #8]
 8009370:	8979      	ldrh	r1, [r7, #10]
 8009372:	697b      	ldr	r3, [r7, #20]
 8009374:	9301      	str	r3, [sp, #4]
 8009376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009378:	9300      	str	r3, [sp, #0]
 800937a:	4603      	mov	r3, r0
 800937c:	68f8      	ldr	r0, [r7, #12]
 800937e:	f000 f9ed 	bl	800975c <I2C_RequestMemoryWrite>
 8009382:	4603      	mov	r3, r0
 8009384:	2b00      	cmp	r3, #0
 8009386:	d005      	beq.n	8009394 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	2200      	movs	r2, #0
 800938c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8009390:	2301      	movs	r3, #1
 8009392:	e0a9      	b.n	80094e8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009398:	b29b      	uxth	r3, r3
 800939a:	2bff      	cmp	r3, #255	; 0xff
 800939c:	d90e      	bls.n	80093bc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	22ff      	movs	r2, #255	; 0xff
 80093a2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093a8:	b2da      	uxtb	r2, r3
 80093aa:	8979      	ldrh	r1, [r7, #10]
 80093ac:	2300      	movs	r3, #0
 80093ae:	9300      	str	r3, [sp, #0]
 80093b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80093b4:	68f8      	ldr	r0, [r7, #12]
 80093b6:	f000 fc57 	bl	8009c68 <I2C_TransferConfig>
 80093ba:	e00f      	b.n	80093dc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093c0:	b29a      	uxth	r2, r3
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093ca:	b2da      	uxtb	r2, r3
 80093cc:	8979      	ldrh	r1, [r7, #10]
 80093ce:	2300      	movs	r3, #0
 80093d0:	9300      	str	r3, [sp, #0]
 80093d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80093d6:	68f8      	ldr	r0, [r7, #12]
 80093d8:	f000 fc46 	bl	8009c68 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80093dc:	697a      	ldr	r2, [r7, #20]
 80093de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80093e0:	68f8      	ldr	r0, [r7, #12]
 80093e2:	f000 fad6 	bl	8009992 <I2C_WaitOnTXISFlagUntilTimeout>
 80093e6:	4603      	mov	r3, r0
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d001      	beq.n	80093f0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80093ec:	2301      	movs	r3, #1
 80093ee:	e07b      	b.n	80094e8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093f4:	781a      	ldrb	r2, [r3, #0]
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009400:	1c5a      	adds	r2, r3, #1
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800940a:	b29b      	uxth	r3, r3
 800940c:	3b01      	subs	r3, #1
 800940e:	b29a      	uxth	r2, r3
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009418:	3b01      	subs	r3, #1
 800941a:	b29a      	uxth	r2, r3
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009424:	b29b      	uxth	r3, r3
 8009426:	2b00      	cmp	r3, #0
 8009428:	d034      	beq.n	8009494 <HAL_I2C_Mem_Write+0x1c8>
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800942e:	2b00      	cmp	r3, #0
 8009430:	d130      	bne.n	8009494 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009432:	697b      	ldr	r3, [r7, #20]
 8009434:	9300      	str	r3, [sp, #0]
 8009436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009438:	2200      	movs	r2, #0
 800943a:	2180      	movs	r1, #128	; 0x80
 800943c:	68f8      	ldr	r0, [r7, #12]
 800943e:	f000 fa59 	bl	80098f4 <I2C_WaitOnFlagUntilTimeout>
 8009442:	4603      	mov	r3, r0
 8009444:	2b00      	cmp	r3, #0
 8009446:	d001      	beq.n	800944c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8009448:	2301      	movs	r3, #1
 800944a:	e04d      	b.n	80094e8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009450:	b29b      	uxth	r3, r3
 8009452:	2bff      	cmp	r3, #255	; 0xff
 8009454:	d90e      	bls.n	8009474 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	22ff      	movs	r2, #255	; 0xff
 800945a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009460:	b2da      	uxtb	r2, r3
 8009462:	8979      	ldrh	r1, [r7, #10]
 8009464:	2300      	movs	r3, #0
 8009466:	9300      	str	r3, [sp, #0]
 8009468:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800946c:	68f8      	ldr	r0, [r7, #12]
 800946e:	f000 fbfb 	bl	8009c68 <I2C_TransferConfig>
 8009472:	e00f      	b.n	8009494 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009478:	b29a      	uxth	r2, r3
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009482:	b2da      	uxtb	r2, r3
 8009484:	8979      	ldrh	r1, [r7, #10]
 8009486:	2300      	movs	r3, #0
 8009488:	9300      	str	r3, [sp, #0]
 800948a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800948e:	68f8      	ldr	r0, [r7, #12]
 8009490:	f000 fbea 	bl	8009c68 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009498:	b29b      	uxth	r3, r3
 800949a:	2b00      	cmp	r3, #0
 800949c:	d19e      	bne.n	80093dc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800949e:	697a      	ldr	r2, [r7, #20]
 80094a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80094a2:	68f8      	ldr	r0, [r7, #12]
 80094a4:	f000 fabc 	bl	8009a20 <I2C_WaitOnSTOPFlagUntilTimeout>
 80094a8:	4603      	mov	r3, r0
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d001      	beq.n	80094b2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80094ae:	2301      	movs	r3, #1
 80094b0:	e01a      	b.n	80094e8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	2220      	movs	r2, #32
 80094b8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	6859      	ldr	r1, [r3, #4]
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	681a      	ldr	r2, [r3, #0]
 80094c4:	4b0a      	ldr	r3, [pc, #40]	; (80094f0 <HAL_I2C_Mem_Write+0x224>)
 80094c6:	400b      	ands	r3, r1
 80094c8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	2220      	movs	r2, #32
 80094ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	2200      	movs	r2, #0
 80094d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	2200      	movs	r2, #0
 80094de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80094e2:	2300      	movs	r3, #0
 80094e4:	e000      	b.n	80094e8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80094e6:	2302      	movs	r3, #2
  }
}
 80094e8:	4618      	mov	r0, r3
 80094ea:	3718      	adds	r7, #24
 80094ec:	46bd      	mov	sp, r7
 80094ee:	bd80      	pop	{r7, pc}
 80094f0:	fe00e800 	.word	0xfe00e800

080094f4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b088      	sub	sp, #32
 80094f8:	af02      	add	r7, sp, #8
 80094fa:	60f8      	str	r0, [r7, #12]
 80094fc:	4608      	mov	r0, r1
 80094fe:	4611      	mov	r1, r2
 8009500:	461a      	mov	r2, r3
 8009502:	4603      	mov	r3, r0
 8009504:	817b      	strh	r3, [r7, #10]
 8009506:	460b      	mov	r3, r1
 8009508:	813b      	strh	r3, [r7, #8]
 800950a:	4613      	mov	r3, r2
 800950c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009514:	b2db      	uxtb	r3, r3
 8009516:	2b20      	cmp	r3, #32
 8009518:	f040 80fd 	bne.w	8009716 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800951c:	6a3b      	ldr	r3, [r7, #32]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d002      	beq.n	8009528 <HAL_I2C_Mem_Read+0x34>
 8009522:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009524:	2b00      	cmp	r3, #0
 8009526:	d105      	bne.n	8009534 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800952e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8009530:	2301      	movs	r3, #1
 8009532:	e0f1      	b.n	8009718 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800953a:	2b01      	cmp	r3, #1
 800953c:	d101      	bne.n	8009542 <HAL_I2C_Mem_Read+0x4e>
 800953e:	2302      	movs	r3, #2
 8009540:	e0ea      	b.n	8009718 <HAL_I2C_Mem_Read+0x224>
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	2201      	movs	r2, #1
 8009546:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800954a:	f7fe fe25 	bl	8008198 <HAL_GetTick>
 800954e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009550:	697b      	ldr	r3, [r7, #20]
 8009552:	9300      	str	r3, [sp, #0]
 8009554:	2319      	movs	r3, #25
 8009556:	2201      	movs	r2, #1
 8009558:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800955c:	68f8      	ldr	r0, [r7, #12]
 800955e:	f000 f9c9 	bl	80098f4 <I2C_WaitOnFlagUntilTimeout>
 8009562:	4603      	mov	r3, r0
 8009564:	2b00      	cmp	r3, #0
 8009566:	d001      	beq.n	800956c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8009568:	2301      	movs	r3, #1
 800956a:	e0d5      	b.n	8009718 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	2222      	movs	r2, #34	; 0x22
 8009570:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	2240      	movs	r2, #64	; 0x40
 8009578:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	2200      	movs	r2, #0
 8009580:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	6a3a      	ldr	r2, [r7, #32]
 8009586:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800958c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	2200      	movs	r2, #0
 8009592:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009594:	88f8      	ldrh	r0, [r7, #6]
 8009596:	893a      	ldrh	r2, [r7, #8]
 8009598:	8979      	ldrh	r1, [r7, #10]
 800959a:	697b      	ldr	r3, [r7, #20]
 800959c:	9301      	str	r3, [sp, #4]
 800959e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095a0:	9300      	str	r3, [sp, #0]
 80095a2:	4603      	mov	r3, r0
 80095a4:	68f8      	ldr	r0, [r7, #12]
 80095a6:	f000 f92d 	bl	8009804 <I2C_RequestMemoryRead>
 80095aa:	4603      	mov	r3, r0
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d005      	beq.n	80095bc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	2200      	movs	r2, #0
 80095b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80095b8:	2301      	movs	r3, #1
 80095ba:	e0ad      	b.n	8009718 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095c0:	b29b      	uxth	r3, r3
 80095c2:	2bff      	cmp	r3, #255	; 0xff
 80095c4:	d90e      	bls.n	80095e4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	22ff      	movs	r2, #255	; 0xff
 80095ca:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095d0:	b2da      	uxtb	r2, r3
 80095d2:	8979      	ldrh	r1, [r7, #10]
 80095d4:	4b52      	ldr	r3, [pc, #328]	; (8009720 <HAL_I2C_Mem_Read+0x22c>)
 80095d6:	9300      	str	r3, [sp, #0]
 80095d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80095dc:	68f8      	ldr	r0, [r7, #12]
 80095de:	f000 fb43 	bl	8009c68 <I2C_TransferConfig>
 80095e2:	e00f      	b.n	8009604 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095e8:	b29a      	uxth	r2, r3
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095f2:	b2da      	uxtb	r2, r3
 80095f4:	8979      	ldrh	r1, [r7, #10]
 80095f6:	4b4a      	ldr	r3, [pc, #296]	; (8009720 <HAL_I2C_Mem_Read+0x22c>)
 80095f8:	9300      	str	r3, [sp, #0]
 80095fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80095fe:	68f8      	ldr	r0, [r7, #12]
 8009600:	f000 fb32 	bl	8009c68 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8009604:	697b      	ldr	r3, [r7, #20]
 8009606:	9300      	str	r3, [sp, #0]
 8009608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800960a:	2200      	movs	r2, #0
 800960c:	2104      	movs	r1, #4
 800960e:	68f8      	ldr	r0, [r7, #12]
 8009610:	f000 f970 	bl	80098f4 <I2C_WaitOnFlagUntilTimeout>
 8009614:	4603      	mov	r3, r0
 8009616:	2b00      	cmp	r3, #0
 8009618:	d001      	beq.n	800961e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800961a:	2301      	movs	r3, #1
 800961c:	e07c      	b.n	8009718 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009628:	b2d2      	uxtb	r2, r2
 800962a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009630:	1c5a      	adds	r2, r3, #1
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800963a:	3b01      	subs	r3, #1
 800963c:	b29a      	uxth	r2, r3
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009646:	b29b      	uxth	r3, r3
 8009648:	3b01      	subs	r3, #1
 800964a:	b29a      	uxth	r2, r3
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009654:	b29b      	uxth	r3, r3
 8009656:	2b00      	cmp	r3, #0
 8009658:	d034      	beq.n	80096c4 <HAL_I2C_Mem_Read+0x1d0>
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800965e:	2b00      	cmp	r3, #0
 8009660:	d130      	bne.n	80096c4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009662:	697b      	ldr	r3, [r7, #20]
 8009664:	9300      	str	r3, [sp, #0]
 8009666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009668:	2200      	movs	r2, #0
 800966a:	2180      	movs	r1, #128	; 0x80
 800966c:	68f8      	ldr	r0, [r7, #12]
 800966e:	f000 f941 	bl	80098f4 <I2C_WaitOnFlagUntilTimeout>
 8009672:	4603      	mov	r3, r0
 8009674:	2b00      	cmp	r3, #0
 8009676:	d001      	beq.n	800967c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8009678:	2301      	movs	r3, #1
 800967a:	e04d      	b.n	8009718 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009680:	b29b      	uxth	r3, r3
 8009682:	2bff      	cmp	r3, #255	; 0xff
 8009684:	d90e      	bls.n	80096a4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	22ff      	movs	r2, #255	; 0xff
 800968a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009690:	b2da      	uxtb	r2, r3
 8009692:	8979      	ldrh	r1, [r7, #10]
 8009694:	2300      	movs	r3, #0
 8009696:	9300      	str	r3, [sp, #0]
 8009698:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800969c:	68f8      	ldr	r0, [r7, #12]
 800969e:	f000 fae3 	bl	8009c68 <I2C_TransferConfig>
 80096a2:	e00f      	b.n	80096c4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096a8:	b29a      	uxth	r2, r3
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096b2:	b2da      	uxtb	r2, r3
 80096b4:	8979      	ldrh	r1, [r7, #10]
 80096b6:	2300      	movs	r3, #0
 80096b8:	9300      	str	r3, [sp, #0]
 80096ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80096be:	68f8      	ldr	r0, [r7, #12]
 80096c0:	f000 fad2 	bl	8009c68 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096c8:	b29b      	uxth	r3, r3
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d19a      	bne.n	8009604 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80096ce:	697a      	ldr	r2, [r7, #20]
 80096d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80096d2:	68f8      	ldr	r0, [r7, #12]
 80096d4:	f000 f9a4 	bl	8009a20 <I2C_WaitOnSTOPFlagUntilTimeout>
 80096d8:	4603      	mov	r3, r0
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d001      	beq.n	80096e2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80096de:	2301      	movs	r3, #1
 80096e0:	e01a      	b.n	8009718 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	2220      	movs	r2, #32
 80096e8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	6859      	ldr	r1, [r3, #4]
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	681a      	ldr	r2, [r3, #0]
 80096f4:	4b0b      	ldr	r3, [pc, #44]	; (8009724 <HAL_I2C_Mem_Read+0x230>)
 80096f6:	400b      	ands	r3, r1
 80096f8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	2220      	movs	r2, #32
 80096fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	2200      	movs	r2, #0
 8009706:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	2200      	movs	r2, #0
 800970e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009712:	2300      	movs	r3, #0
 8009714:	e000      	b.n	8009718 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8009716:	2302      	movs	r3, #2
  }
}
 8009718:	4618      	mov	r0, r3
 800971a:	3718      	adds	r7, #24
 800971c:	46bd      	mov	sp, r7
 800971e:	bd80      	pop	{r7, pc}
 8009720:	80002400 	.word	0x80002400
 8009724:	fe00e800 	.word	0xfe00e800

08009728 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8009728:	b480      	push	{r7}
 800972a:	b083      	sub	sp, #12
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009736:	b2db      	uxtb	r3, r3
}
 8009738:	4618      	mov	r0, r3
 800973a:	370c      	adds	r7, #12
 800973c:	46bd      	mov	sp, r7
 800973e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009742:	4770      	bx	lr

08009744 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8009744:	b480      	push	{r7}
 8009746:	b083      	sub	sp, #12
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8009750:	4618      	mov	r0, r3
 8009752:	370c      	adds	r7, #12
 8009754:	46bd      	mov	sp, r7
 8009756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975a:	4770      	bx	lr

0800975c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b086      	sub	sp, #24
 8009760:	af02      	add	r7, sp, #8
 8009762:	60f8      	str	r0, [r7, #12]
 8009764:	4608      	mov	r0, r1
 8009766:	4611      	mov	r1, r2
 8009768:	461a      	mov	r2, r3
 800976a:	4603      	mov	r3, r0
 800976c:	817b      	strh	r3, [r7, #10]
 800976e:	460b      	mov	r3, r1
 8009770:	813b      	strh	r3, [r7, #8]
 8009772:	4613      	mov	r3, r2
 8009774:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009776:	88fb      	ldrh	r3, [r7, #6]
 8009778:	b2da      	uxtb	r2, r3
 800977a:	8979      	ldrh	r1, [r7, #10]
 800977c:	4b20      	ldr	r3, [pc, #128]	; (8009800 <I2C_RequestMemoryWrite+0xa4>)
 800977e:	9300      	str	r3, [sp, #0]
 8009780:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009784:	68f8      	ldr	r0, [r7, #12]
 8009786:	f000 fa6f 	bl	8009c68 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800978a:	69fa      	ldr	r2, [r7, #28]
 800978c:	69b9      	ldr	r1, [r7, #24]
 800978e:	68f8      	ldr	r0, [r7, #12]
 8009790:	f000 f8ff 	bl	8009992 <I2C_WaitOnTXISFlagUntilTimeout>
 8009794:	4603      	mov	r3, r0
 8009796:	2b00      	cmp	r3, #0
 8009798:	d001      	beq.n	800979e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800979a:	2301      	movs	r3, #1
 800979c:	e02c      	b.n	80097f8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800979e:	88fb      	ldrh	r3, [r7, #6]
 80097a0:	2b01      	cmp	r3, #1
 80097a2:	d105      	bne.n	80097b0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80097a4:	893b      	ldrh	r3, [r7, #8]
 80097a6:	b2da      	uxtb	r2, r3
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	629a      	str	r2, [r3, #40]	; 0x28
 80097ae:	e015      	b.n	80097dc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80097b0:	893b      	ldrh	r3, [r7, #8]
 80097b2:	0a1b      	lsrs	r3, r3, #8
 80097b4:	b29b      	uxth	r3, r3
 80097b6:	b2da      	uxtb	r2, r3
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80097be:	69fa      	ldr	r2, [r7, #28]
 80097c0:	69b9      	ldr	r1, [r7, #24]
 80097c2:	68f8      	ldr	r0, [r7, #12]
 80097c4:	f000 f8e5 	bl	8009992 <I2C_WaitOnTXISFlagUntilTimeout>
 80097c8:	4603      	mov	r3, r0
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d001      	beq.n	80097d2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80097ce:	2301      	movs	r3, #1
 80097d0:	e012      	b.n	80097f8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80097d2:	893b      	ldrh	r3, [r7, #8]
 80097d4:	b2da      	uxtb	r2, r3
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80097dc:	69fb      	ldr	r3, [r7, #28]
 80097de:	9300      	str	r3, [sp, #0]
 80097e0:	69bb      	ldr	r3, [r7, #24]
 80097e2:	2200      	movs	r2, #0
 80097e4:	2180      	movs	r1, #128	; 0x80
 80097e6:	68f8      	ldr	r0, [r7, #12]
 80097e8:	f000 f884 	bl	80098f4 <I2C_WaitOnFlagUntilTimeout>
 80097ec:	4603      	mov	r3, r0
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d001      	beq.n	80097f6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80097f2:	2301      	movs	r3, #1
 80097f4:	e000      	b.n	80097f8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80097f6:	2300      	movs	r3, #0
}
 80097f8:	4618      	mov	r0, r3
 80097fa:	3710      	adds	r7, #16
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bd80      	pop	{r7, pc}
 8009800:	80002000 	.word	0x80002000

08009804 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b086      	sub	sp, #24
 8009808:	af02      	add	r7, sp, #8
 800980a:	60f8      	str	r0, [r7, #12]
 800980c:	4608      	mov	r0, r1
 800980e:	4611      	mov	r1, r2
 8009810:	461a      	mov	r2, r3
 8009812:	4603      	mov	r3, r0
 8009814:	817b      	strh	r3, [r7, #10]
 8009816:	460b      	mov	r3, r1
 8009818:	813b      	strh	r3, [r7, #8]
 800981a:	4613      	mov	r3, r2
 800981c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800981e:	88fb      	ldrh	r3, [r7, #6]
 8009820:	b2da      	uxtb	r2, r3
 8009822:	8979      	ldrh	r1, [r7, #10]
 8009824:	4b20      	ldr	r3, [pc, #128]	; (80098a8 <I2C_RequestMemoryRead+0xa4>)
 8009826:	9300      	str	r3, [sp, #0]
 8009828:	2300      	movs	r3, #0
 800982a:	68f8      	ldr	r0, [r7, #12]
 800982c:	f000 fa1c 	bl	8009c68 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009830:	69fa      	ldr	r2, [r7, #28]
 8009832:	69b9      	ldr	r1, [r7, #24]
 8009834:	68f8      	ldr	r0, [r7, #12]
 8009836:	f000 f8ac 	bl	8009992 <I2C_WaitOnTXISFlagUntilTimeout>
 800983a:	4603      	mov	r3, r0
 800983c:	2b00      	cmp	r3, #0
 800983e:	d001      	beq.n	8009844 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8009840:	2301      	movs	r3, #1
 8009842:	e02c      	b.n	800989e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009844:	88fb      	ldrh	r3, [r7, #6]
 8009846:	2b01      	cmp	r3, #1
 8009848:	d105      	bne.n	8009856 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800984a:	893b      	ldrh	r3, [r7, #8]
 800984c:	b2da      	uxtb	r2, r3
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	629a      	str	r2, [r3, #40]	; 0x28
 8009854:	e015      	b.n	8009882 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009856:	893b      	ldrh	r3, [r7, #8]
 8009858:	0a1b      	lsrs	r3, r3, #8
 800985a:	b29b      	uxth	r3, r3
 800985c:	b2da      	uxtb	r2, r3
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009864:	69fa      	ldr	r2, [r7, #28]
 8009866:	69b9      	ldr	r1, [r7, #24]
 8009868:	68f8      	ldr	r0, [r7, #12]
 800986a:	f000 f892 	bl	8009992 <I2C_WaitOnTXISFlagUntilTimeout>
 800986e:	4603      	mov	r3, r0
 8009870:	2b00      	cmp	r3, #0
 8009872:	d001      	beq.n	8009878 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8009874:	2301      	movs	r3, #1
 8009876:	e012      	b.n	800989e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009878:	893b      	ldrh	r3, [r7, #8]
 800987a:	b2da      	uxtb	r2, r3
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8009882:	69fb      	ldr	r3, [r7, #28]
 8009884:	9300      	str	r3, [sp, #0]
 8009886:	69bb      	ldr	r3, [r7, #24]
 8009888:	2200      	movs	r2, #0
 800988a:	2140      	movs	r1, #64	; 0x40
 800988c:	68f8      	ldr	r0, [r7, #12]
 800988e:	f000 f831 	bl	80098f4 <I2C_WaitOnFlagUntilTimeout>
 8009892:	4603      	mov	r3, r0
 8009894:	2b00      	cmp	r3, #0
 8009896:	d001      	beq.n	800989c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8009898:	2301      	movs	r3, #1
 800989a:	e000      	b.n	800989e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800989c:	2300      	movs	r3, #0
}
 800989e:	4618      	mov	r0, r3
 80098a0:	3710      	adds	r7, #16
 80098a2:	46bd      	mov	sp, r7
 80098a4:	bd80      	pop	{r7, pc}
 80098a6:	bf00      	nop
 80098a8:	80002000 	.word	0x80002000

080098ac <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80098ac:	b480      	push	{r7}
 80098ae:	b083      	sub	sp, #12
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	699b      	ldr	r3, [r3, #24]
 80098ba:	f003 0302 	and.w	r3, r3, #2
 80098be:	2b02      	cmp	r3, #2
 80098c0:	d103      	bne.n	80098ca <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	2200      	movs	r2, #0
 80098c8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	699b      	ldr	r3, [r3, #24]
 80098d0:	f003 0301 	and.w	r3, r3, #1
 80098d4:	2b01      	cmp	r3, #1
 80098d6:	d007      	beq.n	80098e8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	699a      	ldr	r2, [r3, #24]
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	f042 0201 	orr.w	r2, r2, #1
 80098e6:	619a      	str	r2, [r3, #24]
  }
}
 80098e8:	bf00      	nop
 80098ea:	370c      	adds	r7, #12
 80098ec:	46bd      	mov	sp, r7
 80098ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f2:	4770      	bx	lr

080098f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b084      	sub	sp, #16
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	60f8      	str	r0, [r7, #12]
 80098fc:	60b9      	str	r1, [r7, #8]
 80098fe:	603b      	str	r3, [r7, #0]
 8009900:	4613      	mov	r3, r2
 8009902:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009904:	e031      	b.n	800996a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800990c:	d02d      	beq.n	800996a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800990e:	f7fe fc43 	bl	8008198 <HAL_GetTick>
 8009912:	4602      	mov	r2, r0
 8009914:	69bb      	ldr	r3, [r7, #24]
 8009916:	1ad3      	subs	r3, r2, r3
 8009918:	683a      	ldr	r2, [r7, #0]
 800991a:	429a      	cmp	r2, r3
 800991c:	d302      	bcc.n	8009924 <I2C_WaitOnFlagUntilTimeout+0x30>
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d122      	bne.n	800996a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	699a      	ldr	r2, [r3, #24]
 800992a:	68bb      	ldr	r3, [r7, #8]
 800992c:	4013      	ands	r3, r2
 800992e:	68ba      	ldr	r2, [r7, #8]
 8009930:	429a      	cmp	r2, r3
 8009932:	bf0c      	ite	eq
 8009934:	2301      	moveq	r3, #1
 8009936:	2300      	movne	r3, #0
 8009938:	b2db      	uxtb	r3, r3
 800993a:	461a      	mov	r2, r3
 800993c:	79fb      	ldrb	r3, [r7, #7]
 800993e:	429a      	cmp	r2, r3
 8009940:	d113      	bne.n	800996a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009946:	f043 0220 	orr.w	r2, r3, #32
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	2220      	movs	r2, #32
 8009952:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	2200      	movs	r2, #0
 800995a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	2200      	movs	r2, #0
 8009962:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8009966:	2301      	movs	r3, #1
 8009968:	e00f      	b.n	800998a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	699a      	ldr	r2, [r3, #24]
 8009970:	68bb      	ldr	r3, [r7, #8]
 8009972:	4013      	ands	r3, r2
 8009974:	68ba      	ldr	r2, [r7, #8]
 8009976:	429a      	cmp	r2, r3
 8009978:	bf0c      	ite	eq
 800997a:	2301      	moveq	r3, #1
 800997c:	2300      	movne	r3, #0
 800997e:	b2db      	uxtb	r3, r3
 8009980:	461a      	mov	r2, r3
 8009982:	79fb      	ldrb	r3, [r7, #7]
 8009984:	429a      	cmp	r2, r3
 8009986:	d0be      	beq.n	8009906 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009988:	2300      	movs	r3, #0
}
 800998a:	4618      	mov	r0, r3
 800998c:	3710      	adds	r7, #16
 800998e:	46bd      	mov	sp, r7
 8009990:	bd80      	pop	{r7, pc}

08009992 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009992:	b580      	push	{r7, lr}
 8009994:	b084      	sub	sp, #16
 8009996:	af00      	add	r7, sp, #0
 8009998:	60f8      	str	r0, [r7, #12]
 800999a:	60b9      	str	r1, [r7, #8]
 800999c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800999e:	e033      	b.n	8009a08 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80099a0:	687a      	ldr	r2, [r7, #4]
 80099a2:	68b9      	ldr	r1, [r7, #8]
 80099a4:	68f8      	ldr	r0, [r7, #12]
 80099a6:	f000 f87f 	bl	8009aa8 <I2C_IsErrorOccurred>
 80099aa:	4603      	mov	r3, r0
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d001      	beq.n	80099b4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80099b0:	2301      	movs	r3, #1
 80099b2:	e031      	b.n	8009a18 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80099b4:	68bb      	ldr	r3, [r7, #8]
 80099b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099ba:	d025      	beq.n	8009a08 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80099bc:	f7fe fbec 	bl	8008198 <HAL_GetTick>
 80099c0:	4602      	mov	r2, r0
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	1ad3      	subs	r3, r2, r3
 80099c6:	68ba      	ldr	r2, [r7, #8]
 80099c8:	429a      	cmp	r2, r3
 80099ca:	d302      	bcc.n	80099d2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80099cc:	68bb      	ldr	r3, [r7, #8]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d11a      	bne.n	8009a08 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	699b      	ldr	r3, [r3, #24]
 80099d8:	f003 0302 	and.w	r3, r3, #2
 80099dc:	2b02      	cmp	r3, #2
 80099de:	d013      	beq.n	8009a08 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099e4:	f043 0220 	orr.w	r2, r3, #32
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	2220      	movs	r2, #32
 80099f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	2200      	movs	r2, #0
 80099f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	2200      	movs	r2, #0
 8009a00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8009a04:	2301      	movs	r3, #1
 8009a06:	e007      	b.n	8009a18 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	699b      	ldr	r3, [r3, #24]
 8009a0e:	f003 0302 	and.w	r3, r3, #2
 8009a12:	2b02      	cmp	r3, #2
 8009a14:	d1c4      	bne.n	80099a0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009a16:	2300      	movs	r3, #0
}
 8009a18:	4618      	mov	r0, r3
 8009a1a:	3710      	adds	r7, #16
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	bd80      	pop	{r7, pc}

08009a20 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b084      	sub	sp, #16
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	60f8      	str	r0, [r7, #12]
 8009a28:	60b9      	str	r1, [r7, #8]
 8009a2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009a2c:	e02f      	b.n	8009a8e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009a2e:	687a      	ldr	r2, [r7, #4]
 8009a30:	68b9      	ldr	r1, [r7, #8]
 8009a32:	68f8      	ldr	r0, [r7, #12]
 8009a34:	f000 f838 	bl	8009aa8 <I2C_IsErrorOccurred>
 8009a38:	4603      	mov	r3, r0
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d001      	beq.n	8009a42 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009a3e:	2301      	movs	r3, #1
 8009a40:	e02d      	b.n	8009a9e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a42:	f7fe fba9 	bl	8008198 <HAL_GetTick>
 8009a46:	4602      	mov	r2, r0
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	1ad3      	subs	r3, r2, r3
 8009a4c:	68ba      	ldr	r2, [r7, #8]
 8009a4e:	429a      	cmp	r2, r3
 8009a50:	d302      	bcc.n	8009a58 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009a52:	68bb      	ldr	r3, [r7, #8]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d11a      	bne.n	8009a8e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	699b      	ldr	r3, [r3, #24]
 8009a5e:	f003 0320 	and.w	r3, r3, #32
 8009a62:	2b20      	cmp	r3, #32
 8009a64:	d013      	beq.n	8009a8e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a6a:	f043 0220 	orr.w	r2, r3, #32
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	2220      	movs	r2, #32
 8009a76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	2200      	movs	r2, #0
 8009a86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009a8a:	2301      	movs	r3, #1
 8009a8c:	e007      	b.n	8009a9e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	699b      	ldr	r3, [r3, #24]
 8009a94:	f003 0320 	and.w	r3, r3, #32
 8009a98:	2b20      	cmp	r3, #32
 8009a9a:	d1c8      	bne.n	8009a2e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009a9c:	2300      	movs	r3, #0
}
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	3710      	adds	r7, #16
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	bd80      	pop	{r7, pc}
	...

08009aa8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b08a      	sub	sp, #40	; 0x28
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	60f8      	str	r0, [r7, #12]
 8009ab0:	60b9      	str	r1, [r7, #8]
 8009ab2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	699b      	ldr	r3, [r3, #24]
 8009ac0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009aca:	69bb      	ldr	r3, [r7, #24]
 8009acc:	f003 0310 	and.w	r3, r3, #16
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d068      	beq.n	8009ba6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	2210      	movs	r2, #16
 8009ada:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009adc:	e049      	b.n	8009b72 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009ade:	68bb      	ldr	r3, [r7, #8]
 8009ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ae4:	d045      	beq.n	8009b72 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009ae6:	f7fe fb57 	bl	8008198 <HAL_GetTick>
 8009aea:	4602      	mov	r2, r0
 8009aec:	69fb      	ldr	r3, [r7, #28]
 8009aee:	1ad3      	subs	r3, r2, r3
 8009af0:	68ba      	ldr	r2, [r7, #8]
 8009af2:	429a      	cmp	r2, r3
 8009af4:	d302      	bcc.n	8009afc <I2C_IsErrorOccurred+0x54>
 8009af6:	68bb      	ldr	r3, [r7, #8]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d13a      	bne.n	8009b72 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	685b      	ldr	r3, [r3, #4]
 8009b02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009b06:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009b0e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	699b      	ldr	r3, [r3, #24]
 8009b16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009b1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b1e:	d121      	bne.n	8009b64 <I2C_IsErrorOccurred+0xbc>
 8009b20:	697b      	ldr	r3, [r7, #20]
 8009b22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009b26:	d01d      	beq.n	8009b64 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8009b28:	7cfb      	ldrb	r3, [r7, #19]
 8009b2a:	2b20      	cmp	r3, #32
 8009b2c:	d01a      	beq.n	8009b64 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	685a      	ldr	r2, [r3, #4]
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009b3c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009b3e:	f7fe fb2b 	bl	8008198 <HAL_GetTick>
 8009b42:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009b44:	e00e      	b.n	8009b64 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009b46:	f7fe fb27 	bl	8008198 <HAL_GetTick>
 8009b4a:	4602      	mov	r2, r0
 8009b4c:	69fb      	ldr	r3, [r7, #28]
 8009b4e:	1ad3      	subs	r3, r2, r3
 8009b50:	2b19      	cmp	r3, #25
 8009b52:	d907      	bls.n	8009b64 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009b54:	6a3b      	ldr	r3, [r7, #32]
 8009b56:	f043 0320 	orr.w	r3, r3, #32
 8009b5a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009b5c:	2301      	movs	r3, #1
 8009b5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8009b62:	e006      	b.n	8009b72 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	699b      	ldr	r3, [r3, #24]
 8009b6a:	f003 0320 	and.w	r3, r3, #32
 8009b6e:	2b20      	cmp	r3, #32
 8009b70:	d1e9      	bne.n	8009b46 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	699b      	ldr	r3, [r3, #24]
 8009b78:	f003 0320 	and.w	r3, r3, #32
 8009b7c:	2b20      	cmp	r3, #32
 8009b7e:	d003      	beq.n	8009b88 <I2C_IsErrorOccurred+0xe0>
 8009b80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d0aa      	beq.n	8009ade <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009b88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d103      	bne.n	8009b98 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	2220      	movs	r2, #32
 8009b96:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009b98:	6a3b      	ldr	r3, [r7, #32]
 8009b9a:	f043 0304 	orr.w	r3, r3, #4
 8009b9e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	699b      	ldr	r3, [r3, #24]
 8009bac:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009bae:	69bb      	ldr	r3, [r7, #24]
 8009bb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d00b      	beq.n	8009bd0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009bb8:	6a3b      	ldr	r3, [r7, #32]
 8009bba:	f043 0301 	orr.w	r3, r3, #1
 8009bbe:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009bc8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009bca:	2301      	movs	r3, #1
 8009bcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009bd0:	69bb      	ldr	r3, [r7, #24]
 8009bd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d00b      	beq.n	8009bf2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009bda:	6a3b      	ldr	r3, [r7, #32]
 8009bdc:	f043 0308 	orr.w	r3, r3, #8
 8009be0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009bea:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009bec:	2301      	movs	r3, #1
 8009bee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009bf2:	69bb      	ldr	r3, [r7, #24]
 8009bf4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d00b      	beq.n	8009c14 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009bfc:	6a3b      	ldr	r3, [r7, #32]
 8009bfe:	f043 0302 	orr.w	r3, r3, #2
 8009c02:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009c0c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009c0e:	2301      	movs	r3, #1
 8009c10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8009c14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d01c      	beq.n	8009c56 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009c1c:	68f8      	ldr	r0, [r7, #12]
 8009c1e:	f7ff fe45 	bl	80098ac <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	6859      	ldr	r1, [r3, #4]
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	681a      	ldr	r2, [r3, #0]
 8009c2c:	4b0d      	ldr	r3, [pc, #52]	; (8009c64 <I2C_IsErrorOccurred+0x1bc>)
 8009c2e:	400b      	ands	r3, r1
 8009c30:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009c36:	6a3b      	ldr	r3, [r7, #32]
 8009c38:	431a      	orrs	r2, r3
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	2220      	movs	r2, #32
 8009c42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	2200      	movs	r2, #0
 8009c4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	2200      	movs	r2, #0
 8009c52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8009c56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	3728      	adds	r7, #40	; 0x28
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	bd80      	pop	{r7, pc}
 8009c62:	bf00      	nop
 8009c64:	fe00e800 	.word	0xfe00e800

08009c68 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009c68:	b480      	push	{r7}
 8009c6a:	b087      	sub	sp, #28
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	60f8      	str	r0, [r7, #12]
 8009c70:	607b      	str	r3, [r7, #4]
 8009c72:	460b      	mov	r3, r1
 8009c74:	817b      	strh	r3, [r7, #10]
 8009c76:	4613      	mov	r3, r2
 8009c78:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009c7a:	897b      	ldrh	r3, [r7, #10]
 8009c7c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009c80:	7a7b      	ldrb	r3, [r7, #9]
 8009c82:	041b      	lsls	r3, r3, #16
 8009c84:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009c88:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009c8e:	6a3b      	ldr	r3, [r7, #32]
 8009c90:	4313      	orrs	r3, r2
 8009c92:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009c96:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	685a      	ldr	r2, [r3, #4]
 8009c9e:	6a3b      	ldr	r3, [r7, #32]
 8009ca0:	0d5b      	lsrs	r3, r3, #21
 8009ca2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8009ca6:	4b08      	ldr	r3, [pc, #32]	; (8009cc8 <I2C_TransferConfig+0x60>)
 8009ca8:	430b      	orrs	r3, r1
 8009caa:	43db      	mvns	r3, r3
 8009cac:	ea02 0103 	and.w	r1, r2, r3
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	697a      	ldr	r2, [r7, #20]
 8009cb6:	430a      	orrs	r2, r1
 8009cb8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009cba:	bf00      	nop
 8009cbc:	371c      	adds	r7, #28
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc4:	4770      	bx	lr
 8009cc6:	bf00      	nop
 8009cc8:	03ff63ff 	.word	0x03ff63ff

08009ccc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009ccc:	b480      	push	{r7}
 8009cce:	b083      	sub	sp, #12
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
 8009cd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009cdc:	b2db      	uxtb	r3, r3
 8009cde:	2b20      	cmp	r3, #32
 8009ce0:	d138      	bne.n	8009d54 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009ce8:	2b01      	cmp	r3, #1
 8009cea:	d101      	bne.n	8009cf0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009cec:	2302      	movs	r3, #2
 8009cee:	e032      	b.n	8009d56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2201      	movs	r2, #1
 8009cf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2224      	movs	r2, #36	; 0x24
 8009cfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	681a      	ldr	r2, [r3, #0]
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	f022 0201 	bic.w	r2, r2, #1
 8009d0e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	681a      	ldr	r2, [r3, #0]
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009d1e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	6819      	ldr	r1, [r3, #0]
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	683a      	ldr	r2, [r7, #0]
 8009d2c:	430a      	orrs	r2, r1
 8009d2e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	681a      	ldr	r2, [r3, #0]
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f042 0201 	orr.w	r2, r2, #1
 8009d3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2220      	movs	r2, #32
 8009d44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009d50:	2300      	movs	r3, #0
 8009d52:	e000      	b.n	8009d56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009d54:	2302      	movs	r3, #2
  }
}
 8009d56:	4618      	mov	r0, r3
 8009d58:	370c      	adds	r7, #12
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d60:	4770      	bx	lr

08009d62 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009d62:	b480      	push	{r7}
 8009d64:	b085      	sub	sp, #20
 8009d66:	af00      	add	r7, sp, #0
 8009d68:	6078      	str	r0, [r7, #4]
 8009d6a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009d72:	b2db      	uxtb	r3, r3
 8009d74:	2b20      	cmp	r3, #32
 8009d76:	d139      	bne.n	8009dec <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009d7e:	2b01      	cmp	r3, #1
 8009d80:	d101      	bne.n	8009d86 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009d82:	2302      	movs	r3, #2
 8009d84:	e033      	b.n	8009dee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	2201      	movs	r2, #1
 8009d8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	2224      	movs	r2, #36	; 0x24
 8009d92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	681a      	ldr	r2, [r3, #0]
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	f022 0201 	bic.w	r2, r2, #1
 8009da4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009db4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	021b      	lsls	r3, r3, #8
 8009dba:	68fa      	ldr	r2, [r7, #12]
 8009dbc:	4313      	orrs	r3, r2
 8009dbe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	68fa      	ldr	r2, [r7, #12]
 8009dc6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	681a      	ldr	r2, [r3, #0]
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	f042 0201 	orr.w	r2, r2, #1
 8009dd6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2220      	movs	r2, #32
 8009ddc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2200      	movs	r2, #0
 8009de4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009de8:	2300      	movs	r3, #0
 8009dea:	e000      	b.n	8009dee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009dec:	2302      	movs	r3, #2
  }
}
 8009dee:	4618      	mov	r0, r3
 8009df0:	3714      	adds	r7, #20
 8009df2:	46bd      	mov	sp, r7
 8009df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df8:	4770      	bx	lr
	...

08009dfc <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b084      	sub	sp, #16
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d101      	bne.n	8009e0e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8009e0a:	2301      	movs	r3, #1
 8009e0c:	e0bf      	b.n	8009f8e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8009e14:	b2db      	uxtb	r3, r3
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d106      	bne.n	8009e28 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8009e22:	6878      	ldr	r0, [r7, #4]
 8009e24:	f7f6 fff4 	bl	8000e10 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2202      	movs	r2, #2
 8009e2c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	699a      	ldr	r2, [r3, #24]
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8009e3e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	6999      	ldr	r1, [r3, #24]
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	685a      	ldr	r2, [r3, #4]
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	689b      	ldr	r3, [r3, #8]
 8009e4e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009e54:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	691b      	ldr	r3, [r3, #16]
 8009e5a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	430a      	orrs	r2, r1
 8009e62:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	6899      	ldr	r1, [r3, #8]
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681a      	ldr	r2, [r3, #0]
 8009e6e:	4b4a      	ldr	r3, [pc, #296]	; (8009f98 <HAL_LTDC_Init+0x19c>)
 8009e70:	400b      	ands	r3, r1
 8009e72:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	695b      	ldr	r3, [r3, #20]
 8009e78:	041b      	lsls	r3, r3, #16
 8009e7a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	6899      	ldr	r1, [r3, #8]
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	699a      	ldr	r2, [r3, #24]
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	431a      	orrs	r2, r3
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	430a      	orrs	r2, r1
 8009e90:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	68d9      	ldr	r1, [r3, #12]
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681a      	ldr	r2, [r3, #0]
 8009e9c:	4b3e      	ldr	r3, [pc, #248]	; (8009f98 <HAL_LTDC_Init+0x19c>)
 8009e9e:	400b      	ands	r3, r1
 8009ea0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	69db      	ldr	r3, [r3, #28]
 8009ea6:	041b      	lsls	r3, r3, #16
 8009ea8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	68d9      	ldr	r1, [r3, #12]
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	6a1a      	ldr	r2, [r3, #32]
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	431a      	orrs	r2, r3
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	430a      	orrs	r2, r1
 8009ebe:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	6919      	ldr	r1, [r3, #16]
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681a      	ldr	r2, [r3, #0]
 8009eca:	4b33      	ldr	r3, [pc, #204]	; (8009f98 <HAL_LTDC_Init+0x19c>)
 8009ecc:	400b      	ands	r3, r1
 8009ece:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ed4:	041b      	lsls	r3, r3, #16
 8009ed6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	6919      	ldr	r1, [r3, #16]
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	431a      	orrs	r2, r3
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	430a      	orrs	r2, r1
 8009eec:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	6959      	ldr	r1, [r3, #20]
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681a      	ldr	r2, [r3, #0]
 8009ef8:	4b27      	ldr	r3, [pc, #156]	; (8009f98 <HAL_LTDC_Init+0x19c>)
 8009efa:	400b      	ands	r3, r1
 8009efc:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f02:	041b      	lsls	r3, r3, #16
 8009f04:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	6959      	ldr	r1, [r3, #20]
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	431a      	orrs	r2, r3
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	430a      	orrs	r2, r1
 8009f1a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009f22:	021b      	lsls	r3, r3, #8
 8009f24:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8009f2c:	041b      	lsls	r3, r3, #16
 8009f2e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8009f3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009f46:	68ba      	ldr	r2, [r7, #8]
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	4313      	orrs	r3, r2
 8009f4c:	687a      	ldr	r2, [r7, #4]
 8009f4e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8009f52:	431a      	orrs	r2, r3
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	430a      	orrs	r2, r1
 8009f5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	f042 0206 	orr.w	r2, r2, #6
 8009f6a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	699a      	ldr	r2, [r3, #24]
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	f042 0201 	orr.w	r2, r2, #1
 8009f7a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2200      	movs	r2, #0
 8009f80:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	2201      	movs	r2, #1
 8009f88:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8009f8c:	2300      	movs	r3, #0
}
 8009f8e:	4618      	mov	r0, r3
 8009f90:	3710      	adds	r7, #16
 8009f92:	46bd      	mov	sp, r7
 8009f94:	bd80      	pop	{r7, pc}
 8009f96:	bf00      	nop
 8009f98:	f000f800 	.word	0xf000f800

08009f9c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b084      	sub	sp, #16
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009faa:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fb2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	f003 0304 	and.w	r3, r3, #4
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d023      	beq.n	800a006 <HAL_LTDC_IRQHandler+0x6a>
 8009fbe:	68bb      	ldr	r3, [r7, #8]
 8009fc0:	f003 0304 	and.w	r3, r3, #4
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d01e      	beq.n	800a006 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	f022 0204 	bic.w	r2, r2, #4
 8009fd6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	2204      	movs	r2, #4
 8009fde:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009fe6:	f043 0201 	orr.w	r2, r3, #1
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2204      	movs	r2, #4
 8009ff4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800a000:	6878      	ldr	r0, [r7, #4]
 800a002:	f000 f86f 	bl	800a0e4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	f003 0302 	and.w	r3, r3, #2
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d023      	beq.n	800a058 <HAL_LTDC_IRQHandler+0xbc>
 800a010:	68bb      	ldr	r3, [r7, #8]
 800a012:	f003 0302 	and.w	r3, r3, #2
 800a016:	2b00      	cmp	r3, #0
 800a018:	d01e      	beq.n	800a058 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	f022 0202 	bic.w	r2, r2, #2
 800a028:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	2202      	movs	r2, #2
 800a030:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a038:	f043 0202 	orr.w	r2, r3, #2
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	2204      	movs	r2, #4
 800a046:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	2200      	movs	r2, #0
 800a04e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800a052:	6878      	ldr	r0, [r7, #4]
 800a054:	f000 f846 	bl	800a0e4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	f003 0301 	and.w	r3, r3, #1
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d01b      	beq.n	800a09a <HAL_LTDC_IRQHandler+0xfe>
 800a062:	68bb      	ldr	r3, [r7, #8]
 800a064:	f003 0301 	and.w	r3, r3, #1
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d016      	beq.n	800a09a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	f022 0201 	bic.w	r2, r2, #1
 800a07a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	2201      	movs	r2, #1
 800a082:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2201      	movs	r2, #1
 800a088:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2200      	movs	r2, #0
 800a090:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800a094:	6878      	ldr	r0, [r7, #4]
 800a096:	f7f9 fbcf 	bl	8003838 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	f003 0308 	and.w	r3, r3, #8
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d01b      	beq.n	800a0dc <HAL_LTDC_IRQHandler+0x140>
 800a0a4:	68bb      	ldr	r3, [r7, #8]
 800a0a6:	f003 0308 	and.w	r3, r3, #8
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d016      	beq.n	800a0dc <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	f022 0208 	bic.w	r2, r2, #8
 800a0bc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	2208      	movs	r2, #8
 800a0c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2201      	movs	r2, #1
 800a0ca:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800a0d6:	6878      	ldr	r0, [r7, #4]
 800a0d8:	f000 f80e 	bl	800a0f8 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800a0dc:	bf00      	nop
 800a0de:	3710      	adds	r7, #16
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	bd80      	pop	{r7, pc}

0800a0e4 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800a0e4:	b480      	push	{r7}
 800a0e6:	b083      	sub	sp, #12
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800a0ec:	bf00      	nop
 800a0ee:	370c      	adds	r7, #12
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f6:	4770      	bx	lr

0800a0f8 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800a0f8:	b480      	push	{r7}
 800a0fa:	b083      	sub	sp, #12
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800a100:	bf00      	nop
 800a102:	370c      	adds	r7, #12
 800a104:	46bd      	mov	sp, r7
 800a106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10a:	4770      	bx	lr

0800a10c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800a10c:	b5b0      	push	{r4, r5, r7, lr}
 800a10e:	b084      	sub	sp, #16
 800a110:	af00      	add	r7, sp, #0
 800a112:	60f8      	str	r0, [r7, #12]
 800a114:	60b9      	str	r1, [r7, #8]
 800a116:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800a11e:	2b01      	cmp	r3, #1
 800a120:	d101      	bne.n	800a126 <HAL_LTDC_ConfigLayer+0x1a>
 800a122:	2302      	movs	r3, #2
 800a124:	e02c      	b.n	800a180 <HAL_LTDC_ConfigLayer+0x74>
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	2201      	movs	r2, #1
 800a12a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	2202      	movs	r2, #2
 800a132:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800a136:	68fa      	ldr	r2, [r7, #12]
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2134      	movs	r1, #52	; 0x34
 800a13c:	fb01 f303 	mul.w	r3, r1, r3
 800a140:	4413      	add	r3, r2
 800a142:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800a146:	68bb      	ldr	r3, [r7, #8]
 800a148:	4614      	mov	r4, r2
 800a14a:	461d      	mov	r5, r3
 800a14c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a14e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a150:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a152:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a154:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a156:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a158:	682b      	ldr	r3, [r5, #0]
 800a15a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800a15c:	687a      	ldr	r2, [r7, #4]
 800a15e:	68b9      	ldr	r1, [r7, #8]
 800a160:	68f8      	ldr	r0, [r7, #12]
 800a162:	f000 f849 	bl	800a1f8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	2201      	movs	r2, #1
 800a16c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	2201      	movs	r2, #1
 800a172:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	2200      	movs	r2, #0
 800a17a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800a17e:	2300      	movs	r3, #0
}
 800a180:	4618      	mov	r0, r3
 800a182:	3710      	adds	r7, #16
 800a184:	46bd      	mov	sp, r7
 800a186:	bdb0      	pop	{r4, r5, r7, pc}

0800a188 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 800a188:	b480      	push	{r7}
 800a18a:	b083      	sub	sp, #12
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
 800a190:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800a198:	2b01      	cmp	r3, #1
 800a19a:	d101      	bne.n	800a1a0 <HAL_LTDC_ProgramLineEvent+0x18>
 800a19c:	2302      	movs	r3, #2
 800a19e:	e023      	b.n	800a1e8 <HAL_LTDC_ProgramLineEvent+0x60>
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	2201      	movs	r2, #1
 800a1a4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2202      	movs	r2, #2
 800a1ac:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	f022 0201 	bic.w	r2, r2, #1
 800a1be:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 800a1c0:	4a0c      	ldr	r2, [pc, #48]	; (800a1f4 <HAL_LTDC_ProgramLineEvent+0x6c>)
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	f042 0201 	orr.w	r2, r2, #1
 800a1d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	2201      	movs	r2, #1
 800a1da:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800a1e6:	2300      	movs	r3, #0
}
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	370c      	adds	r7, #12
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f2:	4770      	bx	lr
 800a1f4:	50001000 	.word	0x50001000

0800a1f8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800a1f8:	b480      	push	{r7}
 800a1fa:	b089      	sub	sp, #36	; 0x24
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	60f8      	str	r0, [r7, #12]
 800a200:	60b9      	str	r1, [r7, #8]
 800a202:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800a204:	68bb      	ldr	r3, [r7, #8]
 800a206:	685a      	ldr	r2, [r3, #4]
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	68db      	ldr	r3, [r3, #12]
 800a20e:	0c1b      	lsrs	r3, r3, #16
 800a210:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a214:	4413      	add	r3, r2
 800a216:	041b      	lsls	r3, r3, #16
 800a218:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	461a      	mov	r2, r3
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	01db      	lsls	r3, r3, #7
 800a224:	4413      	add	r3, r2
 800a226:	3384      	adds	r3, #132	; 0x84
 800a228:	685b      	ldr	r3, [r3, #4]
 800a22a:	68fa      	ldr	r2, [r7, #12]
 800a22c:	6812      	ldr	r2, [r2, #0]
 800a22e:	4611      	mov	r1, r2
 800a230:	687a      	ldr	r2, [r7, #4]
 800a232:	01d2      	lsls	r2, r2, #7
 800a234:	440a      	add	r2, r1
 800a236:	3284      	adds	r2, #132	; 0x84
 800a238:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800a23c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a23e:	68bb      	ldr	r3, [r7, #8]
 800a240:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	68db      	ldr	r3, [r3, #12]
 800a248:	0c1b      	lsrs	r3, r3, #16
 800a24a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a24e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a250:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	4619      	mov	r1, r3
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	01db      	lsls	r3, r3, #7
 800a25c:	440b      	add	r3, r1
 800a25e:	3384      	adds	r3, #132	; 0x84
 800a260:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a262:	69fb      	ldr	r3, [r7, #28]
 800a264:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a266:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800a268:	68bb      	ldr	r3, [r7, #8]
 800a26a:	68da      	ldr	r2, [r3, #12]
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	68db      	ldr	r3, [r3, #12]
 800a272:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a276:	4413      	add	r3, r2
 800a278:	041b      	lsls	r3, r3, #16
 800a27a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	461a      	mov	r2, r3
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	01db      	lsls	r3, r3, #7
 800a286:	4413      	add	r3, r2
 800a288:	3384      	adds	r3, #132	; 0x84
 800a28a:	689b      	ldr	r3, [r3, #8]
 800a28c:	68fa      	ldr	r2, [r7, #12]
 800a28e:	6812      	ldr	r2, [r2, #0]
 800a290:	4611      	mov	r1, r2
 800a292:	687a      	ldr	r2, [r7, #4]
 800a294:	01d2      	lsls	r2, r2, #7
 800a296:	440a      	add	r2, r1
 800a298:	3284      	adds	r2, #132	; 0x84
 800a29a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800a29e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800a2a0:	68bb      	ldr	r3, [r7, #8]
 800a2a2:	689a      	ldr	r2, [r3, #8]
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	68db      	ldr	r3, [r3, #12]
 800a2aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a2ae:	4413      	add	r3, r2
 800a2b0:	1c5a      	adds	r2, r3, #1
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	4619      	mov	r1, r3
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	01db      	lsls	r3, r3, #7
 800a2bc:	440b      	add	r3, r1
 800a2be:	3384      	adds	r3, #132	; 0x84
 800a2c0:	4619      	mov	r1, r3
 800a2c2:	69fb      	ldr	r3, [r7, #28]
 800a2c4:	4313      	orrs	r3, r2
 800a2c6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	461a      	mov	r2, r3
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	01db      	lsls	r3, r3, #7
 800a2d2:	4413      	add	r3, r2
 800a2d4:	3384      	adds	r3, #132	; 0x84
 800a2d6:	691b      	ldr	r3, [r3, #16]
 800a2d8:	68fa      	ldr	r2, [r7, #12]
 800a2da:	6812      	ldr	r2, [r2, #0]
 800a2dc:	4611      	mov	r1, r2
 800a2de:	687a      	ldr	r2, [r7, #4]
 800a2e0:	01d2      	lsls	r2, r2, #7
 800a2e2:	440a      	add	r2, r1
 800a2e4:	3284      	adds	r2, #132	; 0x84
 800a2e6:	f023 0307 	bic.w	r3, r3, #7
 800a2ea:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	461a      	mov	r2, r3
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	01db      	lsls	r3, r3, #7
 800a2f6:	4413      	add	r3, r2
 800a2f8:	3384      	adds	r3, #132	; 0x84
 800a2fa:	461a      	mov	r2, r3
 800a2fc:	68bb      	ldr	r3, [r7, #8]
 800a2fe:	691b      	ldr	r3, [r3, #16]
 800a300:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800a302:	68bb      	ldr	r3, [r7, #8]
 800a304:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a308:	021b      	lsls	r3, r3, #8
 800a30a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800a30c:	68bb      	ldr	r3, [r7, #8]
 800a30e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800a312:	041b      	lsls	r3, r3, #16
 800a314:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800a316:	68bb      	ldr	r3, [r7, #8]
 800a318:	699b      	ldr	r3, [r3, #24]
 800a31a:	061b      	lsls	r3, r3, #24
 800a31c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	461a      	mov	r2, r3
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	01db      	lsls	r3, r3, #7
 800a328:	4413      	add	r3, r2
 800a32a:	3384      	adds	r3, #132	; 0x84
 800a32c:	699b      	ldr	r3, [r3, #24]
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	461a      	mov	r2, r3
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	01db      	lsls	r3, r3, #7
 800a338:	4413      	add	r3, r2
 800a33a:	3384      	adds	r3, #132	; 0x84
 800a33c:	461a      	mov	r2, r3
 800a33e:	2300      	movs	r3, #0
 800a340:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800a342:	68bb      	ldr	r3, [r7, #8]
 800a344:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a348:	461a      	mov	r2, r3
 800a34a:	69fb      	ldr	r3, [r7, #28]
 800a34c:	431a      	orrs	r2, r3
 800a34e:	69bb      	ldr	r3, [r7, #24]
 800a350:	431a      	orrs	r2, r3
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	4619      	mov	r1, r3
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	01db      	lsls	r3, r3, #7
 800a35c:	440b      	add	r3, r1
 800a35e:	3384      	adds	r3, #132	; 0x84
 800a360:	4619      	mov	r1, r3
 800a362:	697b      	ldr	r3, [r7, #20]
 800a364:	4313      	orrs	r3, r2
 800a366:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	461a      	mov	r2, r3
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	01db      	lsls	r3, r3, #7
 800a372:	4413      	add	r3, r2
 800a374:	3384      	adds	r3, #132	; 0x84
 800a376:	695b      	ldr	r3, [r3, #20]
 800a378:	68fa      	ldr	r2, [r7, #12]
 800a37a:	6812      	ldr	r2, [r2, #0]
 800a37c:	4611      	mov	r1, r2
 800a37e:	687a      	ldr	r2, [r7, #4]
 800a380:	01d2      	lsls	r2, r2, #7
 800a382:	440a      	add	r2, r1
 800a384:	3284      	adds	r2, #132	; 0x84
 800a386:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a38a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	461a      	mov	r2, r3
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	01db      	lsls	r3, r3, #7
 800a396:	4413      	add	r3, r2
 800a398:	3384      	adds	r3, #132	; 0x84
 800a39a:	461a      	mov	r2, r3
 800a39c:	68bb      	ldr	r3, [r7, #8]
 800a39e:	695b      	ldr	r3, [r3, #20]
 800a3a0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	461a      	mov	r2, r3
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	01db      	lsls	r3, r3, #7
 800a3ac:	4413      	add	r3, r2
 800a3ae:	3384      	adds	r3, #132	; 0x84
 800a3b0:	69da      	ldr	r2, [r3, #28]
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	4619      	mov	r1, r3
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	01db      	lsls	r3, r3, #7
 800a3bc:	440b      	add	r3, r1
 800a3be:	3384      	adds	r3, #132	; 0x84
 800a3c0:	4619      	mov	r1, r3
 800a3c2:	4b58      	ldr	r3, [pc, #352]	; (800a524 <LTDC_SetConfig+0x32c>)
 800a3c4:	4013      	ands	r3, r2
 800a3c6:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800a3c8:	68bb      	ldr	r3, [r7, #8]
 800a3ca:	69da      	ldr	r2, [r3, #28]
 800a3cc:	68bb      	ldr	r3, [r7, #8]
 800a3ce:	6a1b      	ldr	r3, [r3, #32]
 800a3d0:	68f9      	ldr	r1, [r7, #12]
 800a3d2:	6809      	ldr	r1, [r1, #0]
 800a3d4:	4608      	mov	r0, r1
 800a3d6:	6879      	ldr	r1, [r7, #4]
 800a3d8:	01c9      	lsls	r1, r1, #7
 800a3da:	4401      	add	r1, r0
 800a3dc:	3184      	adds	r1, #132	; 0x84
 800a3de:	4313      	orrs	r3, r2
 800a3e0:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	461a      	mov	r2, r3
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	01db      	lsls	r3, r3, #7
 800a3ec:	4413      	add	r3, r2
 800a3ee:	3384      	adds	r3, #132	; 0x84
 800a3f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	461a      	mov	r2, r3
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	01db      	lsls	r3, r3, #7
 800a3fc:	4413      	add	r3, r2
 800a3fe:	3384      	adds	r3, #132	; 0x84
 800a400:	461a      	mov	r2, r3
 800a402:	2300      	movs	r3, #0
 800a404:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	461a      	mov	r2, r3
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	01db      	lsls	r3, r3, #7
 800a410:	4413      	add	r3, r2
 800a412:	3384      	adds	r3, #132	; 0x84
 800a414:	461a      	mov	r2, r3
 800a416:	68bb      	ldr	r3, [r7, #8]
 800a418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a41a:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800a41c:	68bb      	ldr	r3, [r7, #8]
 800a41e:	691b      	ldr	r3, [r3, #16]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d102      	bne.n	800a42a <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800a424:	2304      	movs	r3, #4
 800a426:	61fb      	str	r3, [r7, #28]
 800a428:	e01b      	b.n	800a462 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800a42a:	68bb      	ldr	r3, [r7, #8]
 800a42c:	691b      	ldr	r3, [r3, #16]
 800a42e:	2b01      	cmp	r3, #1
 800a430:	d102      	bne.n	800a438 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800a432:	2303      	movs	r3, #3
 800a434:	61fb      	str	r3, [r7, #28]
 800a436:	e014      	b.n	800a462 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800a438:	68bb      	ldr	r3, [r7, #8]
 800a43a:	691b      	ldr	r3, [r3, #16]
 800a43c:	2b04      	cmp	r3, #4
 800a43e:	d00b      	beq.n	800a458 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800a440:	68bb      	ldr	r3, [r7, #8]
 800a442:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800a444:	2b02      	cmp	r3, #2
 800a446:	d007      	beq.n	800a458 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800a448:	68bb      	ldr	r3, [r7, #8]
 800a44a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800a44c:	2b03      	cmp	r3, #3
 800a44e:	d003      	beq.n	800a458 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800a450:	68bb      	ldr	r3, [r7, #8]
 800a452:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800a454:	2b07      	cmp	r3, #7
 800a456:	d102      	bne.n	800a45e <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800a458:	2302      	movs	r3, #2
 800a45a:	61fb      	str	r3, [r7, #28]
 800a45c:	e001      	b.n	800a462 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800a45e:	2301      	movs	r3, #1
 800a460:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	461a      	mov	r2, r3
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	01db      	lsls	r3, r3, #7
 800a46c:	4413      	add	r3, r2
 800a46e:	3384      	adds	r3, #132	; 0x84
 800a470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a472:	68fa      	ldr	r2, [r7, #12]
 800a474:	6812      	ldr	r2, [r2, #0]
 800a476:	4611      	mov	r1, r2
 800a478:	687a      	ldr	r2, [r7, #4]
 800a47a:	01d2      	lsls	r2, r2, #7
 800a47c:	440a      	add	r2, r1
 800a47e:	3284      	adds	r2, #132	; 0x84
 800a480:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800a484:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800a486:	68bb      	ldr	r3, [r7, #8]
 800a488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a48a:	69fa      	ldr	r2, [r7, #28]
 800a48c:	fb02 f303 	mul.w	r3, r2, r3
 800a490:	041a      	lsls	r2, r3, #16
 800a492:	68bb      	ldr	r3, [r7, #8]
 800a494:	6859      	ldr	r1, [r3, #4]
 800a496:	68bb      	ldr	r3, [r7, #8]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	1acb      	subs	r3, r1, r3
 800a49c:	69f9      	ldr	r1, [r7, #28]
 800a49e:	fb01 f303 	mul.w	r3, r1, r3
 800a4a2:	3307      	adds	r3, #7
 800a4a4:	68f9      	ldr	r1, [r7, #12]
 800a4a6:	6809      	ldr	r1, [r1, #0]
 800a4a8:	4608      	mov	r0, r1
 800a4aa:	6879      	ldr	r1, [r7, #4]
 800a4ac:	01c9      	lsls	r1, r1, #7
 800a4ae:	4401      	add	r1, r0
 800a4b0:	3184      	adds	r1, #132	; 0x84
 800a4b2:	4313      	orrs	r3, r2
 800a4b4:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	461a      	mov	r2, r3
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	01db      	lsls	r3, r3, #7
 800a4c0:	4413      	add	r3, r2
 800a4c2:	3384      	adds	r3, #132	; 0x84
 800a4c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	4619      	mov	r1, r3
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	01db      	lsls	r3, r3, #7
 800a4d0:	440b      	add	r3, r1
 800a4d2:	3384      	adds	r3, #132	; 0x84
 800a4d4:	4619      	mov	r1, r3
 800a4d6:	4b14      	ldr	r3, [pc, #80]	; (800a528 <LTDC_SetConfig+0x330>)
 800a4d8:	4013      	ands	r3, r2
 800a4da:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	461a      	mov	r2, r3
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	01db      	lsls	r3, r3, #7
 800a4e6:	4413      	add	r3, r2
 800a4e8:	3384      	adds	r3, #132	; 0x84
 800a4ea:	461a      	mov	r2, r3
 800a4ec:	68bb      	ldr	r3, [r7, #8]
 800a4ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4f0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	461a      	mov	r2, r3
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	01db      	lsls	r3, r3, #7
 800a4fc:	4413      	add	r3, r2
 800a4fe:	3384      	adds	r3, #132	; 0x84
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	68fa      	ldr	r2, [r7, #12]
 800a504:	6812      	ldr	r2, [r2, #0]
 800a506:	4611      	mov	r1, r2
 800a508:	687a      	ldr	r2, [r7, #4]
 800a50a:	01d2      	lsls	r2, r2, #7
 800a50c:	440a      	add	r2, r1
 800a50e:	3284      	adds	r2, #132	; 0x84
 800a510:	f043 0301 	orr.w	r3, r3, #1
 800a514:	6013      	str	r3, [r2, #0]
}
 800a516:	bf00      	nop
 800a518:	3724      	adds	r7, #36	; 0x24
 800a51a:	46bd      	mov	sp, r7
 800a51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a520:	4770      	bx	lr
 800a522:	bf00      	nop
 800a524:	fffff8f8 	.word	0xfffff8f8
 800a528:	fffff800 	.word	0xfffff800

0800a52c <HAL_MDMA_Abort>:
  *        and the Channel will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort(MDMA_HandleTypeDef *hmdma)
{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b084      	sub	sp, #16
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart =  HAL_GetTick();
 800a534:	f7fd fe30 	bl	8008198 <HAL_GetTick>
 800a538:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d101      	bne.n	800a544 <HAL_MDMA_Abort+0x18>
  {
    return HAL_ERROR;
 800a540:	2301      	movs	r3, #1
 800a542:	e04a      	b.n	800a5da <HAL_MDMA_Abort+0xae>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a54a:	b2db      	uxtb	r3, r3
 800a54c:	2b02      	cmp	r3, #2
 800a54e:	d008      	beq.n	800a562 <HAL_MDMA_Abort+0x36>
  {
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2280      	movs	r2, #128	; 0x80
 800a554:	669a      	str	r2, [r3, #104]	; 0x68

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	2200      	movs	r2, #0
 800a55a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a55e:	2301      	movs	r3, #1
 800a560:	e03b      	b.n	800a5da <HAL_MDMA_Abort+0xae>
  }
  else
  {
    /* Disable all the transfer interrupts */
    __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	68da      	ldr	r2, [r3, #12]
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
 800a570:	60da      	str	r2, [r3, #12]

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	68da      	ldr	r2, [r3, #12]
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	f022 0201 	bic.w	r2, r2, #1
 800a580:	60da      	str	r2, [r3, #12]

    /* Check if the MDMA Channel is effectively disabled */
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800a582:	e016      	b.n	800a5b2 <HAL_MDMA_Abort+0x86>
    {
      /* Check for the Timeout */
      if( (HAL_GetTick()  - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 800a584:	f7fd fe08 	bl	8008198 <HAL_GetTick>
 800a588:	4602      	mov	r2, r0
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	1ad3      	subs	r3, r2, r3
 800a58e:	2b05      	cmp	r3, #5
 800a590:	d90f      	bls.n	800a5b2 <HAL_MDMA_Abort+0x86>
      {
        /* Update error code */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_TIMEOUT;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a596:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	669a      	str	r2, [r3, #104]	; 0x68

        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Change the MDMA state */
        hmdma->State = HAL_MDMA_STATE_ERROR;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	2203      	movs	r2, #3
 800a5aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        return HAL_ERROR;
 800a5ae:	2301      	movs	r3, #1
 800a5b0:	e013      	b.n	800a5da <HAL_MDMA_Abort+0xae>
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	68db      	ldr	r3, [r3, #12]
 800a5b8:	f003 0301 	and.w	r3, r3, #1
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d1e1      	bne.n	800a584 <HAL_MDMA_Abort+0x58>
      }
    }

    /* Clear all interrupt flags */
    __HAL_MDMA_CLEAR_FLAG(hmdma, (MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BT | MDMA_FLAG_BRT | MDMA_FLAG_BFTC));
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	221f      	movs	r2, #31
 800a5c6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Change the MDMA state*/
    hmdma->State = HAL_MDMA_STATE_READY;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	2201      	movs	r2, #1
 800a5d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

  return HAL_OK;
 800a5d8:	2300      	movs	r3, #0
}
 800a5da:	4618      	mov	r0, r3
 800a5dc:	3710      	adds	r7, #16
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	bd80      	pop	{r7, pc}

0800a5e2 <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 800a5e2:	b480      	push	{r7}
 800a5e4:	b083      	sub	sp, #12
 800a5e6:	af00      	add	r7, sp, #0
 800a5e8:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d101      	bne.n	800a5f4 <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800a5f0:	2301      	movs	r3, #1
 800a5f2:	e017      	b.n	800a624 <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a5fa:	b2db      	uxtb	r3, r3
 800a5fc:	2b02      	cmp	r3, #2
 800a5fe:	d004      	beq.n	800a60a <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2280      	movs	r2, #128	; 0x80
 800a604:	669a      	str	r2, [r3, #104]	; 0x68

    return HAL_ERROR;
 800a606:	2301      	movs	r3, #1
 800a608:	e00c      	b.n	800a624 <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	2204      	movs	r2, #4
 800a60e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	68da      	ldr	r2, [r3, #12]
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	f022 0201 	bic.w	r2, r2, #1
 800a620:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 800a622:	2300      	movs	r3, #0
}
 800a624:	4618      	mov	r0, r3
 800a626:	370c      	adds	r7, #12
 800a628:	46bd      	mov	sp, r7
 800a62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62e:	4770      	bx	lr

0800a630 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b086      	sub	sp, #24
 800a634:	af02      	add	r7, sp, #8
 800a636:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a638:	2300      	movs	r3, #0
 800a63a:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 800a63c:	f7fd fdac 	bl	8008198 <HAL_GetTick>
 800a640:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d102      	bne.n	800a64e <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 800a648:	2301      	movs	r3, #1
 800a64a:	73fb      	strb	r3, [r7, #15]
 800a64c:	e0a5      	b.n	800a79a <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY    (hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP         (hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	2200      	movs	r2, #0
 800a652:	655a      	str	r2, [r3, #84]	; 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a658:	2b00      	cmp	r3, #0
 800a65a:	f040 809e 	bne.w	800a79a <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 800a65e:	6878      	ldr	r0, [r7, #4]
 800a660:	f7f6 fca4 	bl	8000fac <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 800a664:	f241 3188 	movw	r1, #5000	; 0x1388
 800a668:	6878      	ldr	r0, [r7, #4]
 800a66a:	f000 fd44 	bl	800b0f6 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	689a      	ldr	r2, [r3, #8]
 800a674:	4b4b      	ldr	r3, [pc, #300]	; (800a7a4 <HAL_OSPI_Init+0x174>)
 800a676:	4013      	ands	r3, r2
 800a678:	687a      	ldr	r2, [r7, #4]
 800a67a:	68d1      	ldr	r1, [r2, #12]
 800a67c:	687a      	ldr	r2, [r7, #4]
 800a67e:	6912      	ldr	r2, [r2, #16]
 800a680:	3a01      	subs	r2, #1
 800a682:	0412      	lsls	r2, r2, #16
 800a684:	4311      	orrs	r1, r2
 800a686:	687a      	ldr	r2, [r7, #4]
 800a688:	6952      	ldr	r2, [r2, #20]
 800a68a:	3a01      	subs	r2, #1
 800a68c:	0212      	lsls	r2, r2, #8
 800a68e:	4311      	orrs	r1, r2
 800a690:	687a      	ldr	r2, [r7, #4]
 800a692:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a694:	4311      	orrs	r1, r2
 800a696:	687a      	ldr	r2, [r7, #4]
 800a698:	69d2      	ldr	r2, [r2, #28]
 800a69a:	4311      	orrs	r1, r2
 800a69c:	687a      	ldr	r2, [r7, #4]
 800a69e:	6812      	ldr	r2, [r2, #0]
 800a6a0:	430b      	orrs	r3, r1
 800a6a2:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	68db      	ldr	r3, [r3, #12]
 800a6aa:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	6a1a      	ldr	r2, [r3, #32]
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	430a      	orrs	r2, r1
 800a6b8:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6be:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	430a      	orrs	r2, r1
 800a6ca:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	687a      	ldr	r2, [r7, #4]
 800a6d2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800a6d4:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	685b      	ldr	r3, [r3, #4]
 800a6e4:	3b01      	subs	r3, #1
 800a6e6:	021a      	lsls	r2, r3, #8
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	430a      	orrs	r2, r1
 800a6ee:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6f4:	9300      	str	r3, [sp, #0]
 800a6f6:	68bb      	ldr	r3, [r7, #8]
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	2120      	movs	r1, #32
 800a6fc:	6878      	ldr	r0, [r7, #4]
 800a6fe:	f000 fd45 	bl	800b18c <OSPI_WaitFlagStateUntilTimeout>
 800a702:	4603      	mov	r3, r0
 800a704:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800a706:	7bfb      	ldrb	r3, [r7, #15]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d146      	bne.n	800a79a <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	68db      	ldr	r3, [r3, #12]
 800a712:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a71a:	1e5a      	subs	r2, r3, #1
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	430a      	orrs	r2, r1
 800a722:	60da      	str	r2, [r3, #12]
                  ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	689a      	ldr	r2, [r3, #8]
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	430a      	orrs	r2, r1
 800a738:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800a742:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a74e:	431a      	orrs	r2, r3
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	430a      	orrs	r2, r1
 800a756:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                  (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	681a      	ldr	r2, [r3, #0]
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	f042 0201 	orr.w	r2, r2, #1
 800a768:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	699b      	ldr	r3, [r3, #24]
 800a76e:	2b02      	cmp	r3, #2
 800a770:	d107      	bne.n	800a782 <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	689a      	ldr	r2, [r3, #8]
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	f042 0202 	orr.w	r2, r2, #2
 800a780:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	68db      	ldr	r3, [r3, #12]
 800a786:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a78a:	d103      	bne.n	800a794 <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	2201      	movs	r2, #1
 800a790:	651a      	str	r2, [r3, #80]	; 0x50
 800a792:	e002      	b.n	800a79a <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2202      	movs	r2, #2
 800a798:	651a      	str	r2, [r3, #80]	; 0x50
      }
    }
  }

  /* Return function status */
  return status;
 800a79a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a79c:	4618      	mov	r0, r3
 800a79e:	3710      	adds	r7, #16
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bd80      	pop	{r7, pc}
 800a7a4:	f8e0f8f4 	.word	0xf8e0f8f4

0800a7a8 <HAL_OSPI_DeInit>:
  * @brief  De-Initialize the OSPI peripheral.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_DeInit(OSPI_HandleTypeDef *hospi)
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b084      	sub	sp, #16
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	73fb      	strb	r3, [r7, #15]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d102      	bne.n	800a7c0 <HAL_OSPI_DeInit+0x18>
  {
    status = HAL_ERROR;
 800a7ba:	2301      	movs	r3, #1
 800a7bc:	73fb      	strb	r3, [r7, #15]
 800a7be:	e015      	b.n	800a7ec <HAL_OSPI_DeInit+0x44>
    /* No error code can be set set as the handler is null */
  }
  else
  {
     /* Disable OctoSPI */
     __HAL_OSPI_DISABLE(hospi);
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	681a      	ldr	r2, [r3, #0]
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	f022 0201 	bic.w	r2, r2, #1
 800a7ce:	601a      	str	r2, [r3, #0]

     /* Disable free running clock if needed : must be done after OSPI disable */
     CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	689a      	ldr	r2, [r3, #8]
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	f022 0202 	bic.w	r2, r2, #2
 800a7de:	609a      	str	r2, [r3, #8]

     /* DeInit the low level hardware */
     hospi->MspDeInitCallback(hospi);
#else
     /* De-initialize the low-level hardware */
     HAL_OSPI_MspDeInit(hospi);
 800a7e0:	6878      	ldr	r0, [r7, #4]
 800a7e2:	f7f6 fc51 	bl	8001088 <HAL_OSPI_MspDeInit>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

     /* Reset the driver state */
     hospi->State = HAL_OSPI_STATE_RESET;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	651a      	str	r2, [r3, #80]	; 0x50
  }

  return status;
 800a7ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	3710      	adds	r7, #16
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	bd80      	pop	{r7, pc}
	...

0800a7f8 <HAL_OSPI_IRQHandler>:
  * @brief  Handle OSPI interrupt request.
  * @param  hospi : OSPI handle
  * @retval None
  */
void HAL_OSPI_IRQHandler(OSPI_HandleTypeDef *hospi)
{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b086      	sub	sp, #24
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	3350      	adds	r3, #80	; 0x50
 800a806:	617b      	str	r3, [r7, #20]
  uint32_t flag           = hospi->Instance->SR;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	6a1b      	ldr	r3, [r3, #32]
 800a80e:	613b      	str	r3, [r7, #16]
  uint32_t itsource       = hospi->Instance->CR;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	60fb      	str	r3, [r7, #12]
  uint32_t currentstate   = hospi->State;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a81c:	60bb      	str	r3, [r7, #8]

  /* OctoSPI fifo threshold interrupt occurred -------------------------------*/
  if (((flag & HAL_OSPI_FLAG_FT) != 0U) && ((itsource & HAL_OSPI_IT_FT) != 0U))
 800a81e:	693b      	ldr	r3, [r7, #16]
 800a820:	f003 0304 	and.w	r3, r3, #4
 800a824:	2b00      	cmp	r3, #0
 800a826:	d03a      	beq.n	800a89e <HAL_OSPI_IRQHandler+0xa6>
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d035      	beq.n	800a89e <HAL_OSPI_IRQHandler+0xa6>
  {
    if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 800a832:	68bb      	ldr	r3, [r7, #8]
 800a834:	2b18      	cmp	r3, #24
 800a836:	d10f      	bne.n	800a858 <HAL_OSPI_IRQHandler+0x60>
    {
      /* Write a data in the fifo */
      *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a83c:	781a      	ldrb	r2, [r3, #0]
 800a83e:	697b      	ldr	r3, [r7, #20]
 800a840:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a846:	1c5a      	adds	r2, r3, #1
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	641a      	str	r2, [r3, #64]	; 0x40
      hospi->XferCount--;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a850:	1e5a      	subs	r2, r3, #1
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	649a      	str	r2, [r3, #72]	; 0x48
 800a856:	e012      	b.n	800a87e <HAL_OSPI_IRQHandler+0x86>
    }
    else if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800a858:	68bb      	ldr	r3, [r7, #8]
 800a85a:	2b28      	cmp	r3, #40	; 0x28
 800a85c:	d10f      	bne.n	800a87e <HAL_OSPI_IRQHandler+0x86>
    {
      /* Read a data from the fifo */
      *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a862:	697a      	ldr	r2, [r7, #20]
 800a864:	7812      	ldrb	r2, [r2, #0]
 800a866:	b2d2      	uxtb	r2, r2
 800a868:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a86e:	1c5a      	adds	r2, r3, #1
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	641a      	str	r2, [r3, #64]	; 0x40
      hospi->XferCount--;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a878:	1e5a      	subs	r2, r3, #1
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	649a      	str	r2, [r3, #72]	; 0x48
    else
    {
      /* Nothing to do */
    }

    if (hospi->XferCount == 0U)
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a882:	2b00      	cmp	r3, #0
 800a884:	d107      	bne.n	800a896 <HAL_OSPI_IRQHandler+0x9e>
    {
      /* All data have been received or transmitted for the transfer */
      /* Disable fifo threshold interrupt */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_FT);
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	681a      	ldr	r2, [r3, #0]
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a894:	601a      	str	r2, [r3, #0]

    /* Fifo threshold callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->FifoThresholdCallback(hospi);
#else
    HAL_OSPI_FifoThresholdCallback(hospi);
 800a896:	6878      	ldr	r0, [r7, #4]
 800a898:	f000 fb7c 	bl	800af94 <HAL_OSPI_FifoThresholdCallback>
 800a89c:	e0e7      	b.n	800aa6e <HAL_OSPI_IRQHandler+0x276>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)*/
  }
  /* OctoSPI transfer complete interrupt occurred ----------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TC) != 0U) && ((itsource & HAL_OSPI_IT_TC) != 0U))
 800a89e:	693b      	ldr	r3, [r7, #16]
 800a8a0:	f003 0302 	and.w	r3, r3, #2
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d067      	beq.n	800a978 <HAL_OSPI_IRQHandler+0x180>
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d062      	beq.n	800a978 <HAL_OSPI_IRQHandler+0x180>
  {
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800a8b2:	68bb      	ldr	r3, [r7, #8]
 800a8b4:	2b28      	cmp	r3, #40	; 0x28
 800a8b6:	d131      	bne.n	800a91c <HAL_OSPI_IRQHandler+0x124>
    {
      if ((hospi->XferCount > 0U) && ((flag & OCTOSPI_SR_FLEVEL) != 0U))
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d015      	beq.n	800a8ec <HAL_OSPI_IRQHandler+0xf4>
 800a8c0:	693b      	ldr	r3, [r7, #16]
 800a8c2:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d010      	beq.n	800a8ec <HAL_OSPI_IRQHandler+0xf4>
      {
        /* Read the last data received in the fifo */
        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8ce:	697a      	ldr	r2, [r7, #20]
 800a8d0:	7812      	ldrb	r2, [r2, #0]
 800a8d2:	b2d2      	uxtb	r2, r2
 800a8d4:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8da:	1c5a      	adds	r2, r3, #1
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	641a      	str	r2, [r3, #64]	; 0x40
        hospi->XferCount--;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a8e4:	1e5a      	subs	r2, r3, #1
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	649a      	str	r2, [r3, #72]	; 0x48
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800a8ea:	e0bd      	b.n	800aa68 <HAL_OSPI_IRQHandler+0x270>
      }
      else if(hospi->XferCount == 0U)
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	f040 80b9 	bne.w	800aa68 <HAL_OSPI_IRQHandler+0x270>
      {
        /* Clear flag */
        hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	2202      	movs	r2, #2
 800a8fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Disable the interrupts */
        __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	681a      	ldr	r2, [r3, #0]
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 800a90c:	601a      	str	r2, [r3, #0]

        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	2202      	movs	r2, #2
 800a912:	651a      	str	r2, [r3, #80]	; 0x50

        /* RX complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->RxCpltCallback(hospi);
#else
        HAL_OSPI_RxCpltCallback(hospi);
 800a914:	6878      	ldr	r0, [r7, #4]
 800a916:	f000 fb51 	bl	800afbc <HAL_OSPI_RxCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800a91a:	e0a5      	b.n	800aa68 <HAL_OSPI_IRQHandler+0x270>
      }
    }
    else
    {
      /* Clear flag */
      hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	2202      	movs	r2, #2
 800a922:	625a      	str	r2, [r3, #36]	; 0x24

      /* Disable the interrupts */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	681a      	ldr	r2, [r3, #0]
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 800a932:	601a      	str	r2, [r3, #0]

      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	2202      	movs	r2, #2
 800a938:	651a      	str	r2, [r3, #80]	; 0x50

      if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 800a93a:	68bb      	ldr	r3, [r7, #8]
 800a93c:	2b18      	cmp	r3, #24
 800a93e:	d103      	bne.n	800a948 <HAL_OSPI_IRQHandler+0x150>
      {
        /* TX complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->TxCpltCallback(hospi);
#else
        HAL_OSPI_TxCpltCallback(hospi);
 800a940:	6878      	ldr	r0, [r7, #4]
 800a942:	f000 fb45 	bl	800afd0 <HAL_OSPI_TxCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800a946:	e08f      	b.n	800aa68 <HAL_OSPI_IRQHandler+0x270>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
      }
      else if (currentstate == HAL_OSPI_STATE_BUSY_CMD)
 800a948:	68bb      	ldr	r3, [r7, #8]
 800a94a:	2b08      	cmp	r3, #8
 800a94c:	d103      	bne.n	800a956 <HAL_OSPI_IRQHandler+0x15e>
      {
        /* Command complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->CmdCpltCallback(hospi);
#else
        HAL_OSPI_CmdCpltCallback(hospi);
 800a94e:	6878      	ldr	r0, [r7, #4]
 800a950:	f000 fb2a 	bl	800afa8 <HAL_OSPI_CmdCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800a954:	e088      	b.n	800aa68 <HAL_OSPI_IRQHandler+0x270>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
      }
      else if (currentstate == HAL_OSPI_STATE_ABORT)
 800a956:	68bb      	ldr	r3, [r7, #8]
 800a958:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a95c:	f040 8084 	bne.w	800aa68 <HAL_OSPI_IRQHandler+0x270>
      {
        if (hospi->ErrorCode == HAL_OSPI_ERROR_NONE)
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a964:	2b00      	cmp	r3, #0
 800a966:	d103      	bne.n	800a970 <HAL_OSPI_IRQHandler+0x178>
          /* Abort called by the user */
          /* Abort complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
          hospi->AbortCpltCallback(hospi);
#else
          HAL_OSPI_AbortCpltCallback(hospi);
 800a968:	6878      	ldr	r0, [r7, #4]
 800a96a:	f000 fb09 	bl	800af80 <HAL_OSPI_AbortCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800a96e:	e07b      	b.n	800aa68 <HAL_OSPI_IRQHandler+0x270>
          /* Abort due to an error (eg : DMA error) */
          /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
          hospi->ErrorCallback(hospi);
#else
          HAL_OSPI_ErrorCallback(hospi);
 800a970:	6878      	ldr	r0, [r7, #4]
 800a972:	f000 fafb 	bl	800af6c <HAL_OSPI_ErrorCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800a976:	e077      	b.n	800aa68 <HAL_OSPI_IRQHandler+0x270>
        /* Nothing to do */
      }
    }
  }
  /* OctoSPI status match interrupt occurred ---------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_SM) != 0U) && ((itsource & HAL_OSPI_IT_SM) != 0U))
 800a978:	693b      	ldr	r3, [r7, #16]
 800a97a:	f003 0308 	and.w	r3, r3, #8
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d01e      	beq.n	800a9c0 <HAL_OSPI_IRQHandler+0x1c8>
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d019      	beq.n	800a9c0 <HAL_OSPI_IRQHandler+0x1c8>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_SM;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	2208      	movs	r2, #8
 800a992:	625a      	str	r2, [r3, #36]	; 0x24

    /* Check if automatic poll mode stop is activated */
    if ((hospi->Instance->CR & OCTOSPI_CR_APMS) != 0U)
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d00a      	beq.n	800a9b8 <HAL_OSPI_IRQHandler+0x1c0>
    {
      /* Disable the interrupts */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_SM | HAL_OSPI_IT_TE);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	681a      	ldr	r2, [r3, #0]
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800a9b0:	601a      	str	r2, [r3, #0]

      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	2202      	movs	r2, #2
 800a9b6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Status match callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->StatusMatchCallback(hospi);
#else
    HAL_OSPI_StatusMatchCallback(hospi);
 800a9b8:	6878      	ldr	r0, [r7, #4]
 800a9ba:	f000 fb13 	bl	800afe4 <HAL_OSPI_StatusMatchCallback>
 800a9be:	e056      	b.n	800aa6e <HAL_OSPI_IRQHandler+0x276>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
  }
  /* OctoSPI transfer error interrupt occurred -------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TE) != 0U) && ((itsource & HAL_OSPI_IT_TE) != 0U))
 800a9c0:	693b      	ldr	r3, [r7, #16]
 800a9c2:	f003 0301 	and.w	r3, r3, #1
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d03c      	beq.n	800aa44 <HAL_OSPI_IRQHandler+0x24c>
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d037      	beq.n	800aa44 <HAL_OSPI_IRQHandler+0x24c>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_TE;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	2201      	movs	r2, #1
 800a9da:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable all interrupts */
    __HAL_OSPI_DISABLE_IT(hospi, (HAL_OSPI_IT_TO | HAL_OSPI_IT_SM | HAL_OSPI_IT_FT | HAL_OSPI_IT_TC | HAL_OSPI_IT_TE));
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	681a      	ldr	r2, [r3, #0]
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800a9ea:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_TRANSFER;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	2202      	movs	r2, #2
 800a9f0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	f003 0304 	and.w	r3, r3, #4
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d01a      	beq.n	800aa36 <HAL_OSPI_IRQHandler+0x23e>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	681a      	ldr	r2, [r3, #0]
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	f022 0204 	bic.w	r2, r2, #4
 800aa0e:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      hospi->hmdma->XferAbortCallback = OSPI_DMAAbortCplt;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa14:	4a18      	ldr	r2, [pc, #96]	; (800aa78 <HAL_OSPI_IRQHandler+0x280>)
 800aa16:	659a      	str	r2, [r3, #88]	; 0x58
      if (HAL_MDMA_Abort_IT(hospi->hmdma) != HAL_OK)
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	f7ff fde0 	bl	800a5e2 <HAL_MDMA_Abort_IT>
 800aa22:	4603      	mov	r3, r0
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d021      	beq.n	800aa6c <HAL_OSPI_IRQHandler+0x274>
      {
        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	2202      	movs	r2, #2
 800aa2c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->ErrorCallback(hospi);
#else
        HAL_OSPI_ErrorCallback(hospi);
 800aa2e:	6878      	ldr	r0, [r7, #4]
 800aa30:	f000 fa9c 	bl	800af6c <HAL_OSPI_ErrorCallback>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 800aa34:	e01a      	b.n	800aa6c <HAL_OSPI_IRQHandler+0x274>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	2202      	movs	r2, #2
 800aa3a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
      hospi->ErrorCallback(hospi);
#else
      HAL_OSPI_ErrorCallback(hospi);
 800aa3c:	6878      	ldr	r0, [r7, #4]
 800aa3e:	f000 fa95 	bl	800af6c <HAL_OSPI_ErrorCallback>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 800aa42:	e013      	b.n	800aa6c <HAL_OSPI_IRQHandler+0x274>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
    }
  }
  /* OctoSPI timeout interrupt occurred --------------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TO) != 0U) && ((itsource & HAL_OSPI_IT_TO) != 0U))
 800aa44:	693b      	ldr	r3, [r7, #16]
 800aa46:	f003 0310 	and.w	r3, r3, #16
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d00f      	beq.n	800aa6e <HAL_OSPI_IRQHandler+0x276>
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d00a      	beq.n	800aa6e <HAL_OSPI_IRQHandler+0x276>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_TO;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	2210      	movs	r2, #16
 800aa5e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Timeout callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->TimeOutCallback(hospi);
#else
    HAL_OSPI_TimeOutCallback(hospi);
 800aa60:	6878      	ldr	r0, [r7, #4]
 800aa62:	f000 fac9 	bl	800aff8 <HAL_OSPI_TimeOutCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800aa66:	e002      	b.n	800aa6e <HAL_OSPI_IRQHandler+0x276>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800aa68:	bf00      	nop
 800aa6a:	e000      	b.n	800aa6e <HAL_OSPI_IRQHandler+0x276>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 800aa6c:	bf00      	nop
}
 800aa6e:	bf00      	nop
 800aa70:	3718      	adds	r7, #24
 800aa72:	46bd      	mov	sp, r7
 800aa74:	bd80      	pop	{r7, pc}
 800aa76:	bf00      	nop
 800aa78:	0800b115 	.word	0x0800b115

0800aa7c <HAL_OSPI_Command>:
  * @param  cmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Command(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd, uint32_t Timeout)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b08a      	sub	sp, #40	; 0x28
 800aa80:	af02      	add	r7, sp, #8
 800aa82:	60f8      	str	r0, [r7, #12]
 800aa84:	60b9      	str	r1, [r7, #8]
 800aa86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 800aa88:	f7fd fb86 	bl	8008198 <HAL_GetTick>
 800aa8c:	61b8      	str	r0, [r7, #24]
    assert_param(IS_OSPI_ALT_BYTES_SIZE    (cmd->AlternateBytesSize));
    assert_param(IS_OSPI_ALT_BYTES_DTR_MODE(cmd->AlternateBytesDtrMode));
  }

  assert_param(IS_OSPI_DATA_MODE(cmd->DataMode));
  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800aa8e:	68bb      	ldr	r3, [r7, #8]
 800aa90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa92:	2b00      	cmp	r3, #0

  assert_param(IS_OSPI_DQS_MODE (cmd->DQSMode));
  assert_param(IS_OSPI_SIOO_MODE(cmd->SIOOMode));

  /* Check the state of the driver */
  state = hospi->State;
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa98:	617b      	str	r3, [r7, #20]
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 800aa9a:	697b      	ldr	r3, [r7, #20]
 800aa9c:	2b02      	cmp	r3, #2
 800aa9e:	d104      	bne.n	800aaaa <HAL_OSPI_Command+0x2e>
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	68db      	ldr	r3, [r3, #12]
 800aaa4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800aaa8:	d115      	bne.n	800aad6 <HAL_OSPI_Command+0x5a>
 800aaaa:	697b      	ldr	r3, [r7, #20]
 800aaac:	2b14      	cmp	r3, #20
 800aaae:	d107      	bne.n	800aac0 <HAL_OSPI_Command+0x44>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800aab0:	68bb      	ldr	r3, [r7, #8]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	2b02      	cmp	r3, #2
 800aab6:	d00e      	beq.n	800aad6 <HAL_OSPI_Command+0x5a>
                                                || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 800aab8:	68bb      	ldr	r3, [r7, #8]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	2b03      	cmp	r3, #3
 800aabe:	d00a      	beq.n	800aad6 <HAL_OSPI_Command+0x5a>
 800aac0:	697b      	ldr	r3, [r7, #20]
 800aac2:	2b24      	cmp	r3, #36	; 0x24
 800aac4:	d15b      	bne.n	800ab7e <HAL_OSPI_Command+0x102>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 800aac6:	68bb      	ldr	r3, [r7, #8]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	2b01      	cmp	r3, #1
 800aacc:	d003      	beq.n	800aad6 <HAL_OSPI_Command+0x5a>
                                                   (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))))
 800aace:	68bb      	ldr	r3, [r7, #8]
 800aad0:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 800aad2:	2b03      	cmp	r3, #3
 800aad4:	d153      	bne.n	800ab7e <HAL_OSPI_Command+0x102>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	9300      	str	r3, [sp, #0]
 800aada:	69bb      	ldr	r3, [r7, #24]
 800aadc:	2200      	movs	r2, #0
 800aade:	2120      	movs	r1, #32
 800aae0:	68f8      	ldr	r0, [r7, #12]
 800aae2:	f000 fb53 	bl	800b18c <OSPI_WaitFlagStateUntilTimeout>
 800aae6:	4603      	mov	r3, r0
 800aae8:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 800aaea:	7ffb      	ldrb	r3, [r7, #31]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d14c      	bne.n	800ab8a <HAL_OSPI_Command+0x10e>
    {
      /* Initialize error code */
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the registers */
      status = OSPI_ConfigCmd(hospi, cmd);
 800aaf6:	68b9      	ldr	r1, [r7, #8]
 800aaf8:	68f8      	ldr	r0, [r7, #12]
 800aafa:	f000 fb7f 	bl	800b1fc <OSPI_ConfigCmd>
 800aafe:	4603      	mov	r3, r0
 800ab00:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 800ab02:	7ffb      	ldrb	r3, [r7, #31]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d140      	bne.n	800ab8a <HAL_OSPI_Command+0x10e>
      {
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 800ab08:	68bb      	ldr	r3, [r7, #8]
 800ab0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d10e      	bne.n	800ab2e <HAL_OSPI_Command+0xb2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	9300      	str	r3, [sp, #0]
 800ab14:	69bb      	ldr	r3, [r7, #24]
 800ab16:	2201      	movs	r2, #1
 800ab18:	2102      	movs	r1, #2
 800ab1a:	68f8      	ldr	r0, [r7, #12]
 800ab1c:	f000 fb36 	bl	800b18c <OSPI_WaitFlagStateUntilTimeout>
 800ab20:	4603      	mov	r3, r0
 800ab22:	77fb      	strb	r3, [r7, #31]

          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	2202      	movs	r2, #2
 800ab2a:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 800ab2c:	e02d      	b.n	800ab8a <HAL_OSPI_Command+0x10e>
        }
        else
        {
          /* Update the state */
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 800ab2e:	68bb      	ldr	r3, [r7, #8]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d103      	bne.n	800ab3e <HAL_OSPI_Command+0xc2>
          {
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	2204      	movs	r2, #4
 800ab3a:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 800ab3c:	e025      	b.n	800ab8a <HAL_OSPI_Command+0x10e>
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 800ab3e:	68bb      	ldr	r3, [r7, #8]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	2b01      	cmp	r3, #1
 800ab44:	d10b      	bne.n	800ab5e <HAL_OSPI_Command+0xe2>
          {
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab4a:	2b24      	cmp	r3, #36	; 0x24
 800ab4c:	d103      	bne.n	800ab56 <HAL_OSPI_Command+0xda>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	2204      	movs	r2, #4
 800ab52:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 800ab54:	e019      	b.n	800ab8a <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	2214      	movs	r2, #20
 800ab5a:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 800ab5c:	e015      	b.n	800ab8a <HAL_OSPI_Command+0x10e>
            }
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800ab5e:	68bb      	ldr	r3, [r7, #8]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	2b02      	cmp	r3, #2
 800ab64:	d111      	bne.n	800ab8a <HAL_OSPI_Command+0x10e>
          {
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab6a:	2b14      	cmp	r3, #20
 800ab6c:	d103      	bne.n	800ab76 <HAL_OSPI_Command+0xfa>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	2204      	movs	r2, #4
 800ab72:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 800ab74:	e009      	b.n	800ab8a <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	2224      	movs	r2, #36	; 0x24
 800ab7a:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 800ab7c:	e005      	b.n	800ab8a <HAL_OSPI_Command+0x10e>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 800ab7e:	2301      	movs	r3, #1
 800ab80:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	2210      	movs	r2, #16
 800ab86:	655a      	str	r2, [r3, #84]	; 0x54
 800ab88:	e000      	b.n	800ab8c <HAL_OSPI_Command+0x110>
    if (status == HAL_OK)
 800ab8a:	bf00      	nop
  }

  /* Return function status */
  return status;
 800ab8c:	7ffb      	ldrb	r3, [r7, #31]
}
 800ab8e:	4618      	mov	r0, r3
 800ab90:	3720      	adds	r7, #32
 800ab92:	46bd      	mov	sp, r7
 800ab94:	bd80      	pop	{r7, pc}

0800ab96 <HAL_OSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Transmit(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 800ab96:	b580      	push	{r7, lr}
 800ab98:	b08a      	sub	sp, #40	; 0x28
 800ab9a:	af02      	add	r7, sp, #8
 800ab9c:	60f8      	str	r0, [r7, #12]
 800ab9e:	60b9      	str	r1, [r7, #8]
 800aba0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800aba2:	f7fd faf9 	bl	8008198 <HAL_GetTick>
 800aba6:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	3350      	adds	r3, #80	; 0x50
 800abae:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 800abb0:	68bb      	ldr	r3, [r7, #8]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d105      	bne.n	800abc2 <HAL_OSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
 800abb6:	2301      	movs	r3, #1
 800abb8:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	2208      	movs	r2, #8
 800abbe:	655a      	str	r2, [r3, #84]	; 0x54
 800abc0:	e057      	b.n	800ac72 <HAL_OSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800abc6:	2b04      	cmp	r3, #4
 800abc8:	d14e      	bne.n	800ac68 <HAL_OSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abd0:	1c5a      	adds	r2, r3, #1
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	649a      	str	r2, [r3, #72]	; 0x48
      hospi->XferSize  = hospi->XferCount;
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	645a      	str	r2, [r3, #68]	; 0x44
      hospi->pBuffPtr  = pData;
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	68ba      	ldr	r2, [r7, #8]
 800abe2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	681a      	ldr	r2, [r3, #0]
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800abf2:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	9300      	str	r3, [sp, #0]
 800abf8:	69bb      	ldr	r3, [r7, #24]
 800abfa:	2201      	movs	r2, #1
 800abfc:	2104      	movs	r1, #4
 800abfe:	68f8      	ldr	r0, [r7, #12]
 800ac00:	f000 fac4 	bl	800b18c <OSPI_WaitFlagStateUntilTimeout>
 800ac04:	4603      	mov	r3, r0
 800ac06:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800ac08:	7ffb      	ldrb	r3, [r7, #31]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d113      	bne.n	800ac36 <HAL_OSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac12:	781a      	ldrb	r2, [r3, #0]
 800ac14:	697b      	ldr	r3, [r7, #20]
 800ac16:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac1c:	1c5a      	adds	r2, r3, #1
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	641a      	str	r2, [r3, #64]	; 0x40
        hospi->XferCount--;
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac26:	1e5a      	subs	r2, r3, #1
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	649a      	str	r2, [r3, #72]	; 0x48
      } while (hospi->XferCount > 0U);
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d1df      	bne.n	800abf4 <HAL_OSPI_Transmit+0x5e>
 800ac34:	e000      	b.n	800ac38 <HAL_OSPI_Transmit+0xa2>
          break;
 800ac36:	bf00      	nop

      if (status == HAL_OK)
 800ac38:	7ffb      	ldrb	r3, [r7, #31]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d119      	bne.n	800ac72 <HAL_OSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	9300      	str	r3, [sp, #0]
 800ac42:	69bb      	ldr	r3, [r7, #24]
 800ac44:	2201      	movs	r2, #1
 800ac46:	2102      	movs	r1, #2
 800ac48:	68f8      	ldr	r0, [r7, #12]
 800ac4a:	f000 fa9f 	bl	800b18c <OSPI_WaitFlagStateUntilTimeout>
 800ac4e:	4603      	mov	r3, r0
 800ac50:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800ac52:	7ffb      	ldrb	r3, [r7, #31]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d10c      	bne.n	800ac72 <HAL_OSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	2202      	movs	r2, #2
 800ac5e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	2202      	movs	r2, #2
 800ac64:	651a      	str	r2, [r3, #80]	; 0x50
 800ac66:	e004      	b.n	800ac72 <HAL_OSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 800ac68:	2301      	movs	r3, #1
 800ac6a:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	2210      	movs	r2, #16
 800ac70:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }

  /* Return function status */
  return status;
 800ac72:	7ffb      	ldrb	r3, [r7, #31]
}
 800ac74:	4618      	mov	r0, r3
 800ac76:	3720      	adds	r7, #32
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	bd80      	pop	{r7, pc}

0800ac7c <HAL_OSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Receive(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b08c      	sub	sp, #48	; 0x30
 800ac80:	af02      	add	r7, sp, #8
 800ac82:	60f8      	str	r0, [r7, #12]
 800ac84:	60b9      	str	r1, [r7, #8]
 800ac86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800ac88:	f7fd fa86 	bl	8008198 <HAL_GetTick>
 800ac8c:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	3350      	adds	r3, #80	; 0x50
 800ac94:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hospi->Instance->AR;
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac9c:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hospi->Instance->IR;
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800aca6:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 800aca8:	68bb      	ldr	r3, [r7, #8]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d106      	bne.n	800acbc <HAL_OSPI_Receive+0x40>
  {
    status = HAL_ERROR;
 800acae:	2301      	movs	r3, #1
 800acb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	2208      	movs	r2, #8
 800acb8:	655a      	str	r2, [r3, #84]	; 0x54
 800acba:	e07c      	b.n	800adb6 <HAL_OSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800acc0:	2b04      	cmp	r3, #4
 800acc2:	d172      	bne.n	800adaa <HAL_OSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acca:	1c5a      	adds	r2, r3, #1
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	649a      	str	r2, [r3, #72]	; 0x48
      hospi->XferSize  = hospi->XferCount;
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	645a      	str	r2, [r3, #68]	; 0x44
      hospi->pBuffPtr  = pData;
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	68ba      	ldr	r2, [r7, #8]
 800acdc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800acf0:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	68db      	ldr	r3, [r3, #12]
 800acf6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800acfa:	d104      	bne.n	800ad06 <HAL_OSPI_Receive+0x8a>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	69ba      	ldr	r2, [r7, #24]
 800ad02:	649a      	str	r2, [r3, #72]	; 0x48
 800ad04:	e011      	b.n	800ad2a <HAL_OSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800ad0e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d004      	beq.n	800ad20 <HAL_OSPI_Receive+0xa4>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	69ba      	ldr	r2, [r7, #24]
 800ad1c:	649a      	str	r2, [r3, #72]	; 0x48
 800ad1e:	e004      	b.n	800ad2a <HAL_OSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	697a      	ldr	r2, [r7, #20]
 800ad26:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	9300      	str	r3, [sp, #0]
 800ad2e:	6a3b      	ldr	r3, [r7, #32]
 800ad30:	2201      	movs	r2, #1
 800ad32:	2106      	movs	r1, #6
 800ad34:	68f8      	ldr	r0, [r7, #12]
 800ad36:	f000 fa29 	bl	800b18c <OSPI_WaitFlagStateUntilTimeout>
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status != HAL_OK)
 800ad40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d114      	bne.n	800ad72 <HAL_OSPI_Receive+0xf6>
        {
          break;
        }

        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad4c:	69fa      	ldr	r2, [r7, #28]
 800ad4e:	7812      	ldrb	r2, [r2, #0]
 800ad50:	b2d2      	uxtb	r2, r2
 800ad52:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad58:	1c5a      	adds	r2, r3, #1
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	641a      	str	r2, [r3, #64]	; 0x40
        hospi->XferCount--;
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ad62:	1e5a      	subs	r2, r3, #1
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	649a      	str	r2, [r3, #72]	; 0x48
      } while(hospi->XferCount > 0U);
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d1dc      	bne.n	800ad2a <HAL_OSPI_Receive+0xae>
 800ad70:	e000      	b.n	800ad74 <HAL_OSPI_Receive+0xf8>
          break;
 800ad72:	bf00      	nop

      if (status == HAL_OK)
 800ad74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d11c      	bne.n	800adb6 <HAL_OSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	9300      	str	r3, [sp, #0]
 800ad80:	6a3b      	ldr	r3, [r7, #32]
 800ad82:	2201      	movs	r2, #1
 800ad84:	2102      	movs	r1, #2
 800ad86:	68f8      	ldr	r0, [r7, #12]
 800ad88:	f000 fa00 	bl	800b18c <OSPI_WaitFlagStateUntilTimeout>
 800ad8c:	4603      	mov	r3, r0
 800ad8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status == HAL_OK)
 800ad92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d10d      	bne.n	800adb6 <HAL_OSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	2202      	movs	r2, #2
 800ada0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	2202      	movs	r2, #2
 800ada6:	651a      	str	r2, [r3, #80]	; 0x50
 800ada8:	e005      	b.n	800adb6 <HAL_OSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 800adaa:	2301      	movs	r3, #1
 800adac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	2210      	movs	r2, #16
 800adb4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }

  /* Return function status */
  return status;
 800adb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800adba:	4618      	mov	r0, r3
 800adbc:	3728      	adds	r7, #40	; 0x28
 800adbe:	46bd      	mov	sp, r7
 800adc0:	bd80      	pop	{r7, pc}

0800adc2 <HAL_OSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_AutoPolling(OSPI_HandleTypeDef *hospi, OSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 800adc2:	b580      	push	{r7, lr}
 800adc4:	b08a      	sub	sp, #40	; 0x28
 800adc6:	af02      	add	r7, sp, #8
 800adc8:	60f8      	str	r0, [r7, #12]
 800adca:	60b9      	str	r1, [r7, #8]
 800adcc:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800adce:	f7fd f9e3 	bl	8008198 <HAL_GetTick>
 800add2:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = hospi->Instance->AR;
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800adda:	617b      	str	r3, [r7, #20]
  uint32_t ir_reg = hospi->Instance->IR;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800ade4:	613b      	str	r3, [r7, #16]
  assert_param(IS_OSPI_AUTOMATIC_STOP   (cfg->AutomaticStop));
  assert_param(IS_OSPI_INTERVAL         (cfg->Interval));
  assert_param(IS_OSPI_STATUS_BYTES_SIZE(dlr_reg+1U));

  /* Check the state */
  if ((hospi->State == HAL_OSPI_STATE_CMD_CFG) && (cfg->AutomaticStop == HAL_OSPI_AUTOMATIC_STOP_ENABLE))
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800adea:	2b04      	cmp	r3, #4
 800adec:	d164      	bne.n	800aeb8 <HAL_OSPI_AutoPolling+0xf6>
 800adee:	68bb      	ldr	r3, [r7, #8]
 800adf0:	68db      	ldr	r3, [r3, #12]
 800adf2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800adf6:	d15f      	bne.n	800aeb8 <HAL_OSPI_AutoPolling+0xf6>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	9300      	str	r3, [sp, #0]
 800adfc:	69bb      	ldr	r3, [r7, #24]
 800adfe:	2200      	movs	r2, #0
 800ae00:	2120      	movs	r1, #32
 800ae02:	68f8      	ldr	r0, [r7, #12]
 800ae04:	f000 f9c2 	bl	800b18c <OSPI_WaitFlagStateUntilTimeout>
 800ae08:	4603      	mov	r3, r0
 800ae0a:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 800ae0c:	7ffb      	ldrb	r3, [r7, #31]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d158      	bne.n	800aec4 <HAL_OSPI_AutoPolling+0x102>
    {
      /* Configure registers */
      WRITE_REG (hospi->Instance->PSMAR, cfg->Match);
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	68ba      	ldr	r2, [r7, #8]
 800ae18:	6812      	ldr	r2, [r2, #0]
 800ae1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      WRITE_REG (hospi->Instance->PSMKR, cfg->Mask);
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	68ba      	ldr	r2, [r7, #8]
 800ae24:	6852      	ldr	r2, [r2, #4]
 800ae26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      WRITE_REG (hospi->Instance->PIR,   cfg->Interval);
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	68ba      	ldr	r2, [r7, #8]
 800ae30:	6912      	ldr	r2, [r2, #16]
 800ae32:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      MODIFY_REG(hospi->Instance->CR,    (OCTOSPI_CR_PMM | OCTOSPI_CR_APMS | OCTOSPI_CR_FMODE),
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	f023 5243 	bic.w	r2, r3, #817889280	; 0x30c00000
 800ae40:	68bb      	ldr	r3, [r7, #8]
 800ae42:	6899      	ldr	r1, [r3, #8]
 800ae44:	68bb      	ldr	r3, [r7, #8]
 800ae46:	68db      	ldr	r3, [r3, #12]
 800ae48:	430b      	orrs	r3, r1
 800ae4a:	431a      	orrs	r2, r3
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800ae54:	601a      	str	r2, [r3, #0]
                 (cfg->MatchMode | cfg->AutomaticStop | OSPI_FUNCTIONAL_MODE_AUTO_POLLING));

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	68db      	ldr	r3, [r3, #12]
 800ae5a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ae5e:	d104      	bne.n	800ae6a <HAL_OSPI_AutoPolling+0xa8>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	697a      	ldr	r2, [r7, #20]
 800ae66:	649a      	str	r2, [r3, #72]	; 0x48
 800ae68:	e011      	b.n	800ae8e <HAL_OSPI_AutoPolling+0xcc>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800ae72:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d004      	beq.n	800ae84 <HAL_OSPI_AutoPolling+0xc2>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	697a      	ldr	r2, [r7, #20]
 800ae80:	649a      	str	r2, [r3, #72]	; 0x48
 800ae82:	e004      	b.n	800ae8e <HAL_OSPI_AutoPolling+0xcc>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	693a      	ldr	r2, [r7, #16]
 800ae8a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        }
      }

      /* Wait till status match flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_SM, SET, tickstart, Timeout);
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	9300      	str	r3, [sp, #0]
 800ae92:	69bb      	ldr	r3, [r7, #24]
 800ae94:	2201      	movs	r2, #1
 800ae96:	2108      	movs	r1, #8
 800ae98:	68f8      	ldr	r0, [r7, #12]
 800ae9a:	f000 f977 	bl	800b18c <OSPI_WaitFlagStateUntilTimeout>
 800ae9e:	4603      	mov	r3, r0
 800aea0:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 800aea2:	7ffb      	ldrb	r3, [r7, #31]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d10d      	bne.n	800aec4 <HAL_OSPI_AutoPolling+0x102>
      {
        /* Clear status match flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_SM);
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	2208      	movs	r2, #8
 800aeae:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	2202      	movs	r2, #2
 800aeb4:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 800aeb6:	e005      	b.n	800aec4 <HAL_OSPI_AutoPolling+0x102>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 800aeb8:	2301      	movs	r3, #1
 800aeba:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	2210      	movs	r2, #16
 800aec0:	655a      	str	r2, [r3, #84]	; 0x54
 800aec2:	e000      	b.n	800aec6 <HAL_OSPI_AutoPolling+0x104>
    if (status == HAL_OK)
 800aec4:	bf00      	nop
  }

  /* Return function status */
  return status;
 800aec6:	7ffb      	ldrb	r3, [r7, #31]
}
 800aec8:	4618      	mov	r0, r3
 800aeca:	3720      	adds	r7, #32
 800aecc:	46bd      	mov	sp, r7
 800aece:	bd80      	pop	{r7, pc}

0800aed0 <HAL_OSPI_MemoryMapped>:
  * @param  cfg   : structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_MemoryMapped(OSPI_HandleTypeDef *hospi, OSPI_MemoryMappedTypeDef *cfg)
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b086      	sub	sp, #24
 800aed4:	af02      	add	r7, sp, #8
 800aed6:	6078      	str	r0, [r7, #4]
 800aed8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800aeda:	f7fd f95d 	bl	8008198 <HAL_GetTick>
 800aede:	60b8      	str	r0, [r7, #8]

  /* Check the parameters of the memory-mapped configuration structure */
  assert_param(IS_OSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Check the state */
  if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aee4:	2b04      	cmp	r3, #4
 800aee6:	d134      	bne.n	800af52 <HAL_OSPI_MemoryMapped+0x82>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aeec:	9300      	str	r3, [sp, #0]
 800aeee:	68bb      	ldr	r3, [r7, #8]
 800aef0:	2200      	movs	r2, #0
 800aef2:	2120      	movs	r1, #32
 800aef4:	6878      	ldr	r0, [r7, #4]
 800aef6:	f000 f949 	bl	800b18c <OSPI_WaitFlagStateUntilTimeout>
 800aefa:	4603      	mov	r3, r0
 800aefc:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800aefe:	7bfb      	ldrb	r3, [r7, #15]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d12b      	bne.n	800af5c <HAL_OSPI_MemoryMapped+0x8c>
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_BUSY_MEM_MAPPED;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2288      	movs	r2, #136	; 0x88
 800af08:	651a      	str	r2, [r3, #80]	; 0x50

      if (cfg->TimeOutActivation == HAL_OSPI_TIMEOUT_COUNTER_ENABLE)
 800af0a:	683b      	ldr	r3, [r7, #0]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	2b08      	cmp	r3, #8
 800af10:	d111      	bne.n	800af36 <HAL_OSPI_MemoryMapped+0x66>
      {
        assert_param(IS_OSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure register */
        WRITE_REG(hospi->Instance->LPTR, cfg->TimeOutPeriod);
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	683a      	ldr	r2, [r7, #0]
 800af18:	6852      	ldr	r2, [r2, #4]
 800af1a:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130

        /* Clear flags related to interrupt */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TO);
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	2210      	movs	r2, #16
 800af24:	625a      	str	r2, [r3, #36]	; 0x24

        /* Enable the timeout interrupt */
        __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TO);
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	681a      	ldr	r2, [r3, #0]
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800af34:	601a      	str	r2, [r3, #0]
      }

      /* Configure CR register with functional mode as memory-mapped */
      MODIFY_REG(hospi->Instance->CR, (OCTOSPI_CR_TCEN | OCTOSPI_CR_FMODE),
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	681a      	ldr	r2, [r3, #0]
 800af3c:	4b0a      	ldr	r3, [pc, #40]	; (800af68 <HAL_OSPI_MemoryMapped+0x98>)
 800af3e:	4013      	ands	r3, r2
 800af40:	683a      	ldr	r2, [r7, #0]
 800af42:	6812      	ldr	r2, [r2, #0]
 800af44:	431a      	orrs	r2, r3
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800af4e:	601a      	str	r2, [r3, #0]
 800af50:	e004      	b.n	800af5c <HAL_OSPI_MemoryMapped+0x8c>
                 (cfg->TimeOutActivation | OSPI_FUNCTIONAL_MODE_MEMORY_MAPPED));
    }
  }
  else
  {
    status = HAL_ERROR;
 800af52:	2301      	movs	r3, #1
 800af54:	73fb      	strb	r3, [r7, #15]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	2210      	movs	r2, #16
 800af5a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Return function status */
  return status;
 800af5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800af5e:	4618      	mov	r0, r3
 800af60:	3710      	adds	r7, #16
 800af62:	46bd      	mov	sp, r7
 800af64:	bd80      	pop	{r7, pc}
 800af66:	bf00      	nop
 800af68:	cffffff7 	.word	0xcffffff7

0800af6c <HAL_OSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_ErrorCallback(OSPI_HandleTypeDef *hospi)
{
 800af6c:	b480      	push	{r7}
 800af6e:	b083      	sub	sp, #12
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_ErrorCallback could be implemented in the user file
   */
}
 800af74:	bf00      	nop
 800af76:	370c      	adds	r7, #12
 800af78:	46bd      	mov	sp, r7
 800af7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7e:	4770      	bx	lr

0800af80 <HAL_OSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_AbortCpltCallback(OSPI_HandleTypeDef *hospi)
{
 800af80:	b480      	push	{r7}
 800af82:	b083      	sub	sp, #12
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_AbortCpltCallback could be implemented in the user file
   */
}
 800af88:	bf00      	nop
 800af8a:	370c      	adds	r7, #12
 800af8c:	46bd      	mov	sp, r7
 800af8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af92:	4770      	bx	lr

0800af94 <HAL_OSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_FifoThresholdCallback(OSPI_HandleTypeDef *hospi)
{
 800af94:	b480      	push	{r7}
 800af96:	b083      	sub	sp, #12
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 800af9c:	bf00      	nop
 800af9e:	370c      	adds	r7, #12
 800afa0:	46bd      	mov	sp, r7
 800afa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa6:	4770      	bx	lr

0800afa8 <HAL_OSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_CmdCpltCallback(OSPI_HandleTypeDef *hospi)
{
 800afa8:	b480      	push	{r7}
 800afaa:	b083      	sub	sp, #12
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_CmdCpltCallback could be implemented in the user file
   */
}
 800afb0:	bf00      	nop
 800afb2:	370c      	adds	r7, #12
 800afb4:	46bd      	mov	sp, r7
 800afb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afba:	4770      	bx	lr

0800afbc <HAL_OSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_RxCpltCallback(OSPI_HandleTypeDef *hospi)
{
 800afbc:	b480      	push	{r7}
 800afbe:	b083      	sub	sp, #12
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_RxCpltCallback could be implemented in the user file
   */
}
 800afc4:	bf00      	nop
 800afc6:	370c      	adds	r7, #12
 800afc8:	46bd      	mov	sp, r7
 800afca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afce:	4770      	bx	lr

0800afd0 <HAL_OSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
 __weak void HAL_OSPI_TxCpltCallback(OSPI_HandleTypeDef *hospi)
{
 800afd0:	b480      	push	{r7}
 800afd2:	b083      	sub	sp, #12
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_TxCpltCallback could be implemented in the user file
   */
}
 800afd8:	bf00      	nop
 800afda:	370c      	adds	r7, #12
 800afdc:	46bd      	mov	sp, r7
 800afde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe2:	4770      	bx	lr

0800afe4 <HAL_OSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_StatusMatchCallback(OSPI_HandleTypeDef *hospi)
{
 800afe4:	b480      	push	{r7}
 800afe6:	b083      	sub	sp, #12
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_StatusMatchCallback could be implemented in the user file
   */
}
 800afec:	bf00      	nop
 800afee:	370c      	adds	r7, #12
 800aff0:	46bd      	mov	sp, r7
 800aff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff6:	4770      	bx	lr

0800aff8 <HAL_OSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_TimeOutCallback(OSPI_HandleTypeDef *hospi)
{
 800aff8:	b480      	push	{r7}
 800affa:	b083      	sub	sp, #12
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_TimeOutCallback could be implemented in the user file
   */
}
 800b000:	bf00      	nop
 800b002:	370c      	adds	r7, #12
 800b004:	46bd      	mov	sp, r7
 800b006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00a:	4770      	bx	lr

0800b00c <HAL_OSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hospi : OSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_OSPI_Abort(OSPI_HandleTypeDef *hospi)
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b088      	sub	sp, #32
 800b010:	af02      	add	r7, sp, #8
 800b012:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b014:	2300      	movs	r3, #0
 800b016:	75fb      	strb	r3, [r7, #23]
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 800b018:	f7fd f8be 	bl	8008198 <HAL_GetTick>
 800b01c:	6138      	str	r0, [r7, #16]

  /* Check if the state is in one of the busy or configured states */
  state = hospi->State;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b022:	60fb      	str	r3, [r7, #12]
  if (((state & OSPI_BUSY_STATE_MASK) != 0U) || ((state & OSPI_CFG_STATE_MASK) != 0U))
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	f003 0308 	and.w	r3, r3, #8
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d104      	bne.n	800b038 <HAL_OSPI_Abort+0x2c>
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	f003 0304 	and.w	r3, r3, #4
 800b034:	2b00      	cmp	r3, #0
 800b036:	d052      	beq.n	800b0de <HAL_OSPI_Abort+0xd2>
  {
    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	f003 0304 	and.w	r3, r3, #4
 800b042:	2b00      	cmp	r3, #0
 800b044:	d014      	beq.n	800b070 <HAL_OSPI_Abort+0x64>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	681a      	ldr	r2, [r3, #0]
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	f022 0204 	bic.w	r2, r2, #4
 800b054:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      status = HAL_MDMA_Abort(hospi->hmdma);
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b05a:	4618      	mov	r0, r3
 800b05c:	f7ff fa66 	bl	800a52c <HAL_MDMA_Abort>
 800b060:	4603      	mov	r3, r0
 800b062:	75fb      	strb	r3, [r7, #23]
      if (status != HAL_OK)
 800b064:	7dfb      	ldrb	r3, [r7, #23]
 800b066:	2b00      	cmp	r3, #0
 800b068:	d002      	beq.n	800b070 <HAL_OSPI_Abort+0x64>
      {
        hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	2204      	movs	r2, #4
 800b06e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	6a1b      	ldr	r3, [r3, #32]
 800b076:	f003 0320 	and.w	r3, r3, #32
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d02b      	beq.n	800b0d6 <HAL_OSPI_Abort+0xca>
    {
      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	681a      	ldr	r2, [r3, #0]
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	f042 0202 	orr.w	r2, r2, #2
 800b08c:	601a      	str	r2, [r3, #0]

      /* Wait until the transfer complete flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b092:	9300      	str	r3, [sp, #0]
 800b094:	693b      	ldr	r3, [r7, #16]
 800b096:	2201      	movs	r2, #1
 800b098:	2102      	movs	r1, #2
 800b09a:	6878      	ldr	r0, [r7, #4]
 800b09c:	f000 f876 	bl	800b18c <OSPI_WaitFlagStateUntilTimeout>
 800b0a0:	4603      	mov	r3, r0
 800b0a2:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 800b0a4:	7dfb      	ldrb	r3, [r7, #23]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d11f      	bne.n	800b0ea <HAL_OSPI_Abort+0xde>
      {
        /* Clear transfer complete flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	2202      	movs	r2, #2
 800b0b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Wait until the busy flag is reset to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0b6:	9300      	str	r3, [sp, #0]
 800b0b8:	693b      	ldr	r3, [r7, #16]
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	2120      	movs	r1, #32
 800b0be:	6878      	ldr	r0, [r7, #4]
 800b0c0:	f000 f864 	bl	800b18c <OSPI_WaitFlagStateUntilTimeout>
 800b0c4:	4603      	mov	r3, r0
 800b0c6:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 800b0c8:	7dfb      	ldrb	r3, [r7, #23]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d10d      	bne.n	800b0ea <HAL_OSPI_Abort+0xde>
        {
          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	2202      	movs	r2, #2
 800b0d2:	651a      	str	r2, [r3, #80]	; 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 800b0d4:	e009      	b.n	800b0ea <HAL_OSPI_Abort+0xde>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	2202      	movs	r2, #2
 800b0da:	651a      	str	r2, [r3, #80]	; 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 800b0dc:	e005      	b.n	800b0ea <HAL_OSPI_Abort+0xde>
    }
  }
  else
  {
    status = HAL_ERROR;
 800b0de:	2301      	movs	r3, #1
 800b0e0:	75fb      	strb	r3, [r7, #23]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	2210      	movs	r2, #16
 800b0e6:	655a      	str	r2, [r3, #84]	; 0x54
 800b0e8:	e000      	b.n	800b0ec <HAL_OSPI_Abort+0xe0>
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 800b0ea:	bf00      	nop
  }

  /* Return function status */
  return status;
 800b0ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	3718      	adds	r7, #24
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	bd80      	pop	{r7, pc}

0800b0f6 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 800b0f6:	b480      	push	{r7}
 800b0f8:	b083      	sub	sp, #12
 800b0fa:	af00      	add	r7, sp, #0
 800b0fc:	6078      	str	r0, [r7, #4]
 800b0fe:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	683a      	ldr	r2, [r7, #0]
 800b104:	659a      	str	r2, [r3, #88]	; 0x58
  return HAL_OK;
 800b106:	2300      	movs	r3, #0
}
 800b108:	4618      	mov	r0, r3
 800b10a:	370c      	adds	r7, #12
 800b10c:	46bd      	mov	sp, r7
 800b10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b112:	4770      	bx	lr

0800b114 <OSPI_DMAAbortCplt>:
  * @brief  DMA OSPI abort complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void OSPI_DMAAbortCplt(MDMA_HandleTypeDef *hmdma)
{
 800b114:	b580      	push	{r7, lr}
 800b116:	b084      	sub	sp, #16
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
  OSPI_HandleTypeDef* hospi = ( OSPI_HandleTypeDef* )(hmdma->Parent);
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b120:	60fb      	str	r3, [r7, #12]
  hospi->XferCount = 0;
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	2200      	movs	r2, #0
 800b126:	649a      	str	r2, [r3, #72]	; 0x48

  /* Check the state */
  if (hospi->State == HAL_OSPI_STATE_ABORT)
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b12c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b130:	d122      	bne.n	800b178 <OSPI_DMAAbortCplt+0x64>
  {
    /* DMA abort called by OctoSPI abort */
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	6a1b      	ldr	r3, [r3, #32]
 800b138:	f003 0320 	and.w	r3, r3, #32
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d014      	beq.n	800b16a <OSPI_DMAAbortCplt+0x56>
    {
      /* Clear transfer complete flag */
      __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	2202      	movs	r2, #2
 800b146:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enable the transfer complete interrupts */
      __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TC);
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	681a      	ldr	r2, [r3, #0]
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800b156:	601a      	str	r2, [r3, #0]

      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	681a      	ldr	r2, [r3, #0]
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	f042 0202 	orr.w	r2, r2, #2
 800b166:	601a      	str	r2, [r3, #0]
    hospi->ErrorCallback(hospi);
#else
    HAL_OSPI_ErrorCallback(hospi);
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)*/
  }
}
 800b168:	e00c      	b.n	800b184 <OSPI_DMAAbortCplt+0x70>
      hospi->State = HAL_OSPI_STATE_READY;
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	2202      	movs	r2, #2
 800b16e:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_OSPI_AbortCpltCallback(hospi);
 800b170:	68f8      	ldr	r0, [r7, #12]
 800b172:	f7ff ff05 	bl	800af80 <HAL_OSPI_AbortCpltCallback>
}
 800b176:	e005      	b.n	800b184 <OSPI_DMAAbortCplt+0x70>
    hospi->State = HAL_OSPI_STATE_READY;
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	2202      	movs	r2, #2
 800b17c:	651a      	str	r2, [r3, #80]	; 0x50
    HAL_OSPI_ErrorCallback(hospi);
 800b17e:	68f8      	ldr	r0, [r7, #12]
 800b180:	f7ff fef4 	bl	800af6c <HAL_OSPI_ErrorCallback>
}
 800b184:	bf00      	nop
 800b186:	3710      	adds	r7, #16
 800b188:	46bd      	mov	sp, r7
 800b18a:	bd80      	pop	{r7, pc}

0800b18c <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b084      	sub	sp, #16
 800b190:	af00      	add	r7, sp, #0
 800b192:	60f8      	str	r0, [r7, #12]
 800b194:	60b9      	str	r1, [r7, #8]
 800b196:	603b      	str	r3, [r7, #0]
 800b198:	4613      	mov	r3, r2
 800b19a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 800b19c:	e01a      	b.n	800b1d4 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b19e:	69bb      	ldr	r3, [r7, #24]
 800b1a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1a4:	d016      	beq.n	800b1d4 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b1a6:	f7fc fff7 	bl	8008198 <HAL_GetTick>
 800b1aa:	4602      	mov	r2, r0
 800b1ac:	683b      	ldr	r3, [r7, #0]
 800b1ae:	1ad3      	subs	r3, r2, r3
 800b1b0:	69ba      	ldr	r2, [r7, #24]
 800b1b2:	429a      	cmp	r2, r3
 800b1b4:	d302      	bcc.n	800b1bc <OSPI_WaitFlagStateUntilTimeout+0x30>
 800b1b6:	69bb      	ldr	r3, [r7, #24]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d10b      	bne.n	800b1d4 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b1c2:	651a      	str	r2, [r3, #80]	; 0x50
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1c8:	f043 0201 	orr.w	r2, r3, #1
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	655a      	str	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 800b1d0:	2301      	movs	r3, #1
 800b1d2:	e00e      	b.n	800b1f2 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	6a1a      	ldr	r2, [r3, #32]
 800b1da:	68bb      	ldr	r3, [r7, #8]
 800b1dc:	4013      	ands	r3, r2
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	bf14      	ite	ne
 800b1e2:	2301      	movne	r3, #1
 800b1e4:	2300      	moveq	r3, #0
 800b1e6:	b2db      	uxtb	r3, r3
 800b1e8:	461a      	mov	r2, r3
 800b1ea:	79fb      	ldrb	r3, [r7, #7]
 800b1ec:	429a      	cmp	r2, r3
 800b1ee:	d1d6      	bne.n	800b19e <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b1f0:	2300      	movs	r3, #0
}
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	3710      	adds	r7, #16
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	bd80      	pop	{r7, pc}
	...

0800b1fc <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 800b1fc:	b480      	push	{r7}
 800b1fe:	b089      	sub	sp, #36	; 0x24
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
 800b204:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b206:	2300      	movs	r3, #0
 800b208:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	681a      	ldr	r2, [r3, #0]
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800b218:	601a      	str	r2, [r3, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	689b      	ldr	r3, [r3, #8]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d10a      	bne.n	800b238 <OSPI_ConfigCmd+0x3c>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800b22c:	683b      	ldr	r3, [r7, #0]
 800b22e:	685a      	ldr	r2, [r3, #4]
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	430a      	orrs	r2, r1
 800b236:	601a      	str	r2, [r3, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800b238:	683b      	ldr	r3, [r7, #0]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	2b02      	cmp	r3, #2
 800b23e:	d114      	bne.n	800b26a <OSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800b248:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WTCR);
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800b252:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WIR);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800b25c:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WABR);
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800b266:	60fb      	str	r3, [r7, #12]
 800b268:	e02c      	b.n	800b2c4 <OSPI_ConfigCmd+0xc8>
  }
  else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG)
 800b26a:	683b      	ldr	r3, [r7, #0]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	2b03      	cmp	r3, #3
 800b270:	d114      	bne.n	800b29c <OSPI_ConfigCmd+0xa0>
  {
    ccr_reg = &(hospi->Instance->WPCCR);
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800b27a:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WPTCR);
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800b284:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WPIR);
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b28e:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WPABR);
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800b298:	60fb      	str	r3, [r7, #12]
 800b29a:	e013      	b.n	800b2c4 <OSPI_ConfigCmd+0xc8>
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800b2a4:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->TCR);
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800b2ae:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->IR);
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800b2b8:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->ABR);
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800b2c2:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 800b2c4:	683b      	ldr	r3, [r7, #0]
 800b2c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b2c8:	683b      	ldr	r3, [r7, #0]
 800b2ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b2cc:	431a      	orrs	r2, r3
 800b2ce:	69bb      	ldr	r3, [r7, #24]
 800b2d0:	601a      	str	r2, [r3, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 800b2d2:	683b      	ldr	r3, [r7, #0]
 800b2d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d012      	beq.n	800b300 <OSPI_ConfigCmd+0x104>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 800b2da:	683b      	ldr	r3, [r7, #0]
 800b2dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 800b2e2:	69bb      	ldr	r3, [r7, #24]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800b2ea:	683b      	ldr	r3, [r7, #0]
 800b2ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800b2ee:	683b      	ldr	r3, [r7, #0]
 800b2f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2f2:	4319      	orrs	r1, r3
 800b2f4:	683b      	ldr	r3, [r7, #0]
 800b2f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2f8:	430b      	orrs	r3, r1
 800b2fa:	431a      	orrs	r2, r3
 800b2fc:	69bb      	ldr	r3, [r7, #24]
 800b2fe:	601a      	str	r2, [r3, #0]
                           (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 800b300:	697b      	ldr	r3, [r7, #20]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	f023 021f 	bic.w	r2, r3, #31
 800b308:	683b      	ldr	r3, [r7, #0]
 800b30a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b30c:	431a      	orrs	r2, r3
 800b30e:	697b      	ldr	r3, [r7, #20]
 800b310:	601a      	str	r2, [r3, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800b312:	683b      	ldr	r3, [r7, #0]
 800b314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b316:	2b00      	cmp	r3, #0
 800b318:	d009      	beq.n	800b32e <OSPI_ConfigCmd+0x132>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 800b31a:	683b      	ldr	r3, [r7, #0]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d105      	bne.n	800b32e <OSPI_ConfigCmd+0x132>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 800b322:	683b      	ldr	r3, [r7, #0]
 800b324:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	3a01      	subs	r2, #1
 800b32c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 800b32e:	683b      	ldr	r3, [r7, #0]
 800b330:	68db      	ldr	r3, [r3, #12]
 800b332:	2b00      	cmp	r3, #0
 800b334:	f000 8095 	beq.w	800b462 <OSPI_ConfigCmd+0x266>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 800b338:	683b      	ldr	r3, [r7, #0]
 800b33a:	69db      	ldr	r3, [r3, #28]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d053      	beq.n	800b3e8 <OSPI_ConfigCmd+0x1ec>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800b340:	683b      	ldr	r3, [r7, #0]
 800b342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b344:	2b00      	cmp	r3, #0
 800b346:	d01e      	beq.n	800b386 <OSPI_ConfigCmd+0x18a>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 800b348:	69bb      	ldr	r3, [r7, #24]
 800b34a:	681a      	ldr	r2, [r3, #0]
 800b34c:	4b64      	ldr	r3, [pc, #400]	; (800b4e0 <OSPI_ConfigCmd+0x2e4>)
 800b34e:	4013      	ands	r3, r2
 800b350:	683a      	ldr	r2, [r7, #0]
 800b352:	68d1      	ldr	r1, [r2, #12]
 800b354:	683a      	ldr	r2, [r7, #0]
 800b356:	6952      	ldr	r2, [r2, #20]
 800b358:	4311      	orrs	r1, r2
 800b35a:	683a      	ldr	r2, [r7, #0]
 800b35c:	6912      	ldr	r2, [r2, #16]
 800b35e:	4311      	orrs	r1, r2
 800b360:	683a      	ldr	r2, [r7, #0]
 800b362:	69d2      	ldr	r2, [r2, #28]
 800b364:	4311      	orrs	r1, r2
 800b366:	683a      	ldr	r2, [r7, #0]
 800b368:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b36a:	4311      	orrs	r1, r2
 800b36c:	683a      	ldr	r2, [r7, #0]
 800b36e:	6a12      	ldr	r2, [r2, #32]
 800b370:	4311      	orrs	r1, r2
 800b372:	683a      	ldr	r2, [r7, #0]
 800b374:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b376:	4311      	orrs	r1, r2
 800b378:	683a      	ldr	r2, [r7, #0]
 800b37a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800b37c:	430a      	orrs	r2, r1
 800b37e:	431a      	orrs	r2, r3
 800b380:	69bb      	ldr	r3, [r7, #24]
 800b382:	601a      	str	r2, [r3, #0]
 800b384:	e026      	b.n	800b3d4 <OSPI_ConfigCmd+0x1d8>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 800b386:	69bb      	ldr	r3, [r7, #24]
 800b388:	681a      	ldr	r2, [r3, #0]
 800b38a:	4b56      	ldr	r3, [pc, #344]	; (800b4e4 <OSPI_ConfigCmd+0x2e8>)
 800b38c:	4013      	ands	r3, r2
 800b38e:	683a      	ldr	r2, [r7, #0]
 800b390:	68d1      	ldr	r1, [r2, #12]
 800b392:	683a      	ldr	r2, [r7, #0]
 800b394:	6952      	ldr	r2, [r2, #20]
 800b396:	4311      	orrs	r1, r2
 800b398:	683a      	ldr	r2, [r7, #0]
 800b39a:	6912      	ldr	r2, [r2, #16]
 800b39c:	4311      	orrs	r1, r2
 800b39e:	683a      	ldr	r2, [r7, #0]
 800b3a0:	69d2      	ldr	r2, [r2, #28]
 800b3a2:	4311      	orrs	r1, r2
 800b3a4:	683a      	ldr	r2, [r7, #0]
 800b3a6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b3a8:	4311      	orrs	r1, r2
 800b3aa:	683a      	ldr	r2, [r7, #0]
 800b3ac:	6a12      	ldr	r2, [r2, #32]
 800b3ae:	430a      	orrs	r2, r1
 800b3b0:	431a      	orrs	r2, r3
 800b3b2:	69bb      	ldr	r3, [r7, #24]
 800b3b4:	601a      	str	r2, [r3, #0]
                                OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize |
                                cmd->AddressMode     | cmd->AddressDtrMode     | cmd->AddressSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b3be:	d109      	bne.n	800b3d4 <OSPI_ConfigCmd+0x1d8>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 800b3c0:	683b      	ldr	r3, [r7, #0]
 800b3c2:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800b3c4:	2b08      	cmp	r3, #8
 800b3c6:	d105      	bne.n	800b3d4 <OSPI_ConfigCmd+0x1d8>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 800b3c8:	69bb      	ldr	r3, [r7, #24]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b3d0:	69bb      	ldr	r3, [r7, #24]
 800b3d2:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 800b3d4:	683b      	ldr	r3, [r7, #0]
 800b3d6:	689a      	ldr	r2, [r3, #8]
 800b3d8:	693b      	ldr	r3, [r7, #16]
 800b3da:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	683a      	ldr	r2, [r7, #0]
 800b3e2:	6992      	ldr	r2, [r2, #24]
 800b3e4:	649a      	str	r2, [r3, #72]	; 0x48
 800b3e6:	e074      	b.n	800b4d2 <OSPI_ConfigCmd+0x2d6>
    }
    else
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800b3e8:	683b      	ldr	r3, [r7, #0]
 800b3ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d015      	beq.n	800b41c <OSPI_ConfigCmd+0x220>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 800b3f0:	69bb      	ldr	r3, [r7, #24]
 800b3f2:	681a      	ldr	r2, [r3, #0]
 800b3f4:	4b3c      	ldr	r3, [pc, #240]	; (800b4e8 <OSPI_ConfigCmd+0x2ec>)
 800b3f6:	4013      	ands	r3, r2
 800b3f8:	683a      	ldr	r2, [r7, #0]
 800b3fa:	68d1      	ldr	r1, [r2, #12]
 800b3fc:	683a      	ldr	r2, [r7, #0]
 800b3fe:	6952      	ldr	r2, [r2, #20]
 800b400:	4311      	orrs	r1, r2
 800b402:	683a      	ldr	r2, [r7, #0]
 800b404:	6912      	ldr	r2, [r2, #16]
 800b406:	4311      	orrs	r1, r2
 800b408:	683a      	ldr	r2, [r7, #0]
 800b40a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b40c:	4311      	orrs	r1, r2
 800b40e:	683a      	ldr	r2, [r7, #0]
 800b410:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800b412:	430a      	orrs	r2, r1
 800b414:	431a      	orrs	r2, r3
 800b416:	69bb      	ldr	r3, [r7, #24]
 800b418:	601a      	str	r2, [r3, #0]
 800b41a:	e01d      	b.n	800b458 <OSPI_ConfigCmd+0x25c>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 800b41c:	69bb      	ldr	r3, [r7, #24]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800b424:	683b      	ldr	r3, [r7, #0]
 800b426:	68d9      	ldr	r1, [r3, #12]
 800b428:	683b      	ldr	r3, [r7, #0]
 800b42a:	695b      	ldr	r3, [r3, #20]
 800b42c:	4319      	orrs	r1, r3
 800b42e:	683b      	ldr	r3, [r7, #0]
 800b430:	691b      	ldr	r3, [r3, #16]
 800b432:	430b      	orrs	r3, r1
 800b434:	431a      	orrs	r2, r3
 800b436:	69bb      	ldr	r3, [r7, #24]
 800b438:	601a      	str	r2, [r3, #0]
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b43e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b442:	d109      	bne.n	800b458 <OSPI_ConfigCmd+0x25c>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 800b444:	683b      	ldr	r3, [r7, #0]
 800b446:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800b448:	2b08      	cmp	r3, #8
 800b44a:	d105      	bne.n	800b458 <OSPI_ConfigCmd+0x25c>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 800b44c:	69bb      	ldr	r3, [r7, #24]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b454:	69bb      	ldr	r3, [r7, #24]
 800b456:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 800b458:	683b      	ldr	r3, [r7, #0]
 800b45a:	689a      	ldr	r2, [r3, #8]
 800b45c:	693b      	ldr	r3, [r7, #16]
 800b45e:	601a      	str	r2, [r3, #0]
 800b460:	e037      	b.n	800b4d2 <OSPI_ConfigCmd+0x2d6>

    }
  }
  else
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 800b462:	683b      	ldr	r3, [r7, #0]
 800b464:	69db      	ldr	r3, [r3, #28]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d02e      	beq.n	800b4c8 <OSPI_ConfigCmd+0x2cc>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800b46a:	683b      	ldr	r3, [r7, #0]
 800b46c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d015      	beq.n	800b49e <OSPI_ConfigCmd+0x2a2>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 800b472:	69bb      	ldr	r3, [r7, #24]
 800b474:	681a      	ldr	r2, [r3, #0]
 800b476:	4b1d      	ldr	r3, [pc, #116]	; (800b4ec <OSPI_ConfigCmd+0x2f0>)
 800b478:	4013      	ands	r3, r2
 800b47a:	683a      	ldr	r2, [r7, #0]
 800b47c:	69d1      	ldr	r1, [r2, #28]
 800b47e:	683a      	ldr	r2, [r7, #0]
 800b480:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b482:	4311      	orrs	r1, r2
 800b484:	683a      	ldr	r2, [r7, #0]
 800b486:	6a12      	ldr	r2, [r2, #32]
 800b488:	4311      	orrs	r1, r2
 800b48a:	683a      	ldr	r2, [r7, #0]
 800b48c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b48e:	4311      	orrs	r1, r2
 800b490:	683a      	ldr	r2, [r7, #0]
 800b492:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800b494:	430a      	orrs	r2, r1
 800b496:	431a      	orrs	r2, r3
 800b498:	69bb      	ldr	r3, [r7, #24]
 800b49a:	601a      	str	r2, [r3, #0]
 800b49c:	e00e      	b.n	800b4bc <OSPI_ConfigCmd+0x2c0>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 800b49e:	69bb      	ldr	r3, [r7, #24]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800b4a6:	683b      	ldr	r3, [r7, #0]
 800b4a8:	69d9      	ldr	r1, [r3, #28]
 800b4aa:	683b      	ldr	r3, [r7, #0]
 800b4ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4ae:	4319      	orrs	r1, r3
 800b4b0:	683b      	ldr	r3, [r7, #0]
 800b4b2:	6a1b      	ldr	r3, [r3, #32]
 800b4b4:	430b      	orrs	r3, r1
 800b4b6:	431a      	orrs	r2, r3
 800b4b8:	69bb      	ldr	r3, [r7, #24]
 800b4ba:	601a      	str	r2, [r3, #0]
                               (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	683a      	ldr	r2, [r7, #0]
 800b4c2:	6992      	ldr	r2, [r2, #24]
 800b4c4:	649a      	str	r2, [r3, #72]	; 0x48
 800b4c6:	e004      	b.n	800b4d2 <OSPI_ConfigCmd+0x2d6>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 800b4c8:	2301      	movs	r3, #1
 800b4ca:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	2208      	movs	r2, #8
 800b4d0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }

  /* Return function status */
  return status;
 800b4d2:	7ffb      	ldrb	r3, [r7, #31]
}
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	3724      	adds	r7, #36	; 0x24
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4de:	4770      	bx	lr
 800b4e0:	f0ffc0c0 	.word	0xf0ffc0c0
 800b4e4:	ffffc0c0 	.word	0xffffc0c0
 800b4e8:	f0ffffc0 	.word	0xf0ffffc0
 800b4ec:	f0ffc0ff 	.word	0xf0ffc0ff

0800b4f0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b084      	sub	sp, #16
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800b4f8:	4b29      	ldr	r3, [pc, #164]	; (800b5a0 <HAL_PWREx_ConfigSupply+0xb0>)
 800b4fa:	68db      	ldr	r3, [r3, #12]
 800b4fc:	f003 0307 	and.w	r3, r3, #7
 800b500:	2b06      	cmp	r3, #6
 800b502:	d00a      	beq.n	800b51a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800b504:	4b26      	ldr	r3, [pc, #152]	; (800b5a0 <HAL_PWREx_ConfigSupply+0xb0>)
 800b506:	68db      	ldr	r3, [r3, #12]
 800b508:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b50c:	687a      	ldr	r2, [r7, #4]
 800b50e:	429a      	cmp	r2, r3
 800b510:	d001      	beq.n	800b516 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800b512:	2301      	movs	r3, #1
 800b514:	e040      	b.n	800b598 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800b516:	2300      	movs	r3, #0
 800b518:	e03e      	b.n	800b598 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800b51a:	4b21      	ldr	r3, [pc, #132]	; (800b5a0 <HAL_PWREx_ConfigSupply+0xb0>)
 800b51c:	68db      	ldr	r3, [r3, #12]
 800b51e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800b522:	491f      	ldr	r1, [pc, #124]	; (800b5a0 <HAL_PWREx_ConfigSupply+0xb0>)
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	4313      	orrs	r3, r2
 800b528:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800b52a:	f7fc fe35 	bl	8008198 <HAL_GetTick>
 800b52e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800b530:	e009      	b.n	800b546 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800b532:	f7fc fe31 	bl	8008198 <HAL_GetTick>
 800b536:	4602      	mov	r2, r0
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	1ad3      	subs	r3, r2, r3
 800b53c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b540:	d901      	bls.n	800b546 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800b542:	2301      	movs	r3, #1
 800b544:	e028      	b.n	800b598 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800b546:	4b16      	ldr	r3, [pc, #88]	; (800b5a0 <HAL_PWREx_ConfigSupply+0xb0>)
 800b548:	685b      	ldr	r3, [r3, #4]
 800b54a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b54e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b552:	d1ee      	bne.n	800b532 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	2b1e      	cmp	r3, #30
 800b558:	d008      	beq.n	800b56c <HAL_PWREx_ConfigSupply+0x7c>
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	2b2e      	cmp	r3, #46	; 0x2e
 800b55e:	d005      	beq.n	800b56c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	2b1d      	cmp	r3, #29
 800b564:	d002      	beq.n	800b56c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	2b2d      	cmp	r3, #45	; 0x2d
 800b56a:	d114      	bne.n	800b596 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800b56c:	f7fc fe14 	bl	8008198 <HAL_GetTick>
 800b570:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800b572:	e009      	b.n	800b588 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800b574:	f7fc fe10 	bl	8008198 <HAL_GetTick>
 800b578:	4602      	mov	r2, r0
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	1ad3      	subs	r3, r2, r3
 800b57e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b582:	d901      	bls.n	800b588 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800b584:	2301      	movs	r3, #1
 800b586:	e007      	b.n	800b598 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800b588:	4b05      	ldr	r3, [pc, #20]	; (800b5a0 <HAL_PWREx_ConfigSupply+0xb0>)
 800b58a:	68db      	ldr	r3, [r3, #12]
 800b58c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b590:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b594:	d1ee      	bne.n	800b574 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800b596:	2300      	movs	r3, #0
}
 800b598:	4618      	mov	r0, r3
 800b59a:	3710      	adds	r7, #16
 800b59c:	46bd      	mov	sp, r7
 800b59e:	bd80      	pop	{r7, pc}
 800b5a0:	58024800 	.word	0x58024800

0800b5a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b08c      	sub	sp, #48	; 0x30
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d102      	bne.n	800b5b8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800b5b2:	2301      	movs	r3, #1
 800b5b4:	f000 bc1f 	b.w	800bdf6 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	f003 0301 	and.w	r3, r3, #1
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	f000 80b3 	beq.w	800b72c <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b5c6:	4b95      	ldr	r3, [pc, #596]	; (800b81c <HAL_RCC_OscConfig+0x278>)
 800b5c8:	691b      	ldr	r3, [r3, #16]
 800b5ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b5ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b5d0:	4b92      	ldr	r3, [pc, #584]	; (800b81c <HAL_RCC_OscConfig+0x278>)
 800b5d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5d4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800b5d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5d8:	2b10      	cmp	r3, #16
 800b5da:	d007      	beq.n	800b5ec <HAL_RCC_OscConfig+0x48>
 800b5dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5de:	2b18      	cmp	r3, #24
 800b5e0:	d112      	bne.n	800b608 <HAL_RCC_OscConfig+0x64>
 800b5e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5e4:	f003 0303 	and.w	r3, r3, #3
 800b5e8:	2b02      	cmp	r3, #2
 800b5ea:	d10d      	bne.n	800b608 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b5ec:	4b8b      	ldr	r3, [pc, #556]	; (800b81c <HAL_RCC_OscConfig+0x278>)
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	f000 8098 	beq.w	800b72a <HAL_RCC_OscConfig+0x186>
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	685b      	ldr	r3, [r3, #4]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	f040 8093 	bne.w	800b72a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800b604:	2301      	movs	r3, #1
 800b606:	e3f6      	b.n	800bdf6 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	685b      	ldr	r3, [r3, #4]
 800b60c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b610:	d106      	bne.n	800b620 <HAL_RCC_OscConfig+0x7c>
 800b612:	4b82      	ldr	r3, [pc, #520]	; (800b81c <HAL_RCC_OscConfig+0x278>)
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	4a81      	ldr	r2, [pc, #516]	; (800b81c <HAL_RCC_OscConfig+0x278>)
 800b618:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b61c:	6013      	str	r3, [r2, #0]
 800b61e:	e058      	b.n	800b6d2 <HAL_RCC_OscConfig+0x12e>
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	685b      	ldr	r3, [r3, #4]
 800b624:	2b00      	cmp	r3, #0
 800b626:	d112      	bne.n	800b64e <HAL_RCC_OscConfig+0xaa>
 800b628:	4b7c      	ldr	r3, [pc, #496]	; (800b81c <HAL_RCC_OscConfig+0x278>)
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	4a7b      	ldr	r2, [pc, #492]	; (800b81c <HAL_RCC_OscConfig+0x278>)
 800b62e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b632:	6013      	str	r3, [r2, #0]
 800b634:	4b79      	ldr	r3, [pc, #484]	; (800b81c <HAL_RCC_OscConfig+0x278>)
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	4a78      	ldr	r2, [pc, #480]	; (800b81c <HAL_RCC_OscConfig+0x278>)
 800b63a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b63e:	6013      	str	r3, [r2, #0]
 800b640:	4b76      	ldr	r3, [pc, #472]	; (800b81c <HAL_RCC_OscConfig+0x278>)
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	4a75      	ldr	r2, [pc, #468]	; (800b81c <HAL_RCC_OscConfig+0x278>)
 800b646:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b64a:	6013      	str	r3, [r2, #0]
 800b64c:	e041      	b.n	800b6d2 <HAL_RCC_OscConfig+0x12e>
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	685b      	ldr	r3, [r3, #4]
 800b652:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b656:	d112      	bne.n	800b67e <HAL_RCC_OscConfig+0xda>
 800b658:	4b70      	ldr	r3, [pc, #448]	; (800b81c <HAL_RCC_OscConfig+0x278>)
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	4a6f      	ldr	r2, [pc, #444]	; (800b81c <HAL_RCC_OscConfig+0x278>)
 800b65e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b662:	6013      	str	r3, [r2, #0]
 800b664:	4b6d      	ldr	r3, [pc, #436]	; (800b81c <HAL_RCC_OscConfig+0x278>)
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	4a6c      	ldr	r2, [pc, #432]	; (800b81c <HAL_RCC_OscConfig+0x278>)
 800b66a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b66e:	6013      	str	r3, [r2, #0]
 800b670:	4b6a      	ldr	r3, [pc, #424]	; (800b81c <HAL_RCC_OscConfig+0x278>)
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	4a69      	ldr	r2, [pc, #420]	; (800b81c <HAL_RCC_OscConfig+0x278>)
 800b676:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b67a:	6013      	str	r3, [r2, #0]
 800b67c:	e029      	b.n	800b6d2 <HAL_RCC_OscConfig+0x12e>
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	685b      	ldr	r3, [r3, #4]
 800b682:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800b686:	d112      	bne.n	800b6ae <HAL_RCC_OscConfig+0x10a>
 800b688:	4b64      	ldr	r3, [pc, #400]	; (800b81c <HAL_RCC_OscConfig+0x278>)
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	4a63      	ldr	r2, [pc, #396]	; (800b81c <HAL_RCC_OscConfig+0x278>)
 800b68e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b692:	6013      	str	r3, [r2, #0]
 800b694:	4b61      	ldr	r3, [pc, #388]	; (800b81c <HAL_RCC_OscConfig+0x278>)
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	4a60      	ldr	r2, [pc, #384]	; (800b81c <HAL_RCC_OscConfig+0x278>)
 800b69a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b69e:	6013      	str	r3, [r2, #0]
 800b6a0:	4b5e      	ldr	r3, [pc, #376]	; (800b81c <HAL_RCC_OscConfig+0x278>)
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	4a5d      	ldr	r2, [pc, #372]	; (800b81c <HAL_RCC_OscConfig+0x278>)
 800b6a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b6aa:	6013      	str	r3, [r2, #0]
 800b6ac:	e011      	b.n	800b6d2 <HAL_RCC_OscConfig+0x12e>
 800b6ae:	4b5b      	ldr	r3, [pc, #364]	; (800b81c <HAL_RCC_OscConfig+0x278>)
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	4a5a      	ldr	r2, [pc, #360]	; (800b81c <HAL_RCC_OscConfig+0x278>)
 800b6b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b6b8:	6013      	str	r3, [r2, #0]
 800b6ba:	4b58      	ldr	r3, [pc, #352]	; (800b81c <HAL_RCC_OscConfig+0x278>)
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	4a57      	ldr	r2, [pc, #348]	; (800b81c <HAL_RCC_OscConfig+0x278>)
 800b6c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b6c4:	6013      	str	r3, [r2, #0]
 800b6c6:	4b55      	ldr	r3, [pc, #340]	; (800b81c <HAL_RCC_OscConfig+0x278>)
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	4a54      	ldr	r2, [pc, #336]	; (800b81c <HAL_RCC_OscConfig+0x278>)
 800b6cc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b6d0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	685b      	ldr	r3, [r3, #4]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d013      	beq.n	800b702 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b6da:	f7fc fd5d 	bl	8008198 <HAL_GetTick>
 800b6de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b6e0:	e008      	b.n	800b6f4 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b6e2:	f7fc fd59 	bl	8008198 <HAL_GetTick>
 800b6e6:	4602      	mov	r2, r0
 800b6e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6ea:	1ad3      	subs	r3, r2, r3
 800b6ec:	2b64      	cmp	r3, #100	; 0x64
 800b6ee:	d901      	bls.n	800b6f4 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 800b6f0:	2303      	movs	r3, #3
 800b6f2:	e380      	b.n	800bdf6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b6f4:	4b49      	ldr	r3, [pc, #292]	; (800b81c <HAL_RCC_OscConfig+0x278>)
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d0f0      	beq.n	800b6e2 <HAL_RCC_OscConfig+0x13e>
 800b700:	e014      	b.n	800b72c <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b702:	f7fc fd49 	bl	8008198 <HAL_GetTick>
 800b706:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b708:	e008      	b.n	800b71c <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b70a:	f7fc fd45 	bl	8008198 <HAL_GetTick>
 800b70e:	4602      	mov	r2, r0
 800b710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b712:	1ad3      	subs	r3, r2, r3
 800b714:	2b64      	cmp	r3, #100	; 0x64
 800b716:	d901      	bls.n	800b71c <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 800b718:	2303      	movs	r3, #3
 800b71a:	e36c      	b.n	800bdf6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b71c:	4b3f      	ldr	r3, [pc, #252]	; (800b81c <HAL_RCC_OscConfig+0x278>)
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b724:	2b00      	cmp	r3, #0
 800b726:	d1f0      	bne.n	800b70a <HAL_RCC_OscConfig+0x166>
 800b728:	e000      	b.n	800b72c <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b72a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	f003 0302 	and.w	r3, r3, #2
 800b734:	2b00      	cmp	r3, #0
 800b736:	f000 808c 	beq.w	800b852 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b73a:	4b38      	ldr	r3, [pc, #224]	; (800b81c <HAL_RCC_OscConfig+0x278>)
 800b73c:	691b      	ldr	r3, [r3, #16]
 800b73e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b742:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b744:	4b35      	ldr	r3, [pc, #212]	; (800b81c <HAL_RCC_OscConfig+0x278>)
 800b746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b748:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800b74a:	6a3b      	ldr	r3, [r7, #32]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d007      	beq.n	800b760 <HAL_RCC_OscConfig+0x1bc>
 800b750:	6a3b      	ldr	r3, [r7, #32]
 800b752:	2b18      	cmp	r3, #24
 800b754:	d137      	bne.n	800b7c6 <HAL_RCC_OscConfig+0x222>
 800b756:	69fb      	ldr	r3, [r7, #28]
 800b758:	f003 0303 	and.w	r3, r3, #3
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d132      	bne.n	800b7c6 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b760:	4b2e      	ldr	r3, [pc, #184]	; (800b81c <HAL_RCC_OscConfig+0x278>)
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	f003 0304 	and.w	r3, r3, #4
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d005      	beq.n	800b778 <HAL_RCC_OscConfig+0x1d4>
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	68db      	ldr	r3, [r3, #12]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d101      	bne.n	800b778 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 800b774:	2301      	movs	r3, #1
 800b776:	e33e      	b.n	800bdf6 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b778:	4b28      	ldr	r3, [pc, #160]	; (800b81c <HAL_RCC_OscConfig+0x278>)
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	f023 0219 	bic.w	r2, r3, #25
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	68db      	ldr	r3, [r3, #12]
 800b784:	4925      	ldr	r1, [pc, #148]	; (800b81c <HAL_RCC_OscConfig+0x278>)
 800b786:	4313      	orrs	r3, r2
 800b788:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b78a:	f7fc fd05 	bl	8008198 <HAL_GetTick>
 800b78e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b790:	e008      	b.n	800b7a4 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b792:	f7fc fd01 	bl	8008198 <HAL_GetTick>
 800b796:	4602      	mov	r2, r0
 800b798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b79a:	1ad3      	subs	r3, r2, r3
 800b79c:	2b02      	cmp	r3, #2
 800b79e:	d901      	bls.n	800b7a4 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800b7a0:	2303      	movs	r3, #3
 800b7a2:	e328      	b.n	800bdf6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b7a4:	4b1d      	ldr	r3, [pc, #116]	; (800b81c <HAL_RCC_OscConfig+0x278>)
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	f003 0304 	and.w	r3, r3, #4
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d0f0      	beq.n	800b792 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b7b0:	4b1a      	ldr	r3, [pc, #104]	; (800b81c <HAL_RCC_OscConfig+0x278>)
 800b7b2:	685b      	ldr	r3, [r3, #4]
 800b7b4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	691b      	ldr	r3, [r3, #16]
 800b7bc:	061b      	lsls	r3, r3, #24
 800b7be:	4917      	ldr	r1, [pc, #92]	; (800b81c <HAL_RCC_OscConfig+0x278>)
 800b7c0:	4313      	orrs	r3, r2
 800b7c2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b7c4:	e045      	b.n	800b852 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	68db      	ldr	r3, [r3, #12]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d028      	beq.n	800b820 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b7ce:	4b13      	ldr	r3, [pc, #76]	; (800b81c <HAL_RCC_OscConfig+0x278>)
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	f023 0219 	bic.w	r2, r3, #25
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	68db      	ldr	r3, [r3, #12]
 800b7da:	4910      	ldr	r1, [pc, #64]	; (800b81c <HAL_RCC_OscConfig+0x278>)
 800b7dc:	4313      	orrs	r3, r2
 800b7de:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b7e0:	f7fc fcda 	bl	8008198 <HAL_GetTick>
 800b7e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b7e6:	e008      	b.n	800b7fa <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b7e8:	f7fc fcd6 	bl	8008198 <HAL_GetTick>
 800b7ec:	4602      	mov	r2, r0
 800b7ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7f0:	1ad3      	subs	r3, r2, r3
 800b7f2:	2b02      	cmp	r3, #2
 800b7f4:	d901      	bls.n	800b7fa <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800b7f6:	2303      	movs	r3, #3
 800b7f8:	e2fd      	b.n	800bdf6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b7fa:	4b08      	ldr	r3, [pc, #32]	; (800b81c <HAL_RCC_OscConfig+0x278>)
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	f003 0304 	and.w	r3, r3, #4
 800b802:	2b00      	cmp	r3, #0
 800b804:	d0f0      	beq.n	800b7e8 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b806:	4b05      	ldr	r3, [pc, #20]	; (800b81c <HAL_RCC_OscConfig+0x278>)
 800b808:	685b      	ldr	r3, [r3, #4]
 800b80a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	691b      	ldr	r3, [r3, #16]
 800b812:	061b      	lsls	r3, r3, #24
 800b814:	4901      	ldr	r1, [pc, #4]	; (800b81c <HAL_RCC_OscConfig+0x278>)
 800b816:	4313      	orrs	r3, r2
 800b818:	604b      	str	r3, [r1, #4]
 800b81a:	e01a      	b.n	800b852 <HAL_RCC_OscConfig+0x2ae>
 800b81c:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b820:	4b97      	ldr	r3, [pc, #604]	; (800ba80 <HAL_RCC_OscConfig+0x4dc>)
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	4a96      	ldr	r2, [pc, #600]	; (800ba80 <HAL_RCC_OscConfig+0x4dc>)
 800b826:	f023 0301 	bic.w	r3, r3, #1
 800b82a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b82c:	f7fc fcb4 	bl	8008198 <HAL_GetTick>
 800b830:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b832:	e008      	b.n	800b846 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b834:	f7fc fcb0 	bl	8008198 <HAL_GetTick>
 800b838:	4602      	mov	r2, r0
 800b83a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b83c:	1ad3      	subs	r3, r2, r3
 800b83e:	2b02      	cmp	r3, #2
 800b840:	d901      	bls.n	800b846 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800b842:	2303      	movs	r3, #3
 800b844:	e2d7      	b.n	800bdf6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b846:	4b8e      	ldr	r3, [pc, #568]	; (800ba80 <HAL_RCC_OscConfig+0x4dc>)
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	f003 0304 	and.w	r3, r3, #4
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d1f0      	bne.n	800b834 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	f003 0310 	and.w	r3, r3, #16
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d06a      	beq.n	800b934 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b85e:	4b88      	ldr	r3, [pc, #544]	; (800ba80 <HAL_RCC_OscConfig+0x4dc>)
 800b860:	691b      	ldr	r3, [r3, #16]
 800b862:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b866:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b868:	4b85      	ldr	r3, [pc, #532]	; (800ba80 <HAL_RCC_OscConfig+0x4dc>)
 800b86a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b86c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800b86e:	69bb      	ldr	r3, [r7, #24]
 800b870:	2b08      	cmp	r3, #8
 800b872:	d007      	beq.n	800b884 <HAL_RCC_OscConfig+0x2e0>
 800b874:	69bb      	ldr	r3, [r7, #24]
 800b876:	2b18      	cmp	r3, #24
 800b878:	d11b      	bne.n	800b8b2 <HAL_RCC_OscConfig+0x30e>
 800b87a:	697b      	ldr	r3, [r7, #20]
 800b87c:	f003 0303 	and.w	r3, r3, #3
 800b880:	2b01      	cmp	r3, #1
 800b882:	d116      	bne.n	800b8b2 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b884:	4b7e      	ldr	r3, [pc, #504]	; (800ba80 <HAL_RCC_OscConfig+0x4dc>)
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d005      	beq.n	800b89c <HAL_RCC_OscConfig+0x2f8>
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	69db      	ldr	r3, [r3, #28]
 800b894:	2b80      	cmp	r3, #128	; 0x80
 800b896:	d001      	beq.n	800b89c <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 800b898:	2301      	movs	r3, #1
 800b89a:	e2ac      	b.n	800bdf6 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b89c:	4b78      	ldr	r3, [pc, #480]	; (800ba80 <HAL_RCC_OscConfig+0x4dc>)
 800b89e:	68db      	ldr	r3, [r3, #12]
 800b8a0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	6a1b      	ldr	r3, [r3, #32]
 800b8a8:	061b      	lsls	r3, r3, #24
 800b8aa:	4975      	ldr	r1, [pc, #468]	; (800ba80 <HAL_RCC_OscConfig+0x4dc>)
 800b8ac:	4313      	orrs	r3, r2
 800b8ae:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b8b0:	e040      	b.n	800b934 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	69db      	ldr	r3, [r3, #28]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d023      	beq.n	800b902 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800b8ba:	4b71      	ldr	r3, [pc, #452]	; (800ba80 <HAL_RCC_OscConfig+0x4dc>)
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	4a70      	ldr	r2, [pc, #448]	; (800ba80 <HAL_RCC_OscConfig+0x4dc>)
 800b8c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b8c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b8c6:	f7fc fc67 	bl	8008198 <HAL_GetTick>
 800b8ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b8cc:	e008      	b.n	800b8e0 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800b8ce:	f7fc fc63 	bl	8008198 <HAL_GetTick>
 800b8d2:	4602      	mov	r2, r0
 800b8d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8d6:	1ad3      	subs	r3, r2, r3
 800b8d8:	2b02      	cmp	r3, #2
 800b8da:	d901      	bls.n	800b8e0 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 800b8dc:	2303      	movs	r3, #3
 800b8de:	e28a      	b.n	800bdf6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b8e0:	4b67      	ldr	r3, [pc, #412]	; (800ba80 <HAL_RCC_OscConfig+0x4dc>)
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d0f0      	beq.n	800b8ce <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b8ec:	4b64      	ldr	r3, [pc, #400]	; (800ba80 <HAL_RCC_OscConfig+0x4dc>)
 800b8ee:	68db      	ldr	r3, [r3, #12]
 800b8f0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	6a1b      	ldr	r3, [r3, #32]
 800b8f8:	061b      	lsls	r3, r3, #24
 800b8fa:	4961      	ldr	r1, [pc, #388]	; (800ba80 <HAL_RCC_OscConfig+0x4dc>)
 800b8fc:	4313      	orrs	r3, r2
 800b8fe:	60cb      	str	r3, [r1, #12]
 800b900:	e018      	b.n	800b934 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800b902:	4b5f      	ldr	r3, [pc, #380]	; (800ba80 <HAL_RCC_OscConfig+0x4dc>)
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	4a5e      	ldr	r2, [pc, #376]	; (800ba80 <HAL_RCC_OscConfig+0x4dc>)
 800b908:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b90c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b90e:	f7fc fc43 	bl	8008198 <HAL_GetTick>
 800b912:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800b914:	e008      	b.n	800b928 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800b916:	f7fc fc3f 	bl	8008198 <HAL_GetTick>
 800b91a:	4602      	mov	r2, r0
 800b91c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b91e:	1ad3      	subs	r3, r2, r3
 800b920:	2b02      	cmp	r3, #2
 800b922:	d901      	bls.n	800b928 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 800b924:	2303      	movs	r3, #3
 800b926:	e266      	b.n	800bdf6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800b928:	4b55      	ldr	r3, [pc, #340]	; (800ba80 <HAL_RCC_OscConfig+0x4dc>)
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b930:	2b00      	cmp	r3, #0
 800b932:	d1f0      	bne.n	800b916 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	f003 0308 	and.w	r3, r3, #8
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d036      	beq.n	800b9ae <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	695b      	ldr	r3, [r3, #20]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d019      	beq.n	800b97c <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b948:	4b4d      	ldr	r3, [pc, #308]	; (800ba80 <HAL_RCC_OscConfig+0x4dc>)
 800b94a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b94c:	4a4c      	ldr	r2, [pc, #304]	; (800ba80 <HAL_RCC_OscConfig+0x4dc>)
 800b94e:	f043 0301 	orr.w	r3, r3, #1
 800b952:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b954:	f7fc fc20 	bl	8008198 <HAL_GetTick>
 800b958:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800b95a:	e008      	b.n	800b96e <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b95c:	f7fc fc1c 	bl	8008198 <HAL_GetTick>
 800b960:	4602      	mov	r2, r0
 800b962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b964:	1ad3      	subs	r3, r2, r3
 800b966:	2b02      	cmp	r3, #2
 800b968:	d901      	bls.n	800b96e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800b96a:	2303      	movs	r3, #3
 800b96c:	e243      	b.n	800bdf6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800b96e:	4b44      	ldr	r3, [pc, #272]	; (800ba80 <HAL_RCC_OscConfig+0x4dc>)
 800b970:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b972:	f003 0302 	and.w	r3, r3, #2
 800b976:	2b00      	cmp	r3, #0
 800b978:	d0f0      	beq.n	800b95c <HAL_RCC_OscConfig+0x3b8>
 800b97a:	e018      	b.n	800b9ae <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b97c:	4b40      	ldr	r3, [pc, #256]	; (800ba80 <HAL_RCC_OscConfig+0x4dc>)
 800b97e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b980:	4a3f      	ldr	r2, [pc, #252]	; (800ba80 <HAL_RCC_OscConfig+0x4dc>)
 800b982:	f023 0301 	bic.w	r3, r3, #1
 800b986:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b988:	f7fc fc06 	bl	8008198 <HAL_GetTick>
 800b98c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800b98e:	e008      	b.n	800b9a2 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b990:	f7fc fc02 	bl	8008198 <HAL_GetTick>
 800b994:	4602      	mov	r2, r0
 800b996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b998:	1ad3      	subs	r3, r2, r3
 800b99a:	2b02      	cmp	r3, #2
 800b99c:	d901      	bls.n	800b9a2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800b99e:	2303      	movs	r3, #3
 800b9a0:	e229      	b.n	800bdf6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800b9a2:	4b37      	ldr	r3, [pc, #220]	; (800ba80 <HAL_RCC_OscConfig+0x4dc>)
 800b9a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b9a6:	f003 0302 	and.w	r3, r3, #2
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d1f0      	bne.n	800b990 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	f003 0320 	and.w	r3, r3, #32
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d036      	beq.n	800ba28 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	699b      	ldr	r3, [r3, #24]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d019      	beq.n	800b9f6 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b9c2:	4b2f      	ldr	r3, [pc, #188]	; (800ba80 <HAL_RCC_OscConfig+0x4dc>)
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	4a2e      	ldr	r2, [pc, #184]	; (800ba80 <HAL_RCC_OscConfig+0x4dc>)
 800b9c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b9cc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800b9ce:	f7fc fbe3 	bl	8008198 <HAL_GetTick>
 800b9d2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800b9d4:	e008      	b.n	800b9e8 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b9d6:	f7fc fbdf 	bl	8008198 <HAL_GetTick>
 800b9da:	4602      	mov	r2, r0
 800b9dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9de:	1ad3      	subs	r3, r2, r3
 800b9e0:	2b02      	cmp	r3, #2
 800b9e2:	d901      	bls.n	800b9e8 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800b9e4:	2303      	movs	r3, #3
 800b9e6:	e206      	b.n	800bdf6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800b9e8:	4b25      	ldr	r3, [pc, #148]	; (800ba80 <HAL_RCC_OscConfig+0x4dc>)
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d0f0      	beq.n	800b9d6 <HAL_RCC_OscConfig+0x432>
 800b9f4:	e018      	b.n	800ba28 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b9f6:	4b22      	ldr	r3, [pc, #136]	; (800ba80 <HAL_RCC_OscConfig+0x4dc>)
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	4a21      	ldr	r2, [pc, #132]	; (800ba80 <HAL_RCC_OscConfig+0x4dc>)
 800b9fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ba00:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800ba02:	f7fc fbc9 	bl	8008198 <HAL_GetTick>
 800ba06:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ba08:	e008      	b.n	800ba1c <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ba0a:	f7fc fbc5 	bl	8008198 <HAL_GetTick>
 800ba0e:	4602      	mov	r2, r0
 800ba10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba12:	1ad3      	subs	r3, r2, r3
 800ba14:	2b02      	cmp	r3, #2
 800ba16:	d901      	bls.n	800ba1c <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 800ba18:	2303      	movs	r3, #3
 800ba1a:	e1ec      	b.n	800bdf6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ba1c:	4b18      	ldr	r3, [pc, #96]	; (800ba80 <HAL_RCC_OscConfig+0x4dc>)
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d1f0      	bne.n	800ba0a <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	f003 0304 	and.w	r3, r3, #4
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	f000 80af 	beq.w	800bb94 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800ba36:	4b13      	ldr	r3, [pc, #76]	; (800ba84 <HAL_RCC_OscConfig+0x4e0>)
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	4a12      	ldr	r2, [pc, #72]	; (800ba84 <HAL_RCC_OscConfig+0x4e0>)
 800ba3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ba40:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ba42:	f7fc fba9 	bl	8008198 <HAL_GetTick>
 800ba46:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ba48:	e008      	b.n	800ba5c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ba4a:	f7fc fba5 	bl	8008198 <HAL_GetTick>
 800ba4e:	4602      	mov	r2, r0
 800ba50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba52:	1ad3      	subs	r3, r2, r3
 800ba54:	2b64      	cmp	r3, #100	; 0x64
 800ba56:	d901      	bls.n	800ba5c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 800ba58:	2303      	movs	r3, #3
 800ba5a:	e1cc      	b.n	800bdf6 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ba5c:	4b09      	ldr	r3, [pc, #36]	; (800ba84 <HAL_RCC_OscConfig+0x4e0>)
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d0f0      	beq.n	800ba4a <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	689b      	ldr	r3, [r3, #8]
 800ba6c:	2b01      	cmp	r3, #1
 800ba6e:	d10b      	bne.n	800ba88 <HAL_RCC_OscConfig+0x4e4>
 800ba70:	4b03      	ldr	r3, [pc, #12]	; (800ba80 <HAL_RCC_OscConfig+0x4dc>)
 800ba72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba74:	4a02      	ldr	r2, [pc, #8]	; (800ba80 <HAL_RCC_OscConfig+0x4dc>)
 800ba76:	f043 0301 	orr.w	r3, r3, #1
 800ba7a:	6713      	str	r3, [r2, #112]	; 0x70
 800ba7c:	e05b      	b.n	800bb36 <HAL_RCC_OscConfig+0x592>
 800ba7e:	bf00      	nop
 800ba80:	58024400 	.word	0x58024400
 800ba84:	58024800 	.word	0x58024800
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	689b      	ldr	r3, [r3, #8]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d112      	bne.n	800bab6 <HAL_RCC_OscConfig+0x512>
 800ba90:	4b9d      	ldr	r3, [pc, #628]	; (800bd08 <HAL_RCC_OscConfig+0x764>)
 800ba92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba94:	4a9c      	ldr	r2, [pc, #624]	; (800bd08 <HAL_RCC_OscConfig+0x764>)
 800ba96:	f023 0301 	bic.w	r3, r3, #1
 800ba9a:	6713      	str	r3, [r2, #112]	; 0x70
 800ba9c:	4b9a      	ldr	r3, [pc, #616]	; (800bd08 <HAL_RCC_OscConfig+0x764>)
 800ba9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800baa0:	4a99      	ldr	r2, [pc, #612]	; (800bd08 <HAL_RCC_OscConfig+0x764>)
 800baa2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800baa6:	6713      	str	r3, [r2, #112]	; 0x70
 800baa8:	4b97      	ldr	r3, [pc, #604]	; (800bd08 <HAL_RCC_OscConfig+0x764>)
 800baaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800baac:	4a96      	ldr	r2, [pc, #600]	; (800bd08 <HAL_RCC_OscConfig+0x764>)
 800baae:	f023 0304 	bic.w	r3, r3, #4
 800bab2:	6713      	str	r3, [r2, #112]	; 0x70
 800bab4:	e03f      	b.n	800bb36 <HAL_RCC_OscConfig+0x592>
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	689b      	ldr	r3, [r3, #8]
 800baba:	2b05      	cmp	r3, #5
 800babc:	d112      	bne.n	800bae4 <HAL_RCC_OscConfig+0x540>
 800babe:	4b92      	ldr	r3, [pc, #584]	; (800bd08 <HAL_RCC_OscConfig+0x764>)
 800bac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bac2:	4a91      	ldr	r2, [pc, #580]	; (800bd08 <HAL_RCC_OscConfig+0x764>)
 800bac4:	f043 0304 	orr.w	r3, r3, #4
 800bac8:	6713      	str	r3, [r2, #112]	; 0x70
 800baca:	4b8f      	ldr	r3, [pc, #572]	; (800bd08 <HAL_RCC_OscConfig+0x764>)
 800bacc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bace:	4a8e      	ldr	r2, [pc, #568]	; (800bd08 <HAL_RCC_OscConfig+0x764>)
 800bad0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bad4:	6713      	str	r3, [r2, #112]	; 0x70
 800bad6:	4b8c      	ldr	r3, [pc, #560]	; (800bd08 <HAL_RCC_OscConfig+0x764>)
 800bad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bada:	4a8b      	ldr	r2, [pc, #556]	; (800bd08 <HAL_RCC_OscConfig+0x764>)
 800badc:	f043 0301 	orr.w	r3, r3, #1
 800bae0:	6713      	str	r3, [r2, #112]	; 0x70
 800bae2:	e028      	b.n	800bb36 <HAL_RCC_OscConfig+0x592>
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	689b      	ldr	r3, [r3, #8]
 800bae8:	2b85      	cmp	r3, #133	; 0x85
 800baea:	d112      	bne.n	800bb12 <HAL_RCC_OscConfig+0x56e>
 800baec:	4b86      	ldr	r3, [pc, #536]	; (800bd08 <HAL_RCC_OscConfig+0x764>)
 800baee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800baf0:	4a85      	ldr	r2, [pc, #532]	; (800bd08 <HAL_RCC_OscConfig+0x764>)
 800baf2:	f043 0304 	orr.w	r3, r3, #4
 800baf6:	6713      	str	r3, [r2, #112]	; 0x70
 800baf8:	4b83      	ldr	r3, [pc, #524]	; (800bd08 <HAL_RCC_OscConfig+0x764>)
 800bafa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bafc:	4a82      	ldr	r2, [pc, #520]	; (800bd08 <HAL_RCC_OscConfig+0x764>)
 800bafe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb02:	6713      	str	r3, [r2, #112]	; 0x70
 800bb04:	4b80      	ldr	r3, [pc, #512]	; (800bd08 <HAL_RCC_OscConfig+0x764>)
 800bb06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb08:	4a7f      	ldr	r2, [pc, #508]	; (800bd08 <HAL_RCC_OscConfig+0x764>)
 800bb0a:	f043 0301 	orr.w	r3, r3, #1
 800bb0e:	6713      	str	r3, [r2, #112]	; 0x70
 800bb10:	e011      	b.n	800bb36 <HAL_RCC_OscConfig+0x592>
 800bb12:	4b7d      	ldr	r3, [pc, #500]	; (800bd08 <HAL_RCC_OscConfig+0x764>)
 800bb14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb16:	4a7c      	ldr	r2, [pc, #496]	; (800bd08 <HAL_RCC_OscConfig+0x764>)
 800bb18:	f023 0301 	bic.w	r3, r3, #1
 800bb1c:	6713      	str	r3, [r2, #112]	; 0x70
 800bb1e:	4b7a      	ldr	r3, [pc, #488]	; (800bd08 <HAL_RCC_OscConfig+0x764>)
 800bb20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb22:	4a79      	ldr	r2, [pc, #484]	; (800bd08 <HAL_RCC_OscConfig+0x764>)
 800bb24:	f023 0304 	bic.w	r3, r3, #4
 800bb28:	6713      	str	r3, [r2, #112]	; 0x70
 800bb2a:	4b77      	ldr	r3, [pc, #476]	; (800bd08 <HAL_RCC_OscConfig+0x764>)
 800bb2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb2e:	4a76      	ldr	r2, [pc, #472]	; (800bd08 <HAL_RCC_OscConfig+0x764>)
 800bb30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bb34:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	689b      	ldr	r3, [r3, #8]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d015      	beq.n	800bb6a <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bb3e:	f7fc fb2b 	bl	8008198 <HAL_GetTick>
 800bb42:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bb44:	e00a      	b.n	800bb5c <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bb46:	f7fc fb27 	bl	8008198 <HAL_GetTick>
 800bb4a:	4602      	mov	r2, r0
 800bb4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb4e:	1ad3      	subs	r3, r2, r3
 800bb50:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb54:	4293      	cmp	r3, r2
 800bb56:	d901      	bls.n	800bb5c <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 800bb58:	2303      	movs	r3, #3
 800bb5a:	e14c      	b.n	800bdf6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bb5c:	4b6a      	ldr	r3, [pc, #424]	; (800bd08 <HAL_RCC_OscConfig+0x764>)
 800bb5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb60:	f003 0302 	and.w	r3, r3, #2
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d0ee      	beq.n	800bb46 <HAL_RCC_OscConfig+0x5a2>
 800bb68:	e014      	b.n	800bb94 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bb6a:	f7fc fb15 	bl	8008198 <HAL_GetTick>
 800bb6e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800bb70:	e00a      	b.n	800bb88 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bb72:	f7fc fb11 	bl	8008198 <HAL_GetTick>
 800bb76:	4602      	mov	r2, r0
 800bb78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb7a:	1ad3      	subs	r3, r2, r3
 800bb7c:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb80:	4293      	cmp	r3, r2
 800bb82:	d901      	bls.n	800bb88 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 800bb84:	2303      	movs	r3, #3
 800bb86:	e136      	b.n	800bdf6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800bb88:	4b5f      	ldr	r3, [pc, #380]	; (800bd08 <HAL_RCC_OscConfig+0x764>)
 800bb8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb8c:	f003 0302 	and.w	r3, r3, #2
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d1ee      	bne.n	800bb72 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	f000 812b 	beq.w	800bdf4 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800bb9e:	4b5a      	ldr	r3, [pc, #360]	; (800bd08 <HAL_RCC_OscConfig+0x764>)
 800bba0:	691b      	ldr	r3, [r3, #16]
 800bba2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bba6:	2b18      	cmp	r3, #24
 800bba8:	f000 80bb 	beq.w	800bd22 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbb0:	2b02      	cmp	r3, #2
 800bbb2:	f040 8095 	bne.w	800bce0 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bbb6:	4b54      	ldr	r3, [pc, #336]	; (800bd08 <HAL_RCC_OscConfig+0x764>)
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	4a53      	ldr	r2, [pc, #332]	; (800bd08 <HAL_RCC_OscConfig+0x764>)
 800bbbc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bbc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bbc2:	f7fc fae9 	bl	8008198 <HAL_GetTick>
 800bbc6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800bbc8:	e008      	b.n	800bbdc <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bbca:	f7fc fae5 	bl	8008198 <HAL_GetTick>
 800bbce:	4602      	mov	r2, r0
 800bbd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbd2:	1ad3      	subs	r3, r2, r3
 800bbd4:	2b02      	cmp	r3, #2
 800bbd6:	d901      	bls.n	800bbdc <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 800bbd8:	2303      	movs	r3, #3
 800bbda:	e10c      	b.n	800bdf6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800bbdc:	4b4a      	ldr	r3, [pc, #296]	; (800bd08 <HAL_RCC_OscConfig+0x764>)
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d1f0      	bne.n	800bbca <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800bbe8:	4b47      	ldr	r3, [pc, #284]	; (800bd08 <HAL_RCC_OscConfig+0x764>)
 800bbea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bbec:	4b47      	ldr	r3, [pc, #284]	; (800bd0c <HAL_RCC_OscConfig+0x768>)
 800bbee:	4013      	ands	r3, r2
 800bbf0:	687a      	ldr	r2, [r7, #4]
 800bbf2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800bbf4:	687a      	ldr	r2, [r7, #4]
 800bbf6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800bbf8:	0112      	lsls	r2, r2, #4
 800bbfa:	430a      	orrs	r2, r1
 800bbfc:	4942      	ldr	r1, [pc, #264]	; (800bd08 <HAL_RCC_OscConfig+0x764>)
 800bbfe:	4313      	orrs	r3, r2
 800bc00:	628b      	str	r3, [r1, #40]	; 0x28
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc06:	3b01      	subs	r3, #1
 800bc08:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc10:	3b01      	subs	r3, #1
 800bc12:	025b      	lsls	r3, r3, #9
 800bc14:	b29b      	uxth	r3, r3
 800bc16:	431a      	orrs	r2, r3
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc1c:	3b01      	subs	r3, #1
 800bc1e:	041b      	lsls	r3, r3, #16
 800bc20:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800bc24:	431a      	orrs	r2, r3
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc2a:	3b01      	subs	r3, #1
 800bc2c:	061b      	lsls	r3, r3, #24
 800bc2e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800bc32:	4935      	ldr	r1, [pc, #212]	; (800bd08 <HAL_RCC_OscConfig+0x764>)
 800bc34:	4313      	orrs	r3, r2
 800bc36:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800bc38:	4b33      	ldr	r3, [pc, #204]	; (800bd08 <HAL_RCC_OscConfig+0x764>)
 800bc3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc3c:	4a32      	ldr	r2, [pc, #200]	; (800bd08 <HAL_RCC_OscConfig+0x764>)
 800bc3e:	f023 0301 	bic.w	r3, r3, #1
 800bc42:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800bc44:	4b30      	ldr	r3, [pc, #192]	; (800bd08 <HAL_RCC_OscConfig+0x764>)
 800bc46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bc48:	4b31      	ldr	r3, [pc, #196]	; (800bd10 <HAL_RCC_OscConfig+0x76c>)
 800bc4a:	4013      	ands	r3, r2
 800bc4c:	687a      	ldr	r2, [r7, #4]
 800bc4e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800bc50:	00d2      	lsls	r2, r2, #3
 800bc52:	492d      	ldr	r1, [pc, #180]	; (800bd08 <HAL_RCC_OscConfig+0x764>)
 800bc54:	4313      	orrs	r3, r2
 800bc56:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800bc58:	4b2b      	ldr	r3, [pc, #172]	; (800bd08 <HAL_RCC_OscConfig+0x764>)
 800bc5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc5c:	f023 020c 	bic.w	r2, r3, #12
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc64:	4928      	ldr	r1, [pc, #160]	; (800bd08 <HAL_RCC_OscConfig+0x764>)
 800bc66:	4313      	orrs	r3, r2
 800bc68:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800bc6a:	4b27      	ldr	r3, [pc, #156]	; (800bd08 <HAL_RCC_OscConfig+0x764>)
 800bc6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc6e:	f023 0202 	bic.w	r2, r3, #2
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc76:	4924      	ldr	r1, [pc, #144]	; (800bd08 <HAL_RCC_OscConfig+0x764>)
 800bc78:	4313      	orrs	r3, r2
 800bc7a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800bc7c:	4b22      	ldr	r3, [pc, #136]	; (800bd08 <HAL_RCC_OscConfig+0x764>)
 800bc7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc80:	4a21      	ldr	r2, [pc, #132]	; (800bd08 <HAL_RCC_OscConfig+0x764>)
 800bc82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bc86:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bc88:	4b1f      	ldr	r3, [pc, #124]	; (800bd08 <HAL_RCC_OscConfig+0x764>)
 800bc8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc8c:	4a1e      	ldr	r2, [pc, #120]	; (800bd08 <HAL_RCC_OscConfig+0x764>)
 800bc8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bc92:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800bc94:	4b1c      	ldr	r3, [pc, #112]	; (800bd08 <HAL_RCC_OscConfig+0x764>)
 800bc96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc98:	4a1b      	ldr	r2, [pc, #108]	; (800bd08 <HAL_RCC_OscConfig+0x764>)
 800bc9a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800bc9e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800bca0:	4b19      	ldr	r3, [pc, #100]	; (800bd08 <HAL_RCC_OscConfig+0x764>)
 800bca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bca4:	4a18      	ldr	r2, [pc, #96]	; (800bd08 <HAL_RCC_OscConfig+0x764>)
 800bca6:	f043 0301 	orr.w	r3, r3, #1
 800bcaa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800bcac:	4b16      	ldr	r3, [pc, #88]	; (800bd08 <HAL_RCC_OscConfig+0x764>)
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	4a15      	ldr	r2, [pc, #84]	; (800bd08 <HAL_RCC_OscConfig+0x764>)
 800bcb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bcb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bcb8:	f7fc fa6e 	bl	8008198 <HAL_GetTick>
 800bcbc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800bcbe:	e008      	b.n	800bcd2 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bcc0:	f7fc fa6a 	bl	8008198 <HAL_GetTick>
 800bcc4:	4602      	mov	r2, r0
 800bcc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcc8:	1ad3      	subs	r3, r2, r3
 800bcca:	2b02      	cmp	r3, #2
 800bccc:	d901      	bls.n	800bcd2 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800bcce:	2303      	movs	r3, #3
 800bcd0:	e091      	b.n	800bdf6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800bcd2:	4b0d      	ldr	r3, [pc, #52]	; (800bd08 <HAL_RCC_OscConfig+0x764>)
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d0f0      	beq.n	800bcc0 <HAL_RCC_OscConfig+0x71c>
 800bcde:	e089      	b.n	800bdf4 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bce0:	4b09      	ldr	r3, [pc, #36]	; (800bd08 <HAL_RCC_OscConfig+0x764>)
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	4a08      	ldr	r2, [pc, #32]	; (800bd08 <HAL_RCC_OscConfig+0x764>)
 800bce6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bcea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bcec:	f7fc fa54 	bl	8008198 <HAL_GetTick>
 800bcf0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800bcf2:	e00f      	b.n	800bd14 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bcf4:	f7fc fa50 	bl	8008198 <HAL_GetTick>
 800bcf8:	4602      	mov	r2, r0
 800bcfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcfc:	1ad3      	subs	r3, r2, r3
 800bcfe:	2b02      	cmp	r3, #2
 800bd00:	d908      	bls.n	800bd14 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 800bd02:	2303      	movs	r3, #3
 800bd04:	e077      	b.n	800bdf6 <HAL_RCC_OscConfig+0x852>
 800bd06:	bf00      	nop
 800bd08:	58024400 	.word	0x58024400
 800bd0c:	fffffc0c 	.word	0xfffffc0c
 800bd10:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800bd14:	4b3a      	ldr	r3, [pc, #232]	; (800be00 <HAL_RCC_OscConfig+0x85c>)
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d1e9      	bne.n	800bcf4 <HAL_RCC_OscConfig+0x750>
 800bd20:	e068      	b.n	800bdf4 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800bd22:	4b37      	ldr	r3, [pc, #220]	; (800be00 <HAL_RCC_OscConfig+0x85c>)
 800bd24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd26:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800bd28:	4b35      	ldr	r3, [pc, #212]	; (800be00 <HAL_RCC_OscConfig+0x85c>)
 800bd2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd2c:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd32:	2b01      	cmp	r3, #1
 800bd34:	d031      	beq.n	800bd9a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bd36:	693b      	ldr	r3, [r7, #16]
 800bd38:	f003 0203 	and.w	r2, r3, #3
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bd40:	429a      	cmp	r2, r3
 800bd42:	d12a      	bne.n	800bd9a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800bd44:	693b      	ldr	r3, [r7, #16]
 800bd46:	091b      	lsrs	r3, r3, #4
 800bd48:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bd50:	429a      	cmp	r2, r3
 800bd52:	d122      	bne.n	800bd9a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd5e:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800bd60:	429a      	cmp	r2, r3
 800bd62:	d11a      	bne.n	800bd9a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	0a5b      	lsrs	r3, r3, #9
 800bd68:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd70:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800bd72:	429a      	cmp	r2, r3
 800bd74:	d111      	bne.n	800bd9a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	0c1b      	lsrs	r3, r3, #16
 800bd7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd82:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800bd84:	429a      	cmp	r2, r3
 800bd86:	d108      	bne.n	800bd9a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	0e1b      	lsrs	r3, r3, #24
 800bd8c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd94:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800bd96:	429a      	cmp	r2, r3
 800bd98:	d001      	beq.n	800bd9e <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800bd9a:	2301      	movs	r3, #1
 800bd9c:	e02b      	b.n	800bdf6 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800bd9e:	4b18      	ldr	r3, [pc, #96]	; (800be00 <HAL_RCC_OscConfig+0x85c>)
 800bda0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bda2:	08db      	lsrs	r3, r3, #3
 800bda4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bda8:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bdae:	693a      	ldr	r2, [r7, #16]
 800bdb0:	429a      	cmp	r2, r3
 800bdb2:	d01f      	beq.n	800bdf4 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800bdb4:	4b12      	ldr	r3, [pc, #72]	; (800be00 <HAL_RCC_OscConfig+0x85c>)
 800bdb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdb8:	4a11      	ldr	r2, [pc, #68]	; (800be00 <HAL_RCC_OscConfig+0x85c>)
 800bdba:	f023 0301 	bic.w	r3, r3, #1
 800bdbe:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800bdc0:	f7fc f9ea 	bl	8008198 <HAL_GetTick>
 800bdc4:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800bdc6:	bf00      	nop
 800bdc8:	f7fc f9e6 	bl	8008198 <HAL_GetTick>
 800bdcc:	4602      	mov	r2, r0
 800bdce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdd0:	4293      	cmp	r3, r2
 800bdd2:	d0f9      	beq.n	800bdc8 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800bdd4:	4b0a      	ldr	r3, [pc, #40]	; (800be00 <HAL_RCC_OscConfig+0x85c>)
 800bdd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bdd8:	4b0a      	ldr	r3, [pc, #40]	; (800be04 <HAL_RCC_OscConfig+0x860>)
 800bdda:	4013      	ands	r3, r2
 800bddc:	687a      	ldr	r2, [r7, #4]
 800bdde:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800bde0:	00d2      	lsls	r2, r2, #3
 800bde2:	4907      	ldr	r1, [pc, #28]	; (800be00 <HAL_RCC_OscConfig+0x85c>)
 800bde4:	4313      	orrs	r3, r2
 800bde6:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800bde8:	4b05      	ldr	r3, [pc, #20]	; (800be00 <HAL_RCC_OscConfig+0x85c>)
 800bdea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdec:	4a04      	ldr	r2, [pc, #16]	; (800be00 <HAL_RCC_OscConfig+0x85c>)
 800bdee:	f043 0301 	orr.w	r3, r3, #1
 800bdf2:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800bdf4:	2300      	movs	r3, #0
}
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	3730      	adds	r7, #48	; 0x30
 800bdfa:	46bd      	mov	sp, r7
 800bdfc:	bd80      	pop	{r7, pc}
 800bdfe:	bf00      	nop
 800be00:	58024400 	.word	0x58024400
 800be04:	ffff0007 	.word	0xffff0007

0800be08 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800be08:	b580      	push	{r7, lr}
 800be0a:	b086      	sub	sp, #24
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	6078      	str	r0, [r7, #4]
 800be10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d101      	bne.n	800be1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800be18:	2301      	movs	r3, #1
 800be1a:	e19c      	b.n	800c156 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800be1c:	4b8a      	ldr	r3, [pc, #552]	; (800c048 <HAL_RCC_ClockConfig+0x240>)
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	f003 030f 	and.w	r3, r3, #15
 800be24:	683a      	ldr	r2, [r7, #0]
 800be26:	429a      	cmp	r2, r3
 800be28:	d910      	bls.n	800be4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800be2a:	4b87      	ldr	r3, [pc, #540]	; (800c048 <HAL_RCC_ClockConfig+0x240>)
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	f023 020f 	bic.w	r2, r3, #15
 800be32:	4985      	ldr	r1, [pc, #532]	; (800c048 <HAL_RCC_ClockConfig+0x240>)
 800be34:	683b      	ldr	r3, [r7, #0]
 800be36:	4313      	orrs	r3, r2
 800be38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800be3a:	4b83      	ldr	r3, [pc, #524]	; (800c048 <HAL_RCC_ClockConfig+0x240>)
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	f003 030f 	and.w	r3, r3, #15
 800be42:	683a      	ldr	r2, [r7, #0]
 800be44:	429a      	cmp	r2, r3
 800be46:	d001      	beq.n	800be4c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800be48:	2301      	movs	r3, #1
 800be4a:	e184      	b.n	800c156 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	f003 0304 	and.w	r3, r3, #4
 800be54:	2b00      	cmp	r3, #0
 800be56:	d010      	beq.n	800be7a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	691a      	ldr	r2, [r3, #16]
 800be5c:	4b7b      	ldr	r3, [pc, #492]	; (800c04c <HAL_RCC_ClockConfig+0x244>)
 800be5e:	699b      	ldr	r3, [r3, #24]
 800be60:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800be64:	429a      	cmp	r2, r3
 800be66:	d908      	bls.n	800be7a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800be68:	4b78      	ldr	r3, [pc, #480]	; (800c04c <HAL_RCC_ClockConfig+0x244>)
 800be6a:	699b      	ldr	r3, [r3, #24]
 800be6c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	691b      	ldr	r3, [r3, #16]
 800be74:	4975      	ldr	r1, [pc, #468]	; (800c04c <HAL_RCC_ClockConfig+0x244>)
 800be76:	4313      	orrs	r3, r2
 800be78:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	f003 0308 	and.w	r3, r3, #8
 800be82:	2b00      	cmp	r3, #0
 800be84:	d010      	beq.n	800bea8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	695a      	ldr	r2, [r3, #20]
 800be8a:	4b70      	ldr	r3, [pc, #448]	; (800c04c <HAL_RCC_ClockConfig+0x244>)
 800be8c:	69db      	ldr	r3, [r3, #28]
 800be8e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800be92:	429a      	cmp	r2, r3
 800be94:	d908      	bls.n	800bea8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800be96:	4b6d      	ldr	r3, [pc, #436]	; (800c04c <HAL_RCC_ClockConfig+0x244>)
 800be98:	69db      	ldr	r3, [r3, #28]
 800be9a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	695b      	ldr	r3, [r3, #20]
 800bea2:	496a      	ldr	r1, [pc, #424]	; (800c04c <HAL_RCC_ClockConfig+0x244>)
 800bea4:	4313      	orrs	r3, r2
 800bea6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	f003 0310 	and.w	r3, r3, #16
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d010      	beq.n	800bed6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	699a      	ldr	r2, [r3, #24]
 800beb8:	4b64      	ldr	r3, [pc, #400]	; (800c04c <HAL_RCC_ClockConfig+0x244>)
 800beba:	69db      	ldr	r3, [r3, #28]
 800bebc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bec0:	429a      	cmp	r2, r3
 800bec2:	d908      	bls.n	800bed6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800bec4:	4b61      	ldr	r3, [pc, #388]	; (800c04c <HAL_RCC_ClockConfig+0x244>)
 800bec6:	69db      	ldr	r3, [r3, #28]
 800bec8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	699b      	ldr	r3, [r3, #24]
 800bed0:	495e      	ldr	r1, [pc, #376]	; (800c04c <HAL_RCC_ClockConfig+0x244>)
 800bed2:	4313      	orrs	r3, r2
 800bed4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	f003 0320 	and.w	r3, r3, #32
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d010      	beq.n	800bf04 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	69da      	ldr	r2, [r3, #28]
 800bee6:	4b59      	ldr	r3, [pc, #356]	; (800c04c <HAL_RCC_ClockConfig+0x244>)
 800bee8:	6a1b      	ldr	r3, [r3, #32]
 800beea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800beee:	429a      	cmp	r2, r3
 800bef0:	d908      	bls.n	800bf04 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800bef2:	4b56      	ldr	r3, [pc, #344]	; (800c04c <HAL_RCC_ClockConfig+0x244>)
 800bef4:	6a1b      	ldr	r3, [r3, #32]
 800bef6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	69db      	ldr	r3, [r3, #28]
 800befe:	4953      	ldr	r1, [pc, #332]	; (800c04c <HAL_RCC_ClockConfig+0x244>)
 800bf00:	4313      	orrs	r3, r2
 800bf02:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	f003 0302 	and.w	r3, r3, #2
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d010      	beq.n	800bf32 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	68da      	ldr	r2, [r3, #12]
 800bf14:	4b4d      	ldr	r3, [pc, #308]	; (800c04c <HAL_RCC_ClockConfig+0x244>)
 800bf16:	699b      	ldr	r3, [r3, #24]
 800bf18:	f003 030f 	and.w	r3, r3, #15
 800bf1c:	429a      	cmp	r2, r3
 800bf1e:	d908      	bls.n	800bf32 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bf20:	4b4a      	ldr	r3, [pc, #296]	; (800c04c <HAL_RCC_ClockConfig+0x244>)
 800bf22:	699b      	ldr	r3, [r3, #24]
 800bf24:	f023 020f 	bic.w	r2, r3, #15
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	68db      	ldr	r3, [r3, #12]
 800bf2c:	4947      	ldr	r1, [pc, #284]	; (800c04c <HAL_RCC_ClockConfig+0x244>)
 800bf2e:	4313      	orrs	r3, r2
 800bf30:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	f003 0301 	and.w	r3, r3, #1
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d055      	beq.n	800bfea <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800bf3e:	4b43      	ldr	r3, [pc, #268]	; (800c04c <HAL_RCC_ClockConfig+0x244>)
 800bf40:	699b      	ldr	r3, [r3, #24]
 800bf42:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	689b      	ldr	r3, [r3, #8]
 800bf4a:	4940      	ldr	r1, [pc, #256]	; (800c04c <HAL_RCC_ClockConfig+0x244>)
 800bf4c:	4313      	orrs	r3, r2
 800bf4e:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	685b      	ldr	r3, [r3, #4]
 800bf54:	2b02      	cmp	r3, #2
 800bf56:	d107      	bne.n	800bf68 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800bf58:	4b3c      	ldr	r3, [pc, #240]	; (800c04c <HAL_RCC_ClockConfig+0x244>)
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d121      	bne.n	800bfa8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800bf64:	2301      	movs	r3, #1
 800bf66:	e0f6      	b.n	800c156 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	685b      	ldr	r3, [r3, #4]
 800bf6c:	2b03      	cmp	r3, #3
 800bf6e:	d107      	bne.n	800bf80 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800bf70:	4b36      	ldr	r3, [pc, #216]	; (800c04c <HAL_RCC_ClockConfig+0x244>)
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d115      	bne.n	800bfa8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800bf7c:	2301      	movs	r3, #1
 800bf7e:	e0ea      	b.n	800c156 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	685b      	ldr	r3, [r3, #4]
 800bf84:	2b01      	cmp	r3, #1
 800bf86:	d107      	bne.n	800bf98 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800bf88:	4b30      	ldr	r3, [pc, #192]	; (800c04c <HAL_RCC_ClockConfig+0x244>)
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d109      	bne.n	800bfa8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800bf94:	2301      	movs	r3, #1
 800bf96:	e0de      	b.n	800c156 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800bf98:	4b2c      	ldr	r3, [pc, #176]	; (800c04c <HAL_RCC_ClockConfig+0x244>)
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	f003 0304 	and.w	r3, r3, #4
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d101      	bne.n	800bfa8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800bfa4:	2301      	movs	r3, #1
 800bfa6:	e0d6      	b.n	800c156 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800bfa8:	4b28      	ldr	r3, [pc, #160]	; (800c04c <HAL_RCC_ClockConfig+0x244>)
 800bfaa:	691b      	ldr	r3, [r3, #16]
 800bfac:	f023 0207 	bic.w	r2, r3, #7
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	685b      	ldr	r3, [r3, #4]
 800bfb4:	4925      	ldr	r1, [pc, #148]	; (800c04c <HAL_RCC_ClockConfig+0x244>)
 800bfb6:	4313      	orrs	r3, r2
 800bfb8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bfba:	f7fc f8ed 	bl	8008198 <HAL_GetTick>
 800bfbe:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bfc0:	e00a      	b.n	800bfd8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bfc2:	f7fc f8e9 	bl	8008198 <HAL_GetTick>
 800bfc6:	4602      	mov	r2, r0
 800bfc8:	697b      	ldr	r3, [r7, #20]
 800bfca:	1ad3      	subs	r3, r2, r3
 800bfcc:	f241 3288 	movw	r2, #5000	; 0x1388
 800bfd0:	4293      	cmp	r3, r2
 800bfd2:	d901      	bls.n	800bfd8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800bfd4:	2303      	movs	r3, #3
 800bfd6:	e0be      	b.n	800c156 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bfd8:	4b1c      	ldr	r3, [pc, #112]	; (800c04c <HAL_RCC_ClockConfig+0x244>)
 800bfda:	691b      	ldr	r3, [r3, #16]
 800bfdc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	685b      	ldr	r3, [r3, #4]
 800bfe4:	00db      	lsls	r3, r3, #3
 800bfe6:	429a      	cmp	r2, r3
 800bfe8:	d1eb      	bne.n	800bfc2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	f003 0302 	and.w	r3, r3, #2
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d010      	beq.n	800c018 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	68da      	ldr	r2, [r3, #12]
 800bffa:	4b14      	ldr	r3, [pc, #80]	; (800c04c <HAL_RCC_ClockConfig+0x244>)
 800bffc:	699b      	ldr	r3, [r3, #24]
 800bffe:	f003 030f 	and.w	r3, r3, #15
 800c002:	429a      	cmp	r2, r3
 800c004:	d208      	bcs.n	800c018 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c006:	4b11      	ldr	r3, [pc, #68]	; (800c04c <HAL_RCC_ClockConfig+0x244>)
 800c008:	699b      	ldr	r3, [r3, #24]
 800c00a:	f023 020f 	bic.w	r2, r3, #15
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	68db      	ldr	r3, [r3, #12]
 800c012:	490e      	ldr	r1, [pc, #56]	; (800c04c <HAL_RCC_ClockConfig+0x244>)
 800c014:	4313      	orrs	r3, r2
 800c016:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c018:	4b0b      	ldr	r3, [pc, #44]	; (800c048 <HAL_RCC_ClockConfig+0x240>)
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	f003 030f 	and.w	r3, r3, #15
 800c020:	683a      	ldr	r2, [r7, #0]
 800c022:	429a      	cmp	r2, r3
 800c024:	d214      	bcs.n	800c050 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c026:	4b08      	ldr	r3, [pc, #32]	; (800c048 <HAL_RCC_ClockConfig+0x240>)
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	f023 020f 	bic.w	r2, r3, #15
 800c02e:	4906      	ldr	r1, [pc, #24]	; (800c048 <HAL_RCC_ClockConfig+0x240>)
 800c030:	683b      	ldr	r3, [r7, #0]
 800c032:	4313      	orrs	r3, r2
 800c034:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c036:	4b04      	ldr	r3, [pc, #16]	; (800c048 <HAL_RCC_ClockConfig+0x240>)
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	f003 030f 	and.w	r3, r3, #15
 800c03e:	683a      	ldr	r2, [r7, #0]
 800c040:	429a      	cmp	r2, r3
 800c042:	d005      	beq.n	800c050 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800c044:	2301      	movs	r3, #1
 800c046:	e086      	b.n	800c156 <HAL_RCC_ClockConfig+0x34e>
 800c048:	52002000 	.word	0x52002000
 800c04c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	f003 0304 	and.w	r3, r3, #4
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d010      	beq.n	800c07e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	691a      	ldr	r2, [r3, #16]
 800c060:	4b3f      	ldr	r3, [pc, #252]	; (800c160 <HAL_RCC_ClockConfig+0x358>)
 800c062:	699b      	ldr	r3, [r3, #24]
 800c064:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c068:	429a      	cmp	r2, r3
 800c06a:	d208      	bcs.n	800c07e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800c06c:	4b3c      	ldr	r3, [pc, #240]	; (800c160 <HAL_RCC_ClockConfig+0x358>)
 800c06e:	699b      	ldr	r3, [r3, #24]
 800c070:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	691b      	ldr	r3, [r3, #16]
 800c078:	4939      	ldr	r1, [pc, #228]	; (800c160 <HAL_RCC_ClockConfig+0x358>)
 800c07a:	4313      	orrs	r3, r2
 800c07c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	f003 0308 	and.w	r3, r3, #8
 800c086:	2b00      	cmp	r3, #0
 800c088:	d010      	beq.n	800c0ac <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	695a      	ldr	r2, [r3, #20]
 800c08e:	4b34      	ldr	r3, [pc, #208]	; (800c160 <HAL_RCC_ClockConfig+0x358>)
 800c090:	69db      	ldr	r3, [r3, #28]
 800c092:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c096:	429a      	cmp	r2, r3
 800c098:	d208      	bcs.n	800c0ac <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800c09a:	4b31      	ldr	r3, [pc, #196]	; (800c160 <HAL_RCC_ClockConfig+0x358>)
 800c09c:	69db      	ldr	r3, [r3, #28]
 800c09e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	695b      	ldr	r3, [r3, #20]
 800c0a6:	492e      	ldr	r1, [pc, #184]	; (800c160 <HAL_RCC_ClockConfig+0x358>)
 800c0a8:	4313      	orrs	r3, r2
 800c0aa:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	f003 0310 	and.w	r3, r3, #16
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d010      	beq.n	800c0da <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	699a      	ldr	r2, [r3, #24]
 800c0bc:	4b28      	ldr	r3, [pc, #160]	; (800c160 <HAL_RCC_ClockConfig+0x358>)
 800c0be:	69db      	ldr	r3, [r3, #28]
 800c0c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c0c4:	429a      	cmp	r2, r3
 800c0c6:	d208      	bcs.n	800c0da <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800c0c8:	4b25      	ldr	r3, [pc, #148]	; (800c160 <HAL_RCC_ClockConfig+0x358>)
 800c0ca:	69db      	ldr	r3, [r3, #28]
 800c0cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	699b      	ldr	r3, [r3, #24]
 800c0d4:	4922      	ldr	r1, [pc, #136]	; (800c160 <HAL_RCC_ClockConfig+0x358>)
 800c0d6:	4313      	orrs	r3, r2
 800c0d8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	f003 0320 	and.w	r3, r3, #32
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d010      	beq.n	800c108 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	69da      	ldr	r2, [r3, #28]
 800c0ea:	4b1d      	ldr	r3, [pc, #116]	; (800c160 <HAL_RCC_ClockConfig+0x358>)
 800c0ec:	6a1b      	ldr	r3, [r3, #32]
 800c0ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c0f2:	429a      	cmp	r2, r3
 800c0f4:	d208      	bcs.n	800c108 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800c0f6:	4b1a      	ldr	r3, [pc, #104]	; (800c160 <HAL_RCC_ClockConfig+0x358>)
 800c0f8:	6a1b      	ldr	r3, [r3, #32]
 800c0fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	69db      	ldr	r3, [r3, #28]
 800c102:	4917      	ldr	r1, [pc, #92]	; (800c160 <HAL_RCC_ClockConfig+0x358>)
 800c104:	4313      	orrs	r3, r2
 800c106:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800c108:	f000 f834 	bl	800c174 <HAL_RCC_GetSysClockFreq>
 800c10c:	4602      	mov	r2, r0
 800c10e:	4b14      	ldr	r3, [pc, #80]	; (800c160 <HAL_RCC_ClockConfig+0x358>)
 800c110:	699b      	ldr	r3, [r3, #24]
 800c112:	0a1b      	lsrs	r3, r3, #8
 800c114:	f003 030f 	and.w	r3, r3, #15
 800c118:	4912      	ldr	r1, [pc, #72]	; (800c164 <HAL_RCC_ClockConfig+0x35c>)
 800c11a:	5ccb      	ldrb	r3, [r1, r3]
 800c11c:	f003 031f 	and.w	r3, r3, #31
 800c120:	fa22 f303 	lsr.w	r3, r2, r3
 800c124:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800c126:	4b0e      	ldr	r3, [pc, #56]	; (800c160 <HAL_RCC_ClockConfig+0x358>)
 800c128:	699b      	ldr	r3, [r3, #24]
 800c12a:	f003 030f 	and.w	r3, r3, #15
 800c12e:	4a0d      	ldr	r2, [pc, #52]	; (800c164 <HAL_RCC_ClockConfig+0x35c>)
 800c130:	5cd3      	ldrb	r3, [r2, r3]
 800c132:	f003 031f 	and.w	r3, r3, #31
 800c136:	693a      	ldr	r2, [r7, #16]
 800c138:	fa22 f303 	lsr.w	r3, r2, r3
 800c13c:	4a0a      	ldr	r2, [pc, #40]	; (800c168 <HAL_RCC_ClockConfig+0x360>)
 800c13e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800c140:	4a0a      	ldr	r2, [pc, #40]	; (800c16c <HAL_RCC_ClockConfig+0x364>)
 800c142:	693b      	ldr	r3, [r7, #16]
 800c144:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800c146:	4b0a      	ldr	r3, [pc, #40]	; (800c170 <HAL_RCC_ClockConfig+0x368>)
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	4618      	mov	r0, r3
 800c14c:	f7f4 ffc0 	bl	80010d0 <HAL_InitTick>
 800c150:	4603      	mov	r3, r0
 800c152:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800c154:	7bfb      	ldrb	r3, [r7, #15]
}
 800c156:	4618      	mov	r0, r3
 800c158:	3718      	adds	r7, #24
 800c15a:	46bd      	mov	sp, r7
 800c15c:	bd80      	pop	{r7, pc}
 800c15e:	bf00      	nop
 800c160:	58024400 	.word	0x58024400
 800c164:	08023098 	.word	0x08023098
 800c168:	24000040 	.word	0x24000040
 800c16c:	2400003c 	.word	0x2400003c
 800c170:	24000044 	.word	0x24000044

0800c174 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c174:	b480      	push	{r7}
 800c176:	b089      	sub	sp, #36	; 0x24
 800c178:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c17a:	4bb3      	ldr	r3, [pc, #716]	; (800c448 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c17c:	691b      	ldr	r3, [r3, #16]
 800c17e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c182:	2b18      	cmp	r3, #24
 800c184:	f200 8155 	bhi.w	800c432 <HAL_RCC_GetSysClockFreq+0x2be>
 800c188:	a201      	add	r2, pc, #4	; (adr r2, 800c190 <HAL_RCC_GetSysClockFreq+0x1c>)
 800c18a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c18e:	bf00      	nop
 800c190:	0800c1f5 	.word	0x0800c1f5
 800c194:	0800c433 	.word	0x0800c433
 800c198:	0800c433 	.word	0x0800c433
 800c19c:	0800c433 	.word	0x0800c433
 800c1a0:	0800c433 	.word	0x0800c433
 800c1a4:	0800c433 	.word	0x0800c433
 800c1a8:	0800c433 	.word	0x0800c433
 800c1ac:	0800c433 	.word	0x0800c433
 800c1b0:	0800c21b 	.word	0x0800c21b
 800c1b4:	0800c433 	.word	0x0800c433
 800c1b8:	0800c433 	.word	0x0800c433
 800c1bc:	0800c433 	.word	0x0800c433
 800c1c0:	0800c433 	.word	0x0800c433
 800c1c4:	0800c433 	.word	0x0800c433
 800c1c8:	0800c433 	.word	0x0800c433
 800c1cc:	0800c433 	.word	0x0800c433
 800c1d0:	0800c221 	.word	0x0800c221
 800c1d4:	0800c433 	.word	0x0800c433
 800c1d8:	0800c433 	.word	0x0800c433
 800c1dc:	0800c433 	.word	0x0800c433
 800c1e0:	0800c433 	.word	0x0800c433
 800c1e4:	0800c433 	.word	0x0800c433
 800c1e8:	0800c433 	.word	0x0800c433
 800c1ec:	0800c433 	.word	0x0800c433
 800c1f0:	0800c227 	.word	0x0800c227
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c1f4:	4b94      	ldr	r3, [pc, #592]	; (800c448 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	f003 0320 	and.w	r3, r3, #32
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d009      	beq.n	800c214 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c200:	4b91      	ldr	r3, [pc, #580]	; (800c448 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	08db      	lsrs	r3, r3, #3
 800c206:	f003 0303 	and.w	r3, r3, #3
 800c20a:	4a90      	ldr	r2, [pc, #576]	; (800c44c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c20c:	fa22 f303 	lsr.w	r3, r2, r3
 800c210:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800c212:	e111      	b.n	800c438 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800c214:	4b8d      	ldr	r3, [pc, #564]	; (800c44c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c216:	61bb      	str	r3, [r7, #24]
      break;
 800c218:	e10e      	b.n	800c438 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800c21a:	4b8d      	ldr	r3, [pc, #564]	; (800c450 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800c21c:	61bb      	str	r3, [r7, #24]
      break;
 800c21e:	e10b      	b.n	800c438 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800c220:	4b8c      	ldr	r3, [pc, #560]	; (800c454 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800c222:	61bb      	str	r3, [r7, #24]
      break;
 800c224:	e108      	b.n	800c438 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c226:	4b88      	ldr	r3, [pc, #544]	; (800c448 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c22a:	f003 0303 	and.w	r3, r3, #3
 800c22e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800c230:	4b85      	ldr	r3, [pc, #532]	; (800c448 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c234:	091b      	lsrs	r3, r3, #4
 800c236:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c23a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800c23c:	4b82      	ldr	r3, [pc, #520]	; (800c448 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c23e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c240:	f003 0301 	and.w	r3, r3, #1
 800c244:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c246:	4b80      	ldr	r3, [pc, #512]	; (800c448 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c24a:	08db      	lsrs	r3, r3, #3
 800c24c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c250:	68fa      	ldr	r2, [r7, #12]
 800c252:	fb02 f303 	mul.w	r3, r2, r3
 800c256:	ee07 3a90 	vmov	s15, r3
 800c25a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c25e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800c262:	693b      	ldr	r3, [r7, #16]
 800c264:	2b00      	cmp	r3, #0
 800c266:	f000 80e1 	beq.w	800c42c <HAL_RCC_GetSysClockFreq+0x2b8>
 800c26a:	697b      	ldr	r3, [r7, #20]
 800c26c:	2b02      	cmp	r3, #2
 800c26e:	f000 8083 	beq.w	800c378 <HAL_RCC_GetSysClockFreq+0x204>
 800c272:	697b      	ldr	r3, [r7, #20]
 800c274:	2b02      	cmp	r3, #2
 800c276:	f200 80a1 	bhi.w	800c3bc <HAL_RCC_GetSysClockFreq+0x248>
 800c27a:	697b      	ldr	r3, [r7, #20]
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d003      	beq.n	800c288 <HAL_RCC_GetSysClockFreq+0x114>
 800c280:	697b      	ldr	r3, [r7, #20]
 800c282:	2b01      	cmp	r3, #1
 800c284:	d056      	beq.n	800c334 <HAL_RCC_GetSysClockFreq+0x1c0>
 800c286:	e099      	b.n	800c3bc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c288:	4b6f      	ldr	r3, [pc, #444]	; (800c448 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	f003 0320 	and.w	r3, r3, #32
 800c290:	2b00      	cmp	r3, #0
 800c292:	d02d      	beq.n	800c2f0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c294:	4b6c      	ldr	r3, [pc, #432]	; (800c448 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	08db      	lsrs	r3, r3, #3
 800c29a:	f003 0303 	and.w	r3, r3, #3
 800c29e:	4a6b      	ldr	r2, [pc, #428]	; (800c44c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c2a0:	fa22 f303 	lsr.w	r3, r2, r3
 800c2a4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	ee07 3a90 	vmov	s15, r3
 800c2ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c2b0:	693b      	ldr	r3, [r7, #16]
 800c2b2:	ee07 3a90 	vmov	s15, r3
 800c2b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c2be:	4b62      	ldr	r3, [pc, #392]	; (800c448 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c2c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2c6:	ee07 3a90 	vmov	s15, r3
 800c2ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c2ce:	ed97 6a02 	vldr	s12, [r7, #8]
 800c2d2:	eddf 5a61 	vldr	s11, [pc, #388]	; 800c458 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c2d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c2da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c2de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c2e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c2e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c2ea:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800c2ee:	e087      	b.n	800c400 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c2f0:	693b      	ldr	r3, [r7, #16]
 800c2f2:	ee07 3a90 	vmov	s15, r3
 800c2f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2fa:	eddf 6a58 	vldr	s13, [pc, #352]	; 800c45c <HAL_RCC_GetSysClockFreq+0x2e8>
 800c2fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c302:	4b51      	ldr	r3, [pc, #324]	; (800c448 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c306:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c30a:	ee07 3a90 	vmov	s15, r3
 800c30e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c312:	ed97 6a02 	vldr	s12, [r7, #8]
 800c316:	eddf 5a50 	vldr	s11, [pc, #320]	; 800c458 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c31a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c31e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c322:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c326:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c32a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c32e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c332:	e065      	b.n	800c400 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c334:	693b      	ldr	r3, [r7, #16]
 800c336:	ee07 3a90 	vmov	s15, r3
 800c33a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c33e:	eddf 6a48 	vldr	s13, [pc, #288]	; 800c460 <HAL_RCC_GetSysClockFreq+0x2ec>
 800c342:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c346:	4b40      	ldr	r3, [pc, #256]	; (800c448 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c34a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c34e:	ee07 3a90 	vmov	s15, r3
 800c352:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c356:	ed97 6a02 	vldr	s12, [r7, #8]
 800c35a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800c458 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c35e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c362:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c366:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c36a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c36e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c372:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c376:	e043      	b.n	800c400 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c378:	693b      	ldr	r3, [r7, #16]
 800c37a:	ee07 3a90 	vmov	s15, r3
 800c37e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c382:	eddf 6a38 	vldr	s13, [pc, #224]	; 800c464 <HAL_RCC_GetSysClockFreq+0x2f0>
 800c386:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c38a:	4b2f      	ldr	r3, [pc, #188]	; (800c448 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c38c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c38e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c392:	ee07 3a90 	vmov	s15, r3
 800c396:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c39a:	ed97 6a02 	vldr	s12, [r7, #8]
 800c39e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800c458 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c3a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c3a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c3aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c3ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c3b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c3ba:	e021      	b.n	800c400 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c3bc:	693b      	ldr	r3, [r7, #16]
 800c3be:	ee07 3a90 	vmov	s15, r3
 800c3c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3c6:	eddf 6a26 	vldr	s13, [pc, #152]	; 800c460 <HAL_RCC_GetSysClockFreq+0x2ec>
 800c3ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c3ce:	4b1e      	ldr	r3, [pc, #120]	; (800c448 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c3d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3d6:	ee07 3a90 	vmov	s15, r3
 800c3da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c3de:	ed97 6a02 	vldr	s12, [r7, #8]
 800c3e2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800c458 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c3e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c3ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c3ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c3f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c3f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c3fe:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800c400:	4b11      	ldr	r3, [pc, #68]	; (800c448 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c404:	0a5b      	lsrs	r3, r3, #9
 800c406:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c40a:	3301      	adds	r3, #1
 800c40c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800c40e:	683b      	ldr	r3, [r7, #0]
 800c410:	ee07 3a90 	vmov	s15, r3
 800c414:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c418:	edd7 6a07 	vldr	s13, [r7, #28]
 800c41c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c420:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c424:	ee17 3a90 	vmov	r3, s15
 800c428:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800c42a:	e005      	b.n	800c438 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800c42c:	2300      	movs	r3, #0
 800c42e:	61bb      	str	r3, [r7, #24]
      break;
 800c430:	e002      	b.n	800c438 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800c432:	4b07      	ldr	r3, [pc, #28]	; (800c450 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800c434:	61bb      	str	r3, [r7, #24]
      break;
 800c436:	bf00      	nop
  }

  return sysclockfreq;
 800c438:	69bb      	ldr	r3, [r7, #24]
}
 800c43a:	4618      	mov	r0, r3
 800c43c:	3724      	adds	r7, #36	; 0x24
 800c43e:	46bd      	mov	sp, r7
 800c440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c444:	4770      	bx	lr
 800c446:	bf00      	nop
 800c448:	58024400 	.word	0x58024400
 800c44c:	03d09000 	.word	0x03d09000
 800c450:	003d0900 	.word	0x003d0900
 800c454:	016e3600 	.word	0x016e3600
 800c458:	46000000 	.word	0x46000000
 800c45c:	4c742400 	.word	0x4c742400
 800c460:	4a742400 	.word	0x4a742400
 800c464:	4bb71b00 	.word	0x4bb71b00

0800c468 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c468:	b580      	push	{r7, lr}
 800c46a:	b082      	sub	sp, #8
 800c46c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800c46e:	f7ff fe81 	bl	800c174 <HAL_RCC_GetSysClockFreq>
 800c472:	4602      	mov	r2, r0
 800c474:	4b10      	ldr	r3, [pc, #64]	; (800c4b8 <HAL_RCC_GetHCLKFreq+0x50>)
 800c476:	699b      	ldr	r3, [r3, #24]
 800c478:	0a1b      	lsrs	r3, r3, #8
 800c47a:	f003 030f 	and.w	r3, r3, #15
 800c47e:	490f      	ldr	r1, [pc, #60]	; (800c4bc <HAL_RCC_GetHCLKFreq+0x54>)
 800c480:	5ccb      	ldrb	r3, [r1, r3]
 800c482:	f003 031f 	and.w	r3, r3, #31
 800c486:	fa22 f303 	lsr.w	r3, r2, r3
 800c48a:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800c48c:	4b0a      	ldr	r3, [pc, #40]	; (800c4b8 <HAL_RCC_GetHCLKFreq+0x50>)
 800c48e:	699b      	ldr	r3, [r3, #24]
 800c490:	f003 030f 	and.w	r3, r3, #15
 800c494:	4a09      	ldr	r2, [pc, #36]	; (800c4bc <HAL_RCC_GetHCLKFreq+0x54>)
 800c496:	5cd3      	ldrb	r3, [r2, r3]
 800c498:	f003 031f 	and.w	r3, r3, #31
 800c49c:	687a      	ldr	r2, [r7, #4]
 800c49e:	fa22 f303 	lsr.w	r3, r2, r3
 800c4a2:	4a07      	ldr	r2, [pc, #28]	; (800c4c0 <HAL_RCC_GetHCLKFreq+0x58>)
 800c4a4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800c4a6:	4a07      	ldr	r2, [pc, #28]	; (800c4c4 <HAL_RCC_GetHCLKFreq+0x5c>)
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800c4ac:	4b04      	ldr	r3, [pc, #16]	; (800c4c0 <HAL_RCC_GetHCLKFreq+0x58>)
 800c4ae:	681b      	ldr	r3, [r3, #0]
}
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	3708      	adds	r7, #8
 800c4b4:	46bd      	mov	sp, r7
 800c4b6:	bd80      	pop	{r7, pc}
 800c4b8:	58024400 	.word	0x58024400
 800c4bc:	08023098 	.word	0x08023098
 800c4c0:	24000040 	.word	0x24000040
 800c4c4:	2400003c 	.word	0x2400003c

0800c4c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c4c8:	b580      	push	{r7, lr}
 800c4ca:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800c4cc:	f7ff ffcc 	bl	800c468 <HAL_RCC_GetHCLKFreq>
 800c4d0:	4602      	mov	r2, r0
 800c4d2:	4b06      	ldr	r3, [pc, #24]	; (800c4ec <HAL_RCC_GetPCLK1Freq+0x24>)
 800c4d4:	69db      	ldr	r3, [r3, #28]
 800c4d6:	091b      	lsrs	r3, r3, #4
 800c4d8:	f003 0307 	and.w	r3, r3, #7
 800c4dc:	4904      	ldr	r1, [pc, #16]	; (800c4f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800c4de:	5ccb      	ldrb	r3, [r1, r3]
 800c4e0:	f003 031f 	and.w	r3, r3, #31
 800c4e4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	bd80      	pop	{r7, pc}
 800c4ec:	58024400 	.word	0x58024400
 800c4f0:	08023098 	.word	0x08023098

0800c4f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c4f4:	b580      	push	{r7, lr}
 800c4f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 800c4f8:	f7ff ffb6 	bl	800c468 <HAL_RCC_GetHCLKFreq>
 800c4fc:	4602      	mov	r2, r0
 800c4fe:	4b06      	ldr	r3, [pc, #24]	; (800c518 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c500:	69db      	ldr	r3, [r3, #28]
 800c502:	0a1b      	lsrs	r3, r3, #8
 800c504:	f003 0307 	and.w	r3, r3, #7
 800c508:	4904      	ldr	r1, [pc, #16]	; (800c51c <HAL_RCC_GetPCLK2Freq+0x28>)
 800c50a:	5ccb      	ldrb	r3, [r1, r3]
 800c50c:	f003 031f 	and.w	r3, r3, #31
 800c510:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800c514:	4618      	mov	r0, r3
 800c516:	bd80      	pop	{r7, pc}
 800c518:	58024400 	.word	0x58024400
 800c51c:	08023098 	.word	0x08023098

0800c520 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800c520:	b480      	push	{r7}
 800c522:	b083      	sub	sp, #12
 800c524:	af00      	add	r7, sp, #0
 800c526:	6078      	str	r0, [r7, #4]
 800c528:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	223f      	movs	r2, #63	; 0x3f
 800c52e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800c530:	4b1a      	ldr	r3, [pc, #104]	; (800c59c <HAL_RCC_GetClockConfig+0x7c>)
 800c532:	691b      	ldr	r3, [r3, #16]
 800c534:	f003 0207 	and.w	r2, r3, #7
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	605a      	str	r2, [r3, #4]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
#else
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE);
 800c53c:	4b17      	ldr	r3, [pc, #92]	; (800c59c <HAL_RCC_GetClockConfig+0x7c>)
 800c53e:	699b      	ldr	r3, [r3, #24]
 800c540:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE);
 800c548:	4b14      	ldr	r3, [pc, #80]	; (800c59c <HAL_RCC_GetClockConfig+0x7c>)
 800c54a:	699b      	ldr	r3, [r3, #24]
 800c54c:	f003 020f 	and.w	r2, r3, #15
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE);
 800c554:	4b11      	ldr	r3, [pc, #68]	; (800c59c <HAL_RCC_GetClockConfig+0x7c>)
 800c556:	699b      	ldr	r3, [r3, #24]
 800c558:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1);
 800c560:	4b0e      	ldr	r3, [pc, #56]	; (800c59c <HAL_RCC_GetClockConfig+0x7c>)
 800c562:	69db      	ldr	r3, [r3, #28]
 800c564:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2);
 800c56c:	4b0b      	ldr	r3, [pc, #44]	; (800c59c <HAL_RCC_GetClockConfig+0x7c>)
 800c56e:	69db      	ldr	r3, [r3, #28]
 800c570:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
 800c578:	4b08      	ldr	r3, [pc, #32]	; (800c59c <HAL_RCC_GetClockConfig+0x7c>)
 800c57a:	6a1b      	ldr	r3, [r3, #32]
 800c57c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	61da      	str	r2, [r3, #28]
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800c584:	4b06      	ldr	r3, [pc, #24]	; (800c5a0 <HAL_RCC_GetClockConfig+0x80>)
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	f003 020f 	and.w	r2, r3, #15
 800c58c:	683b      	ldr	r3, [r7, #0]
 800c58e:	601a      	str	r2, [r3, #0]
}
 800c590:	bf00      	nop
 800c592:	370c      	adds	r7, #12
 800c594:	46bd      	mov	sp, r7
 800c596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c59a:	4770      	bx	lr
 800c59c:	58024400 	.word	0x58024400
 800c5a0:	52002000 	.word	0x52002000

0800c5a4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c5a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c5a8:	b0c8      	sub	sp, #288	; 0x120
 800c5aa:	af00      	add	r7, sp, #0
 800c5ac:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800c5b0:	2300      	movs	r3, #0
 800c5b2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c5bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c5c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5c4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800c5c8:	2500      	movs	r5, #0
 800c5ca:	ea54 0305 	orrs.w	r3, r4, r5
 800c5ce:	d049      	beq.n	800c664 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800c5d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c5d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c5d6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c5da:	d02f      	beq.n	800c63c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800c5dc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c5e0:	d828      	bhi.n	800c634 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800c5e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c5e6:	d01a      	beq.n	800c61e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800c5e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c5ec:	d822      	bhi.n	800c634 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d003      	beq.n	800c5fa <HAL_RCCEx_PeriphCLKConfig+0x56>
 800c5f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c5f6:	d007      	beq.n	800c608 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800c5f8:	e01c      	b.n	800c634 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c5fa:	4ba7      	ldr	r3, [pc, #668]	; (800c898 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c5fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5fe:	4aa6      	ldr	r2, [pc, #664]	; (800c898 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c600:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c604:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800c606:	e01a      	b.n	800c63e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c608:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c60c:	3308      	adds	r3, #8
 800c60e:	2102      	movs	r1, #2
 800c610:	4618      	mov	r0, r3
 800c612:	f001 f985 	bl	800d920 <RCCEx_PLL2_Config>
 800c616:	4603      	mov	r3, r0
 800c618:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800c61c:	e00f      	b.n	800c63e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c61e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c622:	3328      	adds	r3, #40	; 0x28
 800c624:	2102      	movs	r1, #2
 800c626:	4618      	mov	r0, r3
 800c628:	f001 fa2c 	bl	800da84 <RCCEx_PLL3_Config>
 800c62c:	4603      	mov	r3, r0
 800c62e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800c632:	e004      	b.n	800c63e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c634:	2301      	movs	r3, #1
 800c636:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c63a:	e000      	b.n	800c63e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800c63c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c63e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c642:	2b00      	cmp	r3, #0
 800c644:	d10a      	bne.n	800c65c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800c646:	4b94      	ldr	r3, [pc, #592]	; (800c898 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c648:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c64a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800c64e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c652:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c654:	4a90      	ldr	r2, [pc, #576]	; (800c898 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c656:	430b      	orrs	r3, r1
 800c658:	6513      	str	r3, [r2, #80]	; 0x50
 800c65a:	e003      	b.n	800c664 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c65c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c660:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800c664:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c66c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800c670:	f04f 0900 	mov.w	r9, #0
 800c674:	ea58 0309 	orrs.w	r3, r8, r9
 800c678:	d047      	beq.n	800c70a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800c67a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c67e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c680:	2b04      	cmp	r3, #4
 800c682:	d82a      	bhi.n	800c6da <HAL_RCCEx_PeriphCLKConfig+0x136>
 800c684:	a201      	add	r2, pc, #4	; (adr r2, 800c68c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800c686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c68a:	bf00      	nop
 800c68c:	0800c6a1 	.word	0x0800c6a1
 800c690:	0800c6af 	.word	0x0800c6af
 800c694:	0800c6c5 	.word	0x0800c6c5
 800c698:	0800c6e3 	.word	0x0800c6e3
 800c69c:	0800c6e3 	.word	0x0800c6e3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c6a0:	4b7d      	ldr	r3, [pc, #500]	; (800c898 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c6a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6a4:	4a7c      	ldr	r2, [pc, #496]	; (800c898 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c6a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c6aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c6ac:	e01a      	b.n	800c6e4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c6ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c6b2:	3308      	adds	r3, #8
 800c6b4:	2100      	movs	r1, #0
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	f001 f932 	bl	800d920 <RCCEx_PLL2_Config>
 800c6bc:	4603      	mov	r3, r0
 800c6be:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c6c2:	e00f      	b.n	800c6e4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c6c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c6c8:	3328      	adds	r3, #40	; 0x28
 800c6ca:	2100      	movs	r1, #0
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	f001 f9d9 	bl	800da84 <RCCEx_PLL3_Config>
 800c6d2:	4603      	mov	r3, r0
 800c6d4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c6d8:	e004      	b.n	800c6e4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c6da:	2301      	movs	r3, #1
 800c6dc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c6e0:	e000      	b.n	800c6e4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800c6e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c6e4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d10a      	bne.n	800c702 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c6ec:	4b6a      	ldr	r3, [pc, #424]	; (800c898 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c6ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c6f0:	f023 0107 	bic.w	r1, r3, #7
 800c6f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c6f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c6fa:	4a67      	ldr	r2, [pc, #412]	; (800c898 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c6fc:	430b      	orrs	r3, r1
 800c6fe:	6513      	str	r3, [r2, #80]	; 0x50
 800c700:	e003      	b.n	800c70a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c702:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c706:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800c70a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c70e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c712:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800c716:	f04f 0b00 	mov.w	fp, #0
 800c71a:	ea5a 030b 	orrs.w	r3, sl, fp
 800c71e:	d054      	beq.n	800c7ca <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 800c720:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c724:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c726:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800c72a:	d036      	beq.n	800c79a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800c72c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800c730:	d82f      	bhi.n	800c792 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800c732:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c736:	d032      	beq.n	800c79e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800c738:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c73c:	d829      	bhi.n	800c792 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800c73e:	2bc0      	cmp	r3, #192	; 0xc0
 800c740:	d02f      	beq.n	800c7a2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800c742:	2bc0      	cmp	r3, #192	; 0xc0
 800c744:	d825      	bhi.n	800c792 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800c746:	2b80      	cmp	r3, #128	; 0x80
 800c748:	d018      	beq.n	800c77c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800c74a:	2b80      	cmp	r3, #128	; 0x80
 800c74c:	d821      	bhi.n	800c792 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d002      	beq.n	800c758 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800c752:	2b40      	cmp	r3, #64	; 0x40
 800c754:	d007      	beq.n	800c766 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800c756:	e01c      	b.n	800c792 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c758:	4b4f      	ldr	r3, [pc, #316]	; (800c898 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c75a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c75c:	4a4e      	ldr	r2, [pc, #312]	; (800c898 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c75e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c762:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800c764:	e01e      	b.n	800c7a4 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c766:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c76a:	3308      	adds	r3, #8
 800c76c:	2100      	movs	r1, #0
 800c76e:	4618      	mov	r0, r3
 800c770:	f001 f8d6 	bl	800d920 <RCCEx_PLL2_Config>
 800c774:	4603      	mov	r3, r0
 800c776:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800c77a:	e013      	b.n	800c7a4 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c77c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c780:	3328      	adds	r3, #40	; 0x28
 800c782:	2100      	movs	r1, #0
 800c784:	4618      	mov	r0, r3
 800c786:	f001 f97d 	bl	800da84 <RCCEx_PLL3_Config>
 800c78a:	4603      	mov	r3, r0
 800c78c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800c790:	e008      	b.n	800c7a4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c792:	2301      	movs	r3, #1
 800c794:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c798:	e004      	b.n	800c7a4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800c79a:	bf00      	nop
 800c79c:	e002      	b.n	800c7a4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800c79e:	bf00      	nop
 800c7a0:	e000      	b.n	800c7a4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800c7a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c7a4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d10a      	bne.n	800c7c2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800c7ac:	4b3a      	ldr	r3, [pc, #232]	; (800c898 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c7ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c7b0:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800c7b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c7b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c7ba:	4a37      	ldr	r2, [pc, #220]	; (800c898 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c7bc:	430b      	orrs	r3, r1
 800c7be:	6513      	str	r3, [r2, #80]	; 0x50
 800c7c0:	e003      	b.n	800c7ca <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c7c2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c7c6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800c7ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c7ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7d2:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800c7d6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800c7da:	2300      	movs	r3, #0
 800c7dc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800c7e0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800c7e4:	460b      	mov	r3, r1
 800c7e6:	4313      	orrs	r3, r2
 800c7e8:	d05c      	beq.n	800c8a4 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800c7ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c7ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c7f0:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800c7f4:	d03b      	beq.n	800c86e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800c7f6:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800c7fa:	d834      	bhi.n	800c866 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800c7fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c800:	d037      	beq.n	800c872 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800c802:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c806:	d82e      	bhi.n	800c866 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800c808:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800c80c:	d033      	beq.n	800c876 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800c80e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800c812:	d828      	bhi.n	800c866 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800c814:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c818:	d01a      	beq.n	800c850 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800c81a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c81e:	d822      	bhi.n	800c866 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800c820:	2b00      	cmp	r3, #0
 800c822:	d003      	beq.n	800c82c <HAL_RCCEx_PeriphCLKConfig+0x288>
 800c824:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c828:	d007      	beq.n	800c83a <HAL_RCCEx_PeriphCLKConfig+0x296>
 800c82a:	e01c      	b.n	800c866 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c82c:	4b1a      	ldr	r3, [pc, #104]	; (800c898 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c82e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c830:	4a19      	ldr	r2, [pc, #100]	; (800c898 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c832:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c836:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800c838:	e01e      	b.n	800c878 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c83a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c83e:	3308      	adds	r3, #8
 800c840:	2100      	movs	r1, #0
 800c842:	4618      	mov	r0, r3
 800c844:	f001 f86c 	bl	800d920 <RCCEx_PLL2_Config>
 800c848:	4603      	mov	r3, r0
 800c84a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800c84e:	e013      	b.n	800c878 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c850:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c854:	3328      	adds	r3, #40	; 0x28
 800c856:	2100      	movs	r1, #0
 800c858:	4618      	mov	r0, r3
 800c85a:	f001 f913 	bl	800da84 <RCCEx_PLL3_Config>
 800c85e:	4603      	mov	r3, r0
 800c860:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800c864:	e008      	b.n	800c878 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c866:	2301      	movs	r3, #1
 800c868:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c86c:	e004      	b.n	800c878 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800c86e:	bf00      	nop
 800c870:	e002      	b.n	800c878 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800c872:	bf00      	nop
 800c874:	e000      	b.n	800c878 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800c876:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c878:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d10d      	bne.n	800c89c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800c880:	4b05      	ldr	r3, [pc, #20]	; (800c898 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c882:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c884:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 800c888:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c88c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c88e:	4a02      	ldr	r2, [pc, #8]	; (800c898 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c890:	430b      	orrs	r3, r1
 800c892:	6513      	str	r3, [r2, #80]	; 0x50
 800c894:	e006      	b.n	800c8a4 <HAL_RCCEx_PeriphCLKConfig+0x300>
 800c896:	bf00      	nop
 800c898:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c89c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c8a0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800c8a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c8a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8ac:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800c8b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800c8ba:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800c8be:	460b      	mov	r3, r1
 800c8c0:	4313      	orrs	r3, r2
 800c8c2:	d03a      	beq.n	800c93a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800c8c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c8c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c8ca:	2b30      	cmp	r3, #48	; 0x30
 800c8cc:	d01f      	beq.n	800c90e <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800c8ce:	2b30      	cmp	r3, #48	; 0x30
 800c8d0:	d819      	bhi.n	800c906 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800c8d2:	2b20      	cmp	r3, #32
 800c8d4:	d00c      	beq.n	800c8f0 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800c8d6:	2b20      	cmp	r3, #32
 800c8d8:	d815      	bhi.n	800c906 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d019      	beq.n	800c912 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800c8de:	2b10      	cmp	r3, #16
 800c8e0:	d111      	bne.n	800c906 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c8e2:	4bae      	ldr	r3, [pc, #696]	; (800cb9c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c8e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8e6:	4aad      	ldr	r2, [pc, #692]	; (800cb9c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c8e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c8ec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800c8ee:	e011      	b.n	800c914 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c8f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c8f4:	3308      	adds	r3, #8
 800c8f6:	2102      	movs	r1, #2
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	f001 f811 	bl	800d920 <RCCEx_PLL2_Config>
 800c8fe:	4603      	mov	r3, r0
 800c900:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800c904:	e006      	b.n	800c914 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800c906:	2301      	movs	r3, #1
 800c908:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c90c:	e002      	b.n	800c914 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800c90e:	bf00      	nop
 800c910:	e000      	b.n	800c914 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800c912:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c914:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d10a      	bne.n	800c932 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800c91c:	4b9f      	ldr	r3, [pc, #636]	; (800cb9c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c91e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c920:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800c924:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c92a:	4a9c      	ldr	r2, [pc, #624]	; (800cb9c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c92c:	430b      	orrs	r3, r1
 800c92e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c930:	e003      	b.n	800c93a <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c932:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c936:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800c93a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c93e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c942:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800c946:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800c94a:	2300      	movs	r3, #0
 800c94c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800c950:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800c954:	460b      	mov	r3, r1
 800c956:	4313      	orrs	r3, r2
 800c958:	d051      	beq.n	800c9fe <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800c95a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c95e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c960:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c964:	d035      	beq.n	800c9d2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800c966:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c96a:	d82e      	bhi.n	800c9ca <HAL_RCCEx_PeriphCLKConfig+0x426>
 800c96c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c970:	d031      	beq.n	800c9d6 <HAL_RCCEx_PeriphCLKConfig+0x432>
 800c972:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c976:	d828      	bhi.n	800c9ca <HAL_RCCEx_PeriphCLKConfig+0x426>
 800c978:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c97c:	d01a      	beq.n	800c9b4 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800c97e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c982:	d822      	bhi.n	800c9ca <HAL_RCCEx_PeriphCLKConfig+0x426>
 800c984:	2b00      	cmp	r3, #0
 800c986:	d003      	beq.n	800c990 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800c988:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c98c:	d007      	beq.n	800c99e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800c98e:	e01c      	b.n	800c9ca <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c990:	4b82      	ldr	r3, [pc, #520]	; (800cb9c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c994:	4a81      	ldr	r2, [pc, #516]	; (800cb9c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c996:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c99a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800c99c:	e01c      	b.n	800c9d8 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c99e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c9a2:	3308      	adds	r3, #8
 800c9a4:	2100      	movs	r1, #0
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	f000 ffba 	bl	800d920 <RCCEx_PLL2_Config>
 800c9ac:	4603      	mov	r3, r0
 800c9ae:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800c9b2:	e011      	b.n	800c9d8 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c9b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c9b8:	3328      	adds	r3, #40	; 0x28
 800c9ba:	2100      	movs	r1, #0
 800c9bc:	4618      	mov	r0, r3
 800c9be:	f001 f861 	bl	800da84 <RCCEx_PLL3_Config>
 800c9c2:	4603      	mov	r3, r0
 800c9c4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800c9c8:	e006      	b.n	800c9d8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c9ca:	2301      	movs	r3, #1
 800c9cc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c9d0:	e002      	b.n	800c9d8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800c9d2:	bf00      	nop
 800c9d4:	e000      	b.n	800c9d8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800c9d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c9d8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d10a      	bne.n	800c9f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800c9e0:	4b6e      	ldr	r3, [pc, #440]	; (800cb9c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c9e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c9e4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800c9e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c9ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c9ee:	4a6b      	ldr	r2, [pc, #428]	; (800cb9c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c9f0:	430b      	orrs	r3, r1
 800c9f2:	6513      	str	r3, [r2, #80]	; 0x50
 800c9f4:	e003      	b.n	800c9fe <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c9f6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c9fa:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800c9fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ca02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca06:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800ca0a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ca0e:	2300      	movs	r3, #0
 800ca10:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ca14:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800ca18:	460b      	mov	r3, r1
 800ca1a:	4313      	orrs	r3, r2
 800ca1c:	d053      	beq.n	800cac6 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800ca1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ca22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ca24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ca28:	d033      	beq.n	800ca92 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800ca2a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ca2e:	d82c      	bhi.n	800ca8a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800ca30:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ca34:	d02f      	beq.n	800ca96 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 800ca36:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ca3a:	d826      	bhi.n	800ca8a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800ca3c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ca40:	d02b      	beq.n	800ca9a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800ca42:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ca46:	d820      	bhi.n	800ca8a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800ca48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ca4c:	d012      	beq.n	800ca74 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800ca4e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ca52:	d81a      	bhi.n	800ca8a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d022      	beq.n	800ca9e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 800ca58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ca5c:	d115      	bne.n	800ca8a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ca5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ca62:	3308      	adds	r3, #8
 800ca64:	2101      	movs	r1, #1
 800ca66:	4618      	mov	r0, r3
 800ca68:	f000 ff5a 	bl	800d920 <RCCEx_PLL2_Config>
 800ca6c:	4603      	mov	r3, r0
 800ca6e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ca72:	e015      	b.n	800caa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ca74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ca78:	3328      	adds	r3, #40	; 0x28
 800ca7a:	2101      	movs	r1, #1
 800ca7c:	4618      	mov	r0, r3
 800ca7e:	f001 f801 	bl	800da84 <RCCEx_PLL3_Config>
 800ca82:	4603      	mov	r3, r0
 800ca84:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ca88:	e00a      	b.n	800caa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ca8a:	2301      	movs	r3, #1
 800ca8c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800ca90:	e006      	b.n	800caa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800ca92:	bf00      	nop
 800ca94:	e004      	b.n	800caa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800ca96:	bf00      	nop
 800ca98:	e002      	b.n	800caa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800ca9a:	bf00      	nop
 800ca9c:	e000      	b.n	800caa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800ca9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800caa0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d10a      	bne.n	800cabe <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800caa8:	4b3c      	ldr	r3, [pc, #240]	; (800cb9c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800caaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800caac:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800cab0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cab4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cab6:	4a39      	ldr	r2, [pc, #228]	; (800cb9c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800cab8:	430b      	orrs	r3, r1
 800caba:	6513      	str	r3, [r2, #80]	; 0x50
 800cabc:	e003      	b.n	800cac6 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cabe:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800cac2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800cac6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800caca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cace:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800cad2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800cad6:	2300      	movs	r3, #0
 800cad8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800cadc:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800cae0:	460b      	mov	r3, r1
 800cae2:	4313      	orrs	r3, r2
 800cae4:	d060      	beq.n	800cba8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800cae6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800caea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800caee:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800caf2:	d039      	beq.n	800cb68 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 800caf4:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800caf8:	d832      	bhi.n	800cb60 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800cafa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cafe:	d035      	beq.n	800cb6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800cb00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cb04:	d82c      	bhi.n	800cb60 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800cb06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cb0a:	d031      	beq.n	800cb70 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800cb0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cb10:	d826      	bhi.n	800cb60 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800cb12:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cb16:	d02d      	beq.n	800cb74 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800cb18:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cb1c:	d820      	bhi.n	800cb60 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800cb1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cb22:	d012      	beq.n	800cb4a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800cb24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cb28:	d81a      	bhi.n	800cb60 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d024      	beq.n	800cb78 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800cb2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cb32:	d115      	bne.n	800cb60 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cb34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cb38:	3308      	adds	r3, #8
 800cb3a:	2101      	movs	r1, #1
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	f000 feef 	bl	800d920 <RCCEx_PLL2_Config>
 800cb42:	4603      	mov	r3, r0
 800cb44:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800cb48:	e017      	b.n	800cb7a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cb4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cb4e:	3328      	adds	r3, #40	; 0x28
 800cb50:	2101      	movs	r1, #1
 800cb52:	4618      	mov	r0, r3
 800cb54:	f000 ff96 	bl	800da84 <RCCEx_PLL3_Config>
 800cb58:	4603      	mov	r3, r0
 800cb5a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800cb5e:	e00c      	b.n	800cb7a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800cb60:	2301      	movs	r3, #1
 800cb62:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800cb66:	e008      	b.n	800cb7a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800cb68:	bf00      	nop
 800cb6a:	e006      	b.n	800cb7a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800cb6c:	bf00      	nop
 800cb6e:	e004      	b.n	800cb7a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800cb70:	bf00      	nop
 800cb72:	e002      	b.n	800cb7a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800cb74:	bf00      	nop
 800cb76:	e000      	b.n	800cb7a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800cb78:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cb7a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d10e      	bne.n	800cba0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800cb82:	4b06      	ldr	r3, [pc, #24]	; (800cb9c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800cb84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb86:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800cb8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cb8e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800cb92:	4a02      	ldr	r2, [pc, #8]	; (800cb9c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800cb94:	430b      	orrs	r3, r1
 800cb96:	6593      	str	r3, [r2, #88]	; 0x58
 800cb98:	e006      	b.n	800cba8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800cb9a:	bf00      	nop
 800cb9c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cba0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800cba4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800cba8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cbac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbb0:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800cbb4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800cbb8:	2300      	movs	r3, #0
 800cbba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800cbbe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800cbc2:	460b      	mov	r3, r1
 800cbc4:	4313      	orrs	r3, r2
 800cbc6:	d037      	beq.n	800cc38 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800cbc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cbcc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cbce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cbd2:	d00e      	beq.n	800cbf2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800cbd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cbd8:	d816      	bhi.n	800cc08 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d018      	beq.n	800cc10 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800cbde:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cbe2:	d111      	bne.n	800cc08 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cbe4:	4bc4      	ldr	r3, [pc, #784]	; (800cef8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cbe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbe8:	4ac3      	ldr	r2, [pc, #780]	; (800cef8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cbea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cbee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800cbf0:	e00f      	b.n	800cc12 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cbf2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cbf6:	3308      	adds	r3, #8
 800cbf8:	2101      	movs	r1, #1
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	f000 fe90 	bl	800d920 <RCCEx_PLL2_Config>
 800cc00:	4603      	mov	r3, r0
 800cc02:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800cc06:	e004      	b.n	800cc12 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cc08:	2301      	movs	r3, #1
 800cc0a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800cc0e:	e000      	b.n	800cc12 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800cc10:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cc12:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d10a      	bne.n	800cc30 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800cc1a:	4bb7      	ldr	r3, [pc, #732]	; (800cef8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cc1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc1e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800cc22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cc26:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cc28:	4ab3      	ldr	r2, [pc, #716]	; (800cef8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cc2a:	430b      	orrs	r3, r1
 800cc2c:	6513      	str	r3, [r2, #80]	; 0x50
 800cc2e:	e003      	b.n	800cc38 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cc30:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800cc34:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800cc38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cc3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc40:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800cc44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800cc48:	2300      	movs	r3, #0
 800cc4a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800cc4e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800cc52:	460b      	mov	r3, r1
 800cc54:	4313      	orrs	r3, r2
 800cc56:	d039      	beq.n	800cccc <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800cc58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cc5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cc5e:	2b03      	cmp	r3, #3
 800cc60:	d81c      	bhi.n	800cc9c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800cc62:	a201      	add	r2, pc, #4	; (adr r2, 800cc68 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800cc64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc68:	0800cca5 	.word	0x0800cca5
 800cc6c:	0800cc79 	.word	0x0800cc79
 800cc70:	0800cc87 	.word	0x0800cc87
 800cc74:	0800cca5 	.word	0x0800cca5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cc78:	4b9f      	ldr	r3, [pc, #636]	; (800cef8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cc7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc7c:	4a9e      	ldr	r2, [pc, #632]	; (800cef8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cc7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cc82:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800cc84:	e00f      	b.n	800cca6 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800cc86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cc8a:	3308      	adds	r3, #8
 800cc8c:	2102      	movs	r1, #2
 800cc8e:	4618      	mov	r0, r3
 800cc90:	f000 fe46 	bl	800d920 <RCCEx_PLL2_Config>
 800cc94:	4603      	mov	r3, r0
 800cc96:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800cc9a:	e004      	b.n	800cca6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800cc9c:	2301      	movs	r3, #1
 800cc9e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800cca2:	e000      	b.n	800cca6 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800cca4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cca6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d10a      	bne.n	800ccc4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800ccae:	4b92      	ldr	r3, [pc, #584]	; (800cef8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ccb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ccb2:	f023 0103 	bic.w	r1, r3, #3
 800ccb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ccba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ccbc:	4a8e      	ldr	r2, [pc, #568]	; (800cef8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ccbe:	430b      	orrs	r3, r1
 800ccc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ccc2:	e003      	b.n	800cccc <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ccc4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ccc8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800cccc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ccd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccd4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800ccd8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ccdc:	2300      	movs	r3, #0
 800ccde:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800cce2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800cce6:	460b      	mov	r3, r1
 800cce8:	4313      	orrs	r3, r2
 800ccea:	f000 8099 	beq.w	800ce20 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ccee:	4b83      	ldr	r3, [pc, #524]	; (800cefc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	4a82      	ldr	r2, [pc, #520]	; (800cefc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800ccf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ccf8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ccfa:	f7fb fa4d 	bl	8008198 <HAL_GetTick>
 800ccfe:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800cd02:	e00b      	b.n	800cd1c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cd04:	f7fb fa48 	bl	8008198 <HAL_GetTick>
 800cd08:	4602      	mov	r2, r0
 800cd0a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800cd0e:	1ad3      	subs	r3, r2, r3
 800cd10:	2b64      	cmp	r3, #100	; 0x64
 800cd12:	d903      	bls.n	800cd1c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800cd14:	2303      	movs	r3, #3
 800cd16:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800cd1a:	e005      	b.n	800cd28 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800cd1c:	4b77      	ldr	r3, [pc, #476]	; (800cefc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d0ed      	beq.n	800cd04 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800cd28:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d173      	bne.n	800ce18 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800cd30:	4b71      	ldr	r3, [pc, #452]	; (800cef8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cd32:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800cd34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cd38:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800cd3c:	4053      	eors	r3, r2
 800cd3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d015      	beq.n	800cd72 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800cd46:	4b6c      	ldr	r3, [pc, #432]	; (800cef8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cd48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cd4e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800cd52:	4b69      	ldr	r3, [pc, #420]	; (800cef8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cd54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd56:	4a68      	ldr	r2, [pc, #416]	; (800cef8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cd58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cd5c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800cd5e:	4b66      	ldr	r3, [pc, #408]	; (800cef8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cd60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd62:	4a65      	ldr	r2, [pc, #404]	; (800cef8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cd64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cd68:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800cd6a:	4a63      	ldr	r2, [pc, #396]	; (800cef8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cd6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cd70:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800cd72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cd76:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800cd7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cd7e:	d118      	bne.n	800cdb2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cd80:	f7fb fa0a 	bl	8008198 <HAL_GetTick>
 800cd84:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800cd88:	e00d      	b.n	800cda6 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cd8a:	f7fb fa05 	bl	8008198 <HAL_GetTick>
 800cd8e:	4602      	mov	r2, r0
 800cd90:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800cd94:	1ad2      	subs	r2, r2, r3
 800cd96:	f241 3388 	movw	r3, #5000	; 0x1388
 800cd9a:	429a      	cmp	r2, r3
 800cd9c:	d903      	bls.n	800cda6 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800cd9e:	2303      	movs	r3, #3
 800cda0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 800cda4:	e005      	b.n	800cdb2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800cda6:	4b54      	ldr	r3, [pc, #336]	; (800cef8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cda8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cdaa:	f003 0302 	and.w	r3, r3, #2
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d0eb      	beq.n	800cd8a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800cdb2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d129      	bne.n	800ce0e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800cdba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cdbe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800cdc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cdc6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cdca:	d10e      	bne.n	800cdea <HAL_RCCEx_PeriphCLKConfig+0x846>
 800cdcc:	4b4a      	ldr	r3, [pc, #296]	; (800cef8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cdce:	691b      	ldr	r3, [r3, #16]
 800cdd0:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800cdd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cdd8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800cddc:	091a      	lsrs	r2, r3, #4
 800cdde:	4b48      	ldr	r3, [pc, #288]	; (800cf00 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800cde0:	4013      	ands	r3, r2
 800cde2:	4a45      	ldr	r2, [pc, #276]	; (800cef8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cde4:	430b      	orrs	r3, r1
 800cde6:	6113      	str	r3, [r2, #16]
 800cde8:	e005      	b.n	800cdf6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800cdea:	4b43      	ldr	r3, [pc, #268]	; (800cef8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cdec:	691b      	ldr	r3, [r3, #16]
 800cdee:	4a42      	ldr	r2, [pc, #264]	; (800cef8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cdf0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800cdf4:	6113      	str	r3, [r2, #16]
 800cdf6:	4b40      	ldr	r3, [pc, #256]	; (800cef8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cdf8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800cdfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cdfe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800ce02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ce06:	4a3c      	ldr	r2, [pc, #240]	; (800cef8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ce08:	430b      	orrs	r3, r1
 800ce0a:	6713      	str	r3, [r2, #112]	; 0x70
 800ce0c:	e008      	b.n	800ce20 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800ce0e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ce12:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 800ce16:	e003      	b.n	800ce20 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ce18:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ce1c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800ce20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ce24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce28:	f002 0301 	and.w	r3, r2, #1
 800ce2c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ce30:	2300      	movs	r3, #0
 800ce32:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ce36:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800ce3a:	460b      	mov	r3, r1
 800ce3c:	4313      	orrs	r3, r2
 800ce3e:	f000 8090 	beq.w	800cf62 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800ce42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ce46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ce4a:	2b28      	cmp	r3, #40	; 0x28
 800ce4c:	d870      	bhi.n	800cf30 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800ce4e:	a201      	add	r2, pc, #4	; (adr r2, 800ce54 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800ce50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce54:	0800cf39 	.word	0x0800cf39
 800ce58:	0800cf31 	.word	0x0800cf31
 800ce5c:	0800cf31 	.word	0x0800cf31
 800ce60:	0800cf31 	.word	0x0800cf31
 800ce64:	0800cf31 	.word	0x0800cf31
 800ce68:	0800cf31 	.word	0x0800cf31
 800ce6c:	0800cf31 	.word	0x0800cf31
 800ce70:	0800cf31 	.word	0x0800cf31
 800ce74:	0800cf05 	.word	0x0800cf05
 800ce78:	0800cf31 	.word	0x0800cf31
 800ce7c:	0800cf31 	.word	0x0800cf31
 800ce80:	0800cf31 	.word	0x0800cf31
 800ce84:	0800cf31 	.word	0x0800cf31
 800ce88:	0800cf31 	.word	0x0800cf31
 800ce8c:	0800cf31 	.word	0x0800cf31
 800ce90:	0800cf31 	.word	0x0800cf31
 800ce94:	0800cf1b 	.word	0x0800cf1b
 800ce98:	0800cf31 	.word	0x0800cf31
 800ce9c:	0800cf31 	.word	0x0800cf31
 800cea0:	0800cf31 	.word	0x0800cf31
 800cea4:	0800cf31 	.word	0x0800cf31
 800cea8:	0800cf31 	.word	0x0800cf31
 800ceac:	0800cf31 	.word	0x0800cf31
 800ceb0:	0800cf31 	.word	0x0800cf31
 800ceb4:	0800cf39 	.word	0x0800cf39
 800ceb8:	0800cf31 	.word	0x0800cf31
 800cebc:	0800cf31 	.word	0x0800cf31
 800cec0:	0800cf31 	.word	0x0800cf31
 800cec4:	0800cf31 	.word	0x0800cf31
 800cec8:	0800cf31 	.word	0x0800cf31
 800cecc:	0800cf31 	.word	0x0800cf31
 800ced0:	0800cf31 	.word	0x0800cf31
 800ced4:	0800cf39 	.word	0x0800cf39
 800ced8:	0800cf31 	.word	0x0800cf31
 800cedc:	0800cf31 	.word	0x0800cf31
 800cee0:	0800cf31 	.word	0x0800cf31
 800cee4:	0800cf31 	.word	0x0800cf31
 800cee8:	0800cf31 	.word	0x0800cf31
 800ceec:	0800cf31 	.word	0x0800cf31
 800cef0:	0800cf31 	.word	0x0800cf31
 800cef4:	0800cf39 	.word	0x0800cf39
 800cef8:	58024400 	.word	0x58024400
 800cefc:	58024800 	.word	0x58024800
 800cf00:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cf04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cf08:	3308      	adds	r3, #8
 800cf0a:	2101      	movs	r1, #1
 800cf0c:	4618      	mov	r0, r3
 800cf0e:	f000 fd07 	bl	800d920 <RCCEx_PLL2_Config>
 800cf12:	4603      	mov	r3, r0
 800cf14:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800cf18:	e00f      	b.n	800cf3a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cf1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cf1e:	3328      	adds	r3, #40	; 0x28
 800cf20:	2101      	movs	r1, #1
 800cf22:	4618      	mov	r0, r3
 800cf24:	f000 fdae 	bl	800da84 <RCCEx_PLL3_Config>
 800cf28:	4603      	mov	r3, r0
 800cf2a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800cf2e:	e004      	b.n	800cf3a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cf30:	2301      	movs	r3, #1
 800cf32:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800cf36:	e000      	b.n	800cf3a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800cf38:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cf3a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d10b      	bne.n	800cf5a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800cf42:	4bc0      	ldr	r3, [pc, #768]	; (800d244 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800cf44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cf46:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800cf4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cf4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cf52:	4abc      	ldr	r2, [pc, #752]	; (800d244 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800cf54:	430b      	orrs	r3, r1
 800cf56:	6553      	str	r3, [r2, #84]	; 0x54
 800cf58:	e003      	b.n	800cf62 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cf5a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800cf5e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800cf62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cf66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf6a:	f002 0302 	and.w	r3, r2, #2
 800cf6e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800cf72:	2300      	movs	r3, #0
 800cf74:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800cf78:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800cf7c:	460b      	mov	r3, r1
 800cf7e:	4313      	orrs	r3, r2
 800cf80:	d043      	beq.n	800d00a <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800cf82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cf86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cf8a:	2b05      	cmp	r3, #5
 800cf8c:	d824      	bhi.n	800cfd8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800cf8e:	a201      	add	r2, pc, #4	; (adr r2, 800cf94 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 800cf90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf94:	0800cfe1 	.word	0x0800cfe1
 800cf98:	0800cfad 	.word	0x0800cfad
 800cf9c:	0800cfc3 	.word	0x0800cfc3
 800cfa0:	0800cfe1 	.word	0x0800cfe1
 800cfa4:	0800cfe1 	.word	0x0800cfe1
 800cfa8:	0800cfe1 	.word	0x0800cfe1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cfac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cfb0:	3308      	adds	r3, #8
 800cfb2:	2101      	movs	r1, #1
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	f000 fcb3 	bl	800d920 <RCCEx_PLL2_Config>
 800cfba:	4603      	mov	r3, r0
 800cfbc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800cfc0:	e00f      	b.n	800cfe2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cfc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cfc6:	3328      	adds	r3, #40	; 0x28
 800cfc8:	2101      	movs	r1, #1
 800cfca:	4618      	mov	r0, r3
 800cfcc:	f000 fd5a 	bl	800da84 <RCCEx_PLL3_Config>
 800cfd0:	4603      	mov	r3, r0
 800cfd2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800cfd6:	e004      	b.n	800cfe2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cfd8:	2301      	movs	r3, #1
 800cfda:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800cfde:	e000      	b.n	800cfe2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 800cfe0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cfe2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d10b      	bne.n	800d002 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800cfea:	4b96      	ldr	r3, [pc, #600]	; (800d244 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800cfec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cfee:	f023 0107 	bic.w	r1, r3, #7
 800cff2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cff6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cffa:	4a92      	ldr	r2, [pc, #584]	; (800d244 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800cffc:	430b      	orrs	r3, r1
 800cffe:	6553      	str	r3, [r2, #84]	; 0x54
 800d000:	e003      	b.n	800d00a <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d002:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d006:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d00a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d00e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d012:	f002 0304 	and.w	r3, r2, #4
 800d016:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d01a:	2300      	movs	r3, #0
 800d01c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d020:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800d024:	460b      	mov	r3, r1
 800d026:	4313      	orrs	r3, r2
 800d028:	d043      	beq.n	800d0b2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800d02a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d02e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d032:	2b05      	cmp	r3, #5
 800d034:	d824      	bhi.n	800d080 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800d036:	a201      	add	r2, pc, #4	; (adr r2, 800d03c <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 800d038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d03c:	0800d089 	.word	0x0800d089
 800d040:	0800d055 	.word	0x0800d055
 800d044:	0800d06b 	.word	0x0800d06b
 800d048:	0800d089 	.word	0x0800d089
 800d04c:	0800d089 	.word	0x0800d089
 800d050:	0800d089 	.word	0x0800d089
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d054:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d058:	3308      	adds	r3, #8
 800d05a:	2101      	movs	r1, #1
 800d05c:	4618      	mov	r0, r3
 800d05e:	f000 fc5f 	bl	800d920 <RCCEx_PLL2_Config>
 800d062:	4603      	mov	r3, r0
 800d064:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800d068:	e00f      	b.n	800d08a <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d06a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d06e:	3328      	adds	r3, #40	; 0x28
 800d070:	2101      	movs	r1, #1
 800d072:	4618      	mov	r0, r3
 800d074:	f000 fd06 	bl	800da84 <RCCEx_PLL3_Config>
 800d078:	4603      	mov	r3, r0
 800d07a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800d07e:	e004      	b.n	800d08a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d080:	2301      	movs	r3, #1
 800d082:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800d086:	e000      	b.n	800d08a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 800d088:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d08a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d10b      	bne.n	800d0aa <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800d092:	4b6c      	ldr	r3, [pc, #432]	; (800d244 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800d094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d096:	f023 0107 	bic.w	r1, r3, #7
 800d09a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d09e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d0a2:	4a68      	ldr	r2, [pc, #416]	; (800d244 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800d0a4:	430b      	orrs	r3, r1
 800d0a6:	6593      	str	r3, [r2, #88]	; 0x58
 800d0a8:	e003      	b.n	800d0b2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d0aa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d0ae:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800d0b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d0b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0ba:	f002 0320 	and.w	r3, r2, #32
 800d0be:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800d0c2:	2300      	movs	r3, #0
 800d0c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d0c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800d0cc:	460b      	mov	r3, r1
 800d0ce:	4313      	orrs	r3, r2
 800d0d0:	d055      	beq.n	800d17e <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800d0d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d0d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d0da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d0de:	d033      	beq.n	800d148 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800d0e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d0e4:	d82c      	bhi.n	800d140 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800d0e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d0ea:	d02f      	beq.n	800d14c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800d0ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d0f0:	d826      	bhi.n	800d140 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800d0f2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d0f6:	d02b      	beq.n	800d150 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800d0f8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d0fc:	d820      	bhi.n	800d140 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800d0fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d102:	d012      	beq.n	800d12a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800d104:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d108:	d81a      	bhi.n	800d140 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d022      	beq.n	800d154 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800d10e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d112:	d115      	bne.n	800d140 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d114:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d118:	3308      	adds	r3, #8
 800d11a:	2100      	movs	r1, #0
 800d11c:	4618      	mov	r0, r3
 800d11e:	f000 fbff 	bl	800d920 <RCCEx_PLL2_Config>
 800d122:	4603      	mov	r3, r0
 800d124:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800d128:	e015      	b.n	800d156 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d12a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d12e:	3328      	adds	r3, #40	; 0x28
 800d130:	2102      	movs	r1, #2
 800d132:	4618      	mov	r0, r3
 800d134:	f000 fca6 	bl	800da84 <RCCEx_PLL3_Config>
 800d138:	4603      	mov	r3, r0
 800d13a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800d13e:	e00a      	b.n	800d156 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d140:	2301      	movs	r3, #1
 800d142:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800d146:	e006      	b.n	800d156 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800d148:	bf00      	nop
 800d14a:	e004      	b.n	800d156 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800d14c:	bf00      	nop
 800d14e:	e002      	b.n	800d156 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800d150:	bf00      	nop
 800d152:	e000      	b.n	800d156 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800d154:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d156:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d10b      	bne.n	800d176 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d15e:	4b39      	ldr	r3, [pc, #228]	; (800d244 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800d160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d162:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800d166:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d16a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d16e:	4a35      	ldr	r2, [pc, #212]	; (800d244 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800d170:	430b      	orrs	r3, r1
 800d172:	6553      	str	r3, [r2, #84]	; 0x54
 800d174:	e003      	b.n	800d17e <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d176:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d17a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800d17e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d182:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d186:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800d18a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800d18e:	2300      	movs	r3, #0
 800d190:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800d194:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800d198:	460b      	mov	r3, r1
 800d19a:	4313      	orrs	r3, r2
 800d19c:	d058      	beq.n	800d250 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800d19e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d1a2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800d1a6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800d1aa:	d033      	beq.n	800d214 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800d1ac:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800d1b0:	d82c      	bhi.n	800d20c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800d1b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d1b6:	d02f      	beq.n	800d218 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800d1b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d1bc:	d826      	bhi.n	800d20c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800d1be:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d1c2:	d02b      	beq.n	800d21c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800d1c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d1c8:	d820      	bhi.n	800d20c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800d1ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d1ce:	d012      	beq.n	800d1f6 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 800d1d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d1d4:	d81a      	bhi.n	800d20c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d022      	beq.n	800d220 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800d1da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d1de:	d115      	bne.n	800d20c <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d1e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d1e4:	3308      	adds	r3, #8
 800d1e6:	2100      	movs	r1, #0
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	f000 fb99 	bl	800d920 <RCCEx_PLL2_Config>
 800d1ee:	4603      	mov	r3, r0
 800d1f0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800d1f4:	e015      	b.n	800d222 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d1f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d1fa:	3328      	adds	r3, #40	; 0x28
 800d1fc:	2102      	movs	r1, #2
 800d1fe:	4618      	mov	r0, r3
 800d200:	f000 fc40 	bl	800da84 <RCCEx_PLL3_Config>
 800d204:	4603      	mov	r3, r0
 800d206:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800d20a:	e00a      	b.n	800d222 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d20c:	2301      	movs	r3, #1
 800d20e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800d212:	e006      	b.n	800d222 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800d214:	bf00      	nop
 800d216:	e004      	b.n	800d222 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800d218:	bf00      	nop
 800d21a:	e002      	b.n	800d222 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800d21c:	bf00      	nop
 800d21e:	e000      	b.n	800d222 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800d220:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d222:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d226:	2b00      	cmp	r3, #0
 800d228:	d10e      	bne.n	800d248 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800d22a:	4b06      	ldr	r3, [pc, #24]	; (800d244 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800d22c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d22e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800d232:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d236:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800d23a:	4a02      	ldr	r2, [pc, #8]	; (800d244 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800d23c:	430b      	orrs	r3, r1
 800d23e:	6593      	str	r3, [r2, #88]	; 0x58
 800d240:	e006      	b.n	800d250 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800d242:	bf00      	nop
 800d244:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d248:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d24c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800d250:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d254:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d258:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800d25c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d260:	2300      	movs	r3, #0
 800d262:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d266:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800d26a:	460b      	mov	r3, r1
 800d26c:	4313      	orrs	r3, r2
 800d26e:	d055      	beq.n	800d31c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800d270:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d274:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800d278:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800d27c:	d033      	beq.n	800d2e6 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800d27e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800d282:	d82c      	bhi.n	800d2de <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800d284:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d288:	d02f      	beq.n	800d2ea <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800d28a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d28e:	d826      	bhi.n	800d2de <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800d290:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800d294:	d02b      	beq.n	800d2ee <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800d296:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800d29a:	d820      	bhi.n	800d2de <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800d29c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d2a0:	d012      	beq.n	800d2c8 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800d2a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d2a6:	d81a      	bhi.n	800d2de <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d022      	beq.n	800d2f2 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 800d2ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d2b0:	d115      	bne.n	800d2de <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d2b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d2b6:	3308      	adds	r3, #8
 800d2b8:	2100      	movs	r1, #0
 800d2ba:	4618      	mov	r0, r3
 800d2bc:	f000 fb30 	bl	800d920 <RCCEx_PLL2_Config>
 800d2c0:	4603      	mov	r3, r0
 800d2c2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800d2c6:	e015      	b.n	800d2f4 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d2c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d2cc:	3328      	adds	r3, #40	; 0x28
 800d2ce:	2102      	movs	r1, #2
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	f000 fbd7 	bl	800da84 <RCCEx_PLL3_Config>
 800d2d6:	4603      	mov	r3, r0
 800d2d8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800d2dc:	e00a      	b.n	800d2f4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d2de:	2301      	movs	r3, #1
 800d2e0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800d2e4:	e006      	b.n	800d2f4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800d2e6:	bf00      	nop
 800d2e8:	e004      	b.n	800d2f4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800d2ea:	bf00      	nop
 800d2ec:	e002      	b.n	800d2f4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800d2ee:	bf00      	nop
 800d2f0:	e000      	b.n	800d2f4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800d2f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d2f4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d10b      	bne.n	800d314 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800d2fc:	4ba1      	ldr	r3, [pc, #644]	; (800d584 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800d2fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d300:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800d304:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d308:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800d30c:	4a9d      	ldr	r2, [pc, #628]	; (800d584 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800d30e:	430b      	orrs	r3, r1
 800d310:	6593      	str	r3, [r2, #88]	; 0x58
 800d312:	e003      	b.n	800d31c <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d314:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d318:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800d31c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d320:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d324:	f002 0308 	and.w	r3, r2, #8
 800d328:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d32c:	2300      	movs	r3, #0
 800d32e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d332:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800d336:	460b      	mov	r3, r1
 800d338:	4313      	orrs	r3, r2
 800d33a:	d01e      	beq.n	800d37a <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800d33c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d340:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d344:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d348:	d10c      	bne.n	800d364 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800d34a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d34e:	3328      	adds	r3, #40	; 0x28
 800d350:	2102      	movs	r1, #2
 800d352:	4618      	mov	r0, r3
 800d354:	f000 fb96 	bl	800da84 <RCCEx_PLL3_Config>
 800d358:	4603      	mov	r3, r0
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d002      	beq.n	800d364 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800d35e:	2301      	movs	r3, #1
 800d360:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800d364:	4b87      	ldr	r3, [pc, #540]	; (800d584 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800d366:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d368:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d36c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d370:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d374:	4a83      	ldr	r2, [pc, #524]	; (800d584 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800d376:	430b      	orrs	r3, r1
 800d378:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800d37a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d37e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d382:	f002 0310 	and.w	r3, r2, #16
 800d386:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d38a:	2300      	movs	r3, #0
 800d38c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800d390:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800d394:	460b      	mov	r3, r1
 800d396:	4313      	orrs	r3, r2
 800d398:	d01e      	beq.n	800d3d8 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800d39a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d39e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800d3a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d3a6:	d10c      	bne.n	800d3c2 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800d3a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d3ac:	3328      	adds	r3, #40	; 0x28
 800d3ae:	2102      	movs	r1, #2
 800d3b0:	4618      	mov	r0, r3
 800d3b2:	f000 fb67 	bl	800da84 <RCCEx_PLL3_Config>
 800d3b6:	4603      	mov	r3, r0
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d002      	beq.n	800d3c2 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 800d3bc:	2301      	movs	r3, #1
 800d3be:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800d3c2:	4b70      	ldr	r3, [pc, #448]	; (800d584 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800d3c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d3c6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800d3ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d3ce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800d3d2:	4a6c      	ldr	r2, [pc, #432]	; (800d584 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800d3d4:	430b      	orrs	r3, r1
 800d3d6:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800d3d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d3dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3e0:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800d3e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d3e8:	2300      	movs	r3, #0
 800d3ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d3ee:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800d3f2:	460b      	mov	r3, r1
 800d3f4:	4313      	orrs	r3, r2
 800d3f6:	d03e      	beq.n	800d476 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800d3f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d3fc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800d400:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d404:	d022      	beq.n	800d44c <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800d406:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d40a:	d81b      	bhi.n	800d444 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d003      	beq.n	800d418 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 800d410:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d414:	d00b      	beq.n	800d42e <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800d416:	e015      	b.n	800d444 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d418:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d41c:	3308      	adds	r3, #8
 800d41e:	2100      	movs	r1, #0
 800d420:	4618      	mov	r0, r3
 800d422:	f000 fa7d 	bl	800d920 <RCCEx_PLL2_Config>
 800d426:	4603      	mov	r3, r0
 800d428:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800d42c:	e00f      	b.n	800d44e <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d42e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d432:	3328      	adds	r3, #40	; 0x28
 800d434:	2102      	movs	r1, #2
 800d436:	4618      	mov	r0, r3
 800d438:	f000 fb24 	bl	800da84 <RCCEx_PLL3_Config>
 800d43c:	4603      	mov	r3, r0
 800d43e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800d442:	e004      	b.n	800d44e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d444:	2301      	movs	r3, #1
 800d446:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800d44a:	e000      	b.n	800d44e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 800d44c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d44e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d452:	2b00      	cmp	r3, #0
 800d454:	d10b      	bne.n	800d46e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800d456:	4b4b      	ldr	r3, [pc, #300]	; (800d584 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800d458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d45a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800d45e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d462:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800d466:	4a47      	ldr	r2, [pc, #284]	; (800d584 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800d468:	430b      	orrs	r3, r1
 800d46a:	6593      	str	r3, [r2, #88]	; 0x58
 800d46c:	e003      	b.n	800d476 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d46e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d472:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800d476:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d47a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d47e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800d482:	67bb      	str	r3, [r7, #120]	; 0x78
 800d484:	2300      	movs	r3, #0
 800d486:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d488:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800d48c:	460b      	mov	r3, r1
 800d48e:	4313      	orrs	r3, r2
 800d490:	d03b      	beq.n	800d50a <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800d492:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d496:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d49a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800d49e:	d01f      	beq.n	800d4e0 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 800d4a0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800d4a4:	d818      	bhi.n	800d4d8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800d4a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d4aa:	d003      	beq.n	800d4b4 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 800d4ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d4b0:	d007      	beq.n	800d4c2 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800d4b2:	e011      	b.n	800d4d8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d4b4:	4b33      	ldr	r3, [pc, #204]	; (800d584 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800d4b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4b8:	4a32      	ldr	r2, [pc, #200]	; (800d584 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800d4ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d4be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800d4c0:	e00f      	b.n	800d4e2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d4c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d4c6:	3328      	adds	r3, #40	; 0x28
 800d4c8:	2101      	movs	r1, #1
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	f000 fada 	bl	800da84 <RCCEx_PLL3_Config>
 800d4d0:	4603      	mov	r3, r0
 800d4d2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800d4d6:	e004      	b.n	800d4e2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d4d8:	2301      	movs	r3, #1
 800d4da:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800d4de:	e000      	b.n	800d4e2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 800d4e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d4e2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d10b      	bne.n	800d502 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d4ea:	4b26      	ldr	r3, [pc, #152]	; (800d584 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800d4ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d4ee:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800d4f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d4f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d4fa:	4a22      	ldr	r2, [pc, #136]	; (800d584 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800d4fc:	430b      	orrs	r3, r1
 800d4fe:	6553      	str	r3, [r2, #84]	; 0x54
 800d500:	e003      	b.n	800d50a <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d502:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d506:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800d50a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d50e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d512:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800d516:	673b      	str	r3, [r7, #112]	; 0x70
 800d518:	2300      	movs	r3, #0
 800d51a:	677b      	str	r3, [r7, #116]	; 0x74
 800d51c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800d520:	460b      	mov	r3, r1
 800d522:	4313      	orrs	r3, r2
 800d524:	d034      	beq.n	800d590 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800d526:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d52a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d003      	beq.n	800d538 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 800d530:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d534:	d007      	beq.n	800d546 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 800d536:	e011      	b.n	800d55c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d538:	4b12      	ldr	r3, [pc, #72]	; (800d584 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800d53a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d53c:	4a11      	ldr	r2, [pc, #68]	; (800d584 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800d53e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d542:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800d544:	e00e      	b.n	800d564 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d546:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d54a:	3308      	adds	r3, #8
 800d54c:	2102      	movs	r1, #2
 800d54e:	4618      	mov	r0, r3
 800d550:	f000 f9e6 	bl	800d920 <RCCEx_PLL2_Config>
 800d554:	4603      	mov	r3, r0
 800d556:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800d55a:	e003      	b.n	800d564 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 800d55c:	2301      	movs	r3, #1
 800d55e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800d562:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d564:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d10d      	bne.n	800d588 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800d56c:	4b05      	ldr	r3, [pc, #20]	; (800d584 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800d56e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d570:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d574:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d578:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d57a:	4a02      	ldr	r2, [pc, #8]	; (800d584 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800d57c:	430b      	orrs	r3, r1
 800d57e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d580:	e006      	b.n	800d590 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800d582:	bf00      	nop
 800d584:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d588:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d58c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800d590:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d594:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d598:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800d59c:	66bb      	str	r3, [r7, #104]	; 0x68
 800d59e:	2300      	movs	r3, #0
 800d5a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d5a2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800d5a6:	460b      	mov	r3, r1
 800d5a8:	4313      	orrs	r3, r2
 800d5aa:	d00c      	beq.n	800d5c6 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800d5ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d5b0:	3328      	adds	r3, #40	; 0x28
 800d5b2:	2102      	movs	r1, #2
 800d5b4:	4618      	mov	r0, r3
 800d5b6:	f000 fa65 	bl	800da84 <RCCEx_PLL3_Config>
 800d5ba:	4603      	mov	r3, r0
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d002      	beq.n	800d5c6 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 800d5c0:	2301      	movs	r3, #1
 800d5c2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800d5c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d5ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5ce:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800d5d2:	663b      	str	r3, [r7, #96]	; 0x60
 800d5d4:	2300      	movs	r3, #0
 800d5d6:	667b      	str	r3, [r7, #100]	; 0x64
 800d5d8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800d5dc:	460b      	mov	r3, r1
 800d5de:	4313      	orrs	r3, r2
 800d5e0:	d038      	beq.n	800d654 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800d5e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d5e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d5ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d5ee:	d018      	beq.n	800d622 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 800d5f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d5f4:	d811      	bhi.n	800d61a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800d5f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d5fa:	d014      	beq.n	800d626 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 800d5fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d600:	d80b      	bhi.n	800d61a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800d602:	2b00      	cmp	r3, #0
 800d604:	d011      	beq.n	800d62a <HAL_RCCEx_PeriphCLKConfig+0x1086>
 800d606:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d60a:	d106      	bne.n	800d61a <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d60c:	4bc3      	ldr	r3, [pc, #780]	; (800d91c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800d60e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d610:	4ac2      	ldr	r2, [pc, #776]	; (800d91c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800d612:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d616:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800d618:	e008      	b.n	800d62c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d61a:	2301      	movs	r3, #1
 800d61c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800d620:	e004      	b.n	800d62c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800d622:	bf00      	nop
 800d624:	e002      	b.n	800d62c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800d626:	bf00      	nop
 800d628:	e000      	b.n	800d62c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800d62a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d62c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d630:	2b00      	cmp	r3, #0
 800d632:	d10b      	bne.n	800d64c <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d634:	4bb9      	ldr	r3, [pc, #740]	; (800d91c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800d636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d638:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800d63c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d640:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d644:	4ab5      	ldr	r2, [pc, #724]	; (800d91c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800d646:	430b      	orrs	r3, r1
 800d648:	6553      	str	r3, [r2, #84]	; 0x54
 800d64a:	e003      	b.n	800d654 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d64c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d650:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800d654:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d65c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800d660:	65bb      	str	r3, [r7, #88]	; 0x58
 800d662:	2300      	movs	r3, #0
 800d664:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d666:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800d66a:	460b      	mov	r3, r1
 800d66c:	4313      	orrs	r3, r2
 800d66e:	d009      	beq.n	800d684 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800d670:	4baa      	ldr	r3, [pc, #680]	; (800d91c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800d672:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d674:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d678:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d67c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d67e:	4aa7      	ldr	r2, [pc, #668]	; (800d91c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800d680:	430b      	orrs	r3, r1
 800d682:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800d684:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d68c:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800d690:	653b      	str	r3, [r7, #80]	; 0x50
 800d692:	2300      	movs	r3, #0
 800d694:	657b      	str	r3, [r7, #84]	; 0x54
 800d696:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800d69a:	460b      	mov	r3, r1
 800d69c:	4313      	orrs	r3, r2
 800d69e:	d009      	beq.n	800d6b4 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800d6a0:	4b9e      	ldr	r3, [pc, #632]	; (800d91c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800d6a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d6a4:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800d6a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d6ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d6ae:	4a9b      	ldr	r2, [pc, #620]	; (800d91c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800d6b0:	430b      	orrs	r3, r1
 800d6b2:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800d6b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d6b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6bc:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800d6c0:	64bb      	str	r3, [r7, #72]	; 0x48
 800d6c2:	2300      	movs	r3, #0
 800d6c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d6c6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800d6ca:	460b      	mov	r3, r1
 800d6cc:	4313      	orrs	r3, r2
 800d6ce:	d009      	beq.n	800d6e4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800d6d0:	4b92      	ldr	r3, [pc, #584]	; (800d91c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800d6d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d6d4:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 800d6d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d6dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d6de:	4a8f      	ldr	r2, [pc, #572]	; (800d91c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800d6e0:	430b      	orrs	r3, r1
 800d6e2:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800d6e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d6e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6ec:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800d6f0:	643b      	str	r3, [r7, #64]	; 0x40
 800d6f2:	2300      	movs	r3, #0
 800d6f4:	647b      	str	r3, [r7, #68]	; 0x44
 800d6f6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800d6fa:	460b      	mov	r3, r1
 800d6fc:	4313      	orrs	r3, r2
 800d6fe:	d00e      	beq.n	800d71e <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800d700:	4b86      	ldr	r3, [pc, #536]	; (800d91c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800d702:	691b      	ldr	r3, [r3, #16]
 800d704:	4a85      	ldr	r2, [pc, #532]	; (800d91c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800d706:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d70a:	6113      	str	r3, [r2, #16]
 800d70c:	4b83      	ldr	r3, [pc, #524]	; (800d91c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800d70e:	6919      	ldr	r1, [r3, #16]
 800d710:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d714:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800d718:	4a80      	ldr	r2, [pc, #512]	; (800d91c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800d71a:	430b      	orrs	r3, r1
 800d71c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800d71e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d722:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d726:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800d72a:	63bb      	str	r3, [r7, #56]	; 0x38
 800d72c:	2300      	movs	r3, #0
 800d72e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d730:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800d734:	460b      	mov	r3, r1
 800d736:	4313      	orrs	r3, r2
 800d738:	d009      	beq.n	800d74e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800d73a:	4b78      	ldr	r3, [pc, #480]	; (800d91c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800d73c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d73e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800d742:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d748:	4a74      	ldr	r2, [pc, #464]	; (800d91c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800d74a:	430b      	orrs	r3, r1
 800d74c:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800d74e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d752:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d756:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800d75a:	633b      	str	r3, [r7, #48]	; 0x30
 800d75c:	2300      	movs	r3, #0
 800d75e:	637b      	str	r3, [r7, #52]	; 0x34
 800d760:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800d764:	460b      	mov	r3, r1
 800d766:	4313      	orrs	r3, r2
 800d768:	d00a      	beq.n	800d780 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800d76a:	4b6c      	ldr	r3, [pc, #432]	; (800d91c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800d76c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d76e:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800d772:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d776:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d77a:	4a68      	ldr	r2, [pc, #416]	; (800d91c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800d77c:	430b      	orrs	r3, r1
 800d77e:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800d780:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d784:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d788:	2100      	movs	r1, #0
 800d78a:	62b9      	str	r1, [r7, #40]	; 0x28
 800d78c:	f003 0301 	and.w	r3, r3, #1
 800d790:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d792:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800d796:	460b      	mov	r3, r1
 800d798:	4313      	orrs	r3, r2
 800d79a:	d011      	beq.n	800d7c0 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d79c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d7a0:	3308      	adds	r3, #8
 800d7a2:	2100      	movs	r1, #0
 800d7a4:	4618      	mov	r0, r3
 800d7a6:	f000 f8bb 	bl	800d920 <RCCEx_PLL2_Config>
 800d7aa:	4603      	mov	r3, r0
 800d7ac:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800d7b0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d003      	beq.n	800d7c0 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d7b8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d7bc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800d7c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d7c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7c8:	2100      	movs	r1, #0
 800d7ca:	6239      	str	r1, [r7, #32]
 800d7cc:	f003 0302 	and.w	r3, r3, #2
 800d7d0:	627b      	str	r3, [r7, #36]	; 0x24
 800d7d2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800d7d6:	460b      	mov	r3, r1
 800d7d8:	4313      	orrs	r3, r2
 800d7da:	d011      	beq.n	800d800 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d7dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d7e0:	3308      	adds	r3, #8
 800d7e2:	2101      	movs	r1, #1
 800d7e4:	4618      	mov	r0, r3
 800d7e6:	f000 f89b 	bl	800d920 <RCCEx_PLL2_Config>
 800d7ea:	4603      	mov	r3, r0
 800d7ec:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800d7f0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d003      	beq.n	800d800 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d7f8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d7fc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800d800:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d804:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d808:	2100      	movs	r1, #0
 800d80a:	61b9      	str	r1, [r7, #24]
 800d80c:	f003 0304 	and.w	r3, r3, #4
 800d810:	61fb      	str	r3, [r7, #28]
 800d812:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800d816:	460b      	mov	r3, r1
 800d818:	4313      	orrs	r3, r2
 800d81a:	d011      	beq.n	800d840 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d81c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d820:	3308      	adds	r3, #8
 800d822:	2102      	movs	r1, #2
 800d824:	4618      	mov	r0, r3
 800d826:	f000 f87b 	bl	800d920 <RCCEx_PLL2_Config>
 800d82a:	4603      	mov	r3, r0
 800d82c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800d830:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d834:	2b00      	cmp	r3, #0
 800d836:	d003      	beq.n	800d840 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d838:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d83c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800d840:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d844:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d848:	2100      	movs	r1, #0
 800d84a:	6139      	str	r1, [r7, #16]
 800d84c:	f003 0308 	and.w	r3, r3, #8
 800d850:	617b      	str	r3, [r7, #20]
 800d852:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800d856:	460b      	mov	r3, r1
 800d858:	4313      	orrs	r3, r2
 800d85a:	d011      	beq.n	800d880 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d85c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d860:	3328      	adds	r3, #40	; 0x28
 800d862:	2100      	movs	r1, #0
 800d864:	4618      	mov	r0, r3
 800d866:	f000 f90d 	bl	800da84 <RCCEx_PLL3_Config>
 800d86a:	4603      	mov	r3, r0
 800d86c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 800d870:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d874:	2b00      	cmp	r3, #0
 800d876:	d003      	beq.n	800d880 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d878:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d87c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800d880:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d884:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d888:	2100      	movs	r1, #0
 800d88a:	60b9      	str	r1, [r7, #8]
 800d88c:	f003 0310 	and.w	r3, r3, #16
 800d890:	60fb      	str	r3, [r7, #12]
 800d892:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800d896:	460b      	mov	r3, r1
 800d898:	4313      	orrs	r3, r2
 800d89a:	d011      	beq.n	800d8c0 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d89c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d8a0:	3328      	adds	r3, #40	; 0x28
 800d8a2:	2101      	movs	r1, #1
 800d8a4:	4618      	mov	r0, r3
 800d8a6:	f000 f8ed 	bl	800da84 <RCCEx_PLL3_Config>
 800d8aa:	4603      	mov	r3, r0
 800d8ac:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800d8b0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d003      	beq.n	800d8c0 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d8b8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d8bc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800d8c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d8c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8c8:	2100      	movs	r1, #0
 800d8ca:	6039      	str	r1, [r7, #0]
 800d8cc:	f003 0320 	and.w	r3, r3, #32
 800d8d0:	607b      	str	r3, [r7, #4]
 800d8d2:	e9d7 1200 	ldrd	r1, r2, [r7]
 800d8d6:	460b      	mov	r3, r1
 800d8d8:	4313      	orrs	r3, r2
 800d8da:	d011      	beq.n	800d900 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d8dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d8e0:	3328      	adds	r3, #40	; 0x28
 800d8e2:	2102      	movs	r1, #2
 800d8e4:	4618      	mov	r0, r3
 800d8e6:	f000 f8cd 	bl	800da84 <RCCEx_PLL3_Config>
 800d8ea:	4603      	mov	r3, r0
 800d8ec:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800d8f0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d003      	beq.n	800d900 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d8f8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d8fc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 800d900:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800d904:	2b00      	cmp	r3, #0
 800d906:	d101      	bne.n	800d90c <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 800d908:	2300      	movs	r3, #0
 800d90a:	e000      	b.n	800d90e <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 800d90c:	2301      	movs	r3, #1
}
 800d90e:	4618      	mov	r0, r3
 800d910:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800d914:	46bd      	mov	sp, r7
 800d916:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d91a:	bf00      	nop
 800d91c:	58024400 	.word	0x58024400

0800d920 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d920:	b580      	push	{r7, lr}
 800d922:	b084      	sub	sp, #16
 800d924:	af00      	add	r7, sp, #0
 800d926:	6078      	str	r0, [r7, #4]
 800d928:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d92a:	2300      	movs	r3, #0
 800d92c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d92e:	4b53      	ldr	r3, [pc, #332]	; (800da7c <RCCEx_PLL2_Config+0x15c>)
 800d930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d932:	f003 0303 	and.w	r3, r3, #3
 800d936:	2b03      	cmp	r3, #3
 800d938:	d101      	bne.n	800d93e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d93a:	2301      	movs	r3, #1
 800d93c:	e099      	b.n	800da72 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d93e:	4b4f      	ldr	r3, [pc, #316]	; (800da7c <RCCEx_PLL2_Config+0x15c>)
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	4a4e      	ldr	r2, [pc, #312]	; (800da7c <RCCEx_PLL2_Config+0x15c>)
 800d944:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d948:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d94a:	f7fa fc25 	bl	8008198 <HAL_GetTick>
 800d94e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d950:	e008      	b.n	800d964 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d952:	f7fa fc21 	bl	8008198 <HAL_GetTick>
 800d956:	4602      	mov	r2, r0
 800d958:	68bb      	ldr	r3, [r7, #8]
 800d95a:	1ad3      	subs	r3, r2, r3
 800d95c:	2b02      	cmp	r3, #2
 800d95e:	d901      	bls.n	800d964 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d960:	2303      	movs	r3, #3
 800d962:	e086      	b.n	800da72 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d964:	4b45      	ldr	r3, [pc, #276]	; (800da7c <RCCEx_PLL2_Config+0x15c>)
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d1f0      	bne.n	800d952 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d970:	4b42      	ldr	r3, [pc, #264]	; (800da7c <RCCEx_PLL2_Config+0x15c>)
 800d972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d974:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	031b      	lsls	r3, r3, #12
 800d97e:	493f      	ldr	r1, [pc, #252]	; (800da7c <RCCEx_PLL2_Config+0x15c>)
 800d980:	4313      	orrs	r3, r2
 800d982:	628b      	str	r3, [r1, #40]	; 0x28
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	685b      	ldr	r3, [r3, #4]
 800d988:	3b01      	subs	r3, #1
 800d98a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	689b      	ldr	r3, [r3, #8]
 800d992:	3b01      	subs	r3, #1
 800d994:	025b      	lsls	r3, r3, #9
 800d996:	b29b      	uxth	r3, r3
 800d998:	431a      	orrs	r2, r3
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	68db      	ldr	r3, [r3, #12]
 800d99e:	3b01      	subs	r3, #1
 800d9a0:	041b      	lsls	r3, r3, #16
 800d9a2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d9a6:	431a      	orrs	r2, r3
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	691b      	ldr	r3, [r3, #16]
 800d9ac:	3b01      	subs	r3, #1
 800d9ae:	061b      	lsls	r3, r3, #24
 800d9b0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d9b4:	4931      	ldr	r1, [pc, #196]	; (800da7c <RCCEx_PLL2_Config+0x15c>)
 800d9b6:	4313      	orrs	r3, r2
 800d9b8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d9ba:	4b30      	ldr	r3, [pc, #192]	; (800da7c <RCCEx_PLL2_Config+0x15c>)
 800d9bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9be:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	695b      	ldr	r3, [r3, #20]
 800d9c6:	492d      	ldr	r1, [pc, #180]	; (800da7c <RCCEx_PLL2_Config+0x15c>)
 800d9c8:	4313      	orrs	r3, r2
 800d9ca:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d9cc:	4b2b      	ldr	r3, [pc, #172]	; (800da7c <RCCEx_PLL2_Config+0x15c>)
 800d9ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9d0:	f023 0220 	bic.w	r2, r3, #32
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	699b      	ldr	r3, [r3, #24]
 800d9d8:	4928      	ldr	r1, [pc, #160]	; (800da7c <RCCEx_PLL2_Config+0x15c>)
 800d9da:	4313      	orrs	r3, r2
 800d9dc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d9de:	4b27      	ldr	r3, [pc, #156]	; (800da7c <RCCEx_PLL2_Config+0x15c>)
 800d9e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9e2:	4a26      	ldr	r2, [pc, #152]	; (800da7c <RCCEx_PLL2_Config+0x15c>)
 800d9e4:	f023 0310 	bic.w	r3, r3, #16
 800d9e8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d9ea:	4b24      	ldr	r3, [pc, #144]	; (800da7c <RCCEx_PLL2_Config+0x15c>)
 800d9ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d9ee:	4b24      	ldr	r3, [pc, #144]	; (800da80 <RCCEx_PLL2_Config+0x160>)
 800d9f0:	4013      	ands	r3, r2
 800d9f2:	687a      	ldr	r2, [r7, #4]
 800d9f4:	69d2      	ldr	r2, [r2, #28]
 800d9f6:	00d2      	lsls	r2, r2, #3
 800d9f8:	4920      	ldr	r1, [pc, #128]	; (800da7c <RCCEx_PLL2_Config+0x15c>)
 800d9fa:	4313      	orrs	r3, r2
 800d9fc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d9fe:	4b1f      	ldr	r3, [pc, #124]	; (800da7c <RCCEx_PLL2_Config+0x15c>)
 800da00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da02:	4a1e      	ldr	r2, [pc, #120]	; (800da7c <RCCEx_PLL2_Config+0x15c>)
 800da04:	f043 0310 	orr.w	r3, r3, #16
 800da08:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800da0a:	683b      	ldr	r3, [r7, #0]
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d106      	bne.n	800da1e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800da10:	4b1a      	ldr	r3, [pc, #104]	; (800da7c <RCCEx_PLL2_Config+0x15c>)
 800da12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da14:	4a19      	ldr	r2, [pc, #100]	; (800da7c <RCCEx_PLL2_Config+0x15c>)
 800da16:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800da1a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800da1c:	e00f      	b.n	800da3e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800da1e:	683b      	ldr	r3, [r7, #0]
 800da20:	2b01      	cmp	r3, #1
 800da22:	d106      	bne.n	800da32 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800da24:	4b15      	ldr	r3, [pc, #84]	; (800da7c <RCCEx_PLL2_Config+0x15c>)
 800da26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da28:	4a14      	ldr	r2, [pc, #80]	; (800da7c <RCCEx_PLL2_Config+0x15c>)
 800da2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800da2e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800da30:	e005      	b.n	800da3e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800da32:	4b12      	ldr	r3, [pc, #72]	; (800da7c <RCCEx_PLL2_Config+0x15c>)
 800da34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da36:	4a11      	ldr	r2, [pc, #68]	; (800da7c <RCCEx_PLL2_Config+0x15c>)
 800da38:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800da3c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800da3e:	4b0f      	ldr	r3, [pc, #60]	; (800da7c <RCCEx_PLL2_Config+0x15c>)
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	4a0e      	ldr	r2, [pc, #56]	; (800da7c <RCCEx_PLL2_Config+0x15c>)
 800da44:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800da48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800da4a:	f7fa fba5 	bl	8008198 <HAL_GetTick>
 800da4e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800da50:	e008      	b.n	800da64 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800da52:	f7fa fba1 	bl	8008198 <HAL_GetTick>
 800da56:	4602      	mov	r2, r0
 800da58:	68bb      	ldr	r3, [r7, #8]
 800da5a:	1ad3      	subs	r3, r2, r3
 800da5c:	2b02      	cmp	r3, #2
 800da5e:	d901      	bls.n	800da64 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800da60:	2303      	movs	r3, #3
 800da62:	e006      	b.n	800da72 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800da64:	4b05      	ldr	r3, [pc, #20]	; (800da7c <RCCEx_PLL2_Config+0x15c>)
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d0f0      	beq.n	800da52 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800da70:	7bfb      	ldrb	r3, [r7, #15]
}
 800da72:	4618      	mov	r0, r3
 800da74:	3710      	adds	r7, #16
 800da76:	46bd      	mov	sp, r7
 800da78:	bd80      	pop	{r7, pc}
 800da7a:	bf00      	nop
 800da7c:	58024400 	.word	0x58024400
 800da80:	ffff0007 	.word	0xffff0007

0800da84 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800da84:	b580      	push	{r7, lr}
 800da86:	b084      	sub	sp, #16
 800da88:	af00      	add	r7, sp, #0
 800da8a:	6078      	str	r0, [r7, #4]
 800da8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800da8e:	2300      	movs	r3, #0
 800da90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800da92:	4b53      	ldr	r3, [pc, #332]	; (800dbe0 <RCCEx_PLL3_Config+0x15c>)
 800da94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da96:	f003 0303 	and.w	r3, r3, #3
 800da9a:	2b03      	cmp	r3, #3
 800da9c:	d101      	bne.n	800daa2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800da9e:	2301      	movs	r3, #1
 800daa0:	e099      	b.n	800dbd6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800daa2:	4b4f      	ldr	r3, [pc, #316]	; (800dbe0 <RCCEx_PLL3_Config+0x15c>)
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	4a4e      	ldr	r2, [pc, #312]	; (800dbe0 <RCCEx_PLL3_Config+0x15c>)
 800daa8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800daac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800daae:	f7fa fb73 	bl	8008198 <HAL_GetTick>
 800dab2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800dab4:	e008      	b.n	800dac8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800dab6:	f7fa fb6f 	bl	8008198 <HAL_GetTick>
 800daba:	4602      	mov	r2, r0
 800dabc:	68bb      	ldr	r3, [r7, #8]
 800dabe:	1ad3      	subs	r3, r2, r3
 800dac0:	2b02      	cmp	r3, #2
 800dac2:	d901      	bls.n	800dac8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800dac4:	2303      	movs	r3, #3
 800dac6:	e086      	b.n	800dbd6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800dac8:	4b45      	ldr	r3, [pc, #276]	; (800dbe0 <RCCEx_PLL3_Config+0x15c>)
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d1f0      	bne.n	800dab6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800dad4:	4b42      	ldr	r3, [pc, #264]	; (800dbe0 <RCCEx_PLL3_Config+0x15c>)
 800dad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dad8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	051b      	lsls	r3, r3, #20
 800dae2:	493f      	ldr	r1, [pc, #252]	; (800dbe0 <RCCEx_PLL3_Config+0x15c>)
 800dae4:	4313      	orrs	r3, r2
 800dae6:	628b      	str	r3, [r1, #40]	; 0x28
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	685b      	ldr	r3, [r3, #4]
 800daec:	3b01      	subs	r3, #1
 800daee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	689b      	ldr	r3, [r3, #8]
 800daf6:	3b01      	subs	r3, #1
 800daf8:	025b      	lsls	r3, r3, #9
 800dafa:	b29b      	uxth	r3, r3
 800dafc:	431a      	orrs	r2, r3
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	68db      	ldr	r3, [r3, #12]
 800db02:	3b01      	subs	r3, #1
 800db04:	041b      	lsls	r3, r3, #16
 800db06:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800db0a:	431a      	orrs	r2, r3
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	691b      	ldr	r3, [r3, #16]
 800db10:	3b01      	subs	r3, #1
 800db12:	061b      	lsls	r3, r3, #24
 800db14:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800db18:	4931      	ldr	r1, [pc, #196]	; (800dbe0 <RCCEx_PLL3_Config+0x15c>)
 800db1a:	4313      	orrs	r3, r2
 800db1c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800db1e:	4b30      	ldr	r3, [pc, #192]	; (800dbe0 <RCCEx_PLL3_Config+0x15c>)
 800db20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db22:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	695b      	ldr	r3, [r3, #20]
 800db2a:	492d      	ldr	r1, [pc, #180]	; (800dbe0 <RCCEx_PLL3_Config+0x15c>)
 800db2c:	4313      	orrs	r3, r2
 800db2e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800db30:	4b2b      	ldr	r3, [pc, #172]	; (800dbe0 <RCCEx_PLL3_Config+0x15c>)
 800db32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db34:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	699b      	ldr	r3, [r3, #24]
 800db3c:	4928      	ldr	r1, [pc, #160]	; (800dbe0 <RCCEx_PLL3_Config+0x15c>)
 800db3e:	4313      	orrs	r3, r2
 800db40:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800db42:	4b27      	ldr	r3, [pc, #156]	; (800dbe0 <RCCEx_PLL3_Config+0x15c>)
 800db44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db46:	4a26      	ldr	r2, [pc, #152]	; (800dbe0 <RCCEx_PLL3_Config+0x15c>)
 800db48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800db4c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800db4e:	4b24      	ldr	r3, [pc, #144]	; (800dbe0 <RCCEx_PLL3_Config+0x15c>)
 800db50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800db52:	4b24      	ldr	r3, [pc, #144]	; (800dbe4 <RCCEx_PLL3_Config+0x160>)
 800db54:	4013      	ands	r3, r2
 800db56:	687a      	ldr	r2, [r7, #4]
 800db58:	69d2      	ldr	r2, [r2, #28]
 800db5a:	00d2      	lsls	r2, r2, #3
 800db5c:	4920      	ldr	r1, [pc, #128]	; (800dbe0 <RCCEx_PLL3_Config+0x15c>)
 800db5e:	4313      	orrs	r3, r2
 800db60:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800db62:	4b1f      	ldr	r3, [pc, #124]	; (800dbe0 <RCCEx_PLL3_Config+0x15c>)
 800db64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db66:	4a1e      	ldr	r2, [pc, #120]	; (800dbe0 <RCCEx_PLL3_Config+0x15c>)
 800db68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800db6c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800db6e:	683b      	ldr	r3, [r7, #0]
 800db70:	2b00      	cmp	r3, #0
 800db72:	d106      	bne.n	800db82 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800db74:	4b1a      	ldr	r3, [pc, #104]	; (800dbe0 <RCCEx_PLL3_Config+0x15c>)
 800db76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db78:	4a19      	ldr	r2, [pc, #100]	; (800dbe0 <RCCEx_PLL3_Config+0x15c>)
 800db7a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800db7e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800db80:	e00f      	b.n	800dba2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800db82:	683b      	ldr	r3, [r7, #0]
 800db84:	2b01      	cmp	r3, #1
 800db86:	d106      	bne.n	800db96 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800db88:	4b15      	ldr	r3, [pc, #84]	; (800dbe0 <RCCEx_PLL3_Config+0x15c>)
 800db8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db8c:	4a14      	ldr	r2, [pc, #80]	; (800dbe0 <RCCEx_PLL3_Config+0x15c>)
 800db8e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800db92:	62d3      	str	r3, [r2, #44]	; 0x2c
 800db94:	e005      	b.n	800dba2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800db96:	4b12      	ldr	r3, [pc, #72]	; (800dbe0 <RCCEx_PLL3_Config+0x15c>)
 800db98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db9a:	4a11      	ldr	r2, [pc, #68]	; (800dbe0 <RCCEx_PLL3_Config+0x15c>)
 800db9c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800dba0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800dba2:	4b0f      	ldr	r3, [pc, #60]	; (800dbe0 <RCCEx_PLL3_Config+0x15c>)
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	4a0e      	ldr	r2, [pc, #56]	; (800dbe0 <RCCEx_PLL3_Config+0x15c>)
 800dba8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dbac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dbae:	f7fa faf3 	bl	8008198 <HAL_GetTick>
 800dbb2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800dbb4:	e008      	b.n	800dbc8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800dbb6:	f7fa faef 	bl	8008198 <HAL_GetTick>
 800dbba:	4602      	mov	r2, r0
 800dbbc:	68bb      	ldr	r3, [r7, #8]
 800dbbe:	1ad3      	subs	r3, r2, r3
 800dbc0:	2b02      	cmp	r3, #2
 800dbc2:	d901      	bls.n	800dbc8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800dbc4:	2303      	movs	r3, #3
 800dbc6:	e006      	b.n	800dbd6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800dbc8:	4b05      	ldr	r3, [pc, #20]	; (800dbe0 <RCCEx_PLL3_Config+0x15c>)
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d0f0      	beq.n	800dbb6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800dbd4:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbd6:	4618      	mov	r0, r3
 800dbd8:	3710      	adds	r7, #16
 800dbda:	46bd      	mov	sp, r7
 800dbdc:	bd80      	pop	{r7, pc}
 800dbde:	bf00      	nop
 800dbe0:	58024400 	.word	0x58024400
 800dbe4:	ffff0007 	.word	0xffff0007

0800dbe8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800dbe8:	b580      	push	{r7, lr}
 800dbea:	b082      	sub	sp, #8
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d101      	bne.n	800dbfa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800dbf6:	2301      	movs	r3, #1
 800dbf8:	e049      	b.n	800dc8e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dc00:	b2db      	uxtb	r3, r3
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d106      	bne.n	800dc14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	2200      	movs	r2, #0
 800dc0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800dc0e:	6878      	ldr	r0, [r7, #4]
 800dc10:	f000 f841 	bl	800dc96 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	2202      	movs	r2, #2
 800dc18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	681a      	ldr	r2, [r3, #0]
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	3304      	adds	r3, #4
 800dc24:	4619      	mov	r1, r3
 800dc26:	4610      	mov	r0, r2
 800dc28:	f000 fa00 	bl	800e02c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	2201      	movs	r2, #1
 800dc30:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	2201      	movs	r2, #1
 800dc38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	2201      	movs	r2, #1
 800dc40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	2201      	movs	r2, #1
 800dc48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	2201      	movs	r2, #1
 800dc50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	2201      	movs	r2, #1
 800dc58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	2201      	movs	r2, #1
 800dc60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	2201      	movs	r2, #1
 800dc68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	2201      	movs	r2, #1
 800dc70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	2201      	movs	r2, #1
 800dc78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	2201      	movs	r2, #1
 800dc80:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	2201      	movs	r2, #1
 800dc88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800dc8c:	2300      	movs	r3, #0
}
 800dc8e:	4618      	mov	r0, r3
 800dc90:	3708      	adds	r7, #8
 800dc92:	46bd      	mov	sp, r7
 800dc94:	bd80      	pop	{r7, pc}

0800dc96 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800dc96:	b480      	push	{r7}
 800dc98:	b083      	sub	sp, #12
 800dc9a:	af00      	add	r7, sp, #0
 800dc9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800dc9e:	bf00      	nop
 800dca0:	370c      	adds	r7, #12
 800dca2:	46bd      	mov	sp, r7
 800dca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca8:	4770      	bx	lr
	...

0800dcac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800dcac:	b480      	push	{r7}
 800dcae:	b085      	sub	sp, #20
 800dcb0:	af00      	add	r7, sp, #0
 800dcb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dcba:	b2db      	uxtb	r3, r3
 800dcbc:	2b01      	cmp	r3, #1
 800dcbe:	d001      	beq.n	800dcc4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800dcc0:	2301      	movs	r3, #1
 800dcc2:	e054      	b.n	800dd6e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	2202      	movs	r2, #2
 800dcc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	68da      	ldr	r2, [r3, #12]
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	f042 0201 	orr.w	r2, r2, #1
 800dcda:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	4a26      	ldr	r2, [pc, #152]	; (800dd7c <HAL_TIM_Base_Start_IT+0xd0>)
 800dce2:	4293      	cmp	r3, r2
 800dce4:	d022      	beq.n	800dd2c <HAL_TIM_Base_Start_IT+0x80>
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dcee:	d01d      	beq.n	800dd2c <HAL_TIM_Base_Start_IT+0x80>
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	4a22      	ldr	r2, [pc, #136]	; (800dd80 <HAL_TIM_Base_Start_IT+0xd4>)
 800dcf6:	4293      	cmp	r3, r2
 800dcf8:	d018      	beq.n	800dd2c <HAL_TIM_Base_Start_IT+0x80>
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	4a21      	ldr	r2, [pc, #132]	; (800dd84 <HAL_TIM_Base_Start_IT+0xd8>)
 800dd00:	4293      	cmp	r3, r2
 800dd02:	d013      	beq.n	800dd2c <HAL_TIM_Base_Start_IT+0x80>
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	4a1f      	ldr	r2, [pc, #124]	; (800dd88 <HAL_TIM_Base_Start_IT+0xdc>)
 800dd0a:	4293      	cmp	r3, r2
 800dd0c:	d00e      	beq.n	800dd2c <HAL_TIM_Base_Start_IT+0x80>
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	4a1e      	ldr	r2, [pc, #120]	; (800dd8c <HAL_TIM_Base_Start_IT+0xe0>)
 800dd14:	4293      	cmp	r3, r2
 800dd16:	d009      	beq.n	800dd2c <HAL_TIM_Base_Start_IT+0x80>
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	4a1c      	ldr	r2, [pc, #112]	; (800dd90 <HAL_TIM_Base_Start_IT+0xe4>)
 800dd1e:	4293      	cmp	r3, r2
 800dd20:	d004      	beq.n	800dd2c <HAL_TIM_Base_Start_IT+0x80>
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	4a1b      	ldr	r2, [pc, #108]	; (800dd94 <HAL_TIM_Base_Start_IT+0xe8>)
 800dd28:	4293      	cmp	r3, r2
 800dd2a:	d115      	bne.n	800dd58 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	689a      	ldr	r2, [r3, #8]
 800dd32:	4b19      	ldr	r3, [pc, #100]	; (800dd98 <HAL_TIM_Base_Start_IT+0xec>)
 800dd34:	4013      	ands	r3, r2
 800dd36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	2b06      	cmp	r3, #6
 800dd3c:	d015      	beq.n	800dd6a <HAL_TIM_Base_Start_IT+0xbe>
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dd44:	d011      	beq.n	800dd6a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	681a      	ldr	r2, [r3, #0]
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	f042 0201 	orr.w	r2, r2, #1
 800dd54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dd56:	e008      	b.n	800dd6a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	681a      	ldr	r2, [r3, #0]
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	f042 0201 	orr.w	r2, r2, #1
 800dd66:	601a      	str	r2, [r3, #0]
 800dd68:	e000      	b.n	800dd6c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dd6a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800dd6c:	2300      	movs	r3, #0
}
 800dd6e:	4618      	mov	r0, r3
 800dd70:	3714      	adds	r7, #20
 800dd72:	46bd      	mov	sp, r7
 800dd74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd78:	4770      	bx	lr
 800dd7a:	bf00      	nop
 800dd7c:	40010000 	.word	0x40010000
 800dd80:	40000400 	.word	0x40000400
 800dd84:	40000800 	.word	0x40000800
 800dd88:	40000c00 	.word	0x40000c00
 800dd8c:	40010400 	.word	0x40010400
 800dd90:	40001800 	.word	0x40001800
 800dd94:	40014000 	.word	0x40014000
 800dd98:	00010007 	.word	0x00010007

0800dd9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800dd9c:	b580      	push	{r7, lr}
 800dd9e:	b082      	sub	sp, #8
 800dda0:	af00      	add	r7, sp, #0
 800dda2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	691b      	ldr	r3, [r3, #16]
 800ddaa:	f003 0302 	and.w	r3, r3, #2
 800ddae:	2b02      	cmp	r3, #2
 800ddb0:	d122      	bne.n	800ddf8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	68db      	ldr	r3, [r3, #12]
 800ddb8:	f003 0302 	and.w	r3, r3, #2
 800ddbc:	2b02      	cmp	r3, #2
 800ddbe:	d11b      	bne.n	800ddf8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	f06f 0202 	mvn.w	r2, #2
 800ddc8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	2201      	movs	r2, #1
 800ddce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	699b      	ldr	r3, [r3, #24]
 800ddd6:	f003 0303 	and.w	r3, r3, #3
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d003      	beq.n	800dde6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ddde:	6878      	ldr	r0, [r7, #4]
 800dde0:	f000 f905 	bl	800dfee <HAL_TIM_IC_CaptureCallback>
 800dde4:	e005      	b.n	800ddf2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800dde6:	6878      	ldr	r0, [r7, #4]
 800dde8:	f000 f8f7 	bl	800dfda <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ddec:	6878      	ldr	r0, [r7, #4]
 800ddee:	f000 f908 	bl	800e002 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	2200      	movs	r2, #0
 800ddf6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	691b      	ldr	r3, [r3, #16]
 800ddfe:	f003 0304 	and.w	r3, r3, #4
 800de02:	2b04      	cmp	r3, #4
 800de04:	d122      	bne.n	800de4c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	68db      	ldr	r3, [r3, #12]
 800de0c:	f003 0304 	and.w	r3, r3, #4
 800de10:	2b04      	cmp	r3, #4
 800de12:	d11b      	bne.n	800de4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	f06f 0204 	mvn.w	r2, #4
 800de1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	2202      	movs	r2, #2
 800de22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	699b      	ldr	r3, [r3, #24]
 800de2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d003      	beq.n	800de3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800de32:	6878      	ldr	r0, [r7, #4]
 800de34:	f000 f8db 	bl	800dfee <HAL_TIM_IC_CaptureCallback>
 800de38:	e005      	b.n	800de46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800de3a:	6878      	ldr	r0, [r7, #4]
 800de3c:	f000 f8cd 	bl	800dfda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800de40:	6878      	ldr	r0, [r7, #4]
 800de42:	f000 f8de 	bl	800e002 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	2200      	movs	r2, #0
 800de4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	691b      	ldr	r3, [r3, #16]
 800de52:	f003 0308 	and.w	r3, r3, #8
 800de56:	2b08      	cmp	r3, #8
 800de58:	d122      	bne.n	800dea0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	68db      	ldr	r3, [r3, #12]
 800de60:	f003 0308 	and.w	r3, r3, #8
 800de64:	2b08      	cmp	r3, #8
 800de66:	d11b      	bne.n	800dea0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	f06f 0208 	mvn.w	r2, #8
 800de70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	2204      	movs	r2, #4
 800de76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	69db      	ldr	r3, [r3, #28]
 800de7e:	f003 0303 	and.w	r3, r3, #3
 800de82:	2b00      	cmp	r3, #0
 800de84:	d003      	beq.n	800de8e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800de86:	6878      	ldr	r0, [r7, #4]
 800de88:	f000 f8b1 	bl	800dfee <HAL_TIM_IC_CaptureCallback>
 800de8c:	e005      	b.n	800de9a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800de8e:	6878      	ldr	r0, [r7, #4]
 800de90:	f000 f8a3 	bl	800dfda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800de94:	6878      	ldr	r0, [r7, #4]
 800de96:	f000 f8b4 	bl	800e002 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	2200      	movs	r2, #0
 800de9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	691b      	ldr	r3, [r3, #16]
 800dea6:	f003 0310 	and.w	r3, r3, #16
 800deaa:	2b10      	cmp	r3, #16
 800deac:	d122      	bne.n	800def4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	68db      	ldr	r3, [r3, #12]
 800deb4:	f003 0310 	and.w	r3, r3, #16
 800deb8:	2b10      	cmp	r3, #16
 800deba:	d11b      	bne.n	800def4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	f06f 0210 	mvn.w	r2, #16
 800dec4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	2208      	movs	r2, #8
 800deca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	69db      	ldr	r3, [r3, #28]
 800ded2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d003      	beq.n	800dee2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800deda:	6878      	ldr	r0, [r7, #4]
 800dedc:	f000 f887 	bl	800dfee <HAL_TIM_IC_CaptureCallback>
 800dee0:	e005      	b.n	800deee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dee2:	6878      	ldr	r0, [r7, #4]
 800dee4:	f000 f879 	bl	800dfda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dee8:	6878      	ldr	r0, [r7, #4]
 800deea:	f000 f88a 	bl	800e002 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	2200      	movs	r2, #0
 800def2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	691b      	ldr	r3, [r3, #16]
 800defa:	f003 0301 	and.w	r3, r3, #1
 800defe:	2b01      	cmp	r3, #1
 800df00:	d10e      	bne.n	800df20 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	68db      	ldr	r3, [r3, #12]
 800df08:	f003 0301 	and.w	r3, r3, #1
 800df0c:	2b01      	cmp	r3, #1
 800df0e:	d107      	bne.n	800df20 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	f06f 0201 	mvn.w	r2, #1
 800df18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800df1a:	6878      	ldr	r0, [r7, #4]
 800df1c:	f7f2 fe66 	bl	8000bec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	691b      	ldr	r3, [r3, #16]
 800df26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800df2a:	2b80      	cmp	r3, #128	; 0x80
 800df2c:	d10e      	bne.n	800df4c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	68db      	ldr	r3, [r3, #12]
 800df34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800df38:	2b80      	cmp	r3, #128	; 0x80
 800df3a:	d107      	bne.n	800df4c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800df44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800df46:	6878      	ldr	r0, [r7, #4]
 800df48:	f000 f914 	bl	800e174 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	691b      	ldr	r3, [r3, #16]
 800df52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800df56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800df5a:	d10e      	bne.n	800df7a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	68db      	ldr	r3, [r3, #12]
 800df62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800df66:	2b80      	cmp	r3, #128	; 0x80
 800df68:	d107      	bne.n	800df7a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800df72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800df74:	6878      	ldr	r0, [r7, #4]
 800df76:	f000 f907 	bl	800e188 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	691b      	ldr	r3, [r3, #16]
 800df80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df84:	2b40      	cmp	r3, #64	; 0x40
 800df86:	d10e      	bne.n	800dfa6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	68db      	ldr	r3, [r3, #12]
 800df8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df92:	2b40      	cmp	r3, #64	; 0x40
 800df94:	d107      	bne.n	800dfa6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800df9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800dfa0:	6878      	ldr	r0, [r7, #4]
 800dfa2:	f000 f838 	bl	800e016 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	691b      	ldr	r3, [r3, #16]
 800dfac:	f003 0320 	and.w	r3, r3, #32
 800dfb0:	2b20      	cmp	r3, #32
 800dfb2:	d10e      	bne.n	800dfd2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	68db      	ldr	r3, [r3, #12]
 800dfba:	f003 0320 	and.w	r3, r3, #32
 800dfbe:	2b20      	cmp	r3, #32
 800dfc0:	d107      	bne.n	800dfd2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	f06f 0220 	mvn.w	r2, #32
 800dfca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800dfcc:	6878      	ldr	r0, [r7, #4]
 800dfce:	f000 f8c7 	bl	800e160 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800dfd2:	bf00      	nop
 800dfd4:	3708      	adds	r7, #8
 800dfd6:	46bd      	mov	sp, r7
 800dfd8:	bd80      	pop	{r7, pc}

0800dfda <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800dfda:	b480      	push	{r7}
 800dfdc:	b083      	sub	sp, #12
 800dfde:	af00      	add	r7, sp, #0
 800dfe0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800dfe2:	bf00      	nop
 800dfe4:	370c      	adds	r7, #12
 800dfe6:	46bd      	mov	sp, r7
 800dfe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfec:	4770      	bx	lr

0800dfee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800dfee:	b480      	push	{r7}
 800dff0:	b083      	sub	sp, #12
 800dff2:	af00      	add	r7, sp, #0
 800dff4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800dff6:	bf00      	nop
 800dff8:	370c      	adds	r7, #12
 800dffa:	46bd      	mov	sp, r7
 800dffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e000:	4770      	bx	lr

0800e002 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e002:	b480      	push	{r7}
 800e004:	b083      	sub	sp, #12
 800e006:	af00      	add	r7, sp, #0
 800e008:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e00a:	bf00      	nop
 800e00c:	370c      	adds	r7, #12
 800e00e:	46bd      	mov	sp, r7
 800e010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e014:	4770      	bx	lr

0800e016 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e016:	b480      	push	{r7}
 800e018:	b083      	sub	sp, #12
 800e01a:	af00      	add	r7, sp, #0
 800e01c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e01e:	bf00      	nop
 800e020:	370c      	adds	r7, #12
 800e022:	46bd      	mov	sp, r7
 800e024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e028:	4770      	bx	lr
	...

0800e02c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800e02c:	b480      	push	{r7}
 800e02e:	b085      	sub	sp, #20
 800e030:	af00      	add	r7, sp, #0
 800e032:	6078      	str	r0, [r7, #4]
 800e034:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	4a40      	ldr	r2, [pc, #256]	; (800e140 <TIM_Base_SetConfig+0x114>)
 800e040:	4293      	cmp	r3, r2
 800e042:	d013      	beq.n	800e06c <TIM_Base_SetConfig+0x40>
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e04a:	d00f      	beq.n	800e06c <TIM_Base_SetConfig+0x40>
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	4a3d      	ldr	r2, [pc, #244]	; (800e144 <TIM_Base_SetConfig+0x118>)
 800e050:	4293      	cmp	r3, r2
 800e052:	d00b      	beq.n	800e06c <TIM_Base_SetConfig+0x40>
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	4a3c      	ldr	r2, [pc, #240]	; (800e148 <TIM_Base_SetConfig+0x11c>)
 800e058:	4293      	cmp	r3, r2
 800e05a:	d007      	beq.n	800e06c <TIM_Base_SetConfig+0x40>
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	4a3b      	ldr	r2, [pc, #236]	; (800e14c <TIM_Base_SetConfig+0x120>)
 800e060:	4293      	cmp	r3, r2
 800e062:	d003      	beq.n	800e06c <TIM_Base_SetConfig+0x40>
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	4a3a      	ldr	r2, [pc, #232]	; (800e150 <TIM_Base_SetConfig+0x124>)
 800e068:	4293      	cmp	r3, r2
 800e06a:	d108      	bne.n	800e07e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e072:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e074:	683b      	ldr	r3, [r7, #0]
 800e076:	685b      	ldr	r3, [r3, #4]
 800e078:	68fa      	ldr	r2, [r7, #12]
 800e07a:	4313      	orrs	r3, r2
 800e07c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	4a2f      	ldr	r2, [pc, #188]	; (800e140 <TIM_Base_SetConfig+0x114>)
 800e082:	4293      	cmp	r3, r2
 800e084:	d01f      	beq.n	800e0c6 <TIM_Base_SetConfig+0x9a>
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e08c:	d01b      	beq.n	800e0c6 <TIM_Base_SetConfig+0x9a>
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	4a2c      	ldr	r2, [pc, #176]	; (800e144 <TIM_Base_SetConfig+0x118>)
 800e092:	4293      	cmp	r3, r2
 800e094:	d017      	beq.n	800e0c6 <TIM_Base_SetConfig+0x9a>
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	4a2b      	ldr	r2, [pc, #172]	; (800e148 <TIM_Base_SetConfig+0x11c>)
 800e09a:	4293      	cmp	r3, r2
 800e09c:	d013      	beq.n	800e0c6 <TIM_Base_SetConfig+0x9a>
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	4a2a      	ldr	r2, [pc, #168]	; (800e14c <TIM_Base_SetConfig+0x120>)
 800e0a2:	4293      	cmp	r3, r2
 800e0a4:	d00f      	beq.n	800e0c6 <TIM_Base_SetConfig+0x9a>
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	4a29      	ldr	r2, [pc, #164]	; (800e150 <TIM_Base_SetConfig+0x124>)
 800e0aa:	4293      	cmp	r3, r2
 800e0ac:	d00b      	beq.n	800e0c6 <TIM_Base_SetConfig+0x9a>
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	4a28      	ldr	r2, [pc, #160]	; (800e154 <TIM_Base_SetConfig+0x128>)
 800e0b2:	4293      	cmp	r3, r2
 800e0b4:	d007      	beq.n	800e0c6 <TIM_Base_SetConfig+0x9a>
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	4a27      	ldr	r2, [pc, #156]	; (800e158 <TIM_Base_SetConfig+0x12c>)
 800e0ba:	4293      	cmp	r3, r2
 800e0bc:	d003      	beq.n	800e0c6 <TIM_Base_SetConfig+0x9a>
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	4a26      	ldr	r2, [pc, #152]	; (800e15c <TIM_Base_SetConfig+0x130>)
 800e0c2:	4293      	cmp	r3, r2
 800e0c4:	d108      	bne.n	800e0d8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e0cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e0ce:	683b      	ldr	r3, [r7, #0]
 800e0d0:	68db      	ldr	r3, [r3, #12]
 800e0d2:	68fa      	ldr	r2, [r7, #12]
 800e0d4:	4313      	orrs	r3, r2
 800e0d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e0de:	683b      	ldr	r3, [r7, #0]
 800e0e0:	695b      	ldr	r3, [r3, #20]
 800e0e2:	4313      	orrs	r3, r2
 800e0e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	68fa      	ldr	r2, [r7, #12]
 800e0ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e0ec:	683b      	ldr	r3, [r7, #0]
 800e0ee:	689a      	ldr	r2, [r3, #8]
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e0f4:	683b      	ldr	r3, [r7, #0]
 800e0f6:	681a      	ldr	r2, [r3, #0]
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	4a10      	ldr	r2, [pc, #64]	; (800e140 <TIM_Base_SetConfig+0x114>)
 800e100:	4293      	cmp	r3, r2
 800e102:	d00f      	beq.n	800e124 <TIM_Base_SetConfig+0xf8>
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	4a12      	ldr	r2, [pc, #72]	; (800e150 <TIM_Base_SetConfig+0x124>)
 800e108:	4293      	cmp	r3, r2
 800e10a:	d00b      	beq.n	800e124 <TIM_Base_SetConfig+0xf8>
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	4a11      	ldr	r2, [pc, #68]	; (800e154 <TIM_Base_SetConfig+0x128>)
 800e110:	4293      	cmp	r3, r2
 800e112:	d007      	beq.n	800e124 <TIM_Base_SetConfig+0xf8>
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	4a10      	ldr	r2, [pc, #64]	; (800e158 <TIM_Base_SetConfig+0x12c>)
 800e118:	4293      	cmp	r3, r2
 800e11a:	d003      	beq.n	800e124 <TIM_Base_SetConfig+0xf8>
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	4a0f      	ldr	r2, [pc, #60]	; (800e15c <TIM_Base_SetConfig+0x130>)
 800e120:	4293      	cmp	r3, r2
 800e122:	d103      	bne.n	800e12c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e124:	683b      	ldr	r3, [r7, #0]
 800e126:	691a      	ldr	r2, [r3, #16]
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	2201      	movs	r2, #1
 800e130:	615a      	str	r2, [r3, #20]
}
 800e132:	bf00      	nop
 800e134:	3714      	adds	r7, #20
 800e136:	46bd      	mov	sp, r7
 800e138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e13c:	4770      	bx	lr
 800e13e:	bf00      	nop
 800e140:	40010000 	.word	0x40010000
 800e144:	40000400 	.word	0x40000400
 800e148:	40000800 	.word	0x40000800
 800e14c:	40000c00 	.word	0x40000c00
 800e150:	40010400 	.word	0x40010400
 800e154:	40014000 	.word	0x40014000
 800e158:	40014400 	.word	0x40014400
 800e15c:	40014800 	.word	0x40014800

0800e160 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e160:	b480      	push	{r7}
 800e162:	b083      	sub	sp, #12
 800e164:	af00      	add	r7, sp, #0
 800e166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e168:	bf00      	nop
 800e16a:	370c      	adds	r7, #12
 800e16c:	46bd      	mov	sp, r7
 800e16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e172:	4770      	bx	lr

0800e174 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e174:	b480      	push	{r7}
 800e176:	b083      	sub	sp, #12
 800e178:	af00      	add	r7, sp, #0
 800e17a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e17c:	bf00      	nop
 800e17e:	370c      	adds	r7, #12
 800e180:	46bd      	mov	sp, r7
 800e182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e186:	4770      	bx	lr

0800e188 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e188:	b480      	push	{r7}
 800e18a:	b083      	sub	sp, #12
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e190:	bf00      	nop
 800e192:	370c      	adds	r7, #12
 800e194:	46bd      	mov	sp, r7
 800e196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e19a:	4770      	bx	lr

0800e19c <__NVIC_SetPriority>:
{
 800e19c:	b480      	push	{r7}
 800e19e:	b083      	sub	sp, #12
 800e1a0:	af00      	add	r7, sp, #0
 800e1a2:	4603      	mov	r3, r0
 800e1a4:	6039      	str	r1, [r7, #0]
 800e1a6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800e1a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	db0a      	blt.n	800e1c6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e1b0:	683b      	ldr	r3, [r7, #0]
 800e1b2:	b2da      	uxtb	r2, r3
 800e1b4:	490c      	ldr	r1, [pc, #48]	; (800e1e8 <__NVIC_SetPriority+0x4c>)
 800e1b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e1ba:	0112      	lsls	r2, r2, #4
 800e1bc:	b2d2      	uxtb	r2, r2
 800e1be:	440b      	add	r3, r1
 800e1c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800e1c4:	e00a      	b.n	800e1dc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e1c6:	683b      	ldr	r3, [r7, #0]
 800e1c8:	b2da      	uxtb	r2, r3
 800e1ca:	4908      	ldr	r1, [pc, #32]	; (800e1ec <__NVIC_SetPriority+0x50>)
 800e1cc:	88fb      	ldrh	r3, [r7, #6]
 800e1ce:	f003 030f 	and.w	r3, r3, #15
 800e1d2:	3b04      	subs	r3, #4
 800e1d4:	0112      	lsls	r2, r2, #4
 800e1d6:	b2d2      	uxtb	r2, r2
 800e1d8:	440b      	add	r3, r1
 800e1da:	761a      	strb	r2, [r3, #24]
}
 800e1dc:	bf00      	nop
 800e1de:	370c      	adds	r7, #12
 800e1e0:	46bd      	mov	sp, r7
 800e1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1e6:	4770      	bx	lr
 800e1e8:	e000e100 	.word	0xe000e100
 800e1ec:	e000ed00 	.word	0xe000ed00

0800e1f0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800e1f0:	b580      	push	{r7, lr}
 800e1f2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800e1f4:	4b05      	ldr	r3, [pc, #20]	; (800e20c <SysTick_Handler+0x1c>)
 800e1f6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800e1f8:	f002 fe5e 	bl	8010eb8 <xTaskGetSchedulerState>
 800e1fc:	4603      	mov	r3, r0
 800e1fe:	2b01      	cmp	r3, #1
 800e200:	d001      	beq.n	800e206 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800e202:	f000 ffd1 	bl	800f1a8 <xPortSysTickHandler>
  }
}
 800e206:	bf00      	nop
 800e208:	bd80      	pop	{r7, pc}
 800e20a:	bf00      	nop
 800e20c:	e000e010 	.word	0xe000e010

0800e210 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800e210:	b580      	push	{r7, lr}
 800e212:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800e214:	2100      	movs	r1, #0
 800e216:	f06f 0004 	mvn.w	r0, #4
 800e21a:	f7ff ffbf 	bl	800e19c <__NVIC_SetPriority>
#endif
}
 800e21e:	bf00      	nop
 800e220:	bd80      	pop	{r7, pc}
	...

0800e224 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800e224:	b480      	push	{r7}
 800e226:	b083      	sub	sp, #12
 800e228:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e22a:	f3ef 8305 	mrs	r3, IPSR
 800e22e:	603b      	str	r3, [r7, #0]
  return(result);
 800e230:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e232:	2b00      	cmp	r3, #0
 800e234:	d003      	beq.n	800e23e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800e236:	f06f 0305 	mvn.w	r3, #5
 800e23a:	607b      	str	r3, [r7, #4]
 800e23c:	e00c      	b.n	800e258 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800e23e:	4b0a      	ldr	r3, [pc, #40]	; (800e268 <osKernelInitialize+0x44>)
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	2b00      	cmp	r3, #0
 800e244:	d105      	bne.n	800e252 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800e246:	4b08      	ldr	r3, [pc, #32]	; (800e268 <osKernelInitialize+0x44>)
 800e248:	2201      	movs	r2, #1
 800e24a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800e24c:	2300      	movs	r3, #0
 800e24e:	607b      	str	r3, [r7, #4]
 800e250:	e002      	b.n	800e258 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800e252:	f04f 33ff 	mov.w	r3, #4294967295
 800e256:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800e258:	687b      	ldr	r3, [r7, #4]
}
 800e25a:	4618      	mov	r0, r3
 800e25c:	370c      	adds	r7, #12
 800e25e:	46bd      	mov	sp, r7
 800e260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e264:	4770      	bx	lr
 800e266:	bf00      	nop
 800e268:	24002048 	.word	0x24002048

0800e26c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800e26c:	b580      	push	{r7, lr}
 800e26e:	b082      	sub	sp, #8
 800e270:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e272:	f3ef 8305 	mrs	r3, IPSR
 800e276:	603b      	str	r3, [r7, #0]
  return(result);
 800e278:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d003      	beq.n	800e286 <osKernelStart+0x1a>
    stat = osErrorISR;
 800e27e:	f06f 0305 	mvn.w	r3, #5
 800e282:	607b      	str	r3, [r7, #4]
 800e284:	e010      	b.n	800e2a8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800e286:	4b0b      	ldr	r3, [pc, #44]	; (800e2b4 <osKernelStart+0x48>)
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	2b01      	cmp	r3, #1
 800e28c:	d109      	bne.n	800e2a2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800e28e:	f7ff ffbf 	bl	800e210 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800e292:	4b08      	ldr	r3, [pc, #32]	; (800e2b4 <osKernelStart+0x48>)
 800e294:	2202      	movs	r2, #2
 800e296:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800e298:	f002 f9c6 	bl	8010628 <vTaskStartScheduler>
      stat = osOK;
 800e29c:	2300      	movs	r3, #0
 800e29e:	607b      	str	r3, [r7, #4]
 800e2a0:	e002      	b.n	800e2a8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800e2a2:	f04f 33ff 	mov.w	r3, #4294967295
 800e2a6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800e2a8:	687b      	ldr	r3, [r7, #4]
}
 800e2aa:	4618      	mov	r0, r3
 800e2ac:	3708      	adds	r7, #8
 800e2ae:	46bd      	mov	sp, r7
 800e2b0:	bd80      	pop	{r7, pc}
 800e2b2:	bf00      	nop
 800e2b4:	24002048 	.word	0x24002048

0800e2b8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800e2b8:	b580      	push	{r7, lr}
 800e2ba:	b08e      	sub	sp, #56	; 0x38
 800e2bc:	af04      	add	r7, sp, #16
 800e2be:	60f8      	str	r0, [r7, #12]
 800e2c0:	60b9      	str	r1, [r7, #8]
 800e2c2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800e2c4:	2300      	movs	r3, #0
 800e2c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e2c8:	f3ef 8305 	mrs	r3, IPSR
 800e2cc:	617b      	str	r3, [r7, #20]
  return(result);
 800e2ce:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d17e      	bne.n	800e3d2 <osThreadNew+0x11a>
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d07b      	beq.n	800e3d2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800e2da:	2380      	movs	r3, #128	; 0x80
 800e2dc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800e2de:	2318      	movs	r3, #24
 800e2e0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800e2e2:	2300      	movs	r3, #0
 800e2e4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800e2e6:	f04f 33ff 	mov.w	r3, #4294967295
 800e2ea:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d045      	beq.n	800e37e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d002      	beq.n	800e300 <osThreadNew+0x48>
        name = attr->name;
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	699b      	ldr	r3, [r3, #24]
 800e304:	2b00      	cmp	r3, #0
 800e306:	d002      	beq.n	800e30e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	699b      	ldr	r3, [r3, #24]
 800e30c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800e30e:	69fb      	ldr	r3, [r7, #28]
 800e310:	2b00      	cmp	r3, #0
 800e312:	d008      	beq.n	800e326 <osThreadNew+0x6e>
 800e314:	69fb      	ldr	r3, [r7, #28]
 800e316:	2b38      	cmp	r3, #56	; 0x38
 800e318:	d805      	bhi.n	800e326 <osThreadNew+0x6e>
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	685b      	ldr	r3, [r3, #4]
 800e31e:	f003 0301 	and.w	r3, r3, #1
 800e322:	2b00      	cmp	r3, #0
 800e324:	d001      	beq.n	800e32a <osThreadNew+0x72>
        return (NULL);
 800e326:	2300      	movs	r3, #0
 800e328:	e054      	b.n	800e3d4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	695b      	ldr	r3, [r3, #20]
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d003      	beq.n	800e33a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	695b      	ldr	r3, [r3, #20]
 800e336:	089b      	lsrs	r3, r3, #2
 800e338:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	689b      	ldr	r3, [r3, #8]
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d00e      	beq.n	800e360 <osThreadNew+0xa8>
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	68db      	ldr	r3, [r3, #12]
 800e346:	2b5b      	cmp	r3, #91	; 0x5b
 800e348:	d90a      	bls.n	800e360 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d006      	beq.n	800e360 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	695b      	ldr	r3, [r3, #20]
 800e356:	2b00      	cmp	r3, #0
 800e358:	d002      	beq.n	800e360 <osThreadNew+0xa8>
        mem = 1;
 800e35a:	2301      	movs	r3, #1
 800e35c:	61bb      	str	r3, [r7, #24]
 800e35e:	e010      	b.n	800e382 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	689b      	ldr	r3, [r3, #8]
 800e364:	2b00      	cmp	r3, #0
 800e366:	d10c      	bne.n	800e382 <osThreadNew+0xca>
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	68db      	ldr	r3, [r3, #12]
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d108      	bne.n	800e382 <osThreadNew+0xca>
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	691b      	ldr	r3, [r3, #16]
 800e374:	2b00      	cmp	r3, #0
 800e376:	d104      	bne.n	800e382 <osThreadNew+0xca>
          mem = 0;
 800e378:	2300      	movs	r3, #0
 800e37a:	61bb      	str	r3, [r7, #24]
 800e37c:	e001      	b.n	800e382 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800e37e:	2300      	movs	r3, #0
 800e380:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800e382:	69bb      	ldr	r3, [r7, #24]
 800e384:	2b01      	cmp	r3, #1
 800e386:	d110      	bne.n	800e3aa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800e38c:	687a      	ldr	r2, [r7, #4]
 800e38e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e390:	9202      	str	r2, [sp, #8]
 800e392:	9301      	str	r3, [sp, #4]
 800e394:	69fb      	ldr	r3, [r7, #28]
 800e396:	9300      	str	r3, [sp, #0]
 800e398:	68bb      	ldr	r3, [r7, #8]
 800e39a:	6a3a      	ldr	r2, [r7, #32]
 800e39c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e39e:	68f8      	ldr	r0, [r7, #12]
 800e3a0:	f001 ffa0 	bl	80102e4 <xTaskCreateStatic>
 800e3a4:	4603      	mov	r3, r0
 800e3a6:	613b      	str	r3, [r7, #16]
 800e3a8:	e013      	b.n	800e3d2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800e3aa:	69bb      	ldr	r3, [r7, #24]
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d110      	bne.n	800e3d2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800e3b0:	6a3b      	ldr	r3, [r7, #32]
 800e3b2:	b29a      	uxth	r2, r3
 800e3b4:	f107 0310 	add.w	r3, r7, #16
 800e3b8:	9301      	str	r3, [sp, #4]
 800e3ba:	69fb      	ldr	r3, [r7, #28]
 800e3bc:	9300      	str	r3, [sp, #0]
 800e3be:	68bb      	ldr	r3, [r7, #8]
 800e3c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e3c2:	68f8      	ldr	r0, [r7, #12]
 800e3c4:	f001 ffeb 	bl	801039e <xTaskCreate>
 800e3c8:	4603      	mov	r3, r0
 800e3ca:	2b01      	cmp	r3, #1
 800e3cc:	d001      	beq.n	800e3d2 <osThreadNew+0x11a>
            hTask = NULL;
 800e3ce:	2300      	movs	r3, #0
 800e3d0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800e3d2:	693b      	ldr	r3, [r7, #16]
}
 800e3d4:	4618      	mov	r0, r3
 800e3d6:	3728      	adds	r7, #40	; 0x28
 800e3d8:	46bd      	mov	sp, r7
 800e3da:	bd80      	pop	{r7, pc}

0800e3dc <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800e3dc:	b580      	push	{r7, lr}
 800e3de:	b08a      	sub	sp, #40	; 0x28
 800e3e0:	af02      	add	r7, sp, #8
 800e3e2:	60f8      	str	r0, [r7, #12]
 800e3e4:	60b9      	str	r1, [r7, #8]
 800e3e6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800e3e8:	2300      	movs	r3, #0
 800e3ea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e3ec:	f3ef 8305 	mrs	r3, IPSR
 800e3f0:	613b      	str	r3, [r7, #16]
  return(result);
 800e3f2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d175      	bne.n	800e4e4 <osSemaphoreNew+0x108>
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d072      	beq.n	800e4e4 <osSemaphoreNew+0x108>
 800e3fe:	68ba      	ldr	r2, [r7, #8]
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	429a      	cmp	r2, r3
 800e404:	d86e      	bhi.n	800e4e4 <osSemaphoreNew+0x108>
    mem = -1;
 800e406:	f04f 33ff 	mov.w	r3, #4294967295
 800e40a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d015      	beq.n	800e43e <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	689b      	ldr	r3, [r3, #8]
 800e416:	2b00      	cmp	r3, #0
 800e418:	d006      	beq.n	800e428 <osSemaphoreNew+0x4c>
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	68db      	ldr	r3, [r3, #12]
 800e41e:	2b4f      	cmp	r3, #79	; 0x4f
 800e420:	d902      	bls.n	800e428 <osSemaphoreNew+0x4c>
        mem = 1;
 800e422:	2301      	movs	r3, #1
 800e424:	61bb      	str	r3, [r7, #24]
 800e426:	e00c      	b.n	800e442 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	689b      	ldr	r3, [r3, #8]
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d108      	bne.n	800e442 <osSemaphoreNew+0x66>
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	68db      	ldr	r3, [r3, #12]
 800e434:	2b00      	cmp	r3, #0
 800e436:	d104      	bne.n	800e442 <osSemaphoreNew+0x66>
          mem = 0;
 800e438:	2300      	movs	r3, #0
 800e43a:	61bb      	str	r3, [r7, #24]
 800e43c:	e001      	b.n	800e442 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800e43e:	2300      	movs	r3, #0
 800e440:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800e442:	69bb      	ldr	r3, [r7, #24]
 800e444:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e448:	d04c      	beq.n	800e4e4 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	2b01      	cmp	r3, #1
 800e44e:	d128      	bne.n	800e4a2 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800e450:	69bb      	ldr	r3, [r7, #24]
 800e452:	2b01      	cmp	r3, #1
 800e454:	d10a      	bne.n	800e46c <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	689b      	ldr	r3, [r3, #8]
 800e45a:	2203      	movs	r2, #3
 800e45c:	9200      	str	r2, [sp, #0]
 800e45e:	2200      	movs	r2, #0
 800e460:	2100      	movs	r1, #0
 800e462:	2001      	movs	r0, #1
 800e464:	f000 ff98 	bl	800f398 <xQueueGenericCreateStatic>
 800e468:	61f8      	str	r0, [r7, #28]
 800e46a:	e005      	b.n	800e478 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800e46c:	2203      	movs	r2, #3
 800e46e:	2100      	movs	r1, #0
 800e470:	2001      	movs	r0, #1
 800e472:	f001 f809 	bl	800f488 <xQueueGenericCreate>
 800e476:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800e478:	69fb      	ldr	r3, [r7, #28]
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d022      	beq.n	800e4c4 <osSemaphoreNew+0xe8>
 800e47e:	68bb      	ldr	r3, [r7, #8]
 800e480:	2b00      	cmp	r3, #0
 800e482:	d01f      	beq.n	800e4c4 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800e484:	2300      	movs	r3, #0
 800e486:	2200      	movs	r2, #0
 800e488:	2100      	movs	r1, #0
 800e48a:	69f8      	ldr	r0, [r7, #28]
 800e48c:	f001 f8c4 	bl	800f618 <xQueueGenericSend>
 800e490:	4603      	mov	r3, r0
 800e492:	2b01      	cmp	r3, #1
 800e494:	d016      	beq.n	800e4c4 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800e496:	69f8      	ldr	r0, [r7, #28]
 800e498:	f001 fd50 	bl	800ff3c <vQueueDelete>
            hSemaphore = NULL;
 800e49c:	2300      	movs	r3, #0
 800e49e:	61fb      	str	r3, [r7, #28]
 800e4a0:	e010      	b.n	800e4c4 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800e4a2:	69bb      	ldr	r3, [r7, #24]
 800e4a4:	2b01      	cmp	r3, #1
 800e4a6:	d108      	bne.n	800e4ba <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	689b      	ldr	r3, [r3, #8]
 800e4ac:	461a      	mov	r2, r3
 800e4ae:	68b9      	ldr	r1, [r7, #8]
 800e4b0:	68f8      	ldr	r0, [r7, #12]
 800e4b2:	f001 f846 	bl	800f542 <xQueueCreateCountingSemaphoreStatic>
 800e4b6:	61f8      	str	r0, [r7, #28]
 800e4b8:	e004      	b.n	800e4c4 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800e4ba:	68b9      	ldr	r1, [r7, #8]
 800e4bc:	68f8      	ldr	r0, [r7, #12]
 800e4be:	f001 f877 	bl	800f5b0 <xQueueCreateCountingSemaphore>
 800e4c2:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800e4c4:	69fb      	ldr	r3, [r7, #28]
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d00c      	beq.n	800e4e4 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d003      	beq.n	800e4d8 <osSemaphoreNew+0xfc>
          name = attr->name;
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	617b      	str	r3, [r7, #20]
 800e4d6:	e001      	b.n	800e4dc <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800e4d8:	2300      	movs	r3, #0
 800e4da:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800e4dc:	6979      	ldr	r1, [r7, #20]
 800e4de:	69f8      	ldr	r0, [r7, #28]
 800e4e0:	f001 fe78 	bl	80101d4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800e4e4:	69fb      	ldr	r3, [r7, #28]
}
 800e4e6:	4618      	mov	r0, r3
 800e4e8:	3720      	adds	r7, #32
 800e4ea:	46bd      	mov	sp, r7
 800e4ec:	bd80      	pop	{r7, pc}
	...

0800e4f0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800e4f0:	b580      	push	{r7, lr}
 800e4f2:	b086      	sub	sp, #24
 800e4f4:	af00      	add	r7, sp, #0
 800e4f6:	6078      	str	r0, [r7, #4]
 800e4f8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800e4fe:	2300      	movs	r3, #0
 800e500:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800e502:	693b      	ldr	r3, [r7, #16]
 800e504:	2b00      	cmp	r3, #0
 800e506:	d103      	bne.n	800e510 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800e508:	f06f 0303 	mvn.w	r3, #3
 800e50c:	617b      	str	r3, [r7, #20]
 800e50e:	e039      	b.n	800e584 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e510:	f3ef 8305 	mrs	r3, IPSR
 800e514:	60fb      	str	r3, [r7, #12]
  return(result);
 800e516:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d022      	beq.n	800e562 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800e51c:	683b      	ldr	r3, [r7, #0]
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d003      	beq.n	800e52a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800e522:	f06f 0303 	mvn.w	r3, #3
 800e526:	617b      	str	r3, [r7, #20]
 800e528:	e02c      	b.n	800e584 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800e52a:	2300      	movs	r3, #0
 800e52c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800e52e:	f107 0308 	add.w	r3, r7, #8
 800e532:	461a      	mov	r2, r3
 800e534:	2100      	movs	r1, #0
 800e536:	6938      	ldr	r0, [r7, #16]
 800e538:	f001 fc80 	bl	800fe3c <xQueueReceiveFromISR>
 800e53c:	4603      	mov	r3, r0
 800e53e:	2b01      	cmp	r3, #1
 800e540:	d003      	beq.n	800e54a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800e542:	f06f 0302 	mvn.w	r3, #2
 800e546:	617b      	str	r3, [r7, #20]
 800e548:	e01c      	b.n	800e584 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800e54a:	68bb      	ldr	r3, [r7, #8]
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d019      	beq.n	800e584 <osSemaphoreAcquire+0x94>
 800e550:	4b0f      	ldr	r3, [pc, #60]	; (800e590 <osSemaphoreAcquire+0xa0>)
 800e552:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e556:	601a      	str	r2, [r3, #0]
 800e558:	f3bf 8f4f 	dsb	sy
 800e55c:	f3bf 8f6f 	isb	sy
 800e560:	e010      	b.n	800e584 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800e562:	6839      	ldr	r1, [r7, #0]
 800e564:	6938      	ldr	r0, [r7, #16]
 800e566:	f001 fb5d 	bl	800fc24 <xQueueSemaphoreTake>
 800e56a:	4603      	mov	r3, r0
 800e56c:	2b01      	cmp	r3, #1
 800e56e:	d009      	beq.n	800e584 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800e570:	683b      	ldr	r3, [r7, #0]
 800e572:	2b00      	cmp	r3, #0
 800e574:	d003      	beq.n	800e57e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800e576:	f06f 0301 	mvn.w	r3, #1
 800e57a:	617b      	str	r3, [r7, #20]
 800e57c:	e002      	b.n	800e584 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800e57e:	f06f 0302 	mvn.w	r3, #2
 800e582:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800e584:	697b      	ldr	r3, [r7, #20]
}
 800e586:	4618      	mov	r0, r3
 800e588:	3718      	adds	r7, #24
 800e58a:	46bd      	mov	sp, r7
 800e58c:	bd80      	pop	{r7, pc}
 800e58e:	bf00      	nop
 800e590:	e000ed04 	.word	0xe000ed04

0800e594 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800e594:	b580      	push	{r7, lr}
 800e596:	b086      	sub	sp, #24
 800e598:	af00      	add	r7, sp, #0
 800e59a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800e5a0:	2300      	movs	r3, #0
 800e5a2:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800e5a4:	693b      	ldr	r3, [r7, #16]
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d103      	bne.n	800e5b2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800e5aa:	f06f 0303 	mvn.w	r3, #3
 800e5ae:	617b      	str	r3, [r7, #20]
 800e5b0:	e02c      	b.n	800e60c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e5b2:	f3ef 8305 	mrs	r3, IPSR
 800e5b6:	60fb      	str	r3, [r7, #12]
  return(result);
 800e5b8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d01a      	beq.n	800e5f4 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800e5be:	2300      	movs	r3, #0
 800e5c0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800e5c2:	f107 0308 	add.w	r3, r7, #8
 800e5c6:	4619      	mov	r1, r3
 800e5c8:	6938      	ldr	r0, [r7, #16]
 800e5ca:	f001 f9be 	bl	800f94a <xQueueGiveFromISR>
 800e5ce:	4603      	mov	r3, r0
 800e5d0:	2b01      	cmp	r3, #1
 800e5d2:	d003      	beq.n	800e5dc <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800e5d4:	f06f 0302 	mvn.w	r3, #2
 800e5d8:	617b      	str	r3, [r7, #20]
 800e5da:	e017      	b.n	800e60c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800e5dc:	68bb      	ldr	r3, [r7, #8]
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d014      	beq.n	800e60c <osSemaphoreRelease+0x78>
 800e5e2:	4b0d      	ldr	r3, [pc, #52]	; (800e618 <osSemaphoreRelease+0x84>)
 800e5e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e5e8:	601a      	str	r2, [r3, #0]
 800e5ea:	f3bf 8f4f 	dsb	sy
 800e5ee:	f3bf 8f6f 	isb	sy
 800e5f2:	e00b      	b.n	800e60c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800e5f4:	2300      	movs	r3, #0
 800e5f6:	2200      	movs	r2, #0
 800e5f8:	2100      	movs	r1, #0
 800e5fa:	6938      	ldr	r0, [r7, #16]
 800e5fc:	f001 f80c 	bl	800f618 <xQueueGenericSend>
 800e600:	4603      	mov	r3, r0
 800e602:	2b01      	cmp	r3, #1
 800e604:	d002      	beq.n	800e60c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800e606:	f06f 0302 	mvn.w	r3, #2
 800e60a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800e60c:	697b      	ldr	r3, [r7, #20]
}
 800e60e:	4618      	mov	r0, r3
 800e610:	3718      	adds	r7, #24
 800e612:	46bd      	mov	sp, r7
 800e614:	bd80      	pop	{r7, pc}
 800e616:	bf00      	nop
 800e618:	e000ed04 	.word	0xe000ed04

0800e61c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800e61c:	b580      	push	{r7, lr}
 800e61e:	b08a      	sub	sp, #40	; 0x28
 800e620:	af02      	add	r7, sp, #8
 800e622:	60f8      	str	r0, [r7, #12]
 800e624:	60b9      	str	r1, [r7, #8]
 800e626:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800e628:	2300      	movs	r3, #0
 800e62a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e62c:	f3ef 8305 	mrs	r3, IPSR
 800e630:	613b      	str	r3, [r7, #16]
  return(result);
 800e632:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800e634:	2b00      	cmp	r3, #0
 800e636:	d15f      	bne.n	800e6f8 <osMessageQueueNew+0xdc>
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d05c      	beq.n	800e6f8 <osMessageQueueNew+0xdc>
 800e63e:	68bb      	ldr	r3, [r7, #8]
 800e640:	2b00      	cmp	r3, #0
 800e642:	d059      	beq.n	800e6f8 <osMessageQueueNew+0xdc>
    mem = -1;
 800e644:	f04f 33ff 	mov.w	r3, #4294967295
 800e648:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d029      	beq.n	800e6a4 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	689b      	ldr	r3, [r3, #8]
 800e654:	2b00      	cmp	r3, #0
 800e656:	d012      	beq.n	800e67e <osMessageQueueNew+0x62>
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	68db      	ldr	r3, [r3, #12]
 800e65c:	2b4f      	cmp	r3, #79	; 0x4f
 800e65e:	d90e      	bls.n	800e67e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800e664:	2b00      	cmp	r3, #0
 800e666:	d00a      	beq.n	800e67e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	695a      	ldr	r2, [r3, #20]
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	68b9      	ldr	r1, [r7, #8]
 800e670:	fb01 f303 	mul.w	r3, r1, r3
 800e674:	429a      	cmp	r2, r3
 800e676:	d302      	bcc.n	800e67e <osMessageQueueNew+0x62>
        mem = 1;
 800e678:	2301      	movs	r3, #1
 800e67a:	61bb      	str	r3, [r7, #24]
 800e67c:	e014      	b.n	800e6a8 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	689b      	ldr	r3, [r3, #8]
 800e682:	2b00      	cmp	r3, #0
 800e684:	d110      	bne.n	800e6a8 <osMessageQueueNew+0x8c>
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	68db      	ldr	r3, [r3, #12]
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d10c      	bne.n	800e6a8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800e692:	2b00      	cmp	r3, #0
 800e694:	d108      	bne.n	800e6a8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	695b      	ldr	r3, [r3, #20]
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d104      	bne.n	800e6a8 <osMessageQueueNew+0x8c>
          mem = 0;
 800e69e:	2300      	movs	r3, #0
 800e6a0:	61bb      	str	r3, [r7, #24]
 800e6a2:	e001      	b.n	800e6a8 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800e6a4:	2300      	movs	r3, #0
 800e6a6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800e6a8:	69bb      	ldr	r3, [r7, #24]
 800e6aa:	2b01      	cmp	r3, #1
 800e6ac:	d10b      	bne.n	800e6c6 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	691a      	ldr	r2, [r3, #16]
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	689b      	ldr	r3, [r3, #8]
 800e6b6:	2100      	movs	r1, #0
 800e6b8:	9100      	str	r1, [sp, #0]
 800e6ba:	68b9      	ldr	r1, [r7, #8]
 800e6bc:	68f8      	ldr	r0, [r7, #12]
 800e6be:	f000 fe6b 	bl	800f398 <xQueueGenericCreateStatic>
 800e6c2:	61f8      	str	r0, [r7, #28]
 800e6c4:	e008      	b.n	800e6d8 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800e6c6:	69bb      	ldr	r3, [r7, #24]
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d105      	bne.n	800e6d8 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800e6cc:	2200      	movs	r2, #0
 800e6ce:	68b9      	ldr	r1, [r7, #8]
 800e6d0:	68f8      	ldr	r0, [r7, #12]
 800e6d2:	f000 fed9 	bl	800f488 <xQueueGenericCreate>
 800e6d6:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800e6d8:	69fb      	ldr	r3, [r7, #28]
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d00c      	beq.n	800e6f8 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d003      	beq.n	800e6ec <osMessageQueueNew+0xd0>
        name = attr->name;
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	617b      	str	r3, [r7, #20]
 800e6ea:	e001      	b.n	800e6f0 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800e6ec:	2300      	movs	r3, #0
 800e6ee:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800e6f0:	6979      	ldr	r1, [r7, #20]
 800e6f2:	69f8      	ldr	r0, [r7, #28]
 800e6f4:	f001 fd6e 	bl	80101d4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800e6f8:	69fb      	ldr	r3, [r7, #28]
}
 800e6fa:	4618      	mov	r0, r3
 800e6fc:	3720      	adds	r7, #32
 800e6fe:	46bd      	mov	sp, r7
 800e700:	bd80      	pop	{r7, pc}
	...

0800e704 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800e704:	b580      	push	{r7, lr}
 800e706:	b088      	sub	sp, #32
 800e708:	af00      	add	r7, sp, #0
 800e70a:	60f8      	str	r0, [r7, #12]
 800e70c:	60b9      	str	r1, [r7, #8]
 800e70e:	603b      	str	r3, [r7, #0]
 800e710:	4613      	mov	r3, r2
 800e712:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800e718:	2300      	movs	r3, #0
 800e71a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e71c:	f3ef 8305 	mrs	r3, IPSR
 800e720:	617b      	str	r3, [r7, #20]
  return(result);
 800e722:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800e724:	2b00      	cmp	r3, #0
 800e726:	d028      	beq.n	800e77a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e728:	69bb      	ldr	r3, [r7, #24]
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d005      	beq.n	800e73a <osMessageQueuePut+0x36>
 800e72e:	68bb      	ldr	r3, [r7, #8]
 800e730:	2b00      	cmp	r3, #0
 800e732:	d002      	beq.n	800e73a <osMessageQueuePut+0x36>
 800e734:	683b      	ldr	r3, [r7, #0]
 800e736:	2b00      	cmp	r3, #0
 800e738:	d003      	beq.n	800e742 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800e73a:	f06f 0303 	mvn.w	r3, #3
 800e73e:	61fb      	str	r3, [r7, #28]
 800e740:	e038      	b.n	800e7b4 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800e742:	2300      	movs	r3, #0
 800e744:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800e746:	f107 0210 	add.w	r2, r7, #16
 800e74a:	2300      	movs	r3, #0
 800e74c:	68b9      	ldr	r1, [r7, #8]
 800e74e:	69b8      	ldr	r0, [r7, #24]
 800e750:	f001 f860 	bl	800f814 <xQueueGenericSendFromISR>
 800e754:	4603      	mov	r3, r0
 800e756:	2b01      	cmp	r3, #1
 800e758:	d003      	beq.n	800e762 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800e75a:	f06f 0302 	mvn.w	r3, #2
 800e75e:	61fb      	str	r3, [r7, #28]
 800e760:	e028      	b.n	800e7b4 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800e762:	693b      	ldr	r3, [r7, #16]
 800e764:	2b00      	cmp	r3, #0
 800e766:	d025      	beq.n	800e7b4 <osMessageQueuePut+0xb0>
 800e768:	4b15      	ldr	r3, [pc, #84]	; (800e7c0 <osMessageQueuePut+0xbc>)
 800e76a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e76e:	601a      	str	r2, [r3, #0]
 800e770:	f3bf 8f4f 	dsb	sy
 800e774:	f3bf 8f6f 	isb	sy
 800e778:	e01c      	b.n	800e7b4 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800e77a:	69bb      	ldr	r3, [r7, #24]
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d002      	beq.n	800e786 <osMessageQueuePut+0x82>
 800e780:	68bb      	ldr	r3, [r7, #8]
 800e782:	2b00      	cmp	r3, #0
 800e784:	d103      	bne.n	800e78e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800e786:	f06f 0303 	mvn.w	r3, #3
 800e78a:	61fb      	str	r3, [r7, #28]
 800e78c:	e012      	b.n	800e7b4 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800e78e:	2300      	movs	r3, #0
 800e790:	683a      	ldr	r2, [r7, #0]
 800e792:	68b9      	ldr	r1, [r7, #8]
 800e794:	69b8      	ldr	r0, [r7, #24]
 800e796:	f000 ff3f 	bl	800f618 <xQueueGenericSend>
 800e79a:	4603      	mov	r3, r0
 800e79c:	2b01      	cmp	r3, #1
 800e79e:	d009      	beq.n	800e7b4 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800e7a0:	683b      	ldr	r3, [r7, #0]
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d003      	beq.n	800e7ae <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800e7a6:	f06f 0301 	mvn.w	r3, #1
 800e7aa:	61fb      	str	r3, [r7, #28]
 800e7ac:	e002      	b.n	800e7b4 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800e7ae:	f06f 0302 	mvn.w	r3, #2
 800e7b2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800e7b4:	69fb      	ldr	r3, [r7, #28]
}
 800e7b6:	4618      	mov	r0, r3
 800e7b8:	3720      	adds	r7, #32
 800e7ba:	46bd      	mov	sp, r7
 800e7bc:	bd80      	pop	{r7, pc}
 800e7be:	bf00      	nop
 800e7c0:	e000ed04 	.word	0xe000ed04

0800e7c4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800e7c4:	b580      	push	{r7, lr}
 800e7c6:	b088      	sub	sp, #32
 800e7c8:	af00      	add	r7, sp, #0
 800e7ca:	60f8      	str	r0, [r7, #12]
 800e7cc:	60b9      	str	r1, [r7, #8]
 800e7ce:	607a      	str	r2, [r7, #4]
 800e7d0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800e7d6:	2300      	movs	r3, #0
 800e7d8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e7da:	f3ef 8305 	mrs	r3, IPSR
 800e7de:	617b      	str	r3, [r7, #20]
  return(result);
 800e7e0:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d028      	beq.n	800e838 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e7e6:	69bb      	ldr	r3, [r7, #24]
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d005      	beq.n	800e7f8 <osMessageQueueGet+0x34>
 800e7ec:	68bb      	ldr	r3, [r7, #8]
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d002      	beq.n	800e7f8 <osMessageQueueGet+0x34>
 800e7f2:	683b      	ldr	r3, [r7, #0]
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d003      	beq.n	800e800 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800e7f8:	f06f 0303 	mvn.w	r3, #3
 800e7fc:	61fb      	str	r3, [r7, #28]
 800e7fe:	e037      	b.n	800e870 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800e800:	2300      	movs	r3, #0
 800e802:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800e804:	f107 0310 	add.w	r3, r7, #16
 800e808:	461a      	mov	r2, r3
 800e80a:	68b9      	ldr	r1, [r7, #8]
 800e80c:	69b8      	ldr	r0, [r7, #24]
 800e80e:	f001 fb15 	bl	800fe3c <xQueueReceiveFromISR>
 800e812:	4603      	mov	r3, r0
 800e814:	2b01      	cmp	r3, #1
 800e816:	d003      	beq.n	800e820 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800e818:	f06f 0302 	mvn.w	r3, #2
 800e81c:	61fb      	str	r3, [r7, #28]
 800e81e:	e027      	b.n	800e870 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800e820:	693b      	ldr	r3, [r7, #16]
 800e822:	2b00      	cmp	r3, #0
 800e824:	d024      	beq.n	800e870 <osMessageQueueGet+0xac>
 800e826:	4b15      	ldr	r3, [pc, #84]	; (800e87c <osMessageQueueGet+0xb8>)
 800e828:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e82c:	601a      	str	r2, [r3, #0]
 800e82e:	f3bf 8f4f 	dsb	sy
 800e832:	f3bf 8f6f 	isb	sy
 800e836:	e01b      	b.n	800e870 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800e838:	69bb      	ldr	r3, [r7, #24]
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d002      	beq.n	800e844 <osMessageQueueGet+0x80>
 800e83e:	68bb      	ldr	r3, [r7, #8]
 800e840:	2b00      	cmp	r3, #0
 800e842:	d103      	bne.n	800e84c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800e844:	f06f 0303 	mvn.w	r3, #3
 800e848:	61fb      	str	r3, [r7, #28]
 800e84a:	e011      	b.n	800e870 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800e84c:	683a      	ldr	r2, [r7, #0]
 800e84e:	68b9      	ldr	r1, [r7, #8]
 800e850:	69b8      	ldr	r0, [r7, #24]
 800e852:	f001 f907 	bl	800fa64 <xQueueReceive>
 800e856:	4603      	mov	r3, r0
 800e858:	2b01      	cmp	r3, #1
 800e85a:	d009      	beq.n	800e870 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800e85c:	683b      	ldr	r3, [r7, #0]
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d003      	beq.n	800e86a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800e862:	f06f 0301 	mvn.w	r3, #1
 800e866:	61fb      	str	r3, [r7, #28]
 800e868:	e002      	b.n	800e870 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800e86a:	f06f 0302 	mvn.w	r3, #2
 800e86e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800e870:	69fb      	ldr	r3, [r7, #28]
}
 800e872:	4618      	mov	r0, r3
 800e874:	3720      	adds	r7, #32
 800e876:	46bd      	mov	sp, r7
 800e878:	bd80      	pop	{r7, pc}
 800e87a:	bf00      	nop
 800e87c:	e000ed04 	.word	0xe000ed04

0800e880 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800e880:	b480      	push	{r7}
 800e882:	b085      	sub	sp, #20
 800e884:	af00      	add	r7, sp, #0
 800e886:	60f8      	str	r0, [r7, #12]
 800e888:	60b9      	str	r1, [r7, #8]
 800e88a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	4a07      	ldr	r2, [pc, #28]	; (800e8ac <vApplicationGetIdleTaskMemory+0x2c>)
 800e890:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800e892:	68bb      	ldr	r3, [r7, #8]
 800e894:	4a06      	ldr	r2, [pc, #24]	; (800e8b0 <vApplicationGetIdleTaskMemory+0x30>)
 800e896:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	2280      	movs	r2, #128	; 0x80
 800e89c:	601a      	str	r2, [r3, #0]
}
 800e89e:	bf00      	nop
 800e8a0:	3714      	adds	r7, #20
 800e8a2:	46bd      	mov	sp, r7
 800e8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a8:	4770      	bx	lr
 800e8aa:	bf00      	nop
 800e8ac:	2400204c 	.word	0x2400204c
 800e8b0:	240020a8 	.word	0x240020a8

0800e8b4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800e8b4:	b480      	push	{r7}
 800e8b6:	b085      	sub	sp, #20
 800e8b8:	af00      	add	r7, sp, #0
 800e8ba:	60f8      	str	r0, [r7, #12]
 800e8bc:	60b9      	str	r1, [r7, #8]
 800e8be:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	4a07      	ldr	r2, [pc, #28]	; (800e8e0 <vApplicationGetTimerTaskMemory+0x2c>)
 800e8c4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800e8c6:	68bb      	ldr	r3, [r7, #8]
 800e8c8:	4a06      	ldr	r2, [pc, #24]	; (800e8e4 <vApplicationGetTimerTaskMemory+0x30>)
 800e8ca:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e8d2:	601a      	str	r2, [r3, #0]
}
 800e8d4:	bf00      	nop
 800e8d6:	3714      	adds	r7, #20
 800e8d8:	46bd      	mov	sp, r7
 800e8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8de:	4770      	bx	lr
 800e8e0:	240022a8 	.word	0x240022a8
 800e8e4:	24002304 	.word	0x24002304

0800e8e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e8e8:	b580      	push	{r7, lr}
 800e8ea:	b08a      	sub	sp, #40	; 0x28
 800e8ec:	af00      	add	r7, sp, #0
 800e8ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e8f0:	2300      	movs	r3, #0
 800e8f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e8f4:	f001 fefe 	bl	80106f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e8f8:	4b5b      	ldr	r3, [pc, #364]	; (800ea68 <pvPortMalloc+0x180>)
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d101      	bne.n	800e904 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e900:	f000 f920 	bl	800eb44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e904:	4b59      	ldr	r3, [pc, #356]	; (800ea6c <pvPortMalloc+0x184>)
 800e906:	681a      	ldr	r2, [r3, #0]
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	4013      	ands	r3, r2
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	f040 8093 	bne.w	800ea38 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	2b00      	cmp	r3, #0
 800e916:	d01d      	beq.n	800e954 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e918:	2208      	movs	r2, #8
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	4413      	add	r3, r2
 800e91e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	f003 0307 	and.w	r3, r3, #7
 800e926:	2b00      	cmp	r3, #0
 800e928:	d014      	beq.n	800e954 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	f023 0307 	bic.w	r3, r3, #7
 800e930:	3308      	adds	r3, #8
 800e932:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	f003 0307 	and.w	r3, r3, #7
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d00a      	beq.n	800e954 <pvPortMalloc+0x6c>
	__asm volatile
 800e93e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e942:	f383 8811 	msr	BASEPRI, r3
 800e946:	f3bf 8f6f 	isb	sy
 800e94a:	f3bf 8f4f 	dsb	sy
 800e94e:	617b      	str	r3, [r7, #20]
}
 800e950:	bf00      	nop
 800e952:	e7fe      	b.n	800e952 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	2b00      	cmp	r3, #0
 800e958:	d06e      	beq.n	800ea38 <pvPortMalloc+0x150>
 800e95a:	4b45      	ldr	r3, [pc, #276]	; (800ea70 <pvPortMalloc+0x188>)
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	687a      	ldr	r2, [r7, #4]
 800e960:	429a      	cmp	r2, r3
 800e962:	d869      	bhi.n	800ea38 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e964:	4b43      	ldr	r3, [pc, #268]	; (800ea74 <pvPortMalloc+0x18c>)
 800e966:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e968:	4b42      	ldr	r3, [pc, #264]	; (800ea74 <pvPortMalloc+0x18c>)
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e96e:	e004      	b.n	800e97a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e972:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e97a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e97c:	685b      	ldr	r3, [r3, #4]
 800e97e:	687a      	ldr	r2, [r7, #4]
 800e980:	429a      	cmp	r2, r3
 800e982:	d903      	bls.n	800e98c <pvPortMalloc+0xa4>
 800e984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d1f1      	bne.n	800e970 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e98c:	4b36      	ldr	r3, [pc, #216]	; (800ea68 <pvPortMalloc+0x180>)
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e992:	429a      	cmp	r2, r3
 800e994:	d050      	beq.n	800ea38 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e996:	6a3b      	ldr	r3, [r7, #32]
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	2208      	movs	r2, #8
 800e99c:	4413      	add	r3, r2
 800e99e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e9a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9a2:	681a      	ldr	r2, [r3, #0]
 800e9a4:	6a3b      	ldr	r3, [r7, #32]
 800e9a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e9a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9aa:	685a      	ldr	r2, [r3, #4]
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	1ad2      	subs	r2, r2, r3
 800e9b0:	2308      	movs	r3, #8
 800e9b2:	005b      	lsls	r3, r3, #1
 800e9b4:	429a      	cmp	r2, r3
 800e9b6:	d91f      	bls.n	800e9f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e9b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	4413      	add	r3, r2
 800e9be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e9c0:	69bb      	ldr	r3, [r7, #24]
 800e9c2:	f003 0307 	and.w	r3, r3, #7
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d00a      	beq.n	800e9e0 <pvPortMalloc+0xf8>
	__asm volatile
 800e9ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9ce:	f383 8811 	msr	BASEPRI, r3
 800e9d2:	f3bf 8f6f 	isb	sy
 800e9d6:	f3bf 8f4f 	dsb	sy
 800e9da:	613b      	str	r3, [r7, #16]
}
 800e9dc:	bf00      	nop
 800e9de:	e7fe      	b.n	800e9de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e9e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9e2:	685a      	ldr	r2, [r3, #4]
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	1ad2      	subs	r2, r2, r3
 800e9e8:	69bb      	ldr	r3, [r7, #24]
 800e9ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e9ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9ee:	687a      	ldr	r2, [r7, #4]
 800e9f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e9f2:	69b8      	ldr	r0, [r7, #24]
 800e9f4:	f000 f908 	bl	800ec08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e9f8:	4b1d      	ldr	r3, [pc, #116]	; (800ea70 <pvPortMalloc+0x188>)
 800e9fa:	681a      	ldr	r2, [r3, #0]
 800e9fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9fe:	685b      	ldr	r3, [r3, #4]
 800ea00:	1ad3      	subs	r3, r2, r3
 800ea02:	4a1b      	ldr	r2, [pc, #108]	; (800ea70 <pvPortMalloc+0x188>)
 800ea04:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ea06:	4b1a      	ldr	r3, [pc, #104]	; (800ea70 <pvPortMalloc+0x188>)
 800ea08:	681a      	ldr	r2, [r3, #0]
 800ea0a:	4b1b      	ldr	r3, [pc, #108]	; (800ea78 <pvPortMalloc+0x190>)
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	429a      	cmp	r2, r3
 800ea10:	d203      	bcs.n	800ea1a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ea12:	4b17      	ldr	r3, [pc, #92]	; (800ea70 <pvPortMalloc+0x188>)
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	4a18      	ldr	r2, [pc, #96]	; (800ea78 <pvPortMalloc+0x190>)
 800ea18:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ea1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea1c:	685a      	ldr	r2, [r3, #4]
 800ea1e:	4b13      	ldr	r3, [pc, #76]	; (800ea6c <pvPortMalloc+0x184>)
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	431a      	orrs	r2, r3
 800ea24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea26:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ea28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea2a:	2200      	movs	r2, #0
 800ea2c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ea2e:	4b13      	ldr	r3, [pc, #76]	; (800ea7c <pvPortMalloc+0x194>)
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	3301      	adds	r3, #1
 800ea34:	4a11      	ldr	r2, [pc, #68]	; (800ea7c <pvPortMalloc+0x194>)
 800ea36:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ea38:	f001 fe6a 	bl	8010710 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ea3c:	69fb      	ldr	r3, [r7, #28]
 800ea3e:	f003 0307 	and.w	r3, r3, #7
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d00a      	beq.n	800ea5c <pvPortMalloc+0x174>
	__asm volatile
 800ea46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea4a:	f383 8811 	msr	BASEPRI, r3
 800ea4e:	f3bf 8f6f 	isb	sy
 800ea52:	f3bf 8f4f 	dsb	sy
 800ea56:	60fb      	str	r3, [r7, #12]
}
 800ea58:	bf00      	nop
 800ea5a:	e7fe      	b.n	800ea5a <pvPortMalloc+0x172>
	return pvReturn;
 800ea5c:	69fb      	ldr	r3, [r7, #28]
}
 800ea5e:	4618      	mov	r0, r3
 800ea60:	3728      	adds	r7, #40	; 0x28
 800ea62:	46bd      	mov	sp, r7
 800ea64:	bd80      	pop	{r7, pc}
 800ea66:	bf00      	nop
 800ea68:	2400630c 	.word	0x2400630c
 800ea6c:	24006320 	.word	0x24006320
 800ea70:	24006310 	.word	0x24006310
 800ea74:	24006304 	.word	0x24006304
 800ea78:	24006314 	.word	0x24006314
 800ea7c:	24006318 	.word	0x24006318

0800ea80 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ea80:	b580      	push	{r7, lr}
 800ea82:	b086      	sub	sp, #24
 800ea84:	af00      	add	r7, sp, #0
 800ea86:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d04d      	beq.n	800eb2e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ea92:	2308      	movs	r3, #8
 800ea94:	425b      	negs	r3, r3
 800ea96:	697a      	ldr	r2, [r7, #20]
 800ea98:	4413      	add	r3, r2
 800ea9a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ea9c:	697b      	ldr	r3, [r7, #20]
 800ea9e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800eaa0:	693b      	ldr	r3, [r7, #16]
 800eaa2:	685a      	ldr	r2, [r3, #4]
 800eaa4:	4b24      	ldr	r3, [pc, #144]	; (800eb38 <vPortFree+0xb8>)
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	4013      	ands	r3, r2
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d10a      	bne.n	800eac4 <vPortFree+0x44>
	__asm volatile
 800eaae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eab2:	f383 8811 	msr	BASEPRI, r3
 800eab6:	f3bf 8f6f 	isb	sy
 800eaba:	f3bf 8f4f 	dsb	sy
 800eabe:	60fb      	str	r3, [r7, #12]
}
 800eac0:	bf00      	nop
 800eac2:	e7fe      	b.n	800eac2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800eac4:	693b      	ldr	r3, [r7, #16]
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d00a      	beq.n	800eae2 <vPortFree+0x62>
	__asm volatile
 800eacc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ead0:	f383 8811 	msr	BASEPRI, r3
 800ead4:	f3bf 8f6f 	isb	sy
 800ead8:	f3bf 8f4f 	dsb	sy
 800eadc:	60bb      	str	r3, [r7, #8]
}
 800eade:	bf00      	nop
 800eae0:	e7fe      	b.n	800eae0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800eae2:	693b      	ldr	r3, [r7, #16]
 800eae4:	685a      	ldr	r2, [r3, #4]
 800eae6:	4b14      	ldr	r3, [pc, #80]	; (800eb38 <vPortFree+0xb8>)
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	4013      	ands	r3, r2
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d01e      	beq.n	800eb2e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800eaf0:	693b      	ldr	r3, [r7, #16]
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d11a      	bne.n	800eb2e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800eaf8:	693b      	ldr	r3, [r7, #16]
 800eafa:	685a      	ldr	r2, [r3, #4]
 800eafc:	4b0e      	ldr	r3, [pc, #56]	; (800eb38 <vPortFree+0xb8>)
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	43db      	mvns	r3, r3
 800eb02:	401a      	ands	r2, r3
 800eb04:	693b      	ldr	r3, [r7, #16]
 800eb06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800eb08:	f001 fdf4 	bl	80106f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800eb0c:	693b      	ldr	r3, [r7, #16]
 800eb0e:	685a      	ldr	r2, [r3, #4]
 800eb10:	4b0a      	ldr	r3, [pc, #40]	; (800eb3c <vPortFree+0xbc>)
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	4413      	add	r3, r2
 800eb16:	4a09      	ldr	r2, [pc, #36]	; (800eb3c <vPortFree+0xbc>)
 800eb18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800eb1a:	6938      	ldr	r0, [r7, #16]
 800eb1c:	f000 f874 	bl	800ec08 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800eb20:	4b07      	ldr	r3, [pc, #28]	; (800eb40 <vPortFree+0xc0>)
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	3301      	adds	r3, #1
 800eb26:	4a06      	ldr	r2, [pc, #24]	; (800eb40 <vPortFree+0xc0>)
 800eb28:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800eb2a:	f001 fdf1 	bl	8010710 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800eb2e:	bf00      	nop
 800eb30:	3718      	adds	r7, #24
 800eb32:	46bd      	mov	sp, r7
 800eb34:	bd80      	pop	{r7, pc}
 800eb36:	bf00      	nop
 800eb38:	24006320 	.word	0x24006320
 800eb3c:	24006310 	.word	0x24006310
 800eb40:	2400631c 	.word	0x2400631c

0800eb44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800eb44:	b480      	push	{r7}
 800eb46:	b085      	sub	sp, #20
 800eb48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800eb4a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800eb4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800eb50:	4b27      	ldr	r3, [pc, #156]	; (800ebf0 <prvHeapInit+0xac>)
 800eb52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	f003 0307 	and.w	r3, r3, #7
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d00c      	beq.n	800eb78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	3307      	adds	r3, #7
 800eb62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	f023 0307 	bic.w	r3, r3, #7
 800eb6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800eb6c:	68ba      	ldr	r2, [r7, #8]
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	1ad3      	subs	r3, r2, r3
 800eb72:	4a1f      	ldr	r2, [pc, #124]	; (800ebf0 <prvHeapInit+0xac>)
 800eb74:	4413      	add	r3, r2
 800eb76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800eb7c:	4a1d      	ldr	r2, [pc, #116]	; (800ebf4 <prvHeapInit+0xb0>)
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800eb82:	4b1c      	ldr	r3, [pc, #112]	; (800ebf4 <prvHeapInit+0xb0>)
 800eb84:	2200      	movs	r2, #0
 800eb86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	68ba      	ldr	r2, [r7, #8]
 800eb8c:	4413      	add	r3, r2
 800eb8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800eb90:	2208      	movs	r2, #8
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	1a9b      	subs	r3, r3, r2
 800eb96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	f023 0307 	bic.w	r3, r3, #7
 800eb9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	4a15      	ldr	r2, [pc, #84]	; (800ebf8 <prvHeapInit+0xb4>)
 800eba4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800eba6:	4b14      	ldr	r3, [pc, #80]	; (800ebf8 <prvHeapInit+0xb4>)
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	2200      	movs	r2, #0
 800ebac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ebae:	4b12      	ldr	r3, [pc, #72]	; (800ebf8 <prvHeapInit+0xb4>)
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	2200      	movs	r2, #0
 800ebb4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ebba:	683b      	ldr	r3, [r7, #0]
 800ebbc:	68fa      	ldr	r2, [r7, #12]
 800ebbe:	1ad2      	subs	r2, r2, r3
 800ebc0:	683b      	ldr	r3, [r7, #0]
 800ebc2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ebc4:	4b0c      	ldr	r3, [pc, #48]	; (800ebf8 <prvHeapInit+0xb4>)
 800ebc6:	681a      	ldr	r2, [r3, #0]
 800ebc8:	683b      	ldr	r3, [r7, #0]
 800ebca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ebcc:	683b      	ldr	r3, [r7, #0]
 800ebce:	685b      	ldr	r3, [r3, #4]
 800ebd0:	4a0a      	ldr	r2, [pc, #40]	; (800ebfc <prvHeapInit+0xb8>)
 800ebd2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ebd4:	683b      	ldr	r3, [r7, #0]
 800ebd6:	685b      	ldr	r3, [r3, #4]
 800ebd8:	4a09      	ldr	r2, [pc, #36]	; (800ec00 <prvHeapInit+0xbc>)
 800ebda:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ebdc:	4b09      	ldr	r3, [pc, #36]	; (800ec04 <prvHeapInit+0xc0>)
 800ebde:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ebe2:	601a      	str	r2, [r3, #0]
}
 800ebe4:	bf00      	nop
 800ebe6:	3714      	adds	r7, #20
 800ebe8:	46bd      	mov	sp, r7
 800ebea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebee:	4770      	bx	lr
 800ebf0:	24002704 	.word	0x24002704
 800ebf4:	24006304 	.word	0x24006304
 800ebf8:	2400630c 	.word	0x2400630c
 800ebfc:	24006314 	.word	0x24006314
 800ec00:	24006310 	.word	0x24006310
 800ec04:	24006320 	.word	0x24006320

0800ec08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ec08:	b480      	push	{r7}
 800ec0a:	b085      	sub	sp, #20
 800ec0c:	af00      	add	r7, sp, #0
 800ec0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ec10:	4b28      	ldr	r3, [pc, #160]	; (800ecb4 <prvInsertBlockIntoFreeList+0xac>)
 800ec12:	60fb      	str	r3, [r7, #12]
 800ec14:	e002      	b.n	800ec1c <prvInsertBlockIntoFreeList+0x14>
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	60fb      	str	r3, [r7, #12]
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	687a      	ldr	r2, [r7, #4]
 800ec22:	429a      	cmp	r2, r3
 800ec24:	d8f7      	bhi.n	800ec16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	685b      	ldr	r3, [r3, #4]
 800ec2e:	68ba      	ldr	r2, [r7, #8]
 800ec30:	4413      	add	r3, r2
 800ec32:	687a      	ldr	r2, [r7, #4]
 800ec34:	429a      	cmp	r2, r3
 800ec36:	d108      	bne.n	800ec4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	685a      	ldr	r2, [r3, #4]
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	685b      	ldr	r3, [r3, #4]
 800ec40:	441a      	add	r2, r3
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	685b      	ldr	r3, [r3, #4]
 800ec52:	68ba      	ldr	r2, [r7, #8]
 800ec54:	441a      	add	r2, r3
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	429a      	cmp	r2, r3
 800ec5c:	d118      	bne.n	800ec90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	681a      	ldr	r2, [r3, #0]
 800ec62:	4b15      	ldr	r3, [pc, #84]	; (800ecb8 <prvInsertBlockIntoFreeList+0xb0>)
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	429a      	cmp	r2, r3
 800ec68:	d00d      	beq.n	800ec86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	685a      	ldr	r2, [r3, #4]
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	685b      	ldr	r3, [r3, #4]
 800ec74:	441a      	add	r2, r3
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	681a      	ldr	r2, [r3, #0]
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	601a      	str	r2, [r3, #0]
 800ec84:	e008      	b.n	800ec98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ec86:	4b0c      	ldr	r3, [pc, #48]	; (800ecb8 <prvInsertBlockIntoFreeList+0xb0>)
 800ec88:	681a      	ldr	r2, [r3, #0]
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	601a      	str	r2, [r3, #0]
 800ec8e:	e003      	b.n	800ec98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	681a      	ldr	r2, [r3, #0]
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ec98:	68fa      	ldr	r2, [r7, #12]
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	429a      	cmp	r2, r3
 800ec9e:	d002      	beq.n	800eca6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	687a      	ldr	r2, [r7, #4]
 800eca4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800eca6:	bf00      	nop
 800eca8:	3714      	adds	r7, #20
 800ecaa:	46bd      	mov	sp, r7
 800ecac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb0:	4770      	bx	lr
 800ecb2:	bf00      	nop
 800ecb4:	24006304 	.word	0x24006304
 800ecb8:	2400630c 	.word	0x2400630c

0800ecbc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ecbc:	b480      	push	{r7}
 800ecbe:	b083      	sub	sp, #12
 800ecc0:	af00      	add	r7, sp, #0
 800ecc2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	f103 0208 	add.w	r2, r3, #8
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	f04f 32ff 	mov.w	r2, #4294967295
 800ecd4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	f103 0208 	add.w	r2, r3, #8
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	f103 0208 	add.w	r2, r3, #8
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	2200      	movs	r2, #0
 800ecee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ecf0:	bf00      	nop
 800ecf2:	370c      	adds	r7, #12
 800ecf4:	46bd      	mov	sp, r7
 800ecf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecfa:	4770      	bx	lr

0800ecfc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ecfc:	b480      	push	{r7}
 800ecfe:	b083      	sub	sp, #12
 800ed00:	af00      	add	r7, sp, #0
 800ed02:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	2200      	movs	r2, #0
 800ed08:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ed0a:	bf00      	nop
 800ed0c:	370c      	adds	r7, #12
 800ed0e:	46bd      	mov	sp, r7
 800ed10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed14:	4770      	bx	lr

0800ed16 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ed16:	b480      	push	{r7}
 800ed18:	b085      	sub	sp, #20
 800ed1a:	af00      	add	r7, sp, #0
 800ed1c:	6078      	str	r0, [r7, #4]
 800ed1e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	685b      	ldr	r3, [r3, #4]
 800ed24:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ed26:	683b      	ldr	r3, [r7, #0]
 800ed28:	68fa      	ldr	r2, [r7, #12]
 800ed2a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	689a      	ldr	r2, [r3, #8]
 800ed30:	683b      	ldr	r3, [r7, #0]
 800ed32:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	689b      	ldr	r3, [r3, #8]
 800ed38:	683a      	ldr	r2, [r7, #0]
 800ed3a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	683a      	ldr	r2, [r7, #0]
 800ed40:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ed42:	683b      	ldr	r3, [r7, #0]
 800ed44:	687a      	ldr	r2, [r7, #4]
 800ed46:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	1c5a      	adds	r2, r3, #1
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	601a      	str	r2, [r3, #0]
}
 800ed52:	bf00      	nop
 800ed54:	3714      	adds	r7, #20
 800ed56:	46bd      	mov	sp, r7
 800ed58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed5c:	4770      	bx	lr

0800ed5e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ed5e:	b480      	push	{r7}
 800ed60:	b085      	sub	sp, #20
 800ed62:	af00      	add	r7, sp, #0
 800ed64:	6078      	str	r0, [r7, #4]
 800ed66:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ed68:	683b      	ldr	r3, [r7, #0]
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ed6e:	68bb      	ldr	r3, [r7, #8]
 800ed70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed74:	d103      	bne.n	800ed7e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	691b      	ldr	r3, [r3, #16]
 800ed7a:	60fb      	str	r3, [r7, #12]
 800ed7c:	e00c      	b.n	800ed98 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	3308      	adds	r3, #8
 800ed82:	60fb      	str	r3, [r7, #12]
 800ed84:	e002      	b.n	800ed8c <vListInsert+0x2e>
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	685b      	ldr	r3, [r3, #4]
 800ed8a:	60fb      	str	r3, [r7, #12]
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	685b      	ldr	r3, [r3, #4]
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	68ba      	ldr	r2, [r7, #8]
 800ed94:	429a      	cmp	r2, r3
 800ed96:	d2f6      	bcs.n	800ed86 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	685a      	ldr	r2, [r3, #4]
 800ed9c:	683b      	ldr	r3, [r7, #0]
 800ed9e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800eda0:	683b      	ldr	r3, [r7, #0]
 800eda2:	685b      	ldr	r3, [r3, #4]
 800eda4:	683a      	ldr	r2, [r7, #0]
 800eda6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800eda8:	683b      	ldr	r3, [r7, #0]
 800edaa:	68fa      	ldr	r2, [r7, #12]
 800edac:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	683a      	ldr	r2, [r7, #0]
 800edb2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800edb4:	683b      	ldr	r3, [r7, #0]
 800edb6:	687a      	ldr	r2, [r7, #4]
 800edb8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	1c5a      	adds	r2, r3, #1
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	601a      	str	r2, [r3, #0]
}
 800edc4:	bf00      	nop
 800edc6:	3714      	adds	r7, #20
 800edc8:	46bd      	mov	sp, r7
 800edca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edce:	4770      	bx	lr

0800edd0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800edd0:	b480      	push	{r7}
 800edd2:	b085      	sub	sp, #20
 800edd4:	af00      	add	r7, sp, #0
 800edd6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	691b      	ldr	r3, [r3, #16]
 800eddc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	685b      	ldr	r3, [r3, #4]
 800ede2:	687a      	ldr	r2, [r7, #4]
 800ede4:	6892      	ldr	r2, [r2, #8]
 800ede6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	689b      	ldr	r3, [r3, #8]
 800edec:	687a      	ldr	r2, [r7, #4]
 800edee:	6852      	ldr	r2, [r2, #4]
 800edf0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	685b      	ldr	r3, [r3, #4]
 800edf6:	687a      	ldr	r2, [r7, #4]
 800edf8:	429a      	cmp	r2, r3
 800edfa:	d103      	bne.n	800ee04 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	689a      	ldr	r2, [r3, #8]
 800ee00:	68fb      	ldr	r3, [r7, #12]
 800ee02:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	2200      	movs	r2, #0
 800ee08:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	1e5a      	subs	r2, r3, #1
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	681b      	ldr	r3, [r3, #0]
}
 800ee18:	4618      	mov	r0, r3
 800ee1a:	3714      	adds	r7, #20
 800ee1c:	46bd      	mov	sp, r7
 800ee1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee22:	4770      	bx	lr

0800ee24 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ee24:	b480      	push	{r7}
 800ee26:	b085      	sub	sp, #20
 800ee28:	af00      	add	r7, sp, #0
 800ee2a:	60f8      	str	r0, [r7, #12]
 800ee2c:	60b9      	str	r1, [r7, #8]
 800ee2e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	3b04      	subs	r3, #4
 800ee34:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ee3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	3b04      	subs	r3, #4
 800ee42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ee44:	68bb      	ldr	r3, [r7, #8]
 800ee46:	f023 0201 	bic.w	r2, r3, #1
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	3b04      	subs	r3, #4
 800ee52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ee54:	4a0c      	ldr	r2, [pc, #48]	; (800ee88 <pxPortInitialiseStack+0x64>)
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	3b14      	subs	r3, #20
 800ee5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ee60:	687a      	ldr	r2, [r7, #4]
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	3b04      	subs	r3, #4
 800ee6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	f06f 0202 	mvn.w	r2, #2
 800ee72:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	3b20      	subs	r3, #32
 800ee78:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ee7a:	68fb      	ldr	r3, [r7, #12]
}
 800ee7c:	4618      	mov	r0, r3
 800ee7e:	3714      	adds	r7, #20
 800ee80:	46bd      	mov	sp, r7
 800ee82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee86:	4770      	bx	lr
 800ee88:	0800ee8d 	.word	0x0800ee8d

0800ee8c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ee8c:	b480      	push	{r7}
 800ee8e:	b085      	sub	sp, #20
 800ee90:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ee92:	2300      	movs	r3, #0
 800ee94:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ee96:	4b12      	ldr	r3, [pc, #72]	; (800eee0 <prvTaskExitError+0x54>)
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee9e:	d00a      	beq.n	800eeb6 <prvTaskExitError+0x2a>
	__asm volatile
 800eea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eea4:	f383 8811 	msr	BASEPRI, r3
 800eea8:	f3bf 8f6f 	isb	sy
 800eeac:	f3bf 8f4f 	dsb	sy
 800eeb0:	60fb      	str	r3, [r7, #12]
}
 800eeb2:	bf00      	nop
 800eeb4:	e7fe      	b.n	800eeb4 <prvTaskExitError+0x28>
	__asm volatile
 800eeb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eeba:	f383 8811 	msr	BASEPRI, r3
 800eebe:	f3bf 8f6f 	isb	sy
 800eec2:	f3bf 8f4f 	dsb	sy
 800eec6:	60bb      	str	r3, [r7, #8]
}
 800eec8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800eeca:	bf00      	nop
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d0fc      	beq.n	800eecc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800eed2:	bf00      	nop
 800eed4:	bf00      	nop
 800eed6:	3714      	adds	r7, #20
 800eed8:	46bd      	mov	sp, r7
 800eeda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eede:	4770      	bx	lr
 800eee0:	2400004c 	.word	0x2400004c
	...

0800eef0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800eef0:	4b07      	ldr	r3, [pc, #28]	; (800ef10 <pxCurrentTCBConst2>)
 800eef2:	6819      	ldr	r1, [r3, #0]
 800eef4:	6808      	ldr	r0, [r1, #0]
 800eef6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eefa:	f380 8809 	msr	PSP, r0
 800eefe:	f3bf 8f6f 	isb	sy
 800ef02:	f04f 0000 	mov.w	r0, #0
 800ef06:	f380 8811 	msr	BASEPRI, r0
 800ef0a:	4770      	bx	lr
 800ef0c:	f3af 8000 	nop.w

0800ef10 <pxCurrentTCBConst2>:
 800ef10:	2400636c 	.word	0x2400636c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ef14:	bf00      	nop
 800ef16:	bf00      	nop

0800ef18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ef18:	4808      	ldr	r0, [pc, #32]	; (800ef3c <prvPortStartFirstTask+0x24>)
 800ef1a:	6800      	ldr	r0, [r0, #0]
 800ef1c:	6800      	ldr	r0, [r0, #0]
 800ef1e:	f380 8808 	msr	MSP, r0
 800ef22:	f04f 0000 	mov.w	r0, #0
 800ef26:	f380 8814 	msr	CONTROL, r0
 800ef2a:	b662      	cpsie	i
 800ef2c:	b661      	cpsie	f
 800ef2e:	f3bf 8f4f 	dsb	sy
 800ef32:	f3bf 8f6f 	isb	sy
 800ef36:	df00      	svc	0
 800ef38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ef3a:	bf00      	nop
 800ef3c:	e000ed08 	.word	0xe000ed08

0800ef40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ef40:	b580      	push	{r7, lr}
 800ef42:	b086      	sub	sp, #24
 800ef44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ef46:	4b46      	ldr	r3, [pc, #280]	; (800f060 <xPortStartScheduler+0x120>)
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	4a46      	ldr	r2, [pc, #280]	; (800f064 <xPortStartScheduler+0x124>)
 800ef4c:	4293      	cmp	r3, r2
 800ef4e:	d10a      	bne.n	800ef66 <xPortStartScheduler+0x26>
	__asm volatile
 800ef50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef54:	f383 8811 	msr	BASEPRI, r3
 800ef58:	f3bf 8f6f 	isb	sy
 800ef5c:	f3bf 8f4f 	dsb	sy
 800ef60:	613b      	str	r3, [r7, #16]
}
 800ef62:	bf00      	nop
 800ef64:	e7fe      	b.n	800ef64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ef66:	4b3e      	ldr	r3, [pc, #248]	; (800f060 <xPortStartScheduler+0x120>)
 800ef68:	681b      	ldr	r3, [r3, #0]
 800ef6a:	4a3f      	ldr	r2, [pc, #252]	; (800f068 <xPortStartScheduler+0x128>)
 800ef6c:	4293      	cmp	r3, r2
 800ef6e:	d10a      	bne.n	800ef86 <xPortStartScheduler+0x46>
	__asm volatile
 800ef70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef74:	f383 8811 	msr	BASEPRI, r3
 800ef78:	f3bf 8f6f 	isb	sy
 800ef7c:	f3bf 8f4f 	dsb	sy
 800ef80:	60fb      	str	r3, [r7, #12]
}
 800ef82:	bf00      	nop
 800ef84:	e7fe      	b.n	800ef84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ef86:	4b39      	ldr	r3, [pc, #228]	; (800f06c <xPortStartScheduler+0x12c>)
 800ef88:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ef8a:	697b      	ldr	r3, [r7, #20]
 800ef8c:	781b      	ldrb	r3, [r3, #0]
 800ef8e:	b2db      	uxtb	r3, r3
 800ef90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ef92:	697b      	ldr	r3, [r7, #20]
 800ef94:	22ff      	movs	r2, #255	; 0xff
 800ef96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ef98:	697b      	ldr	r3, [r7, #20]
 800ef9a:	781b      	ldrb	r3, [r3, #0]
 800ef9c:	b2db      	uxtb	r3, r3
 800ef9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800efa0:	78fb      	ldrb	r3, [r7, #3]
 800efa2:	b2db      	uxtb	r3, r3
 800efa4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800efa8:	b2da      	uxtb	r2, r3
 800efaa:	4b31      	ldr	r3, [pc, #196]	; (800f070 <xPortStartScheduler+0x130>)
 800efac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800efae:	4b31      	ldr	r3, [pc, #196]	; (800f074 <xPortStartScheduler+0x134>)
 800efb0:	2207      	movs	r2, #7
 800efb2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800efb4:	e009      	b.n	800efca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800efb6:	4b2f      	ldr	r3, [pc, #188]	; (800f074 <xPortStartScheduler+0x134>)
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	3b01      	subs	r3, #1
 800efbc:	4a2d      	ldr	r2, [pc, #180]	; (800f074 <xPortStartScheduler+0x134>)
 800efbe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800efc0:	78fb      	ldrb	r3, [r7, #3]
 800efc2:	b2db      	uxtb	r3, r3
 800efc4:	005b      	lsls	r3, r3, #1
 800efc6:	b2db      	uxtb	r3, r3
 800efc8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800efca:	78fb      	ldrb	r3, [r7, #3]
 800efcc:	b2db      	uxtb	r3, r3
 800efce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800efd2:	2b80      	cmp	r3, #128	; 0x80
 800efd4:	d0ef      	beq.n	800efb6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800efd6:	4b27      	ldr	r3, [pc, #156]	; (800f074 <xPortStartScheduler+0x134>)
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	f1c3 0307 	rsb	r3, r3, #7
 800efde:	2b04      	cmp	r3, #4
 800efe0:	d00a      	beq.n	800eff8 <xPortStartScheduler+0xb8>
	__asm volatile
 800efe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efe6:	f383 8811 	msr	BASEPRI, r3
 800efea:	f3bf 8f6f 	isb	sy
 800efee:	f3bf 8f4f 	dsb	sy
 800eff2:	60bb      	str	r3, [r7, #8]
}
 800eff4:	bf00      	nop
 800eff6:	e7fe      	b.n	800eff6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800eff8:	4b1e      	ldr	r3, [pc, #120]	; (800f074 <xPortStartScheduler+0x134>)
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	021b      	lsls	r3, r3, #8
 800effe:	4a1d      	ldr	r2, [pc, #116]	; (800f074 <xPortStartScheduler+0x134>)
 800f000:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f002:	4b1c      	ldr	r3, [pc, #112]	; (800f074 <xPortStartScheduler+0x134>)
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f00a:	4a1a      	ldr	r2, [pc, #104]	; (800f074 <xPortStartScheduler+0x134>)
 800f00c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	b2da      	uxtb	r2, r3
 800f012:	697b      	ldr	r3, [r7, #20]
 800f014:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f016:	4b18      	ldr	r3, [pc, #96]	; (800f078 <xPortStartScheduler+0x138>)
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	4a17      	ldr	r2, [pc, #92]	; (800f078 <xPortStartScheduler+0x138>)
 800f01c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f020:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f022:	4b15      	ldr	r3, [pc, #84]	; (800f078 <xPortStartScheduler+0x138>)
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	4a14      	ldr	r2, [pc, #80]	; (800f078 <xPortStartScheduler+0x138>)
 800f028:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f02c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f02e:	f000 f8dd 	bl	800f1ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f032:	4b12      	ldr	r3, [pc, #72]	; (800f07c <xPortStartScheduler+0x13c>)
 800f034:	2200      	movs	r2, #0
 800f036:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f038:	f000 f8fc 	bl	800f234 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f03c:	4b10      	ldr	r3, [pc, #64]	; (800f080 <xPortStartScheduler+0x140>)
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	4a0f      	ldr	r2, [pc, #60]	; (800f080 <xPortStartScheduler+0x140>)
 800f042:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f046:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f048:	f7ff ff66 	bl	800ef18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f04c:	f001 fcc8 	bl	80109e0 <vTaskSwitchContext>
	prvTaskExitError();
 800f050:	f7ff ff1c 	bl	800ee8c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f054:	2300      	movs	r3, #0
}
 800f056:	4618      	mov	r0, r3
 800f058:	3718      	adds	r7, #24
 800f05a:	46bd      	mov	sp, r7
 800f05c:	bd80      	pop	{r7, pc}
 800f05e:	bf00      	nop
 800f060:	e000ed00 	.word	0xe000ed00
 800f064:	410fc271 	.word	0x410fc271
 800f068:	410fc270 	.word	0x410fc270
 800f06c:	e000e400 	.word	0xe000e400
 800f070:	24006324 	.word	0x24006324
 800f074:	24006328 	.word	0x24006328
 800f078:	e000ed20 	.word	0xe000ed20
 800f07c:	2400004c 	.word	0x2400004c
 800f080:	e000ef34 	.word	0xe000ef34

0800f084 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f084:	b480      	push	{r7}
 800f086:	b083      	sub	sp, #12
 800f088:	af00      	add	r7, sp, #0
	__asm volatile
 800f08a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f08e:	f383 8811 	msr	BASEPRI, r3
 800f092:	f3bf 8f6f 	isb	sy
 800f096:	f3bf 8f4f 	dsb	sy
 800f09a:	607b      	str	r3, [r7, #4]
}
 800f09c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f09e:	4b0f      	ldr	r3, [pc, #60]	; (800f0dc <vPortEnterCritical+0x58>)
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	3301      	adds	r3, #1
 800f0a4:	4a0d      	ldr	r2, [pc, #52]	; (800f0dc <vPortEnterCritical+0x58>)
 800f0a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f0a8:	4b0c      	ldr	r3, [pc, #48]	; (800f0dc <vPortEnterCritical+0x58>)
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	2b01      	cmp	r3, #1
 800f0ae:	d10f      	bne.n	800f0d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f0b0:	4b0b      	ldr	r3, [pc, #44]	; (800f0e0 <vPortEnterCritical+0x5c>)
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	b2db      	uxtb	r3, r3
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d00a      	beq.n	800f0d0 <vPortEnterCritical+0x4c>
	__asm volatile
 800f0ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0be:	f383 8811 	msr	BASEPRI, r3
 800f0c2:	f3bf 8f6f 	isb	sy
 800f0c6:	f3bf 8f4f 	dsb	sy
 800f0ca:	603b      	str	r3, [r7, #0]
}
 800f0cc:	bf00      	nop
 800f0ce:	e7fe      	b.n	800f0ce <vPortEnterCritical+0x4a>
	}
}
 800f0d0:	bf00      	nop
 800f0d2:	370c      	adds	r7, #12
 800f0d4:	46bd      	mov	sp, r7
 800f0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0da:	4770      	bx	lr
 800f0dc:	2400004c 	.word	0x2400004c
 800f0e0:	e000ed04 	.word	0xe000ed04

0800f0e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f0e4:	b480      	push	{r7}
 800f0e6:	b083      	sub	sp, #12
 800f0e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f0ea:	4b12      	ldr	r3, [pc, #72]	; (800f134 <vPortExitCritical+0x50>)
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d10a      	bne.n	800f108 <vPortExitCritical+0x24>
	__asm volatile
 800f0f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0f6:	f383 8811 	msr	BASEPRI, r3
 800f0fa:	f3bf 8f6f 	isb	sy
 800f0fe:	f3bf 8f4f 	dsb	sy
 800f102:	607b      	str	r3, [r7, #4]
}
 800f104:	bf00      	nop
 800f106:	e7fe      	b.n	800f106 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f108:	4b0a      	ldr	r3, [pc, #40]	; (800f134 <vPortExitCritical+0x50>)
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	3b01      	subs	r3, #1
 800f10e:	4a09      	ldr	r2, [pc, #36]	; (800f134 <vPortExitCritical+0x50>)
 800f110:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f112:	4b08      	ldr	r3, [pc, #32]	; (800f134 <vPortExitCritical+0x50>)
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	2b00      	cmp	r3, #0
 800f118:	d105      	bne.n	800f126 <vPortExitCritical+0x42>
 800f11a:	2300      	movs	r3, #0
 800f11c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f11e:	683b      	ldr	r3, [r7, #0]
 800f120:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800f124:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f126:	bf00      	nop
 800f128:	370c      	adds	r7, #12
 800f12a:	46bd      	mov	sp, r7
 800f12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f130:	4770      	bx	lr
 800f132:	bf00      	nop
 800f134:	2400004c 	.word	0x2400004c
	...

0800f140 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f140:	f3ef 8009 	mrs	r0, PSP
 800f144:	f3bf 8f6f 	isb	sy
 800f148:	4b15      	ldr	r3, [pc, #84]	; (800f1a0 <pxCurrentTCBConst>)
 800f14a:	681a      	ldr	r2, [r3, #0]
 800f14c:	f01e 0f10 	tst.w	lr, #16
 800f150:	bf08      	it	eq
 800f152:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f156:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f15a:	6010      	str	r0, [r2, #0]
 800f15c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f160:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f164:	f380 8811 	msr	BASEPRI, r0
 800f168:	f3bf 8f4f 	dsb	sy
 800f16c:	f3bf 8f6f 	isb	sy
 800f170:	f001 fc36 	bl	80109e0 <vTaskSwitchContext>
 800f174:	f04f 0000 	mov.w	r0, #0
 800f178:	f380 8811 	msr	BASEPRI, r0
 800f17c:	bc09      	pop	{r0, r3}
 800f17e:	6819      	ldr	r1, [r3, #0]
 800f180:	6808      	ldr	r0, [r1, #0]
 800f182:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f186:	f01e 0f10 	tst.w	lr, #16
 800f18a:	bf08      	it	eq
 800f18c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f190:	f380 8809 	msr	PSP, r0
 800f194:	f3bf 8f6f 	isb	sy
 800f198:	4770      	bx	lr
 800f19a:	bf00      	nop
 800f19c:	f3af 8000 	nop.w

0800f1a0 <pxCurrentTCBConst>:
 800f1a0:	2400636c 	.word	0x2400636c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f1a4:	bf00      	nop
 800f1a6:	bf00      	nop

0800f1a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f1a8:	b580      	push	{r7, lr}
 800f1aa:	b082      	sub	sp, #8
 800f1ac:	af00      	add	r7, sp, #0
	__asm volatile
 800f1ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1b2:	f383 8811 	msr	BASEPRI, r3
 800f1b6:	f3bf 8f6f 	isb	sy
 800f1ba:	f3bf 8f4f 	dsb	sy
 800f1be:	607b      	str	r3, [r7, #4]
}
 800f1c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f1c2:	f001 fb53 	bl	801086c <xTaskIncrementTick>
 800f1c6:	4603      	mov	r3, r0
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d003      	beq.n	800f1d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f1cc:	4b06      	ldr	r3, [pc, #24]	; (800f1e8 <xPortSysTickHandler+0x40>)
 800f1ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f1d2:	601a      	str	r2, [r3, #0]
 800f1d4:	2300      	movs	r3, #0
 800f1d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f1d8:	683b      	ldr	r3, [r7, #0]
 800f1da:	f383 8811 	msr	BASEPRI, r3
}
 800f1de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f1e0:	bf00      	nop
 800f1e2:	3708      	adds	r7, #8
 800f1e4:	46bd      	mov	sp, r7
 800f1e6:	bd80      	pop	{r7, pc}
 800f1e8:	e000ed04 	.word	0xe000ed04

0800f1ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f1ec:	b480      	push	{r7}
 800f1ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f1f0:	4b0b      	ldr	r3, [pc, #44]	; (800f220 <vPortSetupTimerInterrupt+0x34>)
 800f1f2:	2200      	movs	r2, #0
 800f1f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f1f6:	4b0b      	ldr	r3, [pc, #44]	; (800f224 <vPortSetupTimerInterrupt+0x38>)
 800f1f8:	2200      	movs	r2, #0
 800f1fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f1fc:	4b0a      	ldr	r3, [pc, #40]	; (800f228 <vPortSetupTimerInterrupt+0x3c>)
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	4a0a      	ldr	r2, [pc, #40]	; (800f22c <vPortSetupTimerInterrupt+0x40>)
 800f202:	fba2 2303 	umull	r2, r3, r2, r3
 800f206:	099b      	lsrs	r3, r3, #6
 800f208:	4a09      	ldr	r2, [pc, #36]	; (800f230 <vPortSetupTimerInterrupt+0x44>)
 800f20a:	3b01      	subs	r3, #1
 800f20c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f20e:	4b04      	ldr	r3, [pc, #16]	; (800f220 <vPortSetupTimerInterrupt+0x34>)
 800f210:	2207      	movs	r2, #7
 800f212:	601a      	str	r2, [r3, #0]
}
 800f214:	bf00      	nop
 800f216:	46bd      	mov	sp, r7
 800f218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f21c:	4770      	bx	lr
 800f21e:	bf00      	nop
 800f220:	e000e010 	.word	0xe000e010
 800f224:	e000e018 	.word	0xe000e018
 800f228:	2400003c 	.word	0x2400003c
 800f22c:	10624dd3 	.word	0x10624dd3
 800f230:	e000e014 	.word	0xe000e014

0800f234 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f234:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f244 <vPortEnableVFP+0x10>
 800f238:	6801      	ldr	r1, [r0, #0]
 800f23a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f23e:	6001      	str	r1, [r0, #0]
 800f240:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f242:	bf00      	nop
 800f244:	e000ed88 	.word	0xe000ed88

0800f248 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f248:	b480      	push	{r7}
 800f24a:	b085      	sub	sp, #20
 800f24c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f24e:	f3ef 8305 	mrs	r3, IPSR
 800f252:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	2b0f      	cmp	r3, #15
 800f258:	d914      	bls.n	800f284 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f25a:	4a17      	ldr	r2, [pc, #92]	; (800f2b8 <vPortValidateInterruptPriority+0x70>)
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	4413      	add	r3, r2
 800f260:	781b      	ldrb	r3, [r3, #0]
 800f262:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f264:	4b15      	ldr	r3, [pc, #84]	; (800f2bc <vPortValidateInterruptPriority+0x74>)
 800f266:	781b      	ldrb	r3, [r3, #0]
 800f268:	7afa      	ldrb	r2, [r7, #11]
 800f26a:	429a      	cmp	r2, r3
 800f26c:	d20a      	bcs.n	800f284 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800f26e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f272:	f383 8811 	msr	BASEPRI, r3
 800f276:	f3bf 8f6f 	isb	sy
 800f27a:	f3bf 8f4f 	dsb	sy
 800f27e:	607b      	str	r3, [r7, #4]
}
 800f280:	bf00      	nop
 800f282:	e7fe      	b.n	800f282 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f284:	4b0e      	ldr	r3, [pc, #56]	; (800f2c0 <vPortValidateInterruptPriority+0x78>)
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f28c:	4b0d      	ldr	r3, [pc, #52]	; (800f2c4 <vPortValidateInterruptPriority+0x7c>)
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	429a      	cmp	r2, r3
 800f292:	d90a      	bls.n	800f2aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800f294:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f298:	f383 8811 	msr	BASEPRI, r3
 800f29c:	f3bf 8f6f 	isb	sy
 800f2a0:	f3bf 8f4f 	dsb	sy
 800f2a4:	603b      	str	r3, [r7, #0]
}
 800f2a6:	bf00      	nop
 800f2a8:	e7fe      	b.n	800f2a8 <vPortValidateInterruptPriority+0x60>
	}
 800f2aa:	bf00      	nop
 800f2ac:	3714      	adds	r7, #20
 800f2ae:	46bd      	mov	sp, r7
 800f2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2b4:	4770      	bx	lr
 800f2b6:	bf00      	nop
 800f2b8:	e000e3f0 	.word	0xe000e3f0
 800f2bc:	24006324 	.word	0x24006324
 800f2c0:	e000ed0c 	.word	0xe000ed0c
 800f2c4:	24006328 	.word	0x24006328

0800f2c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800f2c8:	b580      	push	{r7, lr}
 800f2ca:	b084      	sub	sp, #16
 800f2cc:	af00      	add	r7, sp, #0
 800f2ce:	6078      	str	r0, [r7, #4]
 800f2d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d10a      	bne.n	800f2f2 <xQueueGenericReset+0x2a>
	__asm volatile
 800f2dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2e0:	f383 8811 	msr	BASEPRI, r3
 800f2e4:	f3bf 8f6f 	isb	sy
 800f2e8:	f3bf 8f4f 	dsb	sy
 800f2ec:	60bb      	str	r3, [r7, #8]
}
 800f2ee:	bf00      	nop
 800f2f0:	e7fe      	b.n	800f2f0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800f2f2:	f7ff fec7 	bl	800f084 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	681a      	ldr	r2, [r3, #0]
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f2fe:	68f9      	ldr	r1, [r7, #12]
 800f300:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f302:	fb01 f303 	mul.w	r3, r1, r3
 800f306:	441a      	add	r2, r3
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	2200      	movs	r2, #0
 800f310:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	681a      	ldr	r2, [r3, #0]
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	681a      	ldr	r2, [r3, #0]
 800f31e:	68fb      	ldr	r3, [r7, #12]
 800f320:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f322:	3b01      	subs	r3, #1
 800f324:	68f9      	ldr	r1, [r7, #12]
 800f326:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f328:	fb01 f303 	mul.w	r3, r1, r3
 800f32c:	441a      	add	r2, r3
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	22ff      	movs	r2, #255	; 0xff
 800f336:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800f33a:	68fb      	ldr	r3, [r7, #12]
 800f33c:	22ff      	movs	r2, #255	; 0xff
 800f33e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800f342:	683b      	ldr	r3, [r7, #0]
 800f344:	2b00      	cmp	r3, #0
 800f346:	d114      	bne.n	800f372 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	691b      	ldr	r3, [r3, #16]
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d01a      	beq.n	800f386 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	3310      	adds	r3, #16
 800f354:	4618      	mov	r0, r3
 800f356:	f001 fbf1 	bl	8010b3c <xTaskRemoveFromEventList>
 800f35a:	4603      	mov	r3, r0
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	d012      	beq.n	800f386 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f360:	4b0c      	ldr	r3, [pc, #48]	; (800f394 <xQueueGenericReset+0xcc>)
 800f362:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f366:	601a      	str	r2, [r3, #0]
 800f368:	f3bf 8f4f 	dsb	sy
 800f36c:	f3bf 8f6f 	isb	sy
 800f370:	e009      	b.n	800f386 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	3310      	adds	r3, #16
 800f376:	4618      	mov	r0, r3
 800f378:	f7ff fca0 	bl	800ecbc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	3324      	adds	r3, #36	; 0x24
 800f380:	4618      	mov	r0, r3
 800f382:	f7ff fc9b 	bl	800ecbc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800f386:	f7ff fead 	bl	800f0e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800f38a:	2301      	movs	r3, #1
}
 800f38c:	4618      	mov	r0, r3
 800f38e:	3710      	adds	r7, #16
 800f390:	46bd      	mov	sp, r7
 800f392:	bd80      	pop	{r7, pc}
 800f394:	e000ed04 	.word	0xe000ed04

0800f398 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800f398:	b580      	push	{r7, lr}
 800f39a:	b08e      	sub	sp, #56	; 0x38
 800f39c:	af02      	add	r7, sp, #8
 800f39e:	60f8      	str	r0, [r7, #12]
 800f3a0:	60b9      	str	r1, [r7, #8]
 800f3a2:	607a      	str	r2, [r7, #4]
 800f3a4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d10a      	bne.n	800f3c2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800f3ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3b0:	f383 8811 	msr	BASEPRI, r3
 800f3b4:	f3bf 8f6f 	isb	sy
 800f3b8:	f3bf 8f4f 	dsb	sy
 800f3bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f3be:	bf00      	nop
 800f3c0:	e7fe      	b.n	800f3c0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800f3c2:	683b      	ldr	r3, [r7, #0]
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d10a      	bne.n	800f3de <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800f3c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3cc:	f383 8811 	msr	BASEPRI, r3
 800f3d0:	f3bf 8f6f 	isb	sy
 800f3d4:	f3bf 8f4f 	dsb	sy
 800f3d8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f3da:	bf00      	nop
 800f3dc:	e7fe      	b.n	800f3dc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d002      	beq.n	800f3ea <xQueueGenericCreateStatic+0x52>
 800f3e4:	68bb      	ldr	r3, [r7, #8]
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d001      	beq.n	800f3ee <xQueueGenericCreateStatic+0x56>
 800f3ea:	2301      	movs	r3, #1
 800f3ec:	e000      	b.n	800f3f0 <xQueueGenericCreateStatic+0x58>
 800f3ee:	2300      	movs	r3, #0
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d10a      	bne.n	800f40a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800f3f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3f8:	f383 8811 	msr	BASEPRI, r3
 800f3fc:	f3bf 8f6f 	isb	sy
 800f400:	f3bf 8f4f 	dsb	sy
 800f404:	623b      	str	r3, [r7, #32]
}
 800f406:	bf00      	nop
 800f408:	e7fe      	b.n	800f408 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d102      	bne.n	800f416 <xQueueGenericCreateStatic+0x7e>
 800f410:	68bb      	ldr	r3, [r7, #8]
 800f412:	2b00      	cmp	r3, #0
 800f414:	d101      	bne.n	800f41a <xQueueGenericCreateStatic+0x82>
 800f416:	2301      	movs	r3, #1
 800f418:	e000      	b.n	800f41c <xQueueGenericCreateStatic+0x84>
 800f41a:	2300      	movs	r3, #0
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d10a      	bne.n	800f436 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800f420:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f424:	f383 8811 	msr	BASEPRI, r3
 800f428:	f3bf 8f6f 	isb	sy
 800f42c:	f3bf 8f4f 	dsb	sy
 800f430:	61fb      	str	r3, [r7, #28]
}
 800f432:	bf00      	nop
 800f434:	e7fe      	b.n	800f434 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800f436:	2350      	movs	r3, #80	; 0x50
 800f438:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800f43a:	697b      	ldr	r3, [r7, #20]
 800f43c:	2b50      	cmp	r3, #80	; 0x50
 800f43e:	d00a      	beq.n	800f456 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800f440:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f444:	f383 8811 	msr	BASEPRI, r3
 800f448:	f3bf 8f6f 	isb	sy
 800f44c:	f3bf 8f4f 	dsb	sy
 800f450:	61bb      	str	r3, [r7, #24]
}
 800f452:	bf00      	nop
 800f454:	e7fe      	b.n	800f454 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800f456:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f458:	683b      	ldr	r3, [r7, #0]
 800f45a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800f45c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d00d      	beq.n	800f47e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800f462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f464:	2201      	movs	r2, #1
 800f466:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f46a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800f46e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f470:	9300      	str	r3, [sp, #0]
 800f472:	4613      	mov	r3, r2
 800f474:	687a      	ldr	r2, [r7, #4]
 800f476:	68b9      	ldr	r1, [r7, #8]
 800f478:	68f8      	ldr	r0, [r7, #12]
 800f47a:	f000 f83f 	bl	800f4fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f47e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800f480:	4618      	mov	r0, r3
 800f482:	3730      	adds	r7, #48	; 0x30
 800f484:	46bd      	mov	sp, r7
 800f486:	bd80      	pop	{r7, pc}

0800f488 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800f488:	b580      	push	{r7, lr}
 800f48a:	b08a      	sub	sp, #40	; 0x28
 800f48c:	af02      	add	r7, sp, #8
 800f48e:	60f8      	str	r0, [r7, #12]
 800f490:	60b9      	str	r1, [r7, #8]
 800f492:	4613      	mov	r3, r2
 800f494:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f496:	68fb      	ldr	r3, [r7, #12]
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d10a      	bne.n	800f4b2 <xQueueGenericCreate+0x2a>
	__asm volatile
 800f49c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4a0:	f383 8811 	msr	BASEPRI, r3
 800f4a4:	f3bf 8f6f 	isb	sy
 800f4a8:	f3bf 8f4f 	dsb	sy
 800f4ac:	613b      	str	r3, [r7, #16]
}
 800f4ae:	bf00      	nop
 800f4b0:	e7fe      	b.n	800f4b0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	68ba      	ldr	r2, [r7, #8]
 800f4b6:	fb02 f303 	mul.w	r3, r2, r3
 800f4ba:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800f4bc:	69fb      	ldr	r3, [r7, #28]
 800f4be:	3350      	adds	r3, #80	; 0x50
 800f4c0:	4618      	mov	r0, r3
 800f4c2:	f7ff fa11 	bl	800e8e8 <pvPortMalloc>
 800f4c6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800f4c8:	69bb      	ldr	r3, [r7, #24]
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d011      	beq.n	800f4f2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800f4ce:	69bb      	ldr	r3, [r7, #24]
 800f4d0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f4d2:	697b      	ldr	r3, [r7, #20]
 800f4d4:	3350      	adds	r3, #80	; 0x50
 800f4d6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800f4d8:	69bb      	ldr	r3, [r7, #24]
 800f4da:	2200      	movs	r2, #0
 800f4dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f4e0:	79fa      	ldrb	r2, [r7, #7]
 800f4e2:	69bb      	ldr	r3, [r7, #24]
 800f4e4:	9300      	str	r3, [sp, #0]
 800f4e6:	4613      	mov	r3, r2
 800f4e8:	697a      	ldr	r2, [r7, #20]
 800f4ea:	68b9      	ldr	r1, [r7, #8]
 800f4ec:	68f8      	ldr	r0, [r7, #12]
 800f4ee:	f000 f805 	bl	800f4fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f4f2:	69bb      	ldr	r3, [r7, #24]
	}
 800f4f4:	4618      	mov	r0, r3
 800f4f6:	3720      	adds	r7, #32
 800f4f8:	46bd      	mov	sp, r7
 800f4fa:	bd80      	pop	{r7, pc}

0800f4fc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f4fc:	b580      	push	{r7, lr}
 800f4fe:	b084      	sub	sp, #16
 800f500:	af00      	add	r7, sp, #0
 800f502:	60f8      	str	r0, [r7, #12]
 800f504:	60b9      	str	r1, [r7, #8]
 800f506:	607a      	str	r2, [r7, #4]
 800f508:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f50a:	68bb      	ldr	r3, [r7, #8]
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d103      	bne.n	800f518 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f510:	69bb      	ldr	r3, [r7, #24]
 800f512:	69ba      	ldr	r2, [r7, #24]
 800f514:	601a      	str	r2, [r3, #0]
 800f516:	e002      	b.n	800f51e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f518:	69bb      	ldr	r3, [r7, #24]
 800f51a:	687a      	ldr	r2, [r7, #4]
 800f51c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f51e:	69bb      	ldr	r3, [r7, #24]
 800f520:	68fa      	ldr	r2, [r7, #12]
 800f522:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f524:	69bb      	ldr	r3, [r7, #24]
 800f526:	68ba      	ldr	r2, [r7, #8]
 800f528:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f52a:	2101      	movs	r1, #1
 800f52c:	69b8      	ldr	r0, [r7, #24]
 800f52e:	f7ff fecb 	bl	800f2c8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800f532:	69bb      	ldr	r3, [r7, #24]
 800f534:	78fa      	ldrb	r2, [r7, #3]
 800f536:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f53a:	bf00      	nop
 800f53c:	3710      	adds	r7, #16
 800f53e:	46bd      	mov	sp, r7
 800f540:	bd80      	pop	{r7, pc}

0800f542 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800f542:	b580      	push	{r7, lr}
 800f544:	b08a      	sub	sp, #40	; 0x28
 800f546:	af02      	add	r7, sp, #8
 800f548:	60f8      	str	r0, [r7, #12]
 800f54a:	60b9      	str	r1, [r7, #8]
 800f54c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	2b00      	cmp	r3, #0
 800f552:	d10a      	bne.n	800f56a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800f554:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f558:	f383 8811 	msr	BASEPRI, r3
 800f55c:	f3bf 8f6f 	isb	sy
 800f560:	f3bf 8f4f 	dsb	sy
 800f564:	61bb      	str	r3, [r7, #24]
}
 800f566:	bf00      	nop
 800f568:	e7fe      	b.n	800f568 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800f56a:	68ba      	ldr	r2, [r7, #8]
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	429a      	cmp	r2, r3
 800f570:	d90a      	bls.n	800f588 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800f572:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f576:	f383 8811 	msr	BASEPRI, r3
 800f57a:	f3bf 8f6f 	isb	sy
 800f57e:	f3bf 8f4f 	dsb	sy
 800f582:	617b      	str	r3, [r7, #20]
}
 800f584:	bf00      	nop
 800f586:	e7fe      	b.n	800f586 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800f588:	2302      	movs	r3, #2
 800f58a:	9300      	str	r3, [sp, #0]
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	2200      	movs	r2, #0
 800f590:	2100      	movs	r1, #0
 800f592:	68f8      	ldr	r0, [r7, #12]
 800f594:	f7ff ff00 	bl	800f398 <xQueueGenericCreateStatic>
 800f598:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800f59a:	69fb      	ldr	r3, [r7, #28]
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d002      	beq.n	800f5a6 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800f5a0:	69fb      	ldr	r3, [r7, #28]
 800f5a2:	68ba      	ldr	r2, [r7, #8]
 800f5a4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800f5a6:	69fb      	ldr	r3, [r7, #28]
	}
 800f5a8:	4618      	mov	r0, r3
 800f5aa:	3720      	adds	r7, #32
 800f5ac:	46bd      	mov	sp, r7
 800f5ae:	bd80      	pop	{r7, pc}

0800f5b0 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800f5b0:	b580      	push	{r7, lr}
 800f5b2:	b086      	sub	sp, #24
 800f5b4:	af00      	add	r7, sp, #0
 800f5b6:	6078      	str	r0, [r7, #4]
 800f5b8:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d10a      	bne.n	800f5d6 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800f5c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5c4:	f383 8811 	msr	BASEPRI, r3
 800f5c8:	f3bf 8f6f 	isb	sy
 800f5cc:	f3bf 8f4f 	dsb	sy
 800f5d0:	613b      	str	r3, [r7, #16]
}
 800f5d2:	bf00      	nop
 800f5d4:	e7fe      	b.n	800f5d4 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800f5d6:	683a      	ldr	r2, [r7, #0]
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	429a      	cmp	r2, r3
 800f5dc:	d90a      	bls.n	800f5f4 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800f5de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5e2:	f383 8811 	msr	BASEPRI, r3
 800f5e6:	f3bf 8f6f 	isb	sy
 800f5ea:	f3bf 8f4f 	dsb	sy
 800f5ee:	60fb      	str	r3, [r7, #12]
}
 800f5f0:	bf00      	nop
 800f5f2:	e7fe      	b.n	800f5f2 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800f5f4:	2202      	movs	r2, #2
 800f5f6:	2100      	movs	r1, #0
 800f5f8:	6878      	ldr	r0, [r7, #4]
 800f5fa:	f7ff ff45 	bl	800f488 <xQueueGenericCreate>
 800f5fe:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800f600:	697b      	ldr	r3, [r7, #20]
 800f602:	2b00      	cmp	r3, #0
 800f604:	d002      	beq.n	800f60c <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800f606:	697b      	ldr	r3, [r7, #20]
 800f608:	683a      	ldr	r2, [r7, #0]
 800f60a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800f60c:	697b      	ldr	r3, [r7, #20]
	}
 800f60e:	4618      	mov	r0, r3
 800f610:	3718      	adds	r7, #24
 800f612:	46bd      	mov	sp, r7
 800f614:	bd80      	pop	{r7, pc}
	...

0800f618 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800f618:	b580      	push	{r7, lr}
 800f61a:	b08e      	sub	sp, #56	; 0x38
 800f61c:	af00      	add	r7, sp, #0
 800f61e:	60f8      	str	r0, [r7, #12]
 800f620:	60b9      	str	r1, [r7, #8]
 800f622:	607a      	str	r2, [r7, #4]
 800f624:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f626:	2300      	movs	r3, #0
 800f628:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f62e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f630:	2b00      	cmp	r3, #0
 800f632:	d10a      	bne.n	800f64a <xQueueGenericSend+0x32>
	__asm volatile
 800f634:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f638:	f383 8811 	msr	BASEPRI, r3
 800f63c:	f3bf 8f6f 	isb	sy
 800f640:	f3bf 8f4f 	dsb	sy
 800f644:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f646:	bf00      	nop
 800f648:	e7fe      	b.n	800f648 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f64a:	68bb      	ldr	r3, [r7, #8]
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d103      	bne.n	800f658 <xQueueGenericSend+0x40>
 800f650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f654:	2b00      	cmp	r3, #0
 800f656:	d101      	bne.n	800f65c <xQueueGenericSend+0x44>
 800f658:	2301      	movs	r3, #1
 800f65a:	e000      	b.n	800f65e <xQueueGenericSend+0x46>
 800f65c:	2300      	movs	r3, #0
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d10a      	bne.n	800f678 <xQueueGenericSend+0x60>
	__asm volatile
 800f662:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f666:	f383 8811 	msr	BASEPRI, r3
 800f66a:	f3bf 8f6f 	isb	sy
 800f66e:	f3bf 8f4f 	dsb	sy
 800f672:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f674:	bf00      	nop
 800f676:	e7fe      	b.n	800f676 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f678:	683b      	ldr	r3, [r7, #0]
 800f67a:	2b02      	cmp	r3, #2
 800f67c:	d103      	bne.n	800f686 <xQueueGenericSend+0x6e>
 800f67e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f682:	2b01      	cmp	r3, #1
 800f684:	d101      	bne.n	800f68a <xQueueGenericSend+0x72>
 800f686:	2301      	movs	r3, #1
 800f688:	e000      	b.n	800f68c <xQueueGenericSend+0x74>
 800f68a:	2300      	movs	r3, #0
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d10a      	bne.n	800f6a6 <xQueueGenericSend+0x8e>
	__asm volatile
 800f690:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f694:	f383 8811 	msr	BASEPRI, r3
 800f698:	f3bf 8f6f 	isb	sy
 800f69c:	f3bf 8f4f 	dsb	sy
 800f6a0:	623b      	str	r3, [r7, #32]
}
 800f6a2:	bf00      	nop
 800f6a4:	e7fe      	b.n	800f6a4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f6a6:	f001 fc07 	bl	8010eb8 <xTaskGetSchedulerState>
 800f6aa:	4603      	mov	r3, r0
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d102      	bne.n	800f6b6 <xQueueGenericSend+0x9e>
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d101      	bne.n	800f6ba <xQueueGenericSend+0xa2>
 800f6b6:	2301      	movs	r3, #1
 800f6b8:	e000      	b.n	800f6bc <xQueueGenericSend+0xa4>
 800f6ba:	2300      	movs	r3, #0
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d10a      	bne.n	800f6d6 <xQueueGenericSend+0xbe>
	__asm volatile
 800f6c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6c4:	f383 8811 	msr	BASEPRI, r3
 800f6c8:	f3bf 8f6f 	isb	sy
 800f6cc:	f3bf 8f4f 	dsb	sy
 800f6d0:	61fb      	str	r3, [r7, #28]
}
 800f6d2:	bf00      	nop
 800f6d4:	e7fe      	b.n	800f6d4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f6d6:	f7ff fcd5 	bl	800f084 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f6da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f6de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f6e2:	429a      	cmp	r2, r3
 800f6e4:	d302      	bcc.n	800f6ec <xQueueGenericSend+0xd4>
 800f6e6:	683b      	ldr	r3, [r7, #0]
 800f6e8:	2b02      	cmp	r3, #2
 800f6ea:	d129      	bne.n	800f740 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f6ec:	683a      	ldr	r2, [r7, #0]
 800f6ee:	68b9      	ldr	r1, [r7, #8]
 800f6f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f6f2:	f000 fc5e 	bl	800ffb2 <prvCopyDataToQueue>
 800f6f6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f6f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d010      	beq.n	800f722 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f702:	3324      	adds	r3, #36	; 0x24
 800f704:	4618      	mov	r0, r3
 800f706:	f001 fa19 	bl	8010b3c <xTaskRemoveFromEventList>
 800f70a:	4603      	mov	r3, r0
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d013      	beq.n	800f738 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800f710:	4b3f      	ldr	r3, [pc, #252]	; (800f810 <xQueueGenericSend+0x1f8>)
 800f712:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f716:	601a      	str	r2, [r3, #0]
 800f718:	f3bf 8f4f 	dsb	sy
 800f71c:	f3bf 8f6f 	isb	sy
 800f720:	e00a      	b.n	800f738 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800f722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f724:	2b00      	cmp	r3, #0
 800f726:	d007      	beq.n	800f738 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800f728:	4b39      	ldr	r3, [pc, #228]	; (800f810 <xQueueGenericSend+0x1f8>)
 800f72a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f72e:	601a      	str	r2, [r3, #0]
 800f730:	f3bf 8f4f 	dsb	sy
 800f734:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800f738:	f7ff fcd4 	bl	800f0e4 <vPortExitCritical>
				return pdPASS;
 800f73c:	2301      	movs	r3, #1
 800f73e:	e063      	b.n	800f808 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	2b00      	cmp	r3, #0
 800f744:	d103      	bne.n	800f74e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f746:	f7ff fccd 	bl	800f0e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800f74a:	2300      	movs	r3, #0
 800f74c:	e05c      	b.n	800f808 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f74e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f750:	2b00      	cmp	r3, #0
 800f752:	d106      	bne.n	800f762 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f754:	f107 0314 	add.w	r3, r7, #20
 800f758:	4618      	mov	r0, r3
 800f75a:	f001 fa53 	bl	8010c04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f75e:	2301      	movs	r3, #1
 800f760:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f762:	f7ff fcbf 	bl	800f0e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f766:	f000 ffc5 	bl	80106f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f76a:	f7ff fc8b 	bl	800f084 <vPortEnterCritical>
 800f76e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f770:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f774:	b25b      	sxtb	r3, r3
 800f776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f77a:	d103      	bne.n	800f784 <xQueueGenericSend+0x16c>
 800f77c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f77e:	2200      	movs	r2, #0
 800f780:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f786:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f78a:	b25b      	sxtb	r3, r3
 800f78c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f790:	d103      	bne.n	800f79a <xQueueGenericSend+0x182>
 800f792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f794:	2200      	movs	r2, #0
 800f796:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f79a:	f7ff fca3 	bl	800f0e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f79e:	1d3a      	adds	r2, r7, #4
 800f7a0:	f107 0314 	add.w	r3, r7, #20
 800f7a4:	4611      	mov	r1, r2
 800f7a6:	4618      	mov	r0, r3
 800f7a8:	f001 fa42 	bl	8010c30 <xTaskCheckForTimeOut>
 800f7ac:	4603      	mov	r3, r0
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d124      	bne.n	800f7fc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f7b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f7b4:	f000 fcf5 	bl	80101a2 <prvIsQueueFull>
 800f7b8:	4603      	mov	r3, r0
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d018      	beq.n	800f7f0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f7be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7c0:	3310      	adds	r3, #16
 800f7c2:	687a      	ldr	r2, [r7, #4]
 800f7c4:	4611      	mov	r1, r2
 800f7c6:	4618      	mov	r0, r3
 800f7c8:	f001 f968 	bl	8010a9c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f7cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f7ce:	f000 fc80 	bl	80100d2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f7d2:	f000 ff9d 	bl	8010710 <xTaskResumeAll>
 800f7d6:	4603      	mov	r3, r0
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	f47f af7c 	bne.w	800f6d6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800f7de:	4b0c      	ldr	r3, [pc, #48]	; (800f810 <xQueueGenericSend+0x1f8>)
 800f7e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f7e4:	601a      	str	r2, [r3, #0]
 800f7e6:	f3bf 8f4f 	dsb	sy
 800f7ea:	f3bf 8f6f 	isb	sy
 800f7ee:	e772      	b.n	800f6d6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f7f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f7f2:	f000 fc6e 	bl	80100d2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f7f6:	f000 ff8b 	bl	8010710 <xTaskResumeAll>
 800f7fa:	e76c      	b.n	800f6d6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f7fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f7fe:	f000 fc68 	bl	80100d2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f802:	f000 ff85 	bl	8010710 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f806:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800f808:	4618      	mov	r0, r3
 800f80a:	3738      	adds	r7, #56	; 0x38
 800f80c:	46bd      	mov	sp, r7
 800f80e:	bd80      	pop	{r7, pc}
 800f810:	e000ed04 	.word	0xe000ed04

0800f814 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800f814:	b580      	push	{r7, lr}
 800f816:	b090      	sub	sp, #64	; 0x40
 800f818:	af00      	add	r7, sp, #0
 800f81a:	60f8      	str	r0, [r7, #12]
 800f81c:	60b9      	str	r1, [r7, #8]
 800f81e:	607a      	str	r2, [r7, #4]
 800f820:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800f826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d10a      	bne.n	800f842 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800f82c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f830:	f383 8811 	msr	BASEPRI, r3
 800f834:	f3bf 8f6f 	isb	sy
 800f838:	f3bf 8f4f 	dsb	sy
 800f83c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f83e:	bf00      	nop
 800f840:	e7fe      	b.n	800f840 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f842:	68bb      	ldr	r3, [r7, #8]
 800f844:	2b00      	cmp	r3, #0
 800f846:	d103      	bne.n	800f850 <xQueueGenericSendFromISR+0x3c>
 800f848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f84a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d101      	bne.n	800f854 <xQueueGenericSendFromISR+0x40>
 800f850:	2301      	movs	r3, #1
 800f852:	e000      	b.n	800f856 <xQueueGenericSendFromISR+0x42>
 800f854:	2300      	movs	r3, #0
 800f856:	2b00      	cmp	r3, #0
 800f858:	d10a      	bne.n	800f870 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800f85a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f85e:	f383 8811 	msr	BASEPRI, r3
 800f862:	f3bf 8f6f 	isb	sy
 800f866:	f3bf 8f4f 	dsb	sy
 800f86a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f86c:	bf00      	nop
 800f86e:	e7fe      	b.n	800f86e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f870:	683b      	ldr	r3, [r7, #0]
 800f872:	2b02      	cmp	r3, #2
 800f874:	d103      	bne.n	800f87e <xQueueGenericSendFromISR+0x6a>
 800f876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f87a:	2b01      	cmp	r3, #1
 800f87c:	d101      	bne.n	800f882 <xQueueGenericSendFromISR+0x6e>
 800f87e:	2301      	movs	r3, #1
 800f880:	e000      	b.n	800f884 <xQueueGenericSendFromISR+0x70>
 800f882:	2300      	movs	r3, #0
 800f884:	2b00      	cmp	r3, #0
 800f886:	d10a      	bne.n	800f89e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800f888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f88c:	f383 8811 	msr	BASEPRI, r3
 800f890:	f3bf 8f6f 	isb	sy
 800f894:	f3bf 8f4f 	dsb	sy
 800f898:	623b      	str	r3, [r7, #32]
}
 800f89a:	bf00      	nop
 800f89c:	e7fe      	b.n	800f89c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f89e:	f7ff fcd3 	bl	800f248 <vPortValidateInterruptPriority>
	__asm volatile
 800f8a2:	f3ef 8211 	mrs	r2, BASEPRI
 800f8a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8aa:	f383 8811 	msr	BASEPRI, r3
 800f8ae:	f3bf 8f6f 	isb	sy
 800f8b2:	f3bf 8f4f 	dsb	sy
 800f8b6:	61fa      	str	r2, [r7, #28]
 800f8b8:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800f8ba:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f8bc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f8be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f8c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f8c6:	429a      	cmp	r2, r3
 800f8c8:	d302      	bcc.n	800f8d0 <xQueueGenericSendFromISR+0xbc>
 800f8ca:	683b      	ldr	r3, [r7, #0]
 800f8cc:	2b02      	cmp	r3, #2
 800f8ce:	d12f      	bne.n	800f930 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f8d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f8d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f8da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f8de:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f8e0:	683a      	ldr	r2, [r7, #0]
 800f8e2:	68b9      	ldr	r1, [r7, #8]
 800f8e4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f8e6:	f000 fb64 	bl	800ffb2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f8ea:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800f8ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f8f2:	d112      	bne.n	800f91a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f8f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d016      	beq.n	800f92a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f8fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8fe:	3324      	adds	r3, #36	; 0x24
 800f900:	4618      	mov	r0, r3
 800f902:	f001 f91b 	bl	8010b3c <xTaskRemoveFromEventList>
 800f906:	4603      	mov	r3, r0
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d00e      	beq.n	800f92a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d00b      	beq.n	800f92a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	2201      	movs	r2, #1
 800f916:	601a      	str	r2, [r3, #0]
 800f918:	e007      	b.n	800f92a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f91a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f91e:	3301      	adds	r3, #1
 800f920:	b2db      	uxtb	r3, r3
 800f922:	b25a      	sxtb	r2, r3
 800f924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f926:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800f92a:	2301      	movs	r3, #1
 800f92c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800f92e:	e001      	b.n	800f934 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f930:	2300      	movs	r3, #0
 800f932:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f936:	617b      	str	r3, [r7, #20]
	__asm volatile
 800f938:	697b      	ldr	r3, [r7, #20]
 800f93a:	f383 8811 	msr	BASEPRI, r3
}
 800f93e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f940:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800f942:	4618      	mov	r0, r3
 800f944:	3740      	adds	r7, #64	; 0x40
 800f946:	46bd      	mov	sp, r7
 800f948:	bd80      	pop	{r7, pc}

0800f94a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800f94a:	b580      	push	{r7, lr}
 800f94c:	b08e      	sub	sp, #56	; 0x38
 800f94e:	af00      	add	r7, sp, #0
 800f950:	6078      	str	r0, [r7, #4]
 800f952:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800f958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d10a      	bne.n	800f974 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800f95e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f962:	f383 8811 	msr	BASEPRI, r3
 800f966:	f3bf 8f6f 	isb	sy
 800f96a:	f3bf 8f4f 	dsb	sy
 800f96e:	623b      	str	r3, [r7, #32]
}
 800f970:	bf00      	nop
 800f972:	e7fe      	b.n	800f972 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800f974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d00a      	beq.n	800f992 <xQueueGiveFromISR+0x48>
	__asm volatile
 800f97c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f980:	f383 8811 	msr	BASEPRI, r3
 800f984:	f3bf 8f6f 	isb	sy
 800f988:	f3bf 8f4f 	dsb	sy
 800f98c:	61fb      	str	r3, [r7, #28]
}
 800f98e:	bf00      	nop
 800f990:	e7fe      	b.n	800f990 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800f992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	2b00      	cmp	r3, #0
 800f998:	d103      	bne.n	800f9a2 <xQueueGiveFromISR+0x58>
 800f99a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f99c:	689b      	ldr	r3, [r3, #8]
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d101      	bne.n	800f9a6 <xQueueGiveFromISR+0x5c>
 800f9a2:	2301      	movs	r3, #1
 800f9a4:	e000      	b.n	800f9a8 <xQueueGiveFromISR+0x5e>
 800f9a6:	2300      	movs	r3, #0
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d10a      	bne.n	800f9c2 <xQueueGiveFromISR+0x78>
	__asm volatile
 800f9ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9b0:	f383 8811 	msr	BASEPRI, r3
 800f9b4:	f3bf 8f6f 	isb	sy
 800f9b8:	f3bf 8f4f 	dsb	sy
 800f9bc:	61bb      	str	r3, [r7, #24]
}
 800f9be:	bf00      	nop
 800f9c0:	e7fe      	b.n	800f9c0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f9c2:	f7ff fc41 	bl	800f248 <vPortValidateInterruptPriority>
	__asm volatile
 800f9c6:	f3ef 8211 	mrs	r2, BASEPRI
 800f9ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9ce:	f383 8811 	msr	BASEPRI, r3
 800f9d2:	f3bf 8f6f 	isb	sy
 800f9d6:	f3bf 8f4f 	dsb	sy
 800f9da:	617a      	str	r2, [r7, #20]
 800f9dc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800f9de:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f9e0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f9e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f9e6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800f9e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f9ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f9ee:	429a      	cmp	r2, r3
 800f9f0:	d22b      	bcs.n	800fa4a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f9f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f9f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f9fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9fe:	1c5a      	adds	r2, r3, #1
 800fa00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa02:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800fa04:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800fa08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa0c:	d112      	bne.n	800fa34 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fa0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d016      	beq.n	800fa44 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fa16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa18:	3324      	adds	r3, #36	; 0x24
 800fa1a:	4618      	mov	r0, r3
 800fa1c:	f001 f88e 	bl	8010b3c <xTaskRemoveFromEventList>
 800fa20:	4603      	mov	r3, r0
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d00e      	beq.n	800fa44 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800fa26:	683b      	ldr	r3, [r7, #0]
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d00b      	beq.n	800fa44 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800fa2c:	683b      	ldr	r3, [r7, #0]
 800fa2e:	2201      	movs	r2, #1
 800fa30:	601a      	str	r2, [r3, #0]
 800fa32:	e007      	b.n	800fa44 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800fa34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fa38:	3301      	adds	r3, #1
 800fa3a:	b2db      	uxtb	r3, r3
 800fa3c:	b25a      	sxtb	r2, r3
 800fa3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800fa44:	2301      	movs	r3, #1
 800fa46:	637b      	str	r3, [r7, #52]	; 0x34
 800fa48:	e001      	b.n	800fa4e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800fa4a:	2300      	movs	r3, #0
 800fa4c:	637b      	str	r3, [r7, #52]	; 0x34
 800fa4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa50:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	f383 8811 	msr	BASEPRI, r3
}
 800fa58:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fa5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800fa5c:	4618      	mov	r0, r3
 800fa5e:	3738      	adds	r7, #56	; 0x38
 800fa60:	46bd      	mov	sp, r7
 800fa62:	bd80      	pop	{r7, pc}

0800fa64 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800fa64:	b580      	push	{r7, lr}
 800fa66:	b08c      	sub	sp, #48	; 0x30
 800fa68:	af00      	add	r7, sp, #0
 800fa6a:	60f8      	str	r0, [r7, #12]
 800fa6c:	60b9      	str	r1, [r7, #8]
 800fa6e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800fa70:	2300      	movs	r3, #0
 800fa72:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800fa74:	68fb      	ldr	r3, [r7, #12]
 800fa76:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800fa78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d10a      	bne.n	800fa94 <xQueueReceive+0x30>
	__asm volatile
 800fa7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa82:	f383 8811 	msr	BASEPRI, r3
 800fa86:	f3bf 8f6f 	isb	sy
 800fa8a:	f3bf 8f4f 	dsb	sy
 800fa8e:	623b      	str	r3, [r7, #32]
}
 800fa90:	bf00      	nop
 800fa92:	e7fe      	b.n	800fa92 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fa94:	68bb      	ldr	r3, [r7, #8]
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d103      	bne.n	800faa2 <xQueueReceive+0x3e>
 800fa9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	d101      	bne.n	800faa6 <xQueueReceive+0x42>
 800faa2:	2301      	movs	r3, #1
 800faa4:	e000      	b.n	800faa8 <xQueueReceive+0x44>
 800faa6:	2300      	movs	r3, #0
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d10a      	bne.n	800fac2 <xQueueReceive+0x5e>
	__asm volatile
 800faac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fab0:	f383 8811 	msr	BASEPRI, r3
 800fab4:	f3bf 8f6f 	isb	sy
 800fab8:	f3bf 8f4f 	dsb	sy
 800fabc:	61fb      	str	r3, [r7, #28]
}
 800fabe:	bf00      	nop
 800fac0:	e7fe      	b.n	800fac0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fac2:	f001 f9f9 	bl	8010eb8 <xTaskGetSchedulerState>
 800fac6:	4603      	mov	r3, r0
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d102      	bne.n	800fad2 <xQueueReceive+0x6e>
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	2b00      	cmp	r3, #0
 800fad0:	d101      	bne.n	800fad6 <xQueueReceive+0x72>
 800fad2:	2301      	movs	r3, #1
 800fad4:	e000      	b.n	800fad8 <xQueueReceive+0x74>
 800fad6:	2300      	movs	r3, #0
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d10a      	bne.n	800faf2 <xQueueReceive+0x8e>
	__asm volatile
 800fadc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fae0:	f383 8811 	msr	BASEPRI, r3
 800fae4:	f3bf 8f6f 	isb	sy
 800fae8:	f3bf 8f4f 	dsb	sy
 800faec:	61bb      	str	r3, [r7, #24]
}
 800faee:	bf00      	nop
 800faf0:	e7fe      	b.n	800faf0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800faf2:	f7ff fac7 	bl	800f084 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800faf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800faf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fafa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fafc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d01f      	beq.n	800fb42 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800fb02:	68b9      	ldr	r1, [r7, #8]
 800fb04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fb06:	f000 fabe 	bl	8010086 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800fb0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb0c:	1e5a      	subs	r2, r3, #1
 800fb0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb10:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fb12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb14:	691b      	ldr	r3, [r3, #16]
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d00f      	beq.n	800fb3a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fb1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb1c:	3310      	adds	r3, #16
 800fb1e:	4618      	mov	r0, r3
 800fb20:	f001 f80c 	bl	8010b3c <xTaskRemoveFromEventList>
 800fb24:	4603      	mov	r3, r0
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d007      	beq.n	800fb3a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800fb2a:	4b3d      	ldr	r3, [pc, #244]	; (800fc20 <xQueueReceive+0x1bc>)
 800fb2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fb30:	601a      	str	r2, [r3, #0]
 800fb32:	f3bf 8f4f 	dsb	sy
 800fb36:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800fb3a:	f7ff fad3 	bl	800f0e4 <vPortExitCritical>
				return pdPASS;
 800fb3e:	2301      	movs	r3, #1
 800fb40:	e069      	b.n	800fc16 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d103      	bne.n	800fb50 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800fb48:	f7ff facc 	bl	800f0e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800fb4c:	2300      	movs	r3, #0
 800fb4e:	e062      	b.n	800fc16 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fb50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d106      	bne.n	800fb64 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fb56:	f107 0310 	add.w	r3, r7, #16
 800fb5a:	4618      	mov	r0, r3
 800fb5c:	f001 f852 	bl	8010c04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fb60:	2301      	movs	r3, #1
 800fb62:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fb64:	f7ff fabe 	bl	800f0e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fb68:	f000 fdc4 	bl	80106f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fb6c:	f7ff fa8a 	bl	800f084 <vPortEnterCritical>
 800fb70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fb76:	b25b      	sxtb	r3, r3
 800fb78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb7c:	d103      	bne.n	800fb86 <xQueueReceive+0x122>
 800fb7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb80:	2200      	movs	r2, #0
 800fb82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fb86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fb8c:	b25b      	sxtb	r3, r3
 800fb8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb92:	d103      	bne.n	800fb9c <xQueueReceive+0x138>
 800fb94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb96:	2200      	movs	r2, #0
 800fb98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fb9c:	f7ff faa2 	bl	800f0e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fba0:	1d3a      	adds	r2, r7, #4
 800fba2:	f107 0310 	add.w	r3, r7, #16
 800fba6:	4611      	mov	r1, r2
 800fba8:	4618      	mov	r0, r3
 800fbaa:	f001 f841 	bl	8010c30 <xTaskCheckForTimeOut>
 800fbae:	4603      	mov	r3, r0
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d123      	bne.n	800fbfc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fbb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fbb6:	f000 fade 	bl	8010176 <prvIsQueueEmpty>
 800fbba:	4603      	mov	r3, r0
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	d017      	beq.n	800fbf0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800fbc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbc2:	3324      	adds	r3, #36	; 0x24
 800fbc4:	687a      	ldr	r2, [r7, #4]
 800fbc6:	4611      	mov	r1, r2
 800fbc8:	4618      	mov	r0, r3
 800fbca:	f000 ff67 	bl	8010a9c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800fbce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fbd0:	f000 fa7f 	bl	80100d2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800fbd4:	f000 fd9c 	bl	8010710 <xTaskResumeAll>
 800fbd8:	4603      	mov	r3, r0
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d189      	bne.n	800faf2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800fbde:	4b10      	ldr	r3, [pc, #64]	; (800fc20 <xQueueReceive+0x1bc>)
 800fbe0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fbe4:	601a      	str	r2, [r3, #0]
 800fbe6:	f3bf 8f4f 	dsb	sy
 800fbea:	f3bf 8f6f 	isb	sy
 800fbee:	e780      	b.n	800faf2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800fbf0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fbf2:	f000 fa6e 	bl	80100d2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fbf6:	f000 fd8b 	bl	8010710 <xTaskResumeAll>
 800fbfa:	e77a      	b.n	800faf2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800fbfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fbfe:	f000 fa68 	bl	80100d2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fc02:	f000 fd85 	bl	8010710 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fc06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fc08:	f000 fab5 	bl	8010176 <prvIsQueueEmpty>
 800fc0c:	4603      	mov	r3, r0
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	f43f af6f 	beq.w	800faf2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800fc14:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800fc16:	4618      	mov	r0, r3
 800fc18:	3730      	adds	r7, #48	; 0x30
 800fc1a:	46bd      	mov	sp, r7
 800fc1c:	bd80      	pop	{r7, pc}
 800fc1e:	bf00      	nop
 800fc20:	e000ed04 	.word	0xe000ed04

0800fc24 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800fc24:	b580      	push	{r7, lr}
 800fc26:	b08e      	sub	sp, #56	; 0x38
 800fc28:	af00      	add	r7, sp, #0
 800fc2a:	6078      	str	r0, [r7, #4]
 800fc2c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800fc2e:	2300      	movs	r3, #0
 800fc30:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800fc36:	2300      	movs	r3, #0
 800fc38:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800fc3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d10a      	bne.n	800fc56 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800fc40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc44:	f383 8811 	msr	BASEPRI, r3
 800fc48:	f3bf 8f6f 	isb	sy
 800fc4c:	f3bf 8f4f 	dsb	sy
 800fc50:	623b      	str	r3, [r7, #32]
}
 800fc52:	bf00      	nop
 800fc54:	e7fe      	b.n	800fc54 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800fc56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d00a      	beq.n	800fc74 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800fc5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc62:	f383 8811 	msr	BASEPRI, r3
 800fc66:	f3bf 8f6f 	isb	sy
 800fc6a:	f3bf 8f4f 	dsb	sy
 800fc6e:	61fb      	str	r3, [r7, #28]
}
 800fc70:	bf00      	nop
 800fc72:	e7fe      	b.n	800fc72 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fc74:	f001 f920 	bl	8010eb8 <xTaskGetSchedulerState>
 800fc78:	4603      	mov	r3, r0
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d102      	bne.n	800fc84 <xQueueSemaphoreTake+0x60>
 800fc7e:	683b      	ldr	r3, [r7, #0]
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d101      	bne.n	800fc88 <xQueueSemaphoreTake+0x64>
 800fc84:	2301      	movs	r3, #1
 800fc86:	e000      	b.n	800fc8a <xQueueSemaphoreTake+0x66>
 800fc88:	2300      	movs	r3, #0
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	d10a      	bne.n	800fca4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800fc8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc92:	f383 8811 	msr	BASEPRI, r3
 800fc96:	f3bf 8f6f 	isb	sy
 800fc9a:	f3bf 8f4f 	dsb	sy
 800fc9e:	61bb      	str	r3, [r7, #24]
}
 800fca0:	bf00      	nop
 800fca2:	e7fe      	b.n	800fca2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800fca4:	f7ff f9ee 	bl	800f084 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800fca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fcac:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800fcae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	d024      	beq.n	800fcfe <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800fcb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcb6:	1e5a      	subs	r2, r3, #1
 800fcb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcba:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fcbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcbe:	681b      	ldr	r3, [r3, #0]
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d104      	bne.n	800fcce <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800fcc4:	f001 fa6e 	bl	80111a4 <pvTaskIncrementMutexHeldCount>
 800fcc8:	4602      	mov	r2, r0
 800fcca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fccc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fcce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcd0:	691b      	ldr	r3, [r3, #16]
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d00f      	beq.n	800fcf6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fcd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcd8:	3310      	adds	r3, #16
 800fcda:	4618      	mov	r0, r3
 800fcdc:	f000 ff2e 	bl	8010b3c <xTaskRemoveFromEventList>
 800fce0:	4603      	mov	r3, r0
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d007      	beq.n	800fcf6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800fce6:	4b54      	ldr	r3, [pc, #336]	; (800fe38 <xQueueSemaphoreTake+0x214>)
 800fce8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fcec:	601a      	str	r2, [r3, #0]
 800fcee:	f3bf 8f4f 	dsb	sy
 800fcf2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800fcf6:	f7ff f9f5 	bl	800f0e4 <vPortExitCritical>
				return pdPASS;
 800fcfa:	2301      	movs	r3, #1
 800fcfc:	e097      	b.n	800fe2e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fcfe:	683b      	ldr	r3, [r7, #0]
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d111      	bne.n	800fd28 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800fd04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d00a      	beq.n	800fd20 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800fd0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd0e:	f383 8811 	msr	BASEPRI, r3
 800fd12:	f3bf 8f6f 	isb	sy
 800fd16:	f3bf 8f4f 	dsb	sy
 800fd1a:	617b      	str	r3, [r7, #20]
}
 800fd1c:	bf00      	nop
 800fd1e:	e7fe      	b.n	800fd1e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800fd20:	f7ff f9e0 	bl	800f0e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800fd24:	2300      	movs	r3, #0
 800fd26:	e082      	b.n	800fe2e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fd28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	d106      	bne.n	800fd3c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fd2e:	f107 030c 	add.w	r3, r7, #12
 800fd32:	4618      	mov	r0, r3
 800fd34:	f000 ff66 	bl	8010c04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fd38:	2301      	movs	r3, #1
 800fd3a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fd3c:	f7ff f9d2 	bl	800f0e4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fd40:	f000 fcd8 	bl	80106f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fd44:	f7ff f99e 	bl	800f084 <vPortEnterCritical>
 800fd48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd4a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fd4e:	b25b      	sxtb	r3, r3
 800fd50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd54:	d103      	bne.n	800fd5e <xQueueSemaphoreTake+0x13a>
 800fd56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd58:	2200      	movs	r2, #0
 800fd5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fd5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fd64:	b25b      	sxtb	r3, r3
 800fd66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd6a:	d103      	bne.n	800fd74 <xQueueSemaphoreTake+0x150>
 800fd6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd6e:	2200      	movs	r2, #0
 800fd70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fd74:	f7ff f9b6 	bl	800f0e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fd78:	463a      	mov	r2, r7
 800fd7a:	f107 030c 	add.w	r3, r7, #12
 800fd7e:	4611      	mov	r1, r2
 800fd80:	4618      	mov	r0, r3
 800fd82:	f000 ff55 	bl	8010c30 <xTaskCheckForTimeOut>
 800fd86:	4603      	mov	r3, r0
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	d132      	bne.n	800fdf2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fd8c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fd8e:	f000 f9f2 	bl	8010176 <prvIsQueueEmpty>
 800fd92:	4603      	mov	r3, r0
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d026      	beq.n	800fde6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fd98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d109      	bne.n	800fdb4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800fda0:	f7ff f970 	bl	800f084 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800fda4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fda6:	689b      	ldr	r3, [r3, #8]
 800fda8:	4618      	mov	r0, r3
 800fdaa:	f001 f8a3 	bl	8010ef4 <xTaskPriorityInherit>
 800fdae:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800fdb0:	f7ff f998 	bl	800f0e4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800fdb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdb6:	3324      	adds	r3, #36	; 0x24
 800fdb8:	683a      	ldr	r2, [r7, #0]
 800fdba:	4611      	mov	r1, r2
 800fdbc:	4618      	mov	r0, r3
 800fdbe:	f000 fe6d 	bl	8010a9c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800fdc2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fdc4:	f000 f985 	bl	80100d2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800fdc8:	f000 fca2 	bl	8010710 <xTaskResumeAll>
 800fdcc:	4603      	mov	r3, r0
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	f47f af68 	bne.w	800fca4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800fdd4:	4b18      	ldr	r3, [pc, #96]	; (800fe38 <xQueueSemaphoreTake+0x214>)
 800fdd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fdda:	601a      	str	r2, [r3, #0]
 800fddc:	f3bf 8f4f 	dsb	sy
 800fde0:	f3bf 8f6f 	isb	sy
 800fde4:	e75e      	b.n	800fca4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800fde6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fde8:	f000 f973 	bl	80100d2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fdec:	f000 fc90 	bl	8010710 <xTaskResumeAll>
 800fdf0:	e758      	b.n	800fca4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800fdf2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fdf4:	f000 f96d 	bl	80100d2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fdf8:	f000 fc8a 	bl	8010710 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fdfc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fdfe:	f000 f9ba 	bl	8010176 <prvIsQueueEmpty>
 800fe02:	4603      	mov	r3, r0
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	f43f af4d 	beq.w	800fca4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800fe0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d00d      	beq.n	800fe2c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800fe10:	f7ff f938 	bl	800f084 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800fe14:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fe16:	f000 f8b4 	bl	800ff82 <prvGetDisinheritPriorityAfterTimeout>
 800fe1a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800fe1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe1e:	689b      	ldr	r3, [r3, #8]
 800fe20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fe22:	4618      	mov	r0, r3
 800fe24:	f001 f93c 	bl	80110a0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800fe28:	f7ff f95c 	bl	800f0e4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800fe2c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800fe2e:	4618      	mov	r0, r3
 800fe30:	3738      	adds	r7, #56	; 0x38
 800fe32:	46bd      	mov	sp, r7
 800fe34:	bd80      	pop	{r7, pc}
 800fe36:	bf00      	nop
 800fe38:	e000ed04 	.word	0xe000ed04

0800fe3c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800fe3c:	b580      	push	{r7, lr}
 800fe3e:	b08e      	sub	sp, #56	; 0x38
 800fe40:	af00      	add	r7, sp, #0
 800fe42:	60f8      	str	r0, [r7, #12]
 800fe44:	60b9      	str	r1, [r7, #8]
 800fe46:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800fe48:	68fb      	ldr	r3, [r7, #12]
 800fe4a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800fe4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d10a      	bne.n	800fe68 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800fe52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe56:	f383 8811 	msr	BASEPRI, r3
 800fe5a:	f3bf 8f6f 	isb	sy
 800fe5e:	f3bf 8f4f 	dsb	sy
 800fe62:	623b      	str	r3, [r7, #32]
}
 800fe64:	bf00      	nop
 800fe66:	e7fe      	b.n	800fe66 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fe68:	68bb      	ldr	r3, [r7, #8]
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	d103      	bne.n	800fe76 <xQueueReceiveFromISR+0x3a>
 800fe6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	d101      	bne.n	800fe7a <xQueueReceiveFromISR+0x3e>
 800fe76:	2301      	movs	r3, #1
 800fe78:	e000      	b.n	800fe7c <xQueueReceiveFromISR+0x40>
 800fe7a:	2300      	movs	r3, #0
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d10a      	bne.n	800fe96 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800fe80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe84:	f383 8811 	msr	BASEPRI, r3
 800fe88:	f3bf 8f6f 	isb	sy
 800fe8c:	f3bf 8f4f 	dsb	sy
 800fe90:	61fb      	str	r3, [r7, #28]
}
 800fe92:	bf00      	nop
 800fe94:	e7fe      	b.n	800fe94 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fe96:	f7ff f9d7 	bl	800f248 <vPortValidateInterruptPriority>
	__asm volatile
 800fe9a:	f3ef 8211 	mrs	r2, BASEPRI
 800fe9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fea2:	f383 8811 	msr	BASEPRI, r3
 800fea6:	f3bf 8f6f 	isb	sy
 800feaa:	f3bf 8f4f 	dsb	sy
 800feae:	61ba      	str	r2, [r7, #24]
 800feb0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800feb2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800feb4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800feb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800feb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800feba:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800febc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d02f      	beq.n	800ff22 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800fec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fec4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fec8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800fecc:	68b9      	ldr	r1, [r7, #8]
 800fece:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fed0:	f000 f8d9 	bl	8010086 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800fed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fed6:	1e5a      	subs	r2, r3, #1
 800fed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800feda:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800fedc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800fee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fee4:	d112      	bne.n	800ff0c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fee8:	691b      	ldr	r3, [r3, #16]
 800feea:	2b00      	cmp	r3, #0
 800feec:	d016      	beq.n	800ff1c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800feee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fef0:	3310      	adds	r3, #16
 800fef2:	4618      	mov	r0, r3
 800fef4:	f000 fe22 	bl	8010b3c <xTaskRemoveFromEventList>
 800fef8:	4603      	mov	r3, r0
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d00e      	beq.n	800ff1c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d00b      	beq.n	800ff1c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	2201      	movs	r2, #1
 800ff08:	601a      	str	r2, [r3, #0]
 800ff0a:	e007      	b.n	800ff1c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ff0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ff10:	3301      	adds	r3, #1
 800ff12:	b2db      	uxtb	r3, r3
 800ff14:	b25a      	sxtb	r2, r3
 800ff16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800ff1c:	2301      	movs	r3, #1
 800ff1e:	637b      	str	r3, [r7, #52]	; 0x34
 800ff20:	e001      	b.n	800ff26 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800ff22:	2300      	movs	r3, #0
 800ff24:	637b      	str	r3, [r7, #52]	; 0x34
 800ff26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff28:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ff2a:	693b      	ldr	r3, [r7, #16]
 800ff2c:	f383 8811 	msr	BASEPRI, r3
}
 800ff30:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ff32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ff34:	4618      	mov	r0, r3
 800ff36:	3738      	adds	r7, #56	; 0x38
 800ff38:	46bd      	mov	sp, r7
 800ff3a:	bd80      	pop	{r7, pc}

0800ff3c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800ff3c:	b580      	push	{r7, lr}
 800ff3e:	b084      	sub	sp, #16
 800ff40:	af00      	add	r7, sp, #0
 800ff42:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ff48:	68fb      	ldr	r3, [r7, #12]
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d10a      	bne.n	800ff64 <vQueueDelete+0x28>
	__asm volatile
 800ff4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff52:	f383 8811 	msr	BASEPRI, r3
 800ff56:	f3bf 8f6f 	isb	sy
 800ff5a:	f3bf 8f4f 	dsb	sy
 800ff5e:	60bb      	str	r3, [r7, #8]
}
 800ff60:	bf00      	nop
 800ff62:	e7fe      	b.n	800ff62 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800ff64:	68f8      	ldr	r0, [r7, #12]
 800ff66:	f000 f95f 	bl	8010228 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800ff6a:	68fb      	ldr	r3, [r7, #12]
 800ff6c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d102      	bne.n	800ff7a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800ff74:	68f8      	ldr	r0, [r7, #12]
 800ff76:	f7fe fd83 	bl	800ea80 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800ff7a:	bf00      	nop
 800ff7c:	3710      	adds	r7, #16
 800ff7e:	46bd      	mov	sp, r7
 800ff80:	bd80      	pop	{r7, pc}

0800ff82 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ff82:	b480      	push	{r7}
 800ff84:	b085      	sub	sp, #20
 800ff86:	af00      	add	r7, sp, #0
 800ff88:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d006      	beq.n	800ffa0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800ff9c:	60fb      	str	r3, [r7, #12]
 800ff9e:	e001      	b.n	800ffa4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ffa0:	2300      	movs	r3, #0
 800ffa2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ffa4:	68fb      	ldr	r3, [r7, #12]
	}
 800ffa6:	4618      	mov	r0, r3
 800ffa8:	3714      	adds	r7, #20
 800ffaa:	46bd      	mov	sp, r7
 800ffac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffb0:	4770      	bx	lr

0800ffb2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ffb2:	b580      	push	{r7, lr}
 800ffb4:	b086      	sub	sp, #24
 800ffb6:	af00      	add	r7, sp, #0
 800ffb8:	60f8      	str	r0, [r7, #12]
 800ffba:	60b9      	str	r1, [r7, #8]
 800ffbc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ffbe:	2300      	movs	r3, #0
 800ffc0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ffc2:	68fb      	ldr	r3, [r7, #12]
 800ffc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ffc6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ffc8:	68fb      	ldr	r3, [r7, #12]
 800ffca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ffcc:	2b00      	cmp	r3, #0
 800ffce:	d10d      	bne.n	800ffec <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ffd0:	68fb      	ldr	r3, [r7, #12]
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d14d      	bne.n	8010074 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ffd8:	68fb      	ldr	r3, [r7, #12]
 800ffda:	689b      	ldr	r3, [r3, #8]
 800ffdc:	4618      	mov	r0, r3
 800ffde:	f000 fff1 	bl	8010fc4 <xTaskPriorityDisinherit>
 800ffe2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ffe4:	68fb      	ldr	r3, [r7, #12]
 800ffe6:	2200      	movs	r2, #0
 800ffe8:	609a      	str	r2, [r3, #8]
 800ffea:	e043      	b.n	8010074 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d119      	bne.n	8010026 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800fff2:	68fb      	ldr	r3, [r7, #12]
 800fff4:	6858      	ldr	r0, [r3, #4]
 800fff6:	68fb      	ldr	r3, [r7, #12]
 800fff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fffa:	461a      	mov	r2, r3
 800fffc:	68b9      	ldr	r1, [r7, #8]
 800fffe:	f011 f9b8 	bl	8021372 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010002:	68fb      	ldr	r3, [r7, #12]
 8010004:	685a      	ldr	r2, [r3, #4]
 8010006:	68fb      	ldr	r3, [r7, #12]
 8010008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801000a:	441a      	add	r2, r3
 801000c:	68fb      	ldr	r3, [r7, #12]
 801000e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010010:	68fb      	ldr	r3, [r7, #12]
 8010012:	685a      	ldr	r2, [r3, #4]
 8010014:	68fb      	ldr	r3, [r7, #12]
 8010016:	689b      	ldr	r3, [r3, #8]
 8010018:	429a      	cmp	r2, r3
 801001a:	d32b      	bcc.n	8010074 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801001c:	68fb      	ldr	r3, [r7, #12]
 801001e:	681a      	ldr	r2, [r3, #0]
 8010020:	68fb      	ldr	r3, [r7, #12]
 8010022:	605a      	str	r2, [r3, #4]
 8010024:	e026      	b.n	8010074 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8010026:	68fb      	ldr	r3, [r7, #12]
 8010028:	68d8      	ldr	r0, [r3, #12]
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801002e:	461a      	mov	r2, r3
 8010030:	68b9      	ldr	r1, [r7, #8]
 8010032:	f011 f99e 	bl	8021372 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010036:	68fb      	ldr	r3, [r7, #12]
 8010038:	68da      	ldr	r2, [r3, #12]
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801003e:	425b      	negs	r3, r3
 8010040:	441a      	add	r2, r3
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	68da      	ldr	r2, [r3, #12]
 801004a:	68fb      	ldr	r3, [r7, #12]
 801004c:	681b      	ldr	r3, [r3, #0]
 801004e:	429a      	cmp	r2, r3
 8010050:	d207      	bcs.n	8010062 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8010052:	68fb      	ldr	r3, [r7, #12]
 8010054:	689a      	ldr	r2, [r3, #8]
 8010056:	68fb      	ldr	r3, [r7, #12]
 8010058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801005a:	425b      	negs	r3, r3
 801005c:	441a      	add	r2, r3
 801005e:	68fb      	ldr	r3, [r7, #12]
 8010060:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	2b02      	cmp	r3, #2
 8010066:	d105      	bne.n	8010074 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010068:	693b      	ldr	r3, [r7, #16]
 801006a:	2b00      	cmp	r3, #0
 801006c:	d002      	beq.n	8010074 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801006e:	693b      	ldr	r3, [r7, #16]
 8010070:	3b01      	subs	r3, #1
 8010072:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010074:	693b      	ldr	r3, [r7, #16]
 8010076:	1c5a      	adds	r2, r3, #1
 8010078:	68fb      	ldr	r3, [r7, #12]
 801007a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801007c:	697b      	ldr	r3, [r7, #20]
}
 801007e:	4618      	mov	r0, r3
 8010080:	3718      	adds	r7, #24
 8010082:	46bd      	mov	sp, r7
 8010084:	bd80      	pop	{r7, pc}

08010086 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8010086:	b580      	push	{r7, lr}
 8010088:	b082      	sub	sp, #8
 801008a:	af00      	add	r7, sp, #0
 801008c:	6078      	str	r0, [r7, #4]
 801008e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010094:	2b00      	cmp	r3, #0
 8010096:	d018      	beq.n	80100ca <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	68da      	ldr	r2, [r3, #12]
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80100a0:	441a      	add	r2, r3
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	68da      	ldr	r2, [r3, #12]
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	689b      	ldr	r3, [r3, #8]
 80100ae:	429a      	cmp	r2, r3
 80100b0:	d303      	bcc.n	80100ba <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	681a      	ldr	r2, [r3, #0]
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	68d9      	ldr	r1, [r3, #12]
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80100c2:	461a      	mov	r2, r3
 80100c4:	6838      	ldr	r0, [r7, #0]
 80100c6:	f011 f954 	bl	8021372 <memcpy>
	}
}
 80100ca:	bf00      	nop
 80100cc:	3708      	adds	r7, #8
 80100ce:	46bd      	mov	sp, r7
 80100d0:	bd80      	pop	{r7, pc}

080100d2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80100d2:	b580      	push	{r7, lr}
 80100d4:	b084      	sub	sp, #16
 80100d6:	af00      	add	r7, sp, #0
 80100d8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80100da:	f7fe ffd3 	bl	800f084 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80100e4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80100e6:	e011      	b.n	801010c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	d012      	beq.n	8010116 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	3324      	adds	r3, #36	; 0x24
 80100f4:	4618      	mov	r0, r3
 80100f6:	f000 fd21 	bl	8010b3c <xTaskRemoveFromEventList>
 80100fa:	4603      	mov	r3, r0
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d001      	beq.n	8010104 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8010100:	f000 fdf8 	bl	8010cf4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8010104:	7bfb      	ldrb	r3, [r7, #15]
 8010106:	3b01      	subs	r3, #1
 8010108:	b2db      	uxtb	r3, r3
 801010a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801010c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010110:	2b00      	cmp	r3, #0
 8010112:	dce9      	bgt.n	80100e8 <prvUnlockQueue+0x16>
 8010114:	e000      	b.n	8010118 <prvUnlockQueue+0x46>
					break;
 8010116:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	22ff      	movs	r2, #255	; 0xff
 801011c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8010120:	f7fe ffe0 	bl	800f0e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8010124:	f7fe ffae 	bl	800f084 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801012e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010130:	e011      	b.n	8010156 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	691b      	ldr	r3, [r3, #16]
 8010136:	2b00      	cmp	r3, #0
 8010138:	d012      	beq.n	8010160 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	3310      	adds	r3, #16
 801013e:	4618      	mov	r0, r3
 8010140:	f000 fcfc 	bl	8010b3c <xTaskRemoveFromEventList>
 8010144:	4603      	mov	r3, r0
 8010146:	2b00      	cmp	r3, #0
 8010148:	d001      	beq.n	801014e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801014a:	f000 fdd3 	bl	8010cf4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801014e:	7bbb      	ldrb	r3, [r7, #14]
 8010150:	3b01      	subs	r3, #1
 8010152:	b2db      	uxtb	r3, r3
 8010154:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010156:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801015a:	2b00      	cmp	r3, #0
 801015c:	dce9      	bgt.n	8010132 <prvUnlockQueue+0x60>
 801015e:	e000      	b.n	8010162 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8010160:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	22ff      	movs	r2, #255	; 0xff
 8010166:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801016a:	f7fe ffbb 	bl	800f0e4 <vPortExitCritical>
}
 801016e:	bf00      	nop
 8010170:	3710      	adds	r7, #16
 8010172:	46bd      	mov	sp, r7
 8010174:	bd80      	pop	{r7, pc}

08010176 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8010176:	b580      	push	{r7, lr}
 8010178:	b084      	sub	sp, #16
 801017a:	af00      	add	r7, sp, #0
 801017c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801017e:	f7fe ff81 	bl	800f084 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010186:	2b00      	cmp	r3, #0
 8010188:	d102      	bne.n	8010190 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801018a:	2301      	movs	r3, #1
 801018c:	60fb      	str	r3, [r7, #12]
 801018e:	e001      	b.n	8010194 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8010190:	2300      	movs	r3, #0
 8010192:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010194:	f7fe ffa6 	bl	800f0e4 <vPortExitCritical>

	return xReturn;
 8010198:	68fb      	ldr	r3, [r7, #12]
}
 801019a:	4618      	mov	r0, r3
 801019c:	3710      	adds	r7, #16
 801019e:	46bd      	mov	sp, r7
 80101a0:	bd80      	pop	{r7, pc}

080101a2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80101a2:	b580      	push	{r7, lr}
 80101a4:	b084      	sub	sp, #16
 80101a6:	af00      	add	r7, sp, #0
 80101a8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80101aa:	f7fe ff6b 	bl	800f084 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80101b6:	429a      	cmp	r2, r3
 80101b8:	d102      	bne.n	80101c0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80101ba:	2301      	movs	r3, #1
 80101bc:	60fb      	str	r3, [r7, #12]
 80101be:	e001      	b.n	80101c4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80101c0:	2300      	movs	r3, #0
 80101c2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80101c4:	f7fe ff8e 	bl	800f0e4 <vPortExitCritical>

	return xReturn;
 80101c8:	68fb      	ldr	r3, [r7, #12]
}
 80101ca:	4618      	mov	r0, r3
 80101cc:	3710      	adds	r7, #16
 80101ce:	46bd      	mov	sp, r7
 80101d0:	bd80      	pop	{r7, pc}
	...

080101d4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80101d4:	b480      	push	{r7}
 80101d6:	b085      	sub	sp, #20
 80101d8:	af00      	add	r7, sp, #0
 80101da:	6078      	str	r0, [r7, #4]
 80101dc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80101de:	2300      	movs	r3, #0
 80101e0:	60fb      	str	r3, [r7, #12]
 80101e2:	e014      	b.n	801020e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80101e4:	4a0f      	ldr	r2, [pc, #60]	; (8010224 <vQueueAddToRegistry+0x50>)
 80101e6:	68fb      	ldr	r3, [r7, #12]
 80101e8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d10b      	bne.n	8010208 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80101f0:	490c      	ldr	r1, [pc, #48]	; (8010224 <vQueueAddToRegistry+0x50>)
 80101f2:	68fb      	ldr	r3, [r7, #12]
 80101f4:	683a      	ldr	r2, [r7, #0]
 80101f6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80101fa:	4a0a      	ldr	r2, [pc, #40]	; (8010224 <vQueueAddToRegistry+0x50>)
 80101fc:	68fb      	ldr	r3, [r7, #12]
 80101fe:	00db      	lsls	r3, r3, #3
 8010200:	4413      	add	r3, r2
 8010202:	687a      	ldr	r2, [r7, #4]
 8010204:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8010206:	e006      	b.n	8010216 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010208:	68fb      	ldr	r3, [r7, #12]
 801020a:	3301      	adds	r3, #1
 801020c:	60fb      	str	r3, [r7, #12]
 801020e:	68fb      	ldr	r3, [r7, #12]
 8010210:	2b07      	cmp	r3, #7
 8010212:	d9e7      	bls.n	80101e4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8010214:	bf00      	nop
 8010216:	bf00      	nop
 8010218:	3714      	adds	r7, #20
 801021a:	46bd      	mov	sp, r7
 801021c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010220:	4770      	bx	lr
 8010222:	bf00      	nop
 8010224:	2400632c 	.word	0x2400632c

08010228 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8010228:	b480      	push	{r7}
 801022a:	b085      	sub	sp, #20
 801022c:	af00      	add	r7, sp, #0
 801022e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010230:	2300      	movs	r3, #0
 8010232:	60fb      	str	r3, [r7, #12]
 8010234:	e016      	b.n	8010264 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8010236:	4a10      	ldr	r2, [pc, #64]	; (8010278 <vQueueUnregisterQueue+0x50>)
 8010238:	68fb      	ldr	r3, [r7, #12]
 801023a:	00db      	lsls	r3, r3, #3
 801023c:	4413      	add	r3, r2
 801023e:	685b      	ldr	r3, [r3, #4]
 8010240:	687a      	ldr	r2, [r7, #4]
 8010242:	429a      	cmp	r2, r3
 8010244:	d10b      	bne.n	801025e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8010246:	4a0c      	ldr	r2, [pc, #48]	; (8010278 <vQueueUnregisterQueue+0x50>)
 8010248:	68fb      	ldr	r3, [r7, #12]
 801024a:	2100      	movs	r1, #0
 801024c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8010250:	4a09      	ldr	r2, [pc, #36]	; (8010278 <vQueueUnregisterQueue+0x50>)
 8010252:	68fb      	ldr	r3, [r7, #12]
 8010254:	00db      	lsls	r3, r3, #3
 8010256:	4413      	add	r3, r2
 8010258:	2200      	movs	r2, #0
 801025a:	605a      	str	r2, [r3, #4]
				break;
 801025c:	e006      	b.n	801026c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801025e:	68fb      	ldr	r3, [r7, #12]
 8010260:	3301      	adds	r3, #1
 8010262:	60fb      	str	r3, [r7, #12]
 8010264:	68fb      	ldr	r3, [r7, #12]
 8010266:	2b07      	cmp	r3, #7
 8010268:	d9e5      	bls.n	8010236 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 801026a:	bf00      	nop
 801026c:	bf00      	nop
 801026e:	3714      	adds	r7, #20
 8010270:	46bd      	mov	sp, r7
 8010272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010276:	4770      	bx	lr
 8010278:	2400632c 	.word	0x2400632c

0801027c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801027c:	b580      	push	{r7, lr}
 801027e:	b086      	sub	sp, #24
 8010280:	af00      	add	r7, sp, #0
 8010282:	60f8      	str	r0, [r7, #12]
 8010284:	60b9      	str	r1, [r7, #8]
 8010286:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8010288:	68fb      	ldr	r3, [r7, #12]
 801028a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 801028c:	f7fe fefa 	bl	800f084 <vPortEnterCritical>
 8010290:	697b      	ldr	r3, [r7, #20]
 8010292:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010296:	b25b      	sxtb	r3, r3
 8010298:	f1b3 3fff 	cmp.w	r3, #4294967295
 801029c:	d103      	bne.n	80102a6 <vQueueWaitForMessageRestricted+0x2a>
 801029e:	697b      	ldr	r3, [r7, #20]
 80102a0:	2200      	movs	r2, #0
 80102a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80102a6:	697b      	ldr	r3, [r7, #20]
 80102a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80102ac:	b25b      	sxtb	r3, r3
 80102ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102b2:	d103      	bne.n	80102bc <vQueueWaitForMessageRestricted+0x40>
 80102b4:	697b      	ldr	r3, [r7, #20]
 80102b6:	2200      	movs	r2, #0
 80102b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80102bc:	f7fe ff12 	bl	800f0e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80102c0:	697b      	ldr	r3, [r7, #20]
 80102c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d106      	bne.n	80102d6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80102c8:	697b      	ldr	r3, [r7, #20]
 80102ca:	3324      	adds	r3, #36	; 0x24
 80102cc:	687a      	ldr	r2, [r7, #4]
 80102ce:	68b9      	ldr	r1, [r7, #8]
 80102d0:	4618      	mov	r0, r3
 80102d2:	f000 fc07 	bl	8010ae4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80102d6:	6978      	ldr	r0, [r7, #20]
 80102d8:	f7ff fefb 	bl	80100d2 <prvUnlockQueue>
	}
 80102dc:	bf00      	nop
 80102de:	3718      	adds	r7, #24
 80102e0:	46bd      	mov	sp, r7
 80102e2:	bd80      	pop	{r7, pc}

080102e4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80102e4:	b580      	push	{r7, lr}
 80102e6:	b08e      	sub	sp, #56	; 0x38
 80102e8:	af04      	add	r7, sp, #16
 80102ea:	60f8      	str	r0, [r7, #12]
 80102ec:	60b9      	str	r1, [r7, #8]
 80102ee:	607a      	str	r2, [r7, #4]
 80102f0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80102f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d10a      	bne.n	801030e <xTaskCreateStatic+0x2a>
	__asm volatile
 80102f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102fc:	f383 8811 	msr	BASEPRI, r3
 8010300:	f3bf 8f6f 	isb	sy
 8010304:	f3bf 8f4f 	dsb	sy
 8010308:	623b      	str	r3, [r7, #32]
}
 801030a:	bf00      	nop
 801030c:	e7fe      	b.n	801030c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801030e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010310:	2b00      	cmp	r3, #0
 8010312:	d10a      	bne.n	801032a <xTaskCreateStatic+0x46>
	__asm volatile
 8010314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010318:	f383 8811 	msr	BASEPRI, r3
 801031c:	f3bf 8f6f 	isb	sy
 8010320:	f3bf 8f4f 	dsb	sy
 8010324:	61fb      	str	r3, [r7, #28]
}
 8010326:	bf00      	nop
 8010328:	e7fe      	b.n	8010328 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801032a:	235c      	movs	r3, #92	; 0x5c
 801032c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801032e:	693b      	ldr	r3, [r7, #16]
 8010330:	2b5c      	cmp	r3, #92	; 0x5c
 8010332:	d00a      	beq.n	801034a <xTaskCreateStatic+0x66>
	__asm volatile
 8010334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010338:	f383 8811 	msr	BASEPRI, r3
 801033c:	f3bf 8f6f 	isb	sy
 8010340:	f3bf 8f4f 	dsb	sy
 8010344:	61bb      	str	r3, [r7, #24]
}
 8010346:	bf00      	nop
 8010348:	e7fe      	b.n	8010348 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801034a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801034c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801034e:	2b00      	cmp	r3, #0
 8010350:	d01e      	beq.n	8010390 <xTaskCreateStatic+0xac>
 8010352:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010354:	2b00      	cmp	r3, #0
 8010356:	d01b      	beq.n	8010390 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801035a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801035c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801035e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010360:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010364:	2202      	movs	r2, #2
 8010366:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801036a:	2300      	movs	r3, #0
 801036c:	9303      	str	r3, [sp, #12]
 801036e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010370:	9302      	str	r3, [sp, #8]
 8010372:	f107 0314 	add.w	r3, r7, #20
 8010376:	9301      	str	r3, [sp, #4]
 8010378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801037a:	9300      	str	r3, [sp, #0]
 801037c:	683b      	ldr	r3, [r7, #0]
 801037e:	687a      	ldr	r2, [r7, #4]
 8010380:	68b9      	ldr	r1, [r7, #8]
 8010382:	68f8      	ldr	r0, [r7, #12]
 8010384:	f000 f850 	bl	8010428 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010388:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801038a:	f000 f8dd 	bl	8010548 <prvAddNewTaskToReadyList>
 801038e:	e001      	b.n	8010394 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8010390:	2300      	movs	r3, #0
 8010392:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8010394:	697b      	ldr	r3, [r7, #20]
	}
 8010396:	4618      	mov	r0, r3
 8010398:	3728      	adds	r7, #40	; 0x28
 801039a:	46bd      	mov	sp, r7
 801039c:	bd80      	pop	{r7, pc}

0801039e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801039e:	b580      	push	{r7, lr}
 80103a0:	b08c      	sub	sp, #48	; 0x30
 80103a2:	af04      	add	r7, sp, #16
 80103a4:	60f8      	str	r0, [r7, #12]
 80103a6:	60b9      	str	r1, [r7, #8]
 80103a8:	603b      	str	r3, [r7, #0]
 80103aa:	4613      	mov	r3, r2
 80103ac:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80103ae:	88fb      	ldrh	r3, [r7, #6]
 80103b0:	009b      	lsls	r3, r3, #2
 80103b2:	4618      	mov	r0, r3
 80103b4:	f7fe fa98 	bl	800e8e8 <pvPortMalloc>
 80103b8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80103ba:	697b      	ldr	r3, [r7, #20]
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d00e      	beq.n	80103de <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80103c0:	205c      	movs	r0, #92	; 0x5c
 80103c2:	f7fe fa91 	bl	800e8e8 <pvPortMalloc>
 80103c6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80103c8:	69fb      	ldr	r3, [r7, #28]
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d003      	beq.n	80103d6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80103ce:	69fb      	ldr	r3, [r7, #28]
 80103d0:	697a      	ldr	r2, [r7, #20]
 80103d2:	631a      	str	r2, [r3, #48]	; 0x30
 80103d4:	e005      	b.n	80103e2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80103d6:	6978      	ldr	r0, [r7, #20]
 80103d8:	f7fe fb52 	bl	800ea80 <vPortFree>
 80103dc:	e001      	b.n	80103e2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80103de:	2300      	movs	r3, #0
 80103e0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80103e2:	69fb      	ldr	r3, [r7, #28]
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	d017      	beq.n	8010418 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80103e8:	69fb      	ldr	r3, [r7, #28]
 80103ea:	2200      	movs	r2, #0
 80103ec:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80103f0:	88fa      	ldrh	r2, [r7, #6]
 80103f2:	2300      	movs	r3, #0
 80103f4:	9303      	str	r3, [sp, #12]
 80103f6:	69fb      	ldr	r3, [r7, #28]
 80103f8:	9302      	str	r3, [sp, #8]
 80103fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103fc:	9301      	str	r3, [sp, #4]
 80103fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010400:	9300      	str	r3, [sp, #0]
 8010402:	683b      	ldr	r3, [r7, #0]
 8010404:	68b9      	ldr	r1, [r7, #8]
 8010406:	68f8      	ldr	r0, [r7, #12]
 8010408:	f000 f80e 	bl	8010428 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801040c:	69f8      	ldr	r0, [r7, #28]
 801040e:	f000 f89b 	bl	8010548 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8010412:	2301      	movs	r3, #1
 8010414:	61bb      	str	r3, [r7, #24]
 8010416:	e002      	b.n	801041e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010418:	f04f 33ff 	mov.w	r3, #4294967295
 801041c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801041e:	69bb      	ldr	r3, [r7, #24]
	}
 8010420:	4618      	mov	r0, r3
 8010422:	3720      	adds	r7, #32
 8010424:	46bd      	mov	sp, r7
 8010426:	bd80      	pop	{r7, pc}

08010428 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8010428:	b580      	push	{r7, lr}
 801042a:	b088      	sub	sp, #32
 801042c:	af00      	add	r7, sp, #0
 801042e:	60f8      	str	r0, [r7, #12]
 8010430:	60b9      	str	r1, [r7, #8]
 8010432:	607a      	str	r2, [r7, #4]
 8010434:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8010436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010438:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	009b      	lsls	r3, r3, #2
 801043e:	461a      	mov	r2, r3
 8010440:	21a5      	movs	r1, #165	; 0xa5
 8010442:	f010 fec6 	bl	80211d2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010448:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801044a:	6879      	ldr	r1, [r7, #4]
 801044c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8010450:	440b      	add	r3, r1
 8010452:	009b      	lsls	r3, r3, #2
 8010454:	4413      	add	r3, r2
 8010456:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8010458:	69bb      	ldr	r3, [r7, #24]
 801045a:	f023 0307 	bic.w	r3, r3, #7
 801045e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010460:	69bb      	ldr	r3, [r7, #24]
 8010462:	f003 0307 	and.w	r3, r3, #7
 8010466:	2b00      	cmp	r3, #0
 8010468:	d00a      	beq.n	8010480 <prvInitialiseNewTask+0x58>
	__asm volatile
 801046a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801046e:	f383 8811 	msr	BASEPRI, r3
 8010472:	f3bf 8f6f 	isb	sy
 8010476:	f3bf 8f4f 	dsb	sy
 801047a:	617b      	str	r3, [r7, #20]
}
 801047c:	bf00      	nop
 801047e:	e7fe      	b.n	801047e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8010480:	68bb      	ldr	r3, [r7, #8]
 8010482:	2b00      	cmp	r3, #0
 8010484:	d01f      	beq.n	80104c6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010486:	2300      	movs	r3, #0
 8010488:	61fb      	str	r3, [r7, #28]
 801048a:	e012      	b.n	80104b2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801048c:	68ba      	ldr	r2, [r7, #8]
 801048e:	69fb      	ldr	r3, [r7, #28]
 8010490:	4413      	add	r3, r2
 8010492:	7819      	ldrb	r1, [r3, #0]
 8010494:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010496:	69fb      	ldr	r3, [r7, #28]
 8010498:	4413      	add	r3, r2
 801049a:	3334      	adds	r3, #52	; 0x34
 801049c:	460a      	mov	r2, r1
 801049e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80104a0:	68ba      	ldr	r2, [r7, #8]
 80104a2:	69fb      	ldr	r3, [r7, #28]
 80104a4:	4413      	add	r3, r2
 80104a6:	781b      	ldrb	r3, [r3, #0]
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d006      	beq.n	80104ba <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80104ac:	69fb      	ldr	r3, [r7, #28]
 80104ae:	3301      	adds	r3, #1
 80104b0:	61fb      	str	r3, [r7, #28]
 80104b2:	69fb      	ldr	r3, [r7, #28]
 80104b4:	2b0f      	cmp	r3, #15
 80104b6:	d9e9      	bls.n	801048c <prvInitialiseNewTask+0x64>
 80104b8:	e000      	b.n	80104bc <prvInitialiseNewTask+0x94>
			{
				break;
 80104ba:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80104bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104be:	2200      	movs	r2, #0
 80104c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80104c4:	e003      	b.n	80104ce <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80104c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104c8:	2200      	movs	r2, #0
 80104ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80104ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104d0:	2b37      	cmp	r3, #55	; 0x37
 80104d2:	d901      	bls.n	80104d8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80104d4:	2337      	movs	r3, #55	; 0x37
 80104d6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80104d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80104dc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80104de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80104e2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80104e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104e6:	2200      	movs	r2, #0
 80104e8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80104ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104ec:	3304      	adds	r3, #4
 80104ee:	4618      	mov	r0, r3
 80104f0:	f7fe fc04 	bl	800ecfc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80104f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104f6:	3318      	adds	r3, #24
 80104f8:	4618      	mov	r0, r3
 80104fa:	f7fe fbff 	bl	800ecfc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80104fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010500:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010502:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010506:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801050a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801050c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801050e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010510:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010512:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8010514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010516:	2200      	movs	r2, #0
 8010518:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801051a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801051c:	2200      	movs	r2, #0
 801051e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010522:	683a      	ldr	r2, [r7, #0]
 8010524:	68f9      	ldr	r1, [r7, #12]
 8010526:	69b8      	ldr	r0, [r7, #24]
 8010528:	f7fe fc7c 	bl	800ee24 <pxPortInitialiseStack>
 801052c:	4602      	mov	r2, r0
 801052e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010530:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8010532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010534:	2b00      	cmp	r3, #0
 8010536:	d002      	beq.n	801053e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801053a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801053c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801053e:	bf00      	nop
 8010540:	3720      	adds	r7, #32
 8010542:	46bd      	mov	sp, r7
 8010544:	bd80      	pop	{r7, pc}
	...

08010548 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010548:	b580      	push	{r7, lr}
 801054a:	b082      	sub	sp, #8
 801054c:	af00      	add	r7, sp, #0
 801054e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010550:	f7fe fd98 	bl	800f084 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010554:	4b2d      	ldr	r3, [pc, #180]	; (801060c <prvAddNewTaskToReadyList+0xc4>)
 8010556:	681b      	ldr	r3, [r3, #0]
 8010558:	3301      	adds	r3, #1
 801055a:	4a2c      	ldr	r2, [pc, #176]	; (801060c <prvAddNewTaskToReadyList+0xc4>)
 801055c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801055e:	4b2c      	ldr	r3, [pc, #176]	; (8010610 <prvAddNewTaskToReadyList+0xc8>)
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	2b00      	cmp	r3, #0
 8010564:	d109      	bne.n	801057a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8010566:	4a2a      	ldr	r2, [pc, #168]	; (8010610 <prvAddNewTaskToReadyList+0xc8>)
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801056c:	4b27      	ldr	r3, [pc, #156]	; (801060c <prvAddNewTaskToReadyList+0xc4>)
 801056e:	681b      	ldr	r3, [r3, #0]
 8010570:	2b01      	cmp	r3, #1
 8010572:	d110      	bne.n	8010596 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8010574:	f000 fbe2 	bl	8010d3c <prvInitialiseTaskLists>
 8010578:	e00d      	b.n	8010596 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801057a:	4b26      	ldr	r3, [pc, #152]	; (8010614 <prvAddNewTaskToReadyList+0xcc>)
 801057c:	681b      	ldr	r3, [r3, #0]
 801057e:	2b00      	cmp	r3, #0
 8010580:	d109      	bne.n	8010596 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8010582:	4b23      	ldr	r3, [pc, #140]	; (8010610 <prvAddNewTaskToReadyList+0xc8>)
 8010584:	681b      	ldr	r3, [r3, #0]
 8010586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801058c:	429a      	cmp	r2, r3
 801058e:	d802      	bhi.n	8010596 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8010590:	4a1f      	ldr	r2, [pc, #124]	; (8010610 <prvAddNewTaskToReadyList+0xc8>)
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8010596:	4b20      	ldr	r3, [pc, #128]	; (8010618 <prvAddNewTaskToReadyList+0xd0>)
 8010598:	681b      	ldr	r3, [r3, #0]
 801059a:	3301      	adds	r3, #1
 801059c:	4a1e      	ldr	r2, [pc, #120]	; (8010618 <prvAddNewTaskToReadyList+0xd0>)
 801059e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80105a0:	4b1d      	ldr	r3, [pc, #116]	; (8010618 <prvAddNewTaskToReadyList+0xd0>)
 80105a2:	681a      	ldr	r2, [r3, #0]
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80105ac:	4b1b      	ldr	r3, [pc, #108]	; (801061c <prvAddNewTaskToReadyList+0xd4>)
 80105ae:	681b      	ldr	r3, [r3, #0]
 80105b0:	429a      	cmp	r2, r3
 80105b2:	d903      	bls.n	80105bc <prvAddNewTaskToReadyList+0x74>
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80105b8:	4a18      	ldr	r2, [pc, #96]	; (801061c <prvAddNewTaskToReadyList+0xd4>)
 80105ba:	6013      	str	r3, [r2, #0]
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80105c0:	4613      	mov	r3, r2
 80105c2:	009b      	lsls	r3, r3, #2
 80105c4:	4413      	add	r3, r2
 80105c6:	009b      	lsls	r3, r3, #2
 80105c8:	4a15      	ldr	r2, [pc, #84]	; (8010620 <prvAddNewTaskToReadyList+0xd8>)
 80105ca:	441a      	add	r2, r3
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	3304      	adds	r3, #4
 80105d0:	4619      	mov	r1, r3
 80105d2:	4610      	mov	r0, r2
 80105d4:	f7fe fb9f 	bl	800ed16 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80105d8:	f7fe fd84 	bl	800f0e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80105dc:	4b0d      	ldr	r3, [pc, #52]	; (8010614 <prvAddNewTaskToReadyList+0xcc>)
 80105de:	681b      	ldr	r3, [r3, #0]
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d00e      	beq.n	8010602 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80105e4:	4b0a      	ldr	r3, [pc, #40]	; (8010610 <prvAddNewTaskToReadyList+0xc8>)
 80105e6:	681b      	ldr	r3, [r3, #0]
 80105e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80105ee:	429a      	cmp	r2, r3
 80105f0:	d207      	bcs.n	8010602 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80105f2:	4b0c      	ldr	r3, [pc, #48]	; (8010624 <prvAddNewTaskToReadyList+0xdc>)
 80105f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80105f8:	601a      	str	r2, [r3, #0]
 80105fa:	f3bf 8f4f 	dsb	sy
 80105fe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010602:	bf00      	nop
 8010604:	3708      	adds	r7, #8
 8010606:	46bd      	mov	sp, r7
 8010608:	bd80      	pop	{r7, pc}
 801060a:	bf00      	nop
 801060c:	24006840 	.word	0x24006840
 8010610:	2400636c 	.word	0x2400636c
 8010614:	2400684c 	.word	0x2400684c
 8010618:	2400685c 	.word	0x2400685c
 801061c:	24006848 	.word	0x24006848
 8010620:	24006370 	.word	0x24006370
 8010624:	e000ed04 	.word	0xe000ed04

08010628 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8010628:	b580      	push	{r7, lr}
 801062a:	b08a      	sub	sp, #40	; 0x28
 801062c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801062e:	2300      	movs	r3, #0
 8010630:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8010632:	2300      	movs	r3, #0
 8010634:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8010636:	463a      	mov	r2, r7
 8010638:	1d39      	adds	r1, r7, #4
 801063a:	f107 0308 	add.w	r3, r7, #8
 801063e:	4618      	mov	r0, r3
 8010640:	f7fe f91e 	bl	800e880 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8010644:	6839      	ldr	r1, [r7, #0]
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	68ba      	ldr	r2, [r7, #8]
 801064a:	9202      	str	r2, [sp, #8]
 801064c:	9301      	str	r3, [sp, #4]
 801064e:	2300      	movs	r3, #0
 8010650:	9300      	str	r3, [sp, #0]
 8010652:	2300      	movs	r3, #0
 8010654:	460a      	mov	r2, r1
 8010656:	4921      	ldr	r1, [pc, #132]	; (80106dc <vTaskStartScheduler+0xb4>)
 8010658:	4821      	ldr	r0, [pc, #132]	; (80106e0 <vTaskStartScheduler+0xb8>)
 801065a:	f7ff fe43 	bl	80102e4 <xTaskCreateStatic>
 801065e:	4603      	mov	r3, r0
 8010660:	4a20      	ldr	r2, [pc, #128]	; (80106e4 <vTaskStartScheduler+0xbc>)
 8010662:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8010664:	4b1f      	ldr	r3, [pc, #124]	; (80106e4 <vTaskStartScheduler+0xbc>)
 8010666:	681b      	ldr	r3, [r3, #0]
 8010668:	2b00      	cmp	r3, #0
 801066a:	d002      	beq.n	8010672 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801066c:	2301      	movs	r3, #1
 801066e:	617b      	str	r3, [r7, #20]
 8010670:	e001      	b.n	8010676 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8010672:	2300      	movs	r3, #0
 8010674:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8010676:	697b      	ldr	r3, [r7, #20]
 8010678:	2b01      	cmp	r3, #1
 801067a:	d102      	bne.n	8010682 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 801067c:	f000 fdfa 	bl	8011274 <xTimerCreateTimerTask>
 8010680:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8010682:	697b      	ldr	r3, [r7, #20]
 8010684:	2b01      	cmp	r3, #1
 8010686:	d116      	bne.n	80106b6 <vTaskStartScheduler+0x8e>
	__asm volatile
 8010688:	f04f 0350 	mov.w	r3, #80	; 0x50
 801068c:	f383 8811 	msr	BASEPRI, r3
 8010690:	f3bf 8f6f 	isb	sy
 8010694:	f3bf 8f4f 	dsb	sy
 8010698:	613b      	str	r3, [r7, #16]
}
 801069a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801069c:	4b12      	ldr	r3, [pc, #72]	; (80106e8 <vTaskStartScheduler+0xc0>)
 801069e:	f04f 32ff 	mov.w	r2, #4294967295
 80106a2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80106a4:	4b11      	ldr	r3, [pc, #68]	; (80106ec <vTaskStartScheduler+0xc4>)
 80106a6:	2201      	movs	r2, #1
 80106a8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80106aa:	4b11      	ldr	r3, [pc, #68]	; (80106f0 <vTaskStartScheduler+0xc8>)
 80106ac:	2200      	movs	r2, #0
 80106ae:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80106b0:	f7fe fc46 	bl	800ef40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80106b4:	e00e      	b.n	80106d4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80106b6:	697b      	ldr	r3, [r7, #20]
 80106b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106bc:	d10a      	bne.n	80106d4 <vTaskStartScheduler+0xac>
	__asm volatile
 80106be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106c2:	f383 8811 	msr	BASEPRI, r3
 80106c6:	f3bf 8f6f 	isb	sy
 80106ca:	f3bf 8f4f 	dsb	sy
 80106ce:	60fb      	str	r3, [r7, #12]
}
 80106d0:	bf00      	nop
 80106d2:	e7fe      	b.n	80106d2 <vTaskStartScheduler+0xaa>
}
 80106d4:	bf00      	nop
 80106d6:	3718      	adds	r7, #24
 80106d8:	46bd      	mov	sp, r7
 80106da:	bd80      	pop	{r7, pc}
 80106dc:	08022878 	.word	0x08022878
 80106e0:	08010d0d 	.word	0x08010d0d
 80106e4:	24006864 	.word	0x24006864
 80106e8:	24006860 	.word	0x24006860
 80106ec:	2400684c 	.word	0x2400684c
 80106f0:	24006844 	.word	0x24006844

080106f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80106f4:	b480      	push	{r7}
 80106f6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80106f8:	4b04      	ldr	r3, [pc, #16]	; (801070c <vTaskSuspendAll+0x18>)
 80106fa:	681b      	ldr	r3, [r3, #0]
 80106fc:	3301      	adds	r3, #1
 80106fe:	4a03      	ldr	r2, [pc, #12]	; (801070c <vTaskSuspendAll+0x18>)
 8010700:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8010702:	bf00      	nop
 8010704:	46bd      	mov	sp, r7
 8010706:	f85d 7b04 	ldr.w	r7, [sp], #4
 801070a:	4770      	bx	lr
 801070c:	24006868 	.word	0x24006868

08010710 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8010710:	b580      	push	{r7, lr}
 8010712:	b084      	sub	sp, #16
 8010714:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8010716:	2300      	movs	r3, #0
 8010718:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801071a:	2300      	movs	r3, #0
 801071c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801071e:	4b42      	ldr	r3, [pc, #264]	; (8010828 <xTaskResumeAll+0x118>)
 8010720:	681b      	ldr	r3, [r3, #0]
 8010722:	2b00      	cmp	r3, #0
 8010724:	d10a      	bne.n	801073c <xTaskResumeAll+0x2c>
	__asm volatile
 8010726:	f04f 0350 	mov.w	r3, #80	; 0x50
 801072a:	f383 8811 	msr	BASEPRI, r3
 801072e:	f3bf 8f6f 	isb	sy
 8010732:	f3bf 8f4f 	dsb	sy
 8010736:	603b      	str	r3, [r7, #0]
}
 8010738:	bf00      	nop
 801073a:	e7fe      	b.n	801073a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801073c:	f7fe fca2 	bl	800f084 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8010740:	4b39      	ldr	r3, [pc, #228]	; (8010828 <xTaskResumeAll+0x118>)
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	3b01      	subs	r3, #1
 8010746:	4a38      	ldr	r2, [pc, #224]	; (8010828 <xTaskResumeAll+0x118>)
 8010748:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801074a:	4b37      	ldr	r3, [pc, #220]	; (8010828 <xTaskResumeAll+0x118>)
 801074c:	681b      	ldr	r3, [r3, #0]
 801074e:	2b00      	cmp	r3, #0
 8010750:	d162      	bne.n	8010818 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010752:	4b36      	ldr	r3, [pc, #216]	; (801082c <xTaskResumeAll+0x11c>)
 8010754:	681b      	ldr	r3, [r3, #0]
 8010756:	2b00      	cmp	r3, #0
 8010758:	d05e      	beq.n	8010818 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801075a:	e02f      	b.n	80107bc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801075c:	4b34      	ldr	r3, [pc, #208]	; (8010830 <xTaskResumeAll+0x120>)
 801075e:	68db      	ldr	r3, [r3, #12]
 8010760:	68db      	ldr	r3, [r3, #12]
 8010762:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010764:	68fb      	ldr	r3, [r7, #12]
 8010766:	3318      	adds	r3, #24
 8010768:	4618      	mov	r0, r3
 801076a:	f7fe fb31 	bl	800edd0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801076e:	68fb      	ldr	r3, [r7, #12]
 8010770:	3304      	adds	r3, #4
 8010772:	4618      	mov	r0, r3
 8010774:	f7fe fb2c 	bl	800edd0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010778:	68fb      	ldr	r3, [r7, #12]
 801077a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801077c:	4b2d      	ldr	r3, [pc, #180]	; (8010834 <xTaskResumeAll+0x124>)
 801077e:	681b      	ldr	r3, [r3, #0]
 8010780:	429a      	cmp	r2, r3
 8010782:	d903      	bls.n	801078c <xTaskResumeAll+0x7c>
 8010784:	68fb      	ldr	r3, [r7, #12]
 8010786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010788:	4a2a      	ldr	r2, [pc, #168]	; (8010834 <xTaskResumeAll+0x124>)
 801078a:	6013      	str	r3, [r2, #0]
 801078c:	68fb      	ldr	r3, [r7, #12]
 801078e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010790:	4613      	mov	r3, r2
 8010792:	009b      	lsls	r3, r3, #2
 8010794:	4413      	add	r3, r2
 8010796:	009b      	lsls	r3, r3, #2
 8010798:	4a27      	ldr	r2, [pc, #156]	; (8010838 <xTaskResumeAll+0x128>)
 801079a:	441a      	add	r2, r3
 801079c:	68fb      	ldr	r3, [r7, #12]
 801079e:	3304      	adds	r3, #4
 80107a0:	4619      	mov	r1, r3
 80107a2:	4610      	mov	r0, r2
 80107a4:	f7fe fab7 	bl	800ed16 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80107a8:	68fb      	ldr	r3, [r7, #12]
 80107aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80107ac:	4b23      	ldr	r3, [pc, #140]	; (801083c <xTaskResumeAll+0x12c>)
 80107ae:	681b      	ldr	r3, [r3, #0]
 80107b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107b2:	429a      	cmp	r2, r3
 80107b4:	d302      	bcc.n	80107bc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80107b6:	4b22      	ldr	r3, [pc, #136]	; (8010840 <xTaskResumeAll+0x130>)
 80107b8:	2201      	movs	r2, #1
 80107ba:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80107bc:	4b1c      	ldr	r3, [pc, #112]	; (8010830 <xTaskResumeAll+0x120>)
 80107be:	681b      	ldr	r3, [r3, #0]
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d1cb      	bne.n	801075c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80107c4:	68fb      	ldr	r3, [r7, #12]
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d001      	beq.n	80107ce <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80107ca:	f000 fb55 	bl	8010e78 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80107ce:	4b1d      	ldr	r3, [pc, #116]	; (8010844 <xTaskResumeAll+0x134>)
 80107d0:	681b      	ldr	r3, [r3, #0]
 80107d2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	d010      	beq.n	80107fc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80107da:	f000 f847 	bl	801086c <xTaskIncrementTick>
 80107de:	4603      	mov	r3, r0
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d002      	beq.n	80107ea <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80107e4:	4b16      	ldr	r3, [pc, #88]	; (8010840 <xTaskResumeAll+0x130>)
 80107e6:	2201      	movs	r2, #1
 80107e8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	3b01      	subs	r3, #1
 80107ee:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d1f1      	bne.n	80107da <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80107f6:	4b13      	ldr	r3, [pc, #76]	; (8010844 <xTaskResumeAll+0x134>)
 80107f8:	2200      	movs	r2, #0
 80107fa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80107fc:	4b10      	ldr	r3, [pc, #64]	; (8010840 <xTaskResumeAll+0x130>)
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	2b00      	cmp	r3, #0
 8010802:	d009      	beq.n	8010818 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8010804:	2301      	movs	r3, #1
 8010806:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8010808:	4b0f      	ldr	r3, [pc, #60]	; (8010848 <xTaskResumeAll+0x138>)
 801080a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801080e:	601a      	str	r2, [r3, #0]
 8010810:	f3bf 8f4f 	dsb	sy
 8010814:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010818:	f7fe fc64 	bl	800f0e4 <vPortExitCritical>

	return xAlreadyYielded;
 801081c:	68bb      	ldr	r3, [r7, #8]
}
 801081e:	4618      	mov	r0, r3
 8010820:	3710      	adds	r7, #16
 8010822:	46bd      	mov	sp, r7
 8010824:	bd80      	pop	{r7, pc}
 8010826:	bf00      	nop
 8010828:	24006868 	.word	0x24006868
 801082c:	24006840 	.word	0x24006840
 8010830:	24006800 	.word	0x24006800
 8010834:	24006848 	.word	0x24006848
 8010838:	24006370 	.word	0x24006370
 801083c:	2400636c 	.word	0x2400636c
 8010840:	24006854 	.word	0x24006854
 8010844:	24006850 	.word	0x24006850
 8010848:	e000ed04 	.word	0xe000ed04

0801084c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801084c:	b480      	push	{r7}
 801084e:	b083      	sub	sp, #12
 8010850:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8010852:	4b05      	ldr	r3, [pc, #20]	; (8010868 <xTaskGetTickCount+0x1c>)
 8010854:	681b      	ldr	r3, [r3, #0]
 8010856:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8010858:	687b      	ldr	r3, [r7, #4]
}
 801085a:	4618      	mov	r0, r3
 801085c:	370c      	adds	r7, #12
 801085e:	46bd      	mov	sp, r7
 8010860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010864:	4770      	bx	lr
 8010866:	bf00      	nop
 8010868:	24006844 	.word	0x24006844

0801086c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801086c:	b580      	push	{r7, lr}
 801086e:	b086      	sub	sp, #24
 8010870:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8010872:	2300      	movs	r3, #0
 8010874:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010876:	4b4f      	ldr	r3, [pc, #316]	; (80109b4 <xTaskIncrementTick+0x148>)
 8010878:	681b      	ldr	r3, [r3, #0]
 801087a:	2b00      	cmp	r3, #0
 801087c:	f040 808f 	bne.w	801099e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010880:	4b4d      	ldr	r3, [pc, #308]	; (80109b8 <xTaskIncrementTick+0x14c>)
 8010882:	681b      	ldr	r3, [r3, #0]
 8010884:	3301      	adds	r3, #1
 8010886:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8010888:	4a4b      	ldr	r2, [pc, #300]	; (80109b8 <xTaskIncrementTick+0x14c>)
 801088a:	693b      	ldr	r3, [r7, #16]
 801088c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801088e:	693b      	ldr	r3, [r7, #16]
 8010890:	2b00      	cmp	r3, #0
 8010892:	d120      	bne.n	80108d6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8010894:	4b49      	ldr	r3, [pc, #292]	; (80109bc <xTaskIncrementTick+0x150>)
 8010896:	681b      	ldr	r3, [r3, #0]
 8010898:	681b      	ldr	r3, [r3, #0]
 801089a:	2b00      	cmp	r3, #0
 801089c:	d00a      	beq.n	80108b4 <xTaskIncrementTick+0x48>
	__asm volatile
 801089e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108a2:	f383 8811 	msr	BASEPRI, r3
 80108a6:	f3bf 8f6f 	isb	sy
 80108aa:	f3bf 8f4f 	dsb	sy
 80108ae:	603b      	str	r3, [r7, #0]
}
 80108b0:	bf00      	nop
 80108b2:	e7fe      	b.n	80108b2 <xTaskIncrementTick+0x46>
 80108b4:	4b41      	ldr	r3, [pc, #260]	; (80109bc <xTaskIncrementTick+0x150>)
 80108b6:	681b      	ldr	r3, [r3, #0]
 80108b8:	60fb      	str	r3, [r7, #12]
 80108ba:	4b41      	ldr	r3, [pc, #260]	; (80109c0 <xTaskIncrementTick+0x154>)
 80108bc:	681b      	ldr	r3, [r3, #0]
 80108be:	4a3f      	ldr	r2, [pc, #252]	; (80109bc <xTaskIncrementTick+0x150>)
 80108c0:	6013      	str	r3, [r2, #0]
 80108c2:	4a3f      	ldr	r2, [pc, #252]	; (80109c0 <xTaskIncrementTick+0x154>)
 80108c4:	68fb      	ldr	r3, [r7, #12]
 80108c6:	6013      	str	r3, [r2, #0]
 80108c8:	4b3e      	ldr	r3, [pc, #248]	; (80109c4 <xTaskIncrementTick+0x158>)
 80108ca:	681b      	ldr	r3, [r3, #0]
 80108cc:	3301      	adds	r3, #1
 80108ce:	4a3d      	ldr	r2, [pc, #244]	; (80109c4 <xTaskIncrementTick+0x158>)
 80108d0:	6013      	str	r3, [r2, #0]
 80108d2:	f000 fad1 	bl	8010e78 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80108d6:	4b3c      	ldr	r3, [pc, #240]	; (80109c8 <xTaskIncrementTick+0x15c>)
 80108d8:	681b      	ldr	r3, [r3, #0]
 80108da:	693a      	ldr	r2, [r7, #16]
 80108dc:	429a      	cmp	r2, r3
 80108de:	d349      	bcc.n	8010974 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80108e0:	4b36      	ldr	r3, [pc, #216]	; (80109bc <xTaskIncrementTick+0x150>)
 80108e2:	681b      	ldr	r3, [r3, #0]
 80108e4:	681b      	ldr	r3, [r3, #0]
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	d104      	bne.n	80108f4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80108ea:	4b37      	ldr	r3, [pc, #220]	; (80109c8 <xTaskIncrementTick+0x15c>)
 80108ec:	f04f 32ff 	mov.w	r2, #4294967295
 80108f0:	601a      	str	r2, [r3, #0]
					break;
 80108f2:	e03f      	b.n	8010974 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80108f4:	4b31      	ldr	r3, [pc, #196]	; (80109bc <xTaskIncrementTick+0x150>)
 80108f6:	681b      	ldr	r3, [r3, #0]
 80108f8:	68db      	ldr	r3, [r3, #12]
 80108fa:	68db      	ldr	r3, [r3, #12]
 80108fc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80108fe:	68bb      	ldr	r3, [r7, #8]
 8010900:	685b      	ldr	r3, [r3, #4]
 8010902:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8010904:	693a      	ldr	r2, [r7, #16]
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	429a      	cmp	r2, r3
 801090a:	d203      	bcs.n	8010914 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801090c:	4a2e      	ldr	r2, [pc, #184]	; (80109c8 <xTaskIncrementTick+0x15c>)
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8010912:	e02f      	b.n	8010974 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010914:	68bb      	ldr	r3, [r7, #8]
 8010916:	3304      	adds	r3, #4
 8010918:	4618      	mov	r0, r3
 801091a:	f7fe fa59 	bl	800edd0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801091e:	68bb      	ldr	r3, [r7, #8]
 8010920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010922:	2b00      	cmp	r3, #0
 8010924:	d004      	beq.n	8010930 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010926:	68bb      	ldr	r3, [r7, #8]
 8010928:	3318      	adds	r3, #24
 801092a:	4618      	mov	r0, r3
 801092c:	f7fe fa50 	bl	800edd0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8010930:	68bb      	ldr	r3, [r7, #8]
 8010932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010934:	4b25      	ldr	r3, [pc, #148]	; (80109cc <xTaskIncrementTick+0x160>)
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	429a      	cmp	r2, r3
 801093a:	d903      	bls.n	8010944 <xTaskIncrementTick+0xd8>
 801093c:	68bb      	ldr	r3, [r7, #8]
 801093e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010940:	4a22      	ldr	r2, [pc, #136]	; (80109cc <xTaskIncrementTick+0x160>)
 8010942:	6013      	str	r3, [r2, #0]
 8010944:	68bb      	ldr	r3, [r7, #8]
 8010946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010948:	4613      	mov	r3, r2
 801094a:	009b      	lsls	r3, r3, #2
 801094c:	4413      	add	r3, r2
 801094e:	009b      	lsls	r3, r3, #2
 8010950:	4a1f      	ldr	r2, [pc, #124]	; (80109d0 <xTaskIncrementTick+0x164>)
 8010952:	441a      	add	r2, r3
 8010954:	68bb      	ldr	r3, [r7, #8]
 8010956:	3304      	adds	r3, #4
 8010958:	4619      	mov	r1, r3
 801095a:	4610      	mov	r0, r2
 801095c:	f7fe f9db 	bl	800ed16 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010960:	68bb      	ldr	r3, [r7, #8]
 8010962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010964:	4b1b      	ldr	r3, [pc, #108]	; (80109d4 <xTaskIncrementTick+0x168>)
 8010966:	681b      	ldr	r3, [r3, #0]
 8010968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801096a:	429a      	cmp	r2, r3
 801096c:	d3b8      	bcc.n	80108e0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 801096e:	2301      	movs	r3, #1
 8010970:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010972:	e7b5      	b.n	80108e0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8010974:	4b17      	ldr	r3, [pc, #92]	; (80109d4 <xTaskIncrementTick+0x168>)
 8010976:	681b      	ldr	r3, [r3, #0]
 8010978:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801097a:	4915      	ldr	r1, [pc, #84]	; (80109d0 <xTaskIncrementTick+0x164>)
 801097c:	4613      	mov	r3, r2
 801097e:	009b      	lsls	r3, r3, #2
 8010980:	4413      	add	r3, r2
 8010982:	009b      	lsls	r3, r3, #2
 8010984:	440b      	add	r3, r1
 8010986:	681b      	ldr	r3, [r3, #0]
 8010988:	2b01      	cmp	r3, #1
 801098a:	d901      	bls.n	8010990 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 801098c:	2301      	movs	r3, #1
 801098e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8010990:	4b11      	ldr	r3, [pc, #68]	; (80109d8 <xTaskIncrementTick+0x16c>)
 8010992:	681b      	ldr	r3, [r3, #0]
 8010994:	2b00      	cmp	r3, #0
 8010996:	d007      	beq.n	80109a8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8010998:	2301      	movs	r3, #1
 801099a:	617b      	str	r3, [r7, #20]
 801099c:	e004      	b.n	80109a8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801099e:	4b0f      	ldr	r3, [pc, #60]	; (80109dc <xTaskIncrementTick+0x170>)
 80109a0:	681b      	ldr	r3, [r3, #0]
 80109a2:	3301      	adds	r3, #1
 80109a4:	4a0d      	ldr	r2, [pc, #52]	; (80109dc <xTaskIncrementTick+0x170>)
 80109a6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80109a8:	697b      	ldr	r3, [r7, #20]
}
 80109aa:	4618      	mov	r0, r3
 80109ac:	3718      	adds	r7, #24
 80109ae:	46bd      	mov	sp, r7
 80109b0:	bd80      	pop	{r7, pc}
 80109b2:	bf00      	nop
 80109b4:	24006868 	.word	0x24006868
 80109b8:	24006844 	.word	0x24006844
 80109bc:	240067f8 	.word	0x240067f8
 80109c0:	240067fc 	.word	0x240067fc
 80109c4:	24006858 	.word	0x24006858
 80109c8:	24006860 	.word	0x24006860
 80109cc:	24006848 	.word	0x24006848
 80109d0:	24006370 	.word	0x24006370
 80109d4:	2400636c 	.word	0x2400636c
 80109d8:	24006854 	.word	0x24006854
 80109dc:	24006850 	.word	0x24006850

080109e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80109e0:	b480      	push	{r7}
 80109e2:	b085      	sub	sp, #20
 80109e4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80109e6:	4b28      	ldr	r3, [pc, #160]	; (8010a88 <vTaskSwitchContext+0xa8>)
 80109e8:	681b      	ldr	r3, [r3, #0]
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	d003      	beq.n	80109f6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80109ee:	4b27      	ldr	r3, [pc, #156]	; (8010a8c <vTaskSwitchContext+0xac>)
 80109f0:	2201      	movs	r2, #1
 80109f2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80109f4:	e041      	b.n	8010a7a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80109f6:	4b25      	ldr	r3, [pc, #148]	; (8010a8c <vTaskSwitchContext+0xac>)
 80109f8:	2200      	movs	r2, #0
 80109fa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80109fc:	4b24      	ldr	r3, [pc, #144]	; (8010a90 <vTaskSwitchContext+0xb0>)
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	60fb      	str	r3, [r7, #12]
 8010a02:	e010      	b.n	8010a26 <vTaskSwitchContext+0x46>
 8010a04:	68fb      	ldr	r3, [r7, #12]
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d10a      	bne.n	8010a20 <vTaskSwitchContext+0x40>
	__asm volatile
 8010a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a0e:	f383 8811 	msr	BASEPRI, r3
 8010a12:	f3bf 8f6f 	isb	sy
 8010a16:	f3bf 8f4f 	dsb	sy
 8010a1a:	607b      	str	r3, [r7, #4]
}
 8010a1c:	bf00      	nop
 8010a1e:	e7fe      	b.n	8010a1e <vTaskSwitchContext+0x3e>
 8010a20:	68fb      	ldr	r3, [r7, #12]
 8010a22:	3b01      	subs	r3, #1
 8010a24:	60fb      	str	r3, [r7, #12]
 8010a26:	491b      	ldr	r1, [pc, #108]	; (8010a94 <vTaskSwitchContext+0xb4>)
 8010a28:	68fa      	ldr	r2, [r7, #12]
 8010a2a:	4613      	mov	r3, r2
 8010a2c:	009b      	lsls	r3, r3, #2
 8010a2e:	4413      	add	r3, r2
 8010a30:	009b      	lsls	r3, r3, #2
 8010a32:	440b      	add	r3, r1
 8010a34:	681b      	ldr	r3, [r3, #0]
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	d0e4      	beq.n	8010a04 <vTaskSwitchContext+0x24>
 8010a3a:	68fa      	ldr	r2, [r7, #12]
 8010a3c:	4613      	mov	r3, r2
 8010a3e:	009b      	lsls	r3, r3, #2
 8010a40:	4413      	add	r3, r2
 8010a42:	009b      	lsls	r3, r3, #2
 8010a44:	4a13      	ldr	r2, [pc, #76]	; (8010a94 <vTaskSwitchContext+0xb4>)
 8010a46:	4413      	add	r3, r2
 8010a48:	60bb      	str	r3, [r7, #8]
 8010a4a:	68bb      	ldr	r3, [r7, #8]
 8010a4c:	685b      	ldr	r3, [r3, #4]
 8010a4e:	685a      	ldr	r2, [r3, #4]
 8010a50:	68bb      	ldr	r3, [r7, #8]
 8010a52:	605a      	str	r2, [r3, #4]
 8010a54:	68bb      	ldr	r3, [r7, #8]
 8010a56:	685a      	ldr	r2, [r3, #4]
 8010a58:	68bb      	ldr	r3, [r7, #8]
 8010a5a:	3308      	adds	r3, #8
 8010a5c:	429a      	cmp	r2, r3
 8010a5e:	d104      	bne.n	8010a6a <vTaskSwitchContext+0x8a>
 8010a60:	68bb      	ldr	r3, [r7, #8]
 8010a62:	685b      	ldr	r3, [r3, #4]
 8010a64:	685a      	ldr	r2, [r3, #4]
 8010a66:	68bb      	ldr	r3, [r7, #8]
 8010a68:	605a      	str	r2, [r3, #4]
 8010a6a:	68bb      	ldr	r3, [r7, #8]
 8010a6c:	685b      	ldr	r3, [r3, #4]
 8010a6e:	68db      	ldr	r3, [r3, #12]
 8010a70:	4a09      	ldr	r2, [pc, #36]	; (8010a98 <vTaskSwitchContext+0xb8>)
 8010a72:	6013      	str	r3, [r2, #0]
 8010a74:	4a06      	ldr	r2, [pc, #24]	; (8010a90 <vTaskSwitchContext+0xb0>)
 8010a76:	68fb      	ldr	r3, [r7, #12]
 8010a78:	6013      	str	r3, [r2, #0]
}
 8010a7a:	bf00      	nop
 8010a7c:	3714      	adds	r7, #20
 8010a7e:	46bd      	mov	sp, r7
 8010a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a84:	4770      	bx	lr
 8010a86:	bf00      	nop
 8010a88:	24006868 	.word	0x24006868
 8010a8c:	24006854 	.word	0x24006854
 8010a90:	24006848 	.word	0x24006848
 8010a94:	24006370 	.word	0x24006370
 8010a98:	2400636c 	.word	0x2400636c

08010a9c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8010a9c:	b580      	push	{r7, lr}
 8010a9e:	b084      	sub	sp, #16
 8010aa0:	af00      	add	r7, sp, #0
 8010aa2:	6078      	str	r0, [r7, #4]
 8010aa4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	d10a      	bne.n	8010ac2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8010aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ab0:	f383 8811 	msr	BASEPRI, r3
 8010ab4:	f3bf 8f6f 	isb	sy
 8010ab8:	f3bf 8f4f 	dsb	sy
 8010abc:	60fb      	str	r3, [r7, #12]
}
 8010abe:	bf00      	nop
 8010ac0:	e7fe      	b.n	8010ac0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010ac2:	4b07      	ldr	r3, [pc, #28]	; (8010ae0 <vTaskPlaceOnEventList+0x44>)
 8010ac4:	681b      	ldr	r3, [r3, #0]
 8010ac6:	3318      	adds	r3, #24
 8010ac8:	4619      	mov	r1, r3
 8010aca:	6878      	ldr	r0, [r7, #4]
 8010acc:	f7fe f947 	bl	800ed5e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010ad0:	2101      	movs	r1, #1
 8010ad2:	6838      	ldr	r0, [r7, #0]
 8010ad4:	f000 fb7a 	bl	80111cc <prvAddCurrentTaskToDelayedList>
}
 8010ad8:	bf00      	nop
 8010ada:	3710      	adds	r7, #16
 8010adc:	46bd      	mov	sp, r7
 8010ade:	bd80      	pop	{r7, pc}
 8010ae0:	2400636c 	.word	0x2400636c

08010ae4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010ae4:	b580      	push	{r7, lr}
 8010ae6:	b086      	sub	sp, #24
 8010ae8:	af00      	add	r7, sp, #0
 8010aea:	60f8      	str	r0, [r7, #12]
 8010aec:	60b9      	str	r1, [r7, #8]
 8010aee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8010af0:	68fb      	ldr	r3, [r7, #12]
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	d10a      	bne.n	8010b0c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8010af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010afa:	f383 8811 	msr	BASEPRI, r3
 8010afe:	f3bf 8f6f 	isb	sy
 8010b02:	f3bf 8f4f 	dsb	sy
 8010b06:	617b      	str	r3, [r7, #20]
}
 8010b08:	bf00      	nop
 8010b0a:	e7fe      	b.n	8010b0a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010b0c:	4b0a      	ldr	r3, [pc, #40]	; (8010b38 <vTaskPlaceOnEventListRestricted+0x54>)
 8010b0e:	681b      	ldr	r3, [r3, #0]
 8010b10:	3318      	adds	r3, #24
 8010b12:	4619      	mov	r1, r3
 8010b14:	68f8      	ldr	r0, [r7, #12]
 8010b16:	f7fe f8fe 	bl	800ed16 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	d002      	beq.n	8010b26 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8010b20:	f04f 33ff 	mov.w	r3, #4294967295
 8010b24:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8010b26:	6879      	ldr	r1, [r7, #4]
 8010b28:	68b8      	ldr	r0, [r7, #8]
 8010b2a:	f000 fb4f 	bl	80111cc <prvAddCurrentTaskToDelayedList>
	}
 8010b2e:	bf00      	nop
 8010b30:	3718      	adds	r7, #24
 8010b32:	46bd      	mov	sp, r7
 8010b34:	bd80      	pop	{r7, pc}
 8010b36:	bf00      	nop
 8010b38:	2400636c 	.word	0x2400636c

08010b3c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8010b3c:	b580      	push	{r7, lr}
 8010b3e:	b086      	sub	sp, #24
 8010b40:	af00      	add	r7, sp, #0
 8010b42:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	68db      	ldr	r3, [r3, #12]
 8010b48:	68db      	ldr	r3, [r3, #12]
 8010b4a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8010b4c:	693b      	ldr	r3, [r7, #16]
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	d10a      	bne.n	8010b68 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8010b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b56:	f383 8811 	msr	BASEPRI, r3
 8010b5a:	f3bf 8f6f 	isb	sy
 8010b5e:	f3bf 8f4f 	dsb	sy
 8010b62:	60fb      	str	r3, [r7, #12]
}
 8010b64:	bf00      	nop
 8010b66:	e7fe      	b.n	8010b66 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8010b68:	693b      	ldr	r3, [r7, #16]
 8010b6a:	3318      	adds	r3, #24
 8010b6c:	4618      	mov	r0, r3
 8010b6e:	f7fe f92f 	bl	800edd0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010b72:	4b1e      	ldr	r3, [pc, #120]	; (8010bec <xTaskRemoveFromEventList+0xb0>)
 8010b74:	681b      	ldr	r3, [r3, #0]
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d11d      	bne.n	8010bb6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8010b7a:	693b      	ldr	r3, [r7, #16]
 8010b7c:	3304      	adds	r3, #4
 8010b7e:	4618      	mov	r0, r3
 8010b80:	f7fe f926 	bl	800edd0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8010b84:	693b      	ldr	r3, [r7, #16]
 8010b86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010b88:	4b19      	ldr	r3, [pc, #100]	; (8010bf0 <xTaskRemoveFromEventList+0xb4>)
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	429a      	cmp	r2, r3
 8010b8e:	d903      	bls.n	8010b98 <xTaskRemoveFromEventList+0x5c>
 8010b90:	693b      	ldr	r3, [r7, #16]
 8010b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b94:	4a16      	ldr	r2, [pc, #88]	; (8010bf0 <xTaskRemoveFromEventList+0xb4>)
 8010b96:	6013      	str	r3, [r2, #0]
 8010b98:	693b      	ldr	r3, [r7, #16]
 8010b9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010b9c:	4613      	mov	r3, r2
 8010b9e:	009b      	lsls	r3, r3, #2
 8010ba0:	4413      	add	r3, r2
 8010ba2:	009b      	lsls	r3, r3, #2
 8010ba4:	4a13      	ldr	r2, [pc, #76]	; (8010bf4 <xTaskRemoveFromEventList+0xb8>)
 8010ba6:	441a      	add	r2, r3
 8010ba8:	693b      	ldr	r3, [r7, #16]
 8010baa:	3304      	adds	r3, #4
 8010bac:	4619      	mov	r1, r3
 8010bae:	4610      	mov	r0, r2
 8010bb0:	f7fe f8b1 	bl	800ed16 <vListInsertEnd>
 8010bb4:	e005      	b.n	8010bc2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8010bb6:	693b      	ldr	r3, [r7, #16]
 8010bb8:	3318      	adds	r3, #24
 8010bba:	4619      	mov	r1, r3
 8010bbc:	480e      	ldr	r0, [pc, #56]	; (8010bf8 <xTaskRemoveFromEventList+0xbc>)
 8010bbe:	f7fe f8aa 	bl	800ed16 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010bc2:	693b      	ldr	r3, [r7, #16]
 8010bc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010bc6:	4b0d      	ldr	r3, [pc, #52]	; (8010bfc <xTaskRemoveFromEventList+0xc0>)
 8010bc8:	681b      	ldr	r3, [r3, #0]
 8010bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010bcc:	429a      	cmp	r2, r3
 8010bce:	d905      	bls.n	8010bdc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8010bd0:	2301      	movs	r3, #1
 8010bd2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8010bd4:	4b0a      	ldr	r3, [pc, #40]	; (8010c00 <xTaskRemoveFromEventList+0xc4>)
 8010bd6:	2201      	movs	r2, #1
 8010bd8:	601a      	str	r2, [r3, #0]
 8010bda:	e001      	b.n	8010be0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8010bdc:	2300      	movs	r3, #0
 8010bde:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8010be0:	697b      	ldr	r3, [r7, #20]
}
 8010be2:	4618      	mov	r0, r3
 8010be4:	3718      	adds	r7, #24
 8010be6:	46bd      	mov	sp, r7
 8010be8:	bd80      	pop	{r7, pc}
 8010bea:	bf00      	nop
 8010bec:	24006868 	.word	0x24006868
 8010bf0:	24006848 	.word	0x24006848
 8010bf4:	24006370 	.word	0x24006370
 8010bf8:	24006800 	.word	0x24006800
 8010bfc:	2400636c 	.word	0x2400636c
 8010c00:	24006854 	.word	0x24006854

08010c04 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010c04:	b480      	push	{r7}
 8010c06:	b083      	sub	sp, #12
 8010c08:	af00      	add	r7, sp, #0
 8010c0a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010c0c:	4b06      	ldr	r3, [pc, #24]	; (8010c28 <vTaskInternalSetTimeOutState+0x24>)
 8010c0e:	681a      	ldr	r2, [r3, #0]
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010c14:	4b05      	ldr	r3, [pc, #20]	; (8010c2c <vTaskInternalSetTimeOutState+0x28>)
 8010c16:	681a      	ldr	r2, [r3, #0]
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	605a      	str	r2, [r3, #4]
}
 8010c1c:	bf00      	nop
 8010c1e:	370c      	adds	r7, #12
 8010c20:	46bd      	mov	sp, r7
 8010c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c26:	4770      	bx	lr
 8010c28:	24006858 	.word	0x24006858
 8010c2c:	24006844 	.word	0x24006844

08010c30 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8010c30:	b580      	push	{r7, lr}
 8010c32:	b088      	sub	sp, #32
 8010c34:	af00      	add	r7, sp, #0
 8010c36:	6078      	str	r0, [r7, #4]
 8010c38:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	d10a      	bne.n	8010c56 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8010c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c44:	f383 8811 	msr	BASEPRI, r3
 8010c48:	f3bf 8f6f 	isb	sy
 8010c4c:	f3bf 8f4f 	dsb	sy
 8010c50:	613b      	str	r3, [r7, #16]
}
 8010c52:	bf00      	nop
 8010c54:	e7fe      	b.n	8010c54 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8010c56:	683b      	ldr	r3, [r7, #0]
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	d10a      	bne.n	8010c72 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8010c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c60:	f383 8811 	msr	BASEPRI, r3
 8010c64:	f3bf 8f6f 	isb	sy
 8010c68:	f3bf 8f4f 	dsb	sy
 8010c6c:	60fb      	str	r3, [r7, #12]
}
 8010c6e:	bf00      	nop
 8010c70:	e7fe      	b.n	8010c70 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8010c72:	f7fe fa07 	bl	800f084 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8010c76:	4b1d      	ldr	r3, [pc, #116]	; (8010cec <xTaskCheckForTimeOut+0xbc>)
 8010c78:	681b      	ldr	r3, [r3, #0]
 8010c7a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	685b      	ldr	r3, [r3, #4]
 8010c80:	69ba      	ldr	r2, [r7, #24]
 8010c82:	1ad3      	subs	r3, r2, r3
 8010c84:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8010c86:	683b      	ldr	r3, [r7, #0]
 8010c88:	681b      	ldr	r3, [r3, #0]
 8010c8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c8e:	d102      	bne.n	8010c96 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8010c90:	2300      	movs	r3, #0
 8010c92:	61fb      	str	r3, [r7, #28]
 8010c94:	e023      	b.n	8010cde <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	681a      	ldr	r2, [r3, #0]
 8010c9a:	4b15      	ldr	r3, [pc, #84]	; (8010cf0 <xTaskCheckForTimeOut+0xc0>)
 8010c9c:	681b      	ldr	r3, [r3, #0]
 8010c9e:	429a      	cmp	r2, r3
 8010ca0:	d007      	beq.n	8010cb2 <xTaskCheckForTimeOut+0x82>
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	685b      	ldr	r3, [r3, #4]
 8010ca6:	69ba      	ldr	r2, [r7, #24]
 8010ca8:	429a      	cmp	r2, r3
 8010caa:	d302      	bcc.n	8010cb2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8010cac:	2301      	movs	r3, #1
 8010cae:	61fb      	str	r3, [r7, #28]
 8010cb0:	e015      	b.n	8010cde <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8010cb2:	683b      	ldr	r3, [r7, #0]
 8010cb4:	681b      	ldr	r3, [r3, #0]
 8010cb6:	697a      	ldr	r2, [r7, #20]
 8010cb8:	429a      	cmp	r2, r3
 8010cba:	d20b      	bcs.n	8010cd4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8010cbc:	683b      	ldr	r3, [r7, #0]
 8010cbe:	681a      	ldr	r2, [r3, #0]
 8010cc0:	697b      	ldr	r3, [r7, #20]
 8010cc2:	1ad2      	subs	r2, r2, r3
 8010cc4:	683b      	ldr	r3, [r7, #0]
 8010cc6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8010cc8:	6878      	ldr	r0, [r7, #4]
 8010cca:	f7ff ff9b 	bl	8010c04 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8010cce:	2300      	movs	r3, #0
 8010cd0:	61fb      	str	r3, [r7, #28]
 8010cd2:	e004      	b.n	8010cde <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8010cd4:	683b      	ldr	r3, [r7, #0]
 8010cd6:	2200      	movs	r2, #0
 8010cd8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8010cda:	2301      	movs	r3, #1
 8010cdc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8010cde:	f7fe fa01 	bl	800f0e4 <vPortExitCritical>

	return xReturn;
 8010ce2:	69fb      	ldr	r3, [r7, #28]
}
 8010ce4:	4618      	mov	r0, r3
 8010ce6:	3720      	adds	r7, #32
 8010ce8:	46bd      	mov	sp, r7
 8010cea:	bd80      	pop	{r7, pc}
 8010cec:	24006844 	.word	0x24006844
 8010cf0:	24006858 	.word	0x24006858

08010cf4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8010cf4:	b480      	push	{r7}
 8010cf6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8010cf8:	4b03      	ldr	r3, [pc, #12]	; (8010d08 <vTaskMissedYield+0x14>)
 8010cfa:	2201      	movs	r2, #1
 8010cfc:	601a      	str	r2, [r3, #0]
}
 8010cfe:	bf00      	nop
 8010d00:	46bd      	mov	sp, r7
 8010d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d06:	4770      	bx	lr
 8010d08:	24006854 	.word	0x24006854

08010d0c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010d0c:	b580      	push	{r7, lr}
 8010d0e:	b082      	sub	sp, #8
 8010d10:	af00      	add	r7, sp, #0
 8010d12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8010d14:	f000 f852 	bl	8010dbc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010d18:	4b06      	ldr	r3, [pc, #24]	; (8010d34 <prvIdleTask+0x28>)
 8010d1a:	681b      	ldr	r3, [r3, #0]
 8010d1c:	2b01      	cmp	r3, #1
 8010d1e:	d9f9      	bls.n	8010d14 <prvIdleTask+0x8>
			{
				taskYIELD();
 8010d20:	4b05      	ldr	r3, [pc, #20]	; (8010d38 <prvIdleTask+0x2c>)
 8010d22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010d26:	601a      	str	r2, [r3, #0]
 8010d28:	f3bf 8f4f 	dsb	sy
 8010d2c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8010d30:	e7f0      	b.n	8010d14 <prvIdleTask+0x8>
 8010d32:	bf00      	nop
 8010d34:	24006370 	.word	0x24006370
 8010d38:	e000ed04 	.word	0xe000ed04

08010d3c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010d3c:	b580      	push	{r7, lr}
 8010d3e:	b082      	sub	sp, #8
 8010d40:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010d42:	2300      	movs	r3, #0
 8010d44:	607b      	str	r3, [r7, #4]
 8010d46:	e00c      	b.n	8010d62 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010d48:	687a      	ldr	r2, [r7, #4]
 8010d4a:	4613      	mov	r3, r2
 8010d4c:	009b      	lsls	r3, r3, #2
 8010d4e:	4413      	add	r3, r2
 8010d50:	009b      	lsls	r3, r3, #2
 8010d52:	4a12      	ldr	r2, [pc, #72]	; (8010d9c <prvInitialiseTaskLists+0x60>)
 8010d54:	4413      	add	r3, r2
 8010d56:	4618      	mov	r0, r3
 8010d58:	f7fd ffb0 	bl	800ecbc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	3301      	adds	r3, #1
 8010d60:	607b      	str	r3, [r7, #4]
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	2b37      	cmp	r3, #55	; 0x37
 8010d66:	d9ef      	bls.n	8010d48 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010d68:	480d      	ldr	r0, [pc, #52]	; (8010da0 <prvInitialiseTaskLists+0x64>)
 8010d6a:	f7fd ffa7 	bl	800ecbc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8010d6e:	480d      	ldr	r0, [pc, #52]	; (8010da4 <prvInitialiseTaskLists+0x68>)
 8010d70:	f7fd ffa4 	bl	800ecbc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010d74:	480c      	ldr	r0, [pc, #48]	; (8010da8 <prvInitialiseTaskLists+0x6c>)
 8010d76:	f7fd ffa1 	bl	800ecbc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8010d7a:	480c      	ldr	r0, [pc, #48]	; (8010dac <prvInitialiseTaskLists+0x70>)
 8010d7c:	f7fd ff9e 	bl	800ecbc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010d80:	480b      	ldr	r0, [pc, #44]	; (8010db0 <prvInitialiseTaskLists+0x74>)
 8010d82:	f7fd ff9b 	bl	800ecbc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8010d86:	4b0b      	ldr	r3, [pc, #44]	; (8010db4 <prvInitialiseTaskLists+0x78>)
 8010d88:	4a05      	ldr	r2, [pc, #20]	; (8010da0 <prvInitialiseTaskLists+0x64>)
 8010d8a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010d8c:	4b0a      	ldr	r3, [pc, #40]	; (8010db8 <prvInitialiseTaskLists+0x7c>)
 8010d8e:	4a05      	ldr	r2, [pc, #20]	; (8010da4 <prvInitialiseTaskLists+0x68>)
 8010d90:	601a      	str	r2, [r3, #0]
}
 8010d92:	bf00      	nop
 8010d94:	3708      	adds	r7, #8
 8010d96:	46bd      	mov	sp, r7
 8010d98:	bd80      	pop	{r7, pc}
 8010d9a:	bf00      	nop
 8010d9c:	24006370 	.word	0x24006370
 8010da0:	240067d0 	.word	0x240067d0
 8010da4:	240067e4 	.word	0x240067e4
 8010da8:	24006800 	.word	0x24006800
 8010dac:	24006814 	.word	0x24006814
 8010db0:	2400682c 	.word	0x2400682c
 8010db4:	240067f8 	.word	0x240067f8
 8010db8:	240067fc 	.word	0x240067fc

08010dbc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010dbc:	b580      	push	{r7, lr}
 8010dbe:	b082      	sub	sp, #8
 8010dc0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010dc2:	e019      	b.n	8010df8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8010dc4:	f7fe f95e 	bl	800f084 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010dc8:	4b10      	ldr	r3, [pc, #64]	; (8010e0c <prvCheckTasksWaitingTermination+0x50>)
 8010dca:	68db      	ldr	r3, [r3, #12]
 8010dcc:	68db      	ldr	r3, [r3, #12]
 8010dce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	3304      	adds	r3, #4
 8010dd4:	4618      	mov	r0, r3
 8010dd6:	f7fd fffb 	bl	800edd0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8010dda:	4b0d      	ldr	r3, [pc, #52]	; (8010e10 <prvCheckTasksWaitingTermination+0x54>)
 8010ddc:	681b      	ldr	r3, [r3, #0]
 8010dde:	3b01      	subs	r3, #1
 8010de0:	4a0b      	ldr	r2, [pc, #44]	; (8010e10 <prvCheckTasksWaitingTermination+0x54>)
 8010de2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010de4:	4b0b      	ldr	r3, [pc, #44]	; (8010e14 <prvCheckTasksWaitingTermination+0x58>)
 8010de6:	681b      	ldr	r3, [r3, #0]
 8010de8:	3b01      	subs	r3, #1
 8010dea:	4a0a      	ldr	r2, [pc, #40]	; (8010e14 <prvCheckTasksWaitingTermination+0x58>)
 8010dec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8010dee:	f7fe f979 	bl	800f0e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8010df2:	6878      	ldr	r0, [r7, #4]
 8010df4:	f000 f810 	bl	8010e18 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010df8:	4b06      	ldr	r3, [pc, #24]	; (8010e14 <prvCheckTasksWaitingTermination+0x58>)
 8010dfa:	681b      	ldr	r3, [r3, #0]
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	d1e1      	bne.n	8010dc4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010e00:	bf00      	nop
 8010e02:	bf00      	nop
 8010e04:	3708      	adds	r7, #8
 8010e06:	46bd      	mov	sp, r7
 8010e08:	bd80      	pop	{r7, pc}
 8010e0a:	bf00      	nop
 8010e0c:	24006814 	.word	0x24006814
 8010e10:	24006840 	.word	0x24006840
 8010e14:	24006828 	.word	0x24006828

08010e18 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010e18:	b580      	push	{r7, lr}
 8010e1a:	b084      	sub	sp, #16
 8010e1c:	af00      	add	r7, sp, #0
 8010e1e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d108      	bne.n	8010e3c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010e2e:	4618      	mov	r0, r3
 8010e30:	f7fd fe26 	bl	800ea80 <vPortFree>
				vPortFree( pxTCB );
 8010e34:	6878      	ldr	r0, [r7, #4]
 8010e36:	f7fd fe23 	bl	800ea80 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8010e3a:	e018      	b.n	8010e6e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8010e42:	2b01      	cmp	r3, #1
 8010e44:	d103      	bne.n	8010e4e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8010e46:	6878      	ldr	r0, [r7, #4]
 8010e48:	f7fd fe1a 	bl	800ea80 <vPortFree>
	}
 8010e4c:	e00f      	b.n	8010e6e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8010e54:	2b02      	cmp	r3, #2
 8010e56:	d00a      	beq.n	8010e6e <prvDeleteTCB+0x56>
	__asm volatile
 8010e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e5c:	f383 8811 	msr	BASEPRI, r3
 8010e60:	f3bf 8f6f 	isb	sy
 8010e64:	f3bf 8f4f 	dsb	sy
 8010e68:	60fb      	str	r3, [r7, #12]
}
 8010e6a:	bf00      	nop
 8010e6c:	e7fe      	b.n	8010e6c <prvDeleteTCB+0x54>
	}
 8010e6e:	bf00      	nop
 8010e70:	3710      	adds	r7, #16
 8010e72:	46bd      	mov	sp, r7
 8010e74:	bd80      	pop	{r7, pc}
	...

08010e78 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010e78:	b480      	push	{r7}
 8010e7a:	b083      	sub	sp, #12
 8010e7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010e7e:	4b0c      	ldr	r3, [pc, #48]	; (8010eb0 <prvResetNextTaskUnblockTime+0x38>)
 8010e80:	681b      	ldr	r3, [r3, #0]
 8010e82:	681b      	ldr	r3, [r3, #0]
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	d104      	bne.n	8010e92 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010e88:	4b0a      	ldr	r3, [pc, #40]	; (8010eb4 <prvResetNextTaskUnblockTime+0x3c>)
 8010e8a:	f04f 32ff 	mov.w	r2, #4294967295
 8010e8e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010e90:	e008      	b.n	8010ea4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010e92:	4b07      	ldr	r3, [pc, #28]	; (8010eb0 <prvResetNextTaskUnblockTime+0x38>)
 8010e94:	681b      	ldr	r3, [r3, #0]
 8010e96:	68db      	ldr	r3, [r3, #12]
 8010e98:	68db      	ldr	r3, [r3, #12]
 8010e9a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	685b      	ldr	r3, [r3, #4]
 8010ea0:	4a04      	ldr	r2, [pc, #16]	; (8010eb4 <prvResetNextTaskUnblockTime+0x3c>)
 8010ea2:	6013      	str	r3, [r2, #0]
}
 8010ea4:	bf00      	nop
 8010ea6:	370c      	adds	r7, #12
 8010ea8:	46bd      	mov	sp, r7
 8010eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eae:	4770      	bx	lr
 8010eb0:	240067f8 	.word	0x240067f8
 8010eb4:	24006860 	.word	0x24006860

08010eb8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010eb8:	b480      	push	{r7}
 8010eba:	b083      	sub	sp, #12
 8010ebc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8010ebe:	4b0b      	ldr	r3, [pc, #44]	; (8010eec <xTaskGetSchedulerState+0x34>)
 8010ec0:	681b      	ldr	r3, [r3, #0]
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	d102      	bne.n	8010ecc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8010ec6:	2301      	movs	r3, #1
 8010ec8:	607b      	str	r3, [r7, #4]
 8010eca:	e008      	b.n	8010ede <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010ecc:	4b08      	ldr	r3, [pc, #32]	; (8010ef0 <xTaskGetSchedulerState+0x38>)
 8010ece:	681b      	ldr	r3, [r3, #0]
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d102      	bne.n	8010eda <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010ed4:	2302      	movs	r3, #2
 8010ed6:	607b      	str	r3, [r7, #4]
 8010ed8:	e001      	b.n	8010ede <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8010eda:	2300      	movs	r3, #0
 8010edc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8010ede:	687b      	ldr	r3, [r7, #4]
	}
 8010ee0:	4618      	mov	r0, r3
 8010ee2:	370c      	adds	r7, #12
 8010ee4:	46bd      	mov	sp, r7
 8010ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eea:	4770      	bx	lr
 8010eec:	2400684c 	.word	0x2400684c
 8010ef0:	24006868 	.word	0x24006868

08010ef4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8010ef4:	b580      	push	{r7, lr}
 8010ef6:	b084      	sub	sp, #16
 8010ef8:	af00      	add	r7, sp, #0
 8010efa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8010f00:	2300      	movs	r3, #0
 8010f02:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	d051      	beq.n	8010fae <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8010f0a:	68bb      	ldr	r3, [r7, #8]
 8010f0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f0e:	4b2a      	ldr	r3, [pc, #168]	; (8010fb8 <xTaskPriorityInherit+0xc4>)
 8010f10:	681b      	ldr	r3, [r3, #0]
 8010f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f14:	429a      	cmp	r2, r3
 8010f16:	d241      	bcs.n	8010f9c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010f18:	68bb      	ldr	r3, [r7, #8]
 8010f1a:	699b      	ldr	r3, [r3, #24]
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	db06      	blt.n	8010f2e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010f20:	4b25      	ldr	r3, [pc, #148]	; (8010fb8 <xTaskPriorityInherit+0xc4>)
 8010f22:	681b      	ldr	r3, [r3, #0]
 8010f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f26:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010f2a:	68bb      	ldr	r3, [r7, #8]
 8010f2c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8010f2e:	68bb      	ldr	r3, [r7, #8]
 8010f30:	6959      	ldr	r1, [r3, #20]
 8010f32:	68bb      	ldr	r3, [r7, #8]
 8010f34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f36:	4613      	mov	r3, r2
 8010f38:	009b      	lsls	r3, r3, #2
 8010f3a:	4413      	add	r3, r2
 8010f3c:	009b      	lsls	r3, r3, #2
 8010f3e:	4a1f      	ldr	r2, [pc, #124]	; (8010fbc <xTaskPriorityInherit+0xc8>)
 8010f40:	4413      	add	r3, r2
 8010f42:	4299      	cmp	r1, r3
 8010f44:	d122      	bne.n	8010f8c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010f46:	68bb      	ldr	r3, [r7, #8]
 8010f48:	3304      	adds	r3, #4
 8010f4a:	4618      	mov	r0, r3
 8010f4c:	f7fd ff40 	bl	800edd0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010f50:	4b19      	ldr	r3, [pc, #100]	; (8010fb8 <xTaskPriorityInherit+0xc4>)
 8010f52:	681b      	ldr	r3, [r3, #0]
 8010f54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f56:	68bb      	ldr	r3, [r7, #8]
 8010f58:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8010f5a:	68bb      	ldr	r3, [r7, #8]
 8010f5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f5e:	4b18      	ldr	r3, [pc, #96]	; (8010fc0 <xTaskPriorityInherit+0xcc>)
 8010f60:	681b      	ldr	r3, [r3, #0]
 8010f62:	429a      	cmp	r2, r3
 8010f64:	d903      	bls.n	8010f6e <xTaskPriorityInherit+0x7a>
 8010f66:	68bb      	ldr	r3, [r7, #8]
 8010f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f6a:	4a15      	ldr	r2, [pc, #84]	; (8010fc0 <xTaskPriorityInherit+0xcc>)
 8010f6c:	6013      	str	r3, [r2, #0]
 8010f6e:	68bb      	ldr	r3, [r7, #8]
 8010f70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f72:	4613      	mov	r3, r2
 8010f74:	009b      	lsls	r3, r3, #2
 8010f76:	4413      	add	r3, r2
 8010f78:	009b      	lsls	r3, r3, #2
 8010f7a:	4a10      	ldr	r2, [pc, #64]	; (8010fbc <xTaskPriorityInherit+0xc8>)
 8010f7c:	441a      	add	r2, r3
 8010f7e:	68bb      	ldr	r3, [r7, #8]
 8010f80:	3304      	adds	r3, #4
 8010f82:	4619      	mov	r1, r3
 8010f84:	4610      	mov	r0, r2
 8010f86:	f7fd fec6 	bl	800ed16 <vListInsertEnd>
 8010f8a:	e004      	b.n	8010f96 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010f8c:	4b0a      	ldr	r3, [pc, #40]	; (8010fb8 <xTaskPriorityInherit+0xc4>)
 8010f8e:	681b      	ldr	r3, [r3, #0]
 8010f90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f92:	68bb      	ldr	r3, [r7, #8]
 8010f94:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8010f96:	2301      	movs	r3, #1
 8010f98:	60fb      	str	r3, [r7, #12]
 8010f9a:	e008      	b.n	8010fae <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8010f9c:	68bb      	ldr	r3, [r7, #8]
 8010f9e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010fa0:	4b05      	ldr	r3, [pc, #20]	; (8010fb8 <xTaskPriorityInherit+0xc4>)
 8010fa2:	681b      	ldr	r3, [r3, #0]
 8010fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010fa6:	429a      	cmp	r2, r3
 8010fa8:	d201      	bcs.n	8010fae <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8010faa:	2301      	movs	r3, #1
 8010fac:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010fae:	68fb      	ldr	r3, [r7, #12]
	}
 8010fb0:	4618      	mov	r0, r3
 8010fb2:	3710      	adds	r7, #16
 8010fb4:	46bd      	mov	sp, r7
 8010fb6:	bd80      	pop	{r7, pc}
 8010fb8:	2400636c 	.word	0x2400636c
 8010fbc:	24006370 	.word	0x24006370
 8010fc0:	24006848 	.word	0x24006848

08010fc4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010fc4:	b580      	push	{r7, lr}
 8010fc6:	b086      	sub	sp, #24
 8010fc8:	af00      	add	r7, sp, #0
 8010fca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8010fd0:	2300      	movs	r3, #0
 8010fd2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	d056      	beq.n	8011088 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8010fda:	4b2e      	ldr	r3, [pc, #184]	; (8011094 <xTaskPriorityDisinherit+0xd0>)
 8010fdc:	681b      	ldr	r3, [r3, #0]
 8010fde:	693a      	ldr	r2, [r7, #16]
 8010fe0:	429a      	cmp	r2, r3
 8010fe2:	d00a      	beq.n	8010ffa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8010fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fe8:	f383 8811 	msr	BASEPRI, r3
 8010fec:	f3bf 8f6f 	isb	sy
 8010ff0:	f3bf 8f4f 	dsb	sy
 8010ff4:	60fb      	str	r3, [r7, #12]
}
 8010ff6:	bf00      	nop
 8010ff8:	e7fe      	b.n	8010ff8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8010ffa:	693b      	ldr	r3, [r7, #16]
 8010ffc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d10a      	bne.n	8011018 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8011002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011006:	f383 8811 	msr	BASEPRI, r3
 801100a:	f3bf 8f6f 	isb	sy
 801100e:	f3bf 8f4f 	dsb	sy
 8011012:	60bb      	str	r3, [r7, #8]
}
 8011014:	bf00      	nop
 8011016:	e7fe      	b.n	8011016 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8011018:	693b      	ldr	r3, [r7, #16]
 801101a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801101c:	1e5a      	subs	r2, r3, #1
 801101e:	693b      	ldr	r3, [r7, #16]
 8011020:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011022:	693b      	ldr	r3, [r7, #16]
 8011024:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011026:	693b      	ldr	r3, [r7, #16]
 8011028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801102a:	429a      	cmp	r2, r3
 801102c:	d02c      	beq.n	8011088 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801102e:	693b      	ldr	r3, [r7, #16]
 8011030:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011032:	2b00      	cmp	r3, #0
 8011034:	d128      	bne.n	8011088 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011036:	693b      	ldr	r3, [r7, #16]
 8011038:	3304      	adds	r3, #4
 801103a:	4618      	mov	r0, r3
 801103c:	f7fd fec8 	bl	800edd0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011040:	693b      	ldr	r3, [r7, #16]
 8011042:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011044:	693b      	ldr	r3, [r7, #16]
 8011046:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011048:	693b      	ldr	r3, [r7, #16]
 801104a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801104c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011050:	693b      	ldr	r3, [r7, #16]
 8011052:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8011054:	693b      	ldr	r3, [r7, #16]
 8011056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011058:	4b0f      	ldr	r3, [pc, #60]	; (8011098 <xTaskPriorityDisinherit+0xd4>)
 801105a:	681b      	ldr	r3, [r3, #0]
 801105c:	429a      	cmp	r2, r3
 801105e:	d903      	bls.n	8011068 <xTaskPriorityDisinherit+0xa4>
 8011060:	693b      	ldr	r3, [r7, #16]
 8011062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011064:	4a0c      	ldr	r2, [pc, #48]	; (8011098 <xTaskPriorityDisinherit+0xd4>)
 8011066:	6013      	str	r3, [r2, #0]
 8011068:	693b      	ldr	r3, [r7, #16]
 801106a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801106c:	4613      	mov	r3, r2
 801106e:	009b      	lsls	r3, r3, #2
 8011070:	4413      	add	r3, r2
 8011072:	009b      	lsls	r3, r3, #2
 8011074:	4a09      	ldr	r2, [pc, #36]	; (801109c <xTaskPriorityDisinherit+0xd8>)
 8011076:	441a      	add	r2, r3
 8011078:	693b      	ldr	r3, [r7, #16]
 801107a:	3304      	adds	r3, #4
 801107c:	4619      	mov	r1, r3
 801107e:	4610      	mov	r0, r2
 8011080:	f7fd fe49 	bl	800ed16 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011084:	2301      	movs	r3, #1
 8011086:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011088:	697b      	ldr	r3, [r7, #20]
	}
 801108a:	4618      	mov	r0, r3
 801108c:	3718      	adds	r7, #24
 801108e:	46bd      	mov	sp, r7
 8011090:	bd80      	pop	{r7, pc}
 8011092:	bf00      	nop
 8011094:	2400636c 	.word	0x2400636c
 8011098:	24006848 	.word	0x24006848
 801109c:	24006370 	.word	0x24006370

080110a0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80110a0:	b580      	push	{r7, lr}
 80110a2:	b088      	sub	sp, #32
 80110a4:	af00      	add	r7, sp, #0
 80110a6:	6078      	str	r0, [r7, #4]
 80110a8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80110ae:	2301      	movs	r3, #1
 80110b0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	d06a      	beq.n	801118e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80110b8:	69bb      	ldr	r3, [r7, #24]
 80110ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d10a      	bne.n	80110d6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80110c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110c4:	f383 8811 	msr	BASEPRI, r3
 80110c8:	f3bf 8f6f 	isb	sy
 80110cc:	f3bf 8f4f 	dsb	sy
 80110d0:	60fb      	str	r3, [r7, #12]
}
 80110d2:	bf00      	nop
 80110d4:	e7fe      	b.n	80110d4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80110d6:	69bb      	ldr	r3, [r7, #24]
 80110d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80110da:	683a      	ldr	r2, [r7, #0]
 80110dc:	429a      	cmp	r2, r3
 80110de:	d902      	bls.n	80110e6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80110e0:	683b      	ldr	r3, [r7, #0]
 80110e2:	61fb      	str	r3, [r7, #28]
 80110e4:	e002      	b.n	80110ec <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80110e6:	69bb      	ldr	r3, [r7, #24]
 80110e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80110ea:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80110ec:	69bb      	ldr	r3, [r7, #24]
 80110ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80110f0:	69fa      	ldr	r2, [r7, #28]
 80110f2:	429a      	cmp	r2, r3
 80110f4:	d04b      	beq.n	801118e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80110f6:	69bb      	ldr	r3, [r7, #24]
 80110f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80110fa:	697a      	ldr	r2, [r7, #20]
 80110fc:	429a      	cmp	r2, r3
 80110fe:	d146      	bne.n	801118e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8011100:	4b25      	ldr	r3, [pc, #148]	; (8011198 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8011102:	681b      	ldr	r3, [r3, #0]
 8011104:	69ba      	ldr	r2, [r7, #24]
 8011106:	429a      	cmp	r2, r3
 8011108:	d10a      	bne.n	8011120 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 801110a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801110e:	f383 8811 	msr	BASEPRI, r3
 8011112:	f3bf 8f6f 	isb	sy
 8011116:	f3bf 8f4f 	dsb	sy
 801111a:	60bb      	str	r3, [r7, #8]
}
 801111c:	bf00      	nop
 801111e:	e7fe      	b.n	801111e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8011120:	69bb      	ldr	r3, [r7, #24]
 8011122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011124:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8011126:	69bb      	ldr	r3, [r7, #24]
 8011128:	69fa      	ldr	r2, [r7, #28]
 801112a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801112c:	69bb      	ldr	r3, [r7, #24]
 801112e:	699b      	ldr	r3, [r3, #24]
 8011130:	2b00      	cmp	r3, #0
 8011132:	db04      	blt.n	801113e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011134:	69fb      	ldr	r3, [r7, #28]
 8011136:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801113a:	69bb      	ldr	r3, [r7, #24]
 801113c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801113e:	69bb      	ldr	r3, [r7, #24]
 8011140:	6959      	ldr	r1, [r3, #20]
 8011142:	693a      	ldr	r2, [r7, #16]
 8011144:	4613      	mov	r3, r2
 8011146:	009b      	lsls	r3, r3, #2
 8011148:	4413      	add	r3, r2
 801114a:	009b      	lsls	r3, r3, #2
 801114c:	4a13      	ldr	r2, [pc, #76]	; (801119c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801114e:	4413      	add	r3, r2
 8011150:	4299      	cmp	r1, r3
 8011152:	d11c      	bne.n	801118e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011154:	69bb      	ldr	r3, [r7, #24]
 8011156:	3304      	adds	r3, #4
 8011158:	4618      	mov	r0, r3
 801115a:	f7fd fe39 	bl	800edd0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801115e:	69bb      	ldr	r3, [r7, #24]
 8011160:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011162:	4b0f      	ldr	r3, [pc, #60]	; (80111a0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8011164:	681b      	ldr	r3, [r3, #0]
 8011166:	429a      	cmp	r2, r3
 8011168:	d903      	bls.n	8011172 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 801116a:	69bb      	ldr	r3, [r7, #24]
 801116c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801116e:	4a0c      	ldr	r2, [pc, #48]	; (80111a0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8011170:	6013      	str	r3, [r2, #0]
 8011172:	69bb      	ldr	r3, [r7, #24]
 8011174:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011176:	4613      	mov	r3, r2
 8011178:	009b      	lsls	r3, r3, #2
 801117a:	4413      	add	r3, r2
 801117c:	009b      	lsls	r3, r3, #2
 801117e:	4a07      	ldr	r2, [pc, #28]	; (801119c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8011180:	441a      	add	r2, r3
 8011182:	69bb      	ldr	r3, [r7, #24]
 8011184:	3304      	adds	r3, #4
 8011186:	4619      	mov	r1, r3
 8011188:	4610      	mov	r0, r2
 801118a:	f7fd fdc4 	bl	800ed16 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801118e:	bf00      	nop
 8011190:	3720      	adds	r7, #32
 8011192:	46bd      	mov	sp, r7
 8011194:	bd80      	pop	{r7, pc}
 8011196:	bf00      	nop
 8011198:	2400636c 	.word	0x2400636c
 801119c:	24006370 	.word	0x24006370
 80111a0:	24006848 	.word	0x24006848

080111a4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80111a4:	b480      	push	{r7}
 80111a6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80111a8:	4b07      	ldr	r3, [pc, #28]	; (80111c8 <pvTaskIncrementMutexHeldCount+0x24>)
 80111aa:	681b      	ldr	r3, [r3, #0]
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	d004      	beq.n	80111ba <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80111b0:	4b05      	ldr	r3, [pc, #20]	; (80111c8 <pvTaskIncrementMutexHeldCount+0x24>)
 80111b2:	681b      	ldr	r3, [r3, #0]
 80111b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80111b6:	3201      	adds	r2, #1
 80111b8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80111ba:	4b03      	ldr	r3, [pc, #12]	; (80111c8 <pvTaskIncrementMutexHeldCount+0x24>)
 80111bc:	681b      	ldr	r3, [r3, #0]
	}
 80111be:	4618      	mov	r0, r3
 80111c0:	46bd      	mov	sp, r7
 80111c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111c6:	4770      	bx	lr
 80111c8:	2400636c 	.word	0x2400636c

080111cc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80111cc:	b580      	push	{r7, lr}
 80111ce:	b084      	sub	sp, #16
 80111d0:	af00      	add	r7, sp, #0
 80111d2:	6078      	str	r0, [r7, #4]
 80111d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80111d6:	4b21      	ldr	r3, [pc, #132]	; (801125c <prvAddCurrentTaskToDelayedList+0x90>)
 80111d8:	681b      	ldr	r3, [r3, #0]
 80111da:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80111dc:	4b20      	ldr	r3, [pc, #128]	; (8011260 <prvAddCurrentTaskToDelayedList+0x94>)
 80111de:	681b      	ldr	r3, [r3, #0]
 80111e0:	3304      	adds	r3, #4
 80111e2:	4618      	mov	r0, r3
 80111e4:	f7fd fdf4 	bl	800edd0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80111ee:	d10a      	bne.n	8011206 <prvAddCurrentTaskToDelayedList+0x3a>
 80111f0:	683b      	ldr	r3, [r7, #0]
 80111f2:	2b00      	cmp	r3, #0
 80111f4:	d007      	beq.n	8011206 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80111f6:	4b1a      	ldr	r3, [pc, #104]	; (8011260 <prvAddCurrentTaskToDelayedList+0x94>)
 80111f8:	681b      	ldr	r3, [r3, #0]
 80111fa:	3304      	adds	r3, #4
 80111fc:	4619      	mov	r1, r3
 80111fe:	4819      	ldr	r0, [pc, #100]	; (8011264 <prvAddCurrentTaskToDelayedList+0x98>)
 8011200:	f7fd fd89 	bl	800ed16 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011204:	e026      	b.n	8011254 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8011206:	68fa      	ldr	r2, [r7, #12]
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	4413      	add	r3, r2
 801120c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801120e:	4b14      	ldr	r3, [pc, #80]	; (8011260 <prvAddCurrentTaskToDelayedList+0x94>)
 8011210:	681b      	ldr	r3, [r3, #0]
 8011212:	68ba      	ldr	r2, [r7, #8]
 8011214:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011216:	68ba      	ldr	r2, [r7, #8]
 8011218:	68fb      	ldr	r3, [r7, #12]
 801121a:	429a      	cmp	r2, r3
 801121c:	d209      	bcs.n	8011232 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801121e:	4b12      	ldr	r3, [pc, #72]	; (8011268 <prvAddCurrentTaskToDelayedList+0x9c>)
 8011220:	681a      	ldr	r2, [r3, #0]
 8011222:	4b0f      	ldr	r3, [pc, #60]	; (8011260 <prvAddCurrentTaskToDelayedList+0x94>)
 8011224:	681b      	ldr	r3, [r3, #0]
 8011226:	3304      	adds	r3, #4
 8011228:	4619      	mov	r1, r3
 801122a:	4610      	mov	r0, r2
 801122c:	f7fd fd97 	bl	800ed5e <vListInsert>
}
 8011230:	e010      	b.n	8011254 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011232:	4b0e      	ldr	r3, [pc, #56]	; (801126c <prvAddCurrentTaskToDelayedList+0xa0>)
 8011234:	681a      	ldr	r2, [r3, #0]
 8011236:	4b0a      	ldr	r3, [pc, #40]	; (8011260 <prvAddCurrentTaskToDelayedList+0x94>)
 8011238:	681b      	ldr	r3, [r3, #0]
 801123a:	3304      	adds	r3, #4
 801123c:	4619      	mov	r1, r3
 801123e:	4610      	mov	r0, r2
 8011240:	f7fd fd8d 	bl	800ed5e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011244:	4b0a      	ldr	r3, [pc, #40]	; (8011270 <prvAddCurrentTaskToDelayedList+0xa4>)
 8011246:	681b      	ldr	r3, [r3, #0]
 8011248:	68ba      	ldr	r2, [r7, #8]
 801124a:	429a      	cmp	r2, r3
 801124c:	d202      	bcs.n	8011254 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801124e:	4a08      	ldr	r2, [pc, #32]	; (8011270 <prvAddCurrentTaskToDelayedList+0xa4>)
 8011250:	68bb      	ldr	r3, [r7, #8]
 8011252:	6013      	str	r3, [r2, #0]
}
 8011254:	bf00      	nop
 8011256:	3710      	adds	r7, #16
 8011258:	46bd      	mov	sp, r7
 801125a:	bd80      	pop	{r7, pc}
 801125c:	24006844 	.word	0x24006844
 8011260:	2400636c 	.word	0x2400636c
 8011264:	2400682c 	.word	0x2400682c
 8011268:	240067fc 	.word	0x240067fc
 801126c:	240067f8 	.word	0x240067f8
 8011270:	24006860 	.word	0x24006860

08011274 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8011274:	b580      	push	{r7, lr}
 8011276:	b08a      	sub	sp, #40	; 0x28
 8011278:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801127a:	2300      	movs	r3, #0
 801127c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801127e:	f000 fb07 	bl	8011890 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8011282:	4b1c      	ldr	r3, [pc, #112]	; (80112f4 <xTimerCreateTimerTask+0x80>)
 8011284:	681b      	ldr	r3, [r3, #0]
 8011286:	2b00      	cmp	r3, #0
 8011288:	d021      	beq.n	80112ce <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801128a:	2300      	movs	r3, #0
 801128c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801128e:	2300      	movs	r3, #0
 8011290:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8011292:	1d3a      	adds	r2, r7, #4
 8011294:	f107 0108 	add.w	r1, r7, #8
 8011298:	f107 030c 	add.w	r3, r7, #12
 801129c:	4618      	mov	r0, r3
 801129e:	f7fd fb09 	bl	800e8b4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80112a2:	6879      	ldr	r1, [r7, #4]
 80112a4:	68bb      	ldr	r3, [r7, #8]
 80112a6:	68fa      	ldr	r2, [r7, #12]
 80112a8:	9202      	str	r2, [sp, #8]
 80112aa:	9301      	str	r3, [sp, #4]
 80112ac:	2302      	movs	r3, #2
 80112ae:	9300      	str	r3, [sp, #0]
 80112b0:	2300      	movs	r3, #0
 80112b2:	460a      	mov	r2, r1
 80112b4:	4910      	ldr	r1, [pc, #64]	; (80112f8 <xTimerCreateTimerTask+0x84>)
 80112b6:	4811      	ldr	r0, [pc, #68]	; (80112fc <xTimerCreateTimerTask+0x88>)
 80112b8:	f7ff f814 	bl	80102e4 <xTaskCreateStatic>
 80112bc:	4603      	mov	r3, r0
 80112be:	4a10      	ldr	r2, [pc, #64]	; (8011300 <xTimerCreateTimerTask+0x8c>)
 80112c0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80112c2:	4b0f      	ldr	r3, [pc, #60]	; (8011300 <xTimerCreateTimerTask+0x8c>)
 80112c4:	681b      	ldr	r3, [r3, #0]
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	d001      	beq.n	80112ce <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80112ca:	2301      	movs	r3, #1
 80112cc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80112ce:	697b      	ldr	r3, [r7, #20]
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	d10a      	bne.n	80112ea <xTimerCreateTimerTask+0x76>
	__asm volatile
 80112d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112d8:	f383 8811 	msr	BASEPRI, r3
 80112dc:	f3bf 8f6f 	isb	sy
 80112e0:	f3bf 8f4f 	dsb	sy
 80112e4:	613b      	str	r3, [r7, #16]
}
 80112e6:	bf00      	nop
 80112e8:	e7fe      	b.n	80112e8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80112ea:	697b      	ldr	r3, [r7, #20]
}
 80112ec:	4618      	mov	r0, r3
 80112ee:	3718      	adds	r7, #24
 80112f0:	46bd      	mov	sp, r7
 80112f2:	bd80      	pop	{r7, pc}
 80112f4:	2400689c 	.word	0x2400689c
 80112f8:	08022880 	.word	0x08022880
 80112fc:	08011439 	.word	0x08011439
 8011300:	240068a0 	.word	0x240068a0

08011304 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8011304:	b580      	push	{r7, lr}
 8011306:	b08a      	sub	sp, #40	; 0x28
 8011308:	af00      	add	r7, sp, #0
 801130a:	60f8      	str	r0, [r7, #12]
 801130c:	60b9      	str	r1, [r7, #8]
 801130e:	607a      	str	r2, [r7, #4]
 8011310:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8011312:	2300      	movs	r3, #0
 8011314:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8011316:	68fb      	ldr	r3, [r7, #12]
 8011318:	2b00      	cmp	r3, #0
 801131a:	d10a      	bne.n	8011332 <xTimerGenericCommand+0x2e>
	__asm volatile
 801131c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011320:	f383 8811 	msr	BASEPRI, r3
 8011324:	f3bf 8f6f 	isb	sy
 8011328:	f3bf 8f4f 	dsb	sy
 801132c:	623b      	str	r3, [r7, #32]
}
 801132e:	bf00      	nop
 8011330:	e7fe      	b.n	8011330 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8011332:	4b1a      	ldr	r3, [pc, #104]	; (801139c <xTimerGenericCommand+0x98>)
 8011334:	681b      	ldr	r3, [r3, #0]
 8011336:	2b00      	cmp	r3, #0
 8011338:	d02a      	beq.n	8011390 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801133a:	68bb      	ldr	r3, [r7, #8]
 801133c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8011342:	68fb      	ldr	r3, [r7, #12]
 8011344:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8011346:	68bb      	ldr	r3, [r7, #8]
 8011348:	2b05      	cmp	r3, #5
 801134a:	dc18      	bgt.n	801137e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801134c:	f7ff fdb4 	bl	8010eb8 <xTaskGetSchedulerState>
 8011350:	4603      	mov	r3, r0
 8011352:	2b02      	cmp	r3, #2
 8011354:	d109      	bne.n	801136a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8011356:	4b11      	ldr	r3, [pc, #68]	; (801139c <xTimerGenericCommand+0x98>)
 8011358:	6818      	ldr	r0, [r3, #0]
 801135a:	f107 0110 	add.w	r1, r7, #16
 801135e:	2300      	movs	r3, #0
 8011360:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011362:	f7fe f959 	bl	800f618 <xQueueGenericSend>
 8011366:	6278      	str	r0, [r7, #36]	; 0x24
 8011368:	e012      	b.n	8011390 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801136a:	4b0c      	ldr	r3, [pc, #48]	; (801139c <xTimerGenericCommand+0x98>)
 801136c:	6818      	ldr	r0, [r3, #0]
 801136e:	f107 0110 	add.w	r1, r7, #16
 8011372:	2300      	movs	r3, #0
 8011374:	2200      	movs	r2, #0
 8011376:	f7fe f94f 	bl	800f618 <xQueueGenericSend>
 801137a:	6278      	str	r0, [r7, #36]	; 0x24
 801137c:	e008      	b.n	8011390 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801137e:	4b07      	ldr	r3, [pc, #28]	; (801139c <xTimerGenericCommand+0x98>)
 8011380:	6818      	ldr	r0, [r3, #0]
 8011382:	f107 0110 	add.w	r1, r7, #16
 8011386:	2300      	movs	r3, #0
 8011388:	683a      	ldr	r2, [r7, #0]
 801138a:	f7fe fa43 	bl	800f814 <xQueueGenericSendFromISR>
 801138e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8011390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011392:	4618      	mov	r0, r3
 8011394:	3728      	adds	r7, #40	; 0x28
 8011396:	46bd      	mov	sp, r7
 8011398:	bd80      	pop	{r7, pc}
 801139a:	bf00      	nop
 801139c:	2400689c 	.word	0x2400689c

080113a0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80113a0:	b580      	push	{r7, lr}
 80113a2:	b088      	sub	sp, #32
 80113a4:	af02      	add	r7, sp, #8
 80113a6:	6078      	str	r0, [r7, #4]
 80113a8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80113aa:	4b22      	ldr	r3, [pc, #136]	; (8011434 <prvProcessExpiredTimer+0x94>)
 80113ac:	681b      	ldr	r3, [r3, #0]
 80113ae:	68db      	ldr	r3, [r3, #12]
 80113b0:	68db      	ldr	r3, [r3, #12]
 80113b2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80113b4:	697b      	ldr	r3, [r7, #20]
 80113b6:	3304      	adds	r3, #4
 80113b8:	4618      	mov	r0, r3
 80113ba:	f7fd fd09 	bl	800edd0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80113be:	697b      	ldr	r3, [r7, #20]
 80113c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80113c4:	f003 0304 	and.w	r3, r3, #4
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	d022      	beq.n	8011412 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80113cc:	697b      	ldr	r3, [r7, #20]
 80113ce:	699a      	ldr	r2, [r3, #24]
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	18d1      	adds	r1, r2, r3
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	683a      	ldr	r2, [r7, #0]
 80113d8:	6978      	ldr	r0, [r7, #20]
 80113da:	f000 f8d1 	bl	8011580 <prvInsertTimerInActiveList>
 80113de:	4603      	mov	r3, r0
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	d01f      	beq.n	8011424 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80113e4:	2300      	movs	r3, #0
 80113e6:	9300      	str	r3, [sp, #0]
 80113e8:	2300      	movs	r3, #0
 80113ea:	687a      	ldr	r2, [r7, #4]
 80113ec:	2100      	movs	r1, #0
 80113ee:	6978      	ldr	r0, [r7, #20]
 80113f0:	f7ff ff88 	bl	8011304 <xTimerGenericCommand>
 80113f4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80113f6:	693b      	ldr	r3, [r7, #16]
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	d113      	bne.n	8011424 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80113fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011400:	f383 8811 	msr	BASEPRI, r3
 8011404:	f3bf 8f6f 	isb	sy
 8011408:	f3bf 8f4f 	dsb	sy
 801140c:	60fb      	str	r3, [r7, #12]
}
 801140e:	bf00      	nop
 8011410:	e7fe      	b.n	8011410 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011412:	697b      	ldr	r3, [r7, #20]
 8011414:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011418:	f023 0301 	bic.w	r3, r3, #1
 801141c:	b2da      	uxtb	r2, r3
 801141e:	697b      	ldr	r3, [r7, #20]
 8011420:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011424:	697b      	ldr	r3, [r7, #20]
 8011426:	6a1b      	ldr	r3, [r3, #32]
 8011428:	6978      	ldr	r0, [r7, #20]
 801142a:	4798      	blx	r3
}
 801142c:	bf00      	nop
 801142e:	3718      	adds	r7, #24
 8011430:	46bd      	mov	sp, r7
 8011432:	bd80      	pop	{r7, pc}
 8011434:	24006894 	.word	0x24006894

08011438 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8011438:	b580      	push	{r7, lr}
 801143a:	b084      	sub	sp, #16
 801143c:	af00      	add	r7, sp, #0
 801143e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8011440:	f107 0308 	add.w	r3, r7, #8
 8011444:	4618      	mov	r0, r3
 8011446:	f000 f857 	bl	80114f8 <prvGetNextExpireTime>
 801144a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801144c:	68bb      	ldr	r3, [r7, #8]
 801144e:	4619      	mov	r1, r3
 8011450:	68f8      	ldr	r0, [r7, #12]
 8011452:	f000 f803 	bl	801145c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8011456:	f000 f8d5 	bl	8011604 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801145a:	e7f1      	b.n	8011440 <prvTimerTask+0x8>

0801145c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801145c:	b580      	push	{r7, lr}
 801145e:	b084      	sub	sp, #16
 8011460:	af00      	add	r7, sp, #0
 8011462:	6078      	str	r0, [r7, #4]
 8011464:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8011466:	f7ff f945 	bl	80106f4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801146a:	f107 0308 	add.w	r3, r7, #8
 801146e:	4618      	mov	r0, r3
 8011470:	f000 f866 	bl	8011540 <prvSampleTimeNow>
 8011474:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8011476:	68bb      	ldr	r3, [r7, #8]
 8011478:	2b00      	cmp	r3, #0
 801147a:	d130      	bne.n	80114de <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801147c:	683b      	ldr	r3, [r7, #0]
 801147e:	2b00      	cmp	r3, #0
 8011480:	d10a      	bne.n	8011498 <prvProcessTimerOrBlockTask+0x3c>
 8011482:	687a      	ldr	r2, [r7, #4]
 8011484:	68fb      	ldr	r3, [r7, #12]
 8011486:	429a      	cmp	r2, r3
 8011488:	d806      	bhi.n	8011498 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801148a:	f7ff f941 	bl	8010710 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801148e:	68f9      	ldr	r1, [r7, #12]
 8011490:	6878      	ldr	r0, [r7, #4]
 8011492:	f7ff ff85 	bl	80113a0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8011496:	e024      	b.n	80114e2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8011498:	683b      	ldr	r3, [r7, #0]
 801149a:	2b00      	cmp	r3, #0
 801149c:	d008      	beq.n	80114b0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801149e:	4b13      	ldr	r3, [pc, #76]	; (80114ec <prvProcessTimerOrBlockTask+0x90>)
 80114a0:	681b      	ldr	r3, [r3, #0]
 80114a2:	681b      	ldr	r3, [r3, #0]
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	d101      	bne.n	80114ac <prvProcessTimerOrBlockTask+0x50>
 80114a8:	2301      	movs	r3, #1
 80114aa:	e000      	b.n	80114ae <prvProcessTimerOrBlockTask+0x52>
 80114ac:	2300      	movs	r3, #0
 80114ae:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80114b0:	4b0f      	ldr	r3, [pc, #60]	; (80114f0 <prvProcessTimerOrBlockTask+0x94>)
 80114b2:	6818      	ldr	r0, [r3, #0]
 80114b4:	687a      	ldr	r2, [r7, #4]
 80114b6:	68fb      	ldr	r3, [r7, #12]
 80114b8:	1ad3      	subs	r3, r2, r3
 80114ba:	683a      	ldr	r2, [r7, #0]
 80114bc:	4619      	mov	r1, r3
 80114be:	f7fe fedd 	bl	801027c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80114c2:	f7ff f925 	bl	8010710 <xTaskResumeAll>
 80114c6:	4603      	mov	r3, r0
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	d10a      	bne.n	80114e2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80114cc:	4b09      	ldr	r3, [pc, #36]	; (80114f4 <prvProcessTimerOrBlockTask+0x98>)
 80114ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80114d2:	601a      	str	r2, [r3, #0]
 80114d4:	f3bf 8f4f 	dsb	sy
 80114d8:	f3bf 8f6f 	isb	sy
}
 80114dc:	e001      	b.n	80114e2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80114de:	f7ff f917 	bl	8010710 <xTaskResumeAll>
}
 80114e2:	bf00      	nop
 80114e4:	3710      	adds	r7, #16
 80114e6:	46bd      	mov	sp, r7
 80114e8:	bd80      	pop	{r7, pc}
 80114ea:	bf00      	nop
 80114ec:	24006898 	.word	0x24006898
 80114f0:	2400689c 	.word	0x2400689c
 80114f4:	e000ed04 	.word	0xe000ed04

080114f8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80114f8:	b480      	push	{r7}
 80114fa:	b085      	sub	sp, #20
 80114fc:	af00      	add	r7, sp, #0
 80114fe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8011500:	4b0e      	ldr	r3, [pc, #56]	; (801153c <prvGetNextExpireTime+0x44>)
 8011502:	681b      	ldr	r3, [r3, #0]
 8011504:	681b      	ldr	r3, [r3, #0]
 8011506:	2b00      	cmp	r3, #0
 8011508:	d101      	bne.n	801150e <prvGetNextExpireTime+0x16>
 801150a:	2201      	movs	r2, #1
 801150c:	e000      	b.n	8011510 <prvGetNextExpireTime+0x18>
 801150e:	2200      	movs	r2, #0
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	681b      	ldr	r3, [r3, #0]
 8011518:	2b00      	cmp	r3, #0
 801151a:	d105      	bne.n	8011528 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801151c:	4b07      	ldr	r3, [pc, #28]	; (801153c <prvGetNextExpireTime+0x44>)
 801151e:	681b      	ldr	r3, [r3, #0]
 8011520:	68db      	ldr	r3, [r3, #12]
 8011522:	681b      	ldr	r3, [r3, #0]
 8011524:	60fb      	str	r3, [r7, #12]
 8011526:	e001      	b.n	801152c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8011528:	2300      	movs	r3, #0
 801152a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801152c:	68fb      	ldr	r3, [r7, #12]
}
 801152e:	4618      	mov	r0, r3
 8011530:	3714      	adds	r7, #20
 8011532:	46bd      	mov	sp, r7
 8011534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011538:	4770      	bx	lr
 801153a:	bf00      	nop
 801153c:	24006894 	.word	0x24006894

08011540 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8011540:	b580      	push	{r7, lr}
 8011542:	b084      	sub	sp, #16
 8011544:	af00      	add	r7, sp, #0
 8011546:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8011548:	f7ff f980 	bl	801084c <xTaskGetTickCount>
 801154c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801154e:	4b0b      	ldr	r3, [pc, #44]	; (801157c <prvSampleTimeNow+0x3c>)
 8011550:	681b      	ldr	r3, [r3, #0]
 8011552:	68fa      	ldr	r2, [r7, #12]
 8011554:	429a      	cmp	r2, r3
 8011556:	d205      	bcs.n	8011564 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8011558:	f000 f936 	bl	80117c8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	2201      	movs	r2, #1
 8011560:	601a      	str	r2, [r3, #0]
 8011562:	e002      	b.n	801156a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	2200      	movs	r2, #0
 8011568:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801156a:	4a04      	ldr	r2, [pc, #16]	; (801157c <prvSampleTimeNow+0x3c>)
 801156c:	68fb      	ldr	r3, [r7, #12]
 801156e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8011570:	68fb      	ldr	r3, [r7, #12]
}
 8011572:	4618      	mov	r0, r3
 8011574:	3710      	adds	r7, #16
 8011576:	46bd      	mov	sp, r7
 8011578:	bd80      	pop	{r7, pc}
 801157a:	bf00      	nop
 801157c:	240068a4 	.word	0x240068a4

08011580 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8011580:	b580      	push	{r7, lr}
 8011582:	b086      	sub	sp, #24
 8011584:	af00      	add	r7, sp, #0
 8011586:	60f8      	str	r0, [r7, #12]
 8011588:	60b9      	str	r1, [r7, #8]
 801158a:	607a      	str	r2, [r7, #4]
 801158c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801158e:	2300      	movs	r3, #0
 8011590:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8011592:	68fb      	ldr	r3, [r7, #12]
 8011594:	68ba      	ldr	r2, [r7, #8]
 8011596:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011598:	68fb      	ldr	r3, [r7, #12]
 801159a:	68fa      	ldr	r2, [r7, #12]
 801159c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801159e:	68ba      	ldr	r2, [r7, #8]
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	429a      	cmp	r2, r3
 80115a4:	d812      	bhi.n	80115cc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80115a6:	687a      	ldr	r2, [r7, #4]
 80115a8:	683b      	ldr	r3, [r7, #0]
 80115aa:	1ad2      	subs	r2, r2, r3
 80115ac:	68fb      	ldr	r3, [r7, #12]
 80115ae:	699b      	ldr	r3, [r3, #24]
 80115b0:	429a      	cmp	r2, r3
 80115b2:	d302      	bcc.n	80115ba <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80115b4:	2301      	movs	r3, #1
 80115b6:	617b      	str	r3, [r7, #20]
 80115b8:	e01b      	b.n	80115f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80115ba:	4b10      	ldr	r3, [pc, #64]	; (80115fc <prvInsertTimerInActiveList+0x7c>)
 80115bc:	681a      	ldr	r2, [r3, #0]
 80115be:	68fb      	ldr	r3, [r7, #12]
 80115c0:	3304      	adds	r3, #4
 80115c2:	4619      	mov	r1, r3
 80115c4:	4610      	mov	r0, r2
 80115c6:	f7fd fbca 	bl	800ed5e <vListInsert>
 80115ca:	e012      	b.n	80115f2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80115cc:	687a      	ldr	r2, [r7, #4]
 80115ce:	683b      	ldr	r3, [r7, #0]
 80115d0:	429a      	cmp	r2, r3
 80115d2:	d206      	bcs.n	80115e2 <prvInsertTimerInActiveList+0x62>
 80115d4:	68ba      	ldr	r2, [r7, #8]
 80115d6:	683b      	ldr	r3, [r7, #0]
 80115d8:	429a      	cmp	r2, r3
 80115da:	d302      	bcc.n	80115e2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80115dc:	2301      	movs	r3, #1
 80115de:	617b      	str	r3, [r7, #20]
 80115e0:	e007      	b.n	80115f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80115e2:	4b07      	ldr	r3, [pc, #28]	; (8011600 <prvInsertTimerInActiveList+0x80>)
 80115e4:	681a      	ldr	r2, [r3, #0]
 80115e6:	68fb      	ldr	r3, [r7, #12]
 80115e8:	3304      	adds	r3, #4
 80115ea:	4619      	mov	r1, r3
 80115ec:	4610      	mov	r0, r2
 80115ee:	f7fd fbb6 	bl	800ed5e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80115f2:	697b      	ldr	r3, [r7, #20]
}
 80115f4:	4618      	mov	r0, r3
 80115f6:	3718      	adds	r7, #24
 80115f8:	46bd      	mov	sp, r7
 80115fa:	bd80      	pop	{r7, pc}
 80115fc:	24006898 	.word	0x24006898
 8011600:	24006894 	.word	0x24006894

08011604 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8011604:	b580      	push	{r7, lr}
 8011606:	b08e      	sub	sp, #56	; 0x38
 8011608:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801160a:	e0ca      	b.n	80117a2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	2b00      	cmp	r3, #0
 8011610:	da18      	bge.n	8011644 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8011612:	1d3b      	adds	r3, r7, #4
 8011614:	3304      	adds	r3, #4
 8011616:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8011618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801161a:	2b00      	cmp	r3, #0
 801161c:	d10a      	bne.n	8011634 <prvProcessReceivedCommands+0x30>
	__asm volatile
 801161e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011622:	f383 8811 	msr	BASEPRI, r3
 8011626:	f3bf 8f6f 	isb	sy
 801162a:	f3bf 8f4f 	dsb	sy
 801162e:	61fb      	str	r3, [r7, #28]
}
 8011630:	bf00      	nop
 8011632:	e7fe      	b.n	8011632 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8011634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011636:	681b      	ldr	r3, [r3, #0]
 8011638:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801163a:	6850      	ldr	r0, [r2, #4]
 801163c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801163e:	6892      	ldr	r2, [r2, #8]
 8011640:	4611      	mov	r1, r2
 8011642:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	2b00      	cmp	r3, #0
 8011648:	f2c0 80ab 	blt.w	80117a2 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801164c:	68fb      	ldr	r3, [r7, #12]
 801164e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8011650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011652:	695b      	ldr	r3, [r3, #20]
 8011654:	2b00      	cmp	r3, #0
 8011656:	d004      	beq.n	8011662 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801165a:	3304      	adds	r3, #4
 801165c:	4618      	mov	r0, r3
 801165e:	f7fd fbb7 	bl	800edd0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011662:	463b      	mov	r3, r7
 8011664:	4618      	mov	r0, r3
 8011666:	f7ff ff6b 	bl	8011540 <prvSampleTimeNow>
 801166a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	2b09      	cmp	r3, #9
 8011670:	f200 8096 	bhi.w	80117a0 <prvProcessReceivedCommands+0x19c>
 8011674:	a201      	add	r2, pc, #4	; (adr r2, 801167c <prvProcessReceivedCommands+0x78>)
 8011676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801167a:	bf00      	nop
 801167c:	080116a5 	.word	0x080116a5
 8011680:	080116a5 	.word	0x080116a5
 8011684:	080116a5 	.word	0x080116a5
 8011688:	08011719 	.word	0x08011719
 801168c:	0801172d 	.word	0x0801172d
 8011690:	08011777 	.word	0x08011777
 8011694:	080116a5 	.word	0x080116a5
 8011698:	080116a5 	.word	0x080116a5
 801169c:	08011719 	.word	0x08011719
 80116a0:	0801172d 	.word	0x0801172d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80116a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80116aa:	f043 0301 	orr.w	r3, r3, #1
 80116ae:	b2da      	uxtb	r2, r3
 80116b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80116b6:	68ba      	ldr	r2, [r7, #8]
 80116b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116ba:	699b      	ldr	r3, [r3, #24]
 80116bc:	18d1      	adds	r1, r2, r3
 80116be:	68bb      	ldr	r3, [r7, #8]
 80116c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80116c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80116c4:	f7ff ff5c 	bl	8011580 <prvInsertTimerInActiveList>
 80116c8:	4603      	mov	r3, r0
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	d069      	beq.n	80117a2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80116ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116d0:	6a1b      	ldr	r3, [r3, #32]
 80116d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80116d4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80116d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80116dc:	f003 0304 	and.w	r3, r3, #4
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d05e      	beq.n	80117a2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80116e4:	68ba      	ldr	r2, [r7, #8]
 80116e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116e8:	699b      	ldr	r3, [r3, #24]
 80116ea:	441a      	add	r2, r3
 80116ec:	2300      	movs	r3, #0
 80116ee:	9300      	str	r3, [sp, #0]
 80116f0:	2300      	movs	r3, #0
 80116f2:	2100      	movs	r1, #0
 80116f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80116f6:	f7ff fe05 	bl	8011304 <xTimerGenericCommand>
 80116fa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80116fc:	6a3b      	ldr	r3, [r7, #32]
 80116fe:	2b00      	cmp	r3, #0
 8011700:	d14f      	bne.n	80117a2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8011702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011706:	f383 8811 	msr	BASEPRI, r3
 801170a:	f3bf 8f6f 	isb	sy
 801170e:	f3bf 8f4f 	dsb	sy
 8011712:	61bb      	str	r3, [r7, #24]
}
 8011714:	bf00      	nop
 8011716:	e7fe      	b.n	8011716 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801171a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801171e:	f023 0301 	bic.w	r3, r3, #1
 8011722:	b2da      	uxtb	r2, r3
 8011724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011726:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801172a:	e03a      	b.n	80117a2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801172c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801172e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011732:	f043 0301 	orr.w	r3, r3, #1
 8011736:	b2da      	uxtb	r2, r3
 8011738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801173a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801173e:	68ba      	ldr	r2, [r7, #8]
 8011740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011742:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8011744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011746:	699b      	ldr	r3, [r3, #24]
 8011748:	2b00      	cmp	r3, #0
 801174a:	d10a      	bne.n	8011762 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 801174c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011750:	f383 8811 	msr	BASEPRI, r3
 8011754:	f3bf 8f6f 	isb	sy
 8011758:	f3bf 8f4f 	dsb	sy
 801175c:	617b      	str	r3, [r7, #20]
}
 801175e:	bf00      	nop
 8011760:	e7fe      	b.n	8011760 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8011762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011764:	699a      	ldr	r2, [r3, #24]
 8011766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011768:	18d1      	adds	r1, r2, r3
 801176a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801176c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801176e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011770:	f7ff ff06 	bl	8011580 <prvInsertTimerInActiveList>
					break;
 8011774:	e015      	b.n	80117a2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8011776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011778:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801177c:	f003 0302 	and.w	r3, r3, #2
 8011780:	2b00      	cmp	r3, #0
 8011782:	d103      	bne.n	801178c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8011784:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011786:	f7fd f97b 	bl	800ea80 <vPortFree>
 801178a:	e00a      	b.n	80117a2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801178c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801178e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011792:	f023 0301 	bic.w	r3, r3, #1
 8011796:	b2da      	uxtb	r2, r3
 8011798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801179a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801179e:	e000      	b.n	80117a2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80117a0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80117a2:	4b08      	ldr	r3, [pc, #32]	; (80117c4 <prvProcessReceivedCommands+0x1c0>)
 80117a4:	681b      	ldr	r3, [r3, #0]
 80117a6:	1d39      	adds	r1, r7, #4
 80117a8:	2200      	movs	r2, #0
 80117aa:	4618      	mov	r0, r3
 80117ac:	f7fe f95a 	bl	800fa64 <xQueueReceive>
 80117b0:	4603      	mov	r3, r0
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	f47f af2a 	bne.w	801160c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80117b8:	bf00      	nop
 80117ba:	bf00      	nop
 80117bc:	3730      	adds	r7, #48	; 0x30
 80117be:	46bd      	mov	sp, r7
 80117c0:	bd80      	pop	{r7, pc}
 80117c2:	bf00      	nop
 80117c4:	2400689c 	.word	0x2400689c

080117c8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80117c8:	b580      	push	{r7, lr}
 80117ca:	b088      	sub	sp, #32
 80117cc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80117ce:	e048      	b.n	8011862 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80117d0:	4b2d      	ldr	r3, [pc, #180]	; (8011888 <prvSwitchTimerLists+0xc0>)
 80117d2:	681b      	ldr	r3, [r3, #0]
 80117d4:	68db      	ldr	r3, [r3, #12]
 80117d6:	681b      	ldr	r3, [r3, #0]
 80117d8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80117da:	4b2b      	ldr	r3, [pc, #172]	; (8011888 <prvSwitchTimerLists+0xc0>)
 80117dc:	681b      	ldr	r3, [r3, #0]
 80117de:	68db      	ldr	r3, [r3, #12]
 80117e0:	68db      	ldr	r3, [r3, #12]
 80117e2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80117e4:	68fb      	ldr	r3, [r7, #12]
 80117e6:	3304      	adds	r3, #4
 80117e8:	4618      	mov	r0, r3
 80117ea:	f7fd faf1 	bl	800edd0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80117ee:	68fb      	ldr	r3, [r7, #12]
 80117f0:	6a1b      	ldr	r3, [r3, #32]
 80117f2:	68f8      	ldr	r0, [r7, #12]
 80117f4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80117f6:	68fb      	ldr	r3, [r7, #12]
 80117f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80117fc:	f003 0304 	and.w	r3, r3, #4
 8011800:	2b00      	cmp	r3, #0
 8011802:	d02e      	beq.n	8011862 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8011804:	68fb      	ldr	r3, [r7, #12]
 8011806:	699b      	ldr	r3, [r3, #24]
 8011808:	693a      	ldr	r2, [r7, #16]
 801180a:	4413      	add	r3, r2
 801180c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801180e:	68ba      	ldr	r2, [r7, #8]
 8011810:	693b      	ldr	r3, [r7, #16]
 8011812:	429a      	cmp	r2, r3
 8011814:	d90e      	bls.n	8011834 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8011816:	68fb      	ldr	r3, [r7, #12]
 8011818:	68ba      	ldr	r2, [r7, #8]
 801181a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801181c:	68fb      	ldr	r3, [r7, #12]
 801181e:	68fa      	ldr	r2, [r7, #12]
 8011820:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011822:	4b19      	ldr	r3, [pc, #100]	; (8011888 <prvSwitchTimerLists+0xc0>)
 8011824:	681a      	ldr	r2, [r3, #0]
 8011826:	68fb      	ldr	r3, [r7, #12]
 8011828:	3304      	adds	r3, #4
 801182a:	4619      	mov	r1, r3
 801182c:	4610      	mov	r0, r2
 801182e:	f7fd fa96 	bl	800ed5e <vListInsert>
 8011832:	e016      	b.n	8011862 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011834:	2300      	movs	r3, #0
 8011836:	9300      	str	r3, [sp, #0]
 8011838:	2300      	movs	r3, #0
 801183a:	693a      	ldr	r2, [r7, #16]
 801183c:	2100      	movs	r1, #0
 801183e:	68f8      	ldr	r0, [r7, #12]
 8011840:	f7ff fd60 	bl	8011304 <xTimerGenericCommand>
 8011844:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	2b00      	cmp	r3, #0
 801184a:	d10a      	bne.n	8011862 <prvSwitchTimerLists+0x9a>
	__asm volatile
 801184c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011850:	f383 8811 	msr	BASEPRI, r3
 8011854:	f3bf 8f6f 	isb	sy
 8011858:	f3bf 8f4f 	dsb	sy
 801185c:	603b      	str	r3, [r7, #0]
}
 801185e:	bf00      	nop
 8011860:	e7fe      	b.n	8011860 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011862:	4b09      	ldr	r3, [pc, #36]	; (8011888 <prvSwitchTimerLists+0xc0>)
 8011864:	681b      	ldr	r3, [r3, #0]
 8011866:	681b      	ldr	r3, [r3, #0]
 8011868:	2b00      	cmp	r3, #0
 801186a:	d1b1      	bne.n	80117d0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801186c:	4b06      	ldr	r3, [pc, #24]	; (8011888 <prvSwitchTimerLists+0xc0>)
 801186e:	681b      	ldr	r3, [r3, #0]
 8011870:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8011872:	4b06      	ldr	r3, [pc, #24]	; (801188c <prvSwitchTimerLists+0xc4>)
 8011874:	681b      	ldr	r3, [r3, #0]
 8011876:	4a04      	ldr	r2, [pc, #16]	; (8011888 <prvSwitchTimerLists+0xc0>)
 8011878:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801187a:	4a04      	ldr	r2, [pc, #16]	; (801188c <prvSwitchTimerLists+0xc4>)
 801187c:	697b      	ldr	r3, [r7, #20]
 801187e:	6013      	str	r3, [r2, #0]
}
 8011880:	bf00      	nop
 8011882:	3718      	adds	r7, #24
 8011884:	46bd      	mov	sp, r7
 8011886:	bd80      	pop	{r7, pc}
 8011888:	24006894 	.word	0x24006894
 801188c:	24006898 	.word	0x24006898

08011890 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8011890:	b580      	push	{r7, lr}
 8011892:	b082      	sub	sp, #8
 8011894:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8011896:	f7fd fbf5 	bl	800f084 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801189a:	4b15      	ldr	r3, [pc, #84]	; (80118f0 <prvCheckForValidListAndQueue+0x60>)
 801189c:	681b      	ldr	r3, [r3, #0]
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d120      	bne.n	80118e4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80118a2:	4814      	ldr	r0, [pc, #80]	; (80118f4 <prvCheckForValidListAndQueue+0x64>)
 80118a4:	f7fd fa0a 	bl	800ecbc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80118a8:	4813      	ldr	r0, [pc, #76]	; (80118f8 <prvCheckForValidListAndQueue+0x68>)
 80118aa:	f7fd fa07 	bl	800ecbc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80118ae:	4b13      	ldr	r3, [pc, #76]	; (80118fc <prvCheckForValidListAndQueue+0x6c>)
 80118b0:	4a10      	ldr	r2, [pc, #64]	; (80118f4 <prvCheckForValidListAndQueue+0x64>)
 80118b2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80118b4:	4b12      	ldr	r3, [pc, #72]	; (8011900 <prvCheckForValidListAndQueue+0x70>)
 80118b6:	4a10      	ldr	r2, [pc, #64]	; (80118f8 <prvCheckForValidListAndQueue+0x68>)
 80118b8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80118ba:	2300      	movs	r3, #0
 80118bc:	9300      	str	r3, [sp, #0]
 80118be:	4b11      	ldr	r3, [pc, #68]	; (8011904 <prvCheckForValidListAndQueue+0x74>)
 80118c0:	4a11      	ldr	r2, [pc, #68]	; (8011908 <prvCheckForValidListAndQueue+0x78>)
 80118c2:	2110      	movs	r1, #16
 80118c4:	200a      	movs	r0, #10
 80118c6:	f7fd fd67 	bl	800f398 <xQueueGenericCreateStatic>
 80118ca:	4603      	mov	r3, r0
 80118cc:	4a08      	ldr	r2, [pc, #32]	; (80118f0 <prvCheckForValidListAndQueue+0x60>)
 80118ce:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80118d0:	4b07      	ldr	r3, [pc, #28]	; (80118f0 <prvCheckForValidListAndQueue+0x60>)
 80118d2:	681b      	ldr	r3, [r3, #0]
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	d005      	beq.n	80118e4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80118d8:	4b05      	ldr	r3, [pc, #20]	; (80118f0 <prvCheckForValidListAndQueue+0x60>)
 80118da:	681b      	ldr	r3, [r3, #0]
 80118dc:	490b      	ldr	r1, [pc, #44]	; (801190c <prvCheckForValidListAndQueue+0x7c>)
 80118de:	4618      	mov	r0, r3
 80118e0:	f7fe fc78 	bl	80101d4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80118e4:	f7fd fbfe 	bl	800f0e4 <vPortExitCritical>
}
 80118e8:	bf00      	nop
 80118ea:	46bd      	mov	sp, r7
 80118ec:	bd80      	pop	{r7, pc}
 80118ee:	bf00      	nop
 80118f0:	2400689c 	.word	0x2400689c
 80118f4:	2400686c 	.word	0x2400686c
 80118f8:	24006880 	.word	0x24006880
 80118fc:	24006894 	.word	0x24006894
 8011900:	24006898 	.word	0x24006898
 8011904:	24006948 	.word	0x24006948
 8011908:	240068a8 	.word	0x240068a8
 801190c:	08022888 	.word	0x08022888

08011910 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8011910:	8880      	ldrh	r0, [r0, #4]
 8011912:	4770      	bx	lr

08011914 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8011914:	b570      	push	{r4, r5, r6, lr}
 8011916:	6803      	ldr	r3, [r0, #0]
 8011918:	460c      	mov	r4, r1
 801191a:	2100      	movs	r1, #0
 801191c:	4605      	mov	r5, r0
 801191e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011920:	4798      	blx	r3
 8011922:	4606      	mov	r6, r0
 8011924:	682b      	ldr	r3, [r5, #0]
 8011926:	4628      	mov	r0, r5
 8011928:	1ba4      	subs	r4, r4, r6
 801192a:	6a1b      	ldr	r3, [r3, #32]
 801192c:	b2a4      	uxth	r4, r4
 801192e:	4798      	blx	r3
 8011930:	fbb4 f0f0 	udiv	r0, r4, r0
 8011934:	bd70      	pop	{r4, r5, r6, pc}

08011936 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8011936:	2300      	movs	r3, #0
 8011938:	8083      	strh	r3, [r0, #4]
 801193a:	4770      	bx	lr

0801193c <_ZN8touchgfx17AbstractPartition8allocateEt>:
 801193c:	b510      	push	{r4, lr}
 801193e:	6803      	ldr	r3, [r0, #0]
 8011940:	4604      	mov	r4, r0
 8011942:	8881      	ldrh	r1, [r0, #4]
 8011944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011946:	4798      	blx	r3
 8011948:	88a3      	ldrh	r3, [r4, #4]
 801194a:	3301      	adds	r3, #1
 801194c:	80a3      	strh	r3, [r4, #4]
 801194e:	bd10      	pop	{r4, pc}

08011950 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8011950:	6803      	ldr	r3, [r0, #0]
 8011952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011954:	4718      	bx	r3

08011956 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8011956:	4770      	bx	lr

08011958 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8011958:	4a02      	ldr	r2, [pc, #8]	; (8011964 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 801195a:	6002      	str	r2, [r0, #0]
 801195c:	2200      	movs	r2, #0
 801195e:	8082      	strh	r2, [r0, #4]
 8011960:	4770      	bx	lr
 8011962:	bf00      	nop
 8011964:	080230b0 	.word	0x080230b0

08011968 <_ZN8touchgfx9Container13getFirstChildEv>:
 8011968:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801196a:	4770      	bx	lr

0801196c <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 801196c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801196e:	2000      	movs	r0, #0
 8011970:	b12b      	cbz	r3, 801197e <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8011972:	b920      	cbnz	r0, 801197e <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8011974:	1a5a      	subs	r2, r3, r1
 8011976:	699b      	ldr	r3, [r3, #24]
 8011978:	4250      	negs	r0, r2
 801197a:	4150      	adcs	r0, r2
 801197c:	e7f8      	b.n	8011970 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 801197e:	4770      	bx	lr

08011980 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8011980:	2300      	movs	r3, #0
 8011982:	6148      	str	r0, [r1, #20]
 8011984:	618b      	str	r3, [r1, #24]
 8011986:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8011988:	b913      	cbnz	r3, 8011990 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 801198a:	6281      	str	r1, [r0, #40]	; 0x28
 801198c:	4770      	bx	lr
 801198e:	4613      	mov	r3, r2
 8011990:	699a      	ldr	r2, [r3, #24]
 8011992:	2a00      	cmp	r2, #0
 8011994:	d1fb      	bne.n	801198e <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 8011996:	6199      	str	r1, [r3, #24]
 8011998:	4770      	bx	lr

0801199a <_ZN8touchgfx9Container9removeAllEv>:
 801199a:	2200      	movs	r2, #0
 801199c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801199e:	b123      	cbz	r3, 80119aa <_ZN8touchgfx9Container9removeAllEv+0x10>
 80119a0:	6999      	ldr	r1, [r3, #24]
 80119a2:	6281      	str	r1, [r0, #40]	; 0x28
 80119a4:	e9c3 2205 	strd	r2, r2, [r3, #20]
 80119a8:	e7f8      	b.n	801199c <_ZN8touchgfx9Container9removeAllEv+0x2>
 80119aa:	4770      	bx	lr

080119ac <_ZN8touchgfx9Container6unlinkEv>:
 80119ac:	2300      	movs	r3, #0
 80119ae:	6283      	str	r3, [r0, #40]	; 0x28
 80119b0:	4770      	bx	lr

080119b2 <_ZNK8touchgfx9Container12getSolidRectEv>:
 80119b2:	2200      	movs	r2, #0
 80119b4:	8002      	strh	r2, [r0, #0]
 80119b6:	8042      	strh	r2, [r0, #2]
 80119b8:	8082      	strh	r2, [r0, #4]
 80119ba:	80c2      	strh	r2, [r0, #6]
 80119bc:	4770      	bx	lr

080119be <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 80119be:	b570      	push	{r4, r5, r6, lr}
 80119c0:	460d      	mov	r5, r1
 80119c2:	4616      	mov	r6, r2
 80119c4:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80119c6:	b13c      	cbz	r4, 80119d8 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 80119c8:	6823      	ldr	r3, [r4, #0]
 80119ca:	4620      	mov	r0, r4
 80119cc:	4632      	mov	r2, r6
 80119ce:	4629      	mov	r1, r5
 80119d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80119d2:	4798      	blx	r3
 80119d4:	69a4      	ldr	r4, [r4, #24]
 80119d6:	e7f6      	b.n	80119c6 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 80119d8:	bd70      	pop	{r4, r5, r6, pc}

080119da <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 80119da:	b538      	push	{r3, r4, r5, lr}
 80119dc:	460d      	mov	r5, r1
 80119de:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80119e0:	b134      	cbz	r4, 80119f0 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 80119e2:	682b      	ldr	r3, [r5, #0]
 80119e4:	4621      	mov	r1, r4
 80119e6:	4628      	mov	r0, r5
 80119e8:	689b      	ldr	r3, [r3, #8]
 80119ea:	4798      	blx	r3
 80119ec:	69a4      	ldr	r4, [r4, #24]
 80119ee:	e7f7      	b.n	80119e0 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 80119f0:	bd38      	pop	{r3, r4, r5, pc}

080119f2 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 80119f2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80119f4:	b19b      	cbz	r3, 8011a1e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 80119f6:	428b      	cmp	r3, r1
 80119f8:	d109      	bne.n	8011a0e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 80119fa:	699a      	ldr	r2, [r3, #24]
 80119fc:	2100      	movs	r1, #0
 80119fe:	6159      	str	r1, [r3, #20]
 8011a00:	6282      	str	r2, [r0, #40]	; 0x28
 8011a02:	b902      	cbnz	r2, 8011a06 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8011a04:	4770      	bx	lr
 8011a06:	6199      	str	r1, [r3, #24]
 8011a08:	4770      	bx	lr
 8011a0a:	4613      	mov	r3, r2
 8011a0c:	b13a      	cbz	r2, 8011a1e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8011a0e:	699a      	ldr	r2, [r3, #24]
 8011a10:	428a      	cmp	r2, r1
 8011a12:	d1fa      	bne.n	8011a0a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8011a14:	698a      	ldr	r2, [r1, #24]
 8011a16:	619a      	str	r2, [r3, #24]
 8011a18:	2300      	movs	r3, #0
 8011a1a:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8011a1e:	4770      	bx	lr

08011a20 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8011a20:	b410      	push	{r4}
 8011a22:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8011a24:	4604      	mov	r4, r0
 8011a26:	b92b      	cbnz	r3, 8011a34 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8011a28:	6803      	ldr	r3, [r0, #0]
 8011a2a:	4611      	mov	r1, r2
 8011a2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011a30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011a32:	4718      	bx	r3
 8011a34:	b941      	cbnz	r1, 8011a48 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8011a36:	6193      	str	r3, [r2, #24]
 8011a38:	6282      	str	r2, [r0, #40]	; 0x28
 8011a3a:	6154      	str	r4, [r2, #20]
 8011a3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011a40:	4770      	bx	lr
 8011a42:	4603      	mov	r3, r0
 8011a44:	2800      	cmp	r0, #0
 8011a46:	d0f9      	beq.n	8011a3c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8011a48:	4299      	cmp	r1, r3
 8011a4a:	6998      	ldr	r0, [r3, #24]
 8011a4c:	d1f9      	bne.n	8011a42 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8011a4e:	6190      	str	r0, [r2, #24]
 8011a50:	618a      	str	r2, [r1, #24]
 8011a52:	e7f2      	b.n	8011a3a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

08011a54 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8011a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a58:	461f      	mov	r7, r3
 8011a5a:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8011a5e:	460d      	mov	r5, r1
 8011a60:	4616      	mov	r6, r2
 8011a62:	b103      	cbz	r3, 8011a66 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8011a64:	6038      	str	r0, [r7, #0]
 8011a66:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8011a68:	b314      	cbz	r4, 8011ab0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8011a6a:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8011a6e:	b1eb      	cbz	r3, 8011aac <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8011a70:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8011a74:	428d      	cmp	r5, r1
 8011a76:	db19      	blt.n	8011aac <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8011a78:	b289      	uxth	r1, r1
 8011a7a:	8923      	ldrh	r3, [r4, #8]
 8011a7c:	440b      	add	r3, r1
 8011a7e:	b21b      	sxth	r3, r3
 8011a80:	429d      	cmp	r5, r3
 8011a82:	da13      	bge.n	8011aac <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8011a84:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8011a88:	4296      	cmp	r6, r2
 8011a8a:	db0f      	blt.n	8011aac <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8011a8c:	b292      	uxth	r2, r2
 8011a8e:	8963      	ldrh	r3, [r4, #10]
 8011a90:	4413      	add	r3, r2
 8011a92:	b21b      	sxth	r3, r3
 8011a94:	429e      	cmp	r6, r3
 8011a96:	da09      	bge.n	8011aac <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8011a98:	6823      	ldr	r3, [r4, #0]
 8011a9a:	1ab2      	subs	r2, r6, r2
 8011a9c:	1a69      	subs	r1, r5, r1
 8011a9e:	4620      	mov	r0, r4
 8011aa0:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 8011aa4:	b212      	sxth	r2, r2
 8011aa6:	463b      	mov	r3, r7
 8011aa8:	b209      	sxth	r1, r1
 8011aaa:	47c0      	blx	r8
 8011aac:	69a4      	ldr	r4, [r4, #24]
 8011aae:	e7db      	b.n	8011a68 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8011ab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011ab4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8011ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ab8:	4c6d      	ldr	r4, [pc, #436]	; (8011c70 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 8011aba:	b0a1      	sub	sp, #132	; 0x84
 8011abc:	4606      	mov	r6, r0
 8011abe:	6824      	ldr	r4, [r4, #0]
 8011ac0:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8011ac2:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 8011ac6:	2400      	movs	r4, #0
 8011ac8:	9303      	str	r3, [sp, #12]
 8011aca:	802c      	strh	r4, [r5, #0]
 8011acc:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 8011ace:	802c      	strh	r4, [r5, #0]
 8011ad0:	601c      	str	r4, [r3, #0]
 8011ad2:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8011ad6:	f7ff ffbd 	bl	8011a54 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8011ada:	f1b9 0f03 	cmp.w	r9, #3
 8011ade:	f340 80c1 	ble.w	8011c64 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 8011ae2:	4631      	mov	r1, r6
 8011ae4:	a80c      	add	r0, sp, #48	; 0x30
 8011ae6:	f004 fabd 	bl	8016064 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011aea:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8011aee:	9306      	str	r3, [sp, #24]
 8011af0:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8011af4:	9307      	str	r3, [sp, #28]
 8011af6:	9b03      	ldr	r3, [sp, #12]
 8011af8:	f8d3 a000 	ldr.w	sl, [r3]
 8011afc:	f1ba 0f00 	cmp.w	sl, #0
 8011b00:	f000 80b3 	beq.w	8011c6a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 8011b04:	4651      	mov	r1, sl
 8011b06:	a810      	add	r0, sp, #64	; 0x40
 8011b08:	f004 faac 	bl	8016064 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011b0c:	2002      	movs	r0, #2
 8011b0e:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 8011b12:	9b01      	ldr	r3, [sp, #4]
 8011b14:	9a06      	ldr	r2, [sp, #24]
 8011b16:	fb91 f1f0 	sdiv	r1, r1, r0
 8011b1a:	189d      	adds	r5, r3, r2
 8011b1c:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 8011b20:	9a07      	ldr	r2, [sp, #28]
 8011b22:	4419      	add	r1, r3
 8011b24:	9b02      	ldr	r3, [sp, #8]
 8011b26:	4413      	add	r3, r2
 8011b28:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 8011b2c:	1a6d      	subs	r5, r5, r1
 8011b2e:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8011b32:	fb92 f2f0 	sdiv	r2, r2, r0
 8011b36:	440a      	add	r2, r1
 8011b38:	1a9b      	subs	r3, r3, r2
 8011b3a:	435b      	muls	r3, r3
 8011b3c:	fb05 3505 	mla	r5, r5, r5, r3
 8011b40:	4f4c      	ldr	r7, [pc, #304]	; (8011c74 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 8011b42:	ac10      	add	r4, sp, #64	; 0x40
 8011b44:	f1b9 0f0c 	cmp.w	r9, #12
 8011b48:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8011b4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011b4c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8011b4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011b50:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8011b52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011b54:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8011b58:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8011b5c:	f04f 0303 	mov.w	r3, #3
 8011b60:	bfd8      	it	le
 8011b62:	f109 32ff 	addle.w	r2, r9, #4294967295
 8011b66:	f04f 0400 	mov.w	r4, #0
 8011b6a:	f8cd 9000 	str.w	r9, [sp]
 8011b6e:	bfcc      	ite	gt
 8011b70:	4698      	movgt	r8, r3
 8011b72:	fb92 f8f3 	sdivle	r8, r2, r3
 8011b76:	1c63      	adds	r3, r4, #1
 8011b78:	aa10      	add	r2, sp, #64	; 0x40
 8011b7a:	f004 0401 	and.w	r4, r4, #1
 8011b7e:	f04f 0b00 	mov.w	fp, #0
 8011b82:	9308      	str	r3, [sp, #32]
 8011b84:	9b00      	ldr	r3, [sp, #0]
 8011b86:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8011b8a:	fb93 f3f8 	sdiv	r3, r3, r8
 8011b8e:	3404      	adds	r4, #4
 8011b90:	b29b      	uxth	r3, r3
 8011b92:	9304      	str	r3, [sp, #16]
 8011b94:	9a04      	ldr	r2, [sp, #16]
 8011b96:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8011b9a:	fb13 f302 	smulbb	r3, r3, r2
 8011b9e:	9a01      	ldr	r2, [sp, #4]
 8011ba0:	b29b      	uxth	r3, r3
 8011ba2:	1899      	adds	r1, r3, r2
 8011ba4:	9305      	str	r3, [sp, #20]
 8011ba6:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8011baa:	b209      	sxth	r1, r1
 8011bac:	4299      	cmp	r1, r3
 8011bae:	db4d      	blt.n	8011c4c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8011bb0:	8932      	ldrh	r2, [r6, #8]
 8011bb2:	4413      	add	r3, r2
 8011bb4:	b21b      	sxth	r3, r3
 8011bb6:	4299      	cmp	r1, r3
 8011bb8:	da48      	bge.n	8011c4c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8011bba:	9b04      	ldr	r3, [sp, #16]
 8011bbc:	6827      	ldr	r7, [r4, #0]
 8011bbe:	fb17 f703 	smulbb	r7, r7, r3
 8011bc2:	9b02      	ldr	r3, [sp, #8]
 8011bc4:	b2bf      	uxth	r7, r7
 8011bc6:	18fa      	adds	r2, r7, r3
 8011bc8:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8011bcc:	b212      	sxth	r2, r2
 8011bce:	429a      	cmp	r2, r3
 8011bd0:	db3c      	blt.n	8011c4c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8011bd2:	8970      	ldrh	r0, [r6, #10]
 8011bd4:	4403      	add	r3, r0
 8011bd6:	b21b      	sxth	r3, r3
 8011bd8:	429a      	cmp	r2, r3
 8011bda:	da37      	bge.n	8011c4c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8011bdc:	2300      	movs	r3, #0
 8011bde:	4630      	mov	r0, r6
 8011be0:	930b      	str	r3, [sp, #44]	; 0x2c
 8011be2:	ab0b      	add	r3, sp, #44	; 0x2c
 8011be4:	f7ff ff36 	bl	8011a54 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8011be8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011bea:	b37a      	cbz	r2, 8011c4c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8011bec:	4552      	cmp	r2, sl
 8011bee:	d02d      	beq.n	8011c4c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8011bf0:	4611      	mov	r1, r2
 8011bf2:	a80e      	add	r0, sp, #56	; 0x38
 8011bf4:	9209      	str	r2, [sp, #36]	; 0x24
 8011bf6:	f004 fa35 	bl	8016064 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011bfa:	f04f 0e02 	mov.w	lr, #2
 8011bfe:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 8011c02:	9a06      	ldr	r2, [sp, #24]
 8011c04:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 8011c08:	9b01      	ldr	r3, [sp, #4]
 8011c0a:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 8011c0e:	4413      	add	r3, r2
 8011c10:	9a07      	ldr	r2, [sp, #28]
 8011c12:	fb91 f1fe 	sdiv	r1, r1, lr
 8011c16:	fb9c fcfe 	sdiv	ip, ip, lr
 8011c1a:	4401      	add	r1, r0
 8011c1c:	1a58      	subs	r0, r3, r1
 8011c1e:	9b02      	ldr	r3, [sp, #8]
 8011c20:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 8011c24:	4413      	add	r3, r2
 8011c26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011c28:	448c      	add	ip, r1
 8011c2a:	eba3 030c 	sub.w	r3, r3, ip
 8011c2e:	435b      	muls	r3, r3
 8011c30:	fb00 3300 	mla	r3, r0, r0, r3
 8011c34:	42ab      	cmp	r3, r5
 8011c36:	d208      	bcs.n	8011c4a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 8011c38:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011c3a:	461d      	mov	r5, r3
 8011c3c:	9803      	ldr	r0, [sp, #12]
 8011c3e:	6001      	str	r1, [r0, #0]
 8011c40:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8011c42:	9805      	ldr	r0, [sp, #20]
 8011c44:	8008      	strh	r0, [r1, #0]
 8011c46:	992b      	ldr	r1, [sp, #172]	; 0xac
 8011c48:	800f      	strh	r7, [r1, #0]
 8011c4a:	4692      	mov	sl, r2
 8011c4c:	f10b 0b01 	add.w	fp, fp, #1
 8011c50:	3408      	adds	r4, #8
 8011c52:	f1bb 0f04 	cmp.w	fp, #4
 8011c56:	d19d      	bne.n	8011b94 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 8011c58:	9b00      	ldr	r3, [sp, #0]
 8011c5a:	9c08      	ldr	r4, [sp, #32]
 8011c5c:	444b      	add	r3, r9
 8011c5e:	4544      	cmp	r4, r8
 8011c60:	9300      	str	r3, [sp, #0]
 8011c62:	d188      	bne.n	8011b76 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 8011c64:	b021      	add	sp, #132	; 0x84
 8011c66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c6a:	f04f 35ff 	mov.w	r5, #4294967295
 8011c6e:	e767      	b.n	8011b40 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 8011c70:	240069a4 	.word	0x240069a4
 8011c74:	08022890 	.word	0x08022890

08011c78 <_ZN8touchgfx4RectaNERKS0_>:
 8011c78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011c7c:	f9b1 7000 	ldrsh.w	r7, [r1]
 8011c80:	888c      	ldrh	r4, [r1, #4]
 8011c82:	f9b0 9000 	ldrsh.w	r9, [r0]
 8011c86:	443c      	add	r4, r7
 8011c88:	b2a4      	uxth	r4, r4
 8011c8a:	fa0f f884 	sxth.w	r8, r4
 8011c8e:	45c1      	cmp	r9, r8
 8011c90:	da2f      	bge.n	8011cf2 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8011c92:	8882      	ldrh	r2, [r0, #4]
 8011c94:	444a      	add	r2, r9
 8011c96:	b292      	uxth	r2, r2
 8011c98:	fa0f fe82 	sxth.w	lr, r2
 8011c9c:	4577      	cmp	r7, lr
 8011c9e:	da28      	bge.n	8011cf2 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8011ca0:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8011ca4:	88cb      	ldrh	r3, [r1, #6]
 8011ca6:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8011caa:	442b      	add	r3, r5
 8011cac:	b21b      	sxth	r3, r3
 8011cae:	429e      	cmp	r6, r3
 8011cb0:	da1f      	bge.n	8011cf2 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8011cb2:	88c3      	ldrh	r3, [r0, #6]
 8011cb4:	4433      	add	r3, r6
 8011cb6:	b29b      	uxth	r3, r3
 8011cb8:	fa0f fc83 	sxth.w	ip, r3
 8011cbc:	4565      	cmp	r5, ip
 8011cbe:	da18      	bge.n	8011cf2 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8011cc0:	454f      	cmp	r7, r9
 8011cc2:	bfb8      	it	lt
 8011cc4:	464f      	movlt	r7, r9
 8011cc6:	42b5      	cmp	r5, r6
 8011cc8:	bfb8      	it	lt
 8011cca:	4635      	movlt	r5, r6
 8011ccc:	45f0      	cmp	r8, lr
 8011cce:	bfd8      	it	le
 8011cd0:	4622      	movle	r2, r4
 8011cd2:	1bd2      	subs	r2, r2, r7
 8011cd4:	8082      	strh	r2, [r0, #4]
 8011cd6:	884a      	ldrh	r2, [r1, #2]
 8011cd8:	88c9      	ldrh	r1, [r1, #6]
 8011cda:	8007      	strh	r7, [r0, #0]
 8011cdc:	440a      	add	r2, r1
 8011cde:	8045      	strh	r5, [r0, #2]
 8011ce0:	b292      	uxth	r2, r2
 8011ce2:	b211      	sxth	r1, r2
 8011ce4:	458c      	cmp	ip, r1
 8011ce6:	bfa8      	it	ge
 8011ce8:	4613      	movge	r3, r2
 8011cea:	1b5b      	subs	r3, r3, r5
 8011cec:	80c3      	strh	r3, [r0, #6]
 8011cee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011cf2:	2300      	movs	r3, #0
 8011cf4:	8003      	strh	r3, [r0, #0]
 8011cf6:	8043      	strh	r3, [r0, #2]
 8011cf8:	8083      	strh	r3, [r0, #4]
 8011cfa:	80c3      	strh	r3, [r0, #6]
 8011cfc:	e7f7      	b.n	8011cee <_ZN8touchgfx4RectaNERKS0_+0x76>

08011cfe <_ZNK8touchgfx4Rect7isEmptyEv>:
 8011cfe:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	dd06      	ble.n	8011d14 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8011d06:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8011d0a:	2800      	cmp	r0, #0
 8011d0c:	bfcc      	ite	gt
 8011d0e:	2000      	movgt	r0, #0
 8011d10:	2001      	movle	r0, #1
 8011d12:	4770      	bx	lr
 8011d14:	2001      	movs	r0, #1
 8011d16:	4770      	bx	lr

08011d18 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8011d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d1c:	2300      	movs	r3, #0
 8011d1e:	4604      	mov	r4, r0
 8011d20:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8011d22:	8003      	strh	r3, [r0, #0]
 8011d24:	8043      	strh	r3, [r0, #2]
 8011d26:	8083      	strh	r3, [r0, #4]
 8011d28:	80c3      	strh	r3, [r0, #6]
 8011d2a:	2d00      	cmp	r5, #0
 8011d2c:	d040      	beq.n	8011db0 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8011d2e:	1d28      	adds	r0, r5, #4
 8011d30:	f7ff ffe5 	bl	8011cfe <_ZNK8touchgfx4Rect7isEmptyEv>
 8011d34:	b988      	cbnz	r0, 8011d5a <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8011d36:	4620      	mov	r0, r4
 8011d38:	f7ff ffe1 	bl	8011cfe <_ZNK8touchgfx4Rect7isEmptyEv>
 8011d3c:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8011d40:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8011d44:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8011d48:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8011d4c:	b138      	cbz	r0, 8011d5e <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8011d4e:	8022      	strh	r2, [r4, #0]
 8011d50:	8063      	strh	r3, [r4, #2]
 8011d52:	f8a4 e004 	strh.w	lr, [r4, #4]
 8011d56:	f8a4 c006 	strh.w	ip, [r4, #6]
 8011d5a:	69ad      	ldr	r5, [r5, #24]
 8011d5c:	e7e5      	b.n	8011d2a <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8011d5e:	f9b4 0000 	ldrsh.w	r0, [r4]
 8011d62:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8011d66:	4290      	cmp	r0, r2
 8011d68:	4607      	mov	r7, r0
 8011d6a:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8011d6e:	460e      	mov	r6, r1
 8011d70:	bfa8      	it	ge
 8011d72:	4617      	movge	r7, r2
 8011d74:	4299      	cmp	r1, r3
 8011d76:	4472      	add	r2, lr
 8011d78:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8011d7c:	bfa8      	it	ge
 8011d7e:	461e      	movge	r6, r3
 8011d80:	4440      	add	r0, r8
 8011d82:	4471      	add	r1, lr
 8011d84:	4463      	add	r3, ip
 8011d86:	b200      	sxth	r0, r0
 8011d88:	8027      	strh	r7, [r4, #0]
 8011d8a:	b212      	sxth	r2, r2
 8011d8c:	8066      	strh	r6, [r4, #2]
 8011d8e:	b209      	sxth	r1, r1
 8011d90:	b21b      	sxth	r3, r3
 8011d92:	4290      	cmp	r0, r2
 8011d94:	bfac      	ite	ge
 8011d96:	ebc7 0200 	rsbge	r2, r7, r0
 8011d9a:	ebc7 0202 	rsblt	r2, r7, r2
 8011d9e:	4299      	cmp	r1, r3
 8011da0:	bfac      	ite	ge
 8011da2:	ebc6 0301 	rsbge	r3, r6, r1
 8011da6:	ebc6 0303 	rsblt	r3, r6, r3
 8011daa:	80a2      	strh	r2, [r4, #4]
 8011dac:	80e3      	strh	r3, [r4, #6]
 8011dae:	e7d4      	b.n	8011d5a <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8011db0:	4620      	mov	r0, r4
 8011db2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011db6 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8011db6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8011dba:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8011dbe:	b383      	cbz	r3, 8011e22 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8011dc0:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8011dc2:	b374      	cbz	r4, 8011e22 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8011dc4:	f9b1 5000 	ldrsh.w	r5, [r1]
 8011dc8:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8011dcc:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8011dd0:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8011dd4:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8011dd8:	b303      	cbz	r3, 8011e1c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8011dda:	4668      	mov	r0, sp
 8011ddc:	1d21      	adds	r1, r4, #4
 8011dde:	f8ad 5000 	strh.w	r5, [sp]
 8011de2:	f8ad 6002 	strh.w	r6, [sp, #2]
 8011de6:	f8ad 7004 	strh.w	r7, [sp, #4]
 8011dea:	f8ad 8006 	strh.w	r8, [sp, #6]
 8011dee:	f7ff ff43 	bl	8011c78 <_ZN8touchgfx4RectaNERKS0_>
 8011df2:	4668      	mov	r0, sp
 8011df4:	f7ff ff83 	bl	8011cfe <_ZNK8touchgfx4Rect7isEmptyEv>
 8011df8:	b980      	cbnz	r0, 8011e1c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8011dfa:	f8bd 3000 	ldrh.w	r3, [sp]
 8011dfe:	4669      	mov	r1, sp
 8011e00:	88a2      	ldrh	r2, [r4, #4]
 8011e02:	4620      	mov	r0, r4
 8011e04:	1a9b      	subs	r3, r3, r2
 8011e06:	88e2      	ldrh	r2, [r4, #6]
 8011e08:	f8ad 3000 	strh.w	r3, [sp]
 8011e0c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8011e10:	1a9b      	subs	r3, r3, r2
 8011e12:	f8ad 3002 	strh.w	r3, [sp, #2]
 8011e16:	6823      	ldr	r3, [r4, #0]
 8011e18:	689b      	ldr	r3, [r3, #8]
 8011e1a:	4798      	blx	r3
 8011e1c:	69a4      	ldr	r4, [r4, #24]
 8011e1e:	2c00      	cmp	r4, #0
 8011e20:	d1d8      	bne.n	8011dd4 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8011e22:	b002      	add	sp, #8
 8011e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011e28 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8011e28:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011e2a:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8011e2e:	460d      	mov	r5, r1
 8011e30:	4616      	mov	r6, r2
 8011e32:	b323      	cbz	r3, 8011e7e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8011e34:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8011e36:	b314      	cbz	r4, 8011e7e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8011e38:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8011e3c:	b1eb      	cbz	r3, 8011e7a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8011e3e:	6828      	ldr	r0, [r5, #0]
 8011e40:	466b      	mov	r3, sp
 8011e42:	6869      	ldr	r1, [r5, #4]
 8011e44:	c303      	stmia	r3!, {r0, r1}
 8011e46:	4668      	mov	r0, sp
 8011e48:	1d21      	adds	r1, r4, #4
 8011e4a:	f7ff ff15 	bl	8011c78 <_ZN8touchgfx4RectaNERKS0_>
 8011e4e:	4668      	mov	r0, sp
 8011e50:	f7ff ff55 	bl	8011cfe <_ZNK8touchgfx4Rect7isEmptyEv>
 8011e54:	b988      	cbnz	r0, 8011e7a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8011e56:	f8bd 3000 	ldrh.w	r3, [sp]
 8011e5a:	4669      	mov	r1, sp
 8011e5c:	88a2      	ldrh	r2, [r4, #4]
 8011e5e:	4620      	mov	r0, r4
 8011e60:	1a9b      	subs	r3, r3, r2
 8011e62:	88e2      	ldrh	r2, [r4, #6]
 8011e64:	f8ad 3000 	strh.w	r3, [sp]
 8011e68:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8011e6c:	1a9b      	subs	r3, r3, r2
 8011e6e:	4632      	mov	r2, r6
 8011e70:	f8ad 3002 	strh.w	r3, [sp, #2]
 8011e74:	6823      	ldr	r3, [r4, #0]
 8011e76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011e78:	4798      	blx	r3
 8011e7a:	69a4      	ldr	r4, [r4, #24]
 8011e7c:	e7db      	b.n	8011e36 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8011e7e:	b002      	add	sp, #8
 8011e80:	bd70      	pop	{r4, r5, r6, pc}

08011e82 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
 8011e82:	4770      	bx	lr

08011e84 <_ZN8touchgfx3HAL10FlushCacheEv>:
 8011e84:	4770      	bx	lr

08011e86 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8011e86:	6803      	ldr	r3, [r0, #0]
 8011e88:	b513      	push	{r0, r1, r4, lr}
 8011e8a:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 8011e8e:	2300      	movs	r3, #0
 8011e90:	e9cd 3300 	strd	r3, r3, [sp]
 8011e94:	466b      	mov	r3, sp
 8011e96:	47a0      	blx	r4
 8011e98:	b002      	add	sp, #8
 8011e9a:	bd10      	pop	{r4, pc}

08011e9c <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8011e9c:	2301      	movs	r3, #1
 8011e9e:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8011ea2:	f880 306d 	strb.w	r3, [r0, #109]	; 0x6d
 8011ea6:	4770      	bx	lr

08011ea8 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8011ea8:	2301      	movs	r3, #1
 8011eaa:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8011eae:	f880 306d 	strb.w	r3, [r0, #109]	; 0x6d
 8011eb2:	4770      	bx	lr

08011eb4 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8011eb4:	6843      	ldr	r3, [r0, #4]
 8011eb6:	2201      	movs	r2, #1
 8011eb8:	725a      	strb	r2, [r3, #9]
 8011eba:	6840      	ldr	r0, [r0, #4]
 8011ebc:	6803      	ldr	r3, [r0, #0]
 8011ebe:	691b      	ldr	r3, [r3, #16]
 8011ec0:	4718      	bx	r3

08011ec2 <_ZN8touchgfx3HAL8flushDMAEv>:
 8011ec2:	6840      	ldr	r0, [r0, #4]
 8011ec4:	6803      	ldr	r3, [r0, #0]
 8011ec6:	689b      	ldr	r3, [r3, #8]
 8011ec8:	4718      	bx	r3

08011eca <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 8011eca:	b530      	push	{r4, r5, lr}
 8011ecc:	b08b      	sub	sp, #44	; 0x2c
 8011ece:	6804      	ldr	r4, [r0, #0]
 8011ed0:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 8011ed4:	9509      	str	r5, [sp, #36]	; 0x24
 8011ed6:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 8011eda:	9508      	str	r5, [sp, #32]
 8011edc:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 8011ee0:	9507      	str	r5, [sp, #28]
 8011ee2:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 8011ee6:	9506      	str	r5, [sp, #24]
 8011ee8:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 8011eec:	9505      	str	r5, [sp, #20]
 8011eee:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8011ef2:	9504      	str	r5, [sp, #16]
 8011ef4:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 8011ef8:	9503      	str	r5, [sp, #12]
 8011efa:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8011efe:	9502      	str	r5, [sp, #8]
 8011f00:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8011f04:	e9cd 3500 	strd	r3, r5, [sp]
 8011f08:	4613      	mov	r3, r2
 8011f0a:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 8011f0c:	2200      	movs	r2, #0
 8011f0e:	47a0      	blx	r4
 8011f10:	b00b      	add	sp, #44	; 0x2c
 8011f12:	bd30      	pop	{r4, r5, pc}

08011f14 <_ZN8touchgfx3HAL10beginFrameEv>:
 8011f14:	4b04      	ldr	r3, [pc, #16]	; (8011f28 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8011f16:	781b      	ldrb	r3, [r3, #0]
 8011f18:	b123      	cbz	r3, 8011f24 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8011f1a:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
 8011f1e:	f080 0001 	eor.w	r0, r0, #1
 8011f22:	4770      	bx	lr
 8011f24:	2001      	movs	r0, #1
 8011f26:	4770      	bx	lr
 8011f28:	240069a2 	.word	0x240069a2

08011f2c <_ZN8touchgfx3HAL8endFrameEv>:
 8011f2c:	b510      	push	{r4, lr}
 8011f2e:	4604      	mov	r4, r0
 8011f30:	6840      	ldr	r0, [r0, #4]
 8011f32:	6803      	ldr	r3, [r0, #0]
 8011f34:	689b      	ldr	r3, [r3, #8]
 8011f36:	4798      	blx	r3
 8011f38:	f894 306d 	ldrb.w	r3, [r4, #109]	; 0x6d
 8011f3c:	b113      	cbz	r3, 8011f44 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8011f3e:	2301      	movs	r3, #1
 8011f40:	f884 306e 	strb.w	r3, [r4, #110]	; 0x6e
 8011f44:	bd10      	pop	{r4, pc}

08011f46 <_ZN8touchgfx3HAL10initializeEv>:
 8011f46:	b510      	push	{r4, lr}
 8011f48:	4604      	mov	r4, r0
 8011f4a:	f7ef fe5d 	bl	8001c08 <_ZN8touchgfx10OSWrappers10initializeEv>
 8011f4e:	f7ef fb17 	bl	8001580 <_ZN8touchgfx4GPIO4initEv>
 8011f52:	6860      	ldr	r0, [r4, #4]
 8011f54:	6803      	ldr	r3, [r0, #0]
 8011f56:	68db      	ldr	r3, [r3, #12]
 8011f58:	4798      	blx	r3
 8011f5a:	68e0      	ldr	r0, [r4, #12]
 8011f5c:	6803      	ldr	r3, [r0, #0]
 8011f5e:	689b      	ldr	r3, [r3, #8]
 8011f60:	4798      	blx	r3
 8011f62:	6823      	ldr	r3, [r4, #0]
 8011f64:	4620      	mov	r0, r4
 8011f66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011f68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011f6c:	4718      	bx	r3

08011f6e <_ZN8touchgfx3HAL9taskEntryEv>:
 8011f6e:	b508      	push	{r3, lr}
 8011f70:	6803      	ldr	r3, [r0, #0]
 8011f72:	4604      	mov	r4, r0
 8011f74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011f78:	4798      	blx	r3
 8011f7a:	6823      	ldr	r3, [r4, #0]
 8011f7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011f7e:	4620      	mov	r0, r4
 8011f80:	4798      	blx	r3
 8011f82:	f7ef feb7 	bl	8001cf4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 8011f86:	6823      	ldr	r3, [r4, #0]
 8011f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011f8a:	e7f8      	b.n	8011f7e <_ZN8touchgfx3HAL9taskEntryEv+0x10>

08011f8c <_ZN8touchgfx3HAL4tickEv>:
 8011f8c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8011f8e:	6803      	ldr	r3, [r0, #0]
 8011f90:	4604      	mov	r4, r0
 8011f92:	4d5b      	ldr	r5, [pc, #364]	; (8012100 <_ZN8touchgfx3HAL4tickEv+0x174>)
 8011f94:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8011f98:	4798      	blx	r3
 8011f9a:	2800      	cmp	r0, #0
 8011f9c:	f000 8095 	beq.w	80120ca <_ZN8touchgfx3HAL4tickEv+0x13e>
 8011fa0:	2001      	movs	r0, #1
 8011fa2:	2600      	movs	r6, #0
 8011fa4:	f7ef faf4 	bl	8001590 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8011fa8:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
 8011fac:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8011fb0:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8011fb4:	f894 3079 	ldrb.w	r3, [r4, #121]	; 0x79
 8011fb8:	f884 606a 	strb.w	r6, [r4, #106]	; 0x6a
 8011fbc:	b133      	cbz	r3, 8011fcc <_ZN8touchgfx3HAL4tickEv+0x40>
 8011fbe:	6823      	ldr	r3, [r4, #0]
 8011fc0:	4620      	mov	r0, r4
 8011fc2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8011fc6:	4798      	blx	r3
 8011fc8:	f884 6079 	strb.w	r6, [r4, #121]	; 0x79
 8011fcc:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8011fd0:	2601      	movs	r6, #1
 8011fd2:	6862      	ldr	r2, [r4, #4]
 8011fd4:	f083 0301 	eor.w	r3, r3, #1
 8011fd8:	702e      	strb	r6, [r5, #0]
 8011fda:	7253      	strb	r3, [r2, #9]
 8011fdc:	f002 ff2e 	bl	8014e3c <_ZN8touchgfx11Application11getInstanceEv>
 8011fe0:	6803      	ldr	r3, [r0, #0]
 8011fe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011fe4:	4798      	blx	r3
 8011fe6:	f894 306b 	ldrb.w	r3, [r4, #107]	; 0x6b
 8011fea:	b90b      	cbnz	r3, 8011ff0 <_ZN8touchgfx3HAL4tickEv+0x64>
 8011fec:	f884 606b 	strb.w	r6, [r4, #107]	; 0x6b
 8011ff0:	f002 ff24 	bl	8014e3c <_ZN8touchgfx11Application11getInstanceEv>
 8011ff4:	6803      	ldr	r3, [r0, #0]
 8011ff6:	695b      	ldr	r3, [r3, #20]
 8011ff8:	4798      	blx	r3
 8011ffa:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8011ffc:	6803      	ldr	r3, [r0, #0]
 8011ffe:	691b      	ldr	r3, [r3, #16]
 8012000:	4798      	blx	r3
 8012002:	f894 306b 	ldrb.w	r3, [r4, #107]	; 0x6b
 8012006:	f894 206c 	ldrb.w	r2, [r4, #108]	; 0x6c
 801200a:	3b01      	subs	r3, #1
 801200c:	b2db      	uxtb	r3, r3
 801200e:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8012012:	b10a      	cbz	r2, 8012018 <_ZN8touchgfx3HAL4tickEv+0x8c>
 8012014:	2b00      	cmp	r3, #0
 8012016:	d1eb      	bne.n	8011ff0 <_ZN8touchgfx3HAL4tickEv+0x64>
 8012018:	4a3a      	ldr	r2, [pc, #232]	; (8012104 <_ZN8touchgfx3HAL4tickEv+0x178>)
 801201a:	f994 1068 	ldrsb.w	r1, [r4, #104]	; 0x68
 801201e:	7813      	ldrb	r3, [r2, #0]
 8012020:	3301      	adds	r3, #1
 8012022:	b25b      	sxtb	r3, r3
 8012024:	4299      	cmp	r1, r3
 8012026:	7013      	strb	r3, [r2, #0]
 8012028:	dc10      	bgt.n	801204c <_ZN8touchgfx3HAL4tickEv+0xc0>
 801202a:	2300      	movs	r3, #0
 801202c:	68e0      	ldr	r0, [r4, #12]
 801202e:	a902      	add	r1, sp, #8
 8012030:	7013      	strb	r3, [r2, #0]
 8012032:	aa03      	add	r2, sp, #12
 8012034:	6803      	ldr	r3, [r0, #0]
 8012036:	68db      	ldr	r3, [r3, #12]
 8012038:	4798      	blx	r3
 801203a:	6823      	ldr	r3, [r4, #0]
 801203c:	2800      	cmp	r0, #0
 801203e:	d050      	beq.n	80120e2 <_ZN8touchgfx3HAL4tickEv+0x156>
 8012040:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8012044:	4620      	mov	r0, r4
 8012046:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801204a:	4798      	blx	r3
 801204c:	2300      	movs	r3, #0
 801204e:	6960      	ldr	r0, [r4, #20]
 8012050:	f88d 3007 	strb.w	r3, [sp, #7]
 8012054:	b158      	cbz	r0, 801206e <_ZN8touchgfx3HAL4tickEv+0xe2>
 8012056:	6803      	ldr	r3, [r0, #0]
 8012058:	f10d 0107 	add.w	r1, sp, #7
 801205c:	68db      	ldr	r3, [r3, #12]
 801205e:	4798      	blx	r3
 8012060:	b128      	cbz	r0, 801206e <_ZN8touchgfx3HAL4tickEv+0xe2>
 8012062:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8012064:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8012068:	6803      	ldr	r3, [r0, #0]
 801206a:	68db      	ldr	r3, [r3, #12]
 801206c:	4798      	blx	r3
 801206e:	f104 001c 	add.w	r0, r4, #28
 8012072:	f00e fdc5 	bl	8020c00 <_ZN8touchgfx8Gestures4tickEv>
 8012076:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 801207a:	b30b      	cbz	r3, 80120c0 <_ZN8touchgfx3HAL4tickEv+0x134>
 801207c:	6920      	ldr	r0, [r4, #16]
 801207e:	6803      	ldr	r3, [r0, #0]
 8012080:	691b      	ldr	r3, [r3, #16]
 8012082:	4798      	blx	r3
 8012084:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8012086:	4606      	mov	r6, r0
 8012088:	b903      	cbnz	r3, 801208c <_ZN8touchgfx3HAL4tickEv+0x100>
 801208a:	6760      	str	r0, [r4, #116]	; 0x74
 801208c:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801208e:	4a1e      	ldr	r2, [pc, #120]	; (8012108 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8012090:	1af3      	subs	r3, r6, r3
 8012092:	4293      	cmp	r3, r2
 8012094:	d914      	bls.n	80120c0 <_ZN8touchgfx3HAL4tickEv+0x134>
 8012096:	6920      	ldr	r0, [r4, #16]
 8012098:	6803      	ldr	r3, [r0, #0]
 801209a:	699b      	ldr	r3, [r3, #24]
 801209c:	4798      	blx	r3
 801209e:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80120a0:	2264      	movs	r2, #100	; 0x64
 80120a2:	1af3      	subs	r3, r6, r3
 80120a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80120a8:	fbb0 f0f3 	udiv	r0, r0, r3
 80120ac:	2800      	cmp	r0, #0
 80120ae:	dc1d      	bgt.n	80120ec <_ZN8touchgfx3HAL4tickEv+0x160>
 80120b0:	f884 2069 	strb.w	r2, [r4, #105]	; 0x69
 80120b4:	6920      	ldr	r0, [r4, #16]
 80120b6:	2100      	movs	r1, #0
 80120b8:	6803      	ldr	r3, [r0, #0]
 80120ba:	69db      	ldr	r3, [r3, #28]
 80120bc:	4798      	blx	r3
 80120be:	6766      	str	r6, [r4, #116]	; 0x74
 80120c0:	f002 febc 	bl	8014e3c <_ZN8touchgfx11Application11getInstanceEv>
 80120c4:	6803      	ldr	r3, [r0, #0]
 80120c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80120c8:	4798      	blx	r3
 80120ca:	6823      	ldr	r3, [r4, #0]
 80120cc:	4620      	mov	r0, r4
 80120ce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80120d2:	4798      	blx	r3
 80120d4:	2001      	movs	r0, #1
 80120d6:	f7ef fa95 	bl	8001604 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 80120da:	2300      	movs	r3, #0
 80120dc:	702b      	strb	r3, [r5, #0]
 80120de:	b004      	add	sp, #16
 80120e0:	bd70      	pop	{r4, r5, r6, pc}
 80120e2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80120e6:	4620      	mov	r0, r4
 80120e8:	4798      	blx	r3
 80120ea:	e7af      	b.n	801204c <_ZN8touchgfx3HAL4tickEv+0xc0>
 80120ec:	2863      	cmp	r0, #99	; 0x63
 80120ee:	bfcb      	itete	gt
 80120f0:	2300      	movgt	r3, #0
 80120f2:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 80120f6:	f884 3069 	strbgt.w	r3, [r4, #105]	; 0x69
 80120fa:	f884 0069 	strble.w	r0, [r4, #105]	; 0x69
 80120fe:	e7d9      	b.n	80120b4 <_ZN8touchgfx3HAL4tickEv+0x128>
 8012100:	240069a8 	.word	0x240069a8
 8012104:	240069a9 	.word	0x240069a9
 8012108:	05f5e100 	.word	0x05f5e100

0801210c <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 801210c:	b510      	push	{r4, lr}
 801210e:	4604      	mov	r4, r0
 8012110:	f7ef fdbc 	bl	8001c8c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>
 8012114:	2200      	movs	r2, #0
 8012116:	6863      	ldr	r3, [r4, #4]
 8012118:	729a      	strb	r2, [r3, #10]
 801211a:	bd10      	pop	{r4, pc}

0801211c <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 801211c:	65c1      	str	r1, [r0, #92]	; 0x5c
 801211e:	301c      	adds	r0, #28
 8012120:	f00e bd6c 	b.w	8020bfc <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08012124 <_ZN8touchgfx3HAL5touchEll>:
 8012124:	b530      	push	{r4, r5, lr}
 8012126:	b087      	sub	sp, #28
 8012128:	4604      	mov	r4, r0
 801212a:	a804      	add	r0, sp, #16
 801212c:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8012130:	f002 fc76 	bl	8014a20 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8012134:	9b04      	ldr	r3, [sp, #16]
 8012136:	a906      	add	r1, sp, #24
 8012138:	a803      	add	r0, sp, #12
 801213a:	f8ad 300c 	strh.w	r3, [sp, #12]
 801213e:	9b05      	ldr	r3, [sp, #20]
 8012140:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8012144:	f002 fcbe 	bl	8014ac4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8012148:	f894 106f 	ldrb.w	r1, [r4, #111]	; 0x6f
 801214c:	f104 001c 	add.w	r0, r4, #28
 8012150:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8012154:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8012158:	b189      	cbz	r1, 801217e <_ZN8touchgfx3HAL5touchEll+0x5a>
 801215a:	f8b4 5064 	ldrh.w	r5, [r4, #100]	; 0x64
 801215e:	9300      	str	r3, [sp, #0]
 8012160:	4613      	mov	r3, r2
 8012162:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 8012166:	462a      	mov	r2, r5
 8012168:	f00e fd58 	bl	8020c1c <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 801216c:	b128      	cbz	r0, 801217a <_ZN8touchgfx3HAL5touchEll+0x56>
 801216e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8012172:	6623      	str	r3, [r4, #96]	; 0x60
 8012174:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8012178:	6663      	str	r3, [r4, #100]	; 0x64
 801217a:	b007      	add	sp, #28
 801217c:	bd30      	pop	{r4, r5, pc}
 801217e:	f00e fd8d 	bl	8020c9c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8012182:	2301      	movs	r3, #1
 8012184:	f884 306f 	strb.w	r3, [r4, #111]	; 0x6f
 8012188:	e7f1      	b.n	801216e <_ZN8touchgfx3HAL5touchEll+0x4a>

0801218a <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 801218a:	b510      	push	{r4, lr}
 801218c:	2b00      	cmp	r3, #0
 801218e:	d046      	beq.n	801221e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8012190:	ea81 0002 	eor.w	r0, r1, r2
 8012194:	07c4      	lsls	r4, r0, #31
 8012196:	d508      	bpl.n	80121aa <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8012198:	440b      	add	r3, r1
 801219a:	3a01      	subs	r2, #1
 801219c:	428b      	cmp	r3, r1
 801219e:	d93e      	bls.n	801221e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80121a0:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80121a4:	f801 0b01 	strb.w	r0, [r1], #1
 80121a8:	e7f8      	b.n	801219c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 80121aa:	07d0      	lsls	r0, r2, #31
 80121ac:	bf42      	ittt	mi
 80121ae:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 80121b2:	f103 33ff 	addmi.w	r3, r3, #4294967295
 80121b6:	f801 0b01 	strbmi.w	r0, [r1], #1
 80121ba:	2b01      	cmp	r3, #1
 80121bc:	d911      	bls.n	80121e2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 80121be:	ea81 0402 	eor.w	r4, r1, r2
 80121c2:	4610      	mov	r0, r2
 80121c4:	07a4      	lsls	r4, r4, #30
 80121c6:	d022      	beq.n	801220e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 80121c8:	f023 0401 	bic.w	r4, r3, #1
 80121cc:	440c      	add	r4, r1
 80121ce:	428c      	cmp	r4, r1
 80121d0:	4602      	mov	r2, r0
 80121d2:	d904      	bls.n	80121de <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 80121d4:	8812      	ldrh	r2, [r2, #0]
 80121d6:	3002      	adds	r0, #2
 80121d8:	f821 2b02 	strh.w	r2, [r1], #2
 80121dc:	e7f7      	b.n	80121ce <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 80121de:	f003 0301 	and.w	r3, r3, #1
 80121e2:	f023 0003 	bic.w	r0, r3, #3
 80121e6:	4408      	add	r0, r1
 80121e8:	4288      	cmp	r0, r1
 80121ea:	4614      	mov	r4, r2
 80121ec:	d904      	bls.n	80121f8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 80121ee:	6824      	ldr	r4, [r4, #0]
 80121f0:	3204      	adds	r2, #4
 80121f2:	f841 4b04 	str.w	r4, [r1], #4
 80121f6:	e7f7      	b.n	80121e8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 80121f8:	f003 0303 	and.w	r3, r3, #3
 80121fc:	3a01      	subs	r2, #1
 80121fe:	440b      	add	r3, r1
 8012200:	428b      	cmp	r3, r1
 8012202:	d90c      	bls.n	801221e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8012204:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8012208:	f801 0b01 	strb.w	r0, [r1], #1
 801220c:	e7f8      	b.n	8012200 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 801220e:	0790      	lsls	r0, r2, #30
 8012210:	d0e7      	beq.n	80121e2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8012212:	f832 0b02 	ldrh.w	r0, [r2], #2
 8012216:	3b02      	subs	r3, #2
 8012218:	f821 0b02 	strh.w	r0, [r1], #2
 801221c:	e7e1      	b.n	80121e2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 801221e:	2001      	movs	r0, #1
 8012220:	bd10      	pop	{r4, pc}

08012222 <_ZN8touchgfx3HAL7noTouchEv>:
 8012222:	b510      	push	{r4, lr}
 8012224:	f890 306f 	ldrb.w	r3, [r0, #111]	; 0x6f
 8012228:	4604      	mov	r4, r0
 801222a:	b153      	cbz	r3, 8012242 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 801222c:	f8b0 3064 	ldrh.w	r3, [r0, #100]	; 0x64
 8012230:	2101      	movs	r1, #1
 8012232:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
 8012236:	301c      	adds	r0, #28
 8012238:	f00e fd30 	bl	8020c9c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 801223c:	2300      	movs	r3, #0
 801223e:	f884 306f 	strb.w	r3, [r4, #111]	; 0x6f
 8012242:	bd10      	pop	{r4, pc}

08012244 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8012244:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012248:	b085      	sub	sp, #20
 801224a:	4604      	mov	r4, r0
 801224c:	2000      	movs	r0, #0
 801224e:	4699      	mov	r9, r3
 8012250:	ad04      	add	r5, sp, #16
 8012252:	460f      	mov	r7, r1
 8012254:	4690      	mov	r8, r2
 8012256:	f845 0d04 	str.w	r0, [r5, #-4]!
 801225a:	69a0      	ldr	r0, [r4, #24]
 801225c:	6806      	ldr	r6, [r0, #0]
 801225e:	9501      	str	r5, [sp, #4]
 8012260:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 8012264:	9500      	str	r5, [sp, #0]
 8012266:	6835      	ldr	r5, [r6, #0]
 8012268:	47a8      	blx	r5
 801226a:	4d10      	ldr	r5, [pc, #64]	; (80122ac <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 801226c:	4606      	mov	r6, r0
 801226e:	f8a5 9000 	strh.w	r9, [r5]
 8012272:	f7f1 fc6f 	bl	8003b54 <_ZN8touchgfx3HAL3lcdEv>
 8012276:	6803      	ldr	r3, [r0, #0]
 8012278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801227a:	4798      	blx	r3
 801227c:	b128      	cbz	r0, 801228a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 801227e:	2801      	cmp	r0, #1
 8012280:	d00b      	beq.n	801229a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 8012282:	4630      	mov	r0, r6
 8012284:	b005      	add	sp, #20
 8012286:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801228a:	882b      	ldrh	r3, [r5, #0]
 801228c:	fb08 7203 	mla	r2, r8, r3, r7
 8012290:	9b03      	ldr	r3, [sp, #12]
 8012292:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8012296:	63e3      	str	r3, [r4, #60]	; 0x3c
 8012298:	e7f3      	b.n	8012282 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 801229a:	882a      	ldrh	r2, [r5, #0]
 801229c:	9b03      	ldr	r3, [sp, #12]
 801229e:	fb08 7202 	mla	r2, r8, r2, r7
 80122a2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80122a6:	1a9a      	subs	r2, r3, r2
 80122a8:	63e2      	str	r2, [r4, #60]	; 0x3c
 80122aa:	e7ea      	b.n	8012282 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 80122ac:	2400699e 	.word	0x2400699e

080122b0 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 80122b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80122b2:	b08b      	sub	sp, #44	; 0x2c
 80122b4:	4617      	mov	r7, r2
 80122b6:	4604      	mov	r4, r0
 80122b8:	460e      	mov	r6, r1
 80122ba:	461d      	mov	r5, r3
 80122bc:	f7f1 fc4a 	bl	8003b54 <_ZN8touchgfx3HAL3lcdEv>
 80122c0:	6803      	ldr	r3, [r0, #0]
 80122c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80122c4:	4798      	blx	r3
 80122c6:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 80122ca:	9007      	str	r0, [sp, #28]
 80122cc:	4631      	mov	r1, r6
 80122ce:	6822      	ldr	r2, [r4, #0]
 80122d0:	e9cd 0308 	strd	r0, r3, [sp, #32]
 80122d4:	4b0c      	ldr	r3, [pc, #48]	; (8012308 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 80122d6:	4620      	mov	r0, r4
 80122d8:	881b      	ldrh	r3, [r3, #0]
 80122da:	9306      	str	r3, [sp, #24]
 80122dc:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 80122e0:	9305      	str	r3, [sp, #20]
 80122e2:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 80122e6:	9304      	str	r3, [sp, #16]
 80122e8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80122ec:	9303      	str	r3, [sp, #12]
 80122ee:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80122f2:	9302      	str	r3, [sp, #8]
 80122f4:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80122f8:	e9cd 5300 	strd	r5, r3, [sp]
 80122fc:	463b      	mov	r3, r7
 80122fe:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 8012300:	2200      	movs	r2, #0
 8012302:	47a8      	blx	r5
 8012304:	b00b      	add	sp, #44	; 0x2c
 8012306:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012308:	2400699e 	.word	0x2400699e

0801230c <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 801230c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012310:	4698      	mov	r8, r3
 8012312:	6803      	ldr	r3, [r0, #0]
 8012314:	b08b      	sub	sp, #44	; 0x2c
 8012316:	4617      	mov	r7, r2
 8012318:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 801231a:	460e      	mov	r6, r1
 801231c:	4b13      	ldr	r3, [pc, #76]	; (801236c <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 801231e:	4604      	mov	r4, r0
 8012320:	f8b3 9000 	ldrh.w	r9, [r3]
 8012324:	f7f1 fc16 	bl	8003b54 <_ZN8touchgfx3HAL3lcdEv>
 8012328:	6803      	ldr	r3, [r0, #0]
 801232a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801232c:	4798      	blx	r3
 801232e:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8012332:	2200      	movs	r2, #0
 8012334:	4631      	mov	r1, r6
 8012336:	e9cd 0308 	strd	r0, r3, [sp, #32]
 801233a:	2302      	movs	r3, #2
 801233c:	4620      	mov	r0, r4
 801233e:	e9cd 9306 	strd	r9, r3, [sp, #24]
 8012342:	2301      	movs	r3, #1
 8012344:	9305      	str	r3, [sp, #20]
 8012346:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 801234a:	9304      	str	r3, [sp, #16]
 801234c:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8012350:	9303      	str	r3, [sp, #12]
 8012352:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8012356:	9302      	str	r3, [sp, #8]
 8012358:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801235c:	e9cd 8300 	strd	r8, r3, [sp]
 8012360:	463b      	mov	r3, r7
 8012362:	47a8      	blx	r5
 8012364:	b00b      	add	sp, #44	; 0x2c
 8012366:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801236a:	bf00      	nop
 801236c:	2400699e 	.word	0x2400699e

08012370 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 8012370:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012374:	4698      	mov	r8, r3
 8012376:	6803      	ldr	r3, [r0, #0]
 8012378:	b087      	sub	sp, #28
 801237a:	460e      	mov	r6, r1
 801237c:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 801237e:	4617      	mov	r7, r2
 8012380:	4b0f      	ldr	r3, [pc, #60]	; (80123c0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 8012382:	4604      	mov	r4, r0
 8012384:	f8b3 9000 	ldrh.w	r9, [r3]
 8012388:	f7f1 fbe4 	bl	8003b54 <_ZN8touchgfx3HAL3lcdEv>
 801238c:	6803      	ldr	r3, [r0, #0]
 801238e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012390:	4798      	blx	r3
 8012392:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8012396:	463a      	mov	r2, r7
 8012398:	4631      	mov	r1, r6
 801239a:	f8cd 900c 	str.w	r9, [sp, #12]
 801239e:	e9cd 0304 	strd	r0, r3, [sp, #16]
 80123a2:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80123a6:	4620      	mov	r0, r4
 80123a8:	9302      	str	r3, [sp, #8]
 80123aa:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 80123ae:	9301      	str	r3, [sp, #4]
 80123b0:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80123b4:	9300      	str	r3, [sp, #0]
 80123b6:	4643      	mov	r3, r8
 80123b8:	47a8      	blx	r5
 80123ba:	b007      	add	sp, #28
 80123bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80123c0:	2400699e 	.word	0x2400699e

080123c4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 80123c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123c8:	4604      	mov	r4, r0
 80123ca:	b08f      	sub	sp, #60	; 0x3c
 80123cc:	4610      	mov	r0, r2
 80123ce:	460d      	mov	r5, r1
 80123d0:	4691      	mov	r9, r2
 80123d2:	461e      	mov	r6, r3
 80123d4:	f005 f97a 	bl	80176cc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80123d8:	2800      	cmp	r0, #0
 80123da:	f000 809d 	beq.w	8012518 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 80123de:	6823      	ldr	r3, [r4, #0]
 80123e0:	4620      	mov	r0, r4
 80123e2:	f8df b198 	ldr.w	fp, [pc, #408]	; 801257c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 80123e6:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 80123ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80123ec:	4798      	blx	r3
 80123ee:	6823      	ldr	r3, [r4, #0]
 80123f0:	4620      	mov	r0, r4
 80123f2:	f8df a18c 	ldr.w	sl, [pc, #396]	; 8012580 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 80123f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80123f8:	4798      	blx	r3
 80123fa:	f8bb 3000 	ldrh.w	r3, [fp]
 80123fe:	4f5c      	ldr	r7, [pc, #368]	; (8012570 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8012400:	9301      	str	r3, [sp, #4]
 8012402:	f8ba 3000 	ldrh.w	r3, [sl]
 8012406:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 801240a:	4640      	mov	r0, r8
 801240c:	9302      	str	r3, [sp, #8]
 801240e:	883b      	ldrh	r3, [r7, #0]
 8012410:	9303      	str	r3, [sp, #12]
 8012412:	4b58      	ldr	r3, [pc, #352]	; (8012574 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8012414:	881a      	ldrh	r2, [r3, #0]
 8012416:	9305      	str	r3, [sp, #20]
 8012418:	9204      	str	r2, [sp, #16]
 801241a:	f005 fa9b 	bl	8017954 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801241e:	8038      	strh	r0, [r7, #0]
 8012420:	4640      	mov	r0, r8
 8012422:	f005 facb 	bl	80179bc <_ZNK8touchgfx6Bitmap9getHeightEv>
 8012426:	9b05      	ldr	r3, [sp, #20]
 8012428:	b280      	uxth	r0, r0
 801242a:	8018      	strh	r0, [r3, #0]
 801242c:	4b52      	ldr	r3, [pc, #328]	; (8012578 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 801242e:	781b      	ldrb	r3, [r3, #0]
 8012430:	2b00      	cmp	r3, #0
 8012432:	d174      	bne.n	801251e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 8012434:	883b      	ldrh	r3, [r7, #0]
 8012436:	f8aa 0000 	strh.w	r0, [sl]
 801243a:	f8ab 3000 	strh.w	r3, [fp]
 801243e:	4648      	mov	r0, r9
 8012440:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 8012444:	f005 f942 	bl	80176cc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8012448:	2200      	movs	r2, #0
 801244a:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 801244e:	4611      	mov	r1, r2
 8012450:	4628      	mov	r0, r5
 8012452:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 8012456:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 801245a:	f7f2 f870 	bl	800453e <_ZN8touchgfx8Drawable5setXYEss>
 801245e:	2301      	movs	r3, #1
 8012460:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 8012464:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 8012468:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 801246c:	2b00      	cmp	r3, #0
 801246e:	dd5c      	ble.n	801252a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8012470:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8012474:	2b00      	cmp	r3, #0
 8012476:	dd58      	ble.n	801252a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8012478:	462a      	mov	r2, r5
 801247a:	ab0a      	add	r3, sp, #40	; 0x28
 801247c:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8012480:	6851      	ldr	r1, [r2, #4]
 8012482:	c303      	stmia	r3!, {r0, r1}
 8012484:	4631      	mov	r1, r6
 8012486:	a80a      	add	r0, sp, #40	; 0x28
 8012488:	f7ff fbf6 	bl	8011c78 <_ZN8touchgfx4RectaNERKS0_>
 801248c:	4b38      	ldr	r3, [pc, #224]	; (8012570 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 801248e:	2100      	movs	r1, #0
 8012490:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012494:	4b37      	ldr	r3, [pc, #220]	; (8012574 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8012496:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 801249a:	aa0a      	add	r2, sp, #40	; 0x28
 801249c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80124a0:	910c      	str	r1, [sp, #48]	; 0x30
 80124a2:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 80124a6:	ab08      	add	r3, sp, #32
 80124a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80124ac:	e883 0003 	stmia.w	r3, {r0, r1}
 80124b0:	4618      	mov	r0, r3
 80124b2:	a90c      	add	r1, sp, #48	; 0x30
 80124b4:	f7ff fbe0 	bl	8011c78 <_ZN8touchgfx4RectaNERKS0_>
 80124b8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80124ba:	2b00      	cmp	r3, #0
 80124bc:	d13c      	bne.n	8012538 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 80124be:	2000      	movs	r0, #0
 80124c0:	f884 0058 	strb.w	r0, [r4, #88]	; 0x58
 80124c4:	2600      	movs	r6, #0
 80124c6:	696b      	ldr	r3, [r5, #20]
 80124c8:	a908      	add	r1, sp, #32
 80124ca:	682a      	ldr	r2, [r5, #0]
 80124cc:	4628      	mov	r0, r5
 80124ce:	9305      	str	r3, [sp, #20]
 80124d0:	616e      	str	r6, [r5, #20]
 80124d2:	6892      	ldr	r2, [r2, #8]
 80124d4:	4790      	blx	r2
 80124d6:	9b05      	ldr	r3, [sp, #20]
 80124d8:	4652      	mov	r2, sl
 80124da:	4649      	mov	r1, r9
 80124dc:	616b      	str	r3, [r5, #20]
 80124de:	4628      	mov	r0, r5
 80124e0:	f884 6058 	strb.w	r6, [r4, #88]	; 0x58
 80124e4:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 80124e8:	f7f2 f829 	bl	800453e <_ZN8touchgfx8Drawable5setXYEss>
 80124ec:	9a01      	ldr	r2, [sp, #4]
 80124ee:	4b23      	ldr	r3, [pc, #140]	; (801257c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 80124f0:	4620      	mov	r0, r4
 80124f2:	801a      	strh	r2, [r3, #0]
 80124f4:	9a02      	ldr	r2, [sp, #8]
 80124f6:	4b22      	ldr	r3, [pc, #136]	; (8012580 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 80124f8:	801a      	strh	r2, [r3, #0]
 80124fa:	9a03      	ldr	r2, [sp, #12]
 80124fc:	4b1c      	ldr	r3, [pc, #112]	; (8012570 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 80124fe:	801a      	strh	r2, [r3, #0]
 8012500:	4b1c      	ldr	r3, [pc, #112]	; (8012574 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8012502:	9a04      	ldr	r2, [sp, #16]
 8012504:	801a      	strh	r2, [r3, #0]
 8012506:	6823      	ldr	r3, [r4, #0]
 8012508:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 801250c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801250e:	4798      	blx	r3
 8012510:	6823      	ldr	r3, [r4, #0]
 8012512:	4620      	mov	r0, r4
 8012514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012516:	4798      	blx	r3
 8012518:	b00f      	add	sp, #60	; 0x3c
 801251a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801251e:	883b      	ldrh	r3, [r7, #0]
 8012520:	f8ab 0000 	strh.w	r0, [fp]
 8012524:	f8aa 3000 	strh.w	r3, [sl]
 8012528:	e789      	b.n	801243e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 801252a:	462a      	mov	r2, r5
 801252c:	ab0a      	add	r3, sp, #40	; 0x28
 801252e:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8012532:	6851      	ldr	r1, [r2, #4]
 8012534:	c303      	stmia	r3!, {r0, r1}
 8012536:	e7a9      	b.n	801248c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 8012538:	a807      	add	r0, sp, #28
 801253a:	f005 faf7 	bl	8017b2c <_ZNK8touchgfx6Bitmap9getFormatEv>
 801253e:	4606      	mov	r6, r0
 8012540:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8012542:	6803      	ldr	r3, [r0, #0]
 8012544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012546:	4798      	blx	r3
 8012548:	4286      	cmp	r6, r0
 801254a:	d1b8      	bne.n	80124be <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 801254c:	f7f1 fb02 	bl	8003b54 <_ZN8touchgfx3HAL3lcdEv>
 8012550:	6803      	ldr	r3, [r0, #0]
 8012552:	4606      	mov	r6, r0
 8012554:	a807      	add	r0, sp, #28
 8012556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012558:	9305      	str	r3, [sp, #20]
 801255a:	f005 fae7 	bl	8017b2c <_ZNK8touchgfx6Bitmap9getFormatEv>
 801255e:	9b05      	ldr	r3, [sp, #20]
 8012560:	4601      	mov	r1, r0
 8012562:	4630      	mov	r0, r6
 8012564:	4798      	blx	r3
 8012566:	f080 0001 	eor.w	r0, r0, #1
 801256a:	b2c0      	uxtb	r0, r0
 801256c:	e7a8      	b.n	80124c0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 801256e:	bf00      	nop
 8012570:	24006998 	.word	0x24006998
 8012574:	2400699a 	.word	0x2400699a
 8012578:	2400699c 	.word	0x2400699c
 801257c:	2400699e 	.word	0x2400699e
 8012580:	240069a0 	.word	0x240069a0

08012584 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8012584:	4b07      	ldr	r3, [pc, #28]	; (80125a4 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8012586:	b510      	push	{r4, lr}
 8012588:	781b      	ldrb	r3, [r3, #0]
 801258a:	4604      	mov	r4, r0
 801258c:	b13b      	cbz	r3, 801259e <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801258e:	6803      	ldr	r3, [r0, #0]
 8012590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012592:	4798      	blx	r3
 8012594:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8012596:	4283      	cmp	r3, r0
 8012598:	d101      	bne.n	801259e <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801259a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801259c:	bd10      	pop	{r4, pc}
 801259e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80125a0:	e7fc      	b.n	801259c <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 80125a2:	bf00      	nop
 80125a4:	240069a2 	.word	0x240069a2

080125a8 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 80125a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80125ac:	461d      	mov	r5, r3
 80125ae:	b08a      	sub	sp, #40	; 0x28
 80125b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80125b4:	4690      	mov	r8, r2
 80125b6:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 80125ba:	2400      	movs	r4, #0
 80125bc:	4607      	mov	r7, r0
 80125be:	fb06 8505 	mla	r5, r6, r5, r8
 80125c2:	9404      	str	r4, [sp, #16]
 80125c4:	f88d 4020 	strb.w	r4, [sp, #32]
 80125c8:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80125cc:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80125d0:	f8ad 3018 	strh.w	r3, [sp, #24]
 80125d4:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80125d8:	f8ad 301a 	strh.w	r3, [sp, #26]
 80125dc:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80125e0:	f8ad 301c 	strh.w	r3, [sp, #28]
 80125e4:	f7ff ffce 	bl	8012584 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80125e8:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80125ec:	6878      	ldr	r0, [r7, #4]
 80125ee:	f8ad 601e 	strh.w	r6, [sp, #30]
 80125f2:	a901      	add	r1, sp, #4
 80125f4:	9505      	str	r5, [sp, #20]
 80125f6:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 80125fa:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 80125fe:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 8012602:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 8012606:	6803      	ldr	r3, [r0, #0]
 8012608:	685b      	ldr	r3, [r3, #4]
 801260a:	4798      	blx	r3
 801260c:	b00a      	add	sp, #40	; 0x28
 801260e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012612 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 8012612:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012616:	b08b      	sub	sp, #44	; 0x2c
 8012618:	2400      	movs	r4, #0
 801261a:	4691      	mov	r9, r2
 801261c:	461d      	mov	r5, r3
 801261e:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 8012622:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012626:	4688      	mov	r8, r1
 8012628:	4607      	mov	r7, r0
 801262a:	9404      	str	r4, [sp, #16]
 801262c:	fb06 9505 	mla	r5, r6, r5, r9
 8012630:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012634:	f7ff ffa6 	bl	8012584 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8012638:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801263c:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8012640:	6878      	ldr	r0, [r7, #4]
 8012642:	f8ad 3018 	strh.w	r3, [sp, #24]
 8012646:	a901      	add	r1, sp, #4
 8012648:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 801264c:	9505      	str	r5, [sp, #20]
 801264e:	f8ad 301a 	strh.w	r3, [sp, #26]
 8012652:	f8ad 401c 	strh.w	r4, [sp, #28]
 8012656:	f8ad 601e 	strh.w	r6, [sp, #30]
 801265a:	f8cd 8010 	str.w	r8, [sp, #16]
 801265e:	f8ad 4020 	strh.w	r4, [sp, #32]
 8012662:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8012666:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 801266a:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 801266e:	6803      	ldr	r3, [r0, #0]
 8012670:	685b      	ldr	r3, [r3, #4]
 8012672:	4798      	blx	r3
 8012674:	b00b      	add	sp, #44	; 0x2c
 8012676:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0801267c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 801267c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012680:	b08a      	sub	sp, #40	; 0x28
 8012682:	4698      	mov	r8, r3
 8012684:	2300      	movs	r3, #0
 8012686:	4606      	mov	r6, r0
 8012688:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 801268c:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 8012690:	2d0b      	cmp	r5, #11
 8012692:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 8012696:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
 801269a:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
 801269e:	9304      	str	r3, [sp, #16]
 80126a0:	d137      	bne.n	8012712 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 80126a2:	2380      	movs	r3, #128	; 0x80
 80126a4:	f88d 0020 	strb.w	r0, [sp, #32]
 80126a8:	4630      	mov	r0, r6
 80126aa:	9203      	str	r2, [sp, #12]
 80126ac:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80126b0:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80126b4:	f8ad 3018 	strh.w	r3, [sp, #24]
 80126b8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80126bc:	f8ad 301a 	strh.w	r3, [sp, #26]
 80126c0:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 80126c4:	f8ad 301c 	strh.w	r3, [sp, #28]
 80126c8:	f7ff ff5c 	bl	8012584 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80126cc:	2c0b      	cmp	r4, #11
 80126ce:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 80126d2:	f8ad 701e 	strh.w	r7, [sp, #30]
 80126d6:	bf94      	ite	ls
 80126d8:	4b19      	ldrls	r3, [pc, #100]	; (8012740 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 80126da:	2100      	movhi	r1, #0
 80126dc:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 80126e0:	bf98      	it	ls
 80126e2:	5d19      	ldrbls	r1, [r3, r4]
 80126e4:	fb02 8307 	mla	r3, r2, r7, r8
 80126e8:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 80126ec:	10c9      	asrs	r1, r1, #3
 80126ee:	fb01 0003 	mla	r0, r1, r3, r0
 80126f2:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 80126f6:	a901      	add	r1, sp, #4
 80126f8:	9005      	str	r0, [sp, #20]
 80126fa:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 80126fe:	2300      	movs	r3, #0
 8012700:	6870      	ldr	r0, [r6, #4]
 8012702:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8012706:	6803      	ldr	r3, [r0, #0]
 8012708:	685b      	ldr	r3, [r3, #4]
 801270a:	4798      	blx	r3
 801270c:	b00a      	add	sp, #40	; 0x28
 801270e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012712:	2d02      	cmp	r5, #2
 8012714:	d109      	bne.n	801272a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 8012716:	28ff      	cmp	r0, #255	; 0xff
 8012718:	d105      	bne.n	8012726 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 801271a:	f1bc 0f00 	cmp.w	ip, #0
 801271e:	bf14      	ite	ne
 8012720:	2340      	movne	r3, #64	; 0x40
 8012722:	2320      	moveq	r3, #32
 8012724:	e7be      	b.n	80126a4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8012726:	2340      	movs	r3, #64	; 0x40
 8012728:	e7bc      	b.n	80126a4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801272a:	28ff      	cmp	r0, #255	; 0xff
 801272c:	d105      	bne.n	801273a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 801272e:	f1bc 0f00 	cmp.w	ip, #0
 8012732:	bf14      	ite	ne
 8012734:	2304      	movne	r3, #4
 8012736:	2301      	moveq	r3, #1
 8012738:	e7b4      	b.n	80126a4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801273a:	2304      	movs	r3, #4
 801273c:	e7b2      	b.n	80126a4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801273e:	bf00      	nop
 8012740:	0802316c 	.word	0x0802316c

08012744 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8012744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012748:	b08b      	sub	sp, #44	; 0x2c
 801274a:	461d      	mov	r5, r3
 801274c:	2400      	movs	r4, #0
 801274e:	4688      	mov	r8, r1
 8012750:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 8012754:	4693      	mov	fp, r2
 8012756:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
 801275a:	4607      	mov	r7, r0
 801275c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8012760:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
 8012764:	9404      	str	r4, [sp, #16]
 8012766:	bf14      	ite	ne
 8012768:	2308      	movne	r3, #8
 801276a:	2302      	moveq	r3, #2
 801276c:	fb05 b50a 	mla	r5, r5, sl, fp
 8012770:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012774:	f7ff ff06 	bl	8012584 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8012778:	2e0b      	cmp	r6, #11
 801277a:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801277e:	a901      	add	r1, sp, #4
 8012780:	bf98      	it	ls
 8012782:	4b13      	ldrls	r3, [pc, #76]	; (80127d0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 8012784:	f8ad a01e 	strh.w	sl, [sp, #30]
 8012788:	bf98      	it	ls
 801278a:	5d9c      	ldrbls	r4, [r3, r6]
 801278c:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8012790:	10e4      	asrs	r4, r4, #3
 8012792:	f8cd 8010 	str.w	r8, [sp, #16]
 8012796:	f8ad 3018 	strh.w	r3, [sp, #24]
 801279a:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 801279e:	fb04 0405 	mla	r4, r4, r5, r0
 80127a2:	6878      	ldr	r0, [r7, #4]
 80127a4:	f8ad 301a 	strh.w	r3, [sp, #26]
 80127a8:	2300      	movs	r3, #0
 80127aa:	9405      	str	r4, [sp, #20]
 80127ac:	f8ad 301c 	strh.w	r3, [sp, #28]
 80127b0:	f88d 9020 	strb.w	r9, [sp, #32]
 80127b4:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 80127b8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80127bc:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
 80127c0:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
 80127c4:	6803      	ldr	r3, [r0, #0]
 80127c6:	685b      	ldr	r3, [r3, #4]
 80127c8:	4798      	blx	r3
 80127ca:	b00b      	add	sp, #44	; 0x2c
 80127cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80127d0:	0802316c 	.word	0x0802316c

080127d4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 80127d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80127d8:	461e      	mov	r6, r3
 80127da:	4b0a      	ldr	r3, [pc, #40]	; (8012804 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 80127dc:	460f      	mov	r7, r1
 80127de:	4690      	mov	r8, r2
 80127e0:	881d      	ldrh	r5, [r3, #0]
 80127e2:	f7f1 f9b7 	bl	8003b54 <_ZN8touchgfx3HAL3lcdEv>
 80127e6:	6803      	ldr	r3, [r0, #0]
 80127e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80127ea:	4798      	blx	r3
 80127ec:	280b      	cmp	r0, #11
 80127ee:	bf96      	itet	ls
 80127f0:	4b05      	ldrls	r3, [pc, #20]	; (8012808 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 80127f2:	2400      	movhi	r4, #0
 80127f4:	5c1c      	ldrbls	r4, [r3, r0]
 80127f6:	fb08 7005 	mla	r0, r8, r5, r7
 80127fa:	10e4      	asrs	r4, r4, #3
 80127fc:	fb04 6000 	mla	r0, r4, r0, r6
 8012800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012804:	2400699e 	.word	0x2400699e
 8012808:	0802316c 	.word	0x0802316c

0801280c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 801280c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801280e:	b08b      	sub	sp, #44	; 0x2c
 8012810:	461f      	mov	r7, r3
 8012812:	4604      	mov	r4, r0
 8012814:	4616      	mov	r6, r2
 8012816:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 801281a:	2500      	movs	r5, #0
 801281c:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8012820:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8012824:	9504      	str	r5, [sp, #16]
 8012826:	f8ad 3018 	strh.w	r3, [sp, #24]
 801282a:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801282e:	f8ad 301a 	strh.w	r3, [sp, #26]
 8012832:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8012836:	f8ad 301c 	strh.w	r3, [sp, #28]
 801283a:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 801283e:	f88d 3020 	strb.w	r3, [sp, #32]
 8012842:	f7ff fe9f 	bl	8012584 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8012846:	463a      	mov	r2, r7
 8012848:	4631      	mov	r1, r6
 801284a:	4603      	mov	r3, r0
 801284c:	4620      	mov	r0, r4
 801284e:	f7ff ffc1 	bl	80127d4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8012852:	4b0e      	ldr	r3, [pc, #56]	; (801288c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 8012854:	9005      	str	r0, [sp, #20]
 8012856:	881b      	ldrh	r3, [r3, #0]
 8012858:	f8ad 301e 	strh.w	r3, [sp, #30]
 801285c:	f7f1 f97a 	bl	8003b54 <_ZN8touchgfx3HAL3lcdEv>
 8012860:	6803      	ldr	r3, [r0, #0]
 8012862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012864:	4798      	blx	r3
 8012866:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012868:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 801286c:	a901      	add	r1, sp, #4
 801286e:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8012872:	9304      	str	r3, [sp, #16]
 8012874:	6860      	ldr	r0, [r4, #4]
 8012876:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 801287a:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 801287e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8012882:	6803      	ldr	r3, [r0, #0]
 8012884:	685b      	ldr	r3, [r3, #4]
 8012886:	4798      	blx	r3
 8012888:	b00b      	add	sp, #44	; 0x2c
 801288a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801288c:	2400699e 	.word	0x2400699e

08012890 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8012890:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012892:	b08d      	sub	sp, #52	; 0x34
 8012894:	2501      	movs	r5, #1
 8012896:	4604      	mov	r4, r0
 8012898:	466b      	mov	r3, sp
 801289a:	9503      	str	r5, [sp, #12]
 801289c:	e883 0006 	stmia.w	r3, {r1, r2}
 80128a0:	2300      	movs	r3, #0
 80128a2:	f8bd 6000 	ldrh.w	r6, [sp]
 80128a6:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 80128aa:	9306      	str	r3, [sp, #24]
 80128ac:	6803      	ldr	r3, [r0, #0]
 80128ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80128b0:	4798      	blx	r3
 80128b2:	463a      	mov	r2, r7
 80128b4:	4631      	mov	r1, r6
 80128b6:	4603      	mov	r3, r0
 80128b8:	4620      	mov	r0, r4
 80128ba:	f7ff ff8b 	bl	80127d4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80128be:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80128c0:	9004      	str	r0, [sp, #16]
 80128c2:	9307      	str	r3, [sp, #28]
 80128c4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80128c8:	f8ad 3020 	strh.w	r3, [sp, #32]
 80128cc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80128d0:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80128d4:	4b0e      	ldr	r3, [pc, #56]	; (8012910 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 80128d6:	881b      	ldrh	r3, [r3, #0]
 80128d8:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 80128dc:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 80128e0:	f7f1 f938 	bl	8003b54 <_ZN8touchgfx3HAL3lcdEv>
 80128e4:	6803      	ldr	r3, [r0, #0]
 80128e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80128e8:	4798      	blx	r3
 80128ea:	23ff      	movs	r3, #255	; 0xff
 80128ec:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 80128f0:	a903      	add	r1, sp, #12
 80128f2:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 80128f6:	6860      	ldr	r0, [r4, #4]
 80128f8:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 80128fc:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8012900:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8012904:	6803      	ldr	r3, [r0, #0]
 8012906:	685b      	ldr	r3, [r3, #4]
 8012908:	4798      	blx	r3
 801290a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 801290c:	b00d      	add	sp, #52	; 0x34
 801290e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012910:	2400699e 	.word	0x2400699e

08012914 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8012914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012918:	b08c      	sub	sp, #48	; 0x30
 801291a:	461e      	mov	r6, r3
 801291c:	2300      	movs	r3, #0
 801291e:	4604      	mov	r4, r0
 8012920:	466d      	mov	r5, sp
 8012922:	9306      	str	r3, [sp, #24]
 8012924:	6803      	ldr	r3, [r0, #0]
 8012926:	e885 0006 	stmia.w	r5, {r1, r2}
 801292a:	2501      	movs	r5, #1
 801292c:	f8bd 7000 	ldrh.w	r7, [sp]
 8012930:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 8012934:	9503      	str	r5, [sp, #12]
 8012936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012938:	4798      	blx	r3
 801293a:	4642      	mov	r2, r8
 801293c:	4639      	mov	r1, r7
 801293e:	4603      	mov	r3, r0
 8012940:	4620      	mov	r0, r4
 8012942:	f7ff ff47 	bl	80127d4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8012946:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801294a:	9004      	str	r0, [sp, #16]
 801294c:	f8ad 3020 	strh.w	r3, [sp, #32]
 8012950:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8012954:	9607      	str	r6, [sp, #28]
 8012956:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801295a:	4b10      	ldr	r3, [pc, #64]	; (801299c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 801295c:	881b      	ldrh	r3, [r3, #0]
 801295e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8012962:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012964:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8012968:	f7f1 f8f4 	bl	8003b54 <_ZN8touchgfx3HAL3lcdEv>
 801296c:	6803      	ldr	r3, [r0, #0]
 801296e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012970:	4798      	blx	r3
 8012972:	23ff      	movs	r3, #255	; 0xff
 8012974:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 8012978:	a903      	add	r1, sp, #12
 801297a:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 801297e:	6860      	ldr	r0, [r4, #4]
 8012980:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8012984:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8012988:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 801298c:	6803      	ldr	r3, [r0, #0]
 801298e:	685b      	ldr	r3, [r3, #4]
 8012990:	4798      	blx	r3
 8012992:	4630      	mov	r0, r6
 8012994:	b00c      	add	sp, #48	; 0x30
 8012996:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801299a:	bf00      	nop
 801299c:	2400699e 	.word	0x2400699e

080129a0 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 80129a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80129a2:	b085      	sub	sp, #20
 80129a4:	4605      	mov	r5, r0
 80129a6:	ac02      	add	r4, sp, #8
 80129a8:	e884 0006 	stmia.w	r4, {r1, r2}
 80129ac:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 80129b0:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 80129b4:	f7ff fde6 	bl	8012584 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80129b8:	4631      	mov	r1, r6
 80129ba:	4603      	mov	r3, r0
 80129bc:	463a      	mov	r2, r7
 80129be:	4628      	mov	r0, r5
 80129c0:	f7ff ff08 	bl	80127d4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80129c4:	4a05      	ldr	r2, [pc, #20]	; (80129dc <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 80129c6:	682b      	ldr	r3, [r5, #0]
 80129c8:	8812      	ldrh	r2, [r2, #0]
 80129ca:	9200      	str	r2, [sp, #0]
 80129cc:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 80129ce:	4603      	mov	r3, r0
 80129d0:	4628      	mov	r0, r5
 80129d2:	e894 0006 	ldmia.w	r4, {r1, r2}
 80129d6:	47b0      	blx	r6
 80129d8:	b005      	add	sp, #20
 80129da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80129dc:	2400699e 	.word	0x2400699e

080129e0 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 80129e0:	b570      	push	{r4, r5, r6, lr}
 80129e2:	f890 306e 	ldrb.w	r3, [r0, #110]	; 0x6e
 80129e6:	4604      	mov	r4, r0
 80129e8:	b19b      	cbz	r3, 8012a12 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 80129ea:	2002      	movs	r0, #2
 80129ec:	f7ee fe44 	bl	8001678 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 80129f0:	2300      	movs	r3, #0
 80129f2:	4620      	mov	r0, r4
 80129f4:	f884 306e 	strb.w	r3, [r4, #110]	; 0x6e
 80129f8:	f884 306d 	strb.w	r3, [r4, #109]	; 0x6d
 80129fc:	6823      	ldr	r3, [r4, #0]
 80129fe:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 8012a02:	f7ff fdbf 	bl	8012584 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8012a06:	4601      	mov	r1, r0
 8012a08:	4620      	mov	r0, r4
 8012a0a:	462b      	mov	r3, r5
 8012a0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012a10:	4718      	bx	r3
 8012a12:	bd70      	pop	{r4, r5, r6, pc}

08012a14 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8012a14:	b538      	push	{r3, r4, r5, lr}
 8012a16:	f890 307b 	ldrb.w	r3, [r0, #123]	; 0x7b
 8012a1a:	4604      	mov	r4, r0
 8012a1c:	460d      	mov	r5, r1
 8012a1e:	428b      	cmp	r3, r1
 8012a20:	d006      	beq.n	8012a30 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 8012a22:	6803      	ldr	r3, [r0, #0]
 8012a24:	b929      	cbnz	r1, 8012a32 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 8012a26:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8012a2a:	4798      	blx	r3
 8012a2c:	f884 507b 	strb.w	r5, [r4, #123]	; 0x7b
 8012a30:	bd38      	pop	{r3, r4, r5, pc}
 8012a32:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8012a36:	e7f8      	b.n	8012a2a <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

08012a38 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8012a38:	4b0d      	ldr	r3, [pc, #52]	; (8012a70 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 8012a3a:	b510      	push	{r4, lr}
 8012a3c:	781b      	ldrb	r3, [r3, #0]
 8012a3e:	4604      	mov	r4, r0
 8012a40:	b95b      	cbnz	r3, 8012a5a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8012a42:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8012a46:	2b02      	cmp	r3, #2
 8012a48:	d007      	beq.n	8012a5a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8012a4a:	6840      	ldr	r0, [r0, #4]
 8012a4c:	f000 f90e 	bl	8012c6c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8012a50:	b118      	cbz	r0, 8012a5a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8012a52:	6862      	ldr	r2, [r4, #4]
 8012a54:	7a53      	ldrb	r3, [r2, #9]
 8012a56:	2b00      	cmp	r3, #0
 8012a58:	d0fc      	beq.n	8012a54 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8012a5a:	f7ef f909 	bl	8001c70 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8012a5e:	4620      	mov	r0, r4
 8012a60:	2100      	movs	r1, #0
 8012a62:	f7ff ffd7 	bl	8012a14 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8012a66:	4620      	mov	r0, r4
 8012a68:	f7ff fd8c 	bl	8012584 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8012a6c:	bd10      	pop	{r4, pc}
 8012a6e:	bf00      	nop
 8012a70:	240069a2 	.word	0x240069a2

08012a74 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 8012a74:	4770      	bx	lr

08012a76 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 8012a76:	2000      	movs	r0, #0
 8012a78:	4770      	bx	lr

08012a7a <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8012a7a:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8012a7e:	1a13      	subs	r3, r2, r0
 8012a80:	4258      	negs	r0, r3
 8012a82:	4158      	adcs	r0, r3
 8012a84:	4770      	bx	lr

08012a86 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8012a86:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8012a8a:	1a9b      	subs	r3, r3, r2
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	bfdc      	itt	le
 8012a90:	6882      	ldrle	r2, [r0, #8]
 8012a92:	189b      	addle	r3, r3, r2
 8012a94:	2b01      	cmp	r3, #1
 8012a96:	bfcc      	ite	gt
 8012a98:	2000      	movgt	r0, #0
 8012a9a:	2001      	movle	r0, #1
 8012a9c:	4770      	bx	lr

08012a9e <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8012a9e:	6902      	ldr	r2, [r0, #16]
 8012aa0:	6843      	ldr	r3, [r0, #4]
 8012aa2:	2024      	movs	r0, #36	; 0x24
 8012aa4:	fb00 3002 	mla	r0, r0, r2, r3
 8012aa8:	4770      	bx	lr

08012aaa <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8012aaa:	6803      	ldr	r3, [r0, #0]
 8012aac:	691b      	ldr	r3, [r3, #16]
 8012aae:	4718      	bx	r3

08012ab0 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8012ab0:	2301      	movs	r3, #1
 8012ab2:	b570      	push	{r4, r5, r6, lr}
 8012ab4:	7203      	strb	r3, [r0, #8]
 8012ab6:	4604      	mov	r4, r0
 8012ab8:	6840      	ldr	r0, [r0, #4]
 8012aba:	6803      	ldr	r3, [r0, #0]
 8012abc:	699b      	ldr	r3, [r3, #24]
 8012abe:	4798      	blx	r3
 8012ac0:	6803      	ldr	r3, [r0, #0]
 8012ac2:	4605      	mov	r5, r0
 8012ac4:	2b40      	cmp	r3, #64	; 0x40
 8012ac6:	d00c      	beq.n	8012ae2 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8012ac8:	d810      	bhi.n	8012aec <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8012aca:	2b04      	cmp	r3, #4
 8012acc:	d01d      	beq.n	8012b0a <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 8012ace:	d804      	bhi.n	8012ada <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 8012ad0:	2b01      	cmp	r3, #1
 8012ad2:	d006      	beq.n	8012ae2 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8012ad4:	2b02      	cmp	r3, #2
 8012ad6:	d02c      	beq.n	8012b32 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 8012ad8:	bd70      	pop	{r4, r5, r6, pc}
 8012ada:	2b08      	cmp	r3, #8
 8012adc:	d01d      	beq.n	8012b1a <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 8012ade:	2b20      	cmp	r3, #32
 8012ae0:	d1fa      	bne.n	8012ad8 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 8012ae2:	6823      	ldr	r3, [r4, #0]
 8012ae4:	4620      	mov	r0, r4
 8012ae6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012ae8:	4798      	blx	r3
 8012aea:	e013      	b.n	8012b14 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8012aec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012af0:	d0f7      	beq.n	8012ae2 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8012af2:	d804      	bhi.n	8012afe <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 8012af4:	2b80      	cmp	r3, #128	; 0x80
 8012af6:	d0f4      	beq.n	8012ae2 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8012af8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012afc:	e7f0      	b.n	8012ae0 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 8012afe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012b02:	d0ee      	beq.n	8012ae2 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8012b04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012b08:	e7e5      	b.n	8012ad6 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 8012b0a:	6823      	ldr	r3, [r4, #0]
 8012b0c:	7f01      	ldrb	r1, [r0, #28]
 8012b0e:	4620      	mov	r0, r4
 8012b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012b12:	4798      	blx	r3
 8012b14:	6823      	ldr	r3, [r4, #0]
 8012b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012b18:	e006      	b.n	8012b28 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8012b1a:	6823      	ldr	r3, [r4, #0]
 8012b1c:	7f01      	ldrb	r1, [r0, #28]
 8012b1e:	4620      	mov	r0, r4
 8012b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012b22:	4798      	blx	r3
 8012b24:	6823      	ldr	r3, [r4, #0]
 8012b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012b28:	4629      	mov	r1, r5
 8012b2a:	4620      	mov	r0, r4
 8012b2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012b30:	4718      	bx	r3
 8012b32:	6823      	ldr	r3, [r4, #0]
 8012b34:	4620      	mov	r0, r4
 8012b36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012b38:	4798      	blx	r3
 8012b3a:	e7f3      	b.n	8012b24 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

08012b3c <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8012b3c:	4770      	bx	lr

08012b3e <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8012b3e:	4770      	bx	lr

08012b40 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8012b40:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 8012b44:	b510      	push	{r4, lr}
 8012b46:	1ad2      	subs	r2, r2, r3
 8012b48:	2a00      	cmp	r2, #0
 8012b4a:	bfdc      	itt	le
 8012b4c:	6884      	ldrle	r4, [r0, #8]
 8012b4e:	1912      	addle	r2, r2, r4
 8012b50:	2a01      	cmp	r2, #1
 8012b52:	dd16      	ble.n	8012b82 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 8012b54:	6842      	ldr	r2, [r0, #4]
 8012b56:	2424      	movs	r4, #36	; 0x24
 8012b58:	fb04 2303 	mla	r3, r4, r3, r2
 8012b5c:	f101 0220 	add.w	r2, r1, #32
 8012b60:	f851 4b04 	ldr.w	r4, [r1], #4
 8012b64:	4291      	cmp	r1, r2
 8012b66:	f843 4b04 	str.w	r4, [r3], #4
 8012b6a:	d1f9      	bne.n	8012b60 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 8012b6c:	780a      	ldrb	r2, [r1, #0]
 8012b6e:	701a      	strb	r2, [r3, #0]
 8012b70:	68c3      	ldr	r3, [r0, #12]
 8012b72:	6882      	ldr	r2, [r0, #8]
 8012b74:	f3bf 8f5b 	dmb	ish
 8012b78:	3301      	adds	r3, #1
 8012b7a:	429a      	cmp	r2, r3
 8012b7c:	bfd8      	it	le
 8012b7e:	1a9b      	suble	r3, r3, r2
 8012b80:	60c3      	str	r3, [r0, #12]
 8012b82:	bd10      	pop	{r4, pc}

08012b84 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8012b84:	6903      	ldr	r3, [r0, #16]
 8012b86:	6882      	ldr	r2, [r0, #8]
 8012b88:	f3bf 8f5b 	dmb	ish
 8012b8c:	3301      	adds	r3, #1
 8012b8e:	429a      	cmp	r2, r3
 8012b90:	bfd8      	it	le
 8012b92:	1a9b      	suble	r3, r3, r2
 8012b94:	6103      	str	r3, [r0, #16]
 8012b96:	4770      	bx	lr

08012b98 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8012b98:	b570      	push	{r4, r5, r6, lr}
 8012b9a:	4604      	mov	r4, r0
 8012b9c:	460e      	mov	r6, r1
 8012b9e:	6860      	ldr	r0, [r4, #4]
 8012ba0:	6803      	ldr	r3, [r0, #0]
 8012ba2:	685b      	ldr	r3, [r3, #4]
 8012ba4:	4798      	blx	r3
 8012ba6:	2800      	cmp	r0, #0
 8012ba8:	d1f9      	bne.n	8012b9e <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8012baa:	4d0d      	ldr	r5, [pc, #52]	; (8012be0 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8012bac:	6828      	ldr	r0, [r5, #0]
 8012bae:	6803      	ldr	r3, [r0, #0]
 8012bb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012bb2:	4798      	blx	r3
 8012bb4:	f7ef f876 	bl	8001ca4 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8012bb8:	6828      	ldr	r0, [r5, #0]
 8012bba:	2101      	movs	r1, #1
 8012bbc:	f7ff ff2a 	bl	8012a14 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8012bc0:	6860      	ldr	r0, [r4, #4]
 8012bc2:	4631      	mov	r1, r6
 8012bc4:	6803      	ldr	r3, [r0, #0]
 8012bc6:	689b      	ldr	r3, [r3, #8]
 8012bc8:	4798      	blx	r3
 8012bca:	6823      	ldr	r3, [r4, #0]
 8012bcc:	4620      	mov	r0, r4
 8012bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012bd0:	4798      	blx	r3
 8012bd2:	6828      	ldr	r0, [r5, #0]
 8012bd4:	6803      	ldr	r3, [r0, #0]
 8012bd6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012bda:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012bdc:	4718      	bx	r3
 8012bde:	bf00      	nop
 8012be0:	240069a4 	.word	0x240069a4

08012be4 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8012be4:	b508      	push	{r3, lr}
 8012be6:	f7ef f843 	bl	8001c70 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8012bea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8012bee:	f7ef b84d 	b.w	8001c8c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08012bf2 <_ZN8touchgfx13DMA_Interface5startEv>:
 8012bf2:	b510      	push	{r4, lr}
 8012bf4:	4604      	mov	r4, r0
 8012bf6:	6840      	ldr	r0, [r0, #4]
 8012bf8:	6803      	ldr	r3, [r0, #0]
 8012bfa:	681b      	ldr	r3, [r3, #0]
 8012bfc:	4798      	blx	r3
 8012bfe:	b948      	cbnz	r0, 8012c14 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8012c00:	7a63      	ldrb	r3, [r4, #9]
 8012c02:	b13b      	cbz	r3, 8012c14 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8012c04:	7a23      	ldrb	r3, [r4, #8]
 8012c06:	b92b      	cbnz	r3, 8012c14 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8012c08:	6823      	ldr	r3, [r4, #0]
 8012c0a:	4620      	mov	r0, r4
 8012c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012c12:	4718      	bx	r3
 8012c14:	bd10      	pop	{r4, pc}

08012c16 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8012c16:	b570      	push	{r4, r5, r6, lr}
 8012c18:	4604      	mov	r4, r0
 8012c1a:	6840      	ldr	r0, [r0, #4]
 8012c1c:	6803      	ldr	r3, [r0, #0]
 8012c1e:	681b      	ldr	r3, [r3, #0]
 8012c20:	4798      	blx	r3
 8012c22:	4605      	mov	r5, r0
 8012c24:	b930      	cbnz	r0, 8012c34 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8012c26:	7a23      	ldrb	r3, [r4, #8]
 8012c28:	b123      	cbz	r3, 8012c34 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8012c2a:	6860      	ldr	r0, [r4, #4]
 8012c2c:	6803      	ldr	r3, [r0, #0]
 8012c2e:	695b      	ldr	r3, [r3, #20]
 8012c30:	4798      	blx	r3
 8012c32:	7225      	strb	r5, [r4, #8]
 8012c34:	6860      	ldr	r0, [r4, #4]
 8012c36:	6803      	ldr	r3, [r0, #0]
 8012c38:	681b      	ldr	r3, [r3, #0]
 8012c3a:	4798      	blx	r3
 8012c3c:	b928      	cbnz	r0, 8012c4a <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8012c3e:	6823      	ldr	r3, [r4, #0]
 8012c40:	4620      	mov	r0, r4
 8012c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012c48:	4718      	bx	r3
 8012c4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012c4e:	f7ef b835 	b.w	8001cbc <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>
	...

08012c54 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8012c54:	b510      	push	{r4, lr}
 8012c56:	6082      	str	r2, [r0, #8]
 8012c58:	2200      	movs	r2, #0
 8012c5a:	4c03      	ldr	r4, [pc, #12]	; (8012c68 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8012c5c:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8012c60:	e9c0 4100 	strd	r4, r1, [r0]
 8012c64:	bd10      	pop	{r4, pc}
 8012c66:	bf00      	nop
 8012c68:	080232a8 	.word	0x080232a8

08012c6c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8012c6c:	6840      	ldr	r0, [r0, #4]
 8012c6e:	6803      	ldr	r3, [r0, #0]
 8012c70:	681b      	ldr	r3, [r3, #0]
 8012c72:	4718      	bx	r3

08012c74 <_ZN8touchgfx8TextArea8setWidthEs>:
 8012c74:	b530      	push	{r4, r5, lr}
 8012c76:	b085      	sub	sp, #20
 8012c78:	6803      	ldr	r3, [r0, #0]
 8012c7a:	4604      	mov	r4, r0
 8012c7c:	8101      	strh	r1, [r0, #8]
 8012c7e:	466d      	mov	r5, sp
 8012c80:	4601      	mov	r1, r0
 8012c82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012c86:	343c      	adds	r4, #60	; 0x3c
 8012c88:	4628      	mov	r0, r5
 8012c8a:	4798      	blx	r3
 8012c8c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8012c90:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8012c94:	b005      	add	sp, #20
 8012c96:	bd30      	pop	{r4, r5, pc}

08012c98 <_ZN8touchgfx8TextArea9setHeightEs>:
 8012c98:	b530      	push	{r4, r5, lr}
 8012c9a:	b085      	sub	sp, #20
 8012c9c:	6803      	ldr	r3, [r0, #0]
 8012c9e:	4604      	mov	r4, r0
 8012ca0:	8141      	strh	r1, [r0, #10]
 8012ca2:	466d      	mov	r5, sp
 8012ca4:	4601      	mov	r1, r0
 8012ca6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012caa:	343c      	adds	r4, #60	; 0x3c
 8012cac:	4628      	mov	r0, r5
 8012cae:	4798      	blx	r3
 8012cb0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8012cb4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8012cb8:	b005      	add	sp, #20
 8012cba:	bd30      	pop	{r4, r5, pc}

08012cbc <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 8012cbc:	2200      	movs	r2, #0
 8012cbe:	8002      	strh	r2, [r0, #0]
 8012cc0:	8042      	strh	r2, [r0, #2]
 8012cc2:	8082      	strh	r2, [r0, #4]
 8012cc4:	80c2      	strh	r2, [r0, #6]
 8012cc6:	4770      	bx	lr

08012cc8 <_ZN8touchgfx8TextArea8setAlphaEh>:
 8012cc8:	f880 1036 	strb.w	r1, [r0, #54]	; 0x36
 8012ccc:	4770      	bx	lr
	...

08012cd0 <_ZN8touchgfx8TextArea12setBaselineYEs>:
 8012cd0:	b570      	push	{r4, r5, r6, lr}
 8012cd2:	6803      	ldr	r3, [r0, #0]
 8012cd4:	4604      	mov	r4, r0
 8012cd6:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8012cd8:	460d      	mov	r5, r1
 8012cda:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8012cdc:	4b08      	ldr	r3, [pc, #32]	; (8012d00 <_ZN8touchgfx8TextArea12setBaselineYEs+0x30>)
 8012cde:	681b      	ldr	r3, [r3, #0]
 8012ce0:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8012ce4:	4b07      	ldr	r3, [pc, #28]	; (8012d04 <_ZN8touchgfx8TextArea12setBaselineYEs+0x34>)
 8012ce6:	681b      	ldr	r3, [r3, #0]
 8012ce8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8012cec:	6803      	ldr	r3, [r0, #0]
 8012cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012cf0:	4798      	blx	r3
 8012cf2:	1a29      	subs	r1, r5, r0
 8012cf4:	4633      	mov	r3, r6
 8012cf6:	4620      	mov	r0, r4
 8012cf8:	b209      	sxth	r1, r1
 8012cfa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012cfe:	4718      	bx	r3
 8012d00:	240069f4 	.word	0x240069f4
 8012d04:	240069fc 	.word	0x240069fc

08012d08 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
 8012d08:	b570      	push	{r4, r5, r6, lr}
 8012d0a:	6803      	ldr	r3, [r0, #0]
 8012d0c:	4604      	mov	r4, r0
 8012d0e:	4615      	mov	r5, r2
 8012d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d12:	4798      	blx	r3
 8012d14:	6823      	ldr	r3, [r4, #0]
 8012d16:	4629      	mov	r1, r5
 8012d18:	4620      	mov	r0, r4
 8012d1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012d1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012d20:	4718      	bx	r3

08012d22 <_ZNK8touchgfx8TextArea12getWildcard1Ev>:
 8012d22:	2000      	movs	r0, #0
 8012d24:	4770      	bx	lr

08012d26 <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
 8012d26:	2000      	movs	r0, #0
 8012d28:	4770      	bx	lr
	...

08012d2c <_ZNK8touchgfx8TextArea12getAlignmentEv>:
 8012d2c:	4b07      	ldr	r3, [pc, #28]	; (8012d4c <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
 8012d2e:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8012d30:	881b      	ldrh	r3, [r3, #0]
 8012d32:	4293      	cmp	r3, r2
 8012d34:	bf81      	itttt	hi
 8012d36:	4b06      	ldrhi	r3, [pc, #24]	; (8012d50 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
 8012d38:	681b      	ldrhi	r3, [r3, #0]
 8012d3a:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
 8012d3e:	7858      	ldrbhi	r0, [r3, #1]
 8012d40:	bf8c      	ite	hi
 8012d42:	f000 0003 	andhi.w	r0, r0, #3
 8012d46:	2000      	movls	r0, #0
 8012d48:	4770      	bx	lr
 8012d4a:	bf00      	nop
 8012d4c:	240069f8 	.word	0x240069f8
 8012d50:	240069f4 	.word	0x240069f4

08012d54 <_ZNK8touchgfx8TextArea13getTextHeightEv>:
 8012d54:	4b11      	ldr	r3, [pc, #68]	; (8012d9c <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
 8012d56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d5a:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8012d5c:	4604      	mov	r4, r0
 8012d5e:	881b      	ldrh	r3, [r3, #0]
 8012d60:	428b      	cmp	r3, r1
 8012d62:	d918      	bls.n	8012d96 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
 8012d64:	6803      	ldr	r3, [r0, #0]
 8012d66:	6f9d      	ldr	r5, [r3, #120]	; 0x78
 8012d68:	4b0d      	ldr	r3, [pc, #52]	; (8012da0 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
 8012d6a:	6818      	ldr	r0, [r3, #0]
 8012d6c:	f7f2 faaa 	bl	80052c4 <_ZNK8touchgfx5Texts7getTextEt>
 8012d70:	6823      	ldr	r3, [r4, #0]
 8012d72:	4606      	mov	r6, r0
 8012d74:	4620      	mov	r0, r4
 8012d76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012d78:	4798      	blx	r3
 8012d7a:	6823      	ldr	r3, [r4, #0]
 8012d7c:	4607      	mov	r7, r0
 8012d7e:	4620      	mov	r0, r4
 8012d80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012d84:	4798      	blx	r3
 8012d86:	463a      	mov	r2, r7
 8012d88:	4603      	mov	r3, r0
 8012d8a:	4631      	mov	r1, r6
 8012d8c:	4620      	mov	r0, r4
 8012d8e:	46ac      	mov	ip, r5
 8012d90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012d94:	4760      	bx	ip
 8012d96:	2000      	movs	r0, #0
 8012d98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d9c:	240069f8 	.word	0x240069f8
 8012da0:	24006a00 	.word	0x24006a00

08012da4 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 8012da4:	4b18      	ldr	r3, [pc, #96]	; (8012e08 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 8012da6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012daa:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8012dac:	4604      	mov	r4, r0
 8012dae:	881b      	ldrh	r3, [r3, #0]
 8012db0:	428b      	cmp	r3, r1
 8012db2:	d926      	bls.n	8012e02 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
 8012db4:	4b15      	ldr	r3, [pc, #84]	; (8012e0c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 8012db6:	681b      	ldr	r3, [r3, #0]
 8012db8:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8012dbc:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8012dc0:	4b13      	ldr	r3, [pc, #76]	; (8012e10 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8012dc2:	7855      	ldrb	r5, [r2, #1]
 8012dc4:	681b      	ldr	r3, [r3, #0]
 8012dc6:	f3c5 0581 	ubfx	r5, r5, #2, #2
 8012dca:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8012dce:	6833      	ldr	r3, [r6, #0]
 8012dd0:	69df      	ldr	r7, [r3, #28]
 8012dd2:	4b10      	ldr	r3, [pc, #64]	; (8012e14 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 8012dd4:	6818      	ldr	r0, [r3, #0]
 8012dd6:	f7f2 fa75 	bl	80052c4 <_ZNK8touchgfx5Texts7getTextEt>
 8012dda:	6823      	ldr	r3, [r4, #0]
 8012ddc:	4680      	mov	r8, r0
 8012dde:	4620      	mov	r0, r4
 8012de0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012de2:	4798      	blx	r3
 8012de4:	6823      	ldr	r3, [r4, #0]
 8012de6:	4681      	mov	r9, r0
 8012de8:	4620      	mov	r0, r4
 8012dea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012dee:	4798      	blx	r3
 8012df0:	464b      	mov	r3, r9
 8012df2:	9000      	str	r0, [sp, #0]
 8012df4:	4642      	mov	r2, r8
 8012df6:	4629      	mov	r1, r5
 8012df8:	4630      	mov	r0, r6
 8012dfa:	47b8      	blx	r7
 8012dfc:	b003      	add	sp, #12
 8012dfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012e02:	2000      	movs	r0, #0
 8012e04:	e7fa      	b.n	8012dfc <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
 8012e06:	bf00      	nop
 8012e08:	240069f8 	.word	0x240069f8
 8012e0c:	240069f4 	.word	0x240069f4
 8012e10:	240069fc 	.word	0x240069fc
 8012e14:	24006a00 	.word	0x24006a00

08012e18 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 8012e18:	b40e      	push	{r1, r2, r3}
 8012e1a:	4b30      	ldr	r3, [pc, #192]	; (8012edc <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
 8012e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012e20:	881a      	ldrh	r2, [r3, #0]
 8012e22:	b09d      	sub	sp, #116	; 0x74
 8012e24:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8012e26:	4604      	mov	r4, r0
 8012e28:	429a      	cmp	r2, r3
 8012e2a:	d954      	bls.n	8012ed6 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
 8012e2c:	aa26      	add	r2, sp, #152	; 0x98
 8012e2e:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8012ee0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 8012e32:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8012ee4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 8012e36:	9202      	str	r2, [sp, #8]
 8012e38:	f8d9 2000 	ldr.w	r2, [r9]
 8012e3c:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8012e40:	f8d8 3000 	ldr.w	r3, [r8]
 8012e44:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8012e48:	682b      	ldr	r3, [r5, #0]
 8012e4a:	4628      	mov	r0, r5
 8012e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012e4e:	4798      	blx	r3
 8012e50:	4606      	mov	r6, r0
 8012e52:	b207      	sxth	r7, r0
 8012e54:	a803      	add	r0, sp, #12
 8012e56:	f003 fcbb 	bl	80167d0 <_ZN8touchgfx12TextProviderC1Ev>
 8012e5a:	682b      	ldr	r3, [r5, #0]
 8012e5c:	4628      	mov	r0, r5
 8012e5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012e60:	4798      	blx	r3
 8012e62:	682b      	ldr	r3, [r5, #0]
 8012e64:	4682      	mov	sl, r0
 8012e66:	4628      	mov	r0, r5
 8012e68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012e6a:	4798      	blx	r3
 8012e6c:	4653      	mov	r3, sl
 8012e6e:	9000      	str	r0, [sp, #0]
 8012e70:	a803      	add	r0, sp, #12
 8012e72:	9a02      	ldr	r2, [sp, #8]
 8012e74:	9925      	ldr	r1, [sp, #148]	; 0x94
 8012e76:	f003 fd06 	bl	8016886 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8012e7a:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8012e7c:	f8d9 3000 	ldr.w	r3, [r9]
 8012e80:	f894 c037 	ldrb.w	ip, [r4, #55]	; 0x37
 8012e84:	8925      	ldrh	r5, [r4, #8]
 8012e86:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 8012e8a:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 8012e8e:	eba5 050c 	sub.w	r5, r5, ip
 8012e92:	784a      	ldrb	r2, [r1, #1]
 8012e94:	f8d8 3000 	ldr.w	r3, [r8]
 8012e98:	b22d      	sxth	r5, r5
 8012e9a:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 8012e9e:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8012ea2:	9500      	str	r5, [sp, #0]
 8012ea4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8012ea8:	a803      	add	r0, sp, #12
 8012eaa:	f001 fb3f 	bl	801452c <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 8012eae:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 8012eb2:	b203      	sxth	r3, r0
 8012eb4:	18b9      	adds	r1, r7, r2
 8012eb6:	2900      	cmp	r1, #0
 8012eb8:	dd0b      	ble.n	8012ed2 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
 8012eba:	3b01      	subs	r3, #1
 8012ebc:	fb13 f302 	smulbb	r3, r3, r2
 8012ec0:	fb16 3300 	smlabb	r3, r6, r0, r3
 8012ec4:	b21f      	sxth	r7, r3
 8012ec6:	4638      	mov	r0, r7
 8012ec8:	b01d      	add	sp, #116	; 0x74
 8012eca:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012ece:	b003      	add	sp, #12
 8012ed0:	4770      	bx	lr
 8012ed2:	2b00      	cmp	r3, #0
 8012ed4:	dcf7      	bgt.n	8012ec6 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 8012ed6:	2700      	movs	r7, #0
 8012ed8:	e7f5      	b.n	8012ec6 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 8012eda:	bf00      	nop
 8012edc:	240069f8 	.word	0x240069f8
 8012ee0:	240069f4 	.word	0x240069f4
 8012ee4:	240069fc 	.word	0x240069fc

08012ee8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>:
 8012ee8:	4bbd      	ldr	r3, [pc, #756]	; (80131e0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f8>)
 8012eea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012eee:	460c      	mov	r4, r1
 8012ef0:	881b      	ldrh	r3, [r3, #0]
 8012ef2:	8d89      	ldrh	r1, [r1, #44]	; 0x2c
 8012ef4:	b0a9      	sub	sp, #164	; 0xa4
 8012ef6:	4680      	mov	r8, r0
 8012ef8:	428b      	cmp	r3, r1
 8012efa:	d809      	bhi.n	8012f10 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28>
 8012efc:	2300      	movs	r3, #0
 8012efe:	f04f 32ff 	mov.w	r2, #4294967295
 8012f02:	6083      	str	r3, [r0, #8]
 8012f04:	e9c0 3200 	strd	r3, r2, [r0]
 8012f08:	4640      	mov	r0, r8
 8012f0a:	b029      	add	sp, #164	; 0xa4
 8012f0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f10:	4eb4      	ldr	r6, [pc, #720]	; (80131e4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>)
 8012f12:	6833      	ldr	r3, [r6, #0]
 8012f14:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 8012f18:	4bb3      	ldr	r3, [pc, #716]	; (80131e8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x300>)
 8012f1a:	681b      	ldr	r3, [r3, #0]
 8012f1c:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8012f20:	4bb2      	ldr	r3, [pc, #712]	; (80131ec <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 8012f22:	6818      	ldr	r0, [r3, #0]
 8012f24:	f7f2 f9ce 	bl	80052c4 <_ZNK8touchgfx5Texts7getTextEt>
 8012f28:	682b      	ldr	r3, [r5, #0]
 8012f2a:	4681      	mov	r9, r0
 8012f2c:	4628      	mov	r0, r5
 8012f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012f30:	4798      	blx	r3
 8012f32:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
 8012f34:	b203      	sxth	r3, r0
 8012f36:	4682      	mov	sl, r0
 8012f38:	4407      	add	r7, r0
 8012f3a:	a80f      	add	r0, sp, #60	; 0x3c
 8012f3c:	9304      	str	r3, [sp, #16]
 8012f3e:	b2bb      	uxth	r3, r7
 8012f40:	9303      	str	r3, [sp, #12]
 8012f42:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8012f46:	2b00      	cmp	r3, #0
 8012f48:	f040 80a5 	bne.w	8013096 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1ae>
 8012f4c:	f003 fc40 	bl	80167d0 <_ZN8touchgfx12TextProviderC1Ev>
 8012f50:	682b      	ldr	r3, [r5, #0]
 8012f52:	4628      	mov	r0, r5
 8012f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012f56:	4798      	blx	r3
 8012f58:	682b      	ldr	r3, [r5, #0]
 8012f5a:	4606      	mov	r6, r0
 8012f5c:	4628      	mov	r0, r5
 8012f5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012f60:	4798      	blx	r3
 8012f62:	6823      	ldr	r3, [r4, #0]
 8012f64:	4607      	mov	r7, r0
 8012f66:	4620      	mov	r0, r4
 8012f68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012f6a:	4798      	blx	r3
 8012f6c:	6823      	ldr	r3, [r4, #0]
 8012f6e:	4683      	mov	fp, r0
 8012f70:	4620      	mov	r0, r4
 8012f72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012f76:	4798      	blx	r3
 8012f78:	463b      	mov	r3, r7
 8012f7a:	4649      	mov	r1, r9
 8012f7c:	4632      	mov	r2, r6
 8012f7e:	2600      	movs	r6, #0
 8012f80:	e9cd b000 	strd	fp, r0, [sp]
 8012f84:	a80f      	add	r0, sp, #60	; 0x3c
 8012f86:	4637      	mov	r7, r6
 8012f88:	f003 fc92 	bl	80168b0 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 8012f8c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8012f90:	f8df b250 	ldr.w	fp, [pc, #592]	; 80131e4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>
 8012f94:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8012f98:	bf0c      	ite	eq
 8012f9a:	f9b4 900a 	ldrsheq.w	r9, [r4, #10]
 8012f9e:	f9b4 9008 	ldrshne.w	r9, [r4, #8]
 8012fa2:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8012fa4:	4629      	mov	r1, r5
 8012fa6:	f8db 3000 	ldr.w	r3, [fp]
 8012faa:	a80f      	add	r0, sp, #60	; 0x3c
 8012fac:	3701      	adds	r7, #1
 8012fae:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8012fb2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8012fb6:	b2bf      	uxth	r7, r7
 8012fb8:	785b      	ldrb	r3, [r3, #1]
 8012fba:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8012fbe:	f000 ffd0 	bl	8013f62 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8012fc2:	9b03      	ldr	r3, [sp, #12]
 8012fc4:	4286      	cmp	r6, r0
 8012fc6:	eba9 0903 	sub.w	r9, r9, r3
 8012fca:	bfb8      	it	lt
 8012fcc:	4606      	movlt	r6, r0
 8012fce:	a80f      	add	r0, sp, #60	; 0x3c
 8012fd0:	fa0f f989 	sxth.w	r9, r9
 8012fd4:	b236      	sxth	r6, r6
 8012fd6:	f003 fc22 	bl	801681e <_ZN8touchgfx12TextProvider11endOfStringEv>
 8012fda:	b918      	cbnz	r0, 8012fe4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 8012fdc:	7a2b      	ldrb	r3, [r5, #8]
 8012fde:	444b      	add	r3, r9
 8012fe0:	2b00      	cmp	r3, #0
 8012fe2:	dcde      	bgt.n	8012fa2 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xba>
 8012fe4:	9b03      	ldr	r3, [sp, #12]
 8012fe6:	4620      	mov	r0, r4
 8012fe8:	9a04      	ldr	r2, [sp, #16]
 8012fea:	fb13 f707 	smulbb	r7, r3, r7
 8012fee:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8012ff0:	f895 9009 	ldrb.w	r9, [r5, #9]
 8012ff4:	1aff      	subs	r7, r7, r3
 8012ff6:	b2bf      	uxth	r7, r7
 8012ff8:	b23b      	sxth	r3, r7
 8012ffa:	429a      	cmp	r2, r3
 8012ffc:	bfa8      	it	ge
 8012ffe:	4657      	movge	r7, sl
 8013000:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8013004:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8013008:	6823      	ldr	r3, [r4, #0]
 801300a:	444f      	add	r7, r9
 801300c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801300e:	bf08      	it	eq
 8013010:	f9b4 a008 	ldrsheq.w	sl, [r4, #8]
 8013014:	fa1f f987 	uxth.w	r9, r7
 8013018:	bf18      	it	ne
 801301a:	f9b4 a00a 	ldrshne.w	sl, [r4, #10]
 801301e:	4798      	blx	r3
 8013020:	2801      	cmp	r0, #1
 8013022:	fa0f f789 	sxth.w	r7, r9
 8013026:	b2b3      	uxth	r3, r6
 8013028:	f000 80e2 	beq.w	80131f0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x308>
 801302c:	2802      	cmp	r0, #2
 801302e:	f894 6037 	ldrb.w	r6, [r4, #55]	; 0x37
 8013032:	f000 80e3 	beq.w	80131fc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x314>
 8013036:	7aea      	ldrb	r2, [r5, #11]
 8013038:	b236      	sxth	r6, r6
 801303a:	7b2d      	ldrb	r5, [r5, #12]
 801303c:	1ab6      	subs	r6, r6, r2
 801303e:	442a      	add	r2, r5
 8013040:	fa1f fa86 	uxth.w	sl, r6
 8013044:	4413      	add	r3, r2
 8013046:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 801304a:	fa0f fb8a 	sxth.w	fp, sl
 801304e:	b29b      	uxth	r3, r3
 8013050:	2a02      	cmp	r2, #2
 8013052:	b21e      	sxth	r6, r3
 8013054:	f000 80d6 	beq.w	8013204 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x31c>
 8013058:	2a03      	cmp	r2, #3
 801305a:	f000 80de 	beq.w	801321a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x332>
 801305e:	2a01      	cmp	r2, #1
 8013060:	f040 80e6 	bne.w	8013230 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x348>
 8013064:	8925      	ldrh	r5, [r4, #8]
 8013066:	4633      	mov	r3, r6
 8013068:	463e      	mov	r6, r7
 801306a:	eba5 0909 	sub.w	r9, r5, r9
 801306e:	461f      	mov	r7, r3
 8013070:	465d      	mov	r5, fp
 8013072:	fa0f fb89 	sxth.w	fp, r9
 8013076:	4b5d      	ldr	r3, [pc, #372]	; (80131ec <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 8013078:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 801307a:	6818      	ldr	r0, [r3, #0]
 801307c:	f7f2 f922 	bl	80052c4 <_ZNK8touchgfx5Texts7getTextEt>
 8013080:	f8a8 b000 	strh.w	fp, [r8]
 8013084:	f8a8 5002 	strh.w	r5, [r8, #2]
 8013088:	f8a8 6004 	strh.w	r6, [r8, #4]
 801308c:	f8a8 7006 	strh.w	r7, [r8, #6]
 8013090:	f8c8 0008 	str.w	r0, [r8, #8]
 8013094:	e738      	b.n	8012f08 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x20>
 8013096:	f003 fb9b 	bl	80167d0 <_ZN8touchgfx12TextProviderC1Ev>
 801309a:	682b      	ldr	r3, [r5, #0]
 801309c:	4628      	mov	r0, r5
 801309e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80130a0:	4798      	blx	r3
 80130a2:	682b      	ldr	r3, [r5, #0]
 80130a4:	4607      	mov	r7, r0
 80130a6:	4628      	mov	r0, r5
 80130a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80130aa:	4798      	blx	r3
 80130ac:	6823      	ldr	r3, [r4, #0]
 80130ae:	4683      	mov	fp, r0
 80130b0:	4620      	mov	r0, r4
 80130b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80130b4:	4798      	blx	r3
 80130b6:	6822      	ldr	r2, [r4, #0]
 80130b8:	9005      	str	r0, [sp, #20]
 80130ba:	4620      	mov	r0, r4
 80130bc:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80130c0:	4790      	blx	r2
 80130c2:	9b05      	ldr	r3, [sp, #20]
 80130c4:	463a      	mov	r2, r7
 80130c6:	4649      	mov	r1, r9
 80130c8:	9001      	str	r0, [sp, #4]
 80130ca:	a80f      	add	r0, sp, #60	; 0x3c
 80130cc:	9300      	str	r3, [sp, #0]
 80130ce:	465b      	mov	r3, fp
 80130d0:	f003 fbee 	bl	80168b0 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 80130d4:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80130d8:	f9b4 9008 	ldrsh.w	r9, [r4, #8]
 80130dc:	af0f      	add	r7, sp, #60	; 0x3c
 80130de:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 80130e2:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80130e6:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80130e8:	bf0a      	itet	eq
 80130ea:	464a      	moveq	r2, r9
 80130ec:	461a      	movne	r2, r3
 80130ee:	4699      	moveq	r9, r3
 80130f0:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 80130f4:	f894 0039 	ldrb.w	r0, [r4, #57]	; 0x39
 80130f8:	1ad2      	subs	r2, r2, r3
 80130fa:	6833      	ldr	r3, [r6, #0]
 80130fc:	f9b4 6034 	ldrsh.w	r6, [r4, #52]	; 0x34
 8013100:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8013104:	7859      	ldrb	r1, [r3, #1]
 8013106:	2300      	movs	r3, #0
 8013108:	9707      	str	r7, [sp, #28]
 801310a:	f3c1 0181 	ubfx	r1, r1, #2, #2
 801310e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8013112:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8013116:	f88d 1020 	strb.w	r1, [sp, #32]
 801311a:	9509      	str	r5, [sp, #36]	; 0x24
 801311c:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8013120:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 8013124:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
 8013128:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801312c:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 8013130:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8013134:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8013138:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801313c:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 8013140:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 8013144:	b350      	cbz	r0, 801319c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 8013146:	682b      	ldr	r3, [r5, #0]
 8013148:	4628      	mov	r0, r5
 801314a:	695b      	ldr	r3, [r3, #20]
 801314c:	4798      	blx	r3
 801314e:	4607      	mov	r7, r0
 8013150:	b320      	cbz	r0, 801319c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 8013152:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013154:	4639      	mov	r1, r7
 8013156:	6803      	ldr	r3, [r0, #0]
 8013158:	68db      	ldr	r3, [r3, #12]
 801315a:	4798      	blx	r3
 801315c:	4606      	mov	r6, r0
 801315e:	b1e8      	cbz	r0, 801319c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 8013160:	7b43      	ldrb	r3, [r0, #13]
 8013162:	7a82      	ldrb	r2, [r0, #10]
 8013164:	005b      	lsls	r3, r3, #1
 8013166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801316a:	4313      	orrs	r3, r2
 801316c:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 8013170:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 8013174:	2b06      	cmp	r3, #6
 8013176:	d111      	bne.n	801319c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 8013178:	9809      	ldr	r0, [sp, #36]	; 0x24
 801317a:	4632      	mov	r2, r6
 801317c:	4639      	mov	r1, r7
 801317e:	6803      	ldr	r3, [r0, #0]
 8013180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013182:	4798      	blx	r3
 8013184:	7b73      	ldrb	r3, [r6, #13]
 8013186:	005b      	lsls	r3, r3, #1
 8013188:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801318c:	7ab3      	ldrb	r3, [r6, #10]
 801318e:	4313      	orrs	r3, r2
 8013190:	4418      	add	r0, r3
 8013192:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8013196:	4418      	add	r0, r3
 8013198:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
 801319c:	2600      	movs	r6, #0
 801319e:	4637      	mov	r7, r6
 80131a0:	a806      	add	r0, sp, #24
 80131a2:	3701      	adds	r7, #1
 80131a4:	f001 f8bf 	bl	8014326 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 80131a8:	f8bd 0036 	ldrh.w	r0, [sp, #54]	; 0x36
 80131ac:	9b03      	ldr	r3, [sp, #12]
 80131ae:	b2bf      	uxth	r7, r7
 80131b0:	4286      	cmp	r6, r0
 80131b2:	eba9 0903 	sub.w	r9, r9, r3
 80131b6:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 80131ba:	bfb8      	it	lt
 80131bc:	4606      	movlt	r6, r0
 80131be:	fa0f f989 	sxth.w	r9, r9
 80131c2:	b236      	sxth	r6, r6
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	f43f af0d 	beq.w	8012fe4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 80131ca:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 80131ce:	2b00      	cmp	r3, #0
 80131d0:	f47f af08 	bne.w	8012fe4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 80131d4:	7a2b      	ldrb	r3, [r5, #8]
 80131d6:	444b      	add	r3, r9
 80131d8:	2b00      	cmp	r3, #0
 80131da:	dce1      	bgt.n	80131a0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b8>
 80131dc:	e702      	b.n	8012fe4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 80131de:	bf00      	nop
 80131e0:	240069f8 	.word	0x240069f8
 80131e4:	240069f4 	.word	0x240069f4
 80131e8:	240069fc 	.word	0x240069fc
 80131ec:	24006a00 	.word	0x24006a00
 80131f0:	ebaa 0606 	sub.w	r6, sl, r6
 80131f4:	2002      	movs	r0, #2
 80131f6:	fb96 f6f0 	sdiv	r6, r6, r0
 80131fa:	e71c      	b.n	8013036 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
 80131fc:	441e      	add	r6, r3
 80131fe:	ebaa 0606 	sub.w	r6, sl, r6
 8013202:	e718      	b.n	8013036 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
 8013204:	8925      	ldrh	r5, [r4, #8]
 8013206:	1aed      	subs	r5, r5, r3
 8013208:	eba5 050a 	sub.w	r5, r5, sl
 801320c:	fa0f fb85 	sxth.w	fp, r5
 8013210:	8965      	ldrh	r5, [r4, #10]
 8013212:	eba5 0509 	sub.w	r5, r5, r9
 8013216:	b22d      	sxth	r5, r5
 8013218:	e72d      	b.n	8013076 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 801321a:	8965      	ldrh	r5, [r4, #10]
 801321c:	f04f 0b00 	mov.w	fp, #0
 8013220:	1aed      	subs	r5, r5, r3
 8013222:	4633      	mov	r3, r6
 8013224:	463e      	mov	r6, r7
 8013226:	eba5 050a 	sub.w	r5, r5, sl
 801322a:	461f      	mov	r7, r3
 801322c:	b22d      	sxth	r5, r5
 801322e:	e722      	b.n	8013076 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 8013230:	2500      	movs	r5, #0
 8013232:	e720      	b.n	8013076 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>

08013234 <_ZNK8touchgfx8TextArea17invalidateContentEv>:
 8013234:	b513      	push	{r0, r1, r4, lr}
 8013236:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 801323a:	4604      	mov	r4, r0
 801323c:	b1fb      	cbz	r3, 801327e <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 801323e:	4b16      	ldr	r3, [pc, #88]	; (8013298 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x64>)
 8013240:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8013242:	881b      	ldrh	r3, [r3, #0]
 8013244:	428b      	cmp	r3, r1
 8013246:	d91a      	bls.n	801327e <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8013248:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 801324c:	2b00      	cmp	r3, #0
 801324e:	dd16      	ble.n	801327e <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8013250:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8013254:	2b00      	cmp	r3, #0
 8013256:	dd12      	ble.n	801327e <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8013258:	4b10      	ldr	r3, [pc, #64]	; (801329c <_ZNK8touchgfx8TextArea17invalidateContentEv+0x68>)
 801325a:	6818      	ldr	r0, [r3, #0]
 801325c:	f7f2 f832 	bl	80052c4 <_ZNK8touchgfx5Texts7getTextEt>
 8013260:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 8013264:	6822      	ldr	r2, [r4, #0]
 8013266:	2b00      	cmp	r3, #0
 8013268:	db06      	blt.n	8013278 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 801326a:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 801326e:	2b00      	cmp	r3, #0
 8013270:	db02      	blt.n	8013278 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 8013272:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8013274:	4298      	cmp	r0, r3
 8013276:	d004      	beq.n	8013282 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4e>
 8013278:	6953      	ldr	r3, [r2, #20]
 801327a:	4620      	mov	r0, r4
 801327c:	4798      	blx	r3
 801327e:	b002      	add	sp, #8
 8013280:	bd10      	pop	{r4, pc}
 8013282:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 8013286:	466b      	mov	r3, sp
 8013288:	6912      	ldr	r2, [r2, #16]
 801328a:	c903      	ldmia	r1, {r0, r1}
 801328c:	e883 0003 	stmia.w	r3, {r0, r1}
 8013290:	4619      	mov	r1, r3
 8013292:	4620      	mov	r0, r4
 8013294:	4790      	blx	r2
 8013296:	e7f2      	b.n	801327e <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8013298:	240069f8 	.word	0x240069f8
 801329c:	24006a00 	.word	0x24006a00

080132a0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 80132a0:	4b45      	ldr	r3, [pc, #276]	; (80133b8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x118>)
 80132a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80132a6:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 80132a8:	b08e      	sub	sp, #56	; 0x38
 80132aa:	881b      	ldrh	r3, [r3, #0]
 80132ac:	4604      	mov	r4, r0
 80132ae:	4293      	cmp	r3, r2
 80132b0:	d97e      	bls.n	80133b0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 80132b2:	6808      	ldr	r0, [r1, #0]
 80132b4:	ab05      	add	r3, sp, #20
 80132b6:	6849      	ldr	r1, [r1, #4]
 80132b8:	4d40      	ldr	r5, [pc, #256]	; (80133bc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x11c>)
 80132ba:	c303      	stmia	r3!, {r0, r1}
 80132bc:	4611      	mov	r1, r2
 80132be:	6828      	ldr	r0, [r5, #0]
 80132c0:	f7f2 f800 	bl	80052c4 <_ZNK8touchgfx5Texts7getTextEt>
 80132c4:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 80132c8:	2b00      	cmp	r3, #0
 80132ca:	db11      	blt.n	80132f0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 80132cc:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 80132d0:	2b00      	cmp	r3, #0
 80132d2:	db0d      	blt.n	80132f0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 80132d4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80132d6:	4298      	cmp	r0, r3
 80132d8:	d10a      	bne.n	80132f0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 80132da:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 80132de:	ab09      	add	r3, sp, #36	; 0x24
 80132e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80132e4:	e883 0003 	stmia.w	r3, {r0, r1}
 80132e8:	4619      	mov	r1, r3
 80132ea:	a805      	add	r0, sp, #20
 80132ec:	f7fe fcc4 	bl	8011c78 <_ZN8touchgfx4RectaNERKS0_>
 80132f0:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80132f4:	2b00      	cmp	r3, #0
 80132f6:	dd5b      	ble.n	80133b0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 80132f8:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 80132fc:	2b00      	cmp	r3, #0
 80132fe:	dd57      	ble.n	80133b0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8013300:	4f2f      	ldr	r7, [pc, #188]	; (80133c0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x120>)
 8013302:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8013304:	683b      	ldr	r3, [r7, #0]
 8013306:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 801330a:	4b2e      	ldr	r3, [pc, #184]	; (80133c4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x124>)
 801330c:	681b      	ldr	r3, [r3, #0]
 801330e:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8013312:	2e00      	cmp	r6, #0
 8013314:	d04c      	beq.n	80133b0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8013316:	6823      	ldr	r3, [r4, #0]
 8013318:	4620      	mov	r0, r4
 801331a:	f894 8036 	ldrb.w	r8, [r4, #54]	; 0x36
 801331e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013320:	4798      	blx	r3
 8013322:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8013324:	683b      	ldr	r3, [r7, #0]
 8013326:	f9b4 c034 	ldrsh.w	ip, [r4, #52]	; 0x34
 801332a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 801332e:	f894 e038 	ldrb.w	lr, [r4, #56]	; 0x38
 8013332:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8013336:	785b      	ldrb	r3, [r3, #1]
 8013338:	f894 7037 	ldrb.w	r7, [r4, #55]	; 0x37
 801333c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8013340:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8013342:	9609      	str	r6, [sp, #36]	; 0x24
 8013344:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013348:	4b1f      	ldr	r3, [pc, #124]	; (80133c8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x128>)
 801334a:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
 801334e:	681b      	ldr	r3, [r3, #0]
 8013350:	f88d e02a 	strb.w	lr, [sp, #42]	; 0x2a
 8013354:	910b      	str	r1, [sp, #44]	; 0x2c
 8013356:	f8ad c030 	strh.w	ip, [sp, #48]	; 0x30
 801335a:	f88d 8032 	strb.w	r8, [sp, #50]	; 0x32
 801335e:	f88d 7033 	strb.w	r7, [sp, #51]	; 0x33
 8013362:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
 8013366:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 801336a:	b10a      	cbz	r2, 8013370 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd0>
 801336c:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 801336e:	b906      	cbnz	r6, 8013372 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd2>
 8013370:	689e      	ldr	r6, [r3, #8]
 8013372:	af07      	add	r7, sp, #28
 8013374:	4621      	mov	r1, r4
 8013376:	4638      	mov	r0, r7
 8013378:	f002 fe74 	bl	8016064 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801337c:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 801337e:	6828      	ldr	r0, [r5, #0]
 8013380:	f7f1 ffa0 	bl	80052c4 <_ZNK8touchgfx5Texts7getTextEt>
 8013384:	6823      	ldr	r3, [r4, #0]
 8013386:	4605      	mov	r5, r0
 8013388:	4620      	mov	r0, r4
 801338a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801338c:	4798      	blx	r3
 801338e:	6823      	ldr	r3, [r4, #0]
 8013390:	4680      	mov	r8, r0
 8013392:	4620      	mov	r0, r4
 8013394:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013398:	4798      	blx	r3
 801339a:	ab09      	add	r3, sp, #36	; 0x24
 801339c:	9501      	str	r5, [sp, #4]
 801339e:	9300      	str	r3, [sp, #0]
 80133a0:	ab05      	add	r3, sp, #20
 80133a2:	e9cd 8002 	strd	r8, r0, [sp, #8]
 80133a6:	4630      	mov	r0, r6
 80133a8:	e897 0006 	ldmia.w	r7, {r1, r2}
 80133ac:	f7f1 ff1b 	bl	80051e6 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 80133b0:	b00e      	add	sp, #56	; 0x38
 80133b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80133b6:	bf00      	nop
 80133b8:	240069f8 	.word	0x240069f8
 80133bc:	24006a00 	.word	0x24006a00
 80133c0:	240069f4 	.word	0x240069f4
 80133c4:	240069fc 	.word	0x240069fc
 80133c8:	240069a4 	.word	0x240069a4

080133cc <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 80133cc:	b538      	push	{r3, r4, r5, lr}
 80133ce:	4b0e      	ldr	r3, [pc, #56]	; (8013408 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
 80133d0:	4604      	mov	r4, r0
 80133d2:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 80133d4:	881b      	ldrh	r3, [r3, #0]
 80133d6:	429a      	cmp	r2, r3
 80133d8:	d214      	bcs.n	8013404 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 80133da:	6803      	ldr	r3, [r0, #0]
 80133dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80133de:	4798      	blx	r3
 80133e0:	6823      	ldr	r3, [r4, #0]
 80133e2:	4605      	mov	r5, r0
 80133e4:	4620      	mov	r0, r4
 80133e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80133e8:	4798      	blx	r3
 80133ea:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80133ee:	b22d      	sxth	r5, r5
 80133f0:	4601      	mov	r1, r0
 80133f2:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 80133f6:	bf06      	itte	eq
 80133f8:	4602      	moveq	r2, r0
 80133fa:	4629      	moveq	r1, r5
 80133fc:	462a      	movne	r2, r5
 80133fe:	4620      	mov	r0, r4
 8013400:	f7f1 f8f9 	bl	80045f6 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8013404:	bd38      	pop	{r3, r4, r5, pc}
 8013406:	bf00      	nop
 8013408:	240069f8 	.word	0x240069f8

0801340c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 801340c:	b530      	push	{r4, r5, lr}
 801340e:	888b      	ldrh	r3, [r1, #4]
 8013410:	b085      	sub	sp, #20
 8013412:	4604      	mov	r4, r0
 8013414:	8583      	strh	r3, [r0, #44]	; 0x2c
 8013416:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 801341a:	b923      	cbnz	r3, 8013426 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 801341c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8013420:	b90b      	cbnz	r3, 8013426 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 8013422:	f7ff ffd3 	bl	80133cc <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8013426:	6823      	ldr	r3, [r4, #0]
 8013428:	466d      	mov	r5, sp
 801342a:	4621      	mov	r1, r4
 801342c:	343c      	adds	r4, #60	; 0x3c
 801342e:	4628      	mov	r0, r5
 8013430:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013434:	4798      	blx	r3
 8013436:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801343a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801343e:	b005      	add	sp, #20
 8013440:	bd30      	pop	{r4, r5, pc}

08013442 <_ZNK8touchgfx3Box12getSolidRectEv>:
 8013442:	2300      	movs	r3, #0
 8013444:	8083      	strh	r3, [r0, #4]
 8013446:	80c3      	strh	r3, [r0, #6]
 8013448:	8003      	strh	r3, [r0, #0]
 801344a:	8043      	strh	r3, [r0, #2]
 801344c:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 8013450:	2bff      	cmp	r3, #255	; 0xff
 8013452:	bf01      	itttt	eq
 8013454:	890b      	ldrheq	r3, [r1, #8]
 8013456:	8083      	strheq	r3, [r0, #4]
 8013458:	894b      	ldrheq	r3, [r1, #10]
 801345a:	80c3      	strheq	r3, [r0, #6]
 801345c:	4770      	bx	lr
	...

08013460 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8013460:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013462:	4604      	mov	r4, r0
 8013464:	466b      	mov	r3, sp
 8013466:	6808      	ldr	r0, [r1, #0]
 8013468:	6849      	ldr	r1, [r1, #4]
 801346a:	c303      	stmia	r3!, {r0, r1}
 801346c:	6823      	ldr	r3, [r4, #0]
 801346e:	4669      	mov	r1, sp
 8013470:	4620      	mov	r0, r4
 8013472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013474:	4798      	blx	r3
 8013476:	4b08      	ldr	r3, [pc, #32]	; (8013498 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8013478:	681b      	ldr	r3, [r3, #0]
 801347a:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 801347e:	b10a      	cbz	r2, 8013484 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8013480:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8013482:	b900      	cbnz	r0, 8013486 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8013484:	6898      	ldr	r0, [r3, #8]
 8013486:	6803      	ldr	r3, [r0, #0]
 8013488:	4669      	mov	r1, sp
 801348a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 801348c:	6a1d      	ldr	r5, [r3, #32]
 801348e:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8013492:	47a8      	blx	r5
 8013494:	b003      	add	sp, #12
 8013496:	bd30      	pop	{r4, r5, pc}
 8013498:	240069a4 	.word	0x240069a4

0801349c <_ZNK8touchgfx3Box17invalidateContentEv>:
 801349c:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 80134a0:	b12a      	cbz	r2, 80134ae <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 80134a2:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80134a6:	b112      	cbz	r2, 80134ae <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 80134a8:	6803      	ldr	r3, [r0, #0]
 80134aa:	695b      	ldr	r3, [r3, #20]
 80134ac:	4718      	bx	r3
 80134ae:	4770      	bx	lr

080134b0 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 80134b0:	b510      	push	{r4, lr}
 80134b2:	6803      	ldr	r3, [r0, #0]
 80134b4:	460c      	mov	r4, r1
 80134b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80134b8:	4798      	blx	r3
 80134ba:	1b03      	subs	r3, r0, r4
 80134bc:	4258      	negs	r0, r3
 80134be:	4158      	adcs	r0, r3
 80134c0:	bd10      	pop	{r4, pc}
	...

080134c4 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 80134c4:	4b01      	ldr	r3, [pc, #4]	; (80134cc <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 80134c6:	6019      	str	r1, [r3, #0]
 80134c8:	4770      	bx	lr
 80134ca:	bf00      	nop
 80134cc:	240069ac 	.word	0x240069ac

080134d0 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 80134d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134d4:	4696      	mov	lr, r2
 80134d6:	b097      	sub	sp, #92	; 0x5c
 80134d8:	4605      	mov	r5, r0
 80134da:	4614      	mov	r4, r2
 80134dc:	460e      	mov	r6, r1
 80134de:	461f      	mov	r7, r3
 80134e0:	f10d 0c1c 	add.w	ip, sp, #28
 80134e4:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 80134e8:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 80134ec:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 80134f0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80134f4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80134f8:	f8de 3000 	ldr.w	r3, [lr]
 80134fc:	f104 0e14 	add.w	lr, r4, #20
 8013500:	f8cc 3000 	str.w	r3, [ip]
 8013504:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8013508:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801350c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013510:	f8de 3000 	ldr.w	r3, [lr]
 8013514:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8013518:	f8cc 3000 	str.w	r3, [ip]
 801351c:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8013520:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013524:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013528:	f8de 3000 	ldr.w	r3, [lr]
 801352c:	4631      	mov	r1, r6
 801352e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013530:	4628      	mov	r0, r5
 8013532:	f8cc 3000 	str.w	r3, [ip]
 8013536:	682b      	ldr	r3, [r5, #0]
 8013538:	9201      	str	r2, [sp, #4]
 801353a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801353c:	f8cd 8008 	str.w	r8, [sp, #8]
 8013540:	9200      	str	r2, [sp, #0]
 8013542:	aa07      	add	r2, sp, #28
 8013544:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8013548:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 801354c:	463b      	mov	r3, r7
 801354e:	47d8      	blx	fp
 8013550:	46a6      	mov	lr, r4
 8013552:	f10d 0c1c 	add.w	ip, sp, #28
 8013556:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801355a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801355e:	f8de 3000 	ldr.w	r3, [lr]
 8013562:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8013566:	343c      	adds	r4, #60	; 0x3c
 8013568:	f8cc 3000 	str.w	r3, [ip]
 801356c:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8013570:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013574:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013578:	f8de 3000 	ldr.w	r3, [lr]
 801357c:	f8cc 3000 	str.w	r3, [ip]
 8013580:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8013584:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013586:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801358a:	6823      	ldr	r3, [r4, #0]
 801358c:	4631      	mov	r1, r6
 801358e:	4628      	mov	r0, r5
 8013590:	f8cc 3000 	str.w	r3, [ip]
 8013594:	682b      	ldr	r3, [r5, #0]
 8013596:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801359a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801359c:	f8cd 8008 	str.w	r8, [sp, #8]
 80135a0:	9201      	str	r2, [sp, #4]
 80135a2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80135a4:	9200      	str	r2, [sp, #0]
 80135a6:	aa07      	add	r2, sp, #28
 80135a8:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80135aa:	463b      	mov	r3, r7
 80135ac:	47a0      	blx	r4
 80135ae:	b017      	add	sp, #92	; 0x5c
 80135b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080135b4 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 80135b4:	2000      	movs	r0, #0
 80135b6:	4770      	bx	lr

080135b8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 80135b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135bc:	b08d      	sub	sp, #52	; 0x34
 80135be:	4688      	mov	r8, r1
 80135c0:	f8d3 c000 	ldr.w	ip, [r3]
 80135c4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80135c6:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 80135ca:	680f      	ldr	r7, [r1, #0]
 80135cc:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 80135d0:	eba7 070c 	sub.w	r7, r7, ip
 80135d4:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 80135d8:	edd3 6a07 	vldr	s13, [r3, #28]
 80135dc:	42bc      	cmp	r4, r7
 80135de:	9918      	ldr	r1, [sp, #96]	; 0x60
 80135e0:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 80135e4:	bfa8      	it	ge
 80135e6:	463c      	movge	r4, r7
 80135e8:	f9b1 9000 	ldrsh.w	r9, [r1]
 80135ec:	f9ba 1000 	ldrsh.w	r1, [sl]
 80135f0:	ee07 4a90 	vmov	s15, r4
 80135f4:	eb09 0e0c 	add.w	lr, r9, ip
 80135f8:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 80135fc:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8013600:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8013604:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 8013608:	4571      	cmp	r1, lr
 801360a:	ee25 4a04 	vmul.f32	s8, s10, s8
 801360e:	ee65 4a24 	vmul.f32	s9, s10, s9
 8013612:	ee25 5a27 	vmul.f32	s10, s10, s15
 8013616:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801361a:	ee71 0aa4 	vadd.f32	s1, s3, s9
 801361e:	ee32 1a05 	vadd.f32	s2, s4, s10
 8013622:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8013626:	ee36 0a84 	vadd.f32	s0, s13, s8
 801362a:	ee61 1a87 	vmul.f32	s3, s3, s14
 801362e:	ee22 2a07 	vmul.f32	s4, s4, s14
 8013632:	f340 808c 	ble.w	801374e <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 8013636:	eba1 060e 	sub.w	r6, r1, lr
 801363a:	fb96 f5f4 	sdiv	r5, r6, r4
 801363e:	ee07 5a10 	vmov	s14, r5
 8013642:	2d00      	cmp	r5, #0
 8013644:	fb04 6615 	mls	r6, r4, r5, r6
 8013648:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801364c:	eea7 0a04 	vfma.f32	s0, s14, s8
 8013650:	eee7 0a24 	vfma.f32	s1, s14, s9
 8013654:	eea7 1a05 	vfma.f32	s2, s14, s10
 8013658:	dd12      	ble.n	8013680 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 801365a:	ee70 6a44 	vsub.f32	s13, s0, s8
 801365e:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8013662:	ee31 2a45 	vsub.f32	s4, s2, s10
 8013666:	eef5 6a40 	vcmp.f32	s13, #0.0
 801366a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801366e:	bf14      	ite	ne
 8013670:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8013674:	eeb0 7a67 	vmoveq.f32	s14, s15
 8013678:	ee61 1a87 	vmul.f32	s3, s3, s14
 801367c:	ee22 2a07 	vmul.f32	s4, s4, s14
 8013680:	fb05 f204 	mul.w	r2, r5, r4
 8013684:	1abf      	subs	r7, r7, r2
 8013686:	4494      	add	ip, r2
 8013688:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 801368c:	4411      	add	r1, r2
 801368e:	eb09 020c 	add.w	r2, r9, ip
 8013692:	b209      	sxth	r1, r1
 8013694:	443a      	add	r2, r7
 8013696:	428a      	cmp	r2, r1
 8013698:	bfc4      	itt	gt
 801369a:	eba1 0209 	subgt.w	r2, r1, r9
 801369e:	eba2 070c 	subgt.w	r7, r2, ip
 80136a2:	2f00      	cmp	r7, #0
 80136a4:	dd50      	ble.n	8013748 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 80136a6:	fb97 f1f4 	sdiv	r1, r7, r4
 80136aa:	fb04 7211 	mls	r2, r4, r1, r7
 80136ae:	b90a      	cbnz	r2, 80136b4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 80136b0:	3901      	subs	r1, #1
 80136b2:	4622      	mov	r2, r4
 80136b4:	eec7 3a80 	vdiv.f32	s7, s15, s0
 80136b8:	6840      	ldr	r0, [r0, #4]
 80136ba:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 80136be:	44b6      	add	lr, r6
 80136c0:	f8d0 a000 	ldr.w	sl, [r0]
 80136c4:	2900      	cmp	r1, #0
 80136c6:	bfcc      	ite	gt
 80136c8:	46a1      	movgt	r9, r4
 80136ca:	4691      	movle	r9, r2
 80136cc:	900b      	str	r0, [sp, #44]	; 0x2c
 80136ce:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80136d0:	fb04 e505 	mla	r5, r4, r5, lr
 80136d4:	eef0 6a42 	vmov.f32	s13, s4
 80136d8:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 80136dc:	9008      	str	r0, [sp, #32]
 80136de:	eeb0 7a61 	vmov.f32	s14, s3
 80136e2:	9818      	ldr	r0, [sp, #96]	; 0x60
 80136e4:	695b      	ldr	r3, [r3, #20]
 80136e6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80136ea:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 80136ee:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80136f2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80136f4:	445b      	add	r3, fp
 80136f6:	9307      	str	r3, [sp, #28]
 80136f8:	ee16 3a90 	vmov	r3, s13
 80136fc:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8013700:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8013704:	ee21 3a23 	vmul.f32	s6, s2, s7
 8013708:	ee72 7ae1 	vsub.f32	s15, s5, s3
 801370c:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8013710:	ee17 7a90 	vmov	r7, s15
 8013714:	ee73 7a42 	vsub.f32	s15, s6, s4
 8013718:	fb97 f7f4 	sdiv	r7, r7, r4
 801371c:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8013720:	ee17 ca90 	vmov	ip, s15
 8013724:	fb9c fcf4 	sdiv	ip, ip, r4
 8013728:	fb0c 3306 	mla	r3, ip, r6, r3
 801372c:	9302      	str	r3, [sp, #8]
 801372e:	ee17 3a10 	vmov	r3, s14
 8013732:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 8013736:	fb07 3706 	mla	r7, r7, r6, r3
 801373a:	eba9 0306 	sub.w	r3, r9, r6
 801373e:	e9cd 4700 	strd	r4, r7, [sp]
 8013742:	f8da 4008 	ldr.w	r4, [sl, #8]
 8013746:	47a0      	blx	r4
 8013748:	b00d      	add	sp, #52	; 0x34
 801374a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801374e:	2500      	movs	r5, #0
 8013750:	462e      	mov	r6, r5
 8013752:	e799      	b.n	8013688 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08013754 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8013754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013758:	b0db      	sub	sp, #364	; 0x16c
 801375a:	461d      	mov	r5, r3
 801375c:	4614      	mov	r4, r2
 801375e:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 8013762:	910f      	str	r1, [sp, #60]	; 0x3c
 8013764:	4629      	mov	r1, r5
 8013766:	930a      	str	r3, [sp, #40]	; 0x28
 8013768:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 801376c:	9009      	str	r0, [sp, #36]	; 0x24
 801376e:	930b      	str	r3, [sp, #44]	; 0x2c
 8013770:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 8013774:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 8013778:	9310      	str	r3, [sp, #64]	; 0x40
 801377a:	6803      	ldr	r3, [r0, #0]
 801377c:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 801377e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8013782:	47b8      	blx	r7
 8013784:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013786:	6058      	str	r0, [r3, #4]
 8013788:	2800      	cmp	r0, #0
 801378a:	f000 83a1 	beq.w	8013ed0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801378e:	682b      	ldr	r3, [r5, #0]
 8013790:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8013794:	ed94 7a02 	vldr	s14, [r4, #8]
 8013798:	9314      	str	r3, [sp, #80]	; 0x50
 801379a:	686b      	ldr	r3, [r5, #4]
 801379c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80137a0:	9315      	str	r3, [sp, #84]	; 0x54
 80137a2:	4bc1      	ldr	r3, [pc, #772]	; (8013aa8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 80137a4:	7819      	ldrb	r1, [r3, #0]
 80137a6:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 80137aa:	2900      	cmp	r1, #0
 80137ac:	bf16      	itet	ne
 80137ae:	4619      	movne	r1, r3
 80137b0:	4611      	moveq	r1, r2
 80137b2:	4613      	movne	r3, r2
 80137b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137b8:	9116      	str	r1, [sp, #88]	; 0x58
 80137ba:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 80137be:	f240 8387 	bls.w	8013ed0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80137c2:	ed94 7a07 	vldr	s14, [r4, #28]
 80137c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80137ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137ce:	f240 837f 	bls.w	8013ed0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80137d2:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 80137d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80137da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137de:	f240 8377 	bls.w	8013ed0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80137e2:	6822      	ldr	r2, [r4, #0]
 80137e4:	4bb1      	ldr	r3, [pc, #708]	; (8013aac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 80137e6:	429a      	cmp	r2, r3
 80137e8:	f2c0 8372 	blt.w	8013ed0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80137ec:	49b0      	ldr	r1, [pc, #704]	; (8013ab0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 80137ee:	6963      	ldr	r3, [r4, #20]
 80137f0:	428a      	cmp	r2, r1
 80137f2:	f300 836d 	bgt.w	8013ed0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80137f6:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 80137fa:	48ae      	ldr	r0, [pc, #696]	; (8013ab4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 80137fc:	33ff      	adds	r3, #255	; 0xff
 80137fe:	4283      	cmp	r3, r0
 8013800:	f200 8366 	bhi.w	8013ed0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8013804:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8013806:	4dac      	ldr	r5, [pc, #688]	; (8013ab8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8013808:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 801380c:	33ff      	adds	r3, #255	; 0xff
 801380e:	42ab      	cmp	r3, r5
 8013810:	f200 835e 	bhi.w	8013ed0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8013814:	6862      	ldr	r2, [r4, #4]
 8013816:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 801381a:	33ff      	adds	r3, #255	; 0xff
 801381c:	4283      	cmp	r3, r0
 801381e:	f200 8357 	bhi.w	8013ed0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8013822:	69a1      	ldr	r1, [r4, #24]
 8013824:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 8013828:	33ff      	adds	r3, #255	; 0xff
 801382a:	4283      	cmp	r3, r0
 801382c:	f200 8350 	bhi.w	8013ed0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8013830:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8013832:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 8013836:	30ff      	adds	r0, #255	; 0xff
 8013838:	42a8      	cmp	r0, r5
 801383a:	f200 8349 	bhi.w	8013ed0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801383e:	428a      	cmp	r2, r1
 8013840:	f280 8110 	bge.w	8013a64 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8013844:	429a      	cmp	r2, r3
 8013846:	f300 8119 	bgt.w	8013a7c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 801384a:	4299      	cmp	r1, r3
 801384c:	f280 811d 	bge.w	8013a8a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8013850:	2502      	movs	r5, #2
 8013852:	2701      	movs	r7, #1
 8013854:	46a9      	mov	r9, r5
 8013856:	46b8      	mov	r8, r7
 8013858:	f04f 0a00 	mov.w	sl, #0
 801385c:	4621      	mov	r1, r4
 801385e:	a849      	add	r0, sp, #292	; 0x124
 8013860:	f003 fd00 	bl	8017264 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8013864:	4622      	mov	r2, r4
 8013866:	4653      	mov	r3, sl
 8013868:	a949      	add	r1, sp, #292	; 0x124
 801386a:	f8cd 9000 	str.w	r9, [sp]
 801386e:	a819      	add	r0, sp, #100	; 0x64
 8013870:	f003 fe28 	bl	80174c4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8013874:	4622      	mov	r2, r4
 8013876:	4653      	mov	r3, sl
 8013878:	a949      	add	r1, sp, #292	; 0x124
 801387a:	f8cd 8000 	str.w	r8, [sp]
 801387e:	a829      	add	r0, sp, #164	; 0xa4
 8013880:	f003 fe20 	bl	80174c4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8013884:	4643      	mov	r3, r8
 8013886:	4622      	mov	r2, r4
 8013888:	a949      	add	r1, sp, #292	; 0x124
 801388a:	f8cd 9000 	str.w	r9, [sp]
 801388e:	a839      	add	r0, sp, #228	; 0xe4
 8013890:	f003 fe18 	bl	80174c4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8013894:	42af      	cmp	r7, r5
 8013896:	af12      	add	r7, sp, #72	; 0x48
 8013898:	bfb7      	itett	lt
 801389a:	2300      	movlt	r3, #0
 801389c:	2301      	movge	r3, #1
 801389e:	ad29      	addlt	r5, sp, #164	; 0xa4
 80138a0:	ac19      	addlt	r4, sp, #100	; 0x64
 80138a2:	bfb1      	iteee	lt
 80138a4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80138a6:	ad19      	addge	r5, sp, #100	; 0x64
 80138a8:	930e      	strge	r3, [sp, #56]	; 0x38
 80138aa:	ac29      	addge	r4, sp, #164	; 0xa4
 80138ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80138ae:	e893 0003 	ldmia.w	r3, {r0, r1}
 80138b2:	e887 0003 	stmia.w	r7, {r0, r1}
 80138b6:	b928      	cbnz	r0, 80138c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 80138b8:	4b80      	ldr	r3, [pc, #512]	; (8013abc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 80138ba:	6818      	ldr	r0, [r3, #0]
 80138bc:	6803      	ldr	r3, [r0, #0]
 80138be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80138c0:	4798      	blx	r3
 80138c2:	6038      	str	r0, [r7, #0]
 80138c4:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80138c6:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 80138ca:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80138ce:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 80138d0:	930c      	str	r3, [sp, #48]	; 0x30
 80138d2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80138d4:	6963      	ldr	r3, [r4, #20]
 80138d6:	440b      	add	r3, r1
 80138d8:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 80138dc:	4408      	add	r0, r1
 80138de:	b200      	sxth	r0, r0
 80138e0:	4283      	cmp	r3, r0
 80138e2:	900d      	str	r0, [sp, #52]	; 0x34
 80138e4:	f280 80dd 	bge.w	8013aa2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 80138e8:	428b      	cmp	r3, r1
 80138ea:	da08      	bge.n	80138fe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 80138ec:	2a00      	cmp	r2, #0
 80138ee:	dd06      	ble.n	80138fe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 80138f0:	1acb      	subs	r3, r1, r3
 80138f2:	429a      	cmp	r2, r3
 80138f4:	f2c0 80e4 	blt.w	8013ac0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 80138f8:	2b00      	cmp	r3, #0
 80138fa:	f300 80e2 	bgt.w	8013ac2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 80138fe:	6967      	ldr	r7, [r4, #20]
 8013900:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8013904:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013906:	443b      	add	r3, r7
 8013908:	461f      	mov	r7, r3
 801390a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801390c:	1bdf      	subs	r7, r3, r7
 801390e:	4297      	cmp	r7, r2
 8013910:	bfa8      	it	ge
 8013912:	4617      	movge	r7, r2
 8013914:	2f00      	cmp	r7, #0
 8013916:	f340 8166 	ble.w	8013be6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 801391a:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801391c:	6829      	ldr	r1, [r5, #0]
 801391e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8013922:	f9bb 3000 	ldrsh.w	r3, [fp]
 8013926:	4411      	add	r1, r2
 8013928:	6820      	ldr	r0, [r4, #0]
 801392a:	4299      	cmp	r1, r3
 801392c:	dd1a      	ble.n	8013964 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801392e:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8013932:	4402      	add	r2, r0
 8013934:	440b      	add	r3, r1
 8013936:	b21b      	sxth	r3, r3
 8013938:	429a      	cmp	r2, r3
 801393a:	dc13      	bgt.n	8013964 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801393c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801393e:	a912      	add	r1, sp, #72	; 0x48
 8013940:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013942:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013944:	681b      	ldr	r3, [r3, #0]
 8013946:	9206      	str	r2, [sp, #24]
 8013948:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801394a:	9500      	str	r5, [sp, #0]
 801394c:	9205      	str	r2, [sp, #20]
 801394e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013950:	e9cd b203 	strd	fp, r2, [sp, #12]
 8013954:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8013956:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801395a:	aa49      	add	r2, sp, #292	; 0x124
 801395c:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 8013960:	4623      	mov	r3, r4
 8013962:	47c8      	blx	r9
 8013964:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8013968:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 801396c:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8013970:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013974:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8013978:	68a1      	ldr	r1, [r4, #8]
 801397a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801397e:	ed94 6a08 	vldr	s12, [r4, #32]
 8013982:	edd4 6a07 	vldr	s13, [r4, #28]
 8013986:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801398a:	ee76 6a86 	vadd.f32	s13, s13, s12
 801398e:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8013992:	e9d4 2300 	ldrd	r2, r3, [r4]
 8013996:	edc4 6a07 	vstr	s13, [r4, #28]
 801399a:	441a      	add	r2, r3
 801399c:	6963      	ldr	r3, [r4, #20]
 801399e:	3301      	adds	r3, #1
 80139a0:	6022      	str	r2, [r4, #0]
 80139a2:	6163      	str	r3, [r4, #20]
 80139a4:	69a3      	ldr	r3, [r4, #24]
 80139a6:	3b01      	subs	r3, #1
 80139a8:	61a3      	str	r3, [r4, #24]
 80139aa:	6923      	ldr	r3, [r4, #16]
 80139ac:	440b      	add	r3, r1
 80139ae:	68e1      	ldr	r1, [r4, #12]
 80139b0:	428b      	cmp	r3, r1
 80139b2:	6123      	str	r3, [r4, #16]
 80139b4:	db15      	blt.n	80139e2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 80139b6:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 80139ba:	3201      	adds	r2, #1
 80139bc:	1a5b      	subs	r3, r3, r1
 80139be:	ee76 6a26 	vadd.f32	s13, s12, s13
 80139c2:	6022      	str	r2, [r4, #0]
 80139c4:	6123      	str	r3, [r4, #16]
 80139c6:	edc4 6a07 	vstr	s13, [r4, #28]
 80139ca:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 80139ce:	ee36 7a87 	vadd.f32	s14, s13, s14
 80139d2:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 80139d6:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 80139da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80139de:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 80139e2:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 80139e6:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 80139ea:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 80139ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80139f2:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 80139f6:	68a9      	ldr	r1, [r5, #8]
 80139f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80139fc:	ed95 6a08 	vldr	s12, [r5, #32]
 8013a00:	edd5 6a07 	vldr	s13, [r5, #28]
 8013a04:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8013a08:	ee76 6a86 	vadd.f32	s13, s13, s12
 8013a0c:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8013a10:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013a14:	edc5 6a07 	vstr	s13, [r5, #28]
 8013a18:	441a      	add	r2, r3
 8013a1a:	696b      	ldr	r3, [r5, #20]
 8013a1c:	3301      	adds	r3, #1
 8013a1e:	602a      	str	r2, [r5, #0]
 8013a20:	616b      	str	r3, [r5, #20]
 8013a22:	69ab      	ldr	r3, [r5, #24]
 8013a24:	3b01      	subs	r3, #1
 8013a26:	61ab      	str	r3, [r5, #24]
 8013a28:	692b      	ldr	r3, [r5, #16]
 8013a2a:	440b      	add	r3, r1
 8013a2c:	68e9      	ldr	r1, [r5, #12]
 8013a2e:	428b      	cmp	r3, r1
 8013a30:	612b      	str	r3, [r5, #16]
 8013a32:	db15      	blt.n	8013a60 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8013a34:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8013a38:	3201      	adds	r2, #1
 8013a3a:	1a5b      	subs	r3, r3, r1
 8013a3c:	ee76 6a26 	vadd.f32	s13, s12, s13
 8013a40:	602a      	str	r2, [r5, #0]
 8013a42:	612b      	str	r3, [r5, #16]
 8013a44:	edc5 6a07 	vstr	s13, [r5, #28]
 8013a48:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8013a4c:	ee36 7a87 	vadd.f32	s14, s13, s14
 8013a50:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8013a54:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8013a58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013a5c:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8013a60:	3f01      	subs	r7, #1
 8013a62:	e757      	b.n	8013914 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8013a64:	4299      	cmp	r1, r3
 8013a66:	dc13      	bgt.n	8013a90 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8013a68:	429a      	cmp	r2, r3
 8013a6a:	da14      	bge.n	8013a96 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8013a6c:	2502      	movs	r5, #2
 8013a6e:	2703      	movs	r7, #3
 8013a70:	f04f 0800 	mov.w	r8, #0
 8013a74:	46a9      	mov	r9, r5
 8013a76:	f04f 0a01 	mov.w	sl, #1
 8013a7a:	e6ef      	b.n	801385c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8013a7c:	2501      	movs	r5, #1
 8013a7e:	2700      	movs	r7, #0
 8013a80:	46a9      	mov	r9, r5
 8013a82:	46b8      	mov	r8, r7
 8013a84:	f04f 0a02 	mov.w	sl, #2
 8013a88:	e6e8      	b.n	801385c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8013a8a:	2501      	movs	r5, #1
 8013a8c:	2702      	movs	r7, #2
 8013a8e:	e6e1      	b.n	8013854 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8013a90:	2500      	movs	r5, #0
 8013a92:	2701      	movs	r7, #1
 8013a94:	e7f4      	b.n	8013a80 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 8013a96:	2702      	movs	r7, #2
 8013a98:	2503      	movs	r5, #3
 8013a9a:	f04f 0900 	mov.w	r9, #0
 8013a9e:	46b8      	mov	r8, r7
 8013aa0:	e7e9      	b.n	8013a76 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 8013aa2:	4613      	mov	r3, r2
 8013aa4:	e728      	b.n	80138f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 8013aa6:	bf00      	nop
 8013aa8:	2400699c 	.word	0x2400699c
 8013aac:	fffd8f01 	.word	0xfffd8f01
 8013ab0:	00027100 	.word	0x00027100
 8013ab4:	0004e1ff 	.word	0x0004e1ff
 8013ab8:	0004e1fe 	.word	0x0004e1fe
 8013abc:	240069a4 	.word	0x240069a4
 8013ac0:	4613      	mov	r3, r2
 8013ac2:	992b      	ldr	r1, [sp, #172]	; 0xac
 8013ac4:	469e      	mov	lr, r3
 8013ac6:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 8013ac8:	469c      	mov	ip, r3
 8013aca:	9111      	str	r1, [sp, #68]	; 0x44
 8013acc:	f04f 0900 	mov.w	r9, #0
 8013ad0:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 8013ad4:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 8013ad8:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 8013adc:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 8013ae0:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 8013ae4:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8013ae8:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 8013aec:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 8013af0:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 8013af4:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 8013af8:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 8013afc:	f1bc 0f00 	cmp.w	ip, #0
 8013b00:	d147      	bne.n	8013b92 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8013b02:	eb03 0c07 	add.w	ip, r3, r7
 8013b06:	1ad7      	subs	r7, r2, r3
 8013b08:	f1b9 0f00 	cmp.w	r9, #0
 8013b0c:	d009      	beq.n	8013b22 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8013b0e:	9029      	str	r0, [sp, #164]	; 0xa4
 8013b10:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 8013b14:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 8013b18:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 8013b1c:	912d      	str	r1, [sp, #180]	; 0xb4
 8013b1e:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 8013b22:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8013b24:	f04f 0800 	mov.w	r8, #0
 8013b28:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8013b2c:	9111      	str	r1, [sp, #68]	; 0x44
 8013b2e:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8013b32:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8013b36:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8013b3a:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8013b3e:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8013b42:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8013b46:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8013b4a:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8013b4e:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8013b52:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8013b56:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8013b5a:	f1be 0f00 	cmp.w	lr, #0
 8013b5e:	d031      	beq.n	8013bc4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8013b60:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8013b62:	4450      	add	r0, sl
 8013b64:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8013b68:	4431      	add	r1, r6
 8013b6a:	ee37 7a04 	vadd.f32	s14, s14, s8
 8013b6e:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8013b72:	4549      	cmp	r1, r9
 8013b74:	db08      	blt.n	8013b88 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 8013b76:	ee77 7a85 	vadd.f32	s15, s15, s10
 8013b7a:	3001      	adds	r0, #1
 8013b7c:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8013b80:	eba1 0109 	sub.w	r1, r1, r9
 8013b84:	ee37 7a06 	vadd.f32	s14, s14, s12
 8013b88:	f10e 3eff 	add.w	lr, lr, #4294967295
 8013b8c:	f04f 0801 	mov.w	r8, #1
 8013b90:	e7e3      	b.n	8013b5a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 8013b92:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8013b94:	4450      	add	r0, sl
 8013b96:	ee37 7a24 	vadd.f32	s14, s14, s9
 8013b9a:	4431      	add	r1, r6
 8013b9c:	ee77 7a84 	vadd.f32	s15, s15, s8
 8013ba0:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8013ba4:	4541      	cmp	r1, r8
 8013ba6:	db08      	blt.n	8013bba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8013ba8:	ee76 6a85 	vadd.f32	s13, s13, s10
 8013bac:	3001      	adds	r0, #1
 8013bae:	ee37 7a25 	vadd.f32	s14, s14, s11
 8013bb2:	eba1 0108 	sub.w	r1, r1, r8
 8013bb6:	ee77 7a86 	vadd.f32	s15, s15, s12
 8013bba:	f10c 3cff 	add.w	ip, ip, #4294967295
 8013bbe:	f04f 0901 	mov.w	r9, #1
 8013bc2:	e79b      	b.n	8013afc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8013bc4:	449c      	add	ip, r3
 8013bc6:	1aff      	subs	r7, r7, r3
 8013bc8:	f1b8 0f00 	cmp.w	r8, #0
 8013bcc:	d009      	beq.n	8013be2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 8013bce:	9019      	str	r0, [sp, #100]	; 0x64
 8013bd0:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8013bd4:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8013bd8:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8013bdc:	911d      	str	r1, [sp, #116]	; 0x74
 8013bde:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8013be2:	1ad2      	subs	r2, r2, r3
 8013be4:	e68b      	b.n	80138fe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8013be6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013be8:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 8013bea:	2b00      	cmp	r3, #0
 8013bec:	f000 80d1 	beq.w	8013d92 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8013bf0:	ad19      	add	r5, sp, #100	; 0x64
 8013bf2:	ac39      	add	r4, sp, #228	; 0xe4
 8013bf4:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8013bf6:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8013bfa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8013bfe:	930c      	str	r3, [sp, #48]	; 0x30
 8013c00:	990c      	ldr	r1, [sp, #48]	; 0x30
 8013c02:	6963      	ldr	r3, [r4, #20]
 8013c04:	440b      	add	r3, r1
 8013c06:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8013c0a:	4408      	add	r0, r1
 8013c0c:	b200      	sxth	r0, r0
 8013c0e:	4283      	cmp	r3, r0
 8013c10:	900d      	str	r0, [sp, #52]	; 0x34
 8013c12:	f280 80c1 	bge.w	8013d98 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 8013c16:	428b      	cmp	r3, r1
 8013c18:	da08      	bge.n	8013c2c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8013c1a:	2a00      	cmp	r2, #0
 8013c1c:	dd06      	ble.n	8013c2c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8013c1e:	1acb      	subs	r3, r1, r3
 8013c20:	429a      	cmp	r2, r3
 8013c22:	f2c0 80bb 	blt.w	8013d9c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 8013c26:	2b00      	cmp	r3, #0
 8013c28:	f300 80b9 	bgt.w	8013d9e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8013c2c:	6967      	ldr	r7, [r4, #20]
 8013c2e:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8013c32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013c34:	443b      	add	r3, r7
 8013c36:	461f      	mov	r7, r3
 8013c38:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013c3a:	1bdf      	subs	r7, r3, r7
 8013c3c:	4297      	cmp	r7, r2
 8013c3e:	bfa8      	it	ge
 8013c40:	4617      	movge	r7, r2
 8013c42:	2f00      	cmp	r7, #0
 8013c44:	f340 813c 	ble.w	8013ec0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8013c48:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8013c4a:	6829      	ldr	r1, [r5, #0]
 8013c4c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8013c50:	f9bb 3000 	ldrsh.w	r3, [fp]
 8013c54:	4411      	add	r1, r2
 8013c56:	6820      	ldr	r0, [r4, #0]
 8013c58:	4299      	cmp	r1, r3
 8013c5a:	dd1a      	ble.n	8013c92 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8013c5c:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8013c60:	4402      	add	r2, r0
 8013c62:	440b      	add	r3, r1
 8013c64:	b21b      	sxth	r3, r3
 8013c66:	429a      	cmp	r2, r3
 8013c68:	dc13      	bgt.n	8013c92 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8013c6a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013c6c:	a912      	add	r1, sp, #72	; 0x48
 8013c6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013c70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013c72:	681b      	ldr	r3, [r3, #0]
 8013c74:	9206      	str	r2, [sp, #24]
 8013c76:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013c78:	9500      	str	r5, [sp, #0]
 8013c7a:	9205      	str	r2, [sp, #20]
 8013c7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013c7e:	e9cd b203 	strd	fp, r2, [sp, #12]
 8013c82:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8013c84:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8013c88:	aa49      	add	r2, sp, #292	; 0x124
 8013c8a:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 8013c8e:	4623      	mov	r3, r4
 8013c90:	47c8      	blx	r9
 8013c92:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8013c96:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8013c9a:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8013c9e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013ca2:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8013ca6:	68a1      	ldr	r1, [r4, #8]
 8013ca8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013cac:	ed94 6a08 	vldr	s12, [r4, #32]
 8013cb0:	edd4 6a07 	vldr	s13, [r4, #28]
 8013cb4:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8013cb8:	ee76 6a86 	vadd.f32	s13, s13, s12
 8013cbc:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8013cc0:	e9d4 2300 	ldrd	r2, r3, [r4]
 8013cc4:	edc4 6a07 	vstr	s13, [r4, #28]
 8013cc8:	441a      	add	r2, r3
 8013cca:	6963      	ldr	r3, [r4, #20]
 8013ccc:	3301      	adds	r3, #1
 8013cce:	6022      	str	r2, [r4, #0]
 8013cd0:	6163      	str	r3, [r4, #20]
 8013cd2:	69a3      	ldr	r3, [r4, #24]
 8013cd4:	3b01      	subs	r3, #1
 8013cd6:	61a3      	str	r3, [r4, #24]
 8013cd8:	6923      	ldr	r3, [r4, #16]
 8013cda:	440b      	add	r3, r1
 8013cdc:	68e1      	ldr	r1, [r4, #12]
 8013cde:	428b      	cmp	r3, r1
 8013ce0:	6123      	str	r3, [r4, #16]
 8013ce2:	db15      	blt.n	8013d10 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8013ce4:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8013ce8:	3201      	adds	r2, #1
 8013cea:	1a5b      	subs	r3, r3, r1
 8013cec:	ee76 6a26 	vadd.f32	s13, s12, s13
 8013cf0:	6022      	str	r2, [r4, #0]
 8013cf2:	6123      	str	r3, [r4, #16]
 8013cf4:	edc4 6a07 	vstr	s13, [r4, #28]
 8013cf8:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8013cfc:	ee36 7a87 	vadd.f32	s14, s13, s14
 8013d00:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8013d04:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8013d08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013d0c:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8013d10:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8013d14:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8013d18:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8013d1c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013d20:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8013d24:	68a9      	ldr	r1, [r5, #8]
 8013d26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013d2a:	ed95 6a08 	vldr	s12, [r5, #32]
 8013d2e:	edd5 6a07 	vldr	s13, [r5, #28]
 8013d32:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8013d36:	ee76 6a86 	vadd.f32	s13, s13, s12
 8013d3a:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8013d3e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013d42:	edc5 6a07 	vstr	s13, [r5, #28]
 8013d46:	441a      	add	r2, r3
 8013d48:	696b      	ldr	r3, [r5, #20]
 8013d4a:	3301      	adds	r3, #1
 8013d4c:	602a      	str	r2, [r5, #0]
 8013d4e:	616b      	str	r3, [r5, #20]
 8013d50:	69ab      	ldr	r3, [r5, #24]
 8013d52:	3b01      	subs	r3, #1
 8013d54:	61ab      	str	r3, [r5, #24]
 8013d56:	692b      	ldr	r3, [r5, #16]
 8013d58:	440b      	add	r3, r1
 8013d5a:	68e9      	ldr	r1, [r5, #12]
 8013d5c:	428b      	cmp	r3, r1
 8013d5e:	612b      	str	r3, [r5, #16]
 8013d60:	db15      	blt.n	8013d8e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 8013d62:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8013d66:	3201      	adds	r2, #1
 8013d68:	1a5b      	subs	r3, r3, r1
 8013d6a:	ee76 6a26 	vadd.f32	s13, s12, s13
 8013d6e:	602a      	str	r2, [r5, #0]
 8013d70:	612b      	str	r3, [r5, #16]
 8013d72:	edc5 6a07 	vstr	s13, [r5, #28]
 8013d76:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8013d7a:	ee36 7a87 	vadd.f32	s14, s13, s14
 8013d7e:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8013d82:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8013d86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013d8a:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8013d8e:	3f01      	subs	r7, #1
 8013d90:	e757      	b.n	8013c42 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 8013d92:	ad39      	add	r5, sp, #228	; 0xe4
 8013d94:	ac19      	add	r4, sp, #100	; 0x64
 8013d96:	e72d      	b.n	8013bf4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 8013d98:	4613      	mov	r3, r2
 8013d9a:	e744      	b.n	8013c26 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8013d9c:	4613      	mov	r3, r2
 8013d9e:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 8013da0:	469e      	mov	lr, r3
 8013da2:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 8013da6:	461f      	mov	r7, r3
 8013da8:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 8013dac:	f04f 0900 	mov.w	r9, #0
 8013db0:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 8013db4:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 8013db8:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 8013dbc:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 8013dc0:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 8013dc4:	993d      	ldr	r1, [sp, #244]	; 0xf4
 8013dc6:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 8013dca:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 8013dce:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 8013dd2:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 8013dd6:	960e      	str	r6, [sp, #56]	; 0x38
 8013dd8:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 8013ddc:	2f00      	cmp	r7, #0
 8013dde:	d146      	bne.n	8013e6e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8013de0:	449c      	add	ip, r3
 8013de2:	1ad7      	subs	r7, r2, r3
 8013de4:	f1b9 0f00 	cmp.w	r9, #0
 8013de8:	d009      	beq.n	8013dfe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 8013dea:	9039      	str	r0, [sp, #228]	; 0xe4
 8013dec:	913d      	str	r1, [sp, #244]	; 0xf4
 8013dee:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 8013df2:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 8013df6:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 8013dfa:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 8013dfe:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8013e00:	f04f 0800 	mov.w	r8, #0
 8013e04:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8013e08:	910e      	str	r1, [sp, #56]	; 0x38
 8013e0a:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8013e0e:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8013e12:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8013e16:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8013e1a:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8013e1e:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8013e22:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8013e26:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8013e2a:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8013e2e:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8013e32:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8013e36:	f1be 0f00 	cmp.w	lr, #0
 8013e3a:	d030      	beq.n	8013e9e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8013e3c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8013e3e:	4450      	add	r0, sl
 8013e40:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8013e44:	4431      	add	r1, r6
 8013e46:	ee37 7a04 	vadd.f32	s14, s14, s8
 8013e4a:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8013e4e:	4549      	cmp	r1, r9
 8013e50:	db08      	blt.n	8013e64 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 8013e52:	ee77 7a85 	vadd.f32	s15, s15, s10
 8013e56:	3001      	adds	r0, #1
 8013e58:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8013e5c:	eba1 0109 	sub.w	r1, r1, r9
 8013e60:	ee37 7a06 	vadd.f32	s14, s14, s12
 8013e64:	f10e 3eff 	add.w	lr, lr, #4294967295
 8013e68:	f04f 0801 	mov.w	r8, #1
 8013e6c:	e7e3      	b.n	8013e36 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 8013e6e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8013e70:	4450      	add	r0, sl
 8013e72:	ee37 7a24 	vadd.f32	s14, s14, s9
 8013e76:	4431      	add	r1, r6
 8013e78:	ee77 7a84 	vadd.f32	s15, s15, s8
 8013e7c:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8013e80:	4541      	cmp	r1, r8
 8013e82:	db08      	blt.n	8013e96 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 8013e84:	ee76 6a85 	vadd.f32	s13, s13, s10
 8013e88:	3001      	adds	r0, #1
 8013e8a:	ee37 7a25 	vadd.f32	s14, s14, s11
 8013e8e:	eba1 0108 	sub.w	r1, r1, r8
 8013e92:	ee77 7a86 	vadd.f32	s15, s15, s12
 8013e96:	3f01      	subs	r7, #1
 8013e98:	f04f 0901 	mov.w	r9, #1
 8013e9c:	e79e      	b.n	8013ddc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 8013e9e:	449c      	add	ip, r3
 8013ea0:	1aff      	subs	r7, r7, r3
 8013ea2:	f1b8 0f00 	cmp.w	r8, #0
 8013ea6:	d009      	beq.n	8013ebc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 8013ea8:	9019      	str	r0, [sp, #100]	; 0x64
 8013eaa:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8013eae:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8013eb2:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8013eb6:	911d      	str	r1, [sp, #116]	; 0x74
 8013eb8:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8013ebc:	1ad2      	subs	r2, r2, r3
 8013ebe:	e6b5      	b.n	8013c2c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8013ec0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013ec2:	681b      	ldr	r3, [r3, #0]
 8013ec4:	b923      	cbnz	r3, 8013ed0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8013ec6:	4b04      	ldr	r3, [pc, #16]	; (8013ed8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 8013ec8:	6818      	ldr	r0, [r3, #0]
 8013eca:	6803      	ldr	r3, [r0, #0]
 8013ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ece:	4798      	blx	r3
 8013ed0:	b05b      	add	sp, #364	; 0x16c
 8013ed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ed6:	bf00      	nop
 8013ed8:	240069a4 	.word	0x240069a4

08013edc <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>:
 8013edc:	b570      	push	{r4, r5, r6, lr}
 8013ede:	4604      	mov	r4, r0
 8013ee0:	2500      	movs	r5, #0
 8013ee2:	9805      	ldr	r0, [sp, #20]
 8013ee4:	f89d 601c 	ldrb.w	r6, [sp, #28]
 8013ee8:	6061      	str	r1, [r4, #4]
 8013eea:	8263      	strh	r3, [r4, #18]
 8013eec:	f89d 1010 	ldrb.w	r1, [sp, #16]
 8013ef0:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8013ef4:	8025      	strh	r5, [r4, #0]
 8013ef6:	7221      	strb	r1, [r4, #8]
 8013ef8:	7266      	strb	r6, [r4, #9]
 8013efa:	60e0      	str	r0, [r4, #12]
 8013efc:	8222      	strh	r2, [r4, #16]
 8013efe:	82a3      	strh	r3, [r4, #20]
 8013f00:	82e5      	strh	r5, [r4, #22]
 8013f02:	8325      	strh	r5, [r4, #24]
 8013f04:	8365      	strh	r5, [r4, #26]
 8013f06:	83a5      	strh	r5, [r4, #28]
 8013f08:	83e5      	strh	r5, [r4, #30]
 8013f0a:	8425      	strh	r5, [r4, #32]
 8013f0c:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
 8013f10:	b32e      	cbz	r6, 8013f5e <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8013f12:	6803      	ldr	r3, [r0, #0]
 8013f14:	695b      	ldr	r3, [r3, #20]
 8013f16:	4798      	blx	r3
 8013f18:	4606      	mov	r6, r0
 8013f1a:	b300      	cbz	r0, 8013f5e <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8013f1c:	68e0      	ldr	r0, [r4, #12]
 8013f1e:	4631      	mov	r1, r6
 8013f20:	6803      	ldr	r3, [r0, #0]
 8013f22:	68db      	ldr	r3, [r3, #12]
 8013f24:	4798      	blx	r3
 8013f26:	4605      	mov	r5, r0
 8013f28:	b1c8      	cbz	r0, 8013f5e <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8013f2a:	7b43      	ldrb	r3, [r0, #13]
 8013f2c:	7a82      	ldrb	r2, [r0, #10]
 8013f2e:	005b      	lsls	r3, r3, #1
 8013f30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013f34:	4313      	orrs	r3, r2
 8013f36:	8423      	strh	r3, [r4, #32]
 8013f38:	7a63      	ldrb	r3, [r4, #9]
 8013f3a:	2b06      	cmp	r3, #6
 8013f3c:	d10f      	bne.n	8013f5e <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8013f3e:	68e0      	ldr	r0, [r4, #12]
 8013f40:	462a      	mov	r2, r5
 8013f42:	4631      	mov	r1, r6
 8013f44:	6803      	ldr	r3, [r0, #0]
 8013f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013f48:	4798      	blx	r3
 8013f4a:	7b6b      	ldrb	r3, [r5, #13]
 8013f4c:	005b      	lsls	r3, r3, #1
 8013f4e:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8013f52:	7aab      	ldrb	r3, [r5, #10]
 8013f54:	4313      	orrs	r3, r2
 8013f56:	4418      	add	r0, r3
 8013f58:	8c23      	ldrh	r3, [r4, #32]
 8013f5a:	4418      	add	r0, r3
 8013f5c:	8420      	strh	r0, [r4, #32]
 8013f5e:	4620      	mov	r0, r4
 8013f60:	bd70      	pop	{r4, r5, r6, pc}

08013f62 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 8013f62:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f66:	2400      	movs	r4, #0
 8013f68:	b085      	sub	sp, #20
 8013f6a:	4681      	mov	r9, r0
 8013f6c:	4688      	mov	r8, r1
 8013f6e:	4692      	mov	sl, r2
 8013f70:	469b      	mov	fp, r3
 8013f72:	4627      	mov	r7, r4
 8013f74:	4625      	mov	r5, r4
 8013f76:	4626      	mov	r6, r4
 8013f78:	4554      	cmp	r4, sl
 8013f7a:	da2a      	bge.n	8013fd2 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8013f7c:	2300      	movs	r3, #0
 8013f7e:	9303      	str	r3, [sp, #12]
 8013f80:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8013f84:	429d      	cmp	r5, r3
 8013f86:	d004      	beq.n	8013f92 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 8013f88:	f242 030b 	movw	r3, #8203	; 0x200b
 8013f8c:	429d      	cmp	r5, r3
 8013f8e:	bf18      	it	ne
 8013f90:	462f      	movne	r7, r5
 8013f92:	ab03      	add	r3, sp, #12
 8013f94:	4642      	mov	r2, r8
 8013f96:	4659      	mov	r1, fp
 8013f98:	4648      	mov	r0, r9
 8013f9a:	f002 ff79 	bl	8016e90 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8013f9e:	4605      	mov	r5, r0
 8013fa0:	b1b8      	cbz	r0, 8013fd2 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8013fa2:	280a      	cmp	r0, #10
 8013fa4:	d015      	beq.n	8013fd2 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8013fa6:	9a03      	ldr	r2, [sp, #12]
 8013fa8:	b18a      	cbz	r2, 8013fce <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 8013faa:	7b50      	ldrb	r0, [r2, #13]
 8013fac:	4639      	mov	r1, r7
 8013fae:	7a93      	ldrb	r3, [r2, #10]
 8013fb0:	0040      	lsls	r0, r0, #1
 8013fb2:	8895      	ldrh	r5, [r2, #4]
 8013fb4:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8013fb8:	4303      	orrs	r3, r0
 8013fba:	4640      	mov	r0, r8
 8013fbc:	9301      	str	r3, [sp, #4]
 8013fbe:	f8d8 3000 	ldr.w	r3, [r8]
 8013fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013fc4:	4798      	blx	r3
 8013fc6:	9b01      	ldr	r3, [sp, #4]
 8013fc8:	4418      	add	r0, r3
 8013fca:	4406      	add	r6, r0
 8013fcc:	b2b6      	uxth	r6, r6
 8013fce:	3401      	adds	r4, #1
 8013fd0:	e7d2      	b.n	8013f78 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 8013fd2:	4630      	mov	r0, r6
 8013fd4:	b005      	add	sp, #20
 8013fd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013fda <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 8013fda:	2a02      	cmp	r2, #2
 8013fdc:	b530      	push	{r4, r5, lr}
 8013fde:	d011      	beq.n	8014004 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 8013fe0:	2a03      	cmp	r2, #3
 8013fe2:	d01c      	beq.n	801401e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 8013fe4:	2a01      	cmp	r2, #1
 8013fe6:	d10c      	bne.n	8014002 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8013fe8:	888b      	ldrh	r3, [r1, #4]
 8013fea:	8801      	ldrh	r1, [r0, #0]
 8013fec:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8013ff0:	1a5b      	subs	r3, r3, r1
 8013ff2:	8844      	ldrh	r4, [r0, #2]
 8013ff4:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8013ff8:	1a9b      	subs	r3, r3, r2
 8013ffa:	8004      	strh	r4, [r0, #0]
 8013ffc:	8081      	strh	r1, [r0, #4]
 8013ffe:	8043      	strh	r3, [r0, #2]
 8014000:	80c2      	strh	r2, [r0, #6]
 8014002:	bd30      	pop	{r4, r5, pc}
 8014004:	88cb      	ldrh	r3, [r1, #6]
 8014006:	8842      	ldrh	r2, [r0, #2]
 8014008:	1a9b      	subs	r3, r3, r2
 801400a:	88c2      	ldrh	r2, [r0, #6]
 801400c:	1a9b      	subs	r3, r3, r2
 801400e:	888a      	ldrh	r2, [r1, #4]
 8014010:	8801      	ldrh	r1, [r0, #0]
 8014012:	8043      	strh	r3, [r0, #2]
 8014014:	1a52      	subs	r2, r2, r1
 8014016:	8881      	ldrh	r1, [r0, #4]
 8014018:	1a52      	subs	r2, r2, r1
 801401a:	8002      	strh	r2, [r0, #0]
 801401c:	e7f1      	b.n	8014002 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801401e:	88cb      	ldrh	r3, [r1, #6]
 8014020:	8841      	ldrh	r1, [r0, #2]
 8014022:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8014026:	1a5b      	subs	r3, r3, r1
 8014028:	f9b0 5000 	ldrsh.w	r5, [r0]
 801402c:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8014030:	1a9b      	subs	r3, r3, r2
 8014032:	8045      	strh	r5, [r0, #2]
 8014034:	8082      	strh	r2, [r0, #4]
 8014036:	8003      	strh	r3, [r0, #0]
 8014038:	80c4      	strh	r4, [r0, #6]
 801403a:	e7e2      	b.n	8014002 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

0801403c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 801403c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014040:	b09f      	sub	sp, #124	; 0x7c
 8014042:	9116      	str	r1, [sp, #88]	; 0x58
 8014044:	9317      	str	r3, [sp, #92]	; 0x5c
 8014046:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8014048:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801404a:	8809      	ldrh	r1, [r1, #0]
 801404c:	889b      	ldrh	r3, [r3, #4]
 801404e:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 8014052:	440b      	add	r3, r1
 8014054:	9212      	str	r2, [sp, #72]	; 0x48
 8014056:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 801405a:	b21b      	sxth	r3, r3
 801405c:	9011      	str	r0, [sp, #68]	; 0x44
 801405e:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 8014062:	9310      	str	r3, [sp, #64]	; 0x40
 8014064:	f8d8 3000 	ldr.w	r3, [r8]
 8014068:	f9bd 60a0 	ldrsh.w	r6, [sp, #160]	; 0xa0
 801406c:	7b19      	ldrb	r1, [r3, #12]
 801406e:	7adb      	ldrb	r3, [r3, #11]
 8014070:	9114      	str	r1, [sp, #80]	; 0x50
 8014072:	9315      	str	r3, [sp, #84]	; 0x54
 8014074:	2a00      	cmp	r2, #0
 8014076:	d06a      	beq.n	801414e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 8014078:	f898 3010 	ldrb.w	r3, [r8, #16]
 801407c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801407e:	2b06      	cmp	r3, #6
 8014080:	bf14      	ite	ne
 8014082:	2301      	movne	r3, #1
 8014084:	2302      	moveq	r3, #2
 8014086:	4413      	add	r3, r2
 8014088:	f04f 0900 	mov.w	r9, #0
 801408c:	930f      	str	r3, [sp, #60]	; 0x3c
 801408e:	464c      	mov	r4, r9
 8014090:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8014094:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 8014098:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 801409c:	4293      	cmp	r3, r2
 801409e:	f280 808f 	bge.w	80141c0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 80140a2:	2300      	movs	r3, #0
 80140a4:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
 80140a8:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 80140ac:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80140b0:	429c      	cmp	r4, r3
 80140b2:	d006      	beq.n	80140c2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
 80140b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80140b6:	f242 020b 	movw	r2, #8203	; 0x200b
 80140ba:	4294      	cmp	r4, r2
 80140bc:	bf18      	it	ne
 80140be:	4623      	movne	r3, r4
 80140c0:	930d      	str	r3, [sp, #52]	; 0x34
 80140c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80140c4:	992d      	ldr	r1, [sp, #180]	; 0xb4
 80140c6:	f8d8 2000 	ldr.w	r2, [r8]
 80140ca:	428b      	cmp	r3, r1
 80140cc:	db41      	blt.n	8014152 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 80140ce:	6813      	ldr	r3, [r2, #0]
 80140d0:	4610      	mov	r0, r2
 80140d2:	695b      	ldr	r3, [r3, #20]
 80140d4:	4798      	blx	r3
 80140d6:	4604      	mov	r4, r0
 80140d8:	f8d8 0000 	ldr.w	r0, [r8]
 80140dc:	aa1d      	add	r2, sp, #116	; 0x74
 80140de:	4621      	mov	r1, r4
 80140e0:	6803      	ldr	r3, [r0, #0]
 80140e2:	689d      	ldr	r5, [r3, #8]
 80140e4:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 80140e8:	47a8      	blx	r5
 80140ea:	901c      	str	r0, [sp, #112]	; 0x70
 80140ec:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80140f0:	429c      	cmp	r4, r3
 80140f2:	f000 80ec 	beq.w	80142ce <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 80140f6:	f242 030b 	movw	r3, #8203	; 0x200b
 80140fa:	429c      	cmp	r4, r3
 80140fc:	f000 80e7 	beq.w	80142ce <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8014100:	2c00      	cmp	r4, #0
 8014102:	f000 80f9 	beq.w	80142f8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 8014106:	2c0a      	cmp	r4, #10
 8014108:	d060      	beq.n	80141cc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 801410a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801410c:	b36a      	cbz	r2, 801416a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 801410e:	8894      	ldrh	r4, [r2, #4]
 8014110:	f1bb 0f00 	cmp.w	fp, #0
 8014114:	d03b      	beq.n	801418e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 8014116:	f892 900d 	ldrb.w	r9, [r2, #13]
 801411a:	f1bb 0f01 	cmp.w	fp, #1
 801411e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8014122:	f409 7380 	and.w	r3, r9, #256	; 0x100
 8014126:	f892 900a 	ldrb.w	r9, [r2, #10]
 801412a:	ea49 0903 	orr.w	r9, r9, r3
 801412e:	d134      	bne.n	801419a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15e>
 8014130:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014132:	eba6 0609 	sub.w	r6, r6, r9
 8014136:	2b00      	cmp	r3, #0
 8014138:	d14f      	bne.n	80141da <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 801413a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801413c:	eb09 0306 	add.w	r3, r9, r6
 8014140:	4413      	add	r3, r2
 8014142:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8014144:	f9b2 2000 	ldrsh.w	r2, [r2]
 8014148:	4293      	cmp	r3, r2
 801414a:	da51      	bge.n	80141f0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 801414c:	e038      	b.n	80141c0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 801414e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014150:	e79a      	b.n	8014088 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4c>
 8014152:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 8014156:	4659      	mov	r1, fp
 8014158:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801415a:	9301      	str	r3, [sp, #4]
 801415c:	ab1d      	add	r3, sp, #116	; 0x74
 801415e:	9300      	str	r3, [sp, #0]
 8014160:	ab1c      	add	r3, sp, #112	; 0x70
 8014162:	f002 fede 	bl	8016f22 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 8014166:	4604      	mov	r4, r0
 8014168:	e7c0      	b.n	80140ec <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 801416a:	f8d8 0000 	ldr.w	r0, [r8]
 801416e:	6803      	ldr	r3, [r0, #0]
 8014170:	691b      	ldr	r3, [r3, #16]
 8014172:	4798      	blx	r3
 8014174:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8014178:	4298      	cmp	r0, r3
 801417a:	f000 80a8 	beq.w	80142ce <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801417e:	f242 030b 	movw	r3, #8203	; 0x200b
 8014182:	4298      	cmp	r0, r3
 8014184:	f000 80a3 	beq.w	80142ce <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8014188:	f1bb 0f00 	cmp.w	fp, #0
 801418c:	d100      	bne.n	8014190 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 801418e:	444e      	add	r6, r9
 8014190:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8014192:	2a00      	cmp	r2, #0
 8014194:	d1bf      	bne.n	8014116 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 8014196:	4691      	mov	r9, r2
 8014198:	e099      	b.n	80142ce <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801419a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801419c:	2b00      	cmp	r3, #0
 801419e:	f000 80ad 	beq.w	80142fc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c0>
 80141a2:	f1bb 0f00 	cmp.w	fp, #0
 80141a6:	d118      	bne.n	80141da <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 80141a8:	f8d8 0000 	ldr.w	r0, [r8]
 80141ac:	990d      	ldr	r1, [sp, #52]	; 0x34
 80141ae:	6803      	ldr	r3, [r0, #0]
 80141b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80141b2:	4798      	blx	r3
 80141b4:	4406      	add	r6, r0
 80141b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80141b8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80141ba:	1af3      	subs	r3, r6, r3
 80141bc:	4293      	cmp	r3, r2
 80141be:	dd17      	ble.n	80141f0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 80141c0:	2c00      	cmp	r4, #0
 80141c2:	f000 8099 	beq.w	80142f8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 80141c6:	2c0a      	cmp	r4, #10
 80141c8:	f040 8087 	bne.w	80142da <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29e>
 80141cc:	240a      	movs	r4, #10
 80141ce:	fab4 f084 	clz	r0, r4
 80141d2:	0940      	lsrs	r0, r0, #5
 80141d4:	b01f      	add	sp, #124	; 0x7c
 80141d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80141da:	f8d8 0000 	ldr.w	r0, [r8]
 80141de:	990d      	ldr	r1, [sp, #52]	; 0x34
 80141e0:	6803      	ldr	r3, [r0, #0]
 80141e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80141e4:	4798      	blx	r3
 80141e6:	f1bb 0f01 	cmp.w	fp, #1
 80141ea:	eba6 0600 	sub.w	r6, r6, r0
 80141ee:	d0a4      	beq.n	801413a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 80141f0:	981c      	ldr	r0, [sp, #112]	; 0x70
 80141f2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80141f4:	f990 1009 	ldrsb.w	r1, [r0, #9]
 80141f8:	f9b3 7000 	ldrsh.w	r7, [r3]
 80141fc:	7b43      	ldrb	r3, [r0, #13]
 80141fe:	4431      	add	r1, r6
 8014200:	015b      	lsls	r3, r3, #5
 8014202:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8014206:	7983      	ldrb	r3, [r0, #6]
 8014208:	4313      	orrs	r3, r2
 801420a:	440b      	add	r3, r1
 801420c:	42bb      	cmp	r3, r7
 801420e:	db5e      	blt.n	80142ce <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8014210:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014212:	4299      	cmp	r1, r3
 8014214:	da5b      	bge.n	80142ce <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8014216:	f8d8 0000 	ldr.w	r0, [r8]
 801421a:	42b7      	cmp	r7, r6
 801421c:	6803      	ldr	r3, [r0, #0]
 801421e:	bfcc      	ite	gt
 8014220:	1bbf      	subgt	r7, r7, r6
 8014222:	2700      	movle	r7, #0
 8014224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014226:	bfc8      	it	gt
 8014228:	b2bf      	uxthgt	r7, r7
 801422a:	4798      	blx	r3
 801422c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801422e:	7b5a      	ldrb	r2, [r3, #13]
 8014230:	00d1      	lsls	r1, r2, #3
 8014232:	f401 7580 	and.w	r5, r1, #256	; 0x100
 8014236:	7a19      	ldrb	r1, [r3, #8]
 8014238:	4329      	orrs	r1, r5
 801423a:	0655      	lsls	r5, r2, #25
 801423c:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 801423e:	bf48      	it	mi
 8014240:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 8014244:	4405      	add	r5, r0
 8014246:	bf48      	it	mi
 8014248:	b209      	sxthmi	r1, r1
 801424a:	1a6d      	subs	r5, r5, r1
 801424c:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801424e:	b2ad      	uxth	r5, r5
 8014250:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8014254:	fa0f fa85 	sxth.w	sl, r5
 8014258:	4551      	cmp	r1, sl
 801425a:	dd3c      	ble.n	80142d6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29a>
 801425c:	0112      	lsls	r2, r2, #4
 801425e:	79d8      	ldrb	r0, [r3, #7]
 8014260:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8014264:	4302      	orrs	r2, r0
 8014266:	4492      	add	sl, r2
 8014268:	4551      	cmp	r1, sl
 801426a:	dc30      	bgt.n	80142ce <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801426c:	1b4d      	subs	r5, r1, r5
 801426e:	468a      	mov	sl, r1
 8014270:	b22d      	sxth	r5, r5
 8014272:	9319      	str	r3, [sp, #100]	; 0x64
 8014274:	b2ad      	uxth	r5, r5
 8014276:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014278:	f8d8 0000 	ldr.w	r0, [r8]
 801427c:	681a      	ldr	r2, [r3, #0]
 801427e:	6801      	ldr	r1, [r0, #0]
 8014280:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8014282:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8014284:	9313      	str	r3, [sp, #76]	; 0x4c
 8014286:	9218      	str	r2, [sp, #96]	; 0x60
 8014288:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801428a:	4788      	blx	r1
 801428c:	f898 1006 	ldrb.w	r1, [r8, #6]
 8014290:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014292:	910b      	str	r1, [sp, #44]	; 0x2c
 8014294:	f898 100e 	ldrb.w	r1, [r8, #14]
 8014298:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801429a:	910a      	str	r1, [sp, #40]	; 0x28
 801429c:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 80142a0:	9109      	str	r1, [sp, #36]	; 0x24
 80142a2:	f8d8 1008 	ldr.w	r1, [r8, #8]
 80142a6:	9305      	str	r3, [sp, #20]
 80142a8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80142aa:	9206      	str	r2, [sp, #24]
 80142ac:	9304      	str	r3, [sp, #16]
 80142ae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80142b0:	f8cd a004 	str.w	sl, [sp, #4]
 80142b4:	e9cd 7502 	strd	r7, r5, [sp, #8]
 80142b8:	4437      	add	r7, r6
 80142ba:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80142bc:	b23f      	sxth	r7, r7
 80142be:	e9cd 0107 	strd	r0, r1, [sp, #28]
 80142c2:	9700      	str	r7, [sp, #0]
 80142c4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80142c6:	681a      	ldr	r2, [r3, #0]
 80142c8:	9811      	ldr	r0, [sp, #68]	; 0x44
 80142ca:	685b      	ldr	r3, [r3, #4]
 80142cc:	47a8      	blx	r5
 80142ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80142d0:	3301      	adds	r3, #1
 80142d2:	930e      	str	r3, [sp, #56]	; 0x38
 80142d4:	e6e0      	b.n	8014098 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5c>
 80142d6:	2500      	movs	r5, #0
 80142d8:	e7cb      	b.n	8014272 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x236>
 80142da:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80142dc:	3501      	adds	r5, #1
 80142de:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80142e0:	429d      	cmp	r5, r3
 80142e2:	f6bf af74 	bge.w	80141ce <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 80142e6:	4659      	mov	r1, fp
 80142e8:	982c      	ldr	r0, [sp, #176]	; 0xb0
 80142ea:	f7f0 fecb 	bl	8005084 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80142ee:	4604      	mov	r4, r0
 80142f0:	b110      	cbz	r0, 80142f8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 80142f2:	280a      	cmp	r0, #10
 80142f4:	d1f2      	bne.n	80142dc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2a0>
 80142f6:	e769      	b.n	80141cc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 80142f8:	2400      	movs	r4, #0
 80142fa:	e768      	b.n	80141ce <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 80142fc:	f1bb 0f00 	cmp.w	fp, #0
 8014300:	f43f af59 	beq.w	80141b6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x17a>
 8014304:	e774      	b.n	80141f0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>

08014306 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 8014306:	b530      	push	{r4, r5, lr}
 8014308:	8ac4      	ldrh	r4, [r0, #22]
 801430a:	8b45      	ldrh	r5, [r0, #26]
 801430c:	8343      	strh	r3, [r0, #26]
 801430e:	442c      	add	r4, r5
 8014310:	1ae4      	subs	r4, r4, r3
 8014312:	8b83      	ldrh	r3, [r0, #28]
 8014314:	82c4      	strh	r4, [r0, #22]
 8014316:	8b04      	ldrh	r4, [r0, #24]
 8014318:	4422      	add	r2, r4
 801431a:	440c      	add	r4, r1
 801431c:	1a59      	subs	r1, r3, r1
 801431e:	83c2      	strh	r2, [r0, #30]
 8014320:	8304      	strh	r4, [r0, #24]
 8014322:	8381      	strh	r1, [r0, #28]
 8014324:	bd30      	pop	{r4, r5, pc}

08014326 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>:
 8014326:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801432a:	4604      	mov	r4, r0
 801432c:	8a47      	ldrh	r7, [r0, #18]
 801432e:	68c0      	ldr	r0, [r0, #12]
 8014330:	b085      	sub	sp, #20
 8014332:	6803      	ldr	r3, [r0, #0]
 8014334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014336:	4798      	blx	r3
 8014338:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 801433c:	7a63      	ldrb	r3, [r4, #9]
 801433e:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 8014342:	3b01      	subs	r3, #1
 8014344:	42b7      	cmp	r7, r6
 8014346:	bfac      	ite	ge
 8014348:	f04f 0900 	movge.w	r9, #0
 801434c:	f04f 0901 	movlt.w	r9, #1
 8014350:	2b05      	cmp	r3, #5
 8014352:	d804      	bhi.n	801435e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x38>
 8014354:	e8df f003 	tbb	[pc, r3]
 8014358:	470f0854 	.word	0x470f0854
 801435c:	4c4c      	.short	0x4c4c
 801435e:	2500      	movs	r5, #0
 8014360:	46a9      	mov	r9, r5
 8014362:	462e      	mov	r6, r5
 8014364:	462f      	mov	r7, r5
 8014366:	e00e      	b.n	8014386 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8014368:	42b7      	cmp	r7, r6
 801436a:	f04f 0500 	mov.w	r5, #0
 801436e:	bfb4      	ite	lt
 8014370:	2600      	movlt	r6, #0
 8014372:	2601      	movge	r6, #1
 8014374:	e7f6      	b.n	8014364 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 8014376:	42b7      	cmp	r7, r6
 8014378:	464d      	mov	r5, r9
 801437a:	f04f 0900 	mov.w	r9, #0
 801437e:	bfb4      	ite	lt
 8014380:	2600      	movlt	r6, #0
 8014382:	2601      	movge	r6, #1
 8014384:	464f      	mov	r7, r9
 8014386:	f04f 0800 	mov.w	r8, #0
 801438a:	f8a4 8016 	strh.w	r8, [r4, #22]
 801438e:	f8a4 8018 	strh.w	r8, [r4, #24]
 8014392:	f8cd 8004 	str.w	r8, [sp, #4]
 8014396:	2300      	movs	r3, #0
 8014398:	9303      	str	r3, [sp, #12]
 801439a:	8823      	ldrh	r3, [r4, #0]
 801439c:	2b20      	cmp	r3, #32
 801439e:	d033      	beq.n	8014408 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xe2>
 80143a0:	f242 010b 	movw	r1, #8203	; 0x200b
 80143a4:	1a5a      	subs	r2, r3, r1
 80143a6:	f1d2 0a00 	rsbs	sl, r2, #0
 80143aa:	eb4a 0a02 	adc.w	sl, sl, r2
 80143ae:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 80143b2:	4293      	cmp	r3, r2
 80143b4:	d008      	beq.n	80143c8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 80143b6:	428b      	cmp	r3, r1
 80143b8:	9a01      	ldr	r2, [sp, #4]
 80143ba:	bf0e      	itee	eq
 80143bc:	f04f 0a01 	moveq.w	sl, #1
 80143c0:	461a      	movne	r2, r3
 80143c2:	f04f 0a00 	movne.w	sl, #0
 80143c6:	9201      	str	r2, [sp, #4]
 80143c8:	ab03      	add	r3, sp, #12
 80143ca:	68e2      	ldr	r2, [r4, #12]
 80143cc:	7a21      	ldrb	r1, [r4, #8]
 80143ce:	6860      	ldr	r0, [r4, #4]
 80143d0:	f002 fd5e 	bl	8016e90 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80143d4:	8020      	strh	r0, [r4, #0]
 80143d6:	b9d8      	cbnz	r0, 8014410 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xea>
 80143d8:	8ba2      	ldrh	r2, [r4, #28]
 80143da:	2300      	movs	r3, #0
 80143dc:	4611      	mov	r1, r2
 80143de:	4620      	mov	r0, r4
 80143e0:	f7ff ff91 	bl	8014306 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 80143e4:	e06e      	b.n	80144c4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 80143e6:	2500      	movs	r5, #0
 80143e8:	2701      	movs	r7, #1
 80143ea:	46a9      	mov	r9, r5
 80143ec:	462e      	mov	r6, r5
 80143ee:	e7ca      	b.n	8014386 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 80143f0:	42b7      	cmp	r7, r6
 80143f2:	f04f 0500 	mov.w	r5, #0
 80143f6:	bfb4      	ite	lt
 80143f8:	2700      	movlt	r7, #0
 80143fa:	2701      	movge	r7, #1
 80143fc:	462e      	mov	r6, r5
 80143fe:	e7c2      	b.n	8014386 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8014400:	2500      	movs	r5, #0
 8014402:	2601      	movs	r6, #1
 8014404:	46a9      	mov	r9, r5
 8014406:	e7ad      	b.n	8014364 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 8014408:	9301      	str	r3, [sp, #4]
 801440a:	f04f 0a01 	mov.w	sl, #1
 801440e:	e7db      	b.n	80143c8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 8014410:	8b63      	ldrh	r3, [r4, #26]
 8014412:	280a      	cmp	r0, #10
 8014414:	f103 0301 	add.w	r3, r3, #1
 8014418:	8363      	strh	r3, [r4, #26]
 801441a:	d0dd      	beq.n	80143d8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb2>
 801441c:	9a03      	ldr	r2, [sp, #12]
 801441e:	bb62      	cbnz	r2, 801447a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x154>
 8014420:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8014424:	4298      	cmp	r0, r3
 8014426:	d003      	beq.n	8014430 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 8014428:	f242 030b 	movw	r3, #8203	; 0x200b
 801442c:	4298      	cmp	r0, r3
 801442e:	d1b2      	bne.n	8014396 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8014430:	8823      	ldrh	r3, [r4, #0]
 8014432:	8ba1      	ldrh	r1, [r4, #28]
 8014434:	2b20      	cmp	r3, #32
 8014436:	d003      	beq.n	8014440 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x11a>
 8014438:	f242 000b 	movw	r0, #8203	; 0x200b
 801443c:	4283      	cmp	r3, r0
 801443e:	d131      	bne.n	80144a4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x17e>
 8014440:	f1ba 0f00 	cmp.w	sl, #0
 8014444:	bf0a      	itet	eq
 8014446:	4688      	moveq	r8, r1
 8014448:	4650      	movne	r0, sl
 801444a:	2001      	moveq	r0, #1
 801444c:	440a      	add	r2, r1
 801444e:	8b23      	ldrh	r3, [r4, #24]
 8014450:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8014454:	b292      	uxth	r2, r2
 8014456:	83a2      	strh	r2, [r4, #28]
 8014458:	4413      	add	r3, r2
 801445a:	f1b9 0f00 	cmp.w	r9, #0
 801445e:	d102      	bne.n	8014466 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x140>
 8014460:	2d00      	cmp	r5, #0
 8014462:	d042      	beq.n	80144ea <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1c4>
 8014464:	b300      	cbz	r0, 80144a8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x182>
 8014466:	8c21      	ldrh	r1, [r4, #32]
 8014468:	4419      	add	r1, r3
 801446a:	458c      	cmp	ip, r1
 801446c:	da37      	bge.n	80144de <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 801446e:	8ae1      	ldrh	r1, [r4, #22]
 8014470:	2900      	cmp	r1, #0
 8014472:	d034      	beq.n	80144de <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 8014474:	4563      	cmp	r3, ip
 8014476:	dd8e      	ble.n	8014396 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8014478:	e01d      	b.n	80144b6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x190>
 801447a:	8893      	ldrh	r3, [r2, #4]
 801447c:	9901      	ldr	r1, [sp, #4]
 801447e:	8023      	strh	r3, [r4, #0]
 8014480:	f892 b00d 	ldrb.w	fp, [r2, #13]
 8014484:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 8014488:	f40b 7080 	and.w	r0, fp, #256	; 0x100
 801448c:	f892 b00a 	ldrb.w	fp, [r2, #10]
 8014490:	ea4b 0b00 	orr.w	fp, fp, r0
 8014494:	68e0      	ldr	r0, [r4, #12]
 8014496:	6803      	ldr	r3, [r0, #0]
 8014498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801449a:	4798      	blx	r3
 801449c:	eb0b 0200 	add.w	r2, fp, r0
 80144a0:	b292      	uxth	r2, r2
 80144a2:	e7c5      	b.n	8014430 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 80144a4:	2000      	movs	r0, #0
 80144a6:	e7d1      	b.n	801444c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x126>
 80144a8:	4563      	cmp	r3, ip
 80144aa:	f77f af74 	ble.w	8014396 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80144ae:	8ae3      	ldrh	r3, [r4, #22]
 80144b0:	2b00      	cmp	r3, #0
 80144b2:	f43f af70 	beq.w	8014396 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80144b6:	2301      	movs	r3, #1
 80144b8:	8c22      	ldrh	r2, [r4, #32]
 80144ba:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 80144be:	8be3      	ldrh	r3, [r4, #30]
 80144c0:	4413      	add	r3, r2
 80144c2:	83e3      	strh	r3, [r4, #30]
 80144c4:	68e0      	ldr	r0, [r4, #12]
 80144c6:	6803      	ldr	r3, [r0, #0]
 80144c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80144ca:	4798      	blx	r3
 80144cc:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 80144d0:	4418      	add	r0, r3
 80144d2:	8a63      	ldrh	r3, [r4, #18]
 80144d4:	1a18      	subs	r0, r3, r0
 80144d6:	8260      	strh	r0, [r4, #18]
 80144d8:	b005      	add	sp, #20
 80144da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80144de:	2300      	movs	r3, #0
 80144e0:	4611      	mov	r1, r2
 80144e2:	4620      	mov	r0, r4
 80144e4:	f7ff ff0f 	bl	8014306 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 80144e8:	e755      	b.n	8014396 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80144ea:	4563      	cmp	r3, ip
 80144ec:	dd14      	ble.n	8014518 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1f2>
 80144ee:	b117      	cbz	r7, 80144f6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1d0>
 80144f0:	2301      	movs	r3, #1
 80144f2:	460a      	mov	r2, r1
 80144f4:	e772      	b.n	80143dc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb6>
 80144f6:	2e00      	cmp	r6, #0
 80144f8:	f43f af4d 	beq.w	8014396 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80144fc:	2800      	cmp	r0, #0
 80144fe:	f47f af4a 	bne.w	8014396 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8014502:	f1ba 0f00 	cmp.w	sl, #0
 8014506:	d002      	beq.n	801450e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1e8>
 8014508:	2301      	movs	r3, #1
 801450a:	4642      	mov	r2, r8
 801450c:	e767      	b.n	80143de <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb8>
 801450e:	8ae3      	ldrh	r3, [r4, #22]
 8014510:	2b00      	cmp	r3, #0
 8014512:	f43f af40 	beq.w	8014396 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8014516:	e7d5      	b.n	80144c4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 8014518:	2800      	cmp	r0, #0
 801451a:	f47f af3c 	bne.w	8014396 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801451e:	f1ba 0f00 	cmp.w	sl, #0
 8014522:	f43f af38 	beq.w	8014396 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8014526:	2301      	movs	r3, #1
 8014528:	4642      	mov	r2, r8
 801452a:	e7da      	b.n	80144e2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1bc>

0801452c <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 801452c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801452e:	4605      	mov	r5, r0
 8014530:	b08f      	sub	sp, #60	; 0x3c
 8014532:	4617      	mov	r7, r2
 8014534:	461c      	mov	r4, r3
 8014536:	460e      	mov	r6, r1
 8014538:	b1d1      	cbz	r1, 8014570 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 801453a:	681b      	ldr	r3, [r3, #0]
 801453c:	4620      	mov	r0, r4
 801453e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014540:	4798      	blx	r3
 8014542:	4240      	negs	r0, r0
 8014544:	9603      	str	r6, [sp, #12]
 8014546:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801454a:	b200      	sxth	r0, r0
 801454c:	9700      	str	r7, [sp, #0]
 801454e:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 8014552:	4629      	mov	r1, r5
 8014554:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8014558:	2401      	movs	r4, #1
 801455a:	a805      	add	r0, sp, #20
 801455c:	f7ff fcbe 	bl	8013edc <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 8014560:	a805      	add	r0, sp, #20
 8014562:	f7ff fee0 	bl	8014326 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8014566:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801456a:	b163      	cbz	r3, 8014586 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x5a>
 801456c:	3401      	adds	r4, #1
 801456e:	e7f7      	b.n	8014560 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 8014570:	2401      	movs	r4, #1
 8014572:	f002 fd59 	bl	8017028 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8014576:	280a      	cmp	r0, #10
 8014578:	4628      	mov	r0, r5
 801457a:	bf08      	it	eq
 801457c:	3401      	addeq	r4, #1
 801457e:	f002 fd53 	bl	8017028 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8014582:	2800      	cmp	r0, #0
 8014584:	d1f7      	bne.n	8014576 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 8014586:	b2a0      	uxth	r0, r4
 8014588:	b00f      	add	sp, #60	; 0x3c
 801458a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801458c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 801458c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014590:	b0e3      	sub	sp, #396	; 0x18c
 8014592:	461c      	mov	r4, r3
 8014594:	4683      	mov	fp, r0
 8014596:	4688      	mov	r8, r1
 8014598:	9b6c      	ldr	r3, [sp, #432]	; 0x1b0
 801459a:	2b00      	cmp	r3, #0
 801459c:	f000 8112 	beq.w	80147c4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 80145a0:	6823      	ldr	r3, [r4, #0]
 80145a2:	2b00      	cmp	r3, #0
 80145a4:	f000 810e 	beq.w	80147c4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 80145a8:	7ba3      	ldrb	r3, [r4, #14]
 80145aa:	2b00      	cmp	r3, #0
 80145ac:	f000 810a 	beq.w	80147c4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 80145b0:	ad0a      	add	r5, sp, #40	; 0x28
 80145b2:	6810      	ldr	r0, [r2, #0]
 80145b4:	6851      	ldr	r1, [r2, #4]
 80145b6:	462b      	mov	r3, r5
 80145b8:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 80145bc:	c303      	stmia	r3!, {r0, r1}
 80145be:	2100      	movs	r1, #0
 80145c0:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 80145c4:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 80145c8:	4628      	mov	r0, r5
 80145ca:	910c      	str	r1, [sp, #48]	; 0x30
 80145cc:	a90c      	add	r1, sp, #48	; 0x30
 80145ce:	79a2      	ldrb	r2, [r4, #6]
 80145d0:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 80145d4:	f7ff fd01 	bl	8013fda <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 80145d8:	a90c      	add	r1, sp, #48	; 0x30
 80145da:	79a2      	ldrb	r2, [r4, #6]
 80145dc:	4608      	mov	r0, r1
 80145de:	f7ff fcfc 	bl	8013fda <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 80145e2:	a817      	add	r0, sp, #92	; 0x5c
 80145e4:	f002 f8f4 	bl	80167d0 <_ZN8touchgfx12TextProviderC1Ev>
 80145e8:	6820      	ldr	r0, [r4, #0]
 80145ea:	6803      	ldr	r3, [r0, #0]
 80145ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80145ee:	4798      	blx	r3
 80145f0:	4606      	mov	r6, r0
 80145f2:	6820      	ldr	r0, [r4, #0]
 80145f4:	6803      	ldr	r3, [r0, #0]
 80145f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80145f8:	4798      	blx	r3
 80145fa:	4633      	mov	r3, r6
 80145fc:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
 80145fe:	996c      	ldr	r1, [sp, #432]	; 0x1b0
 8014600:	9000      	str	r0, [sp, #0]
 8014602:	a817      	add	r0, sp, #92	; 0x5c
 8014604:	f002 f93f 	bl	8016886 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8014608:	6820      	ldr	r0, [r4, #0]
 801460a:	f894 a004 	ldrb.w	sl, [r4, #4]
 801460e:	6803      	ldr	r3, [r0, #0]
 8014610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014612:	4798      	blx	r3
 8014614:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 8014618:	6823      	ldr	r3, [r4, #0]
 801461a:	4607      	mov	r7, r0
 801461c:	4406      	add	r6, r0
 801461e:	a830      	add	r0, sp, #192	; 0xc0
 8014620:	f893 9009 	ldrb.w	r9, [r3, #9]
 8014624:	f002 f8d4 	bl	80167d0 <_ZN8touchgfx12TextProviderC1Ev>
 8014628:	7c23      	ldrb	r3, [r4, #16]
 801462a:	b17b      	cbz	r3, 801464c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xc0>
 801462c:	6820      	ldr	r0, [r4, #0]
 801462e:	6803      	ldr	r3, [r0, #0]
 8014630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014632:	4798      	blx	r3
 8014634:	9009      	str	r0, [sp, #36]	; 0x24
 8014636:	6820      	ldr	r0, [r4, #0]
 8014638:	6802      	ldr	r2, [r0, #0]
 801463a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 801463c:	4790      	blx	r2
 801463e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014640:	9000      	str	r0, [sp, #0]
 8014642:	a830      	add	r0, sp, #192	; 0xc0
 8014644:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
 8014646:	996c      	ldr	r1, [sp, #432]	; 0x1b0
 8014648:	f002 f91d 	bl	8016886 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801464c:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8014650:	a80e      	add	r0, sp, #56	; 0x38
 8014652:	7be2      	ldrb	r2, [r4, #15]
 8014654:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 8014658:	1a8a      	subs	r2, r1, r2
 801465a:	7c21      	ldrb	r1, [r4, #16]
 801465c:	9103      	str	r1, [sp, #12]
 801465e:	b292      	uxth	r2, r2
 8014660:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8014664:	9102      	str	r1, [sp, #8]
 8014666:	6821      	ldr	r1, [r4, #0]
 8014668:	9101      	str	r1, [sp, #4]
 801466a:	7961      	ldrb	r1, [r4, #5]
 801466c:	9100      	str	r1, [sp, #0]
 801466e:	a930      	add	r1, sp, #192	; 0xc0
 8014670:	f7ff fc34 	bl	8013edc <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 8014674:	2e00      	cmp	r6, #0
 8014676:	dc5b      	bgt.n	8014730 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 8014678:	af17      	add	r7, sp, #92	; 0x5c
 801467a:	f04f 0900 	mov.w	r9, #0
 801467e:	7c23      	ldrb	r3, [r4, #16]
 8014680:	2b00      	cmp	r3, #0
 8014682:	f000 80b1 	beq.w	80147e8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 8014686:	a80e      	add	r0, sp, #56	; 0x38
 8014688:	f7ff fe4d 	bl	8014326 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 801468c:	f1ba 0f00 	cmp.w	sl, #0
 8014690:	f000 80a5 	beq.w	80147de <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 8014694:	7c23      	ldrb	r3, [r4, #16]
 8014696:	2264      	movs	r2, #100	; 0x64
 8014698:	4639      	mov	r1, r7
 801469a:	a849      	add	r0, sp, #292	; 0x124
 801469c:	9309      	str	r3, [sp, #36]	; 0x24
 801469e:	f00c fe68 	bl	8021372 <memcpy>
 80146a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80146a4:	2b00      	cmp	r3, #0
 80146a6:	f000 80a7 	beq.w	80147f8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 80146aa:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 80146ae:	7922      	ldrb	r2, [r4, #4]
 80146b0:	2a01      	cmp	r2, #1
 80146b2:	f040 808a 	bne.w	80147ca <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 80146b6:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	; 0x34
 80146ba:	1ac0      	subs	r0, r0, r3
 80146bc:	2302      	movs	r3, #2
 80146be:	fb90 f0f3 	sdiv	r0, r0, r3
 80146c2:	b200      	sxth	r0, r0
 80146c4:	7c23      	ldrb	r3, [r4, #16]
 80146c6:	2b00      	cmp	r3, #0
 80146c8:	f000 808b 	beq.w	80147e2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 80146cc:	f8bd 204e 	ldrh.w	r2, [sp, #78]	; 0x4e
 80146d0:	f89d 105a 	ldrb.w	r1, [sp, #90]	; 0x5a
 80146d4:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 80146d8:	e9cd 2105 	strd	r2, r1, [sp, #20]
 80146dc:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 80146e0:	2100      	movs	r1, #0
 80146e2:	4410      	add	r0, r2
 80146e4:	4642      	mov	r2, r8
 80146e6:	b200      	sxth	r0, r0
 80146e8:	e9cd 9703 	strd	r9, r7, [sp, #12]
 80146ec:	9000      	str	r0, [sp, #0]
 80146ee:	4658      	mov	r0, fp
 80146f0:	e9cd 5401 	strd	r5, r4, [sp, #4]
 80146f4:	f7ff fca2 	bl	801403c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 80146f8:	2800      	cmp	r0, #0
 80146fa:	d163      	bne.n	80147c4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 80146fc:	b2b2      	uxth	r2, r6
 80146fe:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8014702:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 8014706:	4413      	add	r3, r2
 8014708:	1a8a      	subs	r2, r1, r2
 801470a:	b21b      	sxth	r3, r3
 801470c:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
 8014710:	f89d 205a 	ldrb.w	r2, [sp, #90]	; 0x5a
 8014714:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8014718:	2a00      	cmp	r2, #0
 801471a:	d153      	bne.n	80147c4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801471c:	6822      	ldr	r2, [r4, #0]
 801471e:	8869      	ldrh	r1, [r5, #2]
 8014720:	7a12      	ldrb	r2, [r2, #8]
 8014722:	1a9b      	subs	r3, r3, r2
 8014724:	88ea      	ldrh	r2, [r5, #6]
 8014726:	440a      	add	r2, r1
 8014728:	b212      	sxth	r2, r2
 801472a:	4293      	cmp	r3, r2
 801472c:	dda7      	ble.n	801467e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf2>
 801472e:	e049      	b.n	80147c4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8014730:	7c23      	ldrb	r3, [r4, #16]
 8014732:	444f      	add	r7, r9
 8014734:	b1c3      	cbz	r3, 8014768 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>
 8014736:	f64f 79ff 	movw	r9, #65535	; 0xffff
 801473a:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801473e:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8014742:	443b      	add	r3, r7
 8014744:	4293      	cmp	r3, r2
 8014746:	da97      	bge.n	8014678 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 8014748:	a80e      	add	r0, sp, #56	; 0x38
 801474a:	f7ff fdec 	bl	8014326 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 801474e:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 8014752:	3b01      	subs	r3, #1
 8014754:	b29b      	uxth	r3, r3
 8014756:	454b      	cmp	r3, r9
 8014758:	9309      	str	r3, [sp, #36]	; 0x24
 801475a:	d021      	beq.n	80147a0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x214>
 801475c:	7961      	ldrb	r1, [r4, #5]
 801475e:	a817      	add	r0, sp, #92	; 0x5c
 8014760:	f7f0 fc90 	bl	8005084 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8014764:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014766:	e7f4      	b.n	8014752 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>
 8014768:	fa1f f986 	uxth.w	r9, r6
 801476c:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8014770:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8014774:	443b      	add	r3, r7
 8014776:	4293      	cmp	r3, r2
 8014778:	f6bf af7e 	bge.w	8014678 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 801477c:	a817      	add	r0, sp, #92	; 0x5c
 801477e:	f002 fc53 	bl	8017028 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8014782:	b1f8      	cbz	r0, 80147c4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8014784:	280a      	cmp	r0, #10
 8014786:	d1f1      	bne.n	801476c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 8014788:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 801478c:	444b      	add	r3, r9
 801478e:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8014792:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 8014796:	eba3 0309 	sub.w	r3, r3, r9
 801479a:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801479e:	e7e5      	b.n	801476c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 80147a0:	b2b3      	uxth	r3, r6
 80147a2:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 80147a6:	441a      	add	r2, r3
 80147a8:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 80147ac:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
 80147b0:	1ad3      	subs	r3, r2, r3
 80147b2:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 80147b6:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80147ba:	b11b      	cbz	r3, 80147c4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 80147bc:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
 80147c0:	2b00      	cmp	r3, #0
 80147c2:	d0ba      	beq.n	801473a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
 80147c4:	b063      	add	sp, #396	; 0x18c
 80147c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80147ca:	2a02      	cmp	r2, #2
 80147cc:	d105      	bne.n	80147da <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24e>
 80147ce:	7be2      	ldrb	r2, [r4, #15]
 80147d0:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 80147d4:	1a80      	subs	r0, r0, r2
 80147d6:	1ac0      	subs	r0, r0, r3
 80147d8:	e773      	b.n	80146c2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x136>
 80147da:	2000      	movs	r0, #0
 80147dc:	e772      	b.n	80146c4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 80147de:	7be0      	ldrb	r0, [r4, #15]
 80147e0:	e770      	b.n	80146c4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 80147e2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80147e6:	e773      	b.n	80146d0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
 80147e8:	f1ba 0f00 	cmp.w	sl, #0
 80147ec:	d0f7      	beq.n	80147de <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 80147ee:	2264      	movs	r2, #100	; 0x64
 80147f0:	4639      	mov	r1, r7
 80147f2:	a849      	add	r0, sp, #292	; 0x124
 80147f4:	f00c fdbd 	bl	8021372 <memcpy>
 80147f8:	2300      	movs	r3, #0
 80147fa:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80147fe:	6821      	ldr	r1, [r4, #0]
 8014800:	a849      	add	r0, sp, #292	; 0x124
 8014802:	f7ff fbae 	bl	8013f62 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8014806:	b203      	sxth	r3, r0
 8014808:	e751      	b.n	80146ae <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>

0801480a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801480a:	2b03      	cmp	r3, #3
 801480c:	d818      	bhi.n	8014840 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 801480e:	e8df f003 	tbb	[pc, r3]
 8014812:	0602      	.short	0x0602
 8014814:	130d      	.short	0x130d
 8014816:	f9b0 2000 	ldrsh.w	r2, [r0]
 801481a:	1850      	adds	r0, r2, r1
 801481c:	4770      	bx	lr
 801481e:	8803      	ldrh	r3, [r0, #0]
 8014820:	8880      	ldrh	r0, [r0, #4]
 8014822:	4418      	add	r0, r3
 8014824:	b200      	sxth	r0, r0
 8014826:	1a80      	subs	r0, r0, r2
 8014828:	3801      	subs	r0, #1
 801482a:	4770      	bx	lr
 801482c:	8803      	ldrh	r3, [r0, #0]
 801482e:	8880      	ldrh	r0, [r0, #4]
 8014830:	4418      	add	r0, r3
 8014832:	b200      	sxth	r0, r0
 8014834:	1a40      	subs	r0, r0, r1
 8014836:	e7f7      	b.n	8014828 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8014838:	f9b0 0000 	ldrsh.w	r0, [r0]
 801483c:	4410      	add	r0, r2
 801483e:	4770      	bx	lr
 8014840:	2000      	movs	r0, #0
 8014842:	4770      	bx	lr

08014844 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8014844:	2b03      	cmp	r3, #3
 8014846:	d817      	bhi.n	8014878 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 8014848:	e8df f003 	tbb	[pc, r3]
 801484c:	10090602 	.word	0x10090602
 8014850:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8014854:	1850      	adds	r0, r2, r1
 8014856:	4770      	bx	lr
 8014858:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801485c:	e7fa      	b.n	8014854 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 801485e:	8843      	ldrh	r3, [r0, #2]
 8014860:	88c0      	ldrh	r0, [r0, #6]
 8014862:	4418      	add	r0, r3
 8014864:	b200      	sxth	r0, r0
 8014866:	1a80      	subs	r0, r0, r2
 8014868:	3801      	subs	r0, #1
 801486a:	4770      	bx	lr
 801486c:	8843      	ldrh	r3, [r0, #2]
 801486e:	88c0      	ldrh	r0, [r0, #6]
 8014870:	4418      	add	r0, r3
 8014872:	b200      	sxth	r0, r0
 8014874:	1a40      	subs	r0, r0, r1
 8014876:	e7f7      	b.n	8014868 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8014878:	2000      	movs	r0, #0
 801487a:	4770      	bx	lr

0801487c <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 801487c:	4b01      	ldr	r3, [pc, #4]	; (8014884 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 801487e:	2200      	movs	r2, #0
 8014880:	601a      	str	r2, [r3, #0]
 8014882:	4770      	bx	lr
 8014884:	240069ac 	.word	0x240069ac

08014888 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8014888:	4603      	mov	r3, r0
 801488a:	b1c8      	cbz	r0, 80148c0 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 801488c:	0c02      	lsrs	r2, r0, #16
 801488e:	0412      	lsls	r2, r2, #16
 8014890:	b9a2      	cbnz	r2, 80148bc <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 8014892:	0403      	lsls	r3, r0, #16
 8014894:	2010      	movs	r0, #16
 8014896:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801489a:	bf04      	itt	eq
 801489c:	021b      	lsleq	r3, r3, #8
 801489e:	3008      	addeq	r0, #8
 80148a0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80148a4:	bf04      	itt	eq
 80148a6:	011b      	lsleq	r3, r3, #4
 80148a8:	3004      	addeq	r0, #4
 80148aa:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80148ae:	bf04      	itt	eq
 80148b0:	009b      	lsleq	r3, r3, #2
 80148b2:	3002      	addeq	r0, #2
 80148b4:	2b00      	cmp	r3, #0
 80148b6:	db04      	blt.n	80148c2 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 80148b8:	3001      	adds	r0, #1
 80148ba:	4770      	bx	lr
 80148bc:	2000      	movs	r0, #0
 80148be:	e7ea      	b.n	8014896 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 80148c0:	2020      	movs	r0, #32
 80148c2:	4770      	bx	lr

080148c4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 80148c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148c8:	b087      	sub	sp, #28
 80148ca:	460d      	mov	r5, r1
 80148cc:	4616      	mov	r6, r2
 80148ce:	4698      	mov	r8, r3
 80148d0:	4601      	mov	r1, r0
 80148d2:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 80148d6:	b120      	cbz	r0, 80148e2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 80148d8:	b11a      	cbz	r2, 80148e2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 80148da:	2d1f      	cmp	r5, #31
 80148dc:	d801      	bhi.n	80148e2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 80148de:	2b1f      	cmp	r3, #31
 80148e0:	d904      	bls.n	80148ec <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x28>
 80148e2:	2000      	movs	r0, #0
 80148e4:	6038      	str	r0, [r7, #0]
 80148e6:	b007      	add	sp, #28
 80148e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80148ec:	b97d      	cbnz	r5, 801490e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4a>
 80148ee:	b143      	cbz	r3, 8014902 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x3e>
 80148f0:	4602      	mov	r2, r0
 80148f2:	462b      	mov	r3, r5
 80148f4:	4641      	mov	r1, r8
 80148f6:	4630      	mov	r0, r6
 80148f8:	e9cd 4700 	strd	r4, r7, [sp]
 80148fc:	f7ff ffe2 	bl	80148c4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8014900:	e7f1      	b.n	80148e6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 8014902:	f04f 33ff 	mov.w	r3, #4294967295
 8014906:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801490a:	603b      	str	r3, [r7, #0]
 801490c:	e7eb      	b.n	80148e6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 801490e:	fa32 fa05 	lsrs.w	sl, r2, r5
 8014912:	d106      	bne.n	8014922 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x5e>
 8014914:	4346      	muls	r6, r0
 8014916:	fbb6 f0f4 	udiv	r0, r6, r4
 801491a:	fb04 6610 	mls	r6, r4, r0, r6
 801491e:	603e      	str	r6, [r7, #0]
 8014920:	e7e1      	b.n	80148e6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 8014922:	2201      	movs	r2, #1
 8014924:	fa00 fb05 	lsl.w	fp, r0, r5
 8014928:	40aa      	lsls	r2, r5
 801492a:	fbbb f9f4 	udiv	r9, fp, r4
 801492e:	3a01      	subs	r2, #1
 8014930:	fb0a f309 	mul.w	r3, sl, r9
 8014934:	fb04 b919 	mls	r9, r4, r9, fp
 8014938:	4016      	ands	r6, r2
 801493a:	9303      	str	r3, [sp, #12]
 801493c:	4630      	mov	r0, r6
 801493e:	f7ff ffa3 	bl	8014888 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8014942:	462b      	mov	r3, r5
 8014944:	460a      	mov	r2, r1
 8014946:	4601      	mov	r1, r0
 8014948:	4630      	mov	r0, r6
 801494a:	e9cd 4700 	strd	r4, r7, [sp]
 801494e:	f7ff ffb9 	bl	80148c4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8014952:	4606      	mov	r6, r0
 8014954:	4648      	mov	r0, r9
 8014956:	eb05 0108 	add.w	r1, r5, r8
 801495a:	f7ff ff95 	bl	8014888 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801495e:	ab05      	add	r3, sp, #20
 8014960:	464a      	mov	r2, r9
 8014962:	e9cd 4300 	strd	r4, r3, [sp]
 8014966:	4603      	mov	r3, r0
 8014968:	4650      	mov	r0, sl
 801496a:	f7ff ffab 	bl	80148c4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801496e:	6839      	ldr	r1, [r7, #0]
 8014970:	9a05      	ldr	r2, [sp, #20]
 8014972:	9b03      	ldr	r3, [sp, #12]
 8014974:	4411      	add	r1, r2
 8014976:	fbb1 f2f4 	udiv	r2, r1, r4
 801497a:	18d3      	adds	r3, r2, r3
 801497c:	fb04 1412 	mls	r4, r4, r2, r1
 8014980:	441e      	add	r6, r3
 8014982:	603c      	str	r4, [r7, #0]
 8014984:	4430      	add	r0, r6
 8014986:	e7ae      	b.n	80148e6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>

08014988 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 8014988:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801498c:	b085      	sub	sp, #20
 801498e:	f1b0 0900 	subs.w	r9, r0, #0
 8014992:	461d      	mov	r5, r3
 8014994:	4617      	mov	r7, r2
 8014996:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8014998:	bfbb      	ittet	lt
 801499a:	f1c9 0900 	rsblt	r9, r9, #0
 801499e:	f04f 36ff 	movlt.w	r6, #4294967295
 80149a2:	2601      	movge	r6, #1
 80149a4:	6823      	ldrlt	r3, [r4, #0]
 80149a6:	bfbc      	itt	lt
 80149a8:	425b      	neglt	r3, r3
 80149aa:	6023      	strlt	r3, [r4, #0]
 80149ac:	2a00      	cmp	r2, #0
 80149ae:	da04      	bge.n	80149ba <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 80149b0:	6823      	ldr	r3, [r4, #0]
 80149b2:	4257      	negs	r7, r2
 80149b4:	4276      	negs	r6, r6
 80149b6:	425b      	negs	r3, r3
 80149b8:	6023      	str	r3, [r4, #0]
 80149ba:	2d00      	cmp	r5, #0
 80149bc:	4638      	mov	r0, r7
 80149be:	bfba      	itte	lt
 80149c0:	426d      	neglt	r5, r5
 80149c2:	f04f 38ff 	movlt.w	r8, #4294967295
 80149c6:	f04f 0801 	movge.w	r8, #1
 80149ca:	f7ff ff5d 	bl	8014888 <_ZN8touchgfx16TouchCalibration4clzuEm>
 80149ce:	ab03      	add	r3, sp, #12
 80149d0:	463a      	mov	r2, r7
 80149d2:	e9cd 5300 	strd	r5, r3, [sp]
 80149d6:	4603      	mov	r3, r0
 80149d8:	4648      	mov	r0, r9
 80149da:	f7ff ff73 	bl	80148c4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80149de:	6823      	ldr	r3, [r4, #0]
 80149e0:	9a03      	ldr	r2, [sp, #12]
 80149e2:	4546      	cmp	r6, r8
 80149e4:	441a      	add	r2, r3
 80149e6:	fb92 f3f5 	sdiv	r3, r2, r5
 80149ea:	4418      	add	r0, r3
 80149ec:	fb05 2313 	mls	r3, r5, r3, r2
 80149f0:	bf18      	it	ne
 80149f2:	4240      	negne	r0, r0
 80149f4:	1c72      	adds	r2, r6, #1
 80149f6:	6023      	str	r3, [r4, #0]
 80149f8:	d105      	bne.n	8014a06 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 80149fa:	2b00      	cmp	r3, #0
 80149fc:	f1c3 0200 	rsb	r2, r3, #0
 8014a00:	db0b      	blt.n	8014a1a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 8014a02:	6022      	str	r2, [r4, #0]
 8014a04:	e006      	b.n	8014a14 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8014a06:	2e01      	cmp	r6, #1
 8014a08:	d104      	bne.n	8014a14 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8014a0a:	2b00      	cmp	r3, #0
 8014a0c:	da02      	bge.n	8014a14 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8014a0e:	442b      	add	r3, r5
 8014a10:	3801      	subs	r0, #1
 8014a12:	6023      	str	r3, [r4, #0]
 8014a14:	b005      	add	sp, #20
 8014a16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014a1a:	3801      	subs	r0, #1
 8014a1c:	1b52      	subs	r2, r2, r5
 8014a1e:	e7f0      	b.n	8014a02 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>

08014a20 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8014a20:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8014a24:	4c1c      	ldr	r4, [pc, #112]	; (8014a98 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 8014a26:	4605      	mov	r5, r0
 8014a28:	6807      	ldr	r7, [r0, #0]
 8014a2a:	69a3      	ldr	r3, [r4, #24]
 8014a2c:	b92b      	cbnz	r3, 8014a3a <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 8014a2e:	6840      	ldr	r0, [r0, #4]
 8014a30:	e9c5 7000 	strd	r7, r0, [r5]
 8014a34:	b004      	add	sp, #16
 8014a36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a3a:	f04f 0802 	mov.w	r8, #2
 8014a3e:	68a2      	ldr	r2, [r4, #8]
 8014a40:	ae04      	add	r6, sp, #16
 8014a42:	6820      	ldr	r0, [r4, #0]
 8014a44:	fb93 f1f8 	sdiv	r1, r3, r8
 8014a48:	440a      	add	r2, r1
 8014a4a:	69e1      	ldr	r1, [r4, #28]
 8014a4c:	f846 2d04 	str.w	r2, [r6, #-4]!
 8014a50:	463a      	mov	r2, r7
 8014a52:	9600      	str	r6, [sp, #0]
 8014a54:	f7ff ff98 	bl	8014988 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8014a58:	69a3      	ldr	r3, [r4, #24]
 8014a5a:	4607      	mov	r7, r0
 8014a5c:	686a      	ldr	r2, [r5, #4]
 8014a5e:	6a21      	ldr	r1, [r4, #32]
 8014a60:	9600      	str	r6, [sp, #0]
 8014a62:	6860      	ldr	r0, [r4, #4]
 8014a64:	f7ff ff90 	bl	8014988 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8014a68:	69a3      	ldr	r3, [r4, #24]
 8014a6a:	6962      	ldr	r2, [r4, #20]
 8014a6c:	4407      	add	r7, r0
 8014a6e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8014a70:	9600      	str	r6, [sp, #0]
 8014a72:	68e0      	ldr	r0, [r4, #12]
 8014a74:	fb93 f8f8 	sdiv	r8, r3, r8
 8014a78:	4442      	add	r2, r8
 8014a7a:	9203      	str	r2, [sp, #12]
 8014a7c:	682a      	ldr	r2, [r5, #0]
 8014a7e:	f7ff ff83 	bl	8014988 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8014a82:	4680      	mov	r8, r0
 8014a84:	9600      	str	r6, [sp, #0]
 8014a86:	69a3      	ldr	r3, [r4, #24]
 8014a88:	686a      	ldr	r2, [r5, #4]
 8014a8a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8014a8c:	6920      	ldr	r0, [r4, #16]
 8014a8e:	f7ff ff7b 	bl	8014988 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8014a92:	4440      	add	r0, r8
 8014a94:	e7cc      	b.n	8014a30 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 8014a96:	bf00      	nop
 8014a98:	240069b0 	.word	0x240069b0

08014a9c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8014a9c:	4b07      	ldr	r3, [pc, #28]	; (8014abc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 8014a9e:	781b      	ldrb	r3, [r3, #0]
 8014aa0:	2b01      	cmp	r3, #1
 8014aa2:	d109      	bne.n	8014ab8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 8014aa4:	f9b1 3000 	ldrsh.w	r3, [r1]
 8014aa8:	f9b0 2000 	ldrsh.w	r2, [r0]
 8014aac:	8003      	strh	r3, [r0, #0]
 8014aae:	4b04      	ldr	r3, [pc, #16]	; (8014ac0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8014ab0:	881b      	ldrh	r3, [r3, #0]
 8014ab2:	3b01      	subs	r3, #1
 8014ab4:	1a9b      	subs	r3, r3, r2
 8014ab6:	800b      	strh	r3, [r1, #0]
 8014ab8:	4770      	bx	lr
 8014aba:	bf00      	nop
 8014abc:	2400699c 	.word	0x2400699c
 8014ac0:	24006998 	.word	0x24006998

08014ac4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8014ac4:	4b07      	ldr	r3, [pc, #28]	; (8014ae4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8014ac6:	b510      	push	{r4, lr}
 8014ac8:	781b      	ldrb	r3, [r3, #0]
 8014aca:	2b01      	cmp	r3, #1
 8014acc:	d108      	bne.n	8014ae0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 8014ace:	4b06      	ldr	r3, [pc, #24]	; (8014ae8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8014ad0:	880c      	ldrh	r4, [r1, #0]
 8014ad2:	881b      	ldrh	r3, [r3, #0]
 8014ad4:	f9b0 2000 	ldrsh.w	r2, [r0]
 8014ad8:	3b01      	subs	r3, #1
 8014ada:	1b1b      	subs	r3, r3, r4
 8014adc:	8003      	strh	r3, [r0, #0]
 8014ade:	800a      	strh	r2, [r1, #0]
 8014ae0:	bd10      	pop	{r4, pc}
 8014ae2:	bf00      	nop
 8014ae4:	2400699c 	.word	0x2400699c
 8014ae8:	24006998 	.word	0x24006998

08014aec <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8014aec:	4b0a      	ldr	r3, [pc, #40]	; (8014b18 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 8014aee:	b510      	push	{r4, lr}
 8014af0:	781b      	ldrb	r3, [r3, #0]
 8014af2:	2b01      	cmp	r3, #1
 8014af4:	d10e      	bne.n	8014b14 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 8014af6:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8014afa:	8843      	ldrh	r3, [r0, #2]
 8014afc:	f9b0 4000 	ldrsh.w	r4, [r0]
 8014b00:	18ca      	adds	r2, r1, r3
 8014b02:	4b06      	ldr	r3, [pc, #24]	; (8014b1c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8014b04:	8044      	strh	r4, [r0, #2]
 8014b06:	881b      	ldrh	r3, [r3, #0]
 8014b08:	1a9b      	subs	r3, r3, r2
 8014b0a:	8003      	strh	r3, [r0, #0]
 8014b0c:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8014b10:	8081      	strh	r1, [r0, #4]
 8014b12:	80c3      	strh	r3, [r0, #6]
 8014b14:	bd10      	pop	{r4, pc}
 8014b16:	bf00      	nop
 8014b18:	2400699c 	.word	0x2400699c
 8014b1c:	24006998 	.word	0x24006998

08014b20 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8014b20:	4b08      	ldr	r3, [pc, #32]	; (8014b44 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 8014b22:	781b      	ldrb	r3, [r3, #0]
 8014b24:	2b01      	cmp	r3, #1
 8014b26:	d10c      	bne.n	8014b42 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 8014b28:	8803      	ldrh	r3, [r0, #0]
 8014b2a:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8014b2e:	8842      	ldrh	r2, [r0, #2]
 8014b30:	8002      	strh	r2, [r0, #0]
 8014b32:	185a      	adds	r2, r3, r1
 8014b34:	4b04      	ldr	r3, [pc, #16]	; (8014b48 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 8014b36:	881b      	ldrh	r3, [r3, #0]
 8014b38:	1a9b      	subs	r3, r3, r2
 8014b3a:	8043      	strh	r3, [r0, #2]
 8014b3c:	88c3      	ldrh	r3, [r0, #6]
 8014b3e:	80c1      	strh	r1, [r0, #6]
 8014b40:	8083      	strh	r3, [r0, #4]
 8014b42:	4770      	bx	lr
 8014b44:	2400699c 	.word	0x2400699c
 8014b48:	24006998 	.word	0x24006998

08014b4c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8014b4c:	4b07      	ldr	r3, [pc, #28]	; (8014b6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8014b4e:	b510      	push	{r4, lr}
 8014b50:	781b      	ldrb	r3, [r3, #0]
 8014b52:	2b01      	cmp	r3, #1
 8014b54:	d108      	bne.n	8014b68 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8014b56:	f9b1 3000 	ldrsh.w	r3, [r1]
 8014b5a:	f9b0 4000 	ldrsh.w	r4, [r0]
 8014b5e:	8003      	strh	r3, [r0, #0]
 8014b60:	8893      	ldrh	r3, [r2, #4]
 8014b62:	3b01      	subs	r3, #1
 8014b64:	1b1b      	subs	r3, r3, r4
 8014b66:	800b      	strh	r3, [r1, #0]
 8014b68:	bd10      	pop	{r4, pc}
 8014b6a:	bf00      	nop
 8014b6c:	2400699c 	.word	0x2400699c

08014b70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8014b70:	4b0a      	ldr	r3, [pc, #40]	; (8014b9c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8014b72:	460a      	mov	r2, r1
 8014b74:	b510      	push	{r4, lr}
 8014b76:	781b      	ldrb	r3, [r3, #0]
 8014b78:	2b01      	cmp	r3, #1
 8014b7a:	d10d      	bne.n	8014b98 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8014b7c:	8881      	ldrh	r1, [r0, #4]
 8014b7e:	8803      	ldrh	r3, [r0, #0]
 8014b80:	440b      	add	r3, r1
 8014b82:	4601      	mov	r1, r0
 8014b84:	3b01      	subs	r3, #1
 8014b86:	f821 3b02 	strh.w	r3, [r1], #2
 8014b8a:	f7ff ffdf 	bl	8014b4c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8014b8e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8014b92:	88c2      	ldrh	r2, [r0, #6]
 8014b94:	80c3      	strh	r3, [r0, #6]
 8014b96:	8082      	strh	r2, [r0, #4]
 8014b98:	bd10      	pop	{r4, pc}
 8014b9a:	bf00      	nop
 8014b9c:	2400699c 	.word	0x2400699c

08014ba0 <_ZN8touchgfx11Application13requestRedrawEv>:
 8014ba0:	4b06      	ldr	r3, [pc, #24]	; (8014bbc <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 8014ba2:	2100      	movs	r1, #0
 8014ba4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014ba8:	4b05      	ldr	r3, [pc, #20]	; (8014bc0 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 8014baa:	f8c0 1130 	str.w	r1, [r0, #304]	; 0x130
 8014bae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014bb2:	f8a0 2134 	strh.w	r2, [r0, #308]	; 0x134
 8014bb6:	f8a0 3136 	strh.w	r3, [r0, #310]	; 0x136
 8014bba:	4770      	bx	lr
 8014bbc:	24006998 	.word	0x24006998
 8014bc0:	2400699a 	.word	0x2400699a

08014bc4 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8014bc4:	4b03      	ldr	r3, [pc, #12]	; (8014bd4 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 8014bc6:	6818      	ldr	r0, [r3, #0]
 8014bc8:	b110      	cbz	r0, 8014bd0 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 8014bca:	6803      	ldr	r3, [r0, #0]
 8014bcc:	699b      	ldr	r3, [r3, #24]
 8014bce:	4718      	bx	r3
 8014bd0:	4770      	bx	lr
 8014bd2:	bf00      	nop
 8014bd4:	240069e0 	.word	0x240069e0

08014bd8 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8014bd8:	4770      	bx	lr
	...

08014bdc <_ZN8touchgfx11Application4drawEv>:
 8014bdc:	4b09      	ldr	r3, [pc, #36]	; (8014c04 <_ZN8touchgfx11Application4drawEv+0x28>)
 8014bde:	b507      	push	{r0, r1, r2, lr}
 8014be0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014be4:	2100      	movs	r1, #0
 8014be6:	4b08      	ldr	r3, [pc, #32]	; (8014c08 <_ZN8touchgfx11Application4drawEv+0x2c>)
 8014be8:	9100      	str	r1, [sp, #0]
 8014bea:	4669      	mov	r1, sp
 8014bec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014bf0:	f8ad 2004 	strh.w	r2, [sp, #4]
 8014bf4:	f8ad 3006 	strh.w	r3, [sp, #6]
 8014bf8:	6803      	ldr	r3, [r0, #0]
 8014bfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014bfc:	4798      	blx	r3
 8014bfe:	b003      	add	sp, #12
 8014c00:	f85d fb04 	ldr.w	pc, [sp], #4
 8014c04:	24006998 	.word	0x24006998
 8014c08:	2400699a 	.word	0x2400699a

08014c0c <_ZN8touchgfx11Application10invalidateEv>:
 8014c0c:	4b09      	ldr	r3, [pc, #36]	; (8014c34 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 8014c0e:	b082      	sub	sp, #8
 8014c10:	2100      	movs	r1, #0
 8014c12:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014c16:	4b08      	ldr	r3, [pc, #32]	; (8014c38 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 8014c18:	f8ad 2004 	strh.w	r2, [sp, #4]
 8014c1c:	aa02      	add	r2, sp, #8
 8014c1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014c22:	9100      	str	r1, [sp, #0]
 8014c24:	f8ad 3006 	strh.w	r3, [sp, #6]
 8014c28:	6803      	ldr	r3, [r0, #0]
 8014c2a:	e912 0006 	ldmdb	r2, {r1, r2}
 8014c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014c30:	b002      	add	sp, #8
 8014c32:	4718      	bx	r3
 8014c34:	24006998 	.word	0x24006998
 8014c38:	2400699a 	.word	0x2400699a

08014c3c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8014c3c:	4b03      	ldr	r3, [pc, #12]	; (8014c4c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8014c3e:	6818      	ldr	r0, [r3, #0]
 8014c40:	b110      	cbz	r0, 8014c48 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 8014c42:	6803      	ldr	r3, [r0, #0]
 8014c44:	69db      	ldr	r3, [r3, #28]
 8014c46:	4718      	bx	r3
 8014c48:	4770      	bx	lr
 8014c4a:	bf00      	nop
 8014c4c:	240069e0 	.word	0x240069e0

08014c50 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8014c50:	4b03      	ldr	r3, [pc, #12]	; (8014c60 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 8014c52:	6818      	ldr	r0, [r3, #0]
 8014c54:	b110      	cbz	r0, 8014c5c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 8014c56:	6803      	ldr	r3, [r0, #0]
 8014c58:	6a1b      	ldr	r3, [r3, #32]
 8014c5a:	4718      	bx	r3
 8014c5c:	4770      	bx	lr
 8014c5e:	bf00      	nop
 8014c60:	240069e0 	.word	0x240069e0

08014c64 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 8014c64:	2300      	movs	r3, #0
 8014c66:	f8a0 30ec 	strh.w	r3, [r0, #236]	; 0xec
 8014c6a:	4770      	bx	lr

08014c6c <_ZN8touchgfx11Application14handleKeyEventEh>:
 8014c6c:	4b03      	ldr	r3, [pc, #12]	; (8014c7c <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 8014c6e:	6818      	ldr	r0, [r3, #0]
 8014c70:	b110      	cbz	r0, 8014c78 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 8014c72:	6803      	ldr	r3, [r0, #0]
 8014c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014c76:	4718      	bx	r3
 8014c78:	4770      	bx	lr
 8014c7a:	bf00      	nop
 8014c7c:	240069e0 	.word	0x240069e0

08014c80 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8014c80:	b510      	push	{r4, lr}
 8014c82:	f9b1 4000 	ldrsh.w	r4, [r1]
 8014c86:	888a      	ldrh	r2, [r1, #4]
 8014c88:	f9b0 3000 	ldrsh.w	r3, [r0]
 8014c8c:	4422      	add	r2, r4
 8014c8e:	b212      	sxth	r2, r2
 8014c90:	4293      	cmp	r3, r2
 8014c92:	da15      	bge.n	8014cc0 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8014c94:	8882      	ldrh	r2, [r0, #4]
 8014c96:	4413      	add	r3, r2
 8014c98:	b21b      	sxth	r3, r3
 8014c9a:	429c      	cmp	r4, r3
 8014c9c:	da10      	bge.n	8014cc0 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8014c9e:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8014ca2:	88c9      	ldrh	r1, [r1, #6]
 8014ca4:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8014ca8:	4419      	add	r1, r3
 8014caa:	b209      	sxth	r1, r1
 8014cac:	428a      	cmp	r2, r1
 8014cae:	da07      	bge.n	8014cc0 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8014cb0:	88c0      	ldrh	r0, [r0, #6]
 8014cb2:	4410      	add	r0, r2
 8014cb4:	b200      	sxth	r0, r0
 8014cb6:	4283      	cmp	r3, r0
 8014cb8:	bfac      	ite	ge
 8014cba:	2000      	movge	r0, #0
 8014cbc:	2001      	movlt	r0, #1
 8014cbe:	bd10      	pop	{r4, pc}
 8014cc0:	2000      	movs	r0, #0
 8014cc2:	e7fc      	b.n	8014cbe <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

08014cc4 <_ZN8touchgfx4Rect10restrictToEss>:
 8014cc4:	f9b0 3000 	ldrsh.w	r3, [r0]
 8014cc8:	2b00      	cmp	r3, #0
 8014cca:	b510      	push	{r4, lr}
 8014ccc:	da04      	bge.n	8014cd8 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 8014cce:	8884      	ldrh	r4, [r0, #4]
 8014cd0:	4423      	add	r3, r4
 8014cd2:	8083      	strh	r3, [r0, #4]
 8014cd4:	2300      	movs	r3, #0
 8014cd6:	8003      	strh	r3, [r0, #0]
 8014cd8:	f9b0 4000 	ldrsh.w	r4, [r0]
 8014cdc:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8014ce0:	1b09      	subs	r1, r1, r4
 8014ce2:	428b      	cmp	r3, r1
 8014ce4:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8014ce8:	bfc8      	it	gt
 8014cea:	8081      	strhgt	r1, [r0, #4]
 8014cec:	2b00      	cmp	r3, #0
 8014cee:	da04      	bge.n	8014cfa <_ZN8touchgfx4Rect10restrictToEss+0x36>
 8014cf0:	88c1      	ldrh	r1, [r0, #6]
 8014cf2:	440b      	add	r3, r1
 8014cf4:	80c3      	strh	r3, [r0, #6]
 8014cf6:	2300      	movs	r3, #0
 8014cf8:	8043      	strh	r3, [r0, #2]
 8014cfa:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8014cfe:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8014d02:	1a52      	subs	r2, r2, r1
 8014d04:	4293      	cmp	r3, r2
 8014d06:	bfc8      	it	gt
 8014d08:	80c2      	strhgt	r2, [r0, #6]
 8014d0a:	bd10      	pop	{r4, pc}

08014d0c <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8014d0c:	4b10      	ldr	r3, [pc, #64]	; (8014d50 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 8014d0e:	b510      	push	{r4, lr}
 8014d10:	460c      	mov	r4, r1
 8014d12:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014d16:	4b0f      	ldr	r3, [pc, #60]	; (8014d54 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 8014d18:	4620      	mov	r0, r4
 8014d1a:	f9b3 1000 	ldrsh.w	r1, [r3]
 8014d1e:	f7ff ffd1 	bl	8014cc4 <_ZN8touchgfx4Rect10restrictToEss>
 8014d22:	4b0d      	ldr	r3, [pc, #52]	; (8014d58 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 8014d24:	6818      	ldr	r0, [r3, #0]
 8014d26:	b190      	cbz	r0, 8014d4e <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 8014d28:	6803      	ldr	r3, [r0, #0]
 8014d2a:	4621      	mov	r1, r4
 8014d2c:	689b      	ldr	r3, [r3, #8]
 8014d2e:	4798      	blx	r3
 8014d30:	4b0a      	ldr	r3, [pc, #40]	; (8014d5c <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 8014d32:	6818      	ldr	r0, [r3, #0]
 8014d34:	b118      	cbz	r0, 8014d3e <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 8014d36:	6803      	ldr	r3, [r0, #0]
 8014d38:	4621      	mov	r1, r4
 8014d3a:	689b      	ldr	r3, [r3, #8]
 8014d3c:	4798      	blx	r3
 8014d3e:	4b08      	ldr	r3, [pc, #32]	; (8014d60 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 8014d40:	4621      	mov	r1, r4
 8014d42:	6818      	ldr	r0, [r3, #0]
 8014d44:	6803      	ldr	r3, [r0, #0]
 8014d46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014d4a:	69db      	ldr	r3, [r3, #28]
 8014d4c:	4718      	bx	r3
 8014d4e:	bd10      	pop	{r4, pc}
 8014d50:	2400699a 	.word	0x2400699a
 8014d54:	24006998 	.word	0x24006998
 8014d58:	240069e0 	.word	0x240069e0
 8014d5c:	240069dc 	.word	0x240069dc
 8014d60:	240069a4 	.word	0x240069a4

08014d64 <_ZNK8touchgfx4Rect8includesERKS0_>:
 8014d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d66:	4606      	mov	r6, r0
 8014d68:	4608      	mov	r0, r1
 8014d6a:	460f      	mov	r7, r1
 8014d6c:	f7fc ffc7 	bl	8011cfe <_ZNK8touchgfx4Rect7isEmptyEv>
 8014d70:	b9e8      	cbnz	r0, 8014dae <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8014d72:	f9b7 5000 	ldrsh.w	r5, [r7]
 8014d76:	f9b6 4000 	ldrsh.w	r4, [r6]
 8014d7a:	42a5      	cmp	r5, r4
 8014d7c:	db17      	blt.n	8014dae <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8014d7e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8014d82:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8014d86:	429a      	cmp	r2, r3
 8014d88:	db11      	blt.n	8014dae <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8014d8a:	88b9      	ldrh	r1, [r7, #4]
 8014d8c:	440d      	add	r5, r1
 8014d8e:	88b1      	ldrh	r1, [r6, #4]
 8014d90:	440c      	add	r4, r1
 8014d92:	b22d      	sxth	r5, r5
 8014d94:	b224      	sxth	r4, r4
 8014d96:	42a5      	cmp	r5, r4
 8014d98:	dc09      	bgt.n	8014dae <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8014d9a:	88f8      	ldrh	r0, [r7, #6]
 8014d9c:	4410      	add	r0, r2
 8014d9e:	88f2      	ldrh	r2, [r6, #6]
 8014da0:	4413      	add	r3, r2
 8014da2:	b200      	sxth	r0, r0
 8014da4:	b21b      	sxth	r3, r3
 8014da6:	4298      	cmp	r0, r3
 8014da8:	bfcc      	ite	gt
 8014daa:	2000      	movgt	r0, #0
 8014dac:	2001      	movle	r0, #1
 8014dae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014db0 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8014db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014db2:	4604      	mov	r4, r0
 8014db4:	4608      	mov	r0, r1
 8014db6:	460d      	mov	r5, r1
 8014db8:	f7fc ffa1 	bl	8011cfe <_ZNK8touchgfx4Rect7isEmptyEv>
 8014dbc:	b978      	cbnz	r0, 8014dde <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 8014dbe:	4620      	mov	r0, r4
 8014dc0:	f7fc ff9d 	bl	8011cfe <_ZNK8touchgfx4Rect7isEmptyEv>
 8014dc4:	f9b5 6000 	ldrsh.w	r6, [r5]
 8014dc8:	b150      	cbz	r0, 8014de0 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 8014dca:	8026      	strh	r6, [r4, #0]
 8014dcc:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8014dd0:	8063      	strh	r3, [r4, #2]
 8014dd2:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8014dd6:	80a3      	strh	r3, [r4, #4]
 8014dd8:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8014ddc:	80e3      	strh	r3, [r4, #6]
 8014dde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014de0:	f9b4 1000 	ldrsh.w	r1, [r4]
 8014de4:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8014de8:	42b1      	cmp	r1, r6
 8014dea:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8014dee:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 8014df2:	460f      	mov	r7, r1
 8014df4:	88ed      	ldrh	r5, [r5, #6]
 8014df6:	bfa8      	it	ge
 8014df8:	4637      	movge	r7, r6
 8014dfa:	4293      	cmp	r3, r2
 8014dfc:	4618      	mov	r0, r3
 8014dfe:	4466      	add	r6, ip
 8014e00:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8014e04:	bfa8      	it	ge
 8014e06:	4610      	movge	r0, r2
 8014e08:	442a      	add	r2, r5
 8014e0a:	88e5      	ldrh	r5, [r4, #6]
 8014e0c:	4461      	add	r1, ip
 8014e0e:	b236      	sxth	r6, r6
 8014e10:	8027      	strh	r7, [r4, #0]
 8014e12:	442b      	add	r3, r5
 8014e14:	b209      	sxth	r1, r1
 8014e16:	b212      	sxth	r2, r2
 8014e18:	8060      	strh	r0, [r4, #2]
 8014e1a:	b21b      	sxth	r3, r3
 8014e1c:	428e      	cmp	r6, r1
 8014e1e:	bfac      	ite	ge
 8014e20:	ebc7 0106 	rsbge	r1, r7, r6
 8014e24:	ebc7 0101 	rsblt	r1, r7, r1
 8014e28:	429a      	cmp	r2, r3
 8014e2a:	bfac      	ite	ge
 8014e2c:	ebc0 0202 	rsbge	r2, r0, r2
 8014e30:	ebc0 0203 	rsblt	r2, r0, r3
 8014e34:	80a1      	strh	r1, [r4, #4]
 8014e36:	80e2      	strh	r2, [r4, #6]
 8014e38:	e7d1      	b.n	8014dde <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

08014e3c <_ZN8touchgfx11Application11getInstanceEv>:
 8014e3c:	4b01      	ldr	r3, [pc, #4]	; (8014e44 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8014e3e:	6818      	ldr	r0, [r3, #0]
 8014e40:	4770      	bx	lr
 8014e42:	bf00      	nop
 8014e44:	240069f0 	.word	0x240069f0

08014e48 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 8014e48:	2300      	movs	r3, #0
 8014e4a:	b510      	push	{r4, lr}
 8014e4c:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
 8014e50:	4604      	mov	r4, r0
 8014e52:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 8014e56:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 8014e5a:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 8014e5e:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	; 0xa6
 8014e62:	429a      	cmp	r2, r3
 8014e64:	d90e      	bls.n	8014e84 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 8014e66:	18e2      	adds	r2, r4, r3
 8014e68:	f892 2084 	ldrb.w	r2, [r2, #132]	; 0x84
 8014e6c:	b122      	cbz	r2, 8014e78 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 8014e6e:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8014e72:	6803      	ldr	r3, [r0, #0]
 8014e74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014e76:	4798      	blx	r3
 8014e78:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 8014e7c:	3301      	adds	r3, #1
 8014e7e:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 8014e82:	e7ea      	b.n	8014e5a <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 8014e84:	bd10      	pop	{r4, pc}

08014e86 <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 8014e86:	2300      	movs	r3, #0
 8014e88:	f100 0284 	add.w	r2, r0, #132	; 0x84
 8014e8c:	30a4      	adds	r0, #164	; 0xa4
 8014e8e:	f820 3c24 	strh.w	r3, [r0, #-36]
 8014e92:	f802 3b01 	strb.w	r3, [r2], #1
 8014e96:	4282      	cmp	r2, r0
 8014e98:	d1fb      	bne.n	8014e92 <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 8014e9a:	4770      	bx	lr

08014e9c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8014e9c:	b570      	push	{r4, r5, r6, lr}
 8014e9e:	4c0b      	ldr	r4, [pc, #44]	; (8014ecc <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 8014ea0:	4605      	mov	r5, r0
 8014ea2:	460e      	mov	r6, r1
 8014ea4:	6820      	ldr	r0, [r4, #0]
 8014ea6:	b110      	cbz	r0, 8014eae <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 8014ea8:	6803      	ldr	r3, [r0, #0]
 8014eaa:	695b      	ldr	r3, [r3, #20]
 8014eac:	4798      	blx	r3
 8014eae:	1d28      	adds	r0, r5, #4
 8014eb0:	f7ff ffe9 	bl	8014e86 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8014eb4:	6026      	str	r6, [r4, #0]
 8014eb6:	6833      	ldr	r3, [r6, #0]
 8014eb8:	4630      	mov	r0, r6
 8014eba:	68db      	ldr	r3, [r3, #12]
 8014ebc:	4798      	blx	r3
 8014ebe:	682b      	ldr	r3, [r5, #0]
 8014ec0:	4628      	mov	r0, r5
 8014ec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014ec4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014ec8:	4718      	bx	r3
 8014eca:	bf00      	nop
 8014ecc:	240069e0 	.word	0x240069e0

08014ed0 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 8014ed0:	2300      	movs	r3, #0
 8014ed2:	f8b0 c080 	ldrh.w	ip, [r0, #128]	; 0x80
 8014ed6:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	; 0xa4
 8014eda:	461a      	mov	r2, r3
 8014edc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014ede:	461c      	mov	r4, r3
 8014ee0:	461d      	mov	r5, r3
 8014ee2:	459c      	cmp	ip, r3
 8014ee4:	dd1a      	ble.n	8014f1c <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 8014ee6:	18c6      	adds	r6, r0, r3
 8014ee8:	f896 6084 	ldrb.w	r6, [r6, #132]	; 0x84
 8014eec:	b16e      	cbz	r6, 8014f0a <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 8014eee:	429a      	cmp	r2, r3
 8014ef0:	d008      	beq.n	8014f04 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 8014ef2:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 8014ef6:	fa1f fe82 	uxth.w	lr, r2
 8014efa:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 8014efe:	1887      	adds	r7, r0, r2
 8014f00:	f887 6084 	strb.w	r6, [r7, #132]	; 0x84
 8014f04:	3201      	adds	r2, #1
 8014f06:	3301      	adds	r3, #1
 8014f08:	e7eb      	b.n	8014ee2 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 8014f0a:	4299      	cmp	r1, r3
 8014f0c:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	; 0xa6
 8014f10:	bfa8      	it	ge
 8014f12:	3501      	addge	r5, #1
 8014f14:	429e      	cmp	r6, r3
 8014f16:	bfc8      	it	gt
 8014f18:	3401      	addgt	r4, #1
 8014f1a:	e7f4      	b.n	8014f06 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 8014f1c:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
 8014f20:	1b49      	subs	r1, r1, r5
 8014f22:	1b1b      	subs	r3, r3, r4
 8014f24:	f8a0 10a4 	strh.w	r1, [r0, #164]	; 0xa4
 8014f28:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 8014f2c:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 8014f30:	4293      	cmp	r3, r2
 8014f32:	dd03      	ble.n	8014f3c <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 8014f34:	3b01      	subs	r3, #1
 8014f36:	f8a0 3080 	strh.w	r3, [r0, #128]	; 0x80
 8014f3a:	e7f7      	b.n	8014f2c <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 8014f3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08014f40 <_ZN8touchgfx11Application15handleTickEventEv>:
 8014f40:	b570      	push	{r4, r5, r6, lr}
 8014f42:	4d16      	ldr	r5, [pc, #88]	; (8014f9c <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 8014f44:	4604      	mov	r4, r0
 8014f46:	6828      	ldr	r0, [r5, #0]
 8014f48:	b140      	cbz	r0, 8014f5c <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8014f4a:	7a03      	ldrb	r3, [r0, #8]
 8014f4c:	b933      	cbnz	r3, 8014f5c <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8014f4e:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 8014f52:	6803      	ldr	r3, [r0, #0]
 8014f54:	689b      	ldr	r3, [r3, #8]
 8014f56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014f5a:	4718      	bx	r3
 8014f5c:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
 8014f60:	4e0f      	ldr	r6, [pc, #60]	; (8014fa0 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 8014f62:	b973      	cbnz	r3, 8014f82 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8014f64:	b168      	cbz	r0, 8014f82 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8014f66:	7a03      	ldrb	r3, [r0, #8]
 8014f68:	b15b      	cbz	r3, 8014f82 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8014f6a:	6830      	ldr	r0, [r6, #0]
 8014f6c:	b110      	cbz	r0, 8014f74 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 8014f6e:	6803      	ldr	r3, [r0, #0]
 8014f70:	691b      	ldr	r3, [r3, #16]
 8014f72:	4798      	blx	r3
 8014f74:	6828      	ldr	r0, [r5, #0]
 8014f76:	6803      	ldr	r3, [r0, #0]
 8014f78:	68db      	ldr	r3, [r3, #12]
 8014f7a:	4798      	blx	r3
 8014f7c:	2301      	movs	r3, #1
 8014f7e:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 8014f82:	3404      	adds	r4, #4
 8014f84:	4620      	mov	r0, r4
 8014f86:	f7ff ff5f 	bl	8014e48 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 8014f8a:	4620      	mov	r0, r4
 8014f8c:	f7ff ffa0 	bl	8014ed0 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 8014f90:	6830      	ldr	r0, [r6, #0]
 8014f92:	b110      	cbz	r0, 8014f9a <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 8014f94:	6803      	ldr	r3, [r0, #0]
 8014f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014f98:	e7dd      	b.n	8014f56 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 8014f9a:	bd70      	pop	{r4, r5, r6, pc}
 8014f9c:	240069e4 	.word	0x240069e4
 8014fa0:	240069e0 	.word	0x240069e0

08014fa4 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 8014fa4:	4603      	mov	r3, r0
 8014fa6:	f100 0140 	add.w	r1, r0, #64	; 0x40
 8014faa:	2200      	movs	r2, #0
 8014fac:	801a      	strh	r2, [r3, #0]
 8014fae:	3308      	adds	r3, #8
 8014fb0:	f823 2c06 	strh.w	r2, [r3, #-6]
 8014fb4:	f823 2c04 	strh.w	r2, [r3, #-4]
 8014fb8:	f823 2c02 	strh.w	r2, [r3, #-2]
 8014fbc:	428b      	cmp	r3, r1
 8014fbe:	d1f5      	bne.n	8014fac <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 8014fc0:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8014fc4:	4770      	bx	lr
	...

08014fc8 <_ZN8touchgfx11ApplicationC1Ev>:
 8014fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014fca:	4b1d      	ldr	r3, [pc, #116]	; (8015040 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 8014fcc:	4606      	mov	r6, r0
 8014fce:	4604      	mov	r4, r0
 8014fd0:	2500      	movs	r5, #0
 8014fd2:	f846 3b04 	str.w	r3, [r6], #4
 8014fd6:	22a8      	movs	r2, #168	; 0xa8
 8014fd8:	2100      	movs	r1, #0
 8014fda:	4630      	mov	r0, r6
 8014fdc:	f00c f8f9 	bl	80211d2 <memset>
 8014fe0:	f8a4 5084 	strh.w	r5, [r4, #132]	; 0x84
 8014fe4:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 8014fe8:	4f16      	ldr	r7, [pc, #88]	; (8015044 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 8014fea:	f7ff ffdb 	bl	8014fa4 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8014fee:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 8014ff2:	f7ff ffd7 	bl	8014fa4 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8014ff6:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 8014ffa:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 8014ffe:	f8a4 5134 	strh.w	r5, [r4, #308]	; 0x134
 8015002:	f8a4 5136 	strh.w	r5, [r4, #310]	; 0x136
 8015006:	f884 5138 	strb.w	r5, [r4, #312]	; 0x138
 801500a:	490f      	ldr	r1, [pc, #60]	; (8015048 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 801500c:	480f      	ldr	r0, [pc, #60]	; (801504c <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 801500e:	f00b fda3 	bl	8020b58 <CRC_Lock>
 8015012:	4b0f      	ldr	r3, [pc, #60]	; (8015050 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 8015014:	b158      	cbz	r0, 801502e <_ZN8touchgfx11ApplicationC1Ev+0x66>
 8015016:	801d      	strh	r5, [r3, #0]
 8015018:	2300      	movs	r3, #0
 801501a:	4a0e      	ldr	r2, [pc, #56]	; (8015054 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 801501c:	4630      	mov	r0, r6
 801501e:	6013      	str	r3, [r2, #0]
 8015020:	4a0d      	ldr	r2, [pc, #52]	; (8015058 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 8015022:	603b      	str	r3, [r7, #0]
 8015024:	6013      	str	r3, [r2, #0]
 8015026:	f7ff ff2e 	bl	8014e86 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 801502a:	4620      	mov	r0, r4
 801502c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801502e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8015032:	2002      	movs	r0, #2
 8015034:	801a      	strh	r2, [r3, #0]
 8015036:	6038      	str	r0, [r7, #0]
 8015038:	f001 fa50 	bl	80164dc <_ZN8touchgfx6Screen4drawEv>
 801503c:	e7ec      	b.n	8015018 <_ZN8touchgfx11ApplicationC1Ev+0x50>
 801503e:	bf00      	nop
 8015040:	0802341c 	.word	0x0802341c
 8015044:	240069e0 	.word	0x240069e0
 8015048:	b5e8b5cd 	.word	0xb5e8b5cd
 801504c:	f407a5c2 	.word	0xf407a5c2
 8015050:	24000050 	.word	0x24000050
 8015054:	240069f0 	.word	0x240069f0
 8015058:	240069e4 	.word	0x240069e4

0801505c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801505c:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8015060:	3b01      	subs	r3, #1
 8015062:	b29b      	uxth	r3, r3
 8015064:	428b      	cmp	r3, r1
 8015066:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 801506a:	b510      	push	{r4, lr}
 801506c:	d908      	bls.n	8015080 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 801506e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8015072:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 8015076:	681a      	ldr	r2, [r3, #0]
 8015078:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 801507c:	685a      	ldr	r2, [r3, #4]
 801507e:	6062      	str	r2, [r4, #4]
 8015080:	bd10      	pop	{r4, pc}
	...

08015084 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8015084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015088:	b08f      	sub	sp, #60	; 0x3c
 801508a:	4b8f      	ldr	r3, [pc, #572]	; (80152c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 801508c:	4683      	mov	fp, r0
 801508e:	ac0a      	add	r4, sp, #40	; 0x28
 8015090:	e884 0006 	stmia.w	r4, {r1, r2}
 8015094:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015098:	4620      	mov	r0, r4
 801509a:	4b8c      	ldr	r3, [pc, #560]	; (80152cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 801509c:	f9b3 1000 	ldrsh.w	r1, [r3]
 80150a0:	f7ff fe10 	bl	8014cc4 <_ZN8touchgfx4Rect10restrictToEss>
 80150a4:	4620      	mov	r0, r4
 80150a6:	f7fc fe2a 	bl	8011cfe <_ZNK8touchgfx4Rect7isEmptyEv>
 80150aa:	2800      	cmp	r0, #0
 80150ac:	d16a      	bne.n	8015184 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 80150ae:	9403      	str	r4, [sp, #12]
 80150b0:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	; 0xec
 80150b4:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 80150b8:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 80150bc:	9301      	str	r3, [sp, #4]
 80150be:	35a4      	adds	r5, #164	; 0xa4
 80150c0:	b15c      	cbz	r4, 80150da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 80150c2:	4629      	mov	r1, r5
 80150c4:	9803      	ldr	r0, [sp, #12]
 80150c6:	f7ff fe4d 	bl	8014d64 <_ZNK8touchgfx4Rect8includesERKS0_>
 80150ca:	3c01      	subs	r4, #1
 80150cc:	b118      	cbz	r0, 80150d6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 80150ce:	b2a1      	uxth	r1, r4
 80150d0:	9801      	ldr	r0, [sp, #4]
 80150d2:	f7ff ffc3 	bl	801505c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80150d6:	3d08      	subs	r5, #8
 80150d8:	e7f2      	b.n	80150c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 80150da:	f8bb a0ec 	ldrh.w	sl, [fp, #236]	; 0xec
 80150de:	f10a 33ff 	add.w	r3, sl, #4294967295
 80150e2:	f8cd a010 	str.w	sl, [sp, #16]
 80150e6:	9302      	str	r3, [sp, #8]
 80150e8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80150ec:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 80150f0:	9306      	str	r3, [sp, #24]
 80150f2:	445c      	add	r4, fp
 80150f4:	2500      	movs	r5, #0
 80150f6:	4626      	mov	r6, r4
 80150f8:	f8cd a014 	str.w	sl, [sp, #20]
 80150fc:	462f      	mov	r7, r5
 80150fe:	9b05      	ldr	r3, [sp, #20]
 8015100:	2b00      	cmp	r3, #0
 8015102:	d073      	beq.n	80151ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8015104:	9903      	ldr	r1, [sp, #12]
 8015106:	4630      	mov	r0, r6
 8015108:	f7ff fdba 	bl	8014c80 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801510c:	b350      	cbz	r0, 8015164 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 801510e:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 8015112:	f9b6 c000 	ldrsh.w	ip, [r6]
 8015116:	f9bd 802a 	ldrsh.w	r8, [sp, #42]	; 0x2a
 801511a:	45e6      	cmp	lr, ip
 801511c:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 8015120:	db33      	blt.n	801518a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8015122:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8015126:	88b3      	ldrh	r3, [r6, #4]
 8015128:	4472      	add	r2, lr
 801512a:	4463      	add	r3, ip
 801512c:	b212      	sxth	r2, r2
 801512e:	b21b      	sxth	r3, r3
 8015130:	429a      	cmp	r2, r3
 8015132:	dc2a      	bgt.n	801518a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8015134:	fa1f f289 	uxth.w	r2, r9
 8015138:	88f3      	ldrh	r3, [r6, #6]
 801513a:	45c8      	cmp	r8, r9
 801513c:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 8015140:	4413      	add	r3, r2
 8015142:	fa1f fc88 	uxth.w	ip, r8
 8015146:	b29b      	uxth	r3, r3
 8015148:	fa0f fe83 	sxth.w	lr, r3
 801514c:	db0f      	blt.n	801516e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 801514e:	eba3 030c 	sub.w	r3, r3, ip
 8015152:	1ac9      	subs	r1, r1, r3
 8015154:	b209      	sxth	r1, r1
 8015156:	2900      	cmp	r1, #0
 8015158:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801515c:	dd12      	ble.n	8015184 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801515e:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
 8015162:	4605      	mov	r5, r0
 8015164:	9b05      	ldr	r3, [sp, #20]
 8015166:	3e08      	subs	r6, #8
 8015168:	3b01      	subs	r3, #1
 801516a:	9305      	str	r3, [sp, #20]
 801516c:	e7c7      	b.n	80150fe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 801516e:	4461      	add	r1, ip
 8015170:	b209      	sxth	r1, r1
 8015172:	4571      	cmp	r1, lr
 8015174:	dc38      	bgt.n	80151e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8015176:	eba2 020c 	sub.w	r2, r2, ip
 801517a:	b212      	sxth	r2, r2
 801517c:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 8015180:	2a00      	cmp	r2, #0
 8015182:	dcee      	bgt.n	8015162 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8015184:	b00f      	add	sp, #60	; 0x3c
 8015186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801518a:	45c8      	cmp	r8, r9
 801518c:	db2c      	blt.n	80151e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801518e:	88f3      	ldrh	r3, [r6, #6]
 8015190:	4499      	add	r9, r3
 8015192:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 8015196:	4498      	add	r8, r3
 8015198:	fa0f f989 	sxth.w	r9, r9
 801519c:	fa0f f888 	sxth.w	r8, r8
 80151a0:	45c1      	cmp	r9, r8
 80151a2:	db21      	blt.n	80151e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 80151a4:	fa1f f28c 	uxth.w	r2, ip
 80151a8:	88b3      	ldrh	r3, [r6, #4]
 80151aa:	45e6      	cmp	lr, ip
 80151ac:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 80151b0:	4413      	add	r3, r2
 80151b2:	fa1f f88e 	uxth.w	r8, lr
 80151b6:	b29b      	uxth	r3, r3
 80151b8:	fa0f f983 	sxth.w	r9, r3
 80151bc:	db0a      	blt.n	80151d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 80151be:	eba3 0308 	sub.w	r3, r3, r8
 80151c2:	1ac9      	subs	r1, r1, r3
 80151c4:	b209      	sxth	r1, r1
 80151c6:	2900      	cmp	r1, #0
 80151c8:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 80151cc:	ddda      	ble.n	8015184 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 80151ce:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 80151d2:	e7c6      	b.n	8015162 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 80151d4:	4441      	add	r1, r8
 80151d6:	b209      	sxth	r1, r1
 80151d8:	4549      	cmp	r1, r9
 80151da:	dc05      	bgt.n	80151e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 80151dc:	eba2 0208 	sub.w	r2, r2, r8
 80151e0:	b212      	sxth	r2, r2
 80151e2:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 80151e6:	e7cb      	b.n	8015180 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 80151e8:	4607      	mov	r7, r0
 80151ea:	e7bb      	b.n	8015164 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 80151ec:	2d00      	cmp	r5, #0
 80151ee:	d181      	bne.n	80150f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 80151f0:	2f00      	cmp	r7, #0
 80151f2:	f000 81dd 	beq.w	80155b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 80151f6:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
 80151fa:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
 80151fe:	b2b3      	uxth	r3, r6
 8015200:	f8bd a02e 	ldrh.w	sl, [sp, #46]	; 0x2e
 8015204:	9305      	str	r3, [sp, #20]
 8015206:	9a05      	ldr	r2, [sp, #20]
 8015208:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 801520c:	4413      	add	r3, r2
 801520e:	b2ba      	uxth	r2, r7
 8015210:	4492      	add	sl, r2
 8015212:	b29b      	uxth	r3, r3
 8015214:	fa1f fa8a 	uxth.w	sl, sl
 8015218:	fa0f f883 	sxth.w	r8, r3
 801521c:	fa0f f98a 	sxth.w	r9, sl
 8015220:	e9cd 2307 	strd	r2, r3, [sp, #28]
 8015224:	9b04      	ldr	r3, [sp, #16]
 8015226:	2b00      	cmp	r3, #0
 8015228:	d052      	beq.n	80152d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 801522a:	9903      	ldr	r1, [sp, #12]
 801522c:	4620      	mov	r0, r4
 801522e:	f7ff fd27 	bl	8014c80 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8015232:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8015236:	b1c0      	cbz	r0, 801526a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8015238:	f9b4 e000 	ldrsh.w	lr, [r4]
 801523c:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8015240:	4576      	cmp	r6, lr
 8015242:	dc22      	bgt.n	801528a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8015244:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8015248:	44f4      	add	ip, lr
 801524a:	fa0f fc8c 	sxth.w	ip, ip
 801524e:	45e0      	cmp	r8, ip
 8015250:	db1b      	blt.n	801528a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8015252:	428f      	cmp	r7, r1
 8015254:	fa1f fc81 	uxth.w	ip, r1
 8015258:	88e1      	ldrh	r1, [r4, #6]
 801525a:	dc0d      	bgt.n	8015278 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 801525c:	ebaa 0c0c 	sub.w	ip, sl, ip
 8015260:	f8a4 9002 	strh.w	r9, [r4, #2]
 8015264:	eba1 010c 	sub.w	r1, r1, ip
 8015268:	80e1      	strh	r1, [r4, #6]
 801526a:	4628      	mov	r0, r5
 801526c:	9904      	ldr	r1, [sp, #16]
 801526e:	3c08      	subs	r4, #8
 8015270:	4605      	mov	r5, r0
 8015272:	3901      	subs	r1, #1
 8015274:	9104      	str	r1, [sp, #16]
 8015276:	e7d3      	b.n	8015220 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19c>
 8015278:	4461      	add	r1, ip
 801527a:	b209      	sxth	r1, r1
 801527c:	4549      	cmp	r1, r9
 801527e:	dcf5      	bgt.n	801526c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8015280:	eba2 0c0c 	sub.w	ip, r2, ip
 8015284:	f8a4 c006 	strh.w	ip, [r4, #6]
 8015288:	e7ef      	b.n	801526a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801528a:	428f      	cmp	r7, r1
 801528c:	dcee      	bgt.n	801526c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 801528e:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 8015292:	4461      	add	r1, ip
 8015294:	b209      	sxth	r1, r1
 8015296:	4589      	cmp	r9, r1
 8015298:	dbe8      	blt.n	801526c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 801529a:	4576      	cmp	r6, lr
 801529c:	fa1f fc8e 	uxth.w	ip, lr
 80152a0:	88a1      	ldrh	r1, [r4, #4]
 80152a2:	dc07      	bgt.n	80152b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 80152a4:	eba3 0c0c 	sub.w	ip, r3, ip
 80152a8:	f8a4 8000 	strh.w	r8, [r4]
 80152ac:	eba1 010c 	sub.w	r1, r1, ip
 80152b0:	80a1      	strh	r1, [r4, #4]
 80152b2:	e7da      	b.n	801526a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 80152b4:	4461      	add	r1, ip
 80152b6:	b209      	sxth	r1, r1
 80152b8:	4588      	cmp	r8, r1
 80152ba:	dbd7      	blt.n	801526c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 80152bc:	9905      	ldr	r1, [sp, #20]
 80152be:	eba1 0c0c 	sub.w	ip, r1, ip
 80152c2:	f8a4 c004 	strh.w	ip, [r4, #4]
 80152c6:	e7d0      	b.n	801526a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 80152c8:	2400699a 	.word	0x2400699a
 80152cc:	24006998 	.word	0x24006998
 80152d0:	2d00      	cmp	r5, #0
 80152d2:	f000 816d 	beq.w	80155b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 80152d6:	9b06      	ldr	r3, [sp, #24]
 80152d8:	445b      	add	r3, fp
 80152da:	461c      	mov	r4, r3
 80152dc:	9b02      	ldr	r3, [sp, #8]
 80152de:	3301      	adds	r3, #1
 80152e0:	f000 8166 	beq.w	80155b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 80152e4:	f104 05a4 	add.w	r5, r4, #164	; 0xa4
 80152e8:	9803      	ldr	r0, [sp, #12]
 80152ea:	4629      	mov	r1, r5
 80152ec:	f7ff fd3a 	bl	8014d64 <_ZNK8touchgfx4Rect8includesERKS0_>
 80152f0:	b120      	cbz	r0, 80152fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 80152f2:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 80152f6:	9801      	ldr	r0, [sp, #4]
 80152f8:	f7ff feb0 	bl	801505c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80152fc:	9903      	ldr	r1, [sp, #12]
 80152fe:	4628      	mov	r0, r5
 8015300:	f7ff fcbe 	bl	8014c80 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8015304:	2800      	cmp	r0, #0
 8015306:	f000 809c 	beq.w	8015442 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 801530a:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	; 0xa4
 801530e:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 8015312:	fa1f f189 	uxth.w	r1, r9
 8015316:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 801531a:	9309      	str	r3, [sp, #36]	; 0x24
 801531c:	eb01 0c03 	add.w	ip, r1, r3
 8015320:	b283      	uxth	r3, r0
 8015322:	4548      	cmp	r0, r9
 8015324:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
 8015328:	fa1f fa8c 	uxth.w	sl, ip
 801532c:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 8015330:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	; 0xa6
 8015334:	eb03 050c 	add.w	r5, r3, ip
 8015338:	b2ad      	uxth	r5, r5
 801533a:	9505      	str	r5, [sp, #20]
 801533c:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 8015340:	9504      	str	r5, [sp, #16]
 8015342:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	; 0xec
 8015346:	f340 8099 	ble.w	801547c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 801534a:	1a5b      	subs	r3, r3, r1
 801534c:	4596      	cmp	lr, r2
 801534e:	fa0f f08a 	sxth.w	r0, sl
 8015352:	b29b      	uxth	r3, r3
 8015354:	b21e      	sxth	r6, r3
 8015356:	dd2e      	ble.n	80153b6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 8015358:	9f02      	ldr	r7, [sp, #8]
 801535a:	fa1f fe8e 	uxth.w	lr, lr
 801535e:	b292      	uxth	r2, r2
 8015360:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
 8015364:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 8015368:	9f04      	ldr	r7, [sp, #16]
 801536a:	ebae 0102 	sub.w	r1, lr, r2
 801536e:	44a6      	add	lr, r4
 8015370:	1a3f      	subs	r7, r7, r0
 8015372:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	; 0xb2
 8015376:	b289      	uxth	r1, r1
 8015378:	4402      	add	r2, r0
 801537a:	fa0f fe8e 	sxth.w	lr, lr
 801537e:	b20d      	sxth	r5, r1
 8015380:	b212      	sxth	r2, r2
 8015382:	436f      	muls	r7, r5
 8015384:	ebae 0202 	sub.w	r2, lr, r2
 8015388:	4372      	muls	r2, r6
 801538a:	4297      	cmp	r7, r2
 801538c:	db09      	blt.n	80153a2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 801538e:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	; 0xac
 8015392:	f8a8 50b2 	strh.w	r5, [r8, #178]	; 0xb2
 8015396:	449c      	add	ip, r3
 8015398:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801539c:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 80153a0:	e686      	b.n	80150b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80153a2:	4421      	add	r1, r4
 80153a4:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	; 0xae
 80153a8:	f8a8 60b0 	strh.w	r6, [r8, #176]	; 0xb0
 80153ac:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 80153b0:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 80153b4:	e67c      	b.n	80150b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80153b6:	9f04      	ldr	r7, [sp, #16]
 80153b8:	42b8      	cmp	r0, r7
 80153ba:	da27      	bge.n	801540c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 80153bc:	9902      	ldr	r1, [sp, #8]
 80153be:	1a3f      	subs	r7, r7, r0
 80153c0:	f8bd 502e 	ldrh.w	r5, [sp, #46]	; 0x2e
 80153c4:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 80153c8:	eb05 010e 	add.w	r1, r5, lr
 80153cc:	fa1f f881 	uxth.w	r8, r1
 80153d0:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	; 0xb2
 80153d4:	4411      	add	r1, r2
 80153d6:	fa0f f988 	sxth.w	r9, r8
 80153da:	eba2 020e 	sub.w	r2, r2, lr
 80153de:	eba1 0108 	sub.w	r1, r1, r8
 80153e2:	4372      	muls	r2, r6
 80153e4:	b289      	uxth	r1, r1
 80153e6:	fa0f f881 	sxth.w	r8, r1
 80153ea:	fb08 f707 	mul.w	r7, r8, r7
 80153ee:	42ba      	cmp	r2, r7
 80153f0:	dc06      	bgt.n	8015400 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 80153f2:	f8a4 90ae 	strh.w	r9, [r4, #174]	; 0xae
 80153f6:	f8a4 80b2 	strh.w	r8, [r4, #178]	; 0xb2
 80153fa:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
 80153fe:	e7ca      	b.n	8015396 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 8015400:	4429      	add	r1, r5
 8015402:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
 8015406:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801540a:	e651      	b.n	80150b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801540c:	9805      	ldr	r0, [sp, #20]
 801540e:	2d06      	cmp	r5, #6
 8015410:	ebaa 0000 	sub.w	r0, sl, r0
 8015414:	b280      	uxth	r0, r0
 8015416:	fa0f fe80 	sxth.w	lr, r0
 801541a:	d817      	bhi.n	801544c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 801541c:	9b04      	ldr	r3, [sp, #16]
 801541e:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	; 0xaa
 8015422:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 8015426:	1c6b      	adds	r3, r5, #1
 8015428:	f8a4 e0a8 	strh.w	lr, [r4, #168]	; 0xa8
 801542c:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 8015430:	9b01      	ldr	r3, [sp, #4]
 8015432:	9801      	ldr	r0, [sp, #4]
 8015434:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8015438:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 801543c:	805a      	strh	r2, [r3, #2]
 801543e:	809e      	strh	r6, [r3, #4]
 8015440:	80d9      	strh	r1, [r3, #6]
 8015442:	9b02      	ldr	r3, [sp, #8]
 8015444:	3c08      	subs	r4, #8
 8015446:	3b01      	subs	r3, #1
 8015448:	9302      	str	r3, [sp, #8]
 801544a:	e747      	b.n	80152dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 801544c:	9a02      	ldr	r2, [sp, #8]
 801544e:	45b6      	cmp	lr, r6
 8015450:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8015454:	db0d      	blt.n	8015472 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 8015456:	449c      	add	ip, r3
 8015458:	445a      	add	r2, fp
 801545a:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 801545e:	fa1f fc8c 	uxth.w	ip, ip
 8015462:	f8a2 e0b0 	strh.w	lr, [r2, #176]	; 0xb0
 8015466:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 801546a:	448c      	add	ip, r1
 801546c:	f8a2 c0ac 	strh.w	ip, [r2, #172]	; 0xac
 8015470:	e61e      	b.n	80150b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8015472:	445a      	add	r2, fp
 8015474:	4484      	add	ip, r0
 8015476:	f8a2 60b0 	strh.w	r6, [r2, #176]	; 0xb0
 801547a:	e78f      	b.n	801539c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801547c:	fa1f f18e 	uxth.w	r1, lr
 8015480:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 8015484:	b293      	uxth	r3, r2
 8015486:	4596      	cmp	lr, r2
 8015488:	eb01 0806 	add.w	r8, r1, r6
 801548c:	9306      	str	r3, [sp, #24]
 801548e:	fa1f f888 	uxth.w	r8, r8
 8015492:	9f06      	ldr	r7, [sp, #24]
 8015494:	fa0f f388 	sxth.w	r3, r8
 8015498:	9307      	str	r3, [sp, #28]
 801549a:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
 801549e:	443b      	add	r3, r7
 80154a0:	b29b      	uxth	r3, r3
 80154a2:	9308      	str	r3, [sp, #32]
 80154a4:	da24      	bge.n	80154f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 80154a6:	9905      	ldr	r1, [sp, #20]
 80154a8:	eba3 0308 	sub.w	r3, r3, r8
 80154ac:	eba2 020e 	sub.w	r2, r2, lr
 80154b0:	eba9 0000 	sub.w	r0, r9, r0
 80154b4:	ebaa 0401 	sub.w	r4, sl, r1
 80154b8:	b29b      	uxth	r3, r3
 80154ba:	b2a4      	uxth	r4, r4
 80154bc:	b219      	sxth	r1, r3
 80154be:	b225      	sxth	r5, r4
 80154c0:	4348      	muls	r0, r1
 80154c2:	436a      	muls	r2, r5
 80154c4:	4282      	cmp	r2, r0
 80154c6:	9a02      	ldr	r2, [sp, #8]
 80154c8:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80154cc:	445a      	add	r2, fp
 80154ce:	dc06      	bgt.n	80154de <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 80154d0:	9b07      	ldr	r3, [sp, #28]
 80154d2:	44a4      	add	ip, r4
 80154d4:	f8a2 10b2 	strh.w	r1, [r2, #178]	; 0xb2
 80154d8:	f8a2 30ae 	strh.w	r3, [r2, #174]	; 0xae
 80154dc:	e75e      	b.n	801539c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 80154de:	9904      	ldr	r1, [sp, #16]
 80154e0:	f8a2 50b0 	strh.w	r5, [r2, #176]	; 0xb0
 80154e4:	f8a2 10ac 	strh.w	r1, [r2, #172]	; 0xac
 80154e8:	4433      	add	r3, r6
 80154ea:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 80154ee:	e5df      	b.n	80150b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80154f0:	9f06      	ldr	r7, [sp, #24]
 80154f2:	9b04      	ldr	r3, [sp, #16]
 80154f4:	1bc9      	subs	r1, r1, r7
 80154f6:	fa0f f78a 	sxth.w	r7, sl
 80154fa:	b289      	uxth	r1, r1
 80154fc:	429f      	cmp	r7, r3
 80154fe:	fa0f fe81 	sxth.w	lr, r1
 8015502:	dd23      	ble.n	801554c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
 8015504:	9a05      	ldr	r2, [sp, #20]
 8015506:	eba9 0000 	sub.w	r0, r9, r0
 801550a:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801550e:	ebaa 0202 	sub.w	r2, sl, r2
 8015512:	9d07      	ldr	r5, [sp, #28]
 8015514:	fb0e f000 	mul.w	r0, lr, r0
 8015518:	b292      	uxth	r2, r2
 801551a:	eba5 0a03 	sub.w	sl, r5, r3
 801551e:	9b02      	ldr	r3, [sp, #8]
 8015520:	b214      	sxth	r4, r2
 8015522:	00db      	lsls	r3, r3, #3
 8015524:	fb04 fa0a 	mul.w	sl, r4, sl
 8015528:	445b      	add	r3, fp
 801552a:	4550      	cmp	r0, sl
 801552c:	db03      	blt.n	8015536 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
 801552e:	f8a3 e0b2 	strh.w	lr, [r3, #178]	; 0xb2
 8015532:	4494      	add	ip, r2
 8015534:	e732      	b.n	801539c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8015536:	9a04      	ldr	r2, [sp, #16]
 8015538:	4431      	add	r1, r6
 801553a:	f8a3 40b0 	strh.w	r4, [r3, #176]	; 0xb0
 801553e:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 8015542:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 8015546:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801554a:	e75c      	b.n	8015406 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 801554c:	9b08      	ldr	r3, [sp, #32]
 801554e:	2d06      	cmp	r5, #6
 8015550:	eba3 0308 	sub.w	r3, r3, r8
 8015554:	b29b      	uxth	r3, r3
 8015556:	b218      	sxth	r0, r3
 8015558:	d813      	bhi.n	8015582 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
 801555a:	9b07      	ldr	r3, [sp, #28]
 801555c:	f8a4 00aa 	strh.w	r0, [r4, #170]	; 0xaa
 8015560:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
 8015564:	1c6b      	adds	r3, r5, #1
 8015566:	9901      	ldr	r1, [sp, #4]
 8015568:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 801556c:	9b01      	ldr	r3, [sp, #4]
 801556e:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 8015572:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8015576:	805a      	strh	r2, [r3, #2]
 8015578:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801557a:	f8a3 e006 	strh.w	lr, [r3, #6]
 801557e:	809a      	strh	r2, [r3, #4]
 8015580:	e75f      	b.n	8015442 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 8015582:	9c02      	ldr	r4, [sp, #8]
 8015584:	4570      	cmp	r0, lr
 8015586:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 801558a:	db0d      	blt.n	80155a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
 801558c:	4431      	add	r1, r6
 801558e:	9b06      	ldr	r3, [sp, #24]
 8015590:	445c      	add	r4, fp
 8015592:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 8015596:	b289      	uxth	r1, r1
 8015598:	f8a4 00b2 	strh.w	r0, [r4, #178]	; 0xb2
 801559c:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 80155a0:	4419      	add	r1, r3
 80155a2:	f8a4 10ae 	strh.w	r1, [r4, #174]	; 0xae
 80155a6:	e583      	b.n	80150b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80155a8:	445c      	add	r4, fp
 80155aa:	f8a4 e0b2 	strh.w	lr, [r4, #178]	; 0xb2
 80155ae:	e79b      	b.n	80154e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 80155b0:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	; 0xec
 80155b4:	f64f 76ff 	movw	r6, #65535	; 0xffff
 80155b8:	1e65      	subs	r5, r4, #1
 80155ba:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 80155be:	b2ad      	uxth	r5, r5
 80155c0:	42b5      	cmp	r5, r6
 80155c2:	d044      	beq.n	801564e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ca>
 80155c4:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 80155c8:	f9b4 00a6 	ldrsh.w	r0, [r4, #166]	; 0xa6
 80155cc:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 80155d0:	4282      	cmp	r2, r0
 80155d2:	f9b4 70a4 	ldrsh.w	r7, [r4, #164]	; 0xa4
 80155d6:	d11f      	bne.n	8015618 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 80155d8:	f9bd c02e 	ldrsh.w	ip, [sp, #46]	; 0x2e
 80155dc:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	; 0xaa
 80155e0:	459c      	cmp	ip, r3
 80155e2:	d119      	bne.n	8015618 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 80155e4:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
 80155e8:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 80155ec:	19d8      	adds	r0, r3, r7
 80155ee:	b200      	sxth	r0, r0
 80155f0:	4288      	cmp	r0, r1
 80155f2:	d109      	bne.n	8015608 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x584>
 80155f4:	f8ad 7028 	strh.w	r7, [sp, #40]	; 0x28
 80155f8:	4413      	add	r3, r2
 80155fa:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 80155fe:	4629      	mov	r1, r5
 8015600:	9801      	ldr	r0, [sp, #4]
 8015602:	f7ff fd2b 	bl	801505c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8015606:	e003      	b.n	8015610 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 8015608:	4411      	add	r1, r2
 801560a:	b209      	sxth	r1, r1
 801560c:	42b9      	cmp	r1, r7
 801560e:	d0f3      	beq.n	80155f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x574>
 8015610:	3d01      	subs	r5, #1
 8015612:	3c08      	subs	r4, #8
 8015614:	b2ad      	uxth	r5, r5
 8015616:	e7d3      	b.n	80155c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 8015618:	42b9      	cmp	r1, r7
 801561a:	d1f9      	bne.n	8015610 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 801561c:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	; 0x2c
 8015620:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 8015624:	4299      	cmp	r1, r3
 8015626:	d1f3      	bne.n	8015610 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 8015628:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
 801562c:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 8015630:	181f      	adds	r7, r3, r0
 8015632:	b23f      	sxth	r7, r7
 8015634:	42ba      	cmp	r2, r7
 8015636:	d105      	bne.n	8015644 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c0>
 8015638:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
 801563c:	440b      	add	r3, r1
 801563e:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8015642:	e7dc      	b.n	80155fe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x57a>
 8015644:	440a      	add	r2, r1
 8015646:	b212      	sxth	r2, r2
 8015648:	4290      	cmp	r0, r2
 801564a:	d1e1      	bne.n	8015610 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 801564c:	e7f6      	b.n	801563c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5b8>
 801564e:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	; 0xec
 8015652:	2e07      	cmp	r6, #7
 8015654:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 8015658:	d812      	bhi.n	8015680 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fc>
 801565a:	1c75      	adds	r5, r6, #1
 801565c:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 8015660:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 8015664:	f8ab 50ec 	strh.w	r5, [fp, #236]	; 0xec
 8015668:	9d01      	ldr	r5, [sp, #4]
 801566a:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 801566e:	442c      	add	r4, r5
 8015670:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 8015674:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 8015678:	8061      	strh	r1, [r4, #2]
 801567a:	80a2      	strh	r2, [r4, #4]
 801567c:	80e3      	strh	r3, [r4, #6]
 801567e:	e581      	b.n	8015184 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8015680:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 8015684:	3e01      	subs	r6, #1
 8015686:	445c      	add	r4, fp
 8015688:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 801568c:	f04f 37ff 	mov.w	r7, #4294967295
 8015690:	2500      	movs	r5, #0
 8015692:	9305      	str	r3, [sp, #20]
 8015694:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 8015698:	1e72      	subs	r2, r6, #1
 801569a:	9302      	str	r3, [sp, #8]
 801569c:	4691      	mov	r9, r2
 801569e:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	; 0xaa
 80156a2:	9304      	str	r3, [sp, #16]
 80156a4:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
 80156a8:	f1b9 3fff 	cmp.w	r9, #4294967295
 80156ac:	6818      	ldr	r0, [r3, #0]
 80156ae:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 80156b2:	9207      	str	r2, [sp, #28]
 80156b4:	bf16      	itet	ne
 80156b6:	9905      	ldrne	r1, [sp, #20]
 80156b8:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 80156bc:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 80156c0:	9306      	str	r3, [sp, #24]
 80156c2:	f8be 1006 	ldrh.w	r1, [lr, #6]
 80156c6:	f8be 8004 	ldrh.w	r8, [lr, #4]
 80156ca:	fb18 f801 	smulbb	r8, r8, r1
 80156ce:	6859      	ldr	r1, [r3, #4]
 80156d0:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80156d4:	4671      	mov	r1, lr
 80156d6:	a80c      	add	r0, sp, #48	; 0x30
 80156d8:	f7ff fb6a 	bl	8014db0 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80156dc:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 80156e0:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 80156e4:	f04f 0c08 	mov.w	ip, #8
 80156e8:	9b04      	ldr	r3, [sp, #16]
 80156ea:	9a02      	ldr	r2, [sp, #8]
 80156ec:	fb10 f001 	smulbb	r0, r0, r1
 80156f0:	fb02 8803 	mla	r8, r2, r3, r8
 80156f4:	eba0 0108 	sub.w	r1, r0, r8
 80156f8:	fb90 f0fc 	sdiv	r0, r0, ip
 80156fc:	4288      	cmp	r0, r1
 80156fe:	dc20      	bgt.n	8015742 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6be>
 8015700:	4551      	cmp	r1, sl
 8015702:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8015706:	da03      	bge.n	8015710 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x68c>
 8015708:	b1d9      	cbz	r1, 8015742 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6be>
 801570a:	468a      	mov	sl, r1
 801570c:	464f      	mov	r7, r9
 801570e:	4635      	mov	r5, r6
 8015710:	f109 39ff 	add.w	r9, r9, #4294967295
 8015714:	f119 0f02 	cmn.w	r9, #2
 8015718:	d1c6      	bne.n	80156a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x624>
 801571a:	4616      	mov	r6, r2
 801571c:	3201      	adds	r2, #1
 801571e:	f1a4 0408 	sub.w	r4, r4, #8
 8015722:	d1b7      	bne.n	8015694 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x610>
 8015724:	9b01      	ldr	r3, [sp, #4]
 8015726:	b2ac      	uxth	r4, r5
 8015728:	00ed      	lsls	r5, r5, #3
 801572a:	1958      	adds	r0, r3, r5
 801572c:	1c7b      	adds	r3, r7, #1
 801572e:	d10b      	bne.n	8015748 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c4>
 8015730:	4601      	mov	r1, r0
 8015732:	9803      	ldr	r0, [sp, #12]
 8015734:	f7ff fb3c 	bl	8014db0 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8015738:	4621      	mov	r1, r4
 801573a:	9801      	ldr	r0, [sp, #4]
 801573c:	f7ff fc8e 	bl	801505c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8015740:	e4b6      	b.n	80150b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8015742:	464f      	mov	r7, r9
 8015744:	4635      	mov	r5, r6
 8015746:	e7ed      	b.n	8015724 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6a0>
 8015748:	9b01      	ldr	r3, [sp, #4]
 801574a:	00ff      	lsls	r7, r7, #3
 801574c:	445d      	add	r5, fp
 801574e:	19d9      	adds	r1, r3, r7
 8015750:	445f      	add	r7, fp
 8015752:	f7ff fb2d 	bl	8014db0 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8015756:	9b03      	ldr	r3, [sp, #12]
 8015758:	cb03      	ldmia	r3!, {r0, r1}
 801575a:	9b03      	ldr	r3, [sp, #12]
 801575c:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
 8015760:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8015764:	f855 0fac 	ldr.w	r0, [r5, #172]!
 8015768:	6869      	ldr	r1, [r5, #4]
 801576a:	c303      	stmia	r3!, {r0, r1}
 801576c:	e7e4      	b.n	8015738 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6b4>
 801576e:	bf00      	nop

08015770 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 8015770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015774:	f500 7698 	add.w	r6, r0, #304	; 0x130
 8015778:	b09b      	sub	sp, #108	; 0x6c
 801577a:	4604      	mov	r4, r0
 801577c:	4630      	mov	r0, r6
 801577e:	f7fc fabe 	bl	8011cfe <_ZNK8touchgfx4Rect7isEmptyEv>
 8015782:	4605      	mov	r5, r0
 8015784:	b948      	cbnz	r0, 801579a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a>
 8015786:	6823      	ldr	r3, [r4, #0]
 8015788:	4620      	mov	r0, r4
 801578a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801578c:	e896 0006 	ldmia.w	r6, {r1, r2}
 8015790:	4798      	blx	r3
 8015792:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 8015796:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
 801579a:	4bc5      	ldr	r3, [pc, #788]	; (8015ab0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x340>)
 801579c:	681b      	ldr	r3, [r3, #0]
 801579e:	2b00      	cmp	r3, #0
 80157a0:	d03f      	beq.n	8015822 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 80157a2:	4dc4      	ldr	r5, [pc, #784]	; (8015ab4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x344>)
 80157a4:	4628      	mov	r0, r5
 80157a6:	f7fc faaa 	bl	8011cfe <_ZNK8touchgfx4Rect7isEmptyEv>
 80157aa:	4606      	mov	r6, r0
 80157ac:	2800      	cmp	r0, #0
 80157ae:	d138      	bne.n	8015822 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 80157b0:	4628      	mov	r0, r5
 80157b2:	f7ff f99b 	bl	8014aec <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 80157b6:	6823      	ldr	r3, [r4, #0]
 80157b8:	6829      	ldr	r1, [r5, #0]
 80157ba:	4620      	mov	r0, r4
 80157bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80157be:	686a      	ldr	r2, [r5, #4]
 80157c0:	4798      	blx	r3
 80157c2:	802e      	strh	r6, [r5, #0]
 80157c4:	806e      	strh	r6, [r5, #2]
 80157c6:	80ae      	strh	r6, [r5, #4]
 80157c8:	80ee      	strh	r6, [r5, #6]
 80157ca:	f10d 0824 	add.w	r8, sp, #36	; 0x24
 80157ce:	4dba      	ldr	r5, [pc, #744]	; (8015ab8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x348>)
 80157d0:	4640      	mov	r0, r8
 80157d2:	f7ff fbe7 	bl	8014fa4 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80157d6:	882e      	ldrh	r6, [r5, #0]
 80157d8:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 80157dc:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 80157e0:	4633      	mov	r3, r6
 80157e2:	42bb      	cmp	r3, r7
 80157e4:	d224      	bcs.n	8015830 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 80157e6:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 80157ea:	2907      	cmp	r1, #7
 80157ec:	d816      	bhi.n	801581c <_ZN8touchgfx11Application15drawCachedAreasEv+0xac>
 80157ee:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 80157f2:	f930 9033 	ldrsh.w	r9, [r0, r3, lsl #3]
 80157f6:	f9b2 a002 	ldrsh.w	sl, [r2, #2]
 80157fa:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 80157fe:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 8015802:	1c4a      	adds	r2, r1, #1
 8015804:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
 8015808:	eb08 02c1 	add.w	r2, r8, r1, lsl #3
 801580c:	f828 9031 	strh.w	r9, [r8, r1, lsl #3]
 8015810:	f8a2 a002 	strh.w	sl, [r2, #2]
 8015814:	f8a2 e004 	strh.w	lr, [r2, #4]
 8015818:	f8a2 c006 	strh.w	ip, [r2, #6]
 801581c:	3301      	adds	r3, #1
 801581e:	b29b      	uxth	r3, r3
 8015820:	e7df      	b.n	80157e2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x72>
 8015822:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 8015826:	2b00      	cmp	r3, #0
 8015828:	d1cf      	bne.n	80157ca <_ZN8touchgfx11Application15drawCachedAreasEv+0x5a>
 801582a:	b01b      	add	sp, #108	; 0x6c
 801582c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015830:	f8b4 312e 	ldrh.w	r3, [r4, #302]	; 0x12e
 8015834:	42b3      	cmp	r3, r6
 8015836:	d90c      	bls.n	8015852 <_ZN8touchgfx11Application15drawCachedAreasEv+0xe2>
 8015838:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801583c:	6822      	ldr	r2, [r4, #0]
 801583e:	3601      	adds	r6, #1
 8015840:	4620      	mov	r0, r4
 8015842:	6c17      	ldr	r7, [r2, #64]	; 0x40
 8015844:	f8d3 10ee 	ldr.w	r1, [r3, #238]	; 0xee
 8015848:	b2b6      	uxth	r6, r6
 801584a:	f8d3 20f2 	ldr.w	r2, [r3, #242]	; 0xf2
 801584e:	47b8      	blx	r7
 8015850:	e7ee      	b.n	8015830 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 8015852:	4a9a      	ldr	r2, [pc, #616]	; (8015abc <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 8015854:	6813      	ldr	r3, [r2, #0]
 8015856:	4691      	mov	r9, r2
 8015858:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801585c:	2b01      	cmp	r3, #1
 801585e:	f040 80e0 	bne.w	8015a22 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b2>
 8015862:	8829      	ldrh	r1, [r5, #0]
 8015864:	2600      	movs	r6, #0
 8015866:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 801586a:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
 801586e:	33ae      	adds	r3, #174	; 0xae
 8015870:	428f      	cmp	r7, r1
 8015872:	f103 0308 	add.w	r3, r3, #8
 8015876:	dd0a      	ble.n	801588e <_ZN8touchgfx11Application15drawCachedAreasEv+0x11e>
 8015878:	f833 2c04 	ldrh.w	r2, [r3, #-4]
 801587c:	3101      	adds	r1, #1
 801587e:	f833 0c08 	ldrh.w	r0, [r3, #-8]
 8015882:	4402      	add	r2, r0
 8015884:	b212      	sxth	r2, r2
 8015886:	4296      	cmp	r6, r2
 8015888:	bfb8      	it	lt
 801588a:	4616      	movlt	r6, r2
 801588c:	e7f0      	b.n	8015870 <_ZN8touchgfx11Application15drawCachedAreasEv+0x100>
 801588e:	4b8c      	ldr	r3, [pc, #560]	; (8015ac0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 8015890:	f8df 9228 	ldr.w	r9, [pc, #552]	; 8015abc <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>
 8015894:	881b      	ldrh	r3, [r3, #0]
 8015896:	2b0f      	cmp	r3, #15
 8015898:	bf8c      	ite	hi
 801589a:	ea4f 0bd3 	movhi.w	fp, r3, lsr #3
 801589e:	f04f 0b01 	movls.w	fp, #1
 80158a2:	2300      	movs	r3, #0
 80158a4:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80158a8:	f8bd 7016 	ldrh.w	r7, [sp, #22]
 80158ac:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 80158b0:	4b82      	ldr	r3, [pc, #520]	; (8015abc <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 80158b2:	4438      	add	r0, r7
 80158b4:	b207      	sxth	r7, r0
 80158b6:	6818      	ldr	r0, [r3, #0]
 80158b8:	42b7      	cmp	r7, r6
 80158ba:	6803      	ldr	r3, [r0, #0]
 80158bc:	f280 8083 	bge.w	80159c6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
 80158c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80158c4:	4798      	blx	r3
 80158c6:	eb07 030b 	add.w	r3, r7, fp
 80158ca:	4298      	cmp	r0, r3
 80158cc:	da07      	bge.n	80158de <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 80158ce:	42b0      	cmp	r0, r6
 80158d0:	da05      	bge.n	80158de <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 80158d2:	4287      	cmp	r7, r0
 80158d4:	dd6c      	ble.n	80159b0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 80158d6:	2f00      	cmp	r7, #0
 80158d8:	dd6a      	ble.n	80159b0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 80158da:	4630      	mov	r0, r6
 80158dc:	e004      	b.n	80158e8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x178>
 80158de:	4287      	cmp	r7, r0
 80158e0:	dcfb      	bgt.n	80158da <_ZN8touchgfx11Application15drawCachedAreasEv+0x16a>
 80158e2:	42b0      	cmp	r0, r6
 80158e4:	bfa8      	it	ge
 80158e6:	4630      	movge	r0, r6
 80158e8:	4b76      	ldr	r3, [pc, #472]	; (8015ac4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 80158ea:	1bc0      	subs	r0, r0, r7
 80158ec:	2200      	movs	r2, #0
 80158ee:	f8ad 7016 	strh.w	r7, [sp, #22]
 80158f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80158f6:	882f      	ldrh	r7, [r5, #0]
 80158f8:	f8ad 2014 	strh.w	r2, [sp, #20]
 80158fc:	f8ad 3018 	strh.w	r3, [sp, #24]
 8015900:	f8ad 001a 	strh.w	r0, [sp, #26]
 8015904:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 8015908:	42bb      	cmp	r3, r7
 801590a:	d9cd      	bls.n	80158a8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x138>
 801590c:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 8015910:	ab07      	add	r3, sp, #28
 8015912:	f852 0fac 	ldr.w	r0, [r2, #172]!
 8015916:	6851      	ldr	r1, [r2, #4]
 8015918:	c303      	stmia	r3!, {r0, r1}
 801591a:	a905      	add	r1, sp, #20
 801591c:	a807      	add	r0, sp, #28
 801591e:	f7ff f9af 	bl	8014c80 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8015922:	2800      	cmp	r0, #0
 8015924:	d04c      	beq.n	80159c0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
 8015926:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 801592a:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 801592e:	f8bd a020 	ldrh.w	sl, [sp, #32]
 8015932:	4686      	mov	lr, r0
 8015934:	4290      	cmp	r0, r2
 8015936:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 801593a:	4450      	add	r0, sl
 801593c:	f8bd a018 	ldrh.w	sl, [sp, #24]
 8015940:	bfb8      	it	lt
 8015942:	4696      	movlt	lr, r2
 8015944:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8015948:	4452      	add	r2, sl
 801594a:	b280      	uxth	r0, r0
 801594c:	4299      	cmp	r1, r3
 801594e:	468c      	mov	ip, r1
 8015950:	b292      	uxth	r2, r2
 8015952:	9302      	str	r3, [sp, #8]
 8015954:	bfb8      	it	lt
 8015956:	469c      	movlt	ip, r3
 8015958:	b203      	sxth	r3, r0
 801595a:	fa0f fa82 	sxth.w	sl, r2
 801595e:	f8ad e01c 	strh.w	lr, [sp, #28]
 8015962:	f8ad c01e 	strh.w	ip, [sp, #30]
 8015966:	4553      	cmp	r3, sl
 8015968:	bfb8      	it	lt
 801596a:	4602      	movlt	r2, r0
 801596c:	9b02      	ldr	r3, [sp, #8]
 801596e:	eba2 020e 	sub.w	r2, r2, lr
 8015972:	f8ad 2020 	strh.w	r2, [sp, #32]
 8015976:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801597a:	4411      	add	r1, r2
 801597c:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8015980:	4413      	add	r3, r2
 8015982:	b289      	uxth	r1, r1
 8015984:	b29b      	uxth	r3, r3
 8015986:	b208      	sxth	r0, r1
 8015988:	b21a      	sxth	r2, r3
 801598a:	4290      	cmp	r0, r2
 801598c:	bfb8      	it	lt
 801598e:	460b      	movlt	r3, r1
 8015990:	eba3 030c 	sub.w	r3, r3, ip
 8015994:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8015998:	a807      	add	r0, sp, #28
 801599a:	f7fc f9b0 	bl	8011cfe <_ZNK8touchgfx4Rect7isEmptyEv>
 801599e:	b920      	cbnz	r0, 80159aa <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
 80159a0:	6823      	ldr	r3, [r4, #0]
 80159a2:	a907      	add	r1, sp, #28
 80159a4:	4620      	mov	r0, r4
 80159a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80159a8:	4798      	blx	r3
 80159aa:	3701      	adds	r7, #1
 80159ac:	b2bf      	uxth	r7, r7
 80159ae:	e7a9      	b.n	8015904 <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
 80159b0:	f8d9 0000 	ldr.w	r0, [r9]
 80159b4:	2101      	movs	r1, #1
 80159b6:	6803      	ldr	r3, [r0, #0]
 80159b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80159bc:	4798      	blx	r3
 80159be:	e773      	b.n	80158a8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x138>
 80159c0:	e9cd 0007 	strd	r0, r0, [sp, #28]
 80159c4:	e7e8      	b.n	8015998 <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
 80159c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80159c8:	4798      	blx	r3
 80159ca:	4b3f      	ldr	r3, [pc, #252]	; (8015ac8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 80159cc:	781b      	ldrb	r3, [r3, #0]
 80159ce:	2b00      	cmp	r3, #0
 80159d0:	f43f af2b 	beq.w	801582a <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 80159d4:	2300      	movs	r3, #0
 80159d6:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 80159da:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
 80159de:	882b      	ldrh	r3, [r5, #0]
 80159e0:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 80159e4:	42ab      	cmp	r3, r5
 80159e6:	f4bf af20 	bcs.w	801582a <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 80159ea:	f8b4 112e 	ldrh.w	r1, [r4, #302]	; 0x12e
 80159ee:	2907      	cmp	r1, #7
 80159f0:	d814      	bhi.n	8015a1c <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ac>
 80159f2:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
 80159f6:	f938 e033 	ldrsh.w	lr, [r8, r3, lsl #3]
 80159fa:	f9b2 c002 	ldrsh.w	ip, [r2, #2]
 80159fe:	f9b2 7004 	ldrsh.w	r7, [r2, #4]
 8015a02:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 8015a06:	1c4a      	adds	r2, r1, #1
 8015a08:	f8a4 212e 	strh.w	r2, [r4, #302]	; 0x12e
 8015a0c:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 8015a10:	f820 e031 	strh.w	lr, [r0, r1, lsl #3]
 8015a14:	f8a2 c002 	strh.w	ip, [r2, #2]
 8015a18:	8097      	strh	r7, [r2, #4]
 8015a1a:	80d6      	strh	r6, [r2, #6]
 8015a1c:	3301      	adds	r3, #1
 8015a1e:	b29b      	uxth	r3, r3
 8015a20:	e7e0      	b.n	80159e4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x274>
 8015a22:	2b02      	cmp	r3, #2
 8015a24:	f040 8133 	bne.w	8015c8e <_ZN8touchgfx11Application15drawCachedAreasEv+0x51e>
 8015a28:	4b28      	ldr	r3, [pc, #160]	; (8015acc <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 8015a2a:	f104 0aac 	add.w	sl, r4, #172	; 0xac
 8015a2e:	781b      	ldrb	r3, [r3, #0]
 8015a30:	2b01      	cmp	r3, #1
 8015a32:	f000 8098 	beq.w	8015b66 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 8015a36:	882a      	ldrh	r2, [r5, #0]
 8015a38:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	; 0xec
 8015a3c:	3201      	adds	r2, #1
 8015a3e:	b292      	uxth	r2, r2
 8015a40:	2900      	cmp	r1, #0
 8015a42:	d0c2      	beq.n	80159ca <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8015a44:	f8b4 60ae 	ldrh.w	r6, [r4, #174]	; 0xae
 8015a48:	4694      	mov	ip, r2
 8015a4a:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
 8015a4e:	f04f 0900 	mov.w	r9, #0
 8015a52:	441e      	add	r6, r3
 8015a54:	b236      	sxth	r6, r6
 8015a56:	fa1f f38c 	uxth.w	r3, ip
 8015a5a:	ea4f 07c9 	mov.w	r7, r9, lsl #3
 8015a5e:	4299      	cmp	r1, r3
 8015a60:	f240 80be 	bls.w	8015be0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x470>
 8015a64:	4427      	add	r7, r4
 8015a66:	eb04 0ecc 	add.w	lr, r4, ip, lsl #3
 8015a6a:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
 8015a6e:	f9be 00ae 	ldrsh.w	r0, [lr, #174]	; 0xae
 8015a72:	4283      	cmp	r3, r0
 8015a74:	f340 80a0 	ble.w	8015bb8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x448>
 8015a78:	f8be 60b2 	ldrh.w	r6, [lr, #178]	; 0xb2
 8015a7c:	46e1      	mov	r9, ip
 8015a7e:	4406      	add	r6, r0
 8015a80:	b236      	sxth	r6, r6
 8015a82:	429e      	cmp	r6, r3
 8015a84:	bfa8      	it	ge
 8015a86:	461e      	movge	r6, r3
 8015a88:	f10c 0c01 	add.w	ip, ip, #1
 8015a8c:	e7e3      	b.n	8015a56 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2e6>
 8015a8e:	d10a      	bne.n	8015aa6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x336>
 8015a90:	4562      	cmp	r2, ip
 8015a92:	f9b6 00b2 	ldrsh.w	r0, [r6, #178]	; 0xb2
 8015a96:	f9be 10b2 	ldrsh.w	r1, [lr, #178]	; 0xb2
 8015a9a:	bfb8      	it	lt
 8015a9c:	4662      	movlt	r2, ip
 8015a9e:	4288      	cmp	r0, r1
 8015aa0:	bfb8      	it	lt
 8015aa2:	461f      	movlt	r7, r3
 8015aa4:	e086      	b.n	8015bb4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x444>
 8015aa6:	428a      	cmp	r2, r1
 8015aa8:	bfb8      	it	lt
 8015aaa:	460a      	movlt	r2, r1
 8015aac:	e082      	b.n	8015bb4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x444>
 8015aae:	bf00      	nop
 8015ab0:	240069dc 	.word	0x240069dc
 8015ab4:	240069e8 	.word	0x240069e8
 8015ab8:	24000050 	.word	0x24000050
 8015abc:	240069a4 	.word	0x240069a4
 8015ac0:	2400699a 	.word	0x2400699a
 8015ac4:	24006998 	.word	0x24006998
 8015ac8:	240069a2 	.word	0x240069a2
 8015acc:	2400699c 	.word	0x2400699c
 8015ad0:	19a1      	adds	r1, r4, r6
 8015ad2:	ab07      	add	r3, sp, #28
 8015ad4:	f851 0fac 	ldr.w	r0, [r1, #172]!
 8015ad8:	6849      	ldr	r1, [r1, #4]
 8015ada:	c303      	stmia	r3!, {r0, r1}
 8015adc:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8015ae0:	a807      	add	r0, sp, #28
 8015ae2:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8015ae6:	2b13      	cmp	r3, #19
 8015ae8:	440b      	add	r3, r1
 8015aea:	bfd8      	it	le
 8015aec:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 8015af0:	1a9b      	subs	r3, r3, r2
 8015af2:	f8ad 201c 	strh.w	r2, [sp, #28]
 8015af6:	f8ad 3020 	strh.w	r3, [sp, #32]
 8015afa:	f7ff f811 	bl	8014b20 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8015afe:	a807      	add	r0, sp, #28
 8015b00:	f7fc f8fd 	bl	8011cfe <_ZNK8touchgfx4Rect7isEmptyEv>
 8015b04:	bb78      	cbnz	r0, 8015b66 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 8015b06:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 8015b0a:	4426      	add	r6, r4
 8015b0c:	f8d9 0000 	ldr.w	r0, [r9]
 8015b10:	f1bc 0f14 	cmp.w	ip, #20
 8015b14:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8015b18:	f8d0 e000 	ldr.w	lr, [r0]
 8015b1c:	bfa8      	it	ge
 8015b1e:	f04f 0c14 	movge.w	ip, #20
 8015b22:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8015b26:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8015b2a:	fa1f fc8c 	uxth.w	ip, ip
 8015b2e:	f8cd c000 	str.w	ip, [sp]
 8015b32:	f8de b090 	ldr.w	fp, [lr, #144]	; 0x90
 8015b36:	47d8      	blx	fp
 8015b38:	4683      	mov	fp, r0
 8015b3a:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8015b3e:	a807      	add	r0, sp, #28
 8015b40:	f7fe ffd4 	bl	8014aec <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8015b44:	6823      	ldr	r3, [r4, #0]
 8015b46:	4620      	mov	r0, r4
 8015b48:	a907      	add	r1, sp, #28
 8015b4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015b4c:	4798      	blx	r3
 8015b4e:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	; 0xb0
 8015b52:	eba0 000b 	sub.w	r0, r0, fp
 8015b56:	b200      	sxth	r0, r0
 8015b58:	f8a6 00b0 	strh.w	r0, [r6, #176]	; 0xb0
 8015b5c:	b918      	cbnz	r0, 8015b66 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 8015b5e:	b2b9      	uxth	r1, r7
 8015b60:	4650      	mov	r0, sl
 8015b62:	f7ff fa7b 	bl	801505c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8015b66:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	; 0xec
 8015b6a:	f1bb 0f00 	cmp.w	fp, #0
 8015b6e:	f43f af2c 	beq.w	80159ca <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8015b72:	882b      	ldrh	r3, [r5, #0]
 8015b74:	2700      	movs	r7, #0
 8015b76:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	; 0xac
 8015b7a:	3301      	adds	r3, #1
 8015b7c:	b29b      	uxth	r3, r3
 8015b7e:	b299      	uxth	r1, r3
 8015b80:	00fe      	lsls	r6, r7, #3
 8015b82:	458b      	cmp	fp, r1
 8015b84:	d9a4      	bls.n	8015ad0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>
 8015b86:	4426      	add	r6, r4
 8015b88:	eb04 0ec3 	add.w	lr, r4, r3, lsl #3
 8015b8c:	f8b6 10ac 	ldrh.w	r1, [r6, #172]	; 0xac
 8015b90:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	; 0xb0
 8015b94:	f9be c0ac 	ldrsh.w	ip, [lr, #172]	; 0xac
 8015b98:	4408      	add	r0, r1
 8015b9a:	f8be 10b0 	ldrh.w	r1, [lr, #176]	; 0xb0
 8015b9e:	4461      	add	r1, ip
 8015ba0:	b200      	sxth	r0, r0
 8015ba2:	b209      	sxth	r1, r1
 8015ba4:	4288      	cmp	r0, r1
 8015ba6:	f6bf af72 	bge.w	8015a8e <_ZN8touchgfx11Application15drawCachedAreasEv+0x31e>
 8015baa:	4584      	cmp	ip, r0
 8015bac:	4662      	mov	r2, ip
 8015bae:	461f      	mov	r7, r3
 8015bb0:	bfb8      	it	lt
 8015bb2:	4602      	movlt	r2, r0
 8015bb4:	3301      	adds	r3, #1
 8015bb6:	e7e2      	b.n	8015b7e <_ZN8touchgfx11Application15drawCachedAreasEv+0x40e>
 8015bb8:	d10e      	bne.n	8015bd8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x468>
 8015bba:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	; 0xb0
 8015bbe:	f8be e0b2 	ldrh.w	lr, [lr, #178]	; 0xb2
 8015bc2:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	; 0xb0
 8015bc6:	4473      	add	r3, lr
 8015bc8:	b21b      	sxth	r3, r3
 8015bca:	429e      	cmp	r6, r3
 8015bcc:	bfa8      	it	ge
 8015bce:	461e      	movge	r6, r3
 8015bd0:	4287      	cmp	r7, r0
 8015bd2:	bfb8      	it	lt
 8015bd4:	46e1      	movlt	r9, ip
 8015bd6:	e757      	b.n	8015a88 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 8015bd8:	4286      	cmp	r6, r0
 8015bda:	bfa8      	it	ge
 8015bdc:	4606      	movge	r6, r0
 8015bde:	e753      	b.n	8015a88 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 8015be0:	eb0a 0007 	add.w	r0, sl, r7
 8015be4:	4427      	add	r7, r4
 8015be6:	f9b7 b0b2 	ldrsh.w	fp, [r7, #178]	; 0xb2
 8015bea:	f1bb 0f13 	cmp.w	fp, #19
 8015bee:	bfdc      	itt	le
 8015bf0:	f8b7 60ae 	ldrhle.w	r6, [r7, #174]	; 0xae
 8015bf4:	445e      	addle	r6, fp
 8015bf6:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8015bfa:	bfd8      	it	le
 8015bfc:	b236      	sxthle	r6, r6
 8015bfe:	f7fc f87e 	bl	8011cfe <_ZNK8touchgfx4Rect7isEmptyEv>
 8015c02:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8015c06:	2800      	cmp	r0, #0
 8015c08:	f47f af1a 	bne.w	8015a40 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2d0>
 8015c0c:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
 8015c10:	fa1f fb8b 	uxth.w	fp, fp
 8015c14:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8015c18:	1ab6      	subs	r6, r6, r2
 8015c1a:	4829      	ldr	r0, [pc, #164]	; (8015cc0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>)
 8015c1c:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	; 0xac
 8015c20:	2e14      	cmp	r6, #20
 8015c22:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
 8015c26:	6800      	ldr	r0, [r0, #0]
 8015c28:	bfa8      	it	ge
 8015c2a:	2614      	movge	r6, #20
 8015c2c:	f8ad 101c 	strh.w	r1, [sp, #28]
 8015c30:	f8ad 201e 	strh.w	r2, [sp, #30]
 8015c34:	b289      	uxth	r1, r1
 8015c36:	f8ad 3020 	strh.w	r3, [sp, #32]
 8015c3a:	b2b6      	uxth	r6, r6
 8015c3c:	f8d0 c000 	ldr.w	ip, [r0]
 8015c40:	b292      	uxth	r2, r2
 8015c42:	455e      	cmp	r6, fp
 8015c44:	bf94      	ite	ls
 8015c46:	9600      	strls	r6, [sp, #0]
 8015c48:	f8cd b000 	strhi.w	fp, [sp]
 8015c4c:	b29b      	uxth	r3, r3
 8015c4e:	f8dc 6090 	ldr.w	r6, [ip, #144]	; 0x90
 8015c52:	47b0      	blx	r6
 8015c54:	6823      	ldr	r3, [r4, #0]
 8015c56:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8015c5a:	a907      	add	r1, sp, #28
 8015c5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015c5e:	4620      	mov	r0, r4
 8015c60:	4798      	blx	r3
 8015c62:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8015c66:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8015c6a:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 8015c6e:	1a5b      	subs	r3, r3, r1
 8015c70:	440a      	add	r2, r1
 8015c72:	b21b      	sxth	r3, r3
 8015c74:	f8a7 20ae 	strh.w	r2, [r7, #174]	; 0xae
 8015c78:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 8015c7c:	2b00      	cmp	r3, #0
 8015c7e:	f47f aeda 	bne.w	8015a36 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c6>
 8015c82:	fa1f f189 	uxth.w	r1, r9
 8015c86:	4650      	mov	r0, sl
 8015c88:	f7ff f9e8 	bl	801505c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8015c8c:	e6d3      	b.n	8015a36 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c6>
 8015c8e:	882e      	ldrh	r6, [r5, #0]
 8015c90:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 8015c94:	42b3      	cmp	r3, r6
 8015c96:	f67f ae98 	bls.w	80159ca <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8015c9a:	eb04 02c6 	add.w	r2, r4, r6, lsl #3
 8015c9e:	ab07      	add	r3, sp, #28
 8015ca0:	f852 0fac 	ldr.w	r0, [r2, #172]!
 8015ca4:	6851      	ldr	r1, [r2, #4]
 8015ca6:	c303      	stmia	r3!, {r0, r1}
 8015ca8:	a807      	add	r0, sp, #28
 8015caa:	f7fc f828 	bl	8011cfe <_ZNK8touchgfx4Rect7isEmptyEv>
 8015cae:	b920      	cbnz	r0, 8015cba <_ZN8touchgfx11Application15drawCachedAreasEv+0x54a>
 8015cb0:	6823      	ldr	r3, [r4, #0]
 8015cb2:	a907      	add	r1, sp, #28
 8015cb4:	4620      	mov	r0, r4
 8015cb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015cb8:	4798      	blx	r3
 8015cba:	3601      	adds	r6, #1
 8015cbc:	b2b6      	uxth	r6, r6
 8015cbe:	e7e7      	b.n	8015c90 <_ZN8touchgfx11Application15drawCachedAreasEv+0x520>
 8015cc0:	240069a4 	.word	0x240069a4

08015cc4 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8015cc4:	4b03      	ldr	r3, [pc, #12]	; (8015cd4 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8015cc6:	2200      	movs	r2, #0
 8015cc8:	801a      	strh	r2, [r3, #0]
 8015cca:	805a      	strh	r2, [r3, #2]
 8015ccc:	809a      	strh	r2, [r3, #4]
 8015cce:	80da      	strh	r2, [r3, #6]
 8015cd0:	4770      	bx	lr
 8015cd2:	bf00      	nop
 8015cd4:	240069e8 	.word	0x240069e8

08015cd8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8015cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015cdc:	b09d      	sub	sp, #116	; 0x74
 8015cde:	4606      	mov	r6, r0
 8015ce0:	4614      	mov	r4, r2
 8015ce2:	468a      	mov	sl, r1
 8015ce4:	a803      	add	r0, sp, #12
 8015ce6:	461d      	mov	r5, r3
 8015ce8:	f000 fd72 	bl	80167d0 <_ZN8touchgfx12TextProviderC1Ev>
 8015cec:	6833      	ldr	r3, [r6, #0]
 8015cee:	4630      	mov	r0, r6
 8015cf0:	f242 0b0b 	movw	fp, #8203	; 0x200b
 8015cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015cf6:	4798      	blx	r3
 8015cf8:	6833      	ldr	r3, [r6, #0]
 8015cfa:	4607      	mov	r7, r0
 8015cfc:	4630      	mov	r0, r6
 8015cfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015d00:	4798      	blx	r3
 8015d02:	462a      	mov	r2, r5
 8015d04:	2500      	movs	r5, #0
 8015d06:	4621      	mov	r1, r4
 8015d08:	9000      	str	r0, [sp, #0]
 8015d0a:	463b      	mov	r3, r7
 8015d0c:	462c      	mov	r4, r5
 8015d0e:	46a9      	mov	r9, r5
 8015d10:	46a8      	mov	r8, r5
 8015d12:	a803      	add	r0, sp, #12
 8015d14:	f000 fdb7 	bl	8016886 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8015d18:	2300      	movs	r3, #0
 8015d1a:	9302      	str	r3, [sp, #8]
 8015d1c:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8015d20:	429c      	cmp	r4, r3
 8015d22:	d002      	beq.n	8015d2a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 8015d24:	455c      	cmp	r4, fp
 8015d26:	bf18      	it	ne
 8015d28:	4625      	movne	r5, r4
 8015d2a:	ab02      	add	r3, sp, #8
 8015d2c:	4632      	mov	r2, r6
 8015d2e:	4651      	mov	r1, sl
 8015d30:	a803      	add	r0, sp, #12
 8015d32:	f001 f8ad 	bl	8016e90 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8015d36:	4604      	mov	r4, r0
 8015d38:	b108      	cbz	r0, 8015d3e <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 8015d3a:	280a      	cmp	r0, #10
 8015d3c:	d10a      	bne.n	8015d54 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 8015d3e:	45c1      	cmp	r9, r8
 8015d40:	bf38      	it	cc
 8015d42:	46c1      	movcc	r9, r8
 8015d44:	f04f 0800 	mov.w	r8, #0
 8015d48:	2c00      	cmp	r4, #0
 8015d4a:	d1e5      	bne.n	8015d18 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8015d4c:	4648      	mov	r0, r9
 8015d4e:	b01d      	add	sp, #116	; 0x74
 8015d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d54:	9a02      	ldr	r2, [sp, #8]
 8015d56:	2a00      	cmp	r2, #0
 8015d58:	d0de      	beq.n	8015d18 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8015d5a:	7b57      	ldrb	r7, [r2, #13]
 8015d5c:	4629      	mov	r1, r5
 8015d5e:	6833      	ldr	r3, [r6, #0]
 8015d60:	007f      	lsls	r7, r7, #1
 8015d62:	8894      	ldrh	r4, [r2, #4]
 8015d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015d66:	f407 7080 	and.w	r0, r7, #256	; 0x100
 8015d6a:	7a97      	ldrb	r7, [r2, #10]
 8015d6c:	4307      	orrs	r7, r0
 8015d6e:	4630      	mov	r0, r6
 8015d70:	4798      	blx	r3
 8015d72:	4438      	add	r0, r7
 8015d74:	4480      	add	r8, r0
 8015d76:	fa1f f888 	uxth.w	r8, r8
 8015d7a:	e7e5      	b.n	8015d48 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

08015d7c <_ZNK8touchgfx4Font12getCharWidthEt>:
 8015d7c:	b508      	push	{r3, lr}
 8015d7e:	6803      	ldr	r3, [r0, #0]
 8015d80:	68db      	ldr	r3, [r3, #12]
 8015d82:	4798      	blx	r3
 8015d84:	b128      	cbz	r0, 8015d92 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8015d86:	7b43      	ldrb	r3, [r0, #13]
 8015d88:	7a80      	ldrb	r0, [r0, #10]
 8015d8a:	005b      	lsls	r3, r3, #1
 8015d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015d90:	4318      	orrs	r0, r3
 8015d92:	bd08      	pop	{r3, pc}

08015d94 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8015d94:	b40e      	push	{r1, r2, r3}
 8015d96:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015d98:	b09e      	sub	sp, #120	; 0x78
 8015d9a:	4605      	mov	r5, r0
 8015d9c:	ab23      	add	r3, sp, #140	; 0x8c
 8015d9e:	a805      	add	r0, sp, #20
 8015da0:	f853 4b04 	ldr.w	r4, [r3], #4
 8015da4:	9303      	str	r3, [sp, #12]
 8015da6:	f000 fd13 	bl	80167d0 <_ZN8touchgfx12TextProviderC1Ev>
 8015daa:	682b      	ldr	r3, [r5, #0]
 8015dac:	4628      	mov	r0, r5
 8015dae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015db0:	4798      	blx	r3
 8015db2:	682b      	ldr	r3, [r5, #0]
 8015db4:	4606      	mov	r6, r0
 8015db6:	4628      	mov	r0, r5
 8015db8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015dba:	4798      	blx	r3
 8015dbc:	4633      	mov	r3, r6
 8015dbe:	4621      	mov	r1, r4
 8015dc0:	ae1e      	add	r6, sp, #120	; 0x78
 8015dc2:	2400      	movs	r4, #0
 8015dc4:	9000      	str	r0, [sp, #0]
 8015dc6:	9a03      	ldr	r2, [sp, #12]
 8015dc8:	a805      	add	r0, sp, #20
 8015dca:	f000 fd5c 	bl	8016886 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8015dce:	f846 4d68 	str.w	r4, [r6, #-104]!
 8015dd2:	462a      	mov	r2, r5
 8015dd4:	4633      	mov	r3, r6
 8015dd6:	4621      	mov	r1, r4
 8015dd8:	a805      	add	r0, sp, #20
 8015dda:	f001 f859 	bl	8016e90 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8015dde:	b300      	cbz	r0, 8015e22 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 8015de0:	280a      	cmp	r0, #10
 8015de2:	d01a      	beq.n	8015e1a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8015de4:	9f04      	ldr	r7, [sp, #16]
 8015de6:	b1c7      	cbz	r7, 8015e1a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8015de8:	7b78      	ldrb	r0, [r7, #13]
 8015dea:	7a3b      	ldrb	r3, [r7, #8]
 8015dec:	00c1      	lsls	r1, r0, #3
 8015dee:	88ea      	ldrh	r2, [r5, #6]
 8015df0:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8015df4:	4319      	orrs	r1, r3
 8015df6:	0643      	lsls	r3, r0, #25
 8015df8:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8015dfc:	bf48      	it	mi
 8015dfe:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 8015e02:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8015e06:	bf48      	it	mi
 8015e08:	b219      	sxthmi	r1, r3
 8015e0a:	79fb      	ldrb	r3, [r7, #7]
 8015e0c:	4303      	orrs	r3, r0
 8015e0e:	4413      	add	r3, r2
 8015e10:	1a5b      	subs	r3, r3, r1
 8015e12:	b21b      	sxth	r3, r3
 8015e14:	429c      	cmp	r4, r3
 8015e16:	bfb8      	it	lt
 8015e18:	461c      	movlt	r4, r3
 8015e1a:	4633      	mov	r3, r6
 8015e1c:	462a      	mov	r2, r5
 8015e1e:	2100      	movs	r1, #0
 8015e20:	e7da      	b.n	8015dd8 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 8015e22:	b2a0      	uxth	r0, r4
 8015e24:	b01e      	add	sp, #120	; 0x78
 8015e26:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8015e2a:	b003      	add	sp, #12
 8015e2c:	4770      	bx	lr

08015e2e <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 8015e2e:	7a43      	ldrb	r3, [r0, #9]
 8015e30:	8880      	ldrh	r0, [r0, #4]
 8015e32:	4418      	add	r0, r3
 8015e34:	b280      	uxth	r0, r0
 8015e36:	4770      	bx	lr

08015e38 <_ZNK8touchgfx4Font13getFontHeightEv>:
 8015e38:	6803      	ldr	r3, [r0, #0]
 8015e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015e3c:	4718      	bx	r3

08015e3e <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 8015e3e:	b40e      	push	{r1, r2, r3}
 8015e40:	b570      	push	{r4, r5, r6, lr}
 8015e42:	b09d      	sub	sp, #116	; 0x74
 8015e44:	4604      	mov	r4, r0
 8015e46:	ab21      	add	r3, sp, #132	; 0x84
 8015e48:	a803      	add	r0, sp, #12
 8015e4a:	f853 5b04 	ldr.w	r5, [r3], #4
 8015e4e:	9302      	str	r3, [sp, #8]
 8015e50:	f000 fcbe 	bl	80167d0 <_ZN8touchgfx12TextProviderC1Ev>
 8015e54:	6823      	ldr	r3, [r4, #0]
 8015e56:	4620      	mov	r0, r4
 8015e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015e5a:	4798      	blx	r3
 8015e5c:	6823      	ldr	r3, [r4, #0]
 8015e5e:	4606      	mov	r6, r0
 8015e60:	4620      	mov	r0, r4
 8015e62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015e64:	2401      	movs	r4, #1
 8015e66:	4798      	blx	r3
 8015e68:	4633      	mov	r3, r6
 8015e6a:	9000      	str	r0, [sp, #0]
 8015e6c:	4629      	mov	r1, r5
 8015e6e:	9a02      	ldr	r2, [sp, #8]
 8015e70:	a803      	add	r0, sp, #12
 8015e72:	f000 fd08 	bl	8016886 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8015e76:	a803      	add	r0, sp, #12
 8015e78:	f001 f8d6 	bl	8017028 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8015e7c:	b2a3      	uxth	r3, r4
 8015e7e:	b138      	cbz	r0, 8015e90 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 8015e80:	280a      	cmp	r0, #10
 8015e82:	a803      	add	r0, sp, #12
 8015e84:	bf04      	itt	eq
 8015e86:	3301      	addeq	r3, #1
 8015e88:	b21c      	sxtheq	r4, r3
 8015e8a:	f001 f8cd 	bl	8017028 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8015e8e:	e7f5      	b.n	8015e7c <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 8015e90:	4618      	mov	r0, r3
 8015e92:	b01d      	add	sp, #116	; 0x74
 8015e94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015e98:	b003      	add	sp, #12
 8015e9a:	4770      	bx	lr

08015e9c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8015e9c:	b40e      	push	{r1, r2, r3}
 8015e9e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015ea0:	b09e      	sub	sp, #120	; 0x78
 8015ea2:	4604      	mov	r4, r0
 8015ea4:	ab23      	add	r3, sp, #140	; 0x8c
 8015ea6:	a805      	add	r0, sp, #20
 8015ea8:	f853 5b04 	ldr.w	r5, [r3], #4
 8015eac:	9303      	str	r3, [sp, #12]
 8015eae:	f000 fc8f 	bl	80167d0 <_ZN8touchgfx12TextProviderC1Ev>
 8015eb2:	6823      	ldr	r3, [r4, #0]
 8015eb4:	4620      	mov	r0, r4
 8015eb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015eb8:	4798      	blx	r3
 8015eba:	6823      	ldr	r3, [r4, #0]
 8015ebc:	4606      	mov	r6, r0
 8015ebe:	4620      	mov	r0, r4
 8015ec0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015ec2:	4798      	blx	r3
 8015ec4:	4633      	mov	r3, r6
 8015ec6:	4629      	mov	r1, r5
 8015ec8:	9000      	str	r0, [sp, #0]
 8015eca:	9a03      	ldr	r2, [sp, #12]
 8015ecc:	a805      	add	r0, sp, #20
 8015ece:	f000 fcda 	bl	8016886 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8015ed2:	ad1e      	add	r5, sp, #120	; 0x78
 8015ed4:	2100      	movs	r1, #0
 8015ed6:	f647 76ff 	movw	r6, #32767	; 0x7fff
 8015eda:	4622      	mov	r2, r4
 8015edc:	a805      	add	r0, sp, #20
 8015ede:	f845 1d68 	str.w	r1, [r5, #-104]!
 8015ee2:	462b      	mov	r3, r5
 8015ee4:	f000 ffd4 	bl	8016e90 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8015ee8:	b1d8      	cbz	r0, 8015f22 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 8015eea:	280a      	cmp	r0, #10
 8015eec:	d012      	beq.n	8015f14 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8015eee:	9804      	ldr	r0, [sp, #16]
 8015ef0:	b180      	cbz	r0, 8015f14 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8015ef2:	7b47      	ldrb	r7, [r0, #13]
 8015ef4:	88e2      	ldrh	r2, [r4, #6]
 8015ef6:	00fb      	lsls	r3, r7, #3
 8015ef8:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8015efc:	7a03      	ldrb	r3, [r0, #8]
 8015efe:	430b      	orrs	r3, r1
 8015f00:	0679      	lsls	r1, r7, #25
 8015f02:	bf44      	itt	mi
 8015f04:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8015f08:	b21b      	sxthmi	r3, r3
 8015f0a:	1ad3      	subs	r3, r2, r3
 8015f0c:	b21b      	sxth	r3, r3
 8015f0e:	429e      	cmp	r6, r3
 8015f10:	bfa8      	it	ge
 8015f12:	461e      	movge	r6, r3
 8015f14:	462b      	mov	r3, r5
 8015f16:	4622      	mov	r2, r4
 8015f18:	2100      	movs	r1, #0
 8015f1a:	a805      	add	r0, sp, #20
 8015f1c:	f000 ffb8 	bl	8016e90 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8015f20:	e7e2      	b.n	8015ee8 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 8015f22:	4630      	mov	r0, r6
 8015f24:	b01e      	add	sp, #120	; 0x78
 8015f26:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8015f2a:	b003      	add	sp, #12
 8015f2c:	4770      	bx	lr

08015f2e <_ZNK8touchgfx8Drawable10invalidateEv>:
 8015f2e:	b513      	push	{r0, r1, r4, lr}
 8015f30:	6803      	ldr	r3, [r0, #0]
 8015f32:	2400      	movs	r4, #0
 8015f34:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8015f38:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8015f3c:	f8ad 1004 	strh.w	r1, [sp, #4]
 8015f40:	4669      	mov	r1, sp
 8015f42:	691b      	ldr	r3, [r3, #16]
 8015f44:	9400      	str	r4, [sp, #0]
 8015f46:	f8ad 2006 	strh.w	r2, [sp, #6]
 8015f4a:	4798      	blx	r3
 8015f4c:	b002      	add	sp, #8
 8015f4e:	bd10      	pop	{r4, pc}

08015f50 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 8015f50:	b538      	push	{r3, r4, r5, lr}
 8015f52:	680b      	ldr	r3, [r1, #0]
 8015f54:	460c      	mov	r4, r1
 8015f56:	4605      	mov	r5, r0
 8015f58:	68db      	ldr	r3, [r3, #12]
 8015f5a:	4798      	blx	r3
 8015f5c:	6823      	ldr	r3, [r4, #0]
 8015f5e:	4620      	mov	r0, r4
 8015f60:	4629      	mov	r1, r5
 8015f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015f64:	4798      	blx	r3
 8015f66:	4628      	mov	r0, r5
 8015f68:	bd38      	pop	{r3, r4, r5, pc}

08015f6a <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8015f6a:	b410      	push	{r4}
 8015f6c:	880a      	ldrh	r2, [r1, #0]
 8015f6e:	8884      	ldrh	r4, [r0, #4]
 8015f70:	4422      	add	r2, r4
 8015f72:	800a      	strh	r2, [r1, #0]
 8015f74:	884a      	ldrh	r2, [r1, #2]
 8015f76:	88c4      	ldrh	r4, [r0, #6]
 8015f78:	4422      	add	r2, r4
 8015f7a:	804a      	strh	r2, [r1, #2]
 8015f7c:	6940      	ldr	r0, [r0, #20]
 8015f7e:	b120      	cbz	r0, 8015f8a <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 8015f80:	6803      	ldr	r3, [r0, #0]
 8015f82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015f88:	4718      	bx	r3
 8015f8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015f8e:	4770      	bx	lr

08015f90 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 8015f90:	b570      	push	{r4, r5, r6, lr}
 8015f92:	8882      	ldrh	r2, [r0, #4]
 8015f94:	460c      	mov	r4, r1
 8015f96:	880b      	ldrh	r3, [r1, #0]
 8015f98:	4605      	mov	r5, r0
 8015f9a:	4413      	add	r3, r2
 8015f9c:	800b      	strh	r3, [r1, #0]
 8015f9e:	884b      	ldrh	r3, [r1, #2]
 8015fa0:	88c2      	ldrh	r2, [r0, #6]
 8015fa2:	4413      	add	r3, r2
 8015fa4:	804b      	strh	r3, [r1, #2]
 8015fa6:	1d01      	adds	r1, r0, #4
 8015fa8:	4620      	mov	r0, r4
 8015faa:	f7fb fe65 	bl	8011c78 <_ZN8touchgfx4RectaNERKS0_>
 8015fae:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8015fb2:	2b00      	cmp	r3, #0
 8015fb4:	dd0b      	ble.n	8015fce <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8015fb6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8015fba:	2b00      	cmp	r3, #0
 8015fbc:	dd07      	ble.n	8015fce <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8015fbe:	6968      	ldr	r0, [r5, #20]
 8015fc0:	b128      	cbz	r0, 8015fce <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8015fc2:	6803      	ldr	r3, [r0, #0]
 8015fc4:	4621      	mov	r1, r4
 8015fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015fc8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015fcc:	4718      	bx	r3
 8015fce:	bd70      	pop	{r4, r5, r6, pc}

08015fd0 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8015fd0:	b570      	push	{r4, r5, r6, lr}
 8015fd2:	8882      	ldrh	r2, [r0, #4]
 8015fd4:	460c      	mov	r4, r1
 8015fd6:	880b      	ldrh	r3, [r1, #0]
 8015fd8:	4605      	mov	r5, r0
 8015fda:	4413      	add	r3, r2
 8015fdc:	800b      	strh	r3, [r1, #0]
 8015fde:	884b      	ldrh	r3, [r1, #2]
 8015fe0:	88c2      	ldrh	r2, [r0, #6]
 8015fe2:	4413      	add	r3, r2
 8015fe4:	804b      	strh	r3, [r1, #2]
 8015fe6:	1d01      	adds	r1, r0, #4
 8015fe8:	4620      	mov	r0, r4
 8015fea:	f7fb fe45 	bl	8011c78 <_ZN8touchgfx4RectaNERKS0_>
 8015fee:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8015ff2:	2b00      	cmp	r3, #0
 8015ff4:	dd19      	ble.n	801602a <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8015ff6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8015ffa:	2b00      	cmp	r3, #0
 8015ffc:	dd15      	ble.n	801602a <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8015ffe:	6968      	ldr	r0, [r5, #20]
 8016000:	b128      	cbz	r0, 801600e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 8016002:	6803      	ldr	r3, [r0, #0]
 8016004:	4621      	mov	r1, r4
 8016006:	691b      	ldr	r3, [r3, #16]
 8016008:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801600c:	4718      	bx	r3
 801600e:	4b07      	ldr	r3, [pc, #28]	; (801602c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 8016010:	681b      	ldr	r3, [r3, #0]
 8016012:	3304      	adds	r3, #4
 8016014:	429d      	cmp	r5, r3
 8016016:	d108      	bne.n	801602a <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8016018:	f7fe ff10 	bl	8014e3c <_ZN8touchgfx11Application11getInstanceEv>
 801601c:	6803      	ldr	r3, [r0, #0]
 801601e:	6821      	ldr	r1, [r4, #0]
 8016020:	6862      	ldr	r2, [r4, #4]
 8016022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016024:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016028:	4718      	bx	r3
 801602a:	bd70      	pop	{r4, r5, r6, pc}
 801602c:	240069e0 	.word	0x240069e0

08016030 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8016030:	b570      	push	{r4, r5, r6, lr}
 8016032:	4604      	mov	r4, r0
 8016034:	4616      	mov	r6, r2
 8016036:	460d      	mov	r5, r1
 8016038:	b901      	cbnz	r1, 801603c <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801603a:	b192      	cbz	r2, 8016062 <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 801603c:	6823      	ldr	r3, [r4, #0]
 801603e:	4620      	mov	r0, r4
 8016040:	699b      	ldr	r3, [r3, #24]
 8016042:	4798      	blx	r3
 8016044:	88e2      	ldrh	r2, [r4, #6]
 8016046:	88a1      	ldrh	r1, [r4, #4]
 8016048:	4620      	mov	r0, r4
 801604a:	4432      	add	r2, r6
 801604c:	4429      	add	r1, r5
 801604e:	b212      	sxth	r2, r2
 8016050:	b209      	sxth	r1, r1
 8016052:	f7ee fa74 	bl	800453e <_ZN8touchgfx8Drawable5setXYEss>
 8016056:	6823      	ldr	r3, [r4, #0]
 8016058:	4620      	mov	r0, r4
 801605a:	699b      	ldr	r3, [r3, #24]
 801605c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016060:	4718      	bx	r3
 8016062:	bd70      	pop	{r4, r5, r6, pc}

08016064 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8016064:	b510      	push	{r4, lr}
 8016066:	2300      	movs	r3, #0
 8016068:	4604      	mov	r4, r0
 801606a:	4608      	mov	r0, r1
 801606c:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8016070:	8023      	strh	r3, [r4, #0]
 8016072:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8016076:	8063      	strh	r3, [r4, #2]
 8016078:	6803      	ldr	r3, [r0, #0]
 801607a:	80a1      	strh	r1, [r4, #4]
 801607c:	4621      	mov	r1, r4
 801607e:	80e2      	strh	r2, [r4, #6]
 8016080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016082:	4798      	blx	r3
 8016084:	4620      	mov	r0, r4
 8016086:	bd10      	pop	{r4, pc}

08016088 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 8016088:	b530      	push	{r4, r5, lr}
 801608a:	8083      	strh	r3, [r0, #4]
 801608c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8016090:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8016094:	80c3      	strh	r3, [r0, #6]
 8016096:	f89d 3010 	ldrb.w	r3, [sp, #16]
 801609a:	6141      	str	r1, [r0, #20]
 801609c:	7203      	strb	r3, [r0, #8]
 801609e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80160a2:	8302      	strh	r2, [r0, #24]
 80160a4:	7243      	strb	r3, [r0, #9]
 80160a6:	7a83      	ldrb	r3, [r0, #10]
 80160a8:	f365 0306 	bfi	r3, r5, #0, #7
 80160ac:	f89d 501c 	ldrb.w	r5, [sp, #28]
 80160b0:	f365 13c7 	bfi	r3, r5, #7, #1
 80160b4:	7283      	strb	r3, [r0, #10]
 80160b6:	f89d 3020 	ldrb.w	r3, [sp, #32]
 80160ba:	72c3      	strb	r3, [r0, #11]
 80160bc:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 80160c0:	7303      	strb	r3, [r0, #12]
 80160c2:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 80160c6:	81c3      	strh	r3, [r0, #14]
 80160c8:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 80160cc:	8203      	strh	r3, [r0, #16]
 80160ce:	4b01      	ldr	r3, [pc, #4]	; (80160d4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 80160d0:	6003      	str	r3, [r0, #0]
 80160d2:	bd30      	pop	{r4, r5, pc}
 80160d4:	080234d8 	.word	0x080234d8

080160d8 <_ZNK8touchgfx9ConstFont4findEt>:
 80160d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80160da:	6944      	ldr	r4, [r0, #20]
 80160dc:	b3bc      	cbz	r4, 801614e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80160de:	88a3      	ldrh	r3, [r4, #4]
 80160e0:	8b02      	ldrh	r2, [r0, #24]
 80160e2:	1acb      	subs	r3, r1, r3
 80160e4:	f102 32ff 	add.w	r2, r2, #4294967295
 80160e8:	d431      	bmi.n	801614e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80160ea:	4293      	cmp	r3, r2
 80160ec:	dd0c      	ble.n	8016108 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 80160ee:	230e      	movs	r3, #14
 80160f0:	fb03 4302 	mla	r3, r3, r2, r4
 80160f4:	889b      	ldrh	r3, [r3, #4]
 80160f6:	1a5b      	subs	r3, r3, r1
 80160f8:	1ad3      	subs	r3, r2, r3
 80160fa:	429a      	cmp	r2, r3
 80160fc:	db27      	blt.n	801614e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80160fe:	2b00      	cmp	r3, #0
 8016100:	bfbc      	itt	lt
 8016102:	2302      	movlt	r3, #2
 8016104:	fb92 f3f3 	sdivlt	r3, r2, r3
 8016108:	2500      	movs	r5, #0
 801610a:	260e      	movs	r6, #14
 801610c:	4295      	cmp	r5, r2
 801610e:	dc1e      	bgt.n	801614e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8016110:	fb06 4003 	mla	r0, r6, r3, r4
 8016114:	8887      	ldrh	r7, [r0, #4]
 8016116:	42b9      	cmp	r1, r7
 8016118:	d01a      	beq.n	8016150 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801611a:	d20d      	bcs.n	8016138 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 801611c:	1e5a      	subs	r2, r3, #1
 801611e:	4295      	cmp	r5, r2
 8016120:	dc15      	bgt.n	801614e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8016122:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 8016126:	1a5b      	subs	r3, r3, r1
 8016128:	1ad3      	subs	r3, r2, r3
 801612a:	429a      	cmp	r2, r3
 801612c:	db0f      	blt.n	801614e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801612e:	429d      	cmp	r5, r3
 8016130:	ddec      	ble.n	801610c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8016132:	1953      	adds	r3, r2, r5
 8016134:	105b      	asrs	r3, r3, #1
 8016136:	e7e9      	b.n	801610c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8016138:	1c5d      	adds	r5, r3, #1
 801613a:	42aa      	cmp	r2, r5
 801613c:	db07      	blt.n	801614e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801613e:	8a43      	ldrh	r3, [r0, #18]
 8016140:	1acb      	subs	r3, r1, r3
 8016142:	442b      	add	r3, r5
 8016144:	429d      	cmp	r5, r3
 8016146:	dc02      	bgt.n	801614e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8016148:	429a      	cmp	r2, r3
 801614a:	dadf      	bge.n	801610c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801614c:	e7f1      	b.n	8016132 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801614e:	2000      	movs	r0, #0
 8016150:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016152 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8016152:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016154:	4604      	mov	r4, r0
 8016156:	4617      	mov	r7, r2
 8016158:	461e      	mov	r6, r3
 801615a:	b911      	cbnz	r1, 8016162 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801615c:	2500      	movs	r5, #0
 801615e:	4628      	mov	r0, r5
 8016160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016162:	290a      	cmp	r1, #10
 8016164:	d0fa      	beq.n	801615c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8016166:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801616a:	4291      	cmp	r1, r2
 801616c:	d0f6      	beq.n	801615c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801616e:	f242 020b 	movw	r2, #8203	; 0x200b
 8016172:	4291      	cmp	r1, r2
 8016174:	d0f2      	beq.n	801615c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8016176:	f7ff ffaf 	bl	80160d8 <_ZNK8touchgfx9ConstFont4findEt>
 801617a:	4605      	mov	r5, r0
 801617c:	b950      	cbnz	r0, 8016194 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801617e:	6823      	ldr	r3, [r4, #0]
 8016180:	4620      	mov	r0, r4
 8016182:	691b      	ldr	r3, [r3, #16]
 8016184:	4798      	blx	r3
 8016186:	4601      	mov	r1, r0
 8016188:	4620      	mov	r0, r4
 801618a:	f7ff ffa5 	bl	80160d8 <_ZNK8touchgfx9ConstFont4findEt>
 801618e:	4605      	mov	r5, r0
 8016190:	2800      	cmp	r0, #0
 8016192:	d0e3      	beq.n	801615c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8016194:	6823      	ldr	r3, [r4, #0]
 8016196:	4629      	mov	r1, r5
 8016198:	4620      	mov	r0, r4
 801619a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801619c:	4798      	blx	r3
 801619e:	6038      	str	r0, [r7, #0]
 80161a0:	6823      	ldr	r3, [r4, #0]
 80161a2:	4620      	mov	r0, r4
 80161a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80161a6:	4798      	blx	r3
 80161a8:	7030      	strb	r0, [r6, #0]
 80161aa:	e7d8      	b.n	801615e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

080161ac <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 80161ac:	2000      	movs	r0, #0
 80161ae:	4770      	bx	lr

080161b0 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 80161b0:	2001      	movs	r0, #1
 80161b2:	4770      	bx	lr

080161b4 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 80161b4:	2002      	movs	r0, #2
 80161b6:	4770      	bx	lr

080161b8 <_ZN8touchgfx12GestureEventD1Ev>:
 80161b8:	4770      	bx	lr

080161ba <_ZN8touchgfx9DragEventD1Ev>:
 80161ba:	4770      	bx	lr

080161bc <_ZN8touchgfx10ClickEventD1Ev>:
 80161bc:	4770      	bx	lr

080161be <_ZN8touchgfx10ClickEventD0Ev>:
 80161be:	b510      	push	{r4, lr}
 80161c0:	4604      	mov	r4, r0
 80161c2:	210c      	movs	r1, #12
 80161c4:	f00a fdd1 	bl	8020d6a <_ZdlPvj>
 80161c8:	4620      	mov	r0, r4
 80161ca:	bd10      	pop	{r4, pc}

080161cc <_ZN8touchgfx9DragEventD0Ev>:
 80161cc:	b510      	push	{r4, lr}
 80161ce:	4604      	mov	r4, r0
 80161d0:	2110      	movs	r1, #16
 80161d2:	f00a fdca 	bl	8020d6a <_ZdlPvj>
 80161d6:	4620      	mov	r0, r4
 80161d8:	bd10      	pop	{r4, pc}

080161da <_ZN8touchgfx12GestureEventD0Ev>:
 80161da:	b510      	push	{r4, lr}
 80161dc:	4604      	mov	r4, r0
 80161de:	210c      	movs	r1, #12
 80161e0:	f00a fdc3 	bl	8020d6a <_ZdlPvj>
 80161e4:	4620      	mov	r0, r4
 80161e6:	bd10      	pop	{r4, pc}

080161e8 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 80161e8:	b530      	push	{r4, r5, lr}
 80161ea:	460d      	mov	r5, r1
 80161ec:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80161ee:	b087      	sub	sp, #28
 80161f0:	4604      	mov	r4, r0
 80161f2:	b301      	cbz	r1, 8016236 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 80161f4:	a801      	add	r0, sp, #4
 80161f6:	f7ff ff35 	bl	8016064 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80161fa:	892a      	ldrh	r2, [r5, #8]
 80161fc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8016200:	7928      	ldrb	r0, [r5, #4]
 8016202:	1ad2      	subs	r2, r2, r3
 8016204:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8016206:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801620a:	441a      	add	r2, r3
 801620c:	896b      	ldrh	r3, [r5, #10]
 801620e:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8016212:	f88d 0010 	strb.w	r0, [sp, #16]
 8016216:	1b5b      	subs	r3, r3, r5
 8016218:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801621a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801621c:	442b      	add	r3, r5
 801621e:	4d07      	ldr	r5, [pc, #28]	; (801623c <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8016220:	f8ad 1012 	strh.w	r1, [sp, #18]
 8016224:	a903      	add	r1, sp, #12
 8016226:	9503      	str	r5, [sp, #12]
 8016228:	f8ad 2014 	strh.w	r2, [sp, #20]
 801622c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016230:	6803      	ldr	r3, [r0, #0]
 8016232:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016234:	4798      	blx	r3
 8016236:	b007      	add	sp, #28
 8016238:	bd30      	pop	{r4, r5, pc}
 801623a:	bf00      	nop
 801623c:	08023560 	.word	0x08023560

08016240 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8016240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016244:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8016246:	b08a      	sub	sp, #40	; 0x28
 8016248:	4604      	mov	r4, r0
 801624a:	460d      	mov	r5, r1
 801624c:	b113      	cbz	r3, 8016254 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 801624e:	790b      	ldrb	r3, [r1, #4]
 8016250:	2b00      	cmp	r3, #0
 8016252:	d044      	beq.n	80162de <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8016254:	f104 0804 	add.w	r8, r4, #4
 8016258:	a803      	add	r0, sp, #12
 801625a:	4641      	mov	r1, r8
 801625c:	f7ff ff02 	bl	8016064 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016260:	792b      	ldrb	r3, [r5, #4]
 8016262:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8016266:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 801626a:	b983      	cbnz	r3, 801628e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 801626c:	f104 0336 	add.w	r3, r4, #54	; 0x36
 8016270:	892a      	ldrh	r2, [r5, #8]
 8016272:	88e9      	ldrh	r1, [r5, #6]
 8016274:	4640      	mov	r0, r8
 8016276:	1b92      	subs	r2, r2, r6
 8016278:	9301      	str	r3, [sp, #4]
 801627a:	1bc9      	subs	r1, r1, r7
 801627c:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8016280:	b212      	sxth	r2, r2
 8016282:	9300      	str	r3, [sp, #0]
 8016284:	b209      	sxth	r1, r1
 8016286:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801628a:	f7fb fc13 	bl	8011ab4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 801628e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8016290:	b329      	cbz	r1, 80162de <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8016292:	a805      	add	r0, sp, #20
 8016294:	f7ff fee6 	bl	8016064 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016298:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801629c:	792b      	ldrb	r3, [r5, #4]
 801629e:	a907      	add	r1, sp, #28
 80162a0:	1abf      	subs	r7, r7, r2
 80162a2:	88ea      	ldrh	r2, [r5, #6]
 80162a4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80162a6:	4417      	add	r7, r2
 80162a8:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 80162aa:	f88d 3020 	strb.w	r3, [sp, #32]
 80162ae:	4417      	add	r7, r2
 80162b0:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 80162b4:	1ab6      	subs	r6, r6, r2
 80162b6:	892a      	ldrh	r2, [r5, #8]
 80162b8:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 80162bc:	4416      	add	r6, r2
 80162be:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80162c0:	4416      	add	r6, r2
 80162c2:	4a08      	ldr	r2, [pc, #32]	; (80162e4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 80162c4:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 80162c8:	2600      	movs	r6, #0
 80162ca:	9207      	str	r2, [sp, #28]
 80162cc:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 80162d0:	6803      	ldr	r3, [r0, #0]
 80162d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80162d4:	4798      	blx	r3
 80162d6:	792b      	ldrb	r3, [r5, #4]
 80162d8:	b10b      	cbz	r3, 80162de <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 80162da:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 80162de:	b00a      	add	sp, #40	; 0x28
 80162e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80162e4:	08023538 	.word	0x08023538

080162e8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 80162e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80162ec:	460c      	mov	r4, r1
 80162ee:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80162f0:	b088      	sub	sp, #32
 80162f2:	4605      	mov	r5, r0
 80162f4:	2900      	cmp	r1, #0
 80162f6:	d06d      	beq.n	80163d4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 80162f8:	4668      	mov	r0, sp
 80162fa:	f7ff feb3 	bl	8016064 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80162fe:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 8016300:	88e3      	ldrh	r3, [r4, #6]
 8016302:	f9bd 8000 	ldrsh.w	r8, [sp]
 8016306:	440b      	add	r3, r1
 8016308:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 801630c:	b21b      	sxth	r3, r3
 801630e:	4543      	cmp	r3, r8
 8016310:	db31      	blt.n	8016376 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8016312:	f8bd c004 	ldrh.w	ip, [sp, #4]
 8016316:	44c4      	add	ip, r8
 8016318:	fa0f fc8c 	sxth.w	ip, ip
 801631c:	4563      	cmp	r3, ip
 801631e:	da2a      	bge.n	8016376 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8016320:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 8016322:	8926      	ldrh	r6, [r4, #8]
 8016324:	4416      	add	r6, r2
 8016326:	b236      	sxth	r6, r6
 8016328:	42be      	cmp	r6, r7
 801632a:	db24      	blt.n	8016376 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801632c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8016330:	4438      	add	r0, r7
 8016332:	b200      	sxth	r0, r0
 8016334:	4286      	cmp	r6, r0
 8016336:	da1e      	bge.n	8016376 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8016338:	8963      	ldrh	r3, [r4, #10]
 801633a:	4419      	add	r1, r3
 801633c:	b209      	sxth	r1, r1
 801633e:	4541      	cmp	r1, r8
 8016340:	db08      	blt.n	8016354 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8016342:	4561      	cmp	r1, ip
 8016344:	da06      	bge.n	8016354 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8016346:	89a3      	ldrh	r3, [r4, #12]
 8016348:	441a      	add	r2, r3
 801634a:	b212      	sxth	r2, r2
 801634c:	42ba      	cmp	r2, r7
 801634e:	db01      	blt.n	8016354 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8016350:	4282      	cmp	r2, r0
 8016352:	db10      	blt.n	8016376 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8016354:	4b21      	ldr	r3, [pc, #132]	; (80163dc <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 8016356:	a904      	add	r1, sp, #16
 8016358:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801635a:	9304      	str	r3, [sp, #16]
 801635c:	2302      	movs	r3, #2
 801635e:	f88d 3014 	strb.w	r3, [sp, #20]
 8016362:	2300      	movs	r3, #0
 8016364:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016368:	f8ad 3018 	strh.w	r3, [sp, #24]
 801636c:	f8ad 301a 	strh.w	r3, [sp, #26]
 8016370:	6803      	ldr	r3, [r0, #0]
 8016372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016374:	4798      	blx	r3
 8016376:	1d29      	adds	r1, r5, #4
 8016378:	a802      	add	r0, sp, #8
 801637a:	f7ff fe73 	bl	8016064 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801637e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8016382:	88e0      	ldrh	r0, [r4, #6]
 8016384:	eba3 0808 	sub.w	r8, r3, r8
 8016388:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801638c:	7921      	ldrb	r1, [r4, #4]
 801638e:	fa1f f888 	uxth.w	r8, r8
 8016392:	1bdf      	subs	r7, r3, r7
 8016394:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 8016398:	b2bb      	uxth	r3, r7
 801639a:	4440      	add	r0, r8
 801639c:	8922      	ldrh	r2, [r4, #8]
 801639e:	8967      	ldrh	r7, [r4, #10]
 80163a0:	4460      	add	r0, ip
 80163a2:	89a4      	ldrh	r4, [r4, #12]
 80163a4:	441a      	add	r2, r3
 80163a6:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 80163a8:	44b8      	add	r8, r7
 80163aa:	4423      	add	r3, r4
 80163ac:	f8ad 0016 	strh.w	r0, [sp, #22]
 80163b0:	4432      	add	r2, r6
 80163b2:	44e0      	add	r8, ip
 80163b4:	4433      	add	r3, r6
 80163b6:	4c0a      	ldr	r4, [pc, #40]	; (80163e0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 80163b8:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80163ba:	f88d 1014 	strb.w	r1, [sp, #20]
 80163be:	a904      	add	r1, sp, #16
 80163c0:	9404      	str	r4, [sp, #16]
 80163c2:	f8ad 2018 	strh.w	r2, [sp, #24]
 80163c6:	f8ad 801a 	strh.w	r8, [sp, #26]
 80163ca:	f8ad 301c 	strh.w	r3, [sp, #28]
 80163ce:	6803      	ldr	r3, [r0, #0]
 80163d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80163d2:	4798      	blx	r3
 80163d4:	b008      	add	sp, #32
 80163d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80163da:	bf00      	nop
 80163dc:	08023538 	.word	0x08023538
 80163e0:	0802354c 	.word	0x0802354c

080163e4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 80163e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80163e6:	4604      	mov	r4, r0
 80163e8:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 80163ec:	3201      	adds	r2, #1
 80163ee:	d112      	bne.n	8016416 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 80163f0:	2500      	movs	r5, #0
 80163f2:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 80163f6:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80163fa:	6803      	ldr	r3, [r0, #0]
 80163fc:	9500      	str	r5, [sp, #0]
 80163fe:	466d      	mov	r5, sp
 8016400:	f8ad 1004 	strh.w	r1, [sp, #4]
 8016404:	f8ad 2006 	strh.w	r2, [sp, #6]
 8016408:	4629      	mov	r1, r5
 801640a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801640c:	4798      	blx	r3
 801640e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8016412:	e884 0003 	stmia.w	r4, {r0, r1}
 8016416:	4620      	mov	r0, r4
 8016418:	b003      	add	sp, #12
 801641a:	bd30      	pop	{r4, r5, pc}

0801641c <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801641c:	b513      	push	{r0, r1, r4, lr}
 801641e:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 8016422:	4604      	mov	r4, r0
 8016424:	3301      	adds	r3, #1
 8016426:	d109      	bne.n	801643c <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8016428:	4601      	mov	r1, r0
 801642a:	4668      	mov	r0, sp
 801642c:	f7ff fe1a 	bl	8016064 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016430:	f8bd 3000 	ldrh.w	r3, [sp]
 8016434:	8423      	strh	r3, [r4, #32]
 8016436:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801643a:	8463      	strh	r3, [r4, #34]	; 0x22
 801643c:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8016440:	b002      	add	sp, #8
 8016442:	bd10      	pop	{r4, pc}

08016444 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 8016444:	b513      	push	{r0, r1, r4, lr}
 8016446:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801644a:	4604      	mov	r4, r0
 801644c:	3301      	adds	r3, #1
 801644e:	d109      	bne.n	8016464 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8016450:	4601      	mov	r1, r0
 8016452:	4668      	mov	r0, sp
 8016454:	f7ff fe06 	bl	8016064 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016458:	f8bd 3000 	ldrh.w	r3, [sp]
 801645c:	8423      	strh	r3, [r4, #32]
 801645e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8016462:	8463      	strh	r3, [r4, #34]	; 0x22
 8016464:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 8016468:	b002      	add	sp, #8
 801646a:	bd10      	pop	{r4, pc}

0801646c <_ZN8touchgfx6ScreenC1Ev>:
 801646c:	b570      	push	{r4, r5, r6, lr}
 801646e:	4b17      	ldr	r3, [pc, #92]	; (80164cc <_ZN8touchgfx6ScreenC1Ev+0x60>)
 8016470:	4605      	mov	r5, r0
 8016472:	4a17      	ldr	r2, [pc, #92]	; (80164d0 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 8016474:	2101      	movs	r1, #1
 8016476:	f845 3b04 	str.w	r3, [r5], #4
 801647a:	2300      	movs	r3, #0
 801647c:	6042      	str	r2, [r0, #4]
 801647e:	4604      	mov	r4, r0
 8016480:	8103      	strh	r3, [r0, #8]
 8016482:	8143      	strh	r3, [r0, #10]
 8016484:	8183      	strh	r3, [r0, #12]
 8016486:	81c3      	strh	r3, [r0, #14]
 8016488:	8203      	strh	r3, [r0, #16]
 801648a:	8243      	strh	r3, [r0, #18]
 801648c:	8283      	strh	r3, [r0, #20]
 801648e:	82c3      	strh	r3, [r0, #22]
 8016490:	6203      	str	r3, [r0, #32]
 8016492:	8483      	strh	r3, [r0, #36]	; 0x24
 8016494:	84c3      	strh	r3, [r0, #38]	; 0x26
 8016496:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 801649a:	6343      	str	r3, [r0, #52]	; 0x34
 801649c:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 80164a0:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 80164a4:	e9c0 3306 	strd	r3, r3, [r0, #24]
 80164a8:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 80164ac:	4b09      	ldr	r3, [pc, #36]	; (80164d4 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 80164ae:	4628      	mov	r0, r5
 80164b0:	f9b3 6000 	ldrsh.w	r6, [r3]
 80164b4:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80164b6:	4a08      	ldr	r2, [pc, #32]	; (80164d8 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 80164b8:	f9b2 1000 	ldrsh.w	r1, [r2]
 80164bc:	4798      	blx	r3
 80164be:	6863      	ldr	r3, [r4, #4]
 80164c0:	4628      	mov	r0, r5
 80164c2:	4631      	mov	r1, r6
 80164c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80164c6:	4798      	blx	r3
 80164c8:	4620      	mov	r0, r4
 80164ca:	bd70      	pop	{r4, r5, r6, pc}
 80164cc:	08023574 	.word	0x08023574
 80164d0:	080230e4 	.word	0x080230e4
 80164d4:	2400699a 	.word	0x2400699a
 80164d8:	24006998 	.word	0x24006998

080164dc <_ZN8touchgfx6Screen4drawEv>:
 80164dc:	4b09      	ldr	r3, [pc, #36]	; (8016504 <_ZN8touchgfx6Screen4drawEv+0x28>)
 80164de:	b507      	push	{r0, r1, r2, lr}
 80164e0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80164e4:	2100      	movs	r1, #0
 80164e6:	4b08      	ldr	r3, [pc, #32]	; (8016508 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 80164e8:	9100      	str	r1, [sp, #0]
 80164ea:	4669      	mov	r1, sp
 80164ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80164f0:	f8ad 2004 	strh.w	r2, [sp, #4]
 80164f4:	f8ad 3006 	strh.w	r3, [sp, #6]
 80164f8:	6803      	ldr	r3, [r0, #0]
 80164fa:	689b      	ldr	r3, [r3, #8]
 80164fc:	4798      	blx	r3
 80164fe:	b003      	add	sp, #12
 8016500:	f85d fb04 	ldr.w	pc, [sp], #4
 8016504:	24006998 	.word	0x24006998
 8016508:	2400699a 	.word	0x2400699a

0801650c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801650c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016510:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8016514:	b089      	sub	sp, #36	; 0x24
 8016516:	4680      	mov	r8, r0
 8016518:	460c      	mov	r4, r1
 801651a:	2b00      	cmp	r3, #0
 801651c:	4615      	mov	r5, r2
 801651e:	dd0e      	ble.n	801653e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8016520:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8016524:	2b00      	cmp	r3, #0
 8016526:	dd0a      	ble.n	801653e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8016528:	4628      	mov	r0, r5
 801652a:	f7ff ff5b 	bl	80163e4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801652e:	4621      	mov	r1, r4
 8016530:	f7fe fba6 	bl	8014c80 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8016534:	69eb      	ldr	r3, [r5, #28]
 8016536:	b928      	cbnz	r0, 8016544 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 8016538:	461d      	mov	r5, r3
 801653a:	2b00      	cmp	r3, #0
 801653c:	d1f4      	bne.n	8016528 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801653e:	b009      	add	sp, #36	; 0x24
 8016540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016544:	ae04      	add	r6, sp, #16
 8016546:	2b00      	cmp	r3, #0
 8016548:	f000 80b5 	beq.w	80166b6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801654c:	682b      	ldr	r3, [r5, #0]
 801654e:	4629      	mov	r1, r5
 8016550:	a802      	add	r0, sp, #8
 8016552:	68db      	ldr	r3, [r3, #12]
 8016554:	4798      	blx	r3
 8016556:	4628      	mov	r0, r5
 8016558:	f7ff ff60 	bl	801641c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801655c:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 8016560:	4407      	add	r7, r0
 8016562:	4628      	mov	r0, r5
 8016564:	f7ff ff6e 	bl	8016444 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8016568:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801656c:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8016570:	b23f      	sxth	r7, r7
 8016572:	4418      	add	r0, r3
 8016574:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8016578:	4621      	mov	r1, r4
 801657a:	f8ad 2014 	strh.w	r2, [sp, #20]
 801657e:	f8ad 0012 	strh.w	r0, [sp, #18]
 8016582:	4630      	mov	r0, r6
 8016584:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016588:	f8ad 7010 	strh.w	r7, [sp, #16]
 801658c:	f7fb fb74 	bl	8011c78 <_ZN8touchgfx4RectaNERKS0_>
 8016590:	4628      	mov	r0, r5
 8016592:	f7ff ff27 	bl	80163e4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8016596:	ab06      	add	r3, sp, #24
 8016598:	4602      	mov	r2, r0
 801659a:	e896 0003 	ldmia.w	r6, {r0, r1}
 801659e:	e883 0003 	stmia.w	r3, {r0, r1}
 80165a2:	4611      	mov	r1, r2
 80165a4:	4618      	mov	r0, r3
 80165a6:	f7fb fb67 	bl	8011c78 <_ZN8touchgfx4RectaNERKS0_>
 80165aa:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80165ae:	f9b4 1000 	ldrsh.w	r1, [r4]
 80165b2:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 80165b6:	4299      	cmp	r1, r3
 80165b8:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 80165bc:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 80165c0:	d10b      	bne.n	80165da <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 80165c2:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80165c6:	4552      	cmp	r2, sl
 80165c8:	d107      	bne.n	80165da <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 80165ca:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 80165ce:	455a      	cmp	r2, fp
 80165d0:	d103      	bne.n	80165da <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 80165d2:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80165d6:	454a      	cmp	r2, r9
 80165d8:	d06d      	beq.n	80166b6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 80165da:	f1bb 0f00 	cmp.w	fp, #0
 80165de:	dd65      	ble.n	80166ac <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 80165e0:	f1b9 0f00 	cmp.w	r9, #0
 80165e4:	dd62      	ble.n	80166ac <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 80165e6:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80165ea:	fa1f f08a 	uxth.w	r0, sl
 80165ee:	4552      	cmp	r2, sl
 80165f0:	9000      	str	r0, [sp, #0]
 80165f2:	da12      	bge.n	801661a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 80165f4:	9301      	str	r3, [sp, #4]
 80165f6:	9b00      	ldr	r3, [sp, #0]
 80165f8:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80165fc:	f8ad 2012 	strh.w	r2, [sp, #18]
 8016600:	1a9a      	subs	r2, r3, r2
 8016602:	f8ad 1010 	strh.w	r1, [sp, #16]
 8016606:	4631      	mov	r1, r6
 8016608:	f8ad 0014 	strh.w	r0, [sp, #20]
 801660c:	4640      	mov	r0, r8
 801660e:	f8ad 2016 	strh.w	r2, [sp, #22]
 8016612:	69ea      	ldr	r2, [r5, #28]
 8016614:	f7ff ff7a 	bl	801650c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8016618:	9b01      	ldr	r3, [sp, #4]
 801661a:	f9b4 2000 	ldrsh.w	r2, [r4]
 801661e:	b29f      	uxth	r7, r3
 8016620:	429a      	cmp	r2, r3
 8016622:	da0d      	bge.n	8016640 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 8016624:	f8ad 2010 	strh.w	r2, [sp, #16]
 8016628:	1aba      	subs	r2, r7, r2
 801662a:	f8ad a012 	strh.w	sl, [sp, #18]
 801662e:	4631      	mov	r1, r6
 8016630:	f8ad 2014 	strh.w	r2, [sp, #20]
 8016634:	4640      	mov	r0, r8
 8016636:	f8ad 9016 	strh.w	r9, [sp, #22]
 801663a:	69ea      	ldr	r2, [r5, #28]
 801663c:	f7ff ff66 	bl	801650c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8016640:	8822      	ldrh	r2, [r4, #0]
 8016642:	445f      	add	r7, fp
 8016644:	88a3      	ldrh	r3, [r4, #4]
 8016646:	b2bf      	uxth	r7, r7
 8016648:	4413      	add	r3, r2
 801664a:	b23a      	sxth	r2, r7
 801664c:	b29b      	uxth	r3, r3
 801664e:	b219      	sxth	r1, r3
 8016650:	4291      	cmp	r1, r2
 8016652:	dd0d      	ble.n	8016670 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 8016654:	1bdb      	subs	r3, r3, r7
 8016656:	f8ad 2010 	strh.w	r2, [sp, #16]
 801665a:	f8ad a012 	strh.w	sl, [sp, #18]
 801665e:	4631      	mov	r1, r6
 8016660:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016664:	4640      	mov	r0, r8
 8016666:	f8ad 9016 	strh.w	r9, [sp, #22]
 801666a:	69ea      	ldr	r2, [r5, #28]
 801666c:	f7ff ff4e 	bl	801650c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8016670:	88e2      	ldrh	r2, [r4, #6]
 8016672:	8863      	ldrh	r3, [r4, #2]
 8016674:	4413      	add	r3, r2
 8016676:	9a00      	ldr	r2, [sp, #0]
 8016678:	444a      	add	r2, r9
 801667a:	b29b      	uxth	r3, r3
 801667c:	fa1f f982 	uxth.w	r9, r2
 8016680:	b219      	sxth	r1, r3
 8016682:	fa0f f289 	sxth.w	r2, r9
 8016686:	428a      	cmp	r2, r1
 8016688:	da15      	bge.n	80166b6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801668a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801668e:	eba3 0309 	sub.w	r3, r3, r9
 8016692:	f9b4 0000 	ldrsh.w	r0, [r4]
 8016696:	f8ad 1014 	strh.w	r1, [sp, #20]
 801669a:	4631      	mov	r1, r6
 801669c:	f8ad 0010 	strh.w	r0, [sp, #16]
 80166a0:	f8ad 2012 	strh.w	r2, [sp, #18]
 80166a4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80166a8:	69ea      	ldr	r2, [r5, #28]
 80166aa:	e001      	b.n	80166b0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 80166ac:	69ea      	ldr	r2, [r5, #28]
 80166ae:	4621      	mov	r1, r4
 80166b0:	4640      	mov	r0, r8
 80166b2:	f7ff ff2b 	bl	801650c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80166b6:	4628      	mov	r0, r5
 80166b8:	f7ff fe94 	bl	80163e4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 80166bc:	6861      	ldr	r1, [r4, #4]
 80166be:	4602      	mov	r2, r0
 80166c0:	4633      	mov	r3, r6
 80166c2:	6820      	ldr	r0, [r4, #0]
 80166c4:	c303      	stmia	r3!, {r0, r1}
 80166c6:	4611      	mov	r1, r2
 80166c8:	4630      	mov	r0, r6
 80166ca:	f7fb fad5 	bl	8011c78 <_ZN8touchgfx4RectaNERKS0_>
 80166ce:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 80166d2:	2b00      	cmp	r3, #0
 80166d4:	f77f af33 	ble.w	801653e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80166d8:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 80166dc:	2b00      	cmp	r3, #0
 80166de:	f77f af2e 	ble.w	801653e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80166e2:	4628      	mov	r0, r5
 80166e4:	f7ff fe9a 	bl	801641c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 80166e8:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80166ec:	1a18      	subs	r0, r3, r0
 80166ee:	f8ad 0010 	strh.w	r0, [sp, #16]
 80166f2:	4628      	mov	r0, r5
 80166f4:	f7ff fea6 	bl	8016444 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 80166f8:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80166fc:	4631      	mov	r1, r6
 80166fe:	1a18      	subs	r0, r3, r0
 8016700:	f8ad 0012 	strh.w	r0, [sp, #18]
 8016704:	4628      	mov	r0, r5
 8016706:	682b      	ldr	r3, [r5, #0]
 8016708:	689b      	ldr	r3, [r3, #8]
 801670a:	4798      	blx	r3
 801670c:	e717      	b.n	801653e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801670e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801670e:	b570      	push	{r4, r5, r6, lr}
 8016710:	1d06      	adds	r6, r0, #4
 8016712:	b086      	sub	sp, #24
 8016714:	460c      	mov	r4, r1
 8016716:	2300      	movs	r3, #0
 8016718:	4631      	mov	r1, r6
 801671a:	4605      	mov	r5, r0
 801671c:	a802      	add	r0, sp, #8
 801671e:	9301      	str	r3, [sp, #4]
 8016720:	f7ff fca0 	bl	8016064 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016724:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8016728:	8822      	ldrh	r2, [r4, #0]
 801672a:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 801672e:	1ad2      	subs	r2, r2, r3
 8016730:	8863      	ldrh	r3, [r4, #2]
 8016732:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8016736:	1a5b      	subs	r3, r3, r1
 8016738:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801673c:	f8ad 2010 	strh.w	r2, [sp, #16]
 8016740:	aa01      	add	r2, sp, #4
 8016742:	f8ad 0014 	strh.w	r0, [sp, #20]
 8016746:	4630      	mov	r0, r6
 8016748:	f8ad 1016 	strh.w	r1, [sp, #22]
 801674c:	a904      	add	r1, sp, #16
 801674e:	f8ad 3012 	strh.w	r3, [sp, #18]
 8016752:	f7fb fb69 	bl	8011e28 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 8016756:	9a01      	ldr	r2, [sp, #4]
 8016758:	b11a      	cbz	r2, 8016762 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 801675a:	4621      	mov	r1, r4
 801675c:	4628      	mov	r0, r5
 801675e:	f7ff fed5 	bl	801650c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8016762:	b006      	add	sp, #24
 8016764:	bd70      	pop	{r4, r5, r6, pc}

08016766 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 8016766:	4602      	mov	r2, r0
 8016768:	b530      	push	{r4, r5, lr}
 801676a:	4604      	mov	r4, r0
 801676c:	b085      	sub	sp, #20
 801676e:	f852 0f08 	ldr.w	r0, [r2, #8]!
 8016772:	460d      	mov	r5, r1
 8016774:	466b      	mov	r3, sp
 8016776:	6851      	ldr	r1, [r2, #4]
 8016778:	c303      	stmia	r3!, {r0, r1}
 801677a:	4629      	mov	r1, r5
 801677c:	4668      	mov	r0, sp
 801677e:	f7fb fa7b 	bl	8011c78 <_ZN8touchgfx4RectaNERKS0_>
 8016782:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8016786:	b12b      	cbz	r3, 8016794 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 8016788:	4669      	mov	r1, sp
 801678a:	4620      	mov	r0, r4
 801678c:	f7ff ffbf 	bl	801670e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 8016790:	b005      	add	sp, #20
 8016792:	bd30      	pop	{r4, r5, pc}
 8016794:	3404      	adds	r4, #4
 8016796:	a802      	add	r0, sp, #8
 8016798:	4621      	mov	r1, r4
 801679a:	f7ff fc63 	bl	8016064 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801679e:	f8bd 3000 	ldrh.w	r3, [sp]
 80167a2:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 80167a6:	4669      	mov	r1, sp
 80167a8:	4620      	mov	r0, r4
 80167aa:	1a9b      	subs	r3, r3, r2
 80167ac:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80167b0:	f8ad 3000 	strh.w	r3, [sp]
 80167b4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80167b8:	1a9b      	subs	r3, r3, r2
 80167ba:	f8ad 3002 	strh.w	r3, [sp, #2]
 80167be:	f7fb fafa 	bl	8011db6 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 80167c2:	e7e5      	b.n	8016790 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

080167c4 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 80167c4:	460b      	mov	r3, r1
 80167c6:	680a      	ldr	r2, [r1, #0]
 80167c8:	1d01      	adds	r1, r0, #4
 80167ca:	6992      	ldr	r2, [r2, #24]
 80167cc:	4618      	mov	r0, r3
 80167ce:	4710      	bx	r2

080167d0 <_ZN8touchgfx12TextProviderC1Ev>:
 80167d0:	b538      	push	{r3, r4, r5, lr}
 80167d2:	2500      	movs	r5, #0
 80167d4:	2302      	movs	r3, #2
 80167d6:	4604      	mov	r4, r0
 80167d8:	220e      	movs	r2, #14
 80167da:	7403      	strb	r3, [r0, #16]
 80167dc:	4629      	mov	r1, r5
 80167de:	6145      	str	r5, [r0, #20]
 80167e0:	7605      	strb	r5, [r0, #24]
 80167e2:	83c5      	strh	r5, [r0, #30]
 80167e4:	8405      	strh	r5, [r0, #32]
 80167e6:	86c5      	strh	r5, [r0, #54]	; 0x36
 80167e8:	8705      	strh	r5, [r0, #56]	; 0x38
 80167ea:	87c5      	strh	r5, [r0, #62]	; 0x3e
 80167ec:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 80167f0:	e9c0 5500 	strd	r5, r5, [r0]
 80167f4:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 80167f8:	304c      	adds	r0, #76	; 0x4c
 80167fa:	f00a fcea 	bl	80211d2 <memset>
 80167fe:	2301      	movs	r3, #1
 8016800:	4620      	mov	r0, r4
 8016802:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 8016806:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801680a:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 801680e:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 8016812:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 8016816:	f7ee fcdb 	bl	80051d0 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801681a:	4620      	mov	r0, r4
 801681c:	bd38      	pop	{r3, r4, r5, pc}

0801681e <_ZN8touchgfx12TextProvider11endOfStringEv>:
 801681e:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8016820:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8016824:	8c40      	ldrh	r0, [r0, #34]	; 0x22
 8016826:	fab0 f080 	clz	r0, r0
 801682a:	0940      	lsrs	r0, r0, #5
 801682c:	4770      	bx	lr

0801682e <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801682e:	b530      	push	{r4, r5, lr}
 8016830:	2500      	movs	r5, #0
 8016832:	2401      	movs	r4, #1
 8016834:	6843      	ldr	r3, [r0, #4]
 8016836:	b913      	cbnz	r3, 801683e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 8016838:	6803      	ldr	r3, [r0, #0]
 801683a:	b313      	cbz	r3, 8016882 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801683c:	6043      	str	r3, [r0, #4]
 801683e:	7e03      	ldrb	r3, [r0, #24]
 8016840:	b143      	cbz	r3, 8016854 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 8016842:	6943      	ldr	r3, [r0, #20]
 8016844:	b12b      	cbz	r3, 8016852 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8016846:	881a      	ldrh	r2, [r3, #0]
 8016848:	b11a      	cbz	r2, 8016852 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801684a:	1c9a      	adds	r2, r3, #2
 801684c:	6142      	str	r2, [r0, #20]
 801684e:	8818      	ldrh	r0, [r3, #0]
 8016850:	bd30      	pop	{r4, r5, pc}
 8016852:	7605      	strb	r5, [r0, #24]
 8016854:	6843      	ldr	r3, [r0, #4]
 8016856:	8819      	ldrh	r1, [r3, #0]
 8016858:	b199      	cbz	r1, 8016882 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801685a:	1c9a      	adds	r2, r3, #2
 801685c:	2902      	cmp	r1, #2
 801685e:	6042      	str	r2, [r0, #4]
 8016860:	d1f5      	bne.n	801684e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 8016862:	7c03      	ldrb	r3, [r0, #16]
 8016864:	2b01      	cmp	r3, #1
 8016866:	d8e5      	bhi.n	8016834 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8016868:	1c5a      	adds	r2, r3, #1
 801686a:	3302      	adds	r3, #2
 801686c:	7402      	strb	r2, [r0, #16]
 801686e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8016872:	6143      	str	r3, [r0, #20]
 8016874:	2b00      	cmp	r3, #0
 8016876:	d0dd      	beq.n	8016834 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8016878:	881b      	ldrh	r3, [r3, #0]
 801687a:	2b00      	cmp	r3, #0
 801687c:	d0da      	beq.n	8016834 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801687e:	7604      	strb	r4, [r0, #24]
 8016880:	e7d8      	b.n	8016834 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8016882:	2000      	movs	r0, #0
 8016884:	e7e4      	b.n	8016850 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

08016886 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 8016886:	6001      	str	r1, [r0, #0]
 8016888:	2100      	movs	r1, #0
 801688a:	b430      	push	{r4, r5}
 801688c:	6041      	str	r1, [r0, #4]
 801688e:	6815      	ldr	r5, [r2, #0]
 8016890:	6085      	str	r5, [r0, #8]
 8016892:	6852      	ldr	r2, [r2, #4]
 8016894:	6443      	str	r3, [r0, #68]	; 0x44
 8016896:	9b02      	ldr	r3, [sp, #8]
 8016898:	60c2      	str	r2, [r0, #12]
 801689a:	7401      	strb	r1, [r0, #16]
 801689c:	6141      	str	r1, [r0, #20]
 801689e:	7601      	strb	r1, [r0, #24]
 80168a0:	8701      	strh	r1, [r0, #56]	; 0x38
 80168a2:	8401      	strh	r1, [r0, #32]
 80168a4:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 80168a8:	6483      	str	r3, [r0, #72]	; 0x48
 80168aa:	bc30      	pop	{r4, r5}
 80168ac:	f7ee bc90 	b.w	80051d0 <_ZN8touchgfx12TextProvider18initializeInternalEv>

080168b0 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>:
 80168b0:	b408      	push	{r3}
 80168b2:	b510      	push	{r4, lr}
 80168b4:	b085      	sub	sp, #20
 80168b6:	ac07      	add	r4, sp, #28
 80168b8:	f854 3b04 	ldr.w	r3, [r4], #4
 80168bc:	9300      	str	r3, [sp, #0]
 80168be:	4613      	mov	r3, r2
 80168c0:	4622      	mov	r2, r4
 80168c2:	9403      	str	r4, [sp, #12]
 80168c4:	f7ff ffdf 	bl	8016886 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80168c8:	b005      	add	sp, #20
 80168ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80168ce:	b001      	add	sp, #4
 80168d0:	4770      	bx	lr

080168d2 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 80168d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80168d4:	4605      	mov	r5, r0
 80168d6:	4608      	mov	r0, r1
 80168d8:	b1f1      	cbz	r1, 8016918 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 80168da:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 80168de:	460b      	mov	r3, r1
 80168e0:	f101 0708 	add.w	r7, r1, #8
 80168e4:	4622      	mov	r2, r4
 80168e6:	6818      	ldr	r0, [r3, #0]
 80168e8:	3308      	adds	r3, #8
 80168ea:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80168ee:	4626      	mov	r6, r4
 80168f0:	42bb      	cmp	r3, r7
 80168f2:	c603      	stmia	r6!, {r0, r1}
 80168f4:	4634      	mov	r4, r6
 80168f6:	d1f6      	bne.n	80168e6 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 80168f8:	6818      	ldr	r0, [r3, #0]
 80168fa:	6030      	str	r0, [r6, #0]
 80168fc:	4610      	mov	r0, r2
 80168fe:	889b      	ldrh	r3, [r3, #4]
 8016900:	80b3      	strh	r3, [r6, #4]
 8016902:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 8016906:	015b      	lsls	r3, r3, #5
 8016908:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801690c:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 8016910:	430b      	orrs	r3, r1
 8016912:	425b      	negs	r3, r3
 8016914:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 8016918:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801691a <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801691a:	b538      	push	{r3, r4, r5, lr}
 801691c:	460c      	mov	r4, r1
 801691e:	6811      	ldr	r1, [r2, #0]
 8016920:	4610      	mov	r0, r2
 8016922:	68cd      	ldr	r5, [r1, #12]
 8016924:	4619      	mov	r1, r3
 8016926:	47a8      	blx	r5
 8016928:	2800      	cmp	r0, #0
 801692a:	bf08      	it	eq
 801692c:	4620      	moveq	r0, r4
 801692e:	bd38      	pop	{r3, r4, r5, pc}

08016930 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8016930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016932:	4604      	mov	r4, r0
 8016934:	4615      	mov	r5, r2
 8016936:	4608      	mov	r0, r1
 8016938:	b93a      	cbnz	r2, 801694a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801693a:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801693e:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8016942:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 8016946:	4628      	mov	r0, r5
 8016948:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801694a:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801694e:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
 8016952:	8893      	ldrh	r3, [r2, #4]
 8016954:	ea4f 160c 	mov.w	r6, ip, lsl #4
 8016958:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801695c:	79ee      	ldrb	r6, [r5, #7]
 801695e:	4316      	orrs	r6, r2
 8016960:	19da      	adds	r2, r3, r7
 8016962:	b291      	uxth	r1, r2
 8016964:	b2b7      	uxth	r7, r6
 8016966:	291d      	cmp	r1, #29
 8016968:	d87b      	bhi.n	8016a62 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 801696a:	2201      	movs	r2, #1
 801696c:	10f6      	asrs	r6, r6, #3
 801696e:	408a      	lsls	r2, r1
 8016970:	4974      	ldr	r1, [pc, #464]	; (8016b44 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 8016972:	420a      	tst	r2, r1
 8016974:	d12e      	bne.n	80169d4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 8016976:	f412 7f60 	tst.w	r2, #896	; 0x380
 801697a:	d072      	beq.n	8016a62 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 801697c:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 8016980:	462b      	mov	r3, r5
 8016982:	f105 0e08 	add.w	lr, r5, #8
 8016986:	4615      	mov	r5, r2
 8016988:	6818      	ldr	r0, [r3, #0]
 801698a:	3308      	adds	r3, #8
 801698c:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8016990:	4694      	mov	ip, r2
 8016992:	4573      	cmp	r3, lr
 8016994:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8016998:	4662      	mov	r2, ip
 801699a:	d1f5      	bne.n	8016988 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 801699c:	6818      	ldr	r0, [r3, #0]
 801699e:	f8cc 0000 	str.w	r0, [ip]
 80169a2:	889b      	ldrh	r3, [r3, #4]
 80169a4:	f8ac 3004 	strh.w	r3, [ip, #4]
 80169a8:	b2b3      	uxth	r3, r6
 80169aa:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80169ae:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 80169b2:	1aca      	subs	r2, r1, r3
 80169b4:	1bcf      	subs	r7, r1, r7
 80169b6:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 80169ba:	b292      	uxth	r2, r2
 80169bc:	1afb      	subs	r3, r7, r3
 80169be:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 80169c2:	10d2      	asrs	r2, r2, #3
 80169c4:	f002 0260 	and.w	r2, r2, #96	; 0x60
 80169c8:	4302      	orrs	r2, r0
 80169ca:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 80169ce:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 80169d2:	e7b8      	b.n	8016946 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 80169d4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80169d6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80169da:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 80169dc:	f640 6333 	movw	r3, #3635	; 0xe33
 80169e0:	4299      	cmp	r1, r3
 80169e2:	d110      	bne.n	8016a06 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
 80169e4:	6803      	ldr	r3, [r0, #0]
 80169e6:	68db      	ldr	r3, [r3, #12]
 80169e8:	4798      	blx	r3
 80169ea:	7b41      	ldrb	r1, [r0, #13]
 80169ec:	00cb      	lsls	r3, r1, #3
 80169ee:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80169f2:	7a03      	ldrb	r3, [r0, #8]
 80169f4:	0648      	lsls	r0, r1, #25
 80169f6:	ea43 0302 	orr.w	r3, r3, r2
 80169fa:	bf44      	itt	mi
 80169fc:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8016a00:	b21b      	sxthmi	r3, r3
 8016a02:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8016a06:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8016a0a:	462a      	mov	r2, r5
 8016a0c:	f105 0c08 	add.w	ip, r5, #8
 8016a10:	443b      	add	r3, r7
 8016a12:	4433      	add	r3, r6
 8016a14:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 8016a18:	b29b      	uxth	r3, r3
 8016a1a:	4635      	mov	r5, r6
 8016a1c:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8016a20:	6810      	ldr	r0, [r2, #0]
 8016a22:	3208      	adds	r2, #8
 8016a24:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8016a28:	4637      	mov	r7, r6
 8016a2a:	4562      	cmp	r2, ip
 8016a2c:	c703      	stmia	r7!, {r0, r1}
 8016a2e:	463e      	mov	r6, r7
 8016a30:	d1f6      	bne.n	8016a20 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
 8016a32:	6810      	ldr	r0, [r2, #0]
 8016a34:	6038      	str	r0, [r7, #0]
 8016a36:	8892      	ldrh	r2, [r2, #4]
 8016a38:	80ba      	strh	r2, [r7, #4]
 8016a3a:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8016a3e:	10db      	asrs	r3, r3, #3
 8016a40:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8016a44:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8016a48:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8016a4c:	4313      	orrs	r3, r2
 8016a4e:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 8016a52:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8016a56:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 8016a5a:	1a9b      	subs	r3, r3, r2
 8016a5c:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 8016a60:	e771      	b.n	8016946 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8016a62:	f023 0204 	bic.w	r2, r3, #4
 8016a66:	f640 611b 	movw	r1, #3611	; 0xe1b
 8016a6a:	428a      	cmp	r2, r1
 8016a6c:	d003      	beq.n	8016a76 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x146>
 8016a6e:	f640 621d 	movw	r2, #3613	; 0xe1d
 8016a72:	4293      	cmp	r3, r2
 8016a74:	d120      	bne.n	8016ab8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x188>
 8016a76:	3b01      	subs	r3, #1
 8016a78:	4602      	mov	r2, r0
 8016a7a:	4629      	mov	r1, r5
 8016a7c:	4620      	mov	r0, r4
 8016a7e:	b29b      	uxth	r3, r3
 8016a80:	f7ff ff4b 	bl	801691a <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8016a84:	7b41      	ldrb	r1, [r0, #13]
 8016a86:	00cb      	lsls	r3, r1, #3
 8016a88:	0649      	lsls	r1, r1, #25
 8016a8a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8016a8e:	7a03      	ldrb	r3, [r0, #8]
 8016a90:	ea43 0302 	orr.w	r3, r3, r2
 8016a94:	bf44      	itt	mi
 8016a96:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8016a9a:	b21b      	sxthmi	r3, r3
 8016a9c:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8016aa0:	7b6b      	ldrb	r3, [r5, #13]
 8016aa2:	7aaa      	ldrb	r2, [r5, #10]
 8016aa4:	005b      	lsls	r3, r3, #1
 8016aa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016aaa:	4313      	orrs	r3, r2
 8016aac:	115a      	asrs	r2, r3, #5
 8016aae:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 8016ab2:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 8016ab6:	e035      	b.n	8016b24 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
 8016ab8:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 8016abc:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8016ac0:	f402 7180 	and.w	r1, r2, #256	; 0x100
 8016ac4:	7a2a      	ldrb	r2, [r5, #8]
 8016ac6:	ea42 0201 	orr.w	r2, r2, r1
 8016aca:	f640 6109 	movw	r1, #3593	; 0xe09
 8016ace:	bf1c      	itt	ne
 8016ad0:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 8016ad4:	b212      	sxthne	r2, r2
 8016ad6:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 8016ada:	f023 0210 	bic.w	r2, r3, #16
 8016ade:	428a      	cmp	r2, r1
 8016ae0:	d003      	beq.n	8016aea <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 8016ae2:	f640 6213 	movw	r2, #3603	; 0xe13
 8016ae6:	4293      	cmp	r3, r2
 8016ae8:	d129      	bne.n	8016b3e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
 8016aea:	7b6e      	ldrb	r6, [r5, #13]
 8016aec:	4629      	mov	r1, r5
 8016aee:	0076      	lsls	r6, r6, #1
 8016af0:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8016af4:	7aae      	ldrb	r6, [r5, #10]
 8016af6:	4316      	orrs	r6, r2
 8016af8:	f640 6213 	movw	r2, #3603	; 0xe13
 8016afc:	4293      	cmp	r3, r2
 8016afe:	4602      	mov	r2, r0
 8016b00:	4620      	mov	r0, r4
 8016b02:	bf16      	itet	ne
 8016b04:	f103 33ff 	addne.w	r3, r3, #4294967295
 8016b08:	f640 630c 	movweq	r3, #3596	; 0xe0c
 8016b0c:	b29b      	uxthne	r3, r3
 8016b0e:	f7ff ff04 	bl	801691a <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8016b12:	7b43      	ldrb	r3, [r0, #13]
 8016b14:	7a82      	ldrb	r2, [r0, #10]
 8016b16:	005b      	lsls	r3, r3, #1
 8016b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016b1c:	4313      	orrs	r3, r2
 8016b1e:	1af6      	subs	r6, r6, r3
 8016b20:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 8016b24:	7b69      	ldrb	r1, [r5, #13]
 8016b26:	00cb      	lsls	r3, r1, #3
 8016b28:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8016b2c:	7a2b      	ldrb	r3, [r5, #8]
 8016b2e:	4313      	orrs	r3, r2
 8016b30:	064a      	lsls	r2, r1, #25
 8016b32:	bf44      	itt	mi
 8016b34:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8016b38:	b21b      	sxthmi	r3, r3
 8016b3a:	1bdb      	subs	r3, r3, r7
 8016b3c:	e747      	b.n	80169ce <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 8016b3e:	2300      	movs	r3, #0
 8016b40:	e7b7      	b.n	8016ab2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x182>
 8016b42:	bf00      	nop
 8016b44:	3fc00079 	.word	0x3fc00079

08016b48 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 8016b48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016b4c:	4604      	mov	r4, r0
 8016b4e:	b942      	cbnz	r2, 8016b62 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 8016b50:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8016b54:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 8016b58:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8016b5c:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 8016b60:	e047      	b.n	8016bf2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8016b62:	7b51      	ldrb	r1, [r2, #13]
 8016b64:	8893      	ldrh	r3, [r2, #4]
 8016b66:	010d      	lsls	r5, r1, #4
 8016b68:	f405 7080 	and.w	r0, r5, #256	; 0x100
 8016b6c:	79d5      	ldrb	r5, [r2, #7]
 8016b6e:	4305      	orrs	r5, r0
 8016b70:	2d04      	cmp	r5, #4
 8016b72:	bfcc      	ite	gt
 8016b74:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 8016b78:	f04f 0e01 	movle.w	lr, #1
 8016b7c:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 8016b80:	f200 80ab 	bhi.w	8016cda <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 8016b84:	f240 60e7 	movw	r0, #1767	; 0x6e7
 8016b88:	4283      	cmp	r3, r0
 8016b8a:	d216      	bcs.n	8016bba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016b8c:	f240 605b 	movw	r0, #1627	; 0x65b
 8016b90:	4283      	cmp	r3, r0
 8016b92:	d859      	bhi.n	8016c48 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 8016b94:	f240 6057 	movw	r0, #1623	; 0x657
 8016b98:	4283      	cmp	r3, r0
 8016b9a:	d20e      	bcs.n	8016bba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016b9c:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8016ba0:	d24a      	bcs.n	8016c38 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 8016ba2:	f240 604e 	movw	r0, #1614	; 0x64e
 8016ba6:	4283      	cmp	r3, r0
 8016ba8:	d207      	bcs.n	8016bba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016baa:	f240 601a 	movw	r0, #1562	; 0x61a
 8016bae:	4283      	cmp	r3, r0
 8016bb0:	d02a      	beq.n	8016c08 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8016bb2:	d821      	bhi.n	8016bf8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 8016bb4:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 8016bb8:	d35b      	bcc.n	8016c72 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8016bba:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 8016bbe:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8016bc2:	f040 80d0 	bne.w	8016d66 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8016bc6:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 8016bca:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8016bce:	f040 80ca 	bne.w	8016d66 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8016bd2:	00cb      	lsls	r3, r1, #3
 8016bd4:	0649      	lsls	r1, r1, #25
 8016bd6:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8016bda:	7a13      	ldrb	r3, [r2, #8]
 8016bdc:	ea43 0300 	orr.w	r3, r3, r0
 8016be0:	bf44      	itt	mi
 8016be2:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8016be6:	b21b      	sxthmi	r3, r3
 8016be8:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8016bec:	1b5d      	subs	r5, r3, r5
 8016bee:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8016bf2:	4610      	mov	r0, r2
 8016bf4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016bf8:	f240 604b 	movw	r0, #1611	; 0x64b
 8016bfc:	4283      	cmp	r3, r0
 8016bfe:	d338      	bcc.n	8016c72 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8016c00:	f240 604c 	movw	r0, #1612	; 0x64c
 8016c04:	4283      	cmp	r3, r0
 8016c06:	d9d8      	bls.n	8016bba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016c08:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 8016c0c:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 8016c10:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8016c14:	f040 80f3 	bne.w	8016dfe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8016c18:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8016c1c:	f040 80ef 	bne.w	8016dfe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8016c20:	00cb      	lsls	r3, r1, #3
 8016c22:	064e      	lsls	r6, r1, #25
 8016c24:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8016c28:	7a13      	ldrb	r3, [r2, #8]
 8016c2a:	ea43 0300 	orr.w	r3, r3, r0
 8016c2e:	bf44      	itt	mi
 8016c30:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8016c34:	b21b      	sxthmi	r3, r3
 8016c36:	e7d9      	b.n	8016bec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 8016c38:	f240 6054 	movw	r0, #1620	; 0x654
 8016c3c:	4283      	cmp	r3, r0
 8016c3e:	d8e3      	bhi.n	8016c08 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8016c40:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8016c44:	d9e0      	bls.n	8016c08 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8016c46:	e7b8      	b.n	8016bba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016c48:	f240 6074 	movw	r0, #1652	; 0x674
 8016c4c:	4283      	cmp	r3, r0
 8016c4e:	d0b4      	beq.n	8016bba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016c50:	d82d      	bhi.n	8016cae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 8016c52:	f240 605e 	movw	r0, #1630	; 0x65e
 8016c56:	4283      	cmp	r3, r0
 8016c58:	d804      	bhi.n	8016c64 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 8016c5a:	f240 605d 	movw	r0, #1629	; 0x65d
 8016c5e:	4283      	cmp	r3, r0
 8016c60:	d3d2      	bcc.n	8016c08 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8016c62:	e7aa      	b.n	8016bba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016c64:	f240 605f 	movw	r0, #1631	; 0x65f
 8016c68:	4283      	cmp	r3, r0
 8016c6a:	d0cd      	beq.n	8016c08 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8016c6c:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 8016c70:	d0a3      	beq.n	8016bba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016c72:	00cb      	lsls	r3, r1, #3
 8016c74:	0649      	lsls	r1, r1, #25
 8016c76:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8016c7a:	7a13      	ldrb	r3, [r2, #8]
 8016c7c:	ea43 0300 	orr.w	r3, r3, r0
 8016c80:	bf44      	itt	mi
 8016c82:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8016c86:	b21b      	sxthmi	r3, r3
 8016c88:	1b5d      	subs	r5, r3, r5
 8016c8a:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8016c8e:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8016c92:	7b53      	ldrb	r3, [r2, #13]
 8016c94:	015b      	lsls	r3, r3, #5
 8016c96:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8016c9a:	7993      	ldrb	r3, [r2, #6]
 8016c9c:	430b      	orrs	r3, r1
 8016c9e:	2105      	movs	r1, #5
 8016ca0:	005b      	lsls	r3, r3, #1
 8016ca2:	fb93 f3f1 	sdiv	r3, r3, r1
 8016ca6:	f992 1009 	ldrsb.w	r1, [r2, #9]
 8016caa:	440b      	add	r3, r1
 8016cac:	e756      	b.n	8016b5c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 8016cae:	f240 60e2 	movw	r0, #1762	; 0x6e2
 8016cb2:	4283      	cmp	r3, r0
 8016cb4:	d809      	bhi.n	8016cca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 8016cb6:	f240 60df 	movw	r0, #1759	; 0x6df
 8016cba:	4283      	cmp	r3, r0
 8016cbc:	f4bf af7d 	bcs.w	8016bba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016cc0:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 8016cc4:	2b05      	cmp	r3, #5
 8016cc6:	d8d4      	bhi.n	8016c72 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8016cc8:	e777      	b.n	8016bba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016cca:	f240 60e3 	movw	r0, #1763	; 0x6e3
 8016cce:	4283      	cmp	r3, r0
 8016cd0:	d09a      	beq.n	8016c08 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8016cd2:	f240 60e4 	movw	r0, #1764	; 0x6e4
 8016cd6:	4283      	cmp	r3, r0
 8016cd8:	e7ca      	b.n	8016c70 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8016cda:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 8016cde:	d22b      	bcs.n	8016d38 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 8016ce0:	f640 00ed 	movw	r0, #2285	; 0x8ed
 8016ce4:	4283      	cmp	r3, r0
 8016ce6:	d28f      	bcs.n	8016c08 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8016ce8:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8016cec:	4283      	cmp	r3, r0
 8016cee:	d816      	bhi.n	8016d1e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 8016cf0:	f640 00e4 	movw	r0, #2276	; 0x8e4
 8016cf4:	4283      	cmp	r3, r0
 8016cf6:	f4bf af60 	bcs.w	8016bba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016cfa:	f240 60ec 	movw	r0, #1772	; 0x6ec
 8016cfe:	4283      	cmp	r3, r0
 8016d00:	d80a      	bhi.n	8016d18 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 8016d02:	f240 60eb 	movw	r0, #1771	; 0x6eb
 8016d06:	4283      	cmp	r3, r0
 8016d08:	f4bf af57 	bcs.w	8016bba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016d0c:	f240 60ea 	movw	r0, #1770	; 0x6ea
 8016d10:	4283      	cmp	r3, r0
 8016d12:	f43f af79 	beq.w	8016c08 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8016d16:	e7ac      	b.n	8016c72 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8016d18:	f240 60ed 	movw	r0, #1773	; 0x6ed
 8016d1c:	e7f8      	b.n	8016d10 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 8016d1e:	f640 00e8 	movw	r0, #2280	; 0x8e8
 8016d22:	4283      	cmp	r3, r0
 8016d24:	d802      	bhi.n	8016d2c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 8016d26:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8016d2a:	e798      	b.n	8016c5e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 8016d2c:	f640 00e9 	movw	r0, #2281	; 0x8e9
 8016d30:	4283      	cmp	r3, r0
 8016d32:	f47f af42 	bne.w	8016bba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016d36:	e767      	b.n	8016c08 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8016d38:	f640 00f6 	movw	r0, #2294	; 0x8f6
 8016d3c:	4283      	cmp	r3, r0
 8016d3e:	f43f af63 	beq.w	8016c08 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8016d42:	d802      	bhi.n	8016d4a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 8016d44:	f640 00f2 	movw	r0, #2290	; 0x8f2
 8016d48:	e7f2      	b.n	8016d30 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 8016d4a:	f640 00fa 	movw	r0, #2298	; 0x8fa
 8016d4e:	4283      	cmp	r3, r0
 8016d50:	d805      	bhi.n	8016d5e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 8016d52:	f640 00f9 	movw	r0, #2297	; 0x8f9
 8016d56:	4283      	cmp	r3, r0
 8016d58:	f4ff af2f 	bcc.w	8016bba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016d5c:	e754      	b.n	8016c08 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8016d5e:	f640 00fe 	movw	r0, #2302	; 0x8fe
 8016d62:	4283      	cmp	r3, r0
 8016d64:	e7af      	b.n	8016cc6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 8016d66:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 8016d6a:	4617      	mov	r7, r2
 8016d6c:	f102 0808 	add.w	r8, r2, #8
 8016d70:	4666      	mov	r6, ip
 8016d72:	6838      	ldr	r0, [r7, #0]
 8016d74:	3708      	adds	r7, #8
 8016d76:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8016d7a:	46e6      	mov	lr, ip
 8016d7c:	4547      	cmp	r7, r8
 8016d7e:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8016d82:	46f4      	mov	ip, lr
 8016d84:	d1f5      	bne.n	8016d72 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 8016d86:	6838      	ldr	r0, [r7, #0]
 8016d88:	f8ce 0000 	str.w	r0, [lr]
 8016d8c:	88b9      	ldrh	r1, [r7, #4]
 8016d8e:	f8ae 1004 	strh.w	r1, [lr, #4]
 8016d92:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 8016d96:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8016d9a:	d009      	beq.n	8016db0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 8016d9c:	7b51      	ldrb	r1, [r2, #13]
 8016d9e:	7992      	ldrb	r2, [r2, #6]
 8016da0:	0149      	lsls	r1, r1, #5
 8016da2:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8016da6:	4311      	orrs	r1, r2
 8016da8:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8016dac:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 8016db0:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8016db4:	b2ad      	uxth	r5, r5
 8016db6:	d00d      	beq.n	8016dd4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 8016db8:	442b      	add	r3, r5
 8016dba:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8016dbe:	b29b      	uxth	r3, r3
 8016dc0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8016dc4:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8016dc8:	10db      	asrs	r3, r3, #3
 8016dca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8016dce:	4313      	orrs	r3, r2
 8016dd0:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8016dd4:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8016dd8:	00cb      	lsls	r3, r1, #3
 8016dda:	064f      	lsls	r7, r1, #25
 8016ddc:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8016de0:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8016de4:	ea43 0302 	orr.w	r3, r3, r2
 8016de8:	bf44      	itt	mi
 8016dea:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8016dee:	b21b      	sxthmi	r3, r3
 8016df0:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8016df4:	1b5b      	subs	r3, r3, r5
 8016df6:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8016dfa:	4632      	mov	r2, r6
 8016dfc:	e6f9      	b.n	8016bf2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8016dfe:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 8016e02:	4617      	mov	r7, r2
 8016e04:	f102 0908 	add.w	r9, r2, #8
 8016e08:	4666      	mov	r6, ip
 8016e0a:	6838      	ldr	r0, [r7, #0]
 8016e0c:	3708      	adds	r7, #8
 8016e0e:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8016e12:	46e0      	mov	r8, ip
 8016e14:	454f      	cmp	r7, r9
 8016e16:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 8016e1a:	46c4      	mov	ip, r8
 8016e1c:	d1f5      	bne.n	8016e0a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 8016e1e:	6838      	ldr	r0, [r7, #0]
 8016e20:	f8c8 0000 	str.w	r0, [r8]
 8016e24:	88b9      	ldrh	r1, [r7, #4]
 8016e26:	f8a8 1004 	strh.w	r1, [r8, #4]
 8016e2a:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 8016e2e:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8016e32:	d009      	beq.n	8016e48 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 8016e34:	7b51      	ldrb	r1, [r2, #13]
 8016e36:	7992      	ldrb	r2, [r2, #6]
 8016e38:	0149      	lsls	r1, r1, #5
 8016e3a:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8016e3e:	4311      	orrs	r1, r2
 8016e40:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8016e44:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 8016e48:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8016e4c:	d00e      	beq.n	8016e6c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 8016e4e:	eba3 030e 	sub.w	r3, r3, lr
 8016e52:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8016e56:	b29b      	uxth	r3, r3
 8016e58:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8016e5c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8016e60:	10db      	asrs	r3, r3, #3
 8016e62:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8016e66:	4313      	orrs	r3, r2
 8016e68:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8016e6c:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8016e70:	00cb      	lsls	r3, r1, #3
 8016e72:	0648      	lsls	r0, r1, #25
 8016e74:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8016e78:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8016e7c:	ea43 0302 	orr.w	r3, r3, r2
 8016e80:	bf44      	itt	mi
 8016e82:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8016e86:	b21b      	sxthmi	r3, r3
 8016e88:	1b5d      	subs	r5, r3, r5
 8016e8a:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8016e8e:	e7b4      	b.n	8016dfa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

08016e90 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 8016e90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e94:	461e      	mov	r6, r3
 8016e96:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8016e98:	4604      	mov	r4, r0
 8016e9a:	4617      	mov	r7, r2
 8016e9c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8016ea0:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8016ea4:	f7ee f8ee 	bl	8005084 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8016ea8:	4605      	mov	r5, r0
 8016eaa:	b918      	cbnz	r0, 8016eb4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 8016eac:	6030      	str	r0, [r6, #0]
 8016eae:	4628      	mov	r0, r5
 8016eb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016eb4:	683b      	ldr	r3, [r7, #0]
 8016eb6:	4601      	mov	r1, r0
 8016eb8:	4638      	mov	r0, r7
 8016eba:	68db      	ldr	r3, [r3, #12]
 8016ebc:	4798      	blx	r3
 8016ebe:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 8016ec2:	4602      	mov	r2, r0
 8016ec4:	6030      	str	r0, [r6, #0]
 8016ec6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8016eca:	d213      	bcs.n	8016ef4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 8016ecc:	4643      	mov	r3, r8
 8016ece:	4639      	mov	r1, r7
 8016ed0:	4620      	mov	r0, r4
 8016ed2:	f7ff fe39 	bl	8016b48 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8016ed6:	6030      	str	r0, [r6, #0]
 8016ed8:	6833      	ldr	r3, [r6, #0]
 8016eda:	b143      	cbz	r3, 8016eee <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 8016edc:	7b5a      	ldrb	r2, [r3, #13]
 8016ede:	7a9b      	ldrb	r3, [r3, #10]
 8016ee0:	0052      	lsls	r2, r2, #1
 8016ee2:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8016ee6:	4313      	orrs	r3, r2
 8016ee8:	bf0c      	ite	eq
 8016eea:	2301      	moveq	r3, #1
 8016eec:	2300      	movne	r3, #0
 8016eee:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 8016ef2:	e7dc      	b.n	8016eae <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 8016ef4:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8016ef8:	b29b      	uxth	r3, r3
 8016efa:	2b7f      	cmp	r3, #127	; 0x7f
 8016efc:	d804      	bhi.n	8016f08 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 8016efe:	4639      	mov	r1, r7
 8016f00:	4620      	mov	r0, r4
 8016f02:	f7ff fd15 	bl	8016930 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8016f06:	e7e6      	b.n	8016ed6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 8016f08:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8016f0c:	2b00      	cmp	r3, #0
 8016f0e:	d0e3      	beq.n	8016ed8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8016f10:	f640 1302 	movw	r3, #2306	; 0x902
 8016f14:	429d      	cmp	r5, r3
 8016f16:	d1df      	bne.n	8016ed8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8016f18:	4601      	mov	r1, r0
 8016f1a:	4620      	mov	r0, r4
 8016f1c:	f7ff fcd9 	bl	80168d2 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8016f20:	e7d9      	b.n	8016ed6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

08016f22 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 8016f22:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016f26:	461e      	mov	r6, r3
 8016f28:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8016f2a:	4604      	mov	r4, r0
 8016f2c:	4617      	mov	r7, r2
 8016f2e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8016f32:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8016f36:	f7ee f8a5 	bl	8005084 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8016f3a:	4605      	mov	r5, r0
 8016f3c:	b918      	cbnz	r0, 8016f46 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 8016f3e:	6030      	str	r0, [r6, #0]
 8016f40:	4628      	mov	r0, r5
 8016f42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016f46:	683b      	ldr	r3, [r7, #0]
 8016f48:	4601      	mov	r1, r0
 8016f4a:	4638      	mov	r0, r7
 8016f4c:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8016f50:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8016f54:	47c8      	blx	r9
 8016f56:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 8016f5a:	4602      	mov	r2, r0
 8016f5c:	6030      	str	r0, [r6, #0]
 8016f5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8016f62:	d213      	bcs.n	8016f8c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 8016f64:	4643      	mov	r3, r8
 8016f66:	4639      	mov	r1, r7
 8016f68:	4620      	mov	r0, r4
 8016f6a:	f7ff fded 	bl	8016b48 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8016f6e:	6030      	str	r0, [r6, #0]
 8016f70:	6833      	ldr	r3, [r6, #0]
 8016f72:	b143      	cbz	r3, 8016f86 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 8016f74:	7b5a      	ldrb	r2, [r3, #13]
 8016f76:	7a9b      	ldrb	r3, [r3, #10]
 8016f78:	0052      	lsls	r2, r2, #1
 8016f7a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8016f7e:	4313      	orrs	r3, r2
 8016f80:	bf0c      	ite	eq
 8016f82:	2301      	moveq	r3, #1
 8016f84:	2300      	movne	r3, #0
 8016f86:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 8016f8a:	e7d9      	b.n	8016f40 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 8016f8c:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8016f90:	b29b      	uxth	r3, r3
 8016f92:	2b7f      	cmp	r3, #127	; 0x7f
 8016f94:	d804      	bhi.n	8016fa0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 8016f96:	4639      	mov	r1, r7
 8016f98:	4620      	mov	r0, r4
 8016f9a:	f7ff fcc9 	bl	8016930 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8016f9e:	e7e6      	b.n	8016f6e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 8016fa0:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8016fa4:	2b00      	cmp	r3, #0
 8016fa6:	d0e3      	beq.n	8016f70 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 8016fa8:	f640 1302 	movw	r3, #2306	; 0x902
 8016fac:	429d      	cmp	r5, r3
 8016fae:	d1df      	bne.n	8016f70 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 8016fb0:	4601      	mov	r1, r0
 8016fb2:	4620      	mov	r0, r4
 8016fb4:	f7ff fc8d 	bl	80168d2 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8016fb8:	e7d9      	b.n	8016f6e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

08016fba <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 8016fba:	b510      	push	{r4, lr}
 8016fbc:	4604      	mov	r4, r0
 8016fbe:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 8016fc2:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8016fc4:	b1e1      	cbz	r1, 8017000 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 8016fc6:	2b0a      	cmp	r3, #10
 8016fc8:	d02d      	beq.n	8017026 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 8016fca:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8016fcc:	3901      	subs	r1, #1
 8016fce:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8016fd2:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 8016fd4:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 8016fd8:	1c51      	adds	r1, r2, #1
 8016fda:	b289      	uxth	r1, r1
 8016fdc:	2901      	cmp	r1, #1
 8016fde:	bf8a      	itet	hi
 8016fe0:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8016fe4:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 8016fe6:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 8016fe8:	1c5a      	adds	r2, r3, #1
 8016fea:	8722      	strh	r2, [r4, #56]	; 0x38
 8016fec:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8016fee:	4413      	add	r3, r2
 8016ff0:	b29b      	uxth	r3, r3
 8016ff2:	2b09      	cmp	r3, #9
 8016ff4:	bf88      	it	hi
 8016ff6:	3b0a      	subhi	r3, #10
 8016ff8:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8016ffc:	8458      	strh	r0, [r3, #34]	; 0x22
 8016ffe:	e7de      	b.n	8016fbe <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 8017000:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8017002:	2b0a      	cmp	r3, #10
 8017004:	d00f      	beq.n	8017026 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 8017006:	4620      	mov	r0, r4
 8017008:	f7ff fc11 	bl	801682e <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801700c:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801700e:	1c5a      	adds	r2, r3, #1
 8017010:	8722      	strh	r2, [r4, #56]	; 0x38
 8017012:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8017014:	4413      	add	r3, r2
 8017016:	b29b      	uxth	r3, r3
 8017018:	2b09      	cmp	r3, #9
 801701a:	bf88      	it	hi
 801701c:	3b0a      	subhi	r3, #10
 801701e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8017022:	8458      	strh	r0, [r3, #34]	; 0x22
 8017024:	e7ec      	b.n	8017000 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 8017026:	bd10      	pop	{r4, pc}

08017028 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8017028:	b538      	push	{r3, r4, r5, lr}
 801702a:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801702c:	4604      	mov	r4, r0
 801702e:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 8017032:	8c55      	ldrh	r5, [r2, #34]	; 0x22
 8017034:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 8017036:	3a01      	subs	r2, #1
 8017038:	8702      	strh	r2, [r0, #56]	; 0x38
 801703a:	1c5a      	adds	r2, r3, #1
 801703c:	b292      	uxth	r2, r2
 801703e:	2a09      	cmp	r2, #9
 8017040:	bf8a      	itet	hi
 8017042:	3b09      	subhi	r3, #9
 8017044:	86c2      	strhls	r2, [r0, #54]	; 0x36
 8017046:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 8017048:	f7ff ffb7 	bl	8016fba <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801704c:	8c23      	ldrh	r3, [r4, #32]
 801704e:	2b01      	cmp	r3, #1
 8017050:	bf9c      	itt	ls
 8017052:	3301      	addls	r3, #1
 8017054:	8423      	strhls	r3, [r4, #32]
 8017056:	8be3      	ldrh	r3, [r4, #30]
 8017058:	b90b      	cbnz	r3, 801705e <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 801705a:	2302      	movs	r3, #2
 801705c:	83e3      	strh	r3, [r4, #30]
 801705e:	8be3      	ldrh	r3, [r4, #30]
 8017060:	4628      	mov	r0, r5
 8017062:	3b01      	subs	r3, #1
 8017064:	b29b      	uxth	r3, r3
 8017066:	83e3      	strh	r3, [r4, #30]
 8017068:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801706c:	8365      	strh	r5, [r4, #26]
 801706e:	bd38      	pop	{r3, r4, r5, pc}

08017070 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8017070:	428a      	cmp	r2, r1
 8017072:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017076:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
 8017078:	d932      	bls.n	80170e0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 801707a:	8f05      	ldrh	r5, [r0, #56]	; 0x38
 801707c:	1a54      	subs	r4, r2, r1
 801707e:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
 8017082:	19ee      	adds	r6, r5, r7
 8017084:	fa1f fe84 	uxth.w	lr, r4
 8017088:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 801708c:	3e01      	subs	r6, #1
 801708e:	b2b4      	uxth	r4, r6
 8017090:	eba4 090e 	sub.w	r9, r4, lr
 8017094:	fa1f f989 	uxth.w	r9, r9
 8017098:	2c09      	cmp	r4, #9
 801709a:	4626      	mov	r6, r4
 801709c:	bf88      	it	hi
 801709e:	f1a4 060a 	subhi.w	r6, r4, #10
 80170a2:	f1bc 0f00 	cmp.w	ip, #0
 80170a6:	f104 34ff 	add.w	r4, r4, #4294967295
 80170aa:	bf08      	it	eq
 80170ac:	f04f 0c02 	moveq.w	ip, #2
 80170b0:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 80170b4:	b2a4      	uxth	r4, r4
 80170b6:	f10c 3cff 	add.w	ip, ip, #4294967295
 80170ba:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
 80170be:	454c      	cmp	r4, r9
 80170c0:	fa1f fc8c 	uxth.w	ip, ip
 80170c4:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 80170c8:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
 80170cc:	d1e4      	bne.n	8017098 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 80170ce:	eba5 050e 	sub.w	r5, r5, lr
 80170d2:	eb0e 0408 	add.w	r4, lr, r8
 80170d6:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
 80170da:	8705      	strh	r5, [r0, #56]	; 0x38
 80170dc:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 80170e0:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 80170e2:	250a      	movs	r5, #10
 80170e4:	1a64      	subs	r4, r4, r1
 80170e6:	4439      	add	r1, r7
 80170e8:	b289      	uxth	r1, r1
 80170ea:	8704      	strh	r4, [r0, #56]	; 0x38
 80170ec:	2909      	cmp	r1, #9
 80170ee:	bf88      	it	hi
 80170f0:	390a      	subhi	r1, #10
 80170f2:	86c1      	strh	r1, [r0, #54]	; 0x36
 80170f4:	b18a      	cbz	r2, 801711a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 80170f6:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 80170f8:	3a01      	subs	r2, #1
 80170fa:	3101      	adds	r1, #1
 80170fc:	b292      	uxth	r2, r2
 80170fe:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 8017102:	8701      	strh	r1, [r0, #56]	; 0x38
 8017104:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 8017106:	b901      	cbnz	r1, 801710a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 8017108:	86c5      	strh	r5, [r0, #54]	; 0x36
 801710a:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801710c:	3901      	subs	r1, #1
 801710e:	b289      	uxth	r1, r1
 8017110:	86c1      	strh	r1, [r0, #54]	; 0x36
 8017112:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8017116:	844c      	strh	r4, [r1, #34]	; 0x22
 8017118:	e7ec      	b.n	80170f4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 801711a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801711e:	f7ff bf4c 	b.w	8016fba <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08017122 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 8017122:	b570      	push	{r4, r5, r6, lr}
 8017124:	2500      	movs	r5, #0
 8017126:	4295      	cmp	r5, r2
 8017128:	d011      	beq.n	801714e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 801712a:	8bc4      	ldrh	r4, [r0, #30]
 801712c:	f831 6b02 	ldrh.w	r6, [r1], #2
 8017130:	4414      	add	r4, r2
 8017132:	3c01      	subs	r4, #1
 8017134:	1b64      	subs	r4, r4, r5
 8017136:	b2a4      	uxth	r4, r4
 8017138:	2c01      	cmp	r4, #1
 801713a:	bf88      	it	hi
 801713c:	3c02      	subhi	r4, #2
 801713e:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8017142:	8b64      	ldrh	r4, [r4, #26]
 8017144:	42b4      	cmp	r4, r6
 8017146:	d117      	bne.n	8017178 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 8017148:	3501      	adds	r5, #1
 801714a:	b2ad      	uxth	r5, r5
 801714c:	e7eb      	b.n	8017126 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 801714e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8017152:	2400      	movs	r4, #0
 8017154:	4413      	add	r3, r2
 8017156:	b2a2      	uxth	r2, r4
 8017158:	429a      	cmp	r2, r3
 801715a:	da0f      	bge.n	801717c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 801715c:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 801715e:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 8017162:	3401      	adds	r4, #1
 8017164:	4432      	add	r2, r6
 8017166:	b292      	uxth	r2, r2
 8017168:	2a09      	cmp	r2, #9
 801716a:	bf88      	it	hi
 801716c:	3a0a      	subhi	r2, #10
 801716e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8017172:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 8017174:	42aa      	cmp	r2, r5
 8017176:	d0ee      	beq.n	8017156 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 8017178:	2000      	movs	r0, #0
 801717a:	bd70      	pop	{r4, r5, r6, pc}
 801717c:	2001      	movs	r0, #1
 801717e:	e7fc      	b.n	801717a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

08017180 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8017180:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017184:	4605      	mov	r5, r0
 8017186:	4616      	mov	r6, r2
 8017188:	1c8c      	adds	r4, r1, #2
 801718a:	8809      	ldrh	r1, [r1, #0]
 801718c:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 8017190:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 8017194:	42b3      	cmp	r3, r6
 8017196:	d124      	bne.n	80171e2 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 8017198:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801719c:	f3c1 1803 	ubfx	r8, r1, #4, #4
 80171a0:	f001 070f 	and.w	r7, r1, #15
 80171a4:	4652      	mov	r2, sl
 80171a6:	f8cd 8000 	str.w	r8, [sp]
 80171aa:	464b      	mov	r3, r9
 80171ac:	4621      	mov	r1, r4
 80171ae:	4628      	mov	r0, r5
 80171b0:	f7ff ffb7 	bl	8017122 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 80171b4:	4683      	mov	fp, r0
 80171b6:	b168      	cbz	r0, 80171d4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 80171b8:	eb0a 0109 	add.w	r1, sl, r9
 80171bc:	463a      	mov	r2, r7
 80171be:	4628      	mov	r0, r5
 80171c0:	4441      	add	r1, r8
 80171c2:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 80171c6:	4649      	mov	r1, r9
 80171c8:	f7ff ff52 	bl	8017070 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 80171cc:	4658      	mov	r0, fp
 80171ce:	b003      	add	sp, #12
 80171d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80171d4:	eb07 010a 	add.w	r1, r7, sl
 80171d8:	4449      	add	r1, r9
 80171da:	4441      	add	r1, r8
 80171dc:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 80171e0:	e7d2      	b.n	8017188 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 80171e2:	f04f 0b00 	mov.w	fp, #0
 80171e6:	e7f1      	b.n	80171cc <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

080171e8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 80171e8:	b570      	push	{r4, r5, r6, lr}
 80171ea:	8810      	ldrh	r0, [r2, #0]
 80171ec:	4298      	cmp	r0, r3
 80171ee:	d817      	bhi.n	8017220 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80171f0:	1e48      	subs	r0, r1, #1
 80171f2:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 80171f6:	4298      	cmp	r0, r3
 80171f8:	d312      	bcc.n	8017220 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80171fa:	2400      	movs	r4, #0
 80171fc:	428c      	cmp	r4, r1
 80171fe:	d20f      	bcs.n	8017220 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8017200:	1860      	adds	r0, r4, r1
 8017202:	1040      	asrs	r0, r0, #1
 8017204:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 8017208:	0085      	lsls	r5, r0, #2
 801720a:	42b3      	cmp	r3, r6
 801720c:	d902      	bls.n	8017214 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801720e:	3001      	adds	r0, #1
 8017210:	b284      	uxth	r4, r0
 8017212:	e7f3      	b.n	80171fc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8017214:	d201      	bcs.n	801721a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 8017216:	b281      	uxth	r1, r0
 8017218:	e7f0      	b.n	80171fc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801721a:	442a      	add	r2, r5
 801721c:	8850      	ldrh	r0, [r2, #2]
 801721e:	bd70      	pop	{r4, r5, r6, pc}
 8017220:	2000      	movs	r0, #0
 8017222:	e7fc      	b.n	801721e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

08017224 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 8017224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017228:	6c45      	ldr	r5, [r0, #68]	; 0x44
 801722a:	4604      	mov	r4, r0
 801722c:	260b      	movs	r6, #11
 801722e:	886f      	ldrh	r7, [r5, #2]
 8017230:	087f      	lsrs	r7, r7, #1
 8017232:	3e01      	subs	r6, #1
 8017234:	d013      	beq.n	801725e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8017236:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8017238:	462a      	mov	r2, r5
 801723a:	4639      	mov	r1, r7
 801723c:	4620      	mov	r0, r4
 801723e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8017242:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8017246:	4643      	mov	r3, r8
 8017248:	f7ff ffce 	bl	80171e8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801724c:	b138      	cbz	r0, 801725e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801724e:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 8017252:	4642      	mov	r2, r8
 8017254:	4620      	mov	r0, r4
 8017256:	f7ff ff93 	bl	8017180 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801725a:	2800      	cmp	r0, #0
 801725c:	d1e9      	bne.n	8017232 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801725e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08017264 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 8017264:	b570      	push	{r4, r5, r6, lr}
 8017266:	694a      	ldr	r2, [r1, #20]
 8017268:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801726a:	684b      	ldr	r3, [r1, #4]
 801726c:	1b54      	subs	r4, r2, r5
 801726e:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 8017270:	f000 8106 	beq.w	8017480 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 8017274:	1b9b      	subs	r3, r3, r6
 8017276:	d003      	beq.n	8017280 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8017278:	4363      	muls	r3, r4
 801727a:	2210      	movs	r2, #16
 801727c:	fb93 f3f2 	sdiv	r3, r3, r2
 8017280:	680c      	ldr	r4, [r1, #0]
 8017282:	698a      	ldr	r2, [r1, #24]
 8017284:	1b65      	subs	r5, r4, r5
 8017286:	f000 80fd 	beq.w	8017484 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801728a:	1b92      	subs	r2, r2, r6
 801728c:	d003      	beq.n	8017296 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801728e:	436a      	muls	r2, r5
 8017290:	2410      	movs	r4, #16
 8017292:	fb92 f2f4 	sdiv	r2, r2, r4
 8017296:	1a9b      	subs	r3, r3, r2
 8017298:	ed9f 4a89 	vldr	s8, [pc, #548]	; 80174c0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 801729c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80172a0:	460a      	mov	r2, r1
 80172a2:	ee07 3a90 	vmov	s15, r3
 80172a6:	f100 040c 	add.w	r4, r0, #12
 80172aa:	4603      	mov	r3, r0
 80172ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80172b0:	ee67 7a84 	vmul.f32	s15, s15, s8
 80172b4:	ee87 3a27 	vdiv.f32	s6, s14, s15
 80172b8:	eeb1 6a43 	vneg.f32	s12, s6
 80172bc:	edd2 7a02 	vldr	s15, [r2, #8]
 80172c0:	3214      	adds	r2, #20
 80172c2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80172c6:	ece3 6a01 	vstmia	r3!, {s13}
 80172ca:	429c      	cmp	r4, r3
 80172cc:	ed52 7a02 	vldr	s15, [r2, #-8]
 80172d0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80172d4:	edc3 7a02 	vstr	s15, [r3, #8]
 80172d8:	ed52 7a01 	vldr	s15, [r2, #-4]
 80172dc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80172e0:	edc3 7a05 	vstr	s15, [r3, #20]
 80172e4:	d1ea      	bne.n	80172bc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 80172e6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80172e8:	698b      	ldr	r3, [r1, #24]
 80172ea:	edd0 4a02 	vldr	s9, [r0, #8]
 80172ee:	1a9b      	subs	r3, r3, r2
 80172f0:	edd0 3a00 	vldr	s7, [r0]
 80172f4:	edd0 6a01 	vldr	s13, [r0, #4]
 80172f8:	ee07 3a90 	vmov	s15, r3
 80172fc:	684b      	ldr	r3, [r1, #4]
 80172fe:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8017302:	ed90 5a05 	vldr	s10, [r0, #20]
 8017306:	1a9b      	subs	r3, r3, r2
 8017308:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801730c:	ee73 4ae4 	vsub.f32	s9, s7, s9
 8017310:	ed90 2a03 	vldr	s4, [r0, #12]
 8017314:	ee07 3a10 	vmov	s14, r3
 8017318:	edd0 5a04 	vldr	s11, [r0, #16]
 801731c:	ee67 7a84 	vmul.f32	s15, s15, s8
 8017320:	ed90 1a07 	vldr	s2, [r0, #28]
 8017324:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017328:	edd0 2a06 	vldr	s5, [r0, #24]
 801732c:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8017330:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 8017334:	ee27 7a04 	vmul.f32	s14, s14, s8
 8017338:	ee32 5a45 	vsub.f32	s10, s4, s10
 801733c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8017340:	ee67 7a83 	vmul.f32	s15, s15, s6
 8017344:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 8017348:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801734a:	694a      	ldr	r2, [r1, #20]
 801734c:	1b13      	subs	r3, r2, r4
 801734e:	ee07 3a10 	vmov	s14, r3
 8017352:	680b      	ldr	r3, [r1, #0]
 8017354:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017358:	1b1b      	subs	r3, r3, r4
 801735a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801735e:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 8017362:	ee07 3a10 	vmov	s14, r3
 8017366:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801736a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801736e:	eee6 4a87 	vfma.f32	s9, s13, s14
 8017372:	ee64 4a86 	vmul.f32	s9, s9, s12
 8017376:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 801737a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801737c:	698b      	ldr	r3, [r1, #24]
 801737e:	1a9b      	subs	r3, r3, r2
 8017380:	ee06 3a90 	vmov	s13, r3
 8017384:	684b      	ldr	r3, [r1, #4]
 8017386:	1a9b      	subs	r3, r3, r2
 8017388:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801738c:	ee07 3a10 	vmov	s14, r3
 8017390:	ee66 6a84 	vmul.f32	s13, s13, s8
 8017394:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017398:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801739c:	ee27 7a04 	vmul.f32	s14, s14, s8
 80173a0:	eee5 6a87 	vfma.f32	s13, s11, s14
 80173a4:	ee66 6a83 	vmul.f32	s13, s13, s6
 80173a8:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 80173ac:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 80173ae:	694a      	ldr	r2, [r1, #20]
 80173b0:	1b13      	subs	r3, r2, r4
 80173b2:	ee07 3a10 	vmov	s14, r3
 80173b6:	680b      	ldr	r3, [r1, #0]
 80173b8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80173bc:	1b1b      	subs	r3, r3, r4
 80173be:	ee27 7a04 	vmul.f32	s14, s14, s8
 80173c2:	ee25 5a47 	vnmul.f32	s10, s10, s14
 80173c6:	ee07 3a10 	vmov	s14, r3
 80173ca:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80173ce:	ee27 7a04 	vmul.f32	s14, s14, s8
 80173d2:	eea5 5a87 	vfma.f32	s10, s11, s14
 80173d6:	edd0 5a08 	vldr	s11, [r0, #32]
 80173da:	ee31 1a65 	vsub.f32	s2, s2, s11
 80173de:	ee72 5ae5 	vsub.f32	s11, s5, s11
 80173e2:	ee25 5a06 	vmul.f32	s10, s10, s12
 80173e6:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 80173ea:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80173ec:	698b      	ldr	r3, [r1, #24]
 80173ee:	1a9b      	subs	r3, r3, r2
 80173f0:	ee07 3a10 	vmov	s14, r3
 80173f4:	684b      	ldr	r3, [r1, #4]
 80173f6:	1a9b      	subs	r3, r3, r2
 80173f8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80173fc:	ee01 3a90 	vmov	s3, r3
 8017400:	ee27 7a04 	vmul.f32	s14, s14, s8
 8017404:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8017408:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801740c:	ee61 1a84 	vmul.f32	s3, s3, s8
 8017410:	eea1 7a21 	vfma.f32	s14, s2, s3
 8017414:	ee27 7a03 	vmul.f32	s14, s14, s6
 8017418:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801741c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801741e:	694a      	ldr	r2, [r1, #20]
 8017420:	1b13      	subs	r3, r2, r4
 8017422:	ee03 3a10 	vmov	s6, r3
 8017426:	680b      	ldr	r3, [r1, #0]
 8017428:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801742c:	1b1b      	subs	r3, r3, r4
 801742e:	ee23 3a04 	vmul.f32	s6, s6, s8
 8017432:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 8017436:	ee03 3a10 	vmov	s6, r3
 801743a:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801743e:	ee23 4a04 	vmul.f32	s8, s6, s8
 8017442:	eee1 5a04 	vfma.f32	s11, s2, s8
 8017446:	ee25 6a86 	vmul.f32	s12, s11, s12
 801744a:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801744e:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 8017452:	eee3 5aa6 	vfma.f32	s11, s7, s13
 8017456:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801745a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801745e:	dd13      	ble.n	8017488 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 8017460:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8017464:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 8017468:	63c3      	str	r3, [r0, #60]	; 0x3c
 801746a:	eee3 7a87 	vfma.f32	s15, s7, s14
 801746e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8017472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017476:	dd15      	ble.n	80174a4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 8017478:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801747c:	6403      	str	r3, [r0, #64]	; 0x40
 801747e:	bd70      	pop	{r4, r5, r6, pc}
 8017480:	4623      	mov	r3, r4
 8017482:	e6fd      	b.n	8017280 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8017484:	462a      	mov	r2, r5
 8017486:	e706      	b.n	8017296 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8017488:	d502      	bpl.n	8017490 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801748a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801748e:	e7e9      	b.n	8017464 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 8017490:	ee22 2a64 	vnmul.f32	s4, s4, s9
 8017494:	eea3 2a85 	vfma.f32	s4, s7, s10
 8017498:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801749c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80174a0:	dade      	bge.n	8017460 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 80174a2:	e7f2      	b.n	801748a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 80174a4:	d502      	bpl.n	80174ac <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 80174a6:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80174aa:	e7e7      	b.n	801747c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 80174ac:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 80174b0:	eee3 4a86 	vfma.f32	s9, s7, s12
 80174b4:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 80174b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80174bc:	dadc      	bge.n	8017478 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 80174be:	e7f2      	b.n	80174a6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 80174c0:	3d800000 	.word	0x3d800000

080174c4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 80174c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80174c8:	2714      	movs	r7, #20
 80174ca:	435f      	muls	r7, r3
 80174cc:	eb02 0c07 	add.w	ip, r2, r7
 80174d0:	f8dc 5004 	ldr.w	r5, [ip, #4]
 80174d4:	f115 0e0f 	adds.w	lr, r5, #15
 80174d8:	f100 80a2 	bmi.w	8017620 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 80174dc:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 80174e0:	9c08      	ldr	r4, [sp, #32]
 80174e2:	2614      	movs	r6, #20
 80174e4:	f8c0 e014 	str.w	lr, [r0, #20]
 80174e8:	4366      	muls	r6, r4
 80174ea:	eb02 0806 	add.w	r8, r2, r6
 80174ee:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80174f2:	f115 040f 	adds.w	r4, r5, #15
 80174f6:	f100 809f 	bmi.w	8017638 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 80174fa:	1124      	asrs	r4, r4, #4
 80174fc:	eba4 040e 	sub.w	r4, r4, lr
 8017500:	6184      	str	r4, [r0, #24]
 8017502:	2c00      	cmp	r4, #0
 8017504:	f000 808a 	beq.w	801761c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 8017508:	f8dc 9004 	ldr.w	r9, [ip, #4]
 801750c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8017510:	5995      	ldr	r5, [r2, r6]
 8017512:	eba4 0809 	sub.w	r8, r4, r9
 8017516:	59d4      	ldr	r4, [r2, r7]
 8017518:	eba5 0a04 	sub.w	sl, r5, r4
 801751c:	ea4f 1608 	mov.w	r6, r8, lsl #4
 8017520:	ea4f 150a 	mov.w	r5, sl, lsl #4
 8017524:	fb0e fe05 	mul.w	lr, lr, r5
 8017528:	fb0a ee19 	mls	lr, sl, r9, lr
 801752c:	fb08 e404 	mla	r4, r8, r4, lr
 8017530:	3c01      	subs	r4, #1
 8017532:	19a4      	adds	r4, r4, r6
 8017534:	f100 808c 	bmi.w	8017650 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 8017538:	fb94 fef6 	sdiv	lr, r4, r6
 801753c:	fb06 441e 	mls	r4, r6, lr, r4
 8017540:	f8c0 e000 	str.w	lr, [r0]
 8017544:	6104      	str	r4, [r0, #16]
 8017546:	2d00      	cmp	r5, #0
 8017548:	f2c0 8095 	blt.w	8017676 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 801754c:	fb95 f4f6 	sdiv	r4, r5, r6
 8017550:	fb06 5514 	mls	r5, r6, r4, r5
 8017554:	6044      	str	r4, [r0, #4]
 8017556:	6085      	str	r5, [r0, #8]
 8017558:	60c6      	str	r6, [r0, #12]
 801755a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801755e:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8017562:	6945      	ldr	r5, [r0, #20]
 8017564:	59d2      	ldr	r2, [r2, r7]
 8017566:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 801756a:	eddf 6a4b 	vldr	s13, [pc, #300]	; 8017698 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 801756e:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 8017572:	ee07 4a10 	vmov	s14, r4
 8017576:	6804      	ldr	r4, [r0, #0]
 8017578:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 801757c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017580:	ee07 2a90 	vmov	s15, r2
 8017584:	ee27 7a26 	vmul.f32	s14, s14, s13
 8017588:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801758c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8017590:	edd3 6a00 	vldr	s13, [r3]
 8017594:	eee6 6a07 	vfma.f32	s13, s12, s14
 8017598:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 801759c:	eee6 6a27 	vfma.f32	s13, s12, s15
 80175a0:	edc0 6a07 	vstr	s13, [r0, #28]
 80175a4:	edd0 6a01 	vldr	s13, [r0, #4]
 80175a8:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 80175ac:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80175b0:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 80175b4:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80175b8:	ed80 6a08 	vstr	s12, [r0, #32]
 80175bc:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 80175be:	6242      	str	r2, [r0, #36]	; 0x24
 80175c0:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 80175c4:	ed93 6a03 	vldr	s12, [r3, #12]
 80175c8:	eea5 6a87 	vfma.f32	s12, s11, s14
 80175cc:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 80175d0:	eea5 6aa7 	vfma.f32	s12, s11, s15
 80175d4:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 80175d8:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 80175dc:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 80175e0:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80175e4:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 80175e8:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80175ea:	6302      	str	r2, [r0, #48]	; 0x30
 80175ec:	ed93 6a06 	vldr	s12, [r3, #24]
 80175f0:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 80175f4:	eea5 6a87 	vfma.f32	s12, s11, s14
 80175f8:	eeb0 7a46 	vmov.f32	s14, s12
 80175fc:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 8017600:	eea6 7a27 	vfma.f32	s14, s12, s15
 8017604:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 8017608:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 801760c:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 8017610:	eee6 7a87 	vfma.f32	s15, s13, s14
 8017614:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 8017618:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 801761a:	63c3      	str	r3, [r0, #60]	; 0x3c
 801761c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017620:	2410      	movs	r4, #16
 8017622:	f1c5 0501 	rsb	r5, r5, #1
 8017626:	fb9e fef4 	sdiv	lr, lr, r4
 801762a:	f015 050f 	ands.w	r5, r5, #15
 801762e:	bf18      	it	ne
 8017630:	2501      	movne	r5, #1
 8017632:	ebae 0e05 	sub.w	lr, lr, r5
 8017636:	e753      	b.n	80174e0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 8017638:	f04f 0910 	mov.w	r9, #16
 801763c:	f1c5 0501 	rsb	r5, r5, #1
 8017640:	fb94 f4f9 	sdiv	r4, r4, r9
 8017644:	f015 050f 	ands.w	r5, r5, #15
 8017648:	bf18      	it	ne
 801764a:	2501      	movne	r5, #1
 801764c:	1b64      	subs	r4, r4, r5
 801764e:	e755      	b.n	80174fc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 8017650:	4264      	negs	r4, r4
 8017652:	fb94 fef6 	sdiv	lr, r4, r6
 8017656:	f1ce 0800 	rsb	r8, lr, #0
 801765a:	fb06 441e 	mls	r4, r6, lr, r4
 801765e:	f8c0 8000 	str.w	r8, [r0]
 8017662:	6104      	str	r4, [r0, #16]
 8017664:	2c00      	cmp	r4, #0
 8017666:	f43f af6e 	beq.w	8017546 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 801766a:	ea6f 0e0e 	mvn.w	lr, lr
 801766e:	1b34      	subs	r4, r6, r4
 8017670:	f8c0 e000 	str.w	lr, [r0]
 8017674:	e766      	b.n	8017544 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 8017676:	426d      	negs	r5, r5
 8017678:	fb95 f4f6 	sdiv	r4, r5, r6
 801767c:	f1c4 0e00 	rsb	lr, r4, #0
 8017680:	fb06 5514 	mls	r5, r6, r4, r5
 8017684:	f8c0 e004 	str.w	lr, [r0, #4]
 8017688:	6085      	str	r5, [r0, #8]
 801768a:	2d00      	cmp	r5, #0
 801768c:	f43f af64 	beq.w	8017558 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 8017690:	43e4      	mvns	r4, r4
 8017692:	1b75      	subs	r5, r6, r5
 8017694:	6044      	str	r4, [r0, #4]
 8017696:	e75e      	b.n	8017556 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 8017698:	3d800000 	.word	0x3d800000

0801769c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801769c:	4b01      	ldr	r3, [pc, #4]	; (80176a4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801769e:	6018      	str	r0, [r3, #0]
 80176a0:	4770      	bx	lr
 80176a2:	bf00      	nop
 80176a4:	24006a04 	.word	0x24006a04

080176a8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 80176a8:	4b06      	ldr	r3, [pc, #24]	; (80176c4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 80176aa:	881a      	ldrh	r2, [r3, #0]
 80176ac:	4282      	cmp	r2, r0
 80176ae:	d807      	bhi.n	80176c0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 80176b0:	4b05      	ldr	r3, [pc, #20]	; (80176c8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 80176b2:	881b      	ldrh	r3, [r3, #0]
 80176b4:	4413      	add	r3, r2
 80176b6:	4298      	cmp	r0, r3
 80176b8:	bfac      	ite	ge
 80176ba:	2000      	movge	r0, #0
 80176bc:	2001      	movlt	r0, #1
 80176be:	4770      	bx	lr
 80176c0:	2000      	movs	r0, #0
 80176c2:	4770      	bx	lr
 80176c4:	24006a24 	.word	0x24006a24
 80176c8:	24006a28 	.word	0x24006a28

080176cc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 80176cc:	b508      	push	{r3, lr}
 80176ce:	4601      	mov	r1, r0
 80176d0:	f7ff ffea 	bl	80176a8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 80176d4:	b118      	cbz	r0, 80176de <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 80176d6:	4b02      	ldr	r3, [pc, #8]	; (80176e0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 80176d8:	681b      	ldr	r3, [r3, #0]
 80176da:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 80176de:	bd08      	pop	{r3, pc}
 80176e0:	24006a08 	.word	0x24006a08

080176e4 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>:
 80176e4:	b538      	push	{r3, r4, r5, lr}
 80176e6:	4604      	mov	r4, r0
 80176e8:	f7ff ffde 	bl	80176a8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 80176ec:	b188      	cbz	r0, 8017712 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x2e>
 80176ee:	4b09      	ldr	r3, [pc, #36]	; (8017714 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x30>)
 80176f0:	881a      	ldrh	r2, [r3, #0]
 80176f2:	4b09      	ldr	r3, [pc, #36]	; (8017718 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x34>)
 80176f4:	1aa4      	subs	r4, r4, r2
 80176f6:	220e      	movs	r2, #14
 80176f8:	681d      	ldr	r5, [r3, #0]
 80176fa:	4362      	muls	r2, r4
 80176fc:	18ac      	adds	r4, r5, r2
 80176fe:	7b23      	ldrb	r3, [r4, #12]
 8017700:	f013 0320 	ands.w	r3, r3, #32
 8017704:	bf17      	itett	ne
 8017706:	680b      	ldrne	r3, [r1, #0]
 8017708:	4618      	moveq	r0, r3
 801770a:	50ab      	strne	r3, [r5, r2]
 801770c:	684b      	ldrne	r3, [r1, #4]
 801770e:	bf18      	it	ne
 8017710:	6063      	strne	r3, [r4, #4]
 8017712:	bd38      	pop	{r3, r4, r5, pc}
 8017714:	24006a24 	.word	0x24006a24
 8017718:	24006a0c 	.word	0x24006a0c

0801771c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>:
 801771c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8017720:	4606      	mov	r6, r0
 8017722:	460c      	mov	r4, r1
 8017724:	f7ff ffc0 	bl	80176a8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8017728:	b918      	cbnz	r0, 8017732 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x16>
 801772a:	2000      	movs	r0, #0
 801772c:	b002      	add	sp, #8
 801772e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017732:	4608      	mov	r0, r1
 8017734:	f7fa fae3 	bl	8011cfe <_ZNK8touchgfx4Rect7isEmptyEv>
 8017738:	2800      	cmp	r0, #0
 801773a:	d1f6      	bne.n	801772a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801773c:	4b3f      	ldr	r3, [pc, #252]	; (801783c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x120>)
 801773e:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8017840 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x124>
 8017742:	881d      	ldrh	r5, [r3, #0]
 8017744:	f8d9 a000 	ldr.w	sl, [r9]
 8017748:	46c8      	mov	r8, r9
 801774a:	1b73      	subs	r3, r6, r5
 801774c:	250e      	movs	r5, #14
 801774e:	435d      	muls	r5, r3
 8017750:	eb0a 0705 	add.w	r7, sl, r5
 8017754:	7b3b      	ldrb	r3, [r7, #12]
 8017756:	f013 0f20 	tst.w	r3, #32
 801775a:	d0e6      	beq.n	801772a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801775c:	4621      	mov	r1, r4
 801775e:	4638      	mov	r0, r7
 8017760:	f7fd fb00 	bl	8014d64 <_ZNK8touchgfx4Rect8includesERKS0_>
 8017764:	2800      	cmp	r0, #0
 8017766:	d1e1      	bne.n	801772c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 8017768:	4639      	mov	r1, r7
 801776a:	4620      	mov	r0, r4
 801776c:	f7fd fafa 	bl	8014d64 <_ZNK8touchgfx4Rect8includesERKS0_>
 8017770:	b108      	cbz	r0, 8017776 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x5a>
 8017772:	4621      	mov	r1, r4
 8017774:	e020      	b.n	80177b8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9c>
 8017776:	f9b4 2000 	ldrsh.w	r2, [r4]
 801777a:	f93a 3005 	ldrsh.w	r3, [sl, r5]
 801777e:	429a      	cmp	r2, r3
 8017780:	d11e      	bne.n	80177c0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 8017782:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8017786:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801778a:	429a      	cmp	r2, r3
 801778c:	d118      	bne.n	80177c0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801778e:	6820      	ldr	r0, [r4, #0]
 8017790:	466b      	mov	r3, sp
 8017792:	6861      	ldr	r1, [r4, #4]
 8017794:	c303      	stmia	r3!, {r0, r1}
 8017796:	4639      	mov	r1, r7
 8017798:	4668      	mov	r0, sp
 801779a:	f7fd fb09 	bl	8014db0 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801779e:	f8d9 3000 	ldr.w	r3, [r9]
 80177a2:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80177a6:	442b      	add	r3, r5
 80177a8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80177ac:	4413      	add	r3, r2
 80177ae:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 80177b2:	4293      	cmp	r3, r2
 80177b4:	dc04      	bgt.n	80177c0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 80177b6:	4669      	mov	r1, sp
 80177b8:	4630      	mov	r0, r6
 80177ba:	f7ff ff93 	bl	80176e4 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>
 80177be:	e7b5      	b.n	801772c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 80177c0:	f8d8 3000 	ldr.w	r3, [r8]
 80177c4:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80177c8:	442b      	add	r3, r5
 80177ca:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80177ce:	4291      	cmp	r1, r2
 80177d0:	d119      	bne.n	8017806 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 80177d2:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 80177d6:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80177da:	4291      	cmp	r1, r2
 80177dc:	d113      	bne.n	8017806 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 80177de:	6820      	ldr	r0, [r4, #0]
 80177e0:	466a      	mov	r2, sp
 80177e2:	6861      	ldr	r1, [r4, #4]
 80177e4:	c203      	stmia	r2!, {r0, r1}
 80177e6:	4619      	mov	r1, r3
 80177e8:	4668      	mov	r0, sp
 80177ea:	f7fd fae1 	bl	8014db0 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80177ee:	f8d8 3000 	ldr.w	r3, [r8]
 80177f2:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 80177f6:	442b      	add	r3, r5
 80177f8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80177fc:	4413      	add	r3, r2
 80177fe:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8017802:	4293      	cmp	r3, r2
 8017804:	ddd7      	ble.n	80177b6 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9a>
 8017806:	4620      	mov	r0, r4
 8017808:	f7fa fa79 	bl	8011cfe <_ZNK8touchgfx4Rect7isEmptyEv>
 801780c:	b990      	cbnz	r0, 8017834 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x118>
 801780e:	88a7      	ldrh	r7, [r4, #4]
 8017810:	88e3      	ldrh	r3, [r4, #6]
 8017812:	fb17 f703 	smulbb	r7, r7, r3
 8017816:	f8d8 3000 	ldr.w	r3, [r8]
 801781a:	441d      	add	r5, r3
 801781c:	4628      	mov	r0, r5
 801781e:	f7fa fa6e 	bl	8011cfe <_ZNK8touchgfx4Rect7isEmptyEv>
 8017822:	b948      	cbnz	r0, 8017838 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x11c>
 8017824:	88ab      	ldrh	r3, [r5, #4]
 8017826:	88ea      	ldrh	r2, [r5, #6]
 8017828:	fb13 f302 	smulbb	r3, r3, r2
 801782c:	42bb      	cmp	r3, r7
 801782e:	f6bf af7c 	bge.w	801772a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 8017832:	e79e      	b.n	8017772 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x56>
 8017834:	2700      	movs	r7, #0
 8017836:	e7ee      	b.n	8017816 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xfa>
 8017838:	2300      	movs	r3, #0
 801783a:	e7f7      	b.n	801782c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x110>
 801783c:	24006a24 	.word	0x24006a24
 8017840:	24006a0c 	.word	0x24006a0c

08017844 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 8017844:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017846:	4c24      	ldr	r4, [pc, #144]	; (80178d8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 8017848:	6823      	ldr	r3, [r4, #0]
 801784a:	2b00      	cmp	r3, #0
 801784c:	d042      	beq.n	80178d4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801784e:	4a23      	ldr	r2, [pc, #140]	; (80178dc <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 8017850:	4d23      	ldr	r5, [pc, #140]	; (80178e0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 8017852:	8811      	ldrh	r1, [r2, #0]
 8017854:	f8b5 c000 	ldrh.w	ip, [r5]
 8017858:	4822      	ldr	r0, [pc, #136]	; (80178e4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801785a:	4461      	add	r1, ip
 801785c:	1c4a      	adds	r2, r1, #1
 801785e:	008f      	lsls	r7, r1, #2
 8017860:	f022 0201 	bic.w	r2, r2, #1
 8017864:	19de      	adds	r6, r3, r7
 8017866:	0412      	lsls	r2, r2, #16
 8017868:	6006      	str	r6, [r0, #0]
 801786a:	4e1f      	ldr	r6, [pc, #124]	; (80178e8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801786c:	0c12      	lsrs	r2, r2, #16
 801786e:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 8017872:	19da      	adds	r2, r3, r7
 8017874:	6032      	str	r2, [r6, #0]
 8017876:	220e      	movs	r2, #14
 8017878:	fb02 f20c 	mul.w	r2, r2, ip
 801787c:	3203      	adds	r2, #3
 801787e:	f022 0203 	bic.w	r2, r2, #3
 8017882:	443a      	add	r2, r7
 8017884:	4f19      	ldr	r7, [pc, #100]	; (80178ec <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 8017886:	4413      	add	r3, r2
 8017888:	603b      	str	r3, [r7, #0]
 801788a:	2300      	movs	r3, #0
 801788c:	4f18      	ldr	r7, [pc, #96]	; (80178f0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801788e:	469c      	mov	ip, r3
 8017890:	803b      	strh	r3, [r7, #0]
 8017892:	4f18      	ldr	r7, [pc, #96]	; (80178f4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 8017894:	683f      	ldr	r7, [r7, #0]
 8017896:	1aba      	subs	r2, r7, r2
 8017898:	4f17      	ldr	r7, [pc, #92]	; (80178f8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801789a:	603a      	str	r2, [r7, #0]
 801789c:	f64f 77ff 	movw	r7, #65535	; 0xffff
 80178a0:	4a16      	ldr	r2, [pc, #88]	; (80178fc <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 80178a2:	8013      	strh	r3, [r2, #0]
 80178a4:	428b      	cmp	r3, r1
 80178a6:	d10d      	bne.n	80178c4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 80178a8:	882d      	ldrh	r5, [r5, #0]
 80178aa:	2300      	movs	r3, #0
 80178ac:	6830      	ldr	r0, [r6, #0]
 80178ae:	240e      	movs	r4, #14
 80178b0:	429d      	cmp	r5, r3
 80178b2:	d90f      	bls.n	80178d4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 80178b4:	fb04 0203 	mla	r2, r4, r3, r0
 80178b8:	3301      	adds	r3, #1
 80178ba:	7b11      	ldrb	r1, [r2, #12]
 80178bc:	f36f 1145 	bfc	r1, #5, #1
 80178c0:	7311      	strb	r1, [r2, #12]
 80178c2:	e7f5      	b.n	80178b0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 80178c4:	6822      	ldr	r2, [r4, #0]
 80178c6:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 80178ca:	6802      	ldr	r2, [r0, #0]
 80178cc:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 80178d0:	3301      	adds	r3, #1
 80178d2:	e7e7      	b.n	80178a4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 80178d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80178d6:	bf00      	nop
 80178d8:	24006a08 	.word	0x24006a08
 80178dc:	24006a24 	.word	0x24006a24
 80178e0:	24006a28 	.word	0x24006a28
 80178e4:	24006a1c 	.word	0x24006a1c
 80178e8:	24006a0c 	.word	0x24006a0c
 80178ec:	24006a14 	.word	0x24006a14
 80178f0:	24006a26 	.word	0x24006a26
 80178f4:	24006a10 	.word	0x24006a10
 80178f8:	24006a20 	.word	0x24006a20
 80178fc:	24006a18 	.word	0x24006a18

08017900 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 8017900:	4b06      	ldr	r3, [pc, #24]	; (801791c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 8017902:	681b      	ldr	r3, [r3, #0]
 8017904:	b943      	cbnz	r3, 8017918 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 8017906:	b139      	cbz	r1, 8017918 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 8017908:	4b05      	ldr	r3, [pc, #20]	; (8017920 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 801790a:	801a      	strh	r2, [r3, #0]
 801790c:	4b05      	ldr	r3, [pc, #20]	; (8017924 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 801790e:	6019      	str	r1, [r3, #0]
 8017910:	4b05      	ldr	r3, [pc, #20]	; (8017928 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 8017912:	6018      	str	r0, [r3, #0]
 8017914:	f7ff bf96 	b.w	8017844 <_ZN8touchgfx6Bitmap10clearCacheEv>
 8017918:	4770      	bx	lr
 801791a:	bf00      	nop
 801791c:	24006a14 	.word	0x24006a14
 8017920:	24006a28 	.word	0x24006a28
 8017924:	24006a10 	.word	0x24006a10
 8017928:	24006a08 	.word	0x24006a08

0801792c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801792c:	b470      	push	{r4, r5, r6}
 801792e:	4c07      	ldr	r4, [pc, #28]	; (801794c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 8017930:	4605      	mov	r5, r0
 8017932:	4610      	mov	r0, r2
 8017934:	9a03      	ldr	r2, [sp, #12]
 8017936:	6826      	ldr	r6, [r4, #0]
 8017938:	b936      	cbnz	r6, 8017948 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801793a:	6025      	str	r5, [r4, #0]
 801793c:	4c04      	ldr	r4, [pc, #16]	; (8017950 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801793e:	8021      	strh	r1, [r4, #0]
 8017940:	4619      	mov	r1, r3
 8017942:	bc70      	pop	{r4, r5, r6}
 8017944:	f7ff bfdc 	b.w	8017900 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 8017948:	bc70      	pop	{r4, r5, r6}
 801794a:	4770      	bx	lr
 801794c:	24006a2c 	.word	0x24006a2c
 8017950:	24006a24 	.word	0x24006a24

08017954 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 8017954:	4a12      	ldr	r2, [pc, #72]	; (80179a0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 8017956:	8803      	ldrh	r3, [r0, #0]
 8017958:	8812      	ldrh	r2, [r2, #0]
 801795a:	4293      	cmp	r3, r2
 801795c:	d207      	bcs.n	801796e <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 801795e:	4a11      	ldr	r2, [pc, #68]	; (80179a4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 8017960:	2114      	movs	r1, #20
 8017962:	6812      	ldr	r2, [r2, #0]
 8017964:	fb01 2303 	mla	r3, r1, r3, r2
 8017968:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 801796c:	4770      	bx	lr
 801796e:	490e      	ldr	r1, [pc, #56]	; (80179a8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 8017970:	8809      	ldrh	r1, [r1, #0]
 8017972:	4411      	add	r1, r2
 8017974:	428b      	cmp	r3, r1
 8017976:	da04      	bge.n	8017982 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 8017978:	1a9b      	subs	r3, r3, r2
 801797a:	4a0c      	ldr	r2, [pc, #48]	; (80179ac <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801797c:	210e      	movs	r1, #14
 801797e:	6812      	ldr	r2, [r2, #0]
 8017980:	e7f0      	b.n	8017964 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 8017982:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8017986:	4293      	cmp	r3, r2
 8017988:	d108      	bne.n	801799c <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 801798a:	4b09      	ldr	r3, [pc, #36]	; (80179b0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801798c:	781b      	ldrb	r3, [r3, #0]
 801798e:	b91b      	cbnz	r3, 8017998 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 8017990:	4b08      	ldr	r3, [pc, #32]	; (80179b4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 8017992:	f9b3 0000 	ldrsh.w	r0, [r3]
 8017996:	4770      	bx	lr
 8017998:	4b07      	ldr	r3, [pc, #28]	; (80179b8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801799a:	e7fa      	b.n	8017992 <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 801799c:	2000      	movs	r0, #0
 801799e:	4770      	bx	lr
 80179a0:	24006a24 	.word	0x24006a24
 80179a4:	24006a2c 	.word	0x24006a2c
 80179a8:	24006a28 	.word	0x24006a28
 80179ac:	24006a0c 	.word	0x24006a0c
 80179b0:	2400699c 	.word	0x2400699c
 80179b4:	2400699e 	.word	0x2400699e
 80179b8:	240069a0 	.word	0x240069a0

080179bc <_ZNK8touchgfx6Bitmap9getHeightEv>:
 80179bc:	4a12      	ldr	r2, [pc, #72]	; (8017a08 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 80179be:	8803      	ldrh	r3, [r0, #0]
 80179c0:	8812      	ldrh	r2, [r2, #0]
 80179c2:	4293      	cmp	r3, r2
 80179c4:	d207      	bcs.n	80179d6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 80179c6:	4a11      	ldr	r2, [pc, #68]	; (8017a0c <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 80179c8:	2114      	movs	r1, #20
 80179ca:	6812      	ldr	r2, [r2, #0]
 80179cc:	fb01 2303 	mla	r3, r1, r3, r2
 80179d0:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 80179d4:	4770      	bx	lr
 80179d6:	490e      	ldr	r1, [pc, #56]	; (8017a10 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 80179d8:	8809      	ldrh	r1, [r1, #0]
 80179da:	4411      	add	r1, r2
 80179dc:	428b      	cmp	r3, r1
 80179de:	da04      	bge.n	80179ea <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 80179e0:	1a9b      	subs	r3, r3, r2
 80179e2:	4a0c      	ldr	r2, [pc, #48]	; (8017a14 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 80179e4:	210e      	movs	r1, #14
 80179e6:	6812      	ldr	r2, [r2, #0]
 80179e8:	e7f0      	b.n	80179cc <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 80179ea:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80179ee:	4293      	cmp	r3, r2
 80179f0:	d108      	bne.n	8017a04 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 80179f2:	4b09      	ldr	r3, [pc, #36]	; (8017a18 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 80179f4:	781b      	ldrb	r3, [r3, #0]
 80179f6:	b91b      	cbnz	r3, 8017a00 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 80179f8:	4b08      	ldr	r3, [pc, #32]	; (8017a1c <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 80179fa:	f9b3 0000 	ldrsh.w	r0, [r3]
 80179fe:	4770      	bx	lr
 8017a00:	4b07      	ldr	r3, [pc, #28]	; (8017a20 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 8017a02:	e7fa      	b.n	80179fa <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 8017a04:	2000      	movs	r0, #0
 8017a06:	4770      	bx	lr
 8017a08:	24006a24 	.word	0x24006a24
 8017a0c:	24006a2c 	.word	0x24006a2c
 8017a10:	24006a28 	.word	0x24006a28
 8017a14:	24006a0c 	.word	0x24006a0c
 8017a18:	2400699c 	.word	0x2400699c
 8017a1c:	240069a0 	.word	0x240069a0
 8017a20:	2400699e 	.word	0x2400699e

08017a24 <_ZNK8touchgfx6Bitmap7getDataEv>:
 8017a24:	4a12      	ldr	r2, [pc, #72]	; (8017a70 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 8017a26:	8803      	ldrh	r3, [r0, #0]
 8017a28:	8811      	ldrh	r1, [r2, #0]
 8017a2a:	428b      	cmp	r3, r1
 8017a2c:	d20b      	bcs.n	8017a46 <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 8017a2e:	4a11      	ldr	r2, [pc, #68]	; (8017a74 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8017a30:	6812      	ldr	r2, [r2, #0]
 8017a32:	b112      	cbz	r2, 8017a3a <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 8017a34:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8017a38:	b9c0      	cbnz	r0, 8017a6c <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 8017a3a:	4a0f      	ldr	r2, [pc, #60]	; (8017a78 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 8017a3c:	6811      	ldr	r1, [r2, #0]
 8017a3e:	2214      	movs	r2, #20
 8017a40:	4353      	muls	r3, r2
 8017a42:	58c8      	ldr	r0, [r1, r3]
 8017a44:	4770      	bx	lr
 8017a46:	4a0d      	ldr	r2, [pc, #52]	; (8017a7c <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 8017a48:	8812      	ldrh	r2, [r2, #0]
 8017a4a:	440a      	add	r2, r1
 8017a4c:	4293      	cmp	r3, r2
 8017a4e:	da04      	bge.n	8017a5a <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 8017a50:	4a08      	ldr	r2, [pc, #32]	; (8017a74 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8017a52:	6812      	ldr	r2, [r2, #0]
 8017a54:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8017a58:	4770      	bx	lr
 8017a5a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8017a5e:	4293      	cmp	r3, r2
 8017a60:	d103      	bne.n	8017a6a <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 8017a62:	4b07      	ldr	r3, [pc, #28]	; (8017a80 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 8017a64:	681b      	ldr	r3, [r3, #0]
 8017a66:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8017a68:	4770      	bx	lr
 8017a6a:	2000      	movs	r0, #0
 8017a6c:	4770      	bx	lr
 8017a6e:	bf00      	nop
 8017a70:	24006a24 	.word	0x24006a24
 8017a74:	24006a08 	.word	0x24006a08
 8017a78:	24006a2c 	.word	0x24006a2c
 8017a7c:	24006a28 	.word	0x24006a28
 8017a80:	240069a4 	.word	0x240069a4

08017a84 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 8017a84:	4b24      	ldr	r3, [pc, #144]	; (8017b18 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 8017a86:	8802      	ldrh	r2, [r0, #0]
 8017a88:	8818      	ldrh	r0, [r3, #0]
 8017a8a:	4282      	cmp	r2, r0
 8017a8c:	d221      	bcs.n	8017ad2 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 8017a8e:	4b23      	ldr	r3, [pc, #140]	; (8017b1c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 8017a90:	6819      	ldr	r1, [r3, #0]
 8017a92:	2314      	movs	r3, #20
 8017a94:	fb03 1302 	mla	r3, r3, r2, r1
 8017a98:	6858      	ldr	r0, [r3, #4]
 8017a9a:	2800      	cmp	r0, #0
 8017a9c:	d03a      	beq.n	8017b14 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8017a9e:	4920      	ldr	r1, [pc, #128]	; (8017b20 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8017aa0:	6809      	ldr	r1, [r1, #0]
 8017aa2:	2900      	cmp	r1, #0
 8017aa4:	d036      	beq.n	8017b14 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8017aa6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8017aaa:	2900      	cmp	r1, #0
 8017aac:	d032      	beq.n	8017b14 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8017aae:	891a      	ldrh	r2, [r3, #8]
 8017ab0:	8958      	ldrh	r0, [r3, #10]
 8017ab2:	4350      	muls	r0, r2
 8017ab4:	7c5a      	ldrb	r2, [r3, #17]
 8017ab6:	7cdb      	ldrb	r3, [r3, #19]
 8017ab8:	0952      	lsrs	r2, r2, #5
 8017aba:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8017abe:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8017ac2:	2b0b      	cmp	r3, #11
 8017ac4:	bf18      	it	ne
 8017ac6:	0040      	lslne	r0, r0, #1
 8017ac8:	3003      	adds	r0, #3
 8017aca:	f020 0003 	bic.w	r0, r0, #3
 8017ace:	4408      	add	r0, r1
 8017ad0:	4770      	bx	lr
 8017ad2:	4b14      	ldr	r3, [pc, #80]	; (8017b24 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 8017ad4:	881b      	ldrh	r3, [r3, #0]
 8017ad6:	4403      	add	r3, r0
 8017ad8:	429a      	cmp	r2, r3
 8017ada:	da1a      	bge.n	8017b12 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8017adc:	4b12      	ldr	r3, [pc, #72]	; (8017b28 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 8017ade:	1a10      	subs	r0, r2, r0
 8017ae0:	210e      	movs	r1, #14
 8017ae2:	681b      	ldr	r3, [r3, #0]
 8017ae4:	fb01 3000 	mla	r0, r1, r0, r3
 8017ae8:	7b03      	ldrb	r3, [r0, #12]
 8017aea:	f003 031f 	and.w	r3, r3, #31
 8017aee:	2b0b      	cmp	r3, #11
 8017af0:	d10b      	bne.n	8017b0a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 8017af2:	8903      	ldrh	r3, [r0, #8]
 8017af4:	8940      	ldrh	r0, [r0, #10]
 8017af6:	4358      	muls	r0, r3
 8017af8:	4b09      	ldr	r3, [pc, #36]	; (8017b20 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8017afa:	3003      	adds	r0, #3
 8017afc:	6819      	ldr	r1, [r3, #0]
 8017afe:	f020 0303 	bic.w	r3, r0, #3
 8017b02:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8017b06:	4418      	add	r0, r3
 8017b08:	4770      	bx	lr
 8017b0a:	2b0d      	cmp	r3, #13
 8017b0c:	d101      	bne.n	8017b12 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8017b0e:	300d      	adds	r0, #13
 8017b10:	4770      	bx	lr
 8017b12:	2000      	movs	r0, #0
 8017b14:	4770      	bx	lr
 8017b16:	bf00      	nop
 8017b18:	24006a24 	.word	0x24006a24
 8017b1c:	24006a2c 	.word	0x24006a2c
 8017b20:	24006a08 	.word	0x24006a08
 8017b24:	24006a28 	.word	0x24006a28
 8017b28:	24006a0c 	.word	0x24006a0c

08017b2c <_ZNK8touchgfx6Bitmap9getFormatEv>:
 8017b2c:	4a17      	ldr	r2, [pc, #92]	; (8017b8c <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 8017b2e:	b510      	push	{r4, lr}
 8017b30:	8803      	ldrh	r3, [r0, #0]
 8017b32:	8812      	ldrh	r2, [r2, #0]
 8017b34:	4293      	cmp	r3, r2
 8017b36:	d20c      	bcs.n	8017b52 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 8017b38:	4a15      	ldr	r2, [pc, #84]	; (8017b90 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 8017b3a:	2114      	movs	r1, #20
 8017b3c:	6812      	ldr	r2, [r2, #0]
 8017b3e:	fb01 2303 	mla	r3, r1, r3, r2
 8017b42:	7c58      	ldrb	r0, [r3, #17]
 8017b44:	0942      	lsrs	r2, r0, #5
 8017b46:	7cd8      	ldrb	r0, [r3, #19]
 8017b48:	f3c0 1042 	ubfx	r0, r0, #5, #3
 8017b4c:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 8017b50:	bd10      	pop	{r4, pc}
 8017b52:	4910      	ldr	r1, [pc, #64]	; (8017b94 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 8017b54:	8809      	ldrh	r1, [r1, #0]
 8017b56:	4411      	add	r1, r2
 8017b58:	428b      	cmp	r3, r1
 8017b5a:	da09      	bge.n	8017b70 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 8017b5c:	1a9b      	subs	r3, r3, r2
 8017b5e:	4a0e      	ldr	r2, [pc, #56]	; (8017b98 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 8017b60:	210e      	movs	r1, #14
 8017b62:	6812      	ldr	r2, [r2, #0]
 8017b64:	fb01 2303 	mla	r3, r1, r3, r2
 8017b68:	7b18      	ldrb	r0, [r3, #12]
 8017b6a:	f000 001f 	and.w	r0, r0, #31
 8017b6e:	e7ef      	b.n	8017b50 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 8017b70:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8017b74:	4293      	cmp	r3, r2
 8017b76:	d106      	bne.n	8017b86 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 8017b78:	f7eb ffec 	bl	8003b54 <_ZN8touchgfx3HAL3lcdEv>
 8017b7c:	6803      	ldr	r3, [r0, #0]
 8017b7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017b84:	4718      	bx	r3
 8017b86:	2000      	movs	r0, #0
 8017b88:	e7e2      	b.n	8017b50 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 8017b8a:	bf00      	nop
 8017b8c:	24006a24 	.word	0x24006a24
 8017b90:	24006a2c 	.word	0x24006a2c
 8017b94:	24006a28 	.word	0x24006a28
 8017b98:	24006a0c 	.word	0x24006a0c

08017b9c <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 8017b9c:	2018      	movs	r0, #24
 8017b9e:	4770      	bx	lr

08017ba0 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 8017ba0:	2001      	movs	r0, #1
 8017ba2:	4770      	bx	lr

08017ba4 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 8017ba4:	4b02      	ldr	r3, [pc, #8]	; (8017bb0 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0xc>)
 8017ba6:	8818      	ldrh	r0, [r3, #0]
 8017ba8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8017bac:	b280      	uxth	r0, r0
 8017bae:	4770      	bx	lr
 8017bb0:	2400699e 	.word	0x2400699e

08017bb4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8017bb4:	2bff      	cmp	r3, #255	; 0xff
 8017bb6:	d040      	beq.n	8017c3a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x86>
 8017bb8:	2a2c      	cmp	r2, #44	; 0x2c
 8017bba:	d02a      	beq.n	8017c12 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5e>
 8017bbc:	d80f      	bhi.n	8017bde <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2a>
 8017bbe:	2a08      	cmp	r2, #8
 8017bc0:	d037      	beq.n	8017c32 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8017bc2:	d805      	bhi.n	8017bd0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1c>
 8017bc4:	2a04      	cmp	r2, #4
 8017bc6:	d032      	beq.n	8017c2e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7a>
 8017bc8:	2a05      	cmp	r2, #5
 8017bca:	d02e      	beq.n	8017c2a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 8017bcc:	2000      	movs	r0, #0
 8017bce:	4770      	bx	lr
 8017bd0:	2a0a      	cmp	r2, #10
 8017bd2:	d02e      	beq.n	8017c32 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8017bd4:	d301      	bcc.n	8017bda <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x26>
 8017bd6:	2a0b      	cmp	r2, #11
 8017bd8:	d1f8      	bne.n	8017bcc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8017bda:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8017bdc:	4770      	bx	lr
 8017bde:	2a30      	cmp	r2, #48	; 0x30
 8017be0:	d029      	beq.n	8017c36 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 8017be2:	d808      	bhi.n	8017bf6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x42>
 8017be4:	2a2e      	cmp	r2, #46	; 0x2e
 8017be6:	684b      	ldr	r3, [r1, #4]
 8017be8:	d01a      	beq.n	8017c20 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 8017bea:	d90b      	bls.n	8017c04 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x50>
 8017bec:	781b      	ldrb	r3, [r3, #0]
 8017bee:	2b00      	cmp	r3, #0
 8017bf0:	d1ec      	bne.n	8017bcc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8017bf2:	6a00      	ldr	r0, [r0, #32]
 8017bf4:	4770      	bx	lr
 8017bf6:	2a32      	cmp	r2, #50	; 0x32
 8017bf8:	d01d      	beq.n	8017c36 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 8017bfa:	d301      	bcc.n	8017c00 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4c>
 8017bfc:	2a33      	cmp	r2, #51	; 0x33
 8017bfe:	d1e5      	bne.n	8017bcc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8017c00:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8017c02:	4770      	bx	lr
 8017c04:	781b      	ldrb	r3, [r3, #0]
 8017c06:	2b00      	cmp	r3, #0
 8017c08:	d0f3      	beq.n	8017bf2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x3e>
 8017c0a:	2b01      	cmp	r3, #1
 8017c0c:	d1de      	bne.n	8017bcc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8017c0e:	6900      	ldr	r0, [r0, #16]
 8017c10:	4770      	bx	lr
 8017c12:	684b      	ldr	r3, [r1, #4]
 8017c14:	781b      	ldrb	r3, [r3, #0]
 8017c16:	b133      	cbz	r3, 8017c26 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 8017c18:	2b01      	cmp	r3, #1
 8017c1a:	d1d7      	bne.n	8017bcc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8017c1c:	6880      	ldr	r0, [r0, #8]
 8017c1e:	4770      	bx	lr
 8017c20:	781b      	ldrb	r3, [r3, #0]
 8017c22:	2b00      	cmp	r3, #0
 8017c24:	d1d2      	bne.n	8017bcc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8017c26:	6980      	ldr	r0, [r0, #24]
 8017c28:	4770      	bx	lr
 8017c2a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8017c2c:	4770      	bx	lr
 8017c2e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8017c30:	4770      	bx	lr
 8017c32:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8017c34:	4770      	bx	lr
 8017c36:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8017c38:	4770      	bx	lr
 8017c3a:	2a2c      	cmp	r2, #44	; 0x2c
 8017c3c:	d02a      	beq.n	8017c94 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 8017c3e:	d80f      	bhi.n	8017c60 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xac>
 8017c40:	2a08      	cmp	r2, #8
 8017c42:	d035      	beq.n	8017cb0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfc>
 8017c44:	d805      	bhi.n	8017c52 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8017c46:	2a04      	cmp	r2, #4
 8017c48:	d030      	beq.n	8017cac <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf8>
 8017c4a:	2a05      	cmp	r2, #5
 8017c4c:	d1be      	bne.n	8017bcc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8017c4e:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8017c50:	4770      	bx	lr
 8017c52:	2a0a      	cmp	r2, #10
 8017c54:	d02c      	beq.n	8017cb0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfc>
 8017c56:	d301      	bcc.n	8017c5c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa8>
 8017c58:	2a0b      	cmp	r2, #11
 8017c5a:	d1b7      	bne.n	8017bcc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8017c5c:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8017c5e:	4770      	bx	lr
 8017c60:	2a30      	cmp	r2, #48	; 0x30
 8017c62:	d027      	beq.n	8017cb4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x100>
 8017c64:	d808      	bhi.n	8017c78 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc4>
 8017c66:	2a2e      	cmp	r2, #46	; 0x2e
 8017c68:	684b      	ldr	r3, [r1, #4]
 8017c6a:	d01a      	beq.n	8017ca2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 8017c6c:	d90b      	bls.n	8017c86 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xd2>
 8017c6e:	781b      	ldrb	r3, [r3, #0]
 8017c70:	2b00      	cmp	r3, #0
 8017c72:	d1ab      	bne.n	8017bcc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8017c74:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8017c76:	4770      	bx	lr
 8017c78:	2a32      	cmp	r2, #50	; 0x32
 8017c7a:	d01b      	beq.n	8017cb4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x100>
 8017c7c:	d301      	bcc.n	8017c82 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xce>
 8017c7e:	2a33      	cmp	r2, #51	; 0x33
 8017c80:	d1a4      	bne.n	8017bcc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8017c82:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8017c84:	4770      	bx	lr
 8017c86:	781b      	ldrb	r3, [r3, #0]
 8017c88:	2b00      	cmp	r3, #0
 8017c8a:	d0f3      	beq.n	8017c74 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc0>
 8017c8c:	2b01      	cmp	r3, #1
 8017c8e:	d19d      	bne.n	8017bcc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8017c90:	6940      	ldr	r0, [r0, #20]
 8017c92:	4770      	bx	lr
 8017c94:	684b      	ldr	r3, [r1, #4]
 8017c96:	781b      	ldrb	r3, [r3, #0]
 8017c98:	b133      	cbz	r3, 8017ca8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf4>
 8017c9a:	2b01      	cmp	r3, #1
 8017c9c:	d196      	bne.n	8017bcc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8017c9e:	68c0      	ldr	r0, [r0, #12]
 8017ca0:	4770      	bx	lr
 8017ca2:	781b      	ldrb	r3, [r3, #0]
 8017ca4:	2b00      	cmp	r3, #0
 8017ca6:	d191      	bne.n	8017bcc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8017ca8:	69c0      	ldr	r0, [r0, #28]
 8017caa:	4770      	bx	lr
 8017cac:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8017cae:	4770      	bx	lr
 8017cb0:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8017cb2:	4770      	bx	lr
 8017cb4:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8017cb6:	4770      	bx	lr

08017cb8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8017cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017cbc:	b085      	sub	sp, #20
 8017cbe:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8017cc0:	9203      	str	r2, [sp, #12]
 8017cc2:	6870      	ldr	r0, [r6, #4]
 8017cc4:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8017cc8:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 8017ccc:	9101      	str	r1, [sp, #4]
 8017cce:	fa1f f885 	uxth.w	r8, r5
 8017cd2:	43ed      	mvns	r5, r5
 8017cd4:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8017cd8:	b2ed      	uxtb	r5, r5
 8017cda:	fb00 2404 	mla	r4, r0, r4, r2
 8017cde:	6832      	ldr	r2, [r6, #0]
 8017ce0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8017ce4:	4414      	add	r4, r2
 8017ce6:	f8dc 2000 	ldr.w	r2, [ip]
 8017cea:	9202      	str	r2, [sp, #8]
 8017cec:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8017cf0:	f102 0e04 	add.w	lr, r2, #4
 8017cf4:	9a01      	ldr	r2, [sp, #4]
 8017cf6:	2a00      	cmp	r2, #0
 8017cf8:	dc03      	bgt.n	8017d02 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8017cfa:	9a03      	ldr	r2, [sp, #12]
 8017cfc:	2a00      	cmp	r2, #0
 8017cfe:	f340 8116 	ble.w	8017f2e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8017d02:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017d04:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 8017d08:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8017d0c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017d0e:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 8017d12:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8017d16:	2b00      	cmp	r3, #0
 8017d18:	dd0e      	ble.n	8017d38 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8017d1a:	1406      	asrs	r6, r0, #16
 8017d1c:	d405      	bmi.n	8017d2a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8017d1e:	4556      	cmp	r6, sl
 8017d20:	da03      	bge.n	8017d2a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8017d22:	1416      	asrs	r6, r2, #16
 8017d24:	d401      	bmi.n	8017d2a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8017d26:	454e      	cmp	r6, r9
 8017d28:	db07      	blt.n	8017d3a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8017d2a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8017d2c:	3b01      	subs	r3, #1
 8017d2e:	3403      	adds	r4, #3
 8017d30:	4430      	add	r0, r6
 8017d32:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8017d34:	4432      	add	r2, r6
 8017d36:	e7ee      	b.n	8017d16 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8017d38:	d063      	beq.n	8017e02 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8017d3a:	1e5e      	subs	r6, r3, #1
 8017d3c:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8017d3e:	fb07 0706 	mla	r7, r7, r6, r0
 8017d42:	143f      	asrs	r7, r7, #16
 8017d44:	d454      	bmi.n	8017df0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8017d46:	4557      	cmp	r7, sl
 8017d48:	da52      	bge.n	8017df0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8017d4a:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8017d4c:	fb07 2606 	mla	r6, r7, r6, r2
 8017d50:	1436      	asrs	r6, r6, #16
 8017d52:	d44d      	bmi.n	8017df0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8017d54:	454e      	cmp	r6, r9
 8017d56:	da4b      	bge.n	8017df0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8017d58:	1ce6      	adds	r6, r4, #3
 8017d5a:	4699      	mov	r9, r3
 8017d5c:	f1b9 0f00 	cmp.w	r9, #0
 8017d60:	f106 0603 	add.w	r6, r6, #3
 8017d64:	dd48      	ble.n	8017df8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8017d66:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 8017d6a:	1417      	asrs	r7, r2, #16
 8017d6c:	9902      	ldr	r1, [sp, #8]
 8017d6e:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8017d72:	f109 39ff 	add.w	r9, r9, #4294967295
 8017d76:	fb0b 1707 	mla	r7, fp, r7, r1
 8017d7a:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 8017d7e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8017d80:	f817 700a 	ldrb.w	r7, [r7, sl]
 8017d84:	fb1b fb05 	smulbb	fp, fp, r5
 8017d88:	4408      	add	r0, r1
 8017d8a:	9912      	ldr	r1, [sp, #72]	; 0x48
 8017d8c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8017d90:	440a      	add	r2, r1
 8017d92:	eb0e 0a07 	add.w	sl, lr, r7
 8017d96:	f81e 7007 	ldrb.w	r7, [lr, r7]
 8017d9a:	fb07 b708 	mla	r7, r7, r8, fp
 8017d9e:	b2bf      	uxth	r7, r7
 8017da0:	f107 0b01 	add.w	fp, r7, #1
 8017da4:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8017da8:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 8017dac:	fb1b fb05 	smulbb	fp, fp, r5
 8017db0:	123f      	asrs	r7, r7, #8
 8017db2:	f806 7c06 	strb.w	r7, [r6, #-6]
 8017db6:	f89a 7001 	ldrb.w	r7, [sl, #1]
 8017dba:	fb07 b708 	mla	r7, r7, r8, fp
 8017dbe:	b2bf      	uxth	r7, r7
 8017dc0:	f107 0b01 	add.w	fp, r7, #1
 8017dc4:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8017dc8:	123f      	asrs	r7, r7, #8
 8017dca:	f806 7c05 	strb.w	r7, [r6, #-5]
 8017dce:	f89a 7002 	ldrb.w	r7, [sl, #2]
 8017dd2:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 8017dd6:	fb1a fa05 	smulbb	sl, sl, r5
 8017dda:	fb07 a708 	mla	r7, r7, r8, sl
 8017dde:	b2bf      	uxth	r7, r7
 8017de0:	f107 0a01 	add.w	sl, r7, #1
 8017de4:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 8017de8:	123f      	asrs	r7, r7, #8
 8017dea:	f806 7c04 	strb.w	r7, [r6, #-4]
 8017dee:	e7b5      	b.n	8017d5c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8017df0:	2700      	movs	r7, #0
 8017df2:	1bde      	subs	r6, r3, r7
 8017df4:	2e00      	cmp	r6, #0
 8017df6:	dc42      	bgt.n	8017e7e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8017df8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017dfc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017e00:	441c      	add	r4, r3
 8017e02:	9b01      	ldr	r3, [sp, #4]
 8017e04:	2b00      	cmp	r3, #0
 8017e06:	f340 8092 	ble.w	8017f2e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8017e0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017e0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017e10:	ee30 0a04 	vadd.f32	s0, s0, s8
 8017e14:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8017e18:	eef0 6a62 	vmov.f32	s13, s5
 8017e1c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8017e20:	ee31 1a05 	vadd.f32	s2, s2, s10
 8017e24:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017e28:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 8017e2c:	eef0 6a43 	vmov.f32	s13, s6
 8017e30:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017e34:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 8017e38:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8017e3c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8017e40:	ee77 2a62 	vsub.f32	s5, s14, s5
 8017e44:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8017e48:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8017e4c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8017e50:	ee12 2a90 	vmov	r2, s5
 8017e54:	eef0 2a47 	vmov.f32	s5, s14
 8017e58:	fb92 f3f3 	sdiv	r3, r2, r3
 8017e5c:	ee13 2a10 	vmov	r2, s6
 8017e60:	9311      	str	r3, [sp, #68]	; 0x44
 8017e62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017e64:	eeb0 3a67 	vmov.f32	s6, s15
 8017e68:	fb92 f3f3 	sdiv	r3, r2, r3
 8017e6c:	9312      	str	r3, [sp, #72]	; 0x48
 8017e6e:	9b01      	ldr	r3, [sp, #4]
 8017e70:	9a03      	ldr	r2, [sp, #12]
 8017e72:	3b01      	subs	r3, #1
 8017e74:	9301      	str	r3, [sp, #4]
 8017e76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017e78:	bf08      	it	eq
 8017e7a:	4613      	moveq	r3, r2
 8017e7c:	e73a      	b.n	8017cf4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8017e7e:	ea5f 4a20 	movs.w	sl, r0, asr #16
 8017e82:	d44e      	bmi.n	8017f22 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8017e84:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8017e88:	4556      	cmp	r6, sl
 8017e8a:	dd4a      	ble.n	8017f22 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8017e8c:	ea5f 4b22 	movs.w	fp, r2, asr #16
 8017e90:	d447      	bmi.n	8017f22 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8017e92:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8017e96:	4559      	cmp	r1, fp
 8017e98:	dd43      	ble.n	8017f22 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8017e9a:	fa0f f986 	sxth.w	r9, r6
 8017e9e:	9902      	ldr	r1, [sp, #8]
 8017ea0:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8017ea4:	fb0b 1909 	mla	r9, fp, r9, r1
 8017ea8:	f814 b006 	ldrb.w	fp, [r4, r6]
 8017eac:	f819 900a 	ldrb.w	r9, [r9, sl]
 8017eb0:	fb1b fb05 	smulbb	fp, fp, r5
 8017eb4:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8017eb8:	eb0e 0a09 	add.w	sl, lr, r9
 8017ebc:	f81e 9009 	ldrb.w	r9, [lr, r9]
 8017ec0:	fb09 b908 	mla	r9, r9, r8, fp
 8017ec4:	fa1f f989 	uxth.w	r9, r9
 8017ec8:	f109 0b01 	add.w	fp, r9, #1
 8017ecc:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8017ed0:	ea4f 2929 	mov.w	r9, r9, asr #8
 8017ed4:	f804 9006 	strb.w	r9, [r4, r6]
 8017ed8:	4426      	add	r6, r4
 8017eda:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8017ede:	f896 b001 	ldrb.w	fp, [r6, #1]
 8017ee2:	fb1b fb05 	smulbb	fp, fp, r5
 8017ee6:	fb09 b908 	mla	r9, r9, r8, fp
 8017eea:	fa1f f989 	uxth.w	r9, r9
 8017eee:	f109 0b01 	add.w	fp, r9, #1
 8017ef2:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8017ef6:	ea4f 2929 	mov.w	r9, r9, asr #8
 8017efa:	f886 9001 	strb.w	r9, [r6, #1]
 8017efe:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8017f02:	f896 a002 	ldrb.w	sl, [r6, #2]
 8017f06:	fb1a fa05 	smulbb	sl, sl, r5
 8017f0a:	fb09 a908 	mla	r9, r9, r8, sl
 8017f0e:	fa1f f989 	uxth.w	r9, r9
 8017f12:	f109 0a01 	add.w	sl, r9, #1
 8017f16:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 8017f1a:	ea4f 2929 	mov.w	r9, r9, asr #8
 8017f1e:	f886 9002 	strb.w	r9, [r6, #2]
 8017f22:	9911      	ldr	r1, [sp, #68]	; 0x44
 8017f24:	3701      	adds	r7, #1
 8017f26:	4408      	add	r0, r1
 8017f28:	9912      	ldr	r1, [sp, #72]	; 0x48
 8017f2a:	440a      	add	r2, r1
 8017f2c:	e761      	b.n	8017df2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8017f2e:	b005      	add	sp, #20
 8017f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017f34 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8017f34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f38:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8017f3a:	4693      	mov	fp, r2
 8017f3c:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8017f3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8017f42:	6868      	ldr	r0, [r5, #4]
 8017f44:	6877      	ldr	r7, [r6, #4]
 8017f46:	9100      	str	r1, [sp, #0]
 8017f48:	3704      	adds	r7, #4
 8017f4a:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 8017f4e:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	; 0x3c
 8017f52:	fb00 2404 	mla	r4, r0, r4, r2
 8017f56:	682a      	ldr	r2, [r5, #0]
 8017f58:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8017f5c:	4414      	add	r4, r2
 8017f5e:	6832      	ldr	r2, [r6, #0]
 8017f60:	9201      	str	r2, [sp, #4]
 8017f62:	9a00      	ldr	r2, [sp, #0]
 8017f64:	2a00      	cmp	r2, #0
 8017f66:	dc03      	bgt.n	8017f70 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8017f68:	f1bb 0f00 	cmp.w	fp, #0
 8017f6c:	f340 80bc 	ble.w	80180e8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8017f70:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017f72:	f9b6 a008 	ldrsh.w	sl, [r6, #8]
 8017f76:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8017f7a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017f7c:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 8017f80:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8017f84:	2b00      	cmp	r3, #0
 8017f86:	dd0c      	ble.n	8017fa2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8017f88:	1405      	asrs	r5, r0, #16
 8017f8a:	d405      	bmi.n	8017f98 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8017f8c:	4555      	cmp	r5, sl
 8017f8e:	da03      	bge.n	8017f98 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8017f90:	1415      	asrs	r5, r2, #16
 8017f92:	d401      	bmi.n	8017f98 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8017f94:	454d      	cmp	r5, r9
 8017f96:	db05      	blt.n	8017fa4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8017f98:	4440      	add	r0, r8
 8017f9a:	4472      	add	r2, lr
 8017f9c:	3b01      	subs	r3, #1
 8017f9e:	3403      	adds	r4, #3
 8017fa0:	e7f0      	b.n	8017f84 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8017fa2:	d03f      	beq.n	8018024 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 8017fa4:	1e5d      	subs	r5, r3, #1
 8017fa6:	fb08 0c05 	mla	ip, r8, r5, r0
 8017faa:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 8017fae:	d42e      	bmi.n	801800e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8017fb0:	45d4      	cmp	ip, sl
 8017fb2:	da2c      	bge.n	801800e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8017fb4:	fb0e 2505 	mla	r5, lr, r5, r2
 8017fb8:	142d      	asrs	r5, r5, #16
 8017fba:	d428      	bmi.n	801800e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8017fbc:	454d      	cmp	r5, r9
 8017fbe:	da26      	bge.n	801800e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8017fc0:	1ce5      	adds	r5, r4, #3
 8017fc2:	469c      	mov	ip, r3
 8017fc4:	f1bc 0f00 	cmp.w	ip, #0
 8017fc8:	f105 0503 	add.w	r5, r5, #3
 8017fcc:	dd25      	ble.n	801801a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 8017fce:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8017fd2:	ea4f 4922 	mov.w	r9, r2, asr #16
 8017fd6:	f10c 3cff 	add.w	ip, ip, #4294967295
 8017fda:	4472      	add	r2, lr
 8017fdc:	468a      	mov	sl, r1
 8017fde:	9901      	ldr	r1, [sp, #4]
 8017fe0:	fb0a 1909 	mla	r9, sl, r9, r1
 8017fe4:	1401      	asrs	r1, r0, #16
 8017fe6:	4440      	add	r0, r8
 8017fe8:	f819 9001 	ldrb.w	r9, [r9, r1]
 8017fec:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8017ff0:	eb07 0a09 	add.w	sl, r7, r9
 8017ff4:	f817 9009 	ldrb.w	r9, [r7, r9]
 8017ff8:	f805 9c06 	strb.w	r9, [r5, #-6]
 8017ffc:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8018000:	f805 9c05 	strb.w	r9, [r5, #-5]
 8018004:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8018008:	f805 9c04 	strb.w	r9, [r5, #-4]
 801800c:	e7da      	b.n	8017fc4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801800e:	2500      	movs	r5, #0
 8018010:	eba3 0c05 	sub.w	ip, r3, r5
 8018014:	f1bc 0f00 	cmp.w	ip, #0
 8018018:	dc3b      	bgt.n	8018092 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801801a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801801e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018022:	441c      	add	r4, r3
 8018024:	9b00      	ldr	r3, [sp, #0]
 8018026:	2b00      	cmp	r3, #0
 8018028:	dd5e      	ble.n	80180e8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801802a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801802e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018030:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018034:	eeb0 6a62 	vmov.f32	s12, s5
 8018038:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801803c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018040:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018044:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 8018048:	eeb0 6a43 	vmov.f32	s12, s6
 801804c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018050:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 8018054:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8018058:	ee61 7a27 	vmul.f32	s15, s2, s15
 801805c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018060:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8018064:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8018068:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801806c:	ee12 2a90 	vmov	r2, s5
 8018070:	eef0 2a47 	vmov.f32	s5, s14
 8018074:	fb92 f8f3 	sdiv	r8, r2, r3
 8018078:	ee13 2a10 	vmov	r2, s6
 801807c:	eeb0 3a67 	vmov.f32	s6, s15
 8018080:	fb92 fef3 	sdiv	lr, r2, r3
 8018084:	9b00      	ldr	r3, [sp, #0]
 8018086:	3b01      	subs	r3, #1
 8018088:	9300      	str	r3, [sp, #0]
 801808a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801808c:	bf08      	it	eq
 801808e:	465b      	moveq	r3, fp
 8018090:	e767      	b.n	8017f62 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8018092:	ea5f 4920 	movs.w	r9, r0, asr #16
 8018096:	d423      	bmi.n	80180e0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8018098:	f8d6 c008 	ldr.w	ip, [r6, #8]
 801809c:	45cc      	cmp	ip, r9
 801809e:	dd1f      	ble.n	80180e0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 80180a0:	ea5f 4a22 	movs.w	sl, r2, asr #16
 80180a4:	d41c      	bmi.n	80180e0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 80180a6:	68f1      	ldr	r1, [r6, #12]
 80180a8:	4551      	cmp	r1, sl
 80180aa:	dd19      	ble.n	80180e0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 80180ac:	fa0f fc8c 	sxth.w	ip, ip
 80180b0:	9901      	ldr	r1, [sp, #4]
 80180b2:	fb0a 1c0c 	mla	ip, sl, ip, r1
 80180b6:	f81c c009 	ldrb.w	ip, [ip, r9]
 80180ba:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80180be:	f817 a00c 	ldrb.w	sl, [r7, ip]
 80180c2:	eb07 090c 	add.w	r9, r7, ip
 80180c6:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 80180ca:	f804 a00c 	strb.w	sl, [r4, ip]
 80180ce:	44a4      	add	ip, r4
 80180d0:	f899 a001 	ldrb.w	sl, [r9, #1]
 80180d4:	f88c a001 	strb.w	sl, [ip, #1]
 80180d8:	f899 9002 	ldrb.w	r9, [r9, #2]
 80180dc:	f88c 9002 	strb.w	r9, [ip, #2]
 80180e0:	4440      	add	r0, r8
 80180e2:	4472      	add	r2, lr
 80180e4:	3501      	adds	r5, #1
 80180e6:	e793      	b.n	8018010 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xdc>
 80180e8:	b003      	add	sp, #12
 80180ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080180ee <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80180ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80180f2:	b085      	sub	sp, #20
 80180f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80180f8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80180fa:	9202      	str	r2, [sp, #8]
 80180fc:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 8018100:	6860      	ldr	r0, [r4, #4]
 8018102:	9203      	str	r2, [sp, #12]
 8018104:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8018108:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 801810c:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 8018110:	fb00 2505 	mla	r5, r0, r5, r2
 8018114:	6822      	ldr	r2, [r4, #0]
 8018116:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801811a:	4415      	add	r5, r2
 801811c:	f8dc 2000 	ldr.w	r2, [ip]
 8018120:	9200      	str	r2, [sp, #0]
 8018122:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8018126:	3204      	adds	r2, #4
 8018128:	9201      	str	r2, [sp, #4]
 801812a:	2900      	cmp	r1, #0
 801812c:	dc03      	bgt.n	8018136 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801812e:	9a02      	ldr	r2, [sp, #8]
 8018130:	2a00      	cmp	r2, #0
 8018132:	f340 8127 	ble.w	8018384 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8018136:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018138:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801813c:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8018140:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018142:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8018146:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801814a:	2b00      	cmp	r3, #0
 801814c:	dd0d      	ble.n	801816a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801814e:	1422      	asrs	r2, r4, #16
 8018150:	d405      	bmi.n	801815e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8018152:	4542      	cmp	r2, r8
 8018154:	da03      	bge.n	801815e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8018156:	1402      	asrs	r2, r0, #16
 8018158:	d401      	bmi.n	801815e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801815a:	42ba      	cmp	r2, r7
 801815c:	db06      	blt.n	801816c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801815e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018160:	4474      	add	r4, lr
 8018162:	3b01      	subs	r3, #1
 8018164:	3503      	adds	r5, #3
 8018166:	4410      	add	r0, r2
 8018168:	e7ef      	b.n	801814a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801816a:	d075      	beq.n	8018258 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801816c:	1e5a      	subs	r2, r3, #1
 801816e:	fb0e 4602 	mla	r6, lr, r2, r4
 8018172:	1436      	asrs	r6, r6, #16
 8018174:	d465      	bmi.n	8018242 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8018176:	4546      	cmp	r6, r8
 8018178:	da63      	bge.n	8018242 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801817a:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801817c:	fb06 0202 	mla	r2, r6, r2, r0
 8018180:	1412      	asrs	r2, r2, #16
 8018182:	d45e      	bmi.n	8018242 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8018184:	42ba      	cmp	r2, r7
 8018186:	da5c      	bge.n	8018242 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8018188:	1cef      	adds	r7, r5, #3
 801818a:	4699      	mov	r9, r3
 801818c:	f1b9 0f00 	cmp.w	r9, #0
 8018190:	dd5d      	ble.n	801824e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 8018192:	1402      	asrs	r2, r0, #16
 8018194:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8018198:	1426      	asrs	r6, r4, #16
 801819a:	4692      	mov	sl, r2
 801819c:	9a00      	ldr	r2, [sp, #0]
 801819e:	fb08 220a 	mla	r2, r8, sl, r2
 80181a2:	5d92      	ldrb	r2, [r2, r6]
 80181a4:	9e01      	ldr	r6, [sp, #4]
 80181a6:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 80181aa:	ea5f 6816 	movs.w	r8, r6, lsr #24
 80181ae:	d041      	beq.n	8018234 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80181b0:	9a03      	ldr	r2, [sp, #12]
 80181b2:	fa5f fb86 	uxtb.w	fp, r6
 80181b6:	fb02 f808 	mul.w	r8, r2, r8
 80181ba:	f108 0201 	add.w	r2, r8, #1
 80181be:	eb02 2228 	add.w	r2, r2, r8, asr #8
 80181c2:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 80181c6:	1212      	asrs	r2, r2, #8
 80181c8:	fa1f fa82 	uxth.w	sl, r2
 80181cc:	43d2      	mvns	r2, r2
 80181ce:	fb1b fb0a 	smulbb	fp, fp, sl
 80181d2:	b2d2      	uxtb	r2, r2
 80181d4:	fb08 b802 	mla	r8, r8, r2, fp
 80181d8:	fa1f f888 	uxth.w	r8, r8
 80181dc:	f108 0b01 	add.w	fp, r8, #1
 80181e0:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80181e4:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 80181e8:	f3c6 4607 	ubfx	r6, r6, #16, #8
 80181ec:	fb1b fb0a 	smulbb	fp, fp, sl
 80181f0:	ea4f 2828 	mov.w	r8, r8, asr #8
 80181f4:	fb16 fa0a 	smulbb	sl, r6, sl
 80181f8:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 80181fc:	f807 8c03 	strb.w	r8, [r7, #-3]
 8018200:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 8018204:	fb06 aa02 	mla	sl, r6, r2, sl
 8018208:	fb08 b802 	mla	r8, r8, r2, fp
 801820c:	fa1f fa8a 	uxth.w	sl, sl
 8018210:	fa1f f888 	uxth.w	r8, r8
 8018214:	f10a 0601 	add.w	r6, sl, #1
 8018218:	f108 0b01 	add.w	fp, r8, #1
 801821c:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 8018220:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8018224:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8018228:	ea4f 2828 	mov.w	r8, r8, asr #8
 801822c:	f807 ac01 	strb.w	sl, [r7, #-1]
 8018230:	f807 8c02 	strb.w	r8, [r7, #-2]
 8018234:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018236:	4474      	add	r4, lr
 8018238:	3703      	adds	r7, #3
 801823a:	f109 39ff 	add.w	r9, r9, #4294967295
 801823e:	4410      	add	r0, r2
 8018240:	e7a4      	b.n	801818c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8018242:	f04f 0800 	mov.w	r8, #0
 8018246:	eba3 0208 	sub.w	r2, r3, r8
 801824a:	2a00      	cmp	r2, #0
 801824c:	dc3b      	bgt.n	80182c6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 801824e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018252:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018256:	441d      	add	r5, r3
 8018258:	2900      	cmp	r1, #0
 801825a:	f340 8093 	ble.w	8018384 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801825e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8018262:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018264:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018268:	3901      	subs	r1, #1
 801826a:	eeb0 6a62 	vmov.f32	s12, s5
 801826e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8018272:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018276:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801827a:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801827e:	eeb0 6a43 	vmov.f32	s12, s6
 8018282:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018286:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801828a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801828e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018292:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018296:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801829a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801829e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80182a2:	ee12 2a90 	vmov	r2, s5
 80182a6:	eef0 2a47 	vmov.f32	s5, s14
 80182aa:	fb92 fef3 	sdiv	lr, r2, r3
 80182ae:	ee13 2a10 	vmov	r2, s6
 80182b2:	eeb0 3a67 	vmov.f32	s6, s15
 80182b6:	fb92 f3f3 	sdiv	r3, r2, r3
 80182ba:	9a02      	ldr	r2, [sp, #8]
 80182bc:	9312      	str	r3, [sp, #72]	; 0x48
 80182be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80182c0:	bf08      	it	eq
 80182c2:	4613      	moveq	r3, r2
 80182c4:	e731      	b.n	801812a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80182c6:	1427      	asrs	r7, r4, #16
 80182c8:	d456      	bmi.n	8018378 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 80182ca:	f8dc 6008 	ldr.w	r6, [ip, #8]
 80182ce:	42be      	cmp	r6, r7
 80182d0:	dd52      	ble.n	8018378 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 80182d2:	ea5f 4920 	movs.w	r9, r0, asr #16
 80182d6:	d44f      	bmi.n	8018378 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 80182d8:	f8dc 200c 	ldr.w	r2, [ip, #12]
 80182dc:	454a      	cmp	r2, r9
 80182de:	dd4b      	ble.n	8018378 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 80182e0:	9a00      	ldr	r2, [sp, #0]
 80182e2:	b236      	sxth	r6, r6
 80182e4:	fb09 2606 	mla	r6, r9, r6, r2
 80182e8:	5df2      	ldrb	r2, [r6, r7]
 80182ea:	9e01      	ldr	r6, [sp, #4]
 80182ec:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 80182f0:	0e3a      	lsrs	r2, r7, #24
 80182f2:	d041      	beq.n	8018378 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 80182f4:	9e03      	ldr	r6, [sp, #12]
 80182f6:	fa5f fb87 	uxtb.w	fp, r7
 80182fa:	4372      	muls	r2, r6
 80182fc:	1c56      	adds	r6, r2, #1
 80182fe:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8018302:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 8018306:	1212      	asrs	r2, r2, #8
 8018308:	f815 9006 	ldrb.w	r9, [r5, r6]
 801830c:	fa1f fa82 	uxth.w	sl, r2
 8018310:	43d2      	mvns	r2, r2
 8018312:	fb1b fb0a 	smulbb	fp, fp, sl
 8018316:	b2d2      	uxtb	r2, r2
 8018318:	fb09 b902 	mla	r9, r9, r2, fp
 801831c:	fa1f f989 	uxth.w	r9, r9
 8018320:	f109 0b01 	add.w	fp, r9, #1
 8018324:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8018328:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801832c:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8018330:	fb1b fb0a 	smulbb	fp, fp, sl
 8018334:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018338:	fb17 fa0a 	smulbb	sl, r7, sl
 801833c:	f805 9006 	strb.w	r9, [r5, r6]
 8018340:	442e      	add	r6, r5
 8018342:	78b7      	ldrb	r7, [r6, #2]
 8018344:	f896 9001 	ldrb.w	r9, [r6, #1]
 8018348:	fb07 aa02 	mla	sl, r7, r2, sl
 801834c:	fb09 b902 	mla	r9, r9, r2, fp
 8018350:	fa1f fa8a 	uxth.w	sl, sl
 8018354:	fa1f f989 	uxth.w	r9, r9
 8018358:	f10a 0701 	add.w	r7, sl, #1
 801835c:	f109 0b01 	add.w	fp, r9, #1
 8018360:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8018364:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8018368:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801836c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018370:	f886 a002 	strb.w	sl, [r6, #2]
 8018374:	f886 9001 	strb.w	r9, [r6, #1]
 8018378:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801837a:	4474      	add	r4, lr
 801837c:	f108 0801 	add.w	r8, r8, #1
 8018380:	4410      	add	r0, r2
 8018382:	e760      	b.n	8018246 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x158>
 8018384:	b005      	add	sp, #20
 8018386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801838a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801838a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801838e:	b085      	sub	sp, #20
 8018390:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8018394:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8018396:	9203      	str	r2, [sp, #12]
 8018398:	6868      	ldr	r0, [r5, #4]
 801839a:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801839e:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 80183a2:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 80183a6:	fb00 2404 	mla	r4, r0, r4, r2
 80183aa:	682a      	ldr	r2, [r5, #0]
 80183ac:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80183b0:	4414      	add	r4, r2
 80183b2:	f8dc 2000 	ldr.w	r2, [ip]
 80183b6:	9201      	str	r2, [sp, #4]
 80183b8:	f8dc 2004 	ldr.w	r2, [ip, #4]
 80183bc:	3204      	adds	r2, #4
 80183be:	9202      	str	r2, [sp, #8]
 80183c0:	2900      	cmp	r1, #0
 80183c2:	dc03      	bgt.n	80183cc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 80183c4:	9a03      	ldr	r2, [sp, #12]
 80183c6:	2a00      	cmp	r2, #0
 80183c8:	f340 8137 	ble.w	801863a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80183cc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80183ce:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80183d2:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80183d6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80183d8:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 80183dc:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80183e0:	2b00      	cmp	r3, #0
 80183e2:	dd0d      	ble.n	8018400 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80183e4:	1405      	asrs	r5, r0, #16
 80183e6:	d405      	bmi.n	80183f4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80183e8:	4545      	cmp	r5, r8
 80183ea:	da03      	bge.n	80183f4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80183ec:	1415      	asrs	r5, r2, #16
 80183ee:	d401      	bmi.n	80183f4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80183f0:	42bd      	cmp	r5, r7
 80183f2:	db06      	blt.n	8018402 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80183f4:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80183f6:	4470      	add	r0, lr
 80183f8:	3b01      	subs	r3, #1
 80183fa:	3403      	adds	r4, #3
 80183fc:	442a      	add	r2, r5
 80183fe:	e7ef      	b.n	80183e0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8018400:	d070      	beq.n	80184e4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 8018402:	1e5d      	subs	r5, r3, #1
 8018404:	fb0e 0605 	mla	r6, lr, r5, r0
 8018408:	1436      	asrs	r6, r6, #16
 801840a:	d462      	bmi.n	80184d2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801840c:	4546      	cmp	r6, r8
 801840e:	da60      	bge.n	80184d2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8018410:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8018412:	fb06 2505 	mla	r5, r6, r5, r2
 8018416:	142d      	asrs	r5, r5, #16
 8018418:	d45b      	bmi.n	80184d2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801841a:	42bd      	cmp	r5, r7
 801841c:	da59      	bge.n	80184d2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801841e:	1ce5      	adds	r5, r4, #3
 8018420:	469a      	mov	sl, r3
 8018422:	f1ba 0f00 	cmp.w	sl, #0
 8018426:	dd58      	ble.n	80184da <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 8018428:	1416      	asrs	r6, r2, #16
 801842a:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801842e:	1407      	asrs	r7, r0, #16
 8018430:	46b1      	mov	r9, r6
 8018432:	9e01      	ldr	r6, [sp, #4]
 8018434:	fb08 6609 	mla	r6, r8, r9, r6
 8018438:	5df6      	ldrb	r6, [r6, r7]
 801843a:	9f02      	ldr	r7, [sp, #8]
 801843c:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 8018440:	0e37      	lsrs	r7, r6, #24
 8018442:	2fff      	cmp	r7, #255	; 0xff
 8018444:	f000 80f0 	beq.w	8018628 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 8018448:	fa5f f887 	uxtb.w	r8, r7
 801844c:	b3d7      	cbz	r7, 80184c4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801844e:	fa1f f788 	uxth.w	r7, r8
 8018452:	ea6f 0808 	mvn.w	r8, r8
 8018456:	fa5f fb86 	uxtb.w	fp, r6
 801845a:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 801845e:	fa5f f888 	uxtb.w	r8, r8
 8018462:	fb1b fb07 	smulbb	fp, fp, r7
 8018466:	fb09 b908 	mla	r9, r9, r8, fp
 801846a:	fa1f f989 	uxth.w	r9, r9
 801846e:	f109 0b01 	add.w	fp, r9, #1
 8018472:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8018476:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801847a:	fb1b fb08 	smulbb	fp, fp, r8
 801847e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018482:	f805 9c03 	strb.w	r9, [r5, #-3]
 8018486:	f3c6 2907 	ubfx	r9, r6, #8, #8
 801848a:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801848e:	fb09 b907 	mla	r9, r9, r7, fp
 8018492:	fa1f f989 	uxth.w	r9, r9
 8018496:	f109 0b01 	add.w	fp, r9, #1
 801849a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801849e:	ea4f 2929 	mov.w	r9, r9, asr #8
 80184a2:	f805 9c02 	strb.w	r9, [r5, #-2]
 80184a6:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 80184aa:	fb19 f808 	smulbb	r8, r9, r8
 80184ae:	fb06 8607 	mla	r6, r6, r7, r8
 80184b2:	b2b6      	uxth	r6, r6
 80184b4:	f106 0801 	add.w	r8, r6, #1
 80184b8:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 80184bc:	ea4f 2828 	mov.w	r8, r8, asr #8
 80184c0:	f805 8c01 	strb.w	r8, [r5, #-1]
 80184c4:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80184c6:	4470      	add	r0, lr
 80184c8:	3503      	adds	r5, #3
 80184ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80184ce:	4432      	add	r2, r6
 80184d0:	e7a7      	b.n	8018422 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80184d2:	2600      	movs	r6, #0
 80184d4:	1b9d      	subs	r5, r3, r6
 80184d6:	2d00      	cmp	r5, #0
 80184d8:	dc3b      	bgt.n	8018552 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 80184da:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80184de:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80184e2:	441c      	add	r4, r3
 80184e4:	2900      	cmp	r1, #0
 80184e6:	f340 80a8 	ble.w	801863a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80184ea:	ee30 0a04 	vadd.f32	s0, s0, s8
 80184ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80184f0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80184f4:	3901      	subs	r1, #1
 80184f6:	eeb0 6a62 	vmov.f32	s12, s5
 80184fa:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80184fe:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018502:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018506:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801850a:	eeb0 6a43 	vmov.f32	s12, s6
 801850e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018512:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8018516:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801851a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801851e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018522:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8018526:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801852a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801852e:	ee12 2a90 	vmov	r2, s5
 8018532:	eef0 2a47 	vmov.f32	s5, s14
 8018536:	fb92 fef3 	sdiv	lr, r2, r3
 801853a:	ee13 2a10 	vmov	r2, s6
 801853e:	eeb0 3a67 	vmov.f32	s6, s15
 8018542:	fb92 f3f3 	sdiv	r3, r2, r3
 8018546:	9a03      	ldr	r2, [sp, #12]
 8018548:	9312      	str	r3, [sp, #72]	; 0x48
 801854a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801854c:	bf08      	it	eq
 801854e:	4613      	moveq	r3, r2
 8018550:	e736      	b.n	80183c0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8018552:	ea5f 4820 	movs.w	r8, r0, asr #16
 8018556:	d457      	bmi.n	8018608 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8018558:	f8dc 7008 	ldr.w	r7, [ip, #8]
 801855c:	4547      	cmp	r7, r8
 801855e:	dd53      	ble.n	8018608 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8018560:	ea5f 4922 	movs.w	r9, r2, asr #16
 8018564:	d450      	bmi.n	8018608 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8018566:	f8dc 500c 	ldr.w	r5, [ip, #12]
 801856a:	454d      	cmp	r5, r9
 801856c:	dd4c      	ble.n	8018608 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801856e:	9d01      	ldr	r5, [sp, #4]
 8018570:	b23f      	sxth	r7, r7
 8018572:	fb09 5707 	mla	r7, r9, r7, r5
 8018576:	f817 5008 	ldrb.w	r5, [r7, r8]
 801857a:	9f02      	ldr	r7, [sp, #8]
 801857c:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 8018580:	0e2f      	lsrs	r7, r5, #24
 8018582:	2fff      	cmp	r7, #255	; 0xff
 8018584:	d045      	beq.n	8018612 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 8018586:	fa5f f987 	uxtb.w	r9, r7
 801858a:	b3ef      	cbz	r7, 8018608 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801858c:	fa1f f889 	uxth.w	r8, r9
 8018590:	ea6f 0909 	mvn.w	r9, r9
 8018594:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 8018598:	fa5f fb85 	uxtb.w	fp, r5
 801859c:	f814 a007 	ldrb.w	sl, [r4, r7]
 80185a0:	fa5f f989 	uxtb.w	r9, r9
 80185a4:	fb1b fb08 	smulbb	fp, fp, r8
 80185a8:	fb0a ba09 	mla	sl, sl, r9, fp
 80185ac:	fa1f fa8a 	uxth.w	sl, sl
 80185b0:	f10a 0b01 	add.w	fp, sl, #1
 80185b4:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 80185b8:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80185bc:	f804 a007 	strb.w	sl, [r4, r7]
 80185c0:	4427      	add	r7, r4
 80185c2:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 80185c6:	f3c5 4507 	ubfx	r5, r5, #16, #8
 80185ca:	f897 b001 	ldrb.w	fp, [r7, #1]
 80185ce:	fb1b fb09 	smulbb	fp, fp, r9
 80185d2:	fb0a ba08 	mla	sl, sl, r8, fp
 80185d6:	fa1f fa8a 	uxth.w	sl, sl
 80185da:	f10a 0b01 	add.w	fp, sl, #1
 80185de:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 80185e2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80185e6:	f887 a001 	strb.w	sl, [r7, #1]
 80185ea:	f897 a002 	ldrb.w	sl, [r7, #2]
 80185ee:	fb1a f909 	smulbb	r9, sl, r9
 80185f2:	fb05 9508 	mla	r5, r5, r8, r9
 80185f6:	b2ad      	uxth	r5, r5
 80185f8:	f105 0901 	add.w	r9, r5, #1
 80185fc:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 8018600:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018604:	f887 9002 	strb.w	r9, [r7, #2]
 8018608:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801860a:	4470      	add	r0, lr
 801860c:	3601      	adds	r6, #1
 801860e:	442a      	add	r2, r5
 8018610:	e760      	b.n	80184d4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8018612:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 8018616:	ea4f 2815 	mov.w	r8, r5, lsr #8
 801861a:	55e5      	strb	r5, [r4, r7]
 801861c:	4427      	add	r7, r4
 801861e:	0c2d      	lsrs	r5, r5, #16
 8018620:	f887 8001 	strb.w	r8, [r7, #1]
 8018624:	70bd      	strb	r5, [r7, #2]
 8018626:	e7ef      	b.n	8018608 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8018628:	0a37      	lsrs	r7, r6, #8
 801862a:	f805 6c03 	strb.w	r6, [r5, #-3]
 801862e:	0c36      	lsrs	r6, r6, #16
 8018630:	f805 7c02 	strb.w	r7, [r5, #-2]
 8018634:	f805 6c01 	strb.w	r6, [r5, #-1]
 8018638:	e744      	b.n	80184c4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801863a:	b005      	add	sp, #20
 801863c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018640 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018640:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018644:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8018646:	9201      	str	r2, [sp, #4]
 8018648:	6870      	ldr	r0, [r6, #4]
 801864a:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 801864e:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 8018652:	fa1f fe85 	uxth.w	lr, r5
 8018656:	43ed      	mvns	r5, r5
 8018658:	f8dc 8000 	ldr.w	r8, [ip]
 801865c:	b2ed      	uxtb	r5, r5
 801865e:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 8018662:	fb00 2404 	mla	r4, r0, r4, r2
 8018666:	6832      	ldr	r2, [r6, #0]
 8018668:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801866c:	4414      	add	r4, r2
 801866e:	2900      	cmp	r1, #0
 8018670:	dc03      	bgt.n	801867a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8018672:	9a01      	ldr	r2, [sp, #4]
 8018674:	2a00      	cmp	r2, #0
 8018676:	f340 810d 	ble.w	8018894 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801867a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801867c:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 8018680:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8018684:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018686:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 801868a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801868e:	2b00      	cmp	r3, #0
 8018690:	dd0e      	ble.n	80186b0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8018692:	1406      	asrs	r6, r0, #16
 8018694:	d405      	bmi.n	80186a2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8018696:	4556      	cmp	r6, sl
 8018698:	da03      	bge.n	80186a2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801869a:	1416      	asrs	r6, r2, #16
 801869c:	d401      	bmi.n	80186a2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801869e:	454e      	cmp	r6, r9
 80186a0:	db07      	blt.n	80186b2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80186a2:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80186a4:	3b01      	subs	r3, #1
 80186a6:	3403      	adds	r4, #3
 80186a8:	4430      	add	r0, r6
 80186aa:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80186ac:	4432      	add	r2, r6
 80186ae:	e7ee      	b.n	801868e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 80186b0:	d060      	beq.n	8018774 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 80186b2:	1e5e      	subs	r6, r3, #1
 80186b4:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80186b6:	fb07 0706 	mla	r7, r7, r6, r0
 80186ba:	143f      	asrs	r7, r7, #16
 80186bc:	d451      	bmi.n	8018762 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 80186be:	4557      	cmp	r7, sl
 80186c0:	da4f      	bge.n	8018762 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 80186c2:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80186c4:	fb07 2606 	mla	r6, r7, r6, r2
 80186c8:	1436      	asrs	r6, r6, #16
 80186ca:	d44a      	bmi.n	8018762 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 80186cc:	454e      	cmp	r6, r9
 80186ce:	da48      	bge.n	8018762 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 80186d0:	1ce6      	adds	r6, r4, #3
 80186d2:	4699      	mov	r9, r3
 80186d4:	f1b9 0f00 	cmp.w	r9, #0
 80186d8:	f106 0603 	add.w	r6, r6, #3
 80186dc:	dd45      	ble.n	801876a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 80186de:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 80186e2:	ea4f 4a20 	mov.w	sl, r0, asr #16
 80186e6:	1417      	asrs	r7, r2, #16
 80186e8:	f109 39ff 	add.w	r9, r9, #4294967295
 80186ec:	fb0b a707 	mla	r7, fp, r7, sl
 80186f0:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 80186f4:	fb1b fb05 	smulbb	fp, fp, r5
 80186f8:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80186fc:	eb08 0a07 	add.w	sl, r8, r7
 8018700:	f818 7007 	ldrb.w	r7, [r8, r7]
 8018704:	fb07 b70e 	mla	r7, r7, lr, fp
 8018708:	b2bf      	uxth	r7, r7
 801870a:	f107 0b01 	add.w	fp, r7, #1
 801870e:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8018712:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 8018716:	fb1b fb05 	smulbb	fp, fp, r5
 801871a:	123f      	asrs	r7, r7, #8
 801871c:	f806 7c06 	strb.w	r7, [r6, #-6]
 8018720:	f89a 7001 	ldrb.w	r7, [sl, #1]
 8018724:	fb07 b70e 	mla	r7, r7, lr, fp
 8018728:	b2bf      	uxth	r7, r7
 801872a:	f107 0b01 	add.w	fp, r7, #1
 801872e:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8018732:	123f      	asrs	r7, r7, #8
 8018734:	f806 7c05 	strb.w	r7, [r6, #-5]
 8018738:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801873c:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 8018740:	fb1a fa05 	smulbb	sl, sl, r5
 8018744:	fb07 a70e 	mla	r7, r7, lr, sl
 8018748:	b2bf      	uxth	r7, r7
 801874a:	f107 0a01 	add.w	sl, r7, #1
 801874e:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 8018752:	123f      	asrs	r7, r7, #8
 8018754:	f806 7c04 	strb.w	r7, [r6, #-4]
 8018758:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801875a:	4438      	add	r0, r7
 801875c:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801875e:	443a      	add	r2, r7
 8018760:	e7b8      	b.n	80186d4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8018762:	2700      	movs	r7, #0
 8018764:	1bde      	subs	r6, r3, r7
 8018766:	2e00      	cmp	r6, #0
 8018768:	dc3f      	bgt.n	80187ea <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 801876a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801876e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018772:	441c      	add	r4, r3
 8018774:	2900      	cmp	r1, #0
 8018776:	f340 808d 	ble.w	8018894 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801877a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801877e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018780:	ee30 0a04 	vadd.f32	s0, s0, s8
 8018784:	3901      	subs	r1, #1
 8018786:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801878a:	eef0 6a62 	vmov.f32	s13, s5
 801878e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8018792:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018796:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801879a:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 801879e:	eef0 6a43 	vmov.f32	s13, s6
 80187a2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80187a6:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 80187aa:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80187ae:	ee61 7a27 	vmul.f32	s15, s2, s15
 80187b2:	ee77 2a62 	vsub.f32	s5, s14, s5
 80187b6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80187ba:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80187be:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80187c2:	ee12 2a90 	vmov	r2, s5
 80187c6:	eef0 2a47 	vmov.f32	s5, s14
 80187ca:	fb92 f3f3 	sdiv	r3, r2, r3
 80187ce:	ee13 2a10 	vmov	r2, s6
 80187d2:	930f      	str	r3, [sp, #60]	; 0x3c
 80187d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80187d6:	eeb0 3a67 	vmov.f32	s6, s15
 80187da:	fb92 f3f3 	sdiv	r3, r2, r3
 80187de:	9a01      	ldr	r2, [sp, #4]
 80187e0:	9310      	str	r3, [sp, #64]	; 0x40
 80187e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80187e4:	bf08      	it	eq
 80187e6:	4613      	moveq	r3, r2
 80187e8:	e741      	b.n	801866e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 80187ea:	ea5f 4920 	movs.w	r9, r0, asr #16
 80187ee:	d44b      	bmi.n	8018888 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 80187f0:	f8dc b008 	ldr.w	fp, [ip, #8]
 80187f4:	45cb      	cmp	fp, r9
 80187f6:	dd47      	ble.n	8018888 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 80187f8:	ea5f 4a22 	movs.w	sl, r2, asr #16
 80187fc:	d444      	bmi.n	8018888 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 80187fe:	f8dc 600c 	ldr.w	r6, [ip, #12]
 8018802:	4556      	cmp	r6, sl
 8018804:	dd40      	ble.n	8018888 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8018806:	fa0f f68b 	sxth.w	r6, fp
 801880a:	fb0a 9906 	mla	r9, sl, r6, r9
 801880e:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8018812:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8018816:	f814 b006 	ldrb.w	fp, [r4, r6]
 801881a:	fb1b fb05 	smulbb	fp, fp, r5
 801881e:	eb08 0a09 	add.w	sl, r8, r9
 8018822:	f818 9009 	ldrb.w	r9, [r8, r9]
 8018826:	fb09 b90e 	mla	r9, r9, lr, fp
 801882a:	fa1f f989 	uxth.w	r9, r9
 801882e:	f109 0b01 	add.w	fp, r9, #1
 8018832:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8018836:	ea4f 2929 	mov.w	r9, r9, asr #8
 801883a:	f804 9006 	strb.w	r9, [r4, r6]
 801883e:	4426      	add	r6, r4
 8018840:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8018844:	f896 b001 	ldrb.w	fp, [r6, #1]
 8018848:	fb1b fb05 	smulbb	fp, fp, r5
 801884c:	fb09 b90e 	mla	r9, r9, lr, fp
 8018850:	fa1f f989 	uxth.w	r9, r9
 8018854:	f109 0b01 	add.w	fp, r9, #1
 8018858:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801885c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018860:	f886 9001 	strb.w	r9, [r6, #1]
 8018864:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8018868:	f896 a002 	ldrb.w	sl, [r6, #2]
 801886c:	fb1a fa05 	smulbb	sl, sl, r5
 8018870:	fb09 a90e 	mla	r9, r9, lr, sl
 8018874:	fa1f f989 	uxth.w	r9, r9
 8018878:	f109 0a01 	add.w	sl, r9, #1
 801887c:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 8018880:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018884:	f886 9002 	strb.w	r9, [r6, #2]
 8018888:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801888a:	3701      	adds	r7, #1
 801888c:	4430      	add	r0, r6
 801888e:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8018890:	4432      	add	r2, r6
 8018892:	e767      	b.n	8018764 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 8018894:	b003      	add	sp, #12
 8018896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801889a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801889a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801889e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80188a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80188a4:	9201      	str	r2, [sp, #4]
 80188a6:	6868      	ldr	r0, [r5, #4]
 80188a8:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80188aa:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 80188ae:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	; 0x3c
 80188b2:	fb00 2404 	mla	r4, r0, r4, r2
 80188b6:	682a      	ldr	r2, [r5, #0]
 80188b8:	f8d7 8000 	ldr.w	r8, [r7]
 80188bc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80188c0:	4414      	add	r4, r2
 80188c2:	2900      	cmp	r1, #0
 80188c4:	dc03      	bgt.n	80188ce <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 80188c6:	9a01      	ldr	r2, [sp, #4]
 80188c8:	2a00      	cmp	r2, #0
 80188ca:	f340 80af 	ble.w	8018a2c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 80188ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80188d0:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 80188d4:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80188d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80188da:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 80188de:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80188e2:	2b00      	cmp	r3, #0
 80188e4:	dd0c      	ble.n	8018900 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80188e6:	1405      	asrs	r5, r0, #16
 80188e8:	d405      	bmi.n	80188f6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80188ea:	4555      	cmp	r5, sl
 80188ec:	da03      	bge.n	80188f6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80188ee:	1415      	asrs	r5, r2, #16
 80188f0:	d401      	bmi.n	80188f6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80188f2:	454d      	cmp	r5, r9
 80188f4:	db05      	blt.n	8018902 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80188f6:	4470      	add	r0, lr
 80188f8:	4462      	add	r2, ip
 80188fa:	3b01      	subs	r3, #1
 80188fc:	3403      	adds	r4, #3
 80188fe:	e7f0      	b.n	80188e2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8018900:	d038      	beq.n	8018974 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8018902:	1e5d      	subs	r5, r3, #1
 8018904:	fb0e 0605 	mla	r6, lr, r5, r0
 8018908:	1436      	asrs	r6, r6, #16
 801890a:	d42a      	bmi.n	8018962 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801890c:	4556      	cmp	r6, sl
 801890e:	da28      	bge.n	8018962 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8018910:	fb0c 2505 	mla	r5, ip, r5, r2
 8018914:	142d      	asrs	r5, r5, #16
 8018916:	d424      	bmi.n	8018962 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8018918:	454d      	cmp	r5, r9
 801891a:	da22      	bge.n	8018962 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801891c:	1ce6      	adds	r6, r4, #3
 801891e:	4699      	mov	r9, r3
 8018920:	f1b9 0f00 	cmp.w	r9, #0
 8018924:	f106 0603 	add.w	r6, r6, #3
 8018928:	dd1f      	ble.n	801896a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 801892a:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 801892e:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8018932:	1415      	asrs	r5, r2, #16
 8018934:	4470      	add	r0, lr
 8018936:	4462      	add	r2, ip
 8018938:	f109 39ff 	add.w	r9, r9, #4294967295
 801893c:	fb0b a505 	mla	r5, fp, r5, sl
 8018940:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018944:	eb08 0a05 	add.w	sl, r8, r5
 8018948:	f818 5005 	ldrb.w	r5, [r8, r5]
 801894c:	f806 5c06 	strb.w	r5, [r6, #-6]
 8018950:	f89a 5001 	ldrb.w	r5, [sl, #1]
 8018954:	f806 5c05 	strb.w	r5, [r6, #-5]
 8018958:	f89a 5002 	ldrb.w	r5, [sl, #2]
 801895c:	f806 5c04 	strb.w	r5, [r6, #-4]
 8018960:	e7de      	b.n	8018920 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8018962:	2600      	movs	r6, #0
 8018964:	1b9d      	subs	r5, r3, r6
 8018966:	2d00      	cmp	r5, #0
 8018968:	dc38      	bgt.n	80189dc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801896a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801896e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018972:	441c      	add	r4, r3
 8018974:	2900      	cmp	r1, #0
 8018976:	dd59      	ble.n	8018a2c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 8018978:	ee30 0a04 	vadd.f32	s0, s0, s8
 801897c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801897e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018982:	3901      	subs	r1, #1
 8018984:	eeb0 6a62 	vmov.f32	s12, s5
 8018988:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801898c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018990:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018994:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 8018998:	eeb0 6a43 	vmov.f32	s12, s6
 801899c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80189a0:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 80189a4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80189a8:	ee61 7a27 	vmul.f32	s15, s2, s15
 80189ac:	ee77 2a62 	vsub.f32	s5, s14, s5
 80189b0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80189b4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80189b8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80189bc:	ee12 2a90 	vmov	r2, s5
 80189c0:	eef0 2a47 	vmov.f32	s5, s14
 80189c4:	fb92 fef3 	sdiv	lr, r2, r3
 80189c8:	ee13 2a10 	vmov	r2, s6
 80189cc:	eeb0 3a67 	vmov.f32	s6, s15
 80189d0:	fb92 fcf3 	sdiv	ip, r2, r3
 80189d4:	9a01      	ldr	r2, [sp, #4]
 80189d6:	bf08      	it	eq
 80189d8:	4613      	moveq	r3, r2
 80189da:	e772      	b.n	80188c2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 80189dc:	ea5f 4920 	movs.w	r9, r0, asr #16
 80189e0:	d420      	bmi.n	8018a24 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 80189e2:	f8d7 b008 	ldr.w	fp, [r7, #8]
 80189e6:	45cb      	cmp	fp, r9
 80189e8:	dd1c      	ble.n	8018a24 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 80189ea:	ea5f 4a22 	movs.w	sl, r2, asr #16
 80189ee:	d419      	bmi.n	8018a24 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 80189f0:	68fd      	ldr	r5, [r7, #12]
 80189f2:	4555      	cmp	r5, sl
 80189f4:	dd16      	ble.n	8018a24 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 80189f6:	fa0f f58b 	sxth.w	r5, fp
 80189fa:	fb0a 9505 	mla	r5, sl, r5, r9
 80189fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018a02:	f818 9005 	ldrb.w	r9, [r8, r5]
 8018a06:	eb08 0b05 	add.w	fp, r8, r5
 8018a0a:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 8018a0e:	f804 9005 	strb.w	r9, [r4, r5]
 8018a12:	4425      	add	r5, r4
 8018a14:	f89b 9001 	ldrb.w	r9, [fp, #1]
 8018a18:	f885 9001 	strb.w	r9, [r5, #1]
 8018a1c:	f89b 9002 	ldrb.w	r9, [fp, #2]
 8018a20:	f885 9002 	strb.w	r9, [r5, #2]
 8018a24:	4470      	add	r0, lr
 8018a26:	4462      	add	r2, ip
 8018a28:	3601      	adds	r6, #1
 8018a2a:	e79b      	b.n	8018964 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 8018a2c:	b003      	add	sp, #12
 8018a2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018a32 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018a32:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a36:	b085      	sub	sp, #20
 8018a38:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8018a3c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8018a3e:	9202      	str	r2, [sp, #8]
 8018a40:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 8018a44:	6860      	ldr	r0, [r4, #4]
 8018a46:	9203      	str	r2, [sp, #12]
 8018a48:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8018a4c:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 8018a50:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 8018a54:	fb00 2505 	mla	r5, r0, r5, r2
 8018a58:	6822      	ldr	r2, [r4, #0]
 8018a5a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018a5e:	4415      	add	r5, r2
 8018a60:	f8dc 2000 	ldr.w	r2, [ip]
 8018a64:	9201      	str	r2, [sp, #4]
 8018a66:	2900      	cmp	r1, #0
 8018a68:	dc03      	bgt.n	8018a72 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8018a6a:	9a02      	ldr	r2, [sp, #8]
 8018a6c:	2a00      	cmp	r2, #0
 8018a6e:	f340 8122 	ble.w	8018cb6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 8018a72:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018a74:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8018a78:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8018a7c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018a7e:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8018a82:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8018a86:	2b00      	cmp	r3, #0
 8018a88:	dd0d      	ble.n	8018aa6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8018a8a:	1422      	asrs	r2, r4, #16
 8018a8c:	d405      	bmi.n	8018a9a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8018a8e:	4542      	cmp	r2, r8
 8018a90:	da03      	bge.n	8018a9a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8018a92:	1402      	asrs	r2, r0, #16
 8018a94:	d401      	bmi.n	8018a9a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8018a96:	42ba      	cmp	r2, r7
 8018a98:	db06      	blt.n	8018aa8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8018a9a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018a9c:	4474      	add	r4, lr
 8018a9e:	3b01      	subs	r3, #1
 8018aa0:	3503      	adds	r5, #3
 8018aa2:	4410      	add	r0, r2
 8018aa4:	e7ef      	b.n	8018a86 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8018aa6:	d072      	beq.n	8018b8e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 8018aa8:	1e5a      	subs	r2, r3, #1
 8018aaa:	fb0e 4602 	mla	r6, lr, r2, r4
 8018aae:	1436      	asrs	r6, r6, #16
 8018ab0:	d462      	bmi.n	8018b78 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8018ab2:	4546      	cmp	r6, r8
 8018ab4:	da60      	bge.n	8018b78 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8018ab6:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8018ab8:	fb06 0202 	mla	r2, r6, r2, r0
 8018abc:	1412      	asrs	r2, r2, #16
 8018abe:	d45b      	bmi.n	8018b78 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8018ac0:	42ba      	cmp	r2, r7
 8018ac2:	da59      	bge.n	8018b78 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8018ac4:	1cef      	adds	r7, r5, #3
 8018ac6:	4699      	mov	r9, r3
 8018ac8:	f1b9 0f00 	cmp.w	r9, #0
 8018acc:	dd5a      	ble.n	8018b84 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8018ace:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8018ad2:	1426      	asrs	r6, r4, #16
 8018ad4:	1402      	asrs	r2, r0, #16
 8018ad6:	fb08 6202 	mla	r2, r8, r2, r6
 8018ada:	9e01      	ldr	r6, [sp, #4]
 8018adc:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 8018ae0:	ea5f 6816 	movs.w	r8, r6, lsr #24
 8018ae4:	d041      	beq.n	8018b6a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8018ae6:	9a03      	ldr	r2, [sp, #12]
 8018ae8:	fa5f fb86 	uxtb.w	fp, r6
 8018aec:	fb02 f808 	mul.w	r8, r2, r8
 8018af0:	f108 0201 	add.w	r2, r8, #1
 8018af4:	eb02 2228 	add.w	r2, r2, r8, asr #8
 8018af8:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 8018afc:	1212      	asrs	r2, r2, #8
 8018afe:	fa1f fa82 	uxth.w	sl, r2
 8018b02:	43d2      	mvns	r2, r2
 8018b04:	fb1b fb0a 	smulbb	fp, fp, sl
 8018b08:	b2d2      	uxtb	r2, r2
 8018b0a:	fb08 b802 	mla	r8, r8, r2, fp
 8018b0e:	fa1f f888 	uxth.w	r8, r8
 8018b12:	f108 0b01 	add.w	fp, r8, #1
 8018b16:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8018b1a:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 8018b1e:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8018b22:	fb1b fb0a 	smulbb	fp, fp, sl
 8018b26:	ea4f 2828 	mov.w	r8, r8, asr #8
 8018b2a:	fb16 fa0a 	smulbb	sl, r6, sl
 8018b2e:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 8018b32:	f807 8c03 	strb.w	r8, [r7, #-3]
 8018b36:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 8018b3a:	fb06 aa02 	mla	sl, r6, r2, sl
 8018b3e:	fb08 b802 	mla	r8, r8, r2, fp
 8018b42:	fa1f fa8a 	uxth.w	sl, sl
 8018b46:	fa1f f888 	uxth.w	r8, r8
 8018b4a:	f10a 0601 	add.w	r6, sl, #1
 8018b4e:	f108 0b01 	add.w	fp, r8, #1
 8018b52:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 8018b56:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8018b5a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8018b5e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8018b62:	f807 ac01 	strb.w	sl, [r7, #-1]
 8018b66:	f807 8c02 	strb.w	r8, [r7, #-2]
 8018b6a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018b6c:	4474      	add	r4, lr
 8018b6e:	3703      	adds	r7, #3
 8018b70:	f109 39ff 	add.w	r9, r9, #4294967295
 8018b74:	4410      	add	r0, r2
 8018b76:	e7a7      	b.n	8018ac8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8018b78:	f04f 0800 	mov.w	r8, #0
 8018b7c:	eba3 0208 	sub.w	r2, r3, r8
 8018b80:	2a00      	cmp	r2, #0
 8018b82:	dc3b      	bgt.n	8018bfc <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8018b84:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018b88:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018b8c:	441d      	add	r5, r3
 8018b8e:	2900      	cmp	r1, #0
 8018b90:	f340 8091 	ble.w	8018cb6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 8018b94:	ee30 0a04 	vadd.f32	s0, s0, s8
 8018b98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018b9a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018b9e:	3901      	subs	r1, #1
 8018ba0:	eeb0 6a62 	vmov.f32	s12, s5
 8018ba4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8018ba8:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018bac:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018bb0:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8018bb4:	eeb0 6a43 	vmov.f32	s12, s6
 8018bb8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018bbc:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8018bc0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8018bc4:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018bc8:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018bcc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8018bd0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8018bd4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8018bd8:	ee12 2a90 	vmov	r2, s5
 8018bdc:	eef0 2a47 	vmov.f32	s5, s14
 8018be0:	fb92 fef3 	sdiv	lr, r2, r3
 8018be4:	ee13 2a10 	vmov	r2, s6
 8018be8:	eeb0 3a67 	vmov.f32	s6, s15
 8018bec:	fb92 f3f3 	sdiv	r3, r2, r3
 8018bf0:	9a02      	ldr	r2, [sp, #8]
 8018bf2:	9312      	str	r3, [sp, #72]	; 0x48
 8018bf4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018bf6:	bf08      	it	eq
 8018bf8:	4613      	moveq	r3, r2
 8018bfa:	e734      	b.n	8018a66 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8018bfc:	1427      	asrs	r7, r4, #16
 8018bfe:	d454      	bmi.n	8018caa <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8018c00:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8018c04:	42be      	cmp	r6, r7
 8018c06:	dd50      	ble.n	8018caa <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8018c08:	ea5f 4920 	movs.w	r9, r0, asr #16
 8018c0c:	d44d      	bmi.n	8018caa <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8018c0e:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8018c12:	454a      	cmp	r2, r9
 8018c14:	dd49      	ble.n	8018caa <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8018c16:	b236      	sxth	r6, r6
 8018c18:	9a01      	ldr	r2, [sp, #4]
 8018c1a:	fb09 7606 	mla	r6, r9, r6, r7
 8018c1e:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 8018c22:	0e3a      	lsrs	r2, r7, #24
 8018c24:	d041      	beq.n	8018caa <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8018c26:	9e03      	ldr	r6, [sp, #12]
 8018c28:	fa5f fb87 	uxtb.w	fp, r7
 8018c2c:	4372      	muls	r2, r6
 8018c2e:	1c56      	adds	r6, r2, #1
 8018c30:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8018c34:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 8018c38:	1212      	asrs	r2, r2, #8
 8018c3a:	f815 9006 	ldrb.w	r9, [r5, r6]
 8018c3e:	fa1f fa82 	uxth.w	sl, r2
 8018c42:	43d2      	mvns	r2, r2
 8018c44:	fb1b fb0a 	smulbb	fp, fp, sl
 8018c48:	b2d2      	uxtb	r2, r2
 8018c4a:	fb09 b902 	mla	r9, r9, r2, fp
 8018c4e:	fa1f f989 	uxth.w	r9, r9
 8018c52:	f109 0b01 	add.w	fp, r9, #1
 8018c56:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8018c5a:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8018c5e:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8018c62:	fb1b fb0a 	smulbb	fp, fp, sl
 8018c66:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018c6a:	fb17 fa0a 	smulbb	sl, r7, sl
 8018c6e:	f805 9006 	strb.w	r9, [r5, r6]
 8018c72:	442e      	add	r6, r5
 8018c74:	78b7      	ldrb	r7, [r6, #2]
 8018c76:	f896 9001 	ldrb.w	r9, [r6, #1]
 8018c7a:	fb07 aa02 	mla	sl, r7, r2, sl
 8018c7e:	fb09 b902 	mla	r9, r9, r2, fp
 8018c82:	fa1f fa8a 	uxth.w	sl, sl
 8018c86:	fa1f f989 	uxth.w	r9, r9
 8018c8a:	f10a 0701 	add.w	r7, sl, #1
 8018c8e:	f109 0b01 	add.w	fp, r9, #1
 8018c92:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8018c96:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8018c9a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8018c9e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018ca2:	f886 a002 	strb.w	sl, [r6, #2]
 8018ca6:	f886 9001 	strb.w	r9, [r6, #1]
 8018caa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018cac:	4474      	add	r4, lr
 8018cae:	f108 0801 	add.w	r8, r8, #1
 8018cb2:	4410      	add	r0, r2
 8018cb4:	e762      	b.n	8018b7c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8018cb6:	b005      	add	sp, #20
 8018cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018cbc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018cbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018cc0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8018cc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8018cc6:	9201      	str	r2, [sp, #4]
 8018cc8:	6860      	ldr	r0, [r4, #4]
 8018cca:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 8018cce:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	; 0x48
 8018cd2:	fb00 2505 	mla	r5, r0, r5, r2
 8018cd6:	6822      	ldr	r2, [r4, #0]
 8018cd8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018cdc:	4415      	add	r5, r2
 8018cde:	f8dc 2000 	ldr.w	r2, [ip]
 8018ce2:	9200      	str	r2, [sp, #0]
 8018ce4:	2900      	cmp	r1, #0
 8018ce6:	dc03      	bgt.n	8018cf0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8018ce8:	9a01      	ldr	r2, [sp, #4]
 8018cea:	2a00      	cmp	r2, #0
 8018cec:	f340 812b 	ble.w	8018f46 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8018cf0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018cf2:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8018cf6:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8018cfa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018cfc:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8018d00:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8018d04:	2b00      	cmp	r3, #0
 8018d06:	dd0e      	ble.n	8018d26 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8018d08:	1422      	asrs	r2, r4, #16
 8018d0a:	d405      	bmi.n	8018d18 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8018d0c:	4572      	cmp	r2, lr
 8018d0e:	da03      	bge.n	8018d18 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8018d10:	1402      	asrs	r2, r0, #16
 8018d12:	d401      	bmi.n	8018d18 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8018d14:	42ba      	cmp	r2, r7
 8018d16:	db07      	blt.n	8018d28 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8018d18:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018d1a:	3b01      	subs	r3, #1
 8018d1c:	3503      	adds	r5, #3
 8018d1e:	4414      	add	r4, r2
 8018d20:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018d22:	4410      	add	r0, r2
 8018d24:	e7ee      	b.n	8018d04 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8018d26:	d06f      	beq.n	8018e08 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8018d28:	1e5a      	subs	r2, r3, #1
 8018d2a:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8018d2c:	fb06 4602 	mla	r6, r6, r2, r4
 8018d30:	1436      	asrs	r6, r6, #16
 8018d32:	d45e      	bmi.n	8018df2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8018d34:	4576      	cmp	r6, lr
 8018d36:	da5c      	bge.n	8018df2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8018d38:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8018d3a:	fb06 0202 	mla	r2, r6, r2, r0
 8018d3e:	1412      	asrs	r2, r2, #16
 8018d40:	d457      	bmi.n	8018df2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8018d42:	42ba      	cmp	r2, r7
 8018d44:	da55      	bge.n	8018df2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8018d46:	1cee      	adds	r6, r5, #3
 8018d48:	469a      	mov	sl, r3
 8018d4a:	f1ba 0f00 	cmp.w	sl, #0
 8018d4e:	dd56      	ble.n	8018dfe <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8018d50:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8018d54:	1427      	asrs	r7, r4, #16
 8018d56:	1402      	asrs	r2, r0, #16
 8018d58:	fb0e 7202 	mla	r2, lr, r2, r7
 8018d5c:	9f00      	ldr	r7, [sp, #0]
 8018d5e:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 8018d62:	ea5f 6e17 	movs.w	lr, r7, lsr #24
 8018d66:	d03c      	beq.n	8018de2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8018d68:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8018d6c:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8018d70:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8018d74:	fa5f f28e 	uxtb.w	r2, lr
 8018d78:	b2ff      	uxtb	r7, r7
 8018d7a:	f000 80dd 	beq.w	8018f38 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8018d7e:	fa1f f882 	uxth.w	r8, r2
 8018d82:	43d2      	mvns	r2, r2
 8018d84:	f816 ec03 	ldrb.w	lr, [r6, #-3]
 8018d88:	fb17 f708 	smulbb	r7, r7, r8
 8018d8c:	b2d2      	uxtb	r2, r2
 8018d8e:	fb19 f908 	smulbb	r9, r9, r8
 8018d92:	fb0e 7702 	mla	r7, lr, r2, r7
 8018d96:	fb1b f808 	smulbb	r8, fp, r8
 8018d9a:	b2bf      	uxth	r7, r7
 8018d9c:	f107 0e01 	add.w	lr, r7, #1
 8018da0:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8018da4:	123f      	asrs	r7, r7, #8
 8018da6:	f806 7c03 	strb.w	r7, [r6, #-3]
 8018daa:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 8018dae:	fb07 9902 	mla	r9, r7, r2, r9
 8018db2:	fa1f f989 	uxth.w	r9, r9
 8018db6:	f109 0701 	add.w	r7, r9, #1
 8018dba:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8018dbe:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 8018dc2:	fb07 8802 	mla	r8, r7, r2, r8
 8018dc6:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018dca:	fa1f f888 	uxth.w	r8, r8
 8018dce:	f806 9c02 	strb.w	r9, [r6, #-2]
 8018dd2:	f108 0201 	add.w	r2, r8, #1
 8018dd6:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8018dda:	ea4f 2828 	mov.w	r8, r8, asr #8
 8018dde:	f806 8c01 	strb.w	r8, [r6, #-1]
 8018de2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018de4:	3603      	adds	r6, #3
 8018de6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8018dea:	4414      	add	r4, r2
 8018dec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018dee:	4410      	add	r0, r2
 8018df0:	e7ab      	b.n	8018d4a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8018df2:	f04f 0e00 	mov.w	lr, #0
 8018df6:	eba3 020e 	sub.w	r2, r3, lr
 8018dfa:	2a00      	cmp	r2, #0
 8018dfc:	dc3d      	bgt.n	8018e7a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8018dfe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018e02:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018e06:	441d      	add	r5, r3
 8018e08:	2900      	cmp	r1, #0
 8018e0a:	f340 809c 	ble.w	8018f46 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8018e0e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8018e12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018e14:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018e18:	3901      	subs	r1, #1
 8018e1a:	eeb0 6a62 	vmov.f32	s12, s5
 8018e1e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8018e22:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018e26:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018e2a:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 8018e2e:	eeb0 6a43 	vmov.f32	s12, s6
 8018e32:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018e36:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 8018e3a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8018e3e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018e42:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018e46:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8018e4a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8018e4e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8018e52:	ee12 2a90 	vmov	r2, s5
 8018e56:	eef0 2a47 	vmov.f32	s5, s14
 8018e5a:	fb92 f3f3 	sdiv	r3, r2, r3
 8018e5e:	ee13 2a10 	vmov	r2, s6
 8018e62:	930f      	str	r3, [sp, #60]	; 0x3c
 8018e64:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018e66:	eeb0 3a67 	vmov.f32	s6, s15
 8018e6a:	fb92 f3f3 	sdiv	r3, r2, r3
 8018e6e:	9a01      	ldr	r2, [sp, #4]
 8018e70:	9310      	str	r3, [sp, #64]	; 0x40
 8018e72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018e74:	bf08      	it	eq
 8018e76:	4613      	moveq	r3, r2
 8018e78:	e734      	b.n	8018ce4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 8018e7a:	1427      	asrs	r7, r4, #16
 8018e7c:	d44d      	bmi.n	8018f1a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8018e7e:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8018e82:	42be      	cmp	r6, r7
 8018e84:	dd49      	ble.n	8018f1a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8018e86:	ea5f 4820 	movs.w	r8, r0, asr #16
 8018e8a:	d446      	bmi.n	8018f1a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8018e8c:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8018e90:	4542      	cmp	r2, r8
 8018e92:	dd42      	ble.n	8018f1a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8018e94:	b236      	sxth	r6, r6
 8018e96:	9a00      	ldr	r2, [sp, #0]
 8018e98:	fb08 7606 	mla	r6, r8, r6, r7
 8018e9c:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 8018ea0:	0e3a      	lsrs	r2, r7, #24
 8018ea2:	d03a      	beq.n	8018f1a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8018ea4:	2aff      	cmp	r2, #255	; 0xff
 8018ea6:	b2d6      	uxtb	r6, r2
 8018ea8:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8018eac:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 8018eb0:	ea4f 024e 	mov.w	r2, lr, lsl #1
 8018eb4:	b2ff      	uxtb	r7, r7
 8018eb6:	d037      	beq.n	8018f28 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8018eb8:	fa1f f986 	uxth.w	r9, r6
 8018ebc:	4472      	add	r2, lr
 8018ebe:	43f6      	mvns	r6, r6
 8018ec0:	f815 8002 	ldrb.w	r8, [r5, r2]
 8018ec4:	fb17 f709 	smulbb	r7, r7, r9
 8018ec8:	fb1a fa09 	smulbb	sl, sl, r9
 8018ecc:	b2f6      	uxtb	r6, r6
 8018ece:	fb1b f909 	smulbb	r9, fp, r9
 8018ed2:	fb08 7706 	mla	r7, r8, r6, r7
 8018ed6:	b2bf      	uxth	r7, r7
 8018ed8:	f107 0801 	add.w	r8, r7, #1
 8018edc:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 8018ee0:	123f      	asrs	r7, r7, #8
 8018ee2:	54af      	strb	r7, [r5, r2]
 8018ee4:	442a      	add	r2, r5
 8018ee6:	7857      	ldrb	r7, [r2, #1]
 8018ee8:	fb07 aa06 	mla	sl, r7, r6, sl
 8018eec:	fa1f fa8a 	uxth.w	sl, sl
 8018ef0:	f10a 0701 	add.w	r7, sl, #1
 8018ef4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8018ef8:	7897      	ldrb	r7, [r2, #2]
 8018efa:	fb07 9906 	mla	r9, r7, r6, r9
 8018efe:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8018f02:	fa1f f989 	uxth.w	r9, r9
 8018f06:	f882 a001 	strb.w	sl, [r2, #1]
 8018f0a:	f109 0601 	add.w	r6, r9, #1
 8018f0e:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 8018f12:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018f16:	f882 9002 	strb.w	r9, [r2, #2]
 8018f1a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018f1c:	f10e 0e01 	add.w	lr, lr, #1
 8018f20:	4414      	add	r4, r2
 8018f22:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018f24:	4410      	add	r0, r2
 8018f26:	e766      	b.n	8018df6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8018f28:	4472      	add	r2, lr
 8018f2a:	54af      	strb	r7, [r5, r2]
 8018f2c:	442a      	add	r2, r5
 8018f2e:	f882 a001 	strb.w	sl, [r2, #1]
 8018f32:	f882 b002 	strb.w	fp, [r2, #2]
 8018f36:	e7f0      	b.n	8018f1a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8018f38:	f806 7c03 	strb.w	r7, [r6, #-3]
 8018f3c:	f806 9c02 	strb.w	r9, [r6, #-2]
 8018f40:	f806 bc01 	strb.w	fp, [r6, #-1]
 8018f44:	e74d      	b.n	8018de2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8018f46:	b003      	add	sp, #12
 8018f48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018f4c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f50:	b087      	sub	sp, #28
 8018f52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8018f56:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8018f58:	9204      	str	r2, [sp, #16]
 8018f5a:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8018f5e:	6860      	ldr	r0, [r4, #4]
 8018f60:	9205      	str	r2, [sp, #20]
 8018f62:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 8018f66:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
 8018f6a:	9101      	str	r1, [sp, #4]
 8018f6c:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 8018f70:	fb00 2505 	mla	r5, r0, r5, r2
 8018f74:	6822      	ldr	r2, [r4, #0]
 8018f76:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018f7a:	4415      	add	r5, r2
 8018f7c:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8018f80:	3201      	adds	r2, #1
 8018f82:	f022 0201 	bic.w	r2, r2, #1
 8018f86:	9202      	str	r2, [sp, #8]
 8018f88:	f8dc 2000 	ldr.w	r2, [ip]
 8018f8c:	9203      	str	r2, [sp, #12]
 8018f8e:	9a01      	ldr	r2, [sp, #4]
 8018f90:	2a00      	cmp	r2, #0
 8018f92:	dc03      	bgt.n	8018f9c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8018f94:	9a04      	ldr	r2, [sp, #16]
 8018f96:	2a00      	cmp	r2, #0
 8018f98:	f340 8135 	ble.w	8019206 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8018f9c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8018f9e:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8018fa2:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8018fa6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018fa8:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8018fac:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8018fb0:	2b00      	cmp	r3, #0
 8018fb2:	dd0d      	ble.n	8018fd0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8018fb4:	1422      	asrs	r2, r4, #16
 8018fb6:	d405      	bmi.n	8018fc4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8018fb8:	4542      	cmp	r2, r8
 8018fba:	da03      	bge.n	8018fc4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8018fbc:	1402      	asrs	r2, r0, #16
 8018fbe:	d401      	bmi.n	8018fc4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8018fc0:	42ba      	cmp	r2, r7
 8018fc2:	db06      	blt.n	8018fd2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8018fc4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018fc6:	4474      	add	r4, lr
 8018fc8:	3b01      	subs	r3, #1
 8018fca:	3503      	adds	r5, #3
 8018fcc:	4410      	add	r0, r2
 8018fce:	e7ef      	b.n	8018fb0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8018fd0:	d077      	beq.n	80190c2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8018fd2:	1e5a      	subs	r2, r3, #1
 8018fd4:	fb0e 4602 	mla	r6, lr, r2, r4
 8018fd8:	1436      	asrs	r6, r6, #16
 8018fda:	d469      	bmi.n	80190b0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8018fdc:	4546      	cmp	r6, r8
 8018fde:	da67      	bge.n	80190b0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8018fe0:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8018fe2:	fb06 0202 	mla	r2, r6, r2, r0
 8018fe6:	1412      	asrs	r2, r2, #16
 8018fe8:	d462      	bmi.n	80190b0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8018fea:	42ba      	cmp	r2, r7
 8018fec:	da60      	bge.n	80190b0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8018fee:	1cee      	adds	r6, r5, #3
 8018ff0:	4699      	mov	r9, r3
 8018ff2:	f1b9 0f00 	cmp.w	r9, #0
 8018ff6:	dd5f      	ble.n	80190b8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8018ff8:	1422      	asrs	r2, r4, #16
 8018ffa:	9902      	ldr	r1, [sp, #8]
 8018ffc:	1407      	asrs	r7, r0, #16
 8018ffe:	fb01 2707 	mla	r7, r1, r7, r2
 8019002:	9903      	ldr	r1, [sp, #12]
 8019004:	087a      	lsrs	r2, r7, #1
 8019006:	5c8a      	ldrb	r2, [r1, r2]
 8019008:	07f9      	lsls	r1, r7, #31
 801900a:	bf54      	ite	pl
 801900c:	f002 020f 	andpl.w	r2, r2, #15
 8019010:	1112      	asrmi	r2, r2, #4
 8019012:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8019016:	b2d2      	uxtb	r2, r2
 8019018:	2a00      	cmp	r2, #0
 801901a:	d042      	beq.n	80190a2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801901c:	497b      	ldr	r1, [pc, #492]	; (801920c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801901e:	680f      	ldr	r7, [r1, #0]
 8019020:	9905      	ldr	r1, [sp, #20]
 8019022:	fa5f fb87 	uxtb.w	fp, r7
 8019026:	434a      	muls	r2, r1
 8019028:	f102 0801 	add.w	r8, r2, #1
 801902c:	eb08 2222 	add.w	r2, r8, r2, asr #8
 8019030:	f816 8c03 	ldrb.w	r8, [r6, #-3]
 8019034:	1212      	asrs	r2, r2, #8
 8019036:	fa1f fa82 	uxth.w	sl, r2
 801903a:	43d2      	mvns	r2, r2
 801903c:	fb1b fb0a 	smulbb	fp, fp, sl
 8019040:	b2d2      	uxtb	r2, r2
 8019042:	fb08 b802 	mla	r8, r8, r2, fp
 8019046:	fa1f f888 	uxth.w	r8, r8
 801904a:	f108 0b01 	add.w	fp, r8, #1
 801904e:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8019052:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8019056:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801905a:	fb1b fb0a 	smulbb	fp, fp, sl
 801905e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8019062:	fb17 fa0a 	smulbb	sl, r7, sl
 8019066:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801906a:	f806 8c03 	strb.w	r8, [r6, #-3]
 801906e:	f816 8c02 	ldrb.w	r8, [r6, #-2]
 8019072:	fb07 aa02 	mla	sl, r7, r2, sl
 8019076:	fb08 b802 	mla	r8, r8, r2, fp
 801907a:	fa1f fa8a 	uxth.w	sl, sl
 801907e:	fa1f f888 	uxth.w	r8, r8
 8019082:	f10a 0701 	add.w	r7, sl, #1
 8019086:	f108 0b01 	add.w	fp, r8, #1
 801908a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801908e:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8019092:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8019096:	ea4f 2828 	mov.w	r8, r8, asr #8
 801909a:	f806 ac01 	strb.w	sl, [r6, #-1]
 801909e:	f806 8c02 	strb.w	r8, [r6, #-2]
 80190a2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80190a4:	4474      	add	r4, lr
 80190a6:	3603      	adds	r6, #3
 80190a8:	f109 39ff 	add.w	r9, r9, #4294967295
 80190ac:	4410      	add	r0, r2
 80190ae:	e7a0      	b.n	8018ff2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 80190b0:	2700      	movs	r7, #0
 80190b2:	1bda      	subs	r2, r3, r7
 80190b4:	2a00      	cmp	r2, #0
 80190b6:	dc3e      	bgt.n	8019136 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80190b8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80190bc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80190c0:	441d      	add	r5, r3
 80190c2:	9b01      	ldr	r3, [sp, #4]
 80190c4:	2b00      	cmp	r3, #0
 80190c6:	f340 809e 	ble.w	8019206 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 80190ca:	ee30 0a04 	vadd.f32	s0, s0, s8
 80190ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80190d0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80190d4:	eeb0 6a62 	vmov.f32	s12, s5
 80190d8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80190dc:	ee31 1a05 	vadd.f32	s2, s2, s10
 80190e0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80190e4:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 80190e8:	eeb0 6a43 	vmov.f32	s12, s6
 80190ec:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80190f0:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 80190f4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80190f8:	ee61 7a27 	vmul.f32	s15, s2, s15
 80190fc:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019100:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019104:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019108:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801910c:	ee12 2a90 	vmov	r2, s5
 8019110:	eef0 2a47 	vmov.f32	s5, s14
 8019114:	fb92 fef3 	sdiv	lr, r2, r3
 8019118:	ee13 2a10 	vmov	r2, s6
 801911c:	eeb0 3a67 	vmov.f32	s6, s15
 8019120:	fb92 f3f3 	sdiv	r3, r2, r3
 8019124:	9314      	str	r3, [sp, #80]	; 0x50
 8019126:	9b01      	ldr	r3, [sp, #4]
 8019128:	9a04      	ldr	r2, [sp, #16]
 801912a:	3b01      	subs	r3, #1
 801912c:	9301      	str	r3, [sp, #4]
 801912e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019130:	bf08      	it	eq
 8019132:	4613      	moveq	r3, r2
 8019134:	e72b      	b.n	8018f8e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8019136:	1426      	asrs	r6, r4, #16
 8019138:	d460      	bmi.n	80191fc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801913a:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801913e:	42b2      	cmp	r2, r6
 8019140:	dd5c      	ble.n	80191fc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8019142:	ea5f 4820 	movs.w	r8, r0, asr #16
 8019146:	d459      	bmi.n	80191fc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8019148:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801914c:	4542      	cmp	r2, r8
 801914e:	dd55      	ble.n	80191fc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8019150:	9a02      	ldr	r2, [sp, #8]
 8019152:	9903      	ldr	r1, [sp, #12]
 8019154:	fb08 6602 	mla	r6, r8, r2, r6
 8019158:	0872      	lsrs	r2, r6, #1
 801915a:	07f6      	lsls	r6, r6, #31
 801915c:	5c8a      	ldrb	r2, [r1, r2]
 801915e:	bf54      	ite	pl
 8019160:	f002 020f 	andpl.w	r2, r2, #15
 8019164:	1112      	asrmi	r2, r2, #4
 8019166:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801916a:	b2d2      	uxtb	r2, r2
 801916c:	2a00      	cmp	r2, #0
 801916e:	d045      	beq.n	80191fc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8019170:	4926      	ldr	r1, [pc, #152]	; (801920c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 8019172:	f8d1 8000 	ldr.w	r8, [r1]
 8019176:	9905      	ldr	r1, [sp, #20]
 8019178:	fa5f fb88 	uxtb.w	fp, r8
 801917c:	434a      	muls	r2, r1
 801917e:	1c56      	adds	r6, r2, #1
 8019180:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8019184:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8019188:	1212      	asrs	r2, r2, #8
 801918a:	f815 9006 	ldrb.w	r9, [r5, r6]
 801918e:	fa1f fa82 	uxth.w	sl, r2
 8019192:	43d2      	mvns	r2, r2
 8019194:	fb1b fb0a 	smulbb	fp, fp, sl
 8019198:	b2d2      	uxtb	r2, r2
 801919a:	fb09 b902 	mla	r9, r9, r2, fp
 801919e:	fa1f f989 	uxth.w	r9, r9
 80191a2:	f109 0b01 	add.w	fp, r9, #1
 80191a6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80191aa:	f3c8 2b07 	ubfx	fp, r8, #8, #8
 80191ae:	f3c8 4807 	ubfx	r8, r8, #16, #8
 80191b2:	fb1b fb0a 	smulbb	fp, fp, sl
 80191b6:	ea4f 2929 	mov.w	r9, r9, asr #8
 80191ba:	fb18 fa0a 	smulbb	sl, r8, sl
 80191be:	f805 9006 	strb.w	r9, [r5, r6]
 80191c2:	442e      	add	r6, r5
 80191c4:	f896 8002 	ldrb.w	r8, [r6, #2]
 80191c8:	f896 9001 	ldrb.w	r9, [r6, #1]
 80191cc:	fb08 aa02 	mla	sl, r8, r2, sl
 80191d0:	fb09 b902 	mla	r9, r9, r2, fp
 80191d4:	fa1f fa8a 	uxth.w	sl, sl
 80191d8:	fa1f f989 	uxth.w	r9, r9
 80191dc:	f10a 0801 	add.w	r8, sl, #1
 80191e0:	f109 0b01 	add.w	fp, r9, #1
 80191e4:	eb08 2a1a 	add.w	sl, r8, sl, lsr #8
 80191e8:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80191ec:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80191f0:	ea4f 2929 	mov.w	r9, r9, asr #8
 80191f4:	f886 a002 	strb.w	sl, [r6, #2]
 80191f8:	f886 9001 	strb.w	r9, [r6, #1]
 80191fc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80191fe:	4474      	add	r4, lr
 8019200:	3701      	adds	r7, #1
 8019202:	4410      	add	r0, r2
 8019204:	e755      	b.n	80190b2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 8019206:	b007      	add	sp, #28
 8019208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801920c:	240069ac 	.word	0x240069ac

08019210 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019214:	b085      	sub	sp, #20
 8019216:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801921a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801921c:	9203      	str	r2, [sp, #12]
 801921e:	6860      	ldr	r0, [r4, #4]
 8019220:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8019224:	9100      	str	r1, [sp, #0]
 8019226:	e9dd 2614 	ldrd	r2, r6, [sp, #80]	; 0x50
 801922a:	fb00 2606 	mla	r6, r0, r6, r2
 801922e:	6822      	ldr	r2, [r4, #0]
 8019230:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8019234:	4416      	add	r6, r2
 8019236:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801923a:	3201      	adds	r2, #1
 801923c:	f022 0201 	bic.w	r2, r2, #1
 8019240:	9201      	str	r2, [sp, #4]
 8019242:	f8dc 2000 	ldr.w	r2, [ip]
 8019246:	9202      	str	r2, [sp, #8]
 8019248:	9a00      	ldr	r2, [sp, #0]
 801924a:	2a00      	cmp	r2, #0
 801924c:	dc03      	bgt.n	8019256 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801924e:	9a03      	ldr	r2, [sp, #12]
 8019250:	2a00      	cmp	r2, #0
 8019252:	f340 8140 	ble.w	80194d6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 8019256:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019258:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801925c:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 8019260:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019262:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8019266:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801926a:	2b00      	cmp	r3, #0
 801926c:	dd0e      	ble.n	801928c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801926e:	142a      	asrs	r2, r5, #16
 8019270:	d405      	bmi.n	801927e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8019272:	4572      	cmp	r2, lr
 8019274:	da03      	bge.n	801927e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8019276:	1422      	asrs	r2, r4, #16
 8019278:	d401      	bmi.n	801927e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801927a:	42ba      	cmp	r2, r7
 801927c:	db07      	blt.n	801928e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801927e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019280:	3b01      	subs	r3, #1
 8019282:	3603      	adds	r6, #3
 8019284:	4415      	add	r5, r2
 8019286:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019288:	4414      	add	r4, r2
 801928a:	e7ee      	b.n	801926a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801928c:	d072      	beq.n	8019374 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801928e:	1e5a      	subs	r2, r3, #1
 8019290:	9811      	ldr	r0, [sp, #68]	; 0x44
 8019292:	fb00 5002 	mla	r0, r0, r2, r5
 8019296:	1400      	asrs	r0, r0, #16
 8019298:	d463      	bmi.n	8019362 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801929a:	4570      	cmp	r0, lr
 801929c:	da61      	bge.n	8019362 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801929e:	9812      	ldr	r0, [sp, #72]	; 0x48
 80192a0:	fb00 4202 	mla	r2, r0, r2, r4
 80192a4:	1412      	asrs	r2, r2, #16
 80192a6:	d45c      	bmi.n	8019362 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80192a8:	42ba      	cmp	r2, r7
 80192aa:	da5a      	bge.n	8019362 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80192ac:	1cf0      	adds	r0, r6, #3
 80192ae:	469a      	mov	sl, r3
 80192b0:	f1ba 0f00 	cmp.w	sl, #0
 80192b4:	dd59      	ble.n	801936a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 80192b6:	142a      	asrs	r2, r5, #16
 80192b8:	9901      	ldr	r1, [sp, #4]
 80192ba:	1427      	asrs	r7, r4, #16
 80192bc:	fb01 2707 	mla	r7, r1, r7, r2
 80192c0:	9902      	ldr	r1, [sp, #8]
 80192c2:	087a      	lsrs	r2, r7, #1
 80192c4:	5c8a      	ldrb	r2, [r1, r2]
 80192c6:	07f9      	lsls	r1, r7, #31
 80192c8:	bf54      	ite	pl
 80192ca:	f002 020f 	andpl.w	r2, r2, #15
 80192ce:	1112      	asrmi	r2, r2, #4
 80192d0:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80192d4:	b2d2      	uxtb	r2, r2
 80192d6:	2a00      	cmp	r2, #0
 80192d8:	d03b      	beq.n	8019352 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 80192da:	4980      	ldr	r1, [pc, #512]	; (80194dc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 80192dc:	2aff      	cmp	r2, #255	; 0xff
 80192de:	680f      	ldr	r7, [r1, #0]
 80192e0:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 80192e4:	f3c7 2907 	ubfx	r9, r7, #8, #8
 80192e8:	b2ff      	uxtb	r7, r7
 80192ea:	f000 80ed 	beq.w	80194c8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 80192ee:	fa1f f882 	uxth.w	r8, r2
 80192f2:	43d2      	mvns	r2, r2
 80192f4:	f810 ec03 	ldrb.w	lr, [r0, #-3]
 80192f8:	fb17 f708 	smulbb	r7, r7, r8
 80192fc:	b2d2      	uxtb	r2, r2
 80192fe:	fb19 f908 	smulbb	r9, r9, r8
 8019302:	fb0e 7702 	mla	r7, lr, r2, r7
 8019306:	fb1b f808 	smulbb	r8, fp, r8
 801930a:	b2bf      	uxth	r7, r7
 801930c:	f107 0e01 	add.w	lr, r7, #1
 8019310:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8019314:	123f      	asrs	r7, r7, #8
 8019316:	f800 7c03 	strb.w	r7, [r0, #-3]
 801931a:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 801931e:	fb07 9902 	mla	r9, r7, r2, r9
 8019322:	fa1f f989 	uxth.w	r9, r9
 8019326:	f109 0701 	add.w	r7, r9, #1
 801932a:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801932e:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 8019332:	fb07 8802 	mla	r8, r7, r2, r8
 8019336:	ea4f 2929 	mov.w	r9, r9, asr #8
 801933a:	fa1f f888 	uxth.w	r8, r8
 801933e:	f800 9c02 	strb.w	r9, [r0, #-2]
 8019342:	f108 0201 	add.w	r2, r8, #1
 8019346:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801934a:	ea4f 2828 	mov.w	r8, r8, asr #8
 801934e:	f800 8c01 	strb.w	r8, [r0, #-1]
 8019352:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019354:	3003      	adds	r0, #3
 8019356:	f10a 3aff 	add.w	sl, sl, #4294967295
 801935a:	4415      	add	r5, r2
 801935c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801935e:	4414      	add	r4, r2
 8019360:	e7a6      	b.n	80192b0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8019362:	2700      	movs	r7, #0
 8019364:	1bda      	subs	r2, r3, r7
 8019366:	2a00      	cmp	r2, #0
 8019368:	dc40      	bgt.n	80193ec <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801936a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801936e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019372:	441e      	add	r6, r3
 8019374:	9b00      	ldr	r3, [sp, #0]
 8019376:	2b00      	cmp	r3, #0
 8019378:	f340 80ad 	ble.w	80194d6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 801937c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019380:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019382:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019386:	eeb0 6a62 	vmov.f32	s12, s5
 801938a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801938e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019392:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019396:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801939a:	eeb0 6a43 	vmov.f32	s12, s6
 801939e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80193a2:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80193a6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80193aa:	ee61 7a27 	vmul.f32	s15, s2, s15
 80193ae:	ee77 2a62 	vsub.f32	s5, s14, s5
 80193b2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80193b6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80193ba:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80193be:	ee12 2a90 	vmov	r2, s5
 80193c2:	eef0 2a47 	vmov.f32	s5, s14
 80193c6:	fb92 f3f3 	sdiv	r3, r2, r3
 80193ca:	ee13 2a10 	vmov	r2, s6
 80193ce:	9311      	str	r3, [sp, #68]	; 0x44
 80193d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80193d2:	eeb0 3a67 	vmov.f32	s6, s15
 80193d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80193da:	9312      	str	r3, [sp, #72]	; 0x48
 80193dc:	9b00      	ldr	r3, [sp, #0]
 80193de:	9a03      	ldr	r2, [sp, #12]
 80193e0:	3b01      	subs	r3, #1
 80193e2:	9300      	str	r3, [sp, #0]
 80193e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80193e6:	bf08      	it	eq
 80193e8:	4613      	moveq	r3, r2
 80193ea:	e72d      	b.n	8019248 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 80193ec:	1428      	asrs	r0, r5, #16
 80193ee:	d45c      	bmi.n	80194aa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80193f0:	f8dc 2008 	ldr.w	r2, [ip, #8]
 80193f4:	4282      	cmp	r2, r0
 80193f6:	dd58      	ble.n	80194aa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80193f8:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80193fc:	d455      	bmi.n	80194aa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80193fe:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8019402:	4572      	cmp	r2, lr
 8019404:	dd51      	ble.n	80194aa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8019406:	9a01      	ldr	r2, [sp, #4]
 8019408:	9902      	ldr	r1, [sp, #8]
 801940a:	fb0e 0002 	mla	r0, lr, r2, r0
 801940e:	0842      	lsrs	r2, r0, #1
 8019410:	07c0      	lsls	r0, r0, #31
 8019412:	5c8a      	ldrb	r2, [r1, r2]
 8019414:	bf54      	ite	pl
 8019416:	f002 020f 	andpl.w	r2, r2, #15
 801941a:	1112      	asrmi	r2, r2, #4
 801941c:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8019420:	b2d2      	uxtb	r2, r2
 8019422:	2a00      	cmp	r2, #0
 8019424:	d041      	beq.n	80194aa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8019426:	492d      	ldr	r1, [pc, #180]	; (80194dc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 8019428:	2aff      	cmp	r2, #255	; 0xff
 801942a:	6808      	ldr	r0, [r1, #0]
 801942c:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 8019430:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8019434:	fa5f fe80 	uxtb.w	lr, r0
 8019438:	ea4f 0047 	mov.w	r0, r7, lsl #1
 801943c:	d03b      	beq.n	80194b6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801943e:	fa1f f982 	uxth.w	r9, r2
 8019442:	4438      	add	r0, r7
 8019444:	43d2      	mvns	r2, r2
 8019446:	f816 8000 	ldrb.w	r8, [r6, r0]
 801944a:	fb1e fe09 	smulbb	lr, lr, r9
 801944e:	fb1a fa09 	smulbb	sl, sl, r9
 8019452:	b2d2      	uxtb	r2, r2
 8019454:	fb1b f909 	smulbb	r9, fp, r9
 8019458:	fb08 ee02 	mla	lr, r8, r2, lr
 801945c:	fa1f fe8e 	uxth.w	lr, lr
 8019460:	f10e 0801 	add.w	r8, lr, #1
 8019464:	eb08 2e1e 	add.w	lr, r8, lr, lsr #8
 8019468:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801946c:	f806 e000 	strb.w	lr, [r6, r0]
 8019470:	4430      	add	r0, r6
 8019472:	f890 e001 	ldrb.w	lr, [r0, #1]
 8019476:	fb0e aa02 	mla	sl, lr, r2, sl
 801947a:	fa1f fa8a 	uxth.w	sl, sl
 801947e:	f10a 0e01 	add.w	lr, sl, #1
 8019482:	eb0e 2a1a 	add.w	sl, lr, sl, lsr #8
 8019486:	f890 e002 	ldrb.w	lr, [r0, #2]
 801948a:	fb0e 9902 	mla	r9, lr, r2, r9
 801948e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8019492:	fa1f f989 	uxth.w	r9, r9
 8019496:	f880 a001 	strb.w	sl, [r0, #1]
 801949a:	f109 0201 	add.w	r2, r9, #1
 801949e:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 80194a2:	ea4f 2929 	mov.w	r9, r9, asr #8
 80194a6:	f880 9002 	strb.w	r9, [r0, #2]
 80194aa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80194ac:	3701      	adds	r7, #1
 80194ae:	4415      	add	r5, r2
 80194b0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80194b2:	4414      	add	r4, r2
 80194b4:	e756      	b.n	8019364 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80194b6:	4438      	add	r0, r7
 80194b8:	f806 e000 	strb.w	lr, [r6, r0]
 80194bc:	4430      	add	r0, r6
 80194be:	f880 a001 	strb.w	sl, [r0, #1]
 80194c2:	f880 b002 	strb.w	fp, [r0, #2]
 80194c6:	e7f0      	b.n	80194aa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80194c8:	f800 7c03 	strb.w	r7, [r0, #-3]
 80194cc:	f800 9c02 	strb.w	r9, [r0, #-2]
 80194d0:	f800 bc01 	strb.w	fp, [r0, #-1]
 80194d4:	e73d      	b.n	8019352 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 80194d6:	b005      	add	sp, #20
 80194d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80194dc:	240069ac 	.word	0x240069ac

080194e0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW9D1Ev>:
 80194e0:	4770      	bx	lr

080194e2 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLED1Ev>:
 80194e2:	4770      	bx	lr

080194e4 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L4D1Ev>:
 80194e4:	4770      	bx	lr

080194e6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 80194e6:	4770      	bx	lr

080194e8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 80194e8:	4770      	bx	lr

080194ea <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 80194ea:	4770      	bx	lr

080194ec <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 80194ec:	4770      	bx	lr

080194ee <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 80194ee:	4770      	bx	lr

080194f0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 80194f0:	4770      	bx	lr

080194f2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 80194f2:	4770      	bx	lr

080194f4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 80194f4:	4770      	bx	lr

080194f6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 80194f6:	4770      	bx	lr

080194f8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 80194f8:	4770      	bx	lr

080194fa <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 80194fa:	4770      	bx	lr

080194fc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 80194fc:	4770      	bx	lr

080194fe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 80194fe:	4770      	bx	lr

08019500 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8019500:	4770      	bx	lr

08019502 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8019502:	4770      	bx	lr

08019504 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8019504:	4770      	bx	lr

08019506 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8019506:	4770      	bx	lr

08019508 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8019508:	4770      	bx	lr

0801950a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801950a:	4770      	bx	lr

0801950c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801950c:	4770      	bx	lr
	...

08019510 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8019510:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019512:	4606      	mov	r6, r0
 8019514:	b087      	sub	sp, #28
 8019516:	4615      	mov	r5, r2
 8019518:	461f      	mov	r7, r3
 801951a:	b353      	cbz	r3, 8019572 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801951c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8019520:	2b00      	cmp	r3, #0
 8019522:	dd26      	ble.n	8019572 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8019524:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8019528:	2b00      	cmp	r3, #0
 801952a:	dd22      	ble.n	8019572 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801952c:	6808      	ldr	r0, [r1, #0]
 801952e:	aa04      	add	r2, sp, #16
 8019530:	6849      	ldr	r1, [r1, #4]
 8019532:	4c1b      	ldr	r4, [pc, #108]	; (80195a0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 8019534:	c203      	stmia	r2!, {r0, r1}
 8019536:	a804      	add	r0, sp, #16
 8019538:	f7fb faf2 	bl	8014b20 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801953c:	6820      	ldr	r0, [r4, #0]
 801953e:	6803      	ldr	r3, [r0, #0]
 8019540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019542:	4798      	blx	r3
 8019544:	2fff      	cmp	r7, #255	; 0xff
 8019546:	d016      	beq.n	8019576 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 8019548:	f010 0f08 	tst.w	r0, #8
 801954c:	6820      	ldr	r0, [r4, #0]
 801954e:	d015      	beq.n	801957c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 8019550:	2400      	movs	r4, #0
 8019552:	6801      	ldr	r1, [r0, #0]
 8019554:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8019558:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801955c:	e9cd 7402 	strd	r7, r4, [sp, #8]
 8019560:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8019564:	9401      	str	r4, [sp, #4]
 8019566:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801956a:	9400      	str	r4, [sp, #0]
 801956c:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 801956e:	4629      	mov	r1, r5
 8019570:	47a0      	blx	r4
 8019572:	b007      	add	sp, #28
 8019574:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019576:	f010 0f02 	tst.w	r0, #2
 801957a:	e7e7      	b.n	801954c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 801957c:	6803      	ldr	r3, [r0, #0]
 801957e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019580:	4798      	blx	r3
 8019582:	4b08      	ldr	r3, [pc, #32]	; (80195a4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x94>)
 8019584:	4601      	mov	r1, r0
 8019586:	4630      	mov	r0, r6
 8019588:	881a      	ldrh	r2, [r3, #0]
 801958a:	6833      	ldr	r3, [r6, #0]
 801958c:	e9cd 5700 	strd	r5, r7, [sp]
 8019590:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8019592:	ab04      	add	r3, sp, #16
 8019594:	47a8      	blx	r5
 8019596:	6820      	ldr	r0, [r4, #0]
 8019598:	6803      	ldr	r3, [r0, #0]
 801959a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801959c:	4798      	blx	r3
 801959e:	e7e8      	b.n	8019572 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 80195a0:	240069a4 	.word	0x240069a4
 80195a4:	2400699e 	.word	0x2400699e

080195a8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 80195a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80195ac:	b08b      	sub	sp, #44	; 0x2c
 80195ae:	460d      	mov	r5, r1
 80195b0:	4616      	mov	r6, r2
 80195b2:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
 80195b6:	f1b8 0f00 	cmp.w	r8, #0
 80195ba:	d047      	beq.n	801964c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 80195bc:	6810      	ldr	r0, [r2, #0]
 80195be:	ac06      	add	r4, sp, #24
 80195c0:	6851      	ldr	r1, [r2, #4]
 80195c2:	4f51      	ldr	r7, [pc, #324]	; (8019708 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>)
 80195c4:	c403      	stmia	r4!, {r0, r1}
 80195c6:	6818      	ldr	r0, [r3, #0]
 80195c8:	ac08      	add	r4, sp, #32
 80195ca:	6859      	ldr	r1, [r3, #4]
 80195cc:	c403      	stmia	r4!, {r0, r1}
 80195ce:	a806      	add	r0, sp, #24
 80195d0:	f7fb faa6 	bl	8014b20 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80195d4:	4631      	mov	r1, r6
 80195d6:	a808      	add	r0, sp, #32
 80195d8:	f7fb faca 	bl	8014b70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80195dc:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80195e0:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 80195e4:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80195e8:	6838      	ldr	r0, [r7, #0]
 80195ea:	fb11 2103 	smlabb	r1, r1, r3, r2
 80195ee:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	; 0x24
 80195f2:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	; 0x26
 80195f6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80195fa:	440d      	add	r5, r1
 80195fc:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8019600:	440a      	add	r2, r1
 8019602:	f8ad 2020 	strh.w	r2, [sp, #32]
 8019606:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801960a:	4413      	add	r3, r2
 801960c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8019610:	6803      	ldr	r3, [r0, #0]
 8019612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019614:	4798      	blx	r3
 8019616:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801961a:	d01a      	beq.n	8019652 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xaa>
 801961c:	f010 0f04 	tst.w	r0, #4
 8019620:	6838      	ldr	r0, [r7, #0]
 8019622:	d019      	beq.n	8019658 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb0>
 8019624:	2100      	movs	r1, #0
 8019626:	6807      	ldr	r7, [r0, #0]
 8019628:	b2a4      	uxth	r4, r4
 801962a:	f8cd 800c 	str.w	r8, [sp, #12]
 801962e:	b2b6      	uxth	r6, r6
 8019630:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8019634:	9401      	str	r4, [sp, #4]
 8019636:	9600      	str	r6, [sp, #0]
 8019638:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801963c:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8019640:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8019644:	9102      	str	r1, [sp, #8]
 8019646:	4629      	mov	r1, r5
 8019648:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 801964a:	47a0      	blx	r4
 801964c:	b00b      	add	sp, #44	; 0x2c
 801964e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019652:	f010 0f01 	tst.w	r0, #1
 8019656:	e7e3      	b.n	8019620 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x78>
 8019658:	6803      	ldr	r3, [r0, #0]
 801965a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801965c:	4798      	blx	r3
 801965e:	4a2b      	ldr	r2, [pc, #172]	; (801970c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x164>)
 8019660:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 8019664:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8019668:	8813      	ldrh	r3, [r2, #0]
 801966a:	f9bd c020 	ldrsh.w	ip, [sp, #32]
 801966e:	fb03 f404 	mul.w	r4, r3, r4
 8019672:	fb03 c101 	mla	r1, r3, r1, ip
 8019676:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801967a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801967e:	4408      	add	r0, r1
 8019680:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8019684:	4404      	add	r4, r0
 8019686:	d02e      	beq.n	80196e6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 8019688:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 801968c:	1b9b      	subs	r3, r3, r6
 801968e:	f1c8 0cff 	rsb	ip, r8, #255	; 0xff
 8019692:	1b96      	subs	r6, r2, r6
 8019694:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019698:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801969c:	42a0      	cmp	r0, r4
 801969e:	d22d      	bcs.n	80196fc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 80196a0:	eb00 0e01 	add.w	lr, r0, r1
 80196a4:	4570      	cmp	r0, lr
 80196a6:	d210      	bcs.n	80196ca <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x122>
 80196a8:	f890 9000 	ldrb.w	r9, [r0]
 80196ac:	f815 2b01 	ldrb.w	r2, [r5], #1
 80196b0:	fb19 f90c 	smulbb	r9, r9, ip
 80196b4:	fb02 9208 	mla	r2, r2, r8, r9
 80196b8:	b292      	uxth	r2, r2
 80196ba:	f102 0901 	add.w	r9, r2, #1
 80196be:	eb09 2212 	add.w	r2, r9, r2, lsr #8
 80196c2:	1212      	asrs	r2, r2, #8
 80196c4:	f800 2b01 	strb.w	r2, [r0], #1
 80196c8:	e7ec      	b.n	80196a4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 80196ca:	4418      	add	r0, r3
 80196cc:	4435      	add	r5, r6
 80196ce:	e7e5      	b.n	801969c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 80196d0:	8813      	ldrh	r3, [r2, #0]
 80196d2:	1b9b      	subs	r3, r3, r6
 80196d4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80196d8:	4418      	add	r0, r3
 80196da:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80196de:	1b9b      	subs	r3, r3, r6
 80196e0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80196e4:	441d      	add	r5, r3
 80196e6:	42a0      	cmp	r0, r4
 80196e8:	d208      	bcs.n	80196fc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 80196ea:	eb00 0c01 	add.w	ip, r0, r1
 80196ee:	4560      	cmp	r0, ip
 80196f0:	d2ee      	bcs.n	80196d0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x128>
 80196f2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80196f6:	f800 3b01 	strb.w	r3, [r0], #1
 80196fa:	e7f8      	b.n	80196ee <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x146>
 80196fc:	6838      	ldr	r0, [r7, #0]
 80196fe:	6803      	ldr	r3, [r0, #0]
 8019700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019702:	4798      	blx	r3
 8019704:	e7a2      	b.n	801964c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 8019706:	bf00      	nop
 8019708:	240069a4 	.word	0x240069a4
 801970c:	2400699e 	.word	0x2400699e

08019710 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 8019710:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019712:	2300      	movs	r3, #0
 8019714:	b085      	sub	sp, #20
 8019716:	9300      	str	r3, [sp, #0]
 8019718:	4b41      	ldr	r3, [pc, #260]	; (8019820 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x110>)
 801971a:	781b      	ldrb	r3, [r3, #0]
 801971c:	2b00      	cmp	r3, #0
 801971e:	d136      	bne.n	801978e <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7e>
 8019720:	4a40      	ldr	r2, [pc, #256]	; (8019824 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 8019722:	f9b2 2000 	ldrsh.w	r2, [r2]
 8019726:	f8ad 2004 	strh.w	r2, [sp, #4]
 801972a:	2b00      	cmp	r3, #0
 801972c:	d131      	bne.n	8019792 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x82>
 801972e:	4b3e      	ldr	r3, [pc, #248]	; (8019828 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 8019730:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019734:	ac02      	add	r4, sp, #8
 8019736:	6808      	ldr	r0, [r1, #0]
 8019738:	f8ad 3006 	strh.w	r3, [sp, #6]
 801973c:	ab02      	add	r3, sp, #8
 801973e:	6849      	ldr	r1, [r1, #4]
 8019740:	4d3a      	ldr	r5, [pc, #232]	; (801982c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x11c>)
 8019742:	c303      	stmia	r3!, {r0, r1}
 8019744:	4669      	mov	r1, sp
 8019746:	4620      	mov	r0, r4
 8019748:	f7fb fa12 	bl	8014b70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801974c:	4668      	mov	r0, sp
 801974e:	f7fb f9e7 	bl	8014b20 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019752:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8019756:	f8bd 2000 	ldrh.w	r2, [sp]
 801975a:	462e      	mov	r6, r5
 801975c:	6828      	ldr	r0, [r5, #0]
 801975e:	4413      	add	r3, r2
 8019760:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8019764:	f8ad 3008 	strh.w	r3, [sp, #8]
 8019768:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801976c:	4413      	add	r3, r2
 801976e:	f8ad 300a 	strh.w	r3, [sp, #10]
 8019772:	6803      	ldr	r3, [r0, #0]
 8019774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019776:	4798      	blx	r3
 8019778:	f010 0f01 	tst.w	r0, #1
 801977c:	d00b      	beq.n	8019796 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x86>
 801977e:	6828      	ldr	r0, [r5, #0]
 8019780:	6803      	ldr	r3, [r0, #0]
 8019782:	e894 0006 	ldmia.w	r4, {r1, r2}
 8019786:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019788:	4798      	blx	r3
 801978a:	b005      	add	sp, #20
 801978c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801978e:	4a26      	ldr	r2, [pc, #152]	; (8019828 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 8019790:	e7c7      	b.n	8019722 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 8019792:	4b24      	ldr	r3, [pc, #144]	; (8019824 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 8019794:	e7cc      	b.n	8019730 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 8019796:	6830      	ldr	r0, [r6, #0]
 8019798:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 801979c:	6803      	ldr	r3, [r0, #0]
 801979e:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 80197a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80197a4:	4798      	blx	r3
 80197a6:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 80197aa:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80197ae:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 80197b2:	fb14 3402 	smlabb	r4, r4, r2, r3
 80197b6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80197ba:	4404      	add	r4, r0
 80197bc:	6830      	ldr	r0, [r6, #0]
 80197be:	6803      	ldr	r3, [r0, #0]
 80197c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80197c2:	4798      	blx	r3
 80197c4:	4917      	ldr	r1, [pc, #92]	; (8019824 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 80197c6:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 80197ca:	880b      	ldrh	r3, [r1, #0]
 80197cc:	f9bd c008 	ldrsh.w	ip, [sp, #8]
 80197d0:	fb03 c202 	mla	r2, r3, r2, ip
 80197d4:	437b      	muls	r3, r7
 80197d6:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 80197da:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80197de:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80197e2:	4410      	add	r0, r2
 80197e4:	18c2      	adds	r2, r0, r3
 80197e6:	4290      	cmp	r0, r2
 80197e8:	d214      	bcs.n	8019814 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>
 80197ea:	eb00 0c07 	add.w	ip, r0, r7
 80197ee:	4560      	cmp	r0, ip
 80197f0:	d204      	bcs.n	80197fc <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xec>
 80197f2:	f814 3b01 	ldrb.w	r3, [r4], #1
 80197f6:	f800 3b01 	strb.w	r3, [r0], #1
 80197fa:	e7f8      	b.n	80197ee <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xde>
 80197fc:	880b      	ldrh	r3, [r1, #0]
 80197fe:	1b5b      	subs	r3, r3, r5
 8019800:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019804:	4418      	add	r0, r3
 8019806:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801980a:	1b5b      	subs	r3, r3, r5
 801980c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019810:	441c      	add	r4, r3
 8019812:	e7e8      	b.n	80197e6 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd6>
 8019814:	6830      	ldr	r0, [r6, #0]
 8019816:	6803      	ldr	r3, [r0, #0]
 8019818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801981a:	4798      	blx	r3
 801981c:	e7b5      	b.n	801978a <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 801981e:	bf00      	nop
 8019820:	2400699c 	.word	0x2400699c
 8019824:	2400699e 	.word	0x2400699e
 8019828:	240069a0 	.word	0x240069a0
 801982c:	240069a4 	.word	0x240069a4

08019830 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 8019830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019834:	b08f      	sub	sp, #60	; 0x3c
 8019836:	461c      	mov	r4, r3
 8019838:	9203      	str	r2, [sp, #12]
 801983a:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801983e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8019840:	6820      	ldr	r0, [r4, #0]
 8019842:	9100      	str	r1, [sp, #0]
 8019844:	9204      	str	r2, [sp, #16]
 8019846:	aa0a      	add	r2, sp, #40	; 0x28
 8019848:	6861      	ldr	r1, [r4, #4]
 801984a:	c203      	stmia	r2!, {r0, r1}
 801984c:	6818      	ldr	r0, [r3, #0]
 801984e:	aa0c      	add	r2, sp, #48	; 0x30
 8019850:	6859      	ldr	r1, [r3, #4]
 8019852:	c203      	stmia	r2!, {r0, r1}
 8019854:	a80a      	add	r0, sp, #40	; 0x28
 8019856:	f7fb f963 	bl	8014b20 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801985a:	4621      	mov	r1, r4
 801985c:	a80c      	add	r0, sp, #48	; 0x30
 801985e:	f7fb f987 	bl	8014b70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8019862:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 8019866:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	; 0x2e
 801986a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801986e:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
 8019872:	bfdb      	ittet	le
 8019874:	b2b3      	uxthle	r3, r6
 8019876:	f44f 6280 	movle.w	r2, #1024	; 0x400
 801987a:	2301      	movgt	r3, #1
 801987c:	fb92 f3f3 	sdivle	r3, r2, r3
 8019880:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 8019884:	441d      	add	r5, r3
 8019886:	fb92 f1f3 	sdiv	r1, r2, r3
 801988a:	fa1f fc81 	uxth.w	ip, r1
 801988e:	3d01      	subs	r5, #1
 8019890:	fb0c 2413 	mls	r4, ip, r3, r2
 8019894:	4661      	mov	r1, ip
 8019896:	fb14 f406 	smulbb	r4, r4, r6
 801989a:	4404      	add	r4, r0
 801989c:	fb95 f5f3 	sdiv	r5, r5, r3
 80198a0:	b2a4      	uxth	r4, r4
 80198a2:	b131      	cbz	r1, 80198b2 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x82>
 80198a4:	9b03      	ldr	r3, [sp, #12]
 80198a6:	9900      	ldr	r1, [sp, #0]
 80198a8:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80198ac:	ba1b      	rev	r3, r3
 80198ae:	4419      	add	r1, r3
 80198b0:	9100      	str	r1, [sp, #0]
 80198b2:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 80198b6:	b2ad      	uxth	r5, r5
 80198b8:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
 80198bc:	4418      	add	r0, r3
 80198be:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 80198c2:	00ad      	lsls	r5, r5, #2
 80198c4:	441a      	add	r2, r3
 80198c6:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 80198ca:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
 80198ce:	9301      	str	r3, [sp, #4]
 80198d0:	4b79      	ldr	r3, [pc, #484]	; (8019ab8 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x288>)
 80198d2:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 80198d6:	6818      	ldr	r0, [r3, #0]
 80198d8:	6803      	ldr	r3, [r0, #0]
 80198da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80198dc:	4798      	blx	r3
 80198de:	4a77      	ldr	r2, [pc, #476]	; (8019abc <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x28c>)
 80198e0:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	; 0x32
 80198e4:	2c00      	cmp	r4, #0
 80198e6:	8813      	ldrh	r3, [r2, #0]
 80198e8:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 80198ec:	9209      	str	r2, [sp, #36]	; 0x24
 80198ee:	fb03 c101 	mla	r1, r3, r1, ip
 80198f2:	fb06 f303 	mul.w	r3, r6, r3
 80198f6:	bf18      	it	ne
 80198f8:	2600      	movne	r6, #0
 80198fa:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80198fe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019902:	4408      	add	r0, r1
 8019904:	4403      	add	r3, r0
 8019906:	9306      	str	r3, [sp, #24]
 8019908:	f105 0304 	add.w	r3, r5, #4
 801990c:	9305      	str	r3, [sp, #20]
 801990e:	9b01      	ldr	r3, [sp, #4]
 8019910:	bf08      	it	eq
 8019912:	461e      	moveq	r6, r3
 8019914:	2300      	movs	r3, #0
 8019916:	b2b6      	uxth	r6, r6
 8019918:	9302      	str	r3, [sp, #8]
 801991a:	9a06      	ldr	r2, [sp, #24]
 801991c:	4290      	cmp	r0, r2
 801991e:	f080 80c2 	bcs.w	8019aa6 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x276>
 8019922:	b963      	cbnz	r3, 801993e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10e>
 8019924:	9b00      	ldr	r3, [sp, #0]
 8019926:	781a      	ldrb	r2, [r3, #0]
 8019928:	0993      	lsrs	r3, r2, #6
 801992a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 801992e:	9202      	str	r2, [sp, #8]
 8019930:	1e5a      	subs	r2, r3, #1
 8019932:	2a02      	cmp	r2, #2
 8019934:	d815      	bhi.n	8019962 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x132>
 8019936:	9a00      	ldr	r2, [sp, #0]
 8019938:	b29b      	uxth	r3, r3
 801993a:	3201      	adds	r2, #1
 801993c:	9200      	str	r2, [sp, #0]
 801993e:	b1b4      	cbz	r4, 801996e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x13e>
 8019940:	429c      	cmp	r4, r3
 8019942:	bf91      	iteee	ls
 8019944:	1b1c      	subls	r4, r3, r4
 8019946:	1ae4      	subhi	r4, r4, r3
 8019948:	4635      	movhi	r5, r6
 801994a:	f04f 0e00 	movhi.w	lr, #0
 801994e:	bf9b      	ittet	ls
 8019950:	fa1f fe84 	uxthls.w	lr, r4
 8019954:	f8bd 5004 	ldrhls.w	r5, [sp, #4]
 8019958:	b2a4      	uxthhi	r4, r4
 801995a:	2400      	movls	r4, #0
 801995c:	4673      	mov	r3, lr
 801995e:	462e      	mov	r6, r5
 8019960:	e7db      	b.n	801991a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xea>
 8019962:	9a00      	ldr	r2, [sp, #0]
 8019964:	9b00      	ldr	r3, [sp, #0]
 8019966:	3202      	adds	r2, #2
 8019968:	785b      	ldrb	r3, [r3, #1]
 801996a:	9200      	str	r2, [sp, #0]
 801996c:	e7e7      	b.n	801993e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10e>
 801996e:	2204      	movs	r2, #4
 8019970:	9905      	ldr	r1, [sp, #20]
 8019972:	429e      	cmp	r6, r3
 8019974:	4615      	mov	r5, r2
 8019976:	9a02      	ldr	r2, [sp, #8]
 8019978:	bf94      	ite	ls
 801997a:	eba3 0e06 	subls.w	lr, r3, r6
 801997e:	46a6      	movhi	lr, r4
 8019980:	fb15 1202 	smlabb	r2, r5, r2, r1
 8019984:	9903      	ldr	r1, [sp, #12]
 8019986:	bf8c      	ite	hi
 8019988:	1af5      	subhi	r5, r6, r3
 801998a:	fa1f fe8e 	uxthls.w	lr, lr
 801998e:	f851 c002 	ldr.w	ip, [r1, r2]
 8019992:	bf9a      	itte	ls
 8019994:	4625      	movls	r5, r4
 8019996:	4632      	movls	r2, r6
 8019998:	b2ad      	uxthhi	r5, r5
 801999a:	ea4f 611c 	mov.w	r1, ip, lsr #24
 801999e:	bf88      	it	hi
 80199a0:	461a      	movhi	r2, r3
 80199a2:	b179      	cbz	r1, 80199c4 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x194>
 80199a4:	29ff      	cmp	r1, #255	; 0xff
 80199a6:	fa5f f98c 	uxtb.w	r9, ip
 80199aa:	f3cc 2807 	ubfx	r8, ip, #8, #8
 80199ae:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 80199b2:	d126      	bne.n	8019a02 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 80199b4:	9f04      	ldr	r7, [sp, #16]
 80199b6:	2fff      	cmp	r7, #255	; 0xff
 80199b8:	d123      	bne.n	8019a02 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 80199ba:	4682      	mov	sl, r0
 80199bc:	4611      	mov	r1, r2
 80199be:	f10a 0a03 	add.w	sl, sl, #3
 80199c2:	b9a9      	cbnz	r1, 80199f0 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1c0>
 80199c4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80199c8:	429e      	cmp	r6, r3
 80199ca:	4410      	add	r0, r2
 80199cc:	d8c6      	bhi.n	801995c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12c>
 80199ce:	f8bd 5004 	ldrh.w	r5, [sp, #4]
 80199d2:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 80199d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80199d8:	1b64      	subs	r4, r4, r5
 80199da:	9a01      	ldr	r2, [sp, #4]
 80199dc:	881b      	ldrh	r3, [r3, #0]
 80199de:	b2a4      	uxth	r4, r4
 80199e0:	1a9b      	subs	r3, r3, r2
 80199e2:	2c00      	cmp	r4, #0
 80199e4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80199e8:	bf18      	it	ne
 80199ea:	2500      	movne	r5, #0
 80199ec:	4418      	add	r0, r3
 80199ee:	e7b5      	b.n	801995c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12c>
 80199f0:	3901      	subs	r1, #1
 80199f2:	f80a 9c03 	strb.w	r9, [sl, #-3]
 80199f6:	f80a 8c02 	strb.w	r8, [sl, #-2]
 80199fa:	f80a cc01 	strb.w	ip, [sl, #-1]
 80199fe:	b289      	uxth	r1, r1
 8019a00:	e7dd      	b.n	80199be <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x18e>
 8019a02:	9f04      	ldr	r7, [sp, #16]
 8019a04:	fb07 fa01 	mul.w	sl, r7, r1
 8019a08:	f10a 0101 	add.w	r1, sl, #1
 8019a0c:	eb01 212a 	add.w	r1, r1, sl, asr #8
 8019a10:	1209      	asrs	r1, r1, #8
 8019a12:	ea6f 0a01 	mvn.w	sl, r1
 8019a16:	b289      	uxth	r1, r1
 8019a18:	fb19 f901 	smulbb	r9, r9, r1
 8019a1c:	fa5f fa8a 	uxtb.w	sl, sl
 8019a20:	fb18 f801 	smulbb	r8, r8, r1
 8019a24:	fb1c f101 	smulbb	r1, ip, r1
 8019a28:	fa1f f789 	uxth.w	r7, r9
 8019a2c:	4684      	mov	ip, r0
 8019a2e:	4691      	mov	r9, r2
 8019a30:	9707      	str	r7, [sp, #28]
 8019a32:	b289      	uxth	r1, r1
 8019a34:	fa1f f788 	uxth.w	r7, r8
 8019a38:	9708      	str	r7, [sp, #32]
 8019a3a:	f10c 0c03 	add.w	ip, ip, #3
 8019a3e:	f1b9 0f00 	cmp.w	r9, #0
 8019a42:	d0bf      	beq.n	80199c4 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x194>
 8019a44:	f81c 8c03 	ldrb.w	r8, [ip, #-3]
 8019a48:	f109 39ff 	add.w	r9, r9, #4294967295
 8019a4c:	9f07      	ldr	r7, [sp, #28]
 8019a4e:	fa1f f989 	uxth.w	r9, r9
 8019a52:	fb08 780a 	mla	r8, r8, sl, r7
 8019a56:	9f08      	ldr	r7, [sp, #32]
 8019a58:	fa1f f888 	uxth.w	r8, r8
 8019a5c:	f108 0b01 	add.w	fp, r8, #1
 8019a60:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8019a64:	ea4f 2828 	mov.w	r8, r8, asr #8
 8019a68:	f80c 8c03 	strb.w	r8, [ip, #-3]
 8019a6c:	f81c 8c02 	ldrb.w	r8, [ip, #-2]
 8019a70:	fb08 780a 	mla	r8, r8, sl, r7
 8019a74:	fa1f f888 	uxth.w	r8, r8
 8019a78:	f108 0b01 	add.w	fp, r8, #1
 8019a7c:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8019a80:	ea4f 2828 	mov.w	r8, r8, asr #8
 8019a84:	f80c 8c02 	strb.w	r8, [ip, #-2]
 8019a88:	f81c 8c01 	ldrb.w	r8, [ip, #-1]
 8019a8c:	fb08 180a 	mla	r8, r8, sl, r1
 8019a90:	fa1f f888 	uxth.w	r8, r8
 8019a94:	f108 0b01 	add.w	fp, r8, #1
 8019a98:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8019a9c:	ea4f 2828 	mov.w	r8, r8, asr #8
 8019aa0:	f80c 8c01 	strb.w	r8, [ip, #-1]
 8019aa4:	e7c9      	b.n	8019a3a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x20a>
 8019aa6:	4b04      	ldr	r3, [pc, #16]	; (8019ab8 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x288>)
 8019aa8:	6818      	ldr	r0, [r3, #0]
 8019aaa:	6803      	ldr	r3, [r0, #0]
 8019aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019aae:	4798      	blx	r3
 8019ab0:	b00f      	add	sp, #60	; 0x3c
 8019ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019ab6:	bf00      	nop
 8019ab8:	240069a4 	.word	0x240069a4
 8019abc:	2400699e 	.word	0x2400699e

08019ac0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 8019ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ac4:	b089      	sub	sp, #36	; 0x24
 8019ac6:	4607      	mov	r7, r0
 8019ac8:	4689      	mov	r9, r1
 8019aca:	4692      	mov	sl, r2
 8019acc:	ac08      	add	r4, sp, #32
 8019ace:	461e      	mov	r6, r3
 8019ad0:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 8019ad4:	4620      	mov	r0, r4
 8019ad6:	f7fd ffa5 	bl	8017a24 <_ZNK8touchgfx6Bitmap7getDataEv>
 8019ada:	683b      	ldr	r3, [r7, #0]
 8019adc:	4605      	mov	r5, r0
 8019ade:	4620      	mov	r0, r4
 8019ae0:	f8d3 8018 	ldr.w	r8, [r3, #24]
 8019ae4:	f7fd ff36 	bl	8017954 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8019ae8:	4683      	mov	fp, r0
 8019aea:	4620      	mov	r0, r4
 8019aec:	f7fd ff66 	bl	80179bc <_ZNK8touchgfx6Bitmap9getHeightEv>
 8019af0:	4653      	mov	r3, sl
 8019af2:	464a      	mov	r2, r9
 8019af4:	4639      	mov	r1, r7
 8019af6:	9500      	str	r5, [sp, #0]
 8019af8:	e9cd b001 	strd	fp, r0, [sp, #4]
 8019afc:	a806      	add	r0, sp, #24
 8019afe:	47c0      	blx	r8
 8019b00:	a906      	add	r1, sp, #24
 8019b02:	4630      	mov	r0, r6
 8019b04:	f7fd fe0a 	bl	801771c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>
 8019b08:	4628      	mov	r0, r5
 8019b0a:	b009      	add	sp, #36	; 0x24
 8019b0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019b10 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L4D0Ev>:
 8019b10:	b510      	push	{r4, lr}
 8019b12:	4604      	mov	r4, r0
 8019b14:	2104      	movs	r1, #4
 8019b16:	f007 f928 	bl	8020d6a <_ZdlPvj>
 8019b1a:	4620      	mov	r0, r4
 8019b1c:	bd10      	pop	{r4, pc}

08019b1e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLED0Ev>:
 8019b1e:	b510      	push	{r4, lr}
 8019b20:	4604      	mov	r4, r0
 8019b22:	2104      	movs	r1, #4
 8019b24:	f007 f921 	bl	8020d6a <_ZdlPvj>
 8019b28:	4620      	mov	r0, r4
 8019b2a:	bd10      	pop	{r4, pc}

08019b2c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW9D0Ev>:
 8019b2c:	b510      	push	{r4, lr}
 8019b2e:	4604      	mov	r4, r0
 8019b30:	f640 0144 	movw	r1, #2116	; 0x844
 8019b34:	f007 f919 	bl	8020d6a <_ZdlPvj>
 8019b38:	4620      	mov	r0, r4
 8019b3a:	bd10      	pop	{r4, pc}

08019b3c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8019b3c:	b510      	push	{r4, lr}
 8019b3e:	4604      	mov	r4, r0
 8019b40:	2104      	movs	r1, #4
 8019b42:	f007 f912 	bl	8020d6a <_ZdlPvj>
 8019b46:	4620      	mov	r0, r4
 8019b48:	bd10      	pop	{r4, pc}

08019b4a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8019b4a:	b510      	push	{r4, lr}
 8019b4c:	4604      	mov	r4, r0
 8019b4e:	2104      	movs	r1, #4
 8019b50:	f007 f90b 	bl	8020d6a <_ZdlPvj>
 8019b54:	4620      	mov	r0, r4
 8019b56:	bd10      	pop	{r4, pc}

08019b58 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8019b58:	b510      	push	{r4, lr}
 8019b5a:	4604      	mov	r4, r0
 8019b5c:	2104      	movs	r1, #4
 8019b5e:	f007 f904 	bl	8020d6a <_ZdlPvj>
 8019b62:	4620      	mov	r0, r4
 8019b64:	bd10      	pop	{r4, pc}

08019b66 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8019b66:	b510      	push	{r4, lr}
 8019b68:	4604      	mov	r4, r0
 8019b6a:	2104      	movs	r1, #4
 8019b6c:	f007 f8fd 	bl	8020d6a <_ZdlPvj>
 8019b70:	4620      	mov	r0, r4
 8019b72:	bd10      	pop	{r4, pc}

08019b74 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8019b74:	b510      	push	{r4, lr}
 8019b76:	4604      	mov	r4, r0
 8019b78:	2104      	movs	r1, #4
 8019b7a:	f007 f8f6 	bl	8020d6a <_ZdlPvj>
 8019b7e:	4620      	mov	r0, r4
 8019b80:	bd10      	pop	{r4, pc}

08019b82 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8019b82:	b510      	push	{r4, lr}
 8019b84:	4604      	mov	r4, r0
 8019b86:	2104      	movs	r1, #4
 8019b88:	f007 f8ef 	bl	8020d6a <_ZdlPvj>
 8019b8c:	4620      	mov	r0, r4
 8019b8e:	bd10      	pop	{r4, pc}

08019b90 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8019b90:	b510      	push	{r4, lr}
 8019b92:	4604      	mov	r4, r0
 8019b94:	2104      	movs	r1, #4
 8019b96:	f007 f8e8 	bl	8020d6a <_ZdlPvj>
 8019b9a:	4620      	mov	r0, r4
 8019b9c:	bd10      	pop	{r4, pc}

08019b9e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8019b9e:	b510      	push	{r4, lr}
 8019ba0:	4604      	mov	r4, r0
 8019ba2:	2104      	movs	r1, #4
 8019ba4:	f007 f8e1 	bl	8020d6a <_ZdlPvj>
 8019ba8:	4620      	mov	r0, r4
 8019baa:	bd10      	pop	{r4, pc}

08019bac <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8019bac:	b510      	push	{r4, lr}
 8019bae:	4604      	mov	r4, r0
 8019bb0:	2104      	movs	r1, #4
 8019bb2:	f007 f8da 	bl	8020d6a <_ZdlPvj>
 8019bb6:	4620      	mov	r0, r4
 8019bb8:	bd10      	pop	{r4, pc}

08019bba <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8019bba:	b510      	push	{r4, lr}
 8019bbc:	4604      	mov	r4, r0
 8019bbe:	2104      	movs	r1, #4
 8019bc0:	f007 f8d3 	bl	8020d6a <_ZdlPvj>
 8019bc4:	4620      	mov	r0, r4
 8019bc6:	bd10      	pop	{r4, pc}

08019bc8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8019bc8:	b510      	push	{r4, lr}
 8019bca:	4604      	mov	r4, r0
 8019bcc:	2104      	movs	r1, #4
 8019bce:	f007 f8cc 	bl	8020d6a <_ZdlPvj>
 8019bd2:	4620      	mov	r0, r4
 8019bd4:	bd10      	pop	{r4, pc}

08019bd6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8019bd6:	b510      	push	{r4, lr}
 8019bd8:	4604      	mov	r4, r0
 8019bda:	2104      	movs	r1, #4
 8019bdc:	f007 f8c5 	bl	8020d6a <_ZdlPvj>
 8019be0:	4620      	mov	r0, r4
 8019be2:	bd10      	pop	{r4, pc}

08019be4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8019be4:	b510      	push	{r4, lr}
 8019be6:	4604      	mov	r4, r0
 8019be8:	2104      	movs	r1, #4
 8019bea:	f007 f8be 	bl	8020d6a <_ZdlPvj>
 8019bee:	4620      	mov	r0, r4
 8019bf0:	bd10      	pop	{r4, pc}

08019bf2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8019bf2:	b510      	push	{r4, lr}
 8019bf4:	4604      	mov	r4, r0
 8019bf6:	2104      	movs	r1, #4
 8019bf8:	f007 f8b7 	bl	8020d6a <_ZdlPvj>
 8019bfc:	4620      	mov	r0, r4
 8019bfe:	bd10      	pop	{r4, pc}

08019c00 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8019c00:	b510      	push	{r4, lr}
 8019c02:	4604      	mov	r4, r0
 8019c04:	2104      	movs	r1, #4
 8019c06:	f007 f8b0 	bl	8020d6a <_ZdlPvj>
 8019c0a:	4620      	mov	r0, r4
 8019c0c:	bd10      	pop	{r4, pc}

08019c0e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8019c0e:	b510      	push	{r4, lr}
 8019c10:	4604      	mov	r4, r0
 8019c12:	2104      	movs	r1, #4
 8019c14:	f007 f8a9 	bl	8020d6a <_ZdlPvj>
 8019c18:	4620      	mov	r0, r4
 8019c1a:	bd10      	pop	{r4, pc}

08019c1c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 8019c1c:	b510      	push	{r4, lr}
 8019c1e:	4604      	mov	r4, r0
 8019c20:	2104      	movs	r1, #4
 8019c22:	f007 f8a2 	bl	8020d6a <_ZdlPvj>
 8019c26:	4620      	mov	r0, r4
 8019c28:	bd10      	pop	{r4, pc}

08019c2a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 8019c2a:	b510      	push	{r4, lr}
 8019c2c:	4604      	mov	r4, r0
 8019c2e:	2104      	movs	r1, #4
 8019c30:	f007 f89b 	bl	8020d6a <_ZdlPvj>
 8019c34:	4620      	mov	r0, r4
 8019c36:	bd10      	pop	{r4, pc}

08019c38 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 8019c38:	b510      	push	{r4, lr}
 8019c3a:	4604      	mov	r4, r0
 8019c3c:	2104      	movs	r1, #4
 8019c3e:	f007 f894 	bl	8020d6a <_ZdlPvj>
 8019c42:	4620      	mov	r0, r4
 8019c44:	bd10      	pop	{r4, pc}

08019c46 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 8019c46:	b510      	push	{r4, lr}
 8019c48:	4604      	mov	r4, r0
 8019c4a:	2104      	movs	r1, #4
 8019c4c:	f007 f88d 	bl	8020d6a <_ZdlPvj>
 8019c50:	4620      	mov	r0, r4
 8019c52:	bd10      	pop	{r4, pc}

08019c54 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 8019c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c58:	b08f      	sub	sp, #60	; 0x3c
 8019c5a:	461c      	mov	r4, r3
 8019c5c:	460e      	mov	r6, r1
 8019c5e:	9206      	str	r2, [sp, #24]
 8019c60:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8019c64:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8019c66:	9202      	str	r2, [sp, #8]
 8019c68:	2a00      	cmp	r2, #0
 8019c6a:	f000 8128 	beq.w	8019ebe <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x26a>
 8019c6e:	6820      	ldr	r0, [r4, #0]
 8019c70:	aa0a      	add	r2, sp, #40	; 0x28
 8019c72:	6861      	ldr	r1, [r4, #4]
 8019c74:	c203      	stmia	r2!, {r0, r1}
 8019c76:	6818      	ldr	r0, [r3, #0]
 8019c78:	aa0c      	add	r2, sp, #48	; 0x30
 8019c7a:	6859      	ldr	r1, [r3, #4]
 8019c7c:	c203      	stmia	r2!, {r0, r1}
 8019c7e:	a80a      	add	r0, sp, #40	; 0x28
 8019c80:	f7fa ff4e 	bl	8014b20 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019c84:	4621      	mov	r1, r4
 8019c86:	a80c      	add	r0, sp, #48	; 0x30
 8019c88:	f7fa ff72 	bl	8014b70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8019c8c:	f9bd 702c 	ldrsh.w	r7, [sp, #44]	; 0x2c
 8019c90:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	; 0x2e
 8019c94:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 8019c98:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
 8019c9c:	bfdb      	ittet	le
 8019c9e:	b2bb      	uxthle	r3, r7
 8019ca0:	f44f 6280 	movle.w	r2, #1024	; 0x400
 8019ca4:	2301      	movgt	r3, #1
 8019ca6:	fb92 f3f3 	sdivle	r3, r2, r3
 8019caa:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 8019cae:	441d      	add	r5, r3
 8019cb0:	fb92 f1f3 	sdiv	r1, r2, r3
 8019cb4:	fa1f fc81 	uxth.w	ip, r1
 8019cb8:	3d01      	subs	r5, #1
 8019cba:	fb0c 2413 	mls	r4, ip, r3, r2
 8019cbe:	4661      	mov	r1, ip
 8019cc0:	fb14 f407 	smulbb	r4, r4, r7
 8019cc4:	4404      	add	r4, r0
 8019cc6:	fb95 f5f3 	sdiv	r5, r5, r3
 8019cca:	b2a4      	uxth	r4, r4
 8019ccc:	b121      	cbz	r1, 8019cd8 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x84>
 8019cce:	9b06      	ldr	r3, [sp, #24]
 8019cd0:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8019cd4:	ba1b      	rev	r3, r3
 8019cd6:	441e      	add	r6, r3
 8019cd8:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8019cdc:	b2ad      	uxth	r5, r5
 8019cde:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 8019ce2:	4418      	add	r0, r3
 8019ce4:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8019ce8:	f9bd 7036 	ldrsh.w	r7, [sp, #54]	; 0x36
 8019cec:	00ad      	lsls	r5, r5, #2
 8019cee:	441a      	add	r2, r3
 8019cf0:	4b74      	ldr	r3, [pc, #464]	; (8019ec4 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x270>)
 8019cf2:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
 8019cf6:	6818      	ldr	r0, [r3, #0]
 8019cf8:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 8019cfc:	6803      	ldr	r3, [r0, #0]
 8019cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019d00:	4798      	blx	r3
 8019d02:	4a71      	ldr	r2, [pc, #452]	; (8019ec8 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x274>)
 8019d04:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	; 0x32
 8019d08:	2c00      	cmp	r4, #0
 8019d0a:	8813      	ldrh	r3, [r2, #0]
 8019d0c:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 8019d10:	9209      	str	r2, [sp, #36]	; 0x24
 8019d12:	fb03 c101 	mla	r1, r3, r1, ip
 8019d16:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8019d1a:	fb03 f307 	mul.w	r3, r3, r7
 8019d1e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8019d22:	9204      	str	r2, [sp, #16]
 8019d24:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019d28:	9a02      	ldr	r2, [sp, #8]
 8019d2a:	4408      	add	r0, r1
 8019d2c:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 8019d30:	4403      	add	r3, r0
 8019d32:	b292      	uxth	r2, r2
 8019d34:	9307      	str	r3, [sp, #28]
 8019d36:	f105 0304 	add.w	r3, r5, #4
 8019d3a:	bf0c      	ite	eq
 8019d3c:	4645      	moveq	r5, r8
 8019d3e:	2500      	movne	r5, #0
 8019d40:	9308      	str	r3, [sp, #32]
 8019d42:	2300      	movs	r3, #0
 8019d44:	b2ad      	uxth	r5, r5
 8019d46:	9205      	str	r2, [sp, #20]
 8019d48:	9303      	str	r3, [sp, #12]
 8019d4a:	9a07      	ldr	r2, [sp, #28]
 8019d4c:	4282      	cmp	r2, r0
 8019d4e:	f240 80b1 	bls.w	8019eb4 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x260>
 8019d52:	b95b      	cbnz	r3, 8019d6c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x118>
 8019d54:	7832      	ldrb	r2, [r6, #0]
 8019d56:	0993      	lsrs	r3, r2, #6
 8019d58:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8019d5c:	9203      	str	r2, [sp, #12]
 8019d5e:	1e5a      	subs	r2, r3, #1
 8019d60:	2a02      	cmp	r2, #2
 8019d62:	bf8d      	iteet	hi
 8019d64:	7873      	ldrbhi	r3, [r6, #1]
 8019d66:	3601      	addls	r6, #1
 8019d68:	b29b      	uxthls	r3, r3
 8019d6a:	3602      	addhi	r6, #2
 8019d6c:	b184      	cbz	r4, 8019d90 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x13c>
 8019d6e:	429c      	cmp	r4, r3
 8019d70:	bf91      	iteee	ls
 8019d72:	1b1c      	subls	r4, r3, r4
 8019d74:	1ae4      	subhi	r4, r4, r3
 8019d76:	4629      	movhi	r1, r5
 8019d78:	f04f 0e00 	movhi.w	lr, #0
 8019d7c:	bf9b      	ittet	ls
 8019d7e:	fa1f fe84 	uxthls.w	lr, r4
 8019d82:	2400      	movls	r4, #0
 8019d84:	b2a4      	uxthhi	r4, r4
 8019d86:	fa1f f188 	uxthls.w	r1, r8
 8019d8a:	4673      	mov	r3, lr
 8019d8c:	460d      	mov	r5, r1
 8019d8e:	e7dc      	b.n	8019d4a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf6>
 8019d90:	2203      	movs	r2, #3
 8019d92:	9908      	ldr	r1, [sp, #32]
 8019d94:	42ab      	cmp	r3, r5
 8019d96:	4617      	mov	r7, r2
 8019d98:	9a03      	ldr	r2, [sp, #12]
 8019d9a:	bf24      	itt	cs
 8019d9c:	eba3 0e05 	subcs.w	lr, r3, r5
 8019da0:	9501      	strcs	r5, [sp, #4]
 8019da2:	fb17 1702 	smlabb	r7, r7, r2, r1
 8019da6:	9a06      	ldr	r2, [sp, #24]
 8019da8:	bf34      	ite	cc
 8019daa:	1ae9      	subcc	r1, r5, r3
 8019dac:	fa1f fe8e 	uxthcs.w	lr, lr
 8019db0:	4417      	add	r7, r2
 8019db2:	9a02      	ldr	r2, [sp, #8]
 8019db4:	bf2f      	iteee	cs
 8019db6:	4621      	movcs	r1, r4
 8019db8:	b289      	uxthcc	r1, r1
 8019dba:	9301      	strcc	r3, [sp, #4]
 8019dbc:	46a6      	movcc	lr, r4
 8019dbe:	2aff      	cmp	r2, #255	; 0xff
 8019dc0:	d11e      	bne.n	8019e00 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ac>
 8019dc2:	4681      	mov	r9, r0
 8019dc4:	f8dd c004 	ldr.w	ip, [sp, #4]
 8019dc8:	f109 0903 	add.w	r9, r9, #3
 8019dcc:	f1bc 0f00 	cmp.w	ip, #0
 8019dd0:	d15f      	bne.n	8019e92 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x23e>
 8019dd2:	9a01      	ldr	r2, [sp, #4]
 8019dd4:	42ab      	cmp	r3, r5
 8019dd6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8019dda:	4410      	add	r0, r2
 8019ddc:	d3d5      	bcc.n	8019d8a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x136>
 8019dde:	fa1f f188 	uxth.w	r1, r8
 8019de2:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 8019de6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019de8:	1a64      	subs	r4, r4, r1
 8019dea:	881b      	ldrh	r3, [r3, #0]
 8019dec:	b2a4      	uxth	r4, r4
 8019dee:	eba3 0308 	sub.w	r3, r3, r8
 8019df2:	2c00      	cmp	r4, #0
 8019df4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019df8:	bf18      	it	ne
 8019dfa:	2100      	movne	r1, #0
 8019dfc:	4418      	add	r0, r3
 8019dfe:	e7c4      	b.n	8019d8a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x136>
 8019e00:	4684      	mov	ip, r0
 8019e02:	f8dd a004 	ldr.w	sl, [sp, #4]
 8019e06:	f10c 0c03 	add.w	ip, ip, #3
 8019e0a:	f1ba 0f00 	cmp.w	sl, #0
 8019e0e:	d0e0      	beq.n	8019dd2 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17e>
 8019e10:	f81c bc03 	ldrb.w	fp, [ip, #-3]
 8019e14:	f10a 3aff 	add.w	sl, sl, #4294967295
 8019e18:	9a05      	ldr	r2, [sp, #20]
 8019e1a:	f897 9000 	ldrb.w	r9, [r7]
 8019e1e:	fa1f fa8a 	uxth.w	sl, sl
 8019e22:	fb1b fb02 	smulbb	fp, fp, r2
 8019e26:	9a04      	ldr	r2, [sp, #16]
 8019e28:	fb09 b902 	mla	r9, r9, r2, fp
 8019e2c:	9a05      	ldr	r2, [sp, #20]
 8019e2e:	fa1f f989 	uxth.w	r9, r9
 8019e32:	f109 0b01 	add.w	fp, r9, #1
 8019e36:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8019e3a:	f81c bc02 	ldrb.w	fp, [ip, #-2]
 8019e3e:	fb1b fb02 	smulbb	fp, fp, r2
 8019e42:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019e46:	9a04      	ldr	r2, [sp, #16]
 8019e48:	f80c 9c03 	strb.w	r9, [ip, #-3]
 8019e4c:	f897 9001 	ldrb.w	r9, [r7, #1]
 8019e50:	fb09 b902 	mla	r9, r9, r2, fp
 8019e54:	9a05      	ldr	r2, [sp, #20]
 8019e56:	fa1f f989 	uxth.w	r9, r9
 8019e5a:	f109 0b01 	add.w	fp, r9, #1
 8019e5e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8019e62:	f81c bc01 	ldrb.w	fp, [ip, #-1]
 8019e66:	fb1b fb02 	smulbb	fp, fp, r2
 8019e6a:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019e6e:	9a04      	ldr	r2, [sp, #16]
 8019e70:	f80c 9c02 	strb.w	r9, [ip, #-2]
 8019e74:	f897 9002 	ldrb.w	r9, [r7, #2]
 8019e78:	fb09 b902 	mla	r9, r9, r2, fp
 8019e7c:	fa1f f989 	uxth.w	r9, r9
 8019e80:	f109 0b01 	add.w	fp, r9, #1
 8019e84:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8019e88:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019e8c:	f80c 9c01 	strb.w	r9, [ip, #-1]
 8019e90:	e7b9      	b.n	8019e06 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1b2>
 8019e92:	f897 a000 	ldrb.w	sl, [r7]
 8019e96:	f10c 3cff 	add.w	ip, ip, #4294967295
 8019e9a:	f809 ac03 	strb.w	sl, [r9, #-3]
 8019e9e:	fa1f fc8c 	uxth.w	ip, ip
 8019ea2:	f897 a001 	ldrb.w	sl, [r7, #1]
 8019ea6:	f809 ac02 	strb.w	sl, [r9, #-2]
 8019eaa:	f897 a002 	ldrb.w	sl, [r7, #2]
 8019eae:	f809 ac01 	strb.w	sl, [r9, #-1]
 8019eb2:	e789      	b.n	8019dc8 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x174>
 8019eb4:	4b03      	ldr	r3, [pc, #12]	; (8019ec4 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x270>)
 8019eb6:	6818      	ldr	r0, [r3, #0]
 8019eb8:	6803      	ldr	r3, [r0, #0]
 8019eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019ebc:	4798      	blx	r3
 8019ebe:	b00f      	add	sp, #60	; 0x3c
 8019ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019ec4:	240069a4 	.word	0x240069a4
 8019ec8:	2400699e 	.word	0x2400699e

08019ecc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 8019ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ed0:	b09b      	sub	sp, #108	; 0x6c
 8019ed2:	461d      	mov	r5, r3
 8019ed4:	4604      	mov	r4, r0
 8019ed6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8019ed8:	e9cd 1210 	strd	r1, r2, [sp, #64]	; 0x40
 8019edc:	f89d 2094 	ldrb.w	r2, [sp, #148]	; 0x94
 8019ee0:	9208      	str	r2, [sp, #32]
 8019ee2:	2a00      	cmp	r2, #0
 8019ee4:	f000 81f3 	beq.w	801a2ce <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x402>
 8019ee8:	6828      	ldr	r0, [r5, #0]
 8019eea:	aa16      	add	r2, sp, #88	; 0x58
 8019eec:	6869      	ldr	r1, [r5, #4]
 8019eee:	c203      	stmia	r2!, {r0, r1}
 8019ef0:	6818      	ldr	r0, [r3, #0]
 8019ef2:	aa18      	add	r2, sp, #96	; 0x60
 8019ef4:	6859      	ldr	r1, [r3, #4]
 8019ef6:	c203      	stmia	r2!, {r0, r1}
 8019ef8:	a816      	add	r0, sp, #88	; 0x58
 8019efa:	f7fa fe11 	bl	8014b20 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019efe:	4629      	mov	r1, r5
 8019f00:	a818      	add	r0, sp, #96	; 0x60
 8019f02:	f7fa fe35 	bl	8014b70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8019f06:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	; 0x5c
 8019f0a:	f9bd 605e 	ldrsh.w	r6, [sp, #94]	; 0x5e
 8019f0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8019f12:	f9bd 5066 	ldrsh.w	r5, [sp, #102]	; 0x66
 8019f16:	bfdb      	ittet	le
 8019f18:	b29a      	uxthle	r2, r3
 8019f1a:	f44f 6180 	movle.w	r1, #1024	; 0x400
 8019f1e:	f04f 0a01 	movgt.w	sl, #1
 8019f22:	fb91 faf2 	sdivle	sl, r1, r2
 8019f26:	f9bd 2062 	ldrsh.w	r2, [sp, #98]	; 0x62
 8019f2a:	4456      	add	r6, sl
 8019f2c:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
 8019f30:	3e01      	subs	r6, #1
 8019f32:	fb92 f0fa 	sdiv	r0, r2, sl
 8019f36:	b280      	uxth	r0, r0
 8019f38:	fb00 281a 	mls	r8, r0, sl, r2
 8019f3c:	900e      	str	r0, [sp, #56]	; 0x38
 8019f3e:	fb18 f803 	smulbb	r8, r8, r3
 8019f42:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
 8019f46:	4488      	add	r8, r1
 8019f48:	4419      	add	r1, r3
 8019f4a:	f8bd 305a 	ldrh.w	r3, [sp, #90]	; 0x5a
 8019f4e:	f8ad 1060 	strh.w	r1, [sp, #96]	; 0x60
 8019f52:	fa1f f888 	uxth.w	r8, r8
 8019f56:	441a      	add	r2, r3
 8019f58:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	; 0x64
 8019f5c:	9303      	str	r3, [sp, #12]
 8019f5e:	4b9c      	ldr	r3, [pc, #624]	; (801a1d0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x304>)
 8019f60:	f8ad 2062 	strh.w	r2, [sp, #98]	; 0x62
 8019f64:	6818      	ldr	r0, [r3, #0]
 8019f66:	6803      	ldr	r3, [r0, #0]
 8019f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019f6a:	4798      	blx	r3
 8019f6c:	4b99      	ldr	r3, [pc, #612]	; (801a1d4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x308>)
 8019f6e:	f9bd 1062 	ldrsh.w	r1, [sp, #98]	; 0x62
 8019f72:	f1b8 0f00 	cmp.w	r8, #0
 8019f76:	881a      	ldrh	r2, [r3, #0]
 8019f78:	f9bd 7060 	ldrsh.w	r7, [sp, #96]	; 0x60
 8019f7c:	fb02 f505 	mul.w	r5, r2, r5
 8019f80:	fb02 7101 	mla	r1, r2, r1, r7
 8019f84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019f88:	9314      	str	r3, [sp, #80]	; 0x50
 8019f8a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8019f8e:	9b08      	ldr	r3, [sp, #32]
 8019f90:	fb96 f6fa 	sdiv	r6, r6, sl
 8019f94:	4408      	add	r0, r1
 8019f96:	f106 0601 	add.w	r6, r6, #1
 8019f9a:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8019f9e:	f04f 0100 	mov.w	r1, #0
 8019fa2:	eb00 0205 	add.w	r2, r0, r5
 8019fa6:	b2b6      	uxth	r6, r6
 8019fa8:	b29b      	uxth	r3, r3
 8019faa:	910b      	str	r1, [sp, #44]	; 0x2c
 8019fac:	9209      	str	r2, [sp, #36]	; 0x24
 8019fae:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019fb0:	930d      	str	r3, [sp, #52]	; 0x34
 8019fb2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8019fb6:	4b88      	ldr	r3, [pc, #544]	; (801a1d8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x30c>)
 8019fb8:	f106 0204 	add.w	r2, r6, #4
 8019fbc:	eba3 0304 	sub.w	r3, r3, r4
 8019fc0:	9205      	str	r2, [sp, #20]
 8019fc2:	9a03      	ldr	r2, [sp, #12]
 8019fc4:	bf18      	it	ne
 8019fc6:	2200      	movne	r2, #0
 8019fc8:	9315      	str	r3, [sp, #84]	; 0x54
 8019fca:	b292      	uxth	r2, r2
 8019fcc:	990e      	ldr	r1, [sp, #56]	; 0x38
 8019fce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019fd0:	fa11 f383 	uxtah	r3, r1, r3
 8019fd4:	9911      	ldr	r1, [sp, #68]	; 0x44
 8019fd6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8019fda:	3304      	adds	r3, #4
 8019fdc:	9306      	str	r3, [sp, #24]
 8019fde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019fe0:	4283      	cmp	r3, r0
 8019fe2:	f240 816f 	bls.w	801a2c4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3f8>
 8019fe6:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
 8019fea:	f04f 0900 	mov.w	r9, #0
 8019fee:	9d06      	ldr	r5, [sp, #24]
 8019ff0:	fbb8 f3f3 	udiv	r3, r8, r3
 8019ff4:	ebaa 0303 	sub.w	r3, sl, r3
 8019ff8:	782d      	ldrb	r5, [r5, #0]
 8019ffa:	b29b      	uxth	r3, r3
 8019ffc:	950f      	str	r5, [sp, #60]	; 0x3c
 8019ffe:	3501      	adds	r5, #1
 801a000:	9312      	str	r3, [sp, #72]	; 0x48
 801a002:	9b06      	ldr	r3, [sp, #24]
 801a004:	9504      	str	r5, [sp, #16]
 801a006:	7859      	ldrb	r1, [r3, #1]
 801a008:	789b      	ldrb	r3, [r3, #2]
 801a00a:	021b      	lsls	r3, r3, #8
 801a00c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 801a010:	9906      	ldr	r1, [sp, #24]
 801a012:	78c9      	ldrb	r1, [r1, #3]
 801a014:	430b      	orrs	r3, r1
 801a016:	9910      	ldr	r1, [sp, #64]	; 0x40
 801a018:	4419      	add	r1, r3
 801a01a:	1c4d      	adds	r5, r1, #1
 801a01c:	7849      	ldrb	r1, [r1, #1]
 801a01e:	9502      	str	r5, [sp, #8]
 801a020:	0209      	lsls	r1, r1, #8
 801a022:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801a024:	f401 71ff 	and.w	r1, r1, #510	; 0x1fe
 801a028:	5ceb      	ldrb	r3, [r5, r3]
 801a02a:	4319      	orrs	r1, r3
 801a02c:	b28b      	uxth	r3, r1
 801a02e:	f884 1804 	strb.w	r1, [r4, #2052]	; 0x804
 801a032:	930a      	str	r3, [sp, #40]	; 0x28
 801a034:	2300      	movs	r3, #0
 801a036:	9307      	str	r3, [sp, #28]
 801a038:	2301      	movs	r3, #1
 801a03a:	e9cd 3300 	strd	r3, r3, [sp]
 801a03e:	469c      	mov	ip, r3
 801a040:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801a044:	930c      	str	r3, [sp, #48]	; 0x30
 801a046:	f1b8 0f00 	cmp.w	r8, #0
 801a04a:	f000 8082 	beq.w	801a152 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x286>
 801a04e:	45c4      	cmp	ip, r8
 801a050:	d270      	bcs.n	801a134 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x268>
 801a052:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a054:	eba8 080c 	sub.w	r8, r8, ip
 801a058:	4611      	mov	r1, r2
 801a05a:	4283      	cmp	r3, r0
 801a05c:	fa1f f888 	uxth.w	r8, r8
 801a060:	d802      	bhi.n	801a068 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x19c>
 801a062:	e074      	b.n	801a14e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x282>
 801a064:	2b00      	cmp	r3, #0
 801a066:	d15f      	bne.n	801a128 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x25c>
 801a068:	9b02      	ldr	r3, [sp, #8]
 801a06a:	9a01      	ldr	r2, [sp, #4]
 801a06c:	785b      	ldrb	r3, [r3, #1]
 801a06e:	f1c2 0207 	rsb	r2, r2, #7
 801a072:	9d01      	ldr	r5, [sp, #4]
 801a074:	4093      	lsls	r3, r2
 801a076:	005b      	lsls	r3, r3, #1
 801a078:	f403 72ff 	and.w	r2, r3, #510	; 0x1fe
 801a07c:	9b02      	ldr	r3, [sp, #8]
 801a07e:	781b      	ldrb	r3, [r3, #0]
 801a080:	412b      	asrs	r3, r5
 801a082:	b2db      	uxtb	r3, r3
 801a084:	4313      	orrs	r3, r2
 801a086:	462a      	mov	r2, r5
 801a088:	3201      	adds	r2, #1
 801a08a:	b29e      	uxth	r6, r3
 801a08c:	b2d2      	uxtb	r2, r2
 801a08e:	2a08      	cmp	r2, #8
 801a090:	9201      	str	r2, [sp, #4]
 801a092:	9a02      	ldr	r2, [sp, #8]
 801a094:	bf09      	itett	eq
 801a096:	3202      	addeq	r2, #2
 801a098:	3201      	addne	r2, #1
 801a09a:	9202      	streq	r2, [sp, #8]
 801a09c:	2200      	moveq	r2, #0
 801a09e:	bf14      	ite	ne
 801a0a0:	9202      	strne	r2, [sp, #8]
 801a0a2:	9201      	streq	r2, [sp, #4]
 801a0a4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a0a6:	42b2      	cmp	r2, r6
 801a0a8:	d309      	bcc.n	801a0be <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1f2>
 801a0aa:	f884 3804 	strb.w	r3, [r4, #2052]	; 0x804
 801a0ae:	2301      	movs	r3, #1
 801a0b0:	9a04      	ldr	r2, [sp, #16]
 801a0b2:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 801a0b6:	d30e      	bcc.n	801a0d6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x20a>
 801a0b8:	9300      	str	r3, [sp, #0]
 801a0ba:	2500      	movs	r5, #0
 801a0bc:	e035      	b.n	801a12a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x25e>
 801a0be:	9b04      	ldr	r3, [sp, #16]
 801a0c0:	429e      	cmp	r6, r3
 801a0c2:	d318      	bcc.n	801a0f6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x22a>
 801a0c4:	9b00      	ldr	r3, [sp, #0]
 801a0c6:	f894 2804 	ldrb.w	r2, [r4, #2052]	; 0x804
 801a0ca:	18e3      	adds	r3, r4, r3
 801a0cc:	f883 2804 	strb.w	r2, [r3, #2052]	; 0x804
 801a0d0:	9b00      	ldr	r3, [sp, #0]
 801a0d2:	3301      	adds	r3, #1
 801a0d4:	b29b      	uxth	r3, r3
 801a0d6:	9a04      	ldr	r2, [sp, #16]
 801a0d8:	f894 5804 	ldrb.w	r5, [r4, #2052]	; 0x804
 801a0dc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801a0e0:	9f00      	ldr	r7, [sp, #0]
 801a0e2:	7115      	strb	r5, [r2, #4]
 801a0e4:	3701      	adds	r7, #1
 801a0e6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801a0e8:	7157      	strb	r7, [r2, #5]
 801a0ea:	80d5      	strh	r5, [r2, #6]
 801a0ec:	9a04      	ldr	r2, [sp, #16]
 801a0ee:	3201      	adds	r2, #1
 801a0f0:	b292      	uxth	r2, r2
 801a0f2:	9204      	str	r2, [sp, #16]
 801a0f4:	e7e0      	b.n	801a0b8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ec>
 801a0f6:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801a0fa:	4632      	mov	r2, r6
 801a0fc:	795b      	ldrb	r3, [r3, #5]
 801a0fe:	f603 0504 	addw	r5, r3, #2052	; 0x804
 801a102:	4425      	add	r5, r4
 801a104:	9f15      	ldr	r7, [sp, #84]	; 0x54
 801a106:	eb07 0c05 	add.w	ip, r7, r5
 801a10a:	f1bc 0f00 	cmp.w	ip, #0
 801a10e:	dd07      	ble.n	801a120 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x254>
 801a110:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801a114:	f892 c004 	ldrb.w	ip, [r2, #4]
 801a118:	f805 cd01 	strb.w	ip, [r5, #-1]!
 801a11c:	88d2      	ldrh	r2, [r2, #6]
 801a11e:	e7f1      	b.n	801a104 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>
 801a120:	f884 2804 	strb.w	r2, [r4, #2052]	; 0x804
 801a124:	b29b      	uxth	r3, r3
 801a126:	e7c3      	b.n	801a0b0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1e4>
 801a128:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801a12a:	460a      	mov	r2, r1
 801a12c:	960a      	str	r6, [sp, #40]	; 0x28
 801a12e:	46a9      	mov	r9, r5
 801a130:	469c      	mov	ip, r3
 801a132:	e788      	b.n	801a046 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17a>
 801a134:	ebac 0308 	sub.w	r3, ip, r8
 801a138:	eb09 0508 	add.w	r5, r9, r8
 801a13c:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801a140:	b29b      	uxth	r3, r3
 801a142:	b2ad      	uxth	r5, r5
 801a144:	f04f 0800 	mov.w	r8, #0
 801a148:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a14a:	4282      	cmp	r2, r0
 801a14c:	d88a      	bhi.n	801a064 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x198>
 801a14e:	460a      	mov	r2, r1
 801a150:	e745      	b.n	8019fde <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x112>
 801a152:	4594      	cmp	ip, r2
 801a154:	9d08      	ldr	r5, [sp, #32]
 801a156:	4686      	mov	lr, r0
 801a158:	bf27      	ittee	cs
 801a15a:	ebac 0302 	subcs.w	r3, ip, r2
 801a15e:	4616      	movcs	r6, r2
 801a160:	eba2 010c 	subcc.w	r1, r2, ip
 801a164:	4666      	movcc	r6, ip
 801a166:	bf27      	ittee	cs
 801a168:	b29b      	uxthcs	r3, r3
 801a16a:	4641      	movcs	r1, r8
 801a16c:	b289      	uxthcc	r1, r1
 801a16e:	4643      	movcc	r3, r8
 801a170:	2dff      	cmp	r5, #255	; 0xff
 801a172:	eb09 0506 	add.w	r5, r9, r6
 801a176:	b2ad      	uxth	r5, r5
 801a178:	d130      	bne.n	801a1dc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x310>
 801a17a:	45a9      	cmp	r9, r5
 801a17c:	f10e 0e03 	add.w	lr, lr, #3
 801a180:	d17a      	bne.n	801a278 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3ac>
 801a182:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801a186:	4594      	cmp	ip, r2
 801a188:	4430      	add	r0, r6
 801a18a:	d3db      	bcc.n	801a144 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x278>
 801a18c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a18e:	9903      	ldr	r1, [sp, #12]
 801a190:	8812      	ldrh	r2, [r2, #0]
 801a192:	1a52      	subs	r2, r2, r1
 801a194:	9912      	ldr	r1, [sp, #72]	; 0x48
 801a196:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801a19a:	4410      	add	r0, r2
 801a19c:	9a07      	ldr	r2, [sp, #28]
 801a19e:	3201      	adds	r2, #1
 801a1a0:	428a      	cmp	r2, r1
 801a1a2:	9207      	str	r2, [sp, #28]
 801a1a4:	f040 8081 	bne.w	801a2aa <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3de>
 801a1a8:	f8bd 8060 	ldrh.w	r8, [sp, #96]	; 0x60
 801a1ac:	f8bd c058 	ldrh.w	ip, [sp, #88]	; 0x58
 801a1b0:	9b03      	ldr	r3, [sp, #12]
 801a1b2:	eba8 080c 	sub.w	r8, r8, ip
 801a1b6:	fa1f f888 	uxth.w	r8, r8
 801a1ba:	f1b8 0f00 	cmp.w	r8, #0
 801a1be:	bf08      	it	eq
 801a1c0:	461a      	moveq	r2, r3
 801a1c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a1c4:	bf18      	it	ne
 801a1c6:	2200      	movne	r2, #0
 801a1c8:	3301      	adds	r3, #1
 801a1ca:	b292      	uxth	r2, r2
 801a1cc:	930b      	str	r3, [sp, #44]	; 0x2c
 801a1ce:	e6fd      	b.n	8019fcc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x100>
 801a1d0:	240069a4 	.word	0x240069a4
 801a1d4:	2400699e 	.word	0x2400699e
 801a1d8:	fffff7fb 	.word	0xfffff7fb
 801a1dc:	45a9      	cmp	r9, r5
 801a1de:	f10e 0e03 	add.w	lr, lr, #3
 801a1e2:	d0ce      	beq.n	801a182 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2b6>
 801a1e4:	f109 0701 	add.w	r7, r9, #1
 801a1e8:	44a1      	add	r9, r4
 801a1ea:	f81e bc03 	ldrb.w	fp, [lr, #-3]
 801a1ee:	f899 8804 	ldrb.w	r8, [r9, #2052]	; 0x804
 801a1f2:	9713      	str	r7, [sp, #76]	; 0x4c
 801a1f4:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801a1f8:	9f05      	ldr	r7, [sp, #20]
 801a1fa:	eb07 0908 	add.w	r9, r7, r8
 801a1fe:	f817 8008 	ldrb.w	r8, [r7, r8]
 801a202:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801a204:	fb1b fb07 	smulbb	fp, fp, r7
 801a208:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801a20a:	fb08 b807 	mla	r8, r8, r7, fp
 801a20e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801a210:	fa1f f888 	uxth.w	r8, r8
 801a214:	f108 0b01 	add.w	fp, r8, #1
 801a218:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801a21c:	f81e bc02 	ldrb.w	fp, [lr, #-2]
 801a220:	fb1b fb07 	smulbb	fp, fp, r7
 801a224:	ea4f 2828 	mov.w	r8, r8, asr #8
 801a228:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801a22a:	f80e 8c03 	strb.w	r8, [lr, #-3]
 801a22e:	f899 8001 	ldrb.w	r8, [r9, #1]
 801a232:	fb08 b807 	mla	r8, r8, r7, fp
 801a236:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801a238:	fa1f f888 	uxth.w	r8, r8
 801a23c:	f108 0b01 	add.w	fp, r8, #1
 801a240:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801a244:	ea4f 2828 	mov.w	r8, r8, asr #8
 801a248:	f80e 8c02 	strb.w	r8, [lr, #-2]
 801a24c:	f899 8002 	ldrb.w	r8, [r9, #2]
 801a250:	f81e 9c01 	ldrb.w	r9, [lr, #-1]
 801a254:	fb19 f907 	smulbb	r9, r9, r7
 801a258:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801a25a:	fb08 9807 	mla	r8, r8, r7, r9
 801a25e:	fa1f f888 	uxth.w	r8, r8
 801a262:	f108 0901 	add.w	r9, r8, #1
 801a266:	eb09 2818 	add.w	r8, r9, r8, lsr #8
 801a26a:	f8bd 904c 	ldrh.w	r9, [sp, #76]	; 0x4c
 801a26e:	ea4f 2828 	mov.w	r8, r8, asr #8
 801a272:	f80e 8c01 	strb.w	r8, [lr, #-1]
 801a276:	e7b1      	b.n	801a1dc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x310>
 801a278:	f109 0b01 	add.w	fp, r9, #1
 801a27c:	44a1      	add	r9, r4
 801a27e:	9f05      	ldr	r7, [sp, #20]
 801a280:	f899 8804 	ldrb.w	r8, [r9, #2052]	; 0x804
 801a284:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801a288:	eb07 0908 	add.w	r9, r7, r8
 801a28c:	f817 8008 	ldrb.w	r8, [r7, r8]
 801a290:	f80e 8c03 	strb.w	r8, [lr, #-3]
 801a294:	f899 8001 	ldrb.w	r8, [r9, #1]
 801a298:	f80e 8c02 	strb.w	r8, [lr, #-2]
 801a29c:	f899 8002 	ldrb.w	r8, [r9, #2]
 801a2a0:	fa1f f98b 	uxth.w	r9, fp
 801a2a4:	f80e 8c01 	strb.w	r8, [lr, #-1]
 801a2a8:	e767      	b.n	801a17a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2ae>
 801a2aa:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801a2ae:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 801a2b2:	eba8 0801 	sub.w	r8, r8, r1
 801a2b6:	fa1f f888 	uxth.w	r8, r8
 801a2ba:	f1b8 0f00 	cmp.w	r8, #0
 801a2be:	bf18      	it	ne
 801a2c0:	2100      	movne	r1, #0
 801a2c2:	e741      	b.n	801a148 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27c>
 801a2c4:	4b03      	ldr	r3, [pc, #12]	; (801a2d4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x408>)
 801a2c6:	6818      	ldr	r0, [r3, #0]
 801a2c8:	6803      	ldr	r3, [r0, #0]
 801a2ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a2cc:	4798      	blx	r3
 801a2ce:	b01b      	add	sp, #108	; 0x6c
 801a2d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a2d4:	240069a4 	.word	0x240069a4

0801a2d8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 801a2d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a2dc:	b09d      	sub	sp, #116	; 0x74
 801a2de:	461d      	mov	r5, r3
 801a2e0:	4604      	mov	r4, r0
 801a2e2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801a2e4:	e9cd 120f 	strd	r1, r2, [sp, #60]	; 0x3c
 801a2e8:	f89d 209c 	ldrb.w	r2, [sp, #156]	; 0x9c
 801a2ec:	920c      	str	r2, [sp, #48]	; 0x30
 801a2ee:	2a00      	cmp	r2, #0
 801a2f0:	f000 81de 	beq.w	801a6b0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3d8>
 801a2f4:	6828      	ldr	r0, [r5, #0]
 801a2f6:	aa18      	add	r2, sp, #96	; 0x60
 801a2f8:	6869      	ldr	r1, [r5, #4]
 801a2fa:	c203      	stmia	r2!, {r0, r1}
 801a2fc:	6818      	ldr	r0, [r3, #0]
 801a2fe:	aa1a      	add	r2, sp, #104	; 0x68
 801a300:	6859      	ldr	r1, [r3, #4]
 801a302:	c203      	stmia	r2!, {r0, r1}
 801a304:	a818      	add	r0, sp, #96	; 0x60
 801a306:	f7fa fc0b 	bl	8014b20 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a30a:	4629      	mov	r1, r5
 801a30c:	a81a      	add	r0, sp, #104	; 0x68
 801a30e:	f7fa fc2f 	bl	8014b70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a312:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	; 0x64
 801a316:	f9bd 7066 	ldrsh.w	r7, [sp, #102]	; 0x66
 801a31a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801a31e:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	; 0x6e
 801a322:	bfdb      	ittet	le
 801a324:	b29a      	uxthle	r2, r3
 801a326:	f44f 6180 	movle.w	r1, #1024	; 0x400
 801a32a:	2201      	movgt	r2, #1
 801a32c:	fb91 f2f2 	sdivle	r2, r1, r2
 801a330:	9201      	str	r2, [sp, #4]
 801a332:	9801      	ldr	r0, [sp, #4]
 801a334:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	; 0x6a
 801a338:	9901      	ldr	r1, [sp, #4]
 801a33a:	fb92 f0f0 	sdiv	r0, r2, r0
 801a33e:	b280      	uxth	r0, r0
 801a340:	440f      	add	r7, r1
 801a342:	900d      	str	r0, [sp, #52]	; 0x34
 801a344:	3f01      	subs	r7, #1
 801a346:	9801      	ldr	r0, [sp, #4]
 801a348:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801a34a:	fb05 2510 	mls	r5, r5, r0, r2
 801a34e:	fb97 f7f1 	sdiv	r7, r7, r1
 801a352:	fb15 f503 	smulbb	r5, r5, r3
 801a356:	f8bd 1068 	ldrh.w	r1, [sp, #104]	; 0x68
 801a35a:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 801a35e:	3701      	adds	r7, #1
 801a360:	440d      	add	r5, r1
 801a362:	4419      	add	r1, r3
 801a364:	f8bd 3062 	ldrh.w	r3, [sp, #98]	; 0x62
 801a368:	b2bf      	uxth	r7, r7
 801a36a:	441a      	add	r2, r3
 801a36c:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
 801a370:	f8ad 1068 	strh.w	r1, [sp, #104]	; 0x68
 801a374:	00bf      	lsls	r7, r7, #2
 801a376:	9304      	str	r3, [sp, #16]
 801a378:	b2ad      	uxth	r5, r5
 801a37a:	4bb0      	ldr	r3, [pc, #704]	; (801a63c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x364>)
 801a37c:	f8ad 206a 	strh.w	r2, [sp, #106]	; 0x6a
 801a380:	6818      	ldr	r0, [r3, #0]
 801a382:	6803      	ldr	r3, [r0, #0]
 801a384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a386:	4798      	blx	r3
 801a388:	4bad      	ldr	r3, [pc, #692]	; (801a640 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x368>)
 801a38a:	f9bd 106a 	ldrsh.w	r1, [sp, #106]	; 0x6a
 801a38e:	2d00      	cmp	r5, #0
 801a390:	881a      	ldrh	r2, [r3, #0]
 801a392:	f9bd c068 	ldrsh.w	ip, [sp, #104]	; 0x68
 801a396:	fb02 f606 	mul.w	r6, r2, r6
 801a39a:	fb02 c101 	mla	r1, r2, r1, ip
 801a39e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801a3a2:	9316      	str	r3, [sp, #88]	; 0x58
 801a3a4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801a3a8:	4ba6      	ldr	r3, [pc, #664]	; (801a644 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x36c>)
 801a3aa:	eb00 0801 	add.w	r8, r0, r1
 801a3ae:	bf18      	it	ne
 801a3b0:	2100      	movne	r1, #0
 801a3b2:	eba3 0304 	sub.w	r3, r3, r4
 801a3b6:	eb08 0206 	add.w	r2, r8, r6
 801a3ba:	9317      	str	r3, [sp, #92]	; 0x5c
 801a3bc:	9208      	str	r2, [sp, #32]
 801a3be:	f107 0204 	add.w	r2, r7, #4
 801a3c2:	9211      	str	r2, [sp, #68]	; 0x44
 801a3c4:	9a04      	ldr	r2, [sp, #16]
 801a3c6:	bf08      	it	eq
 801a3c8:	4611      	moveq	r1, r2
 801a3ca:	2200      	movs	r2, #0
 801a3cc:	b289      	uxth	r1, r1
 801a3ce:	920b      	str	r2, [sp, #44]	; 0x2c
 801a3d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a3d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a3d4:	fa12 f383 	uxtah	r3, r2, r3
 801a3d8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a3da:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801a3de:	3304      	adds	r3, #4
 801a3e0:	9306      	str	r3, [sp, #24]
 801a3e2:	9b08      	ldr	r3, [sp, #32]
 801a3e4:	4543      	cmp	r3, r8
 801a3e6:	f240 815e 	bls.w	801a6a6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3ce>
 801a3ea:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 801a3ee:	f04f 0b01 	mov.w	fp, #1
 801a3f2:	9a01      	ldr	r2, [sp, #4]
 801a3f4:	9806      	ldr	r0, [sp, #24]
 801a3f6:	465e      	mov	r6, fp
 801a3f8:	f8cd b008 	str.w	fp, [sp, #8]
 801a3fc:	7800      	ldrb	r0, [r0, #0]
 801a3fe:	fbb5 f3f3 	udiv	r3, r5, r3
 801a402:	1ad3      	subs	r3, r2, r3
 801a404:	900e      	str	r0, [sp, #56]	; 0x38
 801a406:	3001      	adds	r0, #1
 801a408:	b29b      	uxth	r3, r3
 801a40a:	9005      	str	r0, [sp, #20]
 801a40c:	9312      	str	r3, [sp, #72]	; 0x48
 801a40e:	9b06      	ldr	r3, [sp, #24]
 801a410:	785a      	ldrb	r2, [r3, #1]
 801a412:	789b      	ldrb	r3, [r3, #2]
 801a414:	021b      	lsls	r3, r3, #8
 801a416:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a41a:	9a06      	ldr	r2, [sp, #24]
 801a41c:	78d2      	ldrb	r2, [r2, #3]
 801a41e:	4313      	orrs	r3, r2
 801a420:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a422:	441a      	add	r2, r3
 801a424:	1c50      	adds	r0, r2, #1
 801a426:	7852      	ldrb	r2, [r2, #1]
 801a428:	9003      	str	r0, [sp, #12]
 801a42a:	0212      	lsls	r2, r2, #8
 801a42c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801a42e:	f402 72ff 	and.w	r2, r2, #510	; 0x1fe
 801a432:	5cc3      	ldrb	r3, [r0, r3]
 801a434:	431a      	orrs	r2, r3
 801a436:	b293      	uxth	r3, r2
 801a438:	f884 2804 	strb.w	r2, [r4, #2052]	; 0x804
 801a43c:	930a      	str	r3, [sp, #40]	; 0x28
 801a43e:	2300      	movs	r3, #0
 801a440:	461a      	mov	r2, r3
 801a442:	9307      	str	r3, [sp, #28]
 801a444:	2d00      	cmp	r5, #0
 801a446:	d07c      	beq.n	801a542 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x26a>
 801a448:	42ae      	cmp	r6, r5
 801a44a:	d26c      	bcs.n	801a526 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x24e>
 801a44c:	9b08      	ldr	r3, [sp, #32]
 801a44e:	1bad      	subs	r5, r5, r6
 801a450:	4608      	mov	r0, r1
 801a452:	4543      	cmp	r3, r8
 801a454:	b2ad      	uxth	r5, r5
 801a456:	d802      	bhi.n	801a45e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x186>
 801a458:	e071      	b.n	801a53e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x266>
 801a45a:	2b00      	cmp	r3, #0
 801a45c:	d15d      	bne.n	801a51a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x242>
 801a45e:	9b03      	ldr	r3, [sp, #12]
 801a460:	9a02      	ldr	r2, [sp, #8]
 801a462:	785b      	ldrb	r3, [r3, #1]
 801a464:	f1c2 0207 	rsb	r2, r2, #7
 801a468:	9902      	ldr	r1, [sp, #8]
 801a46a:	4093      	lsls	r3, r2
 801a46c:	005b      	lsls	r3, r3, #1
 801a46e:	f403 72ff 	and.w	r2, r3, #510	; 0x1fe
 801a472:	9b03      	ldr	r3, [sp, #12]
 801a474:	781b      	ldrb	r3, [r3, #0]
 801a476:	410b      	asrs	r3, r1
 801a478:	3101      	adds	r1, #1
 801a47a:	b2c9      	uxtb	r1, r1
 801a47c:	b2db      	uxtb	r3, r3
 801a47e:	2908      	cmp	r1, #8
 801a480:	9102      	str	r1, [sp, #8]
 801a482:	9903      	ldr	r1, [sp, #12]
 801a484:	ea43 0302 	orr.w	r3, r3, r2
 801a488:	bf0c      	ite	eq
 801a48a:	3102      	addeq	r1, #2
 801a48c:	3101      	addne	r1, #1
 801a48e:	b29a      	uxth	r2, r3
 801a490:	bf05      	ittet	eq
 801a492:	9103      	streq	r1, [sp, #12]
 801a494:	2100      	moveq	r1, #0
 801a496:	9103      	strne	r1, [sp, #12]
 801a498:	9102      	streq	r1, [sp, #8]
 801a49a:	990e      	ldr	r1, [sp, #56]	; 0x38
 801a49c:	4291      	cmp	r1, r2
 801a49e:	d30a      	bcc.n	801a4b6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1de>
 801a4a0:	f884 3804 	strb.w	r3, [r4, #2052]	; 0x804
 801a4a4:	2301      	movs	r3, #1
 801a4a6:	9905      	ldr	r1, [sp, #20]
 801a4a8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801a4ac:	d30f      	bcc.n	801a4ce <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1f6>
 801a4ae:	469b      	mov	fp, r3
 801a4b0:	f04f 0c00 	mov.w	ip, #0
 801a4b4:	e032      	b.n	801a51c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x244>
 801a4b6:	9b05      	ldr	r3, [sp, #20]
 801a4b8:	429a      	cmp	r2, r3
 801a4ba:	d318      	bcc.n	801a4ee <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x216>
 801a4bc:	eb04 030b 	add.w	r3, r4, fp
 801a4c0:	f894 1804 	ldrb.w	r1, [r4, #2052]	; 0x804
 801a4c4:	f883 1804 	strb.w	r1, [r3, #2052]	; 0x804
 801a4c8:	f10b 0301 	add.w	r3, fp, #1
 801a4cc:	b29b      	uxth	r3, r3
 801a4ce:	9905      	ldr	r1, [sp, #20]
 801a4d0:	f894 6804 	ldrb.w	r6, [r4, #2052]	; 0x804
 801a4d4:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801a4d8:	710e      	strb	r6, [r1, #4]
 801a4da:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801a4dc:	80ce      	strh	r6, [r1, #6]
 801a4de:	f10b 0601 	add.w	r6, fp, #1
 801a4e2:	714e      	strb	r6, [r1, #5]
 801a4e4:	9905      	ldr	r1, [sp, #20]
 801a4e6:	3101      	adds	r1, #1
 801a4e8:	b289      	uxth	r1, r1
 801a4ea:	9105      	str	r1, [sp, #20]
 801a4ec:	e7df      	b.n	801a4ae <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d6>
 801a4ee:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801a4f2:	4611      	mov	r1, r2
 801a4f4:	795b      	ldrb	r3, [r3, #5]
 801a4f6:	f603 0604 	addw	r6, r3, #2052	; 0x804
 801a4fa:	4426      	add	r6, r4
 801a4fc:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 801a4fe:	4437      	add	r7, r6
 801a500:	2f00      	cmp	r7, #0
 801a502:	dd06      	ble.n	801a512 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x23a>
 801a504:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801a508:	790f      	ldrb	r7, [r1, #4]
 801a50a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801a50e:	88c9      	ldrh	r1, [r1, #6]
 801a510:	e7f4      	b.n	801a4fc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x224>
 801a512:	f884 1804 	strb.w	r1, [r4, #2052]	; 0x804
 801a516:	b29b      	uxth	r3, r3
 801a518:	e7c5      	b.n	801a4a6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1ce>
 801a51a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a51c:	920a      	str	r2, [sp, #40]	; 0x28
 801a51e:	4601      	mov	r1, r0
 801a520:	4662      	mov	r2, ip
 801a522:	461e      	mov	r6, r3
 801a524:	e78e      	b.n	801a444 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x16c>
 801a526:	1b73      	subs	r3, r6, r5
 801a528:	eb02 0c05 	add.w	ip, r2, r5
 801a52c:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 801a530:	b29b      	uxth	r3, r3
 801a532:	fa1f fc8c 	uxth.w	ip, ip
 801a536:	2500      	movs	r5, #0
 801a538:	9a08      	ldr	r2, [sp, #32]
 801a53a:	4542      	cmp	r2, r8
 801a53c:	d88d      	bhi.n	801a45a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x182>
 801a53e:	4601      	mov	r1, r0
 801a540:	e74f      	b.n	801a3e2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10a>
 801a542:	428e      	cmp	r6, r1
 801a544:	bf2b      	itete	cs
 801a546:	468e      	movcs	lr, r1
 801a548:	46b6      	movcc	lr, r6
 801a54a:	1a73      	subcs	r3, r6, r1
 801a54c:	1b88      	subcc	r0, r1, r6
 801a54e:	eb02 0c0e 	add.w	ip, r2, lr
 801a552:	bf2b      	itete	cs
 801a554:	4628      	movcs	r0, r5
 801a556:	462b      	movcc	r3, r5
 801a558:	b29b      	uxthcs	r3, r3
 801a55a:	b280      	uxthcc	r0, r0
 801a55c:	f108 0503 	add.w	r5, r8, #3
 801a560:	fa1f fc8c 	uxth.w	ip, ip
 801a564:	4562      	cmp	r2, ip
 801a566:	d06f      	beq.n	801a648 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x370>
 801a568:	1c57      	adds	r7, r2, #1
 801a56a:	4422      	add	r2, r4
 801a56c:	b2bf      	uxth	r7, r7
 801a56e:	f892 2804 	ldrb.w	r2, [r2, #2052]	; 0x804
 801a572:	9713      	str	r7, [sp, #76]	; 0x4c
 801a574:	2704      	movs	r7, #4
 801a576:	46b9      	mov	r9, r7
 801a578:	9f11      	ldr	r7, [sp, #68]	; 0x44
 801a57a:	fb19 7202 	smlabb	r2, r9, r2, r7
 801a57e:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801a580:	58bf      	ldr	r7, [r7, r2]
 801a582:	0e3a      	lsrs	r2, r7, #24
 801a584:	9209      	str	r2, [sp, #36]	; 0x24
 801a586:	d016      	beq.n	801a5b6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2de>
 801a588:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801a58c:	fa5f fa87 	uxtb.w	sl, r7
 801a590:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801a594:	fa5f f289 	uxtb.w	r2, r9
 801a598:	9214      	str	r2, [sp, #80]	; 0x50
 801a59a:	b2fa      	uxtb	r2, r7
 801a59c:	9215      	str	r2, [sp, #84]	; 0x54
 801a59e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a5a0:	2aff      	cmp	r2, #255	; 0xff
 801a5a2:	d10b      	bne.n	801a5bc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2e4>
 801a5a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a5a6:	2aff      	cmp	r2, #255	; 0xff
 801a5a8:	d108      	bne.n	801a5bc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2e4>
 801a5aa:	f805 ac03 	strb.w	sl, [r5, #-3]
 801a5ae:	f805 9c02 	strb.w	r9, [r5, #-2]
 801a5b2:	f805 7c01 	strb.w	r7, [r5, #-1]
 801a5b6:	3503      	adds	r5, #3
 801a5b8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801a5ba:	e7d3      	b.n	801a564 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x28c>
 801a5bc:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801a5be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a5c0:	437a      	muls	r2, r7
 801a5c2:	1c57      	adds	r7, r2, #1
 801a5c4:	eb07 2222 	add.w	r2, r7, r2, asr #8
 801a5c8:	f815 7c03 	ldrb.w	r7, [r5, #-3]
 801a5cc:	1212      	asrs	r2, r2, #8
 801a5ce:	fa1f f982 	uxth.w	r9, r2
 801a5d2:	43d2      	mvns	r2, r2
 801a5d4:	fb1a fa09 	smulbb	sl, sl, r9
 801a5d8:	b2d2      	uxtb	r2, r2
 801a5da:	fb07 a702 	mla	r7, r7, r2, sl
 801a5de:	9209      	str	r2, [sp, #36]	; 0x24
 801a5e0:	b2bf      	uxth	r7, r7
 801a5e2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a5e4:	f107 0a01 	add.w	sl, r7, #1
 801a5e8:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801a5ec:	fb12 fa09 	smulbb	sl, r2, r9
 801a5f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a5f2:	123f      	asrs	r7, r7, #8
 801a5f4:	f805 7c03 	strb.w	r7, [r5, #-3]
 801a5f8:	f815 7c02 	ldrb.w	r7, [r5, #-2]
 801a5fc:	fb07 aa02 	mla	sl, r7, r2, sl
 801a600:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801a602:	fb12 f909 	smulbb	r9, r2, r9
 801a606:	fa1f fa8a 	uxth.w	sl, sl
 801a60a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a60c:	f10a 0701 	add.w	r7, sl, #1
 801a610:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801a614:	f815 7c01 	ldrb.w	r7, [r5, #-1]
 801a618:	fb07 9902 	mla	r9, r7, r2, r9
 801a61c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801a620:	fa1f f989 	uxth.w	r9, r9
 801a624:	f805 ac02 	strb.w	sl, [r5, #-2]
 801a628:	f109 0201 	add.w	r2, r9, #1
 801a62c:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801a630:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a634:	f805 9c01 	strb.w	r9, [r5, #-1]
 801a638:	e7bd      	b.n	801a5b6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2de>
 801a63a:	bf00      	nop
 801a63c:	240069a4 	.word	0x240069a4
 801a640:	2400699e 	.word	0x2400699e
 801a644:	fffff7fb 	.word	0xfffff7fb
 801a648:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801a64c:	428e      	cmp	r6, r1
 801a64e:	44f0      	add	r8, lr
 801a650:	f4ff af71 	bcc.w	801a536 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x25e>
 801a654:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801a656:	9904      	ldr	r1, [sp, #16]
 801a658:	8812      	ldrh	r2, [r2, #0]
 801a65a:	1a52      	subs	r2, r2, r1
 801a65c:	9912      	ldr	r1, [sp, #72]	; 0x48
 801a65e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801a662:	4490      	add	r8, r2
 801a664:	9a07      	ldr	r2, [sp, #28]
 801a666:	3201      	adds	r2, #1
 801a668:	428a      	cmp	r2, r1
 801a66a:	9207      	str	r2, [sp, #28]
 801a66c:	d111      	bne.n	801a692 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3ba>
 801a66e:	f8bd 5068 	ldrh.w	r5, [sp, #104]	; 0x68
 801a672:	f8bd c060 	ldrh.w	ip, [sp, #96]	; 0x60
 801a676:	9b04      	ldr	r3, [sp, #16]
 801a678:	eba5 050c 	sub.w	r5, r5, ip
 801a67c:	b2ad      	uxth	r5, r5
 801a67e:	2d00      	cmp	r5, #0
 801a680:	bf08      	it	eq
 801a682:	4619      	moveq	r1, r3
 801a684:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a686:	bf18      	it	ne
 801a688:	2100      	movne	r1, #0
 801a68a:	3301      	adds	r3, #1
 801a68c:	b289      	uxth	r1, r1
 801a68e:	930b      	str	r3, [sp, #44]	; 0x2c
 801a690:	e69e      	b.n	801a3d0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xf8>
 801a692:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 801a696:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 801a69a:	1a2d      	subs	r5, r5, r0
 801a69c:	b2ad      	uxth	r5, r5
 801a69e:	2d00      	cmp	r5, #0
 801a6a0:	bf18      	it	ne
 801a6a2:	2000      	movne	r0, #0
 801a6a4:	e748      	b.n	801a538 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x260>
 801a6a6:	4b04      	ldr	r3, [pc, #16]	; (801a6b8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3e0>)
 801a6a8:	6818      	ldr	r0, [r3, #0]
 801a6aa:	6803      	ldr	r3, [r0, #0]
 801a6ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a6ae:	4798      	blx	r3
 801a6b0:	b01d      	add	sp, #116	; 0x74
 801a6b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a6b6:	bf00      	nop
 801a6b8:	240069a4 	.word	0x240069a4

0801a6bc <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 801a6bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a6c0:	f89d 001c 	ldrb.w	r0, [sp, #28]
 801a6c4:	9c06      	ldr	r4, [sp, #24]
 801a6c6:	2800      	cmp	r0, #0
 801a6c8:	d06e      	beq.n	801a7a8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801a6ca:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 801a6ce:	2d00      	cmp	r5, #0
 801a6d0:	dd6a      	ble.n	801a7a8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801a6d2:	f9b3 c006 	ldrsh.w	ip, [r3, #6]
 801a6d6:	f1bc 0f00 	cmp.w	ip, #0
 801a6da:	dd65      	ble.n	801a7a8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801a6dc:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 801a6e0:	28ff      	cmp	r0, #255	; 0xff
 801a6e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a6e6:	f3c4 2707 	ubfx	r7, r4, #8, #8
 801a6ea:	fb02 3306 	mla	r3, r2, r6, r3
 801a6ee:	f3c4 4607 	ubfx	r6, r4, #16, #8
 801a6f2:	b2e4      	uxtb	r4, r4
 801a6f4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a6f8:	4419      	add	r1, r3
 801a6fa:	fb02 f30c 	mul.w	r3, r2, ip
 801a6fe:	eba2 0205 	sub.w	r2, r2, r5
 801a702:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a706:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a70a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801a70e:	440b      	add	r3, r1
 801a710:	d03e      	beq.n	801a790 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd4>
 801a712:	fa1f fc80 	uxth.w	ip, r0
 801a716:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 801a71a:	fb06 f60c 	mul.w	r6, r6, ip
 801a71e:	b280      	uxth	r0, r0
 801a720:	fb07 f70c 	mul.w	r7, r7, ip
 801a724:	fb04 f40c 	mul.w	r4, r4, ip
 801a728:	4299      	cmp	r1, r3
 801a72a:	d23d      	bcs.n	801a7a8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801a72c:	eb01 0c05 	add.w	ip, r1, r5
 801a730:	458c      	cmp	ip, r1
 801a732:	f101 0e03 	add.w	lr, r1, #3
 801a736:	d928      	bls.n	801a78a <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xce>
 801a738:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 801a73c:	fb11 f100 	smulbb	r1, r1, r0
 801a740:	4421      	add	r1, r4
 801a742:	b289      	uxth	r1, r1
 801a744:	f101 0801 	add.w	r8, r1, #1
 801a748:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801a74c:	1209      	asrs	r1, r1, #8
 801a74e:	f80e 1c03 	strb.w	r1, [lr, #-3]
 801a752:	f81e 1c02 	ldrb.w	r1, [lr, #-2]
 801a756:	fb11 f100 	smulbb	r1, r1, r0
 801a75a:	4439      	add	r1, r7
 801a75c:	b289      	uxth	r1, r1
 801a75e:	f101 0801 	add.w	r8, r1, #1
 801a762:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801a766:	1209      	asrs	r1, r1, #8
 801a768:	f80e 1c02 	strb.w	r1, [lr, #-2]
 801a76c:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 801a770:	fb11 f100 	smulbb	r1, r1, r0
 801a774:	4431      	add	r1, r6
 801a776:	b289      	uxth	r1, r1
 801a778:	f101 0801 	add.w	r8, r1, #1
 801a77c:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801a780:	1209      	asrs	r1, r1, #8
 801a782:	f80e 1c01 	strb.w	r1, [lr, #-1]
 801a786:	4671      	mov	r1, lr
 801a788:	e7d2      	b.n	801a730 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x74>
 801a78a:	4411      	add	r1, r2
 801a78c:	e7cc      	b.n	801a728 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6c>
 801a78e:	4411      	add	r1, r2
 801a790:	4299      	cmp	r1, r3
 801a792:	d209      	bcs.n	801a7a8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801a794:	1948      	adds	r0, r1, r5
 801a796:	4281      	cmp	r1, r0
 801a798:	d2f9      	bcs.n	801a78e <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd2>
 801a79a:	700c      	strb	r4, [r1, #0]
 801a79c:	3103      	adds	r1, #3
 801a79e:	f801 7c02 	strb.w	r7, [r1, #-2]
 801a7a2:	f801 6c01 	strb.w	r6, [r1, #-1]
 801a7a6:	e7f6      	b.n	801a796 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xda>
 801a7a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a7ac <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 801a7ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a7b0:	b093      	sub	sp, #76	; 0x4c
 801a7b2:	4699      	mov	r9, r3
 801a7b4:	4617      	mov	r7, r2
 801a7b6:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a7ba:	f9bd 8074 	ldrsh.w	r8, [sp, #116]	; 0x74
 801a7be:	4604      	mov	r4, r0
 801a7c0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a7c4:	a80c      	add	r0, sp, #48	; 0x30
 801a7c6:	f9bd 6078 	ldrsh.w	r6, [sp, #120]	; 0x78
 801a7ca:	460d      	mov	r5, r1
 801a7cc:	4649      	mov	r1, r9
 801a7ce:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 801a7d2:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801a7d6:	f8ad 8034 	strh.w	r8, [sp, #52]	; 0x34
 801a7da:	f8ad 6036 	strh.w	r6, [sp, #54]	; 0x36
 801a7de:	f7f7 fa4b 	bl	8011c78 <_ZN8touchgfx4RectaNERKS0_>
 801a7e2:	4639      	mov	r1, r7
 801a7e4:	a80c      	add	r0, sp, #48	; 0x30
 801a7e6:	f7f7 fa47 	bl	8011c78 <_ZN8touchgfx4RectaNERKS0_>
 801a7ea:	4b78      	ldr	r3, [pc, #480]	; (801a9cc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 801a7ec:	8818      	ldrh	r0, [r3, #0]
 801a7ee:	4b78      	ldr	r3, [pc, #480]	; (801a9d0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>)
 801a7f0:	b202      	sxth	r2, r0
 801a7f2:	8819      	ldrh	r1, [r3, #0]
 801a7f4:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 801a7f8:	b20f      	sxth	r7, r1
 801a7fa:	2b00      	cmp	r3, #0
 801a7fc:	da07      	bge.n	801a80e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x62>
 801a7fe:	f8bd c034 	ldrh.w	ip, [sp, #52]	; 0x34
 801a802:	4463      	add	r3, ip
 801a804:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 801a808:	2300      	movs	r3, #0
 801a80a:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 801a80e:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 801a812:	f9bd c034 	ldrsh.w	ip, [sp, #52]	; 0x34
 801a816:	1ad2      	subs	r2, r2, r3
 801a818:	4594      	cmp	ip, r2
 801a81a:	bfc4      	itt	gt
 801a81c:	1ac2      	subgt	r2, r0, r3
 801a81e:	f8ad 2034 	strhgt.w	r2, [sp, #52]	; 0x34
 801a822:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 801a826:	2a00      	cmp	r2, #0
 801a828:	da07      	bge.n	801a83a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x8e>
 801a82a:	f8bd c036 	ldrh.w	ip, [sp, #54]	; 0x36
 801a82e:	4462      	add	r2, ip
 801a830:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
 801a834:	2200      	movs	r2, #0
 801a836:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 801a83a:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 801a83e:	f9bd c036 	ldrsh.w	ip, [sp, #54]	; 0x36
 801a842:	1abf      	subs	r7, r7, r2
 801a844:	45bc      	cmp	ip, r7
 801a846:	f8df c190 	ldr.w	ip, [pc, #400]	; 801a9d8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x22c>
 801a84a:	bfc8      	it	gt
 801a84c:	1a8f      	subgt	r7, r1, r2
 801a84e:	f89c c000 	ldrb.w	ip, [ip]
 801a852:	bfc8      	it	gt
 801a854:	f8ad 7036 	strhgt.w	r7, [sp, #54]	; 0x36
 801a858:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 801a85c:	f1bc 0f00 	cmp.w	ip, #0
 801a860:	d176      	bne.n	801a950 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a4>
 801a862:	4287      	cmp	r7, r0
 801a864:	bf14      	ite	ne
 801a866:	2100      	movne	r1, #0
 801a868:	2101      	moveq	r1, #1
 801a86a:	2f00      	cmp	r7, #0
 801a86c:	9107      	str	r1, [sp, #28]
 801a86e:	dd73      	ble.n	801a958 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 801a870:	f9bd 1036 	ldrsh.w	r1, [sp, #54]	; 0x36
 801a874:	2900      	cmp	r1, #0
 801a876:	9104      	str	r1, [sp, #16]
 801a878:	dd6e      	ble.n	801a958 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 801a87a:	f8b9 1000 	ldrh.w	r1, [r9]
 801a87e:	a80e      	add	r0, sp, #56	; 0x38
 801a880:	f8ad 8044 	strh.w	r8, [sp, #68]	; 0x44
 801a884:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 801a888:	1a5b      	subs	r3, r3, r1
 801a88a:	a910      	add	r1, sp, #64	; 0x40
 801a88c:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 801a890:	b21b      	sxth	r3, r3
 801a892:	f8ad 703c 	strh.w	r7, [sp, #60]	; 0x3c
 801a896:	f8df a144 	ldr.w	sl, [pc, #324]	; 801a9dc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 801a89a:	9305      	str	r3, [sp, #20]
 801a89c:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 801a8a0:	1ad2      	subs	r2, r2, r3
 801a8a2:	b213      	sxth	r3, r2
 801a8a4:	9306      	str	r3, [sp, #24]
 801a8a6:	9b05      	ldr	r3, [sp, #20]
 801a8a8:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 801a8ac:	9b06      	ldr	r3, [sp, #24]
 801a8ae:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801a8b2:	9b04      	ldr	r3, [sp, #16]
 801a8b4:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801a8b8:	2300      	movs	r3, #0
 801a8ba:	9310      	str	r3, [sp, #64]	; 0x40
 801a8bc:	f7fa f958 	bl	8014b70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a8c0:	4640      	mov	r0, r8
 801a8c2:	f7fa f92d 	bl	8014b20 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a8c6:	a810      	add	r0, sp, #64	; 0x40
 801a8c8:	f7fa f92a 	bl	8014b20 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a8cc:	4b41      	ldr	r3, [pc, #260]	; (801a9d4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x228>)
 801a8ce:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 801a8d2:	4628      	mov	r0, r5
 801a8d4:	881b      	ldrh	r3, [r3, #0]
 801a8d6:	9308      	str	r3, [sp, #32]
 801a8d8:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801a8dc:	b21b      	sxth	r3, r3
 801a8de:	9303      	str	r3, [sp, #12]
 801a8e0:	682b      	ldr	r3, [r5, #0]
 801a8e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a8e4:	4798      	blx	r3
 801a8e6:	9a03      	ldr	r2, [sp, #12]
 801a8e8:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 801a8ec:	4681      	mov	r9, r0
 801a8ee:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 801a8f2:	fb13 f302 	smulbb	r3, r3, r2
 801a8f6:	2203      	movs	r2, #3
 801a8f8:	f8da 0000 	ldr.w	r0, [sl]
 801a8fc:	fb15 3302 	smlabb	r3, r5, r2, r3
 801a900:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 801a902:	920b      	str	r2, [sp, #44]	; 0x2c
 801a904:	441d      	add	r5, r3
 801a906:	6803      	ldr	r3, [r0, #0]
 801a908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a90a:	4798      	blx	r3
 801a90c:	9009      	str	r0, [sp, #36]	; 0x24
 801a90e:	f8da 0000 	ldr.w	r0, [sl]
 801a912:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801a916:	6803      	ldr	r3, [r0, #0]
 801a918:	910a      	str	r1, [sp, #40]	; 0x28
 801a91a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a91c:	f9bd 6032 	ldrsh.w	r6, [sp, #50]	; 0x32
 801a920:	4798      	blx	r3
 801a922:	f010 0f01 	tst.w	r0, #1
 801a926:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 801a92a:	d01e      	beq.n	801a96a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1be>
 801a92c:	f8da 0000 	ldr.w	r0, [sl]
 801a930:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 801a934:	6803      	ldr	r3, [r0, #0]
 801a936:	9200      	str	r2, [sp, #0]
 801a938:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 801a93a:	462b      	mov	r3, r5
 801a93c:	e898 0006 	ldmia.w	r8, {r1, r2}
 801a940:	47b0      	blx	r6
 801a942:	9b05      	ldr	r3, [sp, #20]
 801a944:	80a7      	strh	r7, [r4, #4]
 801a946:	8023      	strh	r3, [r4, #0]
 801a948:	9b06      	ldr	r3, [sp, #24]
 801a94a:	8063      	strh	r3, [r4, #2]
 801a94c:	9b04      	ldr	r3, [sp, #16]
 801a94e:	e007      	b.n	801a960 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b4>
 801a950:	f9bd 0036 	ldrsh.w	r0, [sp, #54]	; 0x36
 801a954:	4288      	cmp	r0, r1
 801a956:	e785      	b.n	801a864 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb8>
 801a958:	2300      	movs	r3, #0
 801a95a:	8023      	strh	r3, [r4, #0]
 801a95c:	8063      	strh	r3, [r4, #2]
 801a95e:	80a3      	strh	r3, [r4, #4]
 801a960:	4620      	mov	r0, r4
 801a962:	80e3      	strh	r3, [r4, #6]
 801a964:	b013      	add	sp, #76	; 0x4c
 801a966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a96a:	fb09 f606 	mul.w	r6, r9, r6
 801a96e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a970:	fb11 6602 	smlabb	r6, r1, r2, r6
 801a974:	9a07      	ldr	r2, [sp, #28]
 801a976:	4433      	add	r3, r6
 801a978:	461e      	mov	r6, r3
 801a97a:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 801a97e:	b16a      	cbz	r2, 801a99c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 801a980:	9a08      	ldr	r2, [sp, #32]
 801a982:	4593      	cmp	fp, r2
 801a984:	d10a      	bne.n	801a99c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 801a986:	f8da 0000 	ldr.w	r0, [sl]
 801a98a:	fb09 f303 	mul.w	r3, r9, r3
 801a98e:	4629      	mov	r1, r5
 801a990:	6802      	ldr	r2, [r0, #0]
 801a992:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 801a996:	4632      	mov	r2, r6
 801a998:	47d0      	blx	sl
 801a99a:	e7d2      	b.n	801a942 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 801a99c:	9a03      	ldr	r2, [sp, #12]
 801a99e:	f8df b03c 	ldr.w	fp, [pc, #60]	; 801a9dc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 801a9a2:	fb02 5803 	mla	r8, r2, r3, r5
 801a9a6:	4545      	cmp	r5, r8
 801a9a8:	d2cb      	bcs.n	801a942 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 801a9aa:	f8db 0000 	ldr.w	r0, [fp]
 801a9ae:	4629      	mov	r1, r5
 801a9b0:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 801a9b4:	6802      	ldr	r2, [r0, #0]
 801a9b6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a9ba:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 801a9be:	4632      	mov	r2, r6
 801a9c0:	47d0      	blx	sl
 801a9c2:	9b03      	ldr	r3, [sp, #12]
 801a9c4:	444e      	add	r6, r9
 801a9c6:	441d      	add	r5, r3
 801a9c8:	e7ed      	b.n	801a9a6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1fa>
 801a9ca:	bf00      	nop
 801a9cc:	24006998 	.word	0x24006998
 801a9d0:	2400699a 	.word	0x2400699a
 801a9d4:	2400699e 	.word	0x2400699e
 801a9d8:	2400699c 	.word	0x2400699c
 801a9dc:	240069a4 	.word	0x240069a4

0801a9e0 <_ZN8touchgfx8LCD24bppC1Ev>:
 801a9e0:	2200      	movs	r2, #0
 801a9e2:	490d      	ldr	r1, [pc, #52]	; (801aa18 <_ZN8touchgfx8LCD24bppC1Ev+0x38>)
 801a9e4:	6042      	str	r2, [r0, #4]
 801a9e6:	6001      	str	r1, [r0, #0]
 801a9e8:	6602      	str	r2, [r0, #96]	; 0x60
 801a9ea:	e9c0 2202 	strd	r2, r2, [r0, #8]
 801a9ee:	e9c0 2204 	strd	r2, r2, [r0, #16]
 801a9f2:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801a9f6:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801a9fa:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 801a9fe:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 801aa02:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 801aa06:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 801aa0a:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 801aa0e:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 801aa12:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 801aa16:	4770      	bx	lr
 801aa18:	08023780 	.word	0x08023780

0801aa1c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801aa1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aa20:	b091      	sub	sp, #68	; 0x44
 801aa22:	4607      	mov	r7, r0
 801aa24:	4688      	mov	r8, r1
 801aa26:	6810      	ldr	r0, [r2, #0]
 801aa28:	6851      	ldr	r1, [r2, #4]
 801aa2a:	ac0c      	add	r4, sp, #48	; 0x30
 801aa2c:	4616      	mov	r6, r2
 801aa2e:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 801aa32:	4d64      	ldr	r5, [pc, #400]	; (801abc4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 801aa34:	f8df a190 	ldr.w	sl, [pc, #400]	; 801abc8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 801aa38:	c403      	stmia	r4!, {r0, r1}
 801aa3a:	6818      	ldr	r0, [r3, #0]
 801aa3c:	ac0e      	add	r4, sp, #56	; 0x38
 801aa3e:	6859      	ldr	r1, [r3, #4]
 801aa40:	c403      	stmia	r4!, {r0, r1}
 801aa42:	a80c      	add	r0, sp, #48	; 0x30
 801aa44:	f7fa f86c 	bl	8014b20 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801aa48:	4631      	mov	r1, r6
 801aa4a:	a80e      	add	r0, sp, #56	; 0x38
 801aa4c:	f7fa f890 	bl	8014b70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801aa50:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801aa54:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801aa58:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801aa5c:	6828      	ldr	r0, [r5, #0]
 801aa5e:	fb11 2103 	smlabb	r1, r1, r3, r2
 801aa62:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	; 0x3c
 801aa66:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	; 0x3e
 801aa6a:	440f      	add	r7, r1
 801aa6c:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801aa70:	440a      	add	r2, r1
 801aa72:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801aa76:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801aa7a:	4413      	add	r3, r2
 801aa7c:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801aa80:	6803      	ldr	r3, [r0, #0]
 801aa82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801aa84:	4798      	blx	r3
 801aa86:	f010 0f80 	tst.w	r0, #128	; 0x80
 801aa8a:	6828      	ldr	r0, [r5, #0]
 801aa8c:	d01f      	beq.n	801aace <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb2>
 801aa8e:	2201      	movs	r2, #1
 801aa90:	2500      	movs	r5, #0
 801aa92:	6801      	ldr	r1, [r0, #0]
 801aa94:	b2a4      	uxth	r4, r4
 801aa96:	b2b6      	uxth	r6, r6
 801aa98:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801aa9c:	e9cd 2508 	strd	r2, r5, [sp, #32]
 801aaa0:	250b      	movs	r5, #11
 801aaa2:	9507      	str	r5, [sp, #28]
 801aaa4:	f8ba 5000 	ldrh.w	r5, [sl]
 801aaa8:	f8cd 9010 	str.w	r9, [sp, #16]
 801aaac:	9602      	str	r6, [sp, #8]
 801aaae:	9401      	str	r4, [sp, #4]
 801aab0:	e9cd 2505 	strd	r2, r5, [sp, #20]
 801aab4:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801aab8:	9203      	str	r2, [sp, #12]
 801aaba:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801aabe:	9200      	str	r2, [sp, #0]
 801aac0:	4642      	mov	r2, r8
 801aac2:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 801aac4:	4639      	mov	r1, r7
 801aac6:	47a0      	blx	r4
 801aac8:	b011      	add	sp, #68	; 0x44
 801aaca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aace:	6803      	ldr	r3, [r0, #0]
 801aad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801aad2:	4798      	blx	r3
 801aad4:	f8ba 5000 	ldrh.w	r5, [sl]
 801aad8:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801aadc:	f04f 0e04 	mov.w	lr, #4
 801aae0:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801aae4:	436e      	muls	r6, r5
 801aae6:	fb05 2303 	mla	r3, r5, r3, r2
 801aaea:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801aaee:	1b2d      	subs	r5, r5, r4
 801aaf0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801aaf4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801aaf8:	4418      	add	r0, r3
 801aafa:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801aafe:	1982      	adds	r2, r0, r6
 801ab00:	1b1b      	subs	r3, r3, r4
 801ab02:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ab06:	930b      	str	r3, [sp, #44]	; 0x2c
 801ab08:	4290      	cmp	r0, r2
 801ab0a:	d254      	bcs.n	801abb6 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x19a>
 801ab0c:	eb00 0a04 	add.w	sl, r0, r4
 801ab10:	4550      	cmp	r0, sl
 801ab12:	d24c      	bcs.n	801abae <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x192>
 801ab14:	f817 1b01 	ldrb.w	r1, [r7], #1
 801ab18:	fb1e e101 	smlabb	r1, lr, r1, lr
 801ab1c:	eb08 0c01 	add.w	ip, r8, r1
 801ab20:	f89c 3003 	ldrb.w	r3, [ip, #3]
 801ab24:	b173      	cbz	r3, 801ab44 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801ab26:	2bff      	cmp	r3, #255	; 0xff
 801ab28:	f818 b001 	ldrb.w	fp, [r8, r1]
 801ab2c:	d10c      	bne.n	801ab48 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801ab2e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801ab32:	d109      	bne.n	801ab48 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801ab34:	f880 b000 	strb.w	fp, [r0]
 801ab38:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801ab3c:	7043      	strb	r3, [r0, #1]
 801ab3e:	f89c 3002 	ldrb.w	r3, [ip, #2]
 801ab42:	7083      	strb	r3, [r0, #2]
 801ab44:	3003      	adds	r0, #3
 801ab46:	e7e3      	b.n	801ab10 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 801ab48:	fb09 f103 	mul.w	r1, r9, r3
 801ab4c:	1c4b      	adds	r3, r1, #1
 801ab4e:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801ab52:	7801      	ldrb	r1, [r0, #0]
 801ab54:	121b      	asrs	r3, r3, #8
 801ab56:	b29e      	uxth	r6, r3
 801ab58:	43db      	mvns	r3, r3
 801ab5a:	fb1b fb06 	smulbb	fp, fp, r6
 801ab5e:	b2db      	uxtb	r3, r3
 801ab60:	fb01 b103 	mla	r1, r1, r3, fp
 801ab64:	b289      	uxth	r1, r1
 801ab66:	f101 0b01 	add.w	fp, r1, #1
 801ab6a:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801ab6e:	f890 b001 	ldrb.w	fp, [r0, #1]
 801ab72:	fb1b fb03 	smulbb	fp, fp, r3
 801ab76:	1209      	asrs	r1, r1, #8
 801ab78:	7001      	strb	r1, [r0, #0]
 801ab7a:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801ab7e:	fb01 b106 	mla	r1, r1, r6, fp
 801ab82:	b289      	uxth	r1, r1
 801ab84:	f101 0b01 	add.w	fp, r1, #1
 801ab88:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801ab8c:	1209      	asrs	r1, r1, #8
 801ab8e:	7041      	strb	r1, [r0, #1]
 801ab90:	f89c 1002 	ldrb.w	r1, [ip, #2]
 801ab94:	f890 c002 	ldrb.w	ip, [r0, #2]
 801ab98:	fb1c f303 	smulbb	r3, ip, r3
 801ab9c:	fb01 3606 	mla	r6, r1, r6, r3
 801aba0:	b2b6      	uxth	r6, r6
 801aba2:	1c73      	adds	r3, r6, #1
 801aba4:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801aba8:	1236      	asrs	r6, r6, #8
 801abaa:	7086      	strb	r6, [r0, #2]
 801abac:	e7ca      	b.n	801ab44 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801abae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801abb0:	4428      	add	r0, r5
 801abb2:	441f      	add	r7, r3
 801abb4:	e7a8      	b.n	801ab08 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xec>
 801abb6:	4b03      	ldr	r3, [pc, #12]	; (801abc4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 801abb8:	6818      	ldr	r0, [r3, #0]
 801abba:	6803      	ldr	r3, [r0, #0]
 801abbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801abbe:	4798      	blx	r3
 801abc0:	e782      	b.n	801aac8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 801abc2:	bf00      	nop
 801abc4:	240069a4 	.word	0x240069a4
 801abc8:	2400699e 	.word	0x2400699e

0801abcc <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801abcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801abd0:	b091      	sub	sp, #68	; 0x44
 801abd2:	4680      	mov	r8, r0
 801abd4:	460e      	mov	r6, r1
 801abd6:	6810      	ldr	r0, [r2, #0]
 801abd8:	6851      	ldr	r1, [r2, #4]
 801abda:	ad0c      	add	r5, sp, #48	; 0x30
 801abdc:	4614      	mov	r4, r2
 801abde:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 801abe2:	f8df 9198 	ldr.w	r9, [pc, #408]	; 801ad7c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>
 801abe6:	f8df a198 	ldr.w	sl, [pc, #408]	; 801ad80 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 801abea:	c503      	stmia	r5!, {r0, r1}
 801abec:	6818      	ldr	r0, [r3, #0]
 801abee:	ad0e      	add	r5, sp, #56	; 0x38
 801abf0:	6859      	ldr	r1, [r3, #4]
 801abf2:	c503      	stmia	r5!, {r0, r1}
 801abf4:	a80c      	add	r0, sp, #48	; 0x30
 801abf6:	f7f9 ff93 	bl	8014b20 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801abfa:	4621      	mov	r1, r4
 801abfc:	a80e      	add	r0, sp, #56	; 0x38
 801abfe:	f7f9 ffb7 	bl	8014b70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ac02:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801ac06:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801ac0a:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801ac0e:	f8d9 0000 	ldr.w	r0, [r9]
 801ac12:	fb11 2103 	smlabb	r1, r1, r3, r2
 801ac16:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	; 0x3e
 801ac1a:	eb08 0401 	add.w	r4, r8, r1
 801ac1e:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801ac22:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 801ac26:	440a      	add	r2, r1
 801ac28:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801ac2c:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801ac30:	4413      	add	r3, r2
 801ac32:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801ac36:	6803      	ldr	r3, [r0, #0]
 801ac38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ac3a:	4798      	blx	r3
 801ac3c:	f010 0f80 	tst.w	r0, #128	; 0x80
 801ac40:	f8d9 0000 	ldr.w	r0, [r9]
 801ac44:	d022      	beq.n	801ac8c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 801ac46:	2200      	movs	r2, #0
 801ac48:	f04f 0c01 	mov.w	ip, #1
 801ac4c:	6801      	ldr	r1, [r0, #0]
 801ac4e:	b2ad      	uxth	r5, r5
 801ac50:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801ac54:	e9cd c208 	strd	ip, r2, [sp, #32]
 801ac58:	f04f 0c0b 	mov.w	ip, #11
 801ac5c:	f8cd c01c 	str.w	ip, [sp, #28]
 801ac60:	f8ba c000 	ldrh.w	ip, [sl]
 801ac64:	9704      	str	r7, [sp, #16]
 801ac66:	9502      	str	r5, [sp, #8]
 801ac68:	e9cd 2c05 	strd	r2, ip, [sp, #20]
 801ac6c:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801ac70:	9203      	str	r2, [sp, #12]
 801ac72:	fa1f f288 	uxth.w	r2, r8
 801ac76:	9201      	str	r2, [sp, #4]
 801ac78:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801ac7c:	9200      	str	r2, [sp, #0]
 801ac7e:	4632      	mov	r2, r6
 801ac80:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 801ac82:	4621      	mov	r1, r4
 801ac84:	47a8      	blx	r5
 801ac86:	b011      	add	sp, #68	; 0x44
 801ac88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ac8c:	6803      	ldr	r3, [r0, #0]
 801ac8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ac90:	4798      	blx	r3
 801ac92:	f8ba 2000 	ldrh.w	r2, [sl]
 801ac96:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801ac9a:	f04f 0e03 	mov.w	lr, #3
 801ac9e:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 801aca2:	4355      	muls	r5, r2
 801aca4:	fa1f fc87 	uxth.w	ip, r7
 801aca8:	fb02 1303 	mla	r3, r2, r3, r1
 801acac:	eba2 0208 	sub.w	r2, r2, r8
 801acb0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801acb4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801acb8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801acbc:	4418      	add	r0, r3
 801acbe:	920b      	str	r2, [sp, #44]	; 0x2c
 801acc0:	1943      	adds	r3, r0, r5
 801acc2:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801acc6:	f1c7 05ff 	rsb	r5, r7, #255	; 0xff
 801acca:	eba2 0208 	sub.w	r2, r2, r8
 801acce:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801acd2:	b2ad      	uxth	r5, r5
 801acd4:	4298      	cmp	r0, r3
 801acd6:	d24a      	bcs.n	801ad6e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a2>
 801acd8:	eb00 0908 	add.w	r9, r0, r8
 801acdc:	4621      	mov	r1, r4
 801acde:	4548      	cmp	r0, r9
 801ace0:	460c      	mov	r4, r1
 801ace2:	d240      	bcs.n	801ad66 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19a>
 801ace4:	f04f 0a04 	mov.w	sl, #4
 801ace8:	7824      	ldrb	r4, [r4, #0]
 801acea:	2fff      	cmp	r7, #255	; 0xff
 801acec:	f101 0101 	add.w	r1, r1, #1
 801acf0:	fb1e a404 	smlabb	r4, lr, r4, sl
 801acf4:	eb06 0a04 	add.w	sl, r6, r4
 801acf8:	f816 b004 	ldrb.w	fp, [r6, r4]
 801acfc:	d02b      	beq.n	801ad56 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18a>
 801acfe:	7804      	ldrb	r4, [r0, #0]
 801ad00:	fb14 f405 	smulbb	r4, r4, r5
 801ad04:	fb0b 440c 	mla	r4, fp, ip, r4
 801ad08:	b2a4      	uxth	r4, r4
 801ad0a:	f104 0b01 	add.w	fp, r4, #1
 801ad0e:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 801ad12:	f890 b001 	ldrb.w	fp, [r0, #1]
 801ad16:	fb1b fb05 	smulbb	fp, fp, r5
 801ad1a:	1224      	asrs	r4, r4, #8
 801ad1c:	7004      	strb	r4, [r0, #0]
 801ad1e:	f89a 4001 	ldrb.w	r4, [sl, #1]
 801ad22:	fb04 b40c 	mla	r4, r4, ip, fp
 801ad26:	b2a4      	uxth	r4, r4
 801ad28:	f104 0b01 	add.w	fp, r4, #1
 801ad2c:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 801ad30:	1224      	asrs	r4, r4, #8
 801ad32:	7044      	strb	r4, [r0, #1]
 801ad34:	f89a 4002 	ldrb.w	r4, [sl, #2]
 801ad38:	f890 a002 	ldrb.w	sl, [r0, #2]
 801ad3c:	fb1a fa05 	smulbb	sl, sl, r5
 801ad40:	fb04 a40c 	mla	r4, r4, ip, sl
 801ad44:	b2a4      	uxth	r4, r4
 801ad46:	f104 0a01 	add.w	sl, r4, #1
 801ad4a:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801ad4e:	1224      	asrs	r4, r4, #8
 801ad50:	7084      	strb	r4, [r0, #2]
 801ad52:	3003      	adds	r0, #3
 801ad54:	e7c3      	b.n	801acde <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x112>
 801ad56:	f880 b000 	strb.w	fp, [r0]
 801ad5a:	f89a 4001 	ldrb.w	r4, [sl, #1]
 801ad5e:	7044      	strb	r4, [r0, #1]
 801ad60:	f89a 4002 	ldrb.w	r4, [sl, #2]
 801ad64:	e7f4      	b.n	801ad50 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x184>
 801ad66:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801ad68:	4420      	add	r0, r4
 801ad6a:	188c      	adds	r4, r1, r2
 801ad6c:	e7b2      	b.n	801acd4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x108>
 801ad6e:	4b03      	ldr	r3, [pc, #12]	; (801ad7c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>)
 801ad70:	6818      	ldr	r0, [r3, #0]
 801ad72:	6803      	ldr	r3, [r0, #0]
 801ad74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ad76:	4798      	blx	r3
 801ad78:	e785      	b.n	801ac86 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xba>
 801ad7a:	bf00      	nop
 801ad7c:	240069a4 	.word	0x240069a4
 801ad80:	2400699e 	.word	0x2400699e

0801ad84 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801ad84:	b4f0      	push	{r4, r5, r6, r7}
 801ad86:	460c      	mov	r4, r1
 801ad88:	4611      	mov	r1, r2
 801ad8a:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801ad8e:	461a      	mov	r2, r3
 801ad90:	780f      	ldrb	r7, [r1, #0]
 801ad92:	9b04      	ldr	r3, [sp, #16]
 801ad94:	784e      	ldrb	r6, [r1, #1]
 801ad96:	b11f      	cbz	r7, 801ada0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1c>
 801ad98:	2f01      	cmp	r7, #1
 801ad9a:	d01d      	beq.n	801add8 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x54>
 801ad9c:	bcf0      	pop	{r4, r5, r6, r7}
 801ad9e:	4770      	bx	lr
 801ada0:	2e03      	cmp	r6, #3
 801ada2:	d8fb      	bhi.n	801ad9c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 801ada4:	e8df f006 	tbb	[pc, r6]
 801ada8:	16140702 	.word	0x16140702
 801adac:	9504      	str	r5, [sp, #16]
 801adae:	4620      	mov	r0, r4
 801adb0:	bcf0      	pop	{r4, r5, r6, r7}
 801adb2:	f7ff be33 	b.w	801aa1c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801adb6:	6d80      	ldr	r0, [r0, #88]	; 0x58
 801adb8:	2800      	cmp	r0, #0
 801adba:	d0ef      	beq.n	801ad9c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 801adbc:	6806      	ldr	r6, [r0, #0]
 801adbe:	e9cd 3504 	strd	r3, r5, [sp, #16]
 801adc2:	68f5      	ldr	r5, [r6, #12]
 801adc4:	4613      	mov	r3, r2
 801adc6:	46ac      	mov	ip, r5
 801adc8:	460a      	mov	r2, r1
 801adca:	4621      	mov	r1, r4
 801adcc:	bcf0      	pop	{r4, r5, r6, r7}
 801adce:	4760      	bx	ip
 801add0:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 801add2:	e7f1      	b.n	801adb8 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 801add4:	6e00      	ldr	r0, [r0, #96]	; 0x60
 801add6:	e7ef      	b.n	801adb8 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 801add8:	2e03      	cmp	r6, #3
 801adda:	d8df      	bhi.n	801ad9c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 801addc:	e8df f006 	tbb	[pc, r6]
 801ade0:	110f0702 	.word	0x110f0702
 801ade4:	9504      	str	r5, [sp, #16]
 801ade6:	4620      	mov	r0, r4
 801ade8:	bcf0      	pop	{r4, r5, r6, r7}
 801adea:	f7ff beef 	b.w	801abcc <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801adee:	6d80      	ldr	r0, [r0, #88]	; 0x58
 801adf0:	2800      	cmp	r0, #0
 801adf2:	d0d3      	beq.n	801ad9c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 801adf4:	6806      	ldr	r6, [r0, #0]
 801adf6:	e9cd 3504 	strd	r3, r5, [sp, #16]
 801adfa:	68b5      	ldr	r5, [r6, #8]
 801adfc:	e7e2      	b.n	801adc4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 801adfe:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 801ae00:	e7f6      	b.n	801adf0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6c>
 801ae02:	6e00      	ldr	r0, [r0, #96]	; 0x60
 801ae04:	e7f4      	b.n	801adf0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6c>
	...

0801ae08 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 801ae08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ae0c:	4605      	mov	r5, r0
 801ae0e:	b08f      	sub	sp, #60	; 0x3c
 801ae10:	460c      	mov	r4, r1
 801ae12:	461f      	mov	r7, r3
 801ae14:	2b00      	cmp	r3, #0
 801ae16:	d052      	beq.n	801aebe <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 801ae18:	6808      	ldr	r0, [r1, #0]
 801ae1a:	ab0a      	add	r3, sp, #40	; 0x28
 801ae1c:	6849      	ldr	r1, [r1, #4]
 801ae1e:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 801afe8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>
 801ae22:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 801afec <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e4>
 801ae26:	c303      	stmia	r3!, {r0, r1}
 801ae28:	6810      	ldr	r0, [r2, #0]
 801ae2a:	ab0c      	add	r3, sp, #48	; 0x30
 801ae2c:	6851      	ldr	r1, [r2, #4]
 801ae2e:	c303      	stmia	r3!, {r0, r1}
 801ae30:	a80a      	add	r0, sp, #40	; 0x28
 801ae32:	f7f9 fe75 	bl	8014b20 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ae36:	4621      	mov	r1, r4
 801ae38:	a80c      	add	r0, sp, #48	; 0x30
 801ae3a:	f7f9 fe99 	bl	8014b70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ae3e:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 801ae42:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801ae46:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801ae4a:	f8d8 0000 	ldr.w	r0, [r8]
 801ae4e:	fb11 2103 	smlabb	r1, r1, r3, r2
 801ae52:	f9bd 6034 	ldrsh.w	r6, [sp, #52]	; 0x34
 801ae56:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	; 0x36
 801ae5a:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 801ae5e:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 801ae62:	440a      	add	r2, r1
 801ae64:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 801ae68:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 801ae6c:	4413      	add	r3, r2
 801ae6e:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801ae72:	6803      	ldr	r3, [r0, #0]
 801ae74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ae76:	4798      	blx	r3
 801ae78:	2fff      	cmp	r7, #255	; 0xff
 801ae7a:	d023      	beq.n	801aec4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xbc>
 801ae7c:	f010 0f04 	tst.w	r0, #4
 801ae80:	f8d8 0000 	ldr.w	r0, [r8]
 801ae84:	d021      	beq.n	801aeca <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xc2>
 801ae86:	2100      	movs	r1, #0
 801ae88:	f04f 0e01 	mov.w	lr, #1
 801ae8c:	f8d0 c000 	ldr.w	ip, [r0]
 801ae90:	b2a4      	uxth	r4, r4
 801ae92:	9106      	str	r1, [sp, #24]
 801ae94:	b2b6      	uxth	r6, r6
 801ae96:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 801ae9a:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 801ae9e:	e9cd e107 	strd	lr, r1, [sp, #28]
 801aea2:	f8b9 e000 	ldrh.w	lr, [r9]
 801aea6:	9703      	str	r7, [sp, #12]
 801aea8:	9401      	str	r4, [sp, #4]
 801aeaa:	9600      	str	r6, [sp, #0]
 801aeac:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 801aeb0:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801aeb4:	9102      	str	r1, [sp, #8]
 801aeb6:	4629      	mov	r1, r5
 801aeb8:	f8dc 4040 	ldr.w	r4, [ip, #64]	; 0x40
 801aebc:	47a0      	blx	r4
 801aebe:	b00f      	add	sp, #60	; 0x3c
 801aec0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801aec4:	f010 0f01 	tst.w	r0, #1
 801aec8:	e7da      	b.n	801ae80 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x78>
 801aeca:	6803      	ldr	r3, [r0, #0]
 801aecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801aece:	4798      	blx	r3
 801aed0:	f8b9 1000 	ldrh.w	r1, [r9]
 801aed4:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801aed8:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 801aedc:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 801aee0:	434c      	muls	r4, r1
 801aee2:	2fff      	cmp	r7, #255	; 0xff
 801aee4:	fb01 2303 	mla	r3, r1, r3, r2
 801aee8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801aeec:	eba1 0106 	sub.w	r1, r1, r6
 801aef0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801aef4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801aef8:	4418      	add	r0, r3
 801aefa:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 801aefe:	eba3 0606 	sub.w	r6, r3, r6
 801af02:	4404      	add	r4, r0
 801af04:	ea4f 0646 	mov.w	r6, r6, lsl #1
 801af08:	d04a      	beq.n	801afa0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x198>
 801af0a:	43fa      	mvns	r2, r7
 801af0c:	b2bb      	uxth	r3, r7
 801af0e:	b2d7      	uxtb	r7, r2
 801af10:	42a0      	cmp	r0, r4
 801af12:	d263      	bcs.n	801afdc <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 801af14:	eb00 0e0c 	add.w	lr, r0, ip
 801af18:	4586      	cmp	lr, r0
 801af1a:	f100 0803 	add.w	r8, r0, #3
 801af1e:	d93a      	bls.n	801af96 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x18e>
 801af20:	f835 2b02 	ldrh.w	r2, [r5], #2
 801af24:	f818 9c03 	ldrb.w	r9, [r8, #-3]
 801af28:	00d0      	lsls	r0, r2, #3
 801af2a:	fb19 f907 	smulbb	r9, r9, r7
 801af2e:	b2c0      	uxtb	r0, r0
 801af30:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 801af34:	fb00 9003 	mla	r0, r0, r3, r9
 801af38:	b280      	uxth	r0, r0
 801af3a:	f100 0901 	add.w	r9, r0, #1
 801af3e:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801af42:	f818 9c02 	ldrb.w	r9, [r8, #-2]
 801af46:	fb19 f907 	smulbb	r9, r9, r7
 801af4a:	1200      	asrs	r0, r0, #8
 801af4c:	f808 0c03 	strb.w	r0, [r8, #-3]
 801af50:	10d0      	asrs	r0, r2, #3
 801af52:	1212      	asrs	r2, r2, #8
 801af54:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801af58:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801af5c:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 801af60:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801af64:	fb00 9003 	mla	r0, r0, r3, r9
 801af68:	b280      	uxth	r0, r0
 801af6a:	f100 0901 	add.w	r9, r0, #1
 801af6e:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801af72:	1200      	asrs	r0, r0, #8
 801af74:	f808 0c02 	strb.w	r0, [r8, #-2]
 801af78:	f818 0c01 	ldrb.w	r0, [r8, #-1]
 801af7c:	fb10 f007 	smulbb	r0, r0, r7
 801af80:	fb02 0203 	mla	r2, r2, r3, r0
 801af84:	b292      	uxth	r2, r2
 801af86:	1c50      	adds	r0, r2, #1
 801af88:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801af8c:	4640      	mov	r0, r8
 801af8e:	1212      	asrs	r2, r2, #8
 801af90:	f808 2c01 	strb.w	r2, [r8, #-1]
 801af94:	e7c0      	b.n	801af18 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x110>
 801af96:	4408      	add	r0, r1
 801af98:	4435      	add	r5, r6
 801af9a:	e7b9      	b.n	801af10 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x108>
 801af9c:	4408      	add	r0, r1
 801af9e:	4435      	add	r5, r6
 801afa0:	42a0      	cmp	r0, r4
 801afa2:	d21b      	bcs.n	801afdc <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 801afa4:	eb00 070c 	add.w	r7, r0, ip
 801afa8:	42b8      	cmp	r0, r7
 801afaa:	d2f7      	bcs.n	801af9c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x194>
 801afac:	f835 3b02 	ldrh.w	r3, [r5], #2
 801afb0:	3003      	adds	r0, #3
 801afb2:	00da      	lsls	r2, r3, #3
 801afb4:	b2d2      	uxtb	r2, r2
 801afb6:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801afba:	f800 2c03 	strb.w	r2, [r0, #-3]
 801afbe:	10da      	asrs	r2, r3, #3
 801afc0:	121b      	asrs	r3, r3, #8
 801afc2:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801afc6:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801afca:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 801afce:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 801afd2:	f800 2c02 	strb.w	r2, [r0, #-2]
 801afd6:	f800 3c01 	strb.w	r3, [r0, #-1]
 801afda:	e7e5      	b.n	801afa8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1a0>
 801afdc:	4b02      	ldr	r3, [pc, #8]	; (801afe8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>)
 801afde:	6818      	ldr	r0, [r3, #0]
 801afe0:	6803      	ldr	r3, [r0, #0]
 801afe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801afe4:	4798      	blx	r3
 801afe6:	e76a      	b.n	801aebe <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 801afe8:	240069a4 	.word	0x240069a4
 801afec:	2400699e 	.word	0x2400699e

0801aff0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801aff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801aff4:	b08a      	sub	sp, #40	; 0x28
 801aff6:	460d      	mov	r5, r1
 801aff8:	4604      	mov	r4, r0
 801affa:	461e      	mov	r6, r3
 801affc:	6808      	ldr	r0, [r1, #0]
 801affe:	ab06      	add	r3, sp, #24
 801b000:	6849      	ldr	r1, [r1, #4]
 801b002:	4f5d      	ldr	r7, [pc, #372]	; (801b178 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 801b004:	c303      	stmia	r3!, {r0, r1}
 801b006:	6810      	ldr	r0, [r2, #0]
 801b008:	ab08      	add	r3, sp, #32
 801b00a:	6851      	ldr	r1, [r2, #4]
 801b00c:	c303      	stmia	r3!, {r0, r1}
 801b00e:	a806      	add	r0, sp, #24
 801b010:	f7f9 fd86 	bl	8014b20 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b014:	4629      	mov	r1, r5
 801b016:	a808      	add	r0, sp, #32
 801b018:	f7f9 fdaa 	bl	8014b70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801b01c:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801b020:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801b024:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801b028:	6838      	ldr	r0, [r7, #0]
 801b02a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801b02e:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 801b032:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 801b036:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801b03a:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801b03e:	440a      	add	r2, r1
 801b040:	f8ad 2020 	strh.w	r2, [sp, #32]
 801b044:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801b048:	4413      	add	r3, r2
 801b04a:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801b04e:	6803      	ldr	r3, [r0, #0]
 801b050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b052:	4798      	blx	r3
 801b054:	2eff      	cmp	r6, #255	; 0xff
 801b056:	d119      	bne.n	801b08c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 801b058:	f010 0f20 	tst.w	r0, #32
 801b05c:	6838      	ldr	r0, [r7, #0]
 801b05e:	d018      	beq.n	801b092 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 801b060:	b2ad      	uxth	r5, r5
 801b062:	2700      	movs	r7, #0
 801b064:	6801      	ldr	r1, [r0, #0]
 801b066:	9501      	str	r5, [sp, #4]
 801b068:	fa1f f588 	uxth.w	r5, r8
 801b06c:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801b070:	9500      	str	r5, [sp, #0]
 801b072:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801b076:	e9cd 6703 	strd	r6, r7, [sp, #12]
 801b07a:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801b07e:	9602      	str	r6, [sp, #8]
 801b080:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 801b082:	4621      	mov	r1, r4
 801b084:	47a8      	blx	r5
 801b086:	b00a      	add	sp, #40	; 0x28
 801b088:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b08c:	f010 0f40 	tst.w	r0, #64	; 0x40
 801b090:	e7e4      	b.n	801b05c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6c>
 801b092:	6803      	ldr	r3, [r0, #0]
 801b094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b096:	4798      	blx	r3
 801b098:	4b38      	ldr	r3, [pc, #224]	; (801b17c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18c>)
 801b09a:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801b09e:	f8b3 c000 	ldrh.w	ip, [r3]
 801b0a2:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801b0a6:	fb0c f505 	mul.w	r5, ip, r5
 801b0aa:	f9bd e01c 	ldrsh.w	lr, [sp, #28]
 801b0ae:	fb0c 2303 	mla	r3, ip, r3, r2
 801b0b2:	ebac 0c08 	sub.w	ip, ip, r8
 801b0b6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b0ba:	ebae 0e08 	sub.w	lr, lr, r8
 801b0be:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b0c2:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801b0c6:	4418      	add	r0, r3
 801b0c8:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 801b0cc:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 801b0d0:	4405      	add	r5, r0
 801b0d2:	42a8      	cmp	r0, r5
 801b0d4:	d24a      	bcs.n	801b16c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17c>
 801b0d6:	eb00 0803 	add.w	r8, r0, r3
 801b0da:	4540      	cmp	r0, r8
 801b0dc:	d243      	bcs.n	801b166 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x176>
 801b0de:	78e2      	ldrb	r2, [r4, #3]
 801b0e0:	b15a      	cbz	r2, 801b0fa <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 801b0e2:	2aff      	cmp	r2, #255	; 0xff
 801b0e4:	f894 9000 	ldrb.w	r9, [r4]
 801b0e8:	d10a      	bne.n	801b100 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 801b0ea:	2eff      	cmp	r6, #255	; 0xff
 801b0ec:	d108      	bne.n	801b100 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 801b0ee:	f880 9000 	strb.w	r9, [r0]
 801b0f2:	7862      	ldrb	r2, [r4, #1]
 801b0f4:	7042      	strb	r2, [r0, #1]
 801b0f6:	78a2      	ldrb	r2, [r4, #2]
 801b0f8:	7082      	strb	r2, [r0, #2]
 801b0fa:	3003      	adds	r0, #3
 801b0fc:	3404      	adds	r4, #4
 801b0fe:	e7ec      	b.n	801b0da <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xea>
 801b100:	4372      	muls	r2, r6
 801b102:	1c51      	adds	r1, r2, #1
 801b104:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 801b108:	1209      	asrs	r1, r1, #8
 801b10a:	fa1f fa81 	uxth.w	sl, r1
 801b10e:	43c9      	mvns	r1, r1
 801b110:	fb19 f90a 	smulbb	r9, r9, sl
 801b114:	b2ca      	uxtb	r2, r1
 801b116:	7801      	ldrb	r1, [r0, #0]
 801b118:	fb01 9902 	mla	r9, r1, r2, r9
 801b11c:	fa1f f989 	uxth.w	r9, r9
 801b120:	f109 0101 	add.w	r1, r9, #1
 801b124:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 801b128:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b12c:	f880 9000 	strb.w	r9, [r0]
 801b130:	f890 9001 	ldrb.w	r9, [r0, #1]
 801b134:	7861      	ldrb	r1, [r4, #1]
 801b136:	fb19 f902 	smulbb	r9, r9, r2
 801b13a:	fb01 910a 	mla	r1, r1, sl, r9
 801b13e:	b289      	uxth	r1, r1
 801b140:	f101 0901 	add.w	r9, r1, #1
 801b144:	eb09 2111 	add.w	r1, r9, r1, lsr #8
 801b148:	1209      	asrs	r1, r1, #8
 801b14a:	7041      	strb	r1, [r0, #1]
 801b14c:	7881      	ldrb	r1, [r0, #2]
 801b14e:	f894 9002 	ldrb.w	r9, [r4, #2]
 801b152:	fb11 f202 	smulbb	r2, r1, r2
 801b156:	fb09 220a 	mla	r2, r9, sl, r2
 801b15a:	b292      	uxth	r2, r2
 801b15c:	1c51      	adds	r1, r2, #1
 801b15e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801b162:	1212      	asrs	r2, r2, #8
 801b164:	e7c8      	b.n	801b0f8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x108>
 801b166:	4460      	add	r0, ip
 801b168:	4474      	add	r4, lr
 801b16a:	e7b2      	b.n	801b0d2 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xe2>
 801b16c:	6838      	ldr	r0, [r7, #0]
 801b16e:	6803      	ldr	r3, [r0, #0]
 801b170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b172:	4798      	blx	r3
 801b174:	e787      	b.n	801b086 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 801b176:	bf00      	nop
 801b178:	240069a4 	.word	0x240069a4
 801b17c:	2400699e 	.word	0x2400699e

0801b180 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801b180:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b184:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 801b188:	4607      	mov	r7, r0
 801b18a:	460c      	mov	r4, r1
 801b18c:	4692      	mov	sl, r2
 801b18e:	4699      	mov	r9, r3
 801b190:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801b192:	b31d      	cbz	r5, 801b1dc <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801b194:	4608      	mov	r0, r1
 801b196:	f7fc fbdd 	bl	8017954 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801b19a:	4680      	mov	r8, r0
 801b19c:	4620      	mov	r0, r4
 801b19e:	f7fc fc0d 	bl	80179bc <_ZNK8touchgfx6Bitmap9getHeightEv>
 801b1a2:	f8ad 000e 	strh.w	r0, [sp, #14]
 801b1a6:	4620      	mov	r0, r4
 801b1a8:	f8ad a008 	strh.w	sl, [sp, #8]
 801b1ac:	f8ad 900a 	strh.w	r9, [sp, #10]
 801b1b0:	f8ad 800c 	strh.w	r8, [sp, #12]
 801b1b4:	f7fc fcba 	bl	8017b2c <_ZNK8touchgfx6Bitmap9getFormatEv>
 801b1b8:	280b      	cmp	r0, #11
 801b1ba:	d80f      	bhi.n	801b1dc <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801b1bc:	e8df f000 	tbb	[pc, r0]
 801b1c0:	0e062a21 	.word	0x0e062a21
 801b1c4:	0e0e0e0e 	.word	0x0e0e0e0e
 801b1c8:	110e0e0e 	.word	0x110e0e0e
 801b1cc:	4620      	mov	r0, r4
 801b1ce:	f7fc fc29 	bl	8017a24 <_ZNK8touchgfx6Bitmap7getDataEv>
 801b1d2:	462b      	mov	r3, r5
 801b1d4:	4632      	mov	r2, r6
 801b1d6:	a902      	add	r1, sp, #8
 801b1d8:	f7ff ff0a 	bl	801aff0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801b1dc:	b004      	add	sp, #16
 801b1de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b1e2:	4620      	mov	r0, r4
 801b1e4:	f7fc fc1e 	bl	8017a24 <_ZNK8touchgfx6Bitmap7getDataEv>
 801b1e8:	4680      	mov	r8, r0
 801b1ea:	4620      	mov	r0, r4
 801b1ec:	f7fc fc4a 	bl	8017a84 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801b1f0:	ab02      	add	r3, sp, #8
 801b1f2:	4602      	mov	r2, r0
 801b1f4:	4641      	mov	r1, r8
 801b1f6:	4638      	mov	r0, r7
 801b1f8:	e9cd 6500 	strd	r6, r5, [sp]
 801b1fc:	f7ff fdc2 	bl	801ad84 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801b200:	e7ec      	b.n	801b1dc <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801b202:	4620      	mov	r0, r4
 801b204:	f7fc fc0e 	bl	8017a24 <_ZNK8touchgfx6Bitmap7getDataEv>
 801b208:	462b      	mov	r3, r5
 801b20a:	4632      	mov	r2, r6
 801b20c:	a902      	add	r1, sp, #8
 801b20e:	f7ff fdfb 	bl	801ae08 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 801b212:	e7e3      	b.n	801b1dc <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801b214:	683b      	ldr	r3, [r7, #0]
 801b216:	4620      	mov	r0, r4
 801b218:	f8d3 800c 	ldr.w	r8, [r3, #12]
 801b21c:	f7fc fc02 	bl	8017a24 <_ZNK8touchgfx6Bitmap7getDataEv>
 801b220:	2300      	movs	r3, #0
 801b222:	4601      	mov	r1, r0
 801b224:	aa02      	add	r2, sp, #8
 801b226:	4638      	mov	r0, r7
 801b228:	e9cd 5300 	strd	r5, r3, [sp]
 801b22c:	4633      	mov	r3, r6
 801b22e:	47c0      	blx	r8
 801b230:	e7d4      	b.n	801b1dc <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>

0801b232 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801b232:	b4f0      	push	{r4, r5, r6, r7}
 801b234:	4616      	mov	r6, r2
 801b236:	461c      	mov	r4, r3
 801b238:	460d      	mov	r5, r1
 801b23a:	9a04      	ldr	r2, [sp, #16]
 801b23c:	2e01      	cmp	r6, #1
 801b23e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801b242:	d00e      	beq.n	801b262 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x30>
 801b244:	d303      	bcc.n	801b24e <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x1c>
 801b246:	2e02      	cmp	r6, #2
 801b248:	d006      	beq.n	801b258 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x26>
 801b24a:	bcf0      	pop	{r4, r5, r6, r7}
 801b24c:	4770      	bx	lr
 801b24e:	4621      	mov	r1, r4
 801b250:	4628      	mov	r0, r5
 801b252:	bcf0      	pop	{r4, r5, r6, r7}
 801b254:	f7ff bdd8 	b.w	801ae08 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 801b258:	4621      	mov	r1, r4
 801b25a:	4628      	mov	r0, r5
 801b25c:	bcf0      	pop	{r4, r5, r6, r7}
 801b25e:	f7ff bec7 	b.w	801aff0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801b262:	6805      	ldr	r5, [r0, #0]
 801b264:	2600      	movs	r6, #0
 801b266:	e9cd 3604 	strd	r3, r6, [sp, #16]
 801b26a:	68ed      	ldr	r5, [r5, #12]
 801b26c:	4613      	mov	r3, r2
 801b26e:	4622      	mov	r2, r4
 801b270:	46ac      	mov	ip, r5
 801b272:	bcf0      	pop	{r4, r5, r6, r7}
 801b274:	4760      	bx	ip
	...

0801b278 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 801b278:	b160      	cbz	r0, 801b294 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1c>
 801b27a:	2903      	cmp	r1, #3
 801b27c:	d818      	bhi.n	801b2b0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 801b27e:	e8df f001 	tbb	[pc, r1]
 801b282:	1902      	.short	0x1902
 801b284:	1b06      	.short	0x1b06
 801b286:	4b0e      	ldr	r3, [pc, #56]	; (801b2c0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 801b288:	8818      	ldrh	r0, [r3, #0]
 801b28a:	4240      	negs	r0, r0
 801b28c:	4770      	bx	lr
 801b28e:	4b0c      	ldr	r3, [pc, #48]	; (801b2c0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 801b290:	8818      	ldrh	r0, [r3, #0]
 801b292:	4770      	bx	lr
 801b294:	2903      	cmp	r1, #3
 801b296:	d80b      	bhi.n	801b2b0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 801b298:	a301      	add	r3, pc, #4	; (adr r3, 801b2a0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x28>)
 801b29a:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801b29e:	bf00      	nop
 801b2a0:	0801b2b5 	.word	0x0801b2b5
 801b2a4:	0801b28f 	.word	0x0801b28f
 801b2a8:	0801b2b9 	.word	0x0801b2b9
 801b2ac:	0801b287 	.word	0x0801b287
 801b2b0:	2000      	movs	r0, #0
 801b2b2:	4770      	bx	lr
 801b2b4:	2001      	movs	r0, #1
 801b2b6:	4770      	bx	lr
 801b2b8:	f04f 30ff 	mov.w	r0, #4294967295
 801b2bc:	4770      	bx	lr
 801b2be:	bf00      	nop
 801b2c0:	2400699e 	.word	0x2400699e

0801b2c4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 801b2c4:	b160      	cbz	r0, 801b2e0 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x1c>
 801b2c6:	2903      	cmp	r1, #3
 801b2c8:	d818      	bhi.n	801b2fc <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 801b2ca:	e8df f001 	tbb	[pc, r1]
 801b2ce:	0219      	.short	0x0219
 801b2d0:	051b      	.short	0x051b
 801b2d2:	4b0e      	ldr	r3, [pc, #56]	; (801b30c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 801b2d4:	8818      	ldrh	r0, [r3, #0]
 801b2d6:	4770      	bx	lr
 801b2d8:	4b0c      	ldr	r3, [pc, #48]	; (801b30c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 801b2da:	8818      	ldrh	r0, [r3, #0]
 801b2dc:	4240      	negs	r0, r0
 801b2de:	4770      	bx	lr
 801b2e0:	2903      	cmp	r1, #3
 801b2e2:	d80b      	bhi.n	801b2fc <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 801b2e4:	a301      	add	r3, pc, #4	; (adr r3, 801b2ec <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x28>)
 801b2e6:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801b2ea:	bf00      	nop
 801b2ec:	0801b2d3 	.word	0x0801b2d3
 801b2f0:	0801b305 	.word	0x0801b305
 801b2f4:	0801b2d9 	.word	0x0801b2d9
 801b2f8:	0801b301 	.word	0x0801b301
 801b2fc:	2000      	movs	r0, #0
 801b2fe:	4770      	bx	lr
 801b300:	2001      	movs	r0, #1
 801b302:	4770      	bx	lr
 801b304:	f04f 30ff 	mov.w	r0, #4294967295
 801b308:	4770      	bx	lr
 801b30a:	bf00      	nop
 801b30c:	2400699e 	.word	0x2400699e

0801b310 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801b310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b314:	b097      	sub	sp, #92	; 0x5c
 801b316:	910b      	str	r1, [sp, #44]	; 0x2c
 801b318:	a912      	add	r1, sp, #72	; 0x48
 801b31a:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	; 0x80
 801b31e:	f8bd 7088 	ldrh.w	r7, [sp, #136]	; 0x88
 801b322:	f8bd 408c 	ldrh.w	r4, [sp, #140]	; 0x8c
 801b326:	f89d 80a4 	ldrb.w	r8, [sp, #164]	; 0xa4
 801b32a:	f89d 90ac 	ldrb.w	r9, [sp, #172]	; 0xac
 801b32e:	e881 000c 	stmia.w	r1, {r2, r3}
 801b332:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	; 0x84
 801b336:	930a      	str	r3, [sp, #40]	; 0x28
 801b338:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 801b33c:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	; 0x90
 801b340:	9311      	str	r3, [sp, #68]	; 0x44
 801b342:	f89d 30a8 	ldrb.w	r3, [sp, #168]	; 0xa8
 801b346:	798d      	ldrb	r5, [r1, #6]
 801b348:	930c      	str	r3, [sp, #48]	; 0x30
 801b34a:	7b4b      	ldrb	r3, [r1, #13]
 801b34c:	0158      	lsls	r0, r3, #5
 801b34e:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801b352:	4328      	orrs	r0, r5
 801b354:	9009      	str	r0, [sp, #36]	; 0x24
 801b356:	f000 817c 	beq.w	801b652 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801b35a:	011b      	lsls	r3, r3, #4
 801b35c:	79c8      	ldrb	r0, [r1, #7]
 801b35e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b362:	4303      	orrs	r3, r0
 801b364:	930e      	str	r3, [sp, #56]	; 0x38
 801b366:	f000 8174 	beq.w	801b652 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801b36a:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801b36e:	b29b      	uxth	r3, r3
 801b370:	2f00      	cmp	r7, #0
 801b372:	f000 8116 	beq.w	801b5a2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x292>
 801b376:	1aff      	subs	r7, r7, r3
 801b378:	b2bf      	uxth	r7, r7
 801b37a:	043b      	lsls	r3, r7, #16
 801b37c:	d502      	bpl.n	801b384 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801b37e:	1bf6      	subs	r6, r6, r7
 801b380:	2700      	movs	r7, #0
 801b382:	b236      	sxth	r6, r6
 801b384:	f9b2 1000 	ldrsh.w	r1, [r2]
 801b388:	a812      	add	r0, sp, #72	; 0x48
 801b38a:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 801b38e:	428e      	cmp	r6, r1
 801b390:	b28b      	uxth	r3, r1
 801b392:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 801b396:	bfbf      	itttt	lt
 801b398:	18ff      	addlt	r7, r7, r3
 801b39a:	1bbe      	sublt	r6, r7, r6
 801b39c:	b2b7      	uxthlt	r7, r6
 801b39e:	460e      	movlt	r6, r1
 801b3a0:	8891      	ldrh	r1, [r2, #4]
 801b3a2:	440b      	add	r3, r1
 801b3a4:	4631      	mov	r1, r6
 801b3a6:	b21b      	sxth	r3, r3
 801b3a8:	9310      	str	r3, [sp, #64]	; 0x40
 801b3aa:	88d3      	ldrh	r3, [r2, #6]
 801b3ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b3ae:	449a      	add	sl, r3
 801b3b0:	fa0f f38a 	sxth.w	r3, sl
 801b3b4:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 801b3b8:	930f      	str	r3, [sp, #60]	; 0x3c
 801b3ba:	4bb5      	ldr	r3, [pc, #724]	; (801b690 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 801b3bc:	f893 b000 	ldrb.w	fp, [r3]
 801b3c0:	f10b 3cff 	add.w	ip, fp, #4294967295
 801b3c4:	f1dc 0300 	rsbs	r3, ip, #0
 801b3c8:	eb43 030c 	adc.w	r3, r3, ip
 801b3cc:	930d      	str	r3, [sp, #52]	; 0x34
 801b3ce:	464b      	mov	r3, r9
 801b3d0:	f7f9 fa1b 	bl	801480a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801b3d4:	4631      	mov	r1, r6
 801b3d6:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 801b3da:	464b      	mov	r3, r9
 801b3dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b3de:	a812      	add	r0, sp, #72	; 0x48
 801b3e0:	f7f9 fa30 	bl	8014844 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801b3e4:	a916      	add	r1, sp, #88	; 0x58
 801b3e6:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801b3ea:	a815      	add	r0, sp, #84	; 0x54
 801b3ec:	f7f9 fb56 	bl	8014a9c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801b3f0:	f1b9 0f00 	cmp.w	r9, #0
 801b3f4:	f040 80d8 	bne.w	801b5a8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x298>
 801b3f8:	f1bb 0f01 	cmp.w	fp, #1
 801b3fc:	f040 80dc 	bne.w	801b5b8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 801b400:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801b402:	b153      	cbz	r3, 801b41a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 801b404:	2508      	movs	r5, #8
 801b406:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b408:	fb95 f3f8 	sdiv	r3, r5, r8
 801b40c:	1e5d      	subs	r5, r3, #1
 801b40e:	4415      	add	r5, r2
 801b410:	fb95 f5f3 	sdiv	r5, r5, r3
 801b414:	fb15 f503 	smulbb	r5, r5, r3
 801b418:	b2ad      	uxth	r5, r5
 801b41a:	b907      	cbnz	r7, 801b41e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 801b41c:	b16c      	cbz	r4, 801b43a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12a>
 801b41e:	fb04 7305 	mla	r3, r4, r5, r7
 801b422:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801b424:	ebaa 0a04 	sub.w	sl, sl, r4
 801b428:	fb08 f303 	mul.w	r3, r8, r3
 801b42c:	fa1f fa8a 	uxth.w	sl, sl
 801b430:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 801b434:	f003 0407 	and.w	r4, r3, #7
 801b438:	9226      	str	r2, [sp, #152]	; 0x98
 801b43a:	4649      	mov	r1, r9
 801b43c:	980d      	ldr	r0, [sp, #52]	; 0x34
 801b43e:	f7ff ff1b 	bl	801b278 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 801b442:	4683      	mov	fp, r0
 801b444:	980d      	ldr	r0, [sp, #52]	; 0x34
 801b446:	f7ff ff3d 	bl	801b2c4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 801b44a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b44c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b44e:	4681      	mov	r9, r0
 801b450:	1a9b      	subs	r3, r3, r2
 801b452:	459a      	cmp	sl, r3
 801b454:	bfa8      	it	ge
 801b456:	469a      	movge	sl, r3
 801b458:	f1ba 0f00 	cmp.w	sl, #0
 801b45c:	f340 80f9 	ble.w	801b652 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801b460:	1bf6      	subs	r6, r6, r7
 801b462:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b464:	1b9e      	subs	r6, r3, r6
 801b466:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b468:	429e      	cmp	r6, r3
 801b46a:	bfd4      	ite	le
 801b46c:	ebc7 0706 	rsble	r7, r7, r6
 801b470:	ebc7 0703 	rsbgt	r7, r7, r3
 801b474:	2f00      	cmp	r7, #0
 801b476:	f340 80ec 	ble.w	801b652 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801b47a:	1bed      	subs	r5, r5, r7
 801b47c:	fb08 f305 	mul.w	r3, r8, r5
 801b480:	930d      	str	r3, [sp, #52]	; 0x34
 801b482:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b484:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801b488:	930e      	str	r3, [sp, #56]	; 0x38
 801b48a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b48c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801b490:	930f      	str	r3, [sp, #60]	; 0x3c
 801b492:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b494:	b2db      	uxtb	r3, r3
 801b496:	9310      	str	r3, [sp, #64]	; 0x40
 801b498:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b49a:	2b00      	cmp	r3, #0
 801b49c:	f040 80de 	bne.w	801b65c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34c>
 801b4a0:	4b7c      	ldr	r3, [pc, #496]	; (801b694 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 801b4a2:	6818      	ldr	r0, [r3, #0]
 801b4a4:	6803      	ldr	r3, [r0, #0]
 801b4a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b4a8:	4798      	blx	r3
 801b4aa:	2301      	movs	r3, #1
 801b4ac:	4a7a      	ldr	r2, [pc, #488]	; (801b698 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 801b4ae:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
 801b4b2:	fb07 9b1b 	mls	fp, r7, fp, r9
 801b4b6:	fa03 f308 	lsl.w	r3, r3, r8
 801b4ba:	8811      	ldrh	r1, [r2, #0]
 801b4bc:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 801b4c0:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 801b4c4:	3b01      	subs	r3, #1
 801b4c6:	fb06 bb07 	mla	fp, r6, r7, fp
 801b4ca:	b2db      	uxtb	r3, r3
 801b4cc:	930a      	str	r3, [sp, #40]	; 0x28
 801b4ce:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 801b4d2:	fb01 2303 	mla	r3, r1, r3, r2
 801b4d6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b4da:	18c3      	adds	r3, r0, r3
 801b4dc:	9309      	str	r3, [sp, #36]	; 0x24
 801b4de:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801b4e0:	781a      	ldrb	r2, [r3, #0]
 801b4e2:	4122      	asrs	r2, r4
 801b4e4:	b2d2      	uxtb	r2, r2
 801b4e6:	f11a 3aff 	adds.w	sl, sl, #4294967295
 801b4ea:	f0c0 80d7 	bcc.w	801b69c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>
 801b4ee:	46be      	mov	lr, r7
 801b4f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b4f2:	f11e 3eff 	adds.w	lr, lr, #4294967295
 801b4f6:	f0c0 80ba 	bcc.w	801b66e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x35e>
 801b4fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b4fc:	4013      	ands	r3, r2
 801b4fe:	d041      	beq.n	801b584 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 801b500:	20ff      	movs	r0, #255	; 0xff
 801b502:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801b504:	fb90 f5f5 	sdiv	r5, r0, r5
 801b508:	436b      	muls	r3, r5
 801b50a:	2bfe      	cmp	r3, #254	; 0xfe
 801b50c:	dd03      	ble.n	801b516 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x206>
 801b50e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801b510:	4285      	cmp	r5, r0
 801b512:	f000 80a5 	beq.w	801b660 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x350>
 801b516:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801b518:	9810      	ldr	r0, [sp, #64]	; 0x40
 801b51a:	fb15 f303 	smulbb	r3, r5, r3
 801b51e:	b29b      	uxth	r3, r3
 801b520:	1c5d      	adds	r5, r3, #1
 801b522:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 801b526:	780d      	ldrb	r5, [r1, #0]
 801b528:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801b52c:	fa1f fc83 	uxth.w	ip, r3
 801b530:	43db      	mvns	r3, r3
 801b532:	fb10 f90c 	smulbb	r9, r0, ip
 801b536:	b2db      	uxtb	r3, r3
 801b538:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801b53a:	fb05 9503 	mla	r5, r5, r3, r9
 801b53e:	b2ad      	uxth	r5, r5
 801b540:	f105 0901 	add.w	r9, r5, #1
 801b544:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801b548:	fb10 f90c 	smulbb	r9, r0, ip
 801b54c:	980e      	ldr	r0, [sp, #56]	; 0x38
 801b54e:	122d      	asrs	r5, r5, #8
 801b550:	fb10 fc0c 	smulbb	ip, r0, ip
 801b554:	700d      	strb	r5, [r1, #0]
 801b556:	784d      	ldrb	r5, [r1, #1]
 801b558:	fb05 9503 	mla	r5, r5, r3, r9
 801b55c:	b2ad      	uxth	r5, r5
 801b55e:	f105 0901 	add.w	r9, r5, #1
 801b562:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801b566:	122d      	asrs	r5, r5, #8
 801b568:	704d      	strb	r5, [r1, #1]
 801b56a:	788d      	ldrb	r5, [r1, #2]
 801b56c:	fb05 cc03 	mla	ip, r5, r3, ip
 801b570:	fa1f fc8c 	uxth.w	ip, ip
 801b574:	f10c 0301 	add.w	r3, ip, #1
 801b578:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801b57c:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801b580:	f881 c002 	strb.w	ip, [r1, #2]
 801b584:	4444      	add	r4, r8
 801b586:	4431      	add	r1, r6
 801b588:	b2a4      	uxth	r4, r4
 801b58a:	2c07      	cmp	r4, #7
 801b58c:	bf89      	itett	hi
 801b58e:	9b26      	ldrhi	r3, [sp, #152]	; 0x98
 801b590:	fa42 f208 	asrls.w	r2, r2, r8
 801b594:	2400      	movhi	r4, #0
 801b596:	785a      	ldrbhi	r2, [r3, #1]
 801b598:	bf8a      	itet	hi
 801b59a:	3301      	addhi	r3, #1
 801b59c:	b2d2      	uxtbls	r2, r2
 801b59e:	9326      	strhi	r3, [sp, #152]	; 0x98
 801b5a0:	e7a7      	b.n	801b4f2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e2>
 801b5a2:	441e      	add	r6, r3
 801b5a4:	b236      	sxth	r6, r6
 801b5a6:	e6ed      	b.n	801b384 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801b5a8:	f1b9 0f01 	cmp.w	r9, #1
 801b5ac:	f47f af28 	bne.w	801b400 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801b5b0:	f1bb 0f01 	cmp.w	fp, #1
 801b5b4:	f47f af24 	bne.w	801b400 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801b5b8:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 801b694 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>
 801b5bc:	f8db 0000 	ldr.w	r0, [fp]
 801b5c0:	6803      	ldr	r3, [r0, #0]
 801b5c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b5c4:	4798      	blx	r3
 801b5c6:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 801b5ca:	465a      	mov	r2, fp
 801b5cc:	d006      	beq.n	801b5dc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 801b5ce:	f1b8 0f04 	cmp.w	r8, #4
 801b5d2:	d141      	bne.n	801b658 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x348>
 801b5d4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801b5d6:	3300      	adds	r3, #0
 801b5d8:	bf18      	it	ne
 801b5da:	2301      	movne	r3, #1
 801b5dc:	0580      	lsls	r0, r0, #22
 801b5de:	d566      	bpl.n	801b6ae <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 801b5e0:	f1b8 0f08 	cmp.w	r8, #8
 801b5e4:	d163      	bne.n	801b6ae <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 801b5e6:	2b00      	cmp	r3, #0
 801b5e8:	bf0c      	ite	eq
 801b5ea:	f44f 7100 	moveq.w	r1, #512	; 0x200
 801b5ee:	f44f 7180 	movne.w	r1, #256	; 0x100
 801b5f2:	2f00      	cmp	r7, #0
 801b5f4:	f47f af04 	bne.w	801b400 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801b5f8:	2c00      	cmp	r4, #0
 801b5fa:	f47f af01 	bne.w	801b400 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801b5fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b600:	9810      	ldr	r0, [sp, #64]	; 0x40
 801b602:	18f3      	adds	r3, r6, r3
 801b604:	4283      	cmp	r3, r0
 801b606:	f73f aefb 	bgt.w	801b400 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801b60a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801b60c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b60e:	4403      	add	r3, r0
 801b610:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801b612:	4283      	cmp	r3, r0
 801b614:	f73f aef4 	bgt.w	801b400 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801b618:	f1b8 0f08 	cmp.w	r8, #8
 801b61c:	6810      	ldr	r0, [r2, #0]
 801b61e:	f04f 0600 	mov.w	r6, #0
 801b622:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 801b626:	bf18      	it	ne
 801b628:	3501      	addne	r5, #1
 801b62a:	6804      	ldr	r4, [r0, #0]
 801b62c:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 801b630:	bf18      	it	ne
 801b632:	f025 0501 	bicne.w	r5, r5, #1
 801b636:	e9cd 1605 	strd	r1, r6, [sp, #20]
 801b63a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801b63c:	bf18      	it	ne
 801b63e:	b2ad      	uxthne	r5, r5
 801b640:	9104      	str	r1, [sp, #16]
 801b642:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801b644:	e9cd 5a00 	strd	r5, sl, [sp]
 801b648:	e9cd 5102 	strd	r5, r1, [sp, #8]
 801b64c:	9926      	ldr	r1, [sp, #152]	; 0x98
 801b64e:	6d64      	ldr	r4, [r4, #84]	; 0x54
 801b650:	47a0      	blx	r4
 801b652:	b017      	add	sp, #92	; 0x5c
 801b654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b658:	2300      	movs	r3, #0
 801b65a:	e7bf      	b.n	801b5dc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 801b65c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801b65e:	e724      	b.n	801b4aa <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x19a>
 801b660:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b662:	700b      	strb	r3, [r1, #0]
 801b664:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b666:	704b      	strb	r3, [r1, #1]
 801b668:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b66a:	708b      	strb	r3, [r1, #2]
 801b66c:	e78a      	b.n	801b584 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 801b66e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b670:	b153      	cbz	r3, 801b688 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 801b672:	441c      	add	r4, r3
 801b674:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801b676:	b2a4      	uxth	r4, r4
 801b678:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 801b67c:	f004 0407 	and.w	r4, r4, #7
 801b680:	781a      	ldrb	r2, [r3, #0]
 801b682:	9326      	str	r3, [sp, #152]	; 0x98
 801b684:	4122      	asrs	r2, r4
 801b686:	b2d2      	uxtb	r2, r2
 801b688:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b68a:	445b      	add	r3, fp
 801b68c:	9309      	str	r3, [sp, #36]	; 0x24
 801b68e:	e72a      	b.n	801b4e6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d6>
 801b690:	2400699c 	.word	0x2400699c
 801b694:	240069a4 	.word	0x240069a4
 801b698:	2400699e 	.word	0x2400699e
 801b69c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b69e:	2b00      	cmp	r3, #0
 801b6a0:	d1d7      	bne.n	801b652 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801b6a2:	4b06      	ldr	r3, [pc, #24]	; (801b6bc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 801b6a4:	6818      	ldr	r0, [r3, #0]
 801b6a6:	6803      	ldr	r3, [r0, #0]
 801b6a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b6aa:	4798      	blx	r3
 801b6ac:	e7d1      	b.n	801b652 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801b6ae:	2b00      	cmp	r3, #0
 801b6b0:	f43f aea6 	beq.w	801b400 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801b6b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 801b6b8:	e79b      	b.n	801b5f2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 801b6ba:	bf00      	nop
 801b6bc:	240069a4 	.word	0x240069a4

0801b6c0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801b6c0:	b538      	push	{r3, r4, r5, lr}
 801b6c2:	4c15      	ldr	r4, [pc, #84]	; (801b718 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801b6c4:	4605      	mov	r5, r0
 801b6c6:	7823      	ldrb	r3, [r4, #0]
 801b6c8:	f3bf 8f5b 	dmb	ish
 801b6cc:	07da      	lsls	r2, r3, #31
 801b6ce:	d40b      	bmi.n	801b6e8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801b6d0:	4620      	mov	r0, r4
 801b6d2:	f005 fb4c 	bl	8020d6e <__cxa_guard_acquire>
 801b6d6:	b138      	cbz	r0, 801b6e8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801b6d8:	4620      	mov	r0, r4
 801b6da:	f005 fb54 	bl	8020d86 <__cxa_guard_release>
 801b6de:	4a0f      	ldr	r2, [pc, #60]	; (801b71c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801b6e0:	490f      	ldr	r1, [pc, #60]	; (801b720 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801b6e2:	4810      	ldr	r0, [pc, #64]	; (801b724 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801b6e4:	f005 fb3c 	bl	8020d60 <__aeabi_atexit>
 801b6e8:	4c0f      	ldr	r4, [pc, #60]	; (801b728 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801b6ea:	7823      	ldrb	r3, [r4, #0]
 801b6ec:	f3bf 8f5b 	dmb	ish
 801b6f0:	07db      	lsls	r3, r3, #31
 801b6f2:	d40b      	bmi.n	801b70c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801b6f4:	4620      	mov	r0, r4
 801b6f6:	f005 fb3a 	bl	8020d6e <__cxa_guard_acquire>
 801b6fa:	b138      	cbz	r0, 801b70c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801b6fc:	4620      	mov	r0, r4
 801b6fe:	f005 fb42 	bl	8020d86 <__cxa_guard_release>
 801b702:	4a06      	ldr	r2, [pc, #24]	; (801b71c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801b704:	4909      	ldr	r1, [pc, #36]	; (801b72c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801b706:	480a      	ldr	r0, [pc, #40]	; (801b730 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801b708:	f005 fb2a 	bl	8020d60 <__aeabi_atexit>
 801b70c:	4b05      	ldr	r3, [pc, #20]	; (801b724 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801b70e:	612b      	str	r3, [r5, #16]
 801b710:	4b07      	ldr	r3, [pc, #28]	; (801b730 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801b712:	616b      	str	r3, [r5, #20]
 801b714:	bd38      	pop	{r3, r4, r5, pc}
 801b716:	bf00      	nop
 801b718:	24006a7c 	.word	0x24006a7c
 801b71c:	24000000 	.word	0x24000000
 801b720:	08019509 	.word	0x08019509
 801b724:	2400009c 	.word	0x2400009c
 801b728:	24006a80 	.word	0x24006a80
 801b72c:	08019507 	.word	0x08019507
 801b730:	240000a0 	.word	0x240000a0

0801b734 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801b734:	b538      	push	{r3, r4, r5, lr}
 801b736:	4c15      	ldr	r4, [pc, #84]	; (801b78c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801b738:	4605      	mov	r5, r0
 801b73a:	7823      	ldrb	r3, [r4, #0]
 801b73c:	f3bf 8f5b 	dmb	ish
 801b740:	07da      	lsls	r2, r3, #31
 801b742:	d40b      	bmi.n	801b75c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801b744:	4620      	mov	r0, r4
 801b746:	f005 fb12 	bl	8020d6e <__cxa_guard_acquire>
 801b74a:	b138      	cbz	r0, 801b75c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801b74c:	4620      	mov	r0, r4
 801b74e:	f005 fb1a 	bl	8020d86 <__cxa_guard_release>
 801b752:	4a0f      	ldr	r2, [pc, #60]	; (801b790 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801b754:	490f      	ldr	r1, [pc, #60]	; (801b794 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801b756:	4810      	ldr	r0, [pc, #64]	; (801b798 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801b758:	f005 fb02 	bl	8020d60 <__aeabi_atexit>
 801b75c:	4c0f      	ldr	r4, [pc, #60]	; (801b79c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801b75e:	7823      	ldrb	r3, [r4, #0]
 801b760:	f3bf 8f5b 	dmb	ish
 801b764:	07db      	lsls	r3, r3, #31
 801b766:	d40b      	bmi.n	801b780 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801b768:	4620      	mov	r0, r4
 801b76a:	f005 fb00 	bl	8020d6e <__cxa_guard_acquire>
 801b76e:	b138      	cbz	r0, 801b780 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801b770:	4620      	mov	r0, r4
 801b772:	f005 fb08 	bl	8020d86 <__cxa_guard_release>
 801b776:	4a06      	ldr	r2, [pc, #24]	; (801b790 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801b778:	4909      	ldr	r1, [pc, #36]	; (801b7a0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801b77a:	480a      	ldr	r0, [pc, #40]	; (801b7a4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801b77c:	f005 faf0 	bl	8020d60 <__aeabi_atexit>
 801b780:	4b05      	ldr	r3, [pc, #20]	; (801b798 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801b782:	60ab      	str	r3, [r5, #8]
 801b784:	4b07      	ldr	r3, [pc, #28]	; (801b7a4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801b786:	60eb      	str	r3, [r5, #12]
 801b788:	bd38      	pop	{r3, r4, r5, pc}
 801b78a:	bf00      	nop
 801b78c:	24006a5c 	.word	0x24006a5c
 801b790:	24000000 	.word	0x24000000
 801b794:	0801950d 	.word	0x0801950d
 801b798:	2400007c 	.word	0x2400007c
 801b79c:	24006a60 	.word	0x24006a60
 801b7a0:	0801950b 	.word	0x0801950b
 801b7a4:	24000080 	.word	0x24000080

0801b7a8 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 801b7a8:	b510      	push	{r4, lr}
 801b7aa:	4604      	mov	r4, r0
 801b7ac:	f7ff ff88 	bl	801b6c0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801b7b0:	4620      	mov	r0, r4
 801b7b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b7b6:	f7ff bfbd 	b.w	801b734 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801b7bc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801b7bc:	b538      	push	{r3, r4, r5, lr}
 801b7be:	4c15      	ldr	r4, [pc, #84]	; (801b814 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801b7c0:	4605      	mov	r5, r0
 801b7c2:	7823      	ldrb	r3, [r4, #0]
 801b7c4:	f3bf 8f5b 	dmb	ish
 801b7c8:	07da      	lsls	r2, r3, #31
 801b7ca:	d40b      	bmi.n	801b7e4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801b7cc:	4620      	mov	r0, r4
 801b7ce:	f005 face 	bl	8020d6e <__cxa_guard_acquire>
 801b7d2:	b138      	cbz	r0, 801b7e4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801b7d4:	4620      	mov	r0, r4
 801b7d6:	f005 fad6 	bl	8020d86 <__cxa_guard_release>
 801b7da:	4a0f      	ldr	r2, [pc, #60]	; (801b818 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801b7dc:	490f      	ldr	r1, [pc, #60]	; (801b81c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801b7de:	4810      	ldr	r0, [pc, #64]	; (801b820 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801b7e0:	f005 fabe 	bl	8020d60 <__aeabi_atexit>
 801b7e4:	4c0f      	ldr	r4, [pc, #60]	; (801b824 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801b7e6:	7823      	ldrb	r3, [r4, #0]
 801b7e8:	f3bf 8f5b 	dmb	ish
 801b7ec:	07db      	lsls	r3, r3, #31
 801b7ee:	d40b      	bmi.n	801b808 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801b7f0:	4620      	mov	r0, r4
 801b7f2:	f005 fabc 	bl	8020d6e <__cxa_guard_acquire>
 801b7f6:	b138      	cbz	r0, 801b808 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801b7f8:	4620      	mov	r0, r4
 801b7fa:	f005 fac4 	bl	8020d86 <__cxa_guard_release>
 801b7fe:	4a06      	ldr	r2, [pc, #24]	; (801b818 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801b800:	4909      	ldr	r1, [pc, #36]	; (801b828 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801b802:	480a      	ldr	r0, [pc, #40]	; (801b82c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801b804:	f005 faac 	bl	8020d60 <__aeabi_atexit>
 801b808:	4b05      	ldr	r3, [pc, #20]	; (801b820 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801b80a:	622b      	str	r3, [r5, #32]
 801b80c:	4b07      	ldr	r3, [pc, #28]	; (801b82c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801b80e:	626b      	str	r3, [r5, #36]	; 0x24
 801b810:	bd38      	pop	{r3, r4, r5, pc}
 801b812:	bf00      	nop
 801b814:	24006a84 	.word	0x24006a84
 801b818:	24000000 	.word	0x24000000
 801b81c:	08019501 	.word	0x08019501
 801b820:	240000a4 	.word	0x240000a4
 801b824:	24006a88 	.word	0x24006a88
 801b828:	080194ff 	.word	0x080194ff
 801b82c:	240000a8 	.word	0x240000a8

0801b830 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801b830:	b538      	push	{r3, r4, r5, lr}
 801b832:	4c15      	ldr	r4, [pc, #84]	; (801b888 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801b834:	4605      	mov	r5, r0
 801b836:	7823      	ldrb	r3, [r4, #0]
 801b838:	f3bf 8f5b 	dmb	ish
 801b83c:	07da      	lsls	r2, r3, #31
 801b83e:	d40b      	bmi.n	801b858 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801b840:	4620      	mov	r0, r4
 801b842:	f005 fa94 	bl	8020d6e <__cxa_guard_acquire>
 801b846:	b138      	cbz	r0, 801b858 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801b848:	4620      	mov	r0, r4
 801b84a:	f005 fa9c 	bl	8020d86 <__cxa_guard_release>
 801b84e:	4a0f      	ldr	r2, [pc, #60]	; (801b88c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801b850:	490f      	ldr	r1, [pc, #60]	; (801b890 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801b852:	4810      	ldr	r0, [pc, #64]	; (801b894 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801b854:	f005 fa84 	bl	8020d60 <__aeabi_atexit>
 801b858:	4c0f      	ldr	r4, [pc, #60]	; (801b898 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801b85a:	7823      	ldrb	r3, [r4, #0]
 801b85c:	f3bf 8f5b 	dmb	ish
 801b860:	07db      	lsls	r3, r3, #31
 801b862:	d40b      	bmi.n	801b87c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801b864:	4620      	mov	r0, r4
 801b866:	f005 fa82 	bl	8020d6e <__cxa_guard_acquire>
 801b86a:	b138      	cbz	r0, 801b87c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801b86c:	4620      	mov	r0, r4
 801b86e:	f005 fa8a 	bl	8020d86 <__cxa_guard_release>
 801b872:	4a06      	ldr	r2, [pc, #24]	; (801b88c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801b874:	4909      	ldr	r1, [pc, #36]	; (801b89c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801b876:	480a      	ldr	r0, [pc, #40]	; (801b8a0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801b878:	f005 fa72 	bl	8020d60 <__aeabi_atexit>
 801b87c:	4b05      	ldr	r3, [pc, #20]	; (801b894 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801b87e:	61ab      	str	r3, [r5, #24]
 801b880:	4b07      	ldr	r3, [pc, #28]	; (801b8a0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801b882:	61eb      	str	r3, [r5, #28]
 801b884:	bd38      	pop	{r3, r4, r5, pc}
 801b886:	bf00      	nop
 801b888:	24006a64 	.word	0x24006a64
 801b88c:	24000000 	.word	0x24000000
 801b890:	08019505 	.word	0x08019505
 801b894:	24000084 	.word	0x24000084
 801b898:	24006a68 	.word	0x24006a68
 801b89c:	08019503 	.word	0x08019503
 801b8a0:	24000088 	.word	0x24000088

0801b8a4 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 801b8a4:	b510      	push	{r4, lr}
 801b8a6:	4604      	mov	r4, r0
 801b8a8:	f7ff ff88 	bl	801b7bc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801b8ac:	4620      	mov	r0, r4
 801b8ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b8b2:	f7ff bfbd 	b.w	801b830 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801b8b8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 801b8b8:	b538      	push	{r3, r4, r5, lr}
 801b8ba:	4c15      	ldr	r4, [pc, #84]	; (801b910 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 801b8bc:	4605      	mov	r5, r0
 801b8be:	7823      	ldrb	r3, [r4, #0]
 801b8c0:	f3bf 8f5b 	dmb	ish
 801b8c4:	07da      	lsls	r2, r3, #31
 801b8c6:	d40b      	bmi.n	801b8e0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801b8c8:	4620      	mov	r0, r4
 801b8ca:	f005 fa50 	bl	8020d6e <__cxa_guard_acquire>
 801b8ce:	b138      	cbz	r0, 801b8e0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801b8d0:	4620      	mov	r0, r4
 801b8d2:	f005 fa58 	bl	8020d86 <__cxa_guard_release>
 801b8d6:	4a0f      	ldr	r2, [pc, #60]	; (801b914 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801b8d8:	490f      	ldr	r1, [pc, #60]	; (801b918 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 801b8da:	4810      	ldr	r0, [pc, #64]	; (801b91c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801b8dc:	f005 fa40 	bl	8020d60 <__aeabi_atexit>
 801b8e0:	4c0f      	ldr	r4, [pc, #60]	; (801b920 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 801b8e2:	7823      	ldrb	r3, [r4, #0]
 801b8e4:	f3bf 8f5b 	dmb	ish
 801b8e8:	07db      	lsls	r3, r3, #31
 801b8ea:	d40b      	bmi.n	801b904 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801b8ec:	4620      	mov	r0, r4
 801b8ee:	f005 fa3e 	bl	8020d6e <__cxa_guard_acquire>
 801b8f2:	b138      	cbz	r0, 801b904 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801b8f4:	4620      	mov	r0, r4
 801b8f6:	f005 fa46 	bl	8020d86 <__cxa_guard_release>
 801b8fa:	4a06      	ldr	r2, [pc, #24]	; (801b914 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801b8fc:	4909      	ldr	r1, [pc, #36]	; (801b924 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 801b8fe:	480a      	ldr	r0, [pc, #40]	; (801b928 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801b900:	f005 fa2e 	bl	8020d60 <__aeabi_atexit>
 801b904:	4b05      	ldr	r3, [pc, #20]	; (801b91c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801b906:	632b      	str	r3, [r5, #48]	; 0x30
 801b908:	4b07      	ldr	r3, [pc, #28]	; (801b928 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801b90a:	636b      	str	r3, [r5, #52]	; 0x34
 801b90c:	bd38      	pop	{r3, r4, r5, pc}
 801b90e:	bf00      	nop
 801b910:	24006a6c 	.word	0x24006a6c
 801b914:	24000000 	.word	0x24000000
 801b918:	080194f9 	.word	0x080194f9
 801b91c:	2400008c 	.word	0x2400008c
 801b920:	24006a70 	.word	0x24006a70
 801b924:	080194f7 	.word	0x080194f7
 801b928:	24000090 	.word	0x24000090

0801b92c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 801b92c:	b538      	push	{r3, r4, r5, lr}
 801b92e:	4c15      	ldr	r4, [pc, #84]	; (801b984 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 801b930:	4605      	mov	r5, r0
 801b932:	7823      	ldrb	r3, [r4, #0]
 801b934:	f3bf 8f5b 	dmb	ish
 801b938:	07da      	lsls	r2, r3, #31
 801b93a:	d40b      	bmi.n	801b954 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801b93c:	4620      	mov	r0, r4
 801b93e:	f005 fa16 	bl	8020d6e <__cxa_guard_acquire>
 801b942:	b138      	cbz	r0, 801b954 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801b944:	4620      	mov	r0, r4
 801b946:	f005 fa1e 	bl	8020d86 <__cxa_guard_release>
 801b94a:	4a0f      	ldr	r2, [pc, #60]	; (801b988 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801b94c:	490f      	ldr	r1, [pc, #60]	; (801b98c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 801b94e:	4810      	ldr	r0, [pc, #64]	; (801b990 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801b950:	f005 fa06 	bl	8020d60 <__aeabi_atexit>
 801b954:	4c0f      	ldr	r4, [pc, #60]	; (801b994 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 801b956:	7823      	ldrb	r3, [r4, #0]
 801b958:	f3bf 8f5b 	dmb	ish
 801b95c:	07db      	lsls	r3, r3, #31
 801b95e:	d40b      	bmi.n	801b978 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801b960:	4620      	mov	r0, r4
 801b962:	f005 fa04 	bl	8020d6e <__cxa_guard_acquire>
 801b966:	b138      	cbz	r0, 801b978 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801b968:	4620      	mov	r0, r4
 801b96a:	f005 fa0c 	bl	8020d86 <__cxa_guard_release>
 801b96e:	4a06      	ldr	r2, [pc, #24]	; (801b988 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801b970:	4909      	ldr	r1, [pc, #36]	; (801b998 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 801b972:	480a      	ldr	r0, [pc, #40]	; (801b99c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801b974:	f005 f9f4 	bl	8020d60 <__aeabi_atexit>
 801b978:	4b05      	ldr	r3, [pc, #20]	; (801b990 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801b97a:	62ab      	str	r3, [r5, #40]	; 0x28
 801b97c:	4b07      	ldr	r3, [pc, #28]	; (801b99c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801b97e:	62eb      	str	r3, [r5, #44]	; 0x2c
 801b980:	bd38      	pop	{r3, r4, r5, pc}
 801b982:	bf00      	nop
 801b984:	24006a44 	.word	0x24006a44
 801b988:	24000000 	.word	0x24000000
 801b98c:	080194fd 	.word	0x080194fd
 801b990:	24000064 	.word	0x24000064
 801b994:	24006a48 	.word	0x24006a48
 801b998:	080194fb 	.word	0x080194fb
 801b99c:	24000068 	.word	0x24000068

0801b9a0 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 801b9a0:	b510      	push	{r4, lr}
 801b9a2:	4604      	mov	r4, r0
 801b9a4:	f7ff ff88 	bl	801b8b8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 801b9a8:	4620      	mov	r0, r4
 801b9aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b9ae:	f7ff bfbd 	b.w	801b92c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

0801b9b4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801b9b4:	b538      	push	{r3, r4, r5, lr}
 801b9b6:	4c15      	ldr	r4, [pc, #84]	; (801ba0c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801b9b8:	4605      	mov	r5, r0
 801b9ba:	7823      	ldrb	r3, [r4, #0]
 801b9bc:	f3bf 8f5b 	dmb	ish
 801b9c0:	07da      	lsls	r2, r3, #31
 801b9c2:	d40b      	bmi.n	801b9dc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801b9c4:	4620      	mov	r0, r4
 801b9c6:	f005 f9d2 	bl	8020d6e <__cxa_guard_acquire>
 801b9ca:	b138      	cbz	r0, 801b9dc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801b9cc:	4620      	mov	r0, r4
 801b9ce:	f005 f9da 	bl	8020d86 <__cxa_guard_release>
 801b9d2:	4a0f      	ldr	r2, [pc, #60]	; (801ba10 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801b9d4:	490f      	ldr	r1, [pc, #60]	; (801ba14 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801b9d6:	4810      	ldr	r0, [pc, #64]	; (801ba18 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801b9d8:	f005 f9c2 	bl	8020d60 <__aeabi_atexit>
 801b9dc:	4c0f      	ldr	r4, [pc, #60]	; (801ba1c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801b9de:	7823      	ldrb	r3, [r4, #0]
 801b9e0:	f3bf 8f5b 	dmb	ish
 801b9e4:	07db      	lsls	r3, r3, #31
 801b9e6:	d40b      	bmi.n	801ba00 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801b9e8:	4620      	mov	r0, r4
 801b9ea:	f005 f9c0 	bl	8020d6e <__cxa_guard_acquire>
 801b9ee:	b138      	cbz	r0, 801ba00 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801b9f0:	4620      	mov	r0, r4
 801b9f2:	f005 f9c8 	bl	8020d86 <__cxa_guard_release>
 801b9f6:	4a06      	ldr	r2, [pc, #24]	; (801ba10 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801b9f8:	4909      	ldr	r1, [pc, #36]	; (801ba20 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801b9fa:	480a      	ldr	r0, [pc, #40]	; (801ba24 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801b9fc:	f005 f9b0 	bl	8020d60 <__aeabi_atexit>
 801ba00:	4b05      	ldr	r3, [pc, #20]	; (801ba18 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801ba02:	642b      	str	r3, [r5, #64]	; 0x40
 801ba04:	4b07      	ldr	r3, [pc, #28]	; (801ba24 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801ba06:	646b      	str	r3, [r5, #68]	; 0x44
 801ba08:	bd38      	pop	{r3, r4, r5, pc}
 801ba0a:	bf00      	nop
 801ba0c:	24006a74 	.word	0x24006a74
 801ba10:	24000000 	.word	0x24000000
 801ba14:	080194f1 	.word	0x080194f1
 801ba18:	24000094 	.word	0x24000094
 801ba1c:	24006a78 	.word	0x24006a78
 801ba20:	080194ef 	.word	0x080194ef
 801ba24:	24000098 	.word	0x24000098

0801ba28 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801ba28:	b538      	push	{r3, r4, r5, lr}
 801ba2a:	4c15      	ldr	r4, [pc, #84]	; (801ba80 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801ba2c:	4605      	mov	r5, r0
 801ba2e:	7823      	ldrb	r3, [r4, #0]
 801ba30:	f3bf 8f5b 	dmb	ish
 801ba34:	07da      	lsls	r2, r3, #31
 801ba36:	d40b      	bmi.n	801ba50 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801ba38:	4620      	mov	r0, r4
 801ba3a:	f005 f998 	bl	8020d6e <__cxa_guard_acquire>
 801ba3e:	b138      	cbz	r0, 801ba50 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801ba40:	4620      	mov	r0, r4
 801ba42:	f005 f9a0 	bl	8020d86 <__cxa_guard_release>
 801ba46:	4a0f      	ldr	r2, [pc, #60]	; (801ba84 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801ba48:	490f      	ldr	r1, [pc, #60]	; (801ba88 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801ba4a:	4810      	ldr	r0, [pc, #64]	; (801ba8c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801ba4c:	f005 f988 	bl	8020d60 <__aeabi_atexit>
 801ba50:	4c0f      	ldr	r4, [pc, #60]	; (801ba90 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801ba52:	7823      	ldrb	r3, [r4, #0]
 801ba54:	f3bf 8f5b 	dmb	ish
 801ba58:	07db      	lsls	r3, r3, #31
 801ba5a:	d40b      	bmi.n	801ba74 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801ba5c:	4620      	mov	r0, r4
 801ba5e:	f005 f986 	bl	8020d6e <__cxa_guard_acquire>
 801ba62:	b138      	cbz	r0, 801ba74 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801ba64:	4620      	mov	r0, r4
 801ba66:	f005 f98e 	bl	8020d86 <__cxa_guard_release>
 801ba6a:	4a06      	ldr	r2, [pc, #24]	; (801ba84 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801ba6c:	4909      	ldr	r1, [pc, #36]	; (801ba94 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801ba6e:	480a      	ldr	r0, [pc, #40]	; (801ba98 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801ba70:	f005 f976 	bl	8020d60 <__aeabi_atexit>
 801ba74:	4b05      	ldr	r3, [pc, #20]	; (801ba8c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801ba76:	63ab      	str	r3, [r5, #56]	; 0x38
 801ba78:	4b07      	ldr	r3, [pc, #28]	; (801ba98 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801ba7a:	63eb      	str	r3, [r5, #60]	; 0x3c
 801ba7c:	bd38      	pop	{r3, r4, r5, pc}
 801ba7e:	bf00      	nop
 801ba80:	24006a54 	.word	0x24006a54
 801ba84:	24000000 	.word	0x24000000
 801ba88:	080194f5 	.word	0x080194f5
 801ba8c:	24000074 	.word	0x24000074
 801ba90:	24006a58 	.word	0x24006a58
 801ba94:	080194f3 	.word	0x080194f3
 801ba98:	24000078 	.word	0x24000078

0801ba9c <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 801ba9c:	b510      	push	{r4, lr}
 801ba9e:	4604      	mov	r4, r0
 801baa0:	f7ff ff88 	bl	801b9b4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801baa4:	4620      	mov	r0, r4
 801baa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801baaa:	f7ff bfbd 	b.w	801ba28 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801bab0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801bab0:	b538      	push	{r3, r4, r5, lr}
 801bab2:	4c15      	ldr	r4, [pc, #84]	; (801bb08 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801bab4:	4605      	mov	r5, r0
 801bab6:	7823      	ldrb	r3, [r4, #0]
 801bab8:	f3bf 8f5b 	dmb	ish
 801babc:	07da      	lsls	r2, r3, #31
 801babe:	d40b      	bmi.n	801bad8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801bac0:	4620      	mov	r0, r4
 801bac2:	f005 f954 	bl	8020d6e <__cxa_guard_acquire>
 801bac6:	b138      	cbz	r0, 801bad8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801bac8:	4620      	mov	r0, r4
 801baca:	f005 f95c 	bl	8020d86 <__cxa_guard_release>
 801bace:	4a0f      	ldr	r2, [pc, #60]	; (801bb0c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801bad0:	490f      	ldr	r1, [pc, #60]	; (801bb10 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801bad2:	4810      	ldr	r0, [pc, #64]	; (801bb14 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801bad4:	f005 f944 	bl	8020d60 <__aeabi_atexit>
 801bad8:	4c0f      	ldr	r4, [pc, #60]	; (801bb18 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801bada:	7823      	ldrb	r3, [r4, #0]
 801badc:	f3bf 8f5b 	dmb	ish
 801bae0:	07db      	lsls	r3, r3, #31
 801bae2:	d40b      	bmi.n	801bafc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801bae4:	4620      	mov	r0, r4
 801bae6:	f005 f942 	bl	8020d6e <__cxa_guard_acquire>
 801baea:	b138      	cbz	r0, 801bafc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801baec:	4620      	mov	r0, r4
 801baee:	f005 f94a 	bl	8020d86 <__cxa_guard_release>
 801baf2:	4a06      	ldr	r2, [pc, #24]	; (801bb0c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801baf4:	4909      	ldr	r1, [pc, #36]	; (801bb1c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801baf6:	480a      	ldr	r0, [pc, #40]	; (801bb20 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801baf8:	f005 f932 	bl	8020d60 <__aeabi_atexit>
 801bafc:	4b05      	ldr	r3, [pc, #20]	; (801bb14 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801bafe:	652b      	str	r3, [r5, #80]	; 0x50
 801bb00:	4b07      	ldr	r3, [pc, #28]	; (801bb20 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801bb02:	656b      	str	r3, [r5, #84]	; 0x54
 801bb04:	bd38      	pop	{r3, r4, r5, pc}
 801bb06:	bf00      	nop
 801bb08:	24006a4c 	.word	0x24006a4c
 801bb0c:	24000000 	.word	0x24000000
 801bb10:	080194e9 	.word	0x080194e9
 801bb14:	2400006c 	.word	0x2400006c
 801bb18:	24006a50 	.word	0x24006a50
 801bb1c:	080194e7 	.word	0x080194e7
 801bb20:	24000070 	.word	0x24000070

0801bb24 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 801bb24:	b538      	push	{r3, r4, r5, lr}
 801bb26:	4c15      	ldr	r4, [pc, #84]	; (801bb7c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801bb28:	4605      	mov	r5, r0
 801bb2a:	7823      	ldrb	r3, [r4, #0]
 801bb2c:	f3bf 8f5b 	dmb	ish
 801bb30:	07da      	lsls	r2, r3, #31
 801bb32:	d40b      	bmi.n	801bb4c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801bb34:	4620      	mov	r0, r4
 801bb36:	f005 f91a 	bl	8020d6e <__cxa_guard_acquire>
 801bb3a:	b138      	cbz	r0, 801bb4c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801bb3c:	4620      	mov	r0, r4
 801bb3e:	f005 f922 	bl	8020d86 <__cxa_guard_release>
 801bb42:	4a0f      	ldr	r2, [pc, #60]	; (801bb80 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801bb44:	490f      	ldr	r1, [pc, #60]	; (801bb84 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801bb46:	4810      	ldr	r0, [pc, #64]	; (801bb88 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801bb48:	f005 f90a 	bl	8020d60 <__aeabi_atexit>
 801bb4c:	4c0f      	ldr	r4, [pc, #60]	; (801bb8c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801bb4e:	7823      	ldrb	r3, [r4, #0]
 801bb50:	f3bf 8f5b 	dmb	ish
 801bb54:	07db      	lsls	r3, r3, #31
 801bb56:	d40b      	bmi.n	801bb70 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801bb58:	4620      	mov	r0, r4
 801bb5a:	f005 f908 	bl	8020d6e <__cxa_guard_acquire>
 801bb5e:	b138      	cbz	r0, 801bb70 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801bb60:	4620      	mov	r0, r4
 801bb62:	f005 f910 	bl	8020d86 <__cxa_guard_release>
 801bb66:	4a06      	ldr	r2, [pc, #24]	; (801bb80 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801bb68:	4909      	ldr	r1, [pc, #36]	; (801bb90 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801bb6a:	480a      	ldr	r0, [pc, #40]	; (801bb94 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801bb6c:	f005 f8f8 	bl	8020d60 <__aeabi_atexit>
 801bb70:	4b05      	ldr	r3, [pc, #20]	; (801bb88 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801bb72:	64ab      	str	r3, [r5, #72]	; 0x48
 801bb74:	4b07      	ldr	r3, [pc, #28]	; (801bb94 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801bb76:	64eb      	str	r3, [r5, #76]	; 0x4c
 801bb78:	bd38      	pop	{r3, r4, r5, pc}
 801bb7a:	bf00      	nop
 801bb7c:	24006a3c 	.word	0x24006a3c
 801bb80:	24000000 	.word	0x24000000
 801bb84:	080194ed 	.word	0x080194ed
 801bb88:	2400005c 	.word	0x2400005c
 801bb8c:	24006a40 	.word	0x24006a40
 801bb90:	080194eb 	.word	0x080194eb
 801bb94:	24000060 	.word	0x24000060

0801bb98 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 801bb98:	b510      	push	{r4, lr}
 801bb9a:	4604      	mov	r4, r0
 801bb9c:	f7ff ff88 	bl	801bab0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801bba0:	4620      	mov	r0, r4
 801bba2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bba6:	f7ff bfbd 	b.w	801bb24 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

0801bbaa <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 801bbaa:	b510      	push	{r4, lr}
 801bbac:	4604      	mov	r4, r0
 801bbae:	f7ff fff3 	bl	801bb98 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 801bbb2:	4620      	mov	r0, r4
 801bbb4:	f7ff ff72 	bl	801ba9c <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 801bbb8:	4620      	mov	r0, r4
 801bbba:	f7ff fe73 	bl	801b8a4 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 801bbbe:	4620      	mov	r0, r4
 801bbc0:	f7ff fdf2 	bl	801b7a8 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 801bbc4:	4620      	mov	r0, r4
 801bbc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bbca:	f7ff bee9 	b.w	801b9a0 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

0801bbd0 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev>:
 801bbd0:	b538      	push	{r3, r4, r5, lr}
 801bbd2:	4c0b      	ldr	r4, [pc, #44]	; (801bc00 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x30>)
 801bbd4:	4605      	mov	r5, r0
 801bbd6:	7823      	ldrb	r3, [r4, #0]
 801bbd8:	f3bf 8f5b 	dmb	ish
 801bbdc:	07db      	lsls	r3, r3, #31
 801bbde:	d40b      	bmi.n	801bbf8 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x28>
 801bbe0:	4620      	mov	r0, r4
 801bbe2:	f005 f8c4 	bl	8020d6e <__cxa_guard_acquire>
 801bbe6:	b138      	cbz	r0, 801bbf8 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x28>
 801bbe8:	4620      	mov	r0, r4
 801bbea:	f005 f8cc 	bl	8020d86 <__cxa_guard_release>
 801bbee:	4a05      	ldr	r2, [pc, #20]	; (801bc04 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x34>)
 801bbf0:	4905      	ldr	r1, [pc, #20]	; (801bc08 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x38>)
 801bbf2:	4806      	ldr	r0, [pc, #24]	; (801bc0c <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x3c>)
 801bbf4:	f005 f8b4 	bl	8020d60 <__aeabi_atexit>
 801bbf8:	4b04      	ldr	r3, [pc, #16]	; (801bc0c <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x3c>)
 801bbfa:	65ab      	str	r3, [r5, #88]	; 0x58
 801bbfc:	bd38      	pop	{r3, r4, r5, pc}
 801bbfe:	bf00      	nop
 801bc00:	24006a30 	.word	0x24006a30
 801bc04:	24000000 	.word	0x24000000
 801bc08:	080194e5 	.word	0x080194e5
 801bc0c:	24000054 	.word	0x24000054

0801bc10 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv>:
 801bc10:	b538      	push	{r3, r4, r5, lr}
 801bc12:	4c0b      	ldr	r4, [pc, #44]	; (801bc40 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x30>)
 801bc14:	4605      	mov	r5, r0
 801bc16:	7823      	ldrb	r3, [r4, #0]
 801bc18:	f3bf 8f5b 	dmb	ish
 801bc1c:	07db      	lsls	r3, r3, #31
 801bc1e:	d40b      	bmi.n	801bc38 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x28>
 801bc20:	4620      	mov	r0, r4
 801bc22:	f005 f8a4 	bl	8020d6e <__cxa_guard_acquire>
 801bc26:	b138      	cbz	r0, 801bc38 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x28>
 801bc28:	4620      	mov	r0, r4
 801bc2a:	f005 f8ac 	bl	8020d86 <__cxa_guard_release>
 801bc2e:	4a05      	ldr	r2, [pc, #20]	; (801bc44 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x34>)
 801bc30:	4905      	ldr	r1, [pc, #20]	; (801bc48 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x38>)
 801bc32:	4806      	ldr	r0, [pc, #24]	; (801bc4c <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x3c>)
 801bc34:	f005 f894 	bl	8020d60 <__aeabi_atexit>
 801bc38:	4b04      	ldr	r3, [pc, #16]	; (801bc4c <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x3c>)
 801bc3a:	65eb      	str	r3, [r5, #92]	; 0x5c
 801bc3c:	bd38      	pop	{r3, r4, r5, pc}
 801bc3e:	bf00      	nop
 801bc40:	24006a34 	.word	0x24006a34
 801bc44:	24000000 	.word	0x24000000
 801bc48:	080194e3 	.word	0x080194e3
 801bc4c:	24000058 	.word	0x24000058

0801bc50 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev>:
 801bc50:	b570      	push	{r4, r5, r6, lr}
 801bc52:	4d0c      	ldr	r5, [pc, #48]	; (801bc84 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x34>)
 801bc54:	4606      	mov	r6, r0
 801bc56:	4c0c      	ldr	r4, [pc, #48]	; (801bc88 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x38>)
 801bc58:	782b      	ldrb	r3, [r5, #0]
 801bc5a:	f3bf 8f5b 	dmb	ish
 801bc5e:	f013 0f01 	tst.w	r3, #1
 801bc62:	d10d      	bne.n	801bc80 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x30>
 801bc64:	4628      	mov	r0, r5
 801bc66:	f005 f882 	bl	8020d6e <__cxa_guard_acquire>
 801bc6a:	b148      	cbz	r0, 801bc80 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x30>
 801bc6c:	4b07      	ldr	r3, [pc, #28]	; (801bc8c <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x3c>)
 801bc6e:	4628      	mov	r0, r5
 801bc70:	6023      	str	r3, [r4, #0]
 801bc72:	f005 f888 	bl	8020d86 <__cxa_guard_release>
 801bc76:	4a06      	ldr	r2, [pc, #24]	; (801bc90 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x40>)
 801bc78:	4620      	mov	r0, r4
 801bc7a:	4906      	ldr	r1, [pc, #24]	; (801bc94 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x44>)
 801bc7c:	f005 f870 	bl	8020d60 <__aeabi_atexit>
 801bc80:	6634      	str	r4, [r6, #96]	; 0x60
 801bc82:	bd70      	pop	{r4, r5, r6, pc}
 801bc84:	24006a38 	.word	0x24006a38
 801bc88:	24006a8c 	.word	0x24006a8c
 801bc8c:	080235d8 	.word	0x080235d8
 801bc90:	24000000 	.word	0x24000000
 801bc94:	080194e1 	.word	0x080194e1

0801bc98 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_AllEv>:
 801bc98:	b510      	push	{r4, lr}
 801bc9a:	4604      	mov	r4, r0
 801bc9c:	f7ff ff98 	bl	801bbd0 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev>
 801bca0:	4620      	mov	r0, r4
 801bca2:	f7ff ffb5 	bl	801bc10 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv>
 801bca6:	4620      	mov	r0, r4
 801bca8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bcac:	f7ff bfd0 	b.w	801bc50 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev>

0801bcb0 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 801bcb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bcb4:	b087      	sub	sp, #28
 801bcb6:	788d      	ldrb	r5, [r1, #2]
 801bcb8:	f891 9000 	ldrb.w	r9, [r1]
 801bcbc:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 801bcc0:	9501      	str	r5, [sp, #4]
 801bcc2:	784d      	ldrb	r5, [r1, #1]
 801bcc4:	9203      	str	r2, [sp, #12]
 801bcc6:	9502      	str	r5, [sp, #8]
 801bcc8:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 801bccc:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
 801bcd0:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 801bcd4:	f89d e058 	ldrb.w	lr, [sp, #88]	; 0x58
 801bcd8:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	; 0x48
 801bcdc:	fb06 0708 	mla	r7, r6, r8, r0
 801bce0:	2e00      	cmp	r6, #0
 801bce2:	eb02 0a07 	add.w	sl, r2, r7
 801bce6:	ea4f 2205 	mov.w	r2, r5, lsl #8
 801bcea:	9d01      	ldr	r5, [sp, #4]
 801bcec:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 801bcf0:	ea45 0509 	orr.w	r5, r5, r9
 801bcf4:	9505      	str	r5, [sp, #20]
 801bcf6:	f2c0 80b2 	blt.w	801be5e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 801bcfa:	45b3      	cmp	fp, r6
 801bcfc:	f340 80af 	ble.w	801be5e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 801bd00:	2800      	cmp	r0, #0
 801bd02:	f2c0 80aa 	blt.w	801be5a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 801bd06:	4580      	cmp	r8, r0
 801bd08:	f340 80a7 	ble.w	801be5a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 801bd0c:	9a03      	ldr	r2, [sp, #12]
 801bd0e:	5dd7      	ldrb	r7, [r2, r7]
 801bd10:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801bd14:	441f      	add	r7, r3
 801bd16:	1c42      	adds	r2, r0, #1
 801bd18:	f100 80a4 	bmi.w	801be64 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801bd1c:	4590      	cmp	r8, r2
 801bd1e:	f340 80a1 	ble.w	801be64 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801bd22:	2c00      	cmp	r4, #0
 801bd24:	f000 809e 	beq.w	801be64 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801bd28:	f89a 5001 	ldrb.w	r5, [sl, #1]
 801bd2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801bd30:	441d      	add	r5, r3
 801bd32:	3601      	adds	r6, #1
 801bd34:	f100 809a 	bmi.w	801be6c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801bd38:	45b3      	cmp	fp, r6
 801bd3a:	f340 8097 	ble.w	801be6c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801bd3e:	f1bc 0f00 	cmp.w	ip, #0
 801bd42:	f000 8093 	beq.w	801be6c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801bd46:	2800      	cmp	r0, #0
 801bd48:	f2c0 808e 	blt.w	801be68 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 801bd4c:	4580      	cmp	r8, r0
 801bd4e:	f340 808b 	ble.w	801be68 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 801bd52:	f81a 6008 	ldrb.w	r6, [sl, r8]
 801bd56:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801bd5a:	441e      	add	r6, r3
 801bd5c:	3001      	adds	r0, #1
 801bd5e:	f100 8088 	bmi.w	801be72 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801bd62:	4580      	cmp	r8, r0
 801bd64:	f340 8085 	ble.w	801be72 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801bd68:	2c00      	cmp	r4, #0
 801bd6a:	f000 8082 	beq.w	801be72 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801bd6e:	44d0      	add	r8, sl
 801bd70:	f898 2001 	ldrb.w	r2, [r8, #1]
 801bd74:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801bd78:	4413      	add	r3, r2
 801bd7a:	b2a4      	uxth	r4, r4
 801bd7c:	f895 a000 	ldrb.w	sl, [r5]
 801bd80:	fa1f fc8c 	uxth.w	ip, ip
 801bd84:	fb04 fb0c 	mul.w	fp, r4, ip
 801bd88:	0124      	lsls	r4, r4, #4
 801bd8a:	ebcb 1c0c 	rsb	ip, fp, ip, lsl #4
 801bd8e:	f5c4 7880 	rsb	r8, r4, #256	; 0x100
 801bd92:	eba4 040b 	sub.w	r4, r4, fp
 801bd96:	fa1f f08c 	uxth.w	r0, ip
 801bd9a:	b2a2      	uxth	r2, r4
 801bd9c:	783c      	ldrb	r4, [r7, #0]
 801bd9e:	eba8 0800 	sub.w	r8, r8, r0
 801bda2:	fa1f fc8e 	uxth.w	ip, lr
 801bda6:	fb02 fa0a 	mul.w	sl, r2, sl
 801bdaa:	ea6f 0e0e 	mvn.w	lr, lr
 801bdae:	fa1f f888 	uxth.w	r8, r8
 801bdb2:	fa5f fe8e 	uxtb.w	lr, lr
 801bdb6:	fb08 aa04 	mla	sl, r8, r4, sl
 801bdba:	7834      	ldrb	r4, [r6, #0]
 801bdbc:	fb19 f90e 	smulbb	r9, r9, lr
 801bdc0:	fb00 aa04 	mla	sl, r0, r4, sl
 801bdc4:	781c      	ldrb	r4, [r3, #0]
 801bdc6:	fb0b a404 	mla	r4, fp, r4, sl
 801bdca:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801bdce:	fb04 990c 	mla	r9, r4, ip, r9
 801bdd2:	fa1f f989 	uxth.w	r9, r9
 801bdd6:	f109 0401 	add.w	r4, r9, #1
 801bdda:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 801bdde:	ea4f 2929 	mov.w	r9, r9, asr #8
 801bde2:	f881 9000 	strb.w	r9, [r1]
 801bde6:	f895 9001 	ldrb.w	r9, [r5, #1]
 801bdea:	787c      	ldrb	r4, [r7, #1]
 801bdec:	fb02 f909 	mul.w	r9, r2, r9
 801bdf0:	fb08 9904 	mla	r9, r8, r4, r9
 801bdf4:	7874      	ldrb	r4, [r6, #1]
 801bdf6:	fb00 9904 	mla	r9, r0, r4, r9
 801bdfa:	785c      	ldrb	r4, [r3, #1]
 801bdfc:	fb0b 9404 	mla	r4, fp, r4, r9
 801be00:	f3c4 2a07 	ubfx	sl, r4, #8, #8
 801be04:	9c02      	ldr	r4, [sp, #8]
 801be06:	fb14 f90e 	smulbb	r9, r4, lr
 801be0a:	fb0a 940c 	mla	r4, sl, ip, r9
 801be0e:	b2a4      	uxth	r4, r4
 801be10:	f104 0901 	add.w	r9, r4, #1
 801be14:	eb09 2414 	add.w	r4, r9, r4, lsr #8
 801be18:	1224      	asrs	r4, r4, #8
 801be1a:	704c      	strb	r4, [r1, #1]
 801be1c:	78ad      	ldrb	r5, [r5, #2]
 801be1e:	78bc      	ldrb	r4, [r7, #2]
 801be20:	436a      	muls	r2, r5
 801be22:	789b      	ldrb	r3, [r3, #2]
 801be24:	fb08 2204 	mla	r2, r8, r4, r2
 801be28:	78b4      	ldrb	r4, [r6, #2]
 801be2a:	fb00 2004 	mla	r0, r0, r4, r2
 801be2e:	fb0b 0b03 	mla	fp, fp, r3, r0
 801be32:	9b01      	ldr	r3, [sp, #4]
 801be34:	fb13 fe0e 	smulbb	lr, r3, lr
 801be38:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 801be3c:	fb0b ec0c 	mla	ip, fp, ip, lr
 801be40:	fa1f fc8c 	uxth.w	ip, ip
 801be44:	f10c 0e01 	add.w	lr, ip, #1
 801be48:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 801be4c:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801be50:	f881 c002 	strb.w	ip, [r1, #2]
 801be54:	b007      	add	sp, #28
 801be56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801be5a:	af05      	add	r7, sp, #20
 801be5c:	e75b      	b.n	801bd16 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x66>
 801be5e:	ad05      	add	r5, sp, #20
 801be60:	462f      	mov	r7, r5
 801be62:	e766      	b.n	801bd32 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 801be64:	ad05      	add	r5, sp, #20
 801be66:	e764      	b.n	801bd32 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 801be68:	ae05      	add	r6, sp, #20
 801be6a:	e777      	b.n	801bd5c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xac>
 801be6c:	ab05      	add	r3, sp, #20
 801be6e:	461e      	mov	r6, r3
 801be70:	e783      	b.n	801bd7a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>
 801be72:	ab05      	add	r3, sp, #20
 801be74:	e781      	b.n	801bd7a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>

0801be76 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801be76:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801be7a:	b093      	sub	sp, #76	; 0x4c
 801be7c:	9210      	str	r2, [sp, #64]	; 0x40
 801be7e:	9309      	str	r3, [sp, #36]	; 0x24
 801be80:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801be82:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 801be86:	9011      	str	r0, [sp, #68]	; 0x44
 801be88:	930e      	str	r3, [sp, #56]	; 0x38
 801be8a:	6850      	ldr	r0, [r2, #4]
 801be8c:	910d      	str	r1, [sp, #52]	; 0x34
 801be8e:	6812      	ldr	r2, [r2, #0]
 801be90:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 801be94:	fb00 1303 	mla	r3, r0, r3, r1
 801be98:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801be9c:	18d3      	adds	r3, r2, r3
 801be9e:	930a      	str	r3, [sp, #40]	; 0x28
 801bea0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801bea2:	681b      	ldr	r3, [r3, #0]
 801bea4:	930c      	str	r3, [sp, #48]	; 0x30
 801bea6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801bea8:	685c      	ldr	r4, [r3, #4]
 801beaa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801beac:	3404      	adds	r4, #4
 801beae:	43db      	mvns	r3, r3
 801beb0:	b2db      	uxtb	r3, r3
 801beb2:	930b      	str	r3, [sp, #44]	; 0x2c
 801beb4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801beb6:	2b00      	cmp	r3, #0
 801beb8:	dc03      	bgt.n	801bec2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801beba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bebc:	2b00      	cmp	r3, #0
 801bebe:	f340 8250 	ble.w	801c362 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 801bec2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801bec4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801bec8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801becc:	1e48      	subs	r0, r1, #1
 801bece:	1e55      	subs	r5, r2, #1
 801bed0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bed2:	2b00      	cmp	r3, #0
 801bed4:	f340 80ee 	ble.w	801c0b4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 801bed8:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801beda:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801bedc:	1436      	asrs	r6, r6, #16
 801bede:	ea4f 4323 	mov.w	r3, r3, asr #16
 801bee2:	d406      	bmi.n	801bef2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801bee4:	4286      	cmp	r6, r0
 801bee6:	da04      	bge.n	801bef2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801bee8:	2b00      	cmp	r3, #0
 801beea:	db02      	blt.n	801bef2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801beec:	42ab      	cmp	r3, r5
 801beee:	f2c0 80e2 	blt.w	801c0b6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 801bef2:	3601      	adds	r6, #1
 801bef4:	f100 80cf 	bmi.w	801c096 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801bef8:	42b1      	cmp	r1, r6
 801befa:	f2c0 80cc 	blt.w	801c096 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801befe:	3301      	adds	r3, #1
 801bf00:	f100 80c9 	bmi.w	801c096 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801bf04:	429a      	cmp	r2, r3
 801bf06:	f2c0 80c6 	blt.w	801c096 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801bf0a:	e9dd b609 	ldrd	fp, r6, [sp, #36]	; 0x24
 801bf0e:	f1bb 0f00 	cmp.w	fp, #0
 801bf12:	f340 80f1 	ble.w	801c0f8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 801bf16:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801bf18:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801bf1a:	9824      	ldr	r0, [sp, #144]	; 0x90
 801bf1c:	141d      	asrs	r5, r3, #16
 801bf1e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801bf20:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801bf24:	68c7      	ldr	r7, [r0, #12]
 801bf26:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801bf28:	1418      	asrs	r0, r3, #16
 801bf2a:	f3c3 3803 	ubfx	r8, r3, #12, #4
 801bf2e:	6892      	ldr	r2, [r2, #8]
 801bf30:	f100 8137 	bmi.w	801c1a2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801bf34:	f102 3cff 	add.w	ip, r2, #4294967295
 801bf38:	4560      	cmp	r0, ip
 801bf3a:	f280 8132 	bge.w	801c1a2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801bf3e:	2d00      	cmp	r5, #0
 801bf40:	f2c0 812f 	blt.w	801c1a2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801bf44:	f107 3cff 	add.w	ip, r7, #4294967295
 801bf48:	4565      	cmp	r5, ip
 801bf4a:	f280 812a 	bge.w	801c1a2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801bf4e:	b212      	sxth	r2, r2
 801bf50:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801bf52:	fb05 0002 	mla	r0, r5, r2, r0
 801bf56:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801bf58:	f817 c000 	ldrb.w	ip, [r7, r0]
 801bf5c:	4405      	add	r5, r0
 801bf5e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801bf62:	eb04 0e0c 	add.w	lr, r4, ip
 801bf66:	f1b8 0f00 	cmp.w	r8, #0
 801bf6a:	f000 810c 	beq.w	801c186 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 801bf6e:	786f      	ldrb	r7, [r5, #1]
 801bf70:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801bf74:	4427      	add	r7, r4
 801bf76:	2900      	cmp	r1, #0
 801bf78:	f000 810d 	beq.w	801c196 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 801bf7c:	18a8      	adds	r0, r5, r2
 801bf7e:	5caa      	ldrb	r2, [r5, r2]
 801bf80:	7840      	ldrb	r0, [r0, #1]
 801bf82:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801bf86:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801bf8a:	4422      	add	r2, r4
 801bf8c:	4420      	add	r0, r4
 801bf8e:	fa1f f388 	uxth.w	r3, r8
 801bf92:	f814 a00c 	ldrb.w	sl, [r4, ip]
 801bf96:	b289      	uxth	r1, r1
 801bf98:	f897 c000 	ldrb.w	ip, [r7]
 801bf9c:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 801bfa0:	fb03 f901 	mul.w	r9, r3, r1
 801bfa4:	011b      	lsls	r3, r3, #4
 801bfa6:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801bfaa:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 801bfae:	eba3 0309 	sub.w	r3, r3, r9
 801bfb2:	b289      	uxth	r1, r1
 801bfb4:	b29b      	uxth	r3, r3
 801bfb6:	eba8 0801 	sub.w	r8, r8, r1
 801bfba:	fb03 fc0c 	mul.w	ip, r3, ip
 801bfbe:	fa1f f888 	uxth.w	r8, r8
 801bfc2:	930f      	str	r3, [sp, #60]	; 0x3c
 801bfc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bfc6:	fb08 cc0a 	mla	ip, r8, sl, ip
 801bfca:	f892 a000 	ldrb.w	sl, [r2]
 801bfce:	fb01 cc0a 	mla	ip, r1, sl, ip
 801bfd2:	f890 a000 	ldrb.w	sl, [r0]
 801bfd6:	fb09 cc0a 	mla	ip, r9, sl, ip
 801bfda:	f896 a000 	ldrb.w	sl, [r6]
 801bfde:	fb1a fa03 	smulbb	sl, sl, r3
 801bfe2:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801bfe6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801bfe8:	fb0c ac05 	mla	ip, ip, r5, sl
 801bfec:	fa1f fc8c 	uxth.w	ip, ip
 801bff0:	f10c 0a01 	add.w	sl, ip, #1
 801bff4:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 801bff8:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801bffc:	f886 a000 	strb.w	sl, [r6]
 801c000:	f897 c001 	ldrb.w	ip, [r7, #1]
 801c004:	f89e a001 	ldrb.w	sl, [lr, #1]
 801c008:	fb03 fc0c 	mul.w	ip, r3, ip
 801c00c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c00e:	fb08 cc0a 	mla	ip, r8, sl, ip
 801c012:	f892 a001 	ldrb.w	sl, [r2, #1]
 801c016:	fb01 cc0a 	mla	ip, r1, sl, ip
 801c01a:	f890 a001 	ldrb.w	sl, [r0, #1]
 801c01e:	fb09 cc0a 	mla	ip, r9, sl, ip
 801c022:	f896 a001 	ldrb.w	sl, [r6, #1]
 801c026:	fb1a fa03 	smulbb	sl, sl, r3
 801c02a:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801c02e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c030:	fb0c ac05 	mla	ip, ip, r5, sl
 801c034:	fa1f fc8c 	uxth.w	ip, ip
 801c038:	f10c 0a01 	add.w	sl, ip, #1
 801c03c:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 801c040:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c044:	f886 c001 	strb.w	ip, [r6, #1]
 801c048:	78bf      	ldrb	r7, [r7, #2]
 801c04a:	f89e c002 	ldrb.w	ip, [lr, #2]
 801c04e:	437b      	muls	r3, r7
 801c050:	fb08 330c 	mla	r3, r8, ip, r3
 801c054:	f892 c002 	ldrb.w	ip, [r2, #2]
 801c058:	7882      	ldrb	r2, [r0, #2]
 801c05a:	fb01 310c 	mla	r1, r1, ip, r3
 801c05e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c060:	fb09 1902 	mla	r9, r9, r2, r1
 801c064:	78b1      	ldrb	r1, [r6, #2]
 801c066:	fb11 f103 	smulbb	r1, r1, r3
 801c06a:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801c06e:	fb09 1505 	mla	r5, r9, r5, r1
 801c072:	b2ad      	uxth	r5, r5
 801c074:	1c6b      	adds	r3, r5, #1
 801c076:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801c07a:	122d      	asrs	r5, r5, #8
 801c07c:	70b5      	strb	r5, [r6, #2]
 801c07e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801c080:	3603      	adds	r6, #3
 801c082:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801c084:	f10b 3bff 	add.w	fp, fp, #4294967295
 801c088:	4413      	add	r3, r2
 801c08a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801c08c:	931d      	str	r3, [sp, #116]	; 0x74
 801c08e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801c090:	4413      	add	r3, r2
 801c092:	931e      	str	r3, [sp, #120]	; 0x78
 801c094:	e73b      	b.n	801bf0e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801c096:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801c098:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 801c09a:	4433      	add	r3, r6
 801c09c:	9e20      	ldr	r6, [sp, #128]	; 0x80
 801c09e:	931d      	str	r3, [sp, #116]	; 0x74
 801c0a0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801c0a2:	4433      	add	r3, r6
 801c0a4:	931e      	str	r3, [sp, #120]	; 0x78
 801c0a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c0a8:	3b01      	subs	r3, #1
 801c0aa:	9309      	str	r3, [sp, #36]	; 0x24
 801c0ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c0ae:	3303      	adds	r3, #3
 801c0b0:	930a      	str	r3, [sp, #40]	; 0x28
 801c0b2:	e70d      	b.n	801bed0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801c0b4:	d028      	beq.n	801c108 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 801c0b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c0b8:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801c0ba:	3b01      	subs	r3, #1
 801c0bc:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 801c0be:	fb00 5003 	mla	r0, r0, r3, r5
 801c0c2:	1400      	asrs	r0, r0, #16
 801c0c4:	f53f af21 	bmi.w	801bf0a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801c0c8:	3901      	subs	r1, #1
 801c0ca:	4288      	cmp	r0, r1
 801c0cc:	f6bf af1d 	bge.w	801bf0a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801c0d0:	9920      	ldr	r1, [sp, #128]	; 0x80
 801c0d2:	981e      	ldr	r0, [sp, #120]	; 0x78
 801c0d4:	fb01 0303 	mla	r3, r1, r3, r0
 801c0d8:	141b      	asrs	r3, r3, #16
 801c0da:	f53f af16 	bmi.w	801bf0a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801c0de:	3a01      	subs	r2, #1
 801c0e0:	4293      	cmp	r3, r2
 801c0e2:	f6bf af12 	bge.w	801bf0a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801c0e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c0e8:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801c0ec:	1cdf      	adds	r7, r3, #3
 801c0ee:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 801c0f2:	f1b9 0f00 	cmp.w	r9, #0
 801c0f6:	dc73      	bgt.n	801c1e0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 801c0f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c0fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801c0fc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c100:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c104:	441a      	add	r2, r3
 801c106:	920a      	str	r2, [sp, #40]	; 0x28
 801c108:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c10a:	2b00      	cmp	r3, #0
 801c10c:	f340 8129 	ble.w	801c362 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 801c110:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c114:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801c116:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c11a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c11e:	eef0 6a62 	vmov.f32	s13, s5
 801c122:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801c126:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c12a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c12e:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
 801c132:	eef0 6a43 	vmov.f32	s13, s6
 801c136:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c13a:	edcd 6a1e 	vstr	s13, [sp, #120]	; 0x78
 801c13e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c142:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c146:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c14a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c14e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c152:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c156:	ee12 2a90 	vmov	r2, s5
 801c15a:	eef0 2a47 	vmov.f32	s5, s14
 801c15e:	fb92 f3f3 	sdiv	r3, r2, r3
 801c162:	ee13 2a10 	vmov	r2, s6
 801c166:	931f      	str	r3, [sp, #124]	; 0x7c
 801c168:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801c16a:	eeb0 3a67 	vmov.f32	s6, s15
 801c16e:	fb92 f3f3 	sdiv	r3, r2, r3
 801c172:	9320      	str	r3, [sp, #128]	; 0x80
 801c174:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c176:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c178:	3b01      	subs	r3, #1
 801c17a:	930d      	str	r3, [sp, #52]	; 0x34
 801c17c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801c17e:	bf08      	it	eq
 801c180:	4613      	moveq	r3, r2
 801c182:	9309      	str	r3, [sp, #36]	; 0x24
 801c184:	e696      	b.n	801beb4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801c186:	b149      	cbz	r1, 801c19c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 801c188:	5caa      	ldrb	r2, [r5, r2]
 801c18a:	4670      	mov	r0, lr
 801c18c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c190:	4422      	add	r2, r4
 801c192:	4677      	mov	r7, lr
 801c194:	e6fb      	b.n	801bf8e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801c196:	4670      	mov	r0, lr
 801c198:	4672      	mov	r2, lr
 801c19a:	e6f8      	b.n	801bf8e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801c19c:	4670      	mov	r0, lr
 801c19e:	4672      	mov	r2, lr
 801c1a0:	e7f7      	b.n	801c192 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 801c1a2:	f110 0c01 	adds.w	ip, r0, #1
 801c1a6:	f53f af6a 	bmi.w	801c07e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801c1aa:	4562      	cmp	r2, ip
 801c1ac:	f6ff af67 	blt.w	801c07e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801c1b0:	f115 0c01 	adds.w	ip, r5, #1
 801c1b4:	f53f af63 	bmi.w	801c07e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801c1b8:	4567      	cmp	r7, ip
 801c1ba:	f6ff af60 	blt.w	801c07e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801c1be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c1c0:	b23f      	sxth	r7, r7
 801c1c2:	b212      	sxth	r2, r2
 801c1c4:	9002      	str	r0, [sp, #8]
 801c1c6:	9701      	str	r7, [sp, #4]
 801c1c8:	9200      	str	r2, [sp, #0]
 801c1ca:	9811      	ldr	r0, [sp, #68]	; 0x44
 801c1cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c1ce:	e9cd 1305 	strd	r1, r3, [sp, #20]
 801c1d2:	e9cd 5803 	strd	r5, r8, [sp, #12]
 801c1d6:	4623      	mov	r3, r4
 801c1d8:	4631      	mov	r1, r6
 801c1da:	f7ff fd69 	bl	801bcb0 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 801c1de:	e74e      	b.n	801c07e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801c1e0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801c1e2:	981e      	ldr	r0, [sp, #120]	; 0x78
 801c1e4:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801c1e8:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 801c1ea:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801c1ec:	1400      	asrs	r0, r0, #16
 801c1ee:	142d      	asrs	r5, r5, #16
 801c1f0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801c1f2:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801c1f6:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801c1fa:	fb02 5000 	mla	r0, r2, r0, r5
 801c1fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801c200:	f815 e000 	ldrb.w	lr, [r5, r0]
 801c204:	eb05 0c00 	add.w	ip, r5, r0
 801c208:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801c20c:	eb04 060e 	add.w	r6, r4, lr
 801c210:	2b00      	cmp	r3, #0
 801c212:	f000 8097 	beq.w	801c344 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 801c216:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801c21a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c21e:	4425      	add	r5, r4
 801c220:	2900      	cmp	r1, #0
 801c222:	f000 8098 	beq.w	801c356 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e0>
 801c226:	eb0c 0002 	add.w	r0, ip, r2
 801c22a:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801c22e:	7840      	ldrb	r0, [r0, #1]
 801c230:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c234:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801c238:	4422      	add	r2, r4
 801c23a:	4420      	add	r0, r4
 801c23c:	b29b      	uxth	r3, r3
 801c23e:	f814 b00e 	ldrb.w	fp, [r4, lr]
 801c242:	b289      	uxth	r1, r1
 801c244:	f895 e000 	ldrb.w	lr, [r5]
 801c248:	3703      	adds	r7, #3
 801c24a:	f109 39ff 	add.w	r9, r9, #4294967295
 801c24e:	fb03 f801 	mul.w	r8, r3, r1
 801c252:	011b      	lsls	r3, r3, #4
 801c254:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 801c258:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 801c25c:	eba3 0308 	sub.w	r3, r3, r8
 801c260:	b289      	uxth	r1, r1
 801c262:	b29b      	uxth	r3, r3
 801c264:	ebac 0c01 	sub.w	ip, ip, r1
 801c268:	fb03 fe0e 	mul.w	lr, r3, lr
 801c26c:	fa1f fc8c 	uxth.w	ip, ip
 801c270:	930f      	str	r3, [sp, #60]	; 0x3c
 801c272:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c274:	fb0c ee0b 	mla	lr, ip, fp, lr
 801c278:	f892 b000 	ldrb.w	fp, [r2]
 801c27c:	fb01 ee0b 	mla	lr, r1, fp, lr
 801c280:	f890 b000 	ldrb.w	fp, [r0]
 801c284:	fb08 ee0b 	mla	lr, r8, fp, lr
 801c288:	f817 bc06 	ldrb.w	fp, [r7, #-6]
 801c28c:	fb1b fb03 	smulbb	fp, fp, r3
 801c290:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801c294:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c296:	fb0e be0a 	mla	lr, lr, sl, fp
 801c29a:	fa1f fe8e 	uxth.w	lr, lr
 801c29e:	f10e 0b01 	add.w	fp, lr, #1
 801c2a2:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801c2a6:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801c2aa:	f807 ec06 	strb.w	lr, [r7, #-6]
 801c2ae:	f895 e001 	ldrb.w	lr, [r5, #1]
 801c2b2:	f896 b001 	ldrb.w	fp, [r6, #1]
 801c2b6:	fb03 fe0e 	mul.w	lr, r3, lr
 801c2ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c2bc:	fb0c ee0b 	mla	lr, ip, fp, lr
 801c2c0:	f892 b001 	ldrb.w	fp, [r2, #1]
 801c2c4:	fb01 ee0b 	mla	lr, r1, fp, lr
 801c2c8:	f890 b001 	ldrb.w	fp, [r0, #1]
 801c2cc:	fb08 ee0b 	mla	lr, r8, fp, lr
 801c2d0:	f817 bc05 	ldrb.w	fp, [r7, #-5]
 801c2d4:	fb1b fb03 	smulbb	fp, fp, r3
 801c2d8:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801c2dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c2de:	fb0e be0a 	mla	lr, lr, sl, fp
 801c2e2:	fa1f fe8e 	uxth.w	lr, lr
 801c2e6:	f10e 0b01 	add.w	fp, lr, #1
 801c2ea:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801c2ee:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801c2f2:	f807 ec05 	strb.w	lr, [r7, #-5]
 801c2f6:	78ad      	ldrb	r5, [r5, #2]
 801c2f8:	78b6      	ldrb	r6, [r6, #2]
 801c2fa:	436b      	muls	r3, r5
 801c2fc:	7895      	ldrb	r5, [r2, #2]
 801c2fe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801c300:	fb0c 3306 	mla	r3, ip, r6, r3
 801c304:	fb01 3305 	mla	r3, r1, r5, r3
 801c308:	7885      	ldrb	r5, [r0, #2]
 801c30a:	fb08 3805 	mla	r8, r8, r5, r3
 801c30e:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 801c312:	fb13 f302 	smulbb	r3, r3, r2
 801c316:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801c31a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801c31c:	fb08 380a 	mla	r8, r8, sl, r3
 801c320:	fa1f f888 	uxth.w	r8, r8
 801c324:	f108 0301 	add.w	r3, r8, #1
 801c328:	eb03 2818 	add.w	r8, r3, r8, lsr #8
 801c32c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801c32e:	4413      	add	r3, r2
 801c330:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801c332:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c336:	931d      	str	r3, [sp, #116]	; 0x74
 801c338:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801c33a:	f807 8c04 	strb.w	r8, [r7, #-4]
 801c33e:	4413      	add	r3, r2
 801c340:	931e      	str	r3, [sp, #120]	; 0x78
 801c342:	e6d6      	b.n	801c0f2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801c344:	b151      	cbz	r1, 801c35c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 801c346:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801c34a:	4630      	mov	r0, r6
 801c34c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c350:	4422      	add	r2, r4
 801c352:	4635      	mov	r5, r6
 801c354:	e772      	b.n	801c23c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 801c356:	4630      	mov	r0, r6
 801c358:	4632      	mov	r2, r6
 801c35a:	e76f      	b.n	801c23c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 801c35c:	4630      	mov	r0, r6
 801c35e:	4632      	mov	r2, r6
 801c360:	e7f7      	b.n	801c352 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801c362:	b013      	add	sp, #76	; 0x4c
 801c364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c368 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 801c368:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801c36c:	784c      	ldrb	r4, [r1, #1]
 801c36e:	f891 a002 	ldrb.w	sl, [r1, #2]
 801c372:	0224      	lsls	r4, r4, #8
 801c374:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 801c378:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 801c37c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801c380:	f891 a000 	ldrb.w	sl, [r1]
 801c384:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
 801c388:	ea44 040a 	orr.w	r4, r4, sl
 801c38c:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
 801c390:	e9dd c50c 	ldrd	ip, r5, [sp, #48]	; 0x30
 801c394:	9401      	str	r4, [sp, #4]
 801c396:	fb05 c70e 	mla	r7, r5, lr, ip
 801c39a:	2d00      	cmp	r5, #0
 801c39c:	eb02 0807 	add.w	r8, r2, r7
 801c3a0:	db72      	blt.n	801c488 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 801c3a2:	45a9      	cmp	r9, r5
 801c3a4:	dd70      	ble.n	801c488 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 801c3a6:	f1bc 0f00 	cmp.w	ip, #0
 801c3aa:	db6b      	blt.n	801c484 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 801c3ac:	45e6      	cmp	lr, ip
 801c3ae:	dd69      	ble.n	801c484 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 801c3b0:	5dd7      	ldrb	r7, [r2, r7]
 801c3b2:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801c3b6:	441f      	add	r7, r3
 801c3b8:	f11c 0201 	adds.w	r2, ip, #1
 801c3bc:	d467      	bmi.n	801c48e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801c3be:	4596      	cmp	lr, r2
 801c3c0:	dd65      	ble.n	801c48e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801c3c2:	2800      	cmp	r0, #0
 801c3c4:	d063      	beq.n	801c48e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801c3c6:	f898 4001 	ldrb.w	r4, [r8, #1]
 801c3ca:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c3ce:	441c      	add	r4, r3
 801c3d0:	3501      	adds	r5, #1
 801c3d2:	d460      	bmi.n	801c496 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801c3d4:	45a9      	cmp	r9, r5
 801c3d6:	dd5e      	ble.n	801c496 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801c3d8:	2e00      	cmp	r6, #0
 801c3da:	d05c      	beq.n	801c496 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801c3dc:	f1bc 0f00 	cmp.w	ip, #0
 801c3e0:	db57      	blt.n	801c492 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 801c3e2:	45e6      	cmp	lr, ip
 801c3e4:	dd55      	ble.n	801c492 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 801c3e6:	f818 500e 	ldrb.w	r5, [r8, lr]
 801c3ea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c3ee:	441d      	add	r5, r3
 801c3f0:	f11c 0201 	adds.w	r2, ip, #1
 801c3f4:	d452      	bmi.n	801c49c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801c3f6:	4596      	cmp	lr, r2
 801c3f8:	dd50      	ble.n	801c49c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801c3fa:	2800      	cmp	r0, #0
 801c3fc:	d04e      	beq.n	801c49c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801c3fe:	44c6      	add	lr, r8
 801c400:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801c404:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c408:	4413      	add	r3, r2
 801c40a:	b280      	uxth	r0, r0
 801c40c:	f897 8000 	ldrb.w	r8, [r7]
 801c410:	b2b2      	uxth	r2, r6
 801c412:	fb00 f602 	mul.w	r6, r0, r2
 801c416:	0100      	lsls	r0, r0, #4
 801c418:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 801c41c:	f5c0 7e80 	rsb	lr, r0, #256	; 0x100
 801c420:	1b80      	subs	r0, r0, r6
 801c422:	fa1f fc82 	uxth.w	ip, r2
 801c426:	b282      	uxth	r2, r0
 801c428:	7820      	ldrb	r0, [r4, #0]
 801c42a:	ebae 0e0c 	sub.w	lr, lr, ip
 801c42e:	4350      	muls	r0, r2
 801c430:	fa1f fe8e 	uxth.w	lr, lr
 801c434:	fb0e 0808 	mla	r8, lr, r8, r0
 801c438:	7828      	ldrb	r0, [r5, #0]
 801c43a:	fb0c 8800 	mla	r8, ip, r0, r8
 801c43e:	7818      	ldrb	r0, [r3, #0]
 801c440:	fb06 8000 	mla	r0, r6, r0, r8
 801c444:	1200      	asrs	r0, r0, #8
 801c446:	7008      	strb	r0, [r1, #0]
 801c448:	7860      	ldrb	r0, [r4, #1]
 801c44a:	f897 8001 	ldrb.w	r8, [r7, #1]
 801c44e:	4350      	muls	r0, r2
 801c450:	fb0e 0808 	mla	r8, lr, r8, r0
 801c454:	7868      	ldrb	r0, [r5, #1]
 801c456:	fb0c 8800 	mla	r8, ip, r0, r8
 801c45a:	7858      	ldrb	r0, [r3, #1]
 801c45c:	fb06 8000 	mla	r0, r6, r0, r8
 801c460:	1200      	asrs	r0, r0, #8
 801c462:	7048      	strb	r0, [r1, #1]
 801c464:	78a0      	ldrb	r0, [r4, #2]
 801c466:	78bf      	ldrb	r7, [r7, #2]
 801c468:	4350      	muls	r0, r2
 801c46a:	78aa      	ldrb	r2, [r5, #2]
 801c46c:	fb0e 0007 	mla	r0, lr, r7, r0
 801c470:	fb0c 0c02 	mla	ip, ip, r2, r0
 801c474:	789a      	ldrb	r2, [r3, #2]
 801c476:	fb06 c202 	mla	r2, r6, r2, ip
 801c47a:	1212      	asrs	r2, r2, #8
 801c47c:	708a      	strb	r2, [r1, #2]
 801c47e:	b002      	add	sp, #8
 801c480:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c484:	af01      	add	r7, sp, #4
 801c486:	e797      	b.n	801c3b8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 801c488:	ac01      	add	r4, sp, #4
 801c48a:	4627      	mov	r7, r4
 801c48c:	e7a0      	b.n	801c3d0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801c48e:	ac01      	add	r4, sp, #4
 801c490:	e79e      	b.n	801c3d0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801c492:	ad01      	add	r5, sp, #4
 801c494:	e7ac      	b.n	801c3f0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x88>
 801c496:	ab01      	add	r3, sp, #4
 801c498:	461d      	mov	r5, r3
 801c49a:	e7b6      	b.n	801c40a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>
 801c49c:	ab01      	add	r3, sp, #4
 801c49e:	e7b4      	b.n	801c40a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>

0801c4a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c4a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c4a4:	b08d      	sub	sp, #52	; 0x34
 801c4a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c4aa:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
 801c4ae:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801c4b0:	900b      	str	r0, [sp, #44]	; 0x2c
 801c4b2:	9306      	str	r3, [sp, #24]
 801c4b4:	6850      	ldr	r0, [r2, #4]
 801c4b6:	6812      	ldr	r2, [r2, #0]
 801c4b8:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801c4ba:	e9dd 131c 	ldrd	r1, r3, [sp, #112]	; 0x70
 801c4be:	fb00 1303 	mla	r3, r0, r3, r1
 801c4c2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c4c6:	18d3      	adds	r3, r2, r3
 801c4c8:	9307      	str	r3, [sp, #28]
 801c4ca:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801c4cc:	681b      	ldr	r3, [r3, #0]
 801c4ce:	9308      	str	r3, [sp, #32]
 801c4d0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801c4d2:	685d      	ldr	r5, [r3, #4]
 801c4d4:	3504      	adds	r5, #4
 801c4d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c4d8:	2b00      	cmp	r3, #0
 801c4da:	dc03      	bgt.n	801c4e4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801c4dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c4de:	2b00      	cmp	r3, #0
 801c4e0:	f340 81e6 	ble.w	801c8b0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 801c4e4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801c4e6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801c4ea:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801c4ee:	1e48      	subs	r0, r1, #1
 801c4f0:	1e56      	subs	r6, r2, #1
 801c4f2:	9b06      	ldr	r3, [sp, #24]
 801c4f4:	2b00      	cmp	r3, #0
 801c4f6:	f340 80bd 	ble.w	801c674 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801c4fa:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801c4fc:	1427      	asrs	r7, r4, #16
 801c4fe:	ea4f 4323 	mov.w	r3, r3, asr #16
 801c502:	d406      	bmi.n	801c512 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801c504:	4287      	cmp	r7, r0
 801c506:	da04      	bge.n	801c512 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801c508:	2b00      	cmp	r3, #0
 801c50a:	db02      	blt.n	801c512 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801c50c:	42b3      	cmp	r3, r6
 801c50e:	f2c0 80b2 	blt.w	801c676 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 801c512:	3701      	adds	r7, #1
 801c514:	f100 80a1 	bmi.w	801c65a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801c518:	42b9      	cmp	r1, r7
 801c51a:	f2c0 809e 	blt.w	801c65a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801c51e:	3301      	adds	r3, #1
 801c520:	f100 809b 	bmi.w	801c65a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801c524:	429a      	cmp	r2, r3
 801c526:	f2c0 8098 	blt.w	801c65a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801c52a:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 801c52e:	f1bb 0f00 	cmp.w	fp, #0
 801c532:	f340 80bf 	ble.w	801c6b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801c536:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801c538:	981e      	ldr	r0, [sp, #120]	; 0x78
 801c53a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801c53c:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801c540:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 801c544:	1420      	asrs	r0, r4, #16
 801c546:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801c548:	ea4f 4723 	mov.w	r7, r3, asr #16
 801c54c:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801c550:	6892      	ldr	r2, [r2, #8]
 801c552:	f100 8103 	bmi.w	801c75c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801c556:	f102 3eff 	add.w	lr, r2, #4294967295
 801c55a:	4570      	cmp	r0, lr
 801c55c:	f280 80fe 	bge.w	801c75c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801c560:	2f00      	cmp	r7, #0
 801c562:	f2c0 80fb 	blt.w	801c75c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801c566:	f10c 3eff 	add.w	lr, ip, #4294967295
 801c56a:	4577      	cmp	r7, lr
 801c56c:	f280 80f6 	bge.w	801c75c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801c570:	b212      	sxth	r2, r2
 801c572:	fb07 0002 	mla	r0, r7, r2, r0
 801c576:	9f08      	ldr	r7, [sp, #32]
 801c578:	f817 8000 	ldrb.w	r8, [r7, r0]
 801c57c:	eb07 0e00 	add.w	lr, r7, r0
 801c580:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801c584:	eb05 0c08 	add.w	ip, r5, r8
 801c588:	2b00      	cmp	r3, #0
 801c58a:	f000 80d8 	beq.w	801c73e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 801c58e:	f89e 7001 	ldrb.w	r7, [lr, #1]
 801c592:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801c596:	442f      	add	r7, r5
 801c598:	2900      	cmp	r1, #0
 801c59a:	f000 80d9 	beq.w	801c750 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801c59e:	eb0e 0002 	add.w	r0, lr, r2
 801c5a2:	f81e 2002 	ldrb.w	r2, [lr, r2]
 801c5a6:	7840      	ldrb	r0, [r0, #1]
 801c5a8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c5ac:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801c5b0:	442a      	add	r2, r5
 801c5b2:	4428      	add	r0, r5
 801c5b4:	b29b      	uxth	r3, r3
 801c5b6:	f815 a008 	ldrb.w	sl, [r5, r8]
 801c5ba:	b289      	uxth	r1, r1
 801c5bc:	f897 8000 	ldrb.w	r8, [r7]
 801c5c0:	fb03 f901 	mul.w	r9, r3, r1
 801c5c4:	011b      	lsls	r3, r3, #4
 801c5c6:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801c5ca:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801c5ce:	eba3 0309 	sub.w	r3, r3, r9
 801c5d2:	b289      	uxth	r1, r1
 801c5d4:	b29b      	uxth	r3, r3
 801c5d6:	ebae 0e01 	sub.w	lr, lr, r1
 801c5da:	fb03 f808 	mul.w	r8, r3, r8
 801c5de:	fa1f fe8e 	uxth.w	lr, lr
 801c5e2:	fb0e 880a 	mla	r8, lr, sl, r8
 801c5e6:	f892 a000 	ldrb.w	sl, [r2]
 801c5ea:	fb01 880a 	mla	r8, r1, sl, r8
 801c5ee:	f890 a000 	ldrb.w	sl, [r0]
 801c5f2:	fb09 880a 	mla	r8, r9, sl, r8
 801c5f6:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c5fa:	f886 8000 	strb.w	r8, [r6]
 801c5fe:	f897 8001 	ldrb.w	r8, [r7, #1]
 801c602:	f89c a001 	ldrb.w	sl, [ip, #1]
 801c606:	fb03 f808 	mul.w	r8, r3, r8
 801c60a:	fb0e 880a 	mla	r8, lr, sl, r8
 801c60e:	f892 a001 	ldrb.w	sl, [r2, #1]
 801c612:	fb01 880a 	mla	r8, r1, sl, r8
 801c616:	f890 a001 	ldrb.w	sl, [r0, #1]
 801c61a:	fb09 880a 	mla	r8, r9, sl, r8
 801c61e:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c622:	f886 8001 	strb.w	r8, [r6, #1]
 801c626:	78bf      	ldrb	r7, [r7, #2]
 801c628:	f89c c002 	ldrb.w	ip, [ip, #2]
 801c62c:	437b      	muls	r3, r7
 801c62e:	7892      	ldrb	r2, [r2, #2]
 801c630:	fb0e 330c 	mla	r3, lr, ip, r3
 801c634:	fb01 3102 	mla	r1, r1, r2, r3
 801c638:	7882      	ldrb	r2, [r0, #2]
 801c63a:	fb09 1902 	mla	r9, r9, r2, r1
 801c63e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c642:	f886 9002 	strb.w	r9, [r6, #2]
 801c646:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801c648:	3603      	adds	r6, #3
 801c64a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801c64c:	f10b 3bff 	add.w	fp, fp, #4294967295
 801c650:	441c      	add	r4, r3
 801c652:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801c654:	4413      	add	r3, r2
 801c656:	9318      	str	r3, [sp, #96]	; 0x60
 801c658:	e769      	b.n	801c52e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801c65a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801c65c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 801c65e:	441c      	add	r4, r3
 801c660:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801c662:	443b      	add	r3, r7
 801c664:	9318      	str	r3, [sp, #96]	; 0x60
 801c666:	9b06      	ldr	r3, [sp, #24]
 801c668:	3b01      	subs	r3, #1
 801c66a:	9306      	str	r3, [sp, #24]
 801c66c:	9b07      	ldr	r3, [sp, #28]
 801c66e:	3303      	adds	r3, #3
 801c670:	9307      	str	r3, [sp, #28]
 801c672:	e73e      	b.n	801c4f2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801c674:	d026      	beq.n	801c6c4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 801c676:	9b06      	ldr	r3, [sp, #24]
 801c678:	9819      	ldr	r0, [sp, #100]	; 0x64
 801c67a:	3b01      	subs	r3, #1
 801c67c:	fb00 4003 	mla	r0, r0, r3, r4
 801c680:	1400      	asrs	r0, r0, #16
 801c682:	f53f af52 	bmi.w	801c52a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801c686:	3901      	subs	r1, #1
 801c688:	4288      	cmp	r0, r1
 801c68a:	f6bf af4e 	bge.w	801c52a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801c68e:	991a      	ldr	r1, [sp, #104]	; 0x68
 801c690:	9818      	ldr	r0, [sp, #96]	; 0x60
 801c692:	fb01 0303 	mla	r3, r1, r3, r0
 801c696:	141b      	asrs	r3, r3, #16
 801c698:	f53f af47 	bmi.w	801c52a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801c69c:	3a01      	subs	r2, #1
 801c69e:	4293      	cmp	r3, r2
 801c6a0:	f6bf af43 	bge.w	801c52a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801c6a4:	9b07      	ldr	r3, [sp, #28]
 801c6a6:	f8dd a018 	ldr.w	sl, [sp, #24]
 801c6aa:	f103 0803 	add.w	r8, r3, #3
 801c6ae:	f1ba 0f00 	cmp.w	sl, #0
 801c6b2:	dc71      	bgt.n	801c798 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 801c6b4:	9b06      	ldr	r3, [sp, #24]
 801c6b6:	9a07      	ldr	r2, [sp, #28]
 801c6b8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c6bc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c6c0:	441a      	add	r2, r3
 801c6c2:	9207      	str	r2, [sp, #28]
 801c6c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c6c6:	2b00      	cmp	r3, #0
 801c6c8:	f340 80f2 	ble.w	801c8b0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 801c6cc:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c6d0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801c6d2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c6d6:	eeb0 6a62 	vmov.f32	s12, s5
 801c6da:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c6de:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c6e2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c6e6:	ee16 4a10 	vmov	r4, s12
 801c6ea:	eeb0 6a43 	vmov.f32	s12, s6
 801c6ee:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c6f2:	ed8d 6a18 	vstr	s12, [sp, #96]	; 0x60
 801c6f6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c6fa:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c6fe:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c702:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c706:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c70a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c70e:	ee12 2a90 	vmov	r2, s5
 801c712:	eef0 2a47 	vmov.f32	s5, s14
 801c716:	fb92 f3f3 	sdiv	r3, r2, r3
 801c71a:	ee13 2a10 	vmov	r2, s6
 801c71e:	9319      	str	r3, [sp, #100]	; 0x64
 801c720:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801c722:	eeb0 3a67 	vmov.f32	s6, s15
 801c726:	fb92 f3f3 	sdiv	r3, r2, r3
 801c72a:	931a      	str	r3, [sp, #104]	; 0x68
 801c72c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c72e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801c730:	3b01      	subs	r3, #1
 801c732:	9309      	str	r3, [sp, #36]	; 0x24
 801c734:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801c736:	bf08      	it	eq
 801c738:	4613      	moveq	r3, r2
 801c73a:	9306      	str	r3, [sp, #24]
 801c73c:	e6cb      	b.n	801c4d6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801c73e:	b151      	cbz	r1, 801c756 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801c740:	f81e 2002 	ldrb.w	r2, [lr, r2]
 801c744:	4660      	mov	r0, ip
 801c746:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c74a:	442a      	add	r2, r5
 801c74c:	4667      	mov	r7, ip
 801c74e:	e731      	b.n	801c5b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801c750:	4660      	mov	r0, ip
 801c752:	4662      	mov	r2, ip
 801c754:	e72e      	b.n	801c5b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801c756:	4660      	mov	r0, ip
 801c758:	4662      	mov	r2, ip
 801c75a:	e7f7      	b.n	801c74c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 801c75c:	f110 0e01 	adds.w	lr, r0, #1
 801c760:	f53f af71 	bmi.w	801c646 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801c764:	4572      	cmp	r2, lr
 801c766:	f6ff af6e 	blt.w	801c646 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801c76a:	f117 0e01 	adds.w	lr, r7, #1
 801c76e:	f53f af6a 	bmi.w	801c646 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801c772:	45f4      	cmp	ip, lr
 801c774:	f6ff af67 	blt.w	801c646 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801c778:	b212      	sxth	r2, r2
 801c77a:	e9cd 3104 	strd	r3, r1, [sp, #16]
 801c77e:	fa0f f38c 	sxth.w	r3, ip
 801c782:	9200      	str	r2, [sp, #0]
 801c784:	4631      	mov	r1, r6
 801c786:	9a08      	ldr	r2, [sp, #32]
 801c788:	9301      	str	r3, [sp, #4]
 801c78a:	462b      	mov	r3, r5
 801c78c:	e9cd 0702 	strd	r0, r7, [sp, #8]
 801c790:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801c792:	f7ff fde9 	bl	801c368 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 801c796:	e756      	b.n	801c646 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801c798:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801c79a:	1426      	asrs	r6, r4, #16
 801c79c:	9818      	ldr	r0, [sp, #96]	; 0x60
 801c79e:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801c7a2:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801c7a6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801c7a8:	1400      	asrs	r0, r0, #16
 801c7aa:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801c7ae:	fb02 6000 	mla	r0, r2, r0, r6
 801c7b2:	9e08      	ldr	r6, [sp, #32]
 801c7b4:	f816 e000 	ldrb.w	lr, [r6, r0]
 801c7b8:	eb06 0c00 	add.w	ip, r6, r0
 801c7bc:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801c7c0:	eb05 070e 	add.w	r7, r5, lr
 801c7c4:	2b00      	cmp	r3, #0
 801c7c6:	d064      	beq.n	801c892 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 801c7c8:	f89c 6001 	ldrb.w	r6, [ip, #1]
 801c7cc:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801c7d0:	442e      	add	r6, r5
 801c7d2:	2900      	cmp	r1, #0
 801c7d4:	d066      	beq.n	801c8a4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x404>
 801c7d6:	eb0c 0002 	add.w	r0, ip, r2
 801c7da:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801c7de:	7840      	ldrb	r0, [r0, #1]
 801c7e0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c7e4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801c7e8:	442a      	add	r2, r5
 801c7ea:	4428      	add	r0, r5
 801c7ec:	b29b      	uxth	r3, r3
 801c7ee:	f815 b00e 	ldrb.w	fp, [r5, lr]
 801c7f2:	b289      	uxth	r1, r1
 801c7f4:	f896 e000 	ldrb.w	lr, [r6]
 801c7f8:	f108 0803 	add.w	r8, r8, #3
 801c7fc:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c800:	fb03 f901 	mul.w	r9, r3, r1
 801c804:	011b      	lsls	r3, r3, #4
 801c806:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801c80a:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 801c80e:	eba3 0309 	sub.w	r3, r3, r9
 801c812:	b289      	uxth	r1, r1
 801c814:	b29b      	uxth	r3, r3
 801c816:	ebac 0c01 	sub.w	ip, ip, r1
 801c81a:	fb03 fe0e 	mul.w	lr, r3, lr
 801c81e:	fa1f fc8c 	uxth.w	ip, ip
 801c822:	fb0c ee0b 	mla	lr, ip, fp, lr
 801c826:	f892 b000 	ldrb.w	fp, [r2]
 801c82a:	fb01 ee0b 	mla	lr, r1, fp, lr
 801c82e:	f890 b000 	ldrb.w	fp, [r0]
 801c832:	fb09 ee0b 	mla	lr, r9, fp, lr
 801c836:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801c83a:	f808 ec06 	strb.w	lr, [r8, #-6]
 801c83e:	f896 e001 	ldrb.w	lr, [r6, #1]
 801c842:	f897 b001 	ldrb.w	fp, [r7, #1]
 801c846:	fb03 fe0e 	mul.w	lr, r3, lr
 801c84a:	fb0c ee0b 	mla	lr, ip, fp, lr
 801c84e:	f892 b001 	ldrb.w	fp, [r2, #1]
 801c852:	fb01 ee0b 	mla	lr, r1, fp, lr
 801c856:	f890 b001 	ldrb.w	fp, [r0, #1]
 801c85a:	fb09 ee0b 	mla	lr, r9, fp, lr
 801c85e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801c862:	f808 ec05 	strb.w	lr, [r8, #-5]
 801c866:	78b6      	ldrb	r6, [r6, #2]
 801c868:	78bf      	ldrb	r7, [r7, #2]
 801c86a:	4373      	muls	r3, r6
 801c86c:	7896      	ldrb	r6, [r2, #2]
 801c86e:	7882      	ldrb	r2, [r0, #2]
 801c870:	fb0c 3307 	mla	r3, ip, r7, r3
 801c874:	fb01 3306 	mla	r3, r1, r6, r3
 801c878:	fb09 3902 	mla	r9, r9, r2, r3
 801c87c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801c87e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801c880:	441c      	add	r4, r3
 801c882:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801c884:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c888:	4413      	add	r3, r2
 801c88a:	f808 9c04 	strb.w	r9, [r8, #-4]
 801c88e:	9318      	str	r3, [sp, #96]	; 0x60
 801c890:	e70d      	b.n	801c6ae <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801c892:	b151      	cbz	r1, 801c8aa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 801c894:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801c898:	4638      	mov	r0, r7
 801c89a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c89e:	442a      	add	r2, r5
 801c8a0:	463e      	mov	r6, r7
 801c8a2:	e7a3      	b.n	801c7ec <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801c8a4:	4638      	mov	r0, r7
 801c8a6:	463a      	mov	r2, r7
 801c8a8:	e7a0      	b.n	801c7ec <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801c8aa:	4638      	mov	r0, r7
 801c8ac:	463a      	mov	r2, r7
 801c8ae:	e7f7      	b.n	801c8a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x400>
 801c8b0:	b00d      	add	sp, #52	; 0x34
 801c8b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c8b6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 801c8b6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c8ba:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	; 0x38
 801c8be:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 801c8c2:	2d00      	cmp	r5, #0
 801c8c4:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 801c8c8:	fb05 700c 	mla	r0, r5, ip, r7
 801c8cc:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 801c8d0:	f89d e044 	ldrb.w	lr, [sp, #68]	; 0x44
 801c8d4:	eb02 0800 	add.w	r8, r2, r0
 801c8d8:	f2c0 8118 	blt.w	801cb0c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 801c8dc:	45a9      	cmp	r9, r5
 801c8de:	f340 8115 	ble.w	801cb0c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 801c8e2:	2f00      	cmp	r7, #0
 801c8e4:	f2c0 8110 	blt.w	801cb08 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 801c8e8:	45bc      	cmp	ip, r7
 801c8ea:	f340 810d 	ble.w	801cb08 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 801c8ee:	5c12      	ldrb	r2, [r2, r0]
 801c8f0:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801c8f4:	1c7a      	adds	r2, r7, #1
 801c8f6:	f100 810c 	bmi.w	801cb12 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 801c8fa:	4594      	cmp	ip, r2
 801c8fc:	f340 8109 	ble.w	801cb12 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 801c900:	2c00      	cmp	r4, #0
 801c902:	f000 8108 	beq.w	801cb16 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x260>
 801c906:	f898 2001 	ldrb.w	r2, [r8, #1]
 801c90a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801c90e:	3501      	adds	r5, #1
 801c910:	f100 8105 	bmi.w	801cb1e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 801c914:	45a9      	cmp	r9, r5
 801c916:	f340 8102 	ble.w	801cb1e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 801c91a:	f1be 0f00 	cmp.w	lr, #0
 801c91e:	f000 8101 	beq.w	801cb24 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x26e>
 801c922:	2f00      	cmp	r7, #0
 801c924:	f2c0 80f9 	blt.w	801cb1a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 801c928:	45bc      	cmp	ip, r7
 801c92a:	f340 80f6 	ble.w	801cb1a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 801c92e:	f818 200c 	ldrb.w	r2, [r8, ip]
 801c932:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801c936:	3701      	adds	r7, #1
 801c938:	f100 80f7 	bmi.w	801cb2a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 801c93c:	45bc      	cmp	ip, r7
 801c93e:	f340 80f4 	ble.w	801cb2a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 801c942:	2c00      	cmp	r4, #0
 801c944:	f000 80f3 	beq.w	801cb2e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x278>
 801c948:	44c4      	add	ip, r8
 801c94a:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801c94e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801c952:	fa1f fc84 	uxth.w	ip, r4
 801c956:	fa1f f48e 	uxth.w	r4, lr
 801c95a:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 801c95e:	fb04 fe0c 	mul.w	lr, r4, ip
 801c962:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801c966:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801c96a:	ebce 1404 	rsb	r4, lr, r4, lsl #4
 801c96e:	ebac 070e 	sub.w	r7, ip, lr
 801c972:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 801c976:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801c97a:	b2a4      	uxth	r4, r4
 801c97c:	b2bf      	uxth	r7, r7
 801c97e:	1b1b      	subs	r3, r3, r4
 801c980:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801c984:	fb07 fc0a 	mul.w	ip, r7, sl
 801c988:	b29b      	uxth	r3, r3
 801c98a:	fb03 cc0b 	mla	ip, r3, fp, ip
 801c98e:	9300      	str	r3, [sp, #0]
 801c990:	fb04 cc09 	mla	ip, r4, r9, ip
 801c994:	fb0e cc08 	mla	ip, lr, r8, ip
 801c998:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801c99c:	9301      	str	r3, [sp, #4]
 801c99e:	2b00      	cmp	r3, #0
 801c9a0:	f000 80af 	beq.w	801cb02 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x24c>
 801c9a4:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801c9a8:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801c9ac:	fb0b fc0c 	mul.w	ip, fp, ip
 801c9b0:	fb0b f606 	mul.w	r6, fp, r6
 801c9b4:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801c9b8:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801c9bc:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 801c9c0:	44dc      	add	ip, fp
 801c9c2:	f000 1bff 	and.w	fp, r0, #16711935	; 0xff00ff
 801c9c6:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801c9ca:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c9ce:	fb0a fb0b 	mul.w	fp, sl, fp
 801c9d2:	fb0a fa00 	mul.w	sl, sl, r0
 801c9d6:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 801c9da:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801c9de:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 801c9e2:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801c9e6:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801c9ea:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801c9ee:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 801c9f2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801c9f6:	0a36      	lsrs	r6, r6, #8
 801c9f8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c9fc:	44dc      	add	ip, fp
 801c9fe:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 801ca02:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801ca06:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801ca0a:	fb09 fb0b 	mul.w	fp, r9, fp
 801ca0e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ca12:	fb09 f905 	mul.w	r9, r9, r5
 801ca16:	ea4f 201b 	mov.w	r0, fp, lsr #8
 801ca1a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ca1e:	f509 7580 	add.w	r5, r9, #256	; 0x100
 801ca22:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801ca26:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801ca2a:	fb0c fc07 	mul.w	ip, ip, r7
 801ca2e:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 801ca32:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 801ca36:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801ca3a:	4458      	add	r0, fp
 801ca3c:	fb08 f505 	mul.w	r5, r8, r5
 801ca40:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801ca44:	fb08 f802 	mul.w	r8, r8, r2
 801ca48:	0a00      	lsrs	r0, r0, #8
 801ca4a:	0a2a      	lsrs	r2, r5, #8
 801ca4c:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 801ca50:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801ca54:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801ca58:	4415      	add	r5, r2
 801ca5a:	f508 7280 	add.w	r2, r8, #256	; 0x100
 801ca5e:	0a2d      	lsrs	r5, r5, #8
 801ca60:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801ca64:	9a00      	ldr	r2, [sp, #0]
 801ca66:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801ca6a:	fb03 cc02 	mla	ip, r3, r2, ip
 801ca6e:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801ca72:	9b01      	ldr	r3, [sp, #4]
 801ca74:	fb05 c50e 	mla	r5, r5, lr, ip
 801ca78:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801ca7c:	fb00 5004 	mla	r0, r0, r4, r5
 801ca80:	0a00      	lsrs	r0, r0, #8
 801ca82:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 801ca86:	f40a 407f 	and.w	r0, sl, #65280	; 0xff00
 801ca8a:	4378      	muls	r0, r7
 801ca8c:	fb02 0006 	mla	r0, r2, r6, r0
 801ca90:	fb0e 0e08 	mla	lr, lr, r8, r0
 801ca94:	f409 407f 	and.w	r0, r9, #65280	; 0xff00
 801ca98:	fb04 e000 	mla	r0, r4, r0, lr
 801ca9c:	0a00      	lsrs	r0, r0, #8
 801ca9e:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801caa2:	4328      	orrs	r0, r5
 801caa4:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 801caa8:	b2ad      	uxth	r5, r5
 801caaa:	b2c4      	uxtb	r4, r0
 801caac:	436b      	muls	r3, r5
 801caae:	fb14 f405 	smulbb	r4, r4, r5
 801cab2:	1c5a      	adds	r2, r3, #1
 801cab4:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801cab8:	780b      	ldrb	r3, [r1, #0]
 801caba:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 801cabe:	b2d2      	uxtb	r2, r2
 801cac0:	fb03 4302 	mla	r3, r3, r2, r4
 801cac4:	b29b      	uxth	r3, r3
 801cac6:	1c5c      	adds	r4, r3, #1
 801cac8:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801cacc:	784c      	ldrb	r4, [r1, #1]
 801cace:	fb14 f402 	smulbb	r4, r4, r2
 801cad2:	121b      	asrs	r3, r3, #8
 801cad4:	700b      	strb	r3, [r1, #0]
 801cad6:	f3c0 2307 	ubfx	r3, r0, #8, #8
 801cada:	fb03 4305 	mla	r3, r3, r5, r4
 801cade:	b29b      	uxth	r3, r3
 801cae0:	1c5c      	adds	r4, r3, #1
 801cae2:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801cae6:	0c04      	lsrs	r4, r0, #16
 801cae8:	7888      	ldrb	r0, [r1, #2]
 801caea:	121b      	asrs	r3, r3, #8
 801caec:	fb10 f002 	smulbb	r0, r0, r2
 801caf0:	704b      	strb	r3, [r1, #1]
 801caf2:	fb04 0005 	mla	r0, r4, r5, r0
 801caf6:	b280      	uxth	r0, r0
 801caf8:	1c43      	adds	r3, r0, #1
 801cafa:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801cafe:	1200      	asrs	r0, r0, #8
 801cb00:	7088      	strb	r0, [r1, #2]
 801cb02:	b003      	add	sp, #12
 801cb04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cb08:	2600      	movs	r6, #0
 801cb0a:	e6f3      	b.n	801c8f4 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x3e>
 801cb0c:	2000      	movs	r0, #0
 801cb0e:	4606      	mov	r6, r0
 801cb10:	e6fd      	b.n	801c90e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 801cb12:	2000      	movs	r0, #0
 801cb14:	e6fb      	b.n	801c90e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 801cb16:	4620      	mov	r0, r4
 801cb18:	e6f9      	b.n	801c90e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 801cb1a:	2500      	movs	r5, #0
 801cb1c:	e70b      	b.n	801c936 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x80>
 801cb1e:	2200      	movs	r2, #0
 801cb20:	4615      	mov	r5, r2
 801cb22:	e716      	b.n	801c952 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 801cb24:	4672      	mov	r2, lr
 801cb26:	4675      	mov	r5, lr
 801cb28:	e713      	b.n	801c952 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 801cb2a:	2200      	movs	r2, #0
 801cb2c:	e711      	b.n	801c952 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 801cb2e:	4622      	mov	r2, r4
 801cb30:	e70f      	b.n	801c952 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>

0801cb32 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801cb32:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cb36:	b09f      	sub	sp, #124	; 0x7c
 801cb38:	921b      	str	r2, [sp, #108]	; 0x6c
 801cb3a:	9309      	str	r3, [sp, #36]	; 0x24
 801cb3c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801cb3e:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 801cb42:	901d      	str	r0, [sp, #116]	; 0x74
 801cb44:	931c      	str	r3, [sp, #112]	; 0x70
 801cb46:	6850      	ldr	r0, [r2, #4]
 801cb48:	9119      	str	r1, [sp, #100]	; 0x64
 801cb4a:	6812      	ldr	r2, [r2, #0]
 801cb4c:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 801cb4e:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 801cb52:	fb00 1303 	mla	r3, r0, r3, r1
 801cb56:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cb5a:	18d3      	adds	r3, r2, r3
 801cb5c:	930c      	str	r3, [sp, #48]	; 0x30
 801cb5e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801cb60:	681b      	ldr	r3, [r3, #0]
 801cb62:	9312      	str	r3, [sp, #72]	; 0x48
 801cb64:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801cb66:	685e      	ldr	r6, [r3, #4]
 801cb68:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 801cb6c:	3604      	adds	r6, #4
 801cb6e:	930d      	str	r3, [sp, #52]	; 0x34
 801cb70:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801cb72:	2b00      	cmp	r3, #0
 801cb74:	dc03      	bgt.n	801cb7e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801cb76:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801cb78:	2b00      	cmp	r3, #0
 801cb7a:	f340 8378 	ble.w	801d26e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 801cb7e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801cb80:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801cb84:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801cb88:	1e48      	subs	r0, r1, #1
 801cb8a:	1e57      	subs	r7, r2, #1
 801cb8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cb8e:	2b00      	cmp	r3, #0
 801cb90:	f340 818c 	ble.w	801ceac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 801cb94:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801cb96:	142b      	asrs	r3, r5, #16
 801cb98:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801cb9c:	d406      	bmi.n	801cbac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801cb9e:	4584      	cmp	ip, r0
 801cba0:	da04      	bge.n	801cbac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801cba2:	2b00      	cmp	r3, #0
 801cba4:	db02      	blt.n	801cbac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801cba6:	42bb      	cmp	r3, r7
 801cba8:	f2c0 8181 	blt.w	801ceae <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 801cbac:	f11c 0c01 	adds.w	ip, ip, #1
 801cbb0:	f100 816f 	bmi.w	801ce92 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801cbb4:	4561      	cmp	r1, ip
 801cbb6:	f2c0 816c 	blt.w	801ce92 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801cbba:	3301      	adds	r3, #1
 801cbbc:	f100 8169 	bmi.w	801ce92 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801cbc0:	429a      	cmp	r2, r3
 801cbc2:	f2c0 8166 	blt.w	801ce92 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801cbc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cbc8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801cbca:	931a      	str	r3, [sp, #104]	; 0x68
 801cbcc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801cbce:	2b00      	cmp	r3, #0
 801cbd0:	f340 818c 	ble.w	801ceec <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 801cbd4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801cbd6:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801cbda:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801cbde:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801cbe2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801cbe4:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 801cbe8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801cbea:	141b      	asrs	r3, r3, #16
 801cbec:	f100 81d0 	bmi.w	801cf90 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801cbf0:	f100 38ff 	add.w	r8, r0, #4294967295
 801cbf4:	4543      	cmp	r3, r8
 801cbf6:	f280 81cb 	bge.w	801cf90 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801cbfa:	f1bc 0f00 	cmp.w	ip, #0
 801cbfe:	f2c0 81c7 	blt.w	801cf90 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801cc02:	f10e 38ff 	add.w	r8, lr, #4294967295
 801cc06:	45c4      	cmp	ip, r8
 801cc08:	f280 81c2 	bge.w	801cf90 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801cc0c:	b200      	sxth	r0, r0
 801cc0e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801cc10:	fb0c 3300 	mla	r3, ip, r0, r3
 801cc14:	eb04 0803 	add.w	r8, r4, r3
 801cc18:	5ce3      	ldrb	r3, [r4, r3]
 801cc1a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801cc1e:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801cc22:	2a00      	cmp	r2, #0
 801cc24:	f000 81a9 	beq.w	801cf7a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 801cc28:	f898 c001 	ldrb.w	ip, [r8, #1]
 801cc2c:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801cc30:	940e      	str	r4, [sp, #56]	; 0x38
 801cc32:	0e24      	lsrs	r4, r4, #24
 801cc34:	9415      	str	r4, [sp, #84]	; 0x54
 801cc36:	b179      	cbz	r1, 801cc58 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801cc38:	eb08 0c00 	add.w	ip, r8, r0
 801cc3c:	f818 0000 	ldrb.w	r0, [r8, r0]
 801cc40:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801cc44:	900a      	str	r0, [sp, #40]	; 0x28
 801cc46:	0e00      	lsrs	r0, r0, #24
 801cc48:	9013      	str	r0, [sp, #76]	; 0x4c
 801cc4a:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801cc4e:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801cc52:	900f      	str	r0, [sp, #60]	; 0x3c
 801cc54:	0e00      	lsrs	r0, r0, #24
 801cc56:	9016      	str	r0, [sp, #88]	; 0x58
 801cc58:	b292      	uxth	r2, r2
 801cc5a:	9815      	ldr	r0, [sp, #84]	; 0x54
 801cc5c:	b289      	uxth	r1, r1
 801cc5e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801cc60:	fb02 f901 	mul.w	r9, r2, r1
 801cc64:	0112      	lsls	r2, r2, #4
 801cc66:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801cc6a:	eba2 0809 	sub.w	r8, r2, r9
 801cc6e:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801cc72:	b289      	uxth	r1, r1
 801cc74:	fa1f f888 	uxth.w	r8, r8
 801cc78:	1a52      	subs	r2, r2, r1
 801cc7a:	fb08 f000 	mul.w	r0, r8, r0
 801cc7e:	b292      	uxth	r2, r2
 801cc80:	fb02 000e 	mla	r0, r2, lr, r0
 801cc84:	fb01 0004 	mla	r0, r1, r4, r0
 801cc88:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801cc8a:	fb09 0004 	mla	r0, r9, r4, r0
 801cc8e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801cc92:	2800      	cmp	r0, #0
 801cc94:	f000 80f2 	beq.w	801ce7c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801cc98:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801cc9c:	d01b      	beq.n	801ccd6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801cc9e:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801cca2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801cca6:	fb0e fa0a 	mul.w	sl, lr, sl
 801ccaa:	fb0e fe03 	mul.w	lr, lr, r3
 801ccae:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801ccb2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801ccb6:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801ccba:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801ccbe:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801ccc2:	4453      	add	r3, sl
 801ccc4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ccc8:	0a1b      	lsrs	r3, r3, #8
 801ccca:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801ccce:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801ccd2:	ea43 030c 	orr.w	r3, r3, ip
 801ccd6:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801ccd8:	2cff      	cmp	r4, #255	; 0xff
 801ccda:	d021      	beq.n	801cd20 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 801ccdc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801ccde:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801cce2:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801cce4:	fb04 fb0b 	mul.w	fp, r4, fp
 801cce8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801ccea:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801ccee:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801ccf0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801ccf4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801ccf8:	fb04 fa0a 	mul.w	sl, r4, sl
 801ccfc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801cd00:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801cd04:	44de      	add	lr, fp
 801cd06:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801cd0a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801cd0e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801cd12:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801cd16:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801cd1a:	ea4e 040a 	orr.w	r4, lr, sl
 801cd1e:	940e      	str	r4, [sp, #56]	; 0x38
 801cd20:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801cd22:	2cff      	cmp	r4, #255	; 0xff
 801cd24:	d021      	beq.n	801cd6a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 801cd26:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801cd28:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801cd2c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801cd2e:	fb04 fb0b 	mul.w	fp, r4, fp
 801cd32:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801cd34:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801cd38:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801cd3a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801cd3e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801cd42:	fb04 fa0a 	mul.w	sl, r4, sl
 801cd46:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801cd4a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801cd4e:	44de      	add	lr, fp
 801cd50:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801cd54:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801cd58:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801cd5c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801cd60:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801cd64:	ea4e 040a 	orr.w	r4, lr, sl
 801cd68:	940a      	str	r4, [sp, #40]	; 0x28
 801cd6a:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801cd6c:	2cff      	cmp	r4, #255	; 0xff
 801cd6e:	d021      	beq.n	801cdb4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 801cd70:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801cd72:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801cd76:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801cd78:	fb04 fb0b 	mul.w	fp, r4, fp
 801cd7c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801cd7e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801cd82:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801cd84:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801cd88:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801cd8c:	fb04 fa0a 	mul.w	sl, r4, sl
 801cd90:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801cd94:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801cd98:	44de      	add	lr, fp
 801cd9a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801cd9e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801cda2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801cda6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801cdaa:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801cdae:	ea4e 040a 	orr.w	r4, lr, sl
 801cdb2:	940f      	str	r4, [sp, #60]	; 0x3c
 801cdb4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801cdb6:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801cdba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801cdbe:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801cdc2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801cdc4:	fb08 fc0c 	mul.w	ip, r8, ip
 801cdc8:	fb02 cc0e 	mla	ip, r2, lr, ip
 801cdcc:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801cdd0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801cdd2:	fb01 cc0e 	mla	ip, r1, lr, ip
 801cdd6:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801cdda:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801cddc:	fb09 cc0e 	mla	ip, r9, lr, ip
 801cde0:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801cde4:	fb08 f80e 	mul.w	r8, r8, lr
 801cde8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801cdec:	fb02 8303 	mla	r3, r2, r3, r8
 801cdf0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801cdf2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801cdf6:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801cdfa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801cdfc:	fb01 330a 	mla	r3, r1, sl, r3
 801ce00:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 801ce04:	fb09 3901 	mla	r9, r9, r1, r3
 801ce08:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ce0a:	990d      	ldr	r1, [sp, #52]	; 0x34
 801ce0c:	4343      	muls	r3, r0
 801ce0e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801ce12:	1c58      	adds	r0, r3, #1
 801ce14:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801ce18:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801ce1c:	ea4c 0c09 	orr.w	ip, ip, r9
 801ce20:	783b      	ldrb	r3, [r7, #0]
 801ce22:	fa5f f28c 	uxtb.w	r2, ip
 801ce26:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801ce2a:	fb12 f201 	smulbb	r2, r2, r1
 801ce2e:	b2c0      	uxtb	r0, r0
 801ce30:	fb03 2300 	mla	r3, r3, r0, r2
 801ce34:	b29b      	uxth	r3, r3
 801ce36:	1c5a      	adds	r2, r3, #1
 801ce38:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801ce3c:	787a      	ldrb	r2, [r7, #1]
 801ce3e:	fb12 f200 	smulbb	r2, r2, r0
 801ce42:	121b      	asrs	r3, r3, #8
 801ce44:	703b      	strb	r3, [r7, #0]
 801ce46:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801ce4a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801ce4e:	fb03 2301 	mla	r3, r3, r1, r2
 801ce52:	b29b      	uxth	r3, r3
 801ce54:	1c5a      	adds	r2, r3, #1
 801ce56:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801ce5a:	121b      	asrs	r3, r3, #8
 801ce5c:	707b      	strb	r3, [r7, #1]
 801ce5e:	78bb      	ldrb	r3, [r7, #2]
 801ce60:	fb13 f000 	smulbb	r0, r3, r0
 801ce64:	fb0c 0c01 	mla	ip, ip, r1, r0
 801ce68:	fa1f fc8c 	uxth.w	ip, ip
 801ce6c:	f10c 0301 	add.w	r3, ip, #1
 801ce70:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801ce74:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801ce78:	f887 c002 	strb.w	ip, [r7, #2]
 801ce7c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801ce7e:	3703      	adds	r7, #3
 801ce80:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801ce82:	441a      	add	r2, r3
 801ce84:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801ce86:	441d      	add	r5, r3
 801ce88:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801ce8a:	9229      	str	r2, [sp, #164]	; 0xa4
 801ce8c:	3b01      	subs	r3, #1
 801ce8e:	931a      	str	r3, [sp, #104]	; 0x68
 801ce90:	e69c      	b.n	801cbcc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801ce92:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801ce94:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801ce96:	441c      	add	r4, r3
 801ce98:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801ce9a:	441d      	add	r5, r3
 801ce9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ce9e:	9429      	str	r4, [sp, #164]	; 0xa4
 801cea0:	3b01      	subs	r3, #1
 801cea2:	9309      	str	r3, [sp, #36]	; 0x24
 801cea4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cea6:	3303      	adds	r3, #3
 801cea8:	930c      	str	r3, [sp, #48]	; 0x30
 801ceaa:	e66f      	b.n	801cb8c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801ceac:	d026      	beq.n	801cefc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 801ceae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ceb0:	982b      	ldr	r0, [sp, #172]	; 0xac
 801ceb2:	3b01      	subs	r3, #1
 801ceb4:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801ceb6:	fb00 4003 	mla	r0, r0, r3, r4
 801ceba:	1400      	asrs	r0, r0, #16
 801cebc:	f53f ae83 	bmi.w	801cbc6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801cec0:	3901      	subs	r1, #1
 801cec2:	4288      	cmp	r0, r1
 801cec4:	f6bf ae7f 	bge.w	801cbc6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801cec8:	992c      	ldr	r1, [sp, #176]	; 0xb0
 801ceca:	fb01 5303 	mla	r3, r1, r3, r5
 801cece:	141b      	asrs	r3, r3, #16
 801ced0:	f53f ae79 	bmi.w	801cbc6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801ced4:	3a01      	subs	r2, #1
 801ced6:	4293      	cmp	r3, r2
 801ced8:	f6bf ae75 	bge.w	801cbc6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801cedc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cede:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 801cee2:	f103 0e03 	add.w	lr, r3, #3
 801cee6:	f1bb 0f00 	cmp.w	fp, #0
 801ceea:	dc71      	bgt.n	801cfd0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801ceec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ceee:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801cef2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cef4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801cef8:	4423      	add	r3, r4
 801cefa:	930c      	str	r3, [sp, #48]	; 0x30
 801cefc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801cefe:	2b00      	cmp	r3, #0
 801cf00:	f340 81b5 	ble.w	801d26e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 801cf04:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801cf08:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801cf0a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801cf0e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801cf12:	eef0 6a62 	vmov.f32	s13, s5
 801cf16:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801cf1a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801cf1e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801cf22:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 801cf26:	eef0 6a43 	vmov.f32	s13, s6
 801cf2a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801cf2e:	ee16 5a90 	vmov	r5, s13
 801cf32:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801cf36:	ee61 7a27 	vmul.f32	s15, s2, s15
 801cf3a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801cf3e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801cf42:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801cf46:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801cf4a:	ee12 2a90 	vmov	r2, s5
 801cf4e:	eef0 2a47 	vmov.f32	s5, s14
 801cf52:	fb92 f3f3 	sdiv	r3, r2, r3
 801cf56:	ee13 2a10 	vmov	r2, s6
 801cf5a:	932b      	str	r3, [sp, #172]	; 0xac
 801cf5c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801cf5e:	eeb0 3a67 	vmov.f32	s6, s15
 801cf62:	fb92 f3f3 	sdiv	r3, r2, r3
 801cf66:	932c      	str	r3, [sp, #176]	; 0xb0
 801cf68:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801cf6a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801cf6c:	3b01      	subs	r3, #1
 801cf6e:	9319      	str	r3, [sp, #100]	; 0x64
 801cf70:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801cf72:	bf08      	it	eq
 801cf74:	4613      	moveq	r3, r2
 801cf76:	9309      	str	r3, [sp, #36]	; 0x24
 801cf78:	e5fa      	b.n	801cb70 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801cf7a:	2900      	cmp	r1, #0
 801cf7c:	f43f ae6c 	beq.w	801cc58 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801cf80:	f818 0000 	ldrb.w	r0, [r8, r0]
 801cf84:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801cf88:	900a      	str	r0, [sp, #40]	; 0x28
 801cf8a:	0e00      	lsrs	r0, r0, #24
 801cf8c:	9013      	str	r0, [sp, #76]	; 0x4c
 801cf8e:	e663      	b.n	801cc58 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801cf90:	f113 0801 	adds.w	r8, r3, #1
 801cf94:	f53f af72 	bmi.w	801ce7c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801cf98:	4540      	cmp	r0, r8
 801cf9a:	f6ff af6f 	blt.w	801ce7c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801cf9e:	f11c 0801 	adds.w	r8, ip, #1
 801cfa2:	f53f af6b 	bmi.w	801ce7c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801cfa6:	45c6      	cmp	lr, r8
 801cfa8:	f6ff af68 	blt.w	801ce7c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801cfac:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801cfae:	b200      	sxth	r0, r0
 801cfb0:	9302      	str	r3, [sp, #8]
 801cfb2:	fa0f f38e 	sxth.w	r3, lr
 801cfb6:	9000      	str	r0, [sp, #0]
 801cfb8:	9301      	str	r3, [sp, #4]
 801cfba:	4633      	mov	r3, r6
 801cfbc:	981d      	ldr	r0, [sp, #116]	; 0x74
 801cfbe:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801cfc2:	e9cd c203 	strd	ip, r2, [sp, #12]
 801cfc6:	4639      	mov	r1, r7
 801cfc8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801cfca:	f7ff fc74 	bl	801c8b6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 801cfce:	e755      	b.n	801ce7c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801cfd0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801cfd2:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801cfd6:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801cfd8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801cfdc:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801cfde:	1427      	asrs	r7, r4, #16
 801cfe0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801cfe2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801cfe6:	142b      	asrs	r3, r5, #16
 801cfe8:	fb01 7303 	mla	r3, r1, r3, r7
 801cfec:	18e7      	adds	r7, r4, r3
 801cfee:	5ce3      	ldrb	r3, [r4, r3]
 801cff0:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801cff4:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801cff8:	2a00      	cmp	r2, #0
 801cffa:	f000 812e 	beq.w	801d25a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x728>
 801cffe:	f897 8001 	ldrb.w	r8, [r7, #1]
 801d002:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 801d006:	9410      	str	r4, [sp, #64]	; 0x40
 801d008:	0e24      	lsrs	r4, r4, #24
 801d00a:	9417      	str	r4, [sp, #92]	; 0x5c
 801d00c:	b170      	cbz	r0, 801d02c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 801d00e:	eb07 0801 	add.w	r8, r7, r1
 801d012:	5c79      	ldrb	r1, [r7, r1]
 801d014:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801d018:	910b      	str	r1, [sp, #44]	; 0x2c
 801d01a:	0e09      	lsrs	r1, r1, #24
 801d01c:	9114      	str	r1, [sp, #80]	; 0x50
 801d01e:	f898 1001 	ldrb.w	r1, [r8, #1]
 801d022:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801d026:	9111      	str	r1, [sp, #68]	; 0x44
 801d028:	0e09      	lsrs	r1, r1, #24
 801d02a:	9118      	str	r1, [sp, #96]	; 0x60
 801d02c:	b292      	uxth	r2, r2
 801d02e:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801d030:	b280      	uxth	r0, r0
 801d032:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801d034:	fb02 f900 	mul.w	r9, r2, r0
 801d038:	0112      	lsls	r2, r2, #4
 801d03a:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801d03e:	eba2 0809 	sub.w	r8, r2, r9
 801d042:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801d046:	b280      	uxth	r0, r0
 801d048:	fa1f f888 	uxth.w	r8, r8
 801d04c:	1a12      	subs	r2, r2, r0
 801d04e:	fb08 f101 	mul.w	r1, r8, r1
 801d052:	b292      	uxth	r2, r2
 801d054:	fb02 110c 	mla	r1, r2, ip, r1
 801d058:	fb00 1104 	mla	r1, r0, r4, r1
 801d05c:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801d05e:	fb09 1104 	mla	r1, r9, r4, r1
 801d062:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801d066:	2900      	cmp	r1, #0
 801d068:	f000 80ec 	beq.w	801d244 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 801d06c:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801d070:	d019      	beq.n	801d0a6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x574>
 801d072:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801d076:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801d07a:	fb0c fa0a 	mul.w	sl, ip, sl
 801d07e:	fb0c fc03 	mul.w	ip, ip, r3
 801d082:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801d086:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801d08a:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801d08e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801d092:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801d096:	4453      	add	r3, sl
 801d098:	0a3f      	lsrs	r7, r7, #8
 801d09a:	0a1b      	lsrs	r3, r3, #8
 801d09c:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801d0a0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801d0a4:	433b      	orrs	r3, r7
 801d0a6:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801d0a8:	2cff      	cmp	r4, #255	; 0xff
 801d0aa:	d020      	beq.n	801d0ee <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5bc>
 801d0ac:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801d0ae:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801d0b2:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801d0b4:	4367      	muls	r7, r4
 801d0b6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801d0b8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801d0bc:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801d0c0:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801d0c2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801d0c6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d0ca:	fb04 fa0a 	mul.w	sl, r4, sl
 801d0ce:	44bc      	add	ip, r7
 801d0d0:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801d0d4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d0d8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d0dc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d0e0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d0e4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801d0e8:	ea4c 040a 	orr.w	r4, ip, sl
 801d0ec:	9410      	str	r4, [sp, #64]	; 0x40
 801d0ee:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801d0f0:	2cff      	cmp	r4, #255	; 0xff
 801d0f2:	d020      	beq.n	801d136 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x604>
 801d0f4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801d0f6:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801d0fa:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801d0fc:	4367      	muls	r7, r4
 801d0fe:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801d100:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801d104:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801d108:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801d10a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801d10e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d112:	fb04 fa0a 	mul.w	sl, r4, sl
 801d116:	44bc      	add	ip, r7
 801d118:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801d11c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d120:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d124:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d128:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d12c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801d130:	ea4c 040a 	orr.w	r4, ip, sl
 801d134:	940b      	str	r4, [sp, #44]	; 0x2c
 801d136:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801d138:	2cff      	cmp	r4, #255	; 0xff
 801d13a:	d020      	beq.n	801d17e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 801d13c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801d13e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801d142:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801d144:	4367      	muls	r7, r4
 801d146:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801d148:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801d14c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801d150:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801d152:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801d156:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d15a:	fb04 fa0a 	mul.w	sl, r4, sl
 801d15e:	44bc      	add	ip, r7
 801d160:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801d164:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d168:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d16c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d170:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d174:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801d178:	ea4c 040a 	orr.w	r4, ip, sl
 801d17c:	9411      	str	r4, [sp, #68]	; 0x44
 801d17e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801d180:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801d184:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801d188:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801d18c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801d18e:	fb08 f707 	mul.w	r7, r8, r7
 801d192:	fb02 770c 	mla	r7, r2, ip, r7
 801d196:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801d19a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801d19c:	fb00 770c 	mla	r7, r0, ip, r7
 801d1a0:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801d1a4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801d1a6:	fb09 770c 	mla	r7, r9, ip, r7
 801d1aa:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801d1ae:	fb08 f80c 	mul.w	r8, r8, ip
 801d1b2:	0a3f      	lsrs	r7, r7, #8
 801d1b4:	fb02 8303 	mla	r3, r2, r3, r8
 801d1b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801d1ba:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801d1be:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801d1c2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d1c4:	fb00 330a 	mla	r3, r0, sl, r3
 801d1c8:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801d1cc:	980d      	ldr	r0, [sp, #52]	; 0x34
 801d1ce:	fb09 3c0c 	mla	ip, r9, ip, r3
 801d1d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d1d4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d1d8:	434b      	muls	r3, r1
 801d1da:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801d1de:	1c59      	adds	r1, r3, #1
 801d1e0:	ea47 070c 	orr.w	r7, r7, ip
 801d1e4:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801d1e8:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801d1ec:	b2fa      	uxtb	r2, r7
 801d1ee:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801d1f2:	fb12 f200 	smulbb	r2, r2, r0
 801d1f6:	b2c9      	uxtb	r1, r1
 801d1f8:	fb03 2301 	mla	r3, r3, r1, r2
 801d1fc:	b29b      	uxth	r3, r3
 801d1fe:	1c5a      	adds	r2, r3, #1
 801d200:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801d204:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 801d208:	fb12 f201 	smulbb	r2, r2, r1
 801d20c:	121b      	asrs	r3, r3, #8
 801d20e:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801d212:	f3c7 2307 	ubfx	r3, r7, #8, #8
 801d216:	0c3f      	lsrs	r7, r7, #16
 801d218:	fb03 2300 	mla	r3, r3, r0, r2
 801d21c:	b29b      	uxth	r3, r3
 801d21e:	1c5a      	adds	r2, r3, #1
 801d220:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801d224:	121b      	asrs	r3, r3, #8
 801d226:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801d22a:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801d22e:	fb13 f101 	smulbb	r1, r3, r1
 801d232:	fb07 1700 	mla	r7, r7, r0, r1
 801d236:	b2bf      	uxth	r7, r7
 801d238:	1c7b      	adds	r3, r7, #1
 801d23a:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 801d23e:	123f      	asrs	r7, r7, #8
 801d240:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801d244:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801d246:	f10e 0e03 	add.w	lr, lr, #3
 801d24a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801d24c:	f10b 3bff 	add.w	fp, fp, #4294967295
 801d250:	441a      	add	r2, r3
 801d252:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801d254:	9229      	str	r2, [sp, #164]	; 0xa4
 801d256:	441d      	add	r5, r3
 801d258:	e645      	b.n	801cee6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 801d25a:	2800      	cmp	r0, #0
 801d25c:	f43f aee6 	beq.w	801d02c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 801d260:	5c79      	ldrb	r1, [r7, r1]
 801d262:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801d266:	910b      	str	r1, [sp, #44]	; 0x2c
 801d268:	0e09      	lsrs	r1, r1, #24
 801d26a:	9114      	str	r1, [sp, #80]	; 0x50
 801d26c:	e6de      	b.n	801d02c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 801d26e:	b01f      	add	sp, #124	; 0x7c
 801d270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d274 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 801d274:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d278:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	; 0x38
 801d27c:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 801d280:	2d00      	cmp	r5, #0
 801d282:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 801d286:	fb05 700e 	mla	r0, r5, lr, r7
 801d28a:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 801d28e:	f89d c044 	ldrb.w	ip, [sp, #68]	; 0x44
 801d292:	eb02 0800 	add.w	r8, r2, r0
 801d296:	f2c0 8105 	blt.w	801d4a4 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 801d29a:	45a9      	cmp	r9, r5
 801d29c:	f340 8102 	ble.w	801d4a4 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 801d2a0:	2f00      	cmp	r7, #0
 801d2a2:	f2c0 80fd 	blt.w	801d4a0 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 801d2a6:	45be      	cmp	lr, r7
 801d2a8:	f340 80fa 	ble.w	801d4a0 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 801d2ac:	5c12      	ldrb	r2, [r2, r0]
 801d2ae:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801d2b2:	1c7a      	adds	r2, r7, #1
 801d2b4:	f100 80f9 	bmi.w	801d4aa <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 801d2b8:	4596      	cmp	lr, r2
 801d2ba:	f340 80f6 	ble.w	801d4aa <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 801d2be:	2c00      	cmp	r4, #0
 801d2c0:	f000 80f5 	beq.w	801d4ae <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23a>
 801d2c4:	f898 2001 	ldrb.w	r2, [r8, #1]
 801d2c8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801d2cc:	3501      	adds	r5, #1
 801d2ce:	f100 80f2 	bmi.w	801d4b6 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 801d2d2:	45a9      	cmp	r9, r5
 801d2d4:	f340 80ef 	ble.w	801d4b6 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 801d2d8:	f1bc 0f00 	cmp.w	ip, #0
 801d2dc:	f000 80ee 	beq.w	801d4bc <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x248>
 801d2e0:	2f00      	cmp	r7, #0
 801d2e2:	f2c0 80e6 	blt.w	801d4b2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 801d2e6:	45be      	cmp	lr, r7
 801d2e8:	f340 80e3 	ble.w	801d4b2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 801d2ec:	f818 200e 	ldrb.w	r2, [r8, lr]
 801d2f0:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801d2f4:	3701      	adds	r7, #1
 801d2f6:	f100 80e4 	bmi.w	801d4c2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 801d2fa:	45be      	cmp	lr, r7
 801d2fc:	f340 80e1 	ble.w	801d4c2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 801d300:	2c00      	cmp	r4, #0
 801d302:	f000 80e0 	beq.w	801d4c6 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x252>
 801d306:	44c6      	add	lr, r8
 801d308:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801d30c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801d310:	b2a3      	uxth	r3, r4
 801d312:	fa1f fc8c 	uxth.w	ip, ip
 801d316:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 801d31a:	fb0c fe03 	mul.w	lr, ip, r3
 801d31e:	011b      	lsls	r3, r3, #4
 801d320:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801d324:	ebce 1c0c 	rsb	ip, lr, ip, lsl #4
 801d328:	eba3 070e 	sub.w	r7, r3, lr
 801d32c:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 801d330:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801d334:	fa1f f48c 	uxth.w	r4, ip
 801d338:	b2bf      	uxth	r7, r7
 801d33a:	1b1b      	subs	r3, r3, r4
 801d33c:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801d340:	fb07 fc0a 	mul.w	ip, r7, sl
 801d344:	b29b      	uxth	r3, r3
 801d346:	fb03 cc0b 	mla	ip, r3, fp, ip
 801d34a:	9300      	str	r3, [sp, #0]
 801d34c:	fb04 cc09 	mla	ip, r4, r9, ip
 801d350:	fb0e cc08 	mla	ip, lr, r8, ip
 801d354:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801d358:	9301      	str	r3, [sp, #4]
 801d35a:	2b00      	cmp	r3, #0
 801d35c:	f000 809d 	beq.w	801d49a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x226>
 801d360:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801d364:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801d368:	fb0b fc0c 	mul.w	ip, fp, ip
 801d36c:	fb0b f606 	mul.w	r6, fp, r6
 801d370:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801d374:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801d378:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 801d37c:	44dc      	add	ip, fp
 801d37e:	f000 1bff 	and.w	fp, r0, #16711935	; 0xff00ff
 801d382:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801d386:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d38a:	fb0a fb0b 	mul.w	fp, sl, fp
 801d38e:	fb0a fa00 	mul.w	sl, sl, r0
 801d392:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 801d396:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801d39a:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 801d39e:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801d3a2:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801d3a6:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801d3aa:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 801d3ae:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d3b2:	0a36      	lsrs	r6, r6, #8
 801d3b4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d3b8:	44dc      	add	ip, fp
 801d3ba:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 801d3be:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801d3c2:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801d3c6:	fb09 fb0b 	mul.w	fp, r9, fp
 801d3ca:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d3ce:	fb09 f905 	mul.w	r9, r9, r5
 801d3d2:	ea4f 201b 	mov.w	r0, fp, lsr #8
 801d3d6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d3da:	f509 7580 	add.w	r5, r9, #256	; 0x100
 801d3de:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801d3e2:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801d3e6:	fb0c fc07 	mul.w	ip, ip, r7
 801d3ea:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 801d3ee:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 801d3f2:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801d3f6:	4458      	add	r0, fp
 801d3f8:	fb08 f505 	mul.w	r5, r8, r5
 801d3fc:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801d400:	fb08 f802 	mul.w	r8, r8, r2
 801d404:	0a00      	lsrs	r0, r0, #8
 801d406:	0a2a      	lsrs	r2, r5, #8
 801d408:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 801d40c:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801d410:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801d414:	4415      	add	r5, r2
 801d416:	f508 7280 	add.w	r2, r8, #256	; 0x100
 801d41a:	0a2d      	lsrs	r5, r5, #8
 801d41c:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801d420:	9a00      	ldr	r2, [sp, #0]
 801d422:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801d426:	fb03 cc02 	mla	ip, r3, r2, ip
 801d42a:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801d42e:	9b01      	ldr	r3, [sp, #4]
 801d430:	fb05 c50e 	mla	r5, r5, lr, ip
 801d434:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801d438:	43db      	mvns	r3, r3
 801d43a:	fb00 5004 	mla	r0, r0, r4, r5
 801d43e:	b2db      	uxtb	r3, r3
 801d440:	0a00      	lsrs	r0, r0, #8
 801d442:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 801d446:	f40a 407f 	and.w	r0, sl, #65280	; 0xff00
 801d44a:	4378      	muls	r0, r7
 801d44c:	fb02 0006 	mla	r0, r2, r6, r0
 801d450:	780a      	ldrb	r2, [r1, #0]
 801d452:	fb0e 0e08 	mla	lr, lr, r8, r0
 801d456:	f409 407f 	and.w	r0, r9, #65280	; 0xff00
 801d45a:	fb04 e000 	mla	r0, r4, r0, lr
 801d45e:	fb02 f403 	mul.w	r4, r2, r3
 801d462:	0a00      	lsrs	r0, r0, #8
 801d464:	1c62      	adds	r2, r4, #1
 801d466:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801d46a:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801d46e:	4328      	orrs	r0, r5
 801d470:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801d474:	700a      	strb	r2, [r1, #0]
 801d476:	784a      	ldrb	r2, [r1, #1]
 801d478:	435a      	muls	r2, r3
 801d47a:	1c54      	adds	r4, r2, #1
 801d47c:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 801d480:	0a02      	lsrs	r2, r0, #8
 801d482:	0c00      	lsrs	r0, r0, #16
 801d484:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801d488:	704a      	strb	r2, [r1, #1]
 801d48a:	788a      	ldrb	r2, [r1, #2]
 801d48c:	4353      	muls	r3, r2
 801d48e:	1c5a      	adds	r2, r3, #1
 801d490:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801d494:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801d498:	7088      	strb	r0, [r1, #2]
 801d49a:	b003      	add	sp, #12
 801d49c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d4a0:	2600      	movs	r6, #0
 801d4a2:	e706      	b.n	801d2b2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x3e>
 801d4a4:	2000      	movs	r0, #0
 801d4a6:	4606      	mov	r6, r0
 801d4a8:	e710      	b.n	801d2cc <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 801d4aa:	2000      	movs	r0, #0
 801d4ac:	e70e      	b.n	801d2cc <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 801d4ae:	4620      	mov	r0, r4
 801d4b0:	e70c      	b.n	801d2cc <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 801d4b2:	2500      	movs	r5, #0
 801d4b4:	e71e      	b.n	801d2f4 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x80>
 801d4b6:	2200      	movs	r2, #0
 801d4b8:	4615      	mov	r5, r2
 801d4ba:	e729      	b.n	801d310 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801d4bc:	4662      	mov	r2, ip
 801d4be:	4665      	mov	r5, ip
 801d4c0:	e726      	b.n	801d310 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801d4c2:	2200      	movs	r2, #0
 801d4c4:	e724      	b.n	801d310 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801d4c6:	4622      	mov	r2, r4
 801d4c8:	e722      	b.n	801d310 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>

0801d4ca <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d4ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d4ce:	b09b      	sub	sp, #108	; 0x6c
 801d4d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d4d4:	9218      	str	r2, [sp, #96]	; 0x60
 801d4d6:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801d4d8:	9019      	str	r0, [sp, #100]	; 0x64
 801d4da:	9116      	str	r1, [sp, #88]	; 0x58
 801d4dc:	6850      	ldr	r0, [r2, #4]
 801d4de:	9307      	str	r3, [sp, #28]
 801d4e0:	6812      	ldr	r2, [r2, #0]
 801d4e2:	9d26      	ldr	r5, [sp, #152]	; 0x98
 801d4e4:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 801d4e8:	fb00 1303 	mla	r3, r0, r3, r1
 801d4ec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d4f0:	18d3      	adds	r3, r2, r3
 801d4f2:	930a      	str	r3, [sp, #40]	; 0x28
 801d4f4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801d4f6:	681b      	ldr	r3, [r3, #0]
 801d4f8:	930f      	str	r3, [sp, #60]	; 0x3c
 801d4fa:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801d4fc:	685e      	ldr	r6, [r3, #4]
 801d4fe:	3604      	adds	r6, #4
 801d500:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801d502:	2b00      	cmp	r3, #0
 801d504:	dc03      	bgt.n	801d50e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801d506:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801d508:	2b00      	cmp	r3, #0
 801d50a:	f340 834f 	ble.w	801dbac <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 801d50e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801d510:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801d514:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801d518:	1e48      	subs	r0, r1, #1
 801d51a:	1e57      	subs	r7, r2, #1
 801d51c:	9b07      	ldr	r3, [sp, #28]
 801d51e:	2b00      	cmp	r3, #0
 801d520:	f340 8178 	ble.w	801d814 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801d524:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801d526:	142b      	asrs	r3, r5, #16
 801d528:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801d52c:	d406      	bmi.n	801d53c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d52e:	4584      	cmp	ip, r0
 801d530:	da04      	bge.n	801d53c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d532:	2b00      	cmp	r3, #0
 801d534:	db02      	blt.n	801d53c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d536:	42bb      	cmp	r3, r7
 801d538:	f2c0 816d 	blt.w	801d816 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801d53c:	f11c 0c01 	adds.w	ip, ip, #1
 801d540:	f100 815b 	bmi.w	801d7fa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801d544:	4561      	cmp	r1, ip
 801d546:	f2c0 8158 	blt.w	801d7fa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801d54a:	3301      	adds	r3, #1
 801d54c:	f100 8155 	bmi.w	801d7fa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801d550:	429a      	cmp	r2, r3
 801d552:	f2c0 8152 	blt.w	801d7fa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801d556:	9b07      	ldr	r3, [sp, #28]
 801d558:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801d55a:	9317      	str	r3, [sp, #92]	; 0x5c
 801d55c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801d55e:	2b00      	cmp	r3, #0
 801d560:	f340 8178 	ble.w	801d854 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801d564:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801d566:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801d56a:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801d56e:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801d572:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801d574:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 801d578:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801d57a:	141b      	asrs	r3, r3, #16
 801d57c:	f100 81ba 	bmi.w	801d8f4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801d580:	f101 38ff 	add.w	r8, r1, #4294967295
 801d584:	4543      	cmp	r3, r8
 801d586:	f280 81b5 	bge.w	801d8f4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801d58a:	f1bc 0f00 	cmp.w	ip, #0
 801d58e:	f2c0 81b1 	blt.w	801d8f4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801d592:	f10e 38ff 	add.w	r8, lr, #4294967295
 801d596:	45c4      	cmp	ip, r8
 801d598:	f280 81ac 	bge.w	801d8f4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801d59c:	b209      	sxth	r1, r1
 801d59e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801d5a0:	fb0c 3301 	mla	r3, ip, r1, r3
 801d5a4:	eb04 0803 	add.w	r8, r4, r3
 801d5a8:	5ce3      	ldrb	r3, [r4, r3]
 801d5aa:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801d5ae:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801d5b2:	2a00      	cmp	r2, #0
 801d5b4:	f000 8193 	beq.w	801d8de <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x414>
 801d5b8:	f898 c001 	ldrb.w	ip, [r8, #1]
 801d5bc:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801d5c0:	940b      	str	r4, [sp, #44]	; 0x2c
 801d5c2:	0e24      	lsrs	r4, r4, #24
 801d5c4:	9412      	str	r4, [sp, #72]	; 0x48
 801d5c6:	b178      	cbz	r0, 801d5e8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801d5c8:	eb08 0c01 	add.w	ip, r8, r1
 801d5cc:	f818 1001 	ldrb.w	r1, [r8, r1]
 801d5d0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801d5d4:	9108      	str	r1, [sp, #32]
 801d5d6:	0e09      	lsrs	r1, r1, #24
 801d5d8:	9110      	str	r1, [sp, #64]	; 0x40
 801d5da:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801d5de:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801d5e2:	910c      	str	r1, [sp, #48]	; 0x30
 801d5e4:	0e09      	lsrs	r1, r1, #24
 801d5e6:	9113      	str	r1, [sp, #76]	; 0x4c
 801d5e8:	b292      	uxth	r2, r2
 801d5ea:	9912      	ldr	r1, [sp, #72]	; 0x48
 801d5ec:	b280      	uxth	r0, r0
 801d5ee:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801d5f0:	fb02 f900 	mul.w	r9, r2, r0
 801d5f4:	0112      	lsls	r2, r2, #4
 801d5f6:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801d5fa:	eba2 0809 	sub.w	r8, r2, r9
 801d5fe:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801d602:	b280      	uxth	r0, r0
 801d604:	fa1f f888 	uxth.w	r8, r8
 801d608:	1a12      	subs	r2, r2, r0
 801d60a:	fb08 f101 	mul.w	r1, r8, r1
 801d60e:	b292      	uxth	r2, r2
 801d610:	fb02 110e 	mla	r1, r2, lr, r1
 801d614:	fb00 1104 	mla	r1, r0, r4, r1
 801d618:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801d61a:	fb09 1104 	mla	r1, r9, r4, r1
 801d61e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801d622:	2900      	cmp	r1, #0
 801d624:	f000 80de 	beq.w	801d7e4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801d628:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801d62c:	d01b      	beq.n	801d666 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 801d62e:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801d632:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801d636:	fb0e fa0a 	mul.w	sl, lr, sl
 801d63a:	fb0e fe03 	mul.w	lr, lr, r3
 801d63e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801d642:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801d646:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801d64a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801d64e:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801d652:	4453      	add	r3, sl
 801d654:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d658:	0a1b      	lsrs	r3, r3, #8
 801d65a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801d65e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801d662:	ea43 030c 	orr.w	r3, r3, ip
 801d666:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801d668:	2cff      	cmp	r4, #255	; 0xff
 801d66a:	d021      	beq.n	801d6b0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801d66c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801d66e:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801d672:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801d674:	fb04 fb0b 	mul.w	fp, r4, fp
 801d678:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801d67a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801d67e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801d680:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801d684:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801d688:	fb04 fa0a 	mul.w	sl, r4, sl
 801d68c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801d690:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801d694:	44de      	add	lr, fp
 801d696:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801d69a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d69e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d6a2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801d6a6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801d6aa:	ea4e 040a 	orr.w	r4, lr, sl
 801d6ae:	940b      	str	r4, [sp, #44]	; 0x2c
 801d6b0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801d6b2:	2cff      	cmp	r4, #255	; 0xff
 801d6b4:	d021      	beq.n	801d6fa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 801d6b6:	9c08      	ldr	r4, [sp, #32]
 801d6b8:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801d6bc:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801d6be:	fb04 fb0b 	mul.w	fp, r4, fp
 801d6c2:	9c08      	ldr	r4, [sp, #32]
 801d6c4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801d6c8:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801d6ca:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801d6ce:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801d6d2:	fb04 fa0a 	mul.w	sl, r4, sl
 801d6d6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801d6da:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801d6de:	44de      	add	lr, fp
 801d6e0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801d6e4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d6e8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d6ec:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801d6f0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801d6f4:	ea4e 040a 	orr.w	r4, lr, sl
 801d6f8:	9408      	str	r4, [sp, #32]
 801d6fa:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801d6fc:	2cff      	cmp	r4, #255	; 0xff
 801d6fe:	d021      	beq.n	801d744 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801d700:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801d702:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801d706:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801d708:	fb04 fb0b 	mul.w	fp, r4, fp
 801d70c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801d70e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801d712:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801d714:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801d718:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801d71c:	fb04 fa0a 	mul.w	sl, r4, sl
 801d720:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801d724:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801d728:	44de      	add	lr, fp
 801d72a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801d72e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d732:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d736:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801d73a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801d73e:	ea4e 040a 	orr.w	r4, lr, sl
 801d742:	940c      	str	r4, [sp, #48]	; 0x30
 801d744:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801d746:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801d74a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801d74e:	43c9      	mvns	r1, r1
 801d750:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801d754:	9c08      	ldr	r4, [sp, #32]
 801d756:	b2c9      	uxtb	r1, r1
 801d758:	fb08 fc0c 	mul.w	ip, r8, ip
 801d75c:	fb02 cc0e 	mla	ip, r2, lr, ip
 801d760:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801d764:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801d766:	fb00 cc0e 	mla	ip, r0, lr, ip
 801d76a:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801d76e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801d770:	fb09 cc0e 	mla	ip, r9, lr, ip
 801d774:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801d778:	fb08 f80e 	mul.w	r8, r8, lr
 801d77c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d780:	fb02 8303 	mla	r3, r2, r3, r8
 801d784:	9a08      	ldr	r2, [sp, #32]
 801d786:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d78a:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801d78e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d790:	fb00 330a 	mla	r3, r0, sl, r3
 801d794:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 801d798:	fb09 3900 	mla	r9, r9, r0, r3
 801d79c:	783b      	ldrb	r3, [r7, #0]
 801d79e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801d7a2:	fb03 f201 	mul.w	r2, r3, r1
 801d7a6:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801d7aa:	1c53      	adds	r3, r2, #1
 801d7ac:	ea4c 0c09 	orr.w	ip, ip, r9
 801d7b0:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801d7b4:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 801d7b8:	703b      	strb	r3, [r7, #0]
 801d7ba:	787b      	ldrb	r3, [r7, #1]
 801d7bc:	434b      	muls	r3, r1
 801d7be:	1c5a      	adds	r2, r3, #1
 801d7c0:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801d7c4:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801d7c8:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801d7cc:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801d7d0:	707b      	strb	r3, [r7, #1]
 801d7d2:	78bb      	ldrb	r3, [r7, #2]
 801d7d4:	4359      	muls	r1, r3
 801d7d6:	1c4b      	adds	r3, r1, #1
 801d7d8:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801d7dc:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 801d7e0:	f887 c002 	strb.w	ip, [r7, #2]
 801d7e4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801d7e6:	3703      	adds	r7, #3
 801d7e8:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801d7ea:	441a      	add	r2, r3
 801d7ec:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801d7ee:	441d      	add	r5, r3
 801d7f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801d7f2:	9225      	str	r2, [sp, #148]	; 0x94
 801d7f4:	3b01      	subs	r3, #1
 801d7f6:	9317      	str	r3, [sp, #92]	; 0x5c
 801d7f8:	e6b0      	b.n	801d55c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801d7fa:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801d7fc:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801d7fe:	441c      	add	r4, r3
 801d800:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801d802:	441d      	add	r5, r3
 801d804:	9b07      	ldr	r3, [sp, #28]
 801d806:	9425      	str	r4, [sp, #148]	; 0x94
 801d808:	3b01      	subs	r3, #1
 801d80a:	9307      	str	r3, [sp, #28]
 801d80c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d80e:	3303      	adds	r3, #3
 801d810:	930a      	str	r3, [sp, #40]	; 0x28
 801d812:	e683      	b.n	801d51c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801d814:	d026      	beq.n	801d864 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 801d816:	9b07      	ldr	r3, [sp, #28]
 801d818:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801d81a:	3b01      	subs	r3, #1
 801d81c:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801d81e:	fb00 4003 	mla	r0, r0, r3, r4
 801d822:	1400      	asrs	r0, r0, #16
 801d824:	f53f ae97 	bmi.w	801d556 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801d828:	3901      	subs	r1, #1
 801d82a:	4288      	cmp	r0, r1
 801d82c:	f6bf ae93 	bge.w	801d556 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801d830:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801d832:	fb01 5303 	mla	r3, r1, r3, r5
 801d836:	141b      	asrs	r3, r3, #16
 801d838:	f53f ae8d 	bmi.w	801d556 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801d83c:	3a01      	subs	r2, #1
 801d83e:	4293      	cmp	r3, r2
 801d840:	f6bf ae89 	bge.w	801d556 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801d844:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d846:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801d84a:	f103 0e03 	add.w	lr, r3, #3
 801d84e:	f1bb 0f00 	cmp.w	fp, #0
 801d852:	dc6d      	bgt.n	801d930 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x466>
 801d854:	9b07      	ldr	r3, [sp, #28]
 801d856:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801d85a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d85c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801d860:	4423      	add	r3, r4
 801d862:	930a      	str	r3, [sp, #40]	; 0x28
 801d864:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801d866:	2b00      	cmp	r3, #0
 801d868:	f340 81a0 	ble.w	801dbac <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 801d86c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d870:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801d872:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d876:	eeb0 6a62 	vmov.f32	s12, s5
 801d87a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d87e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d882:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d886:	ed8d 6a25 	vstr	s12, [sp, #148]	; 0x94
 801d88a:	eeb0 6a43 	vmov.f32	s12, s6
 801d88e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d892:	ee16 5a10 	vmov	r5, s12
 801d896:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d89a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d89e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d8a2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d8a6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d8aa:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d8ae:	ee12 2a90 	vmov	r2, s5
 801d8b2:	eef0 2a47 	vmov.f32	s5, s14
 801d8b6:	fb92 f3f3 	sdiv	r3, r2, r3
 801d8ba:	ee13 2a10 	vmov	r2, s6
 801d8be:	9327      	str	r3, [sp, #156]	; 0x9c
 801d8c0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801d8c2:	eeb0 3a67 	vmov.f32	s6, s15
 801d8c6:	fb92 f3f3 	sdiv	r3, r2, r3
 801d8ca:	9328      	str	r3, [sp, #160]	; 0xa0
 801d8cc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801d8ce:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801d8d0:	3b01      	subs	r3, #1
 801d8d2:	9316      	str	r3, [sp, #88]	; 0x58
 801d8d4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801d8d6:	bf08      	it	eq
 801d8d8:	4613      	moveq	r3, r2
 801d8da:	9307      	str	r3, [sp, #28]
 801d8dc:	e610      	b.n	801d500 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801d8de:	2800      	cmp	r0, #0
 801d8e0:	f43f ae82 	beq.w	801d5e8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801d8e4:	f818 1001 	ldrb.w	r1, [r8, r1]
 801d8e8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801d8ec:	9108      	str	r1, [sp, #32]
 801d8ee:	0e09      	lsrs	r1, r1, #24
 801d8f0:	9110      	str	r1, [sp, #64]	; 0x40
 801d8f2:	e679      	b.n	801d5e8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801d8f4:	f113 0801 	adds.w	r8, r3, #1
 801d8f8:	f53f af74 	bmi.w	801d7e4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801d8fc:	4541      	cmp	r1, r8
 801d8fe:	f6ff af71 	blt.w	801d7e4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801d902:	f11c 0801 	adds.w	r8, ip, #1
 801d906:	f53f af6d 	bmi.w	801d7e4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801d90a:	45c6      	cmp	lr, r8
 801d90c:	f6ff af6a 	blt.w	801d7e4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801d910:	b209      	sxth	r1, r1
 801d912:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 801d916:	fa0f f38e 	sxth.w	r3, lr
 801d91a:	9100      	str	r1, [sp, #0]
 801d91c:	4639      	mov	r1, r7
 801d91e:	9301      	str	r3, [sp, #4]
 801d920:	4633      	mov	r3, r6
 801d922:	e9cd 2004 	strd	r2, r0, [sp, #16]
 801d926:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d928:	9819      	ldr	r0, [sp, #100]	; 0x64
 801d92a:	f7ff fca3 	bl	801d274 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 801d92e:	e759      	b.n	801d7e4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801d930:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801d932:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801d936:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801d938:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801d93c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801d93e:	1427      	asrs	r7, r4, #16
 801d940:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801d942:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801d946:	142b      	asrs	r3, r5, #16
 801d948:	fb01 7303 	mla	r3, r1, r3, r7
 801d94c:	18e7      	adds	r7, r4, r3
 801d94e:	5ce3      	ldrb	r3, [r4, r3]
 801d950:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801d954:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801d958:	2a00      	cmp	r2, #0
 801d95a:	f000 811d 	beq.w	801db98 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ce>
 801d95e:	f897 8001 	ldrb.w	r8, [r7, #1]
 801d962:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 801d966:	940d      	str	r4, [sp, #52]	; 0x34
 801d968:	0e24      	lsrs	r4, r4, #24
 801d96a:	9414      	str	r4, [sp, #80]	; 0x50
 801d96c:	b170      	cbz	r0, 801d98c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801d96e:	eb07 0801 	add.w	r8, r7, r1
 801d972:	5c79      	ldrb	r1, [r7, r1]
 801d974:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801d978:	9109      	str	r1, [sp, #36]	; 0x24
 801d97a:	0e09      	lsrs	r1, r1, #24
 801d97c:	9111      	str	r1, [sp, #68]	; 0x44
 801d97e:	f898 1001 	ldrb.w	r1, [r8, #1]
 801d982:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801d986:	910e      	str	r1, [sp, #56]	; 0x38
 801d988:	0e09      	lsrs	r1, r1, #24
 801d98a:	9115      	str	r1, [sp, #84]	; 0x54
 801d98c:	b292      	uxth	r2, r2
 801d98e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801d990:	b280      	uxth	r0, r0
 801d992:	fb02 f900 	mul.w	r9, r2, r0
 801d996:	0112      	lsls	r2, r2, #4
 801d998:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801d99c:	eba2 0809 	sub.w	r8, r2, r9
 801d9a0:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 801d9a4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d9a6:	b280      	uxth	r0, r0
 801d9a8:	fa1f f888 	uxth.w	r8, r8
 801d9ac:	1a09      	subs	r1, r1, r0
 801d9ae:	fb08 f202 	mul.w	r2, r8, r2
 801d9b2:	b289      	uxth	r1, r1
 801d9b4:	fb01 220c 	mla	r2, r1, ip, r2
 801d9b8:	fb00 2204 	mla	r2, r0, r4, r2
 801d9bc:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801d9be:	fb09 2204 	mla	r2, r9, r4, r2
 801d9c2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801d9c6:	2a00      	cmp	r2, #0
 801d9c8:	f000 80db 	beq.w	801db82 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 801d9cc:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801d9d0:	d019      	beq.n	801da06 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53c>
 801d9d2:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801d9d6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801d9da:	fb0c fa0a 	mul.w	sl, ip, sl
 801d9de:	fb0c fc03 	mul.w	ip, ip, r3
 801d9e2:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801d9e6:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801d9ea:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801d9ee:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801d9f2:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801d9f6:	4453      	add	r3, sl
 801d9f8:	0a3f      	lsrs	r7, r7, #8
 801d9fa:	0a1b      	lsrs	r3, r3, #8
 801d9fc:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801da00:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801da04:	433b      	orrs	r3, r7
 801da06:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801da08:	2cff      	cmp	r4, #255	; 0xff
 801da0a:	d020      	beq.n	801da4e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x584>
 801da0c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801da0e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801da12:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801da14:	4367      	muls	r7, r4
 801da16:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801da18:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801da1c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801da20:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801da22:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801da26:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801da2a:	fb04 fa0a 	mul.w	sl, r4, sl
 801da2e:	44bc      	add	ip, r7
 801da30:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801da34:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801da38:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801da3c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801da40:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801da44:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801da48:	ea4c 040a 	orr.w	r4, ip, sl
 801da4c:	940d      	str	r4, [sp, #52]	; 0x34
 801da4e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801da50:	2cff      	cmp	r4, #255	; 0xff
 801da52:	d020      	beq.n	801da96 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5cc>
 801da54:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801da56:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801da5a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801da5c:	4367      	muls	r7, r4
 801da5e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801da60:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801da64:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801da68:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801da6a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801da6e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801da72:	fb04 fa0a 	mul.w	sl, r4, sl
 801da76:	44bc      	add	ip, r7
 801da78:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801da7c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801da80:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801da84:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801da88:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801da8c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801da90:	ea4c 040a 	orr.w	r4, ip, sl
 801da94:	9409      	str	r4, [sp, #36]	; 0x24
 801da96:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801da98:	2cff      	cmp	r4, #255	; 0xff
 801da9a:	d020      	beq.n	801dade <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x614>
 801da9c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801da9e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801daa2:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801daa4:	4367      	muls	r7, r4
 801daa6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801daa8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801daac:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801dab0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801dab2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801dab6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801daba:	fb04 fa0a 	mul.w	sl, r4, sl
 801dabe:	44bc      	add	ip, r7
 801dac0:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801dac4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801dac8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801dacc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801dad0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801dad4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801dad8:	ea4c 040a 	orr.w	r4, ip, sl
 801dadc:	940e      	str	r4, [sp, #56]	; 0x38
 801dade:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801dae0:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801dae4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801dae8:	43d2      	mvns	r2, r2
 801daea:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801daee:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801daf0:	b2d2      	uxtb	r2, r2
 801daf2:	fb08 f707 	mul.w	r7, r8, r7
 801daf6:	fb01 770c 	mla	r7, r1, ip, r7
 801dafa:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801dafe:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801db00:	fb00 770c 	mla	r7, r0, ip, r7
 801db04:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801db08:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801db0a:	fb09 770c 	mla	r7, r9, ip, r7
 801db0e:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801db12:	fb08 f80c 	mul.w	r8, r8, ip
 801db16:	0a3f      	lsrs	r7, r7, #8
 801db18:	fb01 8303 	mla	r3, r1, r3, r8
 801db1c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801db1e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801db22:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 801db26:	990e      	ldr	r1, [sp, #56]	; 0x38
 801db28:	fb00 330a 	mla	r3, r0, sl, r3
 801db2c:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 801db30:	fb09 3c0c 	mla	ip, r9, ip, r3
 801db34:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801db38:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801db3c:	fb03 f102 	mul.w	r1, r3, r2
 801db40:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801db44:	1c4b      	adds	r3, r1, #1
 801db46:	ea47 070c 	orr.w	r7, r7, ip
 801db4a:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801db4e:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 801db52:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801db56:	f81e 3c02 	ldrb.w	r3, [lr, #-2]
 801db5a:	4353      	muls	r3, r2
 801db5c:	1c59      	adds	r1, r3, #1
 801db5e:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801db62:	0a3b      	lsrs	r3, r7, #8
 801db64:	0c3f      	lsrs	r7, r7, #16
 801db66:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801db6a:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801db6e:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801db72:	435a      	muls	r2, r3
 801db74:	1c53      	adds	r3, r2, #1
 801db76:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801db7a:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801db7e:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801db82:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801db84:	f10e 0e03 	add.w	lr, lr, #3
 801db88:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801db8a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801db8e:	441a      	add	r2, r3
 801db90:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801db92:	9225      	str	r2, [sp, #148]	; 0x94
 801db94:	441d      	add	r5, r3
 801db96:	e65a      	b.n	801d84e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 801db98:	2800      	cmp	r0, #0
 801db9a:	f43f aef7 	beq.w	801d98c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801db9e:	5c79      	ldrb	r1, [r7, r1]
 801dba0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801dba4:	9109      	str	r1, [sp, #36]	; 0x24
 801dba6:	0e09      	lsrs	r1, r1, #24
 801dba8:	9111      	str	r1, [sp, #68]	; 0x44
 801dbaa:	e6ef      	b.n	801d98c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801dbac:	b01b      	add	sp, #108	; 0x6c
 801dbae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801dbb2 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 801dbb2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dbb6:	b08d      	sub	sp, #52	; 0x34
 801dbb8:	468b      	mov	fp, r1
 801dbba:	e9dd 5c17 	ldrd	r5, ip, [sp, #92]	; 0x5c
 801dbbe:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 801dbc2:	fb0c 5703 	mla	r7, ip, r3, r5
 801dbc6:	f1bc 0f00 	cmp.w	ip, #0
 801dbca:	910b      	str	r1, [sp, #44]	; 0x2c
 801dbcc:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801dbd0:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801dbd4:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 801dbd8:	f89d a068 	ldrb.w	sl, [sp, #104]	; 0x68
 801dbdc:	eb02 0607 	add.w	r6, r2, r7
 801dbe0:	f89b 4000 	ldrb.w	r4, [fp]
 801dbe4:	f89b 0001 	ldrb.w	r0, [fp, #1]
 801dbe8:	f89b 1002 	ldrb.w	r1, [fp, #2]
 801dbec:	f2c0 80c1 	blt.w	801dd72 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 801dbf0:	45e6      	cmp	lr, ip
 801dbf2:	f340 80be 	ble.w	801dd72 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 801dbf6:	2d00      	cmp	r5, #0
 801dbf8:	f2c0 80b7 	blt.w	801dd6a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 801dbfc:	42ab      	cmp	r3, r5
 801dbfe:	f340 80b4 	ble.w	801dd6a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 801dc02:	5dd2      	ldrb	r2, [r2, r7]
 801dc04:	9205      	str	r2, [sp, #20]
 801dc06:	7872      	ldrb	r2, [r6, #1]
 801dc08:	9206      	str	r2, [sp, #24]
 801dc0a:	78b2      	ldrb	r2, [r6, #2]
 801dc0c:	9207      	str	r2, [sp, #28]
 801dc0e:	1c6a      	adds	r2, r5, #1
 801dc10:	f100 80b6 	bmi.w	801dd80 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 801dc14:	4293      	cmp	r3, r2
 801dc16:	f340 80b3 	ble.w	801dd80 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 801dc1a:	f1b8 0f00 	cmp.w	r8, #0
 801dc1e:	f000 80af 	beq.w	801dd80 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 801dc22:	78f2      	ldrb	r2, [r6, #3]
 801dc24:	9201      	str	r2, [sp, #4]
 801dc26:	7932      	ldrb	r2, [r6, #4]
 801dc28:	9202      	str	r2, [sp, #8]
 801dc2a:	7972      	ldrb	r2, [r6, #5]
 801dc2c:	9203      	str	r2, [sp, #12]
 801dc2e:	f11c 0c01 	adds.w	ip, ip, #1
 801dc32:	f100 80ad 	bmi.w	801dd90 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 801dc36:	45e6      	cmp	lr, ip
 801dc38:	f340 80aa 	ble.w	801dd90 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 801dc3c:	f1ba 0f00 	cmp.w	sl, #0
 801dc40:	f000 80a6 	beq.w	801dd90 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 801dc44:	2d00      	cmp	r5, #0
 801dc46:	f2c0 809f 	blt.w	801dd88 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 801dc4a:	42ab      	cmp	r3, r5
 801dc4c:	f340 809c 	ble.w	801dd88 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 801dc50:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801dc54:	f816 9002 	ldrb.w	r9, [r6, r2]
 801dc58:	2203      	movs	r2, #3
 801dc5a:	fb03 6c02 	mla	ip, r3, r2, r6
 801dc5e:	f89c 7001 	ldrb.w	r7, [ip, #1]
 801dc62:	f89c e002 	ldrb.w	lr, [ip, #2]
 801dc66:	9704      	str	r7, [sp, #16]
 801dc68:	3501      	adds	r5, #1
 801dc6a:	f100 8098 	bmi.w	801dd9e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 801dc6e:	42ab      	cmp	r3, r5
 801dc70:	f340 8095 	ble.w	801dd9e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 801dc74:	f1b8 0f00 	cmp.w	r8, #0
 801dc78:	f000 8091 	beq.w	801dd9e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 801dc7c:	f04f 0c03 	mov.w	ip, #3
 801dc80:	fb13 c20c 	smlabb	r2, r3, ip, ip
 801dc84:	5cb5      	ldrb	r5, [r6, r2]
 801dc86:	fb03 620c 	mla	r2, r3, ip, r6
 801dc8a:	fb03 630c 	mla	r3, r3, ip, r6
 801dc8e:	7912      	ldrb	r2, [r2, #4]
 801dc90:	795e      	ldrb	r6, [r3, #5]
 801dc92:	fa1f f388 	uxth.w	r3, r8
 801dc96:	fa1f fc8a 	uxth.w	ip, sl
 801dc9a:	fb03 f70c 	mul.w	r7, r3, ip
 801dc9e:	011b      	lsls	r3, r3, #4
 801dca0:	9708      	str	r7, [sp, #32]
 801dca2:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 801dca6:	f5c3 7a80 	rsb	sl, r3, #256	; 0x100
 801dcaa:	1bdb      	subs	r3, r3, r7
 801dcac:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 801dcb0:	fa1f fc8c 	uxth.w	ip, ip
 801dcb4:	b29b      	uxth	r3, r3
 801dcb6:	9709      	str	r7, [sp, #36]	; 0x24
 801dcb8:	ebaa 0a0c 	sub.w	sl, sl, ip
 801dcbc:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801dcbe:	930a      	str	r3, [sp, #40]	; 0x28
 801dcc0:	fa1f fa8a 	uxth.w	sl, sl
 801dcc4:	ea6f 0807 	mvn.w	r8, r7
 801dcc8:	9f01      	ldr	r7, [sp, #4]
 801dcca:	435f      	muls	r7, r3
 801dccc:	9b05      	ldr	r3, [sp, #20]
 801dcce:	fa5f f888 	uxtb.w	r8, r8
 801dcd2:	fb0a 7703 	mla	r7, sl, r3, r7
 801dcd6:	9b08      	ldr	r3, [sp, #32]
 801dcd8:	fb14 f408 	smulbb	r4, r4, r8
 801dcdc:	fb0c 7709 	mla	r7, ip, r9, r7
 801dce0:	fb10 f008 	smulbb	r0, r0, r8
 801dce4:	fb11 f108 	smulbb	r1, r1, r8
 801dce8:	fb03 7705 	mla	r7, r3, r5, r7
 801dcec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dcee:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801dcf2:	fb07 4703 	mla	r7, r7, r3, r4
 801dcf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801dcf8:	b2bf      	uxth	r7, r7
 801dcfa:	1c7c      	adds	r4, r7, #1
 801dcfc:	eb04 2417 	add.w	r4, r4, r7, lsr #8
 801dd00:	1224      	asrs	r4, r4, #8
 801dd02:	f88b 4000 	strb.w	r4, [fp]
 801dd06:	9c02      	ldr	r4, [sp, #8]
 801dd08:	435c      	muls	r4, r3
 801dd0a:	9b06      	ldr	r3, [sp, #24]
 801dd0c:	fb0a 4403 	mla	r4, sl, r3, r4
 801dd10:	9b04      	ldr	r3, [sp, #16]
 801dd12:	fb0c 4403 	mla	r4, ip, r3, r4
 801dd16:	9b08      	ldr	r3, [sp, #32]
 801dd18:	fb03 4402 	mla	r4, r3, r2, r4
 801dd1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dd1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801dd20:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801dd24:	fb04 0403 	mla	r4, r4, r3, r0
 801dd28:	9b03      	ldr	r3, [sp, #12]
 801dd2a:	435a      	muls	r2, r3
 801dd2c:	b2a4      	uxth	r4, r4
 801dd2e:	4613      	mov	r3, r2
 801dd30:	9a07      	ldr	r2, [sp, #28]
 801dd32:	1c60      	adds	r0, r4, #1
 801dd34:	fb0a 3a02 	mla	sl, sl, r2, r3
 801dd38:	9b08      	ldr	r3, [sp, #32]
 801dd3a:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 801dd3e:	fb0c ac0e 	mla	ip, ip, lr, sl
 801dd42:	1224      	asrs	r4, r4, #8
 801dd44:	fb03 c606 	mla	r6, r3, r6, ip
 801dd48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dd4a:	f88b 4001 	strb.w	r4, [fp, #1]
 801dd4e:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801dd52:	fb06 1103 	mla	r1, r6, r3, r1
 801dd56:	b289      	uxth	r1, r1
 801dd58:	1c4e      	adds	r6, r1, #1
 801dd5a:	eb06 2111 	add.w	r1, r6, r1, lsr #8
 801dd5e:	1209      	asrs	r1, r1, #8
 801dd60:	f88b 1002 	strb.w	r1, [fp, #2]
 801dd64:	b00d      	add	sp, #52	; 0x34
 801dd66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dd6a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801dd6e:	9405      	str	r4, [sp, #20]
 801dd70:	e74d      	b.n	801dc0e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x5c>
 801dd72:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801dd76:	9401      	str	r4, [sp, #4]
 801dd78:	9405      	str	r4, [sp, #20]
 801dd7a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801dd7e:	e756      	b.n	801dc2e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 801dd80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801dd84:	9401      	str	r4, [sp, #4]
 801dd86:	e752      	b.n	801dc2e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 801dd88:	468e      	mov	lr, r1
 801dd8a:	9004      	str	r0, [sp, #16]
 801dd8c:	46a1      	mov	r9, r4
 801dd8e:	e76b      	b.n	801dc68 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xb6>
 801dd90:	460e      	mov	r6, r1
 801dd92:	4602      	mov	r2, r0
 801dd94:	4625      	mov	r5, r4
 801dd96:	468e      	mov	lr, r1
 801dd98:	9004      	str	r0, [sp, #16]
 801dd9a:	46a1      	mov	r9, r4
 801dd9c:	e779      	b.n	801dc92 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>
 801dd9e:	460e      	mov	r6, r1
 801dda0:	4602      	mov	r2, r0
 801dda2:	4625      	mov	r5, r4
 801dda4:	e775      	b.n	801dc92 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>

0801dda6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801dda6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ddaa:	b09f      	sub	sp, #124	; 0x7c
 801ddac:	920e      	str	r2, [sp, #56]	; 0x38
 801ddae:	9307      	str	r3, [sp, #28]
 801ddb0:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801ddb2:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 801ddb6:	901d      	str	r0, [sp, #116]	; 0x74
 801ddb8:	930c      	str	r3, [sp, #48]	; 0x30
 801ddba:	6850      	ldr	r0, [r2, #4]
 801ddbc:	910b      	str	r1, [sp, #44]	; 0x2c
 801ddbe:	6812      	ldr	r2, [r2, #0]
 801ddc0:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 801ddc4:	e9dd a829 	ldrd	sl, r8, [sp, #164]	; 0xa4
 801ddc8:	fb00 1303 	mla	r3, r0, r3, r1
 801ddcc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ddd0:	18d3      	adds	r3, r2, r3
 801ddd2:	9308      	str	r3, [sp, #32]
 801ddd4:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801ddd6:	681b      	ldr	r3, [r3, #0]
 801ddd8:	930a      	str	r3, [sp, #40]	; 0x28
 801ddda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801dddc:	43db      	mvns	r3, r3
 801ddde:	b2db      	uxtb	r3, r3
 801dde0:	9309      	str	r3, [sp, #36]	; 0x24
 801dde2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801dde4:	2b00      	cmp	r3, #0
 801dde6:	dc03      	bgt.n	801ddf0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801dde8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ddea:	2b00      	cmp	r3, #0
 801ddec:	f340 81f5 	ble.w	801e1da <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 801ddf0:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801ddf2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801ddf6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801ddfa:	1e48      	subs	r0, r1, #1
 801ddfc:	1e54      	subs	r4, r2, #1
 801ddfe:	9b07      	ldr	r3, [sp, #28]
 801de00:	2b00      	cmp	r3, #0
 801de02:	f340 80d5 	ble.w	801dfb0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 801de06:	ea5f 452a 	movs.w	r5, sl, asr #16
 801de0a:	ea4f 4328 	mov.w	r3, r8, asr #16
 801de0e:	d406      	bmi.n	801de1e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801de10:	4285      	cmp	r5, r0
 801de12:	da04      	bge.n	801de1e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801de14:	2b00      	cmp	r3, #0
 801de16:	db02      	blt.n	801de1e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801de18:	42a3      	cmp	r3, r4
 801de1a:	f2c0 80ca 	blt.w	801dfb2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 801de1e:	3501      	adds	r5, #1
 801de20:	f100 80bb 	bmi.w	801df9a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801de24:	42a9      	cmp	r1, r5
 801de26:	f2c0 80b8 	blt.w	801df9a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801de2a:	3301      	adds	r3, #1
 801de2c:	f100 80b5 	bmi.w	801df9a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801de30:	429a      	cmp	r2, r3
 801de32:	f2c0 80b2 	blt.w	801df9a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801de36:	9b07      	ldr	r3, [sp, #28]
 801de38:	9d08      	ldr	r5, [sp, #32]
 801de3a:	930d      	str	r3, [sp, #52]	; 0x34
 801de3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801de3e:	2b00      	cmp	r3, #0
 801de40:	f340 80d6 	ble.w	801dff0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24a>
 801de44:	9830      	ldr	r0, [sp, #192]	; 0xc0
 801de46:	ea4f 4428 	mov.w	r4, r8, asr #16
 801de4a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801de4c:	f3ca 3203 	ubfx	r2, sl, #12, #4
 801de50:	68c6      	ldr	r6, [r0, #12]
 801de52:	ea5f 402a 	movs.w	r0, sl, asr #16
 801de56:	f3c8 3103 	ubfx	r1, r8, #12, #4
 801de5a:	689b      	ldr	r3, [r3, #8]
 801de5c:	f100 810f 	bmi.w	801e07e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801de60:	1e5f      	subs	r7, r3, #1
 801de62:	42b8      	cmp	r0, r7
 801de64:	f280 810b 	bge.w	801e07e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801de68:	2c00      	cmp	r4, #0
 801de6a:	f2c0 8108 	blt.w	801e07e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801de6e:	1e77      	subs	r7, r6, #1
 801de70:	42bc      	cmp	r4, r7
 801de72:	f280 8104 	bge.w	801e07e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801de76:	b21b      	sxth	r3, r3
 801de78:	fb04 0003 	mla	r0, r4, r3, r0
 801de7c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801de7e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801de82:	1826      	adds	r6, r4, r0
 801de84:	5c24      	ldrb	r4, [r4, r0]
 801de86:	78b7      	ldrb	r7, [r6, #2]
 801de88:	7870      	ldrb	r0, [r6, #1]
 801de8a:	970f      	str	r7, [sp, #60]	; 0x3c
 801de8c:	7977      	ldrb	r7, [r6, #5]
 801de8e:	f896 e003 	ldrb.w	lr, [r6, #3]
 801de92:	f896 c004 	ldrb.w	ip, [r6, #4]
 801de96:	9710      	str	r7, [sp, #64]	; 0x40
 801de98:	b1c9      	cbz	r1, 801dece <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801de9a:	f04f 0b03 	mov.w	fp, #3
 801de9e:	f06f 0904 	mvn.w	r9, #4
 801dea2:	3605      	adds	r6, #5
 801dea4:	fb13 930b 	smlabb	r3, r3, fp, r9
 801dea8:	eb06 0b03 	add.w	fp, r6, r3
 801deac:	5cf3      	ldrb	r3, [r6, r3]
 801deae:	9311      	str	r3, [sp, #68]	; 0x44
 801deb0:	f89b 3001 	ldrb.w	r3, [fp, #1]
 801deb4:	9313      	str	r3, [sp, #76]	; 0x4c
 801deb6:	f89b 3002 	ldrb.w	r3, [fp, #2]
 801deba:	9315      	str	r3, [sp, #84]	; 0x54
 801debc:	f89b 3003 	ldrb.w	r3, [fp, #3]
 801dec0:	9312      	str	r3, [sp, #72]	; 0x48
 801dec2:	f89b 3004 	ldrb.w	r3, [fp, #4]
 801dec6:	9314      	str	r3, [sp, #80]	; 0x50
 801dec8:	f89b 3005 	ldrb.w	r3, [fp, #5]
 801decc:	9316      	str	r3, [sp, #88]	; 0x58
 801dece:	b292      	uxth	r2, r2
 801ded0:	9f11      	ldr	r7, [sp, #68]	; 0x44
 801ded2:	b289      	uxth	r1, r1
 801ded4:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 801ded8:	fb02 f601 	mul.w	r6, r2, r1
 801dedc:	0112      	lsls	r2, r2, #4
 801dede:	ebc6 1101 	rsb	r1, r6, r1, lsl #4
 801dee2:	f5c2 7980 	rsb	r9, r2, #256	; 0x100
 801dee6:	1b92      	subs	r2, r2, r6
 801dee8:	b289      	uxth	r1, r1
 801deea:	b292      	uxth	r2, r2
 801deec:	eba9 0901 	sub.w	r9, r9, r1
 801def0:	fb02 fe0e 	mul.w	lr, r2, lr
 801def4:	fa1f f989 	uxth.w	r9, r9
 801def8:	fb02 fc0c 	mul.w	ip, r2, ip
 801defc:	fb09 e404 	mla	r4, r9, r4, lr
 801df00:	f895 e000 	ldrb.w	lr, [r5]
 801df04:	fb09 c000 	mla	r0, r9, r0, ip
 801df08:	fb01 4407 	mla	r4, r1, r7, r4
 801df0c:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801df0e:	fb06 4407 	mla	r4, r6, r7, r4
 801df12:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801df14:	fb1e fe07 	smulbb	lr, lr, r7
 801df18:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801df1c:	fb04 e403 	mla	r4, r4, r3, lr
 801df20:	b2a4      	uxth	r4, r4
 801df22:	f104 0e01 	add.w	lr, r4, #1
 801df26:	eb0e 2e14 	add.w	lr, lr, r4, lsr #8
 801df2a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801df2c:	fb01 0004 	mla	r0, r1, r4, r0
 801df30:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801df32:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801df36:	fb06 0004 	mla	r0, r6, r4, r0
 801df3a:	786c      	ldrb	r4, [r5, #1]
 801df3c:	f885 e000 	strb.w	lr, [r5]
 801df40:	fb14 f407 	smulbb	r4, r4, r7
 801df44:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801df48:	fb00 4003 	mla	r0, r0, r3, r4
 801df4c:	b280      	uxth	r0, r0
 801df4e:	1c44      	adds	r4, r0, #1
 801df50:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 801df54:	1200      	asrs	r0, r0, #8
 801df56:	7068      	strb	r0, [r5, #1]
 801df58:	9810      	ldr	r0, [sp, #64]	; 0x40
 801df5a:	4342      	muls	r2, r0
 801df5c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801df5e:	fb09 2200 	mla	r2, r9, r0, r2
 801df62:	9815      	ldr	r0, [sp, #84]	; 0x54
 801df64:	fb01 2100 	mla	r1, r1, r0, r2
 801df68:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801df6a:	fb06 1602 	mla	r6, r6, r2, r1
 801df6e:	78a9      	ldrb	r1, [r5, #2]
 801df70:	fb11 f107 	smulbb	r1, r1, r7
 801df74:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801df78:	fb06 1303 	mla	r3, r6, r3, r1
 801df7c:	b29b      	uxth	r3, r3
 801df7e:	1c5e      	adds	r6, r3, #1
 801df80:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 801df84:	121b      	asrs	r3, r3, #8
 801df86:	70ab      	strb	r3, [r5, #2]
 801df88:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801df8a:	3503      	adds	r5, #3
 801df8c:	449a      	add	sl, r3
 801df8e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801df90:	4498      	add	r8, r3
 801df92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801df94:	3b01      	subs	r3, #1
 801df96:	930d      	str	r3, [sp, #52]	; 0x34
 801df98:	e750      	b.n	801de3c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801df9a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801df9c:	449a      	add	sl, r3
 801df9e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801dfa0:	4498      	add	r8, r3
 801dfa2:	9b07      	ldr	r3, [sp, #28]
 801dfa4:	3b01      	subs	r3, #1
 801dfa6:	9307      	str	r3, [sp, #28]
 801dfa8:	9b08      	ldr	r3, [sp, #32]
 801dfaa:	3303      	adds	r3, #3
 801dfac:	9308      	str	r3, [sp, #32]
 801dfae:	e726      	b.n	801ddfe <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801dfb0:	d026      	beq.n	801e000 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 801dfb2:	9b07      	ldr	r3, [sp, #28]
 801dfb4:	982b      	ldr	r0, [sp, #172]	; 0xac
 801dfb6:	3b01      	subs	r3, #1
 801dfb8:	fb00 a003 	mla	r0, r0, r3, sl
 801dfbc:	1400      	asrs	r0, r0, #16
 801dfbe:	f53f af3a 	bmi.w	801de36 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801dfc2:	3901      	subs	r1, #1
 801dfc4:	4288      	cmp	r0, r1
 801dfc6:	f6bf af36 	bge.w	801de36 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801dfca:	992c      	ldr	r1, [sp, #176]	; 0xb0
 801dfcc:	fb01 8303 	mla	r3, r1, r3, r8
 801dfd0:	141b      	asrs	r3, r3, #16
 801dfd2:	f53f af30 	bmi.w	801de36 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801dfd6:	3a01      	subs	r2, #1
 801dfd8:	4293      	cmp	r3, r2
 801dfda:	f6bf af2c 	bge.w	801de36 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801dfde:	9b08      	ldr	r3, [sp, #32]
 801dfe0:	f8dd c01c 	ldr.w	ip, [sp, #28]
 801dfe4:	1cdd      	adds	r5, r3, #3
 801dfe6:	f8bd e030 	ldrh.w	lr, [sp, #48]	; 0x30
 801dfea:	f1bc 0f00 	cmp.w	ip, #0
 801dfee:	dc5f      	bgt.n	801e0b0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30a>
 801dff0:	9b07      	ldr	r3, [sp, #28]
 801dff2:	9a08      	ldr	r2, [sp, #32]
 801dff4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801dff8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dffc:	441a      	add	r2, r3
 801dffe:	9208      	str	r2, [sp, #32]
 801e000:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e002:	2b00      	cmp	r3, #0
 801e004:	f340 80e9 	ble.w	801e1da <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 801e008:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e00c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e00e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e012:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e016:	eef0 6a62 	vmov.f32	s13, s5
 801e01a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e01e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e022:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e026:	ee16 aa90 	vmov	sl, s13
 801e02a:	eef0 6a43 	vmov.f32	s13, s6
 801e02e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e032:	ee16 8a90 	vmov	r8, s13
 801e036:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e03a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e03e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e042:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e046:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e04a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e04e:	ee12 2a90 	vmov	r2, s5
 801e052:	eef0 2a47 	vmov.f32	s5, s14
 801e056:	fb92 f3f3 	sdiv	r3, r2, r3
 801e05a:	ee13 2a10 	vmov	r2, s6
 801e05e:	932b      	str	r3, [sp, #172]	; 0xac
 801e060:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e062:	eeb0 3a67 	vmov.f32	s6, s15
 801e066:	fb92 f3f3 	sdiv	r3, r2, r3
 801e06a:	932c      	str	r3, [sp, #176]	; 0xb0
 801e06c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e06e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e070:	3b01      	subs	r3, #1
 801e072:	930b      	str	r3, [sp, #44]	; 0x2c
 801e074:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e076:	bf08      	it	eq
 801e078:	4613      	moveq	r3, r2
 801e07a:	9307      	str	r3, [sp, #28]
 801e07c:	e6b1      	b.n	801dde2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801e07e:	1c47      	adds	r7, r0, #1
 801e080:	d482      	bmi.n	801df88 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801e082:	42bb      	cmp	r3, r7
 801e084:	db80      	blt.n	801df88 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801e086:	1c67      	adds	r7, r4, #1
 801e088:	f53f af7e 	bmi.w	801df88 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801e08c:	42be      	cmp	r6, r7
 801e08e:	f6ff af7b 	blt.w	801df88 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801e092:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801e094:	b236      	sxth	r6, r6
 801e096:	9001      	str	r0, [sp, #4]
 801e098:	b21b      	sxth	r3, r3
 801e09a:	9600      	str	r6, [sp, #0]
 801e09c:	981d      	ldr	r0, [sp, #116]	; 0x74
 801e09e:	e9cd 1704 	strd	r1, r7, [sp, #16]
 801e0a2:	e9cd 4202 	strd	r4, r2, [sp, #8]
 801e0a6:	4629      	mov	r1, r5
 801e0a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e0aa:	f7ff fd82 	bl	801dbb2 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 801e0ae:	e76b      	b.n	801df88 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801e0b0:	9930      	ldr	r1, [sp, #192]	; 0xc0
 801e0b2:	ea4f 402a 	mov.w	r0, sl, asr #16
 801e0b6:	f3c8 3203 	ubfx	r2, r8, #12, #4
 801e0ba:	f3ca 3303 	ubfx	r3, sl, #12, #4
 801e0be:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 801e0c2:	ea4f 4128 	mov.w	r1, r8, asr #16
 801e0c6:	fb07 0101 	mla	r1, r7, r1, r0
 801e0ca:	980a      	ldr	r0, [sp, #40]	; 0x28
 801e0cc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801e0d0:	1844      	adds	r4, r0, r1
 801e0d2:	5c40      	ldrb	r0, [r0, r1]
 801e0d4:	78a6      	ldrb	r6, [r4, #2]
 801e0d6:	7861      	ldrb	r1, [r4, #1]
 801e0d8:	960f      	str	r6, [sp, #60]	; 0x3c
 801e0da:	78e6      	ldrb	r6, [r4, #3]
 801e0dc:	910d      	str	r1, [sp, #52]	; 0x34
 801e0de:	9610      	str	r6, [sp, #64]	; 0x40
 801e0e0:	f894 9004 	ldrb.w	r9, [r4, #4]
 801e0e4:	f894 b005 	ldrb.w	fp, [r4, #5]
 801e0e8:	b192      	cbz	r2, 801e110 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 801e0ea:	f06f 0604 	mvn.w	r6, #4
 801e0ee:	2103      	movs	r1, #3
 801e0f0:	3405      	adds	r4, #5
 801e0f2:	fb17 6701 	smlabb	r7, r7, r1, r6
 801e0f6:	19e6      	adds	r6, r4, r7
 801e0f8:	5de4      	ldrb	r4, [r4, r7]
 801e0fa:	9417      	str	r4, [sp, #92]	; 0x5c
 801e0fc:	7874      	ldrb	r4, [r6, #1]
 801e0fe:	9419      	str	r4, [sp, #100]	; 0x64
 801e100:	78b4      	ldrb	r4, [r6, #2]
 801e102:	941b      	str	r4, [sp, #108]	; 0x6c
 801e104:	78f4      	ldrb	r4, [r6, #3]
 801e106:	9418      	str	r4, [sp, #96]	; 0x60
 801e108:	7934      	ldrb	r4, [r6, #4]
 801e10a:	941a      	str	r4, [sp, #104]	; 0x68
 801e10c:	7974      	ldrb	r4, [r6, #5]
 801e10e:	941c      	str	r4, [sp, #112]	; 0x70
 801e110:	b29b      	uxth	r3, r3
 801e112:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801e114:	b292      	uxth	r2, r2
 801e116:	9909      	ldr	r1, [sp, #36]	; 0x24
 801e118:	3503      	adds	r5, #3
 801e11a:	f10c 3cff 	add.w	ip, ip, #4294967295
 801e11e:	fb03 f402 	mul.w	r4, r3, r2
 801e122:	011b      	lsls	r3, r3, #4
 801e124:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 801e128:	f5c3 7680 	rsb	r6, r3, #256	; 0x100
 801e12c:	1b1b      	subs	r3, r3, r4
 801e12e:	b292      	uxth	r2, r2
 801e130:	b29b      	uxth	r3, r3
 801e132:	1ab6      	subs	r6, r6, r2
 801e134:	435f      	muls	r7, r3
 801e136:	b2b6      	uxth	r6, r6
 801e138:	fb03 f909 	mul.w	r9, r3, r9
 801e13c:	fb03 fb0b 	mul.w	fp, r3, fp
 801e140:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e142:	fb06 7000 	mla	r0, r6, r0, r7
 801e146:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 801e148:	fb06 bb03 	mla	fp, r6, r3, fp
 801e14c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801e14e:	fb02 0007 	mla	r0, r2, r7, r0
 801e152:	9f18      	ldr	r7, [sp, #96]	; 0x60
 801e154:	fb02 bb03 	mla	fp, r2, r3, fp
 801e158:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801e15a:	fb04 0007 	mla	r0, r4, r7, r0
 801e15e:	f815 7c06 	ldrb.w	r7, [r5, #-6]
 801e162:	fb17 f701 	smulbb	r7, r7, r1
 801e166:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801e16a:	990d      	ldr	r1, [sp, #52]	; 0x34
 801e16c:	fb00 700e 	mla	r0, r0, lr, r7
 801e170:	fb06 9101 	mla	r1, r6, r1, r9
 801e174:	b280      	uxth	r0, r0
 801e176:	1c47      	adds	r7, r0, #1
 801e178:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 801e17c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801e17e:	1200      	asrs	r0, r0, #8
 801e180:	f805 0c06 	strb.w	r0, [r5, #-6]
 801e184:	9819      	ldr	r0, [sp, #100]	; 0x64
 801e186:	fb02 1100 	mla	r1, r2, r0, r1
 801e18a:	981a      	ldr	r0, [sp, #104]	; 0x68
 801e18c:	fb04 1100 	mla	r1, r4, r0, r1
 801e190:	f815 0c05 	ldrb.w	r0, [r5, #-5]
 801e194:	fb04 b403 	mla	r4, r4, r3, fp
 801e198:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 801e19c:	fb10 f007 	smulbb	r0, r0, r7
 801e1a0:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801e1a4:	fb13 f307 	smulbb	r3, r3, r7
 801e1a8:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801e1ac:	fb01 010e 	mla	r1, r1, lr, r0
 801e1b0:	fb04 340e 	mla	r4, r4, lr, r3
 801e1b4:	b289      	uxth	r1, r1
 801e1b6:	b2a4      	uxth	r4, r4
 801e1b8:	1c48      	adds	r0, r1, #1
 801e1ba:	1c63      	adds	r3, r4, #1
 801e1bc:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 801e1c0:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 801e1c4:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801e1c6:	1209      	asrs	r1, r1, #8
 801e1c8:	1224      	asrs	r4, r4, #8
 801e1ca:	449a      	add	sl, r3
 801e1cc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801e1ce:	f805 1c05 	strb.w	r1, [r5, #-5]
 801e1d2:	f805 4c04 	strb.w	r4, [r5, #-4]
 801e1d6:	4498      	add	r8, r3
 801e1d8:	e707      	b.n	801dfea <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 801e1da:	b01f      	add	sp, #124	; 0x7c
 801e1dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e1e0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 801e1e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e1e4:	b087      	sub	sp, #28
 801e1e6:	780d      	ldrb	r5, [r1, #0]
 801e1e8:	784c      	ldrb	r4, [r1, #1]
 801e1ea:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 801e1ee:	f9bd 7040 	ldrsh.w	r7, [sp, #64]	; 0x40
 801e1f2:	9004      	str	r0, [sp, #16]
 801e1f4:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 801e1f8:	e9dd b611 	ldrd	fp, r6, [sp, #68]	; 0x44
 801e1fc:	9005      	str	r0, [sp, #20]
 801e1fe:	fb06 bc03 	mla	ip, r6, r3, fp
 801e202:	2e00      	cmp	r6, #0
 801e204:	7888      	ldrb	r0, [r1, #2]
 801e206:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801e20a:	eb02 090c 	add.w	r9, r2, ip
 801e20e:	f2c0 8084 	blt.w	801e31a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 801e212:	42b7      	cmp	r7, r6
 801e214:	f340 8081 	ble.w	801e31a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 801e218:	f1bb 0f00 	cmp.w	fp, #0
 801e21c:	db79      	blt.n	801e312 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 801e21e:	455b      	cmp	r3, fp
 801e220:	dd77      	ble.n	801e312 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 801e222:	f812 200c 	ldrb.w	r2, [r2, ip]
 801e226:	9201      	str	r2, [sp, #4]
 801e228:	f899 2001 	ldrb.w	r2, [r9, #1]
 801e22c:	9202      	str	r2, [sp, #8]
 801e22e:	f899 2002 	ldrb.w	r2, [r9, #2]
 801e232:	9203      	str	r2, [sp, #12]
 801e234:	f11b 0201 	adds.w	r2, fp, #1
 801e238:	d476      	bmi.n	801e328 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 801e23a:	4293      	cmp	r3, r2
 801e23c:	dd74      	ble.n	801e328 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 801e23e:	9a04      	ldr	r2, [sp, #16]
 801e240:	2a00      	cmp	r2, #0
 801e242:	d071      	beq.n	801e328 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 801e244:	f899 8003 	ldrb.w	r8, [r9, #3]
 801e248:	f899 c004 	ldrb.w	ip, [r9, #4]
 801e24c:	f899 a005 	ldrb.w	sl, [r9, #5]
 801e250:	3601      	adds	r6, #1
 801e252:	d471      	bmi.n	801e338 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 801e254:	42b7      	cmp	r7, r6
 801e256:	dd6f      	ble.n	801e338 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 801e258:	9a05      	ldr	r2, [sp, #20]
 801e25a:	2a00      	cmp	r2, #0
 801e25c:	d06c      	beq.n	801e338 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 801e25e:	f1bb 0f00 	cmp.w	fp, #0
 801e262:	db65      	blt.n	801e330 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 801e264:	455b      	cmp	r3, fp
 801e266:	dd63      	ble.n	801e330 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 801e268:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801e26c:	f819 e002 	ldrb.w	lr, [r9, r2]
 801e270:	2203      	movs	r2, #3
 801e272:	fb03 9602 	mla	r6, r3, r2, r9
 801e276:	7877      	ldrb	r7, [r6, #1]
 801e278:	78b6      	ldrb	r6, [r6, #2]
 801e27a:	f11b 0b01 	adds.w	fp, fp, #1
 801e27e:	d40c      	bmi.n	801e29a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 801e280:	455b      	cmp	r3, fp
 801e282:	dd0a      	ble.n	801e29a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 801e284:	9a04      	ldr	r2, [sp, #16]
 801e286:	b142      	cbz	r2, 801e29a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 801e288:	2203      	movs	r2, #3
 801e28a:	fb13 2002 	smlabb	r0, r3, r2, r2
 801e28e:	f819 5000 	ldrb.w	r5, [r9, r0]
 801e292:	fb03 9002 	mla	r0, r3, r2, r9
 801e296:	7904      	ldrb	r4, [r0, #4]
 801e298:	7940      	ldrb	r0, [r0, #5]
 801e29a:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801e29e:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801e2a2:	fb03 fb02 	mul.w	fp, r3, r2
 801e2a6:	011b      	lsls	r3, r3, #4
 801e2a8:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 801e2ac:	f5c3 7980 	rsb	r9, r3, #256	; 0x100
 801e2b0:	eba3 030b 	sub.w	r3, r3, fp
 801e2b4:	b292      	uxth	r2, r2
 801e2b6:	b29b      	uxth	r3, r3
 801e2b8:	eba9 0902 	sub.w	r9, r9, r2
 801e2bc:	9304      	str	r3, [sp, #16]
 801e2be:	fa1f f989 	uxth.w	r9, r9
 801e2c2:	fb03 f808 	mul.w	r8, r3, r8
 801e2c6:	9b01      	ldr	r3, [sp, #4]
 801e2c8:	fb09 8803 	mla	r8, r9, r3, r8
 801e2cc:	9b04      	ldr	r3, [sp, #16]
 801e2ce:	fb03 fc0c 	mul.w	ip, r3, ip
 801e2d2:	9b02      	ldr	r3, [sp, #8]
 801e2d4:	fb02 880e 	mla	r8, r2, lr, r8
 801e2d8:	fb09 cc03 	mla	ip, r9, r3, ip
 801e2dc:	9b04      	ldr	r3, [sp, #16]
 801e2de:	fb0b 8805 	mla	r8, fp, r5, r8
 801e2e2:	fb02 c707 	mla	r7, r2, r7, ip
 801e2e6:	fb03 f30a 	mul.w	r3, r3, sl
 801e2ea:	ea4f 2828 	mov.w	r8, r8, asr #8
 801e2ee:	fb0b 7404 	mla	r4, fp, r4, r7
 801e2f2:	f881 8000 	strb.w	r8, [r1]
 801e2f6:	1224      	asrs	r4, r4, #8
 801e2f8:	704c      	strb	r4, [r1, #1]
 801e2fa:	9c03      	ldr	r4, [sp, #12]
 801e2fc:	fb09 3904 	mla	r9, r9, r4, r3
 801e300:	fb02 9206 	mla	r2, r2, r6, r9
 801e304:	fb0b 2000 	mla	r0, fp, r0, r2
 801e308:	1200      	asrs	r0, r0, #8
 801e30a:	7088      	strb	r0, [r1, #2]
 801e30c:	b007      	add	sp, #28
 801e30e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e312:	e9cd 4002 	strd	r4, r0, [sp, #8]
 801e316:	9501      	str	r5, [sp, #4]
 801e318:	e78c      	b.n	801e234 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x54>
 801e31a:	4682      	mov	sl, r0
 801e31c:	46a4      	mov	ip, r4
 801e31e:	46a8      	mov	r8, r5
 801e320:	9501      	str	r5, [sp, #4]
 801e322:	e9cd 4002 	strd	r4, r0, [sp, #8]
 801e326:	e793      	b.n	801e250 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 801e328:	4682      	mov	sl, r0
 801e32a:	46a4      	mov	ip, r4
 801e32c:	46a8      	mov	r8, r5
 801e32e:	e78f      	b.n	801e250 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 801e330:	4606      	mov	r6, r0
 801e332:	4627      	mov	r7, r4
 801e334:	46ae      	mov	lr, r5
 801e336:	e7a0      	b.n	801e27a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 801e338:	4606      	mov	r6, r0
 801e33a:	4627      	mov	r7, r4
 801e33c:	46ae      	mov	lr, r5
 801e33e:	e7ac      	b.n	801e29a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>

0801e340 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e344:	b09b      	sub	sp, #108	; 0x6c
 801e346:	920b      	str	r2, [sp, #44]	; 0x2c
 801e348:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801e34a:	9019      	str	r0, [sp, #100]	; 0x64
 801e34c:	9109      	str	r1, [sp, #36]	; 0x24
 801e34e:	6850      	ldr	r0, [r2, #4]
 801e350:	9306      	str	r3, [sp, #24]
 801e352:	6812      	ldr	r2, [r2, #0]
 801e354:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 801e358:	e9dd b425 	ldrd	fp, r4, [sp, #148]	; 0x94
 801e35c:	fb00 1303 	mla	r3, r0, r3, r1
 801e360:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e364:	18d3      	adds	r3, r2, r3
 801e366:	9307      	str	r3, [sp, #28]
 801e368:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801e36a:	681b      	ldr	r3, [r3, #0]
 801e36c:	9308      	str	r3, [sp, #32]
 801e36e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e370:	2b00      	cmp	r3, #0
 801e372:	dc03      	bgt.n	801e37c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801e374:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e376:	2b00      	cmp	r3, #0
 801e378:	f340 81ab 	ble.w	801e6d2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 801e37c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801e37e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801e382:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801e386:	1e48      	subs	r0, r1, #1
 801e388:	1e55      	subs	r5, r2, #1
 801e38a:	9b06      	ldr	r3, [sp, #24]
 801e38c:	2b00      	cmp	r3, #0
 801e38e:	f340 80b1 	ble.w	801e4f4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801e392:	ea5f 462b 	movs.w	r6, fp, asr #16
 801e396:	ea4f 4324 	mov.w	r3, r4, asr #16
 801e39a:	d406      	bmi.n	801e3aa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801e39c:	4286      	cmp	r6, r0
 801e39e:	da04      	bge.n	801e3aa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801e3a0:	2b00      	cmp	r3, #0
 801e3a2:	db02      	blt.n	801e3aa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801e3a4:	42ab      	cmp	r3, r5
 801e3a6:	f2c0 80a6 	blt.w	801e4f6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 801e3aa:	3601      	adds	r6, #1
 801e3ac:	f100 8097 	bmi.w	801e4de <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801e3b0:	42b1      	cmp	r1, r6
 801e3b2:	f2c0 8094 	blt.w	801e4de <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801e3b6:	3301      	adds	r3, #1
 801e3b8:	f100 8091 	bmi.w	801e4de <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801e3bc:	429a      	cmp	r2, r3
 801e3be:	f2c0 808e 	blt.w	801e4de <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801e3c2:	9b06      	ldr	r3, [sp, #24]
 801e3c4:	9e07      	ldr	r6, [sp, #28]
 801e3c6:	930a      	str	r3, [sp, #40]	; 0x28
 801e3c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e3ca:	2b00      	cmp	r3, #0
 801e3cc:	f340 80b0 	ble.w	801e530 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801e3d0:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801e3d2:	1425      	asrs	r5, r4, #16
 801e3d4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801e3d6:	f3cb 3203 	ubfx	r2, fp, #12, #4
 801e3da:	68c7      	ldr	r7, [r0, #12]
 801e3dc:	ea5f 402b 	movs.w	r0, fp, asr #16
 801e3e0:	f3c4 3103 	ubfx	r1, r4, #12, #4
 801e3e4:	689b      	ldr	r3, [r3, #8]
 801e3e6:	f100 80ea 	bmi.w	801e5be <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801e3ea:	f103 3cff 	add.w	ip, r3, #4294967295
 801e3ee:	4560      	cmp	r0, ip
 801e3f0:	f280 80e5 	bge.w	801e5be <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801e3f4:	2d00      	cmp	r5, #0
 801e3f6:	f2c0 80e2 	blt.w	801e5be <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801e3fa:	f107 3cff 	add.w	ip, r7, #4294967295
 801e3fe:	4565      	cmp	r5, ip
 801e400:	f280 80dd 	bge.w	801e5be <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801e404:	b21b      	sxth	r3, r3
 801e406:	fb05 0003 	mla	r0, r5, r3, r0
 801e40a:	9d08      	ldr	r5, [sp, #32]
 801e40c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801e410:	182f      	adds	r7, r5, r0
 801e412:	5c2d      	ldrb	r5, [r5, r0]
 801e414:	7878      	ldrb	r0, [r7, #1]
 801e416:	f897 e002 	ldrb.w	lr, [r7, #2]
 801e41a:	900c      	str	r0, [sp, #48]	; 0x30
 801e41c:	f897 9003 	ldrb.w	r9, [r7, #3]
 801e420:	f897 8004 	ldrb.w	r8, [r7, #4]
 801e424:	f897 a005 	ldrb.w	sl, [r7, #5]
 801e428:	b1c9      	cbz	r1, 801e45e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801e42a:	f04f 0c03 	mov.w	ip, #3
 801e42e:	f06f 0004 	mvn.w	r0, #4
 801e432:	3705      	adds	r7, #5
 801e434:	fb13 030c 	smlabb	r3, r3, ip, r0
 801e438:	eb07 0c03 	add.w	ip, r7, r3
 801e43c:	5cfb      	ldrb	r3, [r7, r3]
 801e43e:	930d      	str	r3, [sp, #52]	; 0x34
 801e440:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801e444:	930f      	str	r3, [sp, #60]	; 0x3c
 801e446:	f89c 3002 	ldrb.w	r3, [ip, #2]
 801e44a:	9311      	str	r3, [sp, #68]	; 0x44
 801e44c:	f89c 3003 	ldrb.w	r3, [ip, #3]
 801e450:	930e      	str	r3, [sp, #56]	; 0x38
 801e452:	f89c 3004 	ldrb.w	r3, [ip, #4]
 801e456:	9310      	str	r3, [sp, #64]	; 0x40
 801e458:	f89c 3005 	ldrb.w	r3, [ip, #5]
 801e45c:	9312      	str	r3, [sp, #72]	; 0x48
 801e45e:	b292      	uxth	r2, r2
 801e460:	980c      	ldr	r0, [sp, #48]	; 0x30
 801e462:	b289      	uxth	r1, r1
 801e464:	fb02 f301 	mul.w	r3, r2, r1
 801e468:	0112      	lsls	r2, r2, #4
 801e46a:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 801e46e:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 801e472:	1ad2      	subs	r2, r2, r3
 801e474:	b289      	uxth	r1, r1
 801e476:	b292      	uxth	r2, r2
 801e478:	1a7f      	subs	r7, r7, r1
 801e47a:	fb02 f909 	mul.w	r9, r2, r9
 801e47e:	b2bf      	uxth	r7, r7
 801e480:	fb02 f808 	mul.w	r8, r2, r8
 801e484:	fb02 fa0a 	mul.w	sl, r2, sl
 801e488:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e48a:	fb07 9905 	mla	r9, r7, r5, r9
 801e48e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801e490:	fb07 8800 	mla	r8, r7, r0, r8
 801e494:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801e496:	fb07 aa0e 	mla	sl, r7, lr, sl
 801e49a:	fb01 9905 	mla	r9, r1, r5, r9
 801e49e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801e4a0:	fb01 8800 	mla	r8, r1, r0, r8
 801e4a4:	9810      	ldr	r0, [sp, #64]	; 0x40
 801e4a6:	fb01 a102 	mla	r1, r1, r2, sl
 801e4aa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e4ac:	fb03 9905 	mla	r9, r3, r5, r9
 801e4b0:	fb03 8800 	mla	r8, r3, r0, r8
 801e4b4:	fb03 1302 	mla	r3, r3, r2, r1
 801e4b8:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e4bc:	ea4f 2828 	mov.w	r8, r8, asr #8
 801e4c0:	121b      	asrs	r3, r3, #8
 801e4c2:	f886 9000 	strb.w	r9, [r6]
 801e4c6:	f886 8001 	strb.w	r8, [r6, #1]
 801e4ca:	70b3      	strb	r3, [r6, #2]
 801e4cc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801e4ce:	3603      	adds	r6, #3
 801e4d0:	449b      	add	fp, r3
 801e4d2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e4d4:	441c      	add	r4, r3
 801e4d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e4d8:	3b01      	subs	r3, #1
 801e4da:	930a      	str	r3, [sp, #40]	; 0x28
 801e4dc:	e774      	b.n	801e3c8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801e4de:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801e4e0:	449b      	add	fp, r3
 801e4e2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e4e4:	441c      	add	r4, r3
 801e4e6:	9b06      	ldr	r3, [sp, #24]
 801e4e8:	3b01      	subs	r3, #1
 801e4ea:	9306      	str	r3, [sp, #24]
 801e4ec:	9b07      	ldr	r3, [sp, #28]
 801e4ee:	3303      	adds	r3, #3
 801e4f0:	9307      	str	r3, [sp, #28]
 801e4f2:	e74a      	b.n	801e38a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801e4f4:	d024      	beq.n	801e540 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801e4f6:	9b06      	ldr	r3, [sp, #24]
 801e4f8:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801e4fa:	3b01      	subs	r3, #1
 801e4fc:	fb00 b003 	mla	r0, r0, r3, fp
 801e500:	1400      	asrs	r0, r0, #16
 801e502:	f53f af5e 	bmi.w	801e3c2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801e506:	3901      	subs	r1, #1
 801e508:	4288      	cmp	r0, r1
 801e50a:	f6bf af5a 	bge.w	801e3c2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801e50e:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801e510:	fb01 4303 	mla	r3, r1, r3, r4
 801e514:	141b      	asrs	r3, r3, #16
 801e516:	f53f af54 	bmi.w	801e3c2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801e51a:	3a01      	subs	r2, #1
 801e51c:	4293      	cmp	r3, r2
 801e51e:	f6bf af50 	bge.w	801e3c2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801e522:	9b07      	ldr	r3, [sp, #28]
 801e524:	f8dd e018 	ldr.w	lr, [sp, #24]
 801e528:	1cde      	adds	r6, r3, #3
 801e52a:	f1be 0f00 	cmp.w	lr, #0
 801e52e:	dc5f      	bgt.n	801e5f0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801e530:	9b06      	ldr	r3, [sp, #24]
 801e532:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801e536:	9b07      	ldr	r3, [sp, #28]
 801e538:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801e53c:	4423      	add	r3, r4
 801e53e:	9307      	str	r3, [sp, #28]
 801e540:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e542:	2b00      	cmp	r3, #0
 801e544:	f340 80c5 	ble.w	801e6d2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 801e548:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e54c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e54e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e552:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e556:	eef0 6a62 	vmov.f32	s13, s5
 801e55a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e55e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e562:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e566:	ee16 ba90 	vmov	fp, s13
 801e56a:	eef0 6a43 	vmov.f32	s13, s6
 801e56e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e572:	ee16 4a90 	vmov	r4, s13
 801e576:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e57a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e57e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e582:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e586:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e58a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e58e:	ee12 2a90 	vmov	r2, s5
 801e592:	eef0 2a47 	vmov.f32	s5, s14
 801e596:	fb92 f3f3 	sdiv	r3, r2, r3
 801e59a:	ee13 2a10 	vmov	r2, s6
 801e59e:	9327      	str	r3, [sp, #156]	; 0x9c
 801e5a0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e5a2:	eeb0 3a67 	vmov.f32	s6, s15
 801e5a6:	fb92 f3f3 	sdiv	r3, r2, r3
 801e5aa:	9328      	str	r3, [sp, #160]	; 0xa0
 801e5ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e5ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e5b0:	3b01      	subs	r3, #1
 801e5b2:	9309      	str	r3, [sp, #36]	; 0x24
 801e5b4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e5b6:	bf08      	it	eq
 801e5b8:	4613      	moveq	r3, r2
 801e5ba:	9306      	str	r3, [sp, #24]
 801e5bc:	e6d7      	b.n	801e36e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801e5be:	f110 0c01 	adds.w	ip, r0, #1
 801e5c2:	d483      	bmi.n	801e4cc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801e5c4:	4563      	cmp	r3, ip
 801e5c6:	db81      	blt.n	801e4cc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801e5c8:	f115 0c01 	adds.w	ip, r5, #1
 801e5cc:	f53f af7e 	bmi.w	801e4cc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801e5d0:	4567      	cmp	r7, ip
 801e5d2:	f6ff af7b 	blt.w	801e4cc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801e5d6:	b23f      	sxth	r7, r7
 801e5d8:	b21b      	sxth	r3, r3
 801e5da:	9700      	str	r7, [sp, #0]
 801e5dc:	e9cd 2103 	strd	r2, r1, [sp, #12]
 801e5e0:	e9cd 0501 	strd	r0, r5, [sp, #4]
 801e5e4:	9a08      	ldr	r2, [sp, #32]
 801e5e6:	4631      	mov	r1, r6
 801e5e8:	9819      	ldr	r0, [sp, #100]	; 0x64
 801e5ea:	f7ff fdf9 	bl	801e1e0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 801e5ee:	e76d      	b.n	801e4cc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801e5f0:	992c      	ldr	r1, [sp, #176]	; 0xb0
 801e5f2:	ea4f 402b 	mov.w	r0, fp, asr #16
 801e5f6:	f3cb 3303 	ubfx	r3, fp, #12, #4
 801e5fa:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801e5fe:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 801e602:	1421      	asrs	r1, r4, #16
 801e604:	930a      	str	r3, [sp, #40]	; 0x28
 801e606:	fb0c 0101 	mla	r1, ip, r1, r0
 801e60a:	9808      	ldr	r0, [sp, #32]
 801e60c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801e610:	1845      	adds	r5, r0, r1
 801e612:	5c40      	ldrb	r0, [r0, r1]
 801e614:	796f      	ldrb	r7, [r5, #5]
 801e616:	7869      	ldrb	r1, [r5, #1]
 801e618:	f895 8002 	ldrb.w	r8, [r5, #2]
 801e61c:	f895 a003 	ldrb.w	sl, [r5, #3]
 801e620:	f895 9004 	ldrb.w	r9, [r5, #4]
 801e624:	970c      	str	r7, [sp, #48]	; 0x30
 801e626:	b1a2      	cbz	r2, 801e652 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 801e628:	2703      	movs	r7, #3
 801e62a:	f06f 0304 	mvn.w	r3, #4
 801e62e:	3505      	adds	r5, #5
 801e630:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 801e634:	eb05 070c 	add.w	r7, r5, ip
 801e638:	f815 500c 	ldrb.w	r5, [r5, ip]
 801e63c:	9513      	str	r5, [sp, #76]	; 0x4c
 801e63e:	787d      	ldrb	r5, [r7, #1]
 801e640:	9515      	str	r5, [sp, #84]	; 0x54
 801e642:	78bd      	ldrb	r5, [r7, #2]
 801e644:	9517      	str	r5, [sp, #92]	; 0x5c
 801e646:	78fd      	ldrb	r5, [r7, #3]
 801e648:	9514      	str	r5, [sp, #80]	; 0x50
 801e64a:	793d      	ldrb	r5, [r7, #4]
 801e64c:	9516      	str	r5, [sp, #88]	; 0x58
 801e64e:	797d      	ldrb	r5, [r7, #5]
 801e650:	9518      	str	r5, [sp, #96]	; 0x60
 801e652:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 801e656:	b292      	uxth	r2, r2
 801e658:	3603      	adds	r6, #3
 801e65a:	f10e 3eff 	add.w	lr, lr, #4294967295
 801e65e:	fb03 f502 	mul.w	r5, r3, r2
 801e662:	011b      	lsls	r3, r3, #4
 801e664:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 801e668:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 801e66c:	1b5b      	subs	r3, r3, r5
 801e66e:	b292      	uxth	r2, r2
 801e670:	b29b      	uxth	r3, r3
 801e672:	1abf      	subs	r7, r7, r2
 801e674:	fb03 f909 	mul.w	r9, r3, r9
 801e678:	b2bf      	uxth	r7, r7
 801e67a:	fb03 fa0a 	mul.w	sl, r3, sl
 801e67e:	fb07 9901 	mla	r9, r7, r1, r9
 801e682:	9915      	ldr	r1, [sp, #84]	; 0x54
 801e684:	fb07 aa00 	mla	sl, r7, r0, sl
 801e688:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801e68a:	fb02 9901 	mla	r9, r2, r1, r9
 801e68e:	9916      	ldr	r1, [sp, #88]	; 0x58
 801e690:	fb02 aa00 	mla	sl, r2, r0, sl
 801e694:	9814      	ldr	r0, [sp, #80]	; 0x50
 801e696:	fb05 9901 	mla	r9, r5, r1, r9
 801e69a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801e69c:	fb05 aa00 	mla	sl, r5, r0, sl
 801e6a0:	434b      	muls	r3, r1
 801e6a2:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801e6a4:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801e6a8:	fb07 3308 	mla	r3, r7, r8, r3
 801e6ac:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e6b0:	f806 ac06 	strb.w	sl, [r6, #-6]
 801e6b4:	fb02 3201 	mla	r2, r2, r1, r3
 801e6b8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801e6ba:	f806 9c05 	strb.w	r9, [r6, #-5]
 801e6be:	fb05 2503 	mla	r5, r5, r3, r2
 801e6c2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801e6c4:	122d      	asrs	r5, r5, #8
 801e6c6:	449b      	add	fp, r3
 801e6c8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e6ca:	f806 5c04 	strb.w	r5, [r6, #-4]
 801e6ce:	441c      	add	r4, r3
 801e6d0:	e72b      	b.n	801e52a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801e6d2:	b01b      	add	sp, #108	; 0x6c
 801e6d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e6d8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 801e6d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e6dc:	b087      	sub	sp, #28
 801e6de:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	; 0x44
 801e6e2:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 801e6e6:	fb05 7003 	mla	r0, r5, r3, r7
 801e6ea:	2d00      	cmp	r5, #0
 801e6ec:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 801e6f0:	f89d e050 	ldrb.w	lr, [sp, #80]	; 0x50
 801e6f4:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 801e6f8:	f2c0 811f 	blt.w	801e93a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 801e6fc:	45a8      	cmp	r8, r5
 801e6fe:	f340 811c 	ble.w	801e93a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 801e702:	2f00      	cmp	r7, #0
 801e704:	f2c0 8117 	blt.w	801e936 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 801e708:	42bb      	cmp	r3, r7
 801e70a:	f340 8114 	ble.w	801e936 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 801e70e:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 801e712:	1c7a      	adds	r2, r7, #1
 801e714:	f100 8114 	bmi.w	801e940 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 801e718:	4293      	cmp	r3, r2
 801e71a:	f340 8111 	ble.w	801e940 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 801e71e:	2c00      	cmp	r4, #0
 801e720:	f000 8110 	beq.w	801e944 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x26c>
 801e724:	f8dc 0004 	ldr.w	r0, [ip, #4]
 801e728:	3501      	adds	r5, #1
 801e72a:	f100 810f 	bmi.w	801e94c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 801e72e:	45a8      	cmp	r8, r5
 801e730:	f340 810c 	ble.w	801e94c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 801e734:	f1be 0f00 	cmp.w	lr, #0
 801e738:	f000 810b 	beq.w	801e952 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x27a>
 801e73c:	2f00      	cmp	r7, #0
 801e73e:	f2c0 8103 	blt.w	801e948 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 801e742:	42bb      	cmp	r3, r7
 801e744:	f340 8100 	ble.w	801e948 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 801e748:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 801e74c:	3701      	adds	r7, #1
 801e74e:	f100 8103 	bmi.w	801e958 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 801e752:	42bb      	cmp	r3, r7
 801e754:	f340 8100 	ble.w	801e958 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 801e758:	2c00      	cmp	r4, #0
 801e75a:	f000 80ff 	beq.w	801e95c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x284>
 801e75e:	3301      	adds	r3, #1
 801e760:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801e764:	fa1f fc84 	uxth.w	ip, r4
 801e768:	fa1f fe8e 	uxth.w	lr, lr
 801e76c:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801e770:	fb0c f90e 	mul.w	r9, ip, lr
 801e774:	0e13      	lsrs	r3, r2, #24
 801e776:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801e77a:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 801e77e:	9302      	str	r3, [sp, #8]
 801e780:	ebac 0709 	sub.w	r7, ip, r9
 801e784:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 801e788:	fa1f f48e 	uxth.w	r4, lr
 801e78c:	f006 1eff 	and.w	lr, r6, #16711935	; 0xff00ff
 801e790:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801e794:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 801e798:	fb0a fe0e 	mul.w	lr, sl, lr
 801e79c:	1b1b      	subs	r3, r3, r4
 801e79e:	fb0a f606 	mul.w	r6, sl, r6
 801e7a2:	ea4f 6815 	mov.w	r8, r5, lsr #24
 801e7a6:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801e7aa:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801e7ae:	b29b      	uxth	r3, r3
 801e7b0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e7b4:	b2bf      	uxth	r7, r7
 801e7b6:	9301      	str	r3, [sp, #4]
 801e7b8:	44e6      	add	lr, ip
 801e7ba:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801e7be:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e7c2:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801e7c6:	f00e 13ff 	and.w	r3, lr, #16711935	; 0xff00ff
 801e7ca:	9303      	str	r3, [sp, #12]
 801e7cc:	0a33      	lsrs	r3, r6, #8
 801e7ce:	f000 16ff 	and.w	r6, r0, #16711935	; 0xff00ff
 801e7d2:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801e7d6:	9304      	str	r3, [sp, #16]
 801e7d8:	fb0b f606 	mul.w	r6, fp, r6
 801e7dc:	fb0b f000 	mul.w	r0, fp, r0
 801e7e0:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 801e7e4:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801e7e8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801e7ec:	44b6      	add	lr, r6
 801e7ee:	f500 7680 	add.w	r6, r0, #256	; 0x100
 801e7f2:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 801e7f6:	f005 16ff 	and.w	r6, r5, #16711935	; 0xff00ff
 801e7fa:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801e7fe:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e802:	fb08 f606 	mul.w	r6, r8, r6
 801e806:	0a03      	lsrs	r3, r0, #8
 801e808:	fb08 f505 	mul.w	r5, r8, r5
 801e80c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801e810:	0a30      	lsrs	r0, r6, #8
 801e812:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801e816:	9305      	str	r3, [sp, #20]
 801e818:	0e13      	lsrs	r3, r2, #24
 801e81a:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801e81e:	fb0e fe07 	mul.w	lr, lr, r7
 801e822:	4430      	add	r0, r6
 801e824:	f505 7680 	add.w	r6, r5, #256	; 0x100
 801e828:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801e82c:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 801e830:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801e834:	0a00      	lsrs	r0, r0, #8
 801e836:	435e      	muls	r6, r3
 801e838:	0a2d      	lsrs	r5, r5, #8
 801e83a:	435a      	muls	r2, r3
 801e83c:	9b03      	ldr	r3, [sp, #12]
 801e83e:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 801e842:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801e846:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801e84a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e84e:	44b4      	add	ip, r6
 801e850:	f502 7680 	add.w	r6, r2, #256	; 0x100
 801e854:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e858:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 801e85c:	9e01      	ldr	r6, [sp, #4]
 801e85e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e862:	fb03 ee06 	mla	lr, r3, r6, lr
 801e866:	9b04      	ldr	r3, [sp, #16]
 801e868:	0a12      	lsrs	r2, r2, #8
 801e86a:	fb0c ee09 	mla	lr, ip, r9, lr
 801e86e:	f403 467f 	and.w	r6, r3, #65280	; 0xff00
 801e872:	9b05      	ldr	r3, [sp, #20]
 801e874:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801e878:	fb00 ee04 	mla	lr, r0, r4, lr
 801e87c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e880:	f00e 10ff 	and.w	r0, lr, #16711935	; 0xff00ff
 801e884:	f403 4e7f 	and.w	lr, r3, #65280	; 0xff00
 801e888:	9b01      	ldr	r3, [sp, #4]
 801e88a:	fb07 fe0e 	mul.w	lr, r7, lr
 801e88e:	fb07 f70b 	mul.w	r7, r7, fp
 801e892:	fb03 ee06 	mla	lr, r3, r6, lr
 801e896:	fb03 730a 	mla	r3, r3, sl, r7
 801e89a:	fb09 e202 	mla	r2, r9, r2, lr
 801e89e:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 801e8a2:	fb04 2e0e 	mla	lr, r4, lr, r2
 801e8a6:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 801e8aa:	fb04 3408 	mla	r4, r4, r8, r3
 801e8ae:	9b02      	ldr	r3, [sp, #8]
 801e8b0:	b292      	uxth	r2, r2
 801e8b2:	fb09 4903 	mla	r9, r9, r3, r4
 801e8b6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e8ba:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801e8be:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801e8c2:	fb09 f902 	mul.w	r9, r9, r2
 801e8c6:	ea40 0e0e 	orr.w	lr, r0, lr
 801e8ca:	f109 0301 	add.w	r3, r9, #1
 801e8ce:	fa5f f08e 	uxtb.w	r0, lr
 801e8d2:	fb10 f002 	smulbb	r0, r0, r2
 801e8d6:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 801e8da:	780b      	ldrb	r3, [r1, #0]
 801e8dc:	ea6f 2919 	mvn.w	r9, r9, lsr #8
 801e8e0:	fa5f f989 	uxtb.w	r9, r9
 801e8e4:	fb03 0309 	mla	r3, r3, r9, r0
 801e8e8:	b29b      	uxth	r3, r3
 801e8ea:	1c58      	adds	r0, r3, #1
 801e8ec:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801e8f0:	7848      	ldrb	r0, [r1, #1]
 801e8f2:	fb10 f009 	smulbb	r0, r0, r9
 801e8f6:	121b      	asrs	r3, r3, #8
 801e8f8:	700b      	strb	r3, [r1, #0]
 801e8fa:	f3ce 2307 	ubfx	r3, lr, #8, #8
 801e8fe:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 801e902:	fb03 0302 	mla	r3, r3, r2, r0
 801e906:	b29b      	uxth	r3, r3
 801e908:	1c58      	adds	r0, r3, #1
 801e90a:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801e90e:	121b      	asrs	r3, r3, #8
 801e910:	704b      	strb	r3, [r1, #1]
 801e912:	788b      	ldrb	r3, [r1, #2]
 801e914:	fb13 f909 	smulbb	r9, r3, r9
 801e918:	fb0e 9e02 	mla	lr, lr, r2, r9
 801e91c:	fa1f fe8e 	uxth.w	lr, lr
 801e920:	f10e 0301 	add.w	r3, lr, #1
 801e924:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 801e928:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801e92c:	f881 e002 	strb.w	lr, [r1, #2]
 801e930:	b007      	add	sp, #28
 801e932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e936:	2600      	movs	r6, #0
 801e938:	e6eb      	b.n	801e712 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3a>
 801e93a:	2000      	movs	r0, #0
 801e93c:	4606      	mov	r6, r0
 801e93e:	e6f3      	b.n	801e728 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 801e940:	2000      	movs	r0, #0
 801e942:	e6f1      	b.n	801e728 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 801e944:	4620      	mov	r0, r4
 801e946:	e6ef      	b.n	801e728 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 801e948:	2500      	movs	r5, #0
 801e94a:	e6ff      	b.n	801e74c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x74>
 801e94c:	2200      	movs	r2, #0
 801e94e:	4615      	mov	r5, r2
 801e950:	e708      	b.n	801e764 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801e952:	4672      	mov	r2, lr
 801e954:	4675      	mov	r5, lr
 801e956:	e705      	b.n	801e764 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801e958:	2200      	movs	r2, #0
 801e95a:	e703      	b.n	801e764 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801e95c:	4622      	mov	r2, r4
 801e95e:	e701      	b.n	801e764 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>

0801e960 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e964:	b09d      	sub	sp, #116	; 0x74
 801e966:	9219      	str	r2, [sp, #100]	; 0x64
 801e968:	9307      	str	r3, [sp, #28]
 801e96a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801e96c:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 801e970:	901b      	str	r0, [sp, #108]	; 0x6c
 801e972:	931a      	str	r3, [sp, #104]	; 0x68
 801e974:	6850      	ldr	r0, [r2, #4]
 801e976:	9117      	str	r1, [sp, #92]	; 0x5c
 801e978:	6812      	ldr	r2, [r2, #0]
 801e97a:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 801e97e:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	; 0x9c
 801e982:	fb00 1303 	mla	r3, r0, r3, r1
 801e986:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e98a:	18d3      	adds	r3, r2, r3
 801e98c:	930a      	str	r3, [sp, #40]	; 0x28
 801e98e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801e990:	681b      	ldr	r3, [r3, #0]
 801e992:	9310      	str	r3, [sp, #64]	; 0x40
 801e994:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 801e998:	930b      	str	r3, [sp, #44]	; 0x2c
 801e99a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801e99c:	2b00      	cmp	r3, #0
 801e99e:	dc03      	bgt.n	801e9a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801e9a0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801e9a2:	2b00      	cmp	r3, #0
 801e9a4:	f340 8368 	ble.w	801f078 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 801e9a8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801e9aa:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801e9ae:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801e9b2:	1e48      	subs	r0, r1, #1
 801e9b4:	1e57      	subs	r7, r2, #1
 801e9b6:	9b07      	ldr	r3, [sp, #28]
 801e9b8:	2b00      	cmp	r3, #0
 801e9ba:	f340 8187 	ble.w	801eccc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 801e9be:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801e9c2:	ea4f 4326 	mov.w	r3, r6, asr #16
 801e9c6:	d406      	bmi.n	801e9d6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801e9c8:	4584      	cmp	ip, r0
 801e9ca:	da04      	bge.n	801e9d6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801e9cc:	2b00      	cmp	r3, #0
 801e9ce:	db02      	blt.n	801e9d6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801e9d0:	42bb      	cmp	r3, r7
 801e9d2:	f2c0 817c 	blt.w	801ecce <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801e9d6:	f11c 0c01 	adds.w	ip, ip, #1
 801e9da:	f100 816c 	bmi.w	801ecb6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801e9de:	4561      	cmp	r1, ip
 801e9e0:	f2c0 8169 	blt.w	801ecb6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801e9e4:	3301      	adds	r3, #1
 801e9e6:	f100 8166 	bmi.w	801ecb6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801e9ea:	429a      	cmp	r2, r3
 801e9ec:	f2c0 8163 	blt.w	801ecb6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801e9f0:	9b07      	ldr	r3, [sp, #28]
 801e9f2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801e9f4:	9318      	str	r3, [sp, #96]	; 0x60
 801e9f6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801e9f8:	2b00      	cmp	r3, #0
 801e9fa:	f340 8186 	ble.w	801ed0a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 801e9fe:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801ea00:	142a      	asrs	r2, r5, #16
 801ea02:	ea4f 4026 	mov.w	r0, r6, asr #16
 801ea06:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801ea0a:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 801ea0e:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 801ea12:	f100 81cb 	bmi.w	801edac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801ea16:	f10e 38ff 	add.w	r8, lr, #4294967295
 801ea1a:	4542      	cmp	r2, r8
 801ea1c:	f280 81c6 	bge.w	801edac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801ea20:	2800      	cmp	r0, #0
 801ea22:	f2c0 81c3 	blt.w	801edac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801ea26:	f103 38ff 	add.w	r8, r3, #4294967295
 801ea2a:	4540      	cmp	r0, r8
 801ea2c:	f280 81be 	bge.w	801edac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801ea30:	fa0f f38e 	sxth.w	r3, lr
 801ea34:	fb00 2203 	mla	r2, r0, r3, r2
 801ea38:	9810      	ldr	r0, [sp, #64]	; 0x40
 801ea3a:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 801ea3e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 801ea42:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801ea46:	2900      	cmp	r1, #0
 801ea48:	f000 81a6 	beq.w	801ed98 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 801ea4c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801ea50:	900c      	str	r0, [sp, #48]	; 0x30
 801ea52:	0e00      	lsrs	r0, r0, #24
 801ea54:	9013      	str	r0, [sp, #76]	; 0x4c
 801ea56:	f1bc 0f00 	cmp.w	ip, #0
 801ea5a:	d00f      	beq.n	801ea7c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801ea5c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801ea60:	3b01      	subs	r3, #1
 801ea62:	009b      	lsls	r3, r3, #2
 801ea64:	3304      	adds	r3, #4
 801ea66:	eb08 0003 	add.w	r0, r8, r3
 801ea6a:	f858 3003 	ldr.w	r3, [r8, r3]
 801ea6e:	9308      	str	r3, [sp, #32]
 801ea70:	0e1b      	lsrs	r3, r3, #24
 801ea72:	9311      	str	r3, [sp, #68]	; 0x44
 801ea74:	6843      	ldr	r3, [r0, #4]
 801ea76:	930d      	str	r3, [sp, #52]	; 0x34
 801ea78:	0e1b      	lsrs	r3, r3, #24
 801ea7a:	9314      	str	r3, [sp, #80]	; 0x50
 801ea7c:	b289      	uxth	r1, r1
 801ea7e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801ea80:	fa1f fc8c 	uxth.w	ip, ip
 801ea84:	0108      	lsls	r0, r1, #4
 801ea86:	fb01 f90c 	mul.w	r9, r1, ip
 801ea8a:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 801ea8e:	ebc9 1c0c 	rsb	ip, r9, ip, lsl #4
 801ea92:	eba0 0809 	sub.w	r8, r0, r9
 801ea96:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801ea98:	fa1f f18c 	uxth.w	r1, ip
 801ea9c:	fa1f f888 	uxth.w	r8, r8
 801eaa0:	1a5b      	subs	r3, r3, r1
 801eaa2:	fb08 f000 	mul.w	r0, r8, r0
 801eaa6:	b29b      	uxth	r3, r3
 801eaa8:	fb03 000e 	mla	r0, r3, lr, r0
 801eaac:	fb01 0004 	mla	r0, r1, r4, r0
 801eab0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801eab2:	fb09 0004 	mla	r0, r9, r4, r0
 801eab6:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801eaba:	2800      	cmp	r0, #0
 801eabc:	f000 80f2 	beq.w	801eca4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801eac0:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801eac4:	d01b      	beq.n	801eafe <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801eac6:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 801eaca:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801eace:	fb0e fa0a 	mul.w	sl, lr, sl
 801ead2:	fb0e fe02 	mul.w	lr, lr, r2
 801ead6:	ea4f 221a 	mov.w	r2, sl, lsr #8
 801eada:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801eade:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801eae2:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801eae6:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801eaea:	4452      	add	r2, sl
 801eaec:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801eaf0:	0a12      	lsrs	r2, r2, #8
 801eaf2:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801eaf6:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801eafa:	ea42 020c 	orr.w	r2, r2, ip
 801eafe:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801eb00:	2cff      	cmp	r4, #255	; 0xff
 801eb02:	d021      	beq.n	801eb48 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801eb04:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801eb06:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801eb0a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801eb0c:	fb04 fb0b 	mul.w	fp, r4, fp
 801eb10:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801eb12:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801eb16:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801eb18:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801eb1c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801eb20:	fb04 fa0a 	mul.w	sl, r4, sl
 801eb24:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801eb28:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801eb2c:	44de      	add	lr, fp
 801eb2e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801eb32:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801eb36:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801eb3a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801eb3e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801eb42:	ea4e 040a 	orr.w	r4, lr, sl
 801eb46:	940c      	str	r4, [sp, #48]	; 0x30
 801eb48:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801eb4a:	2cff      	cmp	r4, #255	; 0xff
 801eb4c:	d021      	beq.n	801eb92 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 801eb4e:	9c08      	ldr	r4, [sp, #32]
 801eb50:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801eb54:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801eb56:	fb04 fb0b 	mul.w	fp, r4, fp
 801eb5a:	9c08      	ldr	r4, [sp, #32]
 801eb5c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801eb60:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801eb62:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801eb66:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801eb6a:	fb04 fa0a 	mul.w	sl, r4, sl
 801eb6e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801eb72:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801eb76:	44de      	add	lr, fp
 801eb78:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801eb7c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801eb80:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801eb84:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801eb88:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801eb8c:	ea4e 040a 	orr.w	r4, lr, sl
 801eb90:	9408      	str	r4, [sp, #32]
 801eb92:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801eb94:	2cff      	cmp	r4, #255	; 0xff
 801eb96:	d021      	beq.n	801ebdc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801eb98:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801eb9a:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801eb9e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801eba0:	fb04 fb0b 	mul.w	fp, r4, fp
 801eba4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801eba6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801ebaa:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801ebac:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801ebb0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801ebb4:	fb04 fa0a 	mul.w	sl, r4, sl
 801ebb8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801ebbc:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801ebc0:	44de      	add	lr, fp
 801ebc2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801ebc6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ebca:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ebce:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801ebd2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801ebd6:	ea4e 040a 	orr.w	r4, lr, sl
 801ebda:	940d      	str	r4, [sp, #52]	; 0x34
 801ebdc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801ebde:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 801ebe2:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801ebe6:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801ebea:	9c08      	ldr	r4, [sp, #32]
 801ebec:	fb08 fc0c 	mul.w	ip, r8, ip
 801ebf0:	fb03 cc0e 	mla	ip, r3, lr, ip
 801ebf4:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801ebf8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801ebfa:	fb01 cc0e 	mla	ip, r1, lr, ip
 801ebfe:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801ec02:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801ec04:	fb09 cc0e 	mla	ip, r9, lr, ip
 801ec08:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801ec0c:	fb08 f80e 	mul.w	r8, r8, lr
 801ec10:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ec14:	fb03 8202 	mla	r2, r3, r2, r8
 801ec18:	9b08      	ldr	r3, [sp, #32]
 801ec1a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ec1e:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 801ec22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ec24:	fb01 220a 	mla	r2, r1, sl, r2
 801ec28:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 801ec2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ec2e:	fb09 2901 	mla	r9, r9, r1, r2
 801ec32:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801ec34:	4343      	muls	r3, r0
 801ec36:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801ec3a:	1c58      	adds	r0, r3, #1
 801ec3c:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801ec40:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801ec44:	783b      	ldrb	r3, [r7, #0]
 801ec46:	ea4c 0c09 	orr.w	ip, ip, r9
 801ec4a:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801ec4e:	fa5f f28c 	uxtb.w	r2, ip
 801ec52:	b2c0      	uxtb	r0, r0
 801ec54:	fb12 f201 	smulbb	r2, r2, r1
 801ec58:	fb03 2300 	mla	r3, r3, r0, r2
 801ec5c:	b29b      	uxth	r3, r3
 801ec5e:	1c5a      	adds	r2, r3, #1
 801ec60:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801ec64:	787a      	ldrb	r2, [r7, #1]
 801ec66:	fb12 f200 	smulbb	r2, r2, r0
 801ec6a:	121b      	asrs	r3, r3, #8
 801ec6c:	703b      	strb	r3, [r7, #0]
 801ec6e:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801ec72:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801ec76:	fb03 2301 	mla	r3, r3, r1, r2
 801ec7a:	b29b      	uxth	r3, r3
 801ec7c:	1c5a      	adds	r2, r3, #1
 801ec7e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801ec82:	121b      	asrs	r3, r3, #8
 801ec84:	707b      	strb	r3, [r7, #1]
 801ec86:	78bb      	ldrb	r3, [r7, #2]
 801ec88:	fb13 f000 	smulbb	r0, r3, r0
 801ec8c:	fb0c 0c01 	mla	ip, ip, r1, r0
 801ec90:	fa1f fc8c 	uxth.w	ip, ip
 801ec94:	f10c 0301 	add.w	r3, ip, #1
 801ec98:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801ec9c:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801eca0:	f887 c002 	strb.w	ip, [r7, #2]
 801eca4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801eca6:	3703      	adds	r7, #3
 801eca8:	441d      	add	r5, r3
 801ecaa:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ecac:	441e      	add	r6, r3
 801ecae:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801ecb0:	3b01      	subs	r3, #1
 801ecb2:	9318      	str	r3, [sp, #96]	; 0x60
 801ecb4:	e69f      	b.n	801e9f6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801ecb6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801ecb8:	441d      	add	r5, r3
 801ecba:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ecbc:	441e      	add	r6, r3
 801ecbe:	9b07      	ldr	r3, [sp, #28]
 801ecc0:	3b01      	subs	r3, #1
 801ecc2:	9307      	str	r3, [sp, #28]
 801ecc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ecc6:	3303      	adds	r3, #3
 801ecc8:	930a      	str	r3, [sp, #40]	; 0x28
 801ecca:	e674      	b.n	801e9b6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801eccc:	d025      	beq.n	801ed1a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 801ecce:	9b07      	ldr	r3, [sp, #28]
 801ecd0:	9829      	ldr	r0, [sp, #164]	; 0xa4
 801ecd2:	3b01      	subs	r3, #1
 801ecd4:	fb00 5003 	mla	r0, r0, r3, r5
 801ecd8:	1400      	asrs	r0, r0, #16
 801ecda:	f53f ae89 	bmi.w	801e9f0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801ecde:	3901      	subs	r1, #1
 801ece0:	4288      	cmp	r0, r1
 801ece2:	f6bf ae85 	bge.w	801e9f0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801ece6:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801ece8:	fb01 6303 	mla	r3, r1, r3, r6
 801ecec:	141b      	asrs	r3, r3, #16
 801ecee:	f53f ae7f 	bmi.w	801e9f0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801ecf2:	3a01      	subs	r2, #1
 801ecf4:	4293      	cmp	r3, r2
 801ecf6:	f6bf ae7b 	bge.w	801e9f0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801ecfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ecfc:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801ed00:	f103 0e03 	add.w	lr, r3, #3
 801ed04:	f1bb 0f00 	cmp.w	fp, #0
 801ed08:	dc6e      	bgt.n	801ede8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 801ed0a:	9b07      	ldr	r3, [sp, #28]
 801ed0c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801ed10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ed12:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ed16:	4423      	add	r3, r4
 801ed18:	930a      	str	r3, [sp, #40]	; 0x28
 801ed1a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801ed1c:	2b00      	cmp	r3, #0
 801ed1e:	f340 81ab 	ble.w	801f078 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 801ed22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ed26:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801ed28:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ed2c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ed30:	eef0 6a62 	vmov.f32	s13, s5
 801ed34:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801ed38:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ed3c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ed40:	ee16 5a90 	vmov	r5, s13
 801ed44:	eef0 6a43 	vmov.f32	s13, s6
 801ed48:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ed4c:	ee16 6a90 	vmov	r6, s13
 801ed50:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ed54:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ed58:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ed5c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ed60:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ed64:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ed68:	ee12 2a90 	vmov	r2, s5
 801ed6c:	eef0 2a47 	vmov.f32	s5, s14
 801ed70:	fb92 f3f3 	sdiv	r3, r2, r3
 801ed74:	ee13 2a10 	vmov	r2, s6
 801ed78:	9329      	str	r3, [sp, #164]	; 0xa4
 801ed7a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801ed7c:	eeb0 3a67 	vmov.f32	s6, s15
 801ed80:	fb92 f3f3 	sdiv	r3, r2, r3
 801ed84:	932a      	str	r3, [sp, #168]	; 0xa8
 801ed86:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801ed88:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801ed8a:	3b01      	subs	r3, #1
 801ed8c:	9317      	str	r3, [sp, #92]	; 0x5c
 801ed8e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801ed90:	bf08      	it	eq
 801ed92:	4613      	moveq	r3, r2
 801ed94:	9307      	str	r3, [sp, #28]
 801ed96:	e600      	b.n	801e99a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801ed98:	f1bc 0f00 	cmp.w	ip, #0
 801ed9c:	f43f ae6e 	beq.w	801ea7c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801eda0:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 801eda4:	9308      	str	r3, [sp, #32]
 801eda6:	0e1b      	lsrs	r3, r3, #24
 801eda8:	9311      	str	r3, [sp, #68]	; 0x44
 801edaa:	e667      	b.n	801ea7c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801edac:	f112 0801 	adds.w	r8, r2, #1
 801edb0:	f53f af78 	bmi.w	801eca4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801edb4:	45c6      	cmp	lr, r8
 801edb6:	f6ff af75 	blt.w	801eca4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801edba:	f110 0801 	adds.w	r8, r0, #1
 801edbe:	f53f af71 	bmi.w	801eca4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801edc2:	4543      	cmp	r3, r8
 801edc4:	f6ff af6e 	blt.w	801eca4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801edc8:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 801edca:	b21b      	sxth	r3, r3
 801edcc:	9201      	str	r2, [sp, #4]
 801edce:	9300      	str	r3, [sp, #0]
 801edd0:	fa0f f38e 	sxth.w	r3, lr
 801edd4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801edd6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801edda:	e9cd c404 	strd	ip, r4, [sp, #16]
 801edde:	4639      	mov	r1, r7
 801ede0:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801ede2:	f7ff fc79 	bl	801e6d8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 801ede6:	e75d      	b.n	801eca4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801ede8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801edea:	142f      	asrs	r7, r5, #16
 801edec:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801edee:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801edf2:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 801edf6:	1433      	asrs	r3, r6, #16
 801edf8:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801edfc:	fb02 7303 	mla	r3, r2, r3, r7
 801ee00:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 801ee04:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801ee08:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801ee0c:	2900      	cmp	r1, #0
 801ee0e:	f000 812a 	beq.w	801f066 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 801ee12:	687c      	ldr	r4, [r7, #4]
 801ee14:	940e      	str	r4, [sp, #56]	; 0x38
 801ee16:	0e24      	lsrs	r4, r4, #24
 801ee18:	9415      	str	r4, [sp, #84]	; 0x54
 801ee1a:	b178      	cbz	r0, 801ee3c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801ee1c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 801ee20:	3a01      	subs	r2, #1
 801ee22:	0092      	lsls	r2, r2, #2
 801ee24:	3204      	adds	r2, #4
 801ee26:	eb07 0802 	add.w	r8, r7, r2
 801ee2a:	58ba      	ldr	r2, [r7, r2]
 801ee2c:	9209      	str	r2, [sp, #36]	; 0x24
 801ee2e:	0e12      	lsrs	r2, r2, #24
 801ee30:	9212      	str	r2, [sp, #72]	; 0x48
 801ee32:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801ee36:	920f      	str	r2, [sp, #60]	; 0x3c
 801ee38:	0e12      	lsrs	r2, r2, #24
 801ee3a:	9216      	str	r2, [sp, #88]	; 0x58
 801ee3c:	b289      	uxth	r1, r1
 801ee3e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801ee40:	b280      	uxth	r0, r0
 801ee42:	fb01 f900 	mul.w	r9, r1, r0
 801ee46:	0109      	lsls	r1, r1, #4
 801ee48:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801ee4c:	eba1 0809 	sub.w	r8, r1, r9
 801ee50:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 801ee54:	9915      	ldr	r1, [sp, #84]	; 0x54
 801ee56:	b280      	uxth	r0, r0
 801ee58:	fa1f f888 	uxth.w	r8, r8
 801ee5c:	1a12      	subs	r2, r2, r0
 801ee5e:	fb08 f101 	mul.w	r1, r8, r1
 801ee62:	b292      	uxth	r2, r2
 801ee64:	fb02 110c 	mla	r1, r2, ip, r1
 801ee68:	fb00 1104 	mla	r1, r0, r4, r1
 801ee6c:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801ee6e:	fb09 1104 	mla	r1, r9, r4, r1
 801ee72:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801ee76:	2900      	cmp	r1, #0
 801ee78:	f000 80ec 	beq.w	801f054 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f4>
 801ee7c:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801ee80:	d019      	beq.n	801eeb6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 801ee82:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801ee86:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801ee8a:	fb0c fa0a 	mul.w	sl, ip, sl
 801ee8e:	fb0c fc03 	mul.w	ip, ip, r3
 801ee92:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801ee96:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801ee9a:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801ee9e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801eea2:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801eea6:	4453      	add	r3, sl
 801eea8:	0a3f      	lsrs	r7, r7, #8
 801eeaa:	0a1b      	lsrs	r3, r3, #8
 801eeac:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801eeb0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801eeb4:	433b      	orrs	r3, r7
 801eeb6:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801eeb8:	2cff      	cmp	r4, #255	; 0xff
 801eeba:	d020      	beq.n	801eefe <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x59e>
 801eebc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801eebe:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801eec2:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801eec4:	4367      	muls	r7, r4
 801eec6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801eec8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801eecc:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801eed0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801eed2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801eed6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801eeda:	fb04 fa0a 	mul.w	sl, r4, sl
 801eede:	44bc      	add	ip, r7
 801eee0:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801eee4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801eee8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801eeec:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801eef0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801eef4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801eef8:	ea4c 040a 	orr.w	r4, ip, sl
 801eefc:	940e      	str	r4, [sp, #56]	; 0x38
 801eefe:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801ef00:	2cff      	cmp	r4, #255	; 0xff
 801ef02:	d020      	beq.n	801ef46 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e6>
 801ef04:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801ef06:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801ef0a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801ef0c:	4367      	muls	r7, r4
 801ef0e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801ef10:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801ef14:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801ef18:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801ef1a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801ef1e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ef22:	fb04 fa0a 	mul.w	sl, r4, sl
 801ef26:	44bc      	add	ip, r7
 801ef28:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801ef2c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ef30:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801ef34:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ef38:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ef3c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801ef40:	ea4c 040a 	orr.w	r4, ip, sl
 801ef44:	9409      	str	r4, [sp, #36]	; 0x24
 801ef46:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801ef48:	2cff      	cmp	r4, #255	; 0xff
 801ef4a:	d020      	beq.n	801ef8e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62e>
 801ef4c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801ef4e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801ef52:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801ef54:	4367      	muls	r7, r4
 801ef56:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801ef58:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801ef5c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801ef60:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801ef62:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801ef66:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ef6a:	fb04 fa0a 	mul.w	sl, r4, sl
 801ef6e:	44bc      	add	ip, r7
 801ef70:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801ef74:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ef78:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801ef7c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ef80:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ef84:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801ef88:	ea4c 040a 	orr.w	r4, ip, sl
 801ef8c:	940f      	str	r4, [sp, #60]	; 0x3c
 801ef8e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801ef90:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801ef94:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801ef98:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801ef9c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801ef9e:	fb08 f707 	mul.w	r7, r8, r7
 801efa2:	fb02 770c 	mla	r7, r2, ip, r7
 801efa6:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801efaa:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801efac:	fb00 770c 	mla	r7, r0, ip, r7
 801efb0:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801efb4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801efb6:	fb09 770c 	mla	r7, r9, ip, r7
 801efba:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801efbe:	fb08 f80c 	mul.w	r8, r8, ip
 801efc2:	0a3f      	lsrs	r7, r7, #8
 801efc4:	fb02 8303 	mla	r3, r2, r3, r8
 801efc8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801efca:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801efce:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801efd2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801efd4:	fb00 330a 	mla	r3, r0, sl, r3
 801efd8:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801efdc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801efde:	fb09 3c0c 	mla	ip, r9, ip, r3
 801efe2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801efe4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801efe8:	434b      	muls	r3, r1
 801efea:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801efee:	1c59      	adds	r1, r3, #1
 801eff0:	ea47 070c 	orr.w	r7, r7, ip
 801eff4:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801eff8:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801effc:	b2fa      	uxtb	r2, r7
 801effe:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801f002:	fb12 f200 	smulbb	r2, r2, r0
 801f006:	b2c9      	uxtb	r1, r1
 801f008:	fb03 2301 	mla	r3, r3, r1, r2
 801f00c:	b29b      	uxth	r3, r3
 801f00e:	1c5a      	adds	r2, r3, #1
 801f010:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801f014:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 801f018:	fb12 f201 	smulbb	r2, r2, r1
 801f01c:	121b      	asrs	r3, r3, #8
 801f01e:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801f022:	f3c7 2307 	ubfx	r3, r7, #8, #8
 801f026:	0c3f      	lsrs	r7, r7, #16
 801f028:	fb03 2300 	mla	r3, r3, r0, r2
 801f02c:	b29b      	uxth	r3, r3
 801f02e:	1c5a      	adds	r2, r3, #1
 801f030:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801f034:	121b      	asrs	r3, r3, #8
 801f036:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801f03a:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801f03e:	fb13 f101 	smulbb	r1, r3, r1
 801f042:	fb07 1700 	mla	r7, r7, r0, r1
 801f046:	b2bf      	uxth	r7, r7
 801f048:	1c79      	adds	r1, r7, #1
 801f04a:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 801f04e:	123f      	asrs	r7, r7, #8
 801f050:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801f054:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801f056:	f10e 0e03 	add.w	lr, lr, #3
 801f05a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801f05e:	441d      	add	r5, r3
 801f060:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801f062:	441e      	add	r6, r3
 801f064:	e64e      	b.n	801ed04 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a4>
 801f066:	2800      	cmp	r0, #0
 801f068:	f43f aee8 	beq.w	801ee3c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801f06c:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 801f070:	9209      	str	r2, [sp, #36]	; 0x24
 801f072:	0e12      	lsrs	r2, r2, #24
 801f074:	9212      	str	r2, [sp, #72]	; 0x48
 801f076:	e6e1      	b.n	801ee3c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801f078:	b01d      	add	sp, #116	; 0x74
 801f07a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f07e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 801f07e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f082:	b087      	sub	sp, #28
 801f084:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	; 0x44
 801f088:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 801f08c:	fb05 7003 	mla	r0, r5, r3, r7
 801f090:	2d00      	cmp	r5, #0
 801f092:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 801f096:	f89d e050 	ldrb.w	lr, [sp, #80]	; 0x50
 801f09a:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 801f09e:	f2c0 810a 	blt.w	801f2b6 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 801f0a2:	45a8      	cmp	r8, r5
 801f0a4:	f340 8107 	ble.w	801f2b6 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 801f0a8:	2f00      	cmp	r7, #0
 801f0aa:	f2c0 8102 	blt.w	801f2b2 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 801f0ae:	42bb      	cmp	r3, r7
 801f0b0:	f340 80ff 	ble.w	801f2b2 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 801f0b4:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 801f0b8:	1c7a      	adds	r2, r7, #1
 801f0ba:	f100 80ff 	bmi.w	801f2bc <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 801f0be:	4293      	cmp	r3, r2
 801f0c0:	f340 80fc 	ble.w	801f2bc <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 801f0c4:	2c00      	cmp	r4, #0
 801f0c6:	f000 80fb 	beq.w	801f2c0 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x242>
 801f0ca:	f8dc 0004 	ldr.w	r0, [ip, #4]
 801f0ce:	3501      	adds	r5, #1
 801f0d0:	f100 80fa 	bmi.w	801f2c8 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 801f0d4:	45a8      	cmp	r8, r5
 801f0d6:	f340 80f7 	ble.w	801f2c8 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 801f0da:	f1be 0f00 	cmp.w	lr, #0
 801f0de:	f000 80f6 	beq.w	801f2ce <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x250>
 801f0e2:	2f00      	cmp	r7, #0
 801f0e4:	f2c0 80ee 	blt.w	801f2c4 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 801f0e8:	42bb      	cmp	r3, r7
 801f0ea:	f340 80eb 	ble.w	801f2c4 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 801f0ee:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 801f0f2:	3701      	adds	r7, #1
 801f0f4:	f100 80ee 	bmi.w	801f2d4 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 801f0f8:	42bb      	cmp	r3, r7
 801f0fa:	f340 80eb 	ble.w	801f2d4 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 801f0fe:	2c00      	cmp	r4, #0
 801f100:	f000 80ea 	beq.w	801f2d8 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x25a>
 801f104:	3301      	adds	r3, #1
 801f106:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801f10a:	fa1f fc84 	uxth.w	ip, r4
 801f10e:	fa1f fe8e 	uxth.w	lr, lr
 801f112:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801f116:	fb0c f90e 	mul.w	r9, ip, lr
 801f11a:	0e13      	lsrs	r3, r2, #24
 801f11c:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801f120:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 801f124:	9302      	str	r3, [sp, #8]
 801f126:	ebac 0709 	sub.w	r7, ip, r9
 801f12a:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 801f12e:	fa1f f48e 	uxth.w	r4, lr
 801f132:	f006 1eff 	and.w	lr, r6, #16711935	; 0xff00ff
 801f136:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801f13a:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 801f13e:	fb0a fe0e 	mul.w	lr, sl, lr
 801f142:	1b1b      	subs	r3, r3, r4
 801f144:	fb0a f606 	mul.w	r6, sl, r6
 801f148:	ea4f 6815 	mov.w	r8, r5, lsr #24
 801f14c:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801f150:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801f154:	b29b      	uxth	r3, r3
 801f156:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f15a:	b2bf      	uxth	r7, r7
 801f15c:	9301      	str	r3, [sp, #4]
 801f15e:	44e6      	add	lr, ip
 801f160:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801f164:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f168:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801f16c:	f00e 13ff 	and.w	r3, lr, #16711935	; 0xff00ff
 801f170:	9303      	str	r3, [sp, #12]
 801f172:	0a33      	lsrs	r3, r6, #8
 801f174:	f000 16ff 	and.w	r6, r0, #16711935	; 0xff00ff
 801f178:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801f17c:	9304      	str	r3, [sp, #16]
 801f17e:	fb0b f606 	mul.w	r6, fp, r6
 801f182:	fb0b f000 	mul.w	r0, fp, r0
 801f186:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 801f18a:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801f18e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f192:	44b6      	add	lr, r6
 801f194:	f500 7680 	add.w	r6, r0, #256	; 0x100
 801f198:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 801f19c:	f005 16ff 	and.w	r6, r5, #16711935	; 0xff00ff
 801f1a0:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801f1a4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f1a8:	fb08 f606 	mul.w	r6, r8, r6
 801f1ac:	0a03      	lsrs	r3, r0, #8
 801f1ae:	fb08 f505 	mul.w	r5, r8, r5
 801f1b2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f1b6:	0a30      	lsrs	r0, r6, #8
 801f1b8:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801f1bc:	9305      	str	r3, [sp, #20]
 801f1be:	0e13      	lsrs	r3, r2, #24
 801f1c0:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801f1c4:	fb0e fe07 	mul.w	lr, lr, r7
 801f1c8:	4430      	add	r0, r6
 801f1ca:	f505 7680 	add.w	r6, r5, #256	; 0x100
 801f1ce:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801f1d2:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 801f1d6:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801f1da:	0a00      	lsrs	r0, r0, #8
 801f1dc:	435e      	muls	r6, r3
 801f1de:	0a2d      	lsrs	r5, r5, #8
 801f1e0:	435a      	muls	r2, r3
 801f1e2:	9b03      	ldr	r3, [sp, #12]
 801f1e4:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 801f1e8:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801f1ec:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801f1f0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f1f4:	44b4      	add	ip, r6
 801f1f6:	f502 7680 	add.w	r6, r2, #256	; 0x100
 801f1fa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f1fe:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 801f202:	9e01      	ldr	r6, [sp, #4]
 801f204:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f208:	fb03 ee06 	mla	lr, r3, r6, lr
 801f20c:	9b04      	ldr	r3, [sp, #16]
 801f20e:	0a12      	lsrs	r2, r2, #8
 801f210:	fb0c ee09 	mla	lr, ip, r9, lr
 801f214:	f403 467f 	and.w	r6, r3, #65280	; 0xff00
 801f218:	9b05      	ldr	r3, [sp, #20]
 801f21a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801f21e:	fb00 ee04 	mla	lr, r0, r4, lr
 801f222:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f226:	f00e 10ff 	and.w	r0, lr, #16711935	; 0xff00ff
 801f22a:	f403 4e7f 	and.w	lr, r3, #65280	; 0xff00
 801f22e:	9b01      	ldr	r3, [sp, #4]
 801f230:	fb07 fe0e 	mul.w	lr, r7, lr
 801f234:	fb07 f70b 	mul.w	r7, r7, fp
 801f238:	fb03 ee06 	mla	lr, r3, r6, lr
 801f23c:	fb03 730a 	mla	r3, r3, sl, r7
 801f240:	fb09 e202 	mla	r2, r9, r2, lr
 801f244:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 801f248:	fb04 2e0e 	mla	lr, r4, lr, r2
 801f24c:	fb04 3408 	mla	r4, r4, r8, r3
 801f250:	9b02      	ldr	r3, [sp, #8]
 801f252:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f256:	fb09 4903 	mla	r9, r9, r3, r4
 801f25a:	780b      	ldrb	r3, [r1, #0]
 801f25c:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801f260:	ea6f 2929 	mvn.w	r9, r9, asr #8
 801f264:	ea40 0e0e 	orr.w	lr, r0, lr
 801f268:	fa5f f989 	uxtb.w	r9, r9
 801f26c:	fb03 f209 	mul.w	r2, r3, r9
 801f270:	1c53      	adds	r3, r2, #1
 801f272:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801f276:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 801f27a:	700b      	strb	r3, [r1, #0]
 801f27c:	784b      	ldrb	r3, [r1, #1]
 801f27e:	fb03 f309 	mul.w	r3, r3, r9
 801f282:	1c5a      	adds	r2, r3, #1
 801f284:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801f288:	ea4f 231e 	mov.w	r3, lr, lsr #8
 801f28c:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 801f290:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801f294:	704b      	strb	r3, [r1, #1]
 801f296:	788b      	ldrb	r3, [r1, #2]
 801f298:	fb03 f909 	mul.w	r9, r3, r9
 801f29c:	f109 0301 	add.w	r3, r9, #1
 801f2a0:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 801f2a4:	eb0e 2e19 	add.w	lr, lr, r9, lsr #8
 801f2a8:	f881 e002 	strb.w	lr, [r1, #2]
 801f2ac:	b007      	add	sp, #28
 801f2ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f2b2:	2600      	movs	r6, #0
 801f2b4:	e700      	b.n	801f0b8 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3a>
 801f2b6:	2000      	movs	r0, #0
 801f2b8:	4606      	mov	r6, r0
 801f2ba:	e708      	b.n	801f0ce <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 801f2bc:	2000      	movs	r0, #0
 801f2be:	e706      	b.n	801f0ce <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 801f2c0:	4620      	mov	r0, r4
 801f2c2:	e704      	b.n	801f0ce <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 801f2c4:	2500      	movs	r5, #0
 801f2c6:	e714      	b.n	801f0f2 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x74>
 801f2c8:	2200      	movs	r2, #0
 801f2ca:	4615      	mov	r5, r2
 801f2cc:	e71d      	b.n	801f10a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801f2ce:	4672      	mov	r2, lr
 801f2d0:	4675      	mov	r5, lr
 801f2d2:	e71a      	b.n	801f10a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801f2d4:	2200      	movs	r2, #0
 801f2d6:	e718      	b.n	801f10a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801f2d8:	4622      	mov	r2, r4
 801f2da:	e716      	b.n	801f10a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>

0801f2dc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f2dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f2e0:	b099      	sub	sp, #100	; 0x64
 801f2e2:	e9cd 1215 	strd	r1, r2, [sp, #84]	; 0x54
 801f2e6:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801f2e8:	9017      	str	r0, [sp, #92]	; 0x5c
 801f2ea:	9306      	str	r3, [sp, #24]
 801f2ec:	6850      	ldr	r0, [r2, #4]
 801f2ee:	6812      	ldr	r2, [r2, #0]
 801f2f0:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 801f2f4:	e9dd 5623 	ldrd	r5, r6, [sp, #140]	; 0x8c
 801f2f8:	fb00 1303 	mla	r3, r0, r3, r1
 801f2fc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f300:	18d3      	adds	r3, r2, r3
 801f302:	9309      	str	r3, [sp, #36]	; 0x24
 801f304:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801f306:	681b      	ldr	r3, [r3, #0]
 801f308:	930e      	str	r3, [sp, #56]	; 0x38
 801f30a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801f30c:	2b00      	cmp	r3, #0
 801f30e:	dc03      	bgt.n	801f318 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801f310:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801f312:	2b00      	cmp	r3, #0
 801f314:	f340 8360 	ble.w	801f9d8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 801f318:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801f31a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f31e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801f322:	1e48      	subs	r0, r1, #1
 801f324:	1e57      	subs	r7, r2, #1
 801f326:	9b06      	ldr	r3, [sp, #24]
 801f328:	2b00      	cmp	r3, #0
 801f32a:	f340 817b 	ble.w	801f624 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x348>
 801f32e:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801f332:	ea4f 4326 	mov.w	r3, r6, asr #16
 801f336:	d406      	bmi.n	801f346 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801f338:	4584      	cmp	ip, r0
 801f33a:	da04      	bge.n	801f346 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801f33c:	2b00      	cmp	r3, #0
 801f33e:	db02      	blt.n	801f346 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801f340:	42bb      	cmp	r3, r7
 801f342:	f2c0 8170 	blt.w	801f626 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801f346:	f11c 0c01 	adds.w	ip, ip, #1
 801f34a:	f100 8160 	bmi.w	801f60e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801f34e:	4561      	cmp	r1, ip
 801f350:	f2c0 815d 	blt.w	801f60e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801f354:	3301      	adds	r3, #1
 801f356:	f100 815a 	bmi.w	801f60e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801f35a:	429a      	cmp	r2, r3
 801f35c:	f2c0 8157 	blt.w	801f60e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801f360:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801f364:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801f366:	f1b8 0f00 	cmp.w	r8, #0
 801f36a:	f340 8179 	ble.w	801f660 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 801f36e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801f370:	ea4f 4c26 	mov.w	ip, r6, asr #16
 801f374:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801f376:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801f37a:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801f37e:	142a      	asrs	r2, r5, #16
 801f380:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801f384:	689b      	ldr	r3, [r3, #8]
 801f386:	f100 81be 	bmi.w	801f706 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801f38a:	f103 39ff 	add.w	r9, r3, #4294967295
 801f38e:	454a      	cmp	r2, r9
 801f390:	f280 81b9 	bge.w	801f706 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801f394:	f1bc 0f00 	cmp.w	ip, #0
 801f398:	f2c0 81b5 	blt.w	801f706 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801f39c:	f10e 39ff 	add.w	r9, lr, #4294967295
 801f3a0:	45cc      	cmp	ip, r9
 801f3a2:	f280 81b0 	bge.w	801f706 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801f3a6:	b21b      	sxth	r3, r3
 801f3a8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801f3aa:	fb0c 2203 	mla	r2, ip, r3, r2
 801f3ae:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 801f3b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801f3b6:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801f3ba:	2900      	cmp	r1, #0
 801f3bc:	f000 8197 	beq.w	801f6ee <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 801f3c0:	f8d9 4004 	ldr.w	r4, [r9, #4]
 801f3c4:	940a      	str	r4, [sp, #40]	; 0x28
 801f3c6:	0e24      	lsrs	r4, r4, #24
 801f3c8:	9411      	str	r4, [sp, #68]	; 0x44
 801f3ca:	b180      	cbz	r0, 801f3ee <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 801f3cc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801f3d0:	3b01      	subs	r3, #1
 801f3d2:	009b      	lsls	r3, r3, #2
 801f3d4:	3304      	adds	r3, #4
 801f3d6:	eb09 0c03 	add.w	ip, r9, r3
 801f3da:	f859 3003 	ldr.w	r3, [r9, r3]
 801f3de:	9307      	str	r3, [sp, #28]
 801f3e0:	0e1b      	lsrs	r3, r3, #24
 801f3e2:	930f      	str	r3, [sp, #60]	; 0x3c
 801f3e4:	f8dc 3004 	ldr.w	r3, [ip, #4]
 801f3e8:	930b      	str	r3, [sp, #44]	; 0x2c
 801f3ea:	0e1b      	lsrs	r3, r3, #24
 801f3ec:	9312      	str	r3, [sp, #72]	; 0x48
 801f3ee:	b289      	uxth	r1, r1
 801f3f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f3f2:	b280      	uxth	r0, r0
 801f3f4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801f3f6:	fb01 fa00 	mul.w	sl, r1, r0
 801f3fa:	0109      	lsls	r1, r1, #4
 801f3fc:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801f400:	eba1 090a 	sub.w	r9, r1, sl
 801f404:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 801f408:	b280      	uxth	r0, r0
 801f40a:	fa1f f989 	uxth.w	r9, r9
 801f40e:	1a09      	subs	r1, r1, r0
 801f410:	fb09 f303 	mul.w	r3, r9, r3
 801f414:	b289      	uxth	r1, r1
 801f416:	fb01 330e 	mla	r3, r1, lr, r3
 801f41a:	fb00 3304 	mla	r3, r0, r4, r3
 801f41e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801f420:	fb0a 3304 	mla	r3, sl, r4, r3
 801f424:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801f428:	2b00      	cmp	r3, #0
 801f42a:	f000 80e8 	beq.w	801f5fe <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801f42e:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801f432:	d01b      	beq.n	801f46c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 801f434:	f002 1bff 	and.w	fp, r2, #16711935	; 0xff00ff
 801f438:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801f43c:	fb0e fb0b 	mul.w	fp, lr, fp
 801f440:	fb0e fe02 	mul.w	lr, lr, r2
 801f444:	ea4f 221b 	mov.w	r2, fp, lsr #8
 801f448:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801f44c:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801f450:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801f454:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801f458:	445a      	add	r2, fp
 801f45a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f45e:	0a12      	lsrs	r2, r2, #8
 801f460:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801f464:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801f468:	ea42 020c 	orr.w	r2, r2, ip
 801f46c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801f46e:	2cff      	cmp	r4, #255	; 0xff
 801f470:	d021      	beq.n	801f4b6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 801f472:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801f474:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801f478:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801f47a:	fb04 fc0c 	mul.w	ip, r4, ip
 801f47e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801f480:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801f484:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 801f488:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801f48a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801f48e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f492:	fb04 fb0b 	mul.w	fp, r4, fp
 801f496:	44e6      	add	lr, ip
 801f498:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 801f49c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f4a0:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801f4a4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f4a8:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801f4ac:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801f4b0:	ea4e 040b 	orr.w	r4, lr, fp
 801f4b4:	940a      	str	r4, [sp, #40]	; 0x28
 801f4b6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801f4b8:	2cff      	cmp	r4, #255	; 0xff
 801f4ba:	d021      	beq.n	801f500 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 801f4bc:	9c07      	ldr	r4, [sp, #28]
 801f4be:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801f4c2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801f4c4:	fb04 fc0c 	mul.w	ip, r4, ip
 801f4c8:	9c07      	ldr	r4, [sp, #28]
 801f4ca:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801f4ce:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 801f4d2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801f4d4:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801f4d8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f4dc:	fb04 fb0b 	mul.w	fp, r4, fp
 801f4e0:	44e6      	add	lr, ip
 801f4e2:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 801f4e6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f4ea:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801f4ee:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f4f2:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801f4f6:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801f4fa:	ea4e 040b 	orr.w	r4, lr, fp
 801f4fe:	9407      	str	r4, [sp, #28]
 801f500:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801f502:	2cff      	cmp	r4, #255	; 0xff
 801f504:	d021      	beq.n	801f54a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 801f506:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801f508:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801f50c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801f50e:	fb04 fc0c 	mul.w	ip, r4, ip
 801f512:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801f514:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801f518:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 801f51c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801f51e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801f522:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f526:	fb04 fb0b 	mul.w	fp, r4, fp
 801f52a:	44e6      	add	lr, ip
 801f52c:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 801f530:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f534:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801f538:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f53c:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801f540:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801f544:	ea4e 040b 	orr.w	r4, lr, fp
 801f548:	940b      	str	r4, [sp, #44]	; 0x2c
 801f54a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801f54c:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 801f550:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801f554:	2bff      	cmp	r3, #255	; 0xff
 801f556:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801f55a:	9c07      	ldr	r4, [sp, #28]
 801f55c:	fb09 fc0c 	mul.w	ip, r9, ip
 801f560:	fb01 cc0e 	mla	ip, r1, lr, ip
 801f564:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801f568:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801f56a:	fb00 cc0e 	mla	ip, r0, lr, ip
 801f56e:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801f572:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801f574:	fb0a cc0e 	mla	ip, sl, lr, ip
 801f578:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801f57c:	fb09 f90e 	mul.w	r9, r9, lr
 801f580:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f584:	fb01 9202 	mla	r2, r1, r2, r9
 801f588:	9907      	ldr	r1, [sp, #28]
 801f58a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f58e:	f401 4b7f 	and.w	fp, r1, #65280	; 0xff00
 801f592:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801f594:	fb00 220b 	mla	r2, r0, fp, r2
 801f598:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 801f59c:	fb0a 2a00 	mla	sl, sl, r0, r2
 801f5a0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f5a4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f5a8:	ea4c 0c0a 	orr.w	ip, ip, sl
 801f5ac:	fa5f f08c 	uxtb.w	r0, ip
 801f5b0:	f3cc 2107 	ubfx	r1, ip, #8, #8
 801f5b4:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801f5b8:	f000 80a2 	beq.w	801f700 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 801f5bc:	43db      	mvns	r3, r3
 801f5be:	783a      	ldrb	r2, [r7, #0]
 801f5c0:	f897 a002 	ldrb.w	sl, [r7, #2]
 801f5c4:	b2db      	uxtb	r3, r3
 801f5c6:	fb02 fe03 	mul.w	lr, r2, r3
 801f5ca:	fb0a fa03 	mul.w	sl, sl, r3
 801f5ce:	f10e 0201 	add.w	r2, lr, #1
 801f5d2:	eb02 221e 	add.w	r2, r2, lr, lsr #8
 801f5d6:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801f5da:	703a      	strb	r2, [r7, #0]
 801f5dc:	787a      	ldrb	r2, [r7, #1]
 801f5de:	fb02 f003 	mul.w	r0, r2, r3
 801f5e2:	f10a 0301 	add.w	r3, sl, #1
 801f5e6:	1c42      	adds	r2, r0, #1
 801f5e8:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 801f5ec:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801f5f0:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801f5f4:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801f5f8:	707a      	strb	r2, [r7, #1]
 801f5fa:	f887 c002 	strb.w	ip, [r7, #2]
 801f5fe:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801f600:	3703      	adds	r7, #3
 801f602:	f108 38ff 	add.w	r8, r8, #4294967295
 801f606:	441d      	add	r5, r3
 801f608:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f60a:	441e      	add	r6, r3
 801f60c:	e6ab      	b.n	801f366 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801f60e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801f610:	441d      	add	r5, r3
 801f612:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f614:	441e      	add	r6, r3
 801f616:	9b06      	ldr	r3, [sp, #24]
 801f618:	3b01      	subs	r3, #1
 801f61a:	9306      	str	r3, [sp, #24]
 801f61c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f61e:	3303      	adds	r3, #3
 801f620:	9309      	str	r3, [sp, #36]	; 0x24
 801f622:	e680      	b.n	801f326 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801f624:	d024      	beq.n	801f670 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 801f626:	9b06      	ldr	r3, [sp, #24]
 801f628:	9825      	ldr	r0, [sp, #148]	; 0x94
 801f62a:	3b01      	subs	r3, #1
 801f62c:	fb00 5003 	mla	r0, r0, r3, r5
 801f630:	1400      	asrs	r0, r0, #16
 801f632:	f53f ae95 	bmi.w	801f360 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801f636:	3901      	subs	r1, #1
 801f638:	4288      	cmp	r0, r1
 801f63a:	f6bf ae91 	bge.w	801f360 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801f63e:	9926      	ldr	r1, [sp, #152]	; 0x98
 801f640:	fb01 6303 	mla	r3, r1, r3, r6
 801f644:	141b      	asrs	r3, r3, #16
 801f646:	f53f ae8b 	bmi.w	801f360 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801f64a:	3a01      	subs	r2, #1
 801f64c:	4293      	cmp	r3, r2
 801f64e:	f6bf ae87 	bge.w	801f360 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801f652:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f654:	f8dd b018 	ldr.w	fp, [sp, #24]
 801f658:	1cdf      	adds	r7, r3, #3
 801f65a:	f1bb 0f00 	cmp.w	fp, #0
 801f65e:	dc6e      	bgt.n	801f73e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 801f660:	9b06      	ldr	r3, [sp, #24]
 801f662:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801f666:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f668:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801f66c:	4423      	add	r3, r4
 801f66e:	9309      	str	r3, [sp, #36]	; 0x24
 801f670:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801f672:	2b00      	cmp	r3, #0
 801f674:	f340 81b0 	ble.w	801f9d8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 801f678:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f67c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801f67e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f682:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f686:	eef0 6a62 	vmov.f32	s13, s5
 801f68a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f68e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f692:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f696:	ee16 5a90 	vmov	r5, s13
 801f69a:	eef0 6a43 	vmov.f32	s13, s6
 801f69e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f6a2:	ee16 6a90 	vmov	r6, s13
 801f6a6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f6aa:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f6ae:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f6b2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f6b6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f6ba:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f6be:	ee12 2a90 	vmov	r2, s5
 801f6c2:	eef0 2a47 	vmov.f32	s5, s14
 801f6c6:	fb92 f3f3 	sdiv	r3, r2, r3
 801f6ca:	ee13 2a10 	vmov	r2, s6
 801f6ce:	9325      	str	r3, [sp, #148]	; 0x94
 801f6d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801f6d2:	eeb0 3a67 	vmov.f32	s6, s15
 801f6d6:	fb92 f3f3 	sdiv	r3, r2, r3
 801f6da:	9326      	str	r3, [sp, #152]	; 0x98
 801f6dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801f6de:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801f6e0:	3b01      	subs	r3, #1
 801f6e2:	9315      	str	r3, [sp, #84]	; 0x54
 801f6e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801f6e6:	bf08      	it	eq
 801f6e8:	4613      	moveq	r3, r2
 801f6ea:	9306      	str	r3, [sp, #24]
 801f6ec:	e60d      	b.n	801f30a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801f6ee:	2800      	cmp	r0, #0
 801f6f0:	f43f ae7d 	beq.w	801f3ee <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 801f6f4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801f6f8:	9307      	str	r3, [sp, #28]
 801f6fa:	0e1b      	lsrs	r3, r3, #24
 801f6fc:	930f      	str	r3, [sp, #60]	; 0x3c
 801f6fe:	e676      	b.n	801f3ee <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 801f700:	7038      	strb	r0, [r7, #0]
 801f702:	7079      	strb	r1, [r7, #1]
 801f704:	e779      	b.n	801f5fa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801f706:	f112 0901 	adds.w	r9, r2, #1
 801f70a:	f53f af78 	bmi.w	801f5fe <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801f70e:	454b      	cmp	r3, r9
 801f710:	f6ff af75 	blt.w	801f5fe <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801f714:	f11c 0901 	adds.w	r9, ip, #1
 801f718:	f53f af71 	bmi.w	801f5fe <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801f71c:	45ce      	cmp	lr, r9
 801f71e:	f6ff af6e 	blt.w	801f5fe <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801f722:	b21b      	sxth	r3, r3
 801f724:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 801f728:	fa0f f28e 	sxth.w	r2, lr
 801f72c:	e9cd 1003 	strd	r1, r0, [sp, #12]
 801f730:	9200      	str	r2, [sp, #0]
 801f732:	4639      	mov	r1, r7
 801f734:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f736:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801f738:	f7ff fca1 	bl	801f07e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 801f73c:	e75f      	b.n	801f5fe <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801f73e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801f740:	1429      	asrs	r1, r5, #16
 801f742:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801f744:	f3c5 3203 	ubfx	r2, r5, #12, #4
 801f748:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 801f74c:	1433      	asrs	r3, r6, #16
 801f74e:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801f752:	fb0c 1303 	mla	r3, ip, r3, r1
 801f756:	990e      	ldr	r1, [sp, #56]	; 0x38
 801f758:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801f75c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801f760:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801f764:	2a00      	cmp	r2, #0
 801f766:	f000 8129 	beq.w	801f9bc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 801f76a:	684c      	ldr	r4, [r1, #4]
 801f76c:	940c      	str	r4, [sp, #48]	; 0x30
 801f76e:	0e24      	lsrs	r4, r4, #24
 801f770:	9413      	str	r4, [sp, #76]	; 0x4c
 801f772:	b198      	cbz	r0, 801f79c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 801f774:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
 801f778:	f10c 3cff 	add.w	ip, ip, #4294967295
 801f77c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 801f780:	f10c 0c04 	add.w	ip, ip, #4
 801f784:	eb01 080c 	add.w	r8, r1, ip
 801f788:	f851 100c 	ldr.w	r1, [r1, ip]
 801f78c:	9108      	str	r1, [sp, #32]
 801f78e:	0e09      	lsrs	r1, r1, #24
 801f790:	9110      	str	r1, [sp, #64]	; 0x40
 801f792:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801f796:	910d      	str	r1, [sp, #52]	; 0x34
 801f798:	0e09      	lsrs	r1, r1, #24
 801f79a:	9114      	str	r1, [sp, #80]	; 0x50
 801f79c:	b292      	uxth	r2, r2
 801f79e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801f7a0:	b280      	uxth	r0, r0
 801f7a2:	fb02 f900 	mul.w	r9, r2, r0
 801f7a6:	0112      	lsls	r2, r2, #4
 801f7a8:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801f7ac:	eba2 0809 	sub.w	r8, r2, r9
 801f7b0:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 801f7b4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801f7b6:	b280      	uxth	r0, r0
 801f7b8:	fa1f f888 	uxth.w	r8, r8
 801f7bc:	1a09      	subs	r1, r1, r0
 801f7be:	fb08 f202 	mul.w	r2, r8, r2
 801f7c2:	b289      	uxth	r1, r1
 801f7c4:	fb01 220e 	mla	r2, r1, lr, r2
 801f7c8:	fb00 2204 	mla	r2, r0, r4, r2
 801f7cc:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f7ce:	fb09 2204 	mla	r2, r9, r4, r2
 801f7d2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801f7d6:	2a00      	cmp	r2, #0
 801f7d8:	f000 80e8 	beq.w	801f9ac <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d0>
 801f7dc:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801f7e0:	d01b      	beq.n	801f81a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53e>
 801f7e2:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801f7e6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f7ea:	fb0e fa0a 	mul.w	sl, lr, sl
 801f7ee:	fb0e fe03 	mul.w	lr, lr, r3
 801f7f2:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801f7f6:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801f7fa:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801f7fe:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801f802:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801f806:	4453      	add	r3, sl
 801f808:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f80c:	0a1b      	lsrs	r3, r3, #8
 801f80e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801f812:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801f816:	ea43 030c 	orr.w	r3, r3, ip
 801f81a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f81c:	2cff      	cmp	r4, #255	; 0xff
 801f81e:	d021      	beq.n	801f864 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x588>
 801f820:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801f822:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801f826:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f828:	fb04 fc0c 	mul.w	ip, r4, ip
 801f82c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801f82e:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801f832:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801f836:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f838:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801f83c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f840:	fb04 fa0a 	mul.w	sl, r4, sl
 801f844:	44e6      	add	lr, ip
 801f846:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801f84a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f84e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801f852:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f856:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f85a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f85e:	ea4e 040a 	orr.w	r4, lr, sl
 801f862:	940c      	str	r4, [sp, #48]	; 0x30
 801f864:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801f866:	2cff      	cmp	r4, #255	; 0xff
 801f868:	d021      	beq.n	801f8ae <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d2>
 801f86a:	9c08      	ldr	r4, [sp, #32]
 801f86c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801f870:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801f872:	fb04 fc0c 	mul.w	ip, r4, ip
 801f876:	9c08      	ldr	r4, [sp, #32]
 801f878:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801f87c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801f87e:	fb04 fa0e 	mul.w	sl, r4, lr
 801f882:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801f886:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801f88a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f88e:	44e6      	add	lr, ip
 801f890:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801f894:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801f898:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f89c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f8a0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f8a4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f8a8:	ea4e 040a 	orr.w	r4, lr, sl
 801f8ac:	9408      	str	r4, [sp, #32]
 801f8ae:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f8b0:	2cff      	cmp	r4, #255	; 0xff
 801f8b2:	d021      	beq.n	801f8f8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
 801f8b4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801f8b6:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801f8ba:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f8bc:	fb04 fc0c 	mul.w	ip, r4, ip
 801f8c0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801f8c2:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801f8c6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801f8ca:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f8cc:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801f8d0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f8d4:	fb04 fa0a 	mul.w	sl, r4, sl
 801f8d8:	44e6      	add	lr, ip
 801f8da:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801f8de:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f8e2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801f8e6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f8ea:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f8ee:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f8f2:	ea4e 040a 	orr.w	r4, lr, sl
 801f8f6:	940d      	str	r4, [sp, #52]	; 0x34
 801f8f8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801f8fa:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801f8fe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f902:	2aff      	cmp	r2, #255	; 0xff
 801f904:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801f908:	9c08      	ldr	r4, [sp, #32]
 801f90a:	fb08 fc0c 	mul.w	ip, r8, ip
 801f90e:	fb01 cc0e 	mla	ip, r1, lr, ip
 801f912:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801f916:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801f918:	fb00 cc0e 	mla	ip, r0, lr, ip
 801f91c:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801f920:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801f922:	fb09 cc0e 	mla	ip, r9, lr, ip
 801f926:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801f92a:	fb08 f80e 	mul.w	r8, r8, lr
 801f92e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f932:	fb01 8303 	mla	r3, r1, r3, r8
 801f936:	9908      	ldr	r1, [sp, #32]
 801f938:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f93c:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 801f940:	990d      	ldr	r1, [sp, #52]	; 0x34
 801f942:	fb00 330a 	mla	r3, r0, sl, r3
 801f946:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 801f94a:	fb09 3e0e 	mla	lr, r9, lr, r3
 801f94e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f952:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801f956:	ea4c 0c0e 	orr.w	ip, ip, lr
 801f95a:	fa5f f08c 	uxtb.w	r0, ip
 801f95e:	f3cc 2107 	ubfx	r1, ip, #8, #8
 801f962:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801f966:	d032      	beq.n	801f9ce <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 801f968:	43d2      	mvns	r2, r2
 801f96a:	f817 ec03 	ldrb.w	lr, [r7, #-3]
 801f96e:	b2d2      	uxtb	r2, r2
 801f970:	fb0e fe02 	mul.w	lr, lr, r2
 801f974:	f10e 0301 	add.w	r3, lr, #1
 801f978:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 801f97c:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801f980:	f817 0c02 	ldrb.w	r0, [r7, #-2]
 801f984:	4350      	muls	r0, r2
 801f986:	f807 3c03 	strb.w	r3, [r7, #-3]
 801f98a:	1c43      	adds	r3, r0, #1
 801f98c:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801f990:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801f994:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 801f998:	4353      	muls	r3, r2
 801f99a:	f807 1c02 	strb.w	r1, [r7, #-2]
 801f99e:	1c5a      	adds	r2, r3, #1
 801f9a0:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801f9a4:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 801f9a8:	f807 cc01 	strb.w	ip, [r7, #-1]
 801f9ac:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801f9ae:	3703      	adds	r7, #3
 801f9b0:	f10b 3bff 	add.w	fp, fp, #4294967295
 801f9b4:	441d      	add	r5, r3
 801f9b6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f9b8:	441e      	add	r6, r3
 801f9ba:	e64e      	b.n	801f65a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 801f9bc:	2800      	cmp	r0, #0
 801f9be:	f43f aeed 	beq.w	801f79c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 801f9c2:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 801f9c6:	9108      	str	r1, [sp, #32]
 801f9c8:	0e09      	lsrs	r1, r1, #24
 801f9ca:	9110      	str	r1, [sp, #64]	; 0x40
 801f9cc:	e6e6      	b.n	801f79c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 801f9ce:	f807 0c03 	strb.w	r0, [r7, #-3]
 801f9d2:	f807 1c02 	strb.w	r1, [r7, #-2]
 801f9d6:	e7e7      	b.n	801f9a8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6cc>
 801f9d8:	b019      	add	sp, #100	; 0x64
 801f9da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801f9e0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 801f9e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f9e4:	e9dd 400b 	ldrd	r4, r0, [sp, #44]	; 0x2c
 801f9e8:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 801f9ec:	2c00      	cmp	r4, #0
 801f9ee:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 801f9f2:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 801f9f6:	fb00 4e03 	mla	lr, r0, r3, r4
 801f9fa:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
 801f9fe:	f2c0 80b8 	blt.w	801fb72 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 801fa02:	45a1      	cmp	r9, r4
 801fa04:	f340 80b5 	ble.w	801fb72 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 801fa08:	2800      	cmp	r0, #0
 801fa0a:	f2c0 80b2 	blt.w	801fb72 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 801fa0e:	4580      	cmp	r8, r0
 801fa10:	f340 80af 	ble.w	801fb72 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 801fa14:	ea4f 055e 	mov.w	r5, lr, lsr #1
 801fa18:	f01e 0f01 	tst.w	lr, #1
 801fa1c:	5d56      	ldrb	r6, [r2, r5]
 801fa1e:	bf0c      	ite	eq
 801fa20:	f006 060f 	andeq.w	r6, r6, #15
 801fa24:	1136      	asrne	r6, r6, #4
 801fa26:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 801fa2a:	b2f6      	uxtb	r6, r6
 801fa2c:	f114 0a01 	adds.w	sl, r4, #1
 801fa30:	f100 80a1 	bmi.w	801fb76 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 801fa34:	45d1      	cmp	r9, sl
 801fa36:	f340 809e 	ble.w	801fb76 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 801fa3a:	2800      	cmp	r0, #0
 801fa3c:	f2c0 809b 	blt.w	801fb76 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 801fa40:	4580      	cmp	r8, r0
 801fa42:	f340 8098 	ble.w	801fb76 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 801fa46:	2f00      	cmp	r7, #0
 801fa48:	f000 8097 	beq.w	801fb7a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19a>
 801fa4c:	f10e 0b01 	add.w	fp, lr, #1
 801fa50:	ea4f 055b 	mov.w	r5, fp, lsr #1
 801fa54:	f01b 0f01 	tst.w	fp, #1
 801fa58:	5d55      	ldrb	r5, [r2, r5]
 801fa5a:	bf0c      	ite	eq
 801fa5c:	f005 050f 	andeq.w	r5, r5, #15
 801fa60:	112d      	asrne	r5, r5, #4
 801fa62:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 801fa66:	b2ed      	uxtb	r5, r5
 801fa68:	f1bc 0f00 	cmp.w	ip, #0
 801fa6c:	f000 8089 	beq.w	801fb82 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a2>
 801fa70:	2c00      	cmp	r4, #0
 801fa72:	f100 0001 	add.w	r0, r0, #1
 801fa76:	f2c0 8082 	blt.w	801fb7e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 801fa7a:	45a1      	cmp	r9, r4
 801fa7c:	dd7f      	ble.n	801fb7e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 801fa7e:	2800      	cmp	r0, #0
 801fa80:	db7d      	blt.n	801fb7e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 801fa82:	4580      	cmp	r8, r0
 801fa84:	dd7b      	ble.n	801fb7e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 801fa86:	eb03 0b0e 	add.w	fp, r3, lr
 801fa8a:	ea4f 045b 	mov.w	r4, fp, lsr #1
 801fa8e:	f01b 0f01 	tst.w	fp, #1
 801fa92:	5d14      	ldrb	r4, [r2, r4]
 801fa94:	bf0c      	ite	eq
 801fa96:	f004 040f 	andeq.w	r4, r4, #15
 801fa9a:	1124      	asrne	r4, r4, #4
 801fa9c:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801faa0:	b2e4      	uxtb	r4, r4
 801faa2:	f1ba 0f00 	cmp.w	sl, #0
 801faa6:	db6f      	blt.n	801fb88 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 801faa8:	45d1      	cmp	r9, sl
 801faaa:	dd6d      	ble.n	801fb88 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 801faac:	2800      	cmp	r0, #0
 801faae:	db6b      	blt.n	801fb88 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 801fab0:	4580      	cmp	r8, r0
 801fab2:	dd69      	ble.n	801fb88 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 801fab4:	2f00      	cmp	r7, #0
 801fab6:	d069      	beq.n	801fb8c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ac>
 801fab8:	3301      	adds	r3, #1
 801faba:	449e      	add	lr, r3
 801fabc:	ea4f 035e 	mov.w	r3, lr, lsr #1
 801fac0:	f01e 0f01 	tst.w	lr, #1
 801fac4:	5cd0      	ldrb	r0, [r2, r3]
 801fac6:	bf0c      	ite	eq
 801fac8:	f000 000f 	andeq.w	r0, r0, #15
 801facc:	1100      	asrne	r0, r0, #4
 801face:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801fad2:	b2c3      	uxtb	r3, r0
 801fad4:	b2ba      	uxth	r2, r7
 801fad6:	fa1f fc8c 	uxth.w	ip, ip
 801fada:	fb02 f00c 	mul.w	r0, r2, ip
 801fade:	0112      	lsls	r2, r2, #4
 801fae0:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 801fae4:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 801fae8:	1a12      	subs	r2, r2, r0
 801faea:	fa1f fc8c 	uxth.w	ip, ip
 801faee:	b292      	uxth	r2, r2
 801faf0:	eba7 070c 	sub.w	r7, r7, ip
 801faf4:	436a      	muls	r2, r5
 801faf6:	b2bf      	uxth	r7, r7
 801faf8:	fb06 2207 	mla	r2, r6, r7, r2
 801fafc:	fb0c 2404 	mla	r4, ip, r4, r2
 801fb00:	fb00 4303 	mla	r3, r0, r3, r4
 801fb04:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801fb08:	b38b      	cbz	r3, 801fb6e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x18e>
 801fb0a:	4a21      	ldr	r2, [pc, #132]	; (801fb90 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b0>)
 801fb0c:	6814      	ldr	r4, [r2, #0]
 801fb0e:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 801fb12:	b2e5      	uxtb	r5, r4
 801fb14:	4353      	muls	r3, r2
 801fb16:	1c5a      	adds	r2, r3, #1
 801fb18:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801fb1c:	1212      	asrs	r2, r2, #8
 801fb1e:	b290      	uxth	r0, r2
 801fb20:	43d2      	mvns	r2, r2
 801fb22:	fb15 f500 	smulbb	r5, r5, r0
 801fb26:	b2d3      	uxtb	r3, r2
 801fb28:	780a      	ldrb	r2, [r1, #0]
 801fb2a:	fb02 5203 	mla	r2, r2, r3, r5
 801fb2e:	b292      	uxth	r2, r2
 801fb30:	1c55      	adds	r5, r2, #1
 801fb32:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 801fb36:	784d      	ldrb	r5, [r1, #1]
 801fb38:	fb15 f503 	smulbb	r5, r5, r3
 801fb3c:	1212      	asrs	r2, r2, #8
 801fb3e:	700a      	strb	r2, [r1, #0]
 801fb40:	f3c4 2207 	ubfx	r2, r4, #8, #8
 801fb44:	f3c4 4407 	ubfx	r4, r4, #16, #8
 801fb48:	fb02 5200 	mla	r2, r2, r0, r5
 801fb4c:	b292      	uxth	r2, r2
 801fb4e:	1c55      	adds	r5, r2, #1
 801fb50:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 801fb54:	1212      	asrs	r2, r2, #8
 801fb56:	704a      	strb	r2, [r1, #1]
 801fb58:	788a      	ldrb	r2, [r1, #2]
 801fb5a:	fb12 f303 	smulbb	r3, r2, r3
 801fb5e:	fb04 3300 	mla	r3, r4, r0, r3
 801fb62:	b29b      	uxth	r3, r3
 801fb64:	1c5a      	adds	r2, r3, #1
 801fb66:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801fb6a:	121b      	asrs	r3, r3, #8
 801fb6c:	708b      	strb	r3, [r1, #2]
 801fb6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fb72:	2600      	movs	r6, #0
 801fb74:	e75a      	b.n	801fa2c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x4c>
 801fb76:	2500      	movs	r5, #0
 801fb78:	e776      	b.n	801fa68 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 801fb7a:	463d      	mov	r5, r7
 801fb7c:	e774      	b.n	801fa68 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 801fb7e:	2400      	movs	r4, #0
 801fb80:	e78f      	b.n	801faa2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xc2>
 801fb82:	4663      	mov	r3, ip
 801fb84:	4664      	mov	r4, ip
 801fb86:	e7a5      	b.n	801fad4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 801fb88:	2300      	movs	r3, #0
 801fb8a:	e7a3      	b.n	801fad4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 801fb8c:	463b      	mov	r3, r7
 801fb8e:	e7a1      	b.n	801fad4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 801fb90:	240069ac 	.word	0x240069ac

0801fb94 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fb94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fb98:	b097      	sub	sp, #92	; 0x5c
 801fb9a:	9214      	str	r2, [sp, #80]	; 0x50
 801fb9c:	9309      	str	r3, [sp, #36]	; 0x24
 801fb9e:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801fba0:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 801fba4:	9015      	str	r0, [sp, #84]	; 0x54
 801fba6:	910c      	str	r1, [sp, #48]	; 0x30
 801fba8:	6850      	ldr	r0, [r2, #4]
 801fbaa:	930e      	str	r3, [sp, #56]	; 0x38
 801fbac:	6812      	ldr	r2, [r2, #0]
 801fbae:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 801fbb2:	e9dd 5621 	ldrd	r5, r6, [sp, #132]	; 0x84
 801fbb6:	fb00 1303 	mla	r3, r0, r3, r1
 801fbba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801fbbe:	eb02 0a03 	add.w	sl, r2, r3
 801fbc2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801fbc4:	689b      	ldr	r3, [r3, #8]
 801fbc6:	3301      	adds	r3, #1
 801fbc8:	f023 0301 	bic.w	r3, r3, #1
 801fbcc:	930f      	str	r3, [sp, #60]	; 0x3c
 801fbce:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801fbd0:	681f      	ldr	r7, [r3, #0]
 801fbd2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801fbd4:	2b00      	cmp	r3, #0
 801fbd6:	dc03      	bgt.n	801fbe0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801fbd8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801fbda:	2b00      	cmp	r3, #0
 801fbdc:	f340 8247 	ble.w	802006e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 801fbe0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801fbe2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801fbe6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801fbea:	1e48      	subs	r0, r1, #1
 801fbec:	f102 3cff 	add.w	ip, r2, #4294967295
 801fbf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fbf2:	2b00      	cmp	r3, #0
 801fbf4:	f340 80e5 	ble.w	801fdc2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 801fbf8:	ea5f 4e25 	movs.w	lr, r5, asr #16
 801fbfc:	ea4f 4326 	mov.w	r3, r6, asr #16
 801fc00:	d406      	bmi.n	801fc10 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801fc02:	4586      	cmp	lr, r0
 801fc04:	da04      	bge.n	801fc10 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801fc06:	2b00      	cmp	r3, #0
 801fc08:	db02      	blt.n	801fc10 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801fc0a:	4563      	cmp	r3, ip
 801fc0c:	f2c0 80da 	blt.w	801fdc4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 801fc10:	f11e 0e01 	adds.w	lr, lr, #1
 801fc14:	f100 80cb 	bmi.w	801fdae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 801fc18:	4571      	cmp	r1, lr
 801fc1a:	f2c0 80c8 	blt.w	801fdae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 801fc1e:	3301      	adds	r3, #1
 801fc20:	f100 80c5 	bmi.w	801fdae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 801fc24:	429a      	cmp	r2, r3
 801fc26:	f2c0 80c2 	blt.w	801fdae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 801fc2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fc2c:	46d0      	mov	r8, sl
 801fc2e:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 801fc32:	930d      	str	r3, [sp, #52]	; 0x34
 801fc34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801fc36:	2b00      	cmp	r3, #0
 801fc38:	f340 80e3 	ble.w	801fe02 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 801fc3c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801fc3e:	1430      	asrs	r0, r6, #16
 801fc40:	f3c5 3203 	ubfx	r2, r5, #12, #4
 801fc44:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801fc48:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 801fc4c:	142b      	asrs	r3, r5, #16
 801fc4e:	f100 812e 	bmi.w	801feae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801fc52:	f10c 3bff 	add.w	fp, ip, #4294967295
 801fc56:	455b      	cmp	r3, fp
 801fc58:	f280 8129 	bge.w	801feae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801fc5c:	2800      	cmp	r0, #0
 801fc5e:	f2c0 8126 	blt.w	801feae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801fc62:	f10e 3bff 	add.w	fp, lr, #4294967295
 801fc66:	4558      	cmp	r0, fp
 801fc68:	f280 8121 	bge.w	801feae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801fc6c:	fb00 3309 	mla	r3, r0, r9, r3
 801fc70:	0858      	lsrs	r0, r3, #1
 801fc72:	07dc      	lsls	r4, r3, #31
 801fc74:	f817 c000 	ldrb.w	ip, [r7, r0]
 801fc78:	bf54      	ite	pl
 801fc7a:	f00c 0c0f 	andpl.w	ip, ip, #15
 801fc7e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801fc82:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801fc86:	fa5f fc8c 	uxtb.w	ip, ip
 801fc8a:	2a00      	cmp	r2, #0
 801fc8c:	f000 80fe 	beq.w	801fe8c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 801fc90:	1c58      	adds	r0, r3, #1
 801fc92:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 801fc96:	07c0      	lsls	r0, r0, #31
 801fc98:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801fc9c:	bf54      	ite	pl
 801fc9e:	f00e 0e0f 	andpl.w	lr, lr, #15
 801fca2:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 801fca6:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 801fcaa:	fa5f f08e 	uxtb.w	r0, lr
 801fcae:	9010      	str	r0, [sp, #64]	; 0x40
 801fcb0:	b1d9      	cbz	r1, 801fcea <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801fcb2:	444b      	add	r3, r9
 801fcb4:	0858      	lsrs	r0, r3, #1
 801fcb6:	07dc      	lsls	r4, r3, #31
 801fcb8:	f103 0301 	add.w	r3, r3, #1
 801fcbc:	5c38      	ldrb	r0, [r7, r0]
 801fcbe:	bf54      	ite	pl
 801fcc0:	f000 000f 	andpl.w	r0, r0, #15
 801fcc4:	1100      	asrmi	r0, r0, #4
 801fcc6:	07dc      	lsls	r4, r3, #31
 801fcc8:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801fccc:	b2c0      	uxtb	r0, r0
 801fcce:	900a      	str	r0, [sp, #40]	; 0x28
 801fcd0:	ea4f 0053 	mov.w	r0, r3, lsr #1
 801fcd4:	f817 e000 	ldrb.w	lr, [r7, r0]
 801fcd8:	bf54      	ite	pl
 801fcda:	f00e 030f 	andpl.w	r3, lr, #15
 801fcde:	ea4f 132e 	movmi.w	r3, lr, asr #4
 801fce2:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801fce6:	b2db      	uxtb	r3, r3
 801fce8:	9311      	str	r3, [sp, #68]	; 0x44
 801fcea:	b292      	uxth	r2, r2
 801fcec:	b289      	uxth	r1, r1
 801fcee:	0113      	lsls	r3, r2, #4
 801fcf0:	fb02 f001 	mul.w	r0, r2, r1
 801fcf4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801fcf6:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801fcfa:	ebc0 1101 	rsb	r1, r0, r1, lsl #4
 801fcfe:	1a1b      	subs	r3, r3, r0
 801fd00:	b289      	uxth	r1, r1
 801fd02:	b29b      	uxth	r3, r3
 801fd04:	ebae 0e01 	sub.w	lr, lr, r1
 801fd08:	4353      	muls	r3, r2
 801fd0a:	fa1f fe8e 	uxth.w	lr, lr
 801fd0e:	fb0c 320e 	mla	r2, ip, lr, r3
 801fd12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fd14:	fb01 2203 	mla	r2, r1, r3, r2
 801fd18:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801fd1a:	fb00 2203 	mla	r2, r0, r3, r2
 801fd1e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801fd22:	2a00      	cmp	r2, #0
 801fd24:	d039      	beq.n	801fd9a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801fd26:	4bc7      	ldr	r3, [pc, #796]	; (8020044 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 801fd28:	6819      	ldr	r1, [r3, #0]
 801fd2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fd2c:	fa5f fc81 	uxtb.w	ip, r1
 801fd30:	435a      	muls	r2, r3
 801fd32:	1c53      	adds	r3, r2, #1
 801fd34:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801fd38:	1212      	asrs	r2, r2, #8
 801fd3a:	b290      	uxth	r0, r2
 801fd3c:	43d2      	mvns	r2, r2
 801fd3e:	fb1c fc00 	smulbb	ip, ip, r0
 801fd42:	b2d3      	uxtb	r3, r2
 801fd44:	f898 2000 	ldrb.w	r2, [r8]
 801fd48:	fb02 c203 	mla	r2, r2, r3, ip
 801fd4c:	b292      	uxth	r2, r2
 801fd4e:	f102 0c01 	add.w	ip, r2, #1
 801fd52:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801fd56:	f898 c001 	ldrb.w	ip, [r8, #1]
 801fd5a:	fb1c fc03 	smulbb	ip, ip, r3
 801fd5e:	1212      	asrs	r2, r2, #8
 801fd60:	f888 2000 	strb.w	r2, [r8]
 801fd64:	f3c1 2207 	ubfx	r2, r1, #8, #8
 801fd68:	f3c1 4107 	ubfx	r1, r1, #16, #8
 801fd6c:	fb02 c200 	mla	r2, r2, r0, ip
 801fd70:	b292      	uxth	r2, r2
 801fd72:	f102 0c01 	add.w	ip, r2, #1
 801fd76:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801fd7a:	1212      	asrs	r2, r2, #8
 801fd7c:	f888 2001 	strb.w	r2, [r8, #1]
 801fd80:	f898 2002 	ldrb.w	r2, [r8, #2]
 801fd84:	fb12 f303 	smulbb	r3, r2, r3
 801fd88:	fb01 3300 	mla	r3, r1, r0, r3
 801fd8c:	b29b      	uxth	r3, r3
 801fd8e:	1c5a      	adds	r2, r3, #1
 801fd90:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801fd94:	121b      	asrs	r3, r3, #8
 801fd96:	f888 3002 	strb.w	r3, [r8, #2]
 801fd9a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801fd9c:	f108 0803 	add.w	r8, r8, #3
 801fda0:	441d      	add	r5, r3
 801fda2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801fda4:	441e      	add	r6, r3
 801fda6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801fda8:	3b01      	subs	r3, #1
 801fdaa:	930d      	str	r3, [sp, #52]	; 0x34
 801fdac:	e742      	b.n	801fc34 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801fdae:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801fdb0:	f10a 0a03 	add.w	sl, sl, #3
 801fdb4:	441d      	add	r5, r3
 801fdb6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801fdb8:	441e      	add	r6, r3
 801fdba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fdbc:	3b01      	subs	r3, #1
 801fdbe:	9309      	str	r3, [sp, #36]	; 0x24
 801fdc0:	e716      	b.n	801fbf0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801fdc2:	d024      	beq.n	801fe0e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801fdc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fdc6:	9823      	ldr	r0, [sp, #140]	; 0x8c
 801fdc8:	3b01      	subs	r3, #1
 801fdca:	fb00 5003 	mla	r0, r0, r3, r5
 801fdce:	1400      	asrs	r0, r0, #16
 801fdd0:	f53f af2b 	bmi.w	801fc2a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801fdd4:	3901      	subs	r1, #1
 801fdd6:	4288      	cmp	r0, r1
 801fdd8:	f6bf af27 	bge.w	801fc2a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801fddc:	9924      	ldr	r1, [sp, #144]	; 0x90
 801fdde:	fb01 6303 	mla	r3, r1, r3, r6
 801fde2:	141b      	asrs	r3, r3, #16
 801fde4:	f53f af21 	bmi.w	801fc2a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801fde8:	3a01      	subs	r2, #1
 801fdea:	4293      	cmp	r3, r2
 801fdec:	f6bf af1d 	bge.w	801fc2a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801fdf0:	f10a 0e03 	add.w	lr, sl, #3
 801fdf4:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 801fdf8:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 801fdfc:	f1b8 0f00 	cmp.w	r8, #0
 801fe00:	dc76      	bgt.n	801fef0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 801fe02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fe04:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801fe08:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801fe0c:	44a2      	add	sl, r4
 801fe0e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801fe10:	2b00      	cmp	r3, #0
 801fe12:	f340 812c 	ble.w	802006e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 801fe16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801fe1a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801fe1c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fe20:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fe24:	eef0 6a62 	vmov.f32	s13, s5
 801fe28:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801fe2c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fe30:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fe34:	ee16 5a90 	vmov	r5, s13
 801fe38:	eef0 6a43 	vmov.f32	s13, s6
 801fe3c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fe40:	ee16 6a90 	vmov	r6, s13
 801fe44:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fe48:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fe4c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fe50:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fe54:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fe58:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fe5c:	ee12 2a90 	vmov	r2, s5
 801fe60:	eef0 2a47 	vmov.f32	s5, s14
 801fe64:	fb92 f3f3 	sdiv	r3, r2, r3
 801fe68:	ee13 2a10 	vmov	r2, s6
 801fe6c:	9323      	str	r3, [sp, #140]	; 0x8c
 801fe6e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801fe70:	eeb0 3a67 	vmov.f32	s6, s15
 801fe74:	fb92 f3f3 	sdiv	r3, r2, r3
 801fe78:	9324      	str	r3, [sp, #144]	; 0x90
 801fe7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801fe7c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801fe7e:	3b01      	subs	r3, #1
 801fe80:	930c      	str	r3, [sp, #48]	; 0x30
 801fe82:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801fe84:	bf08      	it	eq
 801fe86:	4613      	moveq	r3, r2
 801fe88:	9309      	str	r3, [sp, #36]	; 0x24
 801fe8a:	e6a2      	b.n	801fbd2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801fe8c:	2900      	cmp	r1, #0
 801fe8e:	f43f af2c 	beq.w	801fcea <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801fe92:	eb09 0003 	add.w	r0, r9, r3
 801fe96:	0843      	lsrs	r3, r0, #1
 801fe98:	07c0      	lsls	r0, r0, #31
 801fe9a:	5cfb      	ldrb	r3, [r7, r3]
 801fe9c:	bf54      	ite	pl
 801fe9e:	f003 030f 	andpl.w	r3, r3, #15
 801fea2:	111b      	asrmi	r3, r3, #4
 801fea4:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801fea8:	b2db      	uxtb	r3, r3
 801feaa:	930a      	str	r3, [sp, #40]	; 0x28
 801feac:	e71d      	b.n	801fcea <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801feae:	f113 0b01 	adds.w	fp, r3, #1
 801feb2:	f53f af72 	bmi.w	801fd9a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801feb6:	45dc      	cmp	ip, fp
 801feb8:	f6ff af6f 	blt.w	801fd9a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801febc:	f110 0b01 	adds.w	fp, r0, #1
 801fec0:	f53f af6b 	bmi.w	801fd9a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801fec4:	45de      	cmp	lr, fp
 801fec6:	f6ff af68 	blt.w	801fd9a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801feca:	9302      	str	r3, [sp, #8]
 801fecc:	fa0f f38e 	sxth.w	r3, lr
 801fed0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801fed2:	9301      	str	r3, [sp, #4]
 801fed4:	fa0f f38c 	sxth.w	r3, ip
 801fed8:	e9cd 0203 	strd	r0, r2, [sp, #12]
 801fedc:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801fee0:	9300      	str	r3, [sp, #0]
 801fee2:	463a      	mov	r2, r7
 801fee4:	464b      	mov	r3, r9
 801fee6:	4641      	mov	r1, r8
 801fee8:	9815      	ldr	r0, [sp, #84]	; 0x54
 801feea:	f7ff fd79 	bl	801f9e0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 801feee:	e754      	b.n	801fd9a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801fef0:	142a      	asrs	r2, r5, #16
 801fef2:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801fef6:	1433      	asrs	r3, r6, #16
 801fef8:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801fefc:	fb09 2303 	mla	r3, r9, r3, r2
 801ff00:	085a      	lsrs	r2, r3, #1
 801ff02:	07dc      	lsls	r4, r3, #31
 801ff04:	5cba      	ldrb	r2, [r7, r2]
 801ff06:	bf54      	ite	pl
 801ff08:	f002 020f 	andpl.w	r2, r2, #15
 801ff0c:	1112      	asrmi	r2, r2, #4
 801ff0e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801ff12:	b2d2      	uxtb	r2, r2
 801ff14:	2900      	cmp	r1, #0
 801ff16:	f000 8097 	beq.w	8020048 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 801ff1a:	f103 0b01 	add.w	fp, r3, #1
 801ff1e:	ea4f 0c5b 	mov.w	ip, fp, lsr #1
 801ff22:	f01b 0f01 	tst.w	fp, #1
 801ff26:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801ff2a:	bf0c      	ite	eq
 801ff2c:	f00c 0c0f 	andeq.w	ip, ip, #15
 801ff30:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 801ff34:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801ff38:	fa5f f48c 	uxtb.w	r4, ip
 801ff3c:	9412      	str	r4, [sp, #72]	; 0x48
 801ff3e:	b300      	cbz	r0, 801ff82 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 801ff40:	444b      	add	r3, r9
 801ff42:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801ff46:	07dc      	lsls	r4, r3, #31
 801ff48:	f103 0301 	add.w	r3, r3, #1
 801ff4c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801ff50:	bf54      	ite	pl
 801ff52:	f00c 0c0f 	andpl.w	ip, ip, #15
 801ff56:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801ff5a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801ff5e:	fa5f f48c 	uxtb.w	r4, ip
 801ff62:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801ff66:	940b      	str	r4, [sp, #44]	; 0x2c
 801ff68:	07dc      	lsls	r4, r3, #31
 801ff6a:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801ff6e:	bf54      	ite	pl
 801ff70:	f00c 0c0f 	andpl.w	ip, ip, #15
 801ff74:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801ff78:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801ff7c:	fa5f f38c 	uxtb.w	r3, ip
 801ff80:	9313      	str	r3, [sp, #76]	; 0x4c
 801ff82:	b289      	uxth	r1, r1
 801ff84:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801ff86:	b280      	uxth	r0, r0
 801ff88:	fb01 f300 	mul.w	r3, r1, r0
 801ff8c:	0109      	lsls	r1, r1, #4
 801ff8e:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 801ff92:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 801ff96:	1ac9      	subs	r1, r1, r3
 801ff98:	b280      	uxth	r0, r0
 801ff9a:	b289      	uxth	r1, r1
 801ff9c:	ebac 0c00 	sub.w	ip, ip, r0
 801ffa0:	4361      	muls	r1, r4
 801ffa2:	fa1f fc8c 	uxth.w	ip, ip
 801ffa6:	fb02 120c 	mla	r2, r2, ip, r1
 801ffaa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801ffac:	fb00 2001 	mla	r0, r0, r1, r2
 801ffb0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ffb2:	fb03 0302 	mla	r3, r3, r2, r0
 801ffb6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801ffba:	2b00      	cmp	r3, #0
 801ffbc:	d039      	beq.n	8020032 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801ffbe:	4a21      	ldr	r2, [pc, #132]	; (8020044 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 801ffc0:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 801ffc4:	6810      	ldr	r0, [r2, #0]
 801ffc6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ffc8:	fa5f fc80 	uxtb.w	ip, r0
 801ffcc:	4353      	muls	r3, r2
 801ffce:	1c5a      	adds	r2, r3, #1
 801ffd0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801ffd4:	121b      	asrs	r3, r3, #8
 801ffd6:	b29a      	uxth	r2, r3
 801ffd8:	43db      	mvns	r3, r3
 801ffda:	fb1c fc02 	smulbb	ip, ip, r2
 801ffde:	b2db      	uxtb	r3, r3
 801ffe0:	fb01 c103 	mla	r1, r1, r3, ip
 801ffe4:	b289      	uxth	r1, r1
 801ffe6:	f101 0c01 	add.w	ip, r1, #1
 801ffea:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 801ffee:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 801fff2:	fb1c fc03 	smulbb	ip, ip, r3
 801fff6:	1209      	asrs	r1, r1, #8
 801fff8:	f80e 1c03 	strb.w	r1, [lr, #-3]
 801fffc:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8020000:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8020004:	fb01 c102 	mla	r1, r1, r2, ip
 8020008:	b289      	uxth	r1, r1
 802000a:	f101 0c01 	add.w	ip, r1, #1
 802000e:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8020012:	1209      	asrs	r1, r1, #8
 8020014:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8020018:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 802001c:	fb11 f303 	smulbb	r3, r1, r3
 8020020:	fb00 3002 	mla	r0, r0, r2, r3
 8020024:	b280      	uxth	r0, r0
 8020026:	1c42      	adds	r2, r0, #1
 8020028:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802002c:	1200      	asrs	r0, r0, #8
 802002e:	f80e 0c01 	strb.w	r0, [lr, #-1]
 8020032:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8020034:	f10e 0e03 	add.w	lr, lr, #3
 8020038:	f108 38ff 	add.w	r8, r8, #4294967295
 802003c:	441d      	add	r5, r3
 802003e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020040:	441e      	add	r6, r3
 8020042:	e6db      	b.n	801fdfc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 8020044:	240069ac 	.word	0x240069ac
 8020048:	2800      	cmp	r0, #0
 802004a:	d09a      	beq.n	801ff82 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 802004c:	444b      	add	r3, r9
 802004e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8020052:	07db      	lsls	r3, r3, #31
 8020054:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8020058:	bf54      	ite	pl
 802005a:	f00c 0c0f 	andpl.w	ip, ip, #15
 802005e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8020062:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8020066:	fa5f f38c 	uxtb.w	r3, ip
 802006a:	930b      	str	r3, [sp, #44]	; 0x2c
 802006c:	e789      	b.n	801ff82 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 802006e:	b017      	add	sp, #92	; 0x5c
 8020070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020074 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 8020074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020078:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
 802007c:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8020080:	2d00      	cmp	r5, #0
 8020082:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8020086:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 802008a:	fb04 5e03 	mla	lr, r4, r3, r5
 802008e:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
 8020092:	f2c0 80b1 	blt.w	80201f8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8020096:	45a9      	cmp	r9, r5
 8020098:	f340 80ae 	ble.w	80201f8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 802009c:	2c00      	cmp	r4, #0
 802009e:	f2c0 80ab 	blt.w	80201f8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 80200a2:	45a0      	cmp	r8, r4
 80200a4:	f340 80a8 	ble.w	80201f8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 80200a8:	ea4f 065e 	mov.w	r6, lr, lsr #1
 80200ac:	f01e 0f01 	tst.w	lr, #1
 80200b0:	5d97      	ldrb	r7, [r2, r6]
 80200b2:	bf0c      	ite	eq
 80200b4:	f007 070f 	andeq.w	r7, r7, #15
 80200b8:	113f      	asrne	r7, r7, #4
 80200ba:	eb07 1707 	add.w	r7, r7, r7, lsl #4
 80200be:	b2ff      	uxtb	r7, r7
 80200c0:	f115 0a01 	adds.w	sl, r5, #1
 80200c4:	f100 809a 	bmi.w	80201fc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 80200c8:	45d1      	cmp	r9, sl
 80200ca:	f340 8097 	ble.w	80201fc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 80200ce:	2c00      	cmp	r4, #0
 80200d0:	f2c0 8094 	blt.w	80201fc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 80200d4:	45a0      	cmp	r8, r4
 80200d6:	f340 8091 	ble.w	80201fc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 80200da:	2800      	cmp	r0, #0
 80200dc:	f000 8090 	beq.w	8020200 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x18c>
 80200e0:	f10e 0b01 	add.w	fp, lr, #1
 80200e4:	ea4f 065b 	mov.w	r6, fp, lsr #1
 80200e8:	f01b 0f01 	tst.w	fp, #1
 80200ec:	5d96      	ldrb	r6, [r2, r6]
 80200ee:	bf0c      	ite	eq
 80200f0:	f006 060f 	andeq.w	r6, r6, #15
 80200f4:	1136      	asrne	r6, r6, #4
 80200f6:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 80200fa:	b2f6      	uxtb	r6, r6
 80200fc:	f1bc 0f00 	cmp.w	ip, #0
 8020100:	f000 8082 	beq.w	8020208 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x194>
 8020104:	2d00      	cmp	r5, #0
 8020106:	f104 0401 	add.w	r4, r4, #1
 802010a:	db7b      	blt.n	8020204 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 802010c:	45a9      	cmp	r9, r5
 802010e:	dd79      	ble.n	8020204 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8020110:	2c00      	cmp	r4, #0
 8020112:	db77      	blt.n	8020204 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8020114:	45a0      	cmp	r8, r4
 8020116:	dd75      	ble.n	8020204 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8020118:	eb03 0b0e 	add.w	fp, r3, lr
 802011c:	ea4f 055b 	mov.w	r5, fp, lsr #1
 8020120:	f01b 0f01 	tst.w	fp, #1
 8020124:	5d55      	ldrb	r5, [r2, r5]
 8020126:	bf0c      	ite	eq
 8020128:	f005 050f 	andeq.w	r5, r5, #15
 802012c:	112d      	asrne	r5, r5, #4
 802012e:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8020132:	b2ed      	uxtb	r5, r5
 8020134:	f1ba 0f00 	cmp.w	sl, #0
 8020138:	db69      	blt.n	802020e <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 802013a:	45d1      	cmp	r9, sl
 802013c:	dd67      	ble.n	802020e <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 802013e:	2c00      	cmp	r4, #0
 8020140:	db65      	blt.n	802020e <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8020142:	45a0      	cmp	r8, r4
 8020144:	dd63      	ble.n	802020e <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8020146:	2800      	cmp	r0, #0
 8020148:	d063      	beq.n	8020212 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19e>
 802014a:	3301      	adds	r3, #1
 802014c:	449e      	add	lr, r3
 802014e:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8020152:	f01e 0f01 	tst.w	lr, #1
 8020156:	5cd4      	ldrb	r4, [r2, r3]
 8020158:	bf0c      	ite	eq
 802015a:	f004 040f 	andeq.w	r4, r4, #15
 802015e:	1124      	asrne	r4, r4, #4
 8020160:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8020164:	b2e3      	uxtb	r3, r4
 8020166:	b282      	uxth	r2, r0
 8020168:	fa1f fc8c 	uxth.w	ip, ip
 802016c:	fb02 f40c 	mul.w	r4, r2, ip
 8020170:	0112      	lsls	r2, r2, #4
 8020172:	ebc4 1c0c 	rsb	ip, r4, ip, lsl #4
 8020176:	fa1f f08c 	uxth.w	r0, ip
 802017a:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 802017e:	1b12      	subs	r2, r2, r4
 8020180:	ebac 0c00 	sub.w	ip, ip, r0
 8020184:	b292      	uxth	r2, r2
 8020186:	fa1f fc8c 	uxth.w	ip, ip
 802018a:	4372      	muls	r2, r6
 802018c:	fb07 220c 	mla	r2, r7, ip, r2
 8020190:	fb00 2005 	mla	r0, r0, r5, r2
 8020194:	fb04 0303 	mla	r3, r4, r3, r0
 8020198:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802019c:	b353      	cbz	r3, 80201f4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x180>
 802019e:	4a1e      	ldr	r2, [pc, #120]	; (8020218 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>)
 80201a0:	7808      	ldrb	r0, [r1, #0]
 80201a2:	6814      	ldr	r4, [r2, #0]
 80201a4:	b29a      	uxth	r2, r3
 80201a6:	43db      	mvns	r3, r3
 80201a8:	b2e5      	uxtb	r5, r4
 80201aa:	b2db      	uxtb	r3, r3
 80201ac:	fb15 f502 	smulbb	r5, r5, r2
 80201b0:	fb00 5003 	mla	r0, r0, r3, r5
 80201b4:	b280      	uxth	r0, r0
 80201b6:	1c45      	adds	r5, r0, #1
 80201b8:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 80201bc:	784d      	ldrb	r5, [r1, #1]
 80201be:	fb15 f503 	smulbb	r5, r5, r3
 80201c2:	1200      	asrs	r0, r0, #8
 80201c4:	7008      	strb	r0, [r1, #0]
 80201c6:	f3c4 2007 	ubfx	r0, r4, #8, #8
 80201ca:	f3c4 4407 	ubfx	r4, r4, #16, #8
 80201ce:	fb00 5002 	mla	r0, r0, r2, r5
 80201d2:	b280      	uxth	r0, r0
 80201d4:	1c45      	adds	r5, r0, #1
 80201d6:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 80201da:	1200      	asrs	r0, r0, #8
 80201dc:	7048      	strb	r0, [r1, #1]
 80201de:	7888      	ldrb	r0, [r1, #2]
 80201e0:	fb10 f303 	smulbb	r3, r0, r3
 80201e4:	fb04 3202 	mla	r2, r4, r2, r3
 80201e8:	b292      	uxth	r2, r2
 80201ea:	1c53      	adds	r3, r2, #1
 80201ec:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80201f0:	1212      	asrs	r2, r2, #8
 80201f2:	708a      	strb	r2, [r1, #2]
 80201f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80201f8:	2700      	movs	r7, #0
 80201fa:	e761      	b.n	80200c0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x4c>
 80201fc:	2600      	movs	r6, #0
 80201fe:	e77d      	b.n	80200fc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 8020200:	4606      	mov	r6, r0
 8020202:	e77b      	b.n	80200fc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 8020204:	2500      	movs	r5, #0
 8020206:	e795      	b.n	8020134 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xc0>
 8020208:	4663      	mov	r3, ip
 802020a:	4665      	mov	r5, ip
 802020c:	e7ab      	b.n	8020166 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 802020e:	2300      	movs	r3, #0
 8020210:	e7a9      	b.n	8020166 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 8020212:	4603      	mov	r3, r0
 8020214:	e7a7      	b.n	8020166 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 8020216:	bf00      	nop
 8020218:	240069ac 	.word	0x240069ac

0802021c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802021c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020220:	b093      	sub	sp, #76	; 0x4c
 8020222:	461c      	mov	r4, r3
 8020224:	920c      	str	r2, [sp, #48]	; 0x30
 8020226:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8020228:	9011      	str	r0, [sp, #68]	; 0x44
 802022a:	9107      	str	r1, [sp, #28]
 802022c:	6850      	ldr	r0, [r2, #4]
 802022e:	6812      	ldr	r2, [r2, #0]
 8020230:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 8020234:	e9dd 561d 	ldrd	r5, r6, [sp, #116]	; 0x74
 8020238:	fb00 1303 	mla	r3, r0, r3, r1
 802023c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020240:	eb02 0b03 	add.w	fp, r2, r3
 8020244:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020246:	689b      	ldr	r3, [r3, #8]
 8020248:	3301      	adds	r3, #1
 802024a:	f023 0301 	bic.w	r3, r3, #1
 802024e:	9309      	str	r3, [sp, #36]	; 0x24
 8020250:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020252:	f8d3 8000 	ldr.w	r8, [r3]
 8020256:	9b07      	ldr	r3, [sp, #28]
 8020258:	2b00      	cmp	r3, #0
 802025a:	dc03      	bgt.n	8020264 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 802025c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802025e:	2b00      	cmp	r3, #0
 8020260:	f340 822b 	ble.w	80206ba <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8020264:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020266:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802026a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802026e:	1e48      	subs	r0, r1, #1
 8020270:	1e57      	subs	r7, r2, #1
 8020272:	2c00      	cmp	r4, #0
 8020274:	f340 80d7 	ble.w	8020426 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 8020278:	ea5f 4c25 	movs.w	ip, r5, asr #16
 802027c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8020280:	d406      	bmi.n	8020290 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8020282:	4584      	cmp	ip, r0
 8020284:	da04      	bge.n	8020290 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8020286:	2b00      	cmp	r3, #0
 8020288:	db02      	blt.n	8020290 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 802028a:	42bb      	cmp	r3, r7
 802028c:	f2c0 80cc 	blt.w	8020428 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8020290:	f11c 0c01 	adds.w	ip, ip, #1
 8020294:	f100 80bf 	bmi.w	8020416 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8020298:	4561      	cmp	r1, ip
 802029a:	f2c0 80bc 	blt.w	8020416 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 802029e:	3301      	adds	r3, #1
 80202a0:	f100 80b9 	bmi.w	8020416 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 80202a4:	429a      	cmp	r2, r3
 80202a6:	f2c0 80b6 	blt.w	8020416 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 80202aa:	46a2      	mov	sl, r4
 80202ac:	465f      	mov	r7, fp
 80202ae:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 80202b2:	f1ba 0f00 	cmp.w	sl, #0
 80202b6:	f340 80d4 	ble.w	8020462 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 80202ba:	f3c5 3303 	ubfx	r3, r5, #12, #4
 80202be:	1430      	asrs	r0, r6, #16
 80202c0:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80202c4:	9308      	str	r3, [sp, #32]
 80202c6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80202c8:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 80202cc:	142b      	asrs	r3, r5, #16
 80202ce:	f100 8124 	bmi.w	802051a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 80202d2:	f10c 32ff 	add.w	r2, ip, #4294967295
 80202d6:	4293      	cmp	r3, r2
 80202d8:	f280 811f 	bge.w	802051a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 80202dc:	2800      	cmp	r0, #0
 80202de:	f2c0 811c 	blt.w	802051a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 80202e2:	f10e 32ff 	add.w	r2, lr, #4294967295
 80202e6:	4290      	cmp	r0, r2
 80202e8:	f280 8117 	bge.w	802051a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 80202ec:	fb00 3309 	mla	r3, r0, r9, r3
 80202f0:	0858      	lsrs	r0, r3, #1
 80202f2:	07da      	lsls	r2, r3, #31
 80202f4:	9a08      	ldr	r2, [sp, #32]
 80202f6:	f818 c000 	ldrb.w	ip, [r8, r0]
 80202fa:	bf54      	ite	pl
 80202fc:	f00c 0c0f 	andpl.w	ip, ip, #15
 8020300:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8020304:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8020308:	fa5f fc8c 	uxtb.w	ip, ip
 802030c:	2a00      	cmp	r2, #0
 802030e:	f000 80ed 	beq.w	80204ec <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d0>
 8020312:	1c58      	adds	r0, r3, #1
 8020314:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8020318:	07c0      	lsls	r0, r0, #31
 802031a:	f818 e00e 	ldrb.w	lr, [r8, lr]
 802031e:	bf54      	ite	pl
 8020320:	f00e 0e0f 	andpl.w	lr, lr, #15
 8020324:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8020328:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 802032c:	fa5f fe8e 	uxtb.w	lr, lr
 8020330:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 8020334:	b1c9      	cbz	r1, 802036a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8020336:	444b      	add	r3, r9
 8020338:	0858      	lsrs	r0, r3, #1
 802033a:	07da      	lsls	r2, r3, #31
 802033c:	f818 0000 	ldrb.w	r0, [r8, r0]
 8020340:	bf54      	ite	pl
 8020342:	f000 000f 	andpl.w	r0, r0, #15
 8020346:	1100      	asrmi	r0, r0, #4
 8020348:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802034c:	b2c0      	uxtb	r0, r0
 802034e:	900a      	str	r0, [sp, #40]	; 0x28
 8020350:	1c58      	adds	r0, r3, #1
 8020352:	0843      	lsrs	r3, r0, #1
 8020354:	07c2      	lsls	r2, r0, #31
 8020356:	f818 3003 	ldrb.w	r3, [r8, r3]
 802035a:	bf54      	ite	pl
 802035c:	f003 030f 	andpl.w	r3, r3, #15
 8020360:	111b      	asrmi	r3, r3, #4
 8020362:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8020366:	b2db      	uxtb	r3, r3
 8020368:	930e      	str	r3, [sp, #56]	; 0x38
 802036a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 802036e:	b289      	uxth	r1, r1
 8020370:	fb02 f301 	mul.w	r3, r2, r1
 8020374:	0112      	lsls	r2, r2, #4
 8020376:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 802037a:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 802037e:	1ad2      	subs	r2, r2, r3
 8020380:	b289      	uxth	r1, r1
 8020382:	b292      	uxth	r2, r2
 8020384:	1a40      	subs	r0, r0, r1
 8020386:	fa1f fe80 	uxth.w	lr, r0
 802038a:	980d      	ldr	r0, [sp, #52]	; 0x34
 802038c:	4342      	muls	r2, r0
 802038e:	fb0c 2c0e 	mla	ip, ip, lr, r2
 8020392:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020394:	fb01 c102 	mla	r1, r1, r2, ip
 8020398:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802039a:	fb03 1302 	mla	r3, r3, r2, r1
 802039e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80203a2:	b383      	cbz	r3, 8020406 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80203a4:	4ac6      	ldr	r2, [pc, #792]	; (80206c0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 80203a6:	2bff      	cmp	r3, #255	; 0xff
 80203a8:	6812      	ldr	r2, [r2, #0]
 80203aa:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 80203ae:	f3c2 2007 	ubfx	r0, r2, #8, #8
 80203b2:	b2d2      	uxtb	r2, r2
 80203b4:	f000 80ac 	beq.w	8020510 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 80203b8:	b299      	uxth	r1, r3
 80203ba:	43db      	mvns	r3, r3
 80203bc:	f897 c000 	ldrb.w	ip, [r7]
 80203c0:	fb12 f201 	smulbb	r2, r2, r1
 80203c4:	b2db      	uxtb	r3, r3
 80203c6:	fb10 f001 	smulbb	r0, r0, r1
 80203ca:	fb0c 2203 	mla	r2, ip, r3, r2
 80203ce:	fb1e f101 	smulbb	r1, lr, r1
 80203d2:	b292      	uxth	r2, r2
 80203d4:	f102 0c01 	add.w	ip, r2, #1
 80203d8:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80203dc:	1212      	asrs	r2, r2, #8
 80203de:	703a      	strb	r2, [r7, #0]
 80203e0:	787a      	ldrb	r2, [r7, #1]
 80203e2:	fb02 0003 	mla	r0, r2, r3, r0
 80203e6:	b280      	uxth	r0, r0
 80203e8:	1c42      	adds	r2, r0, #1
 80203ea:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80203ee:	78ba      	ldrb	r2, [r7, #2]
 80203f0:	fb02 1303 	mla	r3, r2, r3, r1
 80203f4:	1200      	asrs	r0, r0, #8
 80203f6:	b29b      	uxth	r3, r3
 80203f8:	7078      	strb	r0, [r7, #1]
 80203fa:	f103 0e01 	add.w	lr, r3, #1
 80203fe:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 8020402:	121b      	asrs	r3, r3, #8
 8020404:	70bb      	strb	r3, [r7, #2]
 8020406:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8020408:	3703      	adds	r7, #3
 802040a:	f10a 3aff 	add.w	sl, sl, #4294967295
 802040e:	441d      	add	r5, r3
 8020410:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020412:	441e      	add	r6, r3
 8020414:	e74d      	b.n	80202b2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8020416:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8020418:	3c01      	subs	r4, #1
 802041a:	f10b 0b03 	add.w	fp, fp, #3
 802041e:	441d      	add	r5, r3
 8020420:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020422:	441e      	add	r6, r3
 8020424:	e725      	b.n	8020272 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8020426:	d021      	beq.n	802046c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 8020428:	1e63      	subs	r3, r4, #1
 802042a:	981f      	ldr	r0, [sp, #124]	; 0x7c
 802042c:	fb00 5003 	mla	r0, r0, r3, r5
 8020430:	1400      	asrs	r0, r0, #16
 8020432:	f53f af3a 	bmi.w	80202aa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8020436:	3901      	subs	r1, #1
 8020438:	4288      	cmp	r0, r1
 802043a:	f6bf af36 	bge.w	80202aa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802043e:	9920      	ldr	r1, [sp, #128]	; 0x80
 8020440:	fb01 6303 	mla	r3, r1, r3, r6
 8020444:	141b      	asrs	r3, r3, #16
 8020446:	f53f af30 	bmi.w	80202aa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802044a:	3a01      	subs	r2, #1
 802044c:	4293      	cmp	r3, r2
 802044e:	f6bf af2c 	bge.w	80202aa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8020452:	f10b 0c03 	add.w	ip, fp, #3
 8020456:	46a6      	mov	lr, r4
 8020458:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 802045c:	f1be 0f00 	cmp.w	lr, #0
 8020460:	dc79      	bgt.n	8020556 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 8020462:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8020466:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802046a:	44a3      	add	fp, r4
 802046c:	9b07      	ldr	r3, [sp, #28]
 802046e:	2b00      	cmp	r3, #0
 8020470:	f340 8123 	ble.w	80206ba <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8020474:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020478:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802047a:	ee30 0a04 	vadd.f32	s0, s0, s8
 802047e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020482:	eef0 6a62 	vmov.f32	s13, s5
 8020486:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802048a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802048e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020492:	ee16 5a90 	vmov	r5, s13
 8020496:	eef0 6a43 	vmov.f32	s13, s6
 802049a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802049e:	ee16 6a90 	vmov	r6, s13
 80204a2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80204a6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80204aa:	ee77 2a62 	vsub.f32	s5, s14, s5
 80204ae:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80204b2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80204b6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80204ba:	ee12 2a90 	vmov	r2, s5
 80204be:	eef0 2a47 	vmov.f32	s5, s14
 80204c2:	fb92 f3f3 	sdiv	r3, r2, r3
 80204c6:	ee13 2a10 	vmov	r2, s6
 80204ca:	931f      	str	r3, [sp, #124]	; 0x7c
 80204cc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80204ce:	eeb0 3a67 	vmov.f32	s6, s15
 80204d2:	fb92 f3f3 	sdiv	r3, r2, r3
 80204d6:	9320      	str	r3, [sp, #128]	; 0x80
 80204d8:	9b07      	ldr	r3, [sp, #28]
 80204da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80204dc:	3b01      	subs	r3, #1
 80204de:	9307      	str	r3, [sp, #28]
 80204e0:	bf08      	it	eq
 80204e2:	4614      	moveq	r4, r2
 80204e4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80204e6:	bf18      	it	ne
 80204e8:	461c      	movne	r4, r3
 80204ea:	e6b4      	b.n	8020256 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80204ec:	2900      	cmp	r1, #0
 80204ee:	f43f af3c 	beq.w	802036a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80204f2:	eb09 0003 	add.w	r0, r9, r3
 80204f6:	0843      	lsrs	r3, r0, #1
 80204f8:	07c0      	lsls	r0, r0, #31
 80204fa:	f818 3003 	ldrb.w	r3, [r8, r3]
 80204fe:	bf54      	ite	pl
 8020500:	f003 030f 	andpl.w	r3, r3, #15
 8020504:	111b      	asrmi	r3, r3, #4
 8020506:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802050a:	b2db      	uxtb	r3, r3
 802050c:	930a      	str	r3, [sp, #40]	; 0x28
 802050e:	e72c      	b.n	802036a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8020510:	703a      	strb	r2, [r7, #0]
 8020512:	7078      	strb	r0, [r7, #1]
 8020514:	f887 e002 	strb.w	lr, [r7, #2]
 8020518:	e775      	b.n	8020406 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 802051a:	1c5a      	adds	r2, r3, #1
 802051c:	f53f af73 	bmi.w	8020406 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8020520:	4594      	cmp	ip, r2
 8020522:	f6ff af70 	blt.w	8020406 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8020526:	1c42      	adds	r2, r0, #1
 8020528:	f53f af6d 	bmi.w	8020406 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 802052c:	4596      	cmp	lr, r2
 802052e:	f6ff af6a 	blt.w	8020406 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8020532:	9302      	str	r3, [sp, #8]
 8020534:	fa0f f38e 	sxth.w	r3, lr
 8020538:	9a08      	ldr	r2, [sp, #32]
 802053a:	9301      	str	r3, [sp, #4]
 802053c:	fa0f f38c 	sxth.w	r3, ip
 8020540:	9105      	str	r1, [sp, #20]
 8020542:	4639      	mov	r1, r7
 8020544:	9300      	str	r3, [sp, #0]
 8020546:	464b      	mov	r3, r9
 8020548:	e9cd 0203 	strd	r0, r2, [sp, #12]
 802054c:	4642      	mov	r2, r8
 802054e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8020550:	f7ff fd90 	bl	8020074 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 8020554:	e757      	b.n	8020406 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8020556:	142a      	asrs	r2, r5, #16
 8020558:	f3c5 3003 	ubfx	r0, r5, #12, #4
 802055c:	1433      	asrs	r3, r6, #16
 802055e:	f3c6 3703 	ubfx	r7, r6, #12, #4
 8020562:	fb09 2303 	mla	r3, r9, r3, r2
 8020566:	085a      	lsrs	r2, r3, #1
 8020568:	07d9      	lsls	r1, r3, #31
 802056a:	f818 2002 	ldrb.w	r2, [r8, r2]
 802056e:	bf54      	ite	pl
 8020570:	f002 020f 	andpl.w	r2, r2, #15
 8020574:	1112      	asrmi	r2, r2, #4
 8020576:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802057a:	b2d2      	uxtb	r2, r2
 802057c:	2800      	cmp	r0, #0
 802057e:	f000 8085 	beq.w	802068c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 8020582:	f103 0a01 	add.w	sl, r3, #1
 8020586:	ea4f 015a 	mov.w	r1, sl, lsr #1
 802058a:	f01a 0f01 	tst.w	sl, #1
 802058e:	f818 1001 	ldrb.w	r1, [r8, r1]
 8020592:	bf0c      	ite	eq
 8020594:	f001 010f 	andeq.w	r1, r1, #15
 8020598:	1109      	asrne	r1, r1, #4
 802059a:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802059e:	b2c9      	uxtb	r1, r1
 80205a0:	910f      	str	r1, [sp, #60]	; 0x3c
 80205a2:	b1df      	cbz	r7, 80205dc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 80205a4:	444b      	add	r3, r9
 80205a6:	0859      	lsrs	r1, r3, #1
 80205a8:	f013 0f01 	tst.w	r3, #1
 80205ac:	f103 0301 	add.w	r3, r3, #1
 80205b0:	f818 1001 	ldrb.w	r1, [r8, r1]
 80205b4:	bf0c      	ite	eq
 80205b6:	f001 010f 	andeq.w	r1, r1, #15
 80205ba:	1109      	asrne	r1, r1, #4
 80205bc:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80205c0:	b2c9      	uxtb	r1, r1
 80205c2:	910b      	str	r1, [sp, #44]	; 0x2c
 80205c4:	0859      	lsrs	r1, r3, #1
 80205c6:	07db      	lsls	r3, r3, #31
 80205c8:	f818 1001 	ldrb.w	r1, [r8, r1]
 80205cc:	bf54      	ite	pl
 80205ce:	f001 010f 	andpl.w	r1, r1, #15
 80205d2:	1109      	asrmi	r1, r1, #4
 80205d4:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80205d8:	b2c9      	uxtb	r1, r1
 80205da:	9110      	str	r1, [sp, #64]	; 0x40
 80205dc:	b280      	uxth	r0, r0
 80205de:	b2bf      	uxth	r7, r7
 80205e0:	fb00 f307 	mul.w	r3, r0, r7
 80205e4:	0100      	lsls	r0, r0, #4
 80205e6:	ebc3 1707 	rsb	r7, r3, r7, lsl #4
 80205ea:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 80205ee:	1ac0      	subs	r0, r0, r3
 80205f0:	b2bf      	uxth	r7, r7
 80205f2:	b280      	uxth	r0, r0
 80205f4:	1bc9      	subs	r1, r1, r7
 80205f6:	fa1f fa81 	uxth.w	sl, r1
 80205fa:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80205fc:	4348      	muls	r0, r1
 80205fe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8020600:	fb02 020a 	mla	r2, r2, sl, r0
 8020604:	fb07 2701 	mla	r7, r7, r1, r2
 8020608:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802060a:	fb03 7302 	mla	r3, r3, r2, r7
 802060e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8020612:	b393      	cbz	r3, 802067a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8020614:	4a2a      	ldr	r2, [pc, #168]	; (80206c0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 8020616:	2bff      	cmp	r3, #255	; 0xff
 8020618:	6811      	ldr	r1, [r2, #0]
 802061a:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 802061e:	f3c1 2707 	ubfx	r7, r1, #8, #8
 8020622:	b2c9      	uxtb	r1, r1
 8020624:	d042      	beq.n	80206ac <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 8020626:	b298      	uxth	r0, r3
 8020628:	43db      	mvns	r3, r3
 802062a:	f81c 2c03 	ldrb.w	r2, [ip, #-3]
 802062e:	fb11 f100 	smulbb	r1, r1, r0
 8020632:	b2db      	uxtb	r3, r3
 8020634:	fb17 f700 	smulbb	r7, r7, r0
 8020638:	fb02 1103 	mla	r1, r2, r3, r1
 802063c:	fb1a f000 	smulbb	r0, sl, r0
 8020640:	b289      	uxth	r1, r1
 8020642:	1c4a      	adds	r2, r1, #1
 8020644:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8020648:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 802064c:	fb02 7703 	mla	r7, r2, r3, r7
 8020650:	1209      	asrs	r1, r1, #8
 8020652:	b2bf      	uxth	r7, r7
 8020654:	f80c 1c03 	strb.w	r1, [ip, #-3]
 8020658:	1c7a      	adds	r2, r7, #1
 802065a:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 802065e:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
 8020662:	fb02 0303 	mla	r3, r2, r3, r0
 8020666:	123f      	asrs	r7, r7, #8
 8020668:	b29b      	uxth	r3, r3
 802066a:	f80c 7c02 	strb.w	r7, [ip, #-2]
 802066e:	1c5a      	adds	r2, r3, #1
 8020670:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020674:	121b      	asrs	r3, r3, #8
 8020676:	f80c 3c01 	strb.w	r3, [ip, #-1]
 802067a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802067c:	f10c 0c03 	add.w	ip, ip, #3
 8020680:	f10e 3eff 	add.w	lr, lr, #4294967295
 8020684:	441d      	add	r5, r3
 8020686:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020688:	441e      	add	r6, r3
 802068a:	e6e7      	b.n	802045c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 802068c:	2f00      	cmp	r7, #0
 802068e:	d0a5      	beq.n	80205dc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8020690:	444b      	add	r3, r9
 8020692:	0859      	lsrs	r1, r3, #1
 8020694:	07db      	lsls	r3, r3, #31
 8020696:	f818 1001 	ldrb.w	r1, [r8, r1]
 802069a:	bf54      	ite	pl
 802069c:	f001 010f 	andpl.w	r1, r1, #15
 80206a0:	1109      	asrmi	r1, r1, #4
 80206a2:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80206a6:	b2c9      	uxtb	r1, r1
 80206a8:	910b      	str	r1, [sp, #44]	; 0x2c
 80206aa:	e797      	b.n	80205dc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 80206ac:	f80c 1c03 	strb.w	r1, [ip, #-3]
 80206b0:	f80c 7c02 	strb.w	r7, [ip, #-2]
 80206b4:	f80c ac01 	strb.w	sl, [ip, #-1]
 80206b8:	e7df      	b.n	802067a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 80206ba:	b013      	add	sp, #76	; 0x4c
 80206bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80206c0:	240069ac 	.word	0x240069ac

080206c4 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>:
 80206c4:	b530      	push	{r4, r5, lr}
 80206c6:	b29d      	uxth	r5, r3
 80206c8:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80206cc:	780c      	ldrb	r4, [r1, #0]
 80206ce:	b298      	uxth	r0, r3
 80206d0:	7813      	ldrb	r3, [r2, #0]
 80206d2:	fb14 f405 	smulbb	r4, r4, r5
 80206d6:	fb13 f300 	smulbb	r3, r3, r0
 80206da:	441c      	add	r4, r3
 80206dc:	b2a4      	uxth	r4, r4
 80206de:	1c63      	adds	r3, r4, #1
 80206e0:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 80206e4:	7853      	ldrb	r3, [r2, #1]
 80206e6:	fb13 f300 	smulbb	r3, r3, r0
 80206ea:	1224      	asrs	r4, r4, #8
 80206ec:	7014      	strb	r4, [r2, #0]
 80206ee:	784c      	ldrb	r4, [r1, #1]
 80206f0:	fb14 f405 	smulbb	r4, r4, r5
 80206f4:	441c      	add	r4, r3
 80206f6:	b2a4      	uxth	r4, r4
 80206f8:	1c63      	adds	r3, r4, #1
 80206fa:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 80206fe:	1224      	asrs	r4, r4, #8
 8020700:	7054      	strb	r4, [r2, #1]
 8020702:	788b      	ldrb	r3, [r1, #2]
 8020704:	7891      	ldrb	r1, [r2, #2]
 8020706:	fb13 f305 	smulbb	r3, r3, r5
 802070a:	fb11 f000 	smulbb	r0, r1, r0
 802070e:	4403      	add	r3, r0
 8020710:	b29b      	uxth	r3, r3
 8020712:	1c59      	adds	r1, r3, #1
 8020714:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8020718:	121b      	asrs	r3, r3, #8
 802071a:	7093      	strb	r3, [r2, #2]
 802071c:	bd30      	pop	{r4, r5, pc}
	...

08020720 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 8020720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020724:	461c      	mov	r4, r3
 8020726:	b08b      	sub	sp, #44	; 0x2c
 8020728:	460e      	mov	r6, r1
 802072a:	4615      	mov	r5, r2
 802072c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802072e:	4682      	mov	sl, r0
 8020730:	6861      	ldr	r1, [r4, #4]
 8020732:	aa06      	add	r2, sp, #24
 8020734:	6820      	ldr	r0, [r4, #0]
 8020736:	2702      	movs	r7, #2
 8020738:	f89d 9054 	ldrb.w	r9, [sp, #84]	; 0x54
 802073c:	3504      	adds	r5, #4
 802073e:	c203      	stmia	r2!, {r0, r1}
 8020740:	6818      	ldr	r0, [r3, #0]
 8020742:	aa08      	add	r2, sp, #32
 8020744:	6859      	ldr	r1, [r3, #4]
 8020746:	c203      	stmia	r2!, {r0, r1}
 8020748:	a806      	add	r0, sp, #24
 802074a:	f7f4 f9e9 	bl	8014b20 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802074e:	4621      	mov	r1, r4
 8020750:	a808      	add	r0, sp, #32
 8020752:	f7f4 fa0d 	bl	8014b70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020756:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 802075a:	f9bd b026 	ldrsh.w	fp, [sp, #38]	; 0x26
 802075e:	f002 0301 	and.w	r3, r2, #1
 8020762:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 8020766:	9302      	str	r3, [sp, #8]
 8020768:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 802076c:	f003 0101 	and.w	r1, r3, #1
 8020770:	9101      	str	r1, [sp, #4]
 8020772:	9801      	ldr	r0, [sp, #4]
 8020774:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 8020778:	4403      	add	r3, r0
 802077a:	fb01 2303 	mla	r3, r1, r3, r2
 802077e:	fb93 f3f7 	sdiv	r3, r3, r7
 8020782:	441e      	add	r6, r3
 8020784:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8020788:	441a      	add	r2, r3
 802078a:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 802078e:	4419      	add	r1, r3
 8020790:	4b70      	ldr	r3, [pc, #448]	; (8020954 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x234>)
 8020792:	f8ad 2020 	strh.w	r2, [sp, #32]
 8020796:	6818      	ldr	r0, [r3, #0]
 8020798:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
 802079c:	6803      	ldr	r3, [r0, #0]
 802079e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80207a0:	4798      	blx	r3
 80207a2:	4a6d      	ldr	r2, [pc, #436]	; (8020958 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>)
 80207a4:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 80207a8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80207ac:	8813      	ldrh	r3, [r2, #0]
 80207ae:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 80207b2:	fb03 1404 	mla	r4, r3, r4, r1
 80207b6:	4611      	mov	r1, r2
 80207b8:	fb0b f303 	mul.w	r3, fp, r3
 80207bc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80207c0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80207c4:	4404      	add	r4, r0
 80207c6:	4423      	add	r3, r4
 80207c8:	d073      	beq.n	80208b2 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x192>
 80207ca:	9705      	str	r7, [sp, #20]
 80207cc:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80207d0:	9b03      	ldr	r3, [sp, #12]
 80207d2:	429c      	cmp	r4, r3
 80207d4:	f080 80b5 	bcs.w	8020942 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x222>
 80207d8:	9b02      	ldr	r3, [sp, #8]
 80207da:	b35b      	cbz	r3, 8020834 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x114>
 80207dc:	7831      	ldrb	r1, [r6, #0]
 80207de:	4622      	mov	r2, r4
 80207e0:	1c77      	adds	r7, r6, #1
 80207e2:	3403      	adds	r4, #3
 80207e4:	f001 010f 	and.w	r1, r1, #15
 80207e8:	f108 3bff 	add.w	fp, r8, #4294967295
 80207ec:	464b      	mov	r3, r9
 80207ee:	4650      	mov	r0, sl
 80207f0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80207f4:	4429      	add	r1, r5
 80207f6:	f7ff ff65 	bl	80206c4 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 80207fa:	f1bb 0f01 	cmp.w	fp, #1
 80207fe:	dd1c      	ble.n	802083a <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11a>
 8020800:	7839      	ldrb	r1, [r7, #0]
 8020802:	4622      	mov	r2, r4
 8020804:	464b      	mov	r3, r9
 8020806:	4650      	mov	r0, sl
 8020808:	0909      	lsrs	r1, r1, #4
 802080a:	f1ab 0b02 	sub.w	fp, fp, #2
 802080e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8020812:	4429      	add	r1, r5
 8020814:	f7ff ff56 	bl	80206c4 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 8020818:	f817 1b01 	ldrb.w	r1, [r7], #1
 802081c:	1ce2      	adds	r2, r4, #3
 802081e:	464b      	mov	r3, r9
 8020820:	f001 010f 	and.w	r1, r1, #15
 8020824:	4650      	mov	r0, sl
 8020826:	3406      	adds	r4, #6
 8020828:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802082c:	4429      	add	r1, r5
 802082e:	f7ff ff49 	bl	80206c4 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 8020832:	e7e2      	b.n	80207fa <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xda>
 8020834:	4637      	mov	r7, r6
 8020836:	46c3      	mov	fp, r8
 8020838:	e7df      	b.n	80207fa <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xda>
 802083a:	d10a      	bne.n	8020852 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x132>
 802083c:	7839      	ldrb	r1, [r7, #0]
 802083e:	4622      	mov	r2, r4
 8020840:	3403      	adds	r4, #3
 8020842:	464b      	mov	r3, r9
 8020844:	0909      	lsrs	r1, r1, #4
 8020846:	4650      	mov	r0, sl
 8020848:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802084c:	4429      	add	r1, r5
 802084e:	f7ff ff39 	bl	80206c4 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 8020852:	9b04      	ldr	r3, [sp, #16]
 8020854:	9a01      	ldr	r2, [sp, #4]
 8020856:	881b      	ldrh	r3, [r3, #0]
 8020858:	eba3 0308 	sub.w	r3, r3, r8
 802085c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020860:	441c      	add	r4, r3
 8020862:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8020866:	4413      	add	r3, r2
 8020868:	9a05      	ldr	r2, [sp, #20]
 802086a:	fb93 f3f2 	sdiv	r3, r3, r2
 802086e:	441e      	add	r6, r3
 8020870:	e7ae      	b.n	80207d0 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xb0>
 8020872:	4632      	mov	r2, r6
 8020874:	46c4      	mov	ip, r8
 8020876:	e037      	b.n	80208e8 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1c8>
 8020878:	d10e      	bne.n	8020898 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x178>
 802087a:	7812      	ldrb	r2, [r2, #0]
 802087c:	3003      	adds	r0, #3
 802087e:	0912      	lsrs	r2, r2, #4
 8020880:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020884:	18ac      	adds	r4, r5, r2
 8020886:	5caa      	ldrb	r2, [r5, r2]
 8020888:	f800 2c03 	strb.w	r2, [r0, #-3]
 802088c:	7862      	ldrb	r2, [r4, #1]
 802088e:	f800 2c02 	strb.w	r2, [r0, #-2]
 8020892:	78a2      	ldrb	r2, [r4, #2]
 8020894:	f800 2c01 	strb.w	r2, [r0, #-1]
 8020898:	880c      	ldrh	r4, [r1, #0]
 802089a:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 802089e:	eba4 0408 	sub.w	r4, r4, r8
 80208a2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80208a6:	4404      	add	r4, r0
 80208a8:	9801      	ldr	r0, [sp, #4]
 80208aa:	4402      	add	r2, r0
 80208ac:	fb92 f2f7 	sdiv	r2, r2, r7
 80208b0:	4416      	add	r6, r2
 80208b2:	429c      	cmp	r4, r3
 80208b4:	d245      	bcs.n	8020942 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x222>
 80208b6:	9a02      	ldr	r2, [sp, #8]
 80208b8:	2a00      	cmp	r2, #0
 80208ba:	d0da      	beq.n	8020872 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x152>
 80208bc:	7830      	ldrb	r0, [r6, #0]
 80208be:	1c72      	adds	r2, r6, #1
 80208c0:	3403      	adds	r4, #3
 80208c2:	f000 000f 	and.w	r0, r0, #15
 80208c6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80208ca:	eb05 0c00 	add.w	ip, r5, r0
 80208ce:	5c28      	ldrb	r0, [r5, r0]
 80208d0:	f804 0c03 	strb.w	r0, [r4, #-3]
 80208d4:	f89c 0001 	ldrb.w	r0, [ip, #1]
 80208d8:	f804 0c02 	strb.w	r0, [r4, #-2]
 80208dc:	f89c 0002 	ldrb.w	r0, [ip, #2]
 80208e0:	f108 3cff 	add.w	ip, r8, #4294967295
 80208e4:	f804 0c01 	strb.w	r0, [r4, #-1]
 80208e8:	f1bc 0f01 	cmp.w	ip, #1
 80208ec:	4620      	mov	r0, r4
 80208ee:	f104 0406 	add.w	r4, r4, #6
 80208f2:	ddc1      	ble.n	8020878 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x158>
 80208f4:	7810      	ldrb	r0, [r2, #0]
 80208f6:	f1ac 0c02 	sub.w	ip, ip, #2
 80208fa:	0900      	lsrs	r0, r0, #4
 80208fc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8020900:	eb05 0e00 	add.w	lr, r5, r0
 8020904:	5c28      	ldrb	r0, [r5, r0]
 8020906:	f804 0c06 	strb.w	r0, [r4, #-6]
 802090a:	f89e 0001 	ldrb.w	r0, [lr, #1]
 802090e:	f804 0c05 	strb.w	r0, [r4, #-5]
 8020912:	f89e 0002 	ldrb.w	r0, [lr, #2]
 8020916:	f804 0c04 	strb.w	r0, [r4, #-4]
 802091a:	f812 0b01 	ldrb.w	r0, [r2], #1
 802091e:	f000 000f 	and.w	r0, r0, #15
 8020922:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8020926:	eb05 0e00 	add.w	lr, r5, r0
 802092a:	5c28      	ldrb	r0, [r5, r0]
 802092c:	f804 0c03 	strb.w	r0, [r4, #-3]
 8020930:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8020934:	f804 0c02 	strb.w	r0, [r4, #-2]
 8020938:	f89e 0002 	ldrb.w	r0, [lr, #2]
 802093c:	f804 0c01 	strb.w	r0, [r4, #-1]
 8020940:	e7d2      	b.n	80208e8 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1c8>
 8020942:	4b04      	ldr	r3, [pc, #16]	; (8020954 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x234>)
 8020944:	6818      	ldr	r0, [r3, #0]
 8020946:	6803      	ldr	r3, [r0, #0]
 8020948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802094a:	4798      	blx	r3
 802094c:	b00b      	add	sp, #44	; 0x2c
 802094e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020952:	bf00      	nop
 8020954:	240069a4 	.word	0x240069a4
 8020958:	2400699e 	.word	0x2400699e

0802095c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>:
 802095c:	b530      	push	{r4, r5, lr}
 802095e:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8020962:	780d      	ldrb	r5, [r1, #0]
 8020964:	28ff      	cmp	r0, #255	; 0xff
 8020966:	d107      	bne.n	8020978 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x1c>
 8020968:	2bff      	cmp	r3, #255	; 0xff
 802096a:	d105      	bne.n	8020978 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x1c>
 802096c:	7015      	strb	r5, [r2, #0]
 802096e:	784b      	ldrb	r3, [r1, #1]
 8020970:	7053      	strb	r3, [r2, #1]
 8020972:	788b      	ldrb	r3, [r1, #2]
 8020974:	7093      	strb	r3, [r2, #2]
 8020976:	bd30      	pop	{r4, r5, pc}
 8020978:	fb10 f003 	smulbb	r0, r0, r3
 802097c:	b283      	uxth	r3, r0
 802097e:	1c58      	adds	r0, r3, #1
 8020980:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8020984:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8020988:	b284      	uxth	r4, r0
 802098a:	43c0      	mvns	r0, r0
 802098c:	fb15 f504 	smulbb	r5, r5, r4
 8020990:	b2c3      	uxtb	r3, r0
 8020992:	7810      	ldrb	r0, [r2, #0]
 8020994:	fb00 5003 	mla	r0, r0, r3, r5
 8020998:	b280      	uxth	r0, r0
 802099a:	1c45      	adds	r5, r0, #1
 802099c:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 80209a0:	7855      	ldrb	r5, [r2, #1]
 80209a2:	fb15 f503 	smulbb	r5, r5, r3
 80209a6:	1200      	asrs	r0, r0, #8
 80209a8:	7010      	strb	r0, [r2, #0]
 80209aa:	7848      	ldrb	r0, [r1, #1]
 80209ac:	fb00 5004 	mla	r0, r0, r4, r5
 80209b0:	b280      	uxth	r0, r0
 80209b2:	1c45      	adds	r5, r0, #1
 80209b4:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 80209b8:	1200      	asrs	r0, r0, #8
 80209ba:	7050      	strb	r0, [r2, #1]
 80209bc:	7888      	ldrb	r0, [r1, #2]
 80209be:	7891      	ldrb	r1, [r2, #2]
 80209c0:	fb11 f303 	smulbb	r3, r1, r3
 80209c4:	fb00 3304 	mla	r3, r0, r4, r3
 80209c8:	b29b      	uxth	r3, r3
 80209ca:	1c59      	adds	r1, r3, #1
 80209cc:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80209d0:	121b      	asrs	r3, r3, #8
 80209d2:	e7cf      	b.n	8020974 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x18>

080209d4 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 80209d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80209d8:	461d      	mov	r5, r3
 80209da:	b08f      	sub	sp, #60	; 0x3c
 80209dc:	460c      	mov	r4, r1
 80209de:	4616      	mov	r6, r2
 80209e0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80209e2:	4680      	mov	r8, r0
 80209e4:	6869      	ldr	r1, [r5, #4]
 80209e6:	aa0a      	add	r2, sp, #40	; 0x28
 80209e8:	6828      	ldr	r0, [r5, #0]
 80209ea:	3604      	adds	r6, #4
 80209ec:	f89d 9064 	ldrb.w	r9, [sp, #100]	; 0x64
 80209f0:	4f57      	ldr	r7, [pc, #348]	; (8020b50 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x17c>)
 80209f2:	c203      	stmia	r2!, {r0, r1}
 80209f4:	6818      	ldr	r0, [r3, #0]
 80209f6:	aa0c      	add	r2, sp, #48	; 0x30
 80209f8:	6859      	ldr	r1, [r3, #4]
 80209fa:	c203      	stmia	r2!, {r0, r1}
 80209fc:	a80a      	add	r0, sp, #40	; 0x28
 80209fe:	f7f4 f88f 	bl	8014b20 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020a02:	4629      	mov	r1, r5
 8020a04:	a80c      	add	r0, sp, #48	; 0x30
 8020a06:	2502      	movs	r5, #2
 8020a08:	f7f4 f8b2 	bl	8014b70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020a0c:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 8020a10:	f9bd a036 	ldrsh.w	sl, [sp, #54]	; 0x36
 8020a14:	f002 0301 	and.w	r3, r2, #1
 8020a18:	f9bd b034 	ldrsh.w	fp, [sp, #52]	; 0x34
 8020a1c:	9304      	str	r3, [sp, #16]
 8020a1e:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 8020a22:	f003 0101 	and.w	r1, r3, #1
 8020a26:	9103      	str	r1, [sp, #12]
 8020a28:	9803      	ldr	r0, [sp, #12]
 8020a2a:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	; 0x32
 8020a2e:	4403      	add	r3, r0
 8020a30:	6838      	ldr	r0, [r7, #0]
 8020a32:	fb01 2303 	mla	r3, r1, r3, r2
 8020a36:	fb93 f3f5 	sdiv	r3, r3, r5
 8020a3a:	18e5      	adds	r5, r4, r3
 8020a3c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8020a40:	441a      	add	r2, r3
 8020a42:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8020a46:	4419      	add	r1, r3
 8020a48:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8020a4c:	f8ad 1032 	strh.w	r1, [sp, #50]	; 0x32
 8020a50:	6803      	ldr	r3, [r0, #0]
 8020a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020a54:	4798      	blx	r3
 8020a56:	4a3f      	ldr	r2, [pc, #252]	; (8020b54 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x180>)
 8020a58:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	; 0x32
 8020a5c:	8813      	ldrh	r3, [r2, #0]
 8020a5e:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 8020a62:	9207      	str	r2, [sp, #28]
 8020a64:	fb03 1404 	mla	r4, r3, r4, r1
 8020a68:	fb0a f303 	mul.w	r3, sl, r3
 8020a6c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8020a70:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020a74:	4404      	add	r4, r0
 8020a76:	18e3      	adds	r3, r4, r3
 8020a78:	e9cd 3705 	strd	r3, r7, [sp, #20]
 8020a7c:	9b05      	ldr	r3, [sp, #20]
 8020a7e:	429c      	cmp	r4, r3
 8020a80:	d25d      	bcs.n	8020b3e <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x16a>
 8020a82:	9b04      	ldr	r3, [sp, #16]
 8020a84:	2b00      	cmp	r3, #0
 8020a86:	d037      	beq.n	8020af8 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x124>
 8020a88:	782b      	ldrb	r3, [r5, #0]
 8020a8a:	1c6f      	adds	r7, r5, #1
 8020a8c:	f003 030f 	and.w	r3, r3, #15
 8020a90:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8020a94:	9309      	str	r3, [sp, #36]	; 0x24
 8020a96:	0e1b      	lsrs	r3, r3, #24
 8020a98:	d006      	beq.n	8020aa8 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd4>
 8020a9a:	9300      	str	r3, [sp, #0]
 8020a9c:	4622      	mov	r2, r4
 8020a9e:	464b      	mov	r3, r9
 8020aa0:	a909      	add	r1, sp, #36	; 0x24
 8020aa2:	4640      	mov	r0, r8
 8020aa4:	f7ff ff5a 	bl	802095c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 8020aa8:	3403      	adds	r4, #3
 8020aaa:	f10b 3aff 	add.w	sl, fp, #4294967295
 8020aae:	f1ba 0f01 	cmp.w	sl, #1
 8020ab2:	dd24      	ble.n	8020afe <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12a>
 8020ab4:	783b      	ldrb	r3, [r7, #0]
 8020ab6:	091b      	lsrs	r3, r3, #4
 8020ab8:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8020abc:	9308      	str	r3, [sp, #32]
 8020abe:	0e1b      	lsrs	r3, r3, #24
 8020ac0:	d006      	beq.n	8020ad0 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xfc>
 8020ac2:	9300      	str	r3, [sp, #0]
 8020ac4:	4622      	mov	r2, r4
 8020ac6:	464b      	mov	r3, r9
 8020ac8:	a908      	add	r1, sp, #32
 8020aca:	4640      	mov	r0, r8
 8020acc:	f7ff ff46 	bl	802095c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 8020ad0:	f817 3b01 	ldrb.w	r3, [r7], #1
 8020ad4:	f003 030f 	and.w	r3, r3, #15
 8020ad8:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8020adc:	9309      	str	r3, [sp, #36]	; 0x24
 8020ade:	0e1b      	lsrs	r3, r3, #24
 8020ae0:	d006      	beq.n	8020af0 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x11c>
 8020ae2:	9300      	str	r3, [sp, #0]
 8020ae4:	1ce2      	adds	r2, r4, #3
 8020ae6:	464b      	mov	r3, r9
 8020ae8:	a909      	add	r1, sp, #36	; 0x24
 8020aea:	4640      	mov	r0, r8
 8020aec:	f7ff ff36 	bl	802095c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 8020af0:	3406      	adds	r4, #6
 8020af2:	f1aa 0a02 	sub.w	sl, sl, #2
 8020af6:	e7da      	b.n	8020aae <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xda>
 8020af8:	462f      	mov	r7, r5
 8020afa:	46da      	mov	sl, fp
 8020afc:	e7d7      	b.n	8020aae <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xda>
 8020afe:	d10e      	bne.n	8020b1e <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x14a>
 8020b00:	783b      	ldrb	r3, [r7, #0]
 8020b02:	091b      	lsrs	r3, r3, #4
 8020b04:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8020b08:	9309      	str	r3, [sp, #36]	; 0x24
 8020b0a:	0e1b      	lsrs	r3, r3, #24
 8020b0c:	d006      	beq.n	8020b1c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x148>
 8020b0e:	9300      	str	r3, [sp, #0]
 8020b10:	4622      	mov	r2, r4
 8020b12:	464b      	mov	r3, r9
 8020b14:	a909      	add	r1, sp, #36	; 0x24
 8020b16:	4640      	mov	r0, r8
 8020b18:	f7ff ff20 	bl	802095c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 8020b1c:	3403      	adds	r4, #3
 8020b1e:	9b07      	ldr	r3, [sp, #28]
 8020b20:	9a03      	ldr	r2, [sp, #12]
 8020b22:	881b      	ldrh	r3, [r3, #0]
 8020b24:	eba3 030b 	sub.w	r3, r3, fp
 8020b28:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020b2c:	441c      	add	r4, r3
 8020b2e:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 8020b32:	4413      	add	r3, r2
 8020b34:	2202      	movs	r2, #2
 8020b36:	fb93 f3f2 	sdiv	r3, r3, r2
 8020b3a:	441d      	add	r5, r3
 8020b3c:	e79e      	b.n	8020a7c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xa8>
 8020b3e:	9b06      	ldr	r3, [sp, #24]
 8020b40:	6818      	ldr	r0, [r3, #0]
 8020b42:	6803      	ldr	r3, [r0, #0]
 8020b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020b46:	4798      	blx	r3
 8020b48:	b00f      	add	sp, #60	; 0x3c
 8020b4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020b4e:	bf00      	nop
 8020b50:	240069a4 	.word	0x240069a4
 8020b54:	2400699e 	.word	0x2400699e

08020b58 <CRC_Lock>:
 8020b58:	4a20      	ldr	r2, [pc, #128]	; (8020bdc <CRC_Lock+0x84>)
 8020b5a:	b530      	push	{r4, r5, lr}
 8020b5c:	6813      	ldr	r3, [r2, #0]
 8020b5e:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8020b62:	f24c 2540 	movw	r5, #49728	; 0xc240
 8020b66:	f023 0301 	bic.w	r3, r3, #1
 8020b6a:	6013      	str	r3, [r2, #0]
 8020b6c:	4b1c      	ldr	r3, [pc, #112]	; (8020be0 <CRC_Lock+0x88>)
 8020b6e:	681a      	ldr	r2, [r3, #0]
 8020b70:	4022      	ands	r2, r4
 8020b72:	42aa      	cmp	r2, r5
 8020b74:	d005      	beq.n	8020b82 <CRC_Lock+0x2a>
 8020b76:	681b      	ldr	r3, [r3, #0]
 8020b78:	f24c 2270 	movw	r2, #49776	; 0xc270
 8020b7c:	4023      	ands	r3, r4
 8020b7e:	4293      	cmp	r3, r2
 8020b80:	d124      	bne.n	8020bcc <CRC_Lock+0x74>
 8020b82:	4b18      	ldr	r3, [pc, #96]	; (8020be4 <CRC_Lock+0x8c>)
 8020b84:	681b      	ldr	r3, [r3, #0]
 8020b86:	bb0b      	cbnz	r3, 8020bcc <CRC_Lock+0x74>
 8020b88:	4b17      	ldr	r3, [pc, #92]	; (8020be8 <CRC_Lock+0x90>)
 8020b8a:	681a      	ldr	r2, [r3, #0]
 8020b8c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8020b90:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8020b94:	d00d      	beq.n	8020bb2 <CRC_Lock+0x5a>
 8020b96:	681a      	ldr	r2, [r3, #0]
 8020b98:	f240 4483 	movw	r4, #1155	; 0x483
 8020b9c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8020ba0:	42a2      	cmp	r2, r4
 8020ba2:	d006      	beq.n	8020bb2 <CRC_Lock+0x5a>
 8020ba4:	681b      	ldr	r3, [r3, #0]
 8020ba6:	f240 4285 	movw	r2, #1157	; 0x485
 8020baa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8020bae:	4293      	cmp	r3, r2
 8020bb0:	d10c      	bne.n	8020bcc <CRC_Lock+0x74>
 8020bb2:	4b0e      	ldr	r3, [pc, #56]	; (8020bec <CRC_Lock+0x94>)
 8020bb4:	2201      	movs	r2, #1
 8020bb6:	601a      	str	r2, [r3, #0]
 8020bb8:	681a      	ldr	r2, [r3, #0]
 8020bba:	2a00      	cmp	r2, #0
 8020bbc:	d1fc      	bne.n	8020bb8 <CRC_Lock+0x60>
 8020bbe:	4b0c      	ldr	r3, [pc, #48]	; (8020bf0 <CRC_Lock+0x98>)
 8020bc0:	6018      	str	r0, [r3, #0]
 8020bc2:	6818      	ldr	r0, [r3, #0]
 8020bc4:	1a43      	subs	r3, r0, r1
 8020bc6:	4258      	negs	r0, r3
 8020bc8:	4158      	adcs	r0, r3
 8020bca:	bd30      	pop	{r4, r5, pc}
 8020bcc:	4b09      	ldr	r3, [pc, #36]	; (8020bf4 <CRC_Lock+0x9c>)
 8020bce:	2201      	movs	r2, #1
 8020bd0:	601a      	str	r2, [r3, #0]
 8020bd2:	681a      	ldr	r2, [r3, #0]
 8020bd4:	2a00      	cmp	r2, #0
 8020bd6:	d1fc      	bne.n	8020bd2 <CRC_Lock+0x7a>
 8020bd8:	4b07      	ldr	r3, [pc, #28]	; (8020bf8 <CRC_Lock+0xa0>)
 8020bda:	e7f1      	b.n	8020bc0 <CRC_Lock+0x68>
 8020bdc:	e0002000 	.word	0xe0002000
 8020be0:	e000ed00 	.word	0xe000ed00
 8020be4:	e0042000 	.word	0xe0042000
 8020be8:	5c001000 	.word	0x5c001000
 8020bec:	58024c08 	.word	0x58024c08
 8020bf0:	58024c00 	.word	0x58024c00
 8020bf4:	40023008 	.word	0x40023008
 8020bf8:	40023000 	.word	0x40023000

08020bfc <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8020bfc:	6101      	str	r1, [r0, #16]
 8020bfe:	4770      	bx	lr

08020c00 <_ZN8touchgfx8Gestures4tickEv>:
 8020c00:	7b83      	ldrb	r3, [r0, #14]
 8020c02:	b14b      	cbz	r3, 8020c18 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8020c04:	8903      	ldrh	r3, [r0, #8]
 8020c06:	3301      	adds	r3, #1
 8020c08:	b29b      	uxth	r3, r3
 8020c0a:	2b07      	cmp	r3, #7
 8020c0c:	8103      	strh	r3, [r0, #8]
 8020c0e:	bf81      	itttt	hi
 8020c10:	2300      	movhi	r3, #0
 8020c12:	8143      	strhhi	r3, [r0, #10]
 8020c14:	8183      	strhhi	r3, [r0, #12]
 8020c16:	7383      	strbhi	r3, [r0, #14]
 8020c18:	4770      	bx	lr
	...

08020c1c <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8020c1c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8020c20:	4698      	mov	r8, r3
 8020c22:	8883      	ldrh	r3, [r0, #4]
 8020c24:	4604      	mov	r4, r0
 8020c26:	4617      	mov	r7, r2
 8020c28:	f8ad 3006 	strh.w	r3, [sp, #6]
 8020c2c:	eba8 0303 	sub.w	r3, r8, r3
 8020c30:	4a19      	ldr	r2, [pc, #100]	; (8020c98 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 8020c32:	460e      	mov	r6, r1
 8020c34:	b21b      	sxth	r3, r3
 8020c36:	88c1      	ldrh	r1, [r0, #6]
 8020c38:	9200      	str	r2, [sp, #0]
 8020c3a:	2000      	movs	r0, #0
 8020c3c:	2b00      	cmp	r3, #0
 8020c3e:	8aa2      	ldrh	r2, [r4, #20]
 8020c40:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 8020c44:	bfb8      	it	lt
 8020c46:	425b      	neglt	r3, r3
 8020c48:	f88d 0004 	strb.w	r0, [sp, #4]
 8020c4c:	f8ad 1008 	strh.w	r1, [sp, #8]
 8020c50:	b21b      	sxth	r3, r3
 8020c52:	f8ad 800a 	strh.w	r8, [sp, #10]
 8020c56:	f8ad 500c 	strh.w	r5, [sp, #12]
 8020c5a:	4293      	cmp	r3, r2
 8020c5c:	dc07      	bgt.n	8020c6e <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 8020c5e:	1a69      	subs	r1, r5, r1
 8020c60:	b209      	sxth	r1, r1
 8020c62:	2900      	cmp	r1, #0
 8020c64:	bfb8      	it	lt
 8020c66:	4249      	neglt	r1, r1
 8020c68:	b209      	sxth	r1, r1
 8020c6a:	428a      	cmp	r2, r1
 8020c6c:	da10      	bge.n	8020c90 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 8020c6e:	6920      	ldr	r0, [r4, #16]
 8020c70:	4669      	mov	r1, sp
 8020c72:	eba8 0606 	sub.w	r6, r8, r6
 8020c76:	1bef      	subs	r7, r5, r7
 8020c78:	6803      	ldr	r3, [r0, #0]
 8020c7a:	685b      	ldr	r3, [r3, #4]
 8020c7c:	4798      	blx	r3
 8020c7e:	2300      	movs	r3, #0
 8020c80:	2001      	movs	r0, #1
 8020c82:	8166      	strh	r6, [r4, #10]
 8020c84:	8123      	strh	r3, [r4, #8]
 8020c86:	81a7      	strh	r7, [r4, #12]
 8020c88:	f8a4 8004 	strh.w	r8, [r4, #4]
 8020c8c:	80e5      	strh	r5, [r4, #6]
 8020c8e:	73a0      	strb	r0, [r4, #14]
 8020c90:	b004      	add	sp, #16
 8020c92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020c96:	bf00      	nop
 8020c98:	0802354c 	.word	0x0802354c

08020c9c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8020c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020c9e:	461e      	mov	r6, r3
 8020ca0:	1e4b      	subs	r3, r1, #1
 8020ca2:	b085      	sub	sp, #20
 8020ca4:	4604      	mov	r4, r0
 8020ca6:	2b01      	cmp	r3, #1
 8020ca8:	460d      	mov	r5, r1
 8020caa:	4617      	mov	r7, r2
 8020cac:	d84b      	bhi.n	8020d46 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8020cae:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8020cb2:	1cd3      	adds	r3, r2, #3
 8020cb4:	b29b      	uxth	r3, r3
 8020cb6:	2b06      	cmp	r3, #6
 8020cb8:	d916      	bls.n	8020ce8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8020cba:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 8020d5c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8020cbe:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8020cc2:	f8cd c004 	str.w	ip, [sp, #4]
 8020cc6:	f04f 0c00 	mov.w	ip, #0
 8020cca:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8020cce:	6900      	ldr	r0, [r0, #16]
 8020cd0:	f8ad 100c 	strh.w	r1, [sp, #12]
 8020cd4:	a901      	add	r1, sp, #4
 8020cd6:	f88d c008 	strb.w	ip, [sp, #8]
 8020cda:	f8ad 200a 	strh.w	r2, [sp, #10]
 8020cde:	f8ad 300e 	strh.w	r3, [sp, #14]
 8020ce2:	6803      	ldr	r3, [r0, #0]
 8020ce4:	689b      	ldr	r3, [r3, #8]
 8020ce6:	4798      	blx	r3
 8020ce8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8020cec:	1cd3      	adds	r3, r2, #3
 8020cee:	b29b      	uxth	r3, r3
 8020cf0:	2b06      	cmp	r3, #6
 8020cf2:	d916      	bls.n	8020d22 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8020cf4:	f8df c064 	ldr.w	ip, [pc, #100]	; 8020d5c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8020cf8:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8020cfc:	f8cd c004 	str.w	ip, [sp, #4]
 8020d00:	f04f 0c01 	mov.w	ip, #1
 8020d04:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8020d08:	6920      	ldr	r0, [r4, #16]
 8020d0a:	f8ad 100c 	strh.w	r1, [sp, #12]
 8020d0e:	a901      	add	r1, sp, #4
 8020d10:	f88d c008 	strb.w	ip, [sp, #8]
 8020d14:	f8ad 200a 	strh.w	r2, [sp, #10]
 8020d18:	f8ad 300e 	strh.w	r3, [sp, #14]
 8020d1c:	6803      	ldr	r3, [r0, #0]
 8020d1e:	689b      	ldr	r3, [r3, #8]
 8020d20:	4798      	blx	r3
 8020d22:	4b0d      	ldr	r3, [pc, #52]	; (8020d58 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 8020d24:	a901      	add	r1, sp, #4
 8020d26:	6920      	ldr	r0, [r4, #16]
 8020d28:	9301      	str	r3, [sp, #4]
 8020d2a:	2300      	movs	r3, #0
 8020d2c:	f88d 5008 	strb.w	r5, [sp, #8]
 8020d30:	f8ad 700a 	strh.w	r7, [sp, #10]
 8020d34:	f8ad 600c 	strh.w	r6, [sp, #12]
 8020d38:	f8ad 300e 	strh.w	r3, [sp, #14]
 8020d3c:	6803      	ldr	r3, [r0, #0]
 8020d3e:	681b      	ldr	r3, [r3, #0]
 8020d40:	4798      	blx	r3
 8020d42:	b005      	add	sp, #20
 8020d44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020d46:	2900      	cmp	r1, #0
 8020d48:	d1eb      	bne.n	8020d22 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8020d4a:	80a2      	strh	r2, [r4, #4]
 8020d4c:	80c6      	strh	r6, [r0, #6]
 8020d4e:	60a1      	str	r1, [r4, #8]
 8020d50:	81a1      	strh	r1, [r4, #12]
 8020d52:	73a1      	strb	r1, [r4, #14]
 8020d54:	e7e5      	b.n	8020d22 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8020d56:	bf00      	nop
 8020d58:	08023538 	.word	0x08023538
 8020d5c:	08023560 	.word	0x08023560

08020d60 <__aeabi_atexit>:
 8020d60:	460b      	mov	r3, r1
 8020d62:	4601      	mov	r1, r0
 8020d64:	4618      	mov	r0, r3
 8020d66:	f000 b90f 	b.w	8020f88 <__cxa_atexit>

08020d6a <_ZdlPvj>:
 8020d6a:	f000 b812 	b.w	8020d92 <_ZdlPv>

08020d6e <__cxa_guard_acquire>:
 8020d6e:	6803      	ldr	r3, [r0, #0]
 8020d70:	07db      	lsls	r3, r3, #31
 8020d72:	d406      	bmi.n	8020d82 <__cxa_guard_acquire+0x14>
 8020d74:	7843      	ldrb	r3, [r0, #1]
 8020d76:	b103      	cbz	r3, 8020d7a <__cxa_guard_acquire+0xc>
 8020d78:	deff      	udf	#255	; 0xff
 8020d7a:	2301      	movs	r3, #1
 8020d7c:	7043      	strb	r3, [r0, #1]
 8020d7e:	4618      	mov	r0, r3
 8020d80:	4770      	bx	lr
 8020d82:	2000      	movs	r0, #0
 8020d84:	4770      	bx	lr

08020d86 <__cxa_guard_release>:
 8020d86:	2301      	movs	r3, #1
 8020d88:	6003      	str	r3, [r0, #0]
 8020d8a:	4770      	bx	lr

08020d8c <__cxa_pure_virtual>:
 8020d8c:	b508      	push	{r3, lr}
 8020d8e:	f000 f80f 	bl	8020db0 <_ZSt9terminatev>

08020d92 <_ZdlPv>:
 8020d92:	f000 b845 	b.w	8020e20 <free>

08020d96 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8020d96:	b508      	push	{r3, lr}
 8020d98:	4780      	blx	r0
 8020d9a:	f000 f80e 	bl	8020dba <abort>
	...

08020da0 <_ZSt13get_terminatev>:
 8020da0:	4b02      	ldr	r3, [pc, #8]	; (8020dac <_ZSt13get_terminatev+0xc>)
 8020da2:	6818      	ldr	r0, [r3, #0]
 8020da4:	f3bf 8f5b 	dmb	ish
 8020da8:	4770      	bx	lr
 8020daa:	bf00      	nop
 8020dac:	240000ac 	.word	0x240000ac

08020db0 <_ZSt9terminatev>:
 8020db0:	b508      	push	{r3, lr}
 8020db2:	f7ff fff5 	bl	8020da0 <_ZSt13get_terminatev>
 8020db6:	f7ff ffee 	bl	8020d96 <_ZN10__cxxabiv111__terminateEPFvvE>

08020dba <abort>:
 8020dba:	b508      	push	{r3, lr}
 8020dbc:	2006      	movs	r0, #6
 8020dbe:	f000 fa39 	bl	8021234 <raise>
 8020dc2:	2001      	movs	r0, #1
 8020dc4:	f7e0 fa56 	bl	8001274 <_exit>

08020dc8 <__assert_func>:
 8020dc8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8020dca:	4614      	mov	r4, r2
 8020dcc:	461a      	mov	r2, r3
 8020dce:	4b09      	ldr	r3, [pc, #36]	; (8020df4 <__assert_func+0x2c>)
 8020dd0:	681b      	ldr	r3, [r3, #0]
 8020dd2:	4605      	mov	r5, r0
 8020dd4:	68d8      	ldr	r0, [r3, #12]
 8020dd6:	b14c      	cbz	r4, 8020dec <__assert_func+0x24>
 8020dd8:	4b07      	ldr	r3, [pc, #28]	; (8020df8 <__assert_func+0x30>)
 8020dda:	9100      	str	r1, [sp, #0]
 8020ddc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8020de0:	4906      	ldr	r1, [pc, #24]	; (8020dfc <__assert_func+0x34>)
 8020de2:	462b      	mov	r3, r5
 8020de4:	f000 f982 	bl	80210ec <fiprintf>
 8020de8:	f7ff ffe7 	bl	8020dba <abort>
 8020dec:	4b04      	ldr	r3, [pc, #16]	; (8020e00 <__assert_func+0x38>)
 8020dee:	461c      	mov	r4, r3
 8020df0:	e7f3      	b.n	8020dda <__assert_func+0x12>
 8020df2:	bf00      	nop
 8020df4:	24000108 	.word	0x24000108
 8020df8:	080237d0 	.word	0x080237d0
 8020dfc:	080237dd 	.word	0x080237dd
 8020e00:	0802380b 	.word	0x0802380b

08020e04 <atexit>:
 8020e04:	2300      	movs	r3, #0
 8020e06:	4601      	mov	r1, r0
 8020e08:	461a      	mov	r2, r3
 8020e0a:	4618      	mov	r0, r3
 8020e0c:	f000 bac0 	b.w	8021390 <__register_exitproc>

08020e10 <malloc>:
 8020e10:	4b02      	ldr	r3, [pc, #8]	; (8020e1c <malloc+0xc>)
 8020e12:	4601      	mov	r1, r0
 8020e14:	6818      	ldr	r0, [r3, #0]
 8020e16:	f000 b82b 	b.w	8020e70 <_malloc_r>
 8020e1a:	bf00      	nop
 8020e1c:	24000108 	.word	0x24000108

08020e20 <free>:
 8020e20:	4b02      	ldr	r3, [pc, #8]	; (8020e2c <free+0xc>)
 8020e22:	4601      	mov	r1, r0
 8020e24:	6818      	ldr	r0, [r3, #0]
 8020e26:	f000 bb11 	b.w	802144c <_free_r>
 8020e2a:	bf00      	nop
 8020e2c:	24000108 	.word	0x24000108

08020e30 <sbrk_aligned>:
 8020e30:	b570      	push	{r4, r5, r6, lr}
 8020e32:	4e0e      	ldr	r6, [pc, #56]	; (8020e6c <sbrk_aligned+0x3c>)
 8020e34:	460c      	mov	r4, r1
 8020e36:	6831      	ldr	r1, [r6, #0]
 8020e38:	4605      	mov	r5, r0
 8020e3a:	b911      	cbnz	r1, 8020e42 <sbrk_aligned+0x12>
 8020e3c:	f000 fa4a 	bl	80212d4 <_sbrk_r>
 8020e40:	6030      	str	r0, [r6, #0]
 8020e42:	4621      	mov	r1, r4
 8020e44:	4628      	mov	r0, r5
 8020e46:	f000 fa45 	bl	80212d4 <_sbrk_r>
 8020e4a:	1c43      	adds	r3, r0, #1
 8020e4c:	d00a      	beq.n	8020e64 <sbrk_aligned+0x34>
 8020e4e:	1cc4      	adds	r4, r0, #3
 8020e50:	f024 0403 	bic.w	r4, r4, #3
 8020e54:	42a0      	cmp	r0, r4
 8020e56:	d007      	beq.n	8020e68 <sbrk_aligned+0x38>
 8020e58:	1a21      	subs	r1, r4, r0
 8020e5a:	4628      	mov	r0, r5
 8020e5c:	f000 fa3a 	bl	80212d4 <_sbrk_r>
 8020e60:	3001      	adds	r0, #1
 8020e62:	d101      	bne.n	8020e68 <sbrk_aligned+0x38>
 8020e64:	f04f 34ff 	mov.w	r4, #4294967295
 8020e68:	4620      	mov	r0, r4
 8020e6a:	bd70      	pop	{r4, r5, r6, pc}
 8020e6c:	240072d4 	.word	0x240072d4

08020e70 <_malloc_r>:
 8020e70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020e74:	1ccd      	adds	r5, r1, #3
 8020e76:	f025 0503 	bic.w	r5, r5, #3
 8020e7a:	3508      	adds	r5, #8
 8020e7c:	2d0c      	cmp	r5, #12
 8020e7e:	bf38      	it	cc
 8020e80:	250c      	movcc	r5, #12
 8020e82:	2d00      	cmp	r5, #0
 8020e84:	4607      	mov	r7, r0
 8020e86:	db01      	blt.n	8020e8c <_malloc_r+0x1c>
 8020e88:	42a9      	cmp	r1, r5
 8020e8a:	d905      	bls.n	8020e98 <_malloc_r+0x28>
 8020e8c:	230c      	movs	r3, #12
 8020e8e:	603b      	str	r3, [r7, #0]
 8020e90:	2600      	movs	r6, #0
 8020e92:	4630      	mov	r0, r6
 8020e94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020e98:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8020f6c <_malloc_r+0xfc>
 8020e9c:	f000 f868 	bl	8020f70 <__malloc_lock>
 8020ea0:	f8d8 3000 	ldr.w	r3, [r8]
 8020ea4:	461c      	mov	r4, r3
 8020ea6:	bb5c      	cbnz	r4, 8020f00 <_malloc_r+0x90>
 8020ea8:	4629      	mov	r1, r5
 8020eaa:	4638      	mov	r0, r7
 8020eac:	f7ff ffc0 	bl	8020e30 <sbrk_aligned>
 8020eb0:	1c43      	adds	r3, r0, #1
 8020eb2:	4604      	mov	r4, r0
 8020eb4:	d155      	bne.n	8020f62 <_malloc_r+0xf2>
 8020eb6:	f8d8 4000 	ldr.w	r4, [r8]
 8020eba:	4626      	mov	r6, r4
 8020ebc:	2e00      	cmp	r6, #0
 8020ebe:	d145      	bne.n	8020f4c <_malloc_r+0xdc>
 8020ec0:	2c00      	cmp	r4, #0
 8020ec2:	d048      	beq.n	8020f56 <_malloc_r+0xe6>
 8020ec4:	6823      	ldr	r3, [r4, #0]
 8020ec6:	4631      	mov	r1, r6
 8020ec8:	4638      	mov	r0, r7
 8020eca:	eb04 0903 	add.w	r9, r4, r3
 8020ece:	f000 fa01 	bl	80212d4 <_sbrk_r>
 8020ed2:	4581      	cmp	r9, r0
 8020ed4:	d13f      	bne.n	8020f56 <_malloc_r+0xe6>
 8020ed6:	6821      	ldr	r1, [r4, #0]
 8020ed8:	1a6d      	subs	r5, r5, r1
 8020eda:	4629      	mov	r1, r5
 8020edc:	4638      	mov	r0, r7
 8020ede:	f7ff ffa7 	bl	8020e30 <sbrk_aligned>
 8020ee2:	3001      	adds	r0, #1
 8020ee4:	d037      	beq.n	8020f56 <_malloc_r+0xe6>
 8020ee6:	6823      	ldr	r3, [r4, #0]
 8020ee8:	442b      	add	r3, r5
 8020eea:	6023      	str	r3, [r4, #0]
 8020eec:	f8d8 3000 	ldr.w	r3, [r8]
 8020ef0:	2b00      	cmp	r3, #0
 8020ef2:	d038      	beq.n	8020f66 <_malloc_r+0xf6>
 8020ef4:	685a      	ldr	r2, [r3, #4]
 8020ef6:	42a2      	cmp	r2, r4
 8020ef8:	d12b      	bne.n	8020f52 <_malloc_r+0xe2>
 8020efa:	2200      	movs	r2, #0
 8020efc:	605a      	str	r2, [r3, #4]
 8020efe:	e00f      	b.n	8020f20 <_malloc_r+0xb0>
 8020f00:	6822      	ldr	r2, [r4, #0]
 8020f02:	1b52      	subs	r2, r2, r5
 8020f04:	d41f      	bmi.n	8020f46 <_malloc_r+0xd6>
 8020f06:	2a0b      	cmp	r2, #11
 8020f08:	d917      	bls.n	8020f3a <_malloc_r+0xca>
 8020f0a:	1961      	adds	r1, r4, r5
 8020f0c:	42a3      	cmp	r3, r4
 8020f0e:	6025      	str	r5, [r4, #0]
 8020f10:	bf18      	it	ne
 8020f12:	6059      	strne	r1, [r3, #4]
 8020f14:	6863      	ldr	r3, [r4, #4]
 8020f16:	bf08      	it	eq
 8020f18:	f8c8 1000 	streq.w	r1, [r8]
 8020f1c:	5162      	str	r2, [r4, r5]
 8020f1e:	604b      	str	r3, [r1, #4]
 8020f20:	4638      	mov	r0, r7
 8020f22:	f104 060b 	add.w	r6, r4, #11
 8020f26:	f000 f829 	bl	8020f7c <__malloc_unlock>
 8020f2a:	f026 0607 	bic.w	r6, r6, #7
 8020f2e:	1d23      	adds	r3, r4, #4
 8020f30:	1af2      	subs	r2, r6, r3
 8020f32:	d0ae      	beq.n	8020e92 <_malloc_r+0x22>
 8020f34:	1b9b      	subs	r3, r3, r6
 8020f36:	50a3      	str	r3, [r4, r2]
 8020f38:	e7ab      	b.n	8020e92 <_malloc_r+0x22>
 8020f3a:	42a3      	cmp	r3, r4
 8020f3c:	6862      	ldr	r2, [r4, #4]
 8020f3e:	d1dd      	bne.n	8020efc <_malloc_r+0x8c>
 8020f40:	f8c8 2000 	str.w	r2, [r8]
 8020f44:	e7ec      	b.n	8020f20 <_malloc_r+0xb0>
 8020f46:	4623      	mov	r3, r4
 8020f48:	6864      	ldr	r4, [r4, #4]
 8020f4a:	e7ac      	b.n	8020ea6 <_malloc_r+0x36>
 8020f4c:	4634      	mov	r4, r6
 8020f4e:	6876      	ldr	r6, [r6, #4]
 8020f50:	e7b4      	b.n	8020ebc <_malloc_r+0x4c>
 8020f52:	4613      	mov	r3, r2
 8020f54:	e7cc      	b.n	8020ef0 <_malloc_r+0x80>
 8020f56:	230c      	movs	r3, #12
 8020f58:	603b      	str	r3, [r7, #0]
 8020f5a:	4638      	mov	r0, r7
 8020f5c:	f000 f80e 	bl	8020f7c <__malloc_unlock>
 8020f60:	e797      	b.n	8020e92 <_malloc_r+0x22>
 8020f62:	6025      	str	r5, [r4, #0]
 8020f64:	e7dc      	b.n	8020f20 <_malloc_r+0xb0>
 8020f66:	605b      	str	r3, [r3, #4]
 8020f68:	deff      	udf	#255	; 0xff
 8020f6a:	bf00      	nop
 8020f6c:	240072d0 	.word	0x240072d0

08020f70 <__malloc_lock>:
 8020f70:	4801      	ldr	r0, [pc, #4]	; (8020f78 <__malloc_lock+0x8>)
 8020f72:	f000 b9fc 	b.w	802136e <__retarget_lock_acquire_recursive>
 8020f76:	bf00      	nop
 8020f78:	24007419 	.word	0x24007419

08020f7c <__malloc_unlock>:
 8020f7c:	4801      	ldr	r0, [pc, #4]	; (8020f84 <__malloc_unlock+0x8>)
 8020f7e:	f000 b9f7 	b.w	8021370 <__retarget_lock_release_recursive>
 8020f82:	bf00      	nop
 8020f84:	24007419 	.word	0x24007419

08020f88 <__cxa_atexit>:
 8020f88:	b510      	push	{r4, lr}
 8020f8a:	4c05      	ldr	r4, [pc, #20]	; (8020fa0 <__cxa_atexit+0x18>)
 8020f8c:	4613      	mov	r3, r2
 8020f8e:	b12c      	cbz	r4, 8020f9c <__cxa_atexit+0x14>
 8020f90:	460a      	mov	r2, r1
 8020f92:	4601      	mov	r1, r0
 8020f94:	2002      	movs	r0, #2
 8020f96:	f000 f9fb 	bl	8021390 <__register_exitproc>
 8020f9a:	bd10      	pop	{r4, pc}
 8020f9c:	4620      	mov	r0, r4
 8020f9e:	e7fc      	b.n	8020f9a <__cxa_atexit+0x12>
 8020fa0:	08021391 	.word	0x08021391

08020fa4 <std>:
 8020fa4:	2300      	movs	r3, #0
 8020fa6:	b510      	push	{r4, lr}
 8020fa8:	4604      	mov	r4, r0
 8020faa:	e9c0 3300 	strd	r3, r3, [r0]
 8020fae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8020fb2:	6083      	str	r3, [r0, #8]
 8020fb4:	8181      	strh	r1, [r0, #12]
 8020fb6:	6643      	str	r3, [r0, #100]	; 0x64
 8020fb8:	81c2      	strh	r2, [r0, #14]
 8020fba:	6183      	str	r3, [r0, #24]
 8020fbc:	4619      	mov	r1, r3
 8020fbe:	2208      	movs	r2, #8
 8020fc0:	305c      	adds	r0, #92	; 0x5c
 8020fc2:	f000 f906 	bl	80211d2 <memset>
 8020fc6:	4b0d      	ldr	r3, [pc, #52]	; (8020ffc <std+0x58>)
 8020fc8:	6263      	str	r3, [r4, #36]	; 0x24
 8020fca:	4b0d      	ldr	r3, [pc, #52]	; (8021000 <std+0x5c>)
 8020fcc:	62a3      	str	r3, [r4, #40]	; 0x28
 8020fce:	4b0d      	ldr	r3, [pc, #52]	; (8021004 <std+0x60>)
 8020fd0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8020fd2:	4b0d      	ldr	r3, [pc, #52]	; (8021008 <std+0x64>)
 8020fd4:	6323      	str	r3, [r4, #48]	; 0x30
 8020fd6:	4b0d      	ldr	r3, [pc, #52]	; (802100c <std+0x68>)
 8020fd8:	6224      	str	r4, [r4, #32]
 8020fda:	429c      	cmp	r4, r3
 8020fdc:	d006      	beq.n	8020fec <std+0x48>
 8020fde:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8020fe2:	4294      	cmp	r4, r2
 8020fe4:	d002      	beq.n	8020fec <std+0x48>
 8020fe6:	33d0      	adds	r3, #208	; 0xd0
 8020fe8:	429c      	cmp	r4, r3
 8020fea:	d105      	bne.n	8020ff8 <std+0x54>
 8020fec:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8020ff0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020ff4:	f000 b9ba 	b.w	802136c <__retarget_lock_init_recursive>
 8020ff8:	bd10      	pop	{r4, pc}
 8020ffa:	bf00      	nop
 8020ffc:	0802114d 	.word	0x0802114d
 8021000:	0802116f 	.word	0x0802116f
 8021004:	080211a7 	.word	0x080211a7
 8021008:	080211cb 	.word	0x080211cb
 802100c:	240072d8 	.word	0x240072d8

08021010 <stdio_exit_handler>:
 8021010:	4a02      	ldr	r2, [pc, #8]	; (802101c <stdio_exit_handler+0xc>)
 8021012:	4903      	ldr	r1, [pc, #12]	; (8021020 <stdio_exit_handler+0x10>)
 8021014:	4803      	ldr	r0, [pc, #12]	; (8021024 <stdio_exit_handler+0x14>)
 8021016:	f000 b87b 	b.w	8021110 <_fwalk_sglue>
 802101a:	bf00      	nop
 802101c:	240000b0 	.word	0x240000b0
 8021020:	08021b99 	.word	0x08021b99
 8021024:	240000bc 	.word	0x240000bc

08021028 <cleanup_stdio>:
 8021028:	6841      	ldr	r1, [r0, #4]
 802102a:	4b0c      	ldr	r3, [pc, #48]	; (802105c <cleanup_stdio+0x34>)
 802102c:	4299      	cmp	r1, r3
 802102e:	b510      	push	{r4, lr}
 8021030:	4604      	mov	r4, r0
 8021032:	d001      	beq.n	8021038 <cleanup_stdio+0x10>
 8021034:	f000 fdb0 	bl	8021b98 <_fflush_r>
 8021038:	68a1      	ldr	r1, [r4, #8]
 802103a:	4b09      	ldr	r3, [pc, #36]	; (8021060 <cleanup_stdio+0x38>)
 802103c:	4299      	cmp	r1, r3
 802103e:	d002      	beq.n	8021046 <cleanup_stdio+0x1e>
 8021040:	4620      	mov	r0, r4
 8021042:	f000 fda9 	bl	8021b98 <_fflush_r>
 8021046:	68e1      	ldr	r1, [r4, #12]
 8021048:	4b06      	ldr	r3, [pc, #24]	; (8021064 <cleanup_stdio+0x3c>)
 802104a:	4299      	cmp	r1, r3
 802104c:	d004      	beq.n	8021058 <cleanup_stdio+0x30>
 802104e:	4620      	mov	r0, r4
 8021050:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021054:	f000 bda0 	b.w	8021b98 <_fflush_r>
 8021058:	bd10      	pop	{r4, pc}
 802105a:	bf00      	nop
 802105c:	240072d8 	.word	0x240072d8
 8021060:	24007340 	.word	0x24007340
 8021064:	240073a8 	.word	0x240073a8

08021068 <global_stdio_init.part.0>:
 8021068:	b510      	push	{r4, lr}
 802106a:	4b0b      	ldr	r3, [pc, #44]	; (8021098 <global_stdio_init.part.0+0x30>)
 802106c:	4c0b      	ldr	r4, [pc, #44]	; (802109c <global_stdio_init.part.0+0x34>)
 802106e:	4a0c      	ldr	r2, [pc, #48]	; (80210a0 <global_stdio_init.part.0+0x38>)
 8021070:	601a      	str	r2, [r3, #0]
 8021072:	4620      	mov	r0, r4
 8021074:	2200      	movs	r2, #0
 8021076:	2104      	movs	r1, #4
 8021078:	f7ff ff94 	bl	8020fa4 <std>
 802107c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8021080:	2201      	movs	r2, #1
 8021082:	2109      	movs	r1, #9
 8021084:	f7ff ff8e 	bl	8020fa4 <std>
 8021088:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 802108c:	2202      	movs	r2, #2
 802108e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021092:	2112      	movs	r1, #18
 8021094:	f7ff bf86 	b.w	8020fa4 <std>
 8021098:	24007410 	.word	0x24007410
 802109c:	240072d8 	.word	0x240072d8
 80210a0:	08021011 	.word	0x08021011

080210a4 <__sfp_lock_acquire>:
 80210a4:	4801      	ldr	r0, [pc, #4]	; (80210ac <__sfp_lock_acquire+0x8>)
 80210a6:	f000 b962 	b.w	802136e <__retarget_lock_acquire_recursive>
 80210aa:	bf00      	nop
 80210ac:	2400741a 	.word	0x2400741a

080210b0 <__sfp_lock_release>:
 80210b0:	4801      	ldr	r0, [pc, #4]	; (80210b8 <__sfp_lock_release+0x8>)
 80210b2:	f000 b95d 	b.w	8021370 <__retarget_lock_release_recursive>
 80210b6:	bf00      	nop
 80210b8:	2400741a 	.word	0x2400741a

080210bc <__sinit>:
 80210bc:	b510      	push	{r4, lr}
 80210be:	4604      	mov	r4, r0
 80210c0:	f7ff fff0 	bl	80210a4 <__sfp_lock_acquire>
 80210c4:	6a23      	ldr	r3, [r4, #32]
 80210c6:	b11b      	cbz	r3, 80210d0 <__sinit+0x14>
 80210c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80210cc:	f7ff bff0 	b.w	80210b0 <__sfp_lock_release>
 80210d0:	4b04      	ldr	r3, [pc, #16]	; (80210e4 <__sinit+0x28>)
 80210d2:	6223      	str	r3, [r4, #32]
 80210d4:	4b04      	ldr	r3, [pc, #16]	; (80210e8 <__sinit+0x2c>)
 80210d6:	681b      	ldr	r3, [r3, #0]
 80210d8:	2b00      	cmp	r3, #0
 80210da:	d1f5      	bne.n	80210c8 <__sinit+0xc>
 80210dc:	f7ff ffc4 	bl	8021068 <global_stdio_init.part.0>
 80210e0:	e7f2      	b.n	80210c8 <__sinit+0xc>
 80210e2:	bf00      	nop
 80210e4:	08021029 	.word	0x08021029
 80210e8:	24007410 	.word	0x24007410

080210ec <fiprintf>:
 80210ec:	b40e      	push	{r1, r2, r3}
 80210ee:	b503      	push	{r0, r1, lr}
 80210f0:	4601      	mov	r1, r0
 80210f2:	ab03      	add	r3, sp, #12
 80210f4:	4805      	ldr	r0, [pc, #20]	; (802110c <fiprintf+0x20>)
 80210f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80210fa:	6800      	ldr	r0, [r0, #0]
 80210fc:	9301      	str	r3, [sp, #4]
 80210fe:	f000 fa1b 	bl	8021538 <_vfiprintf_r>
 8021102:	b002      	add	sp, #8
 8021104:	f85d eb04 	ldr.w	lr, [sp], #4
 8021108:	b003      	add	sp, #12
 802110a:	4770      	bx	lr
 802110c:	24000108 	.word	0x24000108

08021110 <_fwalk_sglue>:
 8021110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021114:	4607      	mov	r7, r0
 8021116:	4688      	mov	r8, r1
 8021118:	4614      	mov	r4, r2
 802111a:	2600      	movs	r6, #0
 802111c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8021120:	f1b9 0901 	subs.w	r9, r9, #1
 8021124:	d505      	bpl.n	8021132 <_fwalk_sglue+0x22>
 8021126:	6824      	ldr	r4, [r4, #0]
 8021128:	2c00      	cmp	r4, #0
 802112a:	d1f7      	bne.n	802111c <_fwalk_sglue+0xc>
 802112c:	4630      	mov	r0, r6
 802112e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021132:	89ab      	ldrh	r3, [r5, #12]
 8021134:	2b01      	cmp	r3, #1
 8021136:	d907      	bls.n	8021148 <_fwalk_sglue+0x38>
 8021138:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802113c:	3301      	adds	r3, #1
 802113e:	d003      	beq.n	8021148 <_fwalk_sglue+0x38>
 8021140:	4629      	mov	r1, r5
 8021142:	4638      	mov	r0, r7
 8021144:	47c0      	blx	r8
 8021146:	4306      	orrs	r6, r0
 8021148:	3568      	adds	r5, #104	; 0x68
 802114a:	e7e9      	b.n	8021120 <_fwalk_sglue+0x10>

0802114c <__sread>:
 802114c:	b510      	push	{r4, lr}
 802114e:	460c      	mov	r4, r1
 8021150:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021154:	f000 f898 	bl	8021288 <_read_r>
 8021158:	2800      	cmp	r0, #0
 802115a:	bfab      	itete	ge
 802115c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802115e:	89a3      	ldrhlt	r3, [r4, #12]
 8021160:	181b      	addge	r3, r3, r0
 8021162:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8021166:	bfac      	ite	ge
 8021168:	6563      	strge	r3, [r4, #84]	; 0x54
 802116a:	81a3      	strhlt	r3, [r4, #12]
 802116c:	bd10      	pop	{r4, pc}

0802116e <__swrite>:
 802116e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021172:	461f      	mov	r7, r3
 8021174:	898b      	ldrh	r3, [r1, #12]
 8021176:	05db      	lsls	r3, r3, #23
 8021178:	4605      	mov	r5, r0
 802117a:	460c      	mov	r4, r1
 802117c:	4616      	mov	r6, r2
 802117e:	d505      	bpl.n	802118c <__swrite+0x1e>
 8021180:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021184:	2302      	movs	r3, #2
 8021186:	2200      	movs	r2, #0
 8021188:	f000 f86c 	bl	8021264 <_lseek_r>
 802118c:	89a3      	ldrh	r3, [r4, #12]
 802118e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8021192:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8021196:	81a3      	strh	r3, [r4, #12]
 8021198:	4632      	mov	r2, r6
 802119a:	463b      	mov	r3, r7
 802119c:	4628      	mov	r0, r5
 802119e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80211a2:	f000 b8a7 	b.w	80212f4 <_write_r>

080211a6 <__sseek>:
 80211a6:	b510      	push	{r4, lr}
 80211a8:	460c      	mov	r4, r1
 80211aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80211ae:	f000 f859 	bl	8021264 <_lseek_r>
 80211b2:	1c43      	adds	r3, r0, #1
 80211b4:	89a3      	ldrh	r3, [r4, #12]
 80211b6:	bf15      	itete	ne
 80211b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80211ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80211be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80211c2:	81a3      	strheq	r3, [r4, #12]
 80211c4:	bf18      	it	ne
 80211c6:	81a3      	strhne	r3, [r4, #12]
 80211c8:	bd10      	pop	{r4, pc}

080211ca <__sclose>:
 80211ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80211ce:	f000 b839 	b.w	8021244 <_close_r>

080211d2 <memset>:
 80211d2:	4402      	add	r2, r0
 80211d4:	4603      	mov	r3, r0
 80211d6:	4293      	cmp	r3, r2
 80211d8:	d100      	bne.n	80211dc <memset+0xa>
 80211da:	4770      	bx	lr
 80211dc:	f803 1b01 	strb.w	r1, [r3], #1
 80211e0:	e7f9      	b.n	80211d6 <memset+0x4>

080211e2 <_raise_r>:
 80211e2:	291f      	cmp	r1, #31
 80211e4:	b538      	push	{r3, r4, r5, lr}
 80211e6:	4604      	mov	r4, r0
 80211e8:	460d      	mov	r5, r1
 80211ea:	d904      	bls.n	80211f6 <_raise_r+0x14>
 80211ec:	2316      	movs	r3, #22
 80211ee:	6003      	str	r3, [r0, #0]
 80211f0:	f04f 30ff 	mov.w	r0, #4294967295
 80211f4:	bd38      	pop	{r3, r4, r5, pc}
 80211f6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80211f8:	b112      	cbz	r2, 8021200 <_raise_r+0x1e>
 80211fa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80211fe:	b94b      	cbnz	r3, 8021214 <_raise_r+0x32>
 8021200:	4620      	mov	r0, r4
 8021202:	f000 f865 	bl	80212d0 <_getpid_r>
 8021206:	462a      	mov	r2, r5
 8021208:	4601      	mov	r1, r0
 802120a:	4620      	mov	r0, r4
 802120c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8021210:	f000 b84c 	b.w	80212ac <_kill_r>
 8021214:	2b01      	cmp	r3, #1
 8021216:	d00a      	beq.n	802122e <_raise_r+0x4c>
 8021218:	1c59      	adds	r1, r3, #1
 802121a:	d103      	bne.n	8021224 <_raise_r+0x42>
 802121c:	2316      	movs	r3, #22
 802121e:	6003      	str	r3, [r0, #0]
 8021220:	2001      	movs	r0, #1
 8021222:	e7e7      	b.n	80211f4 <_raise_r+0x12>
 8021224:	2400      	movs	r4, #0
 8021226:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802122a:	4628      	mov	r0, r5
 802122c:	4798      	blx	r3
 802122e:	2000      	movs	r0, #0
 8021230:	e7e0      	b.n	80211f4 <_raise_r+0x12>
	...

08021234 <raise>:
 8021234:	4b02      	ldr	r3, [pc, #8]	; (8021240 <raise+0xc>)
 8021236:	4601      	mov	r1, r0
 8021238:	6818      	ldr	r0, [r3, #0]
 802123a:	f7ff bfd2 	b.w	80211e2 <_raise_r>
 802123e:	bf00      	nop
 8021240:	24000108 	.word	0x24000108

08021244 <_close_r>:
 8021244:	b538      	push	{r3, r4, r5, lr}
 8021246:	4d06      	ldr	r5, [pc, #24]	; (8021260 <_close_r+0x1c>)
 8021248:	2300      	movs	r3, #0
 802124a:	4604      	mov	r4, r0
 802124c:	4608      	mov	r0, r1
 802124e:	602b      	str	r3, [r5, #0]
 8021250:	f7e0 f853 	bl	80012fa <_close>
 8021254:	1c43      	adds	r3, r0, #1
 8021256:	d102      	bne.n	802125e <_close_r+0x1a>
 8021258:	682b      	ldr	r3, [r5, #0]
 802125a:	b103      	cbz	r3, 802125e <_close_r+0x1a>
 802125c:	6023      	str	r3, [r4, #0]
 802125e:	bd38      	pop	{r3, r4, r5, pc}
 8021260:	24007414 	.word	0x24007414

08021264 <_lseek_r>:
 8021264:	b538      	push	{r3, r4, r5, lr}
 8021266:	4d07      	ldr	r5, [pc, #28]	; (8021284 <_lseek_r+0x20>)
 8021268:	4604      	mov	r4, r0
 802126a:	4608      	mov	r0, r1
 802126c:	4611      	mov	r1, r2
 802126e:	2200      	movs	r2, #0
 8021270:	602a      	str	r2, [r5, #0]
 8021272:	461a      	mov	r2, r3
 8021274:	f7e0 f868 	bl	8001348 <_lseek>
 8021278:	1c43      	adds	r3, r0, #1
 802127a:	d102      	bne.n	8021282 <_lseek_r+0x1e>
 802127c:	682b      	ldr	r3, [r5, #0]
 802127e:	b103      	cbz	r3, 8021282 <_lseek_r+0x1e>
 8021280:	6023      	str	r3, [r4, #0]
 8021282:	bd38      	pop	{r3, r4, r5, pc}
 8021284:	24007414 	.word	0x24007414

08021288 <_read_r>:
 8021288:	b538      	push	{r3, r4, r5, lr}
 802128a:	4d07      	ldr	r5, [pc, #28]	; (80212a8 <_read_r+0x20>)
 802128c:	4604      	mov	r4, r0
 802128e:	4608      	mov	r0, r1
 8021290:	4611      	mov	r1, r2
 8021292:	2200      	movs	r2, #0
 8021294:	602a      	str	r2, [r5, #0]
 8021296:	461a      	mov	r2, r3
 8021298:	f7df fff6 	bl	8001288 <_read>
 802129c:	1c43      	adds	r3, r0, #1
 802129e:	d102      	bne.n	80212a6 <_read_r+0x1e>
 80212a0:	682b      	ldr	r3, [r5, #0]
 80212a2:	b103      	cbz	r3, 80212a6 <_read_r+0x1e>
 80212a4:	6023      	str	r3, [r4, #0]
 80212a6:	bd38      	pop	{r3, r4, r5, pc}
 80212a8:	24007414 	.word	0x24007414

080212ac <_kill_r>:
 80212ac:	b538      	push	{r3, r4, r5, lr}
 80212ae:	4d07      	ldr	r5, [pc, #28]	; (80212cc <_kill_r+0x20>)
 80212b0:	2300      	movs	r3, #0
 80212b2:	4604      	mov	r4, r0
 80212b4:	4608      	mov	r0, r1
 80212b6:	4611      	mov	r1, r2
 80212b8:	602b      	str	r3, [r5, #0]
 80212ba:	f7df ffcb 	bl	8001254 <_kill>
 80212be:	1c43      	adds	r3, r0, #1
 80212c0:	d102      	bne.n	80212c8 <_kill_r+0x1c>
 80212c2:	682b      	ldr	r3, [r5, #0]
 80212c4:	b103      	cbz	r3, 80212c8 <_kill_r+0x1c>
 80212c6:	6023      	str	r3, [r4, #0]
 80212c8:	bd38      	pop	{r3, r4, r5, pc}
 80212ca:	bf00      	nop
 80212cc:	24007414 	.word	0x24007414

080212d0 <_getpid_r>:
 80212d0:	f7df bfb8 	b.w	8001244 <_getpid>

080212d4 <_sbrk_r>:
 80212d4:	b538      	push	{r3, r4, r5, lr}
 80212d6:	4d06      	ldr	r5, [pc, #24]	; (80212f0 <_sbrk_r+0x1c>)
 80212d8:	2300      	movs	r3, #0
 80212da:	4604      	mov	r4, r0
 80212dc:	4608      	mov	r0, r1
 80212de:	602b      	str	r3, [r5, #0]
 80212e0:	f7e0 f840 	bl	8001364 <_sbrk>
 80212e4:	1c43      	adds	r3, r0, #1
 80212e6:	d102      	bne.n	80212ee <_sbrk_r+0x1a>
 80212e8:	682b      	ldr	r3, [r5, #0]
 80212ea:	b103      	cbz	r3, 80212ee <_sbrk_r+0x1a>
 80212ec:	6023      	str	r3, [r4, #0]
 80212ee:	bd38      	pop	{r3, r4, r5, pc}
 80212f0:	24007414 	.word	0x24007414

080212f4 <_write_r>:
 80212f4:	b538      	push	{r3, r4, r5, lr}
 80212f6:	4d07      	ldr	r5, [pc, #28]	; (8021314 <_write_r+0x20>)
 80212f8:	4604      	mov	r4, r0
 80212fa:	4608      	mov	r0, r1
 80212fc:	4611      	mov	r1, r2
 80212fe:	2200      	movs	r2, #0
 8021300:	602a      	str	r2, [r5, #0]
 8021302:	461a      	mov	r2, r3
 8021304:	f7df ffdd 	bl	80012c2 <_write>
 8021308:	1c43      	adds	r3, r0, #1
 802130a:	d102      	bne.n	8021312 <_write_r+0x1e>
 802130c:	682b      	ldr	r3, [r5, #0]
 802130e:	b103      	cbz	r3, 8021312 <_write_r+0x1e>
 8021310:	6023      	str	r3, [r4, #0]
 8021312:	bd38      	pop	{r3, r4, r5, pc}
 8021314:	24007414 	.word	0x24007414

08021318 <__errno>:
 8021318:	4b01      	ldr	r3, [pc, #4]	; (8021320 <__errno+0x8>)
 802131a:	6818      	ldr	r0, [r3, #0]
 802131c:	4770      	bx	lr
 802131e:	bf00      	nop
 8021320:	24000108 	.word	0x24000108

08021324 <__libc_init_array>:
 8021324:	b570      	push	{r4, r5, r6, lr}
 8021326:	4d0d      	ldr	r5, [pc, #52]	; (802135c <__libc_init_array+0x38>)
 8021328:	4c0d      	ldr	r4, [pc, #52]	; (8021360 <__libc_init_array+0x3c>)
 802132a:	1b64      	subs	r4, r4, r5
 802132c:	10a4      	asrs	r4, r4, #2
 802132e:	2600      	movs	r6, #0
 8021330:	42a6      	cmp	r6, r4
 8021332:	d109      	bne.n	8021348 <__libc_init_array+0x24>
 8021334:	4d0b      	ldr	r5, [pc, #44]	; (8021364 <__libc_init_array+0x40>)
 8021336:	4c0c      	ldr	r4, [pc, #48]	; (8021368 <__libc_init_array+0x44>)
 8021338:	f000 fd70 	bl	8021e1c <_init>
 802133c:	1b64      	subs	r4, r4, r5
 802133e:	10a4      	asrs	r4, r4, #2
 8021340:	2600      	movs	r6, #0
 8021342:	42a6      	cmp	r6, r4
 8021344:	d105      	bne.n	8021352 <__libc_init_array+0x2e>
 8021346:	bd70      	pop	{r4, r5, r6, pc}
 8021348:	f855 3b04 	ldr.w	r3, [r5], #4
 802134c:	4798      	blx	r3
 802134e:	3601      	adds	r6, #1
 8021350:	e7ee      	b.n	8021330 <__libc_init_array+0xc>
 8021352:	f855 3b04 	ldr.w	r3, [r5], #4
 8021356:	4798      	blx	r3
 8021358:	3601      	adds	r6, #1
 802135a:	e7f2      	b.n	8021342 <__libc_init_array+0x1e>
 802135c:	08023860 	.word	0x08023860
 8021360:	08023860 	.word	0x08023860
 8021364:	08023860 	.word	0x08023860
 8021368:	08023874 	.word	0x08023874

0802136c <__retarget_lock_init_recursive>:
 802136c:	4770      	bx	lr

0802136e <__retarget_lock_acquire_recursive>:
 802136e:	4770      	bx	lr

08021370 <__retarget_lock_release_recursive>:
 8021370:	4770      	bx	lr

08021372 <memcpy>:
 8021372:	440a      	add	r2, r1
 8021374:	4291      	cmp	r1, r2
 8021376:	f100 33ff 	add.w	r3, r0, #4294967295
 802137a:	d100      	bne.n	802137e <memcpy+0xc>
 802137c:	4770      	bx	lr
 802137e:	b510      	push	{r4, lr}
 8021380:	f811 4b01 	ldrb.w	r4, [r1], #1
 8021384:	f803 4f01 	strb.w	r4, [r3, #1]!
 8021388:	4291      	cmp	r1, r2
 802138a:	d1f9      	bne.n	8021380 <memcpy+0xe>
 802138c:	bd10      	pop	{r4, pc}
	...

08021390 <__register_exitproc>:
 8021390:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021394:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8021448 <__register_exitproc+0xb8>
 8021398:	4606      	mov	r6, r0
 802139a:	f8d8 0000 	ldr.w	r0, [r8]
 802139e:	461f      	mov	r7, r3
 80213a0:	460d      	mov	r5, r1
 80213a2:	4691      	mov	r9, r2
 80213a4:	f7ff ffe3 	bl	802136e <__retarget_lock_acquire_recursive>
 80213a8:	4b23      	ldr	r3, [pc, #140]	; (8021438 <__register_exitproc+0xa8>)
 80213aa:	681c      	ldr	r4, [r3, #0]
 80213ac:	b934      	cbnz	r4, 80213bc <__register_exitproc+0x2c>
 80213ae:	4c23      	ldr	r4, [pc, #140]	; (802143c <__register_exitproc+0xac>)
 80213b0:	601c      	str	r4, [r3, #0]
 80213b2:	4b23      	ldr	r3, [pc, #140]	; (8021440 <__register_exitproc+0xb0>)
 80213b4:	b113      	cbz	r3, 80213bc <__register_exitproc+0x2c>
 80213b6:	681b      	ldr	r3, [r3, #0]
 80213b8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80213bc:	6863      	ldr	r3, [r4, #4]
 80213be:	2b1f      	cmp	r3, #31
 80213c0:	dd07      	ble.n	80213d2 <__register_exitproc+0x42>
 80213c2:	f8d8 0000 	ldr.w	r0, [r8]
 80213c6:	f7ff ffd3 	bl	8021370 <__retarget_lock_release_recursive>
 80213ca:	f04f 30ff 	mov.w	r0, #4294967295
 80213ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80213d2:	b32e      	cbz	r6, 8021420 <__register_exitproc+0x90>
 80213d4:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80213d8:	b968      	cbnz	r0, 80213f6 <__register_exitproc+0x66>
 80213da:	4b1a      	ldr	r3, [pc, #104]	; (8021444 <__register_exitproc+0xb4>)
 80213dc:	2b00      	cmp	r3, #0
 80213de:	d0f0      	beq.n	80213c2 <__register_exitproc+0x32>
 80213e0:	f44f 7084 	mov.w	r0, #264	; 0x108
 80213e4:	f7ff fd14 	bl	8020e10 <malloc>
 80213e8:	2800      	cmp	r0, #0
 80213ea:	d0ea      	beq.n	80213c2 <__register_exitproc+0x32>
 80213ec:	2300      	movs	r3, #0
 80213ee:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 80213f2:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80213f6:	6863      	ldr	r3, [r4, #4]
 80213f8:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80213fc:	2201      	movs	r2, #1
 80213fe:	409a      	lsls	r2, r3
 8021400:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8021404:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8021408:	4313      	orrs	r3, r2
 802140a:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 802140e:	2e02      	cmp	r6, #2
 8021410:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8021414:	bf02      	ittt	eq
 8021416:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 802141a:	4313      	orreq	r3, r2
 802141c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8021420:	6863      	ldr	r3, [r4, #4]
 8021422:	f8d8 0000 	ldr.w	r0, [r8]
 8021426:	1c5a      	adds	r2, r3, #1
 8021428:	3302      	adds	r3, #2
 802142a:	6062      	str	r2, [r4, #4]
 802142c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8021430:	f7ff ff9e 	bl	8021370 <__retarget_lock_release_recursive>
 8021434:	2000      	movs	r0, #0
 8021436:	e7ca      	b.n	80213ce <__register_exitproc+0x3e>
 8021438:	240074a8 	.word	0x240074a8
 802143c:	2400741c 	.word	0x2400741c
 8021440:	0802380c 	.word	0x0802380c
 8021444:	08020e11 	.word	0x08020e11
 8021448:	2400010c 	.word	0x2400010c

0802144c <_free_r>:
 802144c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802144e:	2900      	cmp	r1, #0
 8021450:	d044      	beq.n	80214dc <_free_r+0x90>
 8021452:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8021456:	9001      	str	r0, [sp, #4]
 8021458:	2b00      	cmp	r3, #0
 802145a:	f1a1 0404 	sub.w	r4, r1, #4
 802145e:	bfb8      	it	lt
 8021460:	18e4      	addlt	r4, r4, r3
 8021462:	f7ff fd85 	bl	8020f70 <__malloc_lock>
 8021466:	4a1e      	ldr	r2, [pc, #120]	; (80214e0 <_free_r+0x94>)
 8021468:	9801      	ldr	r0, [sp, #4]
 802146a:	6813      	ldr	r3, [r2, #0]
 802146c:	b933      	cbnz	r3, 802147c <_free_r+0x30>
 802146e:	6063      	str	r3, [r4, #4]
 8021470:	6014      	str	r4, [r2, #0]
 8021472:	b003      	add	sp, #12
 8021474:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8021478:	f7ff bd80 	b.w	8020f7c <__malloc_unlock>
 802147c:	42a3      	cmp	r3, r4
 802147e:	d908      	bls.n	8021492 <_free_r+0x46>
 8021480:	6825      	ldr	r5, [r4, #0]
 8021482:	1961      	adds	r1, r4, r5
 8021484:	428b      	cmp	r3, r1
 8021486:	bf01      	itttt	eq
 8021488:	6819      	ldreq	r1, [r3, #0]
 802148a:	685b      	ldreq	r3, [r3, #4]
 802148c:	1949      	addeq	r1, r1, r5
 802148e:	6021      	streq	r1, [r4, #0]
 8021490:	e7ed      	b.n	802146e <_free_r+0x22>
 8021492:	461a      	mov	r2, r3
 8021494:	685b      	ldr	r3, [r3, #4]
 8021496:	b10b      	cbz	r3, 802149c <_free_r+0x50>
 8021498:	42a3      	cmp	r3, r4
 802149a:	d9fa      	bls.n	8021492 <_free_r+0x46>
 802149c:	6811      	ldr	r1, [r2, #0]
 802149e:	1855      	adds	r5, r2, r1
 80214a0:	42a5      	cmp	r5, r4
 80214a2:	d10b      	bne.n	80214bc <_free_r+0x70>
 80214a4:	6824      	ldr	r4, [r4, #0]
 80214a6:	4421      	add	r1, r4
 80214a8:	1854      	adds	r4, r2, r1
 80214aa:	42a3      	cmp	r3, r4
 80214ac:	6011      	str	r1, [r2, #0]
 80214ae:	d1e0      	bne.n	8021472 <_free_r+0x26>
 80214b0:	681c      	ldr	r4, [r3, #0]
 80214b2:	685b      	ldr	r3, [r3, #4]
 80214b4:	6053      	str	r3, [r2, #4]
 80214b6:	440c      	add	r4, r1
 80214b8:	6014      	str	r4, [r2, #0]
 80214ba:	e7da      	b.n	8021472 <_free_r+0x26>
 80214bc:	d902      	bls.n	80214c4 <_free_r+0x78>
 80214be:	230c      	movs	r3, #12
 80214c0:	6003      	str	r3, [r0, #0]
 80214c2:	e7d6      	b.n	8021472 <_free_r+0x26>
 80214c4:	6825      	ldr	r5, [r4, #0]
 80214c6:	1961      	adds	r1, r4, r5
 80214c8:	428b      	cmp	r3, r1
 80214ca:	bf04      	itt	eq
 80214cc:	6819      	ldreq	r1, [r3, #0]
 80214ce:	685b      	ldreq	r3, [r3, #4]
 80214d0:	6063      	str	r3, [r4, #4]
 80214d2:	bf04      	itt	eq
 80214d4:	1949      	addeq	r1, r1, r5
 80214d6:	6021      	streq	r1, [r4, #0]
 80214d8:	6054      	str	r4, [r2, #4]
 80214da:	e7ca      	b.n	8021472 <_free_r+0x26>
 80214dc:	b003      	add	sp, #12
 80214de:	bd30      	pop	{r4, r5, pc}
 80214e0:	240072d0 	.word	0x240072d0

080214e4 <__sfputc_r>:
 80214e4:	6893      	ldr	r3, [r2, #8]
 80214e6:	3b01      	subs	r3, #1
 80214e8:	2b00      	cmp	r3, #0
 80214ea:	b410      	push	{r4}
 80214ec:	6093      	str	r3, [r2, #8]
 80214ee:	da08      	bge.n	8021502 <__sfputc_r+0x1e>
 80214f0:	6994      	ldr	r4, [r2, #24]
 80214f2:	42a3      	cmp	r3, r4
 80214f4:	db01      	blt.n	80214fa <__sfputc_r+0x16>
 80214f6:	290a      	cmp	r1, #10
 80214f8:	d103      	bne.n	8021502 <__sfputc_r+0x1e>
 80214fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80214fe:	f000 bb73 	b.w	8021be8 <__swbuf_r>
 8021502:	6813      	ldr	r3, [r2, #0]
 8021504:	1c58      	adds	r0, r3, #1
 8021506:	6010      	str	r0, [r2, #0]
 8021508:	7019      	strb	r1, [r3, #0]
 802150a:	4608      	mov	r0, r1
 802150c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021510:	4770      	bx	lr

08021512 <__sfputs_r>:
 8021512:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021514:	4606      	mov	r6, r0
 8021516:	460f      	mov	r7, r1
 8021518:	4614      	mov	r4, r2
 802151a:	18d5      	adds	r5, r2, r3
 802151c:	42ac      	cmp	r4, r5
 802151e:	d101      	bne.n	8021524 <__sfputs_r+0x12>
 8021520:	2000      	movs	r0, #0
 8021522:	e007      	b.n	8021534 <__sfputs_r+0x22>
 8021524:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021528:	463a      	mov	r2, r7
 802152a:	4630      	mov	r0, r6
 802152c:	f7ff ffda 	bl	80214e4 <__sfputc_r>
 8021530:	1c43      	adds	r3, r0, #1
 8021532:	d1f3      	bne.n	802151c <__sfputs_r+0xa>
 8021534:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08021538 <_vfiprintf_r>:
 8021538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802153c:	460d      	mov	r5, r1
 802153e:	b09d      	sub	sp, #116	; 0x74
 8021540:	4614      	mov	r4, r2
 8021542:	4698      	mov	r8, r3
 8021544:	4606      	mov	r6, r0
 8021546:	b118      	cbz	r0, 8021550 <_vfiprintf_r+0x18>
 8021548:	6a03      	ldr	r3, [r0, #32]
 802154a:	b90b      	cbnz	r3, 8021550 <_vfiprintf_r+0x18>
 802154c:	f7ff fdb6 	bl	80210bc <__sinit>
 8021550:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8021552:	07d9      	lsls	r1, r3, #31
 8021554:	d405      	bmi.n	8021562 <_vfiprintf_r+0x2a>
 8021556:	89ab      	ldrh	r3, [r5, #12]
 8021558:	059a      	lsls	r2, r3, #22
 802155a:	d402      	bmi.n	8021562 <_vfiprintf_r+0x2a>
 802155c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802155e:	f7ff ff06 	bl	802136e <__retarget_lock_acquire_recursive>
 8021562:	89ab      	ldrh	r3, [r5, #12]
 8021564:	071b      	lsls	r3, r3, #28
 8021566:	d501      	bpl.n	802156c <_vfiprintf_r+0x34>
 8021568:	692b      	ldr	r3, [r5, #16]
 802156a:	b99b      	cbnz	r3, 8021594 <_vfiprintf_r+0x5c>
 802156c:	4629      	mov	r1, r5
 802156e:	4630      	mov	r0, r6
 8021570:	f000 fb78 	bl	8021c64 <__swsetup_r>
 8021574:	b170      	cbz	r0, 8021594 <_vfiprintf_r+0x5c>
 8021576:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8021578:	07dc      	lsls	r4, r3, #31
 802157a:	d504      	bpl.n	8021586 <_vfiprintf_r+0x4e>
 802157c:	f04f 30ff 	mov.w	r0, #4294967295
 8021580:	b01d      	add	sp, #116	; 0x74
 8021582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021586:	89ab      	ldrh	r3, [r5, #12]
 8021588:	0598      	lsls	r0, r3, #22
 802158a:	d4f7      	bmi.n	802157c <_vfiprintf_r+0x44>
 802158c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802158e:	f7ff feef 	bl	8021370 <__retarget_lock_release_recursive>
 8021592:	e7f3      	b.n	802157c <_vfiprintf_r+0x44>
 8021594:	2300      	movs	r3, #0
 8021596:	9309      	str	r3, [sp, #36]	; 0x24
 8021598:	2320      	movs	r3, #32
 802159a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802159e:	f8cd 800c 	str.w	r8, [sp, #12]
 80215a2:	2330      	movs	r3, #48	; 0x30
 80215a4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8021758 <_vfiprintf_r+0x220>
 80215a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80215ac:	f04f 0901 	mov.w	r9, #1
 80215b0:	4623      	mov	r3, r4
 80215b2:	469a      	mov	sl, r3
 80215b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80215b8:	b10a      	cbz	r2, 80215be <_vfiprintf_r+0x86>
 80215ba:	2a25      	cmp	r2, #37	; 0x25
 80215bc:	d1f9      	bne.n	80215b2 <_vfiprintf_r+0x7a>
 80215be:	ebba 0b04 	subs.w	fp, sl, r4
 80215c2:	d00b      	beq.n	80215dc <_vfiprintf_r+0xa4>
 80215c4:	465b      	mov	r3, fp
 80215c6:	4622      	mov	r2, r4
 80215c8:	4629      	mov	r1, r5
 80215ca:	4630      	mov	r0, r6
 80215cc:	f7ff ffa1 	bl	8021512 <__sfputs_r>
 80215d0:	3001      	adds	r0, #1
 80215d2:	f000 80a9 	beq.w	8021728 <_vfiprintf_r+0x1f0>
 80215d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80215d8:	445a      	add	r2, fp
 80215da:	9209      	str	r2, [sp, #36]	; 0x24
 80215dc:	f89a 3000 	ldrb.w	r3, [sl]
 80215e0:	2b00      	cmp	r3, #0
 80215e2:	f000 80a1 	beq.w	8021728 <_vfiprintf_r+0x1f0>
 80215e6:	2300      	movs	r3, #0
 80215e8:	f04f 32ff 	mov.w	r2, #4294967295
 80215ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80215f0:	f10a 0a01 	add.w	sl, sl, #1
 80215f4:	9304      	str	r3, [sp, #16]
 80215f6:	9307      	str	r3, [sp, #28]
 80215f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80215fc:	931a      	str	r3, [sp, #104]	; 0x68
 80215fe:	4654      	mov	r4, sl
 8021600:	2205      	movs	r2, #5
 8021602:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021606:	4854      	ldr	r0, [pc, #336]	; (8021758 <_vfiprintf_r+0x220>)
 8021608:	f7de fe72 	bl	80002f0 <memchr>
 802160c:	9a04      	ldr	r2, [sp, #16]
 802160e:	b9d8      	cbnz	r0, 8021648 <_vfiprintf_r+0x110>
 8021610:	06d1      	lsls	r1, r2, #27
 8021612:	bf44      	itt	mi
 8021614:	2320      	movmi	r3, #32
 8021616:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802161a:	0713      	lsls	r3, r2, #28
 802161c:	bf44      	itt	mi
 802161e:	232b      	movmi	r3, #43	; 0x2b
 8021620:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8021624:	f89a 3000 	ldrb.w	r3, [sl]
 8021628:	2b2a      	cmp	r3, #42	; 0x2a
 802162a:	d015      	beq.n	8021658 <_vfiprintf_r+0x120>
 802162c:	9a07      	ldr	r2, [sp, #28]
 802162e:	4654      	mov	r4, sl
 8021630:	2000      	movs	r0, #0
 8021632:	f04f 0c0a 	mov.w	ip, #10
 8021636:	4621      	mov	r1, r4
 8021638:	f811 3b01 	ldrb.w	r3, [r1], #1
 802163c:	3b30      	subs	r3, #48	; 0x30
 802163e:	2b09      	cmp	r3, #9
 8021640:	d94d      	bls.n	80216de <_vfiprintf_r+0x1a6>
 8021642:	b1b0      	cbz	r0, 8021672 <_vfiprintf_r+0x13a>
 8021644:	9207      	str	r2, [sp, #28]
 8021646:	e014      	b.n	8021672 <_vfiprintf_r+0x13a>
 8021648:	eba0 0308 	sub.w	r3, r0, r8
 802164c:	fa09 f303 	lsl.w	r3, r9, r3
 8021650:	4313      	orrs	r3, r2
 8021652:	9304      	str	r3, [sp, #16]
 8021654:	46a2      	mov	sl, r4
 8021656:	e7d2      	b.n	80215fe <_vfiprintf_r+0xc6>
 8021658:	9b03      	ldr	r3, [sp, #12]
 802165a:	1d19      	adds	r1, r3, #4
 802165c:	681b      	ldr	r3, [r3, #0]
 802165e:	9103      	str	r1, [sp, #12]
 8021660:	2b00      	cmp	r3, #0
 8021662:	bfbb      	ittet	lt
 8021664:	425b      	neglt	r3, r3
 8021666:	f042 0202 	orrlt.w	r2, r2, #2
 802166a:	9307      	strge	r3, [sp, #28]
 802166c:	9307      	strlt	r3, [sp, #28]
 802166e:	bfb8      	it	lt
 8021670:	9204      	strlt	r2, [sp, #16]
 8021672:	7823      	ldrb	r3, [r4, #0]
 8021674:	2b2e      	cmp	r3, #46	; 0x2e
 8021676:	d10c      	bne.n	8021692 <_vfiprintf_r+0x15a>
 8021678:	7863      	ldrb	r3, [r4, #1]
 802167a:	2b2a      	cmp	r3, #42	; 0x2a
 802167c:	d134      	bne.n	80216e8 <_vfiprintf_r+0x1b0>
 802167e:	9b03      	ldr	r3, [sp, #12]
 8021680:	1d1a      	adds	r2, r3, #4
 8021682:	681b      	ldr	r3, [r3, #0]
 8021684:	9203      	str	r2, [sp, #12]
 8021686:	2b00      	cmp	r3, #0
 8021688:	bfb8      	it	lt
 802168a:	f04f 33ff 	movlt.w	r3, #4294967295
 802168e:	3402      	adds	r4, #2
 8021690:	9305      	str	r3, [sp, #20]
 8021692:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8021768 <_vfiprintf_r+0x230>
 8021696:	7821      	ldrb	r1, [r4, #0]
 8021698:	2203      	movs	r2, #3
 802169a:	4650      	mov	r0, sl
 802169c:	f7de fe28 	bl	80002f0 <memchr>
 80216a0:	b138      	cbz	r0, 80216b2 <_vfiprintf_r+0x17a>
 80216a2:	9b04      	ldr	r3, [sp, #16]
 80216a4:	eba0 000a 	sub.w	r0, r0, sl
 80216a8:	2240      	movs	r2, #64	; 0x40
 80216aa:	4082      	lsls	r2, r0
 80216ac:	4313      	orrs	r3, r2
 80216ae:	3401      	adds	r4, #1
 80216b0:	9304      	str	r3, [sp, #16]
 80216b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80216b6:	4829      	ldr	r0, [pc, #164]	; (802175c <_vfiprintf_r+0x224>)
 80216b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80216bc:	2206      	movs	r2, #6
 80216be:	f7de fe17 	bl	80002f0 <memchr>
 80216c2:	2800      	cmp	r0, #0
 80216c4:	d03f      	beq.n	8021746 <_vfiprintf_r+0x20e>
 80216c6:	4b26      	ldr	r3, [pc, #152]	; (8021760 <_vfiprintf_r+0x228>)
 80216c8:	bb1b      	cbnz	r3, 8021712 <_vfiprintf_r+0x1da>
 80216ca:	9b03      	ldr	r3, [sp, #12]
 80216cc:	3307      	adds	r3, #7
 80216ce:	f023 0307 	bic.w	r3, r3, #7
 80216d2:	3308      	adds	r3, #8
 80216d4:	9303      	str	r3, [sp, #12]
 80216d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80216d8:	443b      	add	r3, r7
 80216da:	9309      	str	r3, [sp, #36]	; 0x24
 80216dc:	e768      	b.n	80215b0 <_vfiprintf_r+0x78>
 80216de:	fb0c 3202 	mla	r2, ip, r2, r3
 80216e2:	460c      	mov	r4, r1
 80216e4:	2001      	movs	r0, #1
 80216e6:	e7a6      	b.n	8021636 <_vfiprintf_r+0xfe>
 80216e8:	2300      	movs	r3, #0
 80216ea:	3401      	adds	r4, #1
 80216ec:	9305      	str	r3, [sp, #20]
 80216ee:	4619      	mov	r1, r3
 80216f0:	f04f 0c0a 	mov.w	ip, #10
 80216f4:	4620      	mov	r0, r4
 80216f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80216fa:	3a30      	subs	r2, #48	; 0x30
 80216fc:	2a09      	cmp	r2, #9
 80216fe:	d903      	bls.n	8021708 <_vfiprintf_r+0x1d0>
 8021700:	2b00      	cmp	r3, #0
 8021702:	d0c6      	beq.n	8021692 <_vfiprintf_r+0x15a>
 8021704:	9105      	str	r1, [sp, #20]
 8021706:	e7c4      	b.n	8021692 <_vfiprintf_r+0x15a>
 8021708:	fb0c 2101 	mla	r1, ip, r1, r2
 802170c:	4604      	mov	r4, r0
 802170e:	2301      	movs	r3, #1
 8021710:	e7f0      	b.n	80216f4 <_vfiprintf_r+0x1bc>
 8021712:	ab03      	add	r3, sp, #12
 8021714:	9300      	str	r3, [sp, #0]
 8021716:	462a      	mov	r2, r5
 8021718:	4b12      	ldr	r3, [pc, #72]	; (8021764 <_vfiprintf_r+0x22c>)
 802171a:	a904      	add	r1, sp, #16
 802171c:	4630      	mov	r0, r6
 802171e:	f3af 8000 	nop.w
 8021722:	4607      	mov	r7, r0
 8021724:	1c78      	adds	r0, r7, #1
 8021726:	d1d6      	bne.n	80216d6 <_vfiprintf_r+0x19e>
 8021728:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802172a:	07d9      	lsls	r1, r3, #31
 802172c:	d405      	bmi.n	802173a <_vfiprintf_r+0x202>
 802172e:	89ab      	ldrh	r3, [r5, #12]
 8021730:	059a      	lsls	r2, r3, #22
 8021732:	d402      	bmi.n	802173a <_vfiprintf_r+0x202>
 8021734:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8021736:	f7ff fe1b 	bl	8021370 <__retarget_lock_release_recursive>
 802173a:	89ab      	ldrh	r3, [r5, #12]
 802173c:	065b      	lsls	r3, r3, #25
 802173e:	f53f af1d 	bmi.w	802157c <_vfiprintf_r+0x44>
 8021742:	9809      	ldr	r0, [sp, #36]	; 0x24
 8021744:	e71c      	b.n	8021580 <_vfiprintf_r+0x48>
 8021746:	ab03      	add	r3, sp, #12
 8021748:	9300      	str	r3, [sp, #0]
 802174a:	462a      	mov	r2, r5
 802174c:	4b05      	ldr	r3, [pc, #20]	; (8021764 <_vfiprintf_r+0x22c>)
 802174e:	a904      	add	r1, sp, #16
 8021750:	4630      	mov	r0, r6
 8021752:	f000 f879 	bl	8021848 <_printf_i>
 8021756:	e7e4      	b.n	8021722 <_vfiprintf_r+0x1ea>
 8021758:	08023810 	.word	0x08023810
 802175c:	0802381a 	.word	0x0802381a
 8021760:	00000000 	.word	0x00000000
 8021764:	08021513 	.word	0x08021513
 8021768:	08023816 	.word	0x08023816

0802176c <_printf_common>:
 802176c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021770:	4616      	mov	r6, r2
 8021772:	4699      	mov	r9, r3
 8021774:	688a      	ldr	r2, [r1, #8]
 8021776:	690b      	ldr	r3, [r1, #16]
 8021778:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802177c:	4293      	cmp	r3, r2
 802177e:	bfb8      	it	lt
 8021780:	4613      	movlt	r3, r2
 8021782:	6033      	str	r3, [r6, #0]
 8021784:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8021788:	4607      	mov	r7, r0
 802178a:	460c      	mov	r4, r1
 802178c:	b10a      	cbz	r2, 8021792 <_printf_common+0x26>
 802178e:	3301      	adds	r3, #1
 8021790:	6033      	str	r3, [r6, #0]
 8021792:	6823      	ldr	r3, [r4, #0]
 8021794:	0699      	lsls	r1, r3, #26
 8021796:	bf42      	ittt	mi
 8021798:	6833      	ldrmi	r3, [r6, #0]
 802179a:	3302      	addmi	r3, #2
 802179c:	6033      	strmi	r3, [r6, #0]
 802179e:	6825      	ldr	r5, [r4, #0]
 80217a0:	f015 0506 	ands.w	r5, r5, #6
 80217a4:	d106      	bne.n	80217b4 <_printf_common+0x48>
 80217a6:	f104 0a19 	add.w	sl, r4, #25
 80217aa:	68e3      	ldr	r3, [r4, #12]
 80217ac:	6832      	ldr	r2, [r6, #0]
 80217ae:	1a9b      	subs	r3, r3, r2
 80217b0:	42ab      	cmp	r3, r5
 80217b2:	dc26      	bgt.n	8021802 <_printf_common+0x96>
 80217b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80217b8:	1e13      	subs	r3, r2, #0
 80217ba:	6822      	ldr	r2, [r4, #0]
 80217bc:	bf18      	it	ne
 80217be:	2301      	movne	r3, #1
 80217c0:	0692      	lsls	r2, r2, #26
 80217c2:	d42b      	bmi.n	802181c <_printf_common+0xb0>
 80217c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80217c8:	4649      	mov	r1, r9
 80217ca:	4638      	mov	r0, r7
 80217cc:	47c0      	blx	r8
 80217ce:	3001      	adds	r0, #1
 80217d0:	d01e      	beq.n	8021810 <_printf_common+0xa4>
 80217d2:	6823      	ldr	r3, [r4, #0]
 80217d4:	6922      	ldr	r2, [r4, #16]
 80217d6:	f003 0306 	and.w	r3, r3, #6
 80217da:	2b04      	cmp	r3, #4
 80217dc:	bf02      	ittt	eq
 80217de:	68e5      	ldreq	r5, [r4, #12]
 80217e0:	6833      	ldreq	r3, [r6, #0]
 80217e2:	1aed      	subeq	r5, r5, r3
 80217e4:	68a3      	ldr	r3, [r4, #8]
 80217e6:	bf0c      	ite	eq
 80217e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80217ec:	2500      	movne	r5, #0
 80217ee:	4293      	cmp	r3, r2
 80217f0:	bfc4      	itt	gt
 80217f2:	1a9b      	subgt	r3, r3, r2
 80217f4:	18ed      	addgt	r5, r5, r3
 80217f6:	2600      	movs	r6, #0
 80217f8:	341a      	adds	r4, #26
 80217fa:	42b5      	cmp	r5, r6
 80217fc:	d11a      	bne.n	8021834 <_printf_common+0xc8>
 80217fe:	2000      	movs	r0, #0
 8021800:	e008      	b.n	8021814 <_printf_common+0xa8>
 8021802:	2301      	movs	r3, #1
 8021804:	4652      	mov	r2, sl
 8021806:	4649      	mov	r1, r9
 8021808:	4638      	mov	r0, r7
 802180a:	47c0      	blx	r8
 802180c:	3001      	adds	r0, #1
 802180e:	d103      	bne.n	8021818 <_printf_common+0xac>
 8021810:	f04f 30ff 	mov.w	r0, #4294967295
 8021814:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021818:	3501      	adds	r5, #1
 802181a:	e7c6      	b.n	80217aa <_printf_common+0x3e>
 802181c:	18e1      	adds	r1, r4, r3
 802181e:	1c5a      	adds	r2, r3, #1
 8021820:	2030      	movs	r0, #48	; 0x30
 8021822:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8021826:	4422      	add	r2, r4
 8021828:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802182c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8021830:	3302      	adds	r3, #2
 8021832:	e7c7      	b.n	80217c4 <_printf_common+0x58>
 8021834:	2301      	movs	r3, #1
 8021836:	4622      	mov	r2, r4
 8021838:	4649      	mov	r1, r9
 802183a:	4638      	mov	r0, r7
 802183c:	47c0      	blx	r8
 802183e:	3001      	adds	r0, #1
 8021840:	d0e6      	beq.n	8021810 <_printf_common+0xa4>
 8021842:	3601      	adds	r6, #1
 8021844:	e7d9      	b.n	80217fa <_printf_common+0x8e>
	...

08021848 <_printf_i>:
 8021848:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802184c:	7e0f      	ldrb	r7, [r1, #24]
 802184e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8021850:	2f78      	cmp	r7, #120	; 0x78
 8021852:	4691      	mov	r9, r2
 8021854:	4680      	mov	r8, r0
 8021856:	460c      	mov	r4, r1
 8021858:	469a      	mov	sl, r3
 802185a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 802185e:	d807      	bhi.n	8021870 <_printf_i+0x28>
 8021860:	2f62      	cmp	r7, #98	; 0x62
 8021862:	d80a      	bhi.n	802187a <_printf_i+0x32>
 8021864:	2f00      	cmp	r7, #0
 8021866:	f000 80d4 	beq.w	8021a12 <_printf_i+0x1ca>
 802186a:	2f58      	cmp	r7, #88	; 0x58
 802186c:	f000 80c0 	beq.w	80219f0 <_printf_i+0x1a8>
 8021870:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8021874:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8021878:	e03a      	b.n	80218f0 <_printf_i+0xa8>
 802187a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802187e:	2b15      	cmp	r3, #21
 8021880:	d8f6      	bhi.n	8021870 <_printf_i+0x28>
 8021882:	a101      	add	r1, pc, #4	; (adr r1, 8021888 <_printf_i+0x40>)
 8021884:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8021888:	080218e1 	.word	0x080218e1
 802188c:	080218f5 	.word	0x080218f5
 8021890:	08021871 	.word	0x08021871
 8021894:	08021871 	.word	0x08021871
 8021898:	08021871 	.word	0x08021871
 802189c:	08021871 	.word	0x08021871
 80218a0:	080218f5 	.word	0x080218f5
 80218a4:	08021871 	.word	0x08021871
 80218a8:	08021871 	.word	0x08021871
 80218ac:	08021871 	.word	0x08021871
 80218b0:	08021871 	.word	0x08021871
 80218b4:	080219f9 	.word	0x080219f9
 80218b8:	08021921 	.word	0x08021921
 80218bc:	080219b3 	.word	0x080219b3
 80218c0:	08021871 	.word	0x08021871
 80218c4:	08021871 	.word	0x08021871
 80218c8:	08021a1b 	.word	0x08021a1b
 80218cc:	08021871 	.word	0x08021871
 80218d0:	08021921 	.word	0x08021921
 80218d4:	08021871 	.word	0x08021871
 80218d8:	08021871 	.word	0x08021871
 80218dc:	080219bb 	.word	0x080219bb
 80218e0:	682b      	ldr	r3, [r5, #0]
 80218e2:	1d1a      	adds	r2, r3, #4
 80218e4:	681b      	ldr	r3, [r3, #0]
 80218e6:	602a      	str	r2, [r5, #0]
 80218e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80218ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80218f0:	2301      	movs	r3, #1
 80218f2:	e09f      	b.n	8021a34 <_printf_i+0x1ec>
 80218f4:	6820      	ldr	r0, [r4, #0]
 80218f6:	682b      	ldr	r3, [r5, #0]
 80218f8:	0607      	lsls	r7, r0, #24
 80218fa:	f103 0104 	add.w	r1, r3, #4
 80218fe:	6029      	str	r1, [r5, #0]
 8021900:	d501      	bpl.n	8021906 <_printf_i+0xbe>
 8021902:	681e      	ldr	r6, [r3, #0]
 8021904:	e003      	b.n	802190e <_printf_i+0xc6>
 8021906:	0646      	lsls	r6, r0, #25
 8021908:	d5fb      	bpl.n	8021902 <_printf_i+0xba>
 802190a:	f9b3 6000 	ldrsh.w	r6, [r3]
 802190e:	2e00      	cmp	r6, #0
 8021910:	da03      	bge.n	802191a <_printf_i+0xd2>
 8021912:	232d      	movs	r3, #45	; 0x2d
 8021914:	4276      	negs	r6, r6
 8021916:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802191a:	485a      	ldr	r0, [pc, #360]	; (8021a84 <_printf_i+0x23c>)
 802191c:	230a      	movs	r3, #10
 802191e:	e012      	b.n	8021946 <_printf_i+0xfe>
 8021920:	682b      	ldr	r3, [r5, #0]
 8021922:	6820      	ldr	r0, [r4, #0]
 8021924:	1d19      	adds	r1, r3, #4
 8021926:	6029      	str	r1, [r5, #0]
 8021928:	0605      	lsls	r5, r0, #24
 802192a:	d501      	bpl.n	8021930 <_printf_i+0xe8>
 802192c:	681e      	ldr	r6, [r3, #0]
 802192e:	e002      	b.n	8021936 <_printf_i+0xee>
 8021930:	0641      	lsls	r1, r0, #25
 8021932:	d5fb      	bpl.n	802192c <_printf_i+0xe4>
 8021934:	881e      	ldrh	r6, [r3, #0]
 8021936:	4853      	ldr	r0, [pc, #332]	; (8021a84 <_printf_i+0x23c>)
 8021938:	2f6f      	cmp	r7, #111	; 0x6f
 802193a:	bf0c      	ite	eq
 802193c:	2308      	moveq	r3, #8
 802193e:	230a      	movne	r3, #10
 8021940:	2100      	movs	r1, #0
 8021942:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8021946:	6865      	ldr	r5, [r4, #4]
 8021948:	60a5      	str	r5, [r4, #8]
 802194a:	2d00      	cmp	r5, #0
 802194c:	bfa2      	ittt	ge
 802194e:	6821      	ldrge	r1, [r4, #0]
 8021950:	f021 0104 	bicge.w	r1, r1, #4
 8021954:	6021      	strge	r1, [r4, #0]
 8021956:	b90e      	cbnz	r6, 802195c <_printf_i+0x114>
 8021958:	2d00      	cmp	r5, #0
 802195a:	d04b      	beq.n	80219f4 <_printf_i+0x1ac>
 802195c:	4615      	mov	r5, r2
 802195e:	fbb6 f1f3 	udiv	r1, r6, r3
 8021962:	fb03 6711 	mls	r7, r3, r1, r6
 8021966:	5dc7      	ldrb	r7, [r0, r7]
 8021968:	f805 7d01 	strb.w	r7, [r5, #-1]!
 802196c:	4637      	mov	r7, r6
 802196e:	42bb      	cmp	r3, r7
 8021970:	460e      	mov	r6, r1
 8021972:	d9f4      	bls.n	802195e <_printf_i+0x116>
 8021974:	2b08      	cmp	r3, #8
 8021976:	d10b      	bne.n	8021990 <_printf_i+0x148>
 8021978:	6823      	ldr	r3, [r4, #0]
 802197a:	07de      	lsls	r6, r3, #31
 802197c:	d508      	bpl.n	8021990 <_printf_i+0x148>
 802197e:	6923      	ldr	r3, [r4, #16]
 8021980:	6861      	ldr	r1, [r4, #4]
 8021982:	4299      	cmp	r1, r3
 8021984:	bfde      	ittt	le
 8021986:	2330      	movle	r3, #48	; 0x30
 8021988:	f805 3c01 	strble.w	r3, [r5, #-1]
 802198c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8021990:	1b52      	subs	r2, r2, r5
 8021992:	6122      	str	r2, [r4, #16]
 8021994:	f8cd a000 	str.w	sl, [sp]
 8021998:	464b      	mov	r3, r9
 802199a:	aa03      	add	r2, sp, #12
 802199c:	4621      	mov	r1, r4
 802199e:	4640      	mov	r0, r8
 80219a0:	f7ff fee4 	bl	802176c <_printf_common>
 80219a4:	3001      	adds	r0, #1
 80219a6:	d14a      	bne.n	8021a3e <_printf_i+0x1f6>
 80219a8:	f04f 30ff 	mov.w	r0, #4294967295
 80219ac:	b004      	add	sp, #16
 80219ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80219b2:	6823      	ldr	r3, [r4, #0]
 80219b4:	f043 0320 	orr.w	r3, r3, #32
 80219b8:	6023      	str	r3, [r4, #0]
 80219ba:	4833      	ldr	r0, [pc, #204]	; (8021a88 <_printf_i+0x240>)
 80219bc:	2778      	movs	r7, #120	; 0x78
 80219be:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80219c2:	6823      	ldr	r3, [r4, #0]
 80219c4:	6829      	ldr	r1, [r5, #0]
 80219c6:	061f      	lsls	r7, r3, #24
 80219c8:	f851 6b04 	ldr.w	r6, [r1], #4
 80219cc:	d402      	bmi.n	80219d4 <_printf_i+0x18c>
 80219ce:	065f      	lsls	r7, r3, #25
 80219d0:	bf48      	it	mi
 80219d2:	b2b6      	uxthmi	r6, r6
 80219d4:	07df      	lsls	r7, r3, #31
 80219d6:	bf48      	it	mi
 80219d8:	f043 0320 	orrmi.w	r3, r3, #32
 80219dc:	6029      	str	r1, [r5, #0]
 80219de:	bf48      	it	mi
 80219e0:	6023      	strmi	r3, [r4, #0]
 80219e2:	b91e      	cbnz	r6, 80219ec <_printf_i+0x1a4>
 80219e4:	6823      	ldr	r3, [r4, #0]
 80219e6:	f023 0320 	bic.w	r3, r3, #32
 80219ea:	6023      	str	r3, [r4, #0]
 80219ec:	2310      	movs	r3, #16
 80219ee:	e7a7      	b.n	8021940 <_printf_i+0xf8>
 80219f0:	4824      	ldr	r0, [pc, #144]	; (8021a84 <_printf_i+0x23c>)
 80219f2:	e7e4      	b.n	80219be <_printf_i+0x176>
 80219f4:	4615      	mov	r5, r2
 80219f6:	e7bd      	b.n	8021974 <_printf_i+0x12c>
 80219f8:	682b      	ldr	r3, [r5, #0]
 80219fa:	6826      	ldr	r6, [r4, #0]
 80219fc:	6961      	ldr	r1, [r4, #20]
 80219fe:	1d18      	adds	r0, r3, #4
 8021a00:	6028      	str	r0, [r5, #0]
 8021a02:	0635      	lsls	r5, r6, #24
 8021a04:	681b      	ldr	r3, [r3, #0]
 8021a06:	d501      	bpl.n	8021a0c <_printf_i+0x1c4>
 8021a08:	6019      	str	r1, [r3, #0]
 8021a0a:	e002      	b.n	8021a12 <_printf_i+0x1ca>
 8021a0c:	0670      	lsls	r0, r6, #25
 8021a0e:	d5fb      	bpl.n	8021a08 <_printf_i+0x1c0>
 8021a10:	8019      	strh	r1, [r3, #0]
 8021a12:	2300      	movs	r3, #0
 8021a14:	6123      	str	r3, [r4, #16]
 8021a16:	4615      	mov	r5, r2
 8021a18:	e7bc      	b.n	8021994 <_printf_i+0x14c>
 8021a1a:	682b      	ldr	r3, [r5, #0]
 8021a1c:	1d1a      	adds	r2, r3, #4
 8021a1e:	602a      	str	r2, [r5, #0]
 8021a20:	681d      	ldr	r5, [r3, #0]
 8021a22:	6862      	ldr	r2, [r4, #4]
 8021a24:	2100      	movs	r1, #0
 8021a26:	4628      	mov	r0, r5
 8021a28:	f7de fc62 	bl	80002f0 <memchr>
 8021a2c:	b108      	cbz	r0, 8021a32 <_printf_i+0x1ea>
 8021a2e:	1b40      	subs	r0, r0, r5
 8021a30:	6060      	str	r0, [r4, #4]
 8021a32:	6863      	ldr	r3, [r4, #4]
 8021a34:	6123      	str	r3, [r4, #16]
 8021a36:	2300      	movs	r3, #0
 8021a38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8021a3c:	e7aa      	b.n	8021994 <_printf_i+0x14c>
 8021a3e:	6923      	ldr	r3, [r4, #16]
 8021a40:	462a      	mov	r2, r5
 8021a42:	4649      	mov	r1, r9
 8021a44:	4640      	mov	r0, r8
 8021a46:	47d0      	blx	sl
 8021a48:	3001      	adds	r0, #1
 8021a4a:	d0ad      	beq.n	80219a8 <_printf_i+0x160>
 8021a4c:	6823      	ldr	r3, [r4, #0]
 8021a4e:	079b      	lsls	r3, r3, #30
 8021a50:	d413      	bmi.n	8021a7a <_printf_i+0x232>
 8021a52:	68e0      	ldr	r0, [r4, #12]
 8021a54:	9b03      	ldr	r3, [sp, #12]
 8021a56:	4298      	cmp	r0, r3
 8021a58:	bfb8      	it	lt
 8021a5a:	4618      	movlt	r0, r3
 8021a5c:	e7a6      	b.n	80219ac <_printf_i+0x164>
 8021a5e:	2301      	movs	r3, #1
 8021a60:	4632      	mov	r2, r6
 8021a62:	4649      	mov	r1, r9
 8021a64:	4640      	mov	r0, r8
 8021a66:	47d0      	blx	sl
 8021a68:	3001      	adds	r0, #1
 8021a6a:	d09d      	beq.n	80219a8 <_printf_i+0x160>
 8021a6c:	3501      	adds	r5, #1
 8021a6e:	68e3      	ldr	r3, [r4, #12]
 8021a70:	9903      	ldr	r1, [sp, #12]
 8021a72:	1a5b      	subs	r3, r3, r1
 8021a74:	42ab      	cmp	r3, r5
 8021a76:	dcf2      	bgt.n	8021a5e <_printf_i+0x216>
 8021a78:	e7eb      	b.n	8021a52 <_printf_i+0x20a>
 8021a7a:	2500      	movs	r5, #0
 8021a7c:	f104 0619 	add.w	r6, r4, #25
 8021a80:	e7f5      	b.n	8021a6e <_printf_i+0x226>
 8021a82:	bf00      	nop
 8021a84:	08023821 	.word	0x08023821
 8021a88:	08023832 	.word	0x08023832

08021a8c <__sflush_r>:
 8021a8c:	898a      	ldrh	r2, [r1, #12]
 8021a8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021a92:	4605      	mov	r5, r0
 8021a94:	0710      	lsls	r0, r2, #28
 8021a96:	460c      	mov	r4, r1
 8021a98:	d458      	bmi.n	8021b4c <__sflush_r+0xc0>
 8021a9a:	684b      	ldr	r3, [r1, #4]
 8021a9c:	2b00      	cmp	r3, #0
 8021a9e:	dc05      	bgt.n	8021aac <__sflush_r+0x20>
 8021aa0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8021aa2:	2b00      	cmp	r3, #0
 8021aa4:	dc02      	bgt.n	8021aac <__sflush_r+0x20>
 8021aa6:	2000      	movs	r0, #0
 8021aa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021aac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8021aae:	2e00      	cmp	r6, #0
 8021ab0:	d0f9      	beq.n	8021aa6 <__sflush_r+0x1a>
 8021ab2:	2300      	movs	r3, #0
 8021ab4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8021ab8:	682f      	ldr	r7, [r5, #0]
 8021aba:	6a21      	ldr	r1, [r4, #32]
 8021abc:	602b      	str	r3, [r5, #0]
 8021abe:	d032      	beq.n	8021b26 <__sflush_r+0x9a>
 8021ac0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8021ac2:	89a3      	ldrh	r3, [r4, #12]
 8021ac4:	075a      	lsls	r2, r3, #29
 8021ac6:	d505      	bpl.n	8021ad4 <__sflush_r+0x48>
 8021ac8:	6863      	ldr	r3, [r4, #4]
 8021aca:	1ac0      	subs	r0, r0, r3
 8021acc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8021ace:	b10b      	cbz	r3, 8021ad4 <__sflush_r+0x48>
 8021ad0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8021ad2:	1ac0      	subs	r0, r0, r3
 8021ad4:	2300      	movs	r3, #0
 8021ad6:	4602      	mov	r2, r0
 8021ad8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8021ada:	6a21      	ldr	r1, [r4, #32]
 8021adc:	4628      	mov	r0, r5
 8021ade:	47b0      	blx	r6
 8021ae0:	1c43      	adds	r3, r0, #1
 8021ae2:	89a3      	ldrh	r3, [r4, #12]
 8021ae4:	d106      	bne.n	8021af4 <__sflush_r+0x68>
 8021ae6:	6829      	ldr	r1, [r5, #0]
 8021ae8:	291d      	cmp	r1, #29
 8021aea:	d82b      	bhi.n	8021b44 <__sflush_r+0xb8>
 8021aec:	4a29      	ldr	r2, [pc, #164]	; (8021b94 <__sflush_r+0x108>)
 8021aee:	410a      	asrs	r2, r1
 8021af0:	07d6      	lsls	r6, r2, #31
 8021af2:	d427      	bmi.n	8021b44 <__sflush_r+0xb8>
 8021af4:	2200      	movs	r2, #0
 8021af6:	6062      	str	r2, [r4, #4]
 8021af8:	04d9      	lsls	r1, r3, #19
 8021afa:	6922      	ldr	r2, [r4, #16]
 8021afc:	6022      	str	r2, [r4, #0]
 8021afe:	d504      	bpl.n	8021b0a <__sflush_r+0x7e>
 8021b00:	1c42      	adds	r2, r0, #1
 8021b02:	d101      	bne.n	8021b08 <__sflush_r+0x7c>
 8021b04:	682b      	ldr	r3, [r5, #0]
 8021b06:	b903      	cbnz	r3, 8021b0a <__sflush_r+0x7e>
 8021b08:	6560      	str	r0, [r4, #84]	; 0x54
 8021b0a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8021b0c:	602f      	str	r7, [r5, #0]
 8021b0e:	2900      	cmp	r1, #0
 8021b10:	d0c9      	beq.n	8021aa6 <__sflush_r+0x1a>
 8021b12:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8021b16:	4299      	cmp	r1, r3
 8021b18:	d002      	beq.n	8021b20 <__sflush_r+0x94>
 8021b1a:	4628      	mov	r0, r5
 8021b1c:	f7ff fc96 	bl	802144c <_free_r>
 8021b20:	2000      	movs	r0, #0
 8021b22:	6360      	str	r0, [r4, #52]	; 0x34
 8021b24:	e7c0      	b.n	8021aa8 <__sflush_r+0x1c>
 8021b26:	2301      	movs	r3, #1
 8021b28:	4628      	mov	r0, r5
 8021b2a:	47b0      	blx	r6
 8021b2c:	1c41      	adds	r1, r0, #1
 8021b2e:	d1c8      	bne.n	8021ac2 <__sflush_r+0x36>
 8021b30:	682b      	ldr	r3, [r5, #0]
 8021b32:	2b00      	cmp	r3, #0
 8021b34:	d0c5      	beq.n	8021ac2 <__sflush_r+0x36>
 8021b36:	2b1d      	cmp	r3, #29
 8021b38:	d001      	beq.n	8021b3e <__sflush_r+0xb2>
 8021b3a:	2b16      	cmp	r3, #22
 8021b3c:	d101      	bne.n	8021b42 <__sflush_r+0xb6>
 8021b3e:	602f      	str	r7, [r5, #0]
 8021b40:	e7b1      	b.n	8021aa6 <__sflush_r+0x1a>
 8021b42:	89a3      	ldrh	r3, [r4, #12]
 8021b44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021b48:	81a3      	strh	r3, [r4, #12]
 8021b4a:	e7ad      	b.n	8021aa8 <__sflush_r+0x1c>
 8021b4c:	690f      	ldr	r7, [r1, #16]
 8021b4e:	2f00      	cmp	r7, #0
 8021b50:	d0a9      	beq.n	8021aa6 <__sflush_r+0x1a>
 8021b52:	0793      	lsls	r3, r2, #30
 8021b54:	680e      	ldr	r6, [r1, #0]
 8021b56:	bf08      	it	eq
 8021b58:	694b      	ldreq	r3, [r1, #20]
 8021b5a:	600f      	str	r7, [r1, #0]
 8021b5c:	bf18      	it	ne
 8021b5e:	2300      	movne	r3, #0
 8021b60:	eba6 0807 	sub.w	r8, r6, r7
 8021b64:	608b      	str	r3, [r1, #8]
 8021b66:	f1b8 0f00 	cmp.w	r8, #0
 8021b6a:	dd9c      	ble.n	8021aa6 <__sflush_r+0x1a>
 8021b6c:	6a21      	ldr	r1, [r4, #32]
 8021b6e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8021b70:	4643      	mov	r3, r8
 8021b72:	463a      	mov	r2, r7
 8021b74:	4628      	mov	r0, r5
 8021b76:	47b0      	blx	r6
 8021b78:	2800      	cmp	r0, #0
 8021b7a:	dc06      	bgt.n	8021b8a <__sflush_r+0xfe>
 8021b7c:	89a3      	ldrh	r3, [r4, #12]
 8021b7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021b82:	81a3      	strh	r3, [r4, #12]
 8021b84:	f04f 30ff 	mov.w	r0, #4294967295
 8021b88:	e78e      	b.n	8021aa8 <__sflush_r+0x1c>
 8021b8a:	4407      	add	r7, r0
 8021b8c:	eba8 0800 	sub.w	r8, r8, r0
 8021b90:	e7e9      	b.n	8021b66 <__sflush_r+0xda>
 8021b92:	bf00      	nop
 8021b94:	dfbffffe 	.word	0xdfbffffe

08021b98 <_fflush_r>:
 8021b98:	b538      	push	{r3, r4, r5, lr}
 8021b9a:	690b      	ldr	r3, [r1, #16]
 8021b9c:	4605      	mov	r5, r0
 8021b9e:	460c      	mov	r4, r1
 8021ba0:	b913      	cbnz	r3, 8021ba8 <_fflush_r+0x10>
 8021ba2:	2500      	movs	r5, #0
 8021ba4:	4628      	mov	r0, r5
 8021ba6:	bd38      	pop	{r3, r4, r5, pc}
 8021ba8:	b118      	cbz	r0, 8021bb2 <_fflush_r+0x1a>
 8021baa:	6a03      	ldr	r3, [r0, #32]
 8021bac:	b90b      	cbnz	r3, 8021bb2 <_fflush_r+0x1a>
 8021bae:	f7ff fa85 	bl	80210bc <__sinit>
 8021bb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021bb6:	2b00      	cmp	r3, #0
 8021bb8:	d0f3      	beq.n	8021ba2 <_fflush_r+0xa>
 8021bba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8021bbc:	07d0      	lsls	r0, r2, #31
 8021bbe:	d404      	bmi.n	8021bca <_fflush_r+0x32>
 8021bc0:	0599      	lsls	r1, r3, #22
 8021bc2:	d402      	bmi.n	8021bca <_fflush_r+0x32>
 8021bc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021bc6:	f7ff fbd2 	bl	802136e <__retarget_lock_acquire_recursive>
 8021bca:	4628      	mov	r0, r5
 8021bcc:	4621      	mov	r1, r4
 8021bce:	f7ff ff5d 	bl	8021a8c <__sflush_r>
 8021bd2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8021bd4:	07da      	lsls	r2, r3, #31
 8021bd6:	4605      	mov	r5, r0
 8021bd8:	d4e4      	bmi.n	8021ba4 <_fflush_r+0xc>
 8021bda:	89a3      	ldrh	r3, [r4, #12]
 8021bdc:	059b      	lsls	r3, r3, #22
 8021bde:	d4e1      	bmi.n	8021ba4 <_fflush_r+0xc>
 8021be0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021be2:	f7ff fbc5 	bl	8021370 <__retarget_lock_release_recursive>
 8021be6:	e7dd      	b.n	8021ba4 <_fflush_r+0xc>

08021be8 <__swbuf_r>:
 8021be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021bea:	460e      	mov	r6, r1
 8021bec:	4614      	mov	r4, r2
 8021bee:	4605      	mov	r5, r0
 8021bf0:	b118      	cbz	r0, 8021bfa <__swbuf_r+0x12>
 8021bf2:	6a03      	ldr	r3, [r0, #32]
 8021bf4:	b90b      	cbnz	r3, 8021bfa <__swbuf_r+0x12>
 8021bf6:	f7ff fa61 	bl	80210bc <__sinit>
 8021bfa:	69a3      	ldr	r3, [r4, #24]
 8021bfc:	60a3      	str	r3, [r4, #8]
 8021bfe:	89a3      	ldrh	r3, [r4, #12]
 8021c00:	071a      	lsls	r2, r3, #28
 8021c02:	d525      	bpl.n	8021c50 <__swbuf_r+0x68>
 8021c04:	6923      	ldr	r3, [r4, #16]
 8021c06:	b31b      	cbz	r3, 8021c50 <__swbuf_r+0x68>
 8021c08:	6823      	ldr	r3, [r4, #0]
 8021c0a:	6922      	ldr	r2, [r4, #16]
 8021c0c:	1a98      	subs	r0, r3, r2
 8021c0e:	6963      	ldr	r3, [r4, #20]
 8021c10:	b2f6      	uxtb	r6, r6
 8021c12:	4283      	cmp	r3, r0
 8021c14:	4637      	mov	r7, r6
 8021c16:	dc04      	bgt.n	8021c22 <__swbuf_r+0x3a>
 8021c18:	4621      	mov	r1, r4
 8021c1a:	4628      	mov	r0, r5
 8021c1c:	f7ff ffbc 	bl	8021b98 <_fflush_r>
 8021c20:	b9e0      	cbnz	r0, 8021c5c <__swbuf_r+0x74>
 8021c22:	68a3      	ldr	r3, [r4, #8]
 8021c24:	3b01      	subs	r3, #1
 8021c26:	60a3      	str	r3, [r4, #8]
 8021c28:	6823      	ldr	r3, [r4, #0]
 8021c2a:	1c5a      	adds	r2, r3, #1
 8021c2c:	6022      	str	r2, [r4, #0]
 8021c2e:	701e      	strb	r6, [r3, #0]
 8021c30:	6962      	ldr	r2, [r4, #20]
 8021c32:	1c43      	adds	r3, r0, #1
 8021c34:	429a      	cmp	r2, r3
 8021c36:	d004      	beq.n	8021c42 <__swbuf_r+0x5a>
 8021c38:	89a3      	ldrh	r3, [r4, #12]
 8021c3a:	07db      	lsls	r3, r3, #31
 8021c3c:	d506      	bpl.n	8021c4c <__swbuf_r+0x64>
 8021c3e:	2e0a      	cmp	r6, #10
 8021c40:	d104      	bne.n	8021c4c <__swbuf_r+0x64>
 8021c42:	4621      	mov	r1, r4
 8021c44:	4628      	mov	r0, r5
 8021c46:	f7ff ffa7 	bl	8021b98 <_fflush_r>
 8021c4a:	b938      	cbnz	r0, 8021c5c <__swbuf_r+0x74>
 8021c4c:	4638      	mov	r0, r7
 8021c4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021c50:	4621      	mov	r1, r4
 8021c52:	4628      	mov	r0, r5
 8021c54:	f000 f806 	bl	8021c64 <__swsetup_r>
 8021c58:	2800      	cmp	r0, #0
 8021c5a:	d0d5      	beq.n	8021c08 <__swbuf_r+0x20>
 8021c5c:	f04f 37ff 	mov.w	r7, #4294967295
 8021c60:	e7f4      	b.n	8021c4c <__swbuf_r+0x64>
	...

08021c64 <__swsetup_r>:
 8021c64:	b538      	push	{r3, r4, r5, lr}
 8021c66:	4b2a      	ldr	r3, [pc, #168]	; (8021d10 <__swsetup_r+0xac>)
 8021c68:	4605      	mov	r5, r0
 8021c6a:	6818      	ldr	r0, [r3, #0]
 8021c6c:	460c      	mov	r4, r1
 8021c6e:	b118      	cbz	r0, 8021c78 <__swsetup_r+0x14>
 8021c70:	6a03      	ldr	r3, [r0, #32]
 8021c72:	b90b      	cbnz	r3, 8021c78 <__swsetup_r+0x14>
 8021c74:	f7ff fa22 	bl	80210bc <__sinit>
 8021c78:	89a3      	ldrh	r3, [r4, #12]
 8021c7a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8021c7e:	0718      	lsls	r0, r3, #28
 8021c80:	d422      	bmi.n	8021cc8 <__swsetup_r+0x64>
 8021c82:	06d9      	lsls	r1, r3, #27
 8021c84:	d407      	bmi.n	8021c96 <__swsetup_r+0x32>
 8021c86:	2309      	movs	r3, #9
 8021c88:	602b      	str	r3, [r5, #0]
 8021c8a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8021c8e:	81a3      	strh	r3, [r4, #12]
 8021c90:	f04f 30ff 	mov.w	r0, #4294967295
 8021c94:	e034      	b.n	8021d00 <__swsetup_r+0x9c>
 8021c96:	0758      	lsls	r0, r3, #29
 8021c98:	d512      	bpl.n	8021cc0 <__swsetup_r+0x5c>
 8021c9a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8021c9c:	b141      	cbz	r1, 8021cb0 <__swsetup_r+0x4c>
 8021c9e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8021ca2:	4299      	cmp	r1, r3
 8021ca4:	d002      	beq.n	8021cac <__swsetup_r+0x48>
 8021ca6:	4628      	mov	r0, r5
 8021ca8:	f7ff fbd0 	bl	802144c <_free_r>
 8021cac:	2300      	movs	r3, #0
 8021cae:	6363      	str	r3, [r4, #52]	; 0x34
 8021cb0:	89a3      	ldrh	r3, [r4, #12]
 8021cb2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8021cb6:	81a3      	strh	r3, [r4, #12]
 8021cb8:	2300      	movs	r3, #0
 8021cba:	6063      	str	r3, [r4, #4]
 8021cbc:	6923      	ldr	r3, [r4, #16]
 8021cbe:	6023      	str	r3, [r4, #0]
 8021cc0:	89a3      	ldrh	r3, [r4, #12]
 8021cc2:	f043 0308 	orr.w	r3, r3, #8
 8021cc6:	81a3      	strh	r3, [r4, #12]
 8021cc8:	6923      	ldr	r3, [r4, #16]
 8021cca:	b94b      	cbnz	r3, 8021ce0 <__swsetup_r+0x7c>
 8021ccc:	89a3      	ldrh	r3, [r4, #12]
 8021cce:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8021cd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8021cd6:	d003      	beq.n	8021ce0 <__swsetup_r+0x7c>
 8021cd8:	4621      	mov	r1, r4
 8021cda:	4628      	mov	r0, r5
 8021cdc:	f000 f840 	bl	8021d60 <__smakebuf_r>
 8021ce0:	89a0      	ldrh	r0, [r4, #12]
 8021ce2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8021ce6:	f010 0301 	ands.w	r3, r0, #1
 8021cea:	d00a      	beq.n	8021d02 <__swsetup_r+0x9e>
 8021cec:	2300      	movs	r3, #0
 8021cee:	60a3      	str	r3, [r4, #8]
 8021cf0:	6963      	ldr	r3, [r4, #20]
 8021cf2:	425b      	negs	r3, r3
 8021cf4:	61a3      	str	r3, [r4, #24]
 8021cf6:	6923      	ldr	r3, [r4, #16]
 8021cf8:	b943      	cbnz	r3, 8021d0c <__swsetup_r+0xa8>
 8021cfa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8021cfe:	d1c4      	bne.n	8021c8a <__swsetup_r+0x26>
 8021d00:	bd38      	pop	{r3, r4, r5, pc}
 8021d02:	0781      	lsls	r1, r0, #30
 8021d04:	bf58      	it	pl
 8021d06:	6963      	ldrpl	r3, [r4, #20]
 8021d08:	60a3      	str	r3, [r4, #8]
 8021d0a:	e7f4      	b.n	8021cf6 <__swsetup_r+0x92>
 8021d0c:	2000      	movs	r0, #0
 8021d0e:	e7f7      	b.n	8021d00 <__swsetup_r+0x9c>
 8021d10:	24000108 	.word	0x24000108

08021d14 <__swhatbuf_r>:
 8021d14:	b570      	push	{r4, r5, r6, lr}
 8021d16:	460c      	mov	r4, r1
 8021d18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021d1c:	2900      	cmp	r1, #0
 8021d1e:	b096      	sub	sp, #88	; 0x58
 8021d20:	4615      	mov	r5, r2
 8021d22:	461e      	mov	r6, r3
 8021d24:	da0d      	bge.n	8021d42 <__swhatbuf_r+0x2e>
 8021d26:	89a3      	ldrh	r3, [r4, #12]
 8021d28:	f013 0f80 	tst.w	r3, #128	; 0x80
 8021d2c:	f04f 0100 	mov.w	r1, #0
 8021d30:	bf0c      	ite	eq
 8021d32:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8021d36:	2340      	movne	r3, #64	; 0x40
 8021d38:	2000      	movs	r0, #0
 8021d3a:	6031      	str	r1, [r6, #0]
 8021d3c:	602b      	str	r3, [r5, #0]
 8021d3e:	b016      	add	sp, #88	; 0x58
 8021d40:	bd70      	pop	{r4, r5, r6, pc}
 8021d42:	466a      	mov	r2, sp
 8021d44:	f000 f848 	bl	8021dd8 <_fstat_r>
 8021d48:	2800      	cmp	r0, #0
 8021d4a:	dbec      	blt.n	8021d26 <__swhatbuf_r+0x12>
 8021d4c:	9901      	ldr	r1, [sp, #4]
 8021d4e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8021d52:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8021d56:	4259      	negs	r1, r3
 8021d58:	4159      	adcs	r1, r3
 8021d5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8021d5e:	e7eb      	b.n	8021d38 <__swhatbuf_r+0x24>

08021d60 <__smakebuf_r>:
 8021d60:	898b      	ldrh	r3, [r1, #12]
 8021d62:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8021d64:	079d      	lsls	r5, r3, #30
 8021d66:	4606      	mov	r6, r0
 8021d68:	460c      	mov	r4, r1
 8021d6a:	d507      	bpl.n	8021d7c <__smakebuf_r+0x1c>
 8021d6c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8021d70:	6023      	str	r3, [r4, #0]
 8021d72:	6123      	str	r3, [r4, #16]
 8021d74:	2301      	movs	r3, #1
 8021d76:	6163      	str	r3, [r4, #20]
 8021d78:	b002      	add	sp, #8
 8021d7a:	bd70      	pop	{r4, r5, r6, pc}
 8021d7c:	ab01      	add	r3, sp, #4
 8021d7e:	466a      	mov	r2, sp
 8021d80:	f7ff ffc8 	bl	8021d14 <__swhatbuf_r>
 8021d84:	9900      	ldr	r1, [sp, #0]
 8021d86:	4605      	mov	r5, r0
 8021d88:	4630      	mov	r0, r6
 8021d8a:	f7ff f871 	bl	8020e70 <_malloc_r>
 8021d8e:	b948      	cbnz	r0, 8021da4 <__smakebuf_r+0x44>
 8021d90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021d94:	059a      	lsls	r2, r3, #22
 8021d96:	d4ef      	bmi.n	8021d78 <__smakebuf_r+0x18>
 8021d98:	f023 0303 	bic.w	r3, r3, #3
 8021d9c:	f043 0302 	orr.w	r3, r3, #2
 8021da0:	81a3      	strh	r3, [r4, #12]
 8021da2:	e7e3      	b.n	8021d6c <__smakebuf_r+0xc>
 8021da4:	89a3      	ldrh	r3, [r4, #12]
 8021da6:	6020      	str	r0, [r4, #0]
 8021da8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8021dac:	81a3      	strh	r3, [r4, #12]
 8021dae:	9b00      	ldr	r3, [sp, #0]
 8021db0:	6163      	str	r3, [r4, #20]
 8021db2:	9b01      	ldr	r3, [sp, #4]
 8021db4:	6120      	str	r0, [r4, #16]
 8021db6:	b15b      	cbz	r3, 8021dd0 <__smakebuf_r+0x70>
 8021db8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8021dbc:	4630      	mov	r0, r6
 8021dbe:	f000 f81d 	bl	8021dfc <_isatty_r>
 8021dc2:	b128      	cbz	r0, 8021dd0 <__smakebuf_r+0x70>
 8021dc4:	89a3      	ldrh	r3, [r4, #12]
 8021dc6:	f023 0303 	bic.w	r3, r3, #3
 8021dca:	f043 0301 	orr.w	r3, r3, #1
 8021dce:	81a3      	strh	r3, [r4, #12]
 8021dd0:	89a3      	ldrh	r3, [r4, #12]
 8021dd2:	431d      	orrs	r5, r3
 8021dd4:	81a5      	strh	r5, [r4, #12]
 8021dd6:	e7cf      	b.n	8021d78 <__smakebuf_r+0x18>

08021dd8 <_fstat_r>:
 8021dd8:	b538      	push	{r3, r4, r5, lr}
 8021dda:	4d07      	ldr	r5, [pc, #28]	; (8021df8 <_fstat_r+0x20>)
 8021ddc:	2300      	movs	r3, #0
 8021dde:	4604      	mov	r4, r0
 8021de0:	4608      	mov	r0, r1
 8021de2:	4611      	mov	r1, r2
 8021de4:	602b      	str	r3, [r5, #0]
 8021de6:	f7df fa94 	bl	8001312 <_fstat>
 8021dea:	1c43      	adds	r3, r0, #1
 8021dec:	d102      	bne.n	8021df4 <_fstat_r+0x1c>
 8021dee:	682b      	ldr	r3, [r5, #0]
 8021df0:	b103      	cbz	r3, 8021df4 <_fstat_r+0x1c>
 8021df2:	6023      	str	r3, [r4, #0]
 8021df4:	bd38      	pop	{r3, r4, r5, pc}
 8021df6:	bf00      	nop
 8021df8:	24007414 	.word	0x24007414

08021dfc <_isatty_r>:
 8021dfc:	b538      	push	{r3, r4, r5, lr}
 8021dfe:	4d06      	ldr	r5, [pc, #24]	; (8021e18 <_isatty_r+0x1c>)
 8021e00:	2300      	movs	r3, #0
 8021e02:	4604      	mov	r4, r0
 8021e04:	4608      	mov	r0, r1
 8021e06:	602b      	str	r3, [r5, #0]
 8021e08:	f7df fa93 	bl	8001332 <_isatty>
 8021e0c:	1c43      	adds	r3, r0, #1
 8021e0e:	d102      	bne.n	8021e16 <_isatty_r+0x1a>
 8021e10:	682b      	ldr	r3, [r5, #0]
 8021e12:	b103      	cbz	r3, 8021e16 <_isatty_r+0x1a>
 8021e14:	6023      	str	r3, [r4, #0]
 8021e16:	bd38      	pop	{r3, r4, r5, pc}
 8021e18:	24007414 	.word	0x24007414

08021e1c <_init>:
 8021e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021e1e:	bf00      	nop
 8021e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021e22:	bc08      	pop	{r3}
 8021e24:	469e      	mov	lr, r3
 8021e26:	4770      	bx	lr

08021e28 <_fini>:
 8021e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021e2a:	bf00      	nop
 8021e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021e2e:	bc08      	pop	{r3}
 8021e30:	469e      	mov	lr, r3
 8021e32:	4770      	bx	lr
